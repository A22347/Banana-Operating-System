
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 5d 9d 00 00       	call   c0009d7d <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 15 29 02 00       	call   c002293a <_init>
c0000025:	c3                   	ret    
c0000026:	bb 82 34 02 c0       	mov    ebx,0xc0023482
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 90 34 02 c0    	cmp    ebx,0xc0023490
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 44 79 02 c0       	mov    eax,0xc0027944
c0000049:	3d 44 79 02 c0       	cmp    eax,0xc0027944
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 44 79 02 c0       	push   0xc0027944
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 44 79 02 c0       	mov    eax,0xc0027944
c0000075:	2d 44 79 02 c0       	sub    eax,0xc0027944
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 44 79 02 c0       	push   0xc0027944
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d cc 7a 02 c0 00 	cmp    BYTE PTR ds:0xc0027acc,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 98 34 02 c0       	mov    ebx,0xc0023498
c00000bb:	81 eb 94 34 02 c0    	sub    ebx,0xc0023494
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 94 34 02 c0       	mov    esi,0xc0023494
c00000ca:	a1 d0 7a 02 c0       	mov    eax,ds:0xc0027ad0
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 d0 7a 02 c0       	mov    ds:0xc0027ad0,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 d0 7a 02 c0       	mov    eax,ds:0xc0027ad0
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 44 79 02 c0       	push   0xc0027944
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 cc 7a 02 c0 01 	mov    BYTE PTR ds:0xc0027acc,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 d4 7a 02 c0       	push   0xc0027ad4
c000012c:	68 44 79 02 c0       	push   0xc0027944
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <doTPAUSE>:
c00001b4:	fb                   	sti    
c00001b5:	31 c0                	xor    eax,eax
c00001b7:	31 d2                	xor    edx,edx
c00001b9:	66 0f ae f0          	tpause eax
c00001bd:	c3                   	ret    

c00001be <hasLegacyFPU>:
c00001be:	0f 20 c2             	mov    edx,cr0
c00001c1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001c7:	0f 22 c2             	mov    cr0,edx
c00001ca:	db e3                	fninit 
c00001cc:	dd 3d e1 01 00 c0    	fnstsw WORD PTR ds:0xc00001e1
c00001d2:	31 c0                	xor    eax,eax
c00001d4:	66 81 3d e1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001e1,0x0
c00001dd:	75 01                	jne    c00001e0 <hasLegacyFPU.nofpu>

c00001df <hasLegacyFPU.hasfpu>:
c00001df:	40                   	inc    eax

c00001e0 <hasLegacyFPU.nofpu>:
c00001e0:	c3                   	ret    

c00001e1 <testword>:
c00001e1:	aa                   	stos   BYTE PTR es:[edi],al
c00001e2:	55                   	push   ebp

c00001e3 <is486>:
c00001e3:	0f 09                	wbinvd 
c00001e5:	31 c0                	xor    eax,eax
c00001e7:	40                   	inc    eax
c00001e8:	c3                   	ret    
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	90                   	nop
c00001f7:	90                   	nop
c00001f8:	90                   	nop
c00001f9:	90                   	nop
c00001fa:	90                   	nop
c00001fb:	90                   	nop
c00001fc:	90                   	nop
c00001fd:	90                   	nop
c00001fe:	90                   	nop
c00001ff:	90                   	nop
c0000200:	90                   	nop
c0000201:	90                   	nop
c0000202:	90                   	nop
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	31 c0                	xor    eax,eax
c0000218:	c3                   	ret    

c0000219 <detectCPUID>:
c0000219:	9c                   	pushf  
c000021a:	9c                   	pushf  
c000021b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000222:	9d                   	popf   
c0000223:	9c                   	pushf  
c0000224:	58                   	pop    eax
c0000225:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000228:	9d                   	popf   
c0000229:	25 00 00 20 00       	and    eax,0x200000
c000022e:	c3                   	ret    

c000022f <goToVM86>:
c000022f:	55                   	push   ebp
c0000230:	89 e5                	mov    ebp,esp
c0000232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000235:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000238:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000023b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000023e:	25 ff ff 00 00       	and    eax,0xffff
c0000243:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000249:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000024f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000255:	52                   	push   edx
c0000256:	51                   	push   ecx
c0000257:	68 02 02 02 00       	push   0x20202
c000025c:	53                   	push   ebx
c000025d:	50                   	push   eax
c000025e:	cf                   	iret   

c000025f <goToUsermode>:
c000025f:	55                   	push   ebp
c0000260:	89 e5                	mov    ebp,esp
c0000262:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000265:	66 b8 23 00          	mov    ax,0x23
c0000269:	66 8e d8             	mov    ds,ax
c000026c:	66 8e c0             	mov    es,ax
c000026f:	66 8e e0             	mov    fs,ax
c0000272:	66 8e e8             	mov    gs,ax
c0000275:	89 e0                	mov    eax,esp
c0000277:	68 23 00 00 00       	push   0x23
c000027c:	50                   	push   eax
c000027d:	68 02 02 00 00       	push   0x202
c0000282:	68 1b 00 00 00       	push   0x1b
c0000287:	53                   	push   ebx
c0000288:	cf                   	iret   

c0000289 <switchToThreadASMFirstTime>:
c0000289:	9c                   	pushf  
c000028a:	fa                   	cli    
c000028b:	50                   	push   eax
c000028c:	53                   	push   ebx
c000028d:	51                   	push   ecx
c000028e:	52                   	push   edx
c000028f:	56                   	push   esi
c0000290:	57                   	push   edi
c0000291:	55                   	push   ebp
c0000292:	e9 11 00 00 00       	jmp    c00002a8 <commonThreadSwitch>

c0000297 <switchToThreadASM>:
c0000297:	9c                   	pushf  
c0000298:	50                   	push   eax
c0000299:	53                   	push   ebx
c000029a:	51                   	push   ecx
c000029b:	52                   	push   edx
c000029c:	56                   	push   esi
c000029d:	57                   	push   edi
c000029e:	55                   	push   ebp
c000029f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002a5:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002a8 <commonThreadSwitch>:
c00002a8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002ac:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002b2:	8b 06                	mov    eax,DWORD PTR [esi]
c00002b4:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002b7:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002ba:	0f 20 d9             	mov    ecx,cr3
c00002bd:	39 c8                	cmp    eax,ecx
c00002bf:	74 03                	je     c00002c4 <commonThreadSwitch.doneVAS>
c00002c1:	0f 22 d8             	mov    cr3,eax

c00002c4 <commonThreadSwitch.doneVAS>:
c00002c4:	85 d2                	test   edx,edx
c00002c6:	75 11                	jne    c00002d9 <commonThreadSwitch.firstTime>
c00002c8:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002cb:	e8 24 6c 01 00       	call   c0016ef4 <changeTSS>
c00002d0:	5d                   	pop    ebp
c00002d1:	5f                   	pop    edi
c00002d2:	5e                   	pop    esi
c00002d3:	5a                   	pop    edx
c00002d4:	59                   	pop    ecx
c00002d5:	5b                   	pop    ebx
c00002d6:	58                   	pop    eax
c00002d7:	9d                   	popf   
c00002d8:	c3                   	ret    

c00002d9 <commonThreadSwitch.firstTime>:
c00002d9:	fa                   	cli    
c00002da:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002dd:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002e2:	60                   	pusha  
c00002e3:	e8 4a ca 00 00       	call   c000cd32 <mapVASFirstTime>
c00002e8:	61                   	popa   
c00002e9:	89 c4                	mov    esp,eax
c00002eb:	56                   	push   esi
c00002ec:	52                   	push   edx
c00002ed:	e8 02 6c 01 00       	call   c0016ef4 <changeTSS>
c00002f2:	5a                   	pop    edx
c00002f3:	5e                   	pop    esi
c00002f4:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002fb:	5d                   	pop    ebp
c00002fc:	5f                   	pop    edi
c00002fd:	5e                   	pop    esi
c00002fe:	59                   	pop    ecx
c00002ff:	59                   	pop    ecx
c0000300:	5b                   	pop    ebx
c0000301:	58                   	pop    eax
c0000302:	81 c4 04 00 00 00    	add    esp,0x4
c0000308:	6a 02                	push   0x2
c000030a:	9d                   	popf   
c000030b:	52                   	push   edx
c000030c:	e8 c3 70 01 00       	call   c00173d4 <taskStartupFunction>
c0000311:	5a                   	pop    edx
c0000312:	50                   	push   eax
c0000313:	ff d2                	call   edx
c0000315:	e8 06 77 01 00       	call   c0017a20 <taskReturned>
c000031a:	e9 fb ff ff ff       	jmp    c000031a <commonThreadSwitch.firstTime+0x41>

c000031f <asmQuickAcquireLock>:
c000031f:	55                   	push   ebp
c0000320:	89 e5                	mov    ebp,esp
c0000322:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000325 <asmQuickAcquireLock.retry>:
c0000325:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000032a:	72 02                	jb     c000032e <asmQuickAcquireLock.spin_with_pause>
c000032c:	fa                   	cli    
c000032d:	c3                   	ret    

c000032e <asmQuickAcquireLock.spin_with_pause>:
c000032e:	f3 90                	pause  
c0000330:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000336:	75 f6                	jne    c000032e <asmQuickAcquireLock.spin_with_pause>
c0000338:	e9 e8 ff ff ff       	jmp    c0000325 <asmQuickAcquireLock.retry>

c000033d <asmQuickReleaseLock>:
c000033d:	55                   	push   ebp
c000033e:	89 e5                	mov    ebp,esp
c0000340:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000347:	5d                   	pop    ebp
c0000348:	c3                   	ret    

c0000349 <asmAcquireLock>:
c0000349:	55                   	push   ebp
c000034a:	89 e5                	mov    ebp,esp
c000034c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000034f <asmAcquireLock.retry>:
c000034f:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000354:	72 05                	jb     c000035b <asmAcquireLock.spin_with_pause>
c0000356:	9c                   	pushf  
c0000357:	58                   	pop    eax
c0000358:	fa                   	cli    
c0000359:	5d                   	pop    ebp
c000035a:	c3                   	ret    

c000035b <asmAcquireLock.spin_with_pause>:
c000035b:	f3 90                	pause  
c000035d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000363:	75 f6                	jne    c000035b <asmAcquireLock.spin_with_pause>
c0000365:	e9 e5 ff ff ff       	jmp    c000034f <asmAcquireLock.retry>

c000036a <asmReleaseLock>:
c000036a:	55                   	push   ebp
c000036b:	89 e5                	mov    ebp,esp
c000036d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000370:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000373:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000379:	52                   	push   edx
c000037a:	9d                   	popf   
c000037b:	5d                   	pop    ebp
c000037c:	c3                   	ret    

c000037d <loadGDT>:
c000037d:	0f 01 15 10 7f 02 c0 	lgdtd  ds:0xc0027f10
c0000384:	66 b8 10 00          	mov    ax,0x10
c0000388:	66 8e d8             	mov    ds,ax
c000038b:	66 8e c0             	mov    es,ax
c000038e:	66 8e e0             	mov    fs,ax
c0000391:	66 8e e8             	mov    gs,ax
c0000394:	66 8e d0             	mov    ss,ax
c0000397:	e9 00 00 00 00       	jmp    c000039c <flush2>

c000039c <flush2>:
c000039c:	c3                   	ret    

c000039d <isr0>:
c000039d:	fa                   	cli    
c000039e:	68 00 00 00 00       	push   0x0
c00003a3:	68 00 00 00 00       	push   0x0
c00003a8:	e9 44 01 00 00       	jmp    c00004f1 <int_common_stub>

c00003ad <isr1>:
c00003ad:	fa                   	cli    
c00003ae:	6a 00                	push   0x0
c00003b0:	6a 01                	push   0x1
c00003b2:	e9 3a 01 00 00       	jmp    c00004f1 <int_common_stub>

c00003b7 <isr2>:
c00003b7:	fa                   	cli    
c00003b8:	6a 00                	push   0x0
c00003ba:	6a 02                	push   0x2
c00003bc:	e9 30 01 00 00       	jmp    c00004f1 <int_common_stub>

c00003c1 <isr3>:
c00003c1:	fa                   	cli    
c00003c2:	6a 00                	push   0x0
c00003c4:	6a 03                	push   0x3
c00003c6:	e9 26 01 00 00       	jmp    c00004f1 <int_common_stub>

c00003cb <isr4>:
c00003cb:	fa                   	cli    
c00003cc:	6a 00                	push   0x0
c00003ce:	6a 04                	push   0x4
c00003d0:	e9 1c 01 00 00       	jmp    c00004f1 <int_common_stub>

c00003d5 <isr5>:
c00003d5:	fa                   	cli    
c00003d6:	6a 00                	push   0x0
c00003d8:	6a 05                	push   0x5
c00003da:	e9 12 01 00 00       	jmp    c00004f1 <int_common_stub>

c00003df <isr6>:
c00003df:	fa                   	cli    
c00003e0:	6a 00                	push   0x0
c00003e2:	6a 06                	push   0x6
c00003e4:	e9 08 01 00 00       	jmp    c00004f1 <int_common_stub>

c00003e9 <isr7>:
c00003e9:	fa                   	cli    
c00003ea:	6a 00                	push   0x0
c00003ec:	6a 07                	push   0x7
c00003ee:	e9 fe 00 00 00       	jmp    c00004f1 <int_common_stub>

c00003f3 <isr8>:
c00003f3:	fa                   	cli    
c00003f4:	6a 08                	push   0x8
c00003f6:	e9 f6 00 00 00       	jmp    c00004f1 <int_common_stub>

c00003fb <isr9>:
c00003fb:	fa                   	cli    
c00003fc:	6a 00                	push   0x0
c00003fe:	6a 09                	push   0x9
c0000400:	e9 ec 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000405 <isr10>:
c0000405:	fa                   	cli    
c0000406:	6a 0a                	push   0xa
c0000408:	e9 e4 00 00 00       	jmp    c00004f1 <int_common_stub>

c000040d <isr11>:
c000040d:	fa                   	cli    
c000040e:	6a 0b                	push   0xb
c0000410:	e9 dc 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000415 <isr12>:
c0000415:	fa                   	cli    
c0000416:	6a 0c                	push   0xc
c0000418:	e9 d4 00 00 00       	jmp    c00004f1 <int_common_stub>

c000041d <isr13>:
c000041d:	fa                   	cli    
c000041e:	6a 0d                	push   0xd
c0000420:	e9 cc 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000425 <isr14>:
c0000425:	fa                   	cli    
c0000426:	6a 0e                	push   0xe
c0000428:	e9 c4 00 00 00       	jmp    c00004f1 <int_common_stub>

c000042d <isr15>:
c000042d:	fa                   	cli    
c000042e:	6a 00                	push   0x0
c0000430:	6a 0f                	push   0xf
c0000432:	e9 ba 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000437 <isr16>:
c0000437:	fa                   	cli    
c0000438:	6a 00                	push   0x0
c000043a:	6a 10                	push   0x10
c000043c:	e9 b0 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000441 <isr17>:
c0000441:	fa                   	cli    
c0000442:	6a 00                	push   0x0
c0000444:	6a 11                	push   0x11
c0000446:	e9 a6 00 00 00       	jmp    c00004f1 <int_common_stub>

c000044b <isr18>:
c000044b:	fa                   	cli    
c000044c:	6a 00                	push   0x0
c000044e:	6a 12                	push   0x12
c0000450:	e9 9c 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000455 <irq3>:
c0000455:	fa                   	cli    
c0000456:	6a 00                	push   0x0
c0000458:	6a 23                	push   0x23
c000045a:	e9 92 00 00 00       	jmp    c00004f1 <int_common_stub>

c000045f <irq4>:
c000045f:	fa                   	cli    
c0000460:	6a 00                	push   0x0
c0000462:	6a 24                	push   0x24
c0000464:	e9 88 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000469 <irq5>:
c0000469:	fa                   	cli    
c000046a:	6a 00                	push   0x0
c000046c:	6a 25                	push   0x25
c000046e:	e9 7e 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000473 <irq6>:
c0000473:	fa                   	cli    
c0000474:	6a 00                	push   0x0
c0000476:	6a 26                	push   0x26
c0000478:	e9 74 00 00 00       	jmp    c00004f1 <int_common_stub>

c000047d <irq7>:
c000047d:	fa                   	cli    
c000047e:	6a 00                	push   0x0
c0000480:	6a 27                	push   0x27
c0000482:	e9 6a 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000487 <irq8>:
c0000487:	fa                   	cli    
c0000488:	6a 00                	push   0x0
c000048a:	6a 28                	push   0x28
c000048c:	e9 60 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000491 <irq9>:
c0000491:	fa                   	cli    
c0000492:	6a 00                	push   0x0
c0000494:	6a 29                	push   0x29
c0000496:	e9 56 00 00 00       	jmp    c00004f1 <int_common_stub>

c000049b <irq10>:
c000049b:	fa                   	cli    
c000049c:	6a 00                	push   0x0
c000049e:	6a 2a                	push   0x2a
c00004a0:	e9 4c 00 00 00       	jmp    c00004f1 <int_common_stub>

c00004a5 <irq11>:
c00004a5:	fa                   	cli    
c00004a6:	6a 00                	push   0x0
c00004a8:	6a 2b                	push   0x2b
c00004aa:	e9 42 00 00 00       	jmp    c00004f1 <int_common_stub>

c00004af <irq12>:
c00004af:	fa                   	cli    
c00004b0:	6a 00                	push   0x0
c00004b2:	6a 2c                	push   0x2c
c00004b4:	e9 38 00 00 00       	jmp    c00004f1 <int_common_stub>

c00004b9 <irq13>:
c00004b9:	fa                   	cli    
c00004ba:	6a 00                	push   0x0
c00004bc:	6a 2d                	push   0x2d
c00004be:	e9 2e 00 00 00       	jmp    c00004f1 <int_common_stub>

c00004c3 <irq14>:
c00004c3:	fa                   	cli    
c00004c4:	6a 00                	push   0x0
c00004c6:	6a 2e                	push   0x2e
c00004c8:	e9 24 00 00 00       	jmp    c00004f1 <int_common_stub>

c00004cd <irq15>:
c00004cd:	fa                   	cli    
c00004ce:	6a 00                	push   0x0
c00004d0:	6a 2f                	push   0x2f
c00004d2:	e9 1a 00 00 00       	jmp    c00004f1 <int_common_stub>

c00004d7 <irq1>:
c00004d7:	fa                   	cli    
c00004d8:	6a 00                	push   0x0
c00004da:	6a 21                	push   0x21
c00004dc:	eb 13                	jmp    c00004f1 <int_common_stub>

c00004de <irq2>:
c00004de:	fa                   	cli    
c00004df:	6a 00                	push   0x0
c00004e1:	6a 22                	push   0x22
c00004e3:	eb 0c                	jmp    c00004f1 <int_common_stub>

c00004e5 <isr96>:
c00004e5:	6a 00                	push   0x0
c00004e7:	6a 60                	push   0x60
c00004e9:	fb                   	sti    
c00004ea:	eb 05                	jmp    c00004f1 <int_common_stub>

c00004ec <irq0>:
c00004ec:	fa                   	cli    
c00004ed:	6a 00                	push   0x0
c00004ef:	6a 20                	push   0x20

c00004f1 <int_common_stub>:
c00004f1:	60                   	pusha  
c00004f2:	1e                   	push   ds
c00004f3:	06                   	push   es
c00004f4:	0f a0                	push   fs
c00004f6:	0f a8                	push   gs
c00004f8:	66 b8 10 00          	mov    ax,0x10
c00004fc:	66 8e d8             	mov    ds,ax
c00004ff:	66 8e c0             	mov    es,ax
c0000502:	66 8e e0             	mov    fs,ax
c0000505:	66 8e e8             	mov    gs,ax
c0000508:	54                   	push   esp
c0000509:	fc                   	cld    
c000050a:	e8 d2 e6 00 00       	call   c000ebe1 <int_handler>
c000050f:	81 c4 04 00 00 00    	add    esp,0x4
c0000515:	0f a9                	pop    gs
c0000517:	0f a1                	pop    fs
c0000519:	07                   	pop    es
c000051a:	1f                   	pop    ds
c000051b:	61                   	popa   
c000051c:	81 c4 08 00 00 00    	add    esp,0x8
c0000522:	cf                   	iret   

c0000523 <irq16>:
c0000523:	fa                   	cli    
c0000524:	6a 00                	push   0x0
c0000526:	6a 30                	push   0x30
c0000528:	e9 c4 ff ff ff       	jmp    c00004f1 <int_common_stub>

c000052d <irq17>:
c000052d:	fa                   	cli    
c000052e:	6a 00                	push   0x0
c0000530:	6a 31                	push   0x31
c0000532:	e9 ba ff ff ff       	jmp    c00004f1 <int_common_stub>

c0000537 <irq18>:
c0000537:	fa                   	cli    
c0000538:	6a 00                	push   0x0
c000053a:	6a 32                	push   0x32
c000053c:	e9 b0 ff ff ff       	jmp    c00004f1 <int_common_stub>

c0000541 <irq19>:
c0000541:	fa                   	cli    
c0000542:	6a 00                	push   0x0
c0000544:	6a 33                	push   0x33
c0000546:	e9 a6 ff ff ff       	jmp    c00004f1 <int_common_stub>

c000054b <irq20>:
c000054b:	fa                   	cli    
c000054c:	6a 00                	push   0x0
c000054e:	6a 34                	push   0x34
c0000550:	e9 9c ff ff ff       	jmp    c00004f1 <int_common_stub>

c0000555 <irq21>:
c0000555:	fa                   	cli    
c0000556:	6a 00                	push   0x0
c0000558:	6a 35                	push   0x35
c000055a:	e9 92 ff ff ff       	jmp    c00004f1 <int_common_stub>

c000055f <irq22>:
c000055f:	fa                   	cli    
c0000560:	6a 00                	push   0x0
c0000562:	6a 36                	push   0x36
c0000564:	e9 88 ff ff ff       	jmp    c00004f1 <int_common_stub>

c0000569 <irq23>:
c0000569:	fa                   	cli    
c000056a:	6a 00                	push   0x0
c000056c:	6a 37                	push   0x37
c000056e:	e9 7e ff ff ff       	jmp    c00004f1 <int_common_stub>

c0000573 <memcpy>:
c0000573:	e9 7a 83 00 00       	jmp    c00088f2 <__not_memcpy>

c0000578 <memcmp>:
c0000578:	56                   	push   esi
c0000579:	53                   	push   ebx
c000057a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000057e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000582:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000586:	85 f6                	test   esi,esi
c0000588:	74 1d                	je     c00005a7 <memcmp+0x2f>
c000058a:	8a 08                	mov    cl,BYTE PTR [eax]
c000058c:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c000058f:	38 cb                	cmp    bl,cl
c0000591:	75 19                	jne    c00005ac <memcmp+0x34>
c0000593:	01 c6                	add    esi,eax
c0000595:	eb 0a                	jmp    c00005a1 <memcmp+0x29>
c0000597:	90                   	nop
c0000598:	8a 08                	mov    cl,BYTE PTR [eax]
c000059a:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c000059d:	38 d9                	cmp    cl,bl
c000059f:	75 0b                	jne    c00005ac <memcmp+0x34>
c00005a1:	40                   	inc    eax
c00005a2:	42                   	inc    edx
c00005a3:	39 f0                	cmp    eax,esi
c00005a5:	75 f1                	jne    c0000598 <memcmp+0x20>
c00005a7:	31 c0                	xor    eax,eax
c00005a9:	5b                   	pop    ebx
c00005aa:	5e                   	pop    esi
c00005ab:	c3                   	ret    
c00005ac:	0f b6 c1             	movzx  eax,cl
c00005af:	29 d8                	sub    eax,ebx
c00005b1:	5b                   	pop    ebx
c00005b2:	5e                   	pop    esi
c00005b3:	c3                   	ret    

c00005b4 <memmove>:
c00005b4:	55                   	push   ebp
c00005b5:	57                   	push   edi
c00005b6:	56                   	push   esi
c00005b7:	53                   	push   ebx
c00005b8:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00005bc:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00005c0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00005c4:	39 dd                	cmp    ebp,ebx
c00005c6:	0f 83 80 00 00 00    	jae    c000064c <memmove+0x98>
c00005cc:	85 d2                	test   edx,edx
c00005ce:	74 74                	je     c0000644 <memmove+0x90>
c00005d0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00005d3:	8d 75 04             	lea    esi,[ebp+0x4]
c00005d6:	39 cd                	cmp    ebp,ecx
c00005d8:	0f 93 c1             	setae  cl
c00005db:	39 f3                	cmp    ebx,esi
c00005dd:	0f 93 c0             	setae  al
c00005e0:	89 c6                	mov    esi,eax
c00005e2:	09 ce                	or     esi,ecx
c00005e4:	8d 4a ff             	lea    ecx,[edx-0x1]
c00005e7:	89 f0                	mov    eax,esi
c00005e9:	83 f9 0c             	cmp    ecx,0xc
c00005ec:	0f 97 c1             	seta   cl
c00005ef:	84 c8                	test   al,cl
c00005f1:	74 75                	je     c0000668 <memmove+0xb4>
c00005f3:	89 e9                	mov    ecx,ebp
c00005f5:	09 d9                	or     ecx,ebx
c00005f7:	83 e1 03             	and    ecx,0x3
c00005fa:	75 6c                	jne    c0000668 <memmove+0xb4>
c00005fc:	89 d7                	mov    edi,edx
c00005fe:	89 d9                	mov    ecx,ebx
c0000600:	83 e7 fc             	and    edi,0xfffffffc
c0000603:	89 ee                	mov    esi,ebp
c0000605:	01 df                	add    edi,ebx
c0000607:	90                   	nop
c0000608:	8b 01                	mov    eax,DWORD PTR [ecx]
c000060a:	83 c6 04             	add    esi,0x4
c000060d:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000610:	83 c1 04             	add    ecx,0x4
c0000613:	39 f9                	cmp    ecx,edi
c0000615:	75 f1                	jne    c0000608 <memmove+0x54>
c0000617:	89 d1                	mov    ecx,edx
c0000619:	89 d7                	mov    edi,edx
c000061b:	83 e1 fc             	and    ecx,0xfffffffc
c000061e:	29 cf                	sub    edi,ecx
c0000620:	01 cb                	add    ebx,ecx
c0000622:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c0000626:	39 ca                	cmp    edx,ecx
c0000628:	74 1a                	je     c0000644 <memmove+0x90>
c000062a:	8a 03                	mov    al,BYTE PTR [ebx]
c000062c:	83 ff 01             	cmp    edi,0x1
c000062f:	88 06                	mov    BYTE PTR [esi],al
c0000631:	74 11                	je     c0000644 <memmove+0x90>
c0000633:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0000636:	83 ff 02             	cmp    edi,0x2
c0000639:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c000063c:	74 06                	je     c0000644 <memmove+0x90>
c000063e:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000641:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000644:	5b                   	pop    ebx
c0000645:	89 e8                	mov    eax,ebp
c0000647:	5e                   	pop    esi
c0000648:	5f                   	pop    edi
c0000649:	5d                   	pop    ebp
c000064a:	c3                   	ret    
c000064b:	90                   	nop
c000064c:	76 f6                	jbe    c0000644 <memmove+0x90>
c000064e:	85 d2                	test   edx,edx
c0000650:	74 f2                	je     c0000644 <memmove+0x90>
c0000652:	4b                   	dec    ebx
c0000653:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000656:	66 90                	xchg   ax,ax
c0000658:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c000065b:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c000065e:	4a                   	dec    edx
c000065f:	75 f7                	jne    c0000658 <memmove+0xa4>
c0000661:	5b                   	pop    ebx
c0000662:	89 e8                	mov    eax,ebp
c0000664:	5e                   	pop    esi
c0000665:	5f                   	pop    edi
c0000666:	5d                   	pop    ebp
c0000667:	c3                   	ret    
c0000668:	01 ea                	add    edx,ebp
c000066a:	89 e9                	mov    ecx,ebp
c000066c:	8a 03                	mov    al,BYTE PTR [ebx]
c000066e:	41                   	inc    ecx
c000066f:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c0000672:	43                   	inc    ebx
c0000673:	39 d1                	cmp    ecx,edx
c0000675:	75 f5                	jne    c000066c <memmove+0xb8>
c0000677:	eb cb                	jmp    c0000644 <memmove+0x90>
c0000679:	8d 76 00             	lea    esi,[esi+0x0]

c000067c <memset>:
c000067c:	57                   	push   edi
c000067d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000681:	85 c9                	test   ecx,ecx
c0000683:	74 0b                	je     c0000690 <memset+0x14>
c0000685:	fc                   	cld    
c0000686:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000068a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000068e:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000690:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000694:	5f                   	pop    edi
c0000695:	c3                   	ret    
c0000696:	66 90                	xchg   ax,ax

c0000698 <strlen>:
c0000698:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000069c:	31 c0                	xor    eax,eax
c000069e:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c00006a1:	74 09                	je     c00006ac <strlen+0x14>
c00006a3:	90                   	nop
c00006a4:	40                   	inc    eax
c00006a5:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006a9:	75 f9                	jne    c00006a4 <strlen+0xc>
c00006ab:	c3                   	ret    
c00006ac:	c3                   	ret    
c00006ad:	8d 76 00             	lea    esi,[esi+0x0]

c00006b0 <strpbrk>:
c00006b0:	57                   	push   edi
c00006b1:	56                   	push   esi
c00006b2:	53                   	push   ebx
c00006b3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00006bb:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006bd:	84 db                	test   bl,bl
c00006bf:	74 21                	je     c00006e2 <strpbrk+0x32>
c00006c1:	8a 07                	mov    al,BYTE PTR [edi]
c00006c3:	84 c0                	test   al,al
c00006c5:	74 14                	je     c00006db <strpbrk+0x2b>
c00006c7:	38 d8                	cmp    al,bl
c00006c9:	74 19                	je     c00006e4 <strpbrk+0x34>
c00006cb:	89 fa                	mov    edx,edi
c00006cd:	eb 05                	jmp    c00006d4 <strpbrk+0x24>
c00006cf:	90                   	nop
c00006d0:	38 d9                	cmp    cl,bl
c00006d2:	74 10                	je     c00006e4 <strpbrk+0x34>
c00006d4:	42                   	inc    edx
c00006d5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00006d7:	84 c9                	test   cl,cl
c00006d9:	75 f5                	jne    c00006d0 <strpbrk+0x20>
c00006db:	46                   	inc    esi
c00006dc:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006de:	84 db                	test   bl,bl
c00006e0:	75 e1                	jne    c00006c3 <strpbrk+0x13>
c00006e2:	31 f6                	xor    esi,esi
c00006e4:	89 f0                	mov    eax,esi
c00006e6:	5b                   	pop    ebx
c00006e7:	5e                   	pop    esi
c00006e8:	5f                   	pop    edi
c00006e9:	c3                   	ret    
c00006ea:	66 90                	xchg   ax,ax

c00006ec <strtok>:
c00006ec:	56                   	push   esi
c00006ed:	53                   	push   ebx
c00006ee:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00006f2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006f6:	85 db                	test   ebx,ebx
c00006f8:	75 07                	jne    c0000701 <strtok+0x15>
c00006fa:	eb 2c                	jmp    c0000728 <strtok+0x3c>
c00006fc:	43                   	inc    ebx
c00006fd:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000701:	56                   	push   esi
c0000702:	53                   	push   ebx
c0000703:	e8 a8 ff ff ff       	call   c00006b0 <strpbrk>
c0000708:	5a                   	pop    edx
c0000709:	a3 ec 7a 02 c0       	mov    ds:0xc0027aec,eax
c000070e:	59                   	pop    ecx
c000070f:	39 d8                	cmp    eax,ebx
c0000711:	74 e9                	je     c00006fc <strtok+0x10>
c0000713:	85 c0                	test   eax,eax
c0000715:	74 1b                	je     c0000732 <strtok+0x46>
c0000717:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000071a:	8d 50 01             	lea    edx,[eax+0x1]
c000071d:	89 d8                	mov    eax,ebx
c000071f:	89 15 ec 7a 02 c0    	mov    DWORD PTR ds:0xc0027aec,edx
c0000725:	5b                   	pop    ebx
c0000726:	5e                   	pop    esi
c0000727:	c3                   	ret    
c0000728:	8b 1d ec 7a 02 c0    	mov    ebx,DWORD PTR ds:0xc0027aec
c000072e:	85 db                	test   ebx,ebx
c0000730:	75 cf                	jne    c0000701 <strtok+0x15>
c0000732:	31 c0                	xor    eax,eax
c0000734:	5b                   	pop    ebx
c0000735:	5e                   	pop    esi
c0000736:	c3                   	ret    
c0000737:	90                   	nop

c0000738 <strcpy>:
c0000738:	53                   	push   ebx
c0000739:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000073d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000741:	89 c3                	mov    ebx,eax
c0000743:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000745:	84 d2                	test   dl,dl
c0000747:	74 0d                	je     c0000756 <strcpy+0x1e>
c0000749:	8d 76 00             	lea    esi,[esi+0x0]
c000074c:	88 13                	mov    BYTE PTR [ebx],dl
c000074e:	41                   	inc    ecx
c000074f:	43                   	inc    ebx
c0000750:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000752:	84 d2                	test   dl,dl
c0000754:	75 f6                	jne    c000074c <strcpy+0x14>
c0000756:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000759:	5b                   	pop    ebx
c000075a:	c3                   	ret    
c000075b:	90                   	nop

c000075c <strncpy>:
c000075c:	55                   	push   ebp
c000075d:	57                   	push   edi
c000075e:	56                   	push   esi
c000075f:	53                   	push   ebx
c0000760:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000764:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000768:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000076c:	85 c0                	test   eax,eax
c000076e:	74 39                	je     c00007a9 <strncpy+0x4d>
c0000770:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000772:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000775:	8d 55 01             	lea    edx,[ebp+0x1]
c0000778:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000077b:	84 db                	test   bl,bl
c000077d:	74 31                	je     c00007b0 <strncpy+0x54>
c000077f:	85 c9                	test   ecx,ecx
c0000781:	74 26                	je     c00007a9 <strncpy+0x4d>
c0000783:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000786:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000789:	8d 55 02             	lea    edx,[ebp+0x2]
c000078c:	8d 46 02             	lea    eax,[esi+0x2]
c000078f:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000792:	84 db                	test   bl,bl
c0000794:	75 0f                	jne    c00007a5 <strncpy+0x49>
c0000796:	eb 18                	jmp    c00007b0 <strncpy+0x54>
c0000798:	40                   	inc    eax
c0000799:	42                   	inc    edx
c000079a:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c000079d:	49                   	dec    ecx
c000079e:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00007a1:	84 db                	test   bl,bl
c00007a3:	74 0b                	je     c00007b0 <strncpy+0x54>
c00007a5:	85 c9                	test   ecx,ecx
c00007a7:	75 ef                	jne    c0000798 <strncpy+0x3c>
c00007a9:	5b                   	pop    ebx
c00007aa:	89 e8                	mov    eax,ebp
c00007ac:	5e                   	pop    esi
c00007ad:	5f                   	pop    edi
c00007ae:	5d                   	pop    ebp
c00007af:	c3                   	ret    
c00007b0:	85 c9                	test   ecx,ecx
c00007b2:	74 f5                	je     c00007a9 <strncpy+0x4d>
c00007b4:	fc                   	cld    
c00007b5:	31 c0                	xor    eax,eax
c00007b7:	89 d7                	mov    edi,edx
c00007b9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00007bb:	89 e8                	mov    eax,ebp
c00007bd:	5b                   	pop    ebx
c00007be:	5e                   	pop    esi
c00007bf:	5f                   	pop    edi
c00007c0:	5d                   	pop    ebp
c00007c1:	c3                   	ret    
c00007c2:	66 90                	xchg   ax,ax

c00007c4 <strcmp>:
c00007c4:	56                   	push   esi
c00007c5:	53                   	push   ebx
c00007c6:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00007ca:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007ce:	8a 16                	mov    dl,BYTE PTR [esi]
c00007d0:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00007d3:	38 d1                	cmp    cl,dl
c00007d5:	75 1d                	jne    c00007f4 <strcmp+0x30>
c00007d7:	84 c9                	test   cl,cl
c00007d9:	74 21                	je     c00007fc <strcmp+0x38>
c00007db:	b8 01 00 00 00       	mov    eax,0x1
c00007e0:	eb 07                	jmp    c00007e9 <strcmp+0x25>
c00007e2:	66 90                	xchg   ax,ax
c00007e4:	40                   	inc    eax
c00007e5:	84 d2                	test   dl,dl
c00007e7:	74 13                	je     c00007fc <strcmp+0x38>
c00007e9:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00007ec:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00007f0:	38 ca                	cmp    dl,cl
c00007f2:	74 f0                	je     c00007e4 <strcmp+0x20>
c00007f4:	0f b6 c2             	movzx  eax,dl
c00007f7:	5b                   	pop    ebx
c00007f8:	29 c8                	sub    eax,ecx
c00007fa:	5e                   	pop    esi
c00007fb:	c3                   	ret    
c00007fc:	31 c0                	xor    eax,eax
c00007fe:	5b                   	pop    ebx
c00007ff:	5e                   	pop    esi
c0000800:	c3                   	ret    
c0000801:	8d 76 00             	lea    esi,[esi+0x0]

c0000804 <strchr>:
c0000804:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000808:	8a 10                	mov    dl,BYTE PTR [eax]
c000080a:	84 d2                	test   dl,dl
c000080c:	74 15                	je     c0000823 <strchr+0x1f>
c000080e:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0000812:	38 ca                	cmp    dl,cl
c0000814:	75 06                	jne    c000081c <strchr+0x18>
c0000816:	eb 0e                	jmp    c0000826 <strchr+0x22>
c0000818:	38 ca                	cmp    dl,cl
c000081a:	74 09                	je     c0000825 <strchr+0x21>
c000081c:	40                   	inc    eax
c000081d:	8a 10                	mov    dl,BYTE PTR [eax]
c000081f:	84 d2                	test   dl,dl
c0000821:	75 f5                	jne    c0000818 <strchr+0x14>
c0000823:	31 c0                	xor    eax,eax
c0000825:	c3                   	ret    
c0000826:	c3                   	ret    
c0000827:	90                   	nop

c0000828 <strncmp>:
c0000828:	57                   	push   edi
c0000829:	56                   	push   esi
c000082a:	53                   	push   ebx
c000082b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000082f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000833:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000837:	85 ff                	test   edi,edi
c0000839:	74 28                	je     c0000863 <strncmp+0x3b>
c000083b:	8a 16                	mov    dl,BYTE PTR [esi]
c000083d:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000840:	38 d1                	cmp    cl,dl
c0000842:	75 28                	jne    c000086c <strncmp+0x44>
c0000844:	8d 46 01             	lea    eax,[esi+0x1]
c0000847:	84 c9                	test   cl,cl
c0000849:	74 18                	je     c0000863 <strncmp+0x3b>
c000084b:	01 fe                	add    esi,edi
c000084d:	eb 0f                	jmp    c000085e <strncmp+0x36>
c000084f:	90                   	nop
c0000850:	8a 10                	mov    dl,BYTE PTR [eax]
c0000852:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000855:	38 ca                	cmp    dl,cl
c0000857:	75 13                	jne    c000086c <strncmp+0x44>
c0000859:	40                   	inc    eax
c000085a:	84 d2                	test   dl,dl
c000085c:	74 05                	je     c0000863 <strncmp+0x3b>
c000085e:	43                   	inc    ebx
c000085f:	39 c6                	cmp    esi,eax
c0000861:	75 ed                	jne    c0000850 <strncmp+0x28>
c0000863:	5b                   	pop    ebx
c0000864:	31 c0                	xor    eax,eax
c0000866:	5e                   	pop    esi
c0000867:	5f                   	pop    edi
c0000868:	c3                   	ret    
c0000869:	8d 76 00             	lea    esi,[esi+0x0]
c000086c:	5b                   	pop    ebx
c000086d:	0f b6 c2             	movzx  eax,dl
c0000870:	5e                   	pop    esi
c0000871:	29 c8                	sub    eax,ecx
c0000873:	5f                   	pop    edi
c0000874:	c3                   	ret    
c0000875:	8d 76 00             	lea    esi,[esi+0x0]

c0000878 <strcat>:
c0000878:	56                   	push   esi
c0000879:	53                   	push   ebx
c000087a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000882:	89 c3                	mov    ebx,eax
c0000884:	eb 04                	jmp    c000088a <strcat+0x12>
c0000886:	66 90                	xchg   ax,ax
c0000888:	89 d3                	mov    ebx,edx
c000088a:	8d 53 01             	lea    edx,[ebx+0x1]
c000088d:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000891:	75 f5                	jne    c0000888 <strcat+0x10>
c0000893:	31 d2                	xor    edx,edx
c0000895:	8d 76 00             	lea    esi,[esi+0x0]
c0000898:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000089b:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c000089e:	42                   	inc    edx
c000089f:	84 c9                	test   cl,cl
c00008a1:	75 f5                	jne    c0000898 <strcat+0x20>
c00008a3:	5b                   	pop    ebx
c00008a4:	5e                   	pop    esi
c00008a5:	c3                   	ret    
c00008a6:	66 90                	xchg   ax,ax

c00008a8 <strncat>:
c00008a8:	56                   	push   esi
c00008a9:	53                   	push   ebx
c00008aa:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008b2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008b6:	85 f6                	test   esi,esi
c00008b8:	74 1e                	je     c00008d8 <strncat+0x30>
c00008ba:	89 c2                	mov    edx,eax
c00008bc:	42                   	inc    edx
c00008bd:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c1:	75 f9                	jne    c00008bc <strncat+0x14>
c00008c3:	01 ce                	add    esi,ecx
c00008c5:	eb 06                	jmp    c00008cd <strncat+0x25>
c00008c7:	90                   	nop
c00008c8:	39 f1                	cmp    ecx,esi
c00008ca:	74 10                	je     c00008dc <strncat+0x34>
c00008cc:	42                   	inc    edx
c00008cd:	41                   	inc    ecx
c00008ce:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008d1:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008d4:	84 db                	test   bl,bl
c00008d6:	75 f0                	jne    c00008c8 <strncat+0x20>
c00008d8:	5b                   	pop    ebx
c00008d9:	5e                   	pop    esi
c00008da:	c3                   	ret    
c00008db:	90                   	nop
c00008dc:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008df:	5b                   	pop    ebx
c00008e0:	5e                   	pop    esi
c00008e1:	c3                   	ret    
c00008e2:	66 90                	xchg   ax,ax

c00008e4 <strstr>:
c00008e4:	57                   	push   edi
c00008e5:	56                   	push   esi
c00008e6:	53                   	push   ebx
c00008e7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008eb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008ef:	57                   	push   edi
c00008f0:	e8 a3 fd ff ff       	call   c0000698 <strlen>
c00008f5:	59                   	pop    ecx
c00008f6:	85 c0                	test   eax,eax
c00008f8:	74 2a                	je     c0000924 <strstr+0x40>
c00008fa:	89 c6                	mov    esi,eax
c00008fc:	eb 12                	jmp    c0000910 <strstr+0x2c>
c00008fe:	66 90                	xchg   ax,ax
c0000900:	56                   	push   esi
c0000901:	57                   	push   edi
c0000902:	53                   	push   ebx
c0000903:	e8 70 fc ff ff       	call   c0000578 <memcmp>
c0000908:	83 c4 0c             	add    esp,0xc
c000090b:	85 c0                	test   eax,eax
c000090d:	74 15                	je     c0000924 <strstr+0x40>
c000090f:	43                   	inc    ebx
c0000910:	53                   	push   ebx
c0000911:	e8 82 fd ff ff       	call   c0000698 <strlen>
c0000916:	5a                   	pop    edx
c0000917:	39 f0                	cmp    eax,esi
c0000919:	73 e5                	jae    c0000900 <strstr+0x1c>
c000091b:	5b                   	pop    ebx
c000091c:	31 c0                	xor    eax,eax
c000091e:	5e                   	pop    esi
c000091f:	5f                   	pop    edi
c0000920:	c3                   	ret    
c0000921:	8d 76 00             	lea    esi,[esi+0x0]
c0000924:	89 d8                	mov    eax,ebx
c0000926:	5b                   	pop    ebx
c0000927:	5e                   	pop    esi
c0000928:	5f                   	pop    edi
c0000929:	c3                   	ret    
c000092a:	66 90                	xchg   ax,ax

c000092c <toupper>:
c000092c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000930:	0f b6 d0             	movzx  edx,al
c0000933:	f6 82 a0 34 02 c0 02 	test   BYTE PTR [edx-0x3ffdcb60],0x2
c000093a:	74 03                	je     c000093f <toupper+0x13>
c000093c:	83 e8 20             	sub    eax,0x20
c000093f:	c3                   	ret    

c0000940 <tolower>:
c0000940:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000944:	0f b6 d0             	movzx  edx,al
c0000947:	f6 82 a0 34 02 c0 01 	test   BYTE PTR [edx-0x3ffdcb60],0x1
c000094e:	74 03                	je     c0000953 <tolower+0x13>
c0000950:	83 c0 20             	add    eax,0x20
c0000953:	c3                   	ret    

c0000954 <simple_strtoul>:
c0000954:	55                   	push   ebp
c0000955:	57                   	push   edi
c0000956:	56                   	push   esi
c0000957:	53                   	push   ebx
c0000958:	83 ec 08             	sub    esp,0x8
c000095b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000095f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000963:	90                   	nop
c0000964:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000967:	f6 82 a0 34 02 c0 08 	test   BYTE PTR [edx-0x3ffdcb60],0x8
c000096e:	75 05                	jne    c0000975 <simple_strtoul+0x21>
c0000970:	80 fa 09             	cmp    dl,0x9
c0000973:	75 03                	jne    c0000978 <simple_strtoul+0x24>
c0000975:	41                   	inc    ecx
c0000976:	eb ec                	jmp    c0000964 <simple_strtoul+0x10>
c0000978:	80 fa 2d             	cmp    dl,0x2d
c000097b:	0f 84 1b 01 00 00    	je     c0000a9c <simple_strtoul+0x148>
c0000981:	80 fa 2b             	cmp    dl,0x2b
c0000984:	0f 84 c2 00 00 00    	je     c0000a4c <simple_strtoul+0xf8>
c000098a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000992:	85 f6                	test   esi,esi
c0000994:	0f 85 c3 00 00 00    	jne    c0000a5d <simple_strtoul+0x109>
c000099a:	8a 11                	mov    dl,BYTE PTR [ecx]
c000099c:	80 fa 30             	cmp    dl,0x30
c000099f:	0f 84 47 01 00 00    	je     c0000aec <simple_strtoul+0x198>
c00009a5:	be 0a 00 00 00       	mov    esi,0xa
c00009aa:	84 d2                	test   dl,dl
c00009ac:	0f 84 6f 01 00 00    	je     c0000b21 <simple_strtoul+0x1cd>
c00009b2:	31 ed                	xor    ebp,ebp
c00009b4:	31 ff                	xor    edi,edi
c00009b6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009bd:	eb 2b                	jmp    c00009ea <simple_strtoul+0x96>
c00009bf:	90                   	nop
c00009c0:	83 eb 30             	sub    ebx,0x30
c00009c3:	39 f3                	cmp    ebx,esi
c00009c5:	73 4d                	jae    c0000a14 <simple_strtoul+0xc0>
c00009c7:	31 d2                	xor    edx,edx
c00009c9:	89 d8                	mov    eax,ebx
c00009cb:	f7 d0                	not    eax
c00009cd:	f7 f6                	div    esi
c00009cf:	39 f8                	cmp    eax,edi
c00009d1:	0f 82 b1 00 00 00    	jb     c0000a88 <simple_strtoul+0x134>
c00009d7:	0f af fe             	imul   edi,esi
c00009da:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009e1:	01 df                	add    edi,ebx
c00009e3:	41                   	inc    ecx
c00009e4:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009e6:	84 d2                	test   dl,dl
c00009e8:	74 2a                	je     c0000a14 <simple_strtoul+0xc0>
c00009ea:	0f b6 da             	movzx  ebx,dl
c00009ed:	f6 83 a0 34 02 c0 04 	test   BYTE PTR [ebx-0x3ffdcb60],0x4
c00009f4:	75 ca                	jne    c00009c0 <simple_strtoul+0x6c>
c00009f6:	0f be d2             	movsx  edx,dl
c00009f9:	52                   	push   edx
c00009fa:	e8 2d ff ff ff       	call   c000092c <toupper>
c00009ff:	5b                   	pop    ebx
c0000a00:	0f b6 d0             	movzx  edx,al
c0000a03:	f6 82 a0 34 02 c0 01 	test   BYTE PTR [edx-0x3ffdcb60],0x1
c0000a0a:	74 08                	je     c0000a14 <simple_strtoul+0xc0>
c0000a0c:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000a0f:	39 f3                	cmp    ebx,esi
c0000a11:	72 b4                	jb     c00009c7 <simple_strtoul+0x73>
c0000a13:	90                   	nop
c0000a14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a18:	85 c0                	test   eax,eax
c0000a1a:	74 14                	je     c0000a30 <simple_strtoul+0xdc>
c0000a1c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a1f:	09 f8                	or     eax,edi
c0000a21:	75 71                	jne    c0000a94 <simple_strtoul+0x140>
c0000a23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a27:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a2b:	31 ff                	xor    edi,edi
c0000a2d:	89 30                	mov    DWORD PTR [eax],esi
c0000a2f:	90                   	nop
c0000a30:	4d                   	dec    ebp
c0000a31:	75 05                	jne    c0000a38 <simple_strtoul+0xe4>
c0000a33:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a38:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a3d:	75 02                	jne    c0000a41 <simple_strtoul+0xed>
c0000a3f:	f7 df                	neg    edi
c0000a41:	83 c4 08             	add    esp,0x8
c0000a44:	89 f8                	mov    eax,edi
c0000a46:	5b                   	pop    ebx
c0000a47:	5e                   	pop    esi
c0000a48:	5f                   	pop    edi
c0000a49:	5d                   	pop    ebp
c0000a4a:	c3                   	ret    
c0000a4b:	90                   	nop
c0000a4c:	41                   	inc    ecx
c0000a4d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a55:	85 f6                	test   esi,esi
c0000a57:	0f 84 3d ff ff ff    	je     c000099a <simple_strtoul+0x46>
c0000a5d:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a60:	83 f8 22             	cmp    eax,0x22
c0000a63:	77 6a                	ja     c0000acf <simple_strtoul+0x17b>
c0000a65:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a67:	83 fe 08             	cmp    esi,0x8
c0000a6a:	0f 84 a2 00 00 00    	je     c0000b12 <simple_strtoul+0x1be>
c0000a70:	83 fe 10             	cmp    esi,0x10
c0000a73:	0f 85 31 ff ff ff    	jne    c00009aa <simple_strtoul+0x56>
c0000a79:	80 fa 30             	cmp    dl,0x30
c0000a7c:	74 2c                	je     c0000aaa <simple_strtoul+0x156>
c0000a7e:	be 10 00 00 00       	mov    esi,0x10
c0000a83:	e9 22 ff ff ff       	jmp    c00009aa <simple_strtoul+0x56>
c0000a88:	bd 01 00 00 00       	mov    ebp,0x1
c0000a8d:	31 ff                	xor    edi,edi
c0000a8f:	e9 4f ff ff ff       	jmp    c00009e3 <simple_strtoul+0x8f>
c0000a94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a98:	89 08                	mov    DWORD PTR [eax],ecx
c0000a9a:	eb 94                	jmp    c0000a30 <simple_strtoul+0xdc>
c0000a9c:	41                   	inc    ecx
c0000a9d:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000aa5:	e9 e8 fe ff ff       	jmp    c0000992 <simple_strtoul+0x3e>
c0000aaa:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000aae:	88 04 24             	mov    BYTE PTR [esp],al
c0000ab1:	50                   	push   eax
c0000ab2:	e8 89 fe ff ff       	call   c0000940 <tolower>
c0000ab7:	5e                   	pop    esi
c0000ab8:	83 f8 78             	cmp    eax,0x78
c0000abb:	0f 84 84 00 00 00    	je     c0000b45 <simple_strtoul+0x1f1>
c0000ac1:	41                   	inc    ecx
c0000ac2:	be 10 00 00 00       	mov    esi,0x10
c0000ac7:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000aca:	e9 db fe ff ff       	jmp    c00009aa <simple_strtoul+0x56>
c0000acf:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ad3:	85 ff                	test   edi,edi
c0000ad5:	74 5c                	je     c0000b33 <simple_strtoul+0x1df>
c0000ad7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000adb:	85 c9                	test   ecx,ecx
c0000add:	75 4e                	jne    c0000b2d <simple_strtoul+0x1d9>
c0000adf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000ae5:	31 ff                	xor    edi,edi
c0000ae7:	e9 4c ff ff ff       	jmp    c0000a38 <simple_strtoul+0xe4>
c0000aec:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000af0:	88 04 24             	mov    BYTE PTR [esp],al
c0000af3:	50                   	push   eax
c0000af4:	e8 47 fe ff ff       	call   c0000940 <tolower>
c0000af9:	5d                   	pop    ebp
c0000afa:	83 f8 78             	cmp    eax,0x78
c0000afd:	74 3b                	je     c0000b3a <simple_strtoul+0x1e6>
c0000aff:	41                   	inc    ecx
c0000b00:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b03:	80 fa 30             	cmp    dl,0x30
c0000b06:	74 13                	je     c0000b1b <simple_strtoul+0x1c7>
c0000b08:	be 08 00 00 00       	mov    esi,0x8
c0000b0d:	e9 98 fe ff ff       	jmp    c00009aa <simple_strtoul+0x56>
c0000b12:	80 fa 30             	cmp    dl,0x30
c0000b15:	0f 85 8f fe ff ff    	jne    c00009aa <simple_strtoul+0x56>
c0000b1b:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000b1e:	41                   	inc    ecx
c0000b1f:	eb e7                	jmp    c0000b08 <simple_strtoul+0x1b4>
c0000b21:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000b25:	85 d2                	test   edx,edx
c0000b27:	74 0a                	je     c0000b33 <simple_strtoul+0x1df>
c0000b29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b2d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b31:	89 30                	mov    DWORD PTR [eax],esi
c0000b33:	31 ff                	xor    edi,edi
c0000b35:	e9 fe fe ff ff       	jmp    c0000a38 <simple_strtoul+0xe4>
c0000b3a:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b3d:	83 c1 02             	add    ecx,0x2
c0000b40:	e9 34 ff ff ff       	jmp    c0000a79 <simple_strtoul+0x125>
c0000b45:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b48:	be 10 00 00 00       	mov    esi,0x10
c0000b4d:	83 c1 02             	add    ecx,0x2
c0000b50:	e9 55 fe ff ff       	jmp    c00009aa <simple_strtoul+0x56>

c0000b55 <largebin_index>:
c0000b55:	89 c2                	mov    edx,eax
c0000b57:	c1 ea 08             	shr    edx,0x8
c0000b5a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b60:	77 10                	ja     c0000b72 <largebin_index+0x1d>
c0000b62:	0f bd d2             	bsr    edx,edx
c0000b65:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b68:	d3 e8                	shr    eax,cl
c0000b6a:	83 e0 03             	and    eax,0x3
c0000b6d:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b71:	c3                   	ret    
c0000b72:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b77:	c3                   	ret    

c0000b78 <malloc_init_state>:
c0000b78:	53                   	push   ebx
c0000b79:	8d 50 34             	lea    edx,[eax+0x34]
c0000b7c:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b82:	89 d1                	mov    ecx,edx
c0000b84:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b87:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b8a:	83 c2 08             	add    edx,0x8
c0000b8d:	39 da                	cmp    edx,ebx
c0000b8f:	75 f3                	jne    c0000b84 <malloc_init_state+0xc>
c0000b91:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b93:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000b9d:	83 e2 03             	and    edx,0x3
c0000ba0:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000baa:	83 ca 48             	or     edx,0x48
c0000bad:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000bb7:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000bc1:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000bc8:	89 10                	mov    DWORD PTR [eax],edx
c0000bca:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000bcd:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bd7:	5b                   	pop    ebx
c0000bd8:	c3                   	ret    

c0000bd9 <malloc_consolidate>:
c0000bd9:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bdb:	85 d2                	test   edx,edx
c0000bdd:	0f 84 d8 00 00 00    	je     c0000cbb <malloc_consolidate+0xe2>
c0000be3:	55                   	push   ebp
c0000be4:	83 e2 fd             	and    edx,0xfffffffd
c0000be7:	57                   	push   edi
c0000be8:	89 c5                	mov    ebp,eax
c0000bea:	56                   	push   esi
c0000beb:	8d 78 34             	lea    edi,[eax+0x34]
c0000bee:	53                   	push   ebx
c0000bef:	83 ec 10             	sub    esp,0x10
c0000bf2:	89 10                	mov    DWORD PTR [eax],edx
c0000bf4:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000bf8:	c1 ea 03             	shr    edx,0x3
c0000bfb:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000bff:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c03:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c06:	85 d2                	test   edx,edx
c0000c08:	0f 84 98 00 00 00    	je     c0000ca6 <malloc_consolidate+0xcd>
c0000c0e:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000c15:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000c18:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000c1b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000c1f:	89 f9                	mov    ecx,edi
c0000c21:	83 e1 fe             	and    ecx,0xfffffffe
c0000c24:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c27:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c2a:	83 e3 fc             	and    ebx,0xfffffffc
c0000c2d:	83 e7 01             	and    edi,0x1
c0000c30:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c33:	75 14                	jne    c0000c49 <malloc_consolidate+0x70>
c0000c35:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c37:	29 fa                	sub    edx,edi
c0000c39:	01 f9                	add    ecx,edi
c0000c3b:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c3e:	89 fb                	mov    ebx,edi
c0000c40:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c43:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c46:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c49:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c4c:	74 40                	je     c0000c8e <malloc_consolidate+0xb5>
c0000c4e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c51:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c54:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c58:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c5b:	83 e7 01             	and    edi,0x1
c0000c5e:	75 0e                	jne    c0000c6e <malloc_consolidate+0x95>
c0000c60:	01 d9                	add    ecx,ebx
c0000c62:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c65:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c68:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c6b:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c6e:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c71:	89 ce                	mov    esi,ecx
c0000c73:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c76:	83 ce 01             	or     esi,0x1
c0000c79:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c7c:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c7f:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c82:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c86:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c89:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c8c:	eb 0c                	jmp    c0000c9a <malloc_consolidate+0xc1>
c0000c8e:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c91:	83 c9 01             	or     ecx,0x1
c0000c94:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c97:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000c9a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000c9e:	85 d2                	test   edx,edx
c0000ca0:	0f 85 6f ff ff ff    	jne    c0000c15 <malloc_consolidate+0x3c>
c0000ca6:	83 c5 04             	add    ebp,0x4
c0000ca9:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000cad:	0f 85 50 ff ff ff    	jne    c0000c03 <malloc_consolidate+0x2a>
c0000cb3:	83 c4 10             	add    esp,0x10
c0000cb6:	5b                   	pop    ebx
c0000cb7:	5e                   	pop    esi
c0000cb8:	5f                   	pop    edi
c0000cb9:	5d                   	pop    ebp
c0000cba:	c3                   	ret    
c0000cbb:	e9 b8 fe ff ff       	jmp    c0000b78 <malloc_init_state>

c0000cc0 <dlfree>:
c0000cc0:	57                   	push   edi
c0000cc1:	56                   	push   esi
c0000cc2:	53                   	push   ebx
c0000cc3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000cc7:	85 db                	test   ebx,ebx
c0000cc9:	0f 84 e2 00 00 00    	je     c0000db1 <dlfree+0xf1>
c0000ccf:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000cd2:	8b 0d 00 7b 02 c0    	mov    ecx,DWORD PTR ds:0xc0027b00
c0000cd8:	89 f0                	mov    eax,esi
c0000cda:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000cdd:	83 e0 fc             	and    eax,0xfffffffc
c0000ce0:	39 c1                	cmp    ecx,eax
c0000ce2:	72 24                	jb     c0000d08 <dlfree+0x48>
c0000ce4:	83 c9 03             	or     ecx,0x3
c0000ce7:	c1 e8 03             	shr    eax,0x3
c0000cea:	89 0d 00 7b 02 c0    	mov    DWORD PTR ds:0xc0027b00,ecx
c0000cf0:	83 e8 02             	sub    eax,0x2
c0000cf3:	8b 0c 85 04 7b 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd84fc]
c0000cfa:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000cfc:	89 14 85 04 7b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd84fc],edx
c0000d03:	e9 a9 00 00 00       	jmp    c0000db1 <dlfree+0xf1>
c0000d08:	83 e6 02             	and    esi,0x2
c0000d0b:	0f 85 a0 00 00 00    	jne    c0000db1 <dlfree+0xf1>
c0000d11:	83 c9 01             	or     ecx,0x1
c0000d14:	8d 34 02             	lea    esi,[edx+eax*1]
c0000d17:	89 0d 00 7b 02 c0    	mov    DWORD PTR ds:0xc0027b00,ecx
c0000d1d:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000d20:	83 e1 fc             	and    ecx,0xfffffffc
c0000d23:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d27:	75 13                	jne    c0000d3c <dlfree+0x7c>
c0000d29:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d2c:	29 da                	sub    edx,ebx
c0000d2e:	01 d8                	add    eax,ebx
c0000d30:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d33:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d36:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d39:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d3c:	39 35 2c 7b 02 c0    	cmp    DWORD PTR ds:0xc0027b2c,esi
c0000d42:	74 40                	je     c0000d84 <dlfree+0xc4>
c0000d44:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d48:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d4b:	80 e3 01             	and    bl,0x1
c0000d4e:	75 0e                	jne    c0000d5e <dlfree+0x9e>
c0000d50:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d53:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d56:	01 c8                	add    eax,ecx
c0000d58:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d5b:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d5e:	8b 0d 3c 7b 02 c0    	mov    ecx,DWORD PTR ds:0xc0027b3c
c0000d64:	c7 42 0c 34 7b 02 c0 	mov    DWORD PTR [edx+0xc],0xc0027b34
c0000d6b:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d6e:	89 15 3c 7b 02 c0    	mov    DWORD PTR ds:0xc0027b3c,edx
c0000d74:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d77:	89 c1                	mov    ecx,eax
c0000d79:	83 c9 01             	or     ecx,0x1
c0000d7c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d7f:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d82:	eb 10                	jmp    c0000d94 <dlfree+0xd4>
c0000d84:	01 c8                	add    eax,ecx
c0000d86:	89 c1                	mov    ecx,eax
c0000d88:	83 c9 01             	or     ecx,0x1
c0000d8b:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d8e:	89 15 2c 7b 02 c0    	mov    DWORD PTR ds:0xc0027b2c,edx
c0000d94:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000d99:	76 16                	jbe    c0000db1 <dlfree+0xf1>
c0000d9b:	f6 05 00 7b 02 c0 02 	test   BYTE PTR ds:0xc0027b00,0x2
c0000da2:	74 0d                	je     c0000db1 <dlfree+0xf1>
c0000da4:	5b                   	pop    ebx
c0000da5:	b8 00 7b 02 c0       	mov    eax,0xc0027b00
c0000daa:	5e                   	pop    esi
c0000dab:	5f                   	pop    edi
c0000dac:	e9 28 fe ff ff       	jmp    c0000bd9 <malloc_consolidate>
c0000db1:	5b                   	pop    ebx
c0000db2:	5e                   	pop    esi
c0000db3:	5f                   	pop    edi
c0000db4:	c3                   	ret    

c0000db5 <sYSMALLOc>:
c0000db5:	55                   	push   ebp
c0000db6:	57                   	push   edi
c0000db7:	56                   	push   esi
c0000db8:	53                   	push   ebx
c0000db9:	89 d3                	mov    ebx,edx
c0000dbb:	83 ec 2c             	sub    esp,0x2c
c0000dbe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000dc2:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000dc8:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000dcb:	8d 42 ff             	lea    eax,[edx-0x1]
c0000dce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dd2:	74 1f                	je     c0000df3 <sYSMALLOc+0x3e>
c0000dd4:	89 d8                	mov    eax,ebx
c0000dd6:	e8 fe fd ff ff       	call   c0000bd9 <malloc_consolidate>
c0000ddb:	83 ec 0c             	sub    esp,0xc
c0000dde:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000de2:	83 e8 07             	sub    eax,0x7
c0000de5:	50                   	push   eax
c0000de6:	e8 30 02 00 00       	call   c000101b <dlmalloc>
c0000deb:	83 c4 10             	add    esp,0x10
c0000dee:	e9 20 02 00 00       	jmp    c0001013 <sYSMALLOc+0x25e>
c0000df3:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000df6:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000dfc:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000dff:	83 e0 fc             	and    eax,0xfffffffc
c0000e02:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e0a:	83 c0 10             	add    eax,0x10
c0000e0d:	01 c1                	add    ecx,eax
c0000e0f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e13:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000e1a:	74 04                	je     c0000e20 <sYSMALLOc+0x6b>
c0000e1c:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000e20:	f7 da                	neg    edx
c0000e22:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000e26:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e2a:	21 d1                	and    ecx,edx
c0000e2c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e30:	7f 07                	jg     c0000e39 <sYSMALLOc+0x84>
c0000e32:	31 c0                	xor    eax,eax
c0000e34:	e9 da 01 00 00       	jmp    c0001013 <sYSMALLOc+0x25e>
c0000e39:	83 ec 0c             	sub    esp,0xc
c0000e3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e40:	e8 3b 8d 00 00       	call   c0009b80 <sbrk>
c0000e45:	83 c4 10             	add    esp,0x10
c0000e48:	89 c6                	mov    esi,eax
c0000e4a:	83 f8 ff             	cmp    eax,0xffffffff
c0000e4d:	74 e3                	je     c0000e32 <sYSMALLOc+0x7d>
c0000e4f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e53:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e57:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e5a:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e60:	39 f1                	cmp    ecx,esi
c0000e62:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e68:	75 13                	jne    c0000e7d <sYSMALLOc+0xc8>
c0000e6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e6e:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e72:	83 c8 01             	or     eax,0x1
c0000e75:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e78:	e9 3e 01 00 00       	jmp    c0000fbb <sYSMALLOc+0x206>
c0000e7d:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e83:	88 d0                	mov    al,dl
c0000e85:	83 e0 01             	and    eax,0x1
c0000e88:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e8d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e91:	0f 95 c0             	setne  al
c0000e94:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000e98:	39 f1                	cmp    ecx,esi
c0000e9a:	76 12                	jbe    c0000eae <sYSMALLOc+0xf9>
c0000e9c:	84 c0                	test   al,al
c0000e9e:	74 0e                	je     c0000eae <sYSMALLOc+0xf9>
c0000ea0:	83 e2 fe             	and    edx,0xfffffffe
c0000ea3:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000ea9:	e9 83 00 00 00       	jmp    c0000f31 <sYSMALLOc+0x17c>
c0000eae:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000eb3:	74 7c                	je     c0000f31 <sYSMALLOc+0x17c>
c0000eb5:	84 c0                	test   al,al
c0000eb7:	74 0c                	je     c0000ec5 <sYSMALLOc+0x110>
c0000eb9:	89 f0                	mov    eax,esi
c0000ebb:	29 c8                	sub    eax,ecx
c0000ebd:	01 e8                	add    eax,ebp
c0000ebf:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000ec5:	89 f2                	mov    edx,esi
c0000ec7:	83 e2 07             	and    edx,0x7
c0000eca:	74 0c                	je     c0000ed8 <sYSMALLOc+0x123>
c0000ecc:	b8 08 00 00 00       	mov    eax,0x8
c0000ed1:	29 d0                	sub    eax,edx
c0000ed3:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000ed6:	eb 04                	jmp    c0000edc <sYSMALLOc+0x127>
c0000ed8:	89 f5                	mov    ebp,esi
c0000eda:	31 c0                	xor    eax,eax
c0000edc:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000ee0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000ee4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ee8:	01 c1                	add    ecx,eax
c0000eea:	83 ec 0c             	sub    esp,0xc
c0000eed:	01 f1                	add    ecx,esi
c0000eef:	01 ca                	add    edx,ecx
c0000ef1:	29 c8                	sub    eax,ecx
c0000ef3:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ef7:	01 c2                	add    edx,eax
c0000ef9:	52                   	push   edx
c0000efa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000efe:	e8 7d 8c 00 00       	call   c0009b80 <sbrk>
c0000f03:	83 c4 10             	add    esp,0x10
c0000f06:	83 f8 ff             	cmp    eax,0xffffffff
c0000f09:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f0d:	75 0f                	jne    c0000f1e <sYSMALLOc+0x169>
c0000f0f:	83 ec 0c             	sub    esp,0xc
c0000f12:	6a 00                	push   0x0
c0000f14:	e8 67 8c 00 00       	call   c0009b80 <sbrk>
c0000f19:	83 c4 10             	add    esp,0x10
c0000f1c:	eb 30                	jmp    c0000f4e <sYSMALLOc+0x199>
c0000f1e:	39 c6                	cmp    esi,eax
c0000f20:	76 33                	jbe    c0000f55 <sYSMALLOc+0x1a0>
c0000f22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f26:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f2d:	01 f0                	add    eax,esi
c0000f2f:	eb 1d                	jmp    c0000f4e <sYSMALLOc+0x199>
c0000f31:	83 ec 0c             	sub    esp,0xc
c0000f34:	89 f5                	mov    ebp,esi
c0000f36:	6a 00                	push   0x0
c0000f38:	e8 43 8c 00 00       	call   c0009b80 <sbrk>
c0000f3d:	89 c2                	mov    edx,eax
c0000f3f:	29 f2                	sub    edx,esi
c0000f41:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f45:	83 c4 10             	add    esp,0x10
c0000f48:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f4e:	31 d2                	xor    edx,edx
c0000f50:	83 f8 ff             	cmp    eax,0xffffffff
c0000f53:	74 66                	je     c0000fbb <sYSMALLOc+0x206>
c0000f55:	29 e8                	sub    eax,ebp
c0000f57:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f5a:	01 d0                	add    eax,edx
c0000f5c:	83 c8 01             	or     eax,0x1
c0000f5f:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f62:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f68:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f6d:	74 4c                	je     c0000fbb <sYSMALLOc+0x206>
c0000f6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f73:	83 e8 0c             	sub    eax,0xc
c0000f76:	83 e0 f8             	and    eax,0xfffffff8
c0000f79:	89 c2                	mov    edx,eax
c0000f7b:	83 ca 01             	or     edx,0x1
c0000f7e:	83 f8 0f             	cmp    eax,0xf
c0000f81:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f84:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f8c:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f94:	76 25                	jbe    c0000fbb <sYSMALLOc+0x206>
c0000f96:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000f9c:	83 ec 0c             	sub    esp,0xc
c0000f9f:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000fa9:	83 c7 08             	add    edi,0x8
c0000fac:	57                   	push   edi
c0000fad:	e8 0e fd ff ff       	call   c0000cc0 <dlfree>
c0000fb2:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000fb8:	83 c4 10             	add    esp,0x10
c0000fbb:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fc1:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fc7:	73 06                	jae    c0000fcf <sYSMALLOc+0x21a>
c0000fc9:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fcf:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fd5:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fdb:	73 06                	jae    c0000fe3 <sYSMALLOc+0x22e>
c0000fdd:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000fe3:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fe6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000fe9:	83 e2 fc             	and    edx,0xfffffffc
c0000fec:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000ff0:	0f 82 3c fe ff ff    	jb     c0000e32 <sYSMALLOc+0x7d>
c0000ff6:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000ffa:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000ffd:	29 fa                	sub    edx,edi
c0000fff:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001002:	83 ca 01             	or     edx,0x1
c0001005:	89 fb                	mov    ebx,edi
c0001007:	83 c0 08             	add    eax,0x8
c000100a:	83 cb 01             	or     ebx,0x1
c000100d:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001010:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001013:	83 c4 2c             	add    esp,0x2c
c0001016:	5b                   	pop    ebx
c0001017:	5e                   	pop    esi
c0001018:	5f                   	pop    edi
c0001019:	5d                   	pop    ebp
c000101a:	c3                   	ret    

c000101b <dlmalloc>:
c000101b:	55                   	push   ebp
c000101c:	57                   	push   edi
c000101d:	56                   	push   esi
c000101e:	53                   	push   ebx
c000101f:	83 ec 1c             	sub    esp,0x1c
c0001022:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001026:	83 f8 df             	cmp    eax,0xffffffdf
c0001029:	0f 87 70 03 00 00    	ja     c000139f <dlmalloc+0x384>
c000102f:	83 c0 0b             	add    eax,0xb
c0001032:	be 10 00 00 00       	mov    esi,0x10
c0001037:	83 f8 0f             	cmp    eax,0xf
c000103a:	76 05                	jbe    c0001041 <dlmalloc+0x26>
c000103c:	83 e0 f8             	and    eax,0xfffffff8
c000103f:	89 c6                	mov    esi,eax
c0001041:	8b 3d 00 7b 02 c0    	mov    edi,DWORD PTR ds:0xc0027b00
c0001047:	f7 c7 01 00 00 00    	test   edi,0x1
c000104d:	75 17                	jne    c0001066 <dlmalloc+0x4b>
c000104f:	85 ff                	test   edi,edi
c0001051:	0f 85 05 03 00 00    	jne    c000135c <dlmalloc+0x341>
c0001057:	b8 00 7b 02 c0       	mov    eax,0xc0027b00
c000105c:	e8 78 fb ff ff       	call   c0000bd9 <malloc_consolidate>
c0001061:	e9 f6 02 00 00       	jmp    c000135c <dlmalloc+0x341>
c0001066:	39 f7                	cmp    edi,esi
c0001068:	72 1f                	jb     c0001089 <dlmalloc+0x6e>
c000106a:	89 f2                	mov    edx,esi
c000106c:	c1 ea 03             	shr    edx,0x3
c000106f:	83 ea 02             	sub    edx,0x2
c0001072:	8b 04 95 04 7b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd84fc]
c0001079:	85 c0                	test   eax,eax
c000107b:	74 0c                	je     c0001089 <dlmalloc+0x6e>
c000107d:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001080:	89 0c 95 04 7b 02 c0 	mov    DWORD PTR [edx*4-0x3ffd84fc],ecx
c0001087:	eb 30                	jmp    c00010b9 <dlmalloc+0x9e>
c0001089:	89 f0                	mov    eax,esi
c000108b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001091:	77 2e                	ja     c00010c1 <dlmalloc+0xa6>
c0001093:	c1 e8 03             	shr    eax,0x3
c0001096:	8d 14 c5 34 7b 02 c0 	lea    edx,[eax*8-0x3ffd84cc]
c000109d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010a1:	8d 5a f8             	lea    ebx,[edx-0x8]
c00010a4:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00010a7:	39 c3                	cmp    ebx,eax
c00010a9:	74 2e                	je     c00010d9 <dlmalloc+0xbe>
c00010ab:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00010ae:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00010b3:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00010b6:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00010b9:	83 c0 08             	add    eax,0x8
c00010bc:	e9 e0 02 00 00       	jmp    c00013a1 <dlmalloc+0x386>
c00010c1:	e8 8f fa ff ff       	call   c0000b55 <largebin_index>
c00010c6:	83 e7 02             	and    edi,0x2
c00010c9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010cd:	74 0a                	je     c00010d9 <dlmalloc+0xbe>
c00010cf:	b8 00 7b 02 c0       	mov    eax,0xc0027b00
c00010d4:	e8 00 fb ff ff       	call   c0000bd9 <malloc_consolidate>
c00010d9:	8d 46 10             	lea    eax,[esi+0x10]
c00010dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010e0:	8b 1d 40 7b 02 c0    	mov    ebx,DWORD PTR ds:0xc0027b40
c00010e6:	81 fb 34 7b 02 c0    	cmp    ebx,0xc0027b34
c00010ec:	0f 84 13 01 00 00    	je     c0001205 <dlmalloc+0x1ea>
c00010f2:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010f5:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00010f8:	83 e7 fc             	and    edi,0xfffffffc
c00010fb:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001101:	77 4c                	ja     c000114f <dlmalloc+0x134>
c0001103:	3d 34 7b 02 c0       	cmp    eax,0xc0027b34
c0001108:	75 45                	jne    c000114f <dlmalloc+0x134>
c000110a:	39 1d 30 7b 02 c0    	cmp    DWORD PTR ds:0xc0027b30,ebx
c0001110:	75 3d                	jne    c000114f <dlmalloc+0x134>
c0001112:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001116:	73 37                	jae    c000114f <dlmalloc+0x134>
c0001118:	8d 04 33             	lea    eax,[ebx+esi*1]
c000111b:	89 fa                	mov    edx,edi
c000111d:	a3 3c 7b 02 c0       	mov    ds:0xc0027b3c,eax
c0001122:	a3 40 7b 02 c0       	mov    ds:0xc0027b40,eax
c0001127:	a3 30 7b 02 c0       	mov    ds:0xc0027b30,eax
c000112c:	29 f2                	sub    edx,esi
c000112e:	c7 40 08 34 7b 02 c0 	mov    DWORD PTR [eax+0x8],0xc0027b34
c0001135:	c7 40 0c 34 7b 02 c0 	mov    DWORD PTR [eax+0xc],0xc0027b34
c000113c:	83 ce 01             	or     esi,0x1
c000113f:	89 d1                	mov    ecx,edx
c0001141:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001144:	83 c9 01             	or     ecx,0x1
c0001147:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000114a:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000114d:	eb 15                	jmp    c0001164 <dlmalloc+0x149>
c000114f:	a3 40 7b 02 c0       	mov    ds:0xc0027b40,eax
c0001154:	39 fe                	cmp    esi,edi
c0001156:	c7 40 08 34 7b 02 c0 	mov    DWORD PTR [eax+0x8],0xc0027b34
c000115d:	75 0d                	jne    c000116c <dlmalloc+0x151>
c000115f:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001164:	8d 43 08             	lea    eax,[ebx+0x8]
c0001167:	e9 35 02 00 00       	jmp    c00013a1 <dlmalloc+0x386>
c000116c:	89 f8                	mov    eax,edi
c000116e:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001174:	77 19                	ja     c000118f <dlmalloc+0x174>
c0001176:	c1 e8 03             	shr    eax,0x3
c0001179:	8d 14 00             	lea    edx,[eax+eax*1]
c000117c:	83 c2 0d             	add    edx,0xd
c000117f:	8d 2c 95 f8 7a 02 c0 	lea    ebp,[edx*4-0x3ffd8508]
c0001186:	8b 14 95 00 7b 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8500]
c000118d:	eb 46                	jmp    c00011d5 <dlmalloc+0x1ba>
c000118f:	e8 c1 f9 ff ff       	call   c0000b55 <largebin_index>
c0001194:	8d 14 00             	lea    edx,[eax+eax*1]
c0001197:	83 c2 0d             	add    edx,0xd
c000119a:	8d 0c 95 00 7b 02 c0 	lea    ecx,[edx*4-0x3ffd8500]
c00011a1:	8b 14 95 00 7b 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8500]
c00011a8:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00011ab:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00011af:	89 d5                	mov    ebp,edx
c00011b1:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00011b5:	74 1e                	je     c00011d5 <dlmalloc+0x1ba>
c00011b7:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00011ba:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00011bd:	77 12                	ja     c00011d1 <dlmalloc+0x1b6>
c00011bf:	83 cf 01             	or     edi,0x1
c00011c2:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00011c5:	76 05                	jbe    c00011cc <dlmalloc+0x1b1>
c00011c7:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011ca:	eb f6                	jmp    c00011c2 <dlmalloc+0x1a7>
c00011cc:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011cf:	eb 04                	jmp    c00011d5 <dlmalloc+0x1ba>
c00011d1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011d5:	89 c7                	mov    edi,eax
c00011d7:	88 c1                	mov    cl,al
c00011d9:	c1 ff 05             	sar    edi,0x5
c00011dc:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011e0:	bf 01 00 00 00       	mov    edi,0x1
c00011e5:	d3 e7                	shl    edi,cl
c00011e7:	89 f8                	mov    eax,edi
c00011e9:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011ed:	09 04 bd 34 7e 02 c0 	or     DWORD PTR [edi*4-0x3ffd81cc],eax
c00011f4:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011f7:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00011fa:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00011fd:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001200:	e9 db fe ff ff       	jmp    c00010e0 <dlmalloc+0xc5>
c0001205:	81 fe ff 00 00 00    	cmp    esi,0xff
c000120b:	76 78                	jbe    c0001285 <dlmalloc+0x26a>
c000120d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001211:	8d 04 c5 34 7b 02 c0 	lea    eax,[eax*8-0x3ffd84cc]
c0001218:	8d 48 f8             	lea    ecx,[eax-0x8]
c000121b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000121e:	39 ca                	cmp    edx,ecx
c0001220:	74 63                	je     c0001285 <dlmalloc+0x26a>
c0001222:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001225:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001228:	83 e3 fc             	and    ebx,0xfffffffc
c000122b:	39 de                	cmp    esi,ebx
c000122d:	77 52                	ja     c0001281 <dlmalloc+0x266>
c000122f:	89 df                	mov    edi,ebx
c0001231:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001234:	29 f7                	sub    edi,esi
c0001236:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001239:	01 d3                	add    ebx,edx
c000123b:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000123e:	83 ff 0f             	cmp    edi,0xf
c0001241:	8d 42 08             	lea    eax,[edx+0x8]
c0001244:	77 09                	ja     c000124f <dlmalloc+0x234>
c0001246:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000124a:	e9 52 01 00 00       	jmp    c00013a1 <dlmalloc+0x386>
c000124f:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001252:	83 ce 01             	or     esi,0x1
c0001255:	89 0d 3c 7b 02 c0    	mov    DWORD PTR ds:0xc0027b3c,ecx
c000125b:	89 0d 40 7b 02 c0    	mov    DWORD PTR ds:0xc0027b40,ecx
c0001261:	c7 41 08 34 7b 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0027b34
c0001268:	c7 41 0c 34 7b 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0027b34
c000126f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001272:	89 fa                	mov    edx,edi
c0001274:	83 ca 01             	or     edx,0x1
c0001277:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000127a:	89 3b                	mov    DWORD PTR [ebx],edi
c000127c:	e9 20 01 00 00       	jmp    c00013a1 <dlmalloc+0x386>
c0001281:	89 c2                	mov    edx,eax
c0001283:	eb 99                	jmp    c000121e <dlmalloc+0x203>
c0001285:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001289:	b8 01 00 00 00       	mov    eax,0x1
c000128e:	41                   	inc    ecx
c000128f:	89 cb                	mov    ebx,ecx
c0001291:	8d 14 cd 2c 7b 02 c0 	lea    edx,[ecx*8-0x3ffd84d4]
c0001298:	c1 eb 05             	shr    ebx,0x5
c000129b:	d3 e0                	shl    eax,cl
c000129d:	8b 3c 9d 34 7e 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd81cc]
c00012a4:	39 f8                	cmp    eax,edi
c00012a6:	77 04                	ja     c00012ac <dlmalloc+0x291>
c00012a8:	85 c0                	test   eax,eax
c00012aa:	75 26                	jne    c00012d2 <dlmalloc+0x2b7>
c00012ac:	43                   	inc    ebx
c00012ad:	83 fb 02             	cmp    ebx,0x2
c00012b0:	0f 87 a6 00 00 00    	ja     c000135c <dlmalloc+0x341>
c00012b6:	8b 3c 9d 34 7e 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd81cc]
c00012bd:	85 ff                	test   edi,edi
c00012bf:	74 eb                	je     c00012ac <dlmalloc+0x291>
c00012c1:	89 d8                	mov    eax,ebx
c00012c3:	c1 e0 06             	shl    eax,0x6
c00012c6:	8d 14 85 2c 7b 02 c0 	lea    edx,[eax*4-0x3ffd84d4]
c00012cd:	b8 01 00 00 00       	mov    eax,0x1
c00012d2:	85 f8                	test   eax,edi
c00012d4:	75 07                	jne    c00012dd <dlmalloc+0x2c2>
c00012d6:	83 c2 08             	add    edx,0x8
c00012d9:	01 c0                	add    eax,eax
c00012db:	eb f5                	jmp    c00012d2 <dlmalloc+0x2b7>
c00012dd:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012e0:	39 ca                	cmp    edx,ecx
c00012e2:	75 14                	jne    c00012f8 <dlmalloc+0x2dd>
c00012e4:	89 c1                	mov    ecx,eax
c00012e6:	83 c2 08             	add    edx,0x8
c00012e9:	f7 d1                	not    ecx
c00012eb:	01 c0                	add    eax,eax
c00012ed:	21 cf                	and    edi,ecx
c00012ef:	89 3c 9d 34 7e 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd81cc],edi
c00012f6:	eb ac                	jmp    c00012a4 <dlmalloc+0x289>
c00012f8:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00012fb:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00012fe:	83 e0 fc             	and    eax,0xfffffffc
c0001301:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001304:	89 c3                	mov    ebx,eax
c0001306:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001309:	29 f3                	sub    ebx,esi
c000130b:	8d 14 01             	lea    edx,[ecx+eax*1]
c000130e:	83 fb 0f             	cmp    ebx,0xf
c0001311:	8d 41 08             	lea    eax,[ecx+0x8]
c0001314:	77 09                	ja     c000131f <dlmalloc+0x304>
c0001316:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c000131a:	e9 82 00 00 00       	jmp    c00013a1 <dlmalloc+0x386>
c000131f:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001322:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001328:	89 3d 3c 7b 02 c0    	mov    DWORD PTR ds:0xc0027b3c,edi
c000132e:	89 3d 40 7b 02 c0    	mov    DWORD PTR ds:0xc0027b40,edi
c0001334:	c7 47 08 34 7b 02 c0 	mov    DWORD PTR [edi+0x8],0xc0027b34
c000133b:	c7 47 0c 34 7b 02 c0 	mov    DWORD PTR [edi+0xc],0xc0027b34
c0001342:	77 06                	ja     c000134a <dlmalloc+0x32f>
c0001344:	89 3d 30 7b 02 c0    	mov    DWORD PTR ds:0xc0027b30,edi
c000134a:	83 ce 01             	or     esi,0x1
c000134d:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001350:	89 d9                	mov    ecx,ebx
c0001352:	83 c9 01             	or     ecx,0x1
c0001355:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001358:	89 1a                	mov    DWORD PTR [edx],ebx
c000135a:	eb 45                	jmp    c00013a1 <dlmalloc+0x386>
c000135c:	a1 2c 7b 02 c0       	mov    eax,ds:0xc0027b2c
c0001361:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001364:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001367:	83 e2 fc             	and    edx,0xfffffffc
c000136a:	39 d1                	cmp    ecx,edx
c000136c:	77 1e                	ja     c000138c <dlmalloc+0x371>
c000136e:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001371:	89 f3                	mov    ebx,esi
c0001373:	89 0d 2c 7b 02 c0    	mov    DWORD PTR ds:0xc0027b2c,ecx
c0001379:	83 cb 01             	or     ebx,0x1
c000137c:	29 f2                	sub    edx,esi
c000137e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001381:	83 ca 01             	or     edx,0x1
c0001384:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001387:	e9 2d fd ff ff       	jmp    c00010b9 <dlmalloc+0x9e>
c000138c:	83 c4 1c             	add    esp,0x1c
c000138f:	89 f0                	mov    eax,esi
c0001391:	5b                   	pop    ebx
c0001392:	ba 00 7b 02 c0       	mov    edx,0xc0027b00
c0001397:	5e                   	pop    esi
c0001398:	5f                   	pop    edi
c0001399:	5d                   	pop    ebp
c000139a:	e9 16 fa ff ff       	jmp    c0000db5 <sYSMALLOc>
c000139f:	31 c0                	xor    eax,eax
c00013a1:	83 c4 1c             	add    esp,0x1c
c00013a4:	5b                   	pop    ebx
c00013a5:	5e                   	pop    esi
c00013a6:	5f                   	pop    edi
c00013a7:	5d                   	pop    ebp
c00013a8:	c3                   	ret    

c00013a9 <iALLOc>:
c00013a9:	55                   	push   ebp
c00013aa:	89 c5                	mov    ebp,eax
c00013ac:	57                   	push   edi
c00013ad:	56                   	push   esi
c00013ae:	53                   	push   ebx
c00013af:	83 ec 2c             	sub    esp,0x2c
c00013b2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00013b6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00013ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00013be:	83 3d 00 7b 02 c0 00 	cmp    DWORD PTR ds:0xc0027b00,0x0
c00013c5:	75 12                	jne    c00013d9 <iALLOc+0x30>
c00013c7:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013cb:	b8 00 7b 02 c0       	mov    eax,0xc0027b00
c00013d0:	e8 04 f8 ff ff       	call   c0000bd9 <malloc_consolidate>
c00013d5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013d9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013de:	74 12                	je     c00013f2 <iALLOc+0x49>
c00013e0:	85 ed                	test   ebp,ebp
c00013e2:	0f 84 64 01 00 00    	je     c000154c <iALLOc+0x1a3>
c00013e8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013f0:	eb 33                	jmp    c0001425 <iALLOc+0x7c>
c00013f2:	85 ed                	test   ebp,ebp
c00013f4:	75 14                	jne    c000140a <iALLOc+0x61>
c00013f6:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00013fe:	83 c4 2c             	add    esp,0x2c
c0001401:	5b                   	pop    ebx
c0001402:	5e                   	pop    esi
c0001403:	5f                   	pop    edi
c0001404:	5d                   	pop    ebp
c0001405:	e9 11 fc ff ff       	jmp    c000101b <dlmalloc>
c000140a:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001411:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001419:	83 f8 0f             	cmp    eax,0xf
c000141c:	76 07                	jbe    c0001425 <iALLOc+0x7c>
c000141e:	83 e0 f8             	and    eax,0xfffffff8
c0001421:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001425:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c000142a:	75 09                	jne    c0001435 <iALLOc+0x8c>
c000142c:	89 d0                	mov    eax,edx
c000142e:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001431:	31 f6                	xor    esi,esi
c0001433:	eb 3b                	jmp    c0001470 <iALLOc+0xc7>
c0001435:	8b 02                	mov    eax,DWORD PTR [edx]
c0001437:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000143f:	83 c0 0b             	add    eax,0xb
c0001442:	83 f8 0f             	cmp    eax,0xf
c0001445:	76 07                	jbe    c000144e <iALLOc+0xa5>
c0001447:	83 e0 f8             	and    eax,0xfffffff8
c000144a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000144e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001452:	0f af f5             	imul   esi,ebp
c0001455:	eb 25                	jmp    c000147c <iALLOc+0xd3>
c0001457:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001459:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c000145c:	bb 10 00 00 00       	mov    ebx,0x10
c0001461:	83 f9 0f             	cmp    ecx,0xf
c0001464:	76 05                	jbe    c000146b <iALLOc+0xc2>
c0001466:	83 e1 f8             	and    ecx,0xfffffff8
c0001469:	89 cb                	mov    ebx,ecx
c000146b:	01 de                	add    esi,ebx
c000146d:	83 c0 04             	add    eax,0x4
c0001470:	39 c7                	cmp    edi,eax
c0001472:	75 e3                	jne    c0001457 <iALLOc+0xae>
c0001474:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000147c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001480:	8b 1d 54 7e 02 c0    	mov    ebx,DWORD PTR ds:0xc0027e54
c0001486:	83 ec 0c             	sub    esp,0xc
c0001489:	c7 05 54 7e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027e54,0x0
c0001493:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001497:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000149b:	50                   	push   eax
c000149c:	e8 7a fb ff ff       	call   c000101b <dlmalloc>
c00014a1:	83 c4 10             	add    esp,0x10
c00014a4:	89 1d 54 7e 02 c0    	mov    DWORD PTR ds:0xc0027e54,ebx
c00014aa:	85 c0                	test   eax,eax
c00014ac:	0f 84 92 00 00 00    	je     c0001544 <iALLOc+0x19b>
c00014b2:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00014b5:	8d 78 f8             	lea    edi,[eax-0x8]
c00014b8:	83 e3 fc             	and    ebx,0xfffffffc
c00014bb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00014bf:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00014c4:	74 1e                	je     c00014e4 <iALLOc+0x13b>
c00014c6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014ca:	89 d9                	mov    ecx,ebx
c00014cc:	52                   	push   edx
c00014cd:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014d1:	83 e9 04             	sub    ecx,0x4
c00014d4:	51                   	push   ecx
c00014d5:	6a 00                	push   0x0
c00014d7:	50                   	push   eax
c00014d8:	e8 9f f1 ff ff       	call   c000067c <memset>
c00014dd:	83 c4 10             	add    esp,0x10
c00014e0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014e9:	75 14                	jne    c00014ff <iALLOc+0x156>
c00014eb:	8d 04 37             	lea    eax,[edi+esi*1]
c00014ee:	29 f3                	sub    ebx,esi
c00014f0:	8d 48 08             	lea    ecx,[eax+0x8]
c00014f3:	83 cb 01             	or     ebx,0x1
c00014f6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014fa:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014fd:	89 f3                	mov    ebx,esi
c00014ff:	31 c0                	xor    eax,eax
c0001501:	4d                   	dec    ebp
c0001502:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001505:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001509:	39 c5                	cmp    ebp,eax
c000150b:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000150e:	74 2c                	je     c000153c <iALLOc+0x193>
c0001510:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001514:	85 c9                	test   ecx,ecx
c0001516:	75 15                	jne    c000152d <iALLOc+0x184>
c0001518:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c000151b:	8d 71 0b             	lea    esi,[ecx+0xb]
c000151e:	b9 10 00 00 00       	mov    ecx,0x10
c0001523:	83 fe 0f             	cmp    esi,0xf
c0001526:	76 05                	jbe    c000152d <iALLOc+0x184>
c0001528:	83 e6 f8             	and    esi,0xfffffff8
c000152b:	89 f1                	mov    ecx,esi
c000152d:	89 ce                	mov    esi,ecx
c000152f:	29 cb                	sub    ebx,ecx
c0001531:	83 ce 01             	or     esi,0x1
c0001534:	40                   	inc    eax
c0001535:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001538:	01 cf                	add    edi,ecx
c000153a:	eb c6                	jmp    c0001502 <iALLOc+0x159>
c000153c:	83 cb 01             	or     ebx,0x1
c000153f:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001542:	eb 08                	jmp    c000154c <iALLOc+0x1a3>
c0001544:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000154c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001550:	83 c4 2c             	add    esp,0x2c
c0001553:	5b                   	pop    ebx
c0001554:	5e                   	pop    esi
c0001555:	5f                   	pop    edi
c0001556:	5d                   	pop    ebp
c0001557:	c3                   	ret    

c0001558 <dlrealloc>:
c0001558:	55                   	push   ebp
c0001559:	57                   	push   edi
c000155a:	56                   	push   esi
c000155b:	53                   	push   ebx
c000155c:	83 ec 1c             	sub    esp,0x1c
c000155f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001563:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001567:	85 db                	test   ebx,ebx
c0001569:	75 10                	jne    c000157b <dlrealloc+0x23>
c000156b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000156f:	83 c4 1c             	add    esp,0x1c
c0001572:	5b                   	pop    ebx
c0001573:	5e                   	pop    esi
c0001574:	5f                   	pop    edi
c0001575:	5d                   	pop    ebp
c0001576:	e9 a0 fa ff ff       	jmp    c000101b <dlmalloc>
c000157b:	83 f8 df             	cmp    eax,0xffffffdf
c000157e:	76 07                	jbe    c0001587 <dlrealloc+0x2f>
c0001580:	31 db                	xor    ebx,ebx
c0001582:	e9 6a 01 00 00       	jmp    c00016f1 <dlrealloc+0x199>
c0001587:	83 c0 0b             	add    eax,0xb
c000158a:	bd 10 00 00 00       	mov    ebp,0x10
c000158f:	83 f8 0f             	cmp    eax,0xf
c0001592:	76 05                	jbe    c0001599 <dlrealloc+0x41>
c0001594:	83 e0 f8             	and    eax,0xfffffff8
c0001597:	89 c5                	mov    ebp,eax
c0001599:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c000159c:	8d 7b f8             	lea    edi,[ebx-0x8]
c000159f:	89 c6                	mov    esi,eax
c00015a1:	83 e6 fc             	and    esi,0xfffffffc
c00015a4:	a8 02                	test   al,0x2
c00015a6:	75 d8                	jne    c0001580 <dlrealloc+0x28>
c00015a8:	39 f5                	cmp    ebp,esi
c00015aa:	0f 86 04 01 00 00    	jbe    c00016b4 <dlrealloc+0x15c>
c00015b0:	8d 14 37             	lea    edx,[edi+esi*1]
c00015b3:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00015b6:	39 15 2c 7b 02 c0    	cmp    DWORD PTR ds:0xc0027b2c,edx
c00015bc:	75 33                	jne    c00015f1 <dlrealloc+0x99>
c00015be:	83 e1 fc             	and    ecx,0xfffffffc
c00015c1:	01 f1                	add    ecx,esi
c00015c3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015c7:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015ca:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015ce:	77 49                	ja     c0001619 <dlrealloc+0xc1>
c00015d0:	01 ef                	add    edi,ebp
c00015d2:	83 e0 01             	and    eax,0x1
c00015d5:	09 e8                	or     eax,ebp
c00015d7:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015da:	89 3d 2c 7b 02 c0    	mov    DWORD PTR ds:0xc0027b2c,edi
c00015e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015e4:	29 e8                	sub    eax,ebp
c00015e6:	83 c8 01             	or     eax,0x1
c00015e9:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015ec:	e9 00 01 00 00       	jmp    c00016f1 <dlrealloc+0x199>
c00015f1:	89 c8                	mov    eax,ecx
c00015f3:	83 e0 fe             	and    eax,0xfffffffe
c00015f6:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00015fb:	75 1c                	jne    c0001619 <dlrealloc+0xc1>
c00015fd:	83 e1 fc             	and    ecx,0xfffffffc
c0001600:	01 f1                	add    ecx,esi
c0001602:	39 cd                	cmp    ebp,ecx
c0001604:	77 13                	ja     c0001619 <dlrealloc+0xc1>
c0001606:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001609:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000160c:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000160f:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c0001612:	89 ce                	mov    esi,ecx
c0001614:	e9 9b 00 00 00       	jmp    c00016b4 <dlrealloc+0x15c>
c0001619:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000161d:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001620:	83 ec 0c             	sub    esp,0xc
c0001623:	50                   	push   eax
c0001624:	e8 f2 f9 ff ff       	call   c000101b <dlmalloc>
c0001629:	83 c4 10             	add    esp,0x10
c000162c:	85 c0                	test   eax,eax
c000162e:	0f 84 4c ff ff ff    	je     c0001580 <dlrealloc+0x28>
c0001634:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001637:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000163b:	39 ca                	cmp    edx,ecx
c000163d:	75 0a                	jne    c0001649 <dlrealloc+0xf1>
c000163f:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001642:	83 e0 fc             	and    eax,0xfffffffc
c0001645:	01 c6                	add    esi,eax
c0001647:	eb 6b                	jmp    c00016b4 <dlrealloc+0x15c>
c0001649:	8d 4e fc             	lea    ecx,[esi-0x4]
c000164c:	83 f9 27             	cmp    ecx,0x27
c000164f:	76 08                	jbe    c0001659 <dlrealloc+0x101>
c0001651:	89 de                	mov    esi,ebx
c0001653:	89 c7                	mov    edi,eax
c0001655:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001657:	eb 43                	jmp    c000169c <dlrealloc+0x144>
c0001659:	8b 13                	mov    edx,DWORD PTR [ebx]
c000165b:	83 f9 13             	cmp    ecx,0x13
c000165e:	89 10                	mov    DWORD PTR [eax],edx
c0001660:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001663:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001666:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001669:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000166c:	76 2e                	jbe    c000169c <dlrealloc+0x144>
c000166e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001671:	83 f9 1b             	cmp    ecx,0x1b
c0001674:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001677:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000167a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000167d:	76 1d                	jbe    c000169c <dlrealloc+0x144>
c000167f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001682:	83 f9 23             	cmp    ecx,0x23
c0001685:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001688:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000168b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000168e:	76 0c                	jbe    c000169c <dlrealloc+0x144>
c0001690:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001693:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001696:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001699:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000169c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00016a0:	83 ec 0c             	sub    esp,0xc
c00016a3:	53                   	push   ebx
c00016a4:	e8 17 f6 ff ff       	call   c0000cc0 <dlfree>
c00016a9:	83 c4 10             	add    esp,0x10
c00016ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b0:	89 c3                	mov    ebx,eax
c00016b2:	eb 3d                	jmp    c00016f1 <dlrealloc+0x199>
c00016b4:	89 f2                	mov    edx,esi
c00016b6:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00016b9:	29 ea                	sub    edx,ebp
c00016bb:	83 e1 01             	and    ecx,0x1
c00016be:	8d 04 37             	lea    eax,[edi+esi*1]
c00016c1:	83 fa 0f             	cmp    edx,0xf
c00016c4:	77 0b                	ja     c00016d1 <dlrealloc+0x179>
c00016c6:	09 ce                	or     esi,ecx
c00016c8:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016cb:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016cf:	eb 20                	jmp    c00016f1 <dlrealloc+0x199>
c00016d1:	01 ef                	add    edi,ebp
c00016d3:	83 ec 0c             	sub    esp,0xc
c00016d6:	09 cd                	or     ebp,ecx
c00016d8:	83 ca 01             	or     edx,0x1
c00016db:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016de:	83 c7 08             	add    edi,0x8
c00016e1:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016e4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016e8:	57                   	push   edi
c00016e9:	e8 d2 f5 ff ff       	call   c0000cc0 <dlfree>
c00016ee:	83 c4 10             	add    esp,0x10
c00016f1:	83 c4 1c             	add    esp,0x1c
c00016f4:	89 d8                	mov    eax,ebx
c00016f6:	5b                   	pop    ebx
c00016f7:	5e                   	pop    esi
c00016f8:	5f                   	pop    edi
c00016f9:	5d                   	pop    ebp
c00016fa:	c3                   	ret    

c00016fb <dlmemalign>:
c00016fb:	55                   	push   ebp
c00016fc:	57                   	push   edi
c00016fd:	56                   	push   esi
c00016fe:	53                   	push   ebx
c00016ff:	83 ec 0c             	sub    esp,0xc
c0001702:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001706:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000170a:	83 fa 08             	cmp    edx,0x8
c000170d:	77 10                	ja     c000171f <dlmemalign+0x24>
c000170f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001713:	83 c4 0c             	add    esp,0xc
c0001716:	5b                   	pop    ebx
c0001717:	5e                   	pop    esi
c0001718:	5f                   	pop    edi
c0001719:	5d                   	pop    ebp
c000171a:	e9 fc f8 ff ff       	jmp    c000101b <dlmalloc>
c000171f:	bf 10 00 00 00       	mov    edi,0x10
c0001724:	83 fa 0f             	cmp    edx,0xf
c0001727:	76 13                	jbe    c000173c <dlmemalign+0x41>
c0001729:	8d 4a ff             	lea    ecx,[edx-0x1]
c000172c:	85 d1                	test   ecx,edx
c000172e:	75 04                	jne    c0001734 <dlmemalign+0x39>
c0001730:	89 d7                	mov    edi,edx
c0001732:	eb 08                	jmp    c000173c <dlmemalign+0x41>
c0001734:	39 d7                	cmp    edi,edx
c0001736:	73 04                	jae    c000173c <dlmemalign+0x41>
c0001738:	01 ff                	add    edi,edi
c000173a:	eb f8                	jmp    c0001734 <dlmemalign+0x39>
c000173c:	83 f8 df             	cmp    eax,0xffffffdf
c000173f:	76 07                	jbe    c0001748 <dlmemalign+0x4d>
c0001741:	31 c0                	xor    eax,eax
c0001743:	e9 ce 00 00 00       	jmp    c0001816 <dlmemalign+0x11b>
c0001748:	83 c0 0b             	add    eax,0xb
c000174b:	bd 10 00 00 00       	mov    ebp,0x10
c0001750:	83 f8 0f             	cmp    eax,0xf
c0001753:	76 05                	jbe    c000175a <dlmemalign+0x5f>
c0001755:	83 e0 f8             	and    eax,0xfffffff8
c0001758:	89 c5                	mov    ebp,eax
c000175a:	83 ec 0c             	sub    esp,0xc
c000175d:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001761:	50                   	push   eax
c0001762:	e8 b4 f8 ff ff       	call   c000101b <dlmalloc>
c0001767:	83 c4 10             	add    esp,0x10
c000176a:	89 c1                	mov    ecx,eax
c000176c:	85 c0                	test   eax,eax
c000176e:	74 d1                	je     c0001741 <dlmemalign+0x46>
c0001770:	31 d2                	xor    edx,edx
c0001772:	8d 70 f8             	lea    esi,[eax-0x8]
c0001775:	f7 f7                	div    edi
c0001777:	85 d2                	test   edx,edx
c0001779:	74 62                	je     c00017dd <dlmemalign+0xe2>
c000177b:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000177f:	89 f8                	mov    eax,edi
c0001781:	f7 d8                	neg    eax
c0001783:	21 c3                	and    ebx,eax
c0001785:	83 eb 08             	sub    ebx,0x8
c0001788:	89 d8                	mov    eax,ebx
c000178a:	29 f0                	sub    eax,esi
c000178c:	83 f8 0f             	cmp    eax,0xf
c000178f:	77 02                	ja     c0001793 <dlmemalign+0x98>
c0001791:	01 fb                	add    ebx,edi
c0001793:	89 d8                	mov    eax,ebx
c0001795:	29 f0                	sub    eax,esi
c0001797:	89 c6                	mov    esi,eax
c0001799:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000179c:	89 c2                	mov    edx,eax
c000179e:	83 e2 fc             	and    edx,0xfffffffc
c00017a1:	29 f2                	sub    edx,esi
c00017a3:	a8 02                	test   al,0x2
c00017a5:	74 10                	je     c00017b7 <dlmemalign+0xbc>
c00017a7:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00017aa:	83 ca 02             	or     edx,0x2
c00017ad:	8d 43 08             	lea    eax,[ebx+0x8]
c00017b0:	89 33                	mov    DWORD PTR [ebx],esi
c00017b2:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00017b5:	eb 5f                	jmp    c0001816 <dlmemalign+0x11b>
c00017b7:	83 ec 0c             	sub    esp,0xc
c00017ba:	89 d0                	mov    eax,edx
c00017bc:	83 c8 01             	or     eax,0x1
c00017bf:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00017c2:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017c7:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017ca:	83 e0 01             	and    eax,0x1
c00017cd:	09 f0                	or     eax,esi
c00017cf:	89 de                	mov    esi,ebx
c00017d1:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017d4:	51                   	push   ecx
c00017d5:	e8 e6 f4 ff ff       	call   c0000cc0 <dlfree>
c00017da:	83 c4 10             	add    esp,0x10
c00017dd:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017e0:	a8 02                	test   al,0x2
c00017e2:	75 2f                	jne    c0001813 <dlmemalign+0x118>
c00017e4:	83 e0 fc             	and    eax,0xfffffffc
c00017e7:	8d 55 10             	lea    edx,[ebp+0x10]
c00017ea:	39 c2                	cmp    edx,eax
c00017ec:	73 25                	jae    c0001813 <dlmemalign+0x118>
c00017ee:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017f1:	83 ec 0c             	sub    esp,0xc
c00017f4:	29 e8                	sub    eax,ebp
c00017f6:	83 c2 08             	add    edx,0x8
c00017f9:	83 c8 01             	or     eax,0x1
c00017fc:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00017ff:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001802:	83 e0 01             	and    eax,0x1
c0001805:	09 c5                	or     ebp,eax
c0001807:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c000180a:	52                   	push   edx
c000180b:	e8 b0 f4 ff ff       	call   c0000cc0 <dlfree>
c0001810:	83 c4 10             	add    esp,0x10
c0001813:	8d 46 08             	lea    eax,[esi+0x8]
c0001816:	83 c4 0c             	add    esp,0xc
c0001819:	5b                   	pop    ebx
c000181a:	5e                   	pop    esi
c000181b:	5f                   	pop    edi
c000181c:	5d                   	pop    ebp
c000181d:	c3                   	ret    

c000181e <dlcalloc>:
c000181e:	53                   	push   ebx
c000181f:	83 ec 14             	sub    esp,0x14
c0001822:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001826:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c000182b:	50                   	push   eax
c000182c:	e8 ea f7 ff ff       	call   c000101b <dlmalloc>
c0001831:	83 c4 10             	add    esp,0x10
c0001834:	89 c3                	mov    ebx,eax
c0001836:	85 c0                	test   eax,eax
c0001838:	74 77                	je     c00018b1 <dlcalloc+0x93>
c000183a:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000183d:	89 d0                	mov    eax,edx
c000183f:	83 e0 fc             	and    eax,0xfffffffc
c0001842:	80 e2 02             	and    dl,0x2
c0001845:	75 5a                	jne    c00018a1 <dlcalloc+0x83>
c0001847:	83 e8 04             	sub    eax,0x4
c000184a:	83 f8 27             	cmp    eax,0x27
c000184d:	76 03                	jbe    c0001852 <dlcalloc+0x34>
c000184f:	51                   	push   ecx
c0001850:	eb 53                	jmp    c00018a5 <dlcalloc+0x87>
c0001852:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001858:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000185f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001866:	83 f8 13             	cmp    eax,0x13
c0001869:	76 46                	jbe    c00018b1 <dlcalloc+0x93>
c000186b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001872:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001879:	83 f8 1b             	cmp    eax,0x1b
c000187c:	76 33                	jbe    c00018b1 <dlcalloc+0x93>
c000187e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001885:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000188c:	83 f8 23             	cmp    eax,0x23
c000188f:	76 20                	jbe    c00018b1 <dlcalloc+0x93>
c0001891:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001898:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000189f:	eb 10                	jmp    c00018b1 <dlcalloc+0x93>
c00018a1:	83 e8 08             	sub    eax,0x8
c00018a4:	52                   	push   edx
c00018a5:	50                   	push   eax
c00018a6:	6a 00                	push   0x0
c00018a8:	53                   	push   ebx
c00018a9:	e8 ce ed ff ff       	call   c000067c <memset>
c00018ae:	83 c4 10             	add    esp,0x10
c00018b1:	89 d8                	mov    eax,ebx
c00018b3:	83 c4 08             	add    esp,0x8
c00018b6:	5b                   	pop    ebx
c00018b7:	c3                   	ret    

c00018b8 <dlcfree>:
c00018b8:	e9 03 f4 ff ff       	jmp    c0000cc0 <dlfree>

c00018bd <dlindependent_calloc>:
c00018bd:	83 ec 28             	sub    esp,0x28
c00018c0:	b9 03 00 00 00       	mov    ecx,0x3
c00018c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018c9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018d1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018d9:	e8 cb fa ff ff       	call   c00013a9 <iALLOc>
c00018de:	83 c4 2c             	add    esp,0x2c
c00018e1:	c3                   	ret    

c00018e2 <dlindependent_comalloc>:
c00018e2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018ea:	31 c9                	xor    ecx,ecx
c00018ec:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018f0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018f4:	e9 b0 fa ff ff       	jmp    c00013a9 <iALLOc>

c00018f9 <dlvalloc>:
c00018f9:	83 ec 0c             	sub    esp,0xc
c00018fc:	83 3d 00 7b 02 c0 00 	cmp    DWORD PTR ds:0xc0027b00,0x0
c0001903:	75 0a                	jne    c000190f <dlvalloc+0x16>
c0001905:	b8 00 7b 02 c0       	mov    eax,0xc0027b00
c000190a:	e8 ca f2 ff ff       	call   c0000bd9 <malloc_consolidate>
c000190f:	50                   	push   eax
c0001910:	50                   	push   eax
c0001911:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001915:	ff 35 5c 7e 02 c0    	push   DWORD PTR ds:0xc0027e5c
c000191b:	e8 db fd ff ff       	call   c00016fb <dlmemalign>
c0001920:	83 c4 1c             	add    esp,0x1c
c0001923:	c3                   	ret    

c0001924 <dlpvalloc>:
c0001924:	83 ec 0c             	sub    esp,0xc
c0001927:	83 3d 00 7b 02 c0 00 	cmp    DWORD PTR ds:0xc0027b00,0x0
c000192e:	75 0a                	jne    c000193a <dlpvalloc+0x16>
c0001930:	b8 00 7b 02 c0       	mov    eax,0xc0027b00
c0001935:	e8 9f f2 ff ff       	call   c0000bd9 <malloc_consolidate>
c000193a:	a1 5c 7e 02 c0       	mov    eax,ds:0xc0027e5c
c000193f:	89 c1                	mov    ecx,eax
c0001941:	52                   	push   edx
c0001942:	f7 d9                	neg    ecx
c0001944:	52                   	push   edx
c0001945:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001949:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c000194d:	21 ca                	and    edx,ecx
c000194f:	52                   	push   edx
c0001950:	50                   	push   eax
c0001951:	e8 a5 fd ff ff       	call   c00016fb <dlmemalign>
c0001956:	83 c4 1c             	add    esp,0x1c
c0001959:	c3                   	ret    

c000195a <dlmalloc_trim>:
c000195a:	b8 00 7b 02 c0       	mov    eax,0xc0027b00
c000195f:	e8 75 f2 ff ff       	call   c0000bd9 <malloc_consolidate>
c0001964:	31 c0                	xor    eax,eax
c0001966:	c3                   	ret    

c0001967 <dlmalloc_usable_size>:
c0001967:	53                   	push   ebx
c0001968:	31 c0                	xor    eax,eax
c000196a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000196e:	85 c9                	test   ecx,ecx
c0001970:	74 24                	je     c0001996 <dlmalloc_usable_size+0x2f>
c0001972:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001975:	f6 c2 02             	test   dl,0x2
c0001978:	74 08                	je     c0001982 <dlmalloc_usable_size+0x1b>
c000197a:	83 e2 fc             	and    edx,0xfffffffc
c000197d:	8d 42 f8             	lea    eax,[edx-0x8]
c0001980:	eb 14                	jmp    c0001996 <dlmalloc_usable_size+0x2f>
c0001982:	89 d3                	mov    ebx,edx
c0001984:	31 c0                	xor    eax,eax
c0001986:	83 e3 fe             	and    ebx,0xfffffffe
c0001989:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c000198e:	74 06                	je     c0001996 <dlmalloc_usable_size+0x2f>
c0001990:	83 e2 fc             	and    edx,0xfffffffc
c0001993:	8d 42 fc             	lea    eax,[edx-0x4]
c0001996:	5b                   	pop    ebx
c0001997:	c3                   	ret    

c0001998 <dlmallinfo>:
c0001998:	55                   	push   ebp
c0001999:	57                   	push   edi
c000199a:	56                   	push   esi
c000199b:	53                   	push   ebx
c000199c:	83 ec 08             	sub    esp,0x8
c000199f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00019a3:	83 3d 2c 7b 02 c0 00 	cmp    DWORD PTR ds:0xc0027b2c,0x0
c00019aa:	75 0a                	jne    c00019b6 <dlmallinfo+0x1e>
c00019ac:	b8 00 7b 02 c0       	mov    eax,0xc0027b00
c00019b1:	e8 23 f2 ff ff       	call   c0000bd9 <malloc_consolidate>
c00019b6:	a1 2c 7b 02 c0       	mov    eax,ds:0xc0027b2c
c00019bb:	31 ed                	xor    ebp,ebp
c00019bd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00019c0:	31 c9                	xor    ecx,ecx
c00019c2:	83 e0 fc             	and    eax,0xfffffffc
c00019c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019c9:	31 c0                	xor    eax,eax
c00019cb:	8b 14 85 04 7b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd84fc]
c00019d2:	85 d2                	test   edx,edx
c00019d4:	74 0e                	je     c00019e4 <dlmallinfo+0x4c>
c00019d6:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019d9:	45                   	inc    ebp
c00019da:	83 e6 fc             	and    esi,0xfffffffc
c00019dd:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019e0:	01 f1                	add    ecx,esi
c00019e2:	eb ee                	jmp    c00019d2 <dlmallinfo+0x3a>
c00019e4:	40                   	inc    eax
c00019e5:	83 f8 0a             	cmp    eax,0xa
c00019e8:	75 e1                	jne    c00019cb <dlmallinfo+0x33>
c00019ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019ee:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019f5:	8d 14 01             	lea    edx,[ecx+eax*1]
c00019f8:	b8 34 7b 02 c0       	mov    eax,0xc0027b34
c00019fd:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a00:	39 f0                	cmp    eax,esi
c0001a02:	74 10                	je     c0001a14 <dlmallinfo+0x7c>
c0001a04:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a07:	ff 04 24             	inc    DWORD PTR [esp]
c0001a0a:	83 e7 fc             	and    edi,0xfffffffc
c0001a0d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001a10:	01 fa                	add    edx,edi
c0001a12:	eb ec                	jmp    c0001a00 <dlmallinfo+0x68>
c0001a14:	83 c0 08             	add    eax,0x8
c0001a17:	3d 2c 7e 02 c0       	cmp    eax,0xc0027e2c
c0001a1c:	75 df                	jne    c00019fd <dlmallinfo+0x65>
c0001a1e:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001a21:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001a24:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a27:	a1 68 7e 02 c0       	mov    eax,ds:0xc0027e68
c0001a2c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a2f:	89 03                	mov    DWORD PTR [ebx],eax
c0001a31:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a34:	8b 35 50 7e 02 c0    	mov    esi,DWORD PTR ds:0xc0027e50
c0001a3a:	29 d0                	sub    eax,edx
c0001a3c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a3f:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a42:	8b 35 64 7e 02 c0    	mov    esi,DWORD PTR ds:0xc0027e64
c0001a48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a4c:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a4f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a52:	8b 35 74 7e 02 c0    	mov    esi,DWORD PTR ds:0xc0027e74
c0001a58:	89 d8                	mov    eax,ebx
c0001a5a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a5d:	83 c4 08             	add    esp,0x8
c0001a60:	5b                   	pop    ebx
c0001a61:	5e                   	pop    esi
c0001a62:	5f                   	pop    edi
c0001a63:	5d                   	pop    ebp
c0001a64:	c2 04 00             	ret    0x4

c0001a67 <dlmalloc_stats>:
c0001a67:	83 ec 30             	sub    esp,0x30
c0001a6a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a6e:	50                   	push   eax
c0001a6f:	e8 24 ff ff ff       	call   c0001998 <dlmallinfo>
c0001a74:	83 c4 30             	add    esp,0x30
c0001a77:	c3                   	ret    

c0001a78 <dlmallopt>:
c0001a78:	56                   	push   esi
c0001a79:	b8 00 7b 02 c0       	mov    eax,0xc0027b00
c0001a7e:	53                   	push   ebx
c0001a7f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a83:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a87:	e8 4d f1 ff ff       	call   c0000bd9 <malloc_consolidate>
c0001a8c:	8d 46 04             	lea    eax,[esi+0x4]
c0001a8f:	83 f8 05             	cmp    eax,0x5
c0001a92:	77 67                	ja     c0001afb <dlmallopt+0x83>
c0001a94:	ff 24 85 a4 35 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdca5c]
c0001a9b:	83 fb 50             	cmp    ebx,0x50
c0001a9e:	77 5b                	ja     c0001afb <dlmallopt+0x83>
c0001aa0:	ba 08 00 00 00       	mov    edx,0x8
c0001aa5:	85 db                	test   ebx,ebx
c0001aa7:	74 12                	je     c0001abb <dlmallopt+0x43>
c0001aa9:	83 c3 0b             	add    ebx,0xb
c0001aac:	ba 10 00 00 00       	mov    edx,0x10
c0001ab1:	83 fb 0f             	cmp    ebx,0xf
c0001ab4:	76 05                	jbe    c0001abb <dlmallopt+0x43>
c0001ab6:	89 da                	mov    edx,ebx
c0001ab8:	83 e2 f8             	and    edx,0xfffffff8
c0001abb:	a1 00 7b 02 c0       	mov    eax,ds:0xc0027b00
c0001ac0:	83 e0 03             	and    eax,0x3
c0001ac3:	09 d0                	or     eax,edx
c0001ac5:	a3 00 7b 02 c0       	mov    ds:0xc0027b00,eax
c0001aca:	eb 31                	jmp    c0001afd <dlmallopt+0x85>
c0001acc:	89 1d 44 7e 02 c0    	mov    DWORD PTR ds:0xc0027e44,ebx
c0001ad2:	eb 06                	jmp    c0001ada <dlmallopt+0x62>
c0001ad4:	89 1d 48 7e 02 c0    	mov    DWORD PTR ds:0xc0027e48,ebx
c0001ada:	be 01 00 00 00       	mov    esi,0x1
c0001adf:	eb 1c                	jmp    c0001afd <dlmallopt+0x85>
c0001ae1:	89 1d 4c 7e 02 c0    	mov    DWORD PTR ds:0xc0027e4c,ebx
c0001ae7:	eb f1                	jmp    c0001ada <dlmallopt+0x62>
c0001ae9:	31 f6                	xor    esi,esi
c0001aeb:	85 db                	test   ebx,ebx
c0001aed:	75 0e                	jne    c0001afd <dlmallopt+0x85>
c0001aef:	c7 05 54 7e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027e54,0x0
c0001af9:	eb df                	jmp    c0001ada <dlmallopt+0x62>
c0001afb:	31 f6                	xor    esi,esi
c0001afd:	89 f0                	mov    eax,esi
c0001aff:	5b                   	pop    ebx
c0001b00:	5e                   	pop    esi
c0001b01:	c3                   	ret    

c0001b02 <disk_status>:
c0001b02:	31 c0                	xor    eax,eax
c0001b04:	c3                   	ret    

c0001b05 <disk_initialize>:
c0001b05:	31 c0                	xor    eax,eax
c0001b07:	c3                   	ret    

c0001b08 <disk_read>:
c0001b08:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b0d:	0f b6 04 85 c0 95 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd6a40]
c0001b15:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b19:	e9 16 a0 01 00       	jmp    c001bb34 <fatWrapperReadDisk>

c0001b1e <disk_write>:
c0001b1e:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b23:	0f b6 04 85 c0 95 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd6a40]
c0001b2b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b2f:	e9 48 a0 01 00       	jmp    c001bb7c <fatWrapperWriteDisk>

c0001b34 <disk_ioctl>:
c0001b34:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001b39:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001b3d:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b42:	0f b6 04 85 c0 95 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd6a40]
c0001b4a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b4e:	e9 71 a0 01 00       	jmp    c001bbc4 <fatWrapperIoctl>

c0001b53 <ld_word>:
c0001b53:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b57:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b5a:	c1 e2 08             	shl    edx,0x8
c0001b5d:	09 d0                	or     eax,edx
c0001b5f:	c3                   	ret    

c0001b60 <ld_dword>:
c0001b60:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001b64:	89 d1                	mov    ecx,edx
c0001b66:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b6a:	c1 e1 08             	shl    ecx,0x8
c0001b6d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b70:	09 ca                	or     edx,ecx
c0001b72:	c1 e2 08             	shl    edx,0x8
c0001b75:	09 d0                	or     eax,edx
c0001b77:	c3                   	ret    

c0001b78 <ld_qword>:
c0001b78:	57                   	push   edi
c0001b79:	56                   	push   esi
c0001b7a:	53                   	push   ebx
c0001b7b:	31 db                	xor    ebx,ebx
c0001b7d:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001b80:	89 df                	mov    edi,ebx
c0001b82:	89 ce                	mov    esi,ecx
c0001b84:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001b88:	0f a4 f7 08          	shld   edi,esi,0x8
c0001b8c:	c1 e6 08             	shl    esi,0x8
c0001b8f:	09 f2                	or     edx,esi
c0001b91:	89 d6                	mov    esi,edx
c0001b93:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001b97:	0f a4 f7 08          	shld   edi,esi,0x8
c0001b9b:	c1 e6 08             	shl    esi,0x8
c0001b9e:	09 f2                	or     edx,esi
c0001ba0:	89 d6                	mov    esi,edx
c0001ba2:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ba6:	0f a4 f7 08          	shld   edi,esi,0x8
c0001baa:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001bad:	c1 e6 08             	shl    esi,0x8
c0001bb0:	89 fb                	mov    ebx,edi
c0001bb2:	09 f2                	or     edx,esi
c0001bb4:	89 d1                	mov    ecx,edx
c0001bb6:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001bba:	c1 e1 08             	shl    ecx,0x8
c0001bbd:	89 da                	mov    edx,ebx
c0001bbf:	09 c8                	or     eax,ecx
c0001bc1:	5b                   	pop    ebx
c0001bc2:	5e                   	pop    esi
c0001bc3:	5f                   	pop    edi
c0001bc4:	c3                   	ret    

c0001bc5 <st_word>:
c0001bc5:	66 89 10             	mov    WORD PTR [eax],dx
c0001bc8:	c3                   	ret    

c0001bc9 <st_dword>:
c0001bc9:	89 10                	mov    DWORD PTR [eax],edx
c0001bcb:	c3                   	ret    

c0001bcc <st_qword>:
c0001bcc:	89 10                	mov    DWORD PTR [eax],edx
c0001bce:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001bd1:	c3                   	ret    

c0001bd2 <mem_cpy>:
c0001bd2:	85 c9                	test   ecx,ecx
c0001bd4:	74 10                	je     c0001be6 <mem_cpy+0x14>
c0001bd6:	57                   	push   edi
c0001bd7:	01 c1                	add    ecx,eax
c0001bd9:	56                   	push   esi
c0001bda:	89 c7                	mov    edi,eax
c0001bdc:	89 d6                	mov    esi,edx
c0001bde:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001bdf:	39 f9                	cmp    ecx,edi
c0001be1:	75 fb                	jne    c0001bde <mem_cpy+0xc>
c0001be3:	5e                   	pop    esi
c0001be4:	5f                   	pop    edi
c0001be5:	c3                   	ret    
c0001be6:	c3                   	ret    

c0001be7 <mem_set>:
c0001be7:	01 c1                	add    ecx,eax
c0001be9:	40                   	inc    eax
c0001bea:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001bed:	39 c8                	cmp    eax,ecx
c0001bef:	75 f8                	jne    c0001be9 <mem_set+0x2>
c0001bf1:	c3                   	ret    

c0001bf2 <mem_cmp>:
c0001bf2:	57                   	push   edi
c0001bf3:	56                   	push   esi
c0001bf4:	89 c6                	mov    esi,eax
c0001bf6:	53                   	push   ebx
c0001bf7:	46                   	inc    esi
c0001bf8:	42                   	inc    edx
c0001bf9:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001bfd:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001c01:	29 fb                	sub    ebx,edi
c0001c03:	89 cf                	mov    edi,ecx
c0001c05:	29 f7                	sub    edi,esi
c0001c07:	01 c7                	add    edi,eax
c0001c09:	74 04                	je     c0001c0f <mem_cmp+0x1d>
c0001c0b:	85 db                	test   ebx,ebx
c0001c0d:	74 e8                	je     c0001bf7 <mem_cmp+0x5>
c0001c0f:	89 d8                	mov    eax,ebx
c0001c11:	5b                   	pop    ebx
c0001c12:	5e                   	pop    esi
c0001c13:	5f                   	pop    edi
c0001c14:	c3                   	ret    

c0001c15 <chk_chr>:
c0001c15:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001c18:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001c1b:	74 07                	je     c0001c24 <chk_chr+0xf>
c0001c1d:	39 d1                	cmp    ecx,edx
c0001c1f:	74 03                	je     c0001c24 <chk_chr+0xf>
c0001c21:	40                   	inc    eax
c0001c22:	eb f1                	jmp    c0001c15 <chk_chr>
c0001c24:	89 c8                	mov    eax,ecx
c0001c26:	c3                   	ret    

c0001c27 <dbc_1st>:
c0001c27:	31 c0                	xor    eax,eax
c0001c29:	c3                   	ret    

c0001c2a <dbc_2nd>:
c0001c2a:	31 c0                	xor    eax,eax
c0001c2c:	c3                   	ret    

c0001c2d <tchar2uni>:
c0001c2d:	57                   	push   edi
c0001c2e:	89 c7                	mov    edi,eax
c0001c30:	56                   	push   esi
c0001c31:	53                   	push   ebx
c0001c32:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001c34:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001c36:	8d 73 01             	lea    esi,[ebx+0x1]
c0001c39:	84 c9                	test   cl,cl
c0001c3b:	78 0a                	js     c0001c47 <tchar2uni+0x1a>
c0001c3d:	0f b6 d1             	movzx  edx,cl
c0001c40:	89 f3                	mov    ebx,esi
c0001c42:	e9 9f 00 00 00       	jmp    c0001ce6 <tchar2uni+0xb9>
c0001c47:	88 ca                	mov    dl,cl
c0001c49:	83 e2 e0             	and    edx,0xffffffe0
c0001c4c:	80 fa c0             	cmp    dl,0xc0
c0001c4f:	75 0c                	jne    c0001c5d <tchar2uni+0x30>
c0001c51:	89 ca                	mov    edx,ecx
c0001c53:	b9 01 00 00 00       	mov    ecx,0x1
c0001c58:	83 e2 1f             	and    edx,0x1f
c0001c5b:	eb 2e                	jmp    c0001c8b <tchar2uni+0x5e>
c0001c5d:	88 ca                	mov    dl,cl
c0001c5f:	83 e2 f0             	and    edx,0xfffffff0
c0001c62:	80 fa e0             	cmp    dl,0xe0
c0001c65:	75 0c                	jne    c0001c73 <tchar2uni+0x46>
c0001c67:	89 ca                	mov    edx,ecx
c0001c69:	b9 02 00 00 00       	mov    ecx,0x2
c0001c6e:	83 e2 0f             	and    edx,0xf
c0001c71:	eb 18                	jmp    c0001c8b <tchar2uni+0x5e>
c0001c73:	88 ca                	mov    dl,cl
c0001c75:	83 e2 f8             	and    edx,0xfffffff8
c0001c78:	88 d0                	mov    al,dl
c0001c7a:	83 ca ff             	or     edx,0xffffffff
c0001c7d:	3c f0                	cmp    al,0xf0
c0001c7f:	75 6c                	jne    c0001ced <tchar2uni+0xc0>
c0001c81:	89 ca                	mov    edx,ecx
c0001c83:	b9 03 00 00 00       	mov    ecx,0x3
c0001c88:	83 e2 07             	and    edx,0x7
c0001c8b:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001c8f:	46                   	inc    esi
c0001c90:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001c93:	88 c8                	mov    al,cl
c0001c95:	83 e0 c0             	and    eax,0xffffffc0
c0001c98:	3c 80                	cmp    al,0x80
c0001c9a:	75 4e                	jne    c0001cea <tchar2uni+0xbd>
c0001c9c:	c1 e2 06             	shl    edx,0x6
c0001c9f:	83 e1 3f             	and    ecx,0x3f
c0001ca2:	09 ca                	or     edx,ecx
c0001ca4:	39 de                	cmp    esi,ebx
c0001ca6:	75 e7                	jne    c0001c8f <tchar2uni+0x62>
c0001ca8:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001cab:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001cb1:	77 37                	ja     c0001cea <tchar2uni+0xbd>
c0001cb3:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001cb9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001cbf:	76 29                	jbe    c0001cea <tchar2uni+0xbd>
c0001cc1:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001cc7:	76 1d                	jbe    c0001ce6 <tchar2uni+0xb9>
c0001cc9:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001ccf:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001cd5:	c1 e1 06             	shl    ecx,0x6
c0001cd8:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001cde:	09 ca                	or     edx,ecx
c0001ce0:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001ce6:	89 1f                	mov    DWORD PTR [edi],ebx
c0001ce8:	eb 03                	jmp    c0001ced <tchar2uni+0xc0>
c0001cea:	83 ca ff             	or     edx,0xffffffff
c0001ced:	5b                   	pop    ebx
c0001cee:	89 d0                	mov    eax,edx
c0001cf0:	5e                   	pop    esi
c0001cf1:	5f                   	pop    edi
c0001cf2:	c3                   	ret    

c0001cf3 <put_utf>:
c0001cf3:	53                   	push   ebx
c0001cf4:	83 f8 7f             	cmp    eax,0x7f
c0001cf7:	89 c3                	mov    ebx,eax
c0001cf9:	b0 00                	mov    al,0x0
c0001cfb:	77 11                	ja     c0001d0e <put_utf+0x1b>
c0001cfd:	85 c9                	test   ecx,ecx
c0001cff:	0f 84 e5 00 00 00    	je     c0001dea <put_utf+0xf7>
c0001d05:	88 1a                	mov    BYTE PTR [edx],bl
c0001d07:	b0 01                	mov    al,0x1
c0001d09:	e9 dc 00 00 00       	jmp    c0001dea <put_utf+0xf7>
c0001d0e:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001d14:	77 23                	ja     c0001d39 <put_utf+0x46>
c0001d16:	83 f9 01             	cmp    ecx,0x1
c0001d19:	0f 86 cb 00 00 00    	jbe    c0001dea <put_utf+0xf7>
c0001d1f:	89 d8                	mov    eax,ebx
c0001d21:	83 e3 3f             	and    ebx,0x3f
c0001d24:	c1 e8 06             	shr    eax,0x6
c0001d27:	83 cb 80             	or     ebx,0xffffff80
c0001d2a:	83 c8 c0             	or     eax,0xffffffc0
c0001d2d:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001d30:	88 02                	mov    BYTE PTR [edx],al
c0001d32:	b0 02                	mov    al,0x2
c0001d34:	e9 b1 00 00 00       	jmp    c0001dea <put_utf+0xf7>
c0001d39:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001d3f:	77 40                	ja     c0001d81 <put_utf+0x8e>
c0001d41:	83 f9 02             	cmp    ecx,0x2
c0001d44:	0f 86 a0 00 00 00    	jbe    c0001dea <put_utf+0xf7>
c0001d4a:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001d50:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d56:	0f 86 8e 00 00 00    	jbe    c0001dea <put_utf+0xf7>
c0001d5c:	89 d8                	mov    eax,ebx
c0001d5e:	c1 e8 0c             	shr    eax,0xc
c0001d61:	83 c8 e0             	or     eax,0xffffffe0
c0001d64:	88 02                	mov    BYTE PTR [edx],al
c0001d66:	89 d8                	mov    eax,ebx
c0001d68:	83 e3 3f             	and    ebx,0x3f
c0001d6b:	c1 e8 06             	shr    eax,0x6
c0001d6e:	83 cb 80             	or     ebx,0xffffff80
c0001d71:	83 e0 3f             	and    eax,0x3f
c0001d74:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001d77:	83 c8 80             	or     eax,0xffffff80
c0001d7a:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001d7d:	b0 03                	mov    al,0x3
c0001d7f:	eb 69                	jmp    c0001dea <put_utf+0xf7>
c0001d81:	83 f9 03             	cmp    ecx,0x3
c0001d84:	76 64                	jbe    c0001dea <put_utf+0xf7>
c0001d86:	89 d9                	mov    ecx,ebx
c0001d88:	0f b7 c3             	movzx  eax,bx
c0001d8b:	66 31 c9             	xor    cx,cx
c0001d8e:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001d94:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001d9a:	c1 e9 06             	shr    ecx,0x6
c0001d9d:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001da3:	77 43                	ja     c0001de8 <put_utf+0xf5>
c0001da5:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001dab:	77 3b                	ja     c0001de8 <put_utf+0xf5>
c0001dad:	09 cb                	or     ebx,ecx
c0001daf:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001db5:	89 d8                	mov    eax,ebx
c0001db7:	c1 e8 12             	shr    eax,0x12
c0001dba:	83 c8 f0             	or     eax,0xfffffff0
c0001dbd:	88 02                	mov    BYTE PTR [edx],al
c0001dbf:	89 d8                	mov    eax,ebx
c0001dc1:	c1 e8 0c             	shr    eax,0xc
c0001dc4:	83 e0 3f             	and    eax,0x3f
c0001dc7:	83 c8 80             	or     eax,0xffffff80
c0001dca:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001dcd:	89 d8                	mov    eax,ebx
c0001dcf:	83 e3 3f             	and    ebx,0x3f
c0001dd2:	c1 e8 06             	shr    eax,0x6
c0001dd5:	83 cb 80             	or     ebx,0xffffff80
c0001dd8:	83 e0 3f             	and    eax,0x3f
c0001ddb:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001dde:	83 c8 80             	or     eax,0xffffff80
c0001de1:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001de4:	b0 04                	mov    al,0x4
c0001de6:	eb 02                	jmp    c0001dea <put_utf+0xf7>
c0001de8:	31 c0                	xor    eax,eax
c0001dea:	5b                   	pop    ebx
c0001deb:	c3                   	ret    

c0001dec <clst2sect>:
c0001dec:	89 c1                	mov    ecx,eax
c0001dee:	83 ea 02             	sub    edx,0x2
c0001df1:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001df4:	83 e8 02             	sub    eax,0x2
c0001df7:	39 d0                	cmp    eax,edx
c0001df9:	76 0d                	jbe    c0001e08 <clst2sect+0x1c>
c0001dfb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001dff:	f7 e2                	mul    edx
c0001e01:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001e04:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001e07:	c3                   	ret    
c0001e08:	31 c0                	xor    eax,eax
c0001e0a:	31 d2                	xor    edx,edx
c0001e0c:	c3                   	ret    

c0001e0d <clmt_clust>:
c0001e0d:	57                   	push   edi
c0001e0e:	89 cf                	mov    edi,ecx
c0001e10:	56                   	push   esi
c0001e11:	89 d6                	mov    esi,edx
c0001e13:	53                   	push   ebx
c0001e14:	0f ac fe 09          	shrd   esi,edi,0x9
c0001e18:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001e1b:	89 f2                	mov    edx,esi
c0001e1d:	8b 00                	mov    eax,DWORD PTR [eax]
c0001e1f:	c1 ef 09             	shr    edi,0x9
c0001e22:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001e26:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001e29:	89 f9                	mov    ecx,edi
c0001e2b:	31 ff                	xor    edi,edi
c0001e2d:	57                   	push   edi
c0001e2e:	56                   	push   esi
c0001e2f:	51                   	push   ecx
c0001e30:	52                   	push   edx
c0001e31:	e8 ea 08 02 00       	call   c0022720 <__udivdi3>
c0001e36:	83 c4 10             	add    esp,0x10
c0001e39:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001e3b:	85 d2                	test   edx,edx
c0001e3d:	74 10                	je     c0001e4f <clmt_clust+0x42>
c0001e3f:	39 d0                	cmp    eax,edx
c0001e41:	72 07                	jb     c0001e4a <clmt_clust+0x3d>
c0001e43:	29 d0                	sub    eax,edx
c0001e45:	83 c3 08             	add    ebx,0x8
c0001e48:	eb ef                	jmp    c0001e39 <clmt_clust+0x2c>
c0001e4a:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001e4d:	89 c2                	mov    edx,eax
c0001e4f:	5b                   	pop    ebx
c0001e50:	89 d0                	mov    eax,edx
c0001e52:	5e                   	pop    esi
c0001e53:	5f                   	pop    edi
c0001e54:	c3                   	ret    

c0001e55 <pick_lfn>:
c0001e55:	55                   	push   ebp
c0001e56:	57                   	push   edi
c0001e57:	56                   	push   esi
c0001e58:	89 d6                	mov    esi,edx
c0001e5a:	53                   	push   ebx
c0001e5b:	89 c3                	mov    ebx,eax
c0001e5d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001e60:	e8 ee fc ff ff       	call   c0001b53 <ld_word>
c0001e65:	66 85 c0             	test   ax,ax
c0001e68:	74 04                	je     c0001e6e <pick_lfn+0x19>
c0001e6a:	31 c0                	xor    eax,eax
c0001e6c:	eb 5c                	jmp    c0001eca <pick_lfn+0x75>
c0001e6e:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001e71:	bd 01 00 00 00       	mov    ebp,0x1
c0001e76:	83 e1 bf             	and    ecx,0xffffffbf
c0001e79:	31 ff                	xor    edi,edi
c0001e7b:	49                   	dec    ecx
c0001e7c:	6b c9 0d             	imul   ecx,ecx,0xd
c0001e7f:	0f b6 87 c0 36 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffdc940]
c0001e86:	01 f0                	add    eax,esi
c0001e88:	e8 c6 fc ff ff       	call   c0001b53 <ld_word>
c0001e8d:	66 85 ed             	test   bp,bp
c0001e90:	74 11                	je     c0001ea3 <pick_lfn+0x4e>
c0001e92:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001e98:	77 d0                	ja     c0001e6a <pick_lfn+0x15>
c0001e9a:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001e9e:	89 c5                	mov    ebp,eax
c0001ea0:	41                   	inc    ecx
c0001ea1:	eb 04                	jmp    c0001ea7 <pick_lfn+0x52>
c0001ea3:	66 40                	inc    ax
c0001ea5:	75 c3                	jne    c0001e6a <pick_lfn+0x15>
c0001ea7:	47                   	inc    edi
c0001ea8:	83 ff 0d             	cmp    edi,0xd
c0001eab:	75 d2                	jne    c0001e7f <pick_lfn+0x2a>
c0001ead:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001eb0:	74 13                	je     c0001ec5 <pick_lfn+0x70>
c0001eb2:	66 85 ed             	test   bp,bp
c0001eb5:	74 0e                	je     c0001ec5 <pick_lfn+0x70>
c0001eb7:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ebd:	77 ab                	ja     c0001e6a <pick_lfn+0x15>
c0001ebf:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001ec5:	b8 01 00 00 00       	mov    eax,0x1
c0001eca:	5b                   	pop    ebx
c0001ecb:	5e                   	pop    esi
c0001ecc:	5f                   	pop    edi
c0001ecd:	5d                   	pop    ebp
c0001ece:	c3                   	ret    

c0001ecf <put_lfn>:
c0001ecf:	55                   	push   ebp
c0001ed0:	31 ed                	xor    ebp,ebp
c0001ed2:	57                   	push   edi
c0001ed3:	89 d7                	mov    edi,edx
c0001ed5:	56                   	push   esi
c0001ed6:	31 f6                	xor    esi,esi
c0001ed8:	53                   	push   ebx
c0001ed9:	83 ec 08             	sub    esp,0x8
c0001edc:	89 04 24             	mov    DWORD PTR [esp],eax
c0001edf:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001ee3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001ee7:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001eed:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ef0:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001ef3:	31 d2                	xor    edx,edx
c0001ef5:	e8 cb fc ff ff       	call   c0001bc5 <st_word>
c0001efa:	0f b6 d9             	movzx  ebx,cl
c0001efd:	4b                   	dec    ebx
c0001efe:	6b db 0d             	imul   ebx,ebx,0xd
c0001f01:	66 83 fe ff          	cmp    si,0xffff
c0001f05:	74 08                	je     c0001f0f <put_lfn+0x40>
c0001f07:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f0a:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001f0e:	43                   	inc    ebx
c0001f0f:	0f b6 85 c0 36 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffdc940]
c0001f16:	0f b7 d6             	movzx  edx,si
c0001f19:	01 f8                	add    eax,edi
c0001f1b:	e8 a5 fc ff ff       	call   c0001bc5 <st_word>
c0001f20:	66 85 f6             	test   si,si
c0001f23:	75 03                	jne    c0001f28 <put_lfn+0x59>
c0001f25:	83 ce ff             	or     esi,0xffffffff
c0001f28:	45                   	inc    ebp
c0001f29:	83 fd 0d             	cmp    ebp,0xd
c0001f2c:	75 d3                	jne    c0001f01 <put_lfn+0x32>
c0001f2e:	66 46                	inc    si
c0001f30:	74 0a                	je     c0001f3c <put_lfn+0x6d>
c0001f32:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f35:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001f3a:	75 09                	jne    c0001f45 <put_lfn+0x76>
c0001f3c:	88 c8                	mov    al,cl
c0001f3e:	83 c8 40             	or     eax,0x40
c0001f41:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001f45:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001f49:	88 07                	mov    BYTE PTR [edi],al
c0001f4b:	83 c4 08             	add    esp,0x8
c0001f4e:	5b                   	pop    ebx
c0001f4f:	5e                   	pop    esi
c0001f50:	5f                   	pop    edi
c0001f51:	5d                   	pop    ebp
c0001f52:	c3                   	ret    

c0001f53 <gen_numname>:
c0001f53:	57                   	push   edi
c0001f54:	89 cf                	mov    edi,ecx
c0001f56:	56                   	push   esi
c0001f57:	b9 0b 00 00 00       	mov    ecx,0xb
c0001f5c:	53                   	push   ebx
c0001f5d:	89 c6                	mov    esi,eax
c0001f5f:	83 ec 10             	sub    esp,0x10
c0001f62:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001f66:	e8 67 fc ff ff       	call   c0001bd2 <mem_cpy>
c0001f6b:	83 fb 05             	cmp    ebx,0x5
c0001f6e:	76 2d                	jbe    c0001f9d <gen_numname+0x4a>
c0001f70:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001f73:	66 85 c0             	test   ax,ax
c0001f76:	74 25                	je     c0001f9d <gen_numname+0x4a>
c0001f78:	83 c7 02             	add    edi,0x2
c0001f7b:	ba 10 00 00 00       	mov    edx,0x10
c0001f80:	01 db                	add    ebx,ebx
c0001f82:	89 c1                	mov    ecx,eax
c0001f84:	66 d1 e8             	shr    ax,1
c0001f87:	83 e1 01             	and    ecx,0x1
c0001f8a:	01 cb                	add    ebx,ecx
c0001f8c:	0f ba e3 10          	bt     ebx,0x10
c0001f90:	73 06                	jae    c0001f98 <gen_numname+0x45>
c0001f92:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001f98:	4a                   	dec    edx
c0001f99:	75 e5                	jne    c0001f80 <gen_numname+0x2d>
c0001f9b:	eb d3                	jmp    c0001f70 <gen_numname+0x1d>
c0001f9d:	b8 07 00 00 00       	mov    eax,0x7
c0001fa2:	88 d9                	mov    cl,bl
c0001fa4:	83 e1 0f             	and    ecx,0xf
c0001fa7:	8d 51 30             	lea    edx,[ecx+0x30]
c0001faa:	80 fa 39             	cmp    dl,0x39
c0001fad:	76 03                	jbe    c0001fb2 <gen_numname+0x5f>
c0001faf:	8d 51 37             	lea    edx,[ecx+0x37]
c0001fb2:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001fb5:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001fb9:	89 da                	mov    edx,ebx
c0001fbb:	c1 ea 04             	shr    edx,0x4
c0001fbe:	83 fb 0f             	cmp    ebx,0xf
c0001fc1:	76 06                	jbe    c0001fc9 <gen_numname+0x76>
c0001fc3:	89 c8                	mov    eax,ecx
c0001fc5:	89 d3                	mov    ebx,edx
c0001fc7:	eb d9                	jmp    c0001fa2 <gen_numname+0x4f>
c0001fc9:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001fce:	31 d2                	xor    edx,edx
c0001fd0:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001fd3:	8d 04 16             	lea    eax,[esi+edx*1]
c0001fd6:	39 ca                	cmp    edx,ecx
c0001fd8:	73 18                	jae    c0001ff2 <gen_numname+0x9f>
c0001fda:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fdd:	3c 20                	cmp    al,0x20
c0001fdf:	74 11                	je     c0001ff2 <gen_numname+0x9f>
c0001fe1:	e8 41 fc ff ff       	call   c0001c27 <dbc_1st>
c0001fe6:	85 c0                	test   eax,eax
c0001fe8:	74 05                	je     c0001fef <gen_numname+0x9c>
c0001fea:	39 d3                	cmp    ebx,edx
c0001fec:	74 04                	je     c0001ff2 <gen_numname+0x9f>
c0001fee:	42                   	inc    edx
c0001fef:	42                   	inc    edx
c0001ff0:	eb e1                	jmp    c0001fd3 <gen_numname+0x80>
c0001ff2:	b0 20                	mov    al,0x20
c0001ff4:	83 f9 07             	cmp    ecx,0x7
c0001ff7:	77 05                	ja     c0001ffe <gen_numname+0xab>
c0001ff9:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001ffd:	41                   	inc    ecx
c0001ffe:	42                   	inc    edx
c0001fff:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002003:	83 fa 07             	cmp    edx,0x7
c0002006:	76 ea                	jbe    c0001ff2 <gen_numname+0x9f>
c0002008:	83 c4 10             	add    esp,0x10
c000200b:	5b                   	pop    ebx
c000200c:	5e                   	pop    esi
c000200d:	5f                   	pop    edi
c000200e:	c3                   	ret    

c000200f <sum_sfn>:
c000200f:	31 c9                	xor    ecx,ecx
c0002011:	31 d2                	xor    edx,edx
c0002013:	d0 ca                	ror    dl,1
c0002015:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002018:	41                   	inc    ecx
c0002019:	83 f9 0b             	cmp    ecx,0xb
c000201c:	75 f5                	jne    c0002013 <sum_sfn+0x4>
c000201e:	88 d0                	mov    al,dl
c0002020:	c3                   	ret    

c0002021 <xdir_sum>:
c0002021:	56                   	push   esi
c0002022:	31 c9                	xor    ecx,ecx
c0002024:	53                   	push   ebx
c0002025:	31 d2                	xor    edx,edx
c0002027:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c000202b:	43                   	inc    ebx
c000202c:	c1 e3 05             	shl    ebx,0x5
c000202f:	83 fa 02             	cmp    edx,0x2
c0002032:	74 0b                	je     c000203f <xdir_sum+0x1e>
c0002034:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002038:	66 d1 c9             	ror    cx,1
c000203b:	01 f1                	add    ecx,esi
c000203d:	eb 05                	jmp    c0002044 <xdir_sum+0x23>
c000203f:	ba 03 00 00 00       	mov    edx,0x3
c0002044:	42                   	inc    edx
c0002045:	39 d3                	cmp    ebx,edx
c0002047:	77 e6                	ja     c000202f <xdir_sum+0xe>
c0002049:	89 c8                	mov    eax,ecx
c000204b:	5b                   	pop    ebx
c000204c:	5e                   	pop    esi
c000204d:	c3                   	ret    

c000204e <xsum32>:
c000204e:	d1 ca                	ror    edx,1
c0002050:	0f b6 c0             	movzx  eax,al
c0002053:	01 d0                	add    eax,edx
c0002055:	c3                   	ret    

c0002056 <get_xfileinfo>:
c0002056:	55                   	push   ebp
c0002057:	31 c9                	xor    ecx,ecx
c0002059:	57                   	push   edi
c000205a:	bd 40 00 00 00       	mov    ebp,0x40
c000205f:	56                   	push   esi
c0002060:	31 ff                	xor    edi,edi
c0002062:	53                   	push   ebx
c0002063:	89 c6                	mov    esi,eax
c0002065:	83 ec 0c             	sub    esp,0xc
c0002068:	89 d3                	mov    ebx,edx
c000206a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002071:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002075:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002078:	76 6d                	jbe    c00020e7 <get_xfileinfo+0x91>
c000207a:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002080:	76 0b                	jbe    c000208d <get_xfileinfo+0x37>
c0002082:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0002086:	bf 01 00 00 00       	mov    edi,0x1
c000208b:	eb 63                	jmp    c00020f0 <get_xfileinfo+0x9a>
c000208d:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0002093:	75 03                	jne    c0002098 <get_xfileinfo+0x42>
c0002095:	83 c5 02             	add    ebp,0x2
c0002098:	8d 04 2e             	lea    eax,[esi+ebp*1]
c000209b:	83 c5 02             	add    ebp,0x2
c000209e:	e8 b0 fa ff ff       	call   c0001b53 <ld_word>
c00020a3:	ff 04 24             	inc    DWORD PTR [esp]
c00020a6:	66 85 c9             	test   cx,cx
c00020a9:	75 0d                	jne    c00020b8 <get_xfileinfo+0x62>
c00020ab:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00020b1:	66 81 fa ff 07       	cmp    dx,0x7ff
c00020b6:	76 2b                	jbe    c00020e3 <get_xfileinfo+0x8d>
c00020b8:	c1 e1 10             	shl    ecx,0x10
c00020bb:	ba ff 00 00 00       	mov    edx,0xff
c00020c0:	0f b7 c0             	movzx  eax,ax
c00020c3:	29 fa                	sub    edx,edi
c00020c5:	09 c8                	or     eax,ecx
c00020c7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00020cb:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00020cf:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00020d3:	e8 1b fc ff ff       	call   c0001cf3 <put_utf>
c00020d8:	84 c0                	test   al,al
c00020da:	74 a6                	je     c0002082 <get_xfileinfo+0x2c>
c00020dc:	0f b6 c0             	movzx  eax,al
c00020df:	01 c7                	add    edi,eax
c00020e1:	31 c0                	xor    eax,eax
c00020e3:	89 c1                	mov    ecx,eax
c00020e5:	eb 8a                	jmp    c0002071 <get_xfileinfo+0x1b>
c00020e7:	85 ff                	test   edi,edi
c00020e9:	74 97                	je     c0002082 <get_xfileinfo+0x2c>
c00020eb:	66 85 c9             	test   cx,cx
c00020ee:	75 92                	jne    c0002082 <get_xfileinfo+0x2c>
c00020f0:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00020f5:	31 c0                	xor    eax,eax
c00020f7:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c00020fb:	31 d2                	xor    edx,edx
c00020fd:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0002100:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0002103:	80 e1 10             	and    cl,0x10
c0002106:	75 08                	jne    c0002110 <get_xfileinfo+0xba>
c0002108:	8d 46 38             	lea    eax,[esi+0x38]
c000210b:	e8 68 fa ff ff       	call   c0001b78 <ld_qword>
c0002110:	89 03                	mov    DWORD PTR [ebx],eax
c0002112:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002115:	8d 46 0c             	lea    eax,[esi+0xc]
c0002118:	e8 36 fa ff ff       	call   c0001b53 <ld_word>
c000211d:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002121:	8d 46 0e             	lea    eax,[esi+0xe]
c0002124:	e8 2a fa ff ff       	call   c0001b53 <ld_word>
c0002129:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000212d:	83 c4 0c             	add    esp,0xc
c0002130:	5b                   	pop    ebx
c0002131:	5e                   	pop    esi
c0002132:	5f                   	pop    edi
c0002133:	5d                   	pop    ebp
c0002134:	c3                   	ret    

c0002135 <get_ldnumber>:
c0002135:	8b 10                	mov    edx,DWORD PTR [eax]
c0002137:	85 d2                	test   edx,edx
c0002139:	74 14                	je     c000214f <get_ldnumber+0x1a>
c000213b:	56                   	push   esi
c000213c:	53                   	push   ebx
c000213d:	89 d3                	mov    ebx,edx
c000213f:	43                   	inc    ebx
c0002140:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002143:	80 f9 1f             	cmp    cl,0x1f
c0002146:	76 0d                	jbe    c0002155 <get_ldnumber+0x20>
c0002148:	80 f9 3a             	cmp    cl,0x3a
c000214b:	75 f2                	jne    c000213f <get_ldnumber+0xa>
c000214d:	eb 0a                	jmp    c0002159 <get_ldnumber+0x24>
c000214f:	83 c9 ff             	or     ecx,0xffffffff
c0002152:	89 c8                	mov    eax,ecx
c0002154:	c3                   	ret    
c0002155:	31 c9                	xor    ecx,ecx
c0002157:	eb 24                	jmp    c000217d <get_ldnumber+0x48>
c0002159:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000215c:	8d 4e d0             	lea    ecx,[esi-0x30]
c000215f:	80 f9 09             	cmp    cl,0x9
c0002162:	77 16                	ja     c000217a <get_ldnumber+0x45>
c0002164:	83 c2 02             	add    edx,0x2
c0002167:	83 c9 ff             	or     ecx,0xffffffff
c000216a:	39 d3                	cmp    ebx,edx
c000216c:	75 0f                	jne    c000217d <get_ldnumber+0x48>
c000216e:	89 f2                	mov    edx,esi
c0002170:	89 18                	mov    DWORD PTR [eax],ebx
c0002172:	0f be ca             	movsx  ecx,dl
c0002175:	83 e9 30             	sub    ecx,0x30
c0002178:	eb 03                	jmp    c000217d <get_ldnumber+0x48>
c000217a:	83 c9 ff             	or     ecx,0xffffffff
c000217d:	89 c8                	mov    eax,ecx
c000217f:	5b                   	pop    ebx
c0002180:	5e                   	pop    esi
c0002181:	c3                   	ret    

c0002182 <crc32>:
c0002182:	56                   	push   esi
c0002183:	89 d6                	mov    esi,edx
c0002185:	53                   	push   ebx
c0002186:	b2 01                	mov    dl,0x1
c0002188:	bb 08 00 00 00       	mov    ebx,0x8
c000218d:	89 f1                	mov    ecx,esi
c000218f:	84 d1                	test   cl,dl
c0002191:	0f 95 c1             	setne  cl
c0002194:	0f b6 c9             	movzx  ecx,cl
c0002197:	31 c1                	xor    ecx,eax
c0002199:	89 c8                	mov    eax,ecx
c000219b:	d1 e8                	shr    eax,1
c000219d:	80 e1 01             	and    cl,0x1
c00021a0:	74 05                	je     c00021a7 <crc32+0x25>
c00021a2:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00021a7:	d1 e2                	shl    edx,1
c00021a9:	4b                   	dec    ebx
c00021aa:	75 e1                	jne    c000218d <crc32+0xb>
c00021ac:	5b                   	pop    ebx
c00021ad:	5e                   	pop    esi
c00021ae:	c3                   	ret    

c00021af <test_gpt_header>:
c00021af:	55                   	push   ebp
c00021b0:	b9 10 00 00 00       	mov    ecx,0x10
c00021b5:	57                   	push   edi
c00021b6:	ba c0 35 02 c0       	mov    edx,0xc00235c0
c00021bb:	56                   	push   esi
c00021bc:	31 ff                	xor    edi,edi
c00021be:	53                   	push   ebx
c00021bf:	89 c3                	mov    ebx,eax
c00021c1:	e8 2c fa ff ff       	call   c0001bf2 <mem_cmp>
c00021c6:	85 c0                	test   eax,eax
c00021c8:	75 55                	jne    c000221f <test_gpt_header+0x70>
c00021ca:	89 c7                	mov    edi,eax
c00021cc:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00021d1:	83 ce ff             	or     esi,0xffffffff
c00021d4:	31 d2                	xor    edx,edx
c00021d6:	83 fd 03             	cmp    ebp,0x3
c00021d9:	76 05                	jbe    c00021e0 <test_gpt_header+0x31>
c00021db:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00021e0:	89 f0                	mov    eax,esi
c00021e2:	45                   	inc    ebp
c00021e3:	e8 9a ff ff ff       	call   c0002182 <crc32>
c00021e8:	83 fd 4c             	cmp    ebp,0x4c
c00021eb:	89 c6                	mov    esi,eax
c00021ed:	75 e5                	jne    c00021d4 <test_gpt_header+0x25>
c00021ef:	8d 43 10             	lea    eax,[ebx+0x10]
c00021f2:	f7 d6                	not    esi
c00021f4:	e8 67 f9 ff ff       	call   c0001b60 <ld_dword>
c00021f9:	39 c6                	cmp    esi,eax
c00021fb:	75 22                	jne    c000221f <test_gpt_header+0x70>
c00021fd:	8d 43 54             	lea    eax,[ebx+0x54]
c0002200:	e8 5b f9 ff ff       	call   c0001b60 <ld_dword>
c0002205:	83 c0 80             	add    eax,0xffffff80
c0002208:	75 15                	jne    c000221f <test_gpt_header+0x70>
c000220a:	8d 43 50             	lea    eax,[ebx+0x50]
c000220d:	e8 4e f9 ff ff       	call   c0001b60 <ld_dword>
c0002212:	3d 80 00 00 00       	cmp    eax,0x80
c0002217:	0f 96 c0             	setbe  al
c000221a:	0f b6 c0             	movzx  eax,al
c000221d:	89 c7                	mov    edi,eax
c000221f:	5b                   	pop    ebx
c0002220:	89 f8                	mov    eax,edi
c0002222:	5e                   	pop    esi
c0002223:	5f                   	pop    edi
c0002224:	5d                   	pop    ebp
c0002225:	c3                   	ret    

c0002226 <make_rand>:
c0002226:	56                   	push   esi
c0002227:	85 c0                	test   eax,eax
c0002229:	53                   	push   ebx
c000222a:	75 05                	jne    c0002231 <make_rand+0xb>
c000222c:	b8 01 00 00 00       	mov    eax,0x1
c0002231:	01 d1                	add    ecx,edx
c0002233:	bb 08 00 00 00       	mov    ebx,0x8
c0002238:	89 c6                	mov    esi,eax
c000223a:	d1 e8                	shr    eax,1
c000223c:	83 e6 01             	and    esi,0x1
c000223f:	85 f6                	test   esi,esi
c0002241:	74 05                	je     c0002248 <make_rand+0x22>
c0002243:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002248:	4b                   	dec    ebx
c0002249:	75 ed                	jne    c0002238 <make_rand+0x12>
c000224b:	42                   	inc    edx
c000224c:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000224f:	39 ca                	cmp    edx,ecx
c0002251:	75 e0                	jne    c0002233 <make_rand+0xd>
c0002253:	5b                   	pop    ebx
c0002254:	5e                   	pop    esi
c0002255:	c3                   	ret    

c0002256 <validate>:
c0002256:	56                   	push   esi
c0002257:	53                   	push   ebx
c0002258:	89 d6                	mov    esi,edx
c000225a:	51                   	push   ecx
c000225b:	85 c0                	test   eax,eax
c000225d:	75 09                	jne    c0002268 <validate+0x12>
c000225f:	b8 09 00 00 00       	mov    eax,0x9
c0002264:	31 c9                	xor    ecx,ecx
c0002266:	eb 2f                	jmp    c0002297 <validate+0x41>
c0002268:	89 c3                	mov    ebx,eax
c000226a:	8b 00                	mov    eax,DWORD PTR [eax]
c000226c:	85 c0                	test   eax,eax
c000226e:	74 ef                	je     c000225f <validate+0x9>
c0002270:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002273:	74 ea                	je     c000225f <validate+0x9>
c0002275:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002279:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000227d:	75 e0                	jne    c000225f <validate+0x9>
c000227f:	83 ec 0c             	sub    esp,0xc
c0002282:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002286:	50                   	push   eax
c0002287:	e8 76 f8 ff ff       	call   c0001b02 <disk_status>
c000228c:	83 c4 10             	add    esp,0x10
c000228f:	a8 01                	test   al,0x1
c0002291:	75 cc                	jne    c000225f <validate+0x9>
c0002293:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002295:	31 c0                	xor    eax,eax
c0002297:	89 0e                	mov    DWORD PTR [esi],ecx
c0002299:	5a                   	pop    edx
c000229a:	5b                   	pop    ebx
c000229b:	5e                   	pop    esi
c000229c:	c3                   	ret    

c000229d <sync_window>:
c000229d:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022a1:	0f 84 85 00 00 00    	je     c000232c <sync_window+0x8f>
c00022a7:	55                   	push   ebp
c00022a8:	8d 68 54             	lea    ebp,[eax+0x54]
c00022ab:	57                   	push   edi
c00022ac:	56                   	push   esi
c00022ad:	53                   	push   ebx
c00022ae:	89 c3                	mov    ebx,eax
c00022b0:	83 ec 28             	sub    esp,0x28
c00022b3:	6a 01                	push   0x1
c00022b5:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00022b8:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00022bb:	55                   	push   ebp
c00022bc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022c0:	50                   	push   eax
c00022c1:	e8 58 f8 ff ff       	call   c0001b1e <disk_write>
c00022c6:	83 c4 20             	add    esp,0x20
c00022c9:	ba 01 00 00 00       	mov    edx,0x1
c00022ce:	85 c0                	test   eax,eax
c00022d0:	75 50                	jne    c0002322 <sync_window+0x85>
c00022d2:	31 ff                	xor    edi,edi
c00022d4:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00022d7:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00022db:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00022df:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00022e2:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00022e5:	89 c6                	mov    esi,eax
c00022e7:	89 d7                	mov    edi,edx
c00022e9:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00022ec:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00022f0:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00022f3:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00022f7:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00022fb:	73 23                	jae    c0002320 <sync_window+0x83>
c00022fd:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002301:	75 1d                	jne    c0002320 <sync_window+0x83>
c0002303:	83 ec 0c             	sub    esp,0xc
c0002306:	6a 01                	push   0x1
c0002308:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000230c:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002310:	52                   	push   edx
c0002311:	50                   	push   eax
c0002312:	55                   	push   ebp
c0002313:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002317:	50                   	push   eax
c0002318:	e8 01 f8 ff ff       	call   c0001b1e <disk_write>
c000231d:	83 c4 20             	add    esp,0x20
c0002320:	31 d2                	xor    edx,edx
c0002322:	83 c4 1c             	add    esp,0x1c
c0002325:	89 d0                	mov    eax,edx
c0002327:	5b                   	pop    ebx
c0002328:	5e                   	pop    esi
c0002329:	5f                   	pop    edi
c000232a:	5d                   	pop    ebp
c000232b:	c3                   	ret    
c000232c:	31 d2                	xor    edx,edx
c000232e:	89 d0                	mov    eax,edx
c0002330:	c3                   	ret    

c0002331 <move_window>:
c0002331:	56                   	push   esi
c0002332:	53                   	push   ebx
c0002333:	89 c3                	mov    ebx,eax
c0002335:	83 ec 14             	sub    esp,0x14
c0002338:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000233b:	75 07                	jne    c0002344 <move_window+0x13>
c000233d:	31 f6                	xor    esi,esi
c000233f:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002342:	74 59                	je     c000239d <move_window+0x6c>
c0002344:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002348:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000234c:	89 d8                	mov    eax,ebx
c000234e:	e8 4a ff ff ff       	call   c000229d <sync_window>
c0002353:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002357:	89 c6                	mov    esi,eax
c0002359:	85 c0                	test   eax,eax
c000235b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000235f:	75 3c                	jne    c000239d <move_window+0x6c>
c0002361:	83 ec 0c             	sub    esp,0xc
c0002364:	8d 43 54             	lea    eax,[ebx+0x54]
c0002367:	6a 01                	push   0x1
c0002369:	51                   	push   ecx
c000236a:	52                   	push   edx
c000236b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000236f:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002373:	50                   	push   eax
c0002374:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002378:	50                   	push   eax
c0002379:	e8 8a f7 ff ff       	call   c0001b08 <disk_read>
c000237e:	83 c4 20             	add    esp,0x20
c0002381:	85 c0                	test   eax,eax
c0002383:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002387:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000238b:	74 0a                	je     c0002397 <move_window+0x66>
c000238d:	83 ca ff             	or     edx,0xffffffff
c0002390:	be 01 00 00 00       	mov    esi,0x1
c0002395:	89 d1                	mov    ecx,edx
c0002397:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c000239a:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c000239d:	89 f0                	mov    eax,esi
c000239f:	83 c4 14             	add    esp,0x14
c00023a2:	5b                   	pop    ebx
c00023a3:	5e                   	pop    esi
c00023a4:	c3                   	ret    

c00023a5 <check_fs>:
c00023a5:	53                   	push   ebx
c00023a6:	89 c3                	mov    ebx,eax
c00023a8:	83 ec 08             	sub    esp,0x8
c00023ab:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023af:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00023b6:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00023bd:	e8 6f ff ff ff       	call   c0002331 <move_window>
c00023c2:	ba 04 00 00 00       	mov    edx,0x4
c00023c7:	85 c0                	test   eax,eax
c00023c9:	0f 85 89 00 00 00    	jne    c0002458 <check_fs+0xb3>
c00023cf:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00023d5:	e8 79 f7 ff ff       	call   c0001b53 <ld_word>
c00023da:	ba 03 00 00 00       	mov    edx,0x3
c00023df:	66 3d 55 aa          	cmp    ax,0xaa55
c00023e3:	75 73                	jne    c0002458 <check_fs+0xb3>
c00023e5:	ba e0 36 02 c0       	mov    edx,0xc00236e0
c00023ea:	8d 43 54             	lea    eax,[ebx+0x54]
c00023ed:	b9 0b 00 00 00       	mov    ecx,0xb
c00023f2:	e8 fb f7 ff ff       	call   c0001bf2 <mem_cmp>
c00023f7:	ba 01 00 00 00       	mov    edx,0x1
c00023fc:	85 c0                	test   eax,eax
c00023fe:	74 58                	je     c0002458 <check_fs+0xb3>
c0002400:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c0002403:	8d 50 18             	lea    edx,[eax+0x18]
c0002406:	80 fa 01             	cmp    dl,0x1
c0002409:	76 09                	jbe    c0002414 <check_fs+0x6f>
c000240b:	ba 02 00 00 00       	mov    edx,0x2
c0002410:	3c eb                	cmp    al,0xeb
c0002412:	75 44                	jne    c0002458 <check_fs+0xb3>
c0002414:	ba ed 63 02 c0       	mov    edx,0xc00263ed
c0002419:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000241f:	b9 03 00 00 00       	mov    ecx,0x3
c0002424:	e8 c9 f7 ff ff       	call   c0001bf2 <mem_cmp>
c0002429:	31 d2                	xor    edx,edx
c000242b:	85 c0                	test   eax,eax
c000242d:	74 29                	je     c0002458 <check_fs+0xb3>
c000242f:	ba ec 36 02 c0       	mov    edx,0xc00236ec
c0002434:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c000243a:	b9 05 00 00 00       	mov    ecx,0x5
c000243f:	e8 ae f7 ff ff       	call   c0001bf2 <mem_cmp>
c0002444:	31 d2                	xor    edx,edx
c0002446:	85 c0                	test   eax,eax
c0002448:	74 0e                	je     c0002458 <check_fs+0xb3>
c000244a:	31 d2                	xor    edx,edx
c000244c:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002453:	0f 95 c2             	setne  dl
c0002456:	01 d2                	add    edx,edx
c0002458:	89 d0                	mov    eax,edx
c000245a:	83 c4 08             	add    esp,0x8
c000245d:	5b                   	pop    ebx
c000245e:	c3                   	ret    

c000245f <find_volume>:
c000245f:	55                   	push   ebp
c0002460:	31 c9                	xor    ecx,ecx
c0002462:	57                   	push   edi
c0002463:	56                   	push   esi
c0002464:	89 d6                	mov    esi,edx
c0002466:	53                   	push   ebx
c0002467:	31 d2                	xor    edx,edx
c0002469:	83 ec 3c             	sub    esp,0x3c
c000246c:	89 c3                	mov    ebx,eax
c000246e:	e8 32 ff ff ff       	call   c00023a5 <check_fs>
c0002473:	83 f8 02             	cmp    eax,0x2
c0002476:	74 0e                	je     c0002486 <find_volume+0x27>
c0002478:	0f 87 5d 01 00 00    	ja     c00025db <find_volume+0x17c>
c000247e:	85 f6                	test   esi,esi
c0002480:	0f 84 55 01 00 00    	je     c00025db <find_volume+0x17c>
c0002486:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000248d:	0f 85 dd 00 00 00    	jne    c0002570 <find_volume+0x111>
c0002493:	31 c9                	xor    ecx,ecx
c0002495:	ba 01 00 00 00       	mov    edx,0x1
c000249a:	89 d8                	mov    eax,ebx
c000249c:	e8 90 fe ff ff       	call   c0002331 <move_window>
c00024a1:	85 c0                	test   eax,eax
c00024a3:	74 0a                	je     c00024af <find_volume+0x50>
c00024a5:	b8 04 00 00 00       	mov    eax,0x4
c00024aa:	e9 2c 01 00 00       	jmp    c00025db <find_volume+0x17c>
c00024af:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00024b2:	89 e8                	mov    eax,ebp
c00024b4:	e8 f6 fc ff ff       	call   c00021af <test_gpt_header>
c00024b9:	85 c0                	test   eax,eax
c00024bb:	75 0a                	jne    c00024c7 <find_volume+0x68>
c00024bd:	b8 03 00 00 00       	mov    eax,0x3
c00024c2:	e9 14 01 00 00       	jmp    c00025db <find_volume+0x17c>
c00024c7:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00024cd:	e8 8e f6 ff ff       	call   c0001b60 <ld_dword>
c00024d2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00024d6:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00024dc:	e8 97 f6 ff ff       	call   c0001b78 <ld_qword>
c00024e1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00024e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00024ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00024f1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00024f9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00024fd:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0002501:	74 ba                	je     c00024bd <find_volume+0x5e>
c0002503:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002507:	31 c9                	xor    ecx,ecx
c0002509:	c1 e7 07             	shl    edi,0x7
c000250c:	89 d8                	mov    eax,ebx
c000250e:	89 fa                	mov    edx,edi
c0002510:	c1 ea 09             	shr    edx,0x9
c0002513:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002517:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c000251b:	e8 11 fe ff ff       	call   c0002331 <move_window>
c0002520:	85 c0                	test   eax,eax
c0002522:	75 81                	jne    c00024a5 <find_volume+0x46>
c0002524:	81 e7 80 01 00 00    	and    edi,0x180
c000252a:	b9 10 00 00 00       	mov    ecx,0x10
c000252f:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002533:	ba d0 36 02 c0       	mov    edx,0xc00236d0
c0002538:	e8 b5 f6 ff ff       	call   c0001bf2 <mem_cmp>
c000253d:	85 c0                	test   eax,eax
c000253f:	75 29                	jne    c000256a <find_volume+0x10b>
c0002541:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002545:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002549:	e8 2a f6 ff ff       	call   c0001b78 <ld_qword>
c000254e:	89 d1                	mov    ecx,edx
c0002550:	89 c2                	mov    edx,eax
c0002552:	89 d8                	mov    eax,ebx
c0002554:	e8 4c fe ff ff       	call   c00023a5 <check_fs>
c0002559:	85 f6                	test   esi,esi
c000255b:	75 07                	jne    c0002564 <find_volume+0x105>
c000255d:	83 f8 01             	cmp    eax,0x1
c0002560:	77 08                	ja     c000256a <find_volume+0x10b>
c0002562:	eb 77                	jmp    c00025db <find_volume+0x17c>
c0002564:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002568:	74 71                	je     c00025db <find_volume+0x17c>
c000256a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000256e:	eb 89                	jmp    c00024f9 <find_volume+0x9a>
c0002570:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002574:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c000257a:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002580:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002584:	89 cd                	mov    ebp,ecx
c0002586:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000258a:	89 f8                	mov    eax,edi
c000258c:	83 c7 10             	add    edi,0x10
c000258f:	e8 cc f5 ff ff       	call   c0001b60 <ld_dword>
c0002594:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0002598:	89 01                	mov    DWORD PTR [ecx],eax
c000259a:	83 c1 04             	add    ecx,0x4
c000259d:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00025a1:	75 e3                	jne    c0002586 <find_volume+0x127>
c00025a3:	31 ff                	xor    edi,edi
c00025a5:	85 f6                	test   esi,esi
c00025a7:	74 03                	je     c00025ac <find_volume+0x14d>
c00025a9:	8d 7e ff             	lea    edi,[esi-0x1]
c00025ac:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00025b0:	85 d2                	test   edx,edx
c00025b2:	74 14                	je     c00025c8 <find_volume+0x169>
c00025b4:	31 c9                	xor    ecx,ecx
c00025b6:	89 d8                	mov    eax,ebx
c00025b8:	e8 e8 fd ff ff       	call   c00023a5 <check_fs>
c00025bd:	83 f8 01             	cmp    eax,0x1
c00025c0:	76 19                	jbe    c00025db <find_volume+0x17c>
c00025c2:	85 f6                	test   esi,esi
c00025c4:	74 0f                	je     c00025d5 <find_volume+0x176>
c00025c6:	eb 13                	jmp    c00025db <find_volume+0x17c>
c00025c8:	85 f6                	test   esi,esi
c00025ca:	0f 85 ed fe ff ff    	jne    c00024bd <find_volume+0x5e>
c00025d0:	b8 03 00 00 00       	mov    eax,0x3
c00025d5:	47                   	inc    edi
c00025d6:	83 ff 03             	cmp    edi,0x3
c00025d9:	76 d1                	jbe    c00025ac <find_volume+0x14d>
c00025db:	83 c4 3c             	add    esp,0x3c
c00025de:	5b                   	pop    ebx
c00025df:	5e                   	pop    esi
c00025e0:	5f                   	pop    edi
c00025e1:	5d                   	pop    ebp
c00025e2:	c3                   	ret    

c00025e3 <mount_volume>:
c00025e3:	55                   	push   ebp
c00025e4:	57                   	push   edi
c00025e5:	89 cf                	mov    edi,ecx
c00025e7:	56                   	push   esi
c00025e8:	53                   	push   ebx
c00025e9:	bb 0b 00 00 00       	mov    ebx,0xb
c00025ee:	83 ec 3c             	sub    esp,0x3c
c00025f1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00025f7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00025fb:	e8 35 fb ff ff       	call   c0002135 <get_ldnumber>
c0002600:	85 c0                	test   eax,eax
c0002602:	0f 88 3a 05 00 00    	js     c0002b42 <mount_volume+0x55f>
c0002608:	8b 2c 85 a0 7e 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd8160]
c000260f:	89 c6                	mov    esi,eax
c0002611:	bb 0c 00 00 00       	mov    ebx,0xc
c0002616:	85 ed                	test   ebp,ebp
c0002618:	0f 84 24 05 00 00    	je     c0002b42 <mount_volume+0x55f>
c000261e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002622:	83 e7 fe             	and    edi,0xfffffffe
c0002625:	89 2a                	mov    DWORD PTR [edx],ebp
c0002627:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c000262b:	74 32                	je     c000265f <mount_volume+0x7c>
c000262d:	83 ec 0c             	sub    esp,0xc
c0002630:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002634:	50                   	push   eax
c0002635:	e8 c8 f4 ff ff       	call   c0001b02 <disk_status>
c000263a:	83 c4 10             	add    esp,0x10
c000263d:	a8 01                	test   al,0x1
c000263f:	75 1e                	jne    c000265f <mount_volume+0x7c>
c0002641:	31 db                	xor    ebx,ebx
c0002643:	89 f9                	mov    ecx,edi
c0002645:	84 c9                	test   cl,cl
c0002647:	0f 84 f5 04 00 00    	je     c0002b42 <mount_volume+0x55f>
c000264d:	a8 04                	test   al,0x4
c000264f:	0f 84 ed 04 00 00    	je     c0002b42 <mount_volume+0x55f>
c0002655:	bb 0a 00 00 00       	mov    ebx,0xa
c000265a:	e9 e3 04 00 00       	jmp    c0002b42 <mount_volume+0x55f>
c000265f:	83 ec 0c             	sub    esp,0xc
c0002662:	89 f0                	mov    eax,esi
c0002664:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002668:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000266b:	0f b6 f0             	movzx  esi,al
c000266e:	bb 03 00 00 00       	mov    ebx,0x3
c0002673:	56                   	push   esi
c0002674:	e8 8c f4 ff ff       	call   c0001b05 <disk_initialize>
c0002679:	83 c4 10             	add    esp,0x10
c000267c:	a8 01                	test   al,0x1
c000267e:	0f 85 be 04 00 00    	jne    c0002b42 <mount_volume+0x55f>
c0002684:	89 f9                	mov    ecx,edi
c0002686:	84 c9                	test   cl,cl
c0002688:	74 04                	je     c000268e <mount_volume+0xab>
c000268a:	a8 04                	test   al,0x4
c000268c:	75 c7                	jne    c0002655 <mount_volume+0x72>
c000268e:	31 d2                	xor    edx,edx
c0002690:	89 e8                	mov    eax,ebp
c0002692:	e8 c8 fd ff ff       	call   c000245f <find_volume>
c0002697:	83 f8 04             	cmp    eax,0x4
c000269a:	75 0a                	jne    c00026a6 <mount_volume+0xc3>
c000269c:	bb 01 00 00 00       	mov    ebx,0x1
c00026a1:	e9 9c 04 00 00       	jmp    c0002b42 <mount_volume+0x55f>
c00026a6:	83 f8 01             	cmp    eax,0x1
c00026a9:	76 0a                	jbe    c00026b5 <mount_volume+0xd2>
c00026ab:	bb 0d 00 00 00       	mov    ebx,0xd
c00026b0:	e9 8d 04 00 00       	jmp    c0002b42 <mount_volume+0x55f>
c00026b5:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00026b8:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00026bb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00026bf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00026c3:	75 17                	jne    c00026dc <mount_volume+0xf9>
c00026c5:	b8 0b 00 00 00       	mov    eax,0xb
c00026ca:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00026cf:	75 da                	jne    c00026ab <mount_volume+0xc8>
c00026d1:	40                   	inc    eax
c00026d2:	83 f8 40             	cmp    eax,0x40
c00026d5:	75 f3                	jne    c00026ca <mount_volume+0xe7>
c00026d7:	e9 5a 02 00 00       	jmp    c0002936 <mount_volume+0x353>
c00026dc:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00026df:	e8 6f f4 ff ff       	call   c0001b53 <ld_word>
c00026e4:	66 3d 00 02          	cmp    ax,0x200
c00026e8:	75 c1                	jne    c00026ab <mount_volume+0xc8>
c00026ea:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00026ed:	e8 61 f4 ff ff       	call   c0001b53 <ld_word>
c00026f2:	0f b7 c0             	movzx  eax,ax
c00026f5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00026f9:	85 c0                	test   eax,eax
c00026fb:	75 0c                	jne    c0002709 <mount_volume+0x126>
c00026fd:	8d 45 78             	lea    eax,[ebp+0x78]
c0002700:	e8 5b f4 ff ff       	call   c0001b60 <ld_dword>
c0002705:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002709:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000270d:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002710:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002713:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002717:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c000271a:	48                   	dec    eax
c000271b:	3c 01                	cmp    al,0x1
c000271d:	77 8c                	ja     c00026ab <mount_volume+0xc8>
c000271f:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002723:	89 c3                	mov    ebx,eax
c0002725:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002729:	66 85 c0             	test   ax,ax
c000272c:	0f 84 79 ff ff ff    	je     c00026ab <mount_volume+0xc8>
c0002732:	8d 40 ff             	lea    eax,[eax-0x1]
c0002735:	85 d8                	test   eax,ebx
c0002737:	0f 85 6e ff ff ff    	jne    c00026ab <mount_volume+0xc8>
c000273d:	8d 45 65             	lea    eax,[ebp+0x65]
c0002740:	e8 0e f4 ff ff       	call   c0001b53 <ld_word>
c0002745:	89 c7                	mov    edi,eax
c0002747:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000274b:	a8 0f                	test   al,0xf
c000274d:	0f 85 58 ff ff ff    	jne    c00026ab <mount_volume+0xc8>
c0002753:	8d 45 67             	lea    eax,[ebp+0x67]
c0002756:	e8 f8 f3 ff ff       	call   c0001b53 <ld_word>
c000275b:	0f b7 f0             	movzx  esi,ax
c000275e:	85 f6                	test   esi,esi
c0002760:	75 0a                	jne    c000276c <mount_volume+0x189>
c0002762:	8d 45 74             	lea    eax,[ebp+0x74]
c0002765:	e8 f6 f3 ff ff       	call   c0001b60 <ld_dword>
c000276a:	89 c6                	mov    esi,eax
c000276c:	8d 45 62             	lea    eax,[ebp+0x62]
c000276f:	e8 df f3 ff ff       	call   c0001b53 <ld_word>
c0002774:	66 85 c0             	test   ax,ax
c0002777:	0f 84 2e ff ff ff    	je     c00026ab <mount_volume+0xc8>
c000277d:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002782:	0f b7 c8             	movzx  ecx,ax
c0002785:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000278a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000278e:	89 fa                	mov    edx,edi
c0002790:	66 c1 ea 04          	shr    dx,0x4
c0002794:	0f b7 d2             	movzx  edx,dx
c0002797:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000279b:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000279e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00027a2:	39 c6                	cmp    esi,eax
c00027a4:	0f 82 01 ff ff ff    	jb     c00026ab <mount_volume+0xc8>
c00027aa:	29 c6                	sub    esi,eax
c00027ac:	31 d2                	xor    edx,edx
c00027ae:	89 f0                	mov    eax,esi
c00027b0:	f7 f3                	div    ebx
c00027b2:	39 de                	cmp    esi,ebx
c00027b4:	0f 82 f1 fe ff ff    	jb     c00026ab <mount_volume+0xc8>
c00027ba:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00027bf:	0f 87 e6 fe ff ff    	ja     c00026ab <mount_volume+0xc8>
c00027c5:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00027ca:	0f 86 63 03 00 00    	jbe    c0002b33 <mount_volume+0x550>
c00027d0:	bb 03 00 00 00       	mov    ebx,0x3
c00027d5:	8d 70 02             	lea    esi,[eax+0x2]
c00027d8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00027dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00027e0:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00027e3:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00027e6:	31 d2                	xor    edx,edx
c00027e8:	89 c8                	mov    eax,ecx
c00027ea:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00027ed:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00027f1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00027f5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00027f9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00027fd:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002800:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002803:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002807:	31 d2                	xor    edx,edx
c0002809:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000280d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002811:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002814:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002817:	83 fb 03             	cmp    ebx,0x3
c000281a:	75 2b                	jne    c0002847 <mount_volume+0x264>
c000281c:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000281f:	e8 2f f3 ff ff       	call   c0001b53 <ld_word>
c0002824:	66 09 c7             	or     di,ax
c0002827:	0f 85 7e fe ff ff    	jne    c00026ab <mount_volume+0xc8>
c000282d:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002833:	c1 e6 02             	shl    esi,0x2
c0002836:	e8 25 f3 ff ff       	call   c0001b60 <ld_dword>
c000283b:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002842:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002845:	eb 30                	jmp    c0002877 <mount_volume+0x294>
c0002847:	66 85 ff             	test   di,di
c000284a:	0f 84 5b fe ff ff    	je     c00026ab <mount_volume+0xc8>
c0002850:	31 d2                	xor    edx,edx
c0002852:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002856:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000285a:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000285e:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002861:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002864:	83 fb 02             	cmp    ebx,0x2
c0002867:	75 04                	jne    c000286d <mount_volume+0x28a>
c0002869:	01 f6                	add    esi,esi
c000286b:	eb 0a                	jmp    c0002877 <mount_volume+0x294>
c000286d:	8d 04 76             	lea    eax,[esi+esi*2]
c0002870:	83 e6 01             	and    esi,0x1
c0002873:	d1 e8                	shr    eax,1
c0002875:	01 c6                	add    esi,eax
c0002877:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000287d:	c1 ee 09             	shr    esi,0x9
c0002880:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002884:	0f 87 21 fe ff ff    	ja     c00026ab <mount_volume+0xc8>
c000288a:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002891:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002898:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c000289c:	83 fb 03             	cmp    ebx,0x3
c000289f:	75 7a                	jne    c000291b <mount_volume+0x338>
c00028a1:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00028a7:	e8 a7 f2 ff ff       	call   c0001b53 <ld_word>
c00028ac:	66 48                	dec    ax
c00028ae:	75 6b                	jne    c000291b <mount_volume+0x338>
c00028b0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00028b4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00028b8:	83 c2 01             	add    edx,0x1
c00028bb:	89 e8                	mov    eax,ebp
c00028bd:	83 d1 00             	adc    ecx,0x0
c00028c0:	e8 6c fa ff ff       	call   c0002331 <move_window>
c00028c5:	85 c0                	test   eax,eax
c00028c7:	75 52                	jne    c000291b <mount_volume+0x338>
c00028c9:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00028cd:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00028d3:	e8 7b f2 ff ff       	call   c0001b53 <ld_word>
c00028d8:	66 3d 55 aa          	cmp    ax,0xaa55
c00028dc:	75 3d                	jne    c000291b <mount_volume+0x338>
c00028de:	8d 45 54             	lea    eax,[ebp+0x54]
c00028e1:	e8 7a f2 ff ff       	call   c0001b60 <ld_dword>
c00028e6:	3d 52 52 61 41       	cmp    eax,0x41615252
c00028eb:	75 2e                	jne    c000291b <mount_volume+0x338>
c00028ed:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00028f3:	e8 68 f2 ff ff       	call   c0001b60 <ld_dword>
c00028f8:	3d 72 72 41 61       	cmp    eax,0x61417272
c00028fd:	75 1c                	jne    c000291b <mount_volume+0x338>
c00028ff:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002905:	e8 56 f2 ff ff       	call   c0001b60 <ld_dword>
c000290a:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c000290d:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002913:	e8 48 f2 ff ff       	call   c0001b60 <ld_dword>
c0002918:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c000291b:	66 a1 80 7e 02 c0    	mov    ax,ds:0xc0027e80
c0002921:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002924:	40                   	inc    eax
c0002925:	31 db                	xor    ebx,ebx
c0002927:	66 a3 80 7e 02 c0    	mov    ds:0xc0027e80,ax
c000292d:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002931:	e9 0c 02 00 00       	jmp    c0002b42 <mount_volume+0x55f>
c0002936:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c000293c:	e8 12 f2 ff ff       	call   c0001b53 <ld_word>
c0002941:	66 3d 00 01          	cmp    ax,0x100
c0002945:	0f 85 60 fd ff ff    	jne    c00026ab <mount_volume+0xc8>
c000294b:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002952:	0f 85 53 fd ff ff    	jne    c00026ab <mount_volume+0xc8>
c0002958:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c000295e:	e8 15 f2 ff ff       	call   c0001b78 <ld_qword>
c0002963:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002967:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000296b:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002971:	e8 ea f1 ff ff       	call   c0001b60 <ld_dword>
c0002976:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002979:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c000297f:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002982:	fe c8                	dec    al
c0002984:	0f 85 21 fd ff ff    	jne    c00026ab <mount_volume+0xc8>
c000298a:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002991:	bb 01 00 00 00       	mov    ebx,0x1
c0002996:	d3 e3                	shl    ebx,cl
c0002998:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c000299c:	66 85 db             	test   bx,bx
c000299f:	0f 84 06 fd ff ff    	je     c00026ab <mount_volume+0xc8>
c00029a5:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00029ab:	e8 b0 f1 ff ff       	call   c0001b60 <ld_dword>
c00029b0:	89 c6                	mov    esi,eax
c00029b2:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00029b7:	0f 87 ee fc ff ff    	ja     c00026ab <mount_volume+0xc8>
c00029bd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029c1:	8d 40 02             	lea    eax,[eax+0x2]
c00029c4:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00029c7:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00029ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00029ce:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00029d1:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c00029d7:	e8 84 f1 ff ff       	call   c0001b60 <ld_dword>
c00029dc:	31 d2                	xor    edx,edx
c00029de:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00029e2:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00029e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00029ea:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00029ee:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00029f1:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00029f4:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c00029fa:	e8 61 f1 ff ff       	call   c0001b60 <ld_dword>
c00029ff:	31 d2                	xor    edx,edx
c0002a01:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002a05:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a09:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002a0d:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002a10:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002a13:	0f b7 c3             	movzx  eax,bx
c0002a16:	31 d2                	xor    edx,edx
c0002a18:	0f af f0             	imul   esi,eax
c0002a1b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002a1f:	89 f0                	mov    eax,esi
c0002a21:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002a25:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002a29:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002a2d:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002a31:	39 c1                	cmp    ecx,eax
c0002a33:	89 df                	mov    edi,ebx
c0002a35:	19 d7                	sbb    edi,edx
c0002a37:	0f 82 6e fc ff ff    	jb     c00026ab <mount_volume+0xc8>
c0002a3d:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002a43:	31 db                	xor    ebx,ebx
c0002a45:	e8 16 f1 ff ff       	call   c0001b60 <ld_dword>
c0002a4a:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002a51:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002a54:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002a5c:	85 db                	test   ebx,ebx
c0002a5e:	75 39                	jne    c0002a99 <mount_volume+0x4b6>
c0002a60:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002a64:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002a68:	0f 86 3d fc ff ff    	jbe    c00026ab <mount_volume+0xc8>
c0002a6e:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002a71:	31 ff                	xor    edi,edi
c0002a73:	89 e8                	mov    eax,ebp
c0002a75:	e8 72 f3 ff ff       	call   c0001dec <clst2sect>
c0002a7a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002a7e:	01 c6                	add    esi,eax
c0002a80:	89 e8                	mov    eax,ebp
c0002a82:	11 d7                	adc    edi,edx
c0002a84:	89 f2                	mov    edx,esi
c0002a86:	89 f9                	mov    ecx,edi
c0002a88:	e8 a4 f8 ff ff       	call   c0002331 <move_window>
c0002a8d:	85 c0                	test   eax,eax
c0002a8f:	0f 85 07 fc ff ff    	jne    c000269c <mount_volume+0xb9>
c0002a95:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002a99:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002a9e:	74 0b                	je     c0002aab <mount_volume+0x4c8>
c0002aa0:	83 c3 20             	add    ebx,0x20
c0002aa3:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002aa9:	eb b1                	jmp    c0002a5c <mount_volume+0x479>
c0002aab:	8d 75 54             	lea    esi,[ebp+0x54]
c0002aae:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002ab2:	e8 a9 f0 ff ff       	call   c0001b60 <ld_dword>
c0002ab7:	89 c3                	mov    ebx,eax
c0002ab9:	83 f8 01             	cmp    eax,0x1
c0002abc:	0f 86 e9 fb ff ff    	jbe    c00026ab <mount_volume+0xc8>
c0002ac2:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002ac5:	0f 86 e0 fb ff ff    	jbe    c00026ab <mount_volume+0xc8>
c0002acb:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ace:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ad2:	0f af c2             	imul   eax,edx
c0002ad5:	31 d2                	xor    edx,edx
c0002ad7:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002ada:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002add:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002ae0:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002ae3:	31 c9                	xor    ecx,ecx
c0002ae5:	89 da                	mov    edx,ebx
c0002ae7:	89 e8                	mov    eax,ebp
c0002ae9:	c1 ea 07             	shr    edx,0x7
c0002aec:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002aef:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002af2:	e8 3a f8 ff ff       	call   c0002331 <move_window>
c0002af7:	85 c0                	test   eax,eax
c0002af9:	0f 85 9d fb ff ff    	jne    c000269c <mount_volume+0xb9>
c0002aff:	89 d8                	mov    eax,ebx
c0002b01:	83 e0 7f             	and    eax,0x7f
c0002b04:	8d 04 86             	lea    eax,[esi+eax*4]
c0002b07:	e8 54 f0 ff ff       	call   c0001b60 <ld_dword>
c0002b0c:	83 f8 ff             	cmp    eax,0xffffffff
c0002b0f:	74 0a                	je     c0002b1b <mount_volume+0x538>
c0002b11:	43                   	inc    ebx
c0002b12:	39 d8                	cmp    eax,ebx
c0002b14:	74 cd                	je     c0002ae3 <mount_volume+0x500>
c0002b16:	e9 90 fb ff ff       	jmp    c00026ab <mount_volume+0xc8>
c0002b1b:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002b22:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002b29:	bb 04 00 00 00       	mov    ebx,0x4
c0002b2e:	e9 e8 fd ff ff       	jmp    c000291b <mount_volume+0x338>
c0002b33:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002b38:	19 db                	sbb    ebx,ebx
c0002b3a:	83 c3 02             	add    ebx,0x2
c0002b3d:	e9 93 fc ff ff       	jmp    c00027d5 <mount_volume+0x1f2>
c0002b42:	83 c4 3c             	add    esp,0x3c
c0002b45:	89 d8                	mov    eax,ebx
c0002b47:	5b                   	pop    ebx
c0002b48:	5e                   	pop    esi
c0002b49:	5f                   	pop    edi
c0002b4a:	5d                   	pop    ebp
c0002b4b:	c3                   	ret    

c0002b4c <find_bitmap>:
c0002b4c:	55                   	push   ebp
c0002b4d:	57                   	push   edi
c0002b4e:	89 c7                	mov    edi,eax
c0002b50:	56                   	push   esi
c0002b51:	8d 72 fe             	lea    esi,[edx-0x2]
c0002b54:	53                   	push   ebx
c0002b55:	83 ec 1c             	sub    esp,0x1c
c0002b58:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002b5b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002b5f:	83 e8 02             	sub    eax,0x2
c0002b62:	39 f0                	cmp    eax,esi
c0002b64:	77 02                	ja     c0002b68 <find_bitmap+0x1c>
c0002b66:	31 f6                	xor    esi,esi
c0002b68:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002b6c:	89 f3                	mov    ebx,esi
c0002b6e:	31 ed                	xor    ebp,ebp
c0002b70:	31 c9                	xor    ecx,ecx
c0002b72:	89 da                	mov    edx,ebx
c0002b74:	89 f8                	mov    eax,edi
c0002b76:	c1 ea 0c             	shr    edx,0xc
c0002b79:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002b7c:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002b7f:	e8 ad f7 ff ff       	call   c0002331 <move_window>
c0002b84:	85 c0                	test   eax,eax
c0002b86:	75 68                	jne    c0002bf0 <find_bitmap+0xa4>
c0002b88:	89 da                	mov    edx,ebx
c0002b8a:	89 d9                	mov    ecx,ebx
c0002b8c:	c1 ea 03             	shr    edx,0x3
c0002b8f:	83 e1 07             	and    ecx,0x7
c0002b92:	b8 01 00 00 00       	mov    eax,0x1
c0002b97:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002b9d:	d3 e0                	shl    eax,cl
c0002b9f:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002ba2:	83 e9 02             	sub    ecx,0x2
c0002ba5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ba9:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002bad:	43                   	inc    ebx
c0002bae:	21 c1                	and    ecx,eax
c0002bb0:	d1 e0                	shl    eax,1
c0002bb2:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002bb6:	77 09                	ja     c0002bc1 <find_bitmap+0x75>
c0002bb8:	31 db                	xor    ebx,ebx
c0002bba:	ba 00 02 00 00       	mov    edx,0x200
c0002bbf:	31 c0                	xor    eax,eax
c0002bc1:	84 c9                	test   cl,cl
c0002bc3:	75 10                	jne    c0002bd5 <find_bitmap+0x89>
c0002bc5:	45                   	inc    ebp
c0002bc6:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002bca:	75 0f                	jne    c0002bdb <find_bitmap+0x8f>
c0002bcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bd0:	83 c0 02             	add    eax,0x2
c0002bd3:	eb 22                	jmp    c0002bf7 <find_bitmap+0xab>
c0002bd5:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002bd9:	31 ed                	xor    ebp,ebp
c0002bdb:	39 de                	cmp    esi,ebx
c0002bdd:	74 16                	je     c0002bf5 <find_bitmap+0xa9>
c0002bdf:	84 c0                	test   al,al
c0002be1:	75 c6                	jne    c0002ba9 <find_bitmap+0x5d>
c0002be3:	42                   	inc    edx
c0002be4:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002bea:	77 84                	ja     c0002b70 <find_bitmap+0x24>
c0002bec:	b0 01                	mov    al,0x1
c0002bee:	eb b9                	jmp    c0002ba9 <find_bitmap+0x5d>
c0002bf0:	83 c8 ff             	or     eax,0xffffffff
c0002bf3:	eb 02                	jmp    c0002bf7 <find_bitmap+0xab>
c0002bf5:	31 c0                	xor    eax,eax
c0002bf7:	83 c4 1c             	add    esp,0x1c
c0002bfa:	5b                   	pop    ebx
c0002bfb:	5e                   	pop    esi
c0002bfc:	5f                   	pop    edi
c0002bfd:	5d                   	pop    ebp
c0002bfe:	c3                   	ret    

c0002bff <change_bitmap>:
c0002bff:	55                   	push   ebp
c0002c00:	89 cd                	mov    ebp,ecx
c0002c02:	57                   	push   edi
c0002c03:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002c06:	56                   	push   esi
c0002c07:	89 c7                	mov    edi,eax
c0002c09:	53                   	push   ebx
c0002c0a:	89 c8                	mov    eax,ecx
c0002c0c:	83 ec 1c             	sub    esp,0x1c
c0002c0f:	31 d2                	xor    edx,edx
c0002c11:	89 ce                	mov    esi,ecx
c0002c13:	c1 e8 0c             	shr    eax,0xc
c0002c16:	bb 01 00 00 00       	mov    ebx,0x1
c0002c1b:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002c1e:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002c21:	c1 ee 03             	shr    esi,0x3
c0002c24:	83 e1 07             	and    ecx,0x7
c0002c27:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002c2d:	d3 e3                	shl    ebx,cl
c0002c2f:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002c33:	89 c1                	mov    ecx,eax
c0002c35:	89 d3                	mov    ebx,edx
c0002c37:	83 c1 01             	add    ecx,0x1
c0002c3a:	83 d3 00             	adc    ebx,0x0
c0002c3d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c41:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002c45:	89 d1                	mov    ecx,edx
c0002c47:	89 c2                	mov    edx,eax
c0002c49:	89 f8                	mov    eax,edi
c0002c4b:	e8 e1 f6 ff ff       	call   c0002331 <move_window>
c0002c50:	89 c1                	mov    ecx,eax
c0002c52:	85 c0                	test   eax,eax
c0002c54:	75 48                	jne    c0002c9e <change_bitmap+0x9f>
c0002c56:	31 d2                	xor    edx,edx
c0002c58:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002c5c:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002c60:	0f 95 c2             	setne  dl
c0002c63:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002c67:	74 3c                	je     c0002ca5 <change_bitmap+0xa6>
c0002c69:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002c6d:	4d                   	dec    ebp
c0002c6e:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002c72:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002c76:	74 32                	je     c0002caa <change_bitmap+0xab>
c0002c78:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002c7c:	75 d8                	jne    c0002c56 <change_bitmap+0x57>
c0002c7e:	8d 46 01             	lea    eax,[esi+0x1]
c0002c81:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002c86:	89 c3                	mov    ebx,eax
c0002c88:	31 f6                	xor    esi,esi
c0002c8a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c8e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c92:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002c98:	74 99                	je     c0002c33 <change_bitmap+0x34>
c0002c9a:	89 de                	mov    esi,ebx
c0002c9c:	eb b8                	jmp    c0002c56 <change_bitmap+0x57>
c0002c9e:	b9 01 00 00 00       	mov    ecx,0x1
c0002ca3:	eb 05                	jmp    c0002caa <change_bitmap+0xab>
c0002ca5:	b9 02 00 00 00       	mov    ecx,0x2
c0002caa:	83 c4 1c             	add    esp,0x1c
c0002cad:	89 c8                	mov    eax,ecx
c0002caf:	5b                   	pop    ebx
c0002cb0:	5e                   	pop    esi
c0002cb1:	5f                   	pop    edi
c0002cb2:	5d                   	pop    ebp
c0002cb3:	c3                   	ret    

c0002cb4 <put_fat>:
c0002cb4:	83 fa 01             	cmp    edx,0x1
c0002cb7:	0f 86 7b 01 00 00    	jbe    c0002e38 <put_fat+0x184>
c0002cbd:	55                   	push   ebp
c0002cbe:	57                   	push   edi
c0002cbf:	89 cf                	mov    edi,ecx
c0002cc1:	56                   	push   esi
c0002cc2:	b9 02 00 00 00       	mov    ecx,0x2
c0002cc7:	53                   	push   ebx
c0002cc8:	89 c6                	mov    esi,eax
c0002cca:	83 ec 1c             	sub    esp,0x1c
c0002ccd:	89 d3                	mov    ebx,edx
c0002ccf:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002cd2:	0f 86 68 01 00 00    	jbe    c0002e40 <put_fat+0x18c>
c0002cd8:	8a 00                	mov    al,BYTE PTR [eax]
c0002cda:	3c 02                	cmp    al,0x2
c0002cdc:	0f 84 c7 00 00 00    	je     c0002da9 <put_fat+0xf5>
c0002ce2:	77 09                	ja     c0002ced <put_fat+0x39>
c0002ce4:	fe c8                	dec    al
c0002ce6:	74 17                	je     c0002cff <put_fat+0x4b>
c0002ce8:	e9 53 01 00 00       	jmp    c0002e40 <put_fat+0x18c>
c0002ced:	b9 02 00 00 00       	mov    ecx,0x2
c0002cf2:	3c 04                	cmp    al,0x4
c0002cf4:	0f 86 e1 00 00 00    	jbe    c0002ddb <put_fat+0x127>
c0002cfa:	e9 41 01 00 00       	jmp    c0002e40 <put_fat+0x18c>
c0002cff:	89 d5                	mov    ebp,edx
c0002d01:	31 c9                	xor    ecx,ecx
c0002d03:	d1 ed                	shr    ebp,1
c0002d05:	89 f0                	mov    eax,esi
c0002d07:	01 d5                	add    ebp,edx
c0002d09:	89 ea                	mov    edx,ebp
c0002d0b:	c1 ea 09             	shr    edx,0x9
c0002d0e:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d11:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d14:	e8 18 f6 ff ff       	call   c0002331 <move_window>
c0002d19:	89 c1                	mov    ecx,eax
c0002d1b:	85 c0                	test   eax,eax
c0002d1d:	0f 85 1d 01 00 00    	jne    c0002e40 <put_fat+0x18c>
c0002d23:	8d 46 54             	lea    eax,[esi+0x54]
c0002d26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002d2a:	8d 45 01             	lea    eax,[ebp+0x1]
c0002d2d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d33:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002d37:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d3b:	89 f8                	mov    eax,edi
c0002d3d:	83 e3 01             	and    ebx,0x1
c0002d40:	74 0d                	je     c0002d4f <put_fat+0x9b>
c0002d42:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002d45:	89 fa                	mov    edx,edi
c0002d47:	83 e0 0f             	and    eax,0xf
c0002d4a:	c1 e2 04             	shl    edx,0x4
c0002d4d:	09 d0                	or     eax,edx
c0002d4f:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002d52:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d56:	31 c9                	xor    ecx,ecx
c0002d58:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002d5c:	c1 ea 09             	shr    edx,0x9
c0002d5f:	89 f0                	mov    eax,esi
c0002d61:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d64:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d67:	e8 c5 f5 ff ff       	call   c0002331 <move_window>
c0002d6c:	89 c1                	mov    ecx,eax
c0002d6e:	85 c0                	test   eax,eax
c0002d70:	0f 85 ca 00 00 00    	jne    c0002e40 <put_fat+0x18c>
c0002d76:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002d7a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d80:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d84:	85 db                	test   ebx,ebx
c0002d86:	74 07                	je     c0002d8f <put_fat+0xdb>
c0002d88:	c1 ef 04             	shr    edi,0x4
c0002d8b:	89 fa                	mov    edx,edi
c0002d8d:	eb 0e                	jmp    c0002d9d <put_fat+0xe9>
c0002d8f:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002d92:	c1 ef 08             	shr    edi,0x8
c0002d95:	83 e2 f0             	and    edx,0xfffffff0
c0002d98:	83 e7 0f             	and    edi,0xf
c0002d9b:	09 fa                	or     edx,edi
c0002d9d:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002da0:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002da4:	e9 97 00 00 00       	jmp    c0002e40 <put_fat+0x18c>
c0002da9:	31 c9                	xor    ecx,ecx
c0002dab:	c1 ea 08             	shr    edx,0x8
c0002dae:	89 f0                	mov    eax,esi
c0002db0:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002db3:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002db6:	e8 76 f5 ff ff       	call   c0002331 <move_window>
c0002dbb:	89 c1                	mov    ecx,eax
c0002dbd:	85 c0                	test   eax,eax
c0002dbf:	75 7f                	jne    c0002e40 <put_fat+0x18c>
c0002dc1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dc5:	01 db                	add    ebx,ebx
c0002dc7:	0f b7 d7             	movzx  edx,di
c0002dca:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002dd0:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002dd4:	e8 ec ed ff ff       	call   c0001bc5 <st_word>
c0002dd9:	eb 53                	jmp    c0002e2e <put_fat+0x17a>
c0002ddb:	31 c9                	xor    ecx,ecx
c0002ddd:	c1 ea 07             	shr    edx,0x7
c0002de0:	89 f0                	mov    eax,esi
c0002de2:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002de5:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002de8:	e8 44 f5 ff ff       	call   c0002331 <move_window>
c0002ded:	89 c1                	mov    ecx,eax
c0002def:	85 c0                	test   eax,eax
c0002df1:	75 4d                	jne    c0002e40 <put_fat+0x18c>
c0002df3:	c1 e3 02             	shl    ebx,0x2
c0002df6:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002dfc:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002dff:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002e03:	74 1c                	je     c0002e21 <put_fat+0x16d>
c0002e05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e09:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002e0f:	89 d8                	mov    eax,ebx
c0002e11:	e8 4a ed ff ff       	call   c0001b60 <ld_dword>
c0002e16:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e1a:	25 00 00 00 f0       	and    eax,0xf0000000
c0002e1f:	09 c7                	or     edi,eax
c0002e21:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002e25:	89 fa                	mov    edx,edi
c0002e27:	89 d8                	mov    eax,ebx
c0002e29:	e8 9b ed ff ff       	call   c0001bc9 <st_dword>
c0002e2e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e32:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e36:	eb 08                	jmp    c0002e40 <put_fat+0x18c>
c0002e38:	b9 02 00 00 00       	mov    ecx,0x2
c0002e3d:	89 c8                	mov    eax,ecx
c0002e3f:	c3                   	ret    
c0002e40:	83 c4 1c             	add    esp,0x1c
c0002e43:	89 c8                	mov    eax,ecx
c0002e45:	5b                   	pop    ebx
c0002e46:	5e                   	pop    esi
c0002e47:	5f                   	pop    edi
c0002e48:	5d                   	pop    ebp
c0002e49:	c3                   	ret    

c0002e4a <fill_last_frag>:
c0002e4a:	57                   	push   edi
c0002e4b:	89 cf                	mov    edi,ecx
c0002e4d:	56                   	push   esi
c0002e4e:	89 d6                	mov    esi,edx
c0002e50:	53                   	push   ebx
c0002e51:	89 c3                	mov    ebx,eax
c0002e53:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002e56:	85 c0                	test   eax,eax
c0002e58:	74 21                	je     c0002e7b <fill_last_frag+0x31>
c0002e5a:	89 f9                	mov    ecx,edi
c0002e5c:	83 f8 01             	cmp    eax,0x1
c0002e5f:	76 05                	jbe    c0002e66 <fill_last_frag+0x1c>
c0002e61:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002e64:	29 c1                	sub    ecx,eax
c0002e66:	8d 56 01             	lea    edx,[esi+0x1]
c0002e69:	29 c2                	sub    edx,eax
c0002e6b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002e6d:	e8 42 fe ff ff       	call   c0002cb4 <put_fat>
c0002e72:	85 c0                	test   eax,eax
c0002e74:	75 05                	jne    c0002e7b <fill_last_frag+0x31>
c0002e76:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002e79:	eb d8                	jmp    c0002e53 <fill_last_frag+0x9>
c0002e7b:	5b                   	pop    ebx
c0002e7c:	5e                   	pop    esi
c0002e7d:	5f                   	pop    edi
c0002e7e:	c3                   	ret    

c0002e7f <fill_first_frag>:
c0002e7f:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002e83:	75 2d                	jne    c0002eb2 <fill_first_frag+0x33>
c0002e85:	57                   	push   edi
c0002e86:	56                   	push   esi
c0002e87:	53                   	push   ebx
c0002e88:	89 c3                	mov    ebx,eax
c0002e8a:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002e8d:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002e90:	01 d7                	add    edi,edx
c0002e92:	39 fa                	cmp    edx,edi
c0002e94:	74 14                	je     c0002eaa <fill_first_frag+0x2b>
c0002e96:	8d 72 01             	lea    esi,[edx+0x1]
c0002e99:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002e9b:	89 f1                	mov    ecx,esi
c0002e9d:	e8 12 fe ff ff       	call   c0002cb4 <put_fat>
c0002ea2:	89 f2                	mov    edx,esi
c0002ea4:	85 c0                	test   eax,eax
c0002ea6:	74 ea                	je     c0002e92 <fill_first_frag+0x13>
c0002ea8:	eb 0b                	jmp    c0002eb5 <fill_first_frag+0x36>
c0002eaa:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002eae:	31 c0                	xor    eax,eax
c0002eb0:	eb 03                	jmp    c0002eb5 <fill_first_frag+0x36>
c0002eb2:	31 c0                	xor    eax,eax
c0002eb4:	c3                   	ret    
c0002eb5:	5b                   	pop    ebx
c0002eb6:	5e                   	pop    esi
c0002eb7:	5f                   	pop    edi
c0002eb8:	c3                   	ret    

c0002eb9 <get_fat>:
c0002eb9:	83 fa 01             	cmp    edx,0x1
c0002ebc:	0f 86 db 01 00 00    	jbe    c000309d <get_fat+0x1e4>
c0002ec2:	55                   	push   ebp
c0002ec3:	b9 01 00 00 00       	mov    ecx,0x1
c0002ec8:	57                   	push   edi
c0002ec9:	56                   	push   esi
c0002eca:	53                   	push   ebx
c0002ecb:	83 ec 1c             	sub    esp,0x1c
c0002ece:	8b 38                	mov    edi,DWORD PTR [eax]
c0002ed0:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002ed3:	0f 86 cc 01 00 00    	jbe    c00030a5 <get_fat+0x1ec>
c0002ed9:	89 c3                	mov    ebx,eax
c0002edb:	89 d6                	mov    esi,edx
c0002edd:	8a 07                	mov    al,BYTE PTR [edi]
c0002edf:	3c 02                	cmp    al,0x2
c0002ee1:	0f 84 99 00 00 00    	je     c0002f80 <get_fat+0xc7>
c0002ee7:	77 09                	ja     c0002ef2 <get_fat+0x39>
c0002ee9:	fe c8                	dec    al
c0002eeb:	74 1a                	je     c0002f07 <get_fat+0x4e>
c0002eed:	e9 b3 01 00 00       	jmp    c00030a5 <get_fat+0x1ec>
c0002ef2:	3c 03                	cmp    al,0x3
c0002ef4:	0f 84 b5 00 00 00    	je     c0002faf <get_fat+0xf6>
c0002efa:	3c 04                	cmp    al,0x4
c0002efc:	0f 84 e3 00 00 00    	je     c0002fe5 <get_fat+0x12c>
c0002f02:	e9 9e 01 00 00       	jmp    c00030a5 <get_fat+0x1ec>
c0002f07:	89 d3                	mov    ebx,edx
c0002f09:	31 c9                	xor    ecx,ecx
c0002f0b:	d1 eb                	shr    ebx,1
c0002f0d:	89 f8                	mov    eax,edi
c0002f0f:	01 d3                	add    ebx,edx
c0002f11:	89 da                	mov    edx,ebx
c0002f13:	c1 ea 09             	shr    edx,0x9
c0002f16:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f19:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f1c:	e8 10 f4 ff ff       	call   c0002331 <move_window>
c0002f21:	85 c0                	test   eax,eax
c0002f23:	74 08                	je     c0002f2d <get_fat+0x74>
c0002f25:	83 c9 ff             	or     ecx,0xffffffff
c0002f28:	e9 78 01 00 00       	jmp    c00030a5 <get_fat+0x1ec>
c0002f2d:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002f30:	31 c9                	xor    ecx,ecx
c0002f32:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002f38:	89 ea                	mov    edx,ebp
c0002f3a:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002f3e:	c1 ea 09             	shr    edx,0x9
c0002f41:	89 f8                	mov    eax,edi
c0002f43:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f46:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f49:	e8 e3 f3 ff ff       	call   c0002331 <move_window>
c0002f4e:	85 c0                	test   eax,eax
c0002f50:	75 d3                	jne    c0002f25 <get_fat+0x6c>
c0002f52:	0f b6 c3             	movzx  eax,bl
c0002f55:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002f5b:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002f60:	c1 e3 08             	shl    ebx,0x8
c0002f63:	09 c3                	or     ebx,eax
c0002f65:	89 d9                	mov    ecx,ebx
c0002f67:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002f6d:	83 e6 01             	and    esi,0x1
c0002f70:	0f 84 2f 01 00 00    	je     c00030a5 <get_fat+0x1ec>
c0002f76:	89 d9                	mov    ecx,ebx
c0002f78:	c1 e9 04             	shr    ecx,0x4
c0002f7b:	e9 25 01 00 00       	jmp    c00030a5 <get_fat+0x1ec>
c0002f80:	31 c9                	xor    ecx,ecx
c0002f82:	c1 ea 08             	shr    edx,0x8
c0002f85:	89 f8                	mov    eax,edi
c0002f87:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f8a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f8d:	e8 9f f3 ff ff       	call   c0002331 <move_window>
c0002f92:	85 c0                	test   eax,eax
c0002f94:	75 8f                	jne    c0002f25 <get_fat+0x6c>
c0002f96:	01 f6                	add    esi,esi
c0002f98:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002f9e:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fa2:	e8 ac eb ff ff       	call   c0001b53 <ld_word>
c0002fa7:	0f b7 c8             	movzx  ecx,ax
c0002faa:	e9 f6 00 00 00       	jmp    c00030a5 <get_fat+0x1ec>
c0002faf:	31 c9                	xor    ecx,ecx
c0002fb1:	c1 ea 07             	shr    edx,0x7
c0002fb4:	89 f8                	mov    eax,edi
c0002fb6:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fb9:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002fbc:	e8 70 f3 ff ff       	call   c0002331 <move_window>
c0002fc1:	85 c0                	test   eax,eax
c0002fc3:	0f 85 5c ff ff ff    	jne    c0002f25 <get_fat+0x6c>
c0002fc9:	c1 e6 02             	shl    esi,0x2
c0002fcc:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002fd2:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fd6:	e8 85 eb ff ff       	call   c0001b60 <ld_dword>
c0002fdb:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002fe0:	e9 b4 00 00 00       	jmp    c0003099 <get_fat+0x1e0>
c0002fe5:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002fe8:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002feb:	89 d1                	mov    ecx,edx
c0002fed:	09 c1                	or     ecx,eax
c0002fef:	74 06                	je     c0002ff7 <get_fat+0x13e>
c0002ff1:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002ff5:	75 0f                	jne    c0003006 <get_fat+0x14d>
c0002ff7:	b9 01 00 00 00       	mov    ecx,0x1
c0002ffc:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0003000:	0f 85 9f 00 00 00    	jne    c00030a5 <get_fat+0x1ec>
c0003006:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c000300a:	89 f5                	mov    ebp,esi
c000300c:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0003011:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0003014:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0003017:	80 f9 02             	cmp    cl,0x2
c000301a:	75 35                	jne    c0003051 <get_fat+0x198>
c000301c:	83 c0 ff             	add    eax,0xffffffff
c000301f:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0003024:	83 d2 ff             	adc    edx,0xffffffff
c0003027:	31 db                	xor    ebx,ebx
c0003029:	0f ac d0 09          	shrd   eax,edx,0x9
c000302d:	53                   	push   ebx
c000302e:	c1 ea 09             	shr    edx,0x9
c0003031:	51                   	push   ecx
c0003032:	52                   	push   edx
c0003033:	50                   	push   eax
c0003034:	e8 e7 f6 01 00       	call   c0022720 <__udivdi3>
c0003039:	83 c4 10             	add    esp,0x10
c000303c:	b9 01 00 00 00       	mov    ecx,0x1
c0003041:	39 c5                	cmp    ebp,eax
c0003043:	77 60                	ja     c00030a5 <get_fat+0x1ec>
c0003045:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000304a:	74 59                	je     c00030a5 <get_fat+0x1ec>
c000304c:	8d 4e 01             	lea    ecx,[esi+0x1]
c000304f:	eb 54                	jmp    c00030a5 <get_fat+0x1ec>
c0003051:	80 f9 03             	cmp    cl,0x3
c0003054:	75 05                	jne    c000305b <get_fat+0x1a2>
c0003056:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003059:	77 f1                	ja     c000304c <get_fat+0x193>
c000305b:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003060:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003064:	75 3f                	jne    c00030a5 <get_fat+0x1ec>
c0003066:	31 c9                	xor    ecx,ecx
c0003068:	89 f2                	mov    edx,esi
c000306a:	89 f8                	mov    eax,edi
c000306c:	c1 ea 07             	shr    edx,0x7
c000306f:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003072:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003075:	e8 b7 f2 ff ff       	call   c0002331 <move_window>
c000307a:	85 c0                	test   eax,eax
c000307c:	0f 85 a3 fe ff ff    	jne    c0002f25 <get_fat+0x6c>
c0003082:	c1 e6 02             	shl    esi,0x2
c0003085:	81 e6 fc 01 00 00    	and    esi,0x1fc
c000308b:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000308f:	e8 cc ea ff ff       	call   c0001b60 <ld_dword>
c0003094:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0003099:	89 c1                	mov    ecx,eax
c000309b:	eb 08                	jmp    c00030a5 <get_fat+0x1ec>
c000309d:	b9 01 00 00 00       	mov    ecx,0x1
c00030a2:	89 c8                	mov    eax,ecx
c00030a4:	c3                   	ret    
c00030a5:	83 c4 1c             	add    esp,0x1c
c00030a8:	89 c8                	mov    eax,ecx
c00030aa:	5b                   	pop    ebx
c00030ab:	5e                   	pop    esi
c00030ac:	5f                   	pop    edi
c00030ad:	5d                   	pop    ebp
c00030ae:	c3                   	ret    

c00030af <dir_sdi>:
c00030af:	55                   	push   ebp
c00030b0:	57                   	push   edi
c00030b1:	56                   	push   esi
c00030b2:	53                   	push   ebx
c00030b3:	89 c3                	mov    ebx,eax
c00030b5:	83 ec 1c             	sub    esp,0x1c
c00030b8:	8b 38                	mov    edi,DWORD PTR [eax]
c00030ba:	31 c0                	xor    eax,eax
c00030bc:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00030bf:	0f 94 c0             	sete   al
c00030c2:	48                   	dec    eax
c00030c3:	25 00 00 20 f0       	and    eax,0xf0200000
c00030c8:	05 00 00 00 10       	add    eax,0x10000000
c00030cd:	39 d0                	cmp    eax,edx
c00030cf:	77 0a                	ja     c00030db <dir_sdi+0x2c>
c00030d1:	b8 02 00 00 00       	mov    eax,0x2
c00030d6:	e9 c4 00 00 00       	jmp    c000319f <dir_sdi+0xf0>
c00030db:	89 d6                	mov    esi,edx
c00030dd:	f6 c2 1f             	test   dl,0x1f
c00030e0:	75 ef                	jne    c00030d1 <dir_sdi+0x22>
c00030e2:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00030e5:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00030e8:	85 c9                	test   ecx,ecx
c00030ea:	75 2d                	jne    c0003119 <dir_sdi+0x6a>
c00030ec:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00030ef:	77 1b                	ja     c000310c <dir_sdi+0x5d>
c00030f1:	89 f2                	mov    edx,esi
c00030f3:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00030f7:	c1 ea 05             	shr    edx,0x5
c00030fa:	39 c2                	cmp    edx,eax
c00030fc:	73 d3                	jae    c00030d1 <dir_sdi+0x22>
c00030fe:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003101:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0003104:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003107:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000310a:	eb 4b                	jmp    c0003157 <dir_sdi+0xa8>
c000310c:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000310f:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003113:	85 c0                	test   eax,eax
c0003115:	74 da                	je     c00030f1 <dir_sdi+0x42>
c0003117:	89 c1                	mov    ecx,eax
c0003119:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000311d:	c1 e5 09             	shl    ebp,0x9
c0003120:	89 ca                	mov    edx,ecx
c0003122:	39 ee                	cmp    esi,ebp
c0003124:	72 1c                	jb     c0003142 <dir_sdi+0x93>
c0003126:	89 d8                	mov    eax,ebx
c0003128:	e8 8c fd ff ff       	call   c0002eb9 <get_fat>
c000312d:	89 c1                	mov    ecx,eax
c000312f:	83 f8 ff             	cmp    eax,0xffffffff
c0003132:	74 66                	je     c000319a <dir_sdi+0xeb>
c0003134:	83 f8 01             	cmp    eax,0x1
c0003137:	76 98                	jbe    c00030d1 <dir_sdi+0x22>
c0003139:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c000313c:	76 93                	jbe    c00030d1 <dir_sdi+0x22>
c000313e:	29 ee                	sub    esi,ebp
c0003140:	eb de                	jmp    c0003120 <dir_sdi+0x71>
c0003142:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003146:	89 f8                	mov    eax,edi
c0003148:	e8 9f ec ff ff       	call   c0001dec <clst2sect>
c000314d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003151:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003154:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003157:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000315a:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000315d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003160:	89 d1                	mov    ecx,edx
c0003162:	09 c1                	or     ecx,eax
c0003164:	0f 84 67 ff ff ff    	je     c00030d1 <dir_sdi+0x22>
c000316a:	89 f1                	mov    ecx,esi
c000316c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003174:	c1 e9 09             	shr    ecx,0x9
c0003177:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000317b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000317f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003183:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003186:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000318c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000318f:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003193:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003196:	31 c0                	xor    eax,eax
c0003198:	eb 05                	jmp    c000319f <dir_sdi+0xf0>
c000319a:	b8 01 00 00 00       	mov    eax,0x1
c000319f:	83 c4 1c             	add    esp,0x1c
c00031a2:	5b                   	pop    ebx
c00031a3:	5e                   	pop    esi
c00031a4:	5f                   	pop    edi
c00031a5:	5d                   	pop    ebp
c00031a6:	c3                   	ret    

c00031a7 <create_chain>:
c00031a7:	55                   	push   ebp
c00031a8:	89 c5                	mov    ebp,eax
c00031aa:	57                   	push   edi
c00031ab:	56                   	push   esi
c00031ac:	53                   	push   ebx
c00031ad:	83 ec 1c             	sub    esp,0x1c
c00031b0:	85 d2                	test   edx,edx
c00031b2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00031b6:	8b 30                	mov    esi,DWORD PTR [eax]
c00031b8:	75 0e                	jne    c00031c8 <create_chain+0x21>
c00031ba:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00031bd:	85 ff                	test   edi,edi
c00031bf:	74 39                	je     c00031fa <create_chain+0x53>
c00031c1:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00031c4:	77 39                	ja     c00031ff <create_chain+0x58>
c00031c6:	eb 32                	jmp    c00031fa <create_chain+0x53>
c00031c8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031cc:	e8 e8 fc ff ff       	call   c0002eb9 <get_fat>
c00031d1:	89 c3                	mov    ebx,eax
c00031d3:	83 f8 01             	cmp    eax,0x1
c00031d6:	77 0a                	ja     c00031e2 <create_chain+0x3b>
c00031d8:	bb 01 00 00 00       	mov    ebx,0x1
c00031dd:	e9 ba 01 00 00       	jmp    c000339c <create_chain+0x1f5>
c00031e2:	83 f8 ff             	cmp    eax,0xffffffff
c00031e5:	0f 84 62 01 00 00    	je     c000334d <create_chain+0x1a6>
c00031eb:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00031ee:	0f 87 a8 01 00 00    	ja     c000339c <create_chain+0x1f5>
c00031f4:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00031f8:	eb 05                	jmp    c00031ff <create_chain+0x58>
c00031fa:	bf 01 00 00 00       	mov    edi,0x1
c00031ff:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003203:	75 07                	jne    c000320c <create_chain+0x65>
c0003205:	31 db                	xor    ebx,ebx
c0003207:	e9 90 01 00 00       	jmp    c000339c <create_chain+0x1f5>
c000320c:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000320f:	75 74                	jne    c0003285 <create_chain+0xde>
c0003211:	b9 01 00 00 00       	mov    ecx,0x1
c0003216:	89 fa                	mov    edx,edi
c0003218:	89 f0                	mov    eax,esi
c000321a:	e8 2d f9 ff ff       	call   c0002b4c <find_bitmap>
c000321f:	89 c3                	mov    ebx,eax
c0003221:	8d 40 ff             	lea    eax,[eax-0x1]
c0003224:	83 f8 fd             	cmp    eax,0xfffffffd
c0003227:	0f 87 6f 01 00 00    	ja     c000339c <create_chain+0x1f5>
c000322d:	83 ec 0c             	sub    esp,0xc
c0003230:	b9 01 00 00 00       	mov    ecx,0x1
c0003235:	6a 01                	push   0x1
c0003237:	89 da                	mov    edx,ebx
c0003239:	89 f0                	mov    eax,esi
c000323b:	e8 bf f9 ff ff       	call   c0002bff <change_bitmap>
c0003240:	83 c4 10             	add    esp,0x10
c0003243:	83 f8 02             	cmp    eax,0x2
c0003246:	74 90                	je     c00031d8 <create_chain+0x31>
c0003248:	83 f8 01             	cmp    eax,0x1
c000324b:	0f 84 fc 00 00 00    	je     c000334d <create_chain+0x1a6>
c0003251:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003256:	75 09                	jne    c0003261 <create_chain+0xba>
c0003258:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000325c:	e9 0c 01 00 00       	jmp    c000336d <create_chain+0x1c6>
c0003261:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003265:	0f 85 e7 00 00 00    	jne    c0003352 <create_chain+0x1ab>
c000326b:	8d 57 01             	lea    edx,[edi+0x1]
c000326e:	39 da                	cmp    edx,ebx
c0003270:	0f 84 f7 00 00 00    	je     c000336d <create_chain+0x1c6>
c0003276:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003279:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000327d:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003280:	e9 cd 00 00 00       	jmp    c0003352 <create_chain+0x1ab>
c0003285:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003289:	75 41                	jne    c00032cc <create_chain+0x125>
c000328b:	8d 5f 01             	lea    ebx,[edi+0x1]
c000328e:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003291:	77 05                	ja     c0003298 <create_chain+0xf1>
c0003293:	bb 02 00 00 00       	mov    ebx,0x2
c0003298:	89 da                	mov    edx,ebx
c000329a:	89 e8                	mov    eax,ebp
c000329c:	e8 18 fc ff ff       	call   c0002eb9 <get_fat>
c00032a1:	83 f8 01             	cmp    eax,0x1
c00032a4:	0f 84 2e ff ff ff    	je     c00031d8 <create_chain+0x31>
c00032aa:	83 f8 ff             	cmp    eax,0xffffffff
c00032ad:	0f 84 9a 00 00 00    	je     c000334d <create_chain+0x1a6>
c00032b3:	85 c0                	test   eax,eax
c00032b5:	74 11                	je     c00032c8 <create_chain+0x121>
c00032b7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00032ba:	83 f8 01             	cmp    eax,0x1
c00032bd:	76 0d                	jbe    c00032cc <create_chain+0x125>
c00032bf:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032c2:	76 08                	jbe    c00032cc <create_chain+0x125>
c00032c4:	89 c7                	mov    edi,eax
c00032c6:	eb 04                	jmp    c00032cc <create_chain+0x125>
c00032c8:	85 db                	test   ebx,ebx
c00032ca:	75 38                	jne    c0003304 <create_chain+0x15d>
c00032cc:	89 fb                	mov    ebx,edi
c00032ce:	43                   	inc    ebx
c00032cf:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00032d2:	77 0e                	ja     c00032e2 <create_chain+0x13b>
c00032d4:	83 ff 01             	cmp    edi,0x1
c00032d7:	0f 86 28 ff ff ff    	jbe    c0003205 <create_chain+0x5e>
c00032dd:	bb 02 00 00 00       	mov    ebx,0x2
c00032e2:	89 da                	mov    edx,ebx
c00032e4:	89 e8                	mov    eax,ebp
c00032e6:	e8 ce fb ff ff       	call   c0002eb9 <get_fat>
c00032eb:	85 c0                	test   eax,eax
c00032ed:	74 15                	je     c0003304 <create_chain+0x15d>
c00032ef:	83 f8 01             	cmp    eax,0x1
c00032f2:	0f 84 e0 fe ff ff    	je     c00031d8 <create_chain+0x31>
c00032f8:	40                   	inc    eax
c00032f9:	74 52                	je     c000334d <create_chain+0x1a6>
c00032fb:	39 fb                	cmp    ebx,edi
c00032fd:	75 cf                	jne    c00032ce <create_chain+0x127>
c00032ff:	e9 01 ff ff ff       	jmp    c0003205 <create_chain+0x5e>
c0003304:	83 c9 ff             	or     ecx,0xffffffff
c0003307:	89 da                	mov    edx,ebx
c0003309:	89 f0                	mov    eax,esi
c000330b:	e8 a4 f9 ff ff       	call   c0002cb4 <put_fat>
c0003310:	85 c0                	test   eax,eax
c0003312:	75 32                	jne    c0003346 <create_chain+0x19f>
c0003314:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003319:	74 11                	je     c000332c <create_chain+0x185>
c000331b:	89 d9                	mov    ecx,ebx
c000331d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003321:	89 f0                	mov    eax,esi
c0003323:	e8 8c f9 ff ff       	call   c0002cb4 <put_fat>
c0003328:	85 c0                	test   eax,eax
c000332a:	75 1a                	jne    c0003346 <create_chain+0x19f>
c000332c:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000332f:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003332:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003335:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003338:	39 d0                	cmp    eax,edx
c000333a:	77 04                	ja     c0003340 <create_chain+0x199>
c000333c:	48                   	dec    eax
c000333d:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003340:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003344:	eb 56                	jmp    c000339c <create_chain+0x1f5>
c0003346:	48                   	dec    eax
c0003347:	0f 85 8b fe ff ff    	jne    c00031d8 <create_chain+0x31>
c000334d:	83 cb ff             	or     ebx,0xffffffff
c0003350:	eb 4a                	jmp    c000339c <create_chain+0x1f5>
c0003352:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003356:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003359:	41                   	inc    ecx
c000335a:	39 d9                	cmp    ecx,ebx
c000335c:	75 19                	jne    c0003377 <create_chain+0x1d0>
c000335e:	b9 02 00 00 00       	mov    ecx,0x2
c0003363:	85 d2                	test   edx,edx
c0003365:	74 03                	je     c000336a <create_chain+0x1c3>
c0003367:	8d 4a 01             	lea    ecx,[edx+0x1]
c000336a:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000336d:	85 c0                	test   eax,eax
c000336f:	0f 85 63 fe ff ff    	jne    c00031d8 <create_chain+0x31>
c0003375:	eb b5                	jmp    c000332c <create_chain+0x185>
c0003377:	85 d2                	test   edx,edx
c0003379:	75 07                	jne    c0003382 <create_chain+0x1db>
c000337b:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003382:	89 d9                	mov    ecx,ebx
c0003384:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003388:	89 e8                	mov    eax,ebp
c000338a:	e8 bb fa ff ff       	call   c0002e4a <fill_last_frag>
c000338f:	85 c0                	test   eax,eax
c0003391:	75 b3                	jne    c0003346 <create_chain+0x19f>
c0003393:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000339a:	eb 90                	jmp    c000332c <create_chain+0x185>
c000339c:	83 c4 1c             	add    esp,0x1c
c000339f:	89 d8                	mov    eax,ebx
c00033a1:	5b                   	pop    ebx
c00033a2:	5e                   	pop    esi
c00033a3:	5f                   	pop    edi
c00033a4:	5d                   	pop    ebp
c00033a5:	c3                   	ret    

c00033a6 <remove_chain>:
c00033a6:	55                   	push   ebp
c00033a7:	57                   	push   edi
c00033a8:	56                   	push   esi
c00033a9:	53                   	push   ebx
c00033aa:	83 ec 1c             	sub    esp,0x1c
c00033ad:	83 fa 01             	cmp    edx,0x1
c00033b0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00033b4:	8b 18                	mov    ebx,DWORD PTR [eax]
c00033b6:	77 0a                	ja     c00033c2 <remove_chain+0x1c>
c00033b8:	b8 02 00 00 00       	mov    eax,0x2
c00033bd:	e9 24 01 00 00       	jmp    c00034e6 <remove_chain+0x140>
c00033c2:	89 d6                	mov    esi,edx
c00033c4:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00033c7:	76 ef                	jbe    c00033b8 <remove_chain+0x12>
c00033c9:	89 c7                	mov    edi,eax
c00033cb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00033d0:	75 06                	jne    c00033d8 <remove_chain+0x32>
c00033d2:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00033d6:	eb 54                	jmp    c000342c <remove_chain+0x86>
c00033d8:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00033db:	75 06                	jne    c00033e3 <remove_chain+0x3d>
c00033dd:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00033e1:	74 ef                	je     c00033d2 <remove_chain+0x2c>
c00033e3:	83 c9 ff             	or     ecx,0xffffffff
c00033e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00033ea:	89 d8                	mov    eax,ebx
c00033ec:	e8 c3 f8 ff ff       	call   c0002cb4 <put_fat>
c00033f1:	85 c0                	test   eax,eax
c00033f3:	74 dd                	je     c00033d2 <remove_chain+0x2c>
c00033f5:	e9 ec 00 00 00       	jmp    c00034e6 <remove_chain+0x140>
c00033fa:	83 f8 01             	cmp    eax,0x1
c00033fd:	74 b9                	je     c00033b8 <remove_chain+0x12>
c00033ff:	83 f8 ff             	cmp    eax,0xffffffff
c0003402:	74 6d                	je     c0003471 <remove_chain+0xcb>
c0003404:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003407:	75 6f                	jne    c0003478 <remove_chain+0xd2>
c0003409:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000340c:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000340f:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003412:	39 d0                	cmp    eax,edx
c0003414:	73 08                	jae    c000341e <remove_chain+0x78>
c0003416:	40                   	inc    eax
c0003417:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000341b:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000341e:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003421:	39 e9                	cmp    ecx,ebp
c0003423:	75 64                	jne    c0003489 <remove_chain+0xe3>
c0003425:	89 ee                	mov    esi,ebp
c0003427:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c000342a:	76 0f                	jbe    c000343b <remove_chain+0x95>
c000342c:	89 f2                	mov    edx,esi
c000342e:	89 f8                	mov    eax,edi
c0003430:	e8 84 fa ff ff       	call   c0002eb9 <get_fat>
c0003435:	89 c5                	mov    ebp,eax
c0003437:	85 c0                	test   eax,eax
c0003439:	75 bf                	jne    c00033fa <remove_chain+0x54>
c000343b:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000343e:	0f 85 a0 00 00 00    	jne    c00034e4 <remove_chain+0x13e>
c0003444:	eb 6c                	jmp    c00034b2 <remove_chain+0x10c>
c0003446:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003449:	84 c0                	test   al,al
c000344b:	75 7d                	jne    c00034ca <remove_chain+0x124>
c000344d:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003450:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003454:	0f 84 86 00 00 00    	je     c00034e0 <remove_chain+0x13a>
c000345a:	89 da                	mov    edx,ebx
c000345c:	89 f8                	mov    eax,edi
c000345e:	e8 56 fa ff ff       	call   c0002eb9 <get_fat>
c0003463:	83 f8 01             	cmp    eax,0x1
c0003466:	0f 86 4c ff ff ff    	jbe    c00033b8 <remove_chain+0x12>
c000346c:	83 f8 ff             	cmp    eax,0xffffffff
c000346f:	75 4e                	jne    c00034bf <remove_chain+0x119>
c0003471:	b8 01 00 00 00       	mov    eax,0x1
c0003476:	eb 6e                	jmp    c00034e6 <remove_chain+0x140>
c0003478:	31 c9                	xor    ecx,ecx
c000347a:	89 f2                	mov    edx,esi
c000347c:	89 d8                	mov    eax,ebx
c000347e:	e8 31 f8 ff ff       	call   c0002cb4 <put_fat>
c0003483:	85 c0                	test   eax,eax
c0003485:	74 82                	je     c0003409 <remove_chain+0x63>
c0003487:	eb 5d                	jmp    c00034e6 <remove_chain+0x140>
c0003489:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000348c:	75 1b                	jne    c00034a9 <remove_chain+0x103>
c000348e:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003492:	89 d8                	mov    eax,ebx
c0003494:	83 ec 0c             	sub    esp,0xc
c0003497:	6a 00                	push   0x0
c0003499:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000349d:	e8 5d f7 ff ff       	call   c0002bff <change_bitmap>
c00034a2:	83 c4 10             	add    esp,0x10
c00034a5:	85 c0                	test   eax,eax
c00034a7:	75 3d                	jne    c00034e6 <remove_chain+0x140>
c00034a9:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00034ad:	e9 73 ff ff ff       	jmp    c0003425 <remove_chain+0x7f>
c00034b2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034b7:	75 8d                	jne    c0003446 <remove_chain+0xa0>
c00034b9:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00034bd:	eb 25                	jmp    c00034e4 <remove_chain+0x13e>
c00034bf:	8d 53 01             	lea    edx,[ebx+0x1]
c00034c2:	89 c3                	mov    ebx,eax
c00034c4:	39 c2                	cmp    edx,eax
c00034c6:	74 88                	je     c0003450 <remove_chain+0xaa>
c00034c8:	eb 1a                	jmp    c00034e4 <remove_chain+0x13e>
c00034ca:	3c 03                	cmp    al,0x3
c00034cc:	75 16                	jne    c00034e4 <remove_chain+0x13e>
c00034ce:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00034d1:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034d5:	77 0d                	ja     c00034e4 <remove_chain+0x13e>
c00034d7:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00034da:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034de:	72 04                	jb     c00034e4 <remove_chain+0x13e>
c00034e0:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00034e4:	31 c0                	xor    eax,eax
c00034e6:	83 c4 1c             	add    esp,0x1c
c00034e9:	5b                   	pop    ebx
c00034ea:	5e                   	pop    esi
c00034eb:	5f                   	pop    edi
c00034ec:	5d                   	pop    ebp
c00034ed:	c3                   	ret    

c00034ee <dir_clear>:
c00034ee:	55                   	push   ebp
c00034ef:	57                   	push   edi
c00034f0:	56                   	push   esi
c00034f1:	89 c6                	mov    esi,eax
c00034f3:	53                   	push   ebx
c00034f4:	83 ec 1c             	sub    esp,0x1c
c00034f7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00034fb:	e8 9d ed ff ff       	call   c000229d <sync_window>
c0003500:	85 c0                	test   eax,eax
c0003502:	0f 85 de 00 00 00    	jne    c00035e6 <dir_clear+0xf8>
c0003508:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000350c:	89 f0                	mov    eax,esi
c000350e:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003511:	e8 d6 e8 ff ff       	call   c0001dec <clst2sect>
c0003516:	b9 00 02 00 00       	mov    ecx,0x200
c000351b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000351f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003523:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003526:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003529:	89 e8                	mov    eax,ebp
c000352b:	31 d2                	xor    edx,edx
c000352d:	e8 b5 e6 ff ff       	call   c0001be7 <mem_set>
c0003532:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003536:	c1 e3 09             	shl    ebx,0x9
c0003539:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000353f:	76 1f                	jbe    c0003560 <dir_clear+0x72>
c0003541:	bb 00 80 00 00       	mov    ebx,0x8000
c0003546:	eb 18                	jmp    c0003560 <dir_clear+0x72>
c0003548:	83 ec 0c             	sub    esp,0xc
c000354b:	53                   	push   ebx
c000354c:	e8 6b 50 00 00       	call   c00085bc <ff_memalloc>
c0003551:	83 c4 10             	add    esp,0x10
c0003554:	89 c7                	mov    edi,eax
c0003556:	85 c0                	test   eax,eax
c0003558:	0f 85 8f 00 00 00    	jne    c00035ed <dir_clear+0xff>
c000355e:	d1 eb                	shr    ebx,1
c0003560:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003566:	77 e0                	ja     c0003548 <dir_clear+0x5a>
c0003568:	31 db                	xor    ebx,ebx
c000356a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000356e:	39 d8                	cmp    eax,ebx
c0003570:	76 66                	jbe    c00035d8 <dir_clear+0xea>
c0003572:	83 ec 0c             	sub    esp,0xc
c0003575:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003579:	6a 01                	push   0x1
c000357b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000357f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003583:	55                   	push   ebp
c0003584:	50                   	push   eax
c0003585:	e8 94 e5 ff ff       	call   c0001b1e <disk_write>
c000358a:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000358f:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003594:	83 c4 20             	add    esp,0x20
c0003597:	85 c0                	test   eax,eax
c0003599:	75 3d                	jne    c00035d8 <dir_clear+0xea>
c000359b:	43                   	inc    ebx
c000359c:	eb cc                	jmp    c000356a <dir_clear+0x7c>
c000359e:	83 ec 0c             	sub    esp,0xc
c00035a1:	31 d2                	xor    edx,edx
c00035a3:	55                   	push   ebp
c00035a4:	89 d8                	mov    eax,ebx
c00035a6:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00035aa:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00035ae:	52                   	push   edx
c00035af:	50                   	push   eax
c00035b0:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00035b4:	57                   	push   edi
c00035b5:	50                   	push   eax
c00035b6:	e8 63 e5 ff ff       	call   c0001b1e <disk_write>
c00035bb:	83 c4 20             	add    esp,0x20
c00035be:	85 c0                	test   eax,eax
c00035c0:	75 0a                	jne    c00035cc <dir_clear+0xde>
c00035c2:	01 eb                	add    ebx,ebp
c00035c4:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035c8:	39 d8                	cmp    eax,ebx
c00035ca:	77 d2                	ja     c000359e <dir_clear+0xb0>
c00035cc:	83 ec 0c             	sub    esp,0xc
c00035cf:	57                   	push   edi
c00035d0:	e8 ff 4f 00 00       	call   c00085d4 <ff_memfree>
c00035d5:	83 c4 10             	add    esp,0x10
c00035d8:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035dc:	39 d8                	cmp    eax,ebx
c00035de:	0f 95 c0             	setne  al
c00035e1:	0f b6 c0             	movzx  eax,al
c00035e4:	eb 19                	jmp    c00035ff <dir_clear+0x111>
c00035e6:	b8 01 00 00 00       	mov    eax,0x1
c00035eb:	eb 12                	jmp    c00035ff <dir_clear+0x111>
c00035ed:	89 d9                	mov    ecx,ebx
c00035ef:	31 d2                	xor    edx,edx
c00035f1:	c1 eb 09             	shr    ebx,0x9
c00035f4:	e8 ee e5 ff ff       	call   c0001be7 <mem_set>
c00035f9:	89 dd                	mov    ebp,ebx
c00035fb:	31 db                	xor    ebx,ebx
c00035fd:	eb c5                	jmp    c00035c4 <dir_clear+0xd6>
c00035ff:	83 c4 1c             	add    esp,0x1c
c0003602:	5b                   	pop    ebx
c0003603:	5e                   	pop    esi
c0003604:	5f                   	pop    edi
c0003605:	5d                   	pop    ebp
c0003606:	c3                   	ret    

c0003607 <dir_next>:
c0003607:	55                   	push   ebp
c0003608:	57                   	push   edi
c0003609:	56                   	push   esi
c000360a:	53                   	push   ebx
c000360b:	89 c3                	mov    ebx,eax
c000360d:	83 ec 1c             	sub    esp,0x1c
c0003610:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003612:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003616:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003619:	8d 78 20             	lea    edi,[eax+0x20]
c000361c:	31 c0                	xor    eax,eax
c000361e:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003622:	0f 94 c0             	sete   al
c0003625:	48                   	dec    eax
c0003626:	25 00 00 20 f0       	and    eax,0xf0200000
c000362b:	05 00 00 00 10       	add    eax,0x10000000
c0003630:	39 f8                	cmp    eax,edi
c0003632:	77 0e                	ja     c0003642 <dir_next+0x3b>
c0003634:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000363b:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003642:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003645:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003648:	b8 04 00 00 00       	mov    eax,0x4
c000364d:	89 ce                	mov    esi,ecx
c000364f:	09 d6                	or     esi,edx
c0003651:	0f 84 da 00 00 00    	je     c0003731 <dir_next+0x12a>
c0003657:	89 f8                	mov    eax,edi
c0003659:	25 ff 01 00 00       	and    eax,0x1ff
c000365e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003662:	0f 85 b9 00 00 00    	jne    c0003721 <dir_next+0x11a>
c0003668:	83 c2 01             	add    edx,0x1
c000366b:	83 d1 00             	adc    ecx,0x0
c000366e:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003671:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003674:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003677:	85 d2                	test   edx,edx
c0003679:	75 29                	jne    c00036a4 <dir_next+0x9d>
c000367b:	89 fa                	mov    edx,edi
c000367d:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003681:	c1 ea 05             	shr    edx,0x5
c0003684:	39 c2                	cmp    edx,eax
c0003686:	0f 82 95 00 00 00    	jb     c0003721 <dir_next+0x11a>
c000368c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003693:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000369a:	b8 04 00 00 00       	mov    eax,0x4
c000369f:	e9 8d 00 00 00       	jmp    c0003731 <dir_next+0x12a>
c00036a4:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00036a8:	89 f9                	mov    ecx,edi
c00036aa:	48                   	dec    eax
c00036ab:	c1 e9 09             	shr    ecx,0x9
c00036ae:	85 c8                	test   eax,ecx
c00036b0:	75 6f                	jne    c0003721 <dir_next+0x11a>
c00036b2:	89 d8                	mov    eax,ebx
c00036b4:	e8 00 f8 ff ff       	call   c0002eb9 <get_fat>
c00036b9:	89 c6                	mov    esi,eax
c00036bb:	83 f8 01             	cmp    eax,0x1
c00036be:	77 07                	ja     c00036c7 <dir_next+0xc0>
c00036c0:	b8 02 00 00 00       	mov    eax,0x2
c00036c5:	eb 6a                	jmp    c0003731 <dir_next+0x12a>
c00036c7:	83 f8 ff             	cmp    eax,0xffffffff
c00036ca:	75 07                	jne    c00036d3 <dir_next+0xcc>
c00036cc:	b8 01 00 00 00       	mov    eax,0x1
c00036d1:	eb 5e                	jmp    c0003731 <dir_next+0x12a>
c00036d3:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00036d6:	77 37                	ja     c000370f <dir_next+0x108>
c00036d8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00036dd:	74 ad                	je     c000368c <dir_next+0x85>
c00036df:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00036e2:	89 d8                	mov    eax,ebx
c00036e4:	e8 be fa ff ff       	call   c00031a7 <create_chain>
c00036e9:	89 c6                	mov    esi,eax
c00036eb:	b8 07 00 00 00       	mov    eax,0x7
c00036f0:	85 f6                	test   esi,esi
c00036f2:	74 3d                	je     c0003731 <dir_next+0x12a>
c00036f4:	83 fe 01             	cmp    esi,0x1
c00036f7:	74 c7                	je     c00036c0 <dir_next+0xb9>
c00036f9:	83 fe ff             	cmp    esi,0xffffffff
c00036fc:	74 ce                	je     c00036cc <dir_next+0xc5>
c00036fe:	89 f2                	mov    edx,esi
c0003700:	89 e8                	mov    eax,ebp
c0003702:	e8 e7 fd ff ff       	call   c00034ee <dir_clear>
c0003707:	85 c0                	test   eax,eax
c0003709:	75 c1                	jne    c00036cc <dir_next+0xc5>
c000370b:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000370f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003712:	89 f2                	mov    edx,esi
c0003714:	89 e8                	mov    eax,ebp
c0003716:	e8 d1 e6 ff ff       	call   c0001dec <clst2sect>
c000371b:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000371e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003721:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003725:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003728:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c000372c:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000372f:	31 c0                	xor    eax,eax
c0003731:	83 c4 1c             	add    esp,0x1c
c0003734:	5b                   	pop    ebx
c0003735:	5e                   	pop    esi
c0003736:	5f                   	pop    edi
c0003737:	5d                   	pop    ebp
c0003738:	c3                   	ret    

c0003739 <load_xdir>:
c0003739:	55                   	push   ebp
c000373a:	57                   	push   edi
c000373b:	56                   	push   esi
c000373c:	89 c6                	mov    esi,eax
c000373e:	53                   	push   ebx
c000373f:	83 ec 1c             	sub    esp,0x1c
c0003742:	8b 00                	mov    eax,DWORD PTR [eax]
c0003744:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003747:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000374a:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000374d:	e8 df eb ff ff       	call   c0002331 <move_window>
c0003752:	89 c3                	mov    ebx,eax
c0003754:	85 c0                	test   eax,eax
c0003756:	0f 85 0c 01 00 00    	jne    c0003868 <load_xdir+0x12f>
c000375c:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000375f:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003762:	0f 85 fb 00 00 00    	jne    c0003863 <load_xdir+0x12a>
c0003768:	89 f8                	mov    eax,edi
c000376a:	b9 20 00 00 00       	mov    ecx,0x20
c000376f:	e8 5e e4 ff ff       	call   c0001bd2 <mem_cpy>
c0003774:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003778:	40                   	inc    eax
c0003779:	c1 e0 05             	shl    eax,0x5
c000377c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003780:	83 e8 60             	sub    eax,0x60
c0003783:	3d 00 02 00 00       	cmp    eax,0x200
c0003788:	0f 87 d5 00 00 00    	ja     c0003863 <load_xdir+0x12a>
c000378e:	31 d2                	xor    edx,edx
c0003790:	89 f0                	mov    eax,esi
c0003792:	e8 70 fe ff ff       	call   c0003607 <dir_next>
c0003797:	89 c3                	mov    ebx,eax
c0003799:	83 f8 04             	cmp    eax,0x4
c000379c:	0f 84 c1 00 00 00    	je     c0003863 <load_xdir+0x12a>
c00037a2:	85 c0                	test   eax,eax
c00037a4:	0f 85 be 00 00 00    	jne    c0003868 <load_xdir+0x12f>
c00037aa:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00037ad:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00037b0:	8b 06                	mov    eax,DWORD PTR [esi]
c00037b2:	e8 7a eb ff ff       	call   c0002331 <move_window>
c00037b7:	89 c3                	mov    ebx,eax
c00037b9:	85 c0                	test   eax,eax
c00037bb:	0f 85 a7 00 00 00    	jne    c0003868 <load_xdir+0x12f>
c00037c1:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00037c4:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00037c7:	0f 85 96 00 00 00    	jne    c0003863 <load_xdir+0x12a>
c00037cd:	8d 47 20             	lea    eax,[edi+0x20]
c00037d0:	b9 20 00 00 00       	mov    ecx,0x20
c00037d5:	e8 f8 e3 ff ff       	call   c0001bd2 <mem_cpy>
c00037da:	31 d2                	xor    edx,edx
c00037dc:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00037e0:	b9 0f 00 00 00       	mov    ecx,0xf
c00037e5:	83 c0 2c             	add    eax,0x2c
c00037e8:	f7 f1                	div    ecx
c00037ea:	c1 e0 05             	shl    eax,0x5
c00037ed:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00037f1:	77 70                	ja     c0003863 <load_xdir+0x12a>
c00037f3:	bd 40 00 00 00       	mov    ebp,0x40
c00037f8:	31 d2                	xor    edx,edx
c00037fa:	89 f0                	mov    eax,esi
c00037fc:	e8 06 fe ff ff       	call   c0003607 <dir_next>
c0003801:	89 c3                	mov    ebx,eax
c0003803:	83 f8 04             	cmp    eax,0x4
c0003806:	74 5b                	je     c0003863 <load_xdir+0x12a>
c0003808:	85 c0                	test   eax,eax
c000380a:	75 5c                	jne    c0003868 <load_xdir+0x12f>
c000380c:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000380f:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003812:	8b 06                	mov    eax,DWORD PTR [esi]
c0003814:	e8 18 eb ff ff       	call   c0002331 <move_window>
c0003819:	89 c3                	mov    ebx,eax
c000381b:	85 c0                	test   eax,eax
c000381d:	75 49                	jne    c0003868 <load_xdir+0x12f>
c000381f:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003822:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003825:	75 3c                	jne    c0003863 <load_xdir+0x12a>
c0003827:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000382d:	77 0d                	ja     c000383c <load_xdir+0x103>
c000382f:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003832:	b9 20 00 00 00       	mov    ecx,0x20
c0003837:	e8 96 e3 ff ff       	call   c0001bd2 <mem_cpy>
c000383c:	83 c5 20             	add    ebp,0x20
c000383f:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003843:	77 b3                	ja     c00037f8 <load_xdir+0xbf>
c0003845:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000384b:	77 1b                	ja     c0003868 <load_xdir+0x12f>
c000384d:	89 f8                	mov    eax,edi
c000384f:	e8 cd e7 ff ff       	call   c0002021 <xdir_sum>
c0003854:	89 c1                	mov    ecx,eax
c0003856:	8d 47 02             	lea    eax,[edi+0x2]
c0003859:	e8 f5 e2 ff ff       	call   c0001b53 <ld_word>
c000385e:	66 39 c1             	cmp    cx,ax
c0003861:	74 05                	je     c0003868 <load_xdir+0x12f>
c0003863:	bb 02 00 00 00       	mov    ebx,0x2
c0003868:	83 c4 1c             	add    esp,0x1c
c000386b:	89 d8                	mov    eax,ebx
c000386d:	5b                   	pop    ebx
c000386e:	5e                   	pop    esi
c000386f:	5f                   	pop    edi
c0003870:	5d                   	pop    ebp
c0003871:	c3                   	ret    

c0003872 <load_obj_xdir>:
c0003872:	53                   	push   ebx
c0003873:	89 c3                	mov    ebx,eax
c0003875:	83 ec 08             	sub    esp,0x8
c0003878:	8b 02                	mov    eax,DWORD PTR [edx]
c000387a:	89 03                	mov    DWORD PTR [ebx],eax
c000387c:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000387f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003882:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003885:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003888:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000388b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003892:	30 c0                	xor    al,al
c0003894:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000389b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000389e:	89 d8                	mov    eax,ebx
c00038a0:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00038a3:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00038a6:	e8 04 f8 ff ff       	call   c00030af <dir_sdi>
c00038ab:	85 c0                	test   eax,eax
c00038ad:	75 0b                	jne    c00038ba <load_obj_xdir+0x48>
c00038af:	89 d8                	mov    eax,ebx
c00038b1:	83 c4 08             	add    esp,0x8
c00038b4:	5b                   	pop    ebx
c00038b5:	e9 7f fe ff ff       	jmp    c0003739 <load_xdir>
c00038ba:	83 c4 08             	add    esp,0x8
c00038bd:	5b                   	pop    ebx
c00038be:	c3                   	ret    

c00038bf <dir_read>:
c00038bf:	55                   	push   ebp
c00038c0:	bd 04 00 00 00       	mov    ebp,0x4
c00038c5:	57                   	push   edi
c00038c6:	56                   	push   esi
c00038c7:	be ff ff ff ff       	mov    esi,0xffffffff
c00038cc:	53                   	push   ebx
c00038cd:	89 c3                	mov    ebx,eax
c00038cf:	83 ec 1c             	sub    esp,0x1c
c00038d2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038d6:	8b 38                	mov    edi,DWORD PTR [eax]
c00038d8:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038dd:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00038e0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00038e3:	89 c8                	mov    eax,ecx
c00038e5:	09 d0                	or     eax,edx
c00038e7:	0f 84 25 01 00 00    	je     c0003a12 <dir_read+0x153>
c00038ed:	89 f8                	mov    eax,edi
c00038ef:	e8 3d ea ff ff       	call   c0002331 <move_window>
c00038f4:	89 c5                	mov    ebp,eax
c00038f6:	85 c0                	test   eax,eax
c00038f8:	0f 85 23 01 00 00    	jne    c0003a21 <dir_read+0x162>
c00038fe:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003901:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003903:	84 c9                	test   cl,cl
c0003905:	0f 84 11 01 00 00    	je     c0003a1c <dir_read+0x15d>
c000390b:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c000390e:	75 48                	jne    c0003958 <dir_read+0x99>
c0003910:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003915:	74 10                	je     c0003927 <dir_read+0x68>
c0003917:	80 f9 83             	cmp    cl,0x83
c000391a:	0f 85 dd 00 00 00    	jne    c00039fd <dir_read+0x13e>
c0003920:	31 ed                	xor    ebp,ebp
c0003922:	e9 08 01 00 00       	jmp    c0003a2f <dir_read+0x170>
c0003927:	80 f9 85             	cmp    cl,0x85
c000392a:	0f 85 cd 00 00 00    	jne    c00039fd <dir_read+0x13e>
c0003930:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003933:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003936:	89 d8                	mov    eax,ebx
c0003938:	e8 fc fd ff ff       	call   c0003739 <load_xdir>
c000393d:	89 c5                	mov    ebp,eax
c000393f:	85 c0                	test   eax,eax
c0003941:	0f 85 da 00 00 00    	jne    c0003a21 <dir_read+0x162>
c0003947:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c000394a:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c000394d:	83 e0 3f             	and    eax,0x3f
c0003950:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003953:	e9 d7 00 00 00       	jmp    c0003a2f <dir_read+0x170>
c0003958:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000395b:	83 e0 3f             	and    eax,0x3f
c000395e:	80 f9 2e             	cmp    cl,0x2e
c0003961:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003965:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003968:	0f 84 8a 00 00 00    	je     c00039f8 <dir_read+0x139>
c000396e:	80 f9 e5             	cmp    cl,0xe5
c0003971:	0f 84 81 00 00 00    	je     c00039f8 <dir_read+0x139>
c0003977:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000397b:	83 e0 1f             	and    eax,0x1f
c000397e:	83 f8 08             	cmp    eax,0x8
c0003981:	0f 94 c0             	sete   al
c0003984:	0f b6 c0             	movzx  eax,al
c0003987:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000398b:	75 6b                	jne    c00039f8 <dir_read+0x139>
c000398d:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003992:	75 44                	jne    c00039d8 <dir_read+0x119>
c0003994:	f6 c1 40             	test   cl,0x40
c0003997:	74 12                	je     c00039ab <dir_read+0xec>
c0003999:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000399c:	83 e1 bf             	and    ecx,0xffffffbf
c000399f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00039a3:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00039a6:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00039a9:	eb 06                	jmp    c00039b1 <dir_read+0xf2>
c00039ab:	89 f0                	mov    eax,esi
c00039ad:	38 c8                	cmp    al,cl
c00039af:	75 47                	jne    c00039f8 <dir_read+0x139>
c00039b1:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039b5:	be ff ff ff ff       	mov    esi,0xffffffff
c00039ba:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00039bd:	75 3e                	jne    c00039fd <dir_read+0x13e>
c00039bf:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00039c3:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00039c6:	e8 8a e4 ff ff       	call   c0001e55 <pick_lfn>
c00039cb:	85 c0                	test   eax,eax
c00039cd:	74 2e                	je     c00039fd <dir_read+0x13e>
c00039cf:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00039d3:	8d 71 ff             	lea    esi,[ecx-0x1]
c00039d6:	eb 25                	jmp    c00039fd <dir_read+0x13e>
c00039d8:	89 f0                	mov    eax,esi
c00039da:	84 c0                	test   al,al
c00039dc:	75 11                	jne    c00039ef <dir_read+0x130>
c00039de:	89 d0                	mov    eax,edx
c00039e0:	e8 2a e6 ff ff       	call   c000200f <sum_sfn>
c00039e5:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00039e9:	0f 84 31 ff ff ff    	je     c0003920 <dir_read+0x61>
c00039ef:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00039f6:	eb 37                	jmp    c0003a2f <dir_read+0x170>
c00039f8:	be ff ff ff ff       	mov    esi,0xffffffff
c00039fd:	31 d2                	xor    edx,edx
c00039ff:	89 d8                	mov    eax,ebx
c0003a01:	e8 01 fc ff ff       	call   c0003607 <dir_next>
c0003a06:	89 c5                	mov    ebp,eax
c0003a08:	85 c0                	test   eax,eax
c0003a0a:	0f 84 cd fe ff ff    	je     c00038dd <dir_read+0x1e>
c0003a10:	eb 0f                	jmp    c0003a21 <dir_read+0x162>
c0003a12:	85 ed                	test   ebp,ebp
c0003a14:	0f 84 06 ff ff ff    	je     c0003920 <dir_read+0x61>
c0003a1a:	eb 05                	jmp    c0003a21 <dir_read+0x162>
c0003a1c:	bd 04 00 00 00       	mov    ebp,0x4
c0003a21:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003a28:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003a2f:	83 c4 1c             	add    esp,0x1c
c0003a32:	89 e8                	mov    eax,ebp
c0003a34:	5b                   	pop    ebx
c0003a35:	5e                   	pop    esi
c0003a36:	5f                   	pop    edi
c0003a37:	5d                   	pop    ebp
c0003a38:	c3                   	ret    

c0003a39 <dir_alloc>:
c0003a39:	55                   	push   ebp
c0003a3a:	89 d5                	mov    ebp,edx
c0003a3c:	57                   	push   edi
c0003a3d:	31 d2                	xor    edx,edx
c0003a3f:	56                   	push   esi
c0003a40:	53                   	push   ebx
c0003a41:	89 c3                	mov    ebx,eax
c0003a43:	83 ec 0c             	sub    esp,0xc
c0003a46:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a48:	e8 62 f6 ff ff       	call   c00030af <dir_sdi>
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	75 4e                	jne    c0003a9f <dir_alloc+0x66>
c0003a51:	31 f6                	xor    esi,esi
c0003a53:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a56:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a59:	89 f8                	mov    eax,edi
c0003a5b:	e8 d1 e8 ff ff       	call   c0002331 <move_window>
c0003a60:	85 c0                	test   eax,eax
c0003a62:	75 3b                	jne    c0003a9f <dir_alloc+0x66>
c0003a64:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a67:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a6a:	8a 12                	mov    dl,BYTE PTR [edx]
c0003a6c:	75 07                	jne    c0003a75 <dir_alloc+0x3c>
c0003a6e:	f7 d2                	not    edx
c0003a70:	c0 ea 07             	shr    dl,0x7
c0003a73:	eb 0d                	jmp    c0003a82 <dir_alloc+0x49>
c0003a75:	84 d2                	test   dl,dl
c0003a77:	0f 94 c1             	sete   cl
c0003a7a:	80 fa e5             	cmp    dl,0xe5
c0003a7d:	0f 94 c2             	sete   dl
c0003a80:	09 ca                	or     edx,ecx
c0003a82:	84 d2                	test   dl,dl
c0003a84:	74 07                	je     c0003a8d <dir_alloc+0x54>
c0003a86:	46                   	inc    esi
c0003a87:	39 ee                	cmp    esi,ebp
c0003a89:	75 04                	jne    c0003a8f <dir_alloc+0x56>
c0003a8b:	eb 1c                	jmp    c0003aa9 <dir_alloc+0x70>
c0003a8d:	31 f6                	xor    esi,esi
c0003a8f:	ba 01 00 00 00       	mov    edx,0x1
c0003a94:	89 d8                	mov    eax,ebx
c0003a96:	e8 6c fb ff ff       	call   c0003607 <dir_next>
c0003a9b:	85 c0                	test   eax,eax
c0003a9d:	74 b4                	je     c0003a53 <dir_alloc+0x1a>
c0003a9f:	83 f8 04             	cmp    eax,0x4
c0003aa2:	75 05                	jne    c0003aa9 <dir_alloc+0x70>
c0003aa4:	b8 07 00 00 00       	mov    eax,0x7
c0003aa9:	83 c4 0c             	add    esp,0xc
c0003aac:	5b                   	pop    ebx
c0003aad:	5e                   	pop    esi
c0003aae:	5f                   	pop    edi
c0003aaf:	5d                   	pop    ebp
c0003ab0:	c3                   	ret    

c0003ab1 <store_xdir>:
c0003ab1:	55                   	push   ebp
c0003ab2:	57                   	push   edi
c0003ab3:	89 c7                	mov    edi,eax
c0003ab5:	56                   	push   esi
c0003ab6:	53                   	push   ebx
c0003ab7:	83 ec 0c             	sub    esp,0xc
c0003aba:	8b 00                	mov    eax,DWORD PTR [eax]
c0003abc:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003abf:	89 e8                	mov    eax,ebp
c0003ac1:	e8 5b e5 ff ff       	call   c0002021 <xdir_sum>
c0003ac6:	0f b7 d0             	movzx  edx,ax
c0003ac9:	8d 45 02             	lea    eax,[ebp+0x2]
c0003acc:	e8 f4 e0 ff ff       	call   c0001bc5 <st_word>
c0003ad1:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003ad5:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003ad8:	89 f8                	mov    eax,edi
c0003ada:	e8 d0 f5 ff ff       	call   c00030af <dir_sdi>
c0003adf:	89 c6                	mov    esi,eax
c0003ae1:	85 f6                	test   esi,esi
c0003ae3:	75 3d                	jne    c0003b22 <store_xdir+0x71>
c0003ae5:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003ae8:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003aeb:	8b 07                	mov    eax,DWORD PTR [edi]
c0003aed:	e8 3f e8 ff ff       	call   c0002331 <move_window>
c0003af2:	89 c6                	mov    esi,eax
c0003af4:	85 c0                	test   eax,eax
c0003af6:	75 2a                	jne    c0003b22 <store_xdir+0x71>
c0003af8:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003afb:	b9 20 00 00 00       	mov    ecx,0x20
c0003b00:	89 ea                	mov    edx,ebp
c0003b02:	e8 cb e0 ff ff       	call   c0001bd2 <mem_cpy>
c0003b07:	8b 07                	mov    eax,DWORD PTR [edi]
c0003b09:	85 db                	test   ebx,ebx
c0003b0b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003b0f:	74 11                	je     c0003b22 <store_xdir+0x71>
c0003b11:	31 d2                	xor    edx,edx
c0003b13:	89 f8                	mov    eax,edi
c0003b15:	83 c5 20             	add    ebp,0x20
c0003b18:	e8 ea fa ff ff       	call   c0003607 <dir_next>
c0003b1d:	4b                   	dec    ebx
c0003b1e:	89 c6                	mov    esi,eax
c0003b20:	eb bf                	jmp    c0003ae1 <store_xdir+0x30>
c0003b22:	89 f0                	mov    eax,esi
c0003b24:	83 fe 02             	cmp    esi,0x2
c0003b27:	76 05                	jbe    c0003b2e <store_xdir+0x7d>
c0003b29:	b8 02 00 00 00       	mov    eax,0x2
c0003b2e:	83 c4 0c             	add    esp,0xc
c0003b31:	5b                   	pop    ebx
c0003b32:	5e                   	pop    esi
c0003b33:	5f                   	pop    edi
c0003b34:	5d                   	pop    ebp
c0003b35:	c3                   	ret    

c0003b36 <dir_remove>:
c0003b36:	57                   	push   edi
c0003b37:	56                   	push   esi
c0003b38:	53                   	push   ebx
c0003b39:	89 c3                	mov    ebx,eax
c0003b3b:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003b3e:	8b 30                	mov    esi,DWORD PTR [eax]
c0003b40:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003b43:	83 fa ff             	cmp    edx,0xffffffff
c0003b46:	74 09                	je     c0003b51 <dir_remove+0x1b>
c0003b48:	e8 62 f5 ff ff       	call   c00030af <dir_sdi>
c0003b4d:	85 c0                	test   eax,eax
c0003b4f:	75 41                	jne    c0003b92 <dir_remove+0x5c>
c0003b51:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b54:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b57:	89 f0                	mov    eax,esi
c0003b59:	e8 d3 e7 ff ff       	call   c0002331 <move_window>
c0003b5e:	85 c0                	test   eax,eax
c0003b60:	75 26                	jne    c0003b88 <dir_remove+0x52>
c0003b62:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b65:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003b68:	75 05                	jne    c0003b6f <dir_remove+0x39>
c0003b6a:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003b6d:	eb 03                	jmp    c0003b72 <dir_remove+0x3c>
c0003b6f:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003b72:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003b76:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003b79:	73 17                	jae    c0003b92 <dir_remove+0x5c>
c0003b7b:	31 d2                	xor    edx,edx
c0003b7d:	89 d8                	mov    eax,ebx
c0003b7f:	e8 83 fa ff ff       	call   c0003607 <dir_next>
c0003b84:	85 c0                	test   eax,eax
c0003b86:	74 c9                	je     c0003b51 <dir_remove+0x1b>
c0003b88:	83 f8 04             	cmp    eax,0x4
c0003b8b:	75 05                	jne    c0003b92 <dir_remove+0x5c>
c0003b8d:	b8 02 00 00 00       	mov    eax,0x2
c0003b92:	5b                   	pop    ebx
c0003b93:	5e                   	pop    esi
c0003b94:	5f                   	pop    edi
c0003b95:	c3                   	ret    

c0003b96 <create_name>:
c0003b96:	55                   	push   ebp
c0003b97:	89 d5                	mov    ebp,edx
c0003b99:	57                   	push   edi
c0003b9a:	89 c7                	mov    edi,eax
c0003b9c:	56                   	push   esi
c0003b9d:	31 f6                	xor    esi,esi
c0003b9f:	53                   	push   ebx
c0003ba0:	83 ec 3c             	sub    esp,0x3c
c0003ba3:	8b 02                	mov    eax,DWORD PTR [edx]
c0003ba5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ba9:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bab:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003bae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003bb2:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003bb6:	e8 72 e0 ff ff       	call   c0001c2d <tchar2uni>
c0003bbb:	89 c3                	mov    ebx,eax
c0003bbd:	83 f8 ff             	cmp    eax,0xffffffff
c0003bc0:	75 0a                	jne    c0003bcc <create_name+0x36>
c0003bc2:	b8 06 00 00 00       	mov    eax,0x6
c0003bc7:	e9 9e 02 00 00       	jmp    c0003e6a <create_name+0x2d4>
c0003bcc:	3d ff ff 00 00       	cmp    eax,0xffff
c0003bd1:	76 0c                	jbe    c0003bdf <create_name+0x49>
c0003bd3:	c1 e8 10             	shr    eax,0x10
c0003bd6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003bda:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003bde:	46                   	inc    esi
c0003bdf:	66 83 fb 1f          	cmp    bx,0x1f
c0003be3:	76 4f                	jbe    c0003c34 <create_name+0x9e>
c0003be5:	66 83 fb 5c          	cmp    bx,0x5c
c0003be9:	74 35                	je     c0003c20 <create_name+0x8a>
c0003beb:	66 83 fb 2f          	cmp    bx,0x2f
c0003bef:	74 2f                	je     c0003c20 <create_name+0x8a>
c0003bf1:	66 83 fb 7f          	cmp    bx,0x7f
c0003bf5:	77 11                	ja     c0003c08 <create_name+0x72>
c0003bf7:	0f b7 d3             	movzx  edx,bx
c0003bfa:	b8 f2 36 02 c0       	mov    eax,0xc00236f2
c0003bff:	e8 11 e0 ff ff       	call   c0001c15 <chk_chr>
c0003c04:	85 c0                	test   eax,eax
c0003c06:	75 ba                	jne    c0003bc2 <create_name+0x2c>
c0003c08:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003c0e:	77 b2                	ja     c0003bc2 <create_name+0x2c>
c0003c10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c14:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003c18:	46                   	inc    esi
c0003c19:	eb 97                	jmp    c0003bb2 <create_name+0x1c>
c0003c1b:	40                   	inc    eax
c0003c1c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c20:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c24:	8a 10                	mov    dl,BYTE PTR [eax]
c0003c26:	80 fa 2f             	cmp    dl,0x2f
c0003c29:	74 f0                	je     c0003c1b <create_name+0x85>
c0003c2b:	80 fa 5c             	cmp    dl,0x5c
c0003c2e:	74 eb                	je     c0003c1b <create_name+0x85>
c0003c30:	31 db                	xor    ebx,ebx
c0003c32:	eb 02                	jmp    c0003c36 <create_name+0xa0>
c0003c34:	b3 04                	mov    bl,0x4
c0003c36:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c3a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003c3d:	85 f6                	test   esi,esi
c0003c3f:	74 18                	je     c0003c59 <create_name+0xc3>
c0003c41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c45:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003c4a:	66 83 f8 20          	cmp    ax,0x20
c0003c4e:	74 06                	je     c0003c56 <create_name+0xc0>
c0003c50:	66 83 f8 2e          	cmp    ax,0x2e
c0003c54:	75 03                	jne    c0003c59 <create_name+0xc3>
c0003c56:	4e                   	dec    esi
c0003c57:	eb e4                	jmp    c0003c3d <create_name+0xa7>
c0003c59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c5d:	31 ed                	xor    ebp,ebp
c0003c5f:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003c65:	85 f6                	test   esi,esi
c0003c67:	0f 84 55 ff ff ff    	je     c0003bc2 <create_name+0x2c>
c0003c6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c71:	8d 55 01             	lea    edx,[ebp+0x1]
c0003c74:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003c78:	66 83 f8 20          	cmp    ax,0x20
c0003c7c:	75 04                	jne    c0003c82 <create_name+0xec>
c0003c7e:	89 d5                	mov    ebp,edx
c0003c80:	eb eb                	jmp    c0003c6d <create_name+0xd7>
c0003c82:	85 ed                	test   ebp,ebp
c0003c84:	75 06                	jne    c0003c8c <create_name+0xf6>
c0003c86:	66 83 f8 2e          	cmp    ax,0x2e
c0003c8a:	75 08                	jne    c0003c94 <create_name+0xfe>
c0003c8c:	83 cb 03             	or     ebx,0x3
c0003c8f:	eb 03                	jmp    c0003c94 <create_name+0xfe>
c0003c91:	4e                   	dec    esi
c0003c92:	74 0c                	je     c0003ca0 <create_name+0x10a>
c0003c94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c98:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003c9e:	75 f1                	jne    c0003c91 <create_name+0xfb>
c0003ca0:	b9 0b 00 00 00       	mov    ecx,0xb
c0003ca5:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003ca8:	ba 20 00 00 00       	mov    edx,0x20
c0003cad:	e8 35 df ff ff       	call   c0001be7 <mem_set>
c0003cb2:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003cba:	31 c9                	xor    ecx,ecx
c0003cbc:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003cc1:	8d 45 01             	lea    eax,[ebp+0x1]
c0003cc4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003cc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ccc:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003cd0:	66 85 ed             	test   bp,bp
c0003cd3:	0f 84 30 01 00 00    	je     c0003e09 <create_name+0x273>
c0003cd9:	66 83 fd 20          	cmp    bp,0x20
c0003cdd:	74 10                	je     c0003cef <create_name+0x159>
c0003cdf:	66 83 fd 2e          	cmp    bp,0x2e
c0003ce3:	75 13                	jne    c0003cf8 <create_name+0x162>
c0003ce5:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003ce9:	0f 84 6b 01 00 00    	je     c0003e5a <create_name+0x2c4>
c0003cef:	83 cb 03             	or     ebx,0x3
c0003cf2:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003cf6:	eb c9                	jmp    c0003cc1 <create_name+0x12b>
c0003cf8:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003cfc:	73 0b                	jae    c0003d09 <create_name+0x173>
c0003cfe:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d02:	75 47                	jne    c0003d4b <create_name+0x1b5>
c0003d04:	e9 51 01 00 00       	jmp    c0003e5a <create_name+0x2c4>
c0003d09:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d0e:	75 10                	jne    c0003d20 <create_name+0x18a>
c0003d10:	83 cb 03             	or     ebx,0x3
c0003d13:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d1b:	e9 e9 00 00 00       	jmp    c0003e09 <create_name+0x273>
c0003d20:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d24:	74 0d                	je     c0003d33 <create_name+0x19d>
c0003d26:	83 cb 03             	or     ebx,0x3
c0003d29:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d2d:	0f 87 d6 00 00 00    	ja     c0003e09 <create_name+0x273>
c0003d33:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003d38:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003d3c:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d44:	b9 08 00 00 00       	mov    ecx,0x8
c0003d49:	eb a7                	jmp    c0003cf2 <create_name+0x15c>
c0003d4b:	66 83 fd 7f          	cmp    bp,0x7f
c0003d4f:	76 68                	jbe    c0003db9 <create_name+0x223>
c0003d51:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003d55:	88 da                	mov    dl,bl
c0003d57:	83 ca 02             	or     edx,0x2
c0003d5a:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003d5e:	50                   	push   eax
c0003d5f:	50                   	push   eax
c0003d60:	68 b5 01 00 00       	push   0x1b5
c0003d65:	55                   	push   ebp
c0003d66:	e8 81 48 00 00       	call   c00085ec <ff_uni2oem>
c0003d6b:	83 c4 10             	add    esp,0x10
c0003d6e:	89 c5                	mov    ebp,eax
c0003d70:	a8 80                	test   al,0x80
c0003d72:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003d76:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003d7a:	74 0c                	je     c0003d88 <create_name+0x1f2>
c0003d7c:	83 e5 7f             	and    ebp,0x7f
c0003d7f:	0f b6 ad 40 36 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffdc9c0]
c0003d86:	eb 2a                	jmp    c0003db2 <create_name+0x21c>
c0003d88:	66 3d ff 00          	cmp    ax,0xff
c0003d8c:	76 24                	jbe    c0003db2 <create_name+0x21c>
c0003d8e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d92:	48                   	dec    eax
c0003d93:	39 c8                	cmp    eax,ecx
c0003d95:	77 0c                	ja     c0003da3 <create_name+0x20d>
c0003d97:	83 cb 03             	or     ebx,0x3
c0003d9a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003d9e:	e9 4f ff ff ff       	jmp    c0003cf2 <create_name+0x15c>
c0003da3:	89 e8                	mov    eax,ebp
c0003da5:	88 d3                	mov    bl,dl
c0003da7:	66 c1 e8 08          	shr    ax,0x8
c0003dab:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003daf:	41                   	inc    ecx
c0003db0:	eb 4b                	jmp    c0003dfd <create_name+0x267>
c0003db2:	88 d3                	mov    bl,dl
c0003db4:	66 85 ed             	test   bp,bp
c0003db7:	74 19                	je     c0003dd2 <create_name+0x23c>
c0003db9:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003dbd:	0f b7 d5             	movzx  edx,bp
c0003dc0:	b8 fb 36 02 c0       	mov    eax,0xc00236fb
c0003dc5:	e8 4b de ff ff       	call   c0001c15 <chk_chr>
c0003dca:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003dce:	85 c0                	test   eax,eax
c0003dd0:	74 0a                	je     c0003ddc <create_name+0x246>
c0003dd2:	83 cb 03             	or     ebx,0x3
c0003dd5:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003dda:	eb 21                	jmp    c0003dfd <create_name+0x267>
c0003ddc:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003ddf:	66 83 f8 19          	cmp    ax,0x19
c0003de3:	77 07                	ja     c0003dec <create_name+0x256>
c0003de5:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003dea:	eb 11                	jmp    c0003dfd <create_name+0x267>
c0003dec:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003def:	66 83 f8 19          	cmp    ax,0x19
c0003df3:	77 08                	ja     c0003dfd <create_name+0x267>
c0003df5:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003dfa:	83 ed 20             	sub    ebp,0x20
c0003dfd:	89 e8                	mov    eax,ebp
c0003dff:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e03:	41                   	inc    ecx
c0003e04:	e9 e9 fe ff ff       	jmp    c0003cf2 <create_name+0x15c>
c0003e09:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003e0d:	75 04                	jne    c0003e13 <create_name+0x27d>
c0003e0f:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003e13:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003e18:	75 05                	jne    c0003e1f <create_name+0x289>
c0003e1a:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e1f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e23:	83 e0 0c             	and    eax,0xc
c0003e26:	3c 0c                	cmp    al,0xc
c0003e28:	74 0b                	je     c0003e35 <create_name+0x29f>
c0003e2a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e2e:	83 e0 03             	and    eax,0x3
c0003e31:	3c 03                	cmp    al,0x3
c0003e33:	75 05                	jne    c0003e3a <create_name+0x2a4>
c0003e35:	83 cb 02             	or     ebx,0x2
c0003e38:	eb 19                	jmp    c0003e53 <create_name+0x2bd>
c0003e3a:	f6 c3 02             	test   bl,0x2
c0003e3d:	75 14                	jne    c0003e53 <create_name+0x2bd>
c0003e3f:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003e44:	74 03                	je     c0003e49 <create_name+0x2b3>
c0003e46:	83 cb 10             	or     ebx,0x10
c0003e49:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003e4e:	74 03                	je     c0003e53 <create_name+0x2bd>
c0003e50:	83 cb 08             	or     ebx,0x8
c0003e53:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003e56:	31 c0                	xor    eax,eax
c0003e58:	eb 10                	jmp    c0003e6a <create_name+0x2d4>
c0003e5a:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e5f:	0f 85 ce fe ff ff    	jne    c0003d33 <create_name+0x19d>
c0003e65:	e9 a6 fe ff ff       	jmp    c0003d10 <create_name+0x17a>
c0003e6a:	83 c4 3c             	add    esp,0x3c
c0003e6d:	5b                   	pop    ebx
c0003e6e:	5e                   	pop    esi
c0003e6f:	5f                   	pop    edi
c0003e70:	5d                   	pop    ebp
c0003e71:	c3                   	ret    

c0003e72 <xname_sum>:
c0003e72:	56                   	push   esi
c0003e73:	53                   	push   ebx
c0003e74:	89 c6                	mov    esi,eax
c0003e76:	51                   	push   ecx
c0003e77:	31 db                	xor    ebx,ebx
c0003e79:	83 c6 02             	add    esi,0x2
c0003e7c:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003e80:	66 85 c0             	test   ax,ax
c0003e83:	74 1f                	je     c0003ea4 <xname_sum+0x32>
c0003e85:	83 ec 0c             	sub    esp,0xc
c0003e88:	66 d1 cb             	ror    bx,1
c0003e8b:	50                   	push   eax
c0003e8c:	e8 67 48 00 00       	call   c00086f8 <ff_wtoupper>
c0003e91:	83 c4 10             	add    esp,0x10
c0003e94:	0f b6 d0             	movzx  edx,al
c0003e97:	66 c1 e8 08          	shr    ax,0x8
c0003e9b:	01 d3                	add    ebx,edx
c0003e9d:	66 d1 cb             	ror    bx,1
c0003ea0:	01 c3                	add    ebx,eax
c0003ea2:	eb d5                	jmp    c0003e79 <xname_sum+0x7>
c0003ea4:	89 d8                	mov    eax,ebx
c0003ea6:	5a                   	pop    edx
c0003ea7:	5b                   	pop    ebx
c0003ea8:	5e                   	pop    esi
c0003ea9:	c3                   	ret    

c0003eaa <create_xdir>:
c0003eaa:	55                   	push   ebp
c0003eab:	b9 40 00 00 00       	mov    ecx,0x40
c0003eb0:	57                   	push   edi
c0003eb1:	bd 01 00 00 00       	mov    ebp,0x1
c0003eb6:	56                   	push   esi
c0003eb7:	31 ff                	xor    edi,edi
c0003eb9:	53                   	push   ebx
c0003eba:	be 40 00 00 00       	mov    esi,0x40
c0003ebf:	89 c3                	mov    ebx,eax
c0003ec1:	83 ec 1c             	sub    esp,0x1c
c0003ec4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003ec8:	31 d2                	xor    edx,edx
c0003eca:	e8 18 dd ff ff       	call   c0001be7 <mem_set>
c0003ecf:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003ed2:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003ed6:	31 c9                	xor    ecx,ecx
c0003ed8:	8d 46 01             	lea    eax,[esi+0x1]
c0003edb:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003edf:	83 c6 02             	add    esi,0x2
c0003ee2:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003ee6:	66 85 ed             	test   bp,bp
c0003ee9:	74 12                	je     c0003efd <create_xdir+0x53>
c0003eeb:	0f b6 c1             	movzx  eax,cl
c0003eee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003ef2:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003ef6:	66 83 fd 01          	cmp    bp,0x1
c0003efa:	80 d9 ff             	sbb    cl,0xff
c0003efd:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003f00:	0f b7 d5             	movzx  edx,bp
c0003f03:	83 c6 02             	add    esi,0x2
c0003f06:	e8 ba dc ff ff       	call   c0001bc5 <st_word>
c0003f0b:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003f11:	75 d3                	jne    c0003ee6 <create_xdir+0x3c>
c0003f13:	8d 47 01             	lea    eax,[edi+0x1]
c0003f16:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003f1a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003f1e:	0f b6 c1             	movzx  eax,cl
c0003f21:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003f26:	74 07                	je     c0003f2f <create_xdir+0x85>
c0003f28:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003f2d:	eb a9                	jmp    c0003ed8 <create_xdir+0x2e>
c0003f2f:	8d 47 02             	lea    eax,[edi+0x2]
c0003f32:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003f35:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003f38:	89 d0                	mov    eax,edx
c0003f3a:	e8 33 ff ff ff       	call   c0003e72 <xname_sum>
c0003f3f:	83 c4 1c             	add    esp,0x1c
c0003f42:	0f b7 d0             	movzx  edx,ax
c0003f45:	8d 43 24             	lea    eax,[ebx+0x24]
c0003f48:	5b                   	pop    ebx
c0003f49:	5e                   	pop    esi
c0003f4a:	5f                   	pop    edi
c0003f4b:	5d                   	pop    ebp
c0003f4c:	e9 74 dc ff ff       	jmp    c0001bc5 <st_word>

c0003f51 <cmp_lfn>:
c0003f51:	55                   	push   ebp
c0003f52:	57                   	push   edi
c0003f53:	89 d7                	mov    edi,edx
c0003f55:	56                   	push   esi
c0003f56:	53                   	push   ebx
c0003f57:	83 ec 1c             	sub    esp,0x1c
c0003f5a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003f5e:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003f61:	e8 ed db ff ff       	call   c0001b53 <ld_word>
c0003f66:	66 85 c0             	test   ax,ax
c0003f69:	74 07                	je     c0003f72 <cmp_lfn+0x21>
c0003f6b:	31 c0                	xor    eax,eax
c0003f6d:	e9 9a 00 00 00       	jmp    c000400c <cmp_lfn+0xbb>
c0003f72:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003f74:	bd 01 00 00 00       	mov    ebp,0x1
c0003f79:	83 e3 3f             	and    ebx,0x3f
c0003f7c:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003f84:	4b                   	dec    ebx
c0003f85:	6b db 0d             	imul   ebx,ebx,0xd
c0003f88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003f8c:	0f b6 80 c0 36 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc940]
c0003f93:	01 f8                	add    eax,edi
c0003f95:	e8 b9 db ff ff       	call   c0001b53 <ld_word>
c0003f9a:	66 85 ed             	test   bp,bp
c0003f9d:	89 c6                	mov    esi,eax
c0003f9f:	74 3c                	je     c0003fdd <cmp_lfn+0x8c>
c0003fa1:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003fa7:	77 c2                	ja     c0003f6b <cmp_lfn+0x1a>
c0003fa9:	83 ec 0c             	sub    esp,0xc
c0003fac:	0f b7 c0             	movzx  eax,ax
c0003faf:	50                   	push   eax
c0003fb0:	e8 43 47 00 00       	call   c00086f8 <ff_wtoupper>
c0003fb5:	89 c5                	mov    ebp,eax
c0003fb7:	8d 43 01             	lea    eax,[ebx+0x1]
c0003fba:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003fbe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003fc2:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003fc6:	89 04 24             	mov    DWORD PTR [esp],eax
c0003fc9:	e8 2a 47 00 00       	call   c00086f8 <ff_wtoupper>
c0003fce:	83 c4 10             	add    esp,0x10
c0003fd1:	39 c5                	cmp    ebp,eax
c0003fd3:	75 96                	jne    c0003f6b <cmp_lfn+0x1a>
c0003fd5:	89 f5                	mov    ebp,esi
c0003fd7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003fdb:	eb 04                	jmp    c0003fe1 <cmp_lfn+0x90>
c0003fdd:	66 46                	inc    si
c0003fdf:	75 8a                	jne    c0003f6b <cmp_lfn+0x1a>
c0003fe1:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003fe5:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003fea:	75 9c                	jne    c0003f88 <cmp_lfn+0x37>
c0003fec:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003fef:	74 16                	je     c0004007 <cmp_lfn+0xb6>
c0003ff1:	66 85 ed             	test   bp,bp
c0003ff4:	74 11                	je     c0004007 <cmp_lfn+0xb6>
c0003ff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ffa:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003fff:	0f 94 c0             	sete   al
c0004002:	0f b6 c0             	movzx  eax,al
c0004005:	eb 05                	jmp    c000400c <cmp_lfn+0xbb>
c0004007:	b8 01 00 00 00       	mov    eax,0x1
c000400c:	83 c4 1c             	add    esp,0x1c
c000400f:	5b                   	pop    ebx
c0004010:	5e                   	pop    esi
c0004011:	5f                   	pop    edi
c0004012:	5d                   	pop    ebp
c0004013:	c3                   	ret    

c0004014 <dir_find>:
c0004014:	55                   	push   ebp
c0004015:	31 d2                	xor    edx,edx
c0004017:	57                   	push   edi
c0004018:	56                   	push   esi
c0004019:	53                   	push   ebx
c000401a:	89 c3                	mov    ebx,eax
c000401c:	83 ec 1c             	sub    esp,0x1c
c000401f:	8b 30                	mov    esi,DWORD PTR [eax]
c0004021:	e8 89 f0 ff ff       	call   c00030af <dir_sdi>
c0004026:	89 04 24             	mov    DWORD PTR [esp],eax
c0004029:	85 c0                	test   eax,eax
c000402b:	0f 85 9e 01 00 00    	jne    c00041cf <dir_find+0x1bb>
c0004031:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004034:	0f 85 8d 00 00 00    	jne    c00040c7 <dir_find+0xb3>
c000403a:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000403d:	e8 30 fe ff ff       	call   c0003e72 <xname_sum>
c0004042:	89 c7                	mov    edi,eax
c0004044:	31 d2                	xor    edx,edx
c0004046:	89 d8                	mov    eax,ebx
c0004048:	e8 72 f8 ff ff       	call   c00038bf <dir_read>
c000404d:	85 c0                	test   eax,eax
c000404f:	0f 85 5e 01 00 00    	jne    c00041b3 <dir_find+0x19f>
c0004055:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004058:	8d 41 24             	lea    eax,[ecx+0x24]
c000405b:	e8 f3 da ff ff       	call   c0001b53 <ld_word>
c0004060:	66 39 f8             	cmp    ax,di
c0004063:	75 df                	jne    c0004044 <dir_find+0x30>
c0004065:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004068:	31 ed                	xor    ebp,ebp
c000406a:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000406e:	ba 40 00 00 00       	mov    edx,0x40
c0004073:	89 e9                	mov    ecx,ebp
c0004075:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004079:	0f 84 42 01 00 00    	je     c00041c1 <dir_find+0x1ad>
c000407f:	f6 c2 1f             	test   dl,0x1f
c0004082:	75 03                	jne    c0004087 <dir_find+0x73>
c0004084:	83 c2 02             	add    edx,0x2
c0004087:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000408b:	89 d0                	mov    eax,edx
c000408d:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004090:	e8 be da ff ff       	call   c0001b53 <ld_word>
c0004095:	83 ec 0c             	sub    esp,0xc
c0004098:	0f b7 c0             	movzx  eax,ax
c000409b:	50                   	push   eax
c000409c:	e8 57 46 00 00       	call   c00086f8 <ff_wtoupper>
c00040a1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00040a5:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00040a8:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00040ac:	89 04 24             	mov    DWORD PTR [esp],eax
c00040af:	e8 44 46 00 00       	call   c00086f8 <ff_wtoupper>
c00040b4:	83 c4 10             	add    esp,0x10
c00040b7:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00040bb:	75 87                	jne    c0004044 <dir_find+0x30>
c00040bd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00040c1:	45                   	inc    ebp
c00040c2:	83 c2 02             	add    edx,0x2
c00040c5:	eb ac                	jmp    c0004073 <dir_find+0x5f>
c00040c7:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00040ce:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00040d3:	bf ff ff ff ff       	mov    edi,0xffffffff
c00040d8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00040db:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00040de:	89 f0                	mov    eax,esi
c00040e0:	e8 4c e2 ff ff       	call   c0002331 <move_window>
c00040e5:	85 c0                	test   eax,eax
c00040e7:	0f 85 c6 00 00 00    	jne    c00041b3 <dir_find+0x19f>
c00040ed:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00040f0:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00040f3:	84 c9                	test   cl,cl
c00040f5:	0f 84 bd 00 00 00    	je     c00041b8 <dir_find+0x1a4>
c00040fb:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00040fe:	88 d0                	mov    al,dl
c0004100:	83 e0 3f             	and    eax,0x3f
c0004103:	80 f9 e5             	cmp    cl,0xe5
c0004106:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004109:	0f 84 87 00 00 00    	je     c0004196 <dir_find+0x182>
c000410f:	80 e2 08             	and    dl,0x8
c0004112:	74 06                	je     c000411a <dir_find+0x106>
c0004114:	3c 0f                	cmp    al,0xf
c0004116:	75 7e                	jne    c0004196 <dir_find+0x182>
c0004118:	eb 04                	jmp    c000411e <dir_find+0x10a>
c000411a:	3c 0f                	cmp    al,0xf
c000411c:	75 4c                	jne    c000416a <dir_find+0x156>
c000411e:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004122:	75 7e                	jne    c00041a2 <dir_find+0x18e>
c0004124:	f6 c1 40             	test   cl,0x40
c0004127:	74 12                	je     c000413b <dir_find+0x127>
c0004129:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000412c:	83 e1 bf             	and    ecx,0xffffffbf
c000412f:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004133:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004136:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004139:	eb 06                	jmp    c0004141 <dir_find+0x12d>
c000413b:	89 f8                	mov    eax,edi
c000413d:	38 c8                	cmp    al,cl
c000413f:	75 5c                	jne    c000419d <dir_find+0x189>
c0004141:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004145:	bf ff ff ff ff       	mov    edi,0xffffffff
c000414a:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000414d:	75 53                	jne    c00041a2 <dir_find+0x18e>
c000414f:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004153:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004156:	89 ea                	mov    edx,ebp
c0004158:	e8 f4 fd ff ff       	call   c0003f51 <cmp_lfn>
c000415d:	85 c0                	test   eax,eax
c000415f:	74 41                	je     c00041a2 <dir_find+0x18e>
c0004161:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004165:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004168:	eb 38                	jmp    c00041a2 <dir_find+0x18e>
c000416a:	89 f8                	mov    eax,edi
c000416c:	84 c0                	test   al,al
c000416e:	75 0d                	jne    c000417d <dir_find+0x169>
c0004170:	89 e8                	mov    eax,ebp
c0004172:	e8 98 de ff ff       	call   c000200f <sum_sfn>
c0004177:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000417b:	74 52                	je     c00041cf <dir_find+0x1bb>
c000417d:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004181:	75 13                	jne    c0004196 <dir_find+0x182>
c0004183:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004186:	b9 0b 00 00 00       	mov    ecx,0xb
c000418b:	89 e8                	mov    eax,ebp
c000418d:	e8 60 da ff ff       	call   c0001bf2 <mem_cmp>
c0004192:	85 c0                	test   eax,eax
c0004194:	74 39                	je     c00041cf <dir_find+0x1bb>
c0004196:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c000419d:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041a2:	31 d2                	xor    edx,edx
c00041a4:	89 d8                	mov    eax,ebx
c00041a6:	e8 5c f4 ff ff       	call   c0003607 <dir_next>
c00041ab:	85 c0                	test   eax,eax
c00041ad:	0f 84 25 ff ff ff    	je     c00040d8 <dir_find+0xc4>
c00041b3:	89 04 24             	mov    DWORD PTR [esp],eax
c00041b6:	eb 17                	jmp    c00041cf <dir_find+0x1bb>
c00041b8:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00041bf:	eb 0e                	jmp    c00041cf <dir_find+0x1bb>
c00041c1:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041c4:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00041c9:	0f 85 75 fe ff ff    	jne    c0004044 <dir_find+0x30>
c00041cf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00041d2:	83 c4 1c             	add    esp,0x1c
c00041d5:	5b                   	pop    ebx
c00041d6:	5e                   	pop    esi
c00041d7:	5f                   	pop    edi
c00041d8:	5d                   	pop    ebp
c00041d9:	c3                   	ret    

c00041da <dir_register>:
c00041da:	55                   	push   ebp
c00041db:	57                   	push   edi
c00041dc:	56                   	push   esi
c00041dd:	be 06 00 00 00       	mov    esi,0x6
c00041e2:	53                   	push   ebx
c00041e3:	83 ec 6c             	sub    esp,0x6c
c00041e6:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00041ea:	0f 85 62 02 00 00    	jne    c0004452 <dir_register+0x278>
c00041f0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00041f2:	31 ff                	xor    edi,edi
c00041f4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00041f7:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00041fc:	74 03                	je     c0004201 <dir_register+0x27>
c00041fe:	47                   	inc    edi
c00041ff:	eb f6                	jmp    c00041f7 <dir_register+0x1d>
c0004201:	89 c3                	mov    ebx,eax
c0004203:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004207:	0f 85 e1 00 00 00    	jne    c00042ee <dir_register+0x114>
c000420d:	83 c7 0e             	add    edi,0xe
c0004210:	b9 0f 00 00 00       	mov    ecx,0xf
c0004215:	89 f8                	mov    eax,edi
c0004217:	31 d2                	xor    edx,edx
c0004219:	f7 f1                	div    ecx
c000421b:	8d 50 02             	lea    edx,[eax+0x2]
c000421e:	89 c7                	mov    edi,eax
c0004220:	89 d8                	mov    eax,ebx
c0004222:	e8 12 f8 ff ff       	call   c0003a39 <dir_alloc>
c0004227:	89 c6                	mov    esi,eax
c0004229:	85 c0                	test   eax,eax
c000422b:	0f 85 21 02 00 00    	jne    c0004452 <dir_register+0x278>
c0004231:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004237:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000423a:	c1 e7 05             	shl    edi,0x5
c000423d:	29 f8                	sub    eax,edi
c000423f:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004242:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004245:	a8 04                	test   al,0x4
c0004247:	0f 84 91 00 00 00    	je     c00042de <dir_register+0x104>
c000424d:	83 e0 fb             	and    eax,0xfffffffb
c0004250:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004253:	89 d8                	mov    eax,ebx
c0004255:	e8 25 ec ff ff       	call   c0002e7f <fill_first_frag>
c000425a:	85 c0                	test   eax,eax
c000425c:	0f 85 ee 01 00 00    	jne    c0004450 <dir_register+0x276>
c0004262:	83 c9 ff             	or     ecx,0xffffffff
c0004265:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004268:	89 d8                	mov    eax,ebx
c000426a:	e8 db eb ff ff       	call   c0002e4a <fill_last_frag>
c000426f:	85 c0                	test   eax,eax
c0004271:	0f 85 d9 01 00 00    	jne    c0004450 <dir_register+0x276>
c0004277:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000427b:	74 61                	je     c00042de <dir_register+0x104>
c000427d:	89 da                	mov    edx,ebx
c000427f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004283:	e8 ea f5 ff ff       	call   c0003872 <load_obj_xdir>
c0004288:	85 c0                	test   eax,eax
c000428a:	0f 85 c0 01 00 00    	jne    c0004450 <dir_register+0x276>
c0004290:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004294:	31 c9                	xor    ecx,ecx
c0004296:	c1 e2 09             	shl    edx,0x9
c0004299:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c000429c:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c000429f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00042a2:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00042a5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042a8:	83 c0 38             	add    eax,0x38
c00042ab:	e8 1c d9 ff ff       	call   c0001bcc <st_qword>
c00042b0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042b3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00042b6:	83 c0 28             	add    eax,0x28
c00042b9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00042bc:	e8 0b d9 ff ff       	call   c0001bcc <st_qword>
c00042c1:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00042c4:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00042c7:	83 c8 01             	or     eax,0x1
c00042ca:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00042cd:	8d 44 24 14          	lea    eax,[esp+0x14]
c00042d1:	e8 db f7 ff ff       	call   c0003ab1 <store_xdir>
c00042d6:	85 c0                	test   eax,eax
c00042d8:	0f 85 72 01 00 00    	jne    c0004450 <dir_register+0x276>
c00042de:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042e1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042e4:	e8 c1 fb ff ff       	call   c0003eaa <create_xdir>
c00042e9:	e9 64 01 00 00       	jmp    c0004452 <dir_register+0x278>
c00042ee:	8d 40 3c             	lea    eax,[eax+0x3c]
c00042f1:	b9 0c 00 00 00       	mov    ecx,0xc
c00042f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00042fa:	89 c2                	mov    edx,eax
c00042fc:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004300:	e8 cd d8 ff ff       	call   c0001bd2 <mem_cpy>
c0004305:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c000430a:	74 58                	je     c0004364 <dir_register+0x18a>
c000430c:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004310:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004318:	83 ec 0c             	sub    esp,0xc
c000431b:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000431e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004322:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004326:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000432a:	e8 24 dc ff ff       	call   c0001f53 <gen_numname>
c000432f:	89 d8                	mov    eax,ebx
c0004331:	e8 de fc ff ff       	call   c0004014 <dir_find>
c0004336:	83 c4 10             	add    esp,0x10
c0004339:	89 c6                	mov    esi,eax
c000433b:	85 c0                	test   eax,eax
c000433d:	75 15                	jne    c0004354 <dir_register+0x17a>
c000433f:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004343:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004348:	75 ce                	jne    c0004318 <dir_register+0x13e>
c000434a:	be 07 00 00 00       	mov    esi,0x7
c000434f:	e9 fe 00 00 00       	jmp    c0004452 <dir_register+0x278>
c0004354:	83 f8 04             	cmp    eax,0x4
c0004357:	0f 85 f5 00 00 00    	jne    c0004452 <dir_register+0x278>
c000435d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004361:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004364:	b9 01 00 00 00       	mov    ecx,0x1
c0004369:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000436e:	74 0f                	je     c000437f <dir_register+0x1a5>
c0004370:	b9 0d 00 00 00       	mov    ecx,0xd
c0004375:	8d 47 0c             	lea    eax,[edi+0xc]
c0004378:	31 d2                	xor    edx,edx
c000437a:	f7 f1                	div    ecx
c000437c:	8d 48 01             	lea    ecx,[eax+0x1]
c000437f:	89 ca                	mov    edx,ecx
c0004381:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004385:	89 d8                	mov    eax,ebx
c0004387:	e8 ad f6 ff ff       	call   c0003a39 <dir_alloc>
c000438c:	89 c6                	mov    esi,eax
c000438e:	85 c0                	test   eax,eax
c0004390:	0f 85 bc 00 00 00    	jne    c0004452 <dir_register+0x278>
c0004396:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000439a:	49                   	dec    ecx
c000439b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000439f:	74 6a                	je     c000440b <dir_register+0x231>
c00043a1:	89 c8                	mov    eax,ecx
c00043a3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00043a6:	c1 e0 05             	shl    eax,0x5
c00043a9:	29 c2                	sub    edx,eax
c00043ab:	89 d8                	mov    eax,ebx
c00043ad:	e8 fd ec ff ff       	call   c00030af <dir_sdi>
c00043b2:	89 c6                	mov    esi,eax
c00043b4:	85 c0                	test   eax,eax
c00043b6:	0f 85 96 00 00 00    	jne    c0004452 <dir_register+0x278>
c00043bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00043c0:	e8 4a dc ff ff       	call   c000200f <sum_sfn>
c00043c5:	0f b6 f8             	movzx  edi,al
c00043c8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00043cb:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00043ce:	89 e8                	mov    eax,ebp
c00043d0:	e8 5c df ff ff       	call   c0002331 <move_window>
c00043d5:	89 c6                	mov    esi,eax
c00043d7:	85 c0                	test   eax,eax
c00043d9:	75 77                	jne    c0004452 <dir_register+0x278>
c00043db:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00043e0:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00043e3:	83 ec 0c             	sub    esp,0xc
c00043e6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00043e9:	57                   	push   edi
c00043ea:	e8 e0 da ff ff       	call   c0001ecf <put_lfn>
c00043ef:	31 d2                	xor    edx,edx
c00043f1:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00043f5:	89 d8                	mov    eax,ebx
c00043f7:	e8 0b f2 ff ff       	call   c0003607 <dir_next>
c00043fc:	83 c4 10             	add    esp,0x10
c00043ff:	89 c6                	mov    esi,eax
c0004401:	85 c0                	test   eax,eax
c0004403:	75 4d                	jne    c0004452 <dir_register+0x278>
c0004405:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004409:	75 bd                	jne    c00043c8 <dir_register+0x1ee>
c000440b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000440e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004411:	89 e8                	mov    eax,ebp
c0004413:	e8 19 df ff ff       	call   c0002331 <move_window>
c0004418:	89 c6                	mov    esi,eax
c000441a:	85 c0                	test   eax,eax
c000441c:	75 34                	jne    c0004452 <dir_register+0x278>
c000441e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004421:	b9 20 00 00 00       	mov    ecx,0x20
c0004426:	31 d2                	xor    edx,edx
c0004428:	e8 ba d7 ff ff       	call   c0001be7 <mem_set>
c000442d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004430:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004434:	b9 0b 00 00 00       	mov    ecx,0xb
c0004439:	e8 94 d7 ff ff       	call   c0001bd2 <mem_cpy>
c000443e:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004441:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004444:	83 e0 18             	and    eax,0x18
c0004447:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c000444a:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000444e:	eb 02                	jmp    c0004452 <dir_register+0x278>
c0004450:	89 c6                	mov    esi,eax
c0004452:	83 c4 6c             	add    esp,0x6c
c0004455:	89 f0                	mov    eax,esi
c0004457:	5b                   	pop    ebx
c0004458:	5e                   	pop    esi
c0004459:	5f                   	pop    edi
c000445a:	5d                   	pop    ebp
c000445b:	c3                   	ret    

c000445c <sync_fs>:
c000445c:	56                   	push   esi
c000445d:	53                   	push   ebx
c000445e:	53                   	push   ebx
c000445f:	89 c3                	mov    ebx,eax
c0004461:	e8 37 de ff ff       	call   c000229d <sync_window>
c0004466:	85 c0                	test   eax,eax
c0004468:	0f 85 b1 00 00 00    	jne    c000451f <sync_fs+0xc3>
c000446e:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004471:	0f 85 8e 00 00 00    	jne    c0004505 <sync_fs+0xa9>
c0004477:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000447b:	0f 85 84 00 00 00    	jne    c0004505 <sync_fs+0xa9>
c0004481:	b9 00 02 00 00       	mov    ecx,0x200
c0004486:	8d 73 54             	lea    esi,[ebx+0x54]
c0004489:	31 d2                	xor    edx,edx
c000448b:	89 f0                	mov    eax,esi
c000448d:	e8 55 d7 ff ff       	call   c0001be7 <mem_set>
c0004492:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0004498:	ba 55 aa 00 00       	mov    edx,0xaa55
c000449d:	e8 23 d7 ff ff       	call   c0001bc5 <st_word>
c00044a2:	ba 52 52 61 41       	mov    edx,0x41615252
c00044a7:	89 f0                	mov    eax,esi
c00044a9:	e8 1b d7 ff ff       	call   c0001bc9 <st_dword>
c00044ae:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00044b4:	ba 72 72 41 61       	mov    edx,0x61417272
c00044b9:	e8 0b d7 ff ff       	call   c0001bc9 <st_dword>
c00044be:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00044c1:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00044c7:	e8 fd d6 ff ff       	call   c0001bc9 <st_dword>
c00044cc:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00044cf:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00044d5:	e8 ef d6 ff ff       	call   c0001bc9 <st_dword>
c00044da:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00044dd:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044e0:	83 c0 01             	add    eax,0x1
c00044e3:	83 d2 00             	adc    edx,0x0
c00044e6:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00044e9:	83 ec 0c             	sub    esp,0xc
c00044ec:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00044ef:	6a 01                	push   0x1
c00044f1:	52                   	push   edx
c00044f2:	50                   	push   eax
c00044f3:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00044f7:	56                   	push   esi
c00044f8:	50                   	push   eax
c00044f9:	e8 20 d6 ff ff       	call   c0001b1e <disk_write>
c00044fe:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0004502:	83 c4 20             	add    esp,0x20
c0004505:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004509:	51                   	push   ecx
c000450a:	6a 00                	push   0x0
c000450c:	6a 00                	push   0x0
c000450e:	50                   	push   eax
c000450f:	e8 20 d6 ff ff       	call   c0001b34 <disk_ioctl>
c0004514:	83 c4 10             	add    esp,0x10
c0004517:	85 c0                	test   eax,eax
c0004519:	0f 95 c0             	setne  al
c000451c:	0f b6 c0             	movzx  eax,al
c000451f:	5a                   	pop    edx
c0004520:	5b                   	pop    ebx
c0004521:	5e                   	pop    esi
c0004522:	c3                   	ret    

c0004523 <create_partition>:
c0004523:	55                   	push   ebp
c0004524:	0f b6 c0             	movzx  eax,al
c0004527:	57                   	push   edi
c0004528:	56                   	push   esi
c0004529:	53                   	push   ebx
c000452a:	83 ec 60             	sub    esp,0x60
c000452d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004531:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004535:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004539:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000453d:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004541:	50                   	push   eax
c0004542:	6a 01                	push   0x1
c0004544:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004548:	e8 e7 d5 ff ff       	call   c0001b34 <disk_ioctl>
c000454d:	83 c4 10             	add    esp,0x10
c0004550:	85 c0                	test   eax,eax
c0004552:	74 0a                	je     c000455e <create_partition+0x3b>
c0004554:	b8 01 00 00 00       	mov    eax,0x1
c0004559:	e9 67 05 00 00       	jmp    c0004ac5 <create_partition+0x5a2>
c000455e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004562:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004566:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000456a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000456e:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004573:	0f 86 ed 03 00 00    	jbe    c0004966 <create_partition+0x443>
c0004579:	83 c0 df             	add    eax,0xffffffdf
c000457c:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004584:	83 d2 ff             	adc    edx,0xffffffff
c0004587:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000458b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000458f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004593:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004597:	83 c0 bd             	add    eax,0xffffffbd
c000459a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00045a1:	83 d2 ff             	adc    edx,0xffffffff
c00045a4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00045a8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00045ac:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00045b4:	be 22 00 00 00       	mov    esi,0x22
c00045b9:	31 ff                	xor    edi,edi
c00045bb:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00045c3:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00045cb:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00045d3:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00045d7:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00045dd:	75 0e                	jne    c00045ed <create_partition+0xca>
c00045df:	b9 00 02 00 00       	mov    ecx,0x200
c00045e4:	31 d2                	xor    edx,edx
c00045e6:	89 d8                	mov    eax,ebx
c00045e8:	e8 fa d5 ff ff       	call   c0001be7 <mem_set>
c00045ed:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00045f1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00045f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00045f9:	0b 04 24             	or     eax,DWORD PTR [esp]
c00045fc:	0f 84 23 01 00 00    	je     c0004725 <create_partition+0x202>
c0004602:	89 f0                	mov    eax,esi
c0004604:	89 fa                	mov    edx,edi
c0004606:	05 ff 07 00 00       	add    eax,0x7ff
c000460b:	83 d2 00             	adc    edx,0x0
c000460e:	89 c1                	mov    ecx,eax
c0004610:	89 d7                	mov    edi,edx
c0004612:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004618:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000461c:	89 ce                	mov    esi,ecx
c000461e:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004622:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004626:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c000462a:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000462d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004631:	89 04 24             	mov    DWORD PTR [esp],eax
c0004634:	b8 64 00 00 00       	mov    eax,0x64
c0004639:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000463c:	b8 00 00 00 00       	mov    eax,0x0
c0004641:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004645:	72 41                	jb     c0004688 <create_partition+0x165>
c0004647:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000464b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000464f:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004653:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004658:	01 c1                	add    ecx,eax
c000465a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000465e:	f7 24 24             	mul    DWORD PTR [esp]
c0004661:	6a 00                	push   0x0
c0004663:	01 ca                	add    edx,ecx
c0004665:	6a 64                	push   0x64
c0004667:	52                   	push   edx
c0004668:	50                   	push   eax
c0004669:	e8 b2 e0 01 00       	call   c0022720 <__udivdi3>
c000466e:	83 c4 10             	add    esp,0x10
c0004671:	05 ff 07 00 00       	add    eax,0x7ff
c0004676:	83 d2 00             	adc    edx,0x0
c0004679:	89 c1                	mov    ecx,eax
c000467b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000467f:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004685:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004688:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000468b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000468f:	01 f0                	add    eax,esi
c0004691:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004695:	11 fa                	adc    edx,edi
c0004697:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000469b:	19 d1                	sbb    ecx,edx
c000469d:	73 2e                	jae    c00046cd <create_partition+0x1aa>
c000469f:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00046a3:	89 f8                	mov    eax,edi
c00046a5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00046ac:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00046b0:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046b8:	73 6b                	jae    c0004725 <create_partition+0x202>
c00046ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00046be:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00046c2:	29 f0                	sub    eax,esi
c00046c4:	19 fa                	sbb    edx,edi
c00046c6:	89 04 24             	mov    DWORD PTR [esp],eax
c00046c9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00046cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046d1:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046d4:	74 4f                	je     c0004725 <create_partition+0x202>
c00046d6:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00046d9:	b9 10 00 00 00       	mov    ecx,0x10
c00046de:	ba d0 36 02 c0       	mov    edx,0xc00236d0
c00046e3:	e8 ea d4 ff ff       	call   c0001bd2 <mem_cpy>
c00046e8:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00046ec:	b9 10 00 00 00       	mov    ecx,0x10
c00046f1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00046f5:	e8 2c db ff ff       	call   c0002226 <make_rand>
c00046fa:	89 f2                	mov    edx,esi
c00046fc:	89 f9                	mov    ecx,edi
c00046fe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004702:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004706:	e8 c1 d4 ff ff       	call   c0001bcc <st_qword>
c000470b:	03 34 24             	add    esi,DWORD PTR [esp]
c000470e:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004712:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004716:	89 f2                	mov    edx,esi
c0004718:	89 f9                	mov    ecx,edi
c000471a:	83 c2 ff             	add    edx,0xffffffff
c000471d:	83 d1 ff             	adc    ecx,0xffffffff
c0004720:	e8 a7 d4 ff ff       	call   c0001bcc <st_qword>
c0004725:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004729:	83 e8 80             	sub    eax,0xffffff80
c000472c:	89 c5                	mov    ebp,eax
c000472e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004732:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004738:	75 6b                	jne    c00047a5 <create_partition+0x282>
c000473a:	45                   	inc    ebp
c000473b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000473f:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004744:	e8 39 da ff ff       	call   c0002182 <crc32>
c0004749:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000474f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004753:	75 e5                	jne    c000473a <create_partition+0x217>
c0004755:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004759:	31 d2                	xor    edx,edx
c000475b:	83 ec 0c             	sub    esp,0xc
c000475e:	c1 ed 09             	shr    ebp,0x9
c0004761:	6a 01                	push   0x1
c0004763:	8d 45 02             	lea    eax,[ebp+0x2]
c0004766:	52                   	push   edx
c0004767:	50                   	push   eax
c0004768:	53                   	push   ebx
c0004769:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000476d:	e8 ac d3 ff ff       	call   c0001b1e <disk_write>
c0004772:	83 c4 20             	add    esp,0x20
c0004775:	85 c0                	test   eax,eax
c0004777:	0f 85 d7 fd ff ff    	jne    c0004554 <create_partition+0x31>
c000477d:	83 ec 0c             	sub    esp,0xc
c0004780:	31 d2                	xor    edx,edx
c0004782:	6a 01                	push   0x1
c0004784:	89 e8                	mov    eax,ebp
c0004786:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000478a:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000478e:	52                   	push   edx
c000478f:	50                   	push   eax
c0004790:	53                   	push   ebx
c0004791:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004795:	e8 84 d3 ff ff       	call   c0001b1e <disk_write>
c000479a:	83 c4 20             	add    esp,0x20
c000479d:	85 c0                	test   eax,eax
c000479f:	0f 85 af fd ff ff    	jne    c0004554 <create_partition+0x31>
c00047a5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00047a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00047ad:	3d 00 40 00 00       	cmp    eax,0x4000
c00047b2:	74 0d                	je     c00047c1 <create_partition+0x29e>
c00047b4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00047b8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00047bc:	e9 12 fe ff ff       	jmp    c00045d3 <create_partition+0xb0>
c00047c1:	31 d2                	xor    edx,edx
c00047c3:	b9 00 02 00 00       	mov    ecx,0x200
c00047c8:	89 d8                	mov    eax,ebx
c00047ca:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00047cd:	e8 15 d4 ff ff       	call   c0001be7 <mem_set>
c00047d2:	8d 7b 48             	lea    edi,[ebx+0x48]
c00047d5:	b9 10 00 00 00       	mov    ecx,0x10
c00047da:	ba c0 35 02 c0       	mov    edx,0xc00235c0
c00047df:	89 d8                	mov    eax,ebx
c00047e1:	e8 ec d3 ff ff       	call   c0001bd2 <mem_cpy>
c00047e6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00047ea:	8d 43 58             	lea    eax,[ebx+0x58]
c00047ed:	f7 d2                	not    edx
c00047ef:	e8 d5 d3 ff ff       	call   c0001bc9 <st_dword>
c00047f4:	8d 43 18             	lea    eax,[ebx+0x18]
c00047f7:	31 c9                	xor    ecx,ecx
c00047f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00047fc:	ba 01 00 00 00       	mov    edx,0x1
c0004801:	e8 c6 d3 ff ff       	call   c0001bcc <st_qword>
c0004806:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000480a:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000480e:	83 c2 ff             	add    edx,0xffffffff
c0004811:	89 e8                	mov    eax,ebp
c0004813:	83 d1 ff             	adc    ecx,0xffffffff
c0004816:	e8 b1 d3 ff ff       	call   c0001bcc <st_qword>
c000481b:	31 c9                	xor    ecx,ecx
c000481d:	8d 43 28             	lea    eax,[ebx+0x28]
c0004820:	ba 22 00 00 00       	mov    edx,0x22
c0004825:	e8 a2 d3 ff ff       	call   c0001bcc <st_qword>
c000482a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000482e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004832:	83 c2 de             	add    edx,0xffffffde
c0004835:	8d 43 30             	lea    eax,[ebx+0x30]
c0004838:	83 d1 ff             	adc    ecx,0xffffffff
c000483b:	31 f6                	xor    esi,esi
c000483d:	e8 8a d3 ff ff       	call   c0001bcc <st_qword>
c0004842:	8d 43 54             	lea    eax,[ebx+0x54]
c0004845:	ba 80 00 00 00       	mov    edx,0x80
c000484a:	e8 7a d3 ff ff       	call   c0001bc9 <st_dword>
c000484f:	8d 43 50             	lea    eax,[ebx+0x50]
c0004852:	ba 80 00 00 00       	mov    edx,0x80
c0004857:	e8 6d d3 ff ff       	call   c0001bc9 <st_dword>
c000485c:	ba 02 00 00 00       	mov    edx,0x2
c0004861:	89 f8                	mov    eax,edi
c0004863:	e8 61 d3 ff ff       	call   c0001bc9 <st_dword>
c0004868:	8d 53 38             	lea    edx,[ebx+0x38]
c000486b:	b9 10 00 00 00       	mov    ecx,0x10
c0004870:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004874:	e8 ad d9 ff ff       	call   c0002226 <make_rand>
c0004879:	83 c8 ff             	or     eax,0xffffffff
c000487c:	46                   	inc    esi
c000487d:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004882:	e8 fb d8 ff ff       	call   c0002182 <crc32>
c0004887:	83 fe 5c             	cmp    esi,0x5c
c000488a:	75 f0                	jne    c000487c <create_partition+0x359>
c000488c:	f7 d0                	not    eax
c000488e:	8d 73 10             	lea    esi,[ebx+0x10]
c0004891:	89 c2                	mov    edx,eax
c0004893:	89 f0                	mov    eax,esi
c0004895:	e8 2f d3 ff ff       	call   c0001bc9 <st_dword>
c000489a:	83 ec 0c             	sub    esp,0xc
c000489d:	6a 01                	push   0x1
c000489f:	6a 00                	push   0x0
c00048a1:	6a 01                	push   0x1
c00048a3:	53                   	push   ebx
c00048a4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048a8:	e8 71 d2 ff ff       	call   c0001b1e <disk_write>
c00048ad:	83 c4 20             	add    esp,0x20
c00048b0:	85 c0                	test   eax,eax
c00048b2:	0f 85 9c fc ff ff    	jne    c0004554 <create_partition+0x31>
c00048b8:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048bc:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048c0:	83 c2 ff             	add    edx,0xffffffff
c00048c3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00048c6:	83 d1 ff             	adc    ecx,0xffffffff
c00048c9:	e8 fe d2 ff ff       	call   c0001bcc <st_qword>
c00048ce:	ba 01 00 00 00       	mov    edx,0x1
c00048d3:	31 c9                	xor    ecx,ecx
c00048d5:	89 e8                	mov    eax,ebp
c00048d7:	e8 f0 d2 ff ff       	call   c0001bcc <st_qword>
c00048dc:	89 f8                	mov    eax,edi
c00048de:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00048e2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00048e6:	31 ff                	xor    edi,edi
c00048e8:	e8 df d2 ff ff       	call   c0001bcc <st_qword>
c00048ed:	89 f0                	mov    eax,esi
c00048ef:	31 d2                	xor    edx,edx
c00048f1:	e8 d3 d2 ff ff       	call   c0001bc9 <st_dword>
c00048f6:	83 c8 ff             	or     eax,0xffffffff
c00048f9:	47                   	inc    edi
c00048fa:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00048ff:	e8 7e d8 ff ff       	call   c0002182 <crc32>
c0004904:	83 ff 5c             	cmp    edi,0x5c
c0004907:	75 f0                	jne    c00048f9 <create_partition+0x3d6>
c0004909:	f7 d0                	not    eax
c000490b:	89 c2                	mov    edx,eax
c000490d:	89 f0                	mov    eax,esi
c000490f:	e8 b5 d2 ff ff       	call   c0001bc9 <st_dword>
c0004914:	83 ec 0c             	sub    esp,0xc
c0004917:	6a 01                	push   0x1
c0004919:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000491d:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004921:	83 c0 ff             	add    eax,0xffffffff
c0004924:	83 d2 ff             	adc    edx,0xffffffff
c0004927:	52                   	push   edx
c0004928:	50                   	push   eax
c0004929:	53                   	push   ebx
c000492a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000492e:	e8 eb d1 ff ff       	call   c0001b1e <disk_write>
c0004933:	83 c4 20             	add    esp,0x20
c0004936:	85 c0                	test   eax,eax
c0004938:	0f 85 16 fc ff ff    	jne    c0004554 <create_partition+0x31>
c000493e:	31 d2                	xor    edx,edx
c0004940:	89 d8                	mov    eax,ebx
c0004942:	b9 00 02 00 00       	mov    ecx,0x200
c0004947:	e8 9b d2 ff ff       	call   c0001be7 <mem_set>
c000494c:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004952:	b9 10 00 00 00       	mov    ecx,0x10
c0004957:	ba d0 35 02 c0       	mov    edx,0xc00235d0
c000495c:	e8 71 d2 ff ff       	call   c0001bd2 <mem_cpy>
c0004961:	e9 21 01 00 00       	jmp    c0004a87 <create_partition+0x564>
c0004966:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000496a:	b9 05 00 00 00       	mov    ecx,0x5
c000496f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004972:	bf 08 00 00 00       	mov    edi,0x8
c0004977:	89 f8                	mov    eax,edi
c0004979:	31 d2                	xor    edx,edx
c000497b:	0f b6 f0             	movzx  esi,al
c000497e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004981:	f7 f6                	div    esi
c0004983:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004988:	76 0a                	jbe    c0004994 <create_partition+0x471>
c000498a:	d1 e7                	shl    edi,1
c000498c:	49                   	dec    ecx
c000498d:	75 e8                	jne    c0004977 <create_partition+0x454>
c000498f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004994:	b9 00 02 00 00       	mov    ecx,0x200
c0004999:	31 d2                	xor    edx,edx
c000499b:	89 d8                	mov    eax,ebx
c000499d:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c00049a3:	e8 3f d2 ff ff       	call   c0001be7 <mem_set>
c00049a8:	b9 64 00 00 00       	mov    ecx,0x64
c00049ad:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049b0:	31 d2                	xor    edx,edx
c00049b2:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00049ba:	f7 f1                	div    ecx
c00049bc:	b9 3f 00 00 00       	mov    ecx,0x3f
c00049c1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00049c5:	89 f8                	mov    eax,edi
c00049c7:	0f b6 c0             	movzx  eax,al
c00049ca:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00049ce:	e9 80 00 00 00       	jmp    c0004a53 <create_partition+0x530>
c00049d3:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00049d6:	29 cf                	sub    edi,ecx
c00049d8:	89 ca                	mov    edx,ecx
c00049da:	89 f0                	mov    eax,esi
c00049dc:	bd 3f 00 00 00       	mov    ebp,0x3f
c00049e1:	e8 e3 d1 ff ff       	call   c0001bc9 <st_dword>
c00049e6:	8d 46 04             	lea    eax,[esi+0x4]
c00049e9:	89 fa                	mov    edx,edi
c00049eb:	83 c6 10             	add    esi,0x10
c00049ee:	e8 d6 d1 ff ff       	call   c0001bc9 <st_dword>
c00049f3:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00049f7:	31 d2                	xor    edx,edx
c00049f9:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c00049fc:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004a00:	89 c8                	mov    eax,ecx
c0004a02:	01 f9                	add    ecx,edi
c0004a04:	f7 f5                	div    ebp
c0004a06:	89 d5                	mov    ebp,edx
c0004a08:	31 d2                	xor    edx,edx
c0004a0a:	45                   	inc    ebp
c0004a0b:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a0f:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004a12:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004a15:	89 c2                	mov    edx,eax
c0004a17:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004a1a:	c1 ea 02             	shr    edx,0x2
c0004a1d:	83 e2 c0             	and    edx,0xffffffc0
c0004a20:	09 ea                	or     edx,ebp
c0004a22:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004a27:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004a2a:	31 d2                	xor    edx,edx
c0004a2c:	f7 f5                	div    ebp
c0004a2e:	89 d7                	mov    edi,edx
c0004a30:	31 d2                	xor    edx,edx
c0004a32:	47                   	inc    edi
c0004a33:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a37:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004a3a:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004a3d:	89 c5                	mov    ebp,eax
c0004a3f:	c1 ed 02             	shr    ebp,0x2
c0004a42:	83 e5 c0             	and    ebp,0xffffffc0
c0004a45:	09 ef                	or     edi,ebp
c0004a47:	89 fa                	mov    edx,edi
c0004a49:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004a4c:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004a51:	74 34                	je     c0004a87 <create_partition+0x564>
c0004a53:	85 c9                	test   ecx,ecx
c0004a55:	74 30                	je     c0004a87 <create_partition+0x564>
c0004a57:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004a5a:	76 2b                	jbe    c0004a87 <create_partition+0x564>
c0004a5c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004a60:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004a64:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004a67:	83 ff 64             	cmp    edi,0x64
c0004a6a:	76 4b                	jbe    c0004ab7 <create_partition+0x594>
c0004a6c:	89 f8                	mov    eax,edi
c0004a6e:	01 c8                	add    eax,ecx
c0004a70:	0f 82 5d ff ff ff    	jb     c00049d3 <create_partition+0x4b0>
c0004a76:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004a79:	0f 87 54 ff ff ff    	ja     c00049d3 <create_partition+0x4b0>
c0004a7f:	85 ff                	test   edi,edi
c0004a81:	0f 85 51 ff ff ff    	jne    c00049d8 <create_partition+0x4b5>
c0004a87:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004a8d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004a92:	e8 2e d1 ff ff       	call   c0001bc5 <st_word>
c0004a97:	83 ec 0c             	sub    esp,0xc
c0004a9a:	6a 01                	push   0x1
c0004a9c:	6a 00                	push   0x0
c0004a9e:	6a 00                	push   0x0
c0004aa0:	53                   	push   ebx
c0004aa1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004aa5:	e8 74 d0 ff ff       	call   c0001b1e <disk_write>
c0004aaa:	83 c4 20             	add    esp,0x20
c0004aad:	85 c0                	test   eax,eax
c0004aaf:	0f 95 c0             	setne  al
c0004ab2:	0f b6 c0             	movzx  eax,al
c0004ab5:	eb 0e                	jmp    c0004ac5 <create_partition+0x5a2>
c0004ab7:	74 07                	je     c0004ac0 <create_partition+0x59d>
c0004ab9:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004abe:	eb ac                	jmp    c0004a6c <create_partition+0x549>
c0004ac0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004ac3:	eb a7                	jmp    c0004a6c <create_partition+0x549>
c0004ac5:	83 c4 5c             	add    esp,0x5c
c0004ac8:	5b                   	pop    ebx
c0004ac9:	5e                   	pop    esi
c0004aca:	5f                   	pop    edi
c0004acb:	5d                   	pop    ebp
c0004acc:	c3                   	ret    

c0004acd <get_fileinfo>:
c0004acd:	55                   	push   ebp
c0004ace:	57                   	push   edi
c0004acf:	56                   	push   esi
c0004ad0:	53                   	push   ebx
c0004ad1:	83 ec 1c             	sub    esp,0x1c
c0004ad4:	8b 30                	mov    esi,DWORD PTR [eax]
c0004ad6:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004ada:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004ade:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004ae1:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004ae4:	0f 84 dc 01 00 00    	je     c0004cc6 <get_fileinfo+0x1f9>
c0004aea:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004aed:	75 0f                	jne    c0004afe <get_fileinfo+0x31>
c0004aef:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004af2:	83 c4 1c             	add    esp,0x1c
c0004af5:	5b                   	pop    ebx
c0004af6:	5e                   	pop    esi
c0004af7:	5f                   	pop    edi
c0004af8:	5d                   	pop    ebp
c0004af9:	e9 58 d5 ff ff       	jmp    c0002056 <get_xfileinfo>
c0004afe:	89 d3                	mov    ebx,edx
c0004b00:	89 c6                	mov    esi,eax
c0004b02:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004b06:	74 6a                	je     c0004b72 <get_fileinfo+0xa5>
c0004b08:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004b10:	31 ed                	xor    ebp,ebp
c0004b12:	31 ff                	xor    edi,edi
c0004b14:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004b18:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b1c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004b1f:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004b23:	66 85 d2             	test   dx,dx
c0004b26:	74 3e                	je     c0004b66 <get_fileinfo+0x99>
c0004b28:	66 85 ed             	test   bp,bp
c0004b2b:	75 0c                	jne    c0004b39 <get_fileinfo+0x6c>
c0004b2d:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004b33:	66 3d ff 07          	cmp    ax,0x7ff
c0004b37:	76 22                	jbe    c0004b5b <get_fileinfo+0x8e>
c0004b39:	b9 ff 00 00 00       	mov    ecx,0xff
c0004b3e:	89 e8                	mov    eax,ebp
c0004b40:	29 f9                	sub    ecx,edi
c0004b42:	c1 e0 10             	shl    eax,0x10
c0004b45:	09 d0                	or     eax,edx
c0004b47:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004b4b:	e8 a3 d1 ff ff       	call   c0001cf3 <put_utf>
c0004b50:	84 c0                	test   al,al
c0004b52:	74 10                	je     c0004b64 <get_fileinfo+0x97>
c0004b54:	0f b6 c0             	movzx  eax,al
c0004b57:	31 d2                	xor    edx,edx
c0004b59:	01 c7                	add    edi,eax
c0004b5b:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004b60:	89 d5                	mov    ebp,edx
c0004b62:	eb b0                	jmp    c0004b14 <get_fileinfo+0x47>
c0004b64:	31 ff                	xor    edi,edi
c0004b66:	66 85 ed             	test   bp,bp
c0004b69:	74 02                	je     c0004b6d <get_fileinfo+0xa0>
c0004b6b:	31 ff                	xor    edi,edi
c0004b6d:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004b72:	31 ff                	xor    edi,edi
c0004b74:	31 c9                	xor    ecx,ecx
c0004b76:	83 f9 0a             	cmp    ecx,0xa
c0004b79:	0f 87 ad 00 00 00    	ja     c0004c2c <get_fileinfo+0x15f>
c0004b7f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b82:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004b85:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004b89:	66 83 fa 20          	cmp    dx,0x20
c0004b8d:	0f 84 92 00 00 00    	je     c0004c25 <get_fileinfo+0x158>
c0004b93:	66 83 fa 05          	cmp    dx,0x5
c0004b97:	75 05                	jne    c0004b9e <get_fileinfo+0xd1>
c0004b99:	ba e5 00 00 00       	mov    edx,0xe5
c0004b9e:	83 ff 0b             	cmp    edi,0xb
c0004ba1:	77 0b                	ja     c0004bae <get_fileinfo+0xe1>
c0004ba3:	83 fd 09             	cmp    ebp,0x9
c0004ba6:	75 06                	jne    c0004bae <get_fileinfo+0xe1>
c0004ba8:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004bad:	47                   	inc    edi
c0004bae:	0f b7 c2             	movzx  eax,dx
c0004bb1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004bb5:	e8 6d d0 ff ff       	call   c0001c27 <dbc_1st>
c0004bba:	85 c0                	test   eax,eax
c0004bbc:	74 2f                	je     c0004bed <get_fileinfo+0x120>
c0004bbe:	83 fd 08             	cmp    ebp,0x8
c0004bc1:	74 2a                	je     c0004bed <get_fileinfo+0x120>
c0004bc3:	83 fd 0b             	cmp    ebp,0xb
c0004bc6:	74 25                	je     c0004bed <get_fileinfo+0x120>
c0004bc8:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004bcb:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004bcf:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004bd3:	e8 52 d0 ff ff       	call   c0001c2a <dbc_2nd>
c0004bd8:	85 c0                	test   eax,eax
c0004bda:	74 11                	je     c0004bed <get_fileinfo+0x120>
c0004bdc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004be0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004be5:	c1 e2 08             	shl    edx,0x8
c0004be8:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004beb:	09 c2                	or     edx,eax
c0004bed:	0f b7 d2             	movzx  edx,dx
c0004bf0:	50                   	push   eax
c0004bf1:	50                   	push   eax
c0004bf2:	68 b5 01 00 00       	push   0x1b5
c0004bf7:	52                   	push   edx
c0004bf8:	e8 87 3a 00 00       	call   c0008684 <ff_oem2uni>
c0004bfd:	83 c4 10             	add    esp,0x10
c0004c00:	66 85 c0             	test   ax,ax
c0004c03:	75 04                	jne    c0004c09 <get_fileinfo+0x13c>
c0004c05:	31 ff                	xor    edi,edi
c0004c07:	eb 23                	jmp    c0004c2c <get_fileinfo+0x15f>
c0004c09:	b9 0c 00 00 00       	mov    ecx,0xc
c0004c0e:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004c12:	29 f9                	sub    ecx,edi
c0004c14:	0f b7 c0             	movzx  eax,ax
c0004c17:	e8 d7 d0 ff ff       	call   c0001cf3 <put_utf>
c0004c1c:	84 c0                	test   al,al
c0004c1e:	74 e5                	je     c0004c05 <get_fileinfo+0x138>
c0004c20:	0f b6 c0             	movzx  eax,al
c0004c23:	01 c7                	add    edi,eax
c0004c25:	89 e9                	mov    ecx,ebp
c0004c27:	e9 4a ff ff ff       	jmp    c0004b76 <get_fileinfo+0xa9>
c0004c2c:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004c31:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004c35:	75 54                	jne    c0004c8b <get_fileinfo+0x1be>
c0004c37:	85 ff                	test   edi,edi
c0004c39:	75 0b                	jne    c0004c46 <get_fileinfo+0x179>
c0004c3b:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004c3f:	ba 01 00 00 00       	mov    edx,0x1
c0004c44:	eb 33                	jmp    c0004c79 <get_fileinfo+0x1ac>
c0004c46:	b1 08                	mov    cl,0x8
c0004c48:	31 d2                	xor    edx,edx
c0004c4a:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004c50:	84 c0                	test   al,al
c0004c52:	74 25                	je     c0004c79 <get_fileinfo+0x1ac>
c0004c54:	66 83 f8 2e          	cmp    ax,0x2e
c0004c58:	74 16                	je     c0004c70 <get_fileinfo+0x1a3>
c0004c5a:	8d 78 bf             	lea    edi,[eax-0x41]
c0004c5d:	66 83 ff 19          	cmp    di,0x19
c0004c61:	77 0f                	ja     c0004c72 <get_fileinfo+0x1a5>
c0004c63:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004c66:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004c69:	74 07                	je     c0004c72 <get_fileinfo+0x1a5>
c0004c6b:	83 c0 20             	add    eax,0x20
c0004c6e:	eb 02                	jmp    c0004c72 <get_fileinfo+0x1a5>
c0004c70:	b1 10                	mov    cl,0x10
c0004c72:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004c76:	42                   	inc    edx
c0004c77:	eb d1                	jmp    c0004c4a <get_fileinfo+0x17d>
c0004c79:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004c7e:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c81:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004c85:	75 04                	jne    c0004c8b <get_fileinfo+0x1be>
c0004c87:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004c8b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c8e:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004c91:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004c94:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c97:	83 c0 1c             	add    eax,0x1c
c0004c9a:	e8 c1 ce ff ff       	call   c0001b60 <ld_dword>
c0004c9f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004ca6:	89 03                	mov    DWORD PTR [ebx],eax
c0004ca8:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cab:	83 c0 16             	add    eax,0x16
c0004cae:	e8 a0 ce ff ff       	call   c0001b53 <ld_word>
c0004cb3:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004cb7:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cba:	83 c0 18             	add    eax,0x18
c0004cbd:	e8 91 ce ff ff       	call   c0001b53 <ld_word>
c0004cc2:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004cc6:	83 c4 1c             	add    esp,0x1c
c0004cc9:	5b                   	pop    ebx
c0004cca:	5e                   	pop    esi
c0004ccb:	5f                   	pop    edi
c0004ccc:	5d                   	pop    ebp
c0004ccd:	c3                   	ret    

c0004cce <ld_clust.isra.0>:
c0004cce:	56                   	push   esi
c0004ccf:	89 c6                	mov    esi,eax
c0004cd1:	53                   	push   ebx
c0004cd2:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004cd5:	89 d3                	mov    ebx,edx
c0004cd7:	e8 77 ce ff ff       	call   c0001b53 <ld_word>
c0004cdc:	0f b7 c8             	movzx  ecx,ax
c0004cdf:	89 f0                	mov    eax,esi
c0004ce1:	3c 03                	cmp    al,0x3
c0004ce3:	75 0d                	jne    c0004cf2 <ld_clust.isra.0+0x24>
c0004ce5:	8d 43 14             	lea    eax,[ebx+0x14]
c0004ce8:	e8 66 ce ff ff       	call   c0001b53 <ld_word>
c0004ced:	c1 e0 10             	shl    eax,0x10
c0004cf0:	09 c1                	or     ecx,eax
c0004cf2:	89 c8                	mov    eax,ecx
c0004cf4:	5b                   	pop    ebx
c0004cf5:	5e                   	pop    esi
c0004cf6:	c3                   	ret    

c0004cf7 <st_clust.isra.1>:
c0004cf7:	56                   	push   esi
c0004cf8:	89 c6                	mov    esi,eax
c0004cfa:	53                   	push   ebx
c0004cfb:	89 d3                	mov    ebx,edx
c0004cfd:	0f b7 d1             	movzx  edx,cx
c0004d00:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004d03:	e8 bd ce ff ff       	call   c0001bc5 <st_word>
c0004d08:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004d0b:	75 0f                	jne    c0004d1c <st_clust.isra.1+0x25>
c0004d0d:	c1 e9 10             	shr    ecx,0x10
c0004d10:	8d 43 14             	lea    eax,[ebx+0x14]
c0004d13:	89 ca                	mov    edx,ecx
c0004d15:	5b                   	pop    ebx
c0004d16:	5e                   	pop    esi
c0004d17:	e9 a9 ce ff ff       	jmp    c0001bc5 <st_word>
c0004d1c:	5b                   	pop    ebx
c0004d1d:	5e                   	pop    esi
c0004d1e:	c3                   	ret    

c0004d1f <init_alloc_info.isra.2>:
c0004d1f:	56                   	push   esi
c0004d20:	53                   	push   ebx
c0004d21:	89 c6                	mov    esi,eax
c0004d23:	89 d3                	mov    ebx,edx
c0004d25:	51                   	push   ecx
c0004d26:	8b 00                	mov    eax,DWORD PTR [eax]
c0004d28:	83 c0 34             	add    eax,0x34
c0004d2b:	e8 30 ce ff ff       	call   c0001b60 <ld_dword>
c0004d30:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004d33:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d35:	83 c0 38             	add    eax,0x38
c0004d38:	e8 3b ce ff ff       	call   c0001b78 <ld_qword>
c0004d3d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004d40:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004d43:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d45:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004d48:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004d4f:	83 e0 02             	and    eax,0x2
c0004d52:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004d55:	5b                   	pop    ebx
c0004d56:	5b                   	pop    ebx
c0004d57:	5e                   	pop    esi
c0004d58:	c3                   	ret    

c0004d59 <follow_path>:
c0004d59:	56                   	push   esi
c0004d5a:	53                   	push   ebx
c0004d5b:	89 c3                	mov    ebx,eax
c0004d5d:	83 ec 14             	sub    esp,0x14
c0004d60:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004d64:	8b 30                	mov    esi,DWORD PTR [eax]
c0004d66:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d6a:	8a 10                	mov    dl,BYTE PTR [eax]
c0004d6c:	80 fa 5c             	cmp    dl,0x5c
c0004d6f:	75 07                	jne    c0004d78 <follow_path+0x1f>
c0004d71:	40                   	inc    eax
c0004d72:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d76:	eb ee                	jmp    c0004d66 <follow_path+0xd>
c0004d78:	80 fa 2f             	cmp    dl,0x2f
c0004d7b:	74 f4                	je     c0004d71 <follow_path+0x18>
c0004d7d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004d84:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004d8b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004d8e:	77 52                	ja     c0004de2 <follow_path+0x89>
c0004d90:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004d94:	31 d2                	xor    edx,edx
c0004d96:	89 d8                	mov    eax,ebx
c0004d98:	e8 12 e3 ff ff       	call   c00030af <dir_sdi>
c0004d9d:	eb 7c                	jmp    c0004e1b <follow_path+0xc2>
c0004d9f:	89 d8                	mov    eax,ebx
c0004da1:	e8 6e f2 ff ff       	call   c0004014 <dir_find>
c0004da6:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004da9:	85 c0                	test   eax,eax
c0004dab:	75 46                	jne    c0004df3 <follow_path+0x9a>
c0004dad:	80 e2 04             	and    dl,0x4
c0004db0:	75 69                	jne    c0004e1b <follow_path+0xc2>
c0004db2:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004db6:	74 5e                	je     c0004e16 <follow_path+0xbd>
c0004db8:	8a 06                	mov    al,BYTE PTR [esi]
c0004dba:	3c 04                	cmp    al,0x4
c0004dbc:	75 41                	jne    c0004dff <follow_path+0xa6>
c0004dbe:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004dc1:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004dc5:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004dc8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004dcb:	30 c0                	xor    al,al
c0004dcd:	09 d0                	or     eax,edx
c0004dcf:	89 da                	mov    edx,ebx
c0004dd1:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004dd4:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004dd7:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004dda:	8d 46 10             	lea    eax,[esi+0x10]
c0004ddd:	e8 3d ff ff ff       	call   c0004d1f <init_alloc_info.isra.2>
c0004de2:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004de6:	89 d8                	mov    eax,ebx
c0004de8:	e8 a9 ed ff ff       	call   c0003b96 <create_name>
c0004ded:	85 c0                	test   eax,eax
c0004def:	74 ae                	je     c0004d9f <follow_path+0x46>
c0004df1:	eb 28                	jmp    c0004e1b <follow_path+0xc2>
c0004df3:	83 f8 04             	cmp    eax,0x4
c0004df6:	75 23                	jne    c0004e1b <follow_path+0xc2>
c0004df8:	80 e2 04             	and    dl,0x4
c0004dfb:	74 19                	je     c0004e16 <follow_path+0xbd>
c0004dfd:	eb 1c                	jmp    c0004e1b <follow_path+0xc2>
c0004dff:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004e02:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004e08:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004e0c:	e8 bd fe ff ff       	call   c0004cce <ld_clust.isra.0>
c0004e11:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e14:	eb cc                	jmp    c0004de2 <follow_path+0x89>
c0004e16:	b8 05 00 00 00       	mov    eax,0x5
c0004e1b:	83 c4 14             	add    esp,0x14
c0004e1e:	5b                   	pop    ebx
c0004e1f:	5e                   	pop    esi
c0004e20:	c3                   	ret    

c0004e21 <f_mount>:
c0004e21:	53                   	push   ebx
c0004e22:	83 ec 18             	sub    esp,0x18
c0004e25:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004e29:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004e2d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e31:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004e35:	e8 fb d2 ff ff       	call   c0002135 <get_ldnumber>
c0004e3a:	89 c2                	mov    edx,eax
c0004e3c:	b8 0b 00 00 00       	mov    eax,0xb
c0004e41:	85 d2                	test   edx,edx
c0004e43:	78 39                	js     c0004e7e <f_mount+0x5d>
c0004e45:	8b 04 95 a0 7e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8160]
c0004e4c:	85 c0                	test   eax,eax
c0004e4e:	74 03                	je     c0004e53 <f_mount+0x32>
c0004e50:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e57:	85 c0                	test   eax,eax
c0004e59:	74 03                	je     c0004e5e <f_mount+0x3d>
c0004e5b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e62:	89 04 95 a0 7e 02 c0 	mov    DWORD PTR [edx*4-0x3ffd8160],eax
c0004e69:	31 c0                	xor    eax,eax
c0004e6b:	84 db                	test   bl,bl
c0004e6d:	74 0f                	je     c0004e7e <f_mount+0x5d>
c0004e6f:	31 c9                	xor    ecx,ecx
c0004e71:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004e75:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e79:	e8 65 d7 ff ff       	call   c00025e3 <mount_volume>
c0004e7e:	83 c4 18             	add    esp,0x18
c0004e81:	5b                   	pop    ebx
c0004e82:	c3                   	ret    

c0004e83 <f_open>:
c0004e83:	55                   	push   ebp
c0004e84:	bd 09 00 00 00       	mov    ebp,0x9
c0004e89:	57                   	push   edi
c0004e8a:	56                   	push   esi
c0004e8b:	53                   	push   ebx
c0004e8c:	83 ec 7c             	sub    esp,0x7c
c0004e8f:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004e96:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004e9d:	85 db                	test   ebx,ebx
c0004e9f:	0f 84 10 04 00 00    	je     c00052b5 <f_open+0x432>
c0004ea5:	89 fe                	mov    esi,edi
c0004ea7:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004eab:	83 e6 3f             	and    esi,0x3f
c0004eae:	89 f0                	mov    eax,esi
c0004eb0:	0f b6 c8             	movzx  ecx,al
c0004eb3:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004eba:	e8 24 d7 ff ff       	call   c00025e3 <mount_volume>
c0004ebf:	89 c5                	mov    ebp,eax
c0004ec1:	85 c0                	test   eax,eax
c0004ec3:	0f 85 e6 03 00 00    	jne    c00052af <f_open+0x42c>
c0004ec9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ecd:	bd 11 00 00 00       	mov    ebp,0x11
c0004ed2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ed6:	83 ec 0c             	sub    esp,0xc
c0004ed9:	68 60 04 00 00       	push   0x460
c0004ede:	e8 d9 36 00 00       	call   c00085bc <ff_memalloc>
c0004ee3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ee7:	83 c4 10             	add    esp,0x10
c0004eea:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004eef:	0f 84 c0 03 00 00    	je     c00052b5 <f_open+0x432>
c0004ef5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ef9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004efd:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004f03:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004f06:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004f09:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004f10:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f14:	e8 40 fe ff ff       	call   c0004d59 <follow_path>
c0004f19:	89 c5                	mov    ebp,eax
c0004f1b:	85 c0                	test   eax,eax
c0004f1d:	75 0c                	jne    c0004f2b <f_open+0xa8>
c0004f1f:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004f24:	79 05                	jns    c0004f2b <f_open+0xa8>
c0004f26:	bd 06 00 00 00       	mov    ebp,0x6
c0004f2b:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004f31:	0f 84 84 01 00 00    	je     c00050bb <f_open+0x238>
c0004f37:	85 ed                	test   ebp,ebp
c0004f39:	74 20                	je     c0004f5b <f_open+0xd8>
c0004f3b:	83 fd 04             	cmp    ebp,0x4
c0004f3e:	0f 85 58 03 00 00    	jne    c000529c <f_open+0x419>
c0004f44:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f48:	83 ce 08             	or     esi,0x8
c0004f4b:	e8 8a f2 ff ff       	call   c00041da <dir_register>
c0004f50:	89 c5                	mov    ebp,eax
c0004f52:	85 c0                	test   eax,eax
c0004f54:	74 2f                	je     c0004f85 <f_open+0x102>
c0004f56:	e9 41 03 00 00       	jmp    c000529c <f_open+0x419>
c0004f5b:	bd 07 00 00 00       	mov    ebp,0x7
c0004f60:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004f65:	0f 85 31 03 00 00    	jne    c000529c <f_open+0x419>
c0004f6b:	bd 08 00 00 00       	mov    ebp,0x8
c0004f70:	f7 c7 04 00 00 00    	test   edi,0x4
c0004f76:	0f 85 20 03 00 00    	jne    c000529c <f_open+0x419>
c0004f7c:	83 e7 08             	and    edi,0x8
c0004f7f:	0f 84 65 01 00 00    	je     c00050ea <f_open+0x267>
c0004f85:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f89:	8a 02                	mov    al,BYTE PTR [edx]
c0004f8b:	3c 04                	cmp    al,0x4
c0004f8d:	0f 85 97 00 00 00    	jne    c000502a <f_open+0x1a7>
c0004f93:	8d 42 10             	lea    eax,[edx+0x10]
c0004f96:	89 13                	mov    DWORD PTR [ebx],edx
c0004f98:	89 da                	mov    edx,ebx
c0004f9a:	e8 80 fd ff ff       	call   c0004d1f <init_alloc_info.isra.2>
c0004f9f:	31 d2                	xor    edx,edx
c0004fa1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa5:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004faa:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fad:	83 c0 02             	add    eax,0x2
c0004fb0:	e8 32 cc ff ff       	call   c0001be7 <mem_set>
c0004fb5:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004fba:	31 d2                	xor    edx,edx
c0004fbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fc0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fc3:	83 c0 26             	add    eax,0x26
c0004fc6:	e8 1c cc ff ff       	call   c0001be7 <mem_set>
c0004fcb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fcf:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004fd2:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004fd6:	ba 00 00 21 50       	mov    edx,0x50210000
c0004fdb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fde:	83 c0 08             	add    eax,0x8
c0004fe1:	e8 e3 cb ff ff       	call   c0001bc9 <st_dword>
c0004fe6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fed:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004ff1:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004ff5:	e8 b7 ea ff ff       	call   c0003ab1 <store_xdir>
c0004ffa:	89 c5                	mov    ebp,eax
c0004ffc:	85 c0                	test   eax,eax
c0004ffe:	0f 85 98 02 00 00    	jne    c000529c <f_open+0x419>
c0005004:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005007:	85 d2                	test   edx,edx
c0005009:	0f 84 db 00 00 00    	je     c00050ea <f_open+0x267>
c000500f:	31 c9                	xor    ecx,ecx
c0005011:	89 d8                	mov    eax,ebx
c0005013:	e8 8e e3 ff ff       	call   c00033a6 <remove_chain>
c0005018:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000501c:	89 c5                	mov    ebp,eax
c000501e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005021:	48                   	dec    eax
c0005022:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005025:	e9 b8 00 00 00       	jmp    c00050e2 <f_open+0x25f>
c000502a:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000502e:	89 ea                	mov    edx,ebp
c0005030:	e8 99 fc ff ff       	call   c0004cce <ld_clust.isra.0>
c0005035:	ba 00 00 21 50       	mov    edx,0x50210000
c000503a:	89 c7                	mov    edi,eax
c000503c:	8d 45 0e             	lea    eax,[ebp+0xe]
c000503f:	e8 85 cb ff ff       	call   c0001bc9 <st_dword>
c0005044:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005048:	31 c9                	xor    ecx,ecx
c000504a:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c000504e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005052:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0005056:	e8 9c fc ff ff       	call   c0004cf7 <st_clust.isra.1>
c000505b:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000505f:	31 d2                	xor    edx,edx
c0005061:	83 c0 1c             	add    eax,0x1c
c0005064:	e8 60 cb ff ff       	call   c0001bc9 <st_dword>
c0005069:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000506d:	85 ff                	test   edi,edi
c000506f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005073:	74 75                	je     c00050ea <f_open+0x267>
c0005075:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005079:	31 c9                	xor    ecx,ecx
c000507b:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000507e:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005081:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005085:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005089:	89 fa                	mov    edx,edi
c000508b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000508f:	e8 12 e3 ff ff       	call   c00033a6 <remove_chain>
c0005094:	89 c5                	mov    ebp,eax
c0005096:	85 c0                	test   eax,eax
c0005098:	0f 85 fe 01 00 00    	jne    c000529c <f_open+0x419>
c000509e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00050a2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00050a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050aa:	4f                   	dec    edi
c00050ab:	e8 81 d2 ff ff       	call   c0002331 <move_window>
c00050b0:	89 c5                	mov    ebp,eax
c00050b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b6:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00050b9:	eb 27                	jmp    c00050e2 <f_open+0x25f>
c00050bb:	85 ed                	test   ebp,ebp
c00050bd:	0f 85 d9 01 00 00    	jne    c000529c <f_open+0x419>
c00050c3:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00050c7:	bd 04 00 00 00       	mov    ebp,0x4
c00050cc:	a8 10                	test   al,0x10
c00050ce:	0f 85 c8 01 00 00    	jne    c000529c <f_open+0x419>
c00050d4:	83 e7 02             	and    edi,0x2
c00050d7:	74 11                	je     c00050ea <f_open+0x267>
c00050d9:	bd 07 00 00 00       	mov    ebp,0x7
c00050de:	a8 01                	test   al,0x1
c00050e0:	eb 02                	jmp    c00050e4 <f_open+0x261>
c00050e2:	85 ed                	test   ebp,ebp
c00050e4:	0f 85 b2 01 00 00    	jne    c000529c <f_open+0x419>
c00050ea:	f7 c6 08 00 00 00    	test   esi,0x8
c00050f0:	74 03                	je     c00050f5 <f_open+0x272>
c00050f2:	83 ce 40             	or     esi,0x40
c00050f5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00050f9:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c00050fc:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c00050ff:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0005102:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0005105:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005109:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c000510c:	8a 02                	mov    al,BYTE PTR [edx]
c000510e:	3c 04                	cmp    al,0x4
c0005110:	75 2a                	jne    c000513c <f_open+0x2b9>
c0005112:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005116:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c000511b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000511e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005122:	30 c0                	xor    al,al
c0005124:	09 c8                	or     eax,ecx
c0005126:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005129:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000512d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005130:	8d 42 10             	lea    eax,[edx+0x10]
c0005133:	89 da                	mov    edx,ebx
c0005135:	e8 e5 fb ff ff       	call   c0004d1f <init_alloc_info.isra.2>
c000513a:	eb 1c                	jmp    c0005158 <f_open+0x2d5>
c000513c:	89 fa                	mov    edx,edi
c000513e:	e8 8b fb ff ff       	call   c0004cce <ld_clust.isra.0>
c0005143:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005146:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005149:	e8 12 ca ff ff       	call   c0001b60 <ld_dword>
c000514e:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005155:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005158:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000515c:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005163:	89 03                	mov    DWORD PTR [ebx],eax
c0005165:	31 d2                	xor    edx,edx
c0005167:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000516b:	b9 00 02 00 00       	mov    ecx,0x200
c0005170:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005174:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005178:	89 f0                	mov    eax,esi
c000517a:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005181:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005184:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000518b:	8d 43 50             	lea    eax,[ebx+0x50]
c000518e:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005195:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000519c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00051a0:	e8 42 ca ff ff       	call   c0001be7 <mem_set>
c00051a5:	83 e6 20             	and    esi,0x20
c00051a8:	75 07                	jne    c00051b1 <f_open+0x32e>
c00051aa:	31 ed                	xor    ebp,ebp
c00051ac:	e9 eb 00 00 00       	jmp    c000529c <f_open+0x419>
c00051b1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051b4:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051b7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00051bb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00051bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051c3:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00051c7:	74 e1                	je     c00051aa <f_open+0x327>
c00051c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00051cd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00051d1:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00051d4:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00051d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051db:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00051de:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00051e2:	31 ff                	xor    edi,edi
c00051e4:	c1 e5 09             	shl    ebp,0x9
c00051e7:	89 ee                	mov    esi,ebp
c00051e9:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00051ed:	89 f8                	mov    eax,edi
c00051ef:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00051f3:	73 22                	jae    c0005217 <f_open+0x394>
c00051f5:	89 d8                	mov    eax,ebx
c00051f7:	e8 bd dc ff ff       	call   c0002eb9 <get_fat>
c00051fc:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0005200:	89 c2                	mov    edx,eax
c0005202:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005206:	83 f8 01             	cmp    eax,0x1
c0005209:	76 10                	jbe    c000521b <f_open+0x398>
c000520b:	83 f8 ff             	cmp    eax,0xffffffff
c000520e:	75 d9                	jne    c00051e9 <f_open+0x366>
c0005210:	bd 01 00 00 00       	mov    ebp,0x1
c0005215:	eb 09                	jmp    c0005220 <f_open+0x39d>
c0005217:	31 ed                	xor    ebp,ebp
c0005219:	eb 05                	jmp    c0005220 <f_open+0x39d>
c000521b:	bd 02 00 00 00       	mov    ebp,0x2
c0005220:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005223:	85 ed                	test   ebp,ebp
c0005225:	75 75                	jne    c000529c <f_open+0x419>
c0005227:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000522b:	25 ff 01 00 00       	and    eax,0x1ff
c0005230:	0f 84 74 ff ff ff    	je     c00051aa <f_open+0x327>
c0005236:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000523a:	bd 02 00 00 00       	mov    ebp,0x2
c000523f:	89 c8                	mov    eax,ecx
c0005241:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005245:	e8 a2 cb ff ff       	call   c0001dec <clst2sect>
c000524a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000524e:	89 d7                	mov    edi,edx
c0005250:	09 c7                	or     edi,eax
c0005252:	74 48                	je     c000529c <f_open+0x419>
c0005254:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005258:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000525c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005264:	0f ac fe 09          	shrd   esi,edi,0x9
c0005268:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000526c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005270:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005273:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005277:	83 ec 0c             	sub    esp,0xc
c000527a:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000527d:	6a 01                	push   0x1
c000527f:	52                   	push   edx
c0005280:	50                   	push   eax
c0005281:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005285:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005289:	50                   	push   eax
c000528a:	e8 79 c8 ff ff       	call   c0001b08 <disk_read>
c000528f:	83 c4 20             	add    esp,0x20
c0005292:	85 c0                	test   eax,eax
c0005294:	0f 95 c0             	setne  al
c0005297:	0f b6 c0             	movzx  eax,al
c000529a:	89 c5                	mov    ebp,eax
c000529c:	83 ec 0c             	sub    esp,0xc
c000529f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00052a3:	e8 2c 33 00 00       	call   c00085d4 <ff_memfree>
c00052a8:	83 c4 10             	add    esp,0x10
c00052ab:	85 ed                	test   ebp,ebp
c00052ad:	74 06                	je     c00052b5 <f_open+0x432>
c00052af:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00052b5:	83 c4 7c             	add    esp,0x7c
c00052b8:	89 e8                	mov    eax,ebp
c00052ba:	5b                   	pop    ebx
c00052bb:	5e                   	pop    esi
c00052bc:	5f                   	pop    edi
c00052bd:	5d                   	pop    ebp
c00052be:	c3                   	ret    

c00052bf <f_read>:
c00052bf:	55                   	push   ebp
c00052c0:	57                   	push   edi
c00052c1:	56                   	push   esi
c00052c2:	53                   	push   ebx
c00052c3:	83 ec 2c             	sub    esp,0x2c
c00052c6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00052ca:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052ce:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00052d4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052d8:	89 d8                	mov    eax,ebx
c00052da:	e8 77 cf ff ff       	call   c0002256 <validate>
c00052df:	89 c5                	mov    ebp,eax
c00052e1:	85 c0                	test   eax,eax
c00052e3:	0f 85 4c 02 00 00    	jne    c0005535 <f_read+0x276>
c00052e9:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00052ed:	85 ed                	test   ebp,ebp
c00052ef:	0f 85 40 02 00 00    	jne    c0005535 <f_read+0x276>
c00052f5:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00052f9:	0f 84 31 02 00 00    	je     c0005530 <f_read+0x271>
c00052ff:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005302:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005305:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005308:	bf 00 00 00 00       	mov    edi,0x0
c000530d:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005310:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005314:	89 d1                	mov    ecx,edx
c0005316:	19 f9                	sbb    ecx,edi
c0005318:	0f 83 cf 00 00 00    	jae    c00053ed <f_read+0x12e>
c000531e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005322:	e9 c6 00 00 00       	jmp    c00053ed <f_read+0x12e>
c0005327:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000532a:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000532d:	89 d0                	mov    eax,edx
c000532f:	25 ff 01 00 00       	and    eax,0x1ff
c0005334:	0f 85 c9 01 00 00    	jne    c0005503 <f_read+0x244>
c000533a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000533e:	89 d6                	mov    esi,edx
c0005340:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005344:	89 cf                	mov    edi,ecx
c0005346:	48                   	dec    eax
c0005347:	0f ac fe 09          	shrd   esi,edi,0x9
c000534b:	21 f0                	and    eax,esi
c000534d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005351:	0f 84 a6 00 00 00    	je     c00053fd <f_read+0x13e>
c0005357:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000535b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000535e:	89 c8                	mov    eax,ecx
c0005360:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005363:	e8 84 ca ff ff       	call   c0001dec <clst2sect>
c0005368:	89 d7                	mov    edi,edx
c000536a:	09 c7                	or     edi,eax
c000536c:	0f 84 b4 00 00 00    	je     c0005426 <f_read+0x167>
c0005372:	31 ff                	xor    edi,edi
c0005374:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005378:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000537b:	01 c6                	add    esi,eax
c000537d:	11 d7                	adc    edi,edx
c000537f:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005387:	0f 86 fd 00 00 00    	jbe    c000548a <f_read+0x1cb>
c000538d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005391:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005395:	c1 e8 09             	shr    eax,0x9
c0005398:	89 04 24             	mov    DWORD PTR [esp],eax
c000539b:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000539f:	03 14 24             	add    edx,DWORD PTR [esp]
c00053a2:	39 c2                	cmp    edx,eax
c00053a4:	76 07                	jbe    c00053ad <f_read+0xee>
c00053a6:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00053aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00053ad:	83 ec 0c             	sub    esp,0xc
c00053b0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00053b4:	57                   	push   edi
c00053b5:	56                   	push   esi
c00053b6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00053ba:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053be:	50                   	push   eax
c00053bf:	e8 44 c7 ff ff       	call   c0001b08 <disk_read>
c00053c4:	83 c4 20             	add    esp,0x20
c00053c7:	85 c0                	test   eax,eax
c00053c9:	75 6e                	jne    c0005439 <f_read+0x17a>
c00053cb:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00053cf:	78 7e                	js     c000544f <f_read+0x190>
c00053d1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00053d4:	c1 e6 09             	shl    esi,0x9
c00053d7:	31 ff                	xor    edi,edi
c00053d9:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00053dd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053e1:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00053e5:	01 30                	add    DWORD PTR [eax],esi
c00053e7:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00053ea:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00053ed:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00053f2:	0f 85 2f ff ff ff    	jne    c0005327 <f_read+0x68>
c00053f8:	e9 38 01 00 00       	jmp    c0005535 <f_read+0x276>
c00053fd:	89 c8                	mov    eax,ecx
c00053ff:	09 d0                	or     eax,edx
c0005401:	75 05                	jne    c0005408 <f_read+0x149>
c0005403:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005406:	eb 19                	jmp    c0005421 <f_read+0x162>
c0005408:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000540c:	74 09                	je     c0005417 <f_read+0x158>
c000540e:	89 d8                	mov    eax,ebx
c0005410:	e8 f8 c9 ff ff       	call   c0001e0d <clmt_clust>
c0005415:	eb 0a                	jmp    c0005421 <f_read+0x162>
c0005417:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000541a:	89 d8                	mov    eax,ebx
c000541c:	e8 98 da ff ff       	call   c0002eb9 <get_fat>
c0005421:	83 f8 01             	cmp    eax,0x1
c0005424:	77 0e                	ja     c0005434 <f_read+0x175>
c0005426:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000542a:	bd 02 00 00 00       	mov    ebp,0x2
c000542f:	e9 01 01 00 00       	jmp    c0005535 <f_read+0x276>
c0005434:	83 f8 ff             	cmp    eax,0xffffffff
c0005437:	75 0e                	jne    c0005447 <f_read+0x188>
c0005439:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000543d:	bd 01 00 00 00       	mov    ebp,0x1
c0005442:	e9 ee 00 00 00       	jmp    c0005535 <f_read+0x276>
c0005447:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000544a:	e9 08 ff ff ff       	jmp    c0005357 <f_read+0x98>
c000544f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005452:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005455:	29 f0                	sub    eax,esi
c0005457:	19 fa                	sbb    edx,edi
c0005459:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000545c:	89 d7                	mov    edi,edx
c000545e:	ba 00 00 00 00       	mov    edx,0x0
c0005463:	89 f9                	mov    ecx,edi
c0005465:	19 d1                	sbb    ecx,edx
c0005467:	0f 83 64 ff ff ff    	jae    c00053d1 <f_read+0x112>
c000546d:	89 c7                	mov    edi,eax
c000546f:	8d 53 50             	lea    edx,[ebx+0x50]
c0005472:	c1 e7 09             	shl    edi,0x9
c0005475:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005479:	b9 00 02 00 00       	mov    ecx,0x200
c000547e:	01 f8                	add    eax,edi
c0005480:	e8 4d c7 ff ff       	call   c0001bd2 <mem_cpy>
c0005485:	e9 47 ff ff ff       	jmp    c00053d1 <f_read+0x112>
c000548a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000548d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005490:	89 04 24             	mov    DWORD PTR [esp],eax
c0005493:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005497:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000549b:	75 05                	jne    c00054a2 <f_read+0x1e3>
c000549d:	39 34 24             	cmp    DWORD PTR [esp],esi
c00054a0:	74 5b                	je     c00054fd <f_read+0x23e>
c00054a2:	8d 43 50             	lea    eax,[ebx+0x50]
c00054a5:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054a9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054ad:	79 2a                	jns    c00054d9 <f_read+0x21a>
c00054af:	83 ec 0c             	sub    esp,0xc
c00054b2:	6a 01                	push   0x1
c00054b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054bc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054c0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054c4:	50                   	push   eax
c00054c5:	e8 54 c6 ff ff       	call   c0001b1e <disk_write>
c00054ca:	83 c4 20             	add    esp,0x20
c00054cd:	85 c0                	test   eax,eax
c00054cf:	0f 85 64 ff ff ff    	jne    c0005439 <f_read+0x17a>
c00054d5:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00054d9:	83 ec 0c             	sub    esp,0xc
c00054dc:	6a 01                	push   0x1
c00054de:	57                   	push   edi
c00054df:	56                   	push   esi
c00054e0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054e4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00054e8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00054ec:	50                   	push   eax
c00054ed:	e8 16 c6 ff ff       	call   c0001b08 <disk_read>
c00054f2:	83 c4 20             	add    esp,0x20
c00054f5:	85 c0                	test   eax,eax
c00054f7:	0f 85 3c ff ff ff    	jne    c0005439 <f_read+0x17a>
c00054fd:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005500:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005503:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005506:	ba 00 02 00 00       	mov    edx,0x200
c000550b:	25 ff 01 00 00       	and    eax,0x1ff
c0005510:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005514:	29 c2                	sub    edx,eax
c0005516:	39 d6                	cmp    esi,edx
c0005518:	76 02                	jbe    c000551c <f_read+0x25d>
c000551a:	89 d6                	mov    esi,edx
c000551c:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005520:	89 f1                	mov    ecx,esi
c0005522:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005526:	e8 a7 c6 ff ff       	call   c0001bd2 <mem_cpy>
c000552b:	e9 a7 fe ff ff       	jmp    c00053d7 <f_read+0x118>
c0005530:	bd 07 00 00 00       	mov    ebp,0x7
c0005535:	83 c4 2c             	add    esp,0x2c
c0005538:	89 e8                	mov    eax,ebp
c000553a:	5b                   	pop    ebx
c000553b:	5e                   	pop    esi
c000553c:	5f                   	pop    edi
c000553d:	5d                   	pop    ebp
c000553e:	c3                   	ret    

c000553f <f_write>:
c000553f:	55                   	push   ebp
c0005540:	57                   	push   edi
c0005541:	56                   	push   esi
c0005542:	53                   	push   ebx
c0005543:	83 ec 2c             	sub    esp,0x2c
c0005546:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000554a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000554e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005554:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005558:	89 d8                	mov    eax,ebx
c000555a:	e8 f7 cc ff ff       	call   c0002256 <validate>
c000555f:	89 c5                	mov    ebp,eax
c0005561:	85 c0                	test   eax,eax
c0005563:	0f 85 86 02 00 00    	jne    c00057ef <f_write+0x2b0>
c0005569:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000556d:	85 ed                	test   ebp,ebp
c000556f:	0f 85 7a 02 00 00    	jne    c00057ef <f_write+0x2b0>
c0005575:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005579:	0f 84 6b 02 00 00    	je     c00057ea <f_write+0x2ab>
c000557f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005583:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005586:	0f 84 43 01 00 00    	je     c00056cf <f_write+0x190>
c000558c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000558f:	89 c1                	mov    ecx,eax
c0005591:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005595:	0f 83 34 01 00 00    	jae    c00056cf <f_write+0x190>
c000559b:	f7 d0                	not    eax
c000559d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00055a1:	e9 29 01 00 00       	jmp    c00056cf <f_write+0x190>
c00055a6:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00055a9:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00055ac:	89 d0                	mov    eax,edx
c00055ae:	25 ff 01 00 00       	and    eax,0x1ff
c00055b3:	0f 85 00 02 00 00    	jne    c00057b9 <f_write+0x27a>
c00055b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055bd:	89 d6                	mov    esi,edx
c00055bf:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00055c3:	89 cf                	mov    edi,ecx
c00055c5:	48                   	dec    eax
c00055c6:	0f ac fe 09          	shrd   esi,edi,0x9
c00055ca:	21 f0                	and    eax,esi
c00055cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055d0:	0f 84 06 01 00 00    	je     c00056dc <f_write+0x19d>
c00055d6:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055da:	0f 88 6e 01 00 00    	js     c000574e <f_write+0x20f>
c00055e0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00055e4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055e7:	89 c8                	mov    eax,ecx
c00055e9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00055ed:	e8 fa c7 ff ff       	call   c0001dec <clst2sect>
c00055f2:	89 d1                	mov    ecx,edx
c00055f4:	09 c1                	or     ecx,eax
c00055f6:	0f 84 1c 01 00 00    	je     c0005718 <f_write+0x1d9>
c00055fc:	31 ff                	xor    edi,edi
c00055fe:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005602:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005606:	01 c6                	add    esi,eax
c0005608:	11 d7                	adc    edi,edx
c000560a:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005612:	0f 86 63 01 00 00    	jbe    c000577b <f_write+0x23c>
c0005618:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000561c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005620:	c1 e8 09             	shr    eax,0x9
c0005623:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005627:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000562b:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000562f:	39 c2                	cmp    edx,eax
c0005631:	76 08                	jbe    c000563b <f_write+0xfc>
c0005633:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005637:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000563b:	83 ec 0c             	sub    esp,0xc
c000563e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005642:	57                   	push   edi
c0005643:	56                   	push   esi
c0005644:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005648:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000564c:	50                   	push   eax
c000564d:	e8 cc c4 ff ff       	call   c0001b1e <disk_write>
c0005652:	83 c4 20             	add    esp,0x20
c0005655:	85 c0                	test   eax,eax
c0005657:	0f 85 ce 00 00 00    	jne    c000572b <f_write+0x1ec>
c000565d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005660:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005663:	29 f0                	sub    eax,esi
c0005665:	19 fa                	sbb    edx,edi
c0005667:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000566b:	89 d7                	mov    edi,edx
c000566d:	ba 00 00 00 00       	mov    edx,0x0
c0005672:	89 f9                	mov    ecx,edi
c0005674:	19 d1                	sbb    ecx,edx
c0005676:	73 1c                	jae    c0005694 <f_write+0x155>
c0005678:	89 c7                	mov    edi,eax
c000567a:	b9 00 02 00 00       	mov    ecx,0x200
c000567f:	c1 e7 09             	shl    edi,0x9
c0005682:	8d 43 50             	lea    eax,[ebx+0x50]
c0005685:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005689:	89 fa                	mov    edx,edi
c000568b:	e8 42 c5 ff ff       	call   c0001bd2 <mem_cpy>
c0005690:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005694:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005698:	c1 e6 09             	shl    esi,0x9
c000569b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000569f:	31 ff                	xor    edi,edi
c00056a1:	01 30                	add    DWORD PTR [eax],esi
c00056a3:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00056a7:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00056ab:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00056ae:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00056b1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00056b4:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00056b7:	89 c1                	mov    ecx,eax
c00056b9:	39 f2                	cmp    edx,esi
c00056bb:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00056be:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00056c1:	19 f9                	sbb    ecx,edi
c00056c3:	73 04                	jae    c00056c9 <f_write+0x18a>
c00056c5:	89 f2                	mov    edx,esi
c00056c7:	89 f8                	mov    eax,edi
c00056c9:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00056cc:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00056cf:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00056d4:	0f 85 cc fe ff ff    	jne    c00055a6 <f_write+0x67>
c00056da:	eb 2e                	jmp    c000570a <f_write+0x1cb>
c00056dc:	89 c8                	mov    eax,ecx
c00056de:	09 d0                	or     eax,edx
c00056e0:	75 0b                	jne    c00056ed <f_write+0x1ae>
c00056e2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056e5:	31 d2                	xor    edx,edx
c00056e7:	85 c0                	test   eax,eax
c00056e9:	75 28                	jne    c0005713 <f_write+0x1d4>
c00056eb:	eb 12                	jmp    c00056ff <f_write+0x1c0>
c00056ed:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00056f1:	74 09                	je     c00056fc <f_write+0x1bd>
c00056f3:	89 d8                	mov    eax,ebx
c00056f5:	e8 13 c7 ff ff       	call   c0001e0d <clmt_clust>
c00056fa:	eb 0a                	jmp    c0005706 <f_write+0x1c7>
c00056fc:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056ff:	89 d8                	mov    eax,ebx
c0005701:	e8 a1 da ff ff       	call   c00031a7 <create_chain>
c0005706:	85 c0                	test   eax,eax
c0005708:	75 09                	jne    c0005713 <f_write+0x1d4>
c000570a:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000570e:	e9 dc 00 00 00       	jmp    c00057ef <f_write+0x2b0>
c0005713:	83 f8 01             	cmp    eax,0x1
c0005716:	75 0e                	jne    c0005726 <f_write+0x1e7>
c0005718:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000571c:	bd 02 00 00 00       	mov    ebp,0x2
c0005721:	e9 c9 00 00 00       	jmp    c00057ef <f_write+0x2b0>
c0005726:	83 f8 ff             	cmp    eax,0xffffffff
c0005729:	75 0e                	jne    c0005739 <f_write+0x1fa>
c000572b:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000572f:	bd 01 00 00 00       	mov    ebp,0x1
c0005734:	e9 b6 00 00 00       	jmp    c00057ef <f_write+0x2b0>
c0005739:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000573c:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005740:	0f 85 90 fe ff ff    	jne    c00055d6 <f_write+0x97>
c0005746:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005749:	e9 88 fe ff ff       	jmp    c00055d6 <f_write+0x97>
c000574e:	83 ec 0c             	sub    esp,0xc
c0005751:	8d 43 50             	lea    eax,[ebx+0x50]
c0005754:	6a 01                	push   0x1
c0005756:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005759:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000575c:	50                   	push   eax
c000575d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005761:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005765:	50                   	push   eax
c0005766:	e8 b3 c3 ff ff       	call   c0001b1e <disk_write>
c000576b:	83 c4 20             	add    esp,0x20
c000576e:	85 c0                	test   eax,eax
c0005770:	75 b9                	jne    c000572b <f_write+0x1ec>
c0005772:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005776:	e9 65 fe ff ff       	jmp    c00055e0 <f_write+0xa1>
c000577b:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000577e:	75 05                	jne    c0005785 <f_write+0x246>
c0005780:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005783:	74 2e                	je     c00057b3 <f_write+0x274>
c0005785:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005788:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000578b:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000578e:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005791:	73 20                	jae    c00057b3 <f_write+0x274>
c0005793:	83 ec 0c             	sub    esp,0xc
c0005796:	8d 43 50             	lea    eax,[ebx+0x50]
c0005799:	6a 01                	push   0x1
c000579b:	57                   	push   edi
c000579c:	56                   	push   esi
c000579d:	50                   	push   eax
c000579e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00057a2:	50                   	push   eax
c00057a3:	e8 60 c3 ff ff       	call   c0001b08 <disk_read>
c00057a8:	83 c4 20             	add    esp,0x20
c00057ab:	85 c0                	test   eax,eax
c00057ad:	0f 85 78 ff ff ff    	jne    c000572b <f_write+0x1ec>
c00057b3:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00057b6:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00057b9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00057bc:	ba 00 02 00 00       	mov    edx,0x200
c00057c1:	25 ff 01 00 00       	and    eax,0x1ff
c00057c6:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00057ca:	29 c2                	sub    edx,eax
c00057cc:	39 d6                	cmp    esi,edx
c00057ce:	76 02                	jbe    c00057d2 <f_write+0x293>
c00057d0:	89 d6                	mov    esi,edx
c00057d2:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00057d6:	89 f1                	mov    ecx,esi
c00057d8:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00057dc:	e8 f1 c3 ff ff       	call   c0001bd2 <mem_cpy>
c00057e1:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00057e5:	e9 b1 fe ff ff       	jmp    c000569b <f_write+0x15c>
c00057ea:	bd 07 00 00 00       	mov    ebp,0x7
c00057ef:	83 c4 2c             	add    esp,0x2c
c00057f2:	89 e8                	mov    eax,ebp
c00057f4:	5b                   	pop    ebx
c00057f5:	5e                   	pop    esi
c00057f6:	5f                   	pop    edi
c00057f7:	5d                   	pop    ebp
c00057f8:	c3                   	ret    

c00057f9 <f_sync>:
c00057f9:	56                   	push   esi
c00057fa:	53                   	push   ebx
c00057fb:	83 ec 64             	sub    esp,0x64
c00057fe:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0005802:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005806:	89 d8                	mov    eax,ebx
c0005808:	e8 49 ca ff ff       	call   c0002256 <validate>
c000580d:	85 c0                	test   eax,eax
c000580f:	0f 85 ba 01 00 00    	jne    c00059cf <f_sync+0x1d6>
c0005815:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005818:	f6 c2 40             	test   dl,0x40
c000581b:	0f 84 ae 01 00 00    	je     c00059cf <f_sync+0x1d6>
c0005821:	84 d2                	test   dl,dl
c0005823:	79 33                	jns    c0005858 <f_sync+0x5f>
c0005825:	83 ec 0c             	sub    esp,0xc
c0005828:	8d 43 50             	lea    eax,[ebx+0x50]
c000582b:	6a 01                	push   0x1
c000582d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005830:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005833:	50                   	push   eax
c0005834:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005838:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000583c:	50                   	push   eax
c000583d:	e8 dc c2 ff ff       	call   c0001b1e <disk_write>
c0005842:	83 c4 20             	add    esp,0x20
c0005845:	89 c2                	mov    edx,eax
c0005847:	b8 01 00 00 00       	mov    eax,0x1
c000584c:	85 d2                	test   edx,edx
c000584e:	0f 85 7b 01 00 00    	jne    c00059cf <f_sync+0x1d6>
c0005854:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005858:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000585c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000585f:	0f 85 11 01 00 00    	jne    c0005976 <f_sync+0x17d>
c0005865:	89 d8                	mov    eax,ebx
c0005867:	e8 13 d6 ff ff       	call   c0002e7f <fill_first_frag>
c000586c:	85 c0                	test   eax,eax
c000586e:	0f 85 5b 01 00 00    	jne    c00059cf <f_sync+0x1d6>
c0005874:	83 c9 ff             	or     ecx,0xffffffff
c0005877:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000587a:	89 d8                	mov    eax,ebx
c000587c:	e8 c9 d5 ff ff       	call   c0002e4a <fill_last_frag>
c0005881:	85 c0                	test   eax,eax
c0005883:	0f 85 46 01 00 00    	jne    c00059cf <f_sync+0x1d6>
c0005889:	83 ec 0c             	sub    esp,0xc
c000588c:	68 60 04 00 00       	push   0x460
c0005891:	e8 26 2d 00 00       	call   c00085bc <ff_memalloc>
c0005896:	83 c4 10             	add    esp,0x10
c0005899:	89 c6                	mov    esi,eax
c000589b:	b8 11 00 00 00       	mov    eax,0x11
c00058a0:	85 f6                	test   esi,esi
c00058a2:	0f 84 27 01 00 00    	je     c00059cf <f_sync+0x1d6>
c00058a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058ac:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00058b2:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00058b5:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00058b8:	89 da                	mov    edx,ebx
c00058ba:	8d 44 24 14          	lea    eax,[esp+0x14]
c00058be:	e8 af df ff ff       	call   c0003872 <load_obj_xdir>
c00058c3:	85 c0                	test   eax,eax
c00058c5:	0f 85 95 00 00 00    	jne    c0005960 <f_sync+0x167>
c00058cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058cf:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00058d2:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00058d6:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00058d9:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00058dc:	83 ca 01             	or     edx,0x1
c00058df:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00058e2:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00058e5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00058e8:	83 c0 34             	add    eax,0x34
c00058eb:	e8 d9 c2 ff ff       	call   c0001bc9 <st_dword>
c00058f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058f4:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00058f7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00058fa:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00058fd:	83 c0 38             	add    eax,0x38
c0005900:	e8 c7 c2 ff ff       	call   c0001bcc <st_qword>
c0005905:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005908:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000590c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000590f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005912:	83 c0 28             	add    eax,0x28
c0005915:	e8 b2 c2 ff ff       	call   c0001bcc <st_qword>
c000591a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000591e:	ba 00 00 21 50       	mov    edx,0x50210000
c0005923:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005926:	83 c0 0c             	add    eax,0xc
c0005929:	e8 9b c2 ff ff       	call   c0001bc9 <st_dword>
c000592e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005932:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005935:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005939:	31 d2                	xor    edx,edx
c000593b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000593e:	83 c0 10             	add    eax,0x10
c0005941:	e8 83 c2 ff ff       	call   c0001bc9 <st_dword>
c0005946:	8d 44 24 14          	lea    eax,[esp+0x14]
c000594a:	e8 62 e1 ff ff       	call   c0003ab1 <store_xdir>
c000594f:	85 c0                	test   eax,eax
c0005951:	75 0d                	jne    c0005960 <f_sync+0x167>
c0005953:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005957:	e8 00 eb ff ff       	call   c000445c <sync_fs>
c000595c:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005960:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005964:	83 ec 0c             	sub    esp,0xc
c0005967:	56                   	push   esi
c0005968:	e8 67 2c 00 00       	call   c00085d4 <ff_memfree>
c000596d:	83 c4 10             	add    esp,0x10
c0005970:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005974:	eb 59                	jmp    c00059cf <f_sync+0x1d6>
c0005976:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005979:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c000597c:	e8 b0 c9 ff ff       	call   c0002331 <move_window>
c0005981:	85 c0                	test   eax,eax
c0005983:	75 4a                	jne    c00059cf <f_sync+0x1d6>
c0005985:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005988:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c000598c:	89 f2                	mov    edx,esi
c000598e:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005991:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005993:	e8 5f f3 ff ff       	call   c0004cf7 <st_clust.isra.1>
c0005998:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000599b:	8d 46 1c             	lea    eax,[esi+0x1c]
c000599e:	e8 26 c2 ff ff       	call   c0001bc9 <st_dword>
c00059a3:	8d 46 16             	lea    eax,[esi+0x16]
c00059a6:	ba 00 00 21 50       	mov    edx,0x50210000
c00059ab:	e8 19 c2 ff ff       	call   c0001bc9 <st_dword>
c00059b0:	8d 46 12             	lea    eax,[esi+0x12]
c00059b3:	31 d2                	xor    edx,edx
c00059b5:	e8 0b c2 ff ff       	call   c0001bc5 <st_word>
c00059ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059be:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00059c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c6:	e8 91 ea ff ff       	call   c000445c <sync_fs>
c00059cb:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00059cf:	83 c4 64             	add    esp,0x64
c00059d2:	5b                   	pop    ebx
c00059d3:	5e                   	pop    esi
c00059d4:	c3                   	ret    

c00059d5 <f_close>:
c00059d5:	53                   	push   ebx
c00059d6:	83 ec 24             	sub    esp,0x24
c00059d9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00059dd:	53                   	push   ebx
c00059de:	e8 16 fe ff ff       	call   c00057f9 <f_sync>
c00059e3:	83 c4 10             	add    esp,0x10
c00059e6:	85 c0                	test   eax,eax
c00059e8:	75 15                	jne    c00059ff <f_close+0x2a>
c00059ea:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00059ee:	89 d8                	mov    eax,ebx
c00059f0:	e8 61 c8 ff ff       	call   c0002256 <validate>
c00059f5:	85 c0                	test   eax,eax
c00059f7:	75 06                	jne    c00059ff <f_close+0x2a>
c00059f9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00059ff:	83 c4 18             	add    esp,0x18
c0005a02:	5b                   	pop    ebx
c0005a03:	c3                   	ret    

c0005a04 <f_lseek>:
c0005a04:	55                   	push   ebp
c0005a05:	57                   	push   edi
c0005a06:	56                   	push   esi
c0005a07:	53                   	push   ebx
c0005a08:	83 ec 3c             	sub    esp,0x3c
c0005a0b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005a0f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005a13:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005a17:	89 04 24             	mov    DWORD PTR [esp],eax
c0005a1a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005a1e:	89 d8                	mov    eax,ebx
c0005a20:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005a24:	e8 2d c8 ff ff       	call   c0002256 <validate>
c0005a29:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a2d:	85 c0                	test   eax,eax
c0005a2f:	0f 85 7a 04 00 00    	jne    c0005eaf <f_lseek+0x4ab>
c0005a35:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005a39:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a3d:	85 c0                	test   eax,eax
c0005a3f:	0f 85 6a 04 00 00    	jne    c0005eaf <f_lseek+0x4ab>
c0005a45:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005a49:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005a4c:	74 0c                	je     c0005a5a <f_lseek+0x56>
c0005a4e:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005a51:	85 c0                	test   eax,eax
c0005a53:	75 1f                	jne    c0005a74 <f_lseek+0x70>
c0005a55:	e9 b5 01 00 00       	jmp    c0005c0f <f_lseek+0x20b>
c0005a5a:	83 c9 ff             	or     ecx,0xffffffff
c0005a5d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005a60:	89 d8                	mov    eax,ebx
c0005a62:	e8 e3 d3 ff ff       	call   c0002e4a <fill_last_frag>
c0005a67:	85 c0                	test   eax,eax
c0005a69:	74 e3                	je     c0005a4e <f_lseek+0x4a>
c0005a6b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a6f:	e9 3b 04 00 00       	jmp    c0005eaf <f_lseek+0x4ab>
c0005a74:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005a79:	0f 85 ac 00 00 00    	jne    c0005b2b <f_lseek+0x127>
c0005a7f:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005a83:	0f 85 a2 00 00 00    	jne    c0005b2b <f_lseek+0x127>
c0005a89:	8d 78 04             	lea    edi,[eax+0x4]
c0005a8c:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005a8f:	8b 00                	mov    eax,DWORD PTR [eax]
c0005a91:	be 02 00 00 00       	mov    esi,0x2
c0005a96:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005a9a:	85 ed                	test   ebp,ebp
c0005a9c:	74 73                	je     c0005b11 <f_lseek+0x10d>
c0005a9e:	89 e9                	mov    ecx,ebp
c0005aa0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005aa7:	ff 04 24             	inc    DWORD PTR [esp]
c0005aaa:	89 ca                	mov    edx,ecx
c0005aac:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005ab0:	89 d8                	mov    eax,ebx
c0005ab2:	e8 02 d4 ff ff       	call   c0002eb9 <get_fat>
c0005ab7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005abb:	83 f8 01             	cmp    eax,0x1
c0005abe:	77 11                	ja     c0005ad1 <f_lseek+0xcd>
c0005ac0:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005ac4:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005acc:	e9 de 03 00 00       	jmp    c0005eaf <f_lseek+0x4ab>
c0005ad1:	83 f8 ff             	cmp    eax,0xffffffff
c0005ad4:	75 11                	jne    c0005ae7 <f_lseek+0xe3>
c0005ad6:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005ada:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005ae2:	e9 c8 03 00 00       	jmp    c0005eaf <f_lseek+0x4ab>
c0005ae7:	8d 51 01             	lea    edx,[ecx+0x1]
c0005aea:	89 c1                	mov    ecx,eax
c0005aec:	39 c2                	cmp    edx,eax
c0005aee:	74 b7                	je     c0005aa7 <f_lseek+0xa3>
c0005af0:	83 c6 02             	add    esi,0x2
c0005af3:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005af7:	72 0b                	jb     c0005b04 <f_lseek+0x100>
c0005af9:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005afc:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005aff:	89 0f                	mov    DWORD PTR [edi],ecx
c0005b01:	83 c7 08             	add    edi,0x8
c0005b04:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005b08:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005b0b:	76 04                	jbe    c0005b11 <f_lseek+0x10d>
c0005b0d:	89 c5                	mov    ebp,eax
c0005b0f:	eb 8d                	jmp    c0005a9e <f_lseek+0x9a>
c0005b11:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b14:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005b18:	89 30                	mov    DWORD PTR [eax],esi
c0005b1a:	0f 87 87 03 00 00    	ja     c0005ea7 <f_lseek+0x4a3>
c0005b20:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005b26:	e9 84 03 00 00       	jmp    c0005eaf <f_lseek+0x4ab>
c0005b2b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005b2e:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005b31:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b35:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b39:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b3d:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005b40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b44:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005b48:	73 0f                	jae    c0005b59 <f_lseek+0x155>
c0005b4a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b4d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b51:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b55:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b59:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b5d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b61:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005b64:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b6b:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005b6f:	0f 84 3a 03 00 00    	je     c0005eaf <f_lseek+0x4ab>
c0005b75:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005b79:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005b7d:	83 c6 ff             	add    esi,0xffffffff
c0005b80:	89 d8                	mov    eax,ebx
c0005b82:	83 d7 ff             	adc    edi,0xffffffff
c0005b85:	89 f2                	mov    edx,esi
c0005b87:	89 f9                	mov    ecx,edi
c0005b89:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005b8d:	89 34 24             	mov    DWORD PTR [esp],esi
c0005b90:	e8 78 c2 ff ff       	call   c0001e0d <clmt_clust>
c0005b95:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005b99:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005b9c:	89 c2                	mov    edx,eax
c0005b9e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005ba2:	89 c8                	mov    eax,ecx
c0005ba4:	e8 43 c2 ff ff       	call   c0001dec <clst2sect>
c0005ba9:	89 d7                	mov    edi,edx
c0005bab:	09 c7                	or     edi,eax
c0005bad:	0f 84 0d ff ff ff    	je     c0005ac0 <f_lseek+0xbc>
c0005bb3:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005bb7:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005bbd:	0f 84 ec 02 00 00    	je     c0005eaf <f_lseek+0x4ab>
c0005bc3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005bc7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bcb:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005bce:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005bd2:	0f ac fe 09          	shrd   esi,edi,0x9
c0005bd6:	4d                   	dec    ebp
c0005bd7:	31 ff                	xor    edi,edi
c0005bd9:	21 ee                	and    esi,ebp
c0005bdb:	01 c6                	add    esi,eax
c0005bdd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005be0:	11 d7                	adc    edi,edx
c0005be2:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005be5:	39 fa                	cmp    edx,edi
c0005be7:	75 08                	jne    c0005bf1 <f_lseek+0x1ed>
c0005be9:	39 f0                	cmp    eax,esi
c0005beb:	0f 84 be 02 00 00    	je     c0005eaf <f_lseek+0x4ab>
c0005bf1:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005bf4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005bf8:	0f 89 80 02 00 00    	jns    c0005e7e <f_lseek+0x47a>
c0005bfe:	83 ec 0c             	sub    esp,0xc
c0005c01:	6a 01                	push   0x1
c0005c03:	52                   	push   edx
c0005c04:	50                   	push   eax
c0005c05:	55                   	push   ebp
c0005c06:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005c0a:	e9 5a 02 00 00       	jmp    c0005e69 <f_lseek+0x465>
c0005c0f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c13:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005c16:	74 16                	je     c0005c2e <f_lseek+0x22a>
c0005c18:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005c1d:	76 0f                	jbe    c0005c2e <f_lseek+0x22a>
c0005c1f:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005c26:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c2e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005c31:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005c34:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005c37:	89 c7                	mov    edi,eax
c0005c39:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005c3d:	73 0d                	jae    c0005c4c <f_lseek+0x248>
c0005c3f:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005c43:	75 07                	jne    c0005c4c <f_lseek+0x248>
c0005c45:	89 14 24             	mov    DWORD PTR [esp],edx
c0005c48:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005c4c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005c4f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005c52:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c56:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005c5d:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005c64:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005c67:	75 09                	jne    c0005c72 <f_lseek+0x26e>
c0005c69:	31 f6                	xor    esi,esi
c0005c6b:	31 ff                	xor    edi,edi
c0005c6d:	e9 af 01 00 00       	jmp    c0005e21 <f_lseek+0x41d>
c0005c72:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005c76:	89 d7                	mov    edi,edx
c0005c78:	c1 e1 09             	shl    ecx,0x9
c0005c7b:	09 c7                	or     edi,eax
c0005c7d:	89 cd                	mov    ebp,ecx
c0005c7f:	74 6d                	je     c0005cee <f_lseek+0x2ea>
c0005c81:	83 c0 ff             	add    eax,0xffffffff
c0005c84:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c88:	83 d2 ff             	adc    edx,0xffffffff
c0005c8b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c92:	83 c0 ff             	add    eax,0xffffffff
c0005c95:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c99:	83 d2 ff             	adc    edx,0xffffffff
c0005c9c:	31 ff                	xor    edi,edi
c0005c9e:	57                   	push   edi
c0005c9f:	51                   	push   ecx
c0005ca0:	52                   	push   edx
c0005ca1:	50                   	push   eax
c0005ca2:	e8 79 ca 01 00       	call   c0022720 <__udivdi3>
c0005ca7:	83 c4 10             	add    esp,0x10
c0005caa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005cae:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005cb2:	57                   	push   edi
c0005cb3:	55                   	push   ebp
c0005cb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cb8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cbc:	e8 5f ca 01 00       	call   c0022720 <__udivdi3>
c0005cc1:	83 c4 10             	add    esp,0x10
c0005cc4:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005cc8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005ccc:	19 d1                	sbb    ecx,edx
c0005cce:	72 1e                	jb     c0005cee <f_lseek+0x2ea>
c0005cd0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005cd4:	89 e9                	mov    ecx,ebp
c0005cd6:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005cd9:	f7 d9                	neg    ecx
c0005cdb:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005cde:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005ce2:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005ce5:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005ce8:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005cec:	eb 28                	jmp    c0005d16 <f_lseek+0x312>
c0005cee:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005cf1:	85 c0                	test   eax,eax
c0005cf3:	75 1e                	jne    c0005d13 <f_lseek+0x30f>
c0005cf5:	31 d2                	xor    edx,edx
c0005cf7:	89 d8                	mov    eax,ebx
c0005cf9:	e8 a9 d4 ff ff       	call   c00031a7 <create_chain>
c0005cfe:	83 f8 01             	cmp    eax,0x1
c0005d01:	0f 84 b9 fd ff ff    	je     c0005ac0 <f_lseek+0xbc>
c0005d07:	83 f8 ff             	cmp    eax,0xffffffff
c0005d0a:	0f 84 c6 fd ff ff    	je     c0005ad6 <f_lseek+0xd2>
c0005d10:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005d13:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005d16:	85 c0                	test   eax,eax
c0005d18:	0f 84 4b ff ff ff    	je     c0005c69 <f_lseek+0x265>
c0005d1e:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005d22:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005d2a:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005d2d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d31:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005d34:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005d37:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d3b:	0f 83 9d 00 00 00    	jae    c0005dde <f_lseek+0x3da>
c0005d41:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d45:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d49:	29 34 24             	sub    DWORD PTR [esp],esi
c0005d4c:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005d50:	01 f2                	add    edx,esi
c0005d52:	11 f9                	adc    ecx,edi
c0005d54:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005d58:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005d5c:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005d5f:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005d62:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005d65:	f6 c1 02             	test   cl,0x2
c0005d68:	74 35                	je     c0005d9f <f_lseek+0x39b>
c0005d6a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005d6e:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005d71:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005d74:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005d78:	73 16                	jae    c0005d90 <f_lseek+0x38c>
c0005d7a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005d7e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005d82:	88 ca                	mov    dl,cl
c0005d84:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005d87:	83 ca 40             	or     edx,0x40
c0005d8a:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005d8d:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005d90:	89 c2                	mov    edx,eax
c0005d92:	89 d8                	mov    eax,ebx
c0005d94:	e8 0e d4 ff ff       	call   c00031a7 <create_chain>
c0005d99:	85 c0                	test   eax,eax
c0005d9b:	75 0b                	jne    c0005da8 <f_lseek+0x3a4>
c0005d9d:	eb 30                	jmp    c0005dcf <f_lseek+0x3cb>
c0005d9f:	89 c2                	mov    edx,eax
c0005da1:	89 d8                	mov    eax,ebx
c0005da3:	e8 11 d1 ff ff       	call   c0002eb9 <get_fat>
c0005da8:	83 f8 ff             	cmp    eax,0xffffffff
c0005dab:	0f 84 25 fd ff ff    	je     c0005ad6 <f_lseek+0xd2>
c0005db1:	83 f8 01             	cmp    eax,0x1
c0005db4:	0f 86 06 fd ff ff    	jbe    c0005ac0 <f_lseek+0xbc>
c0005dba:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005dbe:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005dc1:	0f 86 f9 fc ff ff    	jbe    c0005ac0 <f_lseek+0xbc>
c0005dc7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dca:	e9 5b ff ff ff       	jmp    c0005d2a <f_lseek+0x326>
c0005dcf:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005dd6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005dde:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005de1:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005de5:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005de8:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005deb:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005dee:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005df4:	0f 84 6f fe ff ff    	je     c0005c69 <f_lseek+0x265>
c0005dfa:	89 c2                	mov    edx,eax
c0005dfc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005e00:	e8 e7 bf ff ff       	call   c0001dec <clst2sect>
c0005e05:	89 d7                	mov    edi,edx
c0005e07:	09 c7                	or     edi,eax
c0005e09:	0f 84 b1 fc ff ff    	je     c0005ac0 <f_lseek+0xbc>
c0005e0f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005e13:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005e16:	0f ac fe 09          	shrd   esi,edi,0x9
c0005e1a:	c1 ef 09             	shr    edi,0x9
c0005e1d:	01 c6                	add    esi,eax
c0005e1f:	11 d7                	adc    edi,edx
c0005e21:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005e24:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005e27:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005e2a:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005e2d:	19 d1                	sbb    ecx,edx
c0005e2f:	73 0a                	jae    c0005e3b <f_lseek+0x437>
c0005e31:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005e34:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005e37:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005e3b:	a9 ff 01 00 00       	test   eax,0x1ff
c0005e40:	74 6d                	je     c0005eaf <f_lseek+0x4ab>
c0005e42:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005e45:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005e48:	39 fa                	cmp    edx,edi
c0005e4a:	75 04                	jne    c0005e50 <f_lseek+0x44c>
c0005e4c:	39 f0                	cmp    eax,esi
c0005e4e:	74 5f                	je     c0005eaf <f_lseek+0x4ab>
c0005e50:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005e53:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005e57:	79 25                	jns    c0005e7e <f_lseek+0x47a>
c0005e59:	83 ec 0c             	sub    esp,0xc
c0005e5c:	6a 01                	push   0x1
c0005e5e:	52                   	push   edx
c0005e5f:	50                   	push   eax
c0005e60:	55                   	push   ebp
c0005e61:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005e65:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005e69:	50                   	push   eax
c0005e6a:	e8 af bc ff ff       	call   c0001b1e <disk_write>
c0005e6f:	83 c4 20             	add    esp,0x20
c0005e72:	85 c0                	test   eax,eax
c0005e74:	0f 85 5c fc ff ff    	jne    c0005ad6 <f_lseek+0xd2>
c0005e7a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005e7e:	83 ec 0c             	sub    esp,0xc
c0005e81:	6a 01                	push   0x1
c0005e83:	57                   	push   edi
c0005e84:	56                   	push   esi
c0005e85:	55                   	push   ebp
c0005e86:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005e8a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005e8e:	50                   	push   eax
c0005e8f:	e8 74 bc ff ff       	call   c0001b08 <disk_read>
c0005e94:	83 c4 20             	add    esp,0x20
c0005e97:	85 c0                	test   eax,eax
c0005e99:	0f 85 37 fc ff ff    	jne    c0005ad6 <f_lseek+0xd2>
c0005e9f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005ea2:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005ea5:	eb 08                	jmp    c0005eaf <f_lseek+0x4ab>
c0005ea7:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005eaf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005eb3:	83 c4 3c             	add    esp,0x3c
c0005eb6:	5b                   	pop    ebx
c0005eb7:	5e                   	pop    esi
c0005eb8:	5f                   	pop    edi
c0005eb9:	5d                   	pop    ebp
c0005eba:	c3                   	ret    

c0005ebb <f_opendir>:
c0005ebb:	56                   	push   esi
c0005ebc:	b8 09 00 00 00       	mov    eax,0x9
c0005ec1:	53                   	push   ebx
c0005ec2:	83 ec 24             	sub    esp,0x24
c0005ec5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ec9:	85 db                	test   ebx,ebx
c0005ecb:	0f 84 e6 00 00 00    	je     c0005fb7 <f_opendir+0xfc>
c0005ed1:	31 c9                	xor    ecx,ecx
c0005ed3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005ed7:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005edb:	e8 03 c7 ff ff       	call   c00025e3 <mount_volume>
c0005ee0:	85 c0                	test   eax,eax
c0005ee2:	0f 85 c9 00 00 00    	jne    c0005fb1 <f_opendir+0xf6>
c0005ee8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005eec:	83 ec 0c             	sub    esp,0xc
c0005eef:	89 03                	mov    DWORD PTR [ebx],eax
c0005ef1:	68 60 04 00 00       	push   0x460
c0005ef6:	e8 c1 26 00 00       	call   c00085bc <ff_memalloc>
c0005efb:	83 c4 10             	add    esp,0x10
c0005efe:	89 c6                	mov    esi,eax
c0005f00:	b8 11 00 00 00       	mov    eax,0x11
c0005f05:	85 f6                	test   esi,esi
c0005f07:	0f 84 aa 00 00 00    	je     c0005fb7 <f_opendir+0xfc>
c0005f0d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f11:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f17:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f1a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f1d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005f21:	89 d8                	mov    eax,ebx
c0005f23:	e8 31 ee ff ff       	call   c0004d59 <follow_path>
c0005f28:	85 c0                	test   eax,eax
c0005f2a:	75 61                	jne    c0005f8d <f_opendir+0xd2>
c0005f2c:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005f30:	78 46                	js     c0005f78 <f_opendir+0xbd>
c0005f32:	b8 05 00 00 00       	mov    eax,0x5
c0005f37:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005f3b:	74 50                	je     c0005f8d <f_opendir+0xd2>
c0005f3d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005f41:	8a 01                	mov    al,BYTE PTR [ecx]
c0005f43:	3c 04                	cmp    al,0x4
c0005f45:	75 26                	jne    c0005f6d <f_opendir+0xb2>
c0005f47:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005f4a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005f4d:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005f50:	30 d2                	xor    dl,dl
c0005f52:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005f56:	09 c2                	or     edx,eax
c0005f58:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005f5b:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005f5e:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005f61:	89 da                	mov    edx,ebx
c0005f63:	8d 41 10             	lea    eax,[ecx+0x10]
c0005f66:	e8 b4 ed ff ff       	call   c0004d1f <init_alloc_info.isra.2>
c0005f6b:	eb 0b                	jmp    c0005f78 <f_opendir+0xbd>
c0005f6d:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005f70:	e8 59 ed ff ff       	call   c0004cce <ld_clust.isra.0>
c0005f75:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005f78:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f7c:	31 d2                	xor    edx,edx
c0005f7e:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005f82:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005f86:	89 d8                	mov    eax,ebx
c0005f88:	e8 22 d1 ff ff       	call   c00030af <dir_sdi>
c0005f8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f91:	83 ec 0c             	sub    esp,0xc
c0005f94:	56                   	push   esi
c0005f95:	e8 3a 26 00 00       	call   c00085d4 <ff_memfree>
c0005f9a:	83 c4 10             	add    esp,0x10
c0005f9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fa1:	83 f8 04             	cmp    eax,0x4
c0005fa4:	74 06                	je     c0005fac <f_opendir+0xf1>
c0005fa6:	85 c0                	test   eax,eax
c0005fa8:	74 0d                	je     c0005fb7 <f_opendir+0xfc>
c0005faa:	eb 05                	jmp    c0005fb1 <f_opendir+0xf6>
c0005fac:	b8 05 00 00 00       	mov    eax,0x5
c0005fb1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005fb7:	83 c4 24             	add    esp,0x24
c0005fba:	5b                   	pop    ebx
c0005fbb:	5e                   	pop    esi
c0005fbc:	c3                   	ret    

c0005fbd <f_closedir>:
c0005fbd:	53                   	push   ebx
c0005fbe:	83 ec 18             	sub    esp,0x18
c0005fc1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005fc5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005fc9:	89 d8                	mov    eax,ebx
c0005fcb:	e8 86 c2 ff ff       	call   c0002256 <validate>
c0005fd0:	85 c0                	test   eax,eax
c0005fd2:	75 06                	jne    c0005fda <f_closedir+0x1d>
c0005fd4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005fda:	83 c4 18             	add    esp,0x18
c0005fdd:	5b                   	pop    ebx
c0005fde:	c3                   	ret    

c0005fdf <f_readdir>:
c0005fdf:	57                   	push   edi
c0005fe0:	56                   	push   esi
c0005fe1:	53                   	push   ebx
c0005fe2:	83 ec 20             	sub    esp,0x20
c0005fe5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005fe9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005fed:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005ff1:	89 d8                	mov    eax,ebx
c0005ff3:	e8 5e c2 ff ff       	call   c0002256 <validate>
c0005ff8:	85 c0                	test   eax,eax
c0005ffa:	75 77                	jne    c0006073 <f_readdir+0x94>
c0005ffc:	85 ff                	test   edi,edi
c0005ffe:	75 0b                	jne    c000600b <f_readdir+0x2c>
c0006000:	31 d2                	xor    edx,edx
c0006002:	89 d8                	mov    eax,ebx
c0006004:	e8 a6 d0 ff ff       	call   c00030af <dir_sdi>
c0006009:	eb 68                	jmp    c0006073 <f_readdir+0x94>
c000600b:	83 ec 0c             	sub    esp,0xc
c000600e:	68 60 04 00 00       	push   0x460
c0006013:	e8 a4 25 00 00       	call   c00085bc <ff_memalloc>
c0006018:	83 c4 10             	add    esp,0x10
c000601b:	89 c6                	mov    esi,eax
c000601d:	b8 11 00 00 00       	mov    eax,0x11
c0006022:	85 f6                	test   esi,esi
c0006024:	74 4d                	je     c0006073 <f_readdir+0x94>
c0006026:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000602a:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006030:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006033:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006036:	31 d2                	xor    edx,edx
c0006038:	89 d8                	mov    eax,ebx
c000603a:	e8 80 d8 ff ff       	call   c00038bf <dir_read>
c000603f:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006044:	75 19                	jne    c000605f <f_readdir+0x80>
c0006046:	89 fa                	mov    edx,edi
c0006048:	89 d8                	mov    eax,ebx
c000604a:	e8 7e ea ff ff       	call   c0004acd <get_fileinfo>
c000604f:	31 d2                	xor    edx,edx
c0006051:	89 d8                	mov    eax,ebx
c0006053:	e8 af d5 ff ff       	call   c0003607 <dir_next>
c0006058:	83 f8 04             	cmp    eax,0x4
c000605b:	75 02                	jne    c000605f <f_readdir+0x80>
c000605d:	31 c0                	xor    eax,eax
c000605f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006063:	83 ec 0c             	sub    esp,0xc
c0006066:	56                   	push   esi
c0006067:	e8 68 25 00 00       	call   c00085d4 <ff_memfree>
c000606c:	83 c4 10             	add    esp,0x10
c000606f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006073:	83 c4 20             	add    esp,0x20
c0006076:	5b                   	pop    ebx
c0006077:	5e                   	pop    esi
c0006078:	5f                   	pop    edi
c0006079:	c3                   	ret    

c000607a <f_stat>:
c000607a:	57                   	push   edi
c000607b:	31 c9                	xor    ecx,ecx
c000607d:	56                   	push   esi
c000607e:	53                   	push   ebx
c000607f:	83 ec 50             	sub    esp,0x50
c0006082:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0006086:	8d 54 24 04          	lea    edx,[esp+0x4]
c000608a:	8d 44 24 60          	lea    eax,[esp+0x60]
c000608e:	e8 50 c5 ff ff       	call   c00025e3 <mount_volume>
c0006093:	89 c3                	mov    ebx,eax
c0006095:	85 c0                	test   eax,eax
c0006097:	75 67                	jne    c0006100 <f_stat+0x86>
c0006099:	83 ec 0c             	sub    esp,0xc
c000609c:	bb 11 00 00 00       	mov    ebx,0x11
c00060a1:	68 60 04 00 00       	push   0x460
c00060a6:	e8 11 25 00 00       	call   c00085bc <ff_memalloc>
c00060ab:	83 c4 10             	add    esp,0x10
c00060ae:	89 c6                	mov    esi,eax
c00060b0:	85 c0                	test   eax,eax
c00060b2:	74 4c                	je     c0006100 <f_stat+0x86>
c00060b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00060b8:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00060be:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00060c1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00060c4:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00060c8:	8d 44 24 04          	lea    eax,[esp+0x4]
c00060cc:	e8 88 ec ff ff       	call   c0004d59 <follow_path>
c00060d1:	89 c3                	mov    ebx,eax
c00060d3:	85 c0                	test   eax,eax
c00060d5:	75 1d                	jne    c00060f4 <f_stat+0x7a>
c00060d7:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00060dc:	78 11                	js     c00060ef <f_stat+0x75>
c00060de:	85 ff                	test   edi,edi
c00060e0:	74 12                	je     c00060f4 <f_stat+0x7a>
c00060e2:	89 fa                	mov    edx,edi
c00060e4:	8d 44 24 04          	lea    eax,[esp+0x4]
c00060e8:	e8 e0 e9 ff ff       	call   c0004acd <get_fileinfo>
c00060ed:	eb 05                	jmp    c00060f4 <f_stat+0x7a>
c00060ef:	bb 06 00 00 00       	mov    ebx,0x6
c00060f4:	83 ec 0c             	sub    esp,0xc
c00060f7:	56                   	push   esi
c00060f8:	e8 d7 24 00 00       	call   c00085d4 <ff_memfree>
c00060fd:	83 c4 10             	add    esp,0x10
c0006100:	83 c4 50             	add    esp,0x50
c0006103:	89 d8                	mov    eax,ebx
c0006105:	5b                   	pop    ebx
c0006106:	5e                   	pop    esi
c0006107:	5f                   	pop    edi
c0006108:	c3                   	ret    

c0006109 <f_getfree>:
c0006109:	55                   	push   ebp
c000610a:	31 c9                	xor    ecx,ecx
c000610c:	57                   	push   edi
c000610d:	56                   	push   esi
c000610e:	53                   	push   ebx
c000610f:	83 ec 5c             	sub    esp,0x5c
c0006112:	8d 54 24 24          	lea    edx,[esp+0x24]
c0006116:	8d 44 24 70          	lea    eax,[esp+0x70]
c000611a:	e8 c4 c4 ff ff       	call   c00025e3 <mount_volume>
c000611f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006123:	85 c0                	test   eax,eax
c0006125:	0f 85 9d 01 00 00    	jne    c00062c8 <f_getfree+0x1bf>
c000612b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000612f:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006133:	89 02                	mov    DWORD PTR [edx],eax
c0006135:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006138:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000613b:	8d 71 fe             	lea    esi,[ecx-0x2]
c000613e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006142:	39 f2                	cmp    edx,esi
c0006144:	77 0b                	ja     c0006151 <f_getfree+0x48>
c0006146:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000614a:	89 10                	mov    DWORD PTR [eax],edx
c000614c:	e9 77 01 00 00       	jmp    c00062c8 <f_getfree+0x1bf>
c0006151:	8a 10                	mov    dl,BYTE PTR [eax]
c0006153:	80 fa 01             	cmp    dl,0x1
c0006156:	75 3a                	jne    c0006192 <f_getfree+0x89>
c0006158:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000615c:	be 02 00 00 00       	mov    esi,0x2
c0006161:	31 db                	xor    ebx,ebx
c0006163:	89 f2                	mov    edx,esi
c0006165:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006169:	e8 4b cd ff ff       	call   c0002eb9 <get_fat>
c000616e:	83 f8 ff             	cmp    eax,0xffffffff
c0006171:	0f 84 28 01 00 00    	je     c000629f <f_getfree+0x196>
c0006177:	83 f8 01             	cmp    eax,0x1
c000617a:	0f 84 29 01 00 00    	je     c00062a9 <f_getfree+0x1a0>
c0006180:	83 d3 00             	adc    ebx,0x0
c0006183:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006187:	46                   	inc    esi
c0006188:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000618b:	77 d6                	ja     c0006163 <f_getfree+0x5a>
c000618d:	e9 25 01 00 00       	jmp    c00062b7 <f_getfree+0x1ae>
c0006192:	80 fa 04             	cmp    dl,0x4
c0006195:	0f 85 88 00 00 00    	jne    c0006223 <f_getfree+0x11a>
c000619b:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c000619e:	31 ed                	xor    ebp,ebp
c00061a0:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00061a3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061a7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061ab:	31 db                	xor    ebx,ebx
c00061ad:	85 ed                	test   ebp,ebp
c00061af:	75 3f                	jne    c00061f0 <f_getfree+0xe7>
c00061b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00061b5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00061b9:	83 c0 01             	add    eax,0x1
c00061bc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00061c0:	83 d2 00             	adc    edx,0x0
c00061c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00061c7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00061cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061cf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00061d3:	e8 59 c1 ff ff       	call   c0002331 <move_window>
c00061d8:	85 c0                	test   eax,eax
c00061da:	0f 85 d3 00 00 00    	jne    c00062b3 <f_getfree+0x1aa>
c00061e0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00061e4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00061e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061ec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061f0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061f4:	8d 4e f8             	lea    ecx,[esi-0x8]
c00061f7:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00061fb:	89 cf                	mov    edi,ecx
c00061fd:	85 f6                	test   esi,esi
c00061ff:	74 12                	je     c0006213 <f_getfree+0x10a>
c0006201:	88 c1                	mov    cl,al
c0006203:	83 e1 01             	and    ecx,0x1
c0006206:	80 f9 01             	cmp    cl,0x1
c0006209:	83 d3 00             	adc    ebx,0x0
c000620c:	d0 e8                	shr    al,1
c000620e:	4e                   	dec    esi
c000620f:	39 fe                	cmp    esi,edi
c0006211:	75 ea                	jne    c00061fd <f_getfree+0xf4>
c0006213:	45                   	inc    ebp
c0006214:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000621a:	85 f6                	test   esi,esi
c000621c:	75 8f                	jne    c00061ad <f_getfree+0xa4>
c000621e:	e9 94 00 00 00       	jmp    c00062b7 <f_getfree+0x1ae>
c0006223:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006226:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006229:	31 f6                	xor    esi,esi
c000622b:	31 db                	xor    ebx,ebx
c000622d:	85 f6                	test   esi,esi
c000622f:	75 1b                	jne    c000624c <f_getfree+0x143>
c0006231:	89 d7                	mov    edi,edx
c0006233:	89 cd                	mov    ebp,ecx
c0006235:	83 c7 01             	add    edi,0x1
c0006238:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000623c:	83 d5 00             	adc    ebp,0x0
c000623f:	e8 ed c0 ff ff       	call   c0002331 <move_window>
c0006244:	85 c0                	test   eax,eax
c0006246:	75 6b                	jne    c00062b3 <f_getfree+0x1aa>
c0006248:	89 fa                	mov    edx,edi
c000624a:	89 e9                	mov    ecx,ebp
c000624c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006250:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006254:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006258:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000625b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000625f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006263:	75 11                	jne    c0006276 <f_getfree+0x16d>
c0006265:	e8 e9 b8 ff ff       	call   c0001b53 <ld_word>
c000626a:	66 83 f8 01          	cmp    ax,0x1
c000626e:	83 d3 00             	adc    ebx,0x0
c0006271:	83 c6 02             	add    esi,0x2
c0006274:	eb 13                	jmp    c0006289 <f_getfree+0x180>
c0006276:	e8 e5 b8 ff ff       	call   c0001b60 <ld_dword>
c000627b:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006280:	83 f8 01             	cmp    eax,0x1
c0006283:	83 d3 00             	adc    ebx,0x0
c0006286:	83 c6 04             	add    esi,0x4
c0006289:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000628f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006293:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006297:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000629b:	75 90                	jne    c000622d <f_getfree+0x124>
c000629d:	eb 18                	jmp    c00062b7 <f_getfree+0x1ae>
c000629f:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00062a7:	eb 0e                	jmp    c00062b7 <f_getfree+0x1ae>
c00062a9:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00062b1:	eb 04                	jmp    c00062b7 <f_getfree+0x1ae>
c00062b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062b7:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00062bb:	89 18                	mov    DWORD PTR [eax],ebx
c00062bd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c1:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00062c4:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00062c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00062cc:	83 c4 5c             	add    esp,0x5c
c00062cf:	5b                   	pop    ebx
c00062d0:	5e                   	pop    esi
c00062d1:	5f                   	pop    edi
c00062d2:	5d                   	pop    ebp
c00062d3:	c3                   	ret    

c00062d4 <f_truncate>:
c00062d4:	56                   	push   esi
c00062d5:	53                   	push   ebx
c00062d6:	83 ec 14             	sub    esp,0x14
c00062d9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00062dd:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00062e1:	89 d8                	mov    eax,ebx
c00062e3:	e8 6e bf ff ff       	call   c0002256 <validate>
c00062e8:	89 c6                	mov    esi,eax
c00062ea:	85 c0                	test   eax,eax
c00062ec:	0f 85 d2 00 00 00    	jne    c00063c4 <f_truncate+0xf0>
c00062f2:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00062f6:	85 f6                	test   esi,esi
c00062f8:	0f 85 c6 00 00 00    	jne    c00063c4 <f_truncate+0xf0>
c00062fe:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006302:	0f 84 b7 00 00 00    	je     c00063bf <f_truncate+0xeb>
c0006308:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000630b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000630e:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006311:	89 d1                	mov    ecx,edx
c0006313:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006316:	0f 83 a8 00 00 00    	jae    c00063c4 <f_truncate+0xf0>
c000631c:	09 c2                	or     edx,eax
c000631e:	75 15                	jne    c0006335 <f_truncate+0x61>
c0006320:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006323:	31 c9                	xor    ecx,ecx
c0006325:	89 d8                	mov    eax,ebx
c0006327:	e8 7a d0 ff ff       	call   c00033a6 <remove_chain>
c000632c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006333:	eb 35                	jmp    c000636a <f_truncate+0x96>
c0006335:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006338:	89 d8                	mov    eax,ebx
c000633a:	e8 7a cb ff ff       	call   c0002eb9 <get_fat>
c000633f:	89 c2                	mov    edx,eax
c0006341:	b8 01 00 00 00       	mov    eax,0x1
c0006346:	83 fa ff             	cmp    edx,0xffffffff
c0006349:	74 1f                	je     c000636a <f_truncate+0x96>
c000634b:	b8 02 00 00 00       	mov    eax,0x2
c0006350:	83 fa 01             	cmp    edx,0x1
c0006353:	74 15                	je     c000636a <f_truncate+0x96>
c0006355:	31 c0                	xor    eax,eax
c0006357:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000635b:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000635e:	76 0a                	jbe    c000636a <f_truncate+0x96>
c0006360:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006363:	89 d8                	mov    eax,ebx
c0006365:	e8 3c d0 ff ff       	call   c00033a6 <remove_chain>
c000636a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000636d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006370:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006373:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006376:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006379:	83 ca 40             	or     edx,0x40
c000637c:	85 c0                	test   eax,eax
c000637e:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006381:	75 35                	jne    c00063b8 <f_truncate+0xe4>
c0006383:	84 d2                	test   dl,dl
c0006385:	79 3d                	jns    c00063c4 <f_truncate+0xf0>
c0006387:	83 ec 0c             	sub    esp,0xc
c000638a:	8d 43 50             	lea    eax,[ebx+0x50]
c000638d:	6a 01                	push   0x1
c000638f:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006392:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006395:	50                   	push   eax
c0006396:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000639a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000639e:	50                   	push   eax
c000639f:	e8 7a b7 ff ff       	call   c0001b1e <disk_write>
c00063a4:	83 c4 20             	add    esp,0x20
c00063a7:	85 c0                	test   eax,eax
c00063a9:	75 08                	jne    c00063b3 <f_truncate+0xdf>
c00063ab:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00063af:	31 f6                	xor    esi,esi
c00063b1:	eb 11                	jmp    c00063c4 <f_truncate+0xf0>
c00063b3:	b8 01 00 00 00       	mov    eax,0x1
c00063b8:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00063bb:	89 c6                	mov    esi,eax
c00063bd:	eb 05                	jmp    c00063c4 <f_truncate+0xf0>
c00063bf:	be 07 00 00 00       	mov    esi,0x7
c00063c4:	89 f0                	mov    eax,esi
c00063c6:	83 c4 14             	add    esp,0x14
c00063c9:	5b                   	pop    ebx
c00063ca:	5e                   	pop    esi
c00063cb:	c3                   	ret    

c00063cc <f_unlink>:
c00063cc:	56                   	push   esi
c00063cd:	b9 02 00 00 00       	mov    ecx,0x2
c00063d2:	53                   	push   ebx
c00063d3:	81 ec e4 00 00 00    	sub    esp,0xe4
c00063d9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00063dd:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00063e4:	e8 fa c1 ff ff       	call   c00025e3 <mount_volume>
c00063e9:	85 c0                	test   eax,eax
c00063eb:	0f 85 55 01 00 00    	jne    c0006546 <f_unlink+0x17a>
c00063f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063f5:	83 ec 0c             	sub    esp,0xc
c00063f8:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00063fc:	68 60 04 00 00       	push   0x460
c0006401:	e8 b6 21 00 00       	call   c00085bc <ff_memalloc>
c0006406:	83 c4 10             	add    esp,0x10
c0006409:	89 c3                	mov    ebx,eax
c000640b:	b8 11 00 00 00       	mov    eax,0x11
c0006410:	85 db                	test   ebx,ebx
c0006412:	0f 84 2e 01 00 00    	je     c0006546 <f_unlink+0x17a>
c0006418:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000641c:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006422:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006425:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006428:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000642f:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006433:	e8 21 e9 ff ff       	call   c0004d59 <follow_path>
c0006438:	85 c0                	test   eax,eax
c000643a:	0f 85 f2 00 00 00    	jne    c0006532 <f_unlink+0x166>
c0006440:	b8 06 00 00 00       	mov    eax,0x6
c0006445:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000644d:	0f 88 df 00 00 00    	js     c0006532 <f_unlink+0x166>
c0006453:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006458:	74 0a                	je     c0006464 <f_unlink+0x98>
c000645a:	b8 07 00 00 00       	mov    eax,0x7
c000645f:	e9 ce 00 00 00       	jmp    c0006532 <f_unlink+0x166>
c0006464:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006468:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000646c:	8a 02                	mov    al,BYTE PTR [edx]
c000646e:	3c 04                	cmp    al,0x4
c0006470:	75 12                	jne    c0006484 <f_unlink+0xb8>
c0006472:	8d 42 10             	lea    eax,[edx+0x10]
c0006475:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006479:	e8 a1 e8 ff ff       	call   c0004d1f <init_alloc_info.isra.2>
c000647e:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006482:	eb 0e                	jmp    c0006492 <f_unlink+0xc6>
c0006484:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000648b:	e8 3e e8 ff ff       	call   c0004cce <ld_clust.isra.0>
c0006490:	89 c6                	mov    esi,eax
c0006492:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c0006497:	75 12                	jne    c00064ab <f_unlink+0xdf>
c0006499:	8d 44 24 48          	lea    eax,[esp+0x48]
c000649d:	e8 94 d6 ff ff       	call   c0003b36 <dir_remove>
c00064a2:	85 c0                	test   eax,eax
c00064a4:	74 6c                	je     c0006512 <f_unlink+0x146>
c00064a6:	e9 87 00 00 00       	jmp    c0006532 <f_unlink+0x166>
c00064ab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064af:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00064b6:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00064bd:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064c0:	75 21                	jne    c00064e3 <f_unlink+0x117>
c00064c2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00064c6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00064ca:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00064d1:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00064d8:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00064dc:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00064e3:	31 d2                	xor    edx,edx
c00064e5:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00064ec:	e8 be cb ff ff       	call   c00030af <dir_sdi>
c00064f1:	85 c0                	test   eax,eax
c00064f3:	75 3d                	jne    c0006532 <f_unlink+0x166>
c00064f5:	31 d2                	xor    edx,edx
c00064f7:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00064fe:	e8 bc d3 ff ff       	call   c00038bf <dir_read>
c0006503:	85 c0                	test   eax,eax
c0006505:	0f 84 4f ff ff ff    	je     c000645a <f_unlink+0x8e>
c000650b:	83 f8 04             	cmp    eax,0x4
c000650e:	75 22                	jne    c0006532 <f_unlink+0x166>
c0006510:	eb 87                	jmp    c0006499 <f_unlink+0xcd>
c0006512:	85 f6                	test   esi,esi
c0006514:	75 0b                	jne    c0006521 <f_unlink+0x155>
c0006516:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000651a:	e8 3d df ff ff       	call   c000445c <sync_fs>
c000651f:	eb 11                	jmp    c0006532 <f_unlink+0x166>
c0006521:	31 c9                	xor    ecx,ecx
c0006523:	89 f2                	mov    edx,esi
c0006525:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006529:	e8 78 ce ff ff       	call   c00033a6 <remove_chain>
c000652e:	85 c0                	test   eax,eax
c0006530:	74 e4                	je     c0006516 <f_unlink+0x14a>
c0006532:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006536:	83 ec 0c             	sub    esp,0xc
c0006539:	53                   	push   ebx
c000653a:	e8 95 20 00 00       	call   c00085d4 <ff_memfree>
c000653f:	83 c4 10             	add    esp,0x10
c0006542:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006546:	81 c4 e4 00 00 00    	add    esp,0xe4
c000654c:	5b                   	pop    ebx
c000654d:	5e                   	pop    esi
c000654e:	c3                   	ret    

c000654f <f_mkdir>:
c000654f:	57                   	push   edi
c0006550:	b9 02 00 00 00       	mov    ecx,0x2
c0006555:	56                   	push   esi
c0006556:	53                   	push   ebx
c0006557:	83 c4 80             	add    esp,0xffffff80
c000655a:	8d 54 24 08          	lea    edx,[esp+0x8]
c000655e:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006565:	e8 79 c0 ff ff       	call   c00025e3 <mount_volume>
c000656a:	89 c3                	mov    ebx,eax
c000656c:	85 c0                	test   eax,eax
c000656e:	0f 85 fe 01 00 00    	jne    c0006772 <f_mkdir+0x223>
c0006574:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006578:	bb 11 00 00 00       	mov    ebx,0x11
c000657d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006581:	83 ec 0c             	sub    esp,0xc
c0006584:	68 60 04 00 00       	push   0x460
c0006589:	e8 2e 20 00 00       	call   c00085bc <ff_memalloc>
c000658e:	83 c4 10             	add    esp,0x10
c0006591:	89 c7                	mov    edi,eax
c0006593:	85 c0                	test   eax,eax
c0006595:	0f 84 d7 01 00 00    	je     c0006772 <f_mkdir+0x223>
c000659b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000659f:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00065a5:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00065a8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00065ab:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00065b2:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065b6:	e8 9e e7 ff ff       	call   c0004d59 <follow_path>
c00065bb:	89 c3                	mov    ebx,eax
c00065bd:	85 c0                	test   eax,eax
c00065bf:	74 3e                	je     c00065ff <f_mkdir+0xb0>
c00065c1:	83 f8 04             	cmp    eax,0x4
c00065c4:	75 3e                	jne    c0006604 <f_mkdir+0xb5>
c00065c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065ca:	31 d2                	xor    edx,edx
c00065cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00065d0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00065d4:	e8 ce cb ff ff       	call   c00031a7 <create_chain>
c00065d9:	89 c6                	mov    esi,eax
c00065db:	85 c0                	test   eax,eax
c00065dd:	74 0c                	je     c00065eb <f_mkdir+0x9c>
c00065df:	bb 02 00 00 00       	mov    ebx,0x2
c00065e4:	83 f8 01             	cmp    eax,0x1
c00065e7:	74 07                	je     c00065f0 <f_mkdir+0xa1>
c00065e9:	eb 2a                	jmp    c0006615 <f_mkdir+0xc6>
c00065eb:	bb 07 00 00 00       	mov    ebx,0x7
c00065f0:	31 c9                	xor    ecx,ecx
c00065f2:	89 f2                	mov    edx,esi
c00065f4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00065f8:	e8 a9 cd ff ff       	call   c00033a6 <remove_chain>
c00065fd:	eb 05                	jmp    c0006604 <f_mkdir+0xb5>
c00065ff:	bb 08 00 00 00       	mov    ebx,0x8
c0006604:	83 ec 0c             	sub    esp,0xc
c0006607:	57                   	push   edi
c0006608:	e8 c7 1f 00 00       	call   c00085d4 <ff_memfree>
c000660d:	83 c4 10             	add    esp,0x10
c0006610:	e9 5d 01 00 00       	jmp    c0006772 <f_mkdir+0x223>
c0006615:	bb 01 00 00 00       	mov    ebx,0x1
c000661a:	83 f8 ff             	cmp    eax,0xffffffff
c000661d:	74 d1                	je     c00065f0 <f_mkdir+0xa1>
c000661f:	89 f2                	mov    edx,esi
c0006621:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006625:	e8 c4 ce ff ff       	call   c00034ee <dir_clear>
c000662a:	89 c3                	mov    ebx,eax
c000662c:	85 c0                	test   eax,eax
c000662e:	75 c0                	jne    c00065f0 <f_mkdir+0xa1>
c0006630:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006634:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006637:	74 69                	je     c00066a2 <f_mkdir+0x153>
c0006639:	b9 0b 00 00 00       	mov    ecx,0xb
c000663e:	83 c0 54             	add    eax,0x54
c0006641:	ba 20 00 00 00       	mov    edx,0x20
c0006646:	e8 9c b5 ff ff       	call   c0001be7 <mem_set>
c000664b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000664f:	ba 00 00 21 50       	mov    edx,0x50210000
c0006654:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006658:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000665c:	83 c0 6a             	add    eax,0x6a
c000665f:	e8 65 b5 ff ff       	call   c0001bc9 <st_dword>
c0006664:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006668:	89 f1                	mov    ecx,esi
c000666a:	8d 50 54             	lea    edx,[eax+0x54]
c000666d:	e8 85 e6 ff ff       	call   c0004cf7 <st_clust.isra.1>
c0006672:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006676:	b9 20 00 00 00       	mov    ecx,0x20
c000667b:	8d 50 54             	lea    edx,[eax+0x54]
c000667e:	83 c0 74             	add    eax,0x74
c0006681:	e8 4c b5 ff ff       	call   c0001bd2 <mem_cpy>
c0006686:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000668a:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000668e:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006692:	8d 50 74             	lea    edx,[eax+0x74]
c0006695:	e8 5d e6 ff ff       	call   c0004cf7 <st_clust.isra.1>
c000669a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000669e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00066a2:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066a6:	e8 2f db ff ff       	call   c00041da <dir_register>
c00066ab:	89 c3                	mov    ebx,eax
c00066ad:	85 c0                	test   eax,eax
c00066af:	0f 85 3b ff ff ff    	jne    c00065f0 <f_mkdir+0xa1>
c00066b5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066b9:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066bc:	75 74                	jne    c0006732 <f_mkdir+0x1e3>
c00066be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066c1:	ba 00 00 21 50       	mov    edx,0x50210000
c00066c6:	83 c0 0c             	add    eax,0xc
c00066c9:	e8 fb b4 ff ff       	call   c0001bc9 <st_dword>
c00066ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066d2:	89 f2                	mov    edx,esi
c00066d4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066d7:	83 c0 34             	add    eax,0x34
c00066da:	e8 ea b4 ff ff       	call   c0001bc9 <st_dword>
c00066df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066e3:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00066e7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066ea:	c1 e2 09             	shl    edx,0x9
c00066ed:	83 c0 38             	add    eax,0x38
c00066f0:	e8 d4 b4 ff ff       	call   c0001bc9 <st_dword>
c00066f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066f9:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00066fd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006700:	c1 e2 09             	shl    edx,0x9
c0006703:	83 c0 28             	add    eax,0x28
c0006706:	e8 be b4 ff ff       	call   c0001bc9 <st_dword>
c000670b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000670f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006712:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006716:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006719:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c000671d:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006721:	e8 8b d3 ff ff       	call   c0003ab1 <store_xdir>
c0006726:	89 c3                	mov    ebx,eax
c0006728:	85 c0                	test   eax,eax
c000672a:	0f 85 d4 fe ff ff    	jne    c0006604 <f_mkdir+0xb5>
c0006730:	eb 30                	jmp    c0006762 <f_mkdir+0x213>
c0006732:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006736:	ba 00 00 21 50       	mov    edx,0x50210000
c000673b:	83 c0 16             	add    eax,0x16
c000673e:	e8 86 b4 ff ff       	call   c0001bc9 <st_dword>
c0006743:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006747:	89 f1                	mov    ecx,esi
c0006749:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000674d:	e8 a5 e5 ff ff       	call   c0004cf7 <st_clust.isra.1>
c0006752:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006756:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000675a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006762:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006766:	e8 f1 dc ff ff       	call   c000445c <sync_fs>
c000676b:	89 c3                	mov    ebx,eax
c000676d:	e9 92 fe ff ff       	jmp    c0006604 <f_mkdir+0xb5>
c0006772:	83 ec 80             	sub    esp,0xffffff80
c0006775:	89 d8                	mov    eax,ebx
c0006777:	5b                   	pop    ebx
c0006778:	5e                   	pop    esi
c0006779:	5f                   	pop    edi
c000677a:	c3                   	ret    

c000677b <f_rename>:
c000677b:	55                   	push   ebp
c000677c:	57                   	push   edi
c000677d:	56                   	push   esi
c000677e:	53                   	push   ebx
c000677f:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006785:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000678c:	e8 a4 b9 ff ff       	call   c0002135 <get_ldnumber>
c0006791:	b9 02 00 00 00       	mov    ecx,0x2
c0006796:	8d 54 24 14          	lea    edx,[esp+0x14]
c000679a:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00067a1:	e8 3d be ff ff       	call   c00025e3 <mount_volume>
c00067a6:	85 c0                	test   eax,eax
c00067a8:	0f 85 b5 02 00 00    	jne    c0006a63 <f_rename+0x2e8>
c00067ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067b2:	83 ec 0c             	sub    esp,0xc
c00067b5:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00067b9:	68 60 04 00 00       	push   0x460
c00067be:	e8 f9 1d 00 00       	call   c00085bc <ff_memalloc>
c00067c3:	83 c4 10             	add    esp,0x10
c00067c6:	89 c3                	mov    ebx,eax
c00067c8:	b8 11 00 00 00       	mov    eax,0x11
c00067cd:	85 db                	test   ebx,ebx
c00067cf:	0f 84 8e 02 00 00    	je     c0006a63 <f_rename+0x2e8>
c00067d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067d9:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00067df:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00067e2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00067e5:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00067ec:	8d 44 24 58          	lea    eax,[esp+0x58]
c00067f0:	e8 64 e5 ff ff       	call   c0004d59 <follow_path>
c00067f5:	85 c0                	test   eax,eax
c00067f7:	0f 85 52 02 00 00    	jne    c0006a4f <f_rename+0x2d4>
c00067fd:	b8 06 00 00 00       	mov    eax,0x6
c0006802:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c000680a:	0f 85 3f 02 00 00    	jne    c0006a4f <f_rename+0x2d4>
c0006810:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006814:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006817:	0f 85 05 01 00 00    	jne    c0006922 <f_rename+0x1a7>
c000681d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006820:	b9 40 00 00 00       	mov    ecx,0x40
c0006825:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006829:	e8 a4 b3 ff ff       	call   c0001bd2 <mem_cpy>
c000682e:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006833:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006837:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000683e:	e8 8f b3 ff ff       	call   c0001bd2 <mem_cpy>
c0006843:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000684a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006851:	e8 03 e5 ff ff       	call   c0004d59 <follow_path>
c0006856:	85 c0                	test   eax,eax
c0006858:	75 29                	jne    c0006883 <f_rename+0x108>
c000685a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000685e:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006865:	74 0a                	je     c0006871 <f_rename+0xf6>
c0006867:	b8 08 00 00 00       	mov    eax,0x8
c000686c:	e9 de 01 00 00       	jmp    c0006a4f <f_rename+0x2d4>
c0006871:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006878:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000687f:	75 e6                	jne    c0006867 <f_rename+0xec>
c0006881:	eb 09                	jmp    c000688c <f_rename+0x111>
c0006883:	83 f8 04             	cmp    eax,0x4
c0006886:	0f 85 c3 01 00 00    	jne    c0006a4f <f_rename+0x2d4>
c000688c:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006893:	e8 42 d9 ff ff       	call   c00041da <dir_register>
c0006898:	85 c0                	test   eax,eax
c000689a:	0f 85 af 01 00 00    	jne    c0006a4f <f_rename+0x2d4>
c00068a0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068a4:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00068a7:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00068aa:	89 c5                	mov    ebp,eax
c00068ac:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00068af:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00068b3:	8d 46 24             	lea    eax,[esi+0x24]
c00068b6:	e8 98 b2 ff ff       	call   c0001b53 <ld_word>
c00068bb:	b9 40 00 00 00       	mov    ecx,0x40
c00068c0:	89 c7                	mov    edi,eax
c00068c2:	8d 54 24 18          	lea    edx,[esp+0x18]
c00068c6:	89 f0                	mov    eax,esi
c00068c8:	e8 05 b3 ff ff       	call   c0001bd2 <mem_cpy>
c00068cd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068d1:	89 e9                	mov    ecx,ebp
c00068d3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068d6:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00068d9:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00068dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068e4:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00068e7:	0f b7 d7             	movzx  edx,di
c00068ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068ed:	83 c0 24             	add    eax,0x24
c00068f0:	e8 d0 b2 ff ff       	call   c0001bc5 <st_word>
c00068f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068f9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068fc:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00068ff:	a8 10                	test   al,0x10
c0006901:	75 06                	jne    c0006909 <f_rename+0x18e>
c0006903:	83 c8 20             	or     eax,0x20
c0006906:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006909:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006910:	e8 9c d1 ff ff       	call   c0003ab1 <store_xdir>
c0006915:	85 c0                	test   eax,eax
c0006917:	0f 84 1c 01 00 00    	je     c0006a39 <f_rename+0x2be>
c000691d:	e9 2d 01 00 00       	jmp    c0006a4f <f_rename+0x2d4>
c0006922:	b9 20 00 00 00       	mov    ecx,0x20
c0006927:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c000692e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006932:	e8 9b b2 ff ff       	call   c0001bd2 <mem_cpy>
c0006937:	b9 4c 00 00 00       	mov    ecx,0x4c
c000693c:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006940:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006947:	e8 86 b2 ff ff       	call   c0001bd2 <mem_cpy>
c000694c:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006953:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000695a:	e8 fa e3 ff ff       	call   c0004d59 <follow_path>
c000695f:	85 c0                	test   eax,eax
c0006961:	75 27                	jne    c000698a <f_rename+0x20f>
c0006963:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006967:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000696e:	0f 85 f3 fe ff ff    	jne    c0006867 <f_rename+0xec>
c0006974:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000697b:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006982:	0f 85 df fe ff ff    	jne    c0006867 <f_rename+0xec>
c0006988:	eb 09                	jmp    c0006993 <f_rename+0x218>
c000698a:	83 f8 04             	cmp    eax,0x4
c000698d:	0f 85 bc 00 00 00    	jne    c0006a4f <f_rename+0x2d4>
c0006993:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000699a:	e8 3b d8 ff ff       	call   c00041da <dir_register>
c000699f:	85 c0                	test   eax,eax
c00069a1:	0f 85 a8 00 00 00    	jne    c0006a4f <f_rename+0x2d4>
c00069a7:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00069ae:	b9 13 00 00 00       	mov    ecx,0x13
c00069b3:	8d 46 0d             	lea    eax,[esi+0xd]
c00069b6:	8d 54 24 25          	lea    edx,[esp+0x25]
c00069ba:	e8 13 b2 ff ff       	call   c0001bd2 <mem_cpy>
c00069bf:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00069c3:	a8 10                	test   al,0x10
c00069c5:	75 03                	jne    c00069ca <f_rename+0x24f>
c00069c7:	83 c8 20             	or     eax,0x20
c00069ca:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00069cd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069d1:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069d5:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c00069d9:	74 5e                	je     c0006a39 <f_rename+0x2be>
c00069db:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00069e2:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00069e6:	74 51                	je     c0006a39 <f_rename+0x2be>
c00069e8:	89 f2                	mov    edx,esi
c00069ea:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00069ee:	8a 07                	mov    al,BYTE PTR [edi]
c00069f0:	e8 d9 e2 ff ff       	call   c0004cce <ld_clust.isra.0>
c00069f5:	89 c2                	mov    edx,eax
c00069f7:	89 f8                	mov    eax,edi
c00069f9:	e8 ee b3 ff ff       	call   c0001dec <clst2sect>
c00069fe:	89 c6                	mov    esi,eax
c0006a00:	89 d1                	mov    ecx,edx
c0006a02:	b8 02 00 00 00       	mov    eax,0x2
c0006a07:	09 f2                	or     edx,esi
c0006a09:	74 44                	je     c0006a4f <f_rename+0x2d4>
c0006a0b:	89 f2                	mov    edx,esi
c0006a0d:	89 f8                	mov    eax,edi
c0006a0f:	e8 1d b9 ff ff       	call   c0002331 <move_window>
c0006a14:	85 c0                	test   eax,eax
c0006a16:	75 37                	jne    c0006a4f <f_rename+0x2d4>
c0006a18:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a1c:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006a20:	75 17                	jne    c0006a39 <f_rename+0x2be>
c0006a22:	8d 50 74             	lea    edx,[eax+0x74]
c0006a25:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006a2c:	e8 c6 e2 ff ff       	call   c0004cf7 <st_clust.isra.1>
c0006a31:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a35:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a39:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006a3d:	e8 f4 d0 ff ff       	call   c0003b36 <dir_remove>
c0006a42:	85 c0                	test   eax,eax
c0006a44:	75 09                	jne    c0006a4f <f_rename+0x2d4>
c0006a46:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a4a:	e8 0d da ff ff       	call   c000445c <sync_fs>
c0006a4f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a53:	83 ec 0c             	sub    esp,0xc
c0006a56:	53                   	push   ebx
c0006a57:	e8 78 1b 00 00       	call   c00085d4 <ff_memfree>
c0006a5c:	83 c4 10             	add    esp,0x10
c0006a5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a63:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006a69:	5b                   	pop    ebx
c0006a6a:	5e                   	pop    esi
c0006a6b:	5f                   	pop    edi
c0006a6c:	5d                   	pop    ebp
c0006a6d:	c3                   	ret    

c0006a6e <f_chmod>:
c0006a6e:	57                   	push   edi
c0006a6f:	b9 02 00 00 00       	mov    ecx,0x2
c0006a74:	56                   	push   esi
c0006a75:	53                   	push   ebx
c0006a76:	83 ec 60             	sub    esp,0x60
c0006a79:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006a7d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006a81:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a85:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a89:	e8 55 bb ff ff       	call   c00025e3 <mount_volume>
c0006a8e:	85 c0                	test   eax,eax
c0006a90:	0f 85 af 00 00 00    	jne    c0006b45 <f_chmod+0xd7>
c0006a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a9a:	83 ec 0c             	sub    esp,0xc
c0006a9d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006aa1:	68 60 04 00 00       	push   0x460
c0006aa6:	e8 11 1b 00 00       	call   c00085bc <ff_memalloc>
c0006aab:	83 c4 10             	add    esp,0x10
c0006aae:	89 c6                	mov    esi,eax
c0006ab0:	b8 11 00 00 00       	mov    eax,0x11
c0006ab5:	85 f6                	test   esi,esi
c0006ab7:	0f 84 88 00 00 00    	je     c0006b45 <f_chmod+0xd7>
c0006abd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ac1:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006ac7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006aca:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006acd:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ad1:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ad5:	e8 7f e2 ff ff       	call   c0004d59 <follow_path>
c0006ada:	85 c0                	test   eax,eax
c0006adc:	75 53                	jne    c0006b31 <f_chmod+0xc3>
c0006ade:	b8 06 00 00 00       	mov    eax,0x6
c0006ae3:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006ae8:	75 47                	jne    c0006b31 <f_chmod+0xc3>
c0006aea:	89 f9                	mov    ecx,edi
c0006aec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006af0:	83 e1 27             	and    ecx,0x27
c0006af3:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006af6:	75 1d                	jne    c0006b15 <f_chmod+0xa7>
c0006af8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006afb:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006afe:	21 cb                	and    ebx,ecx
c0006b00:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006b03:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006b06:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b0a:	e8 a2 cf ff ff       	call   c0003ab1 <store_xdir>
c0006b0f:	85 c0                	test   eax,eax
c0006b11:	75 1e                	jne    c0006b31 <f_chmod+0xc3>
c0006b13:	eb 13                	jmp    c0006b28 <f_chmod+0xba>
c0006b15:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006b19:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b1c:	21 cb                	and    ebx,ecx
c0006b1e:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b21:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006b24:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b2c:	e8 2b d9 ff ff       	call   c000445c <sync_fs>
c0006b31:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b35:	83 ec 0c             	sub    esp,0xc
c0006b38:	56                   	push   esi
c0006b39:	e8 96 1a 00 00       	call   c00085d4 <ff_memfree>
c0006b3e:	83 c4 10             	add    esp,0x10
c0006b41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b45:	83 c4 60             	add    esp,0x60
c0006b48:	5b                   	pop    ebx
c0006b49:	5e                   	pop    esi
c0006b4a:	5f                   	pop    edi
c0006b4b:	c3                   	ret    

c0006b4c <f_utime>:
c0006b4c:	56                   	push   esi
c0006b4d:	b9 02 00 00 00       	mov    ecx,0x2
c0006b52:	53                   	push   ebx
c0006b53:	83 ec 64             	sub    esp,0x64
c0006b56:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006b5a:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b5e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b62:	e8 7c ba ff ff       	call   c00025e3 <mount_volume>
c0006b67:	85 c0                	test   eax,eax
c0006b69:	0f 85 b5 00 00 00    	jne    c0006c24 <f_utime+0xd8>
c0006b6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b73:	83 ec 0c             	sub    esp,0xc
c0006b76:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b7a:	68 60 04 00 00       	push   0x460
c0006b7f:	e8 38 1a 00 00       	call   c00085bc <ff_memalloc>
c0006b84:	83 c4 10             	add    esp,0x10
c0006b87:	89 c3                	mov    ebx,eax
c0006b89:	b8 11 00 00 00       	mov    eax,0x11
c0006b8e:	85 db                	test   ebx,ebx
c0006b90:	0f 84 8e 00 00 00    	je     c0006c24 <f_utime+0xd8>
c0006b96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b9a:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006ba0:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006ba3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ba6:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006baa:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bae:	e8 a6 e1 ff ff       	call   c0004d59 <follow_path>
c0006bb3:	85 c0                	test   eax,eax
c0006bb5:	75 59                	jne    c0006c10 <f_utime+0xc4>
c0006bb7:	b8 06 00 00 00       	mov    eax,0x6
c0006bbc:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bc1:	75 4d                	jne    c0006c10 <f_utime+0xc4>
c0006bc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bc7:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006bcb:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006bcf:	c1 e2 10             	shl    edx,0x10
c0006bd2:	09 ca                	or     edx,ecx
c0006bd4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bd7:	75 1a                	jne    c0006bf3 <f_utime+0xa7>
c0006bd9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006bdc:	83 c0 0c             	add    eax,0xc
c0006bdf:	e8 e5 af ff ff       	call   c0001bc9 <st_dword>
c0006be4:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006be8:	e8 c4 ce ff ff       	call   c0003ab1 <store_xdir>
c0006bed:	85 c0                	test   eax,eax
c0006bef:	75 1f                	jne    c0006c10 <f_utime+0xc4>
c0006bf1:	eb 14                	jmp    c0006c07 <f_utime+0xbb>
c0006bf3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006bf7:	83 c0 16             	add    eax,0x16
c0006bfa:	e8 ca af ff ff       	call   c0001bc9 <st_dword>
c0006bff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c03:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c0b:	e8 4c d8 ff ff       	call   c000445c <sync_fs>
c0006c10:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c14:	83 ec 0c             	sub    esp,0xc
c0006c17:	53                   	push   ebx
c0006c18:	e8 b7 19 00 00       	call   c00085d4 <ff_memfree>
c0006c1d:	83 c4 10             	add    esp,0x10
c0006c20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c24:	83 c4 64             	add    esp,0x64
c0006c27:	5b                   	pop    ebx
c0006c28:	5e                   	pop    esi
c0006c29:	c3                   	ret    

c0006c2a <f_getlabel>:
c0006c2a:	55                   	push   ebp
c0006c2b:	31 c9                	xor    ecx,ecx
c0006c2d:	57                   	push   edi
c0006c2e:	56                   	push   esi
c0006c2f:	53                   	push   ebx
c0006c30:	83 ec 6c             	sub    esp,0x6c
c0006c33:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c37:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006c3e:	e8 a0 b9 ff ff       	call   c00025e3 <mount_volume>
c0006c43:	89 c6                	mov    esi,eax
c0006c45:	85 c0                	test   eax,eax
c0006c47:	0f 85 c1 01 00 00    	jne    c0006e0e <f_getlabel+0x1e4>
c0006c4d:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006c55:	0f 84 5f 01 00 00    	je     c0006dba <f_getlabel+0x190>
c0006c5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c5f:	31 d2                	xor    edx,edx
c0006c61:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006c65:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006c6d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c71:	e8 39 c4 ff ff       	call   c00030af <dir_sdi>
c0006c76:	85 c0                	test   eax,eax
c0006c78:	0f 85 2d 01 00 00    	jne    c0006dab <f_getlabel+0x181>
c0006c7e:	ba 01 00 00 00       	mov    edx,0x1
c0006c83:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c87:	e8 33 cc ff ff       	call   c00038bf <dir_read>
c0006c8c:	85 c0                	test   eax,eax
c0006c8e:	0f 85 17 01 00 00    	jne    c0006dab <f_getlabel+0x181>
c0006c94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c98:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c9b:	74 09                	je     c0006ca6 <f_getlabel+0x7c>
c0006c9d:	31 db                	xor    ebx,ebx
c0006c9f:	31 c9                	xor    ecx,ecx
c0006ca1:	e9 c8 00 00 00       	jmp    c0006d6e <f_getlabel+0x144>
c0006ca6:	31 ed                	xor    ebp,ebp
c0006ca8:	31 db                	xor    ebx,ebx
c0006caa:	31 ff                	xor    edi,edi
c0006cac:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006cb0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006cb4:	39 fa                	cmp    edx,edi
c0006cb6:	76 4b                	jbe    c0006d03 <f_getlabel+0xd9>
c0006cb8:	47                   	inc    edi
c0006cb9:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006cbc:	01 d0                	add    eax,edx
c0006cbe:	e8 90 ae ff ff       	call   c0001b53 <ld_word>
c0006cc3:	66 85 ed             	test   bp,bp
c0006cc6:	75 0d                	jne    c0006cd5 <f_getlabel+0xab>
c0006cc8:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006cce:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006cd3:	76 28                	jbe    c0006cfd <f_getlabel+0xd3>
c0006cd5:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006cdc:	89 e9                	mov    ecx,ebp
c0006cde:	01 da                	add    edx,ebx
c0006ce0:	c1 e1 10             	shl    ecx,0x10
c0006ce3:	0f b7 c0             	movzx  eax,ax
c0006ce6:	09 c8                	or     eax,ecx
c0006ce8:	b9 04 00 00 00       	mov    ecx,0x4
c0006ced:	e8 01 b0 ff ff       	call   c0001cf3 <put_utf>
c0006cf2:	84 c0                	test   al,al
c0006cf4:	74 0b                	je     c0006d01 <f_getlabel+0xd7>
c0006cf6:	0f b6 c0             	movzx  eax,al
c0006cf9:	01 c3                	add    ebx,eax
c0006cfb:	31 c0                	xor    eax,eax
c0006cfd:	89 c5                	mov    ebp,eax
c0006cff:	eb ab                	jmp    c0006cac <f_getlabel+0x82>
c0006d01:	31 db                	xor    ebx,ebx
c0006d03:	66 85 ed             	test   bp,bp
c0006d06:	74 02                	je     c0006d0a <f_getlabel+0xe0>
c0006d08:	31 db                	xor    ebx,ebx
c0006d0a:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006d11:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006d15:	e9 a0 00 00 00       	jmp    c0006dba <f_getlabel+0x190>
c0006d1a:	83 ff 0b             	cmp    edi,0xb
c0006d1d:	74 11                	je     c0006d30 <f_getlabel+0x106>
c0006d1f:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006d24:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d28:	8d 79 02             	lea    edi,[ecx+0x2]
c0006d2b:	c1 e0 08             	shl    eax,0x8
c0006d2e:	09 c2                	or     edx,eax
c0006d30:	0f b7 d2             	movzx  edx,dx
c0006d33:	50                   	push   eax
c0006d34:	50                   	push   eax
c0006d35:	68 b5 01 00 00       	push   0x1b5
c0006d3a:	52                   	push   edx
c0006d3b:	e8 44 19 00 00       	call   c0008684 <ff_oem2uni>
c0006d40:	83 c4 10             	add    esp,0x10
c0006d43:	66 85 c0             	test   ax,ax
c0006d46:	74 46                	je     c0006d8e <f_getlabel+0x164>
c0006d48:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006d4f:	0f b7 c0             	movzx  eax,ax
c0006d52:	01 da                	add    edx,ebx
c0006d54:	b9 04 00 00 00       	mov    ecx,0x4
c0006d59:	e8 95 af ff ff       	call   c0001cf3 <put_utf>
c0006d5e:	84 c0                	test   al,al
c0006d60:	74 2c                	je     c0006d8e <f_getlabel+0x164>
c0006d62:	0f b6 c0             	movzx  eax,al
c0006d65:	01 c3                	add    ebx,eax
c0006d67:	83 ff 0b             	cmp    edi,0xb
c0006d6a:	74 24                	je     c0006d90 <f_getlabel+0x166>
c0006d6c:	89 f9                	mov    ecx,edi
c0006d6e:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006d72:	8d 79 01             	lea    edi,[ecx+0x1]
c0006d75:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006d7a:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006d7f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d83:	e8 9f ae ff ff       	call   c0001c27 <dbc_1st>
c0006d88:	85 c0                	test   eax,eax
c0006d8a:	74 a4                	je     c0006d30 <f_getlabel+0x106>
c0006d8c:	eb 8c                	jmp    c0006d1a <f_getlabel+0xf0>
c0006d8e:	31 db                	xor    ebx,ebx
c0006d90:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006d97:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006d9a:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006da1:	74 17                	je     c0006dba <f_getlabel+0x190>
c0006da3:	4b                   	dec    ebx
c0006da4:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006da7:	74 ee                	je     c0006d97 <f_getlabel+0x16d>
c0006da9:	eb 0f                	jmp    c0006dba <f_getlabel+0x190>
c0006dab:	83 f8 04             	cmp    eax,0x4
c0006dae:	75 5c                	jne    c0006e0c <f_getlabel+0x1e2>
c0006db0:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006db7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006dba:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006dc2:	74 4a                	je     c0006e0e <f_getlabel+0x1e4>
c0006dc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006dc8:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006dcb:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006dce:	e8 5e b5 ff ff       	call   c0002331 <move_window>
c0006dd3:	89 c6                	mov    esi,eax
c0006dd5:	85 c0                	test   eax,eax
c0006dd7:	75 35                	jne    c0006e0e <f_getlabel+0x1e4>
c0006dd9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006ddd:	b8 43 00 00 00       	mov    eax,0x43
c0006de2:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006de4:	80 f9 03             	cmp    cl,0x3
c0006de7:	74 0f                	je     c0006df8 <f_getlabel+0x1ce>
c0006de9:	31 c0                	xor    eax,eax
c0006deb:	80 f9 04             	cmp    cl,0x4
c0006dee:	0f 94 c0             	sete   al
c0006df1:	48                   	dec    eax
c0006df2:	83 e0 c3             	and    eax,0xffffffc3
c0006df5:	83 c0 64             	add    eax,0x64
c0006df8:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006dfc:	e8 5f ad ff ff       	call   c0001b60 <ld_dword>
c0006e01:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006e08:	89 07                	mov    DWORD PTR [edi],eax
c0006e0a:	eb 02                	jmp    c0006e0e <f_getlabel+0x1e4>
c0006e0c:	89 c6                	mov    esi,eax
c0006e0e:	83 c4 6c             	add    esp,0x6c
c0006e11:	89 f0                	mov    eax,esi
c0006e13:	5b                   	pop    ebx
c0006e14:	5e                   	pop    esi
c0006e15:	5f                   	pop    edi
c0006e16:	5d                   	pop    ebp
c0006e17:	c3                   	ret    

c0006e18 <f_setlabel>:
c0006e18:	56                   	push   esi
c0006e19:	b9 02 00 00 00       	mov    ecx,0x2
c0006e1e:	53                   	push   ebx
c0006e1f:	83 ec 74             	sub    esp,0x74
c0006e22:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006e26:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e2d:	e8 b1 b7 ff ff       	call   c00025e3 <mount_volume>
c0006e32:	89 c6                	mov    esi,eax
c0006e34:	85 c0                	test   eax,eax
c0006e36:	0f 85 41 02 00 00    	jne    c000707d <f_setlabel+0x265>
c0006e3c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e40:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006e43:	0f 85 8e 00 00 00    	jne    c0006ed7 <f_setlabel+0xbf>
c0006e49:	b9 16 00 00 00       	mov    ecx,0x16
c0006e4e:	31 d2                	xor    edx,edx
c0006e50:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006e54:	31 db                	xor    ebx,ebx
c0006e56:	e8 8c ad ff ff       	call   c0001be7 <mem_set>
c0006e5b:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006e62:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006e65:	0f 86 0a 01 00 00    	jbe    c0006f75 <f_setlabel+0x15d>
c0006e6b:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e72:	e8 b6 ad ff ff       	call   c0001c2d <tchar2uni>
c0006e77:	89 c6                	mov    esi,eax
c0006e79:	3d ff ff 00 00       	cmp    eax,0xffff
c0006e7e:	76 2a                	jbe    c0006eaa <f_setlabel+0x92>
c0006e80:	83 f8 ff             	cmp    eax,0xffffffff
c0006e83:	74 05                	je     c0006e8a <f_setlabel+0x72>
c0006e85:	83 fb 09             	cmp    ebx,0x9
c0006e88:	76 0a                	jbe    c0006e94 <f_setlabel+0x7c>
c0006e8a:	be 06 00 00 00       	mov    esi,0x6
c0006e8f:	e9 e9 01 00 00       	jmp    c000707d <f_setlabel+0x265>
c0006e94:	89 c2                	mov    edx,eax
c0006e96:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006e9a:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006e9d:	c1 ea 10             	shr    edx,0x10
c0006ea0:	01 c8                	add    eax,ecx
c0006ea2:	43                   	inc    ebx
c0006ea3:	e8 1d ad ff ff       	call   c0001bc5 <st_word>
c0006ea8:	eb 04                	jmp    c0006eae <f_setlabel+0x96>
c0006eaa:	85 c0                	test   eax,eax
c0006eac:	74 dc                	je     c0006e8a <f_setlabel+0x72>
c0006eae:	89 f2                	mov    edx,esi
c0006eb0:	b8 17 36 02 c0       	mov    eax,0xc0023617
c0006eb5:	e8 5b ad ff ff       	call   c0001c15 <chk_chr>
c0006eba:	85 c0                	test   eax,eax
c0006ebc:	75 cc                	jne    c0006e8a <f_setlabel+0x72>
c0006ebe:	83 fb 0a             	cmp    ebx,0xa
c0006ec1:	77 c7                	ja     c0006e8a <f_setlabel+0x72>
c0006ec3:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ec6:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006eca:	0f b7 d6             	movzx  edx,si
c0006ecd:	01 c8                	add    eax,ecx
c0006ecf:	43                   	inc    ebx
c0006ed0:	e8 f0 ac ff ff       	call   c0001bc5 <st_word>
c0006ed5:	eb 84                	jmp    c0006e5b <f_setlabel+0x43>
c0006ed7:	b9 0b 00 00 00       	mov    ecx,0xb
c0006edc:	ba 20 00 00 00       	mov    edx,0x20
c0006ee1:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006ee5:	31 db                	xor    ebx,ebx
c0006ee7:	e8 fb ac ff ff       	call   c0001be7 <mem_set>
c0006eec:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006ef3:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006ef6:	76 60                	jbe    c0006f58 <f_setlabel+0x140>
c0006ef8:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006eff:	e8 29 ad ff ff       	call   c0001c2d <tchar2uni>
c0006f04:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f09:	0f 87 7b ff ff ff    	ja     c0006e8a <f_setlabel+0x72>
c0006f0f:	83 ec 0c             	sub    esp,0xc
c0006f12:	50                   	push   eax
c0006f13:	e8 e0 17 00 00       	call   c00086f8 <ff_wtoupper>
c0006f18:	5a                   	pop    edx
c0006f19:	59                   	pop    ecx
c0006f1a:	68 b5 01 00 00       	push   0x1b5
c0006f1f:	50                   	push   eax
c0006f20:	e8 c7 16 00 00       	call   c00085ec <ff_uni2oem>
c0006f25:	83 c4 10             	add    esp,0x10
c0006f28:	89 c6                	mov    esi,eax
c0006f2a:	66 85 c0             	test   ax,ax
c0006f2d:	0f 84 57 ff ff ff    	je     c0006e8a <f_setlabel+0x72>
c0006f33:	0f b7 d0             	movzx  edx,ax
c0006f36:	b8 10 36 02 c0       	mov    eax,0xc0023610
c0006f3b:	e8 d5 ac ff ff       	call   c0001c15 <chk_chr>
c0006f40:	85 c0                	test   eax,eax
c0006f42:	0f 85 42 ff ff ff    	jne    c0006e8a <f_setlabel+0x72>
c0006f48:	66 81 fe ff 00       	cmp    si,0xff
c0006f4d:	0f 87 14 01 00 00    	ja     c0007067 <f_setlabel+0x24f>
c0006f53:	e9 fa 00 00 00       	jmp    c0007052 <f_setlabel+0x23a>
c0006f58:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006f5d:	0f 84 27 ff ff ff    	je     c0006e8a <f_setlabel+0x72>
c0006f63:	85 db                	test   ebx,ebx
c0006f65:	74 0e                	je     c0006f75 <f_setlabel+0x15d>
c0006f67:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006f6a:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006f6f:	75 04                	jne    c0006f75 <f_setlabel+0x15d>
c0006f71:	89 c3                	mov    ebx,eax
c0006f73:	eb ee                	jmp    c0006f63 <f_setlabel+0x14b>
c0006f75:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f79:	31 d2                	xor    edx,edx
c0006f7b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006f7f:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006f87:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006f8b:	e8 1f c1 ff ff       	call   c00030af <dir_sdi>
c0006f90:	89 c6                	mov    esi,eax
c0006f92:	85 c0                	test   eax,eax
c0006f94:	0f 85 e3 00 00 00    	jne    c000707d <f_setlabel+0x265>
c0006f9a:	ba 01 00 00 00       	mov    edx,0x1
c0006f9f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006fa3:	e8 17 c9 ff ff       	call   c00038bf <dir_read>
c0006fa8:	85 c0                	test   eax,eax
c0006faa:	75 21                	jne    c0006fcd <f_setlabel+0x1b5>
c0006fac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006fb0:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006fb4:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006fb7:	74 5d                	je     c0007016 <f_setlabel+0x1fe>
c0006fb9:	85 db                	test   ebx,ebx
c0006fbb:	74 0b                	je     c0006fc8 <f_setlabel+0x1b0>
c0006fbd:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fc2:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006fc6:	eb 70                	jmp    c0007038 <f_setlabel+0x220>
c0006fc8:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006fcb:	eb 70                	jmp    c000703d <f_setlabel+0x225>
c0006fcd:	83 f8 04             	cmp    eax,0x4
c0006fd0:	75 7c                	jne    c000704e <f_setlabel+0x236>
c0006fd2:	85 db                	test   ebx,ebx
c0006fd4:	0f 84 a3 00 00 00    	je     c000707d <f_setlabel+0x265>
c0006fda:	ba 01 00 00 00       	mov    edx,0x1
c0006fdf:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006fe3:	e8 51 ca ff ff       	call   c0003a39 <dir_alloc>
c0006fe8:	89 c6                	mov    esi,eax
c0006fea:	85 c0                	test   eax,eax
c0006fec:	0f 85 8b 00 00 00    	jne    c000707d <f_setlabel+0x265>
c0006ff2:	31 d2                	xor    edx,edx
c0006ff4:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ff8:	b9 20 00 00 00       	mov    ecx,0x20
c0006ffd:	e8 e5 ab ff ff       	call   c0001be7 <mem_set>
c0007002:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007006:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007009:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000700d:	75 18                	jne    c0007027 <f_setlabel+0x20f>
c000700f:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0007012:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007016:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007019:	b9 16 00 00 00       	mov    ecx,0x16
c000701e:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007022:	83 c0 02             	add    eax,0x2
c0007025:	eb 9b                	jmp    c0006fc2 <f_setlabel+0x1aa>
c0007027:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000702b:	b9 0b 00 00 00       	mov    ecx,0xb
c0007030:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007034:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007038:	e8 95 ab ff ff       	call   c0001bd2 <mem_cpy>
c000703d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007041:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007045:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007049:	e8 0e d4 ff ff       	call   c000445c <sync_fs>
c000704e:	89 c6                	mov    esi,eax
c0007050:	eb 2b                	jmp    c000707d <f_setlabel+0x265>
c0007052:	83 fb 0a             	cmp    ebx,0xa
c0007055:	0f 87 2f fe ff ff    	ja     c0006e8a <f_setlabel+0x72>
c000705b:	89 f0                	mov    eax,esi
c000705d:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007061:	43                   	inc    ebx
c0007062:	e9 85 fe ff ff       	jmp    c0006eec <f_setlabel+0xd4>
c0007067:	83 fb 09             	cmp    ebx,0x9
c000706a:	0f 87 1a fe ff ff    	ja     c0006e8a <f_setlabel+0x72>
c0007070:	89 f0                	mov    eax,esi
c0007072:	66 c1 e8 08          	shr    ax,0x8
c0007076:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000707a:	43                   	inc    ebx
c000707b:	eb de                	jmp    c000705b <f_setlabel+0x243>
c000707d:	89 f0                	mov    eax,esi
c000707f:	83 c4 74             	add    esp,0x74
c0007082:	5b                   	pop    ebx
c0007083:	5e                   	pop    esi
c0007084:	c3                   	ret    

c0007085 <f_expand>:
c0007085:	55                   	push   ebp
c0007086:	57                   	push   edi
c0007087:	56                   	push   esi
c0007088:	53                   	push   ebx
c0007089:	83 ec 3c             	sub    esp,0x3c
c000708c:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0007090:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007094:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0007098:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000709c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00070a0:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070a4:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00070a8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00070ac:	89 d8                	mov    eax,ebx
c00070ae:	e8 a3 b1 ff ff       	call   c0002256 <validate>
c00070b3:	89 c5                	mov    ebp,eax
c00070b5:	85 c0                	test   eax,eax
c00070b7:	0f 85 f4 01 00 00    	jne    c00072b1 <f_expand+0x22c>
c00070bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00070c1:	85 ed                	test   ebp,ebp
c00070c3:	0f 85 e8 01 00 00    	jne    c00072b1 <f_expand+0x22c>
c00070c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070cd:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00070d1:	75 0a                	jne    c00070dd <f_expand+0x58>
c00070d3:	bd 07 00 00 00       	mov    ebp,0x7
c00070d8:	e9 d4 01 00 00       	jmp    c00072b1 <f_expand+0x22c>
c00070dd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00070e0:	0b 43 0c             	or     eax,DWORD PTR [ebx+0xc]
c00070e3:	75 ee                	jne    c00070d3 <f_expand+0x4e>
c00070e5:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00070e9:	74 e8                	je     c00070d3 <f_expand+0x4e>
c00070eb:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00070ef:	8a 0e                	mov    cl,BYTE PTR [esi]
c00070f1:	80 f9 04             	cmp    cl,0x4
c00070f4:	74 07                	je     c00070fd <f_expand+0x78>
c00070f6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00070fb:	77 d6                	ja     c00070d3 <f_expand+0x4e>
c00070fd:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0007101:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0007105:	c1 e0 09             	shl    eax,0x9
c0007108:	8d 50 ff             	lea    edx,[eax-0x1]
c000710b:	85 54 24 08          	test   DWORD PTR [esp+0x8],edx
c000710f:	0f 95 c2             	setne  dl
c0007112:	0f b6 d2             	movzx  edx,dl
c0007115:	89 d7                	mov    edi,edx
c0007117:	31 d2                	xor    edx,edx
c0007119:	52                   	push   edx
c000711a:	50                   	push   eax
c000711b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000711f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007123:	e8 f8 b5 01 00       	call   c0022720 <__udivdi3>
c0007128:	83 c4 10             	add    esp,0x10
c000712b:	01 f8                	add    eax,edi
c000712d:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0007131:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0007134:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007138:	83 ff 01             	cmp    edi,0x1
c000713b:	76 05                	jbe    c0007142 <f_expand+0xbd>
c000713d:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0007140:	77 05                	ja     c0007147 <f_expand+0xc2>
c0007142:	bf 02 00 00 00       	mov    edi,0x2
c0007147:	80 f9 04             	cmp    cl,0x4
c000714a:	75 19                	jne    c0007165 <f_expand+0xe0>
c000714c:	89 f0                	mov    eax,esi
c000714e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007152:	89 fa                	mov    edx,edi
c0007154:	e8 f3 b9 ff ff       	call   c0002b4c <find_bitmap>
c0007159:	89 c6                	mov    esi,eax
c000715b:	85 c0                	test   eax,eax
c000715d:	0f 84 70 ff ff ff    	je     c00070d3 <f_expand+0x4e>
c0007163:	eb 7f                	jmp    c00071e4 <f_expand+0x15f>
c0007165:	89 fe                	mov    esi,edi
c0007167:	89 f9                	mov    ecx,edi
c0007169:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007171:	89 ca                	mov    edx,ecx
c0007173:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0007177:	89 d8                	mov    eax,ebx
c0007179:	e8 3b bd ff ff       	call   c0002eb9 <get_fat>
c000717e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007182:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007186:	41                   	inc    ecx
c0007187:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000718b:	39 48 1c             	cmp    DWORD PTR [eax+0x1c],ecx
c000718e:	77 05                	ja     c0007195 <f_expand+0x110>
c0007190:	b9 02 00 00 00       	mov    ecx,0x2
c0007195:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c000719a:	74 3e                	je     c00071da <f_expand+0x155>
c000719c:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00071a1:	75 0a                	jne    c00071ad <f_expand+0x128>
c00071a3:	bd 01 00 00 00       	mov    ebp,0x1
c00071a8:	e9 04 01 00 00       	jmp    c00072b1 <f_expand+0x22c>
c00071ad:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00071b2:	75 13                	jne    c00071c7 <f_expand+0x142>
c00071b4:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00071b8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00071bc:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c00071c0:	75 0f                	jne    c00071d1 <f_expand+0x14c>
c00071c2:	e9 ce 00 00 00       	jmp    c0007295 <f_expand+0x210>
c00071c7:	89 ce                	mov    esi,ecx
c00071c9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00071d1:	39 f9                	cmp    ecx,edi
c00071d3:	75 9c                	jne    c0007171 <f_expand+0xec>
c00071d5:	e9 f9 fe ff ff       	jmp    c00070d3 <f_expand+0x4e>
c00071da:	bd 02 00 00 00       	mov    ebp,0x2
c00071df:	e9 cd 00 00 00       	jmp    c00072b1 <f_expand+0x22c>
c00071e4:	83 f8 ff             	cmp    eax,0xffffffff
c00071e7:	74 ba                	je     c00071a3 <f_expand+0x11e>
c00071e9:	8d 7e ff             	lea    edi,[esi-0x1]
c00071ec:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00071f0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00071f4:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00071f9:	74 51                	je     c000724c <f_expand+0x1c7>
c00071fb:	83 ec 0c             	sub    esp,0xc
c00071fe:	89 f2                	mov    edx,esi
c0007200:	6a 01                	push   0x1
c0007202:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007206:	e8 f4 b9 ff ff       	call   c0002bff <change_bitmap>
c000720b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000720f:	8d 54 3e ff          	lea    edx,[esi+edi*1-0x1]
c0007213:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0007217:	83 c4 10             	add    esp,0x10
c000721a:	85 c0                	test   eax,eax
c000721c:	74 2e                	je     c000724c <f_expand+0x1c7>
c000721e:	eb 71                	jmp    c0007291 <f_expand+0x20c>
c0007220:	83 c9 ff             	or     ecx,0xffffffff
c0007223:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c0007228:	74 03                	je     c000722d <f_expand+0x1a8>
c000722a:	8d 4f 01             	lea    ecx,[edi+0x1]
c000722d:	89 fa                	mov    edx,edi
c000722f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007233:	e8 7c ba ff ff       	call   c0002cb4 <put_fat>
c0007238:	85 c0                	test   eax,eax
c000723a:	75 55                	jne    c0007291 <f_expand+0x20c>
c000723c:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007240:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0007244:	47                   	inc    edi
c0007245:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000724a:	75 d4                	jne    c0007220 <f_expand+0x19b>
c000724c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007250:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007254:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007259:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000725c:	74 53                	je     c00072b1 <f_expand+0x22c>
c000725e:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
c0007261:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0007265:	c6 43 07 02          	mov    BYTE PTR [ebx+0x7],0x2
c0007269:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000726d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007271:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0007274:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0007277:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000727a:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000727d:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0007280:	39 ca                	cmp    edx,ecx
c0007282:	77 2d                	ja     c00072b1 <f_expand+0x22c>
c0007284:	2b 54 24 10          	sub    edx,DWORD PTR [esp+0x10]
c0007288:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000728c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000728f:	eb 20                	jmp    c00072b1 <f_expand+0x22c>
c0007291:	89 c5                	mov    ebp,eax
c0007293:	eb 1c                	jmp    c00072b1 <f_expand+0x22c>
c0007295:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000729a:	74 0c                	je     c00072a8 <f_expand+0x223>
c000729c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00072a0:	89 f7                	mov    edi,esi
c00072a2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00072a6:	eb 9d                	jmp    c0007245 <f_expand+0x1c0>
c00072a8:	8d 46 ff             	lea    eax,[esi-0x1]
c00072ab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00072af:	eb 9b                	jmp    c000724c <f_expand+0x1c7>
c00072b1:	83 c4 3c             	add    esp,0x3c
c00072b4:	89 e8                	mov    eax,ebp
c00072b6:	5b                   	pop    ebx
c00072b7:	5e                   	pop    esi
c00072b8:	5f                   	pop    edi
c00072b9:	5d                   	pop    ebp
c00072ba:	c3                   	ret    

c00072bb <f_forward>:
c00072bb:	55                   	push   ebp
c00072bc:	57                   	push   edi
c00072bd:	56                   	push   esi
c00072be:	53                   	push   ebx
c00072bf:	83 ec 2c             	sub    esp,0x2c
c00072c2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00072c6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00072ca:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00072d0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00072d4:	89 d8                	mov    eax,ebx
c00072d6:	e8 7b af ff ff       	call   c0002256 <validate>
c00072db:	89 c5                	mov    ebp,eax
c00072dd:	85 c0                	test   eax,eax
c00072df:	0f 85 aa 01 00 00    	jne    c000748f <f_forward+0x1d4>
c00072e5:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00072e9:	85 ed                	test   ebp,ebp
c00072eb:	0f 85 9e 01 00 00    	jne    c000748f <f_forward+0x1d4>
c00072f1:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00072f5:	0f 84 8f 01 00 00    	je     c000748a <f_forward+0x1cf>
c00072fb:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00072fe:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0007301:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0007304:	bf 00 00 00 00       	mov    edi,0x0
c0007309:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000730c:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0007310:	89 d1                	mov    ecx,edx
c0007312:	19 f9                	sbb    ecx,edi
c0007314:	0f 83 cf 00 00 00    	jae    c00073e9 <f_forward+0x12e>
c000731a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000731e:	e9 c6 00 00 00       	jmp    c00073e9 <f_forward+0x12e>
c0007323:	50                   	push   eax
c0007324:	50                   	push   eax
c0007325:	6a 00                	push   0x0
c0007327:	6a 00                	push   0x0
c0007329:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000732d:	83 c4 10             	add    esp,0x10
c0007330:	85 c0                	test   eax,eax
c0007332:	0f 84 57 01 00 00    	je     c000748f <f_forward+0x1d4>
c0007338:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000733b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000733f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0007342:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0007346:	89 d7                	mov    edi,edx
c0007348:	8d 4e ff             	lea    ecx,[esi-0x1]
c000734b:	89 c6                	mov    esi,eax
c000734d:	0f ac fe 09          	shrd   esi,edi,0x9
c0007351:	21 ce                	and    esi,ecx
c0007353:	89 c1                	mov    ecx,eax
c0007355:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c000735b:	0f 84 98 00 00 00    	je     c00073f9 <f_forward+0x13e>
c0007361:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007365:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007368:	89 c8                	mov    eax,ecx
c000736a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000736e:	e8 79 aa ff ff       	call   c0001dec <clst2sect>
c0007373:	89 d7                	mov    edi,edx
c0007375:	09 c7                	or     edi,eax
c0007377:	0f 84 9e 00 00 00    	je     c000741b <f_forward+0x160>
c000737d:	31 ff                	xor    edi,edi
c000737f:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007382:	01 c6                	add    esi,eax
c0007384:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007388:	11 d7                	adc    edi,edx
c000738a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000738d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007390:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007394:	39 fa                	cmp    edx,edi
c0007396:	0f 85 a2 00 00 00    	jne    c000743e <f_forward+0x183>
c000739c:	39 f0                	cmp    eax,esi
c000739e:	0f 85 9a 00 00 00    	jne    c000743e <f_forward+0x183>
c00073a4:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00073a7:	ba 00 02 00 00       	mov    edx,0x200
c00073ac:	25 ff 01 00 00       	and    eax,0x1ff
c00073b1:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00073b5:	29 c2                	sub    edx,eax
c00073b7:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00073ba:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00073bd:	39 d1                	cmp    ecx,edx
c00073bf:	76 02                	jbe    c00073c3 <f_forward+0x108>
c00073c1:	89 d1                	mov    ecx,edx
c00073c3:	8d 73 50             	lea    esi,[ebx+0x50]
c00073c6:	52                   	push   edx
c00073c7:	01 c6                	add    esi,eax
c00073c9:	52                   	push   edx
c00073ca:	51                   	push   ecx
c00073cb:	56                   	push   esi
c00073cc:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00073d0:	83 c4 10             	add    esp,0x10
c00073d3:	85 c0                	test   eax,eax
c00073d5:	74 44                	je     c000741b <f_forward+0x160>
c00073d7:	31 ff                	xor    edi,edi
c00073d9:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00073dc:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00073df:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00073e3:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00073e7:	01 07                	add    DWORD PTR [edi],eax
c00073e9:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00073ee:	0f 85 2f ff ff ff    	jne    c0007323 <f_forward+0x68>
c00073f4:	e9 96 00 00 00       	jmp    c000748f <f_forward+0x1d4>
c00073f9:	85 f6                	test   esi,esi
c00073fb:	0f 85 60 ff ff ff    	jne    c0007361 <f_forward+0xa6>
c0007401:	89 d7                	mov    edi,edx
c0007403:	09 c7                	or     edi,eax
c0007405:	75 05                	jne    c000740c <f_forward+0x151>
c0007407:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000740a:	eb 0a                	jmp    c0007416 <f_forward+0x15b>
c000740c:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000740f:	89 d8                	mov    eax,ebx
c0007411:	e8 a3 ba ff ff       	call   c0002eb9 <get_fat>
c0007416:	83 f8 01             	cmp    eax,0x1
c0007419:	77 0b                	ja     c0007426 <f_forward+0x16b>
c000741b:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000741f:	bd 02 00 00 00       	mov    ebp,0x2
c0007424:	eb 69                	jmp    c000748f <f_forward+0x1d4>
c0007426:	83 f8 ff             	cmp    eax,0xffffffff
c0007429:	75 0b                	jne    c0007436 <f_forward+0x17b>
c000742b:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000742f:	bd 01 00 00 00       	mov    ebp,0x1
c0007434:	eb 59                	jmp    c000748f <f_forward+0x1d4>
c0007436:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007439:	e9 23 ff ff ff       	jmp    c0007361 <f_forward+0xa6>
c000743e:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0007442:	79 20                	jns    c0007464 <f_forward+0x1a9>
c0007444:	83 ec 0c             	sub    esp,0xc
c0007447:	6a 01                	push   0x1
c0007449:	52                   	push   edx
c000744a:	50                   	push   eax
c000744b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000744f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0007453:	50                   	push   eax
c0007454:	e8 c5 a6 ff ff       	call   c0001b1e <disk_write>
c0007459:	83 c4 20             	add    esp,0x20
c000745c:	85 c0                	test   eax,eax
c000745e:	75 cb                	jne    c000742b <f_forward+0x170>
c0007460:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007464:	83 ec 0c             	sub    esp,0xc
c0007467:	6a 01                	push   0x1
c0007469:	57                   	push   edi
c000746a:	56                   	push   esi
c000746b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000746f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007473:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007477:	50                   	push   eax
c0007478:	e8 8b a6 ff ff       	call   c0001b08 <disk_read>
c000747d:	83 c4 20             	add    esp,0x20
c0007480:	85 c0                	test   eax,eax
c0007482:	0f 84 1c ff ff ff    	je     c00073a4 <f_forward+0xe9>
c0007488:	eb a1                	jmp    c000742b <f_forward+0x170>
c000748a:	bd 07 00 00 00       	mov    ebp,0x7
c000748f:	83 c4 2c             	add    esp,0x2c
c0007492:	89 e8                	mov    eax,ebp
c0007494:	5b                   	pop    ebx
c0007495:	5e                   	pop    esi
c0007496:	5f                   	pop    edi
c0007497:	5d                   	pop    ebp
c0007498:	c3                   	ret    

c0007499 <f_mkfs>:
c0007499:	55                   	push   ebp
c000749a:	57                   	push   edi
c000749b:	56                   	push   esi
c000749c:	53                   	push   ebx
c000749d:	bb 0b 00 00 00       	mov    ebx,0xb
c00074a2:	81 ec 9c 00 00 00    	sub    esp,0x9c
c00074a8:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c00074af:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c00074b6:	e8 7a ac ff ff       	call   c0002135 <get_ldnumber>
c00074bb:	85 c0                	test   eax,eax
c00074bd:	0f 88 ec 10 00 00    	js     c00085af <f_mkfs+0x1116>
c00074c3:	8b 14 85 a0 7e 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8160]
c00074ca:	85 d2                	test   edx,edx
c00074cc:	74 03                	je     c00074d1 <f_mkfs+0x38>
c00074ce:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00074d1:	85 f6                	test   esi,esi
c00074d3:	75 05                	jne    c00074da <f_mkfs+0x41>
c00074d5:	be 00 36 02 c0       	mov    esi,0xc0023600
c00074da:	83 ec 0c             	sub    esp,0xc
c00074dd:	0f b6 c0             	movzx  eax,al
c00074e0:	bb 03 00 00 00       	mov    ebx,0x3
c00074e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00074e9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074ed:	e8 13 a6 ff ff       	call   c0001b05 <disk_initialize>
c00074f2:	83 c4 10             	add    esp,0x10
c00074f5:	a8 01                	test   al,0x1
c00074f7:	0f 85 b2 10 00 00    	jne    c00085af <f_mkfs+0x1116>
c00074fd:	bb 0a 00 00 00       	mov    ebx,0xa
c0007502:	a8 04                	test   al,0x4
c0007504:	0f 85 a5 10 00 00    	jne    c00085af <f_mkfs+0x1116>
c000750a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000750d:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007511:	85 c0                	test   eax,eax
c0007513:	75 20                	jne    c0007535 <f_mkfs+0x9c>
c0007515:	51                   	push   ecx
c0007516:	8d 44 24 78          	lea    eax,[esp+0x78]
c000751a:	50                   	push   eax
c000751b:	6a 03                	push   0x3
c000751d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007521:	e8 0e a6 ff ff       	call   c0001b34 <disk_ioctl>
c0007526:	83 c4 10             	add    esp,0x10
c0007529:	85 c0                	test   eax,eax
c000752b:	74 08                	je     c0007535 <f_mkfs+0x9c>
c000752d:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007535:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007539:	8d 42 ff             	lea    eax,[edx-0x1]
c000753c:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007541:	77 04                	ja     c0007547 <f_mkfs+0xae>
c0007543:	85 c2                	test   edx,eax
c0007545:	74 08                	je     c000754f <f_mkfs+0xb6>
c0007547:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000754f:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0007552:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0007556:	48                   	dec    eax
c0007557:	3c 01                	cmp    al,0x1
c0007559:	76 05                	jbe    c0007560 <f_mkfs+0xc7>
c000755b:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007560:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007563:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007567:	48                   	dec    eax
c0007568:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000756d:	77 07                	ja     c0007576 <f_mkfs+0xdd>
c000756f:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007574:	74 08                	je     c000757e <f_mkfs+0xe5>
c0007576:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c000757e:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007581:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007587:	77 07                	ja     c0007590 <f_mkfs+0xf7>
c0007589:	8d 43 ff             	lea    eax,[ebx-0x1]
c000758c:	85 d8                	test   eax,ebx
c000758e:	74 02                	je     c0007592 <f_mkfs+0xf9>
c0007590:	31 db                	xor    ebx,ebx
c0007592:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c000759d:	77 0a                	ja     c00075a9 <f_mkfs+0x110>
c000759f:	bb 11 00 00 00       	mov    ebx,0x11
c00075a4:	e9 06 10 00 00       	jmp    c00085af <f_mkfs+0x1116>
c00075a9:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c00075b0:	8b 36                	mov    esi,DWORD PTR [esi]
c00075b2:	85 ed                	test   ebp,ebp
c00075b4:	75 1e                	jne    c00075d4 <f_mkfs+0x13b>
c00075b6:	83 ec 0c             	sub    esp,0xc
c00075b9:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00075c0:	25 00 fe ff ff       	and    eax,0xfffffe00
c00075c5:	50                   	push   eax
c00075c6:	e8 f1 0f 00 00       	call   c00085bc <ff_memalloc>
c00075cb:	83 c4 10             	add    esp,0x10
c00075ce:	89 c5                	mov    ebp,eax
c00075d0:	85 c0                	test   eax,eax
c00075d2:	74 cb                	je     c000759f <f_mkfs+0x106>
c00075d4:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00075dc:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00075e4:	52                   	push   edx
c00075e5:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00075e9:	50                   	push   eax
c00075ea:	6a 01                	push   0x1
c00075ec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00075f0:	e8 3f a5 ff ff       	call   c0001b34 <disk_ioctl>
c00075f5:	83 c4 10             	add    esp,0x10
c00075f8:	85 c0                	test   eax,eax
c00075fa:	0f 85 4a 0f 00 00    	jne    c000854a <f_mkfs+0x10b1>
c0007600:	89 f1                	mov    ecx,esi
c0007602:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000760a:	83 e1 0f             	and    ecx,0xf
c000760d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007615:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c0007619:	83 e6 08             	and    esi,0x8
c000761c:	75 56                	jne    c0007674 <f_mkfs+0x1db>
c000761e:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c0007622:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c0007626:	83 ff 00             	cmp    edi,0x0
c0007629:	76 20                	jbe    c000764b <f_mkfs+0x1b2>
c000762b:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007630:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007638:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c000763e:	83 d7 ff             	adc    edi,0xffffffff
c0007641:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007645:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007649:	eb 21                	jmp    c000766c <f_mkfs+0x1d3>
c000764b:	ba 3f 00 00 00       	mov    edx,0x3f
c0007650:	39 f2                	cmp    edx,esi
c0007652:	19 f8                	sbb    eax,edi
c0007654:	73 1e                	jae    c0007674 <f_mkfs+0x1db>
c0007656:	83 c6 c1             	add    esi,0xffffffc1
c0007659:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007661:	83 d7 ff             	adc    edi,0xffffffff
c0007664:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007668:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000766c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007674:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007678:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000767c:	89 04 24             	mov    DWORD PTR [esp],eax
c000767f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007683:	31 c0                	xor    eax,eax
c0007685:	ba 7f 00 00 00       	mov    edx,0x7f
c000768a:	89 c7                	mov    edi,eax
c000768c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000768f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007693:	0f 83 c5 0a 00 00    	jae    c000815e <f_mkfs+0xcc5>
c0007699:	89 df                	mov    edi,ebx
c000769b:	c1 ef 09             	shr    edi,0x9
c000769e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00076a2:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c00076a9:	c1 ef 09             	shr    edi,0x9
c00076ac:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c00076b1:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00076b5:	74 29                	je     c00076e0 <f_mkfs+0x247>
c00076b7:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00076bd:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00076c2:	0f 97 c2             	seta   dl
c00076c5:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00076c8:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00076cc:	0f 92 c0             	setb   al
c00076cf:	08 c2                	or     dl,al
c00076d1:	75 5b                	jne    c000772e <f_mkfs+0x295>
c00076d3:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00076d7:	83 e0 07             	and    eax,0x7
c00076da:	3c 04                	cmp    al,0x4
c00076dc:	74 50                	je     c000772e <f_mkfs+0x295>
c00076de:	eb 1b                	jmp    c00076fb <f_mkfs+0x262>
c00076e0:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00076e5:	0f 87 73 0a 00 00    	ja     c000815e <f_mkfs+0xcc5>
c00076eb:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00076f1:	76 08                	jbe    c00076fb <f_mkfs+0x262>
c00076f3:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00076fb:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00076ff:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c0007703:	83 e0 01             	and    eax,0x1
c0007706:	80 e1 02             	and    cl,0x2
c0007709:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c000770d:	74 0d                	je     c000771c <f_mkfs+0x283>
c000770f:	84 c0                	test   al,al
c0007711:	0f 84 53 09 00 00    	je     c000806a <f_mkfs+0xbd1>
c0007717:	e9 12 08 00 00       	jmp    c0007f2e <f_mkfs+0xa95>
c000771c:	bb 13 00 00 00       	mov    ebx,0x13
c0007721:	84 c0                	test   al,al
c0007723:	0f 85 05 08 00 00    	jne    c0007f2e <f_mkfs+0xa95>
c0007729:	e9 39 0e 00 00       	jmp    c0008567 <f_mkfs+0x10ce>
c000772e:	31 c0                	xor    eax,eax
c0007730:	ba ff 0f 00 00       	mov    edx,0xfff
c0007735:	89 c7                	mov    edi,eax
c0007737:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000773a:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000773e:	0f 83 1a 0a 00 00    	jae    c000815e <f_mkfs+0xcc5>
c0007744:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c000774a:	77 39                	ja     c0007785 <f_mkfs+0x2ec>
c000774c:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007751:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007759:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000775c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007760:	73 08                	jae    c000776a <f_mkfs+0x2d1>
c0007762:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c000776a:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c000776f:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007772:	b8 00 00 00 00       	mov    eax,0x0
c0007777:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000777b:	73 08                	jae    c0007785 <f_mkfs+0x2ec>
c000777d:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007785:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007789:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000778d:	83 c0 20             	add    eax,0x20
c0007790:	83 d2 00             	adc    edx,0x0
c0007793:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007797:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000779b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000779f:	31 d2                	xor    edx,edx
c00077a1:	31 ff                	xor    edi,edi
c00077a3:	52                   	push   edx
c00077a4:	89 fb                	mov    ebx,edi
c00077a6:	50                   	push   eax
c00077a7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077ab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077af:	e8 6c af 01 00       	call   c0022720 <__udivdi3>
c00077b4:	83 c4 10             	add    esp,0x10
c00077b7:	c1 e0 02             	shl    eax,0x2
c00077ba:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00077be:	05 07 02 00 00       	add    eax,0x207
c00077c3:	89 f1                	mov    ecx,esi
c00077c5:	c1 e8 09             	shr    eax,0x9
c00077c8:	83 c1 ff             	add    ecx,0xffffffff
c00077cb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00077cf:	83 d3 ff             	adc    ebx,0xffffffff
c00077d2:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00077d6:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00077da:	31 d2                	xor    edx,edx
c00077dc:	01 c8                	add    eax,ecx
c00077de:	11 da                	adc    edx,ebx
c00077e0:	89 c1                	mov    ecx,eax
c00077e2:	f7 de                	neg    esi
c00077e4:	89 d0                	mov    eax,edx
c00077e6:	83 d7 00             	adc    edi,0x0
c00077e9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00077ed:	f7 df                	neg    edi
c00077ef:	21 f1                	and    ecx,esi
c00077f1:	21 f8                	and    eax,edi
c00077f3:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00077f7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00077fb:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00077ff:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0007803:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c0007807:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000780a:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c000780e:	0f ac d0 01          	shrd   eax,edx,0x1
c0007812:	89 df                	mov    edi,ebx
c0007814:	d1 ea                	shr    edx,1
c0007816:	39 c1                	cmp    ecx,eax
c0007818:	19 d7                	sbb    edi,edx
c000781a:	0f 83 3e 09 00 00    	jae    c000815e <f_mkfs+0xcc5>
c0007820:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007824:	31 d2                	xor    edx,edx
c0007826:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c000782a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000782e:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c0007832:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007835:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007839:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c000783d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007841:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007845:	83 f8 0f             	cmp    eax,0xf
c0007848:	0f 86 10 09 00 00    	jbe    c000815e <f_mkfs+0xcc5>
c000784e:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c0007856:	0f 87 02 09 00 00    	ja     c000815e <f_mkfs+0xcc5>
c000785c:	31 d2                	xor    edx,edx
c000785e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007862:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000786a:	83 c0 07             	add    eax,0x7
c000786d:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007875:	c1 e8 03             	shr    eax,0x3
c0007878:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000787f:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007883:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007887:	c1 e0 09             	shl    eax,0x9
c000788a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000788e:	48                   	dec    eax
c000788f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007893:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007897:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c000789b:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000789f:	31 d2                	xor    edx,edx
c00078a1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00078a5:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00078ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078b0:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00078b5:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00078b9:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00078bd:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00078c1:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00078c5:	31 ff                	xor    edi,edi
c00078c7:	31 f6                	xor    esi,esi
c00078c9:	31 db                	xor    ebx,ebx
c00078cb:	85 ff                	test   edi,edi
c00078cd:	74 05                	je     c00078d4 <f_mkfs+0x43b>
c00078cf:	4f                   	dec    edi
c00078d0:	74 44                	je     c0007916 <f_mkfs+0x47d>
c00078d2:	eb 4f                	jmp    c0007923 <f_mkfs+0x48a>
c00078d4:	83 ec 0c             	sub    esp,0xc
c00078d7:	0f b7 c3             	movzx  eax,bx
c00078da:	50                   	push   eax
c00078db:	e8 18 0e 00 00       	call   c00086f8 <ff_wtoupper>
c00078e0:	83 c4 10             	add    esp,0x10
c00078e3:	89 c1                	mov    ecx,eax
c00078e5:	8d 53 01             	lea    edx,[ebx+0x1]
c00078e8:	66 39 c3             	cmp    bx,ax
c00078eb:	75 3e                	jne    c000792b <f_mkfs+0x492>
c00078ed:	be 01 00 00 00       	mov    esi,0x1
c00078f2:	89 df                	mov    edi,ebx
c00078f4:	66 01 f7             	add    di,si
c00078f7:	75 07                	jne    c0007900 <f_mkfs+0x467>
c00078f9:	83 fe 7f             	cmp    esi,0x7f
c00078fc:	77 31                	ja     c000792f <f_mkfs+0x496>
c00078fe:	eb 16                	jmp    c0007916 <f_mkfs+0x47d>
c0007900:	83 ec 0c             	sub    esp,0xc
c0007903:	0f b7 ff             	movzx  edi,di
c0007906:	57                   	push   edi
c0007907:	e8 ec 0d 00 00       	call   c00086f8 <ff_wtoupper>
c000790c:	83 c4 10             	add    esp,0x10
c000790f:	39 c7                	cmp    edi,eax
c0007911:	75 e6                	jne    c00078f9 <f_mkfs+0x460>
c0007913:	46                   	inc    esi
c0007914:	eb dc                	jmp    c00078f2 <f_mkfs+0x459>
c0007916:	31 c0                	xor    eax,eax
c0007918:	89 d9                	mov    ecx,ebx
c000791a:	4e                   	dec    esi
c000791b:	0f 95 c0             	setne  al
c000791e:	43                   	inc    ebx
c000791f:	89 c7                	mov    edi,eax
c0007921:	eb 14                	jmp    c0007937 <f_mkfs+0x49e>
c0007923:	89 f1                	mov    ecx,esi
c0007925:	01 f3                	add    ebx,esi
c0007927:	31 ff                	xor    edi,edi
c0007929:	eb 0c                	jmp    c0007937 <f_mkfs+0x49e>
c000792b:	89 d3                	mov    ebx,edx
c000792d:	eb 08                	jmp    c0007937 <f_mkfs+0x49e>
c000792f:	bf 02 00 00 00       	mov    edi,0x2
c0007934:	83 c9 ff             	or     ecx,0xffffffff
c0007937:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000793b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000793e:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c0007942:	0f b6 c1             	movzx  eax,cl
c0007945:	e8 04 a7 ff ff       	call   c000204e <xsum32>
c000794a:	66 c1 e9 08          	shr    cx,0x8
c000794e:	89 c2                	mov    edx,eax
c0007950:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007953:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c0007957:	0f b7 c1             	movzx  eax,cx
c000795a:	e8 ef a6 ff ff       	call   c000204e <xsum32>
c000795f:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007964:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007968:	66 85 db             	test   bx,bx
c000796b:	74 1f                	je     c000798c <f_mkfs+0x4f3>
c000796d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007970:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007977:	83 c0 02             	add    eax,0x2
c000797a:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007980:	39 c2                	cmp    edx,eax
c0007982:	74 08                	je     c000798c <f_mkfs+0x4f3>
c0007984:	89 04 24             	mov    DWORD PTR [esp],eax
c0007987:	e9 3f ff ff ff       	jmp    c00078cb <f_mkfs+0x432>
c000798c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000798f:	83 ec 0c             	sub    esp,0xc
c0007992:	05 01 02 00 00       	add    eax,0x201
c0007997:	c1 e8 09             	shr    eax,0x9
c000799a:	50                   	push   eax
c000799b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000799f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079a3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079a7:	55                   	push   ebp
c00079a8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079ac:	e8 6d a1 ff ff       	call   c0001b1e <disk_write>
c00079b1:	83 c4 20             	add    esp,0x20
c00079b4:	85 c0                	test   eax,eax
c00079b6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00079b9:	0f 85 8b 0b 00 00    	jne    c000854a <f_mkfs+0x10b1>
c00079bf:	89 d0                	mov    eax,edx
c00079c1:	31 d2                	xor    edx,edx
c00079c3:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00079c7:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00079cb:	66 85 db             	test   bx,bx
c00079ce:	74 04                	je     c00079d4 <f_mkfs+0x53b>
c00079d0:	31 c0                	xor    eax,eax
c00079d2:	eb b0                	jmp    c0007984 <f_mkfs+0x4eb>
c00079d4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00079d8:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00079dc:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00079e0:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00079e6:	31 d2                	xor    edx,edx
c00079e8:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00079f3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00079f7:	c1 eb 09             	shr    ebx,0x9
c00079fa:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007a01:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007a05:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007a09:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a0d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007a11:	8d 70 01             	lea    esi,[eax+0x1]
c0007a14:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007a18:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a1c:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007a23:	31 d2                	xor    edx,edx
c0007a25:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007a2a:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a2d:	89 c1                	mov    ecx,eax
c0007a2f:	89 e8                	mov    eax,ebp
c0007a31:	e8 b1 a1 ff ff       	call   c0001be7 <mem_set>
c0007a36:	31 c0                	xor    eax,eax
c0007a38:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a3b:	76 10                	jbe    c0007a4d <f_mkfs+0x5b4>
c0007a3d:	83 fe 07             	cmp    esi,0x7
c0007a40:	76 0b                	jbe    c0007a4d <f_mkfs+0x5b4>
c0007a42:	40                   	inc    eax
c0007a43:	83 ee 08             	sub    esi,0x8
c0007a46:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007a4b:	eb eb                	jmp    c0007a38 <f_mkfs+0x59f>
c0007a4d:	b2 01                	mov    dl,0x1
c0007a4f:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007a53:	85 f6                	test   esi,esi
c0007a55:	74 0c                	je     c0007a63 <f_mkfs+0x5ca>
c0007a57:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a5a:	76 07                	jbe    c0007a63 <f_mkfs+0x5ca>
c0007a5c:	08 11                	or     BYTE PTR [ecx],dl
c0007a5e:	4e                   	dec    esi
c0007a5f:	d1 e2                	shl    edx,1
c0007a61:	eb f0                	jmp    c0007a53 <f_mkfs+0x5ba>
c0007a63:	89 df                	mov    edi,ebx
c0007a65:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007a69:	76 04                	jbe    c0007a6f <f_mkfs+0x5d6>
c0007a6b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007a6f:	83 ec 0c             	sub    esp,0xc
c0007a72:	57                   	push   edi
c0007a73:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a77:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a7b:	55                   	push   ebp
c0007a7c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a80:	e8 99 a0 ff ff       	call   c0001b1e <disk_write>
c0007a85:	83 c4 20             	add    esp,0x20
c0007a88:	85 c0                	test   eax,eax
c0007a8a:	0f 85 ba 0a 00 00    	jne    c000854a <f_mkfs+0x10b1>
c0007a90:	31 d2                	xor    edx,edx
c0007a92:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007a96:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007a9a:	29 fb                	sub    ebx,edi
c0007a9c:	0f 85 7a ff ff ff    	jne    c0007a1c <f_mkfs+0x583>
c0007aa2:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007aa6:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007aae:	31 f6                	xor    esi,esi
c0007ab0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007ab4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ab7:	31 d2                	xor    edx,edx
c0007ab9:	89 e8                	mov    eax,ebp
c0007abb:	e8 27 a1 ff ff       	call   c0001be7 <mem_set>
c0007ac0:	31 c9                	xor    ecx,ecx
c0007ac2:	85 db                	test   ebx,ebx
c0007ac4:	75 40                	jne    c0007b06 <f_mkfs+0x66d>
c0007ac6:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007acb:	89 e8                	mov    eax,ebp
c0007acd:	bb 02 00 00 00       	mov    ebx,0x2
c0007ad2:	e8 f2 a0 ff ff       	call   c0001bc9 <st_dword>
c0007ad7:	8d 45 04             	lea    eax,[ebp+0x4]
c0007ada:	83 ca ff             	or     edx,0xffffffff
c0007add:	e8 e7 a0 ff ff       	call   c0001bc9 <st_dword>
c0007ae2:	b9 08 00 00 00       	mov    ecx,0x8
c0007ae7:	eb 1d                	jmp    c0007b06 <f_mkfs+0x66d>
c0007ae9:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007aec:	76 3b                	jbe    c0007b29 <f_mkfs+0x690>
c0007aee:	43                   	inc    ebx
c0007aef:	83 fe 01             	cmp    esi,0x1
c0007af2:	89 da                	mov    edx,ebx
c0007af4:	77 03                	ja     c0007af9 <f_mkfs+0x660>
c0007af6:	83 ca ff             	or     edx,0xffffffff
c0007af9:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007afd:	4e                   	dec    esi
c0007afe:	e8 c6 a0 ff ff       	call   c0001bc9 <st_dword>
c0007b03:	83 c1 04             	add    ecx,0x4
c0007b06:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007b0a:	85 f6                	test   esi,esi
c0007b0c:	75 db                	jne    c0007ae9 <f_mkfs+0x650>
c0007b0e:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007b13:	77 14                	ja     c0007b29 <f_mkfs+0x690>
c0007b15:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007b19:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007b20:	85 f6                	test   esi,esi
c0007b22:	74 05                	je     c0007b29 <f_mkfs+0x690>
c0007b24:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007b27:	77 dd                	ja     c0007b06 <f_mkfs+0x66d>
c0007b29:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007b2d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007b31:	39 cf                	cmp    edi,ecx
c0007b33:	76 02                	jbe    c0007b37 <f_mkfs+0x69e>
c0007b35:	89 cf                	mov    edi,ecx
c0007b37:	83 ec 0c             	sub    esp,0xc
c0007b3a:	57                   	push   edi
c0007b3b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b3f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b43:	55                   	push   ebp
c0007b44:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b48:	e8 d1 9f ff ff       	call   c0001b1e <disk_write>
c0007b4d:	83 c4 20             	add    esp,0x20
c0007b50:	85 c0                	test   eax,eax
c0007b52:	0f 85 f2 09 00 00    	jne    c000854a <f_mkfs+0x10b1>
c0007b58:	31 d2                	xor    edx,edx
c0007b5a:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007b5e:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007b62:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007b66:	0f 85 48 ff ff ff    	jne    c0007ab4 <f_mkfs+0x61b>
c0007b6c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007b6f:	31 d2                	xor    edx,edx
c0007b71:	89 e8                	mov    eax,ebp
c0007b73:	31 ff                	xor    edi,edi
c0007b75:	e8 6d a0 ff ff       	call   c0001be7 <mem_set>
c0007b7a:	8d 45 34             	lea    eax,[ebp+0x34]
c0007b7d:	ba 02 00 00 00       	mov    edx,0x2
c0007b82:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007b86:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007b8a:	e8 3a a0 ff ff       	call   c0001bc9 <st_dword>
c0007b8f:	8d 45 38             	lea    eax,[ebp+0x38]
c0007b92:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007b96:	e8 2e a0 ff ff       	call   c0001bc9 <st_dword>
c0007b9b:	8d 45 44             	lea    eax,[ebp+0x44]
c0007b9e:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007ba2:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007ba6:	e8 1e a0 ff ff       	call   c0001bc9 <st_dword>
c0007bab:	8d 45 54             	lea    eax,[ebp+0x54]
c0007bae:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007bb2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007bb6:	83 c2 02             	add    edx,0x2
c0007bb9:	e8 0b a0 ff ff       	call   c0001bc9 <st_dword>
c0007bbe:	8d 45 58             	lea    eax,[ebp+0x58]
c0007bc1:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007bc5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007bc9:	e8 fb 9f ff ff       	call   c0001bc9 <st_dword>
c0007bce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bd2:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007bd7:	89 c6                	mov    esi,eax
c0007bd9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bdd:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007be1:	89 04 24             	mov    DWORD PTR [esp],eax
c0007be4:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007be8:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007beb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007bef:	39 cb                	cmp    ebx,ecx
c0007bf1:	76 02                	jbe    c0007bf5 <f_mkfs+0x75c>
c0007bf3:	89 cb                	mov    ebx,ecx
c0007bf5:	83 ec 0c             	sub    esp,0xc
c0007bf8:	53                   	push   ebx
c0007bf9:	57                   	push   edi
c0007bfa:	56                   	push   esi
c0007bfb:	55                   	push   ebp
c0007bfc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c00:	e8 19 9f ff ff       	call   c0001b1e <disk_write>
c0007c05:	83 c4 20             	add    esp,0x20
c0007c08:	85 c0                	test   eax,eax
c0007c0a:	0f 85 3a 09 00 00    	jne    c000854a <f_mkfs+0x10b1>
c0007c10:	31 d2                	xor    edx,edx
c0007c12:	b9 00 02 00 00       	mov    ecx,0x200
c0007c17:	89 e8                	mov    eax,ebp
c0007c19:	e8 c9 9f ff ff       	call   c0001be7 <mem_set>
c0007c1e:	31 d2                	xor    edx,edx
c0007c20:	01 de                	add    esi,ebx
c0007c22:	11 d7                	adc    edi,edx
c0007c24:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007c27:	75 bf                	jne    c0007be8 <f_mkfs+0x74f>
c0007c29:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007c2d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007c31:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007c39:	b9 00 02 00 00       	mov    ecx,0x200
c0007c3e:	31 d2                	xor    edx,edx
c0007c40:	89 e8                	mov    eax,ebp
c0007c42:	e8 a0 9f ff ff       	call   c0001be7 <mem_set>
c0007c47:	b9 0b 00 00 00       	mov    ecx,0xb
c0007c4c:	ba e0 36 02 c0       	mov    edx,0xc00236e0
c0007c51:	89 e8                	mov    eax,ebp
c0007c53:	e8 7a 9f ff ff       	call   c0001bd2 <mem_cpy>
c0007c58:	8d 45 40             	lea    eax,[ebp+0x40]
c0007c5b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007c5f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007c63:	e8 64 9f ff ff       	call   c0001bcc <st_qword>
c0007c68:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007c6c:	8d 45 48             	lea    eax,[ebp+0x48]
c0007c6f:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007c73:	e8 54 9f ff ff       	call   c0001bcc <st_qword>
c0007c78:	8d 45 50             	lea    eax,[ebp+0x50]
c0007c7b:	ba 20 00 00 00       	mov    edx,0x20
c0007c80:	e8 44 9f ff ff       	call   c0001bc9 <st_dword>
c0007c85:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007c89:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007c8d:	e8 37 9f ff ff       	call   c0001bc9 <st_dword>
c0007c92:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007c96:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007c9a:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007c9e:	e8 26 9f ff ff       	call   c0001bc9 <st_dword>
c0007ca3:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007ca6:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007caa:	e8 1a 9f ff ff       	call   c0001bc9 <st_dword>
c0007caf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007cb3:	8d 50 02             	lea    edx,[eax+0x2]
c0007cb6:	8d 45 60             	lea    eax,[ebp+0x60]
c0007cb9:	e8 0b 9f ff ff       	call   c0001bc9 <st_dword>
c0007cbe:	8d 45 64             	lea    eax,[ebp+0x64]
c0007cc1:	ba 00 00 21 50       	mov    edx,0x50210000
c0007cc6:	e8 fe 9e ff ff       	call   c0001bc9 <st_dword>
c0007ccb:	8d 45 68             	lea    eax,[ebp+0x68]
c0007cce:	ba 00 01 00 00       	mov    edx,0x100
c0007cd3:	e8 ed 9e ff ff       	call   c0001bc5 <st_word>
c0007cd8:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007cdc:	b8 0a 00 00 00       	mov    eax,0xa
c0007ce1:	48                   	dec    eax
c0007ce2:	74 05                	je     c0007ce9 <f_mkfs+0x850>
c0007ce4:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007ce7:	eb f8                	jmp    c0007ce1 <f_mkfs+0x848>
c0007ce9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ced:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007cf1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007cf5:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007cf9:	74 05                	je     c0007d00 <f_mkfs+0x867>
c0007cfb:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007cfe:	eb f5                	jmp    c0007cf5 <f_mkfs+0x85c>
c0007d00:	8d 45 78             	lea    eax,[ebp+0x78]
c0007d03:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007d08:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007d0e:	31 db                	xor    ebx,ebx
c0007d10:	e8 b0 9e ff ff       	call   c0001bc5 <st_word>
c0007d15:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007d1b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007d20:	89 04 24             	mov    DWORD PTR [esp],eax
c0007d23:	e8 9d 9e ff ff       	call   c0001bc5 <st_word>
c0007d28:	31 c9                	xor    ecx,ecx
c0007d2a:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007d2d:	83 f8 01             	cmp    eax,0x1
c0007d30:	76 13                	jbe    c0007d45 <f_mkfs+0x8ac>
c0007d32:	83 f9 70             	cmp    ecx,0x70
c0007d35:	74 0e                	je     c0007d45 <f_mkfs+0x8ac>
c0007d37:	89 da                	mov    edx,ebx
c0007d39:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007d3e:	e8 0b a3 ff ff       	call   c000204e <xsum32>
c0007d43:	89 c3                	mov    ebx,eax
c0007d45:	41                   	inc    ecx
c0007d46:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d4c:	75 dc                	jne    c0007d2a <f_mkfs+0x891>
c0007d4e:	89 f0                	mov    eax,esi
c0007d50:	89 fa                	mov    edx,edi
c0007d52:	83 c0 01             	add    eax,0x1
c0007d55:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007d59:	83 d2 00             	adc    edx,0x0
c0007d5c:	83 ec 0c             	sub    esp,0xc
c0007d5f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d63:	6a 01                	push   0x1
c0007d65:	57                   	push   edi
c0007d66:	56                   	push   esi
c0007d67:	55                   	push   ebp
c0007d68:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d6c:	e8 ad 9d ff ff       	call   c0001b1e <disk_write>
c0007d71:	83 c4 20             	add    esp,0x20
c0007d74:	85 c0                	test   eax,eax
c0007d76:	0f 85 ce 07 00 00    	jne    c000854a <f_mkfs+0x10b1>
c0007d7c:	31 d2                	xor    edx,edx
c0007d7e:	b9 00 02 00 00       	mov    ecx,0x200
c0007d83:	89 e8                	mov    eax,ebp
c0007d85:	e8 5d 9e ff ff       	call   c0001be7 <mem_set>
c0007d8a:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007d8f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007d92:	e8 2e 9e ff ff       	call   c0001bc5 <st_word>
c0007d97:	89 f0                	mov    eax,esi
c0007d99:	89 fa                	mov    edx,edi
c0007d9b:	83 c0 09             	add    eax,0x9
c0007d9e:	83 d2 00             	adc    edx,0x0
c0007da1:	89 04 24             	mov    DWORD PTR [esp],eax
c0007da4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007da8:	31 c9                	xor    ecx,ecx
c0007daa:	41                   	inc    ecx
c0007dab:	89 da                	mov    edx,ebx
c0007dad:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007db2:	e8 97 a2 ff ff       	call   c000204e <xsum32>
c0007db7:	89 c3                	mov    ebx,eax
c0007db9:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007dbf:	75 e9                	jne    c0007daa <f_mkfs+0x911>
c0007dc1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007dc5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007dc9:	83 c0 01             	add    eax,0x1
c0007dcc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007dd0:	83 d2 00             	adc    edx,0x0
c0007dd3:	83 ec 0c             	sub    esp,0xc
c0007dd6:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007dda:	6a 01                	push   0x1
c0007ddc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007de0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007de4:	55                   	push   ebp
c0007de5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007de9:	e8 30 9d ff ff       	call   c0001b1e <disk_write>
c0007dee:	83 c4 20             	add    esp,0x20
c0007df1:	85 c0                	test   eax,eax
c0007df3:	0f 85 51 07 00 00    	jne    c000854a <f_mkfs+0x10b1>
c0007df9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007dfd:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007e01:	75 09                	jne    c0007e0c <f_mkfs+0x973>
c0007e03:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e06:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007e0a:	74 12                	je     c0007e1e <f_mkfs+0x985>
c0007e0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007e10:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007e14:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007e18:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007e1c:	eb 8a                	jmp    c0007da8 <f_mkfs+0x90f>
c0007e1e:	31 d2                	xor    edx,edx
c0007e20:	b9 00 02 00 00       	mov    ecx,0x200
c0007e25:	89 e8                	mov    eax,ebp
c0007e27:	e8 bb 9d ff ff       	call   c0001be7 <mem_set>
c0007e2c:	83 c6 0b             	add    esi,0xb
c0007e2f:	83 d7 00             	adc    edi,0x0
c0007e32:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007e36:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007e3a:	31 c9                	xor    ecx,ecx
c0007e3c:	41                   	inc    ecx
c0007e3d:	89 da                	mov    edx,ebx
c0007e3f:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007e44:	e8 05 a2 ff ff       	call   c000204e <xsum32>
c0007e49:	89 c3                	mov    ebx,eax
c0007e4b:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007e51:	75 e9                	jne    c0007e3c <f_mkfs+0x9a3>
c0007e53:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007e56:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007e5a:	83 c6 01             	add    esi,0x1
c0007e5d:	83 d7 00             	adc    edi,0x0
c0007e60:	83 ec 0c             	sub    esp,0xc
c0007e63:	6a 01                	push   0x1
c0007e65:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e69:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e6d:	55                   	push   ebp
c0007e6e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007e72:	e8 a7 9c ff ff       	call   c0001b1e <disk_write>
c0007e77:	83 c4 20             	add    esp,0x20
c0007e7a:	85 c0                	test   eax,eax
c0007e7c:	0f 85 c8 06 00 00    	jne    c000854a <f_mkfs+0x10b1>
c0007e82:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007e86:	75 06                	jne    c0007e8e <f_mkfs+0x9f5>
c0007e88:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007e8c:	74 09                	je     c0007e97 <f_mkfs+0x9fe>
c0007e8e:	89 34 24             	mov    DWORD PTR [esp],esi
c0007e91:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007e95:	eb a3                	jmp    c0007e3a <f_mkfs+0x9a1>
c0007e97:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007e9b:	89 da                	mov    edx,ebx
c0007e9d:	01 e8                	add    eax,ebp
c0007e9f:	e8 25 9d ff ff       	call   c0001bc9 <st_dword>
c0007ea4:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007ea9:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007eb1:	75 e4                	jne    c0007e97 <f_mkfs+0x9fe>
c0007eb3:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007eb6:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007eba:	83 c6 02             	add    esi,0x2
c0007ebd:	83 d7 00             	adc    edi,0x0
c0007ec0:	83 ec 0c             	sub    esp,0xc
c0007ec3:	6a 01                	push   0x1
c0007ec5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ec9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ecd:	55                   	push   ebp
c0007ece:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ed2:	e8 47 9c ff ff       	call   c0001b1e <disk_write>
c0007ed7:	83 c4 20             	add    esp,0x20
c0007eda:	85 c0                	test   eax,eax
c0007edc:	0f 85 68 06 00 00    	jne    c000854a <f_mkfs+0x10b1>
c0007ee2:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007ee7:	74 0d                	je     c0007ef6 <f_mkfs+0xa5d>
c0007ee9:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007ef1:	e9 43 fd ff ff       	jmp    c0007c39 <f_mkfs+0x7a0>
c0007ef6:	b1 07                	mov    cl,0x7
c0007ef8:	e9 e3 05 00 00       	jmp    c00084e0 <f_mkfs+0x1047>
c0007efd:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007f02:	0f 85 4f 02 00 00    	jne    c0008157 <f_mkfs+0xcbe>
c0007f08:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f0d:	0f 86 22 02 00 00    	jbe    c0008135 <f_mkfs+0xc9c>
c0007f13:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f18:	0f 85 81 06 00 00    	jne    c000859f <f_mkfs+0x1106>
c0007f1e:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007f21:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007f25:	83 f8 40             	cmp    eax,0x40
c0007f28:	0f 87 51 06 00 00    	ja     c000857f <f_mkfs+0x10e6>
c0007f2e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f32:	85 ff                	test   edi,edi
c0007f34:	75 1c                	jne    c0007f52 <f_mkfs+0xab9>
c0007f36:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f39:	ba e0 35 02 c0       	mov    edx,0xc00235e0
c0007f3e:	c1 e9 0c             	shr    ecx,0xc
c0007f41:	bf 01 00 00 00       	mov    edi,0x1
c0007f46:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f49:	66 85 c0             	test   ax,ax
c0007f4c:	0f 85 95 01 00 00    	jne    c00080e7 <f_mkfs+0xc4e>
c0007f52:	31 d2                	xor    edx,edx
c0007f54:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007f57:	f7 f7                	div    edi
c0007f59:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007f5e:	0f 86 95 01 00 00    	jbe    c00080f9 <f_mkfs+0xc60>
c0007f64:	83 c0 02             	add    eax,0x2
c0007f67:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007f6c:	01 c0                	add    eax,eax
c0007f6e:	05 ff 01 00 00       	add    eax,0x1ff
c0007f73:	be 01 00 00 00       	mov    esi,0x1
c0007f78:	c1 e8 09             	shr    eax,0x9
c0007f7b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007f7f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007f83:	c1 e0 05             	shl    eax,0x5
c0007f86:	c1 e8 09             	shr    eax,0x9
c0007f89:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007f8d:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007f92:	31 d2                	xor    edx,edx
c0007f94:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007f98:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007f9c:	89 f0                	mov    eax,esi
c0007f9e:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007fa2:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007fa6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007faa:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007fae:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007fb2:	31 d2                	xor    edx,edx
c0007fb4:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007fb9:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007fbd:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007fc1:	31 db                	xor    ebx,ebx
c0007fc3:	01 c8                	add    eax,ecx
c0007fc5:	11 da                	adc    edx,ebx
c0007fc7:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007fcb:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007fcf:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007fd3:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007fd7:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007fdb:	f7 da                	neg    edx
c0007fdd:	21 d1                	and    ecx,edx
c0007fdf:	29 d9                	sub    ecx,ebx
c0007fe1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007fe6:	0f 85 20 01 00 00    	jne    c000810c <f_mkfs+0xc73>
c0007fec:	31 db                	xor    ebx,ebx
c0007fee:	01 ce                	add    esi,ecx
c0007ff0:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ff4:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007ff8:	31 d2                	xor    edx,edx
c0007ffa:	89 f8                	mov    eax,edi
c0007ffc:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0008000:	c1 e0 04             	shl    eax,0x4
c0008003:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0008007:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c000800b:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c000800f:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0008013:	39 04 24             	cmp    DWORD PTR [esp],eax
c0008016:	19 d3                	sbb    ebx,edx
c0008018:	0f 82 40 01 00 00    	jb     c000815e <f_mkfs+0xcc5>
c000801e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008021:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008025:	89 c8                	mov    eax,ecx
c0008027:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c000802c:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0008030:	29 f0                	sub    eax,esi
c0008032:	29 d0                	sub    eax,edx
c0008034:	31 d2                	xor    edx,edx
c0008036:	f7 f7                	div    edi
c0008038:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000803d:	89 c3                	mov    ebx,eax
c000803f:	0f 85 b8 fe ff ff    	jne    c0007efd <f_mkfs+0xa64>
c0008045:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000804a:	0f 87 1d 01 00 00    	ja     c000816d <f_mkfs+0xcd4>
c0008050:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008055:	0f 85 03 01 00 00    	jne    c000815e <f_mkfs+0xcc5>
c000805b:	83 ff 01             	cmp    edi,0x1
c000805e:	0f 86 fa 00 00 00    	jbe    c000815e <f_mkfs+0xcc5>
c0008064:	d1 ef                	shr    edi,1
c0008066:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000806a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000806e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008071:	85 db                	test   ebx,ebx
c0008073:	75 2d                	jne    c00080a2 <f_mkfs+0xc09>
c0008075:	89 cb                	mov    ebx,ecx
c0008077:	ba f0 35 02 c0       	mov    edx,0xc00235f0
c000807c:	c1 eb 11             	shr    ebx,0x11
c000807f:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0008087:	0f b7 02             	movzx  eax,WORD PTR [edx]
c000808a:	66 85 c0             	test   ax,ax
c000808d:	74 11                	je     c00080a0 <f_mkfs+0xc07>
c000808f:	83 c2 02             	add    edx,0x2
c0008092:	39 d8                	cmp    eax,ebx
c0008094:	77 0a                	ja     c00080a0 <f_mkfs+0xc07>
c0008096:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000809a:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c000809e:	eb e7                	jmp    c0008087 <f_mkfs+0xbee>
c00080a0:	31 db                	xor    ebx,ebx
c00080a2:	31 d2                	xor    edx,edx
c00080a4:	89 c8                	mov    eax,ecx
c00080a6:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00080aa:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00080b1:	2d f6 ff 00 00       	sub    eax,0xfff6
c00080b6:	c1 ea 09             	shr    edx,0x9
c00080b9:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00080be:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00080c2:	0f 87 96 00 00 00    	ja     c000815e <f_mkfs+0xcc5>
c00080c8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00080cc:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c00080d4:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00080d8:	be 20 00 00 00       	mov    esi,0x20
c00080dd:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c00080e2:	e9 a6 fe ff ff       	jmp    c0007f8d <f_mkfs+0xaf4>
c00080e7:	83 c2 02             	add    edx,0x2
c00080ea:	39 c8                	cmp    eax,ecx
c00080ec:	0f 87 60 fe ff ff    	ja     c0007f52 <f_mkfs+0xab9>
c00080f2:	01 ff                	add    edi,edi
c00080f4:	e9 4d fe ff ff       	jmp    c0007f46 <f_mkfs+0xaad>
c00080f9:	8d 04 40             	lea    eax,[eax+eax*2]
c00080fc:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008101:	40                   	inc    eax
c0008102:	d1 e8                	shr    eax,1
c0008104:	83 c0 03             	add    eax,0x3
c0008107:	e9 62 fe ff ff       	jmp    c0007f6e <f_mkfs+0xad5>
c000810c:	31 d2                	xor    edx,edx
c000810e:	89 c8                	mov    eax,ecx
c0008110:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008114:	85 d2                	test   edx,edx
c0008116:	74 0c                	je     c0008124 <f_mkfs+0xc8b>
c0008118:	49                   	dec    ecx
c0008119:	46                   	inc    esi
c000811a:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c000811f:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0008124:	89 c8                	mov    eax,ecx
c0008126:	31 d2                	xor    edx,edx
c0008128:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c000812c:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008130:	e9 c3 fe ff ff       	jmp    c0007ff8 <f_mkfs+0xb5f>
c0008135:	3d f5 0f 00 00       	cmp    eax,0xff5
c000813a:	77 31                	ja     c000816d <f_mkfs+0xcd4>
c000813c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008141:	75 1b                	jne    c000815e <f_mkfs+0xcc5>
c0008143:	8d 04 3f             	lea    eax,[edi+edi*1]
c0008146:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000814a:	3d 80 00 00 00       	cmp    eax,0x80
c000814f:	0f 86 d9 fd ff ff    	jbe    c0007f2e <f_mkfs+0xa95>
c0008155:	eb 07                	jmp    c000815e <f_mkfs+0xcc5>
c0008157:	3d f5 0f 00 00       	cmp    eax,0xff5
c000815c:	76 0a                	jbe    c0008168 <f_mkfs+0xccf>
c000815e:	bb 0e 00 00 00       	mov    ebx,0xe
c0008163:	e9 ff 03 00 00       	jmp    c0008567 <f_mkfs+0x10ce>
c0008168:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c000816d:	31 d2                	xor    edx,edx
c000816f:	b9 00 02 00 00       	mov    ecx,0x200
c0008174:	89 e8                	mov    eax,ebp
c0008176:	e8 6c 9a ff ff       	call   c0001be7 <mem_set>
c000817b:	b9 0b 00 00 00       	mov    ecx,0xb
c0008180:	ba 02 37 02 c0       	mov    edx,0xc0023702
c0008185:	89 e8                	mov    eax,ebp
c0008187:	e8 46 9a ff ff       	call   c0001bd2 <mem_cpy>
c000818c:	8d 45 0b             	lea    eax,[ebp+0xb]
c000818f:	ba 00 02 00 00       	mov    edx,0x200
c0008194:	e8 2c 9a ff ff       	call   c0001bc5 <st_word>
c0008199:	89 f8                	mov    eax,edi
c000819b:	0f b7 d6             	movzx  edx,si
c000819e:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c00081a1:	8d 45 0e             	lea    eax,[ebp+0xe]
c00081a4:	e8 1c 9a ff ff       	call   c0001bc5 <st_word>
c00081a9:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c00081ad:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081b2:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c00081b5:	75 08                	jne    c00081bf <f_mkfs+0xd26>
c00081b7:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00081bf:	8d 45 11             	lea    eax,[ebp+0x11]
c00081c2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00081c6:	e8 fa 99 ff ff       	call   c0001bc5 <st_word>
c00081cb:	b8 ff ff 00 00       	mov    eax,0xffff
c00081d0:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00081d4:	39 d0                	cmp    eax,edx
c00081d6:	b8 00 00 00 00       	mov    eax,0x0
c00081db:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00081df:	72 0a                	jb     c00081eb <f_mkfs+0xd52>
c00081e1:	8d 45 13             	lea    eax,[ebp+0x13]
c00081e4:	e8 dc 99 ff ff       	call   c0001bc5 <st_word>
c00081e9:	eb 08                	jmp    c00081f3 <f_mkfs+0xd5a>
c00081eb:	8d 45 20             	lea    eax,[ebp+0x20]
c00081ee:	e8 d6 99 ff ff       	call   c0001bc9 <st_dword>
c00081f3:	8d 45 18             	lea    eax,[ebp+0x18]
c00081f6:	ba 3f 00 00 00       	mov    edx,0x3f
c00081fb:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00081ff:	e8 c1 99 ff ff       	call   c0001bc5 <st_word>
c0008204:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0008207:	ba ff 00 00 00       	mov    edx,0xff
c000820c:	e8 b4 99 ff ff       	call   c0001bc5 <st_word>
c0008211:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0008214:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008218:	e8 ac 99 ff ff       	call   c0001bc9 <st_dword>
c000821d:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008222:	75 57                	jne    c000827b <f_mkfs+0xde2>
c0008224:	8d 45 43             	lea    eax,[ebp+0x43]
c0008227:	ba 00 00 21 50       	mov    edx,0x50210000
c000822c:	e8 98 99 ff ff       	call   c0001bc9 <st_dword>
c0008231:	8d 45 24             	lea    eax,[ebp+0x24]
c0008234:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008238:	e8 8c 99 ff ff       	call   c0001bc9 <st_dword>
c000823d:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008240:	ba 02 00 00 00       	mov    edx,0x2
c0008245:	e8 7f 99 ff ff       	call   c0001bc9 <st_dword>
c000824a:	8d 45 30             	lea    eax,[ebp+0x30]
c000824d:	ba 01 00 00 00       	mov    edx,0x1
c0008252:	e8 6e 99 ff ff       	call   c0001bc5 <st_word>
c0008257:	8d 45 32             	lea    eax,[ebp+0x32]
c000825a:	ba 06 00 00 00       	mov    edx,0x6
c000825f:	e8 61 99 ff ff       	call   c0001bc5 <st_word>
c0008264:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008268:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c000826c:	8d 45 47             	lea    eax,[ebp+0x47]
c000826f:	b9 13 00 00 00       	mov    ecx,0x13
c0008274:	ba 0e 37 02 c0       	mov    edx,0xc002370e
c0008279:	eb 2f                	jmp    c00082aa <f_mkfs+0xe11>
c000827b:	8d 45 27             	lea    eax,[ebp+0x27]
c000827e:	ba 00 00 21 50       	mov    edx,0x50210000
c0008283:	e8 41 99 ff ff       	call   c0001bc9 <st_dword>
c0008288:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c000828d:	8d 45 16             	lea    eax,[ebp+0x16]
c0008290:	e8 30 99 ff ff       	call   c0001bc5 <st_word>
c0008295:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008299:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c000829d:	8d 45 2b             	lea    eax,[ebp+0x2b]
c00082a0:	b9 13 00 00 00       	mov    ecx,0x13
c00082a5:	ba 22 37 02 c0       	mov    edx,0xc0023722
c00082aa:	e8 23 99 ff ff       	call   c0001bd2 <mem_cpy>
c00082af:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c00082b5:	ba 55 aa 00 00       	mov    edx,0xaa55
c00082ba:	89 f0                	mov    eax,esi
c00082bc:	e8 04 99 ff ff       	call   c0001bc5 <st_word>
c00082c1:	83 ec 0c             	sub    esp,0xc
c00082c4:	6a 01                	push   0x1
c00082c6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082ce:	55                   	push   ebp
c00082cf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082d3:	e8 46 98 ff ff       	call   c0001b1e <disk_write>
c00082d8:	83 c4 20             	add    esp,0x20
c00082db:	85 c0                	test   eax,eax
c00082dd:	0f 85 67 02 00 00    	jne    c000854a <f_mkfs+0x10b1>
c00082e3:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082e8:	0f 85 b7 00 00 00    	jne    c00083a5 <f_mkfs+0xf0c>
c00082ee:	83 ec 0c             	sub    esp,0xc
c00082f1:	6a 01                	push   0x1
c00082f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00082f7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00082fb:	83 c0 06             	add    eax,0x6
c00082fe:	83 d2 00             	adc    edx,0x0
c0008301:	52                   	push   edx
c0008302:	50                   	push   eax
c0008303:	55                   	push   ebp
c0008304:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008308:	e8 11 98 ff ff       	call   c0001b1e <disk_write>
c000830d:	83 c4 20             	add    esp,0x20
c0008310:	b9 00 02 00 00       	mov    ecx,0x200
c0008315:	31 d2                	xor    edx,edx
c0008317:	89 e8                	mov    eax,ebp
c0008319:	e8 c9 98 ff ff       	call   c0001be7 <mem_set>
c000831e:	ba 52 52 61 41       	mov    edx,0x41615252
c0008323:	89 e8                	mov    eax,ebp
c0008325:	e8 9f 98 ff ff       	call   c0001bc9 <st_dword>
c000832a:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008330:	ba 72 72 41 61       	mov    edx,0x61417272
c0008335:	e8 8f 98 ff ff       	call   c0001bc9 <st_dword>
c000833a:	8d 53 ff             	lea    edx,[ebx-0x1]
c000833d:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0008343:	e8 81 98 ff ff       	call   c0001bc9 <st_dword>
c0008348:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c000834e:	ba 02 00 00 00       	mov    edx,0x2
c0008353:	e8 71 98 ff ff       	call   c0001bc9 <st_dword>
c0008358:	ba 55 aa 00 00       	mov    edx,0xaa55
c000835d:	89 f0                	mov    eax,esi
c000835f:	e8 61 98 ff ff       	call   c0001bc5 <st_word>
c0008364:	83 ec 0c             	sub    esp,0xc
c0008367:	6a 01                	push   0x1
c0008369:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000836d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008371:	83 c0 07             	add    eax,0x7
c0008374:	83 d2 00             	adc    edx,0x0
c0008377:	52                   	push   edx
c0008378:	50                   	push   eax
c0008379:	55                   	push   ebp
c000837a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000837e:	e8 9b 97 ff ff       	call   c0001b1e <disk_write>
c0008383:	83 c4 14             	add    esp,0x14
c0008386:	6a 01                	push   0x1
c0008388:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000838c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008390:	83 c0 01             	add    eax,0x1
c0008393:	83 d2 00             	adc    edx,0x0
c0008396:	52                   	push   edx
c0008397:	50                   	push   eax
c0008398:	55                   	push   ebp
c0008399:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000839d:	e8 7c 97 ff ff       	call   c0001b1e <disk_write>
c00083a2:	83 c4 20             	add    esp,0x20
c00083a5:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c00083ac:	31 d2                	xor    edx,edx
c00083ae:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00083b4:	31 db                	xor    ebx,ebx
c00083b6:	89 e8                	mov    eax,ebp
c00083b8:	e8 2a 98 ff ff       	call   c0001be7 <mem_set>
c00083bd:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c00083c2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00083c9:	0f 94 c3             	sete   bl
c00083cc:	4b                   	dec    ebx
c00083cd:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00083d3:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00083d9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00083de:	75 21                	jne    c0008401 <f_mkfs+0xf68>
c00083e0:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00083e5:	89 e8                	mov    eax,ebp
c00083e7:	e8 dd 97 ff ff       	call   c0001bc9 <st_dword>
c00083ec:	8d 45 04             	lea    eax,[ebp+0x4]
c00083ef:	83 ca ff             	or     edx,0xffffffff
c00083f2:	e8 d2 97 ff ff       	call   c0001bc9 <st_dword>
c00083f7:	8d 45 08             	lea    eax,[ebp+0x8]
c00083fa:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00083ff:	eb 04                	jmp    c0008405 <f_mkfs+0xf6c>
c0008401:	89 da                	mov    edx,ebx
c0008403:	89 e8                	mov    eax,ebp
c0008405:	e8 bf 97 ff ff       	call   c0001bc9 <st_dword>
c000840a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000840e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008412:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0008416:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000841a:	39 ce                	cmp    esi,ecx
c000841c:	76 02                	jbe    c0008420 <f_mkfs+0xf87>
c000841e:	89 ce                	mov    esi,ecx
c0008420:	83 ec 0c             	sub    esp,0xc
c0008423:	56                   	push   esi
c0008424:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008428:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000842c:	55                   	push   ebp
c000842d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008431:	e8 e8 96 ff ff       	call   c0001b1e <disk_write>
c0008436:	83 c4 20             	add    esp,0x20
c0008439:	85 c0                	test   eax,eax
c000843b:	0f 85 09 01 00 00    	jne    c000854a <f_mkfs+0x10b1>
c0008441:	31 d2                	xor    edx,edx
c0008443:	b9 00 02 00 00       	mov    ecx,0x200
c0008448:	89 e8                	mov    eax,ebp
c000844a:	e8 98 97 ff ff       	call   c0001be7 <mem_set>
c000844f:	31 d2                	xor    edx,edx
c0008451:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c0008455:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008459:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000845d:	75 b3                	jne    c0008412 <f_mkfs+0xf79>
c000845f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008462:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008469:	40                   	inc    eax
c000846a:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c000846e:	0f 87 65 ff ff ff    	ja     c00083d9 <f_mkfs+0xf40>
c0008474:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008479:	74 04                	je     c000847f <f_mkfs+0xfe6>
c000847b:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000847f:	89 fb                	mov    ebx,edi
c0008481:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008485:	76 04                	jbe    c000848b <f_mkfs+0xff2>
c0008487:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000848b:	83 ec 0c             	sub    esp,0xc
c000848e:	53                   	push   ebx
c000848f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008493:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008497:	55                   	push   ebp
c0008498:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000849c:	e8 7d 96 ff ff       	call   c0001b1e <disk_write>
c00084a1:	83 c4 20             	add    esp,0x20
c00084a4:	85 c0                	test   eax,eax
c00084a6:	0f 85 9e 00 00 00    	jne    c000854a <f_mkfs+0x10b1>
c00084ac:	31 d2                	xor    edx,edx
c00084ae:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c00084b2:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00084b6:	29 df                	sub    edi,ebx
c00084b8:	75 c5                	jne    c000847f <f_mkfs+0xfe6>
c00084ba:	b1 0c                	mov    cl,0xc
c00084bc:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00084c1:	74 1d                	je     c00084e0 <f_mkfs+0x1047>
c00084c3:	b8 ff ff 00 00       	mov    eax,0xffff
c00084c8:	b1 06                	mov    cl,0x6
c00084ca:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00084ce:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00084d2:	72 0c                	jb     c00084e0 <f_mkfs+0x1047>
c00084d4:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00084d9:	0f 94 c1             	sete   cl
c00084dc:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00084e0:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00084e5:	75 4c                	jne    c0008533 <f_mkfs+0x109a>
c00084e7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00084eb:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00084ef:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00084f6:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00084fd:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008508:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c0008513:	0f b6 c9             	movzx  ecx,cl
c0008516:	83 ec 0c             	sub    esp,0xc
c0008519:	55                   	push   ebp
c000851a:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008521:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008525:	e8 f9 bf ff ff       	call   c0004523 <create_partition>
c000852a:	83 c4 10             	add    esp,0x10
c000852d:	89 c3                	mov    ebx,eax
c000852f:	85 c0                	test   eax,eax
c0008531:	75 34                	jne    c0008567 <f_mkfs+0x10ce>
c0008533:	31 db                	xor    ebx,ebx
c0008535:	50                   	push   eax
c0008536:	6a 00                	push   0x0
c0008538:	6a 00                	push   0x0
c000853a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000853e:	e8 f1 95 ff ff       	call   c0001b34 <disk_ioctl>
c0008543:	83 c4 10             	add    esp,0x10
c0008546:	85 c0                	test   eax,eax
c0008548:	74 1d                	je     c0008567 <f_mkfs+0x10ce>
c000854a:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008552:	75 0c                	jne    c0008560 <f_mkfs+0x10c7>
c0008554:	83 ec 0c             	sub    esp,0xc
c0008557:	55                   	push   ebp
c0008558:	e8 77 00 00 00       	call   c00085d4 <ff_memfree>
c000855d:	83 c4 10             	add    esp,0x10
c0008560:	bb 01 00 00 00       	mov    ebx,0x1
c0008565:	eb 48                	jmp    c00085af <f_mkfs+0x1116>
c0008567:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000856f:	75 3e                	jne    c00085af <f_mkfs+0x1116>
c0008571:	83 ec 0c             	sub    esp,0xc
c0008574:	55                   	push   ebp
c0008575:	e8 5a 00 00 00       	call   c00085d4 <ff_memfree>
c000857a:	83 c4 10             	add    esp,0x10
c000857d:	eb 30                	jmp    c00085af <f_mkfs+0x1116>
c000857f:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008584:	0f 85 eb fa ff ff    	jne    c0008075 <f_mkfs+0xbdc>
c000858a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000858e:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008594:	0f 86 b8 f9 ff ff    	jbe    c0007f52 <f_mkfs+0xab9>
c000859a:	e9 bf fb ff ff       	jmp    c000815e <f_mkfs+0xcc5>
c000859f:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00085a4:	0f 85 c0 fa ff ff    	jne    c000806a <f_mkfs+0xbd1>
c00085aa:	e9 af fb ff ff       	jmp    c000815e <f_mkfs+0xcc5>
c00085af:	81 c4 9c 00 00 00    	add    esp,0x9c
c00085b5:	89 d8                	mov    eax,ebx
c00085b7:	5b                   	pop    ebx
c00085b8:	5e                   	pop    esi
c00085b9:	5f                   	pop    edi
c00085ba:	5d                   	pop    ebp
c00085bb:	c3                   	ret    

c00085bc <ff_memalloc>:
c00085bc:	83 ec 0c             	sub    esp,0xc
c00085bf:	83 ec 0c             	sub    esp,0xc
c00085c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085c6:	e8 ec 16 00 00       	call   c0009cb7 <malloc>
c00085cb:	83 c4 10             	add    esp,0x10
c00085ce:	83 c4 0c             	add    esp,0xc
c00085d1:	c3                   	ret    
c00085d2:	66 90                	xchg   ax,ax

c00085d4 <ff_memfree>:
c00085d4:	83 ec 0c             	sub    esp,0xc
c00085d7:	83 ec 0c             	sub    esp,0xc
c00085da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085de:	e8 e4 16 00 00       	call   c0009cc7 <free>
c00085e3:	83 c4 10             	add    esp,0x10
c00085e6:	90                   	nop
c00085e7:	83 c4 0c             	add    esp,0xc
c00085ea:	c3                   	ret    
c00085eb:	90                   	nop

c00085ec <ff_uni2oem>:
c00085ec:	83 ec 14             	sub    esp,0x14
c00085ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00085f3:	66 89 04 24          	mov    WORD PTR [esp],ax
c00085f7:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00085fe:	c7 44 24 0c 40 3a 02 c0 	mov    DWORD PTR [esp+0xc],0xc0023a40
c0008606:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c000860b:	77 0b                	ja     c0008618 <ff_uni2oem+0x2c>
c000860d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008611:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008616:	eb 60                	jmp    c0008678 <ff_uni2oem+0x8c>
c0008618:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008620:	77 56                	ja     c0008678 <ff_uni2oem+0x8c>
c0008622:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008628:	75 4e                	jne    c0008678 <ff_uni2oem+0x8c>
c000862a:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008631:	eb 0d                	jmp    c0008640 <ff_uni2oem+0x54>
c0008633:	90                   	nop
c0008634:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008639:	40                   	inc    eax
c000863a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000863f:	90                   	nop
c0008640:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008646:	77 1c                	ja     c0008664 <ff_uni2oem+0x78>
c0008648:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c000864d:	01 c0                	add    eax,eax
c000864f:	89 c2                	mov    edx,eax
c0008651:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008655:	01 d0                	add    eax,edx
c0008657:	66 8b 00             	mov    ax,WORD PTR [eax]
c000865a:	0f b7 c0             	movzx  eax,ax
c000865d:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008661:	75 d1                	jne    c0008634 <ff_uni2oem+0x48>
c0008663:	90                   	nop
c0008664:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008669:	83 e8 80             	sub    eax,0xffffff80
c000866c:	25 ff 00 00 00       	and    eax,0xff
c0008671:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008676:	66 90                	xchg   ax,ax
c0008678:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000867d:	83 c4 14             	add    esp,0x14
c0008680:	c3                   	ret    
c0008681:	8d 76 00             	lea    esi,[esi+0x0]

c0008684 <ff_oem2uni>:
c0008684:	83 ec 18             	sub    esp,0x18
c0008687:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000868b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000868f:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008694:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008698:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000869f:	c7 44 24 10 40 3a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023a40
c00086a7:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c00086ad:	77 0d                	ja     c00086bc <ff_oem2uni+0x38>
c00086af:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00086b3:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00086b8:	eb 32                	jmp    c00086ec <ff_oem2uni+0x68>
c00086ba:	66 90                	xchg   ax,ax
c00086bc:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00086c2:	75 28                	jne    c00086ec <ff_oem2uni+0x68>
c00086c4:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00086cb:	77 1f                	ja     c00086ec <ff_oem2uni+0x68>
c00086cd:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00086d2:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00086d7:	01 c0                	add    eax,eax
c00086d9:	89 c2                	mov    edx,eax
c00086db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086df:	01 d0                	add    eax,edx
c00086e1:	66 8b 00             	mov    ax,WORD PTR [eax]
c00086e4:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00086e9:	8d 76 00             	lea    esi,[esi+0x0]
c00086ec:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00086f1:	83 c4 18             	add    esp,0x18
c00086f4:	c3                   	ret    
c00086f5:	8d 76 00             	lea    esi,[esi+0x0]

c00086f8 <ff_wtoupper>:
c00086f8:	83 ec 10             	sub    esp,0x10
c00086fb:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0008703:	0f 87 4f 01 00 00    	ja     c0008858 <ff_wtoupper+0x160>
c0008709:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000870d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008712:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0008719:	77 09                	ja     c0008724 <ff_wtoupper+0x2c>
c000871b:	b8 40 38 02 c0       	mov    eax,0xc0023840
c0008720:	eb 0a                	jmp    c000872c <ff_wtoupper+0x34>
c0008722:	66 90                	xchg   ax,ax
c0008724:	b8 80 37 02 c0       	mov    eax,0xc0023780
c0008729:	8d 76 00             	lea    esi,[esi+0x0]
c000872c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008730:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008734:	8d 50 02             	lea    edx,[eax+0x2]
c0008737:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000873b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000873e:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008743:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008749:	0f 84 fd 00 00 00    	je     c000884c <ff_wtoupper+0x154>
c000874f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008754:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008759:	0f 82 ed 00 00 00    	jb     c000884c <ff_wtoupper+0x154>
c000875f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008763:	8d 50 02             	lea    edx,[eax+0x2]
c0008766:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000876a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000876d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008772:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008777:	66 c1 e8 08          	shr    ax,0x8
c000877b:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008780:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008787:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000878c:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008791:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008796:	01 ca                	add    edx,ecx
c0008798:	39 d0                	cmp    eax,edx
c000879a:	0f 8d 8c 00 00 00    	jge    c000882c <ff_wtoupper+0x134>
c00087a0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00087a5:	83 f8 08             	cmp    eax,0x8
c00087a8:	0f 87 9a 00 00 00    	ja     c0008848 <ff_wtoupper+0x150>
c00087ae:	8b 04 85 40 37 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc8c0]
c00087b5:	ff e0                	jmp    eax
c00087b7:	90                   	nop
c00087b8:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00087bd:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00087c2:	29 c2                	sub    edx,eax
c00087c4:	89 d0                	mov    eax,edx
c00087c6:	01 c0                	add    eax,eax
c00087c8:	89 c2                	mov    edx,eax
c00087ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00087ce:	01 d0                	add    eax,edx
c00087d0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00087d3:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00087d8:	eb 4e                	jmp    c0008828 <ff_wtoupper+0x130>
c00087da:	66 90                	xchg   ax,ax
c00087dc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00087e1:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00087e5:	83 e0 01             	and    eax,0x1
c00087e8:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00087ed:	eb 39                	jmp    c0008828 <ff_wtoupper+0x130>
c00087ef:	90                   	nop
c00087f0:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00087f6:	eb 30                	jmp    c0008828 <ff_wtoupper+0x130>
c00087f8:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00087fe:	eb 28                	jmp    c0008828 <ff_wtoupper+0x130>
c0008800:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008806:	eb 20                	jmp    c0008828 <ff_wtoupper+0x130>
c0008808:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c000880e:	eb 18                	jmp    c0008828 <ff_wtoupper+0x130>
c0008810:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008816:	eb 10                	jmp    c0008828 <ff_wtoupper+0x130>
c0008818:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c000881e:	eb 08                	jmp    c0008828 <ff_wtoupper+0x130>
c0008820:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0008827:	90                   	nop
c0008828:	eb 1e                	jmp    c0008848 <ff_wtoupper+0x150>
c000882a:	66 90                	xchg   ax,ax
c000882c:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0008832:	0f 85 f8 fe ff ff    	jne    c0008730 <ff_wtoupper+0x38>
c0008838:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000883d:	01 c0                	add    eax,eax
c000883f:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0008843:	e9 e8 fe ff ff       	jmp    c0008730 <ff_wtoupper+0x38>
c0008848:	90                   	nop
c0008849:	8d 76 00             	lea    esi,[esi+0x0]
c000884c:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008851:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008855:	8d 76 00             	lea    esi,[esi+0x0]
c0008858:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000885c:	83 c4 10             	add    esp,0x10
c000885f:	c3                   	ret    

c0008860 <CPU::current()>:
c0008860:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c0008865:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000886b:	c3                   	ret    

c000886c <operator new(unsigned long)>:
c000886c:	e9 46 14 00 00       	jmp    c0009cb7 <malloc>

c0008871 <operator delete(void*)>:
c0008871:	e9 61 14 00 00       	jmp    c0009cd7 <rfree>

c0008876 <disableIRQs()>:
c0008876:	fa                   	cli    
c0008877:	ff 05 28 94 02 c0    	inc    DWORD PTR ds:0xc0029428
c000887d:	c3                   	ret    

c000887e <enableIRQs()>:
c000887e:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c0008883:	48                   	dec    eax
c0008884:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c0008889:	75 01                	jne    c000888c <enableIRQs()+0xe>
c000888b:	fb                   	sti    
c000888c:	c3                   	ret    

c000888d <lockScheduler()>:
c000888d:	fa                   	cli    
c000888e:	ff 05 28 94 02 c0    	inc    DWORD PTR ds:0xc0029428
c0008894:	c3                   	ret    

c0008895 <unlockScheduler()>:
c0008895:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c000889a:	48                   	dec    eax
c000889b:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c00088a0:	75 01                	jne    c00088a3 <unlockScheduler()+0xe>
c00088a2:	fb                   	sti    
c00088a3:	c3                   	ret    

c00088a4 <lockStuff()>:
c00088a4:	fa                   	cli    
c00088a5:	ff 05 28 94 02 c0    	inc    DWORD PTR ds:0xc0029428
c00088ab:	ff 05 24 94 02 c0    	inc    DWORD PTR ds:0xc0029424
c00088b1:	c3                   	ret    

c00088b2 <unlockStuff()>:
c00088b2:	83 ec 0c             	sub    esp,0xc
c00088b5:	a1 24 94 02 c0       	mov    eax,ds:0xc0029424
c00088ba:	48                   	dec    eax
c00088bb:	a3 24 94 02 c0       	mov    ds:0xc0029424,eax
c00088c0:	75 18                	jne    c00088da <unlockStuff()+0x28>
c00088c2:	83 3d 20 94 02 c0 00 	cmp    DWORD PTR ds:0xc0029420,0x0
c00088c9:	74 0f                	je     c00088da <unlockStuff()+0x28>
c00088cb:	c7 05 20 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029420,0x0
c00088d5:	e8 66 ed 00 00       	call   c0017640 <schedule()>
c00088da:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c00088df:	48                   	dec    eax
c00088e0:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c00088e5:	75 01                	jne    c00088e8 <unlockStuff()+0x36>
c00088e7:	fb                   	sti    
c00088e8:	83 c4 0c             	add    esp,0xc
c00088eb:	c3                   	ret    

c00088ec <Virt::getAKernelVAS()>:
c00088ec:	a1 34 80 02 c0       	mov    eax,ds:0xc0028034
c00088f1:	c3                   	ret    

c00088f2 <__not_memcpy>:
c00088f2:	57                   	push   edi
c00088f3:	56                   	push   esi
c00088f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00088f8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00088fc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008900:	89 c7                	mov    edi,eax
c0008902:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008904:	5e                   	pop    esi
c0008905:	5f                   	pop    edi
c0008906:	c3                   	ret    
c0008907:	90                   	nop

c0008908 <Krnl::resolveCompatibilitySymbol(char*)>:
c0008908:	83 ec 0c             	sub    esp,0xc
c000890b:	83 ec 08             	sub    esp,0x8
c000890e:	68 40 3b 02 c0       	push   0xc0023b40
c0008913:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008917:	e8 a8 7e ff ff       	call   c00007c4 <strcmp>
c000891c:	83 c4 10             	add    esp,0x10
c000891f:	85 c0                	test   eax,eax
c0008921:	0f 94 c0             	sete   al
c0008924:	84 c0                	test   al,al
c0008926:	74 0c                	je     c0008934 <Krnl::resolveCompatibilitySymbol(char*)+0x2c>
c0008928:	b8 08 7f 02 c0       	mov    eax,0xc0027f08
c000892d:	e9 ea 00 00 00       	jmp    c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008932:	66 90                	xchg   ax,ax
c0008934:	83 ec 08             	sub    esp,0x8
c0008937:	68 49 3b 02 c0       	push   0xc0023b49
c000893c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008940:	e8 7f 7e ff ff       	call   c00007c4 <strcmp>
c0008945:	83 c4 10             	add    esp,0x10
c0008948:	85 c0                	test   eax,eax
c000894a:	0f 94 c0             	sete   al
c000894d:	84 c0                	test   al,al
c000894f:	74 0b                	je     c000895c <Krnl::resolveCompatibilitySymbol(char*)+0x54>
c0008951:	b8 20 27 02 c0       	mov    eax,0xc0022720
c0008956:	e9 c1 00 00 00       	jmp    c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000895b:	90                   	nop
c000895c:	83 ec 08             	sub    esp,0x8
c000895f:	68 53 3b 02 c0       	push   0xc0023b53
c0008964:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008968:	e8 57 7e ff ff       	call   c00007c4 <strcmp>
c000896d:	83 c4 10             	add    esp,0x10
c0008970:	85 c0                	test   eax,eax
c0008972:	0f 94 c0             	sete   al
c0008975:	84 c0                	test   al,al
c0008977:	74 0b                	je     c0008984 <Krnl::resolveCompatibilitySymbol(char*)+0x7c>
c0008979:	b8 54 24 02 c0       	mov    eax,0xc0022454
c000897e:	e9 99 00 00 00       	jmp    c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008983:	90                   	nop
c0008984:	83 ec 08             	sub    esp,0x8
c0008987:	68 5c 3b 02 c0       	push   0xc0023b5c
c000898c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008990:	e8 2f 7e ff ff       	call   c00007c4 <strcmp>
c0008995:	83 c4 10             	add    esp,0x10
c0008998:	85 c0                	test   eax,eax
c000899a:	0f 94 c0             	sete   al
c000899d:	84 c0                	test   al,al
c000899f:	74 07                	je     c00089a8 <Krnl::resolveCompatibilitySymbol(char*)+0xa0>
c00089a1:	b8 20 28 02 c0       	mov    eax,0xc0022820
c00089a6:	eb 74                	jmp    c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089a8:	83 ec 08             	sub    esp,0x8
c00089ab:	68 66 3b 02 c0       	push   0xc0023b66
c00089b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089b4:	e8 0b 7e ff ff       	call   c00007c4 <strcmp>
c00089b9:	83 c4 10             	add    esp,0x10
c00089bc:	85 c0                	test   eax,eax
c00089be:	0f 94 c0             	sete   al
c00089c1:	84 c0                	test   al,al
c00089c3:	74 07                	je     c00089cc <Krnl::resolveCompatibilitySymbol(char*)+0xc4>
c00089c5:	b8 a0 25 02 c0       	mov    eax,0xc00225a0
c00089ca:	eb 50                	jmp    c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089cc:	83 ec 08             	sub    esp,0x8
c00089cf:	68 6f 3b 02 c0       	push   0xc0023b6f
c00089d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089d8:	e8 e7 7d ff ff       	call   c00007c4 <strcmp>
c00089dd:	83 c4 10             	add    esp,0x10
c00089e0:	85 c0                	test   eax,eax
c00089e2:	0f 94 c0             	sete   al
c00089e5:	84 c0                	test   al,al
c00089e7:	74 07                	je     c00089f0 <Krnl::resolveCompatibilitySymbol(char*)+0xe8>
c00089e9:	b8 0c 7f 02 c0       	mov    eax,0xc0027f0c
c00089ee:	eb 2c                	jmp    c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089f0:	83 ec 08             	sub    esp,0x8
c00089f3:	68 7c 3b 02 c0       	push   0xc0023b7c
c00089f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089fc:	e8 c3 7d ff ff       	call   c00007c4 <strcmp>
c0008a01:	83 c4 10             	add    esp,0x10
c0008a04:	85 c0                	test   eax,eax
c0008a06:	0f 94 c0             	sete   al
c0008a09:	84 c0                	test   al,al
c0008a0b:	74 07                	je     c0008a14 <Krnl::resolveCompatibilitySymbol(char*)+0x10c>
c0008a0d:	b8 0d 7f 02 c0       	mov    eax,0xc0027f0d
c0008a12:	eb 08                	jmp    c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008a14:	b8 00 00 00 00       	mov    eax,0x0
c0008a19:	8d 76 00             	lea    esi,[esi+0x0]
c0008a1c:	83 c4 0c             	add    esp,0xc
c0008a1f:	c3                   	ret    

c0008a20 <Computer::close(int, int, void*)>:
c0008a20:	57                   	push   edi
c0008a21:	56                   	push   esi
c0008a22:	53                   	push   ebx
c0008a23:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a27:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a2b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a2f:	83 ec 0c             	sub    esp,0xc
c0008a32:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c0008a38:	e8 c3 5b 00 00       	call   c000e600 <Device::closeAll()>
c0008a3d:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c0008a43:	83 c4 10             	add    esp,0x10
c0008a46:	8b 10                	mov    edx,DWORD PTR [eax]
c0008a48:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0008a4c:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0008a54:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0008a58:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008a5c:	5b                   	pop    ebx
c0008a5d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0008a60:	5e                   	pop    esi
c0008a61:	5f                   	pop    edi
c0008a62:	ff e0                	jmp    eax

c0008a64 <Krnl::firstTask()>:
c0008a64:	53                   	push   ebx
c0008a65:	83 ec 14             	sub    esp,0x14
c0008a68:	68 89 3b 02 c0       	push   0xc0023b89
c0008a6d:	e8 9f 12 00 00       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0008a72:	fb                   	sti    
c0008a73:	c7 04 24 a0 3b 02 c0 	mov    DWORD PTR [esp],0xc0023ba0
c0008a7a:	e8 92 12 00 00       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0008a7f:	c7 04 24 1f 07 00 00 	mov    DWORD PTR [esp],0x71f
c0008a86:	e8 2c 12 00 00       	call   c0009cb7 <malloc>
c0008a8b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008a92:	89 c3                	mov    ebx,eax
c0008a94:	ff 35 50 94 02 c0    	push   DWORD PTR ds:0xc0029450
c0008a9a:	68 b9 3b 02 c0       	push   0xc0023bb9
c0008a9f:	6a 01                	push   0x1
c0008aa1:	50                   	push   eax
c0008aa2:	e8 75 e7 00 00       	call   c001721c <Process::Process(bool, char const*, Process*, char**)>
c0008aa7:	83 c4 20             	add    esp,0x20
c0008aaa:	68 ff 00 00 00       	push   0xff
c0008aaf:	6a 00                	push   0x0
c0008ab1:	68 01 97 00 c0       	push   0xc0009701
c0008ab6:	53                   	push   ebx
c0008ab7:	e8 68 e9 00 00       	call   c0017424 <Process::createThread(void (*)(void*), void*, int)>
c0008abc:	6a 7a                	push   0x7a
c0008abe:	6a 00                	push   0x0
c0008ac0:	68 68 7e 01 c0       	push   0xc0017e68
c0008ac5:	ff 35 50 94 02 c0    	push   DWORD PTR ds:0xc0029450
c0008acb:	e8 54 e9 00 00       	call   c0017424 <Process::createThread(void (*)(void*), void*, int)>
c0008ad0:	83 c4 14             	add    esp,0x14
c0008ad3:	a3 08 94 02 c0       	mov    ds:0xc0029408,eax
c0008ad8:	68 04 3e 02 c0       	push   0xc0023e04
c0008add:	c6 05 0d 7f 02 c0 01 	mov    BYTE PTR ds:0xc0027f0d,0x1
c0008ae4:	e8 28 12 00 00       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0008ae9:	e8 55 f7 00 00       	call   c0018243 <Vm::initialise8086()>
c0008aee:	e8 69 48 00 00       	call   c000d35c <Fs::initVFS()>
c0008af3:	c7 04 24 c6 3b 02 c0 	mov    DWORD PTR [esp],0xc0023bc6
c0008afa:	e8 12 12 00 00       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0008aff:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c0008b04:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0008b0a:	8b 10                	mov    edx,DWORD PTR [eax]
c0008b0c:	6a 00                	push   0x0
c0008b0e:	6a 00                	push   0x0
c0008b10:	6a 00                	push   0x0
c0008b12:	50                   	push   eax
c0008b13:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0008b16:	83 c4 14             	add    esp,0x14
c0008b19:	68 04 3e 02 c0       	push   0xc0023e04
c0008b1e:	e8 ee 11 00 00       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0008b23:	e8 68 cf 00 00       	call   c0015a90 <Sys::loadSyscalls()>
c0008b28:	e8 a5 b3 00 00       	call   c0013ed2 <Krnl::loadSystemEnv()>
c0008b2d:	e8 f7 b7 00 00       	call   c0014329 <Krnl::setupPowerManager()>
c0008b32:	83 c4 0c             	add    esp,0xc
c0008b35:	6a 3a                	push   0x3a
c0008b37:	68 e0 3b 02 c0       	push   0xc0023be0
c0008b3c:	68 e9 3b 02 c0       	push   0xc0023be9
c0008b41:	e8 0d bd 00 00       	call   c0014853 <Reg::readIntWithDefault(char*, char*, int)>
c0008b46:	89 04 24             	mov    DWORD PTR [esp],eax
c0008b49:	e8 6a 53 00 00       	call   c000deb8 <User::loadClockSettings(int)>
c0008b4e:	c7 04 24 28 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e28
c0008b55:	e8 b7 11 00 00       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0008b5a:	58                   	pop    eax
c0008b5b:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c0008b60:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c0008b66:	e8 55 5a 00 00       	call   c000e5c0 <Device::loadDriversForAll()>
c0008b6b:	c7 04 24 f1 3b 02 c0 	mov    DWORD PTR [esp],0xc0023bf1
c0008b72:	e8 9a 11 00 00       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0008b77:	e8 be ae 00 00       	call   c0013a3a <Krnl::startCPUs()>
c0008b7c:	c7 04 24 0b 3c 02 c0 	mov    DWORD PTR [esp],0xc0023c0b
c0008b83:	e8 89 11 00 00       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0008b88:	5a                   	pop    edx
c0008b89:	8b 1d 08 7f 02 c0    	mov    ebx,DWORD PTR ds:0xc0027f08
c0008b8f:	59                   	pop    ecx
c0008b90:	6a 01                	push   0x1
c0008b92:	68 1c 3c 02 c0       	push   0xc0023c1c
c0008b97:	e8 c4 e0 00 00       	call   c0016c60 <Thr::loadDLL(char const*, bool)>
c0008b9c:	5a                   	pop    edx
c0008b9d:	59                   	pop    ecx
c0008b9e:	53                   	push   ebx
c0008b9f:	50                   	push   eax
c0008ba0:	e8 ec e2 00 00       	call   c0016e91 <Thr::executeDLL(unsigned long, void*)>
c0008ba5:	83 c4 10             	add    esp,0x10
c0008ba8:	83 ec 0c             	sub    esp,0xc
c0008bab:	6a 02                	push   0x2
c0008bad:	e8 86 ec 00 00       	call   c0017838 <blockTask(TaskState)>
c0008bb2:	83 c4 10             	add    esp,0x10
c0008bb5:	eb f1                	jmp    c0008ba8 <Krnl::firstTask()+0x144>
c0008bb7:	90                   	nop

c0008bb8 <Computer::Computer()>:
c0008bb8:	83 ec 0c             	sub    esp,0xc
c0008bbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bbf:	83 ec 08             	sub    esp,0x8
c0008bc2:	68 38 3c 02 c0       	push   0xc0023c38
c0008bc7:	50                   	push   eax
c0008bc8:	e8 ad 5a 00 00       	call   c000e67a <Device::Device(char const*)>
c0008bcd:	83 c4 10             	add    esp,0x10
c0008bd0:	ba 98 3e 02 c0       	mov    edx,0xc0023e98
c0008bd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bd9:	89 10                	mov    DWORD PTR [eax],edx
c0008bdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bdf:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0008be9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bed:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0008bf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bfb:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0008c01:	83 ca 04             	or     edx,0x4
c0008c04:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0008c0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c0e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c14:	0f b6 d0             	movzx  edx,al
c0008c17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c1b:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0008c22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c26:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c2c:	0f b6 d0             	movzx  edx,al
c0008c2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c33:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0008c38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c3c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c42:	8d 50 01             	lea    edx,[eax+0x1]
c0008c45:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008c49:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008c4f:	0f b6 d0             	movzx  edx,al
c0008c52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c56:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008c5a:	83 e1 3f             	and    ecx,0x3f
c0008c5d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008c61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c65:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c6b:	0f b6 d0             	movzx  edx,al
c0008c6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c72:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c0008c79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c7d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c83:	0f b6 d0             	movzx  edx,al
c0008c86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8a:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008c8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c93:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c99:	8d 50 01             	lea    edx,[eax+0x1]
c0008c9c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008ca0:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008ca6:	0f b6 d0             	movzx  edx,al
c0008ca9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cad:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008cb1:	83 e1 3f             	and    ecx,0x3f
c0008cb4:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008cb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cbc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cc2:	0f b6 d0             	movzx  edx,al
c0008cc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc9:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c0008cd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cda:	0f b6 d0             	movzx  edx,al
c0008cdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce1:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008ce6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cea:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cf0:	8d 50 01             	lea    edx,[eax+0x1]
c0008cf3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008cf7:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008cfd:	0f b6 d0             	movzx  edx,al
c0008d00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d04:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008d08:	83 e1 3f             	and    ecx,0x3f
c0008d0b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008d0f:	90                   	nop
c0008d10:	83 c4 0c             	add    esp,0xc
c0008d13:	c3                   	ret    

c0008d14 <Computer::setBootMessage(char const*)>:
c0008d14:	c3                   	ret    
c0008d15:	90                   	nop

c0008d16 <Computer::detectFeatures()>:
c0008d16:	55                   	push   ebp
c0008d17:	57                   	push   edi
c0008d18:	56                   	push   esi
c0008d19:	53                   	push   ebx
c0008d1a:	83 ec 1c             	sub    esp,0x1c
c0008d1d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008d21:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c0008d2b:	e8 e9 74 ff ff       	call   c0000219 <detectCPUID>
c0008d30:	85 c0                	test   eax,eax
c0008d32:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d38:	0f 95 c2             	setne  dl
c0008d3b:	83 e0 fd             	and    eax,0xfffffffd
c0008d3e:	d1 e2                	shl    edx,1
c0008d40:	09 d0                	or     eax,edx
c0008d42:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d48:	a8 02                	test   al,0x2
c0008d4a:	75 46                	jne    c0008d92 <Computer::detectFeatures()+0x7c>
c0008d4c:	f6 05 21 7f 02 c0 04 	test   BYTE PTR ds:0xc0027f21,0x4
c0008d53:	74 07                	je     c0008d5c <Computer::detectFeatures()+0x46>
c0008d55:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c0008d5c:	e8 85 96 01 00       	call   c00223e6 <x87Detect>
c0008d61:	83 e0 01             	and    eax,0x1
c0008d64:	c1 e0 04             	shl    eax,0x4
c0008d67:	88 c2                	mov    dl,al
c0008d69:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d6f:	83 e0 ef             	and    eax,0xffffffef
c0008d72:	09 d0                	or     eax,edx
c0008d74:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d7a:	a8 10                	test   al,0x10
c0008d7c:	0f 85 2a 01 00 00    	jne    c0008eac <Computer::detectFeatures()+0x196>
c0008d82:	84 c0                	test   al,al
c0008d84:	0f 88 45 01 00 00    	js     c0008ecf <Computer::detectFeatures()+0x1b9>
c0008d8a:	83 c4 1c             	add    esp,0x1c
c0008d8d:	5b                   	pop    ebx
c0008d8e:	5e                   	pop    esi
c0008d8f:	5f                   	pop    edi
c0008d90:	5d                   	pop    ebp
c0008d91:	c3                   	ret    
c0008d92:	83 ec 0c             	sub    esp,0xc
c0008d95:	6a 20                	push   0x20
c0008d97:	e8 6a 98 00 00       	call   c0012606 <CPU::cpuidCheckEDX(unsigned int)>
c0008d9c:	83 e0 01             	and    eax,0x1
c0008d9f:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0008da6:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008dac:	83 e0 f7             	and    eax,0xfffffff7
c0008daf:	09 d0                	or     eax,edx
c0008db1:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008db7:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0008dbe:	e8 43 98 00 00       	call   c0012606 <CPU::cpuidCheckEDX(unsigned int)>
c0008dc3:	83 e0 01             	and    eax,0x1
c0008dc6:	88 c2                	mov    dl,al
c0008dc8:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008dce:	83 e0 fe             	and    eax,0xfffffffe
c0008dd1:	09 d0                	or     eax,edx
c0008dd3:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008dd9:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0008de0:	e8 21 98 00 00       	call   c0012606 <CPU::cpuidCheckEDX(unsigned int)>
c0008de5:	c1 e0 07             	shl    eax,0x7
c0008de8:	88 c2                	mov    dl,al
c0008dea:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008df0:	83 e0 7f             	and    eax,0x7f
c0008df3:	09 d0                	or     eax,edx
c0008df5:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008dfb:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0008e02:	e8 ff 97 00 00       	call   c0012606 <CPU::cpuidCheckEDX(unsigned int)>
c0008e07:	83 c4 10             	add    esp,0x10
c0008e0a:	83 e0 01             	and    eax,0x1
c0008e0d:	c1 e0 05             	shl    eax,0x5
c0008e10:	88 c2                	mov    dl,al
c0008e12:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e18:	83 e0 df             	and    eax,0xffffffdf
c0008e1b:	09 d0                	or     eax,edx
c0008e1d:	f7 05 20 7f 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0027f20,0x401
c0008e27:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e2d:	0f 84 c2 00 00 00    	je     c0008ef5 <Computer::detectFeatures()+0x1df>
c0008e33:	83 e0 fe             	and    eax,0xfffffffe
c0008e36:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e3c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e42:	88 c2                	mov    dl,al
c0008e44:	83 e2 09             	and    edx,0x9
c0008e47:	fe ca                	dec    dl
c0008e49:	75 09                	jne    c0008e54 <Computer::detectFeatures()+0x13e>
c0008e4b:	83 e0 fe             	and    eax,0xfffffffe
c0008e4e:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e54:	83 ec 0c             	sub    esp,0xc
c0008e57:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008e5b:	50                   	push   eax
c0008e5c:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0008e60:	55                   	push   ebp
c0008e61:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0008e65:	57                   	push   edi
c0008e66:	8d 74 24 18          	lea    esi,[esp+0x18]
c0008e6a:	56                   	push   esi
c0008e6b:	68 00 00 00 80       	push   0x80000000
c0008e70:	e8 0d 97 00 00       	call   c0012582 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008e75:	83 c4 20             	add    esp,0x20
c0008e78:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0008e7f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0008e83:	0f 86 c3 fe ff ff    	jbe    c0008d4c <Computer::detectFeatures()+0x36>
c0008e89:	83 ec 0c             	sub    esp,0xc
c0008e8c:	50                   	push   eax
c0008e8d:	55                   	push   ebp
c0008e8e:	57                   	push   edi
c0008e8f:	56                   	push   esi
c0008e90:	68 01 00 00 80       	push   0x80000001
c0008e95:	e8 e8 96 00 00       	call   c0012582 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008e9a:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c0008ea4:	83 c4 20             	add    esp,0x20
c0008ea7:	e9 a0 fe ff ff       	jmp    c0008d4c <Computer::detectFeatures()+0x36>
c0008eac:	e8 ef 94 01 00       	call   c00223a0 <absolutelyNoChanceInHell>
c0008eb1:	88 c2                	mov    dl,al
c0008eb3:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008eb9:	c1 e2 07             	shl    edx,0x7
c0008ebc:	83 e0 7f             	and    eax,0x7f
c0008ebf:	09 d0                	or     eax,edx
c0008ec1:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008ec7:	84 c0                	test   al,al
c0008ec9:	0f 89 bb fe ff ff    	jns    c0008d8a <Computer::detectFeatures()+0x74>
c0008ecf:	e8 2c 94 01 00       	call   c0022300 <avxDetect>
c0008ed4:	83 e0 01             	and    eax,0x1
c0008ed7:	c1 e0 05             	shl    eax,0x5
c0008eda:	88 c2                	mov    dl,al
c0008edc:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008ee2:	83 e0 df             	and    eax,0xffffffdf
c0008ee5:	09 d0                	or     eax,edx
c0008ee7:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008eed:	83 c4 1c             	add    esp,0x1c
c0008ef0:	5b                   	pop    ebx
c0008ef1:	5e                   	pop    esi
c0008ef2:	5f                   	pop    edi
c0008ef3:	5d                   	pop    ebp
c0008ef4:	c3                   	ret    
c0008ef5:	83 ec 0c             	sub    esp,0xc
c0008ef8:	68 00 02 00 00       	push   0x200
c0008efd:	e8 04 97 00 00       	call   c0012606 <CPU::cpuidCheckEDX(unsigned int)>
c0008f02:	83 c4 10             	add    esp,0x10
c0008f05:	83 e0 01             	and    eax,0x1
c0008f08:	88 c2                	mov    dl,al
c0008f0a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008f10:	83 e0 fe             	and    eax,0xfffffffe
c0008f13:	09 d0                	or     eax,edx
c0008f15:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008f1b:	e9 1c ff ff ff       	jmp    c0008e3c <Computer::detectFeatures()+0x126>

c0008f20 <Computer::displayFeatures()>:
c0008f20:	53                   	push   ebx
c0008f21:	83 ec 14             	sub    esp,0x14
c0008f24:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008f28:	68 48 3c 02 c0       	push   0xc0023c48
c0008f2d:	e8 93 40 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0008f32:	83 c4 10             	add    esp,0x10
c0008f35:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c0008f3c:	0f 85 73 02 00 00    	jne    c00091b5 <Computer::displayFeatures()+0x295>
c0008f42:	b8 45 3c 02 c0       	mov    eax,0xc0023c45
c0008f47:	83 ec 08             	sub    esp,0x8
c0008f4a:	50                   	push   eax
c0008f4b:	68 5b 3c 02 c0       	push   0xc0023c5b
c0008f50:	e8 70 40 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0008f55:	83 c4 10             	add    esp,0x10
c0008f58:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c0008f5f:	0f 85 8c 02 00 00    	jne    c00091f1 <Computer::displayFeatures()+0x2d1>
c0008f65:	b8 45 3c 02 c0       	mov    eax,0xc0023c45
c0008f6a:	83 ec 08             	sub    esp,0x8
c0008f6d:	50                   	push   eax
c0008f6e:	68 6c 3c 02 c0       	push   0xc0023c6c
c0008f73:	e8 4d 40 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0008f78:	83 c4 10             	add    esp,0x10
c0008f7b:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c0008f82:	0f 85 5f 02 00 00    	jne    c00091e7 <Computer::displayFeatures()+0x2c7>
c0008f88:	b8 45 3c 02 c0       	mov    eax,0xc0023c45
c0008f8d:	83 ec 08             	sub    esp,0x8
c0008f90:	50                   	push   eax
c0008f91:	68 7d 3c 02 c0       	push   0xc0023c7d
c0008f96:	e8 2a 40 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0008f9b:	83 c4 10             	add    esp,0x10
c0008f9e:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c0008fa5:	0f 85 32 02 00 00    	jne    c00091dd <Computer::displayFeatures()+0x2bd>
c0008fab:	b8 45 3c 02 c0       	mov    eax,0xc0023c45
c0008fb0:	83 ec 08             	sub    esp,0x8
c0008fb3:	50                   	push   eax
c0008fb4:	68 8e 3c 02 c0       	push   0xc0023c8e
c0008fb9:	e8 07 40 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0008fbe:	83 c4 10             	add    esp,0x10
c0008fc1:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c0008fc8:	0f 85 05 02 00 00    	jne    c00091d3 <Computer::displayFeatures()+0x2b3>
c0008fce:	b8 45 3c 02 c0       	mov    eax,0xc0023c45
c0008fd3:	83 ec 08             	sub    esp,0x8
c0008fd6:	50                   	push   eax
c0008fd7:	68 9f 3c 02 c0       	push   0xc0023c9f
c0008fdc:	e8 e4 3f 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0008fe1:	83 c4 10             	add    esp,0x10
c0008fe4:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c0008feb:	0f 85 d8 01 00 00    	jne    c00091c9 <Computer::displayFeatures()+0x2a9>
c0008ff1:	b8 45 3c 02 c0       	mov    eax,0xc0023c45
c0008ff6:	83 ec 08             	sub    esp,0x8
c0008ff9:	50                   	push   eax
c0008ffa:	68 b0 3c 02 c0       	push   0xc0023cb0
c0008fff:	e8 c1 3f 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0009004:	83 c4 10             	add    esp,0x10
c0009007:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000900e:	0f 85 ab 01 00 00    	jne    c00091bf <Computer::displayFeatures()+0x29f>
c0009014:	b8 45 3c 02 c0       	mov    eax,0xc0023c45
c0009019:	83 ec 08             	sub    esp,0x8
c000901c:	50                   	push   eax
c000901d:	68 c1 3c 02 c0       	push   0xc0023cc1
c0009022:	e8 9e 3f 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0009027:	83 c4 10             	add    esp,0x10
c000902a:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c0009031:	0f 88 1b 02 00 00    	js     c0009252 <Computer::displayFeatures()+0x332>
c0009037:	b8 45 3c 02 c0       	mov    eax,0xc0023c45
c000903c:	83 ec 08             	sub    esp,0x8
c000903f:	50                   	push   eax
c0009040:	68 d2 3c 02 c0       	push   0xc0023cd2
c0009045:	e8 7b 3f 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000904a:	83 c4 10             	add    esp,0x10
c000904d:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c0009054:	0f 85 a1 01 00 00    	jne    c00091fb <Computer::displayFeatures()+0x2db>
c000905a:	b8 45 3c 02 c0       	mov    eax,0xc0023c45
c000905f:	83 ec 08             	sub    esp,0x8
c0009062:	50                   	push   eax
c0009063:	68 e3 3c 02 c0       	push   0xc0023ce3
c0009068:	e8 58 3f 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000906d:	83 c4 10             	add    esp,0x10
c0009070:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c0009077:	0f 85 cb 01 00 00    	jne    c0009248 <Computer::displayFeatures()+0x328>
c000907d:	b8 45 3c 02 c0       	mov    eax,0xc0023c45
c0009082:	83 ec 08             	sub    esp,0x8
c0009085:	50                   	push   eax
c0009086:	68 f4 3c 02 c0       	push   0xc0023cf4
c000908b:	e8 35 3f 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0009090:	83 c4 10             	add    esp,0x10
c0009093:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000909a:	0f 85 9e 01 00 00    	jne    c000923e <Computer::displayFeatures()+0x31e>
c00090a0:	b8 45 3c 02 c0       	mov    eax,0xc0023c45
c00090a5:	83 ec 08             	sub    esp,0x8
c00090a8:	50                   	push   eax
c00090a9:	68 05 3d 02 c0       	push   0xc0023d05
c00090ae:	e8 12 3f 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00090b3:	83 c4 10             	add    esp,0x10
c00090b6:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c00090bd:	0f 85 71 01 00 00    	jne    c0009234 <Computer::displayFeatures()+0x314>
c00090c3:	b8 45 3c 02 c0       	mov    eax,0xc0023c45
c00090c8:	83 ec 08             	sub    esp,0x8
c00090cb:	50                   	push   eax
c00090cc:	68 16 3d 02 c0       	push   0xc0023d16
c00090d1:	e8 ef 3e 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00090d6:	83 c4 10             	add    esp,0x10
c00090d9:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c00090e0:	0f 85 44 01 00 00    	jne    c000922a <Computer::displayFeatures()+0x30a>
c00090e6:	b8 45 3c 02 c0       	mov    eax,0xc0023c45
c00090eb:	83 ec 08             	sub    esp,0x8
c00090ee:	50                   	push   eax
c00090ef:	68 27 3d 02 c0       	push   0xc0023d27
c00090f4:	e8 cc 3e 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00090f9:	83 c4 10             	add    esp,0x10
c00090fc:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c0009103:	0f 85 17 01 00 00    	jne    c0009220 <Computer::displayFeatures()+0x300>
c0009109:	b8 45 3c 02 c0       	mov    eax,0xc0023c45
c000910e:	83 ec 08             	sub    esp,0x8
c0009111:	50                   	push   eax
c0009112:	68 38 3d 02 c0       	push   0xc0023d38
c0009117:	e8 a9 3e 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000911c:	83 c4 10             	add    esp,0x10
c000911f:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c0009126:	0f 85 ea 00 00 00    	jne    c0009216 <Computer::displayFeatures()+0x2f6>
c000912c:	b8 45 3c 02 c0       	mov    eax,0xc0023c45
c0009131:	83 ec 08             	sub    esp,0x8
c0009134:	50                   	push   eax
c0009135:	68 49 3d 02 c0       	push   0xc0023d49
c000913a:	e8 86 3e 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000913f:	83 c4 10             	add    esp,0x10
c0009142:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c0009149:	0f 88 0d 01 00 00    	js     c000925c <Computer::displayFeatures()+0x33c>
c000914f:	b8 45 3c 02 c0       	mov    eax,0xc0023c45
c0009154:	83 ec 08             	sub    esp,0x8
c0009157:	50                   	push   eax
c0009158:	68 5a 3d 02 c0       	push   0xc0023d5a
c000915d:	e8 63 3e 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0009162:	83 c4 10             	add    esp,0x10
c0009165:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000916c:	0f 85 9a 00 00 00    	jne    c000920c <Computer::displayFeatures()+0x2ec>
c0009172:	b8 45 3c 02 c0       	mov    eax,0xc0023c45
c0009177:	83 ec 08             	sub    esp,0x8
c000917a:	50                   	push   eax
c000917b:	68 6b 3d 02 c0       	push   0xc0023d6b
c0009180:	e8 40 3e 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0009185:	83 c4 10             	add    esp,0x10
c0009188:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000918f:	75 74                	jne    c0009205 <Computer::displayFeatures()+0x2e5>
c0009191:	b8 45 3c 02 c0       	mov    eax,0xc0023c45
c0009196:	83 ec 08             	sub    esp,0x8
c0009199:	50                   	push   eax
c000919a:	68 7c 3d 02 c0       	push   0xc0023d7c
c000919f:	e8 21 3e 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00091a4:	c7 44 24 20 f3 58 02 c0 	mov    DWORD PTR [esp+0x20],0xc00258f3
c00091ac:	83 c4 18             	add    esp,0x18
c00091af:	5b                   	pop    ebx
c00091b0:	e9 10 3e 00 00       	jmp    c000cfc5 <Dbg::kprintf(char const*, ...)>
c00091b5:	b8 41 3c 02 c0       	mov    eax,0xc0023c41
c00091ba:	e9 88 fd ff ff       	jmp    c0008f47 <Computer::displayFeatures()+0x27>
c00091bf:	b8 41 3c 02 c0       	mov    eax,0xc0023c41
c00091c4:	e9 50 fe ff ff       	jmp    c0009019 <Computer::displayFeatures()+0xf9>
c00091c9:	b8 41 3c 02 c0       	mov    eax,0xc0023c41
c00091ce:	e9 23 fe ff ff       	jmp    c0008ff6 <Computer::displayFeatures()+0xd6>
c00091d3:	b8 41 3c 02 c0       	mov    eax,0xc0023c41
c00091d8:	e9 f6 fd ff ff       	jmp    c0008fd3 <Computer::displayFeatures()+0xb3>
c00091dd:	b8 41 3c 02 c0       	mov    eax,0xc0023c41
c00091e2:	e9 c9 fd ff ff       	jmp    c0008fb0 <Computer::displayFeatures()+0x90>
c00091e7:	b8 41 3c 02 c0       	mov    eax,0xc0023c41
c00091ec:	e9 9c fd ff ff       	jmp    c0008f8d <Computer::displayFeatures()+0x6d>
c00091f1:	b8 41 3c 02 c0       	mov    eax,0xc0023c41
c00091f6:	e9 6f fd ff ff       	jmp    c0008f6a <Computer::displayFeatures()+0x4a>
c00091fb:	b8 41 3c 02 c0       	mov    eax,0xc0023c41
c0009200:	e9 5a fe ff ff       	jmp    c000905f <Computer::displayFeatures()+0x13f>
c0009205:	b8 41 3c 02 c0       	mov    eax,0xc0023c41
c000920a:	eb 8a                	jmp    c0009196 <Computer::displayFeatures()+0x276>
c000920c:	b8 41 3c 02 c0       	mov    eax,0xc0023c41
c0009211:	e9 61 ff ff ff       	jmp    c0009177 <Computer::displayFeatures()+0x257>
c0009216:	b8 41 3c 02 c0       	mov    eax,0xc0023c41
c000921b:	e9 11 ff ff ff       	jmp    c0009131 <Computer::displayFeatures()+0x211>
c0009220:	b8 41 3c 02 c0       	mov    eax,0xc0023c41
c0009225:	e9 e4 fe ff ff       	jmp    c000910e <Computer::displayFeatures()+0x1ee>
c000922a:	b8 41 3c 02 c0       	mov    eax,0xc0023c41
c000922f:	e9 b7 fe ff ff       	jmp    c00090eb <Computer::displayFeatures()+0x1cb>
c0009234:	b8 41 3c 02 c0       	mov    eax,0xc0023c41
c0009239:	e9 8a fe ff ff       	jmp    c00090c8 <Computer::displayFeatures()+0x1a8>
c000923e:	b8 41 3c 02 c0       	mov    eax,0xc0023c41
c0009243:	e9 5d fe ff ff       	jmp    c00090a5 <Computer::displayFeatures()+0x185>
c0009248:	b8 41 3c 02 c0       	mov    eax,0xc0023c41
c000924d:	e9 30 fe ff ff       	jmp    c0009082 <Computer::displayFeatures()+0x162>
c0009252:	b8 41 3c 02 c0       	mov    eax,0xc0023c41
c0009257:	e9 e0 fd ff ff       	jmp    c000903c <Computer::displayFeatures()+0x11c>
c000925c:	b8 41 3c 02 c0       	mov    eax,0xc0023c41
c0009261:	e9 ee fe ff ff       	jmp    c0009154 <Computer::displayFeatures()+0x234>

c0009266 <Computer::rdmsr(unsigned int)>:
c0009266:	83 ec 0c             	sub    esp,0xc
c0009269:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000926d:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0009274:	74 0a                	je     c0009280 <Computer::rdmsr(unsigned int)+0x1a>
c0009276:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000927a:	0f 32                	rdmsr  
c000927c:	83 c4 0c             	add    esp,0xc
c000927f:	c3                   	ret    
c0009280:	83 ec 0c             	sub    esp,0xc
c0009283:	68 8d 3d 02 c0       	push   0xc0023d8d
c0009288:	e8 4e ad 00 00       	call   c0013fdb <Krnl::panic(char const*)>
c000928d:	83 c4 10             	add    esp,0x10
c0009290:	eb e4                	jmp    c0009276 <Computer::rdmsr(unsigned int)+0x10>

c0009292 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0009292:	57                   	push   edi
c0009293:	56                   	push   esi
c0009294:	52                   	push   edx
c0009295:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009299:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000929d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00092a1:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00092a8:	74 0e                	je     c00092b8 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c00092aa:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00092ae:	89 f0                	mov    eax,esi
c00092b0:	89 fa                	mov    edx,edi
c00092b2:	0f 30                	wrmsr  
c00092b4:	58                   	pop    eax
c00092b5:	5e                   	pop    esi
c00092b6:	5f                   	pop    edi
c00092b7:	c3                   	ret    
c00092b8:	83 ec 0c             	sub    esp,0xc
c00092bb:	68 93 3d 02 c0       	push   0xc0023d93
c00092c0:	e8 16 ad 00 00       	call   c0013fdb <Krnl::panic(char const*)>
c00092c5:	83 c4 10             	add    esp,0x10
c00092c8:	eb e0                	jmp    c00092aa <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c00092ca <Computer::shutdown()>:
c00092ca:	83 ec 0c             	sub    esp,0xc
c00092cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00092d1:	8b 10                	mov    edx,DWORD PTR [eax]
c00092d3:	6a 00                	push   0x0
c00092d5:	6a 00                	push   0x0
c00092d7:	6a 00                	push   0x0
c00092d9:	50                   	push   eax
c00092da:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00092dd:	83 c4 1c             	add    esp,0x1c
c00092e0:	c3                   	ret    
c00092e1:	90                   	nop

c00092e2 <Computer::restart()>:
c00092e2:	83 ec 0c             	sub    esp,0xc
c00092e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00092e9:	8b 10                	mov    edx,DWORD PTR [eax]
c00092eb:	6a 00                	push   0x0
c00092ed:	6a 00                	push   0x0
c00092ef:	6a 01                	push   0x1
c00092f1:	50                   	push   eax
c00092f2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00092f5:	83 c4 1c             	add    esp,0x1c
c00092f8:	c3                   	ret    
c00092f9:	90                   	nop

c00092fa <Computer::sleep()>:
c00092fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00092fe:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0009304:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009308:	e9 c7 88 00 00       	jmp    c0011bd4 <ACPI::sleep()>
c000930d:	90                   	nop

c000930e <Computer::nmiEnabled()>:
c000930e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009312:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0009318:	c3                   	ret    
c0009319:	90                   	nop

c000931a <Computer::readCMOS(unsigned char)>:
c000931a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000931e:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0009325:	19 c0                	sbb    eax,eax
c0009327:	83 e0 80             	and    eax,0xffffff80
c000932a:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000932e:	e6 70                	out    0x70,al
c0009330:	e4 71                	in     al,0x71
c0009332:	c3                   	ret    
c0009333:	90                   	nop

c0009334 <Computer::enableNMI(bool)>:
c0009334:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009338:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000933c:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0009342:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000934a:	eb ce                	jmp    c000931a <Computer::readCMOS(unsigned char)>

c000934c <Computer::open(int, int, void*)>:
c000934c:	56                   	push   esi
c000934d:	53                   	push   ebx
c000934e:	83 ec 10             	sub    esp,0x10
c0009351:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009355:	68 48 3e 02 c0       	push   0xc0023e48
c000935a:	e8 b2 09 00 00       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c000935f:	f6 05 20 7f 02 c0 04 	test   BYTE PTR ds:0xc0027f20,0x4
c0009366:	c7 04 24 99 3d 02 c0 	mov    DWORD PTR [esp],0xc0023d99
c000936d:	0f 94 05 e0 72 02 c0 	sete   BYTE PTR ds:0xc00272e0
c0009374:	e8 98 09 00 00       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0009379:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0009380:	e8 32 09 00 00       	call   c0009cb7 <malloc>
c0009385:	89 04 24             	mov    DWORD PTR [esp],eax
c0009388:	89 c6                	mov    esi,eax
c000938a:	e8 fd 80 00 00       	call   c001148c <ACPI::ACPI()>
c000938f:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c0009395:	58                   	pop    eax
c0009396:	5a                   	pop    edx
c0009397:	56                   	push   esi
c0009398:	53                   	push   ebx
c0009399:	e8 d8 50 00 00       	call   c000e476 <Device::addChild(Device*)>
c000939e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00093a1:	e8 70 f9 ff ff       	call   c0008d16 <Computer::detectFeatures()>
c00093a6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00093a9:	e8 72 fb ff ff       	call   c0008f20 <Computer::displayFeatures()>
c00093ae:	59                   	pop    ecx
c00093af:	5e                   	pop    esi
c00093b0:	6a 01                	push   0x1
c00093b2:	53                   	push   ebx
c00093b3:	e8 7c ff ff ff       	call   c0009334 <Computer::enableNMI(bool)>
c00093b8:	c7 04 24 f1 3b 02 c0 	mov    DWORD PTR [esp],0xc0023bf1
c00093bf:	e8 4d 09 00 00       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c00093c4:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c00093cb:	e8 e7 08 00 00       	call   c0009cb7 <malloc>
c00093d0:	89 c6                	mov    esi,eax
c00093d2:	89 04 24             	mov    DWORD PTR [esp],eax
c00093d5:	e8 e4 92 00 00       	call   c00126be <CPU::CPU()>
c00093da:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c00093e0:	58                   	pop    eax
c00093e1:	5a                   	pop    edx
c00093e2:	56                   	push   esi
c00093e3:	53                   	push   ebx
c00093e4:	e8 8d 50 00 00       	call   c000e476 <Device::addChild(Device*)>
c00093e9:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00093ef:	8b 10                	mov    edx,DWORD PTR [eax]
c00093f1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00093f5:	6a 00                	push   0x0
c00093f7:	6a 00                	push   0x0
c00093f9:	50                   	push   eax
c00093fa:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00093fd:	83 c4 14             	add    esp,0x14
c0009400:	68 6c 3e 02 c0       	push   0xc0023e6c
c0009405:	e8 07 09 00 00       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c000940a:	e8 bf 15 01 00       	call   c001a9ce <Hal::initialiseCoprocessor()>
c000940f:	c7 04 24 b1 3d 02 c0 	mov    DWORD PTR [esp],0xc0023db1
c0009416:	e8 f6 08 00 00       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c000941b:	c7 04 24 64 8a 00 c0 	mov    DWORD PTR [esp],0xc0008a64
c0009422:	e8 11 e1 00 00       	call   c0017538 <setupMultitasking(void (*)())>
c0009427:	83 c4 14             	add    esp,0x14
c000942a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000942f:	5b                   	pop    ebx
c0009430:	5e                   	pop    esi
c0009431:	c3                   	ret    

c0009432 <Computer::disableNMI()>:
c0009432:	6a 00                	push   0x0
c0009434:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0009438:	e8 f7 fe ff ff       	call   c0009334 <Computer::enableNMI(bool)>
c000943d:	58                   	pop    eax
c000943e:	5a                   	pop    edx
c000943f:	c3                   	ret    

c0009440 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0009440:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009444:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000944b:	19 c0                	sbb    eax,eax
c000944d:	83 e0 80             	and    eax,0xffffff80
c0009450:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0009454:	e6 70                	out    0x70,al
c0009456:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000945a:	e6 71                	out    0x71,al
c000945c:	c3                   	ret    
c000945d:	90                   	nop

c000945e <Computer::handleNMI()>:
c000945e:	56                   	push   esi
c000945f:	53                   	push   ebx
c0009460:	83 ec 10             	sub    esp,0x10
c0009463:	e4 92                	in     al,0x92
c0009465:	89 c6                	mov    esi,eax
c0009467:	e4 61                	in     al,0x61
c0009469:	68 cc 3d 02 c0       	push   0xc0023dcc
c000946e:	88 c3                	mov    bl,al
c0009470:	e8 50 3b 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0009475:	83 c4 10             	add    esp,0x10
c0009478:	83 e6 10             	and    esi,0x10
c000947b:	75 0d                	jne    c000948a <Computer::handleNMI()+0x2c>
c000947d:	f6 c3 40             	test   bl,0x40
c0009480:	75 1d                	jne    c000949f <Computer::handleNMI()+0x41>
c0009482:	84 db                	test   bl,bl
c0009484:	78 2d                	js     c00094b3 <Computer::handleNMI()+0x55>
c0009486:	58                   	pop    eax
c0009487:	5b                   	pop    ebx
c0009488:	5e                   	pop    esi
c0009489:	c3                   	ret    
c000948a:	83 ec 0c             	sub    esp,0xc
c000948d:	68 dd 3d 02 c0       	push   0xc0023ddd
c0009492:	e8 44 ab 00 00       	call   c0013fdb <Krnl::panic(char const*)>
c0009497:	83 c4 10             	add    esp,0x10
c000949a:	f6 c3 40             	test   bl,0x40
c000949d:	74 e3                	je     c0009482 <Computer::handleNMI()+0x24>
c000949f:	83 ec 0c             	sub    esp,0xc
c00094a2:	68 ea 3d 02 c0       	push   0xc0023dea
c00094a7:	e8 2f ab 00 00       	call   c0013fdb <Krnl::panic(char const*)>
c00094ac:	83 c4 10             	add    esp,0x10
c00094af:	84 db                	test   bl,bl
c00094b1:	79 d3                	jns    c0009486 <Computer::handleNMI()+0x28>
c00094b3:	c7 44 24 10 f4 3d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023df4
c00094bb:	5a                   	pop    edx
c00094bc:	5b                   	pop    ebx
c00094bd:	5e                   	pop    esi
c00094be:	e9 18 ab 00 00       	jmp    c0013fdb <Krnl::panic(char const*)>
c00094c3:	90                   	nop

c00094c4 <Computer::setDiskActivityLight(int, bool)>:
c00094c4:	56                   	push   esi
c00094c5:	53                   	push   ebx
c00094c6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00094ca:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00094cf:	77 1b                	ja     c00094ec <Computer::setDiskActivityLight(int, bool)+0x28>
c00094d1:	e4 92                	in     al,0x92
c00094d3:	bb 40 00 00 00       	mov    ebx,0x40
c00094d8:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00094dc:	89 da                	mov    edx,ebx
c00094de:	d3 e2                	shl    edx,cl
c00094e0:	89 f1                	mov    ecx,esi
c00094e2:	f7 d2                	not    edx
c00094e4:	d3 e3                	shl    ebx,cl
c00094e6:	21 d0                	and    eax,edx
c00094e8:	09 d8                	or     eax,ebx
c00094ea:	e6 92                	out    0x92,al
c00094ec:	5b                   	pop    ebx
c00094ed:	5e                   	pop    esi
c00094ee:	c3                   	ret    
c00094ef:	90                   	nop

c00094f0 <GDTEntry::setBase(unsigned int)>:
c00094f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00094f4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00094f8:	89 c1                	mov    ecx,eax
c00094fa:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00094fe:	c1 e9 10             	shr    ecx,0x10
c0009501:	c1 e8 18             	shr    eax,0x18
c0009504:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0009507:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000950a:	c3                   	ret    
c000950b:	90                   	nop

c000950c <GDTEntry::setLimit(unsigned int)>:
c000950c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0009510:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009514:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0009517:	66 89 01             	mov    WORD PTR [ecx],ax
c000951a:	83 e2 f0             	and    edx,0xfffffff0
c000951d:	c1 e8 10             	shr    eax,0x10
c0009520:	83 e0 0f             	and    eax,0xf
c0009523:	09 d0                	or     eax,edx
c0009525:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0009528:	c3                   	ret    
c0009529:	90                   	nop

c000952a <GDT::GDT()>:
c000952a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000952e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009534:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009538:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000953e:	90                   	nop
c000953f:	c3                   	ret    

c0009540 <GDT::addEntry(GDTEntry)>:
c0009540:	53                   	push   ebx
c0009541:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009545:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009549:	8b 02                	mov    eax,DWORD PTR [edx]
c000954b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000954f:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0009553:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0009557:	8d 48 01             	lea    ecx,[eax+0x1]
c000955a:	c1 e0 03             	shl    eax,0x3
c000955d:	89 0a                	mov    DWORD PTR [edx],ecx
c000955f:	5b                   	pop    ebx
c0009560:	c3                   	ret    
c0009561:	90                   	nop

c0009562 <GDT::getNumberOfEntries()>:
c0009562:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009566:	8b 00                	mov    eax,DWORD PTR [eax]
c0009568:	c3                   	ret    
c0009569:	90                   	nop

c000956a <GDT::flush()>:
c000956a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000956e:	8b 10                	mov    edx,DWORD PTR [eax]
c0009570:	83 c0 04             	add    eax,0x4
c0009573:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000957a:	a3 12 7f 02 c0       	mov    ds:0xc0027f12,eax
c000957f:	66 89 15 10 7f 02 c0 	mov    WORD PTR ds:0xc0027f10,dx
c0009586:	e9 f2 6d ff ff       	jmp    c000037d <loadGDT>
c000958b:	90                   	nop

c000958c <GDT::setup()>:
c000958c:	57                   	push   edi
c000958d:	56                   	push   esi
c000958e:	53                   	push   ebx
c000958f:	83 ec 40             	sub    esp,0x40
c0009592:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0009596:	6a 00                	push   0x0
c0009598:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000959c:	56                   	push   esi
c000959d:	e8 4e ff ff ff       	call   c00094f0 <GDTEntry::setBase(unsigned int)>
c00095a2:	6a 00                	push   0x0
c00095a4:	56                   	push   esi
c00095a5:	e8 62 ff ff ff       	call   c000950c <GDTEntry::setLimit(unsigned int)>
c00095aa:	81 64 24 3c ff 00 0f ff 	and    DWORD PTR [esp+0x3c],0xff0f00ff
c00095b2:	6a 00                	push   0x0
c00095b4:	8d 74 24 44          	lea    esi,[esp+0x44]
c00095b8:	56                   	push   esi
c00095b9:	e8 32 ff ff ff       	call   c00094f0 <GDTEntry::setBase(unsigned int)>
c00095be:	68 ff ff ff 00       	push   0xffffff
c00095c3:	56                   	push   esi
c00095c4:	e8 43 ff ff ff       	call   c000950c <GDTEntry::setLimit(unsigned int)>
c00095c9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00095cd:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c00095d2:	0d 00 9a c0 00       	or     eax,0xc09a00
c00095d7:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00095db:	83 c4 20             	add    esp,0x20
c00095de:	6a 00                	push   0x0
c00095e0:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00095e4:	56                   	push   esi
c00095e5:	e8 06 ff ff ff       	call   c00094f0 <GDTEntry::setBase(unsigned int)>
c00095ea:	68 ff ff ff 00       	push   0xffffff
c00095ef:	56                   	push   esi
c00095f0:	e8 17 ff ff ff       	call   c000950c <GDTEntry::setLimit(unsigned int)>
c00095f5:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00095f9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00095fd:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0009601:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0009605:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009609:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000960e:	0d 00 92 c0 00       	or     eax,0xc09200
c0009613:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0009617:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000961b:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000961f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009623:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009627:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000962b:	89 fa                	mov    edx,edi
c000962d:	80 cc 60             	or     ah,0x60
c0009630:	81 e2 00 00 3f 00    	and    edx,0x3f0000
c0009636:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000963a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000963e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009642:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0009646:	80 cc 60             	or     ah,0x60
c0009649:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000964d:	89 f8                	mov    eax,edi
c000964f:	25 ff ff 00 ff       	and    eax,0xff00ffff
c0009654:	09 d0                	or     eax,edx
c0009656:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000965a:	89 c7                	mov    edi,eax
c000965c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009660:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0009664:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009668:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000966c:	81 e2 00 00 3f 00    	and    edx,0x3f0000
c0009672:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009676:	25 ff ff 00 ff       	and    eax,0xff00ffff
c000967b:	09 d0                	or     eax,edx
c000967d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009681:	83 c4 0c             	add    esp,0xc
c0009684:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009688:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000968c:	53                   	push   ebx
c000968d:	e8 ae fe ff ff       	call   c0009540 <GDT::addEntry(GDTEntry)>
c0009692:	83 c4 0c             	add    esp,0xc
c0009695:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0009699:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000969d:	53                   	push   ebx
c000969e:	e8 9d fe ff ff       	call   c0009540 <GDT::addEntry(GDTEntry)>
c00096a3:	83 c4 0c             	add    esp,0xc
c00096a6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00096aa:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00096ae:	53                   	push   ebx
c00096af:	e8 8c fe ff ff       	call   c0009540 <GDT::addEntry(GDTEntry)>
c00096b4:	83 c4 0c             	add    esp,0xc
c00096b7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00096bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00096bf:	53                   	push   ebx
c00096c0:	e8 7b fe ff ff       	call   c0009540 <GDT::addEntry(GDTEntry)>
c00096c5:	83 c4 0c             	add    esp,0xc
c00096c8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00096cc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00096d0:	53                   	push   ebx
c00096d1:	e8 6a fe ff ff       	call   c0009540 <GDT::addEntry(GDTEntry)>
c00096d6:	83 c4 0c             	add    esp,0xc
c00096d9:	57                   	push   edi
c00096da:	56                   	push   esi
c00096db:	53                   	push   ebx
c00096dc:	e8 5f fe ff ff       	call   c0009540 <GDT::addEntry(GDTEntry)>
c00096e1:	83 c4 0c             	add    esp,0xc
c00096e4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00096e8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00096ec:	53                   	push   ebx
c00096ed:	e8 4e fe ff ff       	call   c0009540 <GDT::addEntry(GDTEntry)>
c00096f2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00096f5:	e8 70 fe ff ff       	call   c000956a <GDT::flush()>
c00096fa:	83 c4 50             	add    esp,0x50
c00096fd:	5b                   	pop    ebx
c00096fe:	5e                   	pop    esi
c00096ff:	5f                   	pop    edi
c0009700:	c3                   	ret    

c0009701 <idleFunction(void*)>:
c0009701:	83 ec 0c             	sub    esp,0xc
c0009704:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c0009709:	48                   	dec    eax
c000970a:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c000970f:	75 01                	jne    c0009712 <idleFunction(void*)+0x11>
c0009711:	fb                   	sti    
c0009712:	f4                   	hlt    
c0009713:	e8 8a 92 01 00       	call   c00229a2 <idleCommon()>
c0009718:	eb f8                	jmp    c0009712 <idleFunction(void*)+0x11>
c000971a:	66 90                	xchg   ax,ax

c000971c <IDTEntry::IDTEntry(bool)>:
c000971c:	83 ec 04             	sub    esp,0x4
c000971f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009723:	88 04 24             	mov    BYTE PTR [esp],al
c0009726:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000972a:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0009730:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009734:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0009738:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000973c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000973f:	83 e2 f0             	and    edx,0xfffffff0
c0009742:	83 ca 0e             	or     edx,0xe
c0009745:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009748:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000974c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000974f:	83 e2 ef             	and    edx,0xffffffef
c0009752:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009755:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0009759:	74 05                	je     c0009760 <IDTEntry::IDTEntry(bool)+0x44>
c000975b:	b2 03                	mov    dl,0x3
c000975d:	eb 05                	jmp    c0009764 <IDTEntry::IDTEntry(bool)+0x48>
c000975f:	90                   	nop
c0009760:	b2 00                	mov    dl,0x0
c0009762:	66 90                	xchg   ax,ax
c0009764:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009768:	83 e2 03             	and    edx,0x3
c000976b:	88 d1                	mov    cl,dl
c000976d:	c1 e1 05             	shl    ecx,0x5
c0009770:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0009773:	83 e2 9f             	and    edx,0xffffff9f
c0009776:	09 ca                	or     edx,ecx
c0009778:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000977b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000977f:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0009782:	83 ca 80             	or     edx,0xffffff80
c0009785:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009788:	90                   	nop
c0009789:	83 c4 04             	add    esp,0x4
c000978c:	c3                   	ret    
c000978d:	90                   	nop

c000978e <IDTEntry::setOffset(unsigned int)>:
c000978e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009792:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009796:	66 89 02             	mov    WORD PTR [edx],ax
c0009799:	c1 e8 10             	shr    eax,0x10
c000979c:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00097a0:	c3                   	ret    
c00097a1:	90                   	nop
c00097a2:	66 90                	xchg   ax,ax

c00097a4 <IDT::IDT()>:
c00097a4:	90                   	nop
c00097a5:	c3                   	ret    

c00097a6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00097a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00097aa:	83 c0 30             	add    eax,0x30
c00097ad:	c3                   	ret    

c00097ae <IDT::addEntry(IDTEntry, int)>:
c00097ae:	53                   	push   ebx
c00097af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00097b3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00097b7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00097bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00097bf:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00097c2:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00097c6:	5b                   	pop    ebx
c00097c7:	c3                   	ret    

c00097c8 <IDT::addEntry(int, void (*)(), bool)>:
c00097c8:	53                   	push   ebx
c00097c9:	83 ec 10             	sub    esp,0x10
c00097cc:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00097d1:	50                   	push   eax
c00097d2:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00097d6:	53                   	push   ebx
c00097d7:	e8 40 ff ff ff       	call   c000971c <IDTEntry::IDTEntry(bool)>
c00097dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00097e0:	53                   	push   ebx
c00097e1:	e8 a8 ff ff ff       	call   c000978e <IDTEntry::setOffset(unsigned int)>
c00097e6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00097ea:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00097ee:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00097f2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097f6:	e8 b3 ff ff ff       	call   c00097ae <IDT::addEntry(IDTEntry, int)>
c00097fb:	83 c4 30             	add    esp,0x30
c00097fe:	5b                   	pop    ebx
c00097ff:	c3                   	ret    

c0009800 <IDT::flush()>:
c0009800:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009804:	66 c7 05 18 7f 02 c0 ff 07 	mov    WORD PTR ds:0xc0027f18,0x7ff
c000980d:	a3 1a 7f 02 c0       	mov    ds:0xc0027f1a,eax
c0009812:	0f 01 1d 18 7f 02 c0 	lidtd  ds:0xc0027f18
c0009819:	c3                   	ret    

c000981a <IDT::setup()>:
c000981a:	57                   	push   edi
c000981b:	56                   	push   esi
c000981c:	53                   	push   ebx
c000981d:	83 ec 10             	sub    esp,0x10
c0009820:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009824:	6a 00                	push   0x0
c0009826:	68 9d 03 00 c0       	push   0xc000039d
c000982b:	6a 00                	push   0x0
c000982d:	53                   	push   ebx
c000982e:	e8 95 ff ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009833:	6a 00                	push   0x0
c0009835:	68 ad 03 00 c0       	push   0xc00003ad
c000983a:	6a 01                	push   0x1
c000983c:	53                   	push   ebx
c000983d:	e8 86 ff ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009842:	83 c4 20             	add    esp,0x20
c0009845:	6a 00                	push   0x0
c0009847:	68 b7 03 00 c0       	push   0xc00003b7
c000984c:	6a 02                	push   0x2
c000984e:	53                   	push   ebx
c000984f:	e8 74 ff ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009854:	6a 00                	push   0x0
c0009856:	68 c1 03 00 c0       	push   0xc00003c1
c000985b:	6a 03                	push   0x3
c000985d:	53                   	push   ebx
c000985e:	e8 65 ff ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009863:	83 c4 20             	add    esp,0x20
c0009866:	6a 00                	push   0x0
c0009868:	68 cb 03 00 c0       	push   0xc00003cb
c000986d:	6a 04                	push   0x4
c000986f:	53                   	push   ebx
c0009870:	e8 53 ff ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009875:	6a 00                	push   0x0
c0009877:	68 d5 03 00 c0       	push   0xc00003d5
c000987c:	6a 05                	push   0x5
c000987e:	53                   	push   ebx
c000987f:	e8 44 ff ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009884:	83 c4 20             	add    esp,0x20
c0009887:	6a 00                	push   0x0
c0009889:	68 df 03 00 c0       	push   0xc00003df
c000988e:	6a 06                	push   0x6
c0009890:	53                   	push   ebx
c0009891:	e8 32 ff ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009896:	6a 00                	push   0x0
c0009898:	68 e9 03 00 c0       	push   0xc00003e9
c000989d:	6a 07                	push   0x7
c000989f:	53                   	push   ebx
c00098a0:	e8 23 ff ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c00098a5:	83 c4 20             	add    esp,0x20
c00098a8:	6a 00                	push   0x0
c00098aa:	68 f3 03 00 c0       	push   0xc00003f3
c00098af:	6a 08                	push   0x8
c00098b1:	53                   	push   ebx
c00098b2:	e8 11 ff ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c00098b7:	6a 00                	push   0x0
c00098b9:	68 fb 03 00 c0       	push   0xc00003fb
c00098be:	6a 09                	push   0x9
c00098c0:	53                   	push   ebx
c00098c1:	e8 02 ff ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c00098c6:	83 c4 20             	add    esp,0x20
c00098c9:	6a 00                	push   0x0
c00098cb:	68 05 04 00 c0       	push   0xc0000405
c00098d0:	6a 0a                	push   0xa
c00098d2:	53                   	push   ebx
c00098d3:	e8 f0 fe ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c00098d8:	6a 00                	push   0x0
c00098da:	68 0d 04 00 c0       	push   0xc000040d
c00098df:	6a 0b                	push   0xb
c00098e1:	53                   	push   ebx
c00098e2:	e8 e1 fe ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c00098e7:	83 c4 20             	add    esp,0x20
c00098ea:	6a 00                	push   0x0
c00098ec:	68 15 04 00 c0       	push   0xc0000415
c00098f1:	6a 0c                	push   0xc
c00098f3:	53                   	push   ebx
c00098f4:	e8 cf fe ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c00098f9:	6a 00                	push   0x0
c00098fb:	68 1d 04 00 c0       	push   0xc000041d
c0009900:	6a 0d                	push   0xd
c0009902:	53                   	push   ebx
c0009903:	e8 c0 fe ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009908:	83 c4 20             	add    esp,0x20
c000990b:	6a 00                	push   0x0
c000990d:	68 25 04 00 c0       	push   0xc0000425
c0009912:	6a 0e                	push   0xe
c0009914:	53                   	push   ebx
c0009915:	e8 ae fe ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c000991a:	6a 00                	push   0x0
c000991c:	68 2d 04 00 c0       	push   0xc000042d
c0009921:	6a 0f                	push   0xf
c0009923:	53                   	push   ebx
c0009924:	e8 9f fe ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009929:	83 c4 20             	add    esp,0x20
c000992c:	6a 00                	push   0x0
c000992e:	68 37 04 00 c0       	push   0xc0000437
c0009933:	6a 10                	push   0x10
c0009935:	53                   	push   ebx
c0009936:	e8 8d fe ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c000993b:	6a 00                	push   0x0
c000993d:	68 41 04 00 c0       	push   0xc0000441
c0009942:	6a 11                	push   0x11
c0009944:	53                   	push   ebx
c0009945:	e8 7e fe ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c000994a:	83 c4 20             	add    esp,0x20
c000994d:	6a 00                	push   0x0
c000994f:	68 4b 04 00 c0       	push   0xc000044b
c0009954:	6a 12                	push   0x12
c0009956:	53                   	push   ebx
c0009957:	e8 6c fe ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c000995c:	6a 01                	push   0x1
c000995e:	68 e5 04 00 c0       	push   0xc00004e5
c0009963:	6a 60                	push   0x60
c0009965:	53                   	push   ebx
c0009966:	e8 5d fe ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c000996b:	83 c4 20             	add    esp,0x20
c000996e:	6a 00                	push   0x0
c0009970:	68 ec 04 00 c0       	push   0xc00004ec
c0009975:	6a 20                	push   0x20
c0009977:	53                   	push   ebx
c0009978:	e8 4b fe ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c000997d:	6a 00                	push   0x0
c000997f:	68 d7 04 00 c0       	push   0xc00004d7
c0009984:	6a 21                	push   0x21
c0009986:	53                   	push   ebx
c0009987:	e8 3c fe ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c000998c:	83 c4 20             	add    esp,0x20
c000998f:	6a 00                	push   0x0
c0009991:	68 de 04 00 c0       	push   0xc00004de
c0009996:	6a 22                	push   0x22
c0009998:	53                   	push   ebx
c0009999:	e8 2a fe ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c000999e:	6a 00                	push   0x0
c00099a0:	68 55 04 00 c0       	push   0xc0000455
c00099a5:	6a 23                	push   0x23
c00099a7:	53                   	push   ebx
c00099a8:	e8 1b fe ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c00099ad:	83 c4 20             	add    esp,0x20
c00099b0:	6a 00                	push   0x0
c00099b2:	68 5f 04 00 c0       	push   0xc000045f
c00099b7:	6a 24                	push   0x24
c00099b9:	53                   	push   ebx
c00099ba:	e8 09 fe ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c00099bf:	6a 00                	push   0x0
c00099c1:	68 69 04 00 c0       	push   0xc0000469
c00099c6:	6a 25                	push   0x25
c00099c8:	53                   	push   ebx
c00099c9:	e8 fa fd ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c00099ce:	83 c4 20             	add    esp,0x20
c00099d1:	6a 00                	push   0x0
c00099d3:	68 73 04 00 c0       	push   0xc0000473
c00099d8:	6a 26                	push   0x26
c00099da:	53                   	push   ebx
c00099db:	e8 e8 fd ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c00099e0:	6a 00                	push   0x0
c00099e2:	68 7d 04 00 c0       	push   0xc000047d
c00099e7:	6a 27                	push   0x27
c00099e9:	53                   	push   ebx
c00099ea:	e8 d9 fd ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c00099ef:	83 c4 20             	add    esp,0x20
c00099f2:	6a 00                	push   0x0
c00099f4:	68 87 04 00 c0       	push   0xc0000487
c00099f9:	6a 28                	push   0x28
c00099fb:	53                   	push   ebx
c00099fc:	e8 c7 fd ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009a01:	6a 00                	push   0x0
c0009a03:	68 91 04 00 c0       	push   0xc0000491
c0009a08:	6a 29                	push   0x29
c0009a0a:	53                   	push   ebx
c0009a0b:	e8 b8 fd ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009a10:	83 c4 20             	add    esp,0x20
c0009a13:	6a 00                	push   0x0
c0009a15:	68 9b 04 00 c0       	push   0xc000049b
c0009a1a:	6a 2a                	push   0x2a
c0009a1c:	53                   	push   ebx
c0009a1d:	e8 a6 fd ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009a22:	6a 00                	push   0x0
c0009a24:	68 a5 04 00 c0       	push   0xc00004a5
c0009a29:	6a 2b                	push   0x2b
c0009a2b:	53                   	push   ebx
c0009a2c:	e8 97 fd ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009a31:	83 c4 20             	add    esp,0x20
c0009a34:	6a 00                	push   0x0
c0009a36:	68 af 04 00 c0       	push   0xc00004af
c0009a3b:	6a 2c                	push   0x2c
c0009a3d:	53                   	push   ebx
c0009a3e:	e8 85 fd ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009a43:	6a 00                	push   0x0
c0009a45:	68 b9 04 00 c0       	push   0xc00004b9
c0009a4a:	6a 2d                	push   0x2d
c0009a4c:	53                   	push   ebx
c0009a4d:	e8 76 fd ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009a52:	83 c4 20             	add    esp,0x20
c0009a55:	6a 00                	push   0x0
c0009a57:	68 c3 04 00 c0       	push   0xc00004c3
c0009a5c:	6a 2e                	push   0x2e
c0009a5e:	53                   	push   ebx
c0009a5f:	e8 64 fd ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009a64:	6a 00                	push   0x0
c0009a66:	68 cd 04 00 c0       	push   0xc00004cd
c0009a6b:	6a 2f                	push   0x2f
c0009a6d:	53                   	push   ebx
c0009a6e:	e8 55 fd ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009a73:	83 c4 20             	add    esp,0x20
c0009a76:	6a 00                	push   0x0
c0009a78:	68 23 05 00 c0       	push   0xc0000523
c0009a7d:	6a 30                	push   0x30
c0009a7f:	53                   	push   ebx
c0009a80:	e8 43 fd ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009a85:	6a 00                	push   0x0
c0009a87:	68 2d 05 00 c0       	push   0xc000052d
c0009a8c:	6a 31                	push   0x31
c0009a8e:	53                   	push   ebx
c0009a8f:	e8 34 fd ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009a94:	83 c4 20             	add    esp,0x20
c0009a97:	6a 00                	push   0x0
c0009a99:	68 37 05 00 c0       	push   0xc0000537
c0009a9e:	6a 32                	push   0x32
c0009aa0:	53                   	push   ebx
c0009aa1:	e8 22 fd ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009aa6:	6a 00                	push   0x0
c0009aa8:	68 41 05 00 c0       	push   0xc0000541
c0009aad:	6a 33                	push   0x33
c0009aaf:	53                   	push   ebx
c0009ab0:	e8 13 fd ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009ab5:	83 c4 20             	add    esp,0x20
c0009ab8:	6a 00                	push   0x0
c0009aba:	68 4b 05 00 c0       	push   0xc000054b
c0009abf:	6a 34                	push   0x34
c0009ac1:	53                   	push   ebx
c0009ac2:	e8 01 fd ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009ac7:	6a 00                	push   0x0
c0009ac9:	68 55 05 00 c0       	push   0xc0000555
c0009ace:	6a 35                	push   0x35
c0009ad0:	53                   	push   ebx
c0009ad1:	e8 f2 fc ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009ad6:	83 c4 20             	add    esp,0x20
c0009ad9:	6a 00                	push   0x0
c0009adb:	68 5f 05 00 c0       	push   0xc000055f
c0009ae0:	6a 36                	push   0x36
c0009ae2:	53                   	push   ebx
c0009ae3:	e8 e0 fc ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009ae8:	6a 00                	push   0x0
c0009aea:	68 69 05 00 c0       	push   0xc0000569
c0009aef:	6a 37                	push   0x37
c0009af1:	53                   	push   ebx
c0009af2:	e8 d1 fc ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009af7:	83 c4 1c             	add    esp,0x1c
c0009afa:	6a 03                	push   0x3
c0009afc:	6a 02                	push   0x2
c0009afe:	ff 35 34 80 02 c0    	push   DWORD PTR ds:0xc0028034
c0009b04:	e8 cf 28 00 00       	call   c000c3d8 <VAS::allocatePages(int, int)>
c0009b09:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0009b10:	89 c6                	mov    esi,eax
c0009b12:	e8 a0 01 00 00       	call   c0009cb7 <malloc>
c0009b17:	81 c6 00 20 00 00    	add    esi,0x2000
c0009b1d:	89 04 24             	mov    DWORD PTR [esp],eax
c0009b20:	89 c7                	mov    edi,eax
c0009b22:	e8 85 1a 00 00       	call   c000b5ac <TSS::TSS()>
c0009b27:	83 c4 0c             	add    esp,0xc
c0009b2a:	68 f3 03 00 c0       	push   0xc00003f3
c0009b2f:	56                   	push   esi
c0009b30:	57                   	push   edi
c0009b31:	e8 ba 1a 00 00       	call   c000b5f0 <TSS::setup(unsigned long, unsigned long)>
c0009b36:	89 c6                	mov    esi,eax
c0009b38:	58                   	pop    eax
c0009b39:	5a                   	pop    edx
c0009b3a:	6a 00                	push   0x0
c0009b3c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0009b40:	50                   	push   eax
c0009b41:	e8 d6 fb ff ff       	call   c000971c <IDTEntry::IDTEntry(bool)>
c0009b46:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009b4a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0009b4f:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0009b56:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0009b5c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009b60:	80 ce 05             	or     dh,0x5
c0009b63:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0009b66:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b6a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009b6e:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0009b71:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009b74:	e8 87 fc ff ff       	call   c0009800 <IDT::flush()>
c0009b79:	83 c4 20             	add    esp,0x20
c0009b7c:	5b                   	pop    ebx
c0009b7d:	5e                   	pop    esi
c0009b7e:	5f                   	pop    edi
c0009b7f:	c3                   	ret    

c0009b80 <sbrk>:
c0009b80:	55                   	push   ebp
c0009b81:	57                   	push   edi
c0009b82:	56                   	push   esi
c0009b83:	53                   	push   ebx
c0009b84:	83 ec 24             	sub    esp,0x24
c0009b87:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009b8b:	53                   	push   ebx
c0009b8c:	68 bc 3e 02 c0       	push   0xc0023ebc
c0009b91:	e8 2f 34 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0009b96:	83 c4 10             	add    esp,0x10
c0009b99:	85 db                	test   ebx,ebx
c0009b9b:	74 5f                	je     c0009bfc <sbrk+0x7c>
c0009b9d:	78 64                	js     c0009c03 <sbrk+0x83>
c0009b9f:	a1 6c 71 02 c0       	mov    eax,ds:0xc002716c
c0009ba4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009ba8:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c0009bae:	89 dd                	mov    ebp,ebx
c0009bb0:	78 69                	js     c0009c1b <sbrk+0x9b>
c0009bb2:	c1 fd 0c             	sar    ebp,0xc
c0009bb5:	bb 00 00 00 00       	mov    ebx,0x0
c0009bba:	8b 35 34 80 02 c0    	mov    esi,DWORD PTR ds:0xc0028034
c0009bc0:	8b 3d 6c 71 02 c0    	mov    edi,DWORD PTR ds:0xc002716c
c0009bc6:	e8 a3 07 00 00       	call   c000a36e <Phys::allocatePage()>
c0009bcb:	68 01 04 00 00       	push   0x401
c0009bd0:	57                   	push   edi
c0009bd1:	50                   	push   eax
c0009bd2:	56                   	push   esi
c0009bd3:	e8 fc 26 00 00       	call   c000c2d4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009bd8:	81 05 6c 71 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002716c,0x1000
c0009be2:	43                   	inc    ebx
c0009be3:	83 c4 10             	add    esp,0x10
c0009be6:	39 dd                	cmp    ebp,ebx
c0009be8:	75 d0                	jne    c0009bba <sbrk+0x3a>
c0009bea:	0f 20 d8             	mov    eax,cr3
c0009bed:	0f 22 d8             	mov    cr3,eax
c0009bf0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009bf4:	83 c4 1c             	add    esp,0x1c
c0009bf7:	5b                   	pop    ebx
c0009bf8:	5e                   	pop    esi
c0009bf9:	5f                   	pop    edi
c0009bfa:	5d                   	pop    ebp
c0009bfb:	c3                   	ret    
c0009bfc:	a1 6c 71 02 c0       	mov    eax,ds:0xc002716c
c0009c01:	eb f1                	jmp    c0009bf4 <sbrk+0x74>
c0009c03:	83 ec 08             	sub    esp,0x8
c0009c06:	53                   	push   ebx
c0009c07:	68 e8 3e 02 c0       	push   0xc0023ee8
c0009c0c:	e8 b4 33 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0009c11:	83 c4 10             	add    esp,0x10
c0009c14:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009c19:	eb d9                	jmp    c0009bf4 <sbrk+0x74>
c0009c1b:	8d ab ff 0f 00 00    	lea    ebp,[ebx+0xfff]
c0009c21:	eb 8f                	jmp    c0009bb2 <sbrk+0x32>

c0009c23 <mmap>:
c0009c23:	83 ec 18             	sub    esp,0x18
c0009c26:	68 da 3e 02 c0       	push   0xc0023eda
c0009c2b:	e8 ab a3 00 00       	call   c0013fdb <Krnl::panic(char const*)>
c0009c30:	b8 00 00 00 00       	mov    eax,0x0
c0009c35:	83 c4 1c             	add    esp,0x1c
c0009c38:	c3                   	ret    

c0009c39 <munmap>:
c0009c39:	83 ec 18             	sub    esp,0x18
c0009c3c:	68 df 3e 02 c0       	push   0xc0023edf
c0009c41:	e8 95 a3 00 00       	call   c0013fdb <Krnl::panic(char const*)>
c0009c46:	b8 00 00 00 00       	mov    eax,0x0
c0009c4b:	83 c4 1c             	add    esp,0x1c
c0009c4e:	c3                   	ret    

c0009c4f <liballoc_lock()>:
c0009c4f:	fa                   	cli    
c0009c50:	ff 05 28 94 02 c0    	inc    DWORD PTR ds:0xc0029428
c0009c56:	b8 00 00 00 00       	mov    eax,0x0
c0009c5b:	c3                   	ret    

c0009c5c <liballoc_unlock()>:
c0009c5c:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c0009c61:	48                   	dec    eax
c0009c62:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c0009c67:	75 01                	jne    c0009c6a <liballoc_unlock()+0xe>
c0009c69:	fb                   	sti    
c0009c6a:	b8 00 00 00 00       	mov    eax,0x0
c0009c6f:	c3                   	ret    

c0009c70 <liballoc_alloc(int)>:
c0009c70:	83 ec 10             	sub    esp,0x10
c0009c73:	6a 01                	push   0x1
c0009c75:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009c79:	ff 35 34 80 02 c0    	push   DWORD PTR ds:0xc0028034
c0009c7f:	e8 54 27 00 00       	call   c000c3d8 <VAS::allocatePages(int, int)>
c0009c84:	83 c4 1c             	add    esp,0x1c
c0009c87:	c3                   	ret    

c0009c88 <liballoc_free(void*, int)>:
c0009c88:	83 ec 14             	sub    esp,0x14
c0009c8b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009c8f:	ff 35 34 80 02 c0    	push   DWORD PTR ds:0xc0028034
c0009c95:	e8 e6 23 00 00       	call   c000c080 <VAS::freeAllocatedPages(unsigned long)>
c0009c9a:	b8 00 00 00 00       	mov    eax,0x0
c0009c9f:	83 c4 1c             	add    esp,0x1c
c0009ca2:	c3                   	ret    

c0009ca3 <realloc>:
c0009ca3:	83 ec 14             	sub    esp,0x14
c0009ca6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009caa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cae:	e8 a5 78 ff ff       	call   c0001558 <dlrealloc>
c0009cb3:	83 c4 1c             	add    esp,0x1c
c0009cb6:	c3                   	ret    

c0009cb7 <malloc>:
c0009cb7:	83 ec 18             	sub    esp,0x18
c0009cba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cbe:	e8 58 73 ff ff       	call   c000101b <dlmalloc>
c0009cc3:	83 c4 1c             	add    esp,0x1c
c0009cc6:	c3                   	ret    

c0009cc7 <free>:
c0009cc7:	83 ec 18             	sub    esp,0x18
c0009cca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cce:	e8 ed 6f ff ff       	call   c0000cc0 <dlfree>
c0009cd3:	83 c4 1c             	add    esp,0x1c
c0009cd6:	c3                   	ret    

c0009cd7 <rfree>:
c0009cd7:	83 ec 18             	sub    esp,0x18
c0009cda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cde:	e8 dd 6f ff ff       	call   c0000cc0 <dlfree>
c0009ce3:	83 c4 1c             	add    esp,0x1c
c0009ce6:	c3                   	ret    

c0009ce7 <calloc>:
c0009ce7:	56                   	push   esi
c0009ce8:	53                   	push   ebx
c0009ce9:	83 ec 10             	sub    esp,0x10
c0009cec:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009cf0:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0009cf5:	53                   	push   ebx
c0009cf6:	e8 bc ff ff ff       	call   c0009cb7 <malloc>
c0009cfb:	89 c6                	mov    esi,eax
c0009cfd:	83 c4 0c             	add    esp,0xc
c0009d00:	53                   	push   ebx
c0009d01:	6a 00                	push   0x0
c0009d03:	50                   	push   eax
c0009d04:	e8 73 69 ff ff       	call   c000067c <memset>
c0009d09:	89 f0                	mov    eax,esi
c0009d0b:	83 c4 14             	add    esp,0x14
c0009d0e:	5b                   	pop    ebx
c0009d0f:	5e                   	pop    esi
c0009d10:	c3                   	ret    

c0009d11 <Krnl::setBootMessage(char const*)>:
c0009d11:	57                   	push   edi
c0009d12:	56                   	push   esi
c0009d13:	53                   	push   ebx
c0009d14:	81 ec a4 00 00 00    	sub    esp,0xa4
c0009d1a:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0009d21:	68 9e 00 00 00       	push   0x9e
c0009d26:	6a 00                	push   0x0
c0009d28:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0009d2c:	56                   	push   esi
c0009d2d:	e8 4a 69 ff ff       	call   c000067c <memset>
c0009d32:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009d35:	e8 5e 69 ff ff       	call   c0000698 <strlen>
c0009d3a:	ba 50 00 00 00       	mov    edx,0x50
c0009d3f:	83 c4 10             	add    esp,0x10
c0009d42:	29 c2                	sub    edx,eax
c0009d44:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c0009d48:	d1 ea                	shr    edx,1
c0009d4a:	84 c0                	test   al,al
c0009d4c:	74 19                	je     c0009d67 <Krnl::setBootMessage(char const*)+0x56>
c0009d4e:	01 d2                	add    edx,edx
c0009d50:	43                   	inc    ebx
c0009d51:	01 f2                	add    edx,esi
c0009d53:	80 cc 0f             	or     ah,0xf
c0009d56:	83 c2 02             	add    edx,0x2
c0009d59:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c0009d5d:	43                   	inc    ebx
c0009d5e:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c0009d63:	84 c0                	test   al,al
c0009d65:	75 ec                	jne    c0009d53 <Krnl::setBootMessage(char const*)+0x42>
c0009d67:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0009d6c:	b9 9e 00 00 00       	mov    ecx,0x9e
c0009d71:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0009d73:	81 c4 a0 00 00 00    	add    esp,0xa0
c0009d79:	5b                   	pop    ebx
c0009d7a:	5e                   	pop    esi
c0009d7b:	5f                   	pop    edi
c0009d7c:	c3                   	ret    

c0009d7d <kernel_main>:
c0009d7d:	57                   	push   edi
c0009d7e:	56                   	push   esi
c0009d7f:	53                   	push   ebx
c0009d80:	83 ec 20             	sub    esp,0x20
c0009d83:	a1 00 05 00 00       	mov    eax,ds:0x500
c0009d88:	a3 20 7f 02 c0       	mov    ds:0xc0027f20,eax
c0009d8d:	f6 c4 08             	test   ah,0x8
c0009d90:	0f 85 7a 03 00 00    	jne    c000a110 <kernel_main+0x393>
c0009d96:	31 f6                	xor    esi,esi
c0009d98:	bf f9 03 00 00       	mov    edi,0x3f9
c0009d9d:	89 f0                	mov    eax,esi
c0009d9f:	89 fa                	mov    edx,edi
c0009da1:	ee                   	out    dx,al
c0009da2:	bb fb 03 00 00       	mov    ebx,0x3fb
c0009da7:	b0 80                	mov    al,0x80
c0009da9:	89 da                	mov    edx,ebx
c0009dab:	ee                   	out    dx,al
c0009dac:	b1 03                	mov    cl,0x3
c0009dae:	ba f8 03 00 00       	mov    edx,0x3f8
c0009db3:	88 c8                	mov    al,cl
c0009db5:	ee                   	out    dx,al
c0009db6:	89 f0                	mov    eax,esi
c0009db8:	89 fa                	mov    edx,edi
c0009dba:	ee                   	out    dx,al
c0009dbb:	88 c8                	mov    al,cl
c0009dbd:	89 da                	mov    edx,ebx
c0009dbf:	ee                   	out    dx,al
c0009dc0:	b0 c7                	mov    al,0xc7
c0009dc2:	ba fa 03 00 00       	mov    edx,0x3fa
c0009dc7:	ee                   	out    dx,al
c0009dc8:	b0 0b                	mov    al,0xb
c0009dca:	ba fc 03 00 00       	mov    edx,0x3fc
c0009dcf:	ee                   	out    dx,al
c0009dd0:	83 ec 0c             	sub    esp,0xc
c0009dd3:	68 18 3f 02 c0       	push   0xc0023f18
c0009dd8:	e8 e8 31 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0009ddd:	83 c4 10             	add    esp,0x10
c0009de0:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c0009de7:	0f 85 eb 02 00 00    	jne    c000a0d8 <kernel_main+0x35b>
c0009ded:	e8 c6 0c 00 00       	call   c000aab8 <installVgaTextImplementation()>
c0009df2:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c0009df9:	0f 85 94 02 00 00    	jne    c000a093 <kernel_main+0x316>
c0009dff:	0f b6 05 80 71 02 c0 	movzx  eax,BYTE PTR ds:0xc0027180
c0009e06:	84 c0                	test   al,al
c0009e08:	74 7b                	je     c0009e85 <kernel_main+0x108>
c0009e0a:	31 db                	xor    ebx,ebx
c0009e0c:	bf 0a 00 00 00       	mov    edi,0xa
c0009e11:	be 05 00 00 00       	mov    esi,0x5
c0009e16:	31 c9                	xor    ecx,ecx
c0009e18:	eb 2a                	jmp    c0009e44 <kernel_main+0xc7>
c0009e1a:	3c 0d                	cmp    al,0xd
c0009e1c:	74 1a                	je     c0009e38 <kernel_main+0xbb>
c0009e1e:	3c 0a                	cmp    al,0xa
c0009e20:	74 40                	je     c0009e62 <kernel_main+0xe5>
c0009e22:	8d 14 b6             	lea    edx,[esi+esi*4]
c0009e25:	80 cc 0e             	or     ah,0xe
c0009e28:	c1 e2 04             	shl    edx,0x4
c0009e2b:	01 ca                	add    edx,ecx
c0009e2d:	41                   	inc    ecx
c0009e2e:	01 fa                	add    edx,edi
c0009e30:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c0009e38:	43                   	inc    ebx
c0009e39:	0f b6 83 80 71 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd8e80]
c0009e40:	84 c0                	test   al,al
c0009e42:	74 32                	je     c0009e76 <kernel_main+0xf9>
c0009e44:	80 b9 b6 71 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffd8e4a],0xdb
c0009e4b:	75 cd                	jne    c0009e1a <kernel_main+0x9d>
c0009e4d:	0f b6 91 b5 71 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffd8e4b]
c0009e54:	83 e2 fe             	and    edx,0xfffffffe
c0009e57:	81 fa ba 00 00 00    	cmp    edx,0xba
c0009e5d:	75 bb                	jne    c0009e1a <kernel_main+0x9d>
c0009e5f:	47                   	inc    edi
c0009e60:	eb b8                	jmp    c0009e1a <kernel_main+0x9d>
c0009e62:	43                   	inc    ebx
c0009e63:	46                   	inc    esi
c0009e64:	31 c9                	xor    ecx,ecx
c0009e66:	0f b6 83 80 71 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd8e80]
c0009e6d:	bf 0a 00 00 00       	mov    edi,0xa
c0009e72:	84 c0                	test   al,al
c0009e74:	75 ce                	jne    c0009e44 <kernel_main+0xc7>
c0009e76:	8b 15 20 7f 02 c0    	mov    edx,DWORD PTR ds:0xc0027f20
c0009e7c:	80 e6 08             	and    dh,0x8
c0009e7f:	0f 85 bf 00 00 00    	jne    c0009f44 <kernel_main+0x1c7>
c0009e85:	83 ec 0c             	sub    esp,0xc
c0009e88:	68 b4 3f 02 c0       	push   0xc0023fb4
c0009e8d:	e8 7f fe ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0009e92:	a1 24 05 00 00       	mov    eax,ds:0x524
c0009e97:	05 ff 0f 00 00       	add    eax,0xfff
c0009e9c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009ea1:	89 04 24             	mov    DWORD PTR [esp],eax
c0009ea4:	e8 44 06 00 00       	call   c000a4ed <Phys::physicalMemorySetup(unsigned int)>
c0009ea9:	83 c4 10             	add    esp,0x10
c0009eac:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c0009eb3:	0f 85 a2 01 00 00    	jne    c000a05b <kernel_main+0x2de>
c0009eb9:	e8 6a 1f 00 00       	call   c000be28 <Virt::virtualMemorySetup()>
c0009ebe:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c0009ec5:	0f 85 58 01 00 00    	jne    c000a023 <kernel_main+0x2a6>
c0009ecb:	83 ec 0c             	sub    esp,0xc
c0009ece:	8d 74 24 18          	lea    esi,[esp+0x18]
c0009ed2:	56                   	push   esi
c0009ed3:	e8 28 2b 00 00       	call   c000ca00 <VAS::VAS()>
c0009ed8:	83 c4 10             	add    esp,0x10
c0009edb:	89 35 34 80 02 c0    	mov    DWORD PTR ds:0xc0028034,esi
c0009ee1:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c0009ee8:	0f 85 fd 00 00 00    	jne    c0009feb <kernel_main+0x26e>
c0009eee:	e8 2d 61 ff ff       	call   c0000020 <callGlobalConstructors>
c0009ef3:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c0009efa:	0f 85 b3 00 00 00    	jne    c0009fb3 <kernel_main+0x236>
c0009f00:	83 ec 0c             	sub    esp,0xc
c0009f03:	68 ec 01 00 00       	push   0x1ec
c0009f08:	e8 aa fd ff ff       	call   c0009cb7 <malloc>
c0009f0d:	89 c3                	mov    ebx,eax
c0009f0f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009f12:	e8 a1 ec ff ff       	call   c0008bb8 <Computer::Computer()>
c0009f17:	83 c4 10             	add    esp,0x10
c0009f1a:	89 1d 08 7f 02 c0    	mov    DWORD PTR ds:0xc0027f08,ebx
c0009f20:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c0009f27:	75 53                	jne    c0009f7c <kernel_main+0x1ff>
c0009f29:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009f2b:	6a 00                	push   0x0
c0009f2d:	6a 00                	push   0x0
c0009f2f:	6a 00                	push   0x0
c0009f31:	53                   	push   ebx
c0009f32:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0009f35:	89 34 24             	mov    DWORD PTR [esp],esi
c0009f38:	e8 1b 22 00 00       	call   c000c158 <VAS::~VAS()>
c0009f3d:	83 c4 30             	add    esp,0x30
c0009f40:	5b                   	pop    ebx
c0009f41:	5e                   	pop    esi
c0009f42:	5f                   	pop    edi
c0009f43:	c3                   	ret    
c0009f44:	83 ec 0c             	sub    esp,0xc
c0009f47:	68 63 3f 02 c0       	push   0xc0023f63
c0009f4c:	e8 c0 fd ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0009f51:	83 c4 10             	add    esp,0x10
c0009f54:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c0009f5b:	0f 85 24 ff ff ff    	jne    c0009e85 <kernel_main+0x108>
c0009f61:	eb 04                	jmp    c0009f67 <kernel_main+0x1ea>
c0009f63:	3c 1c                	cmp    al,0x1c
c0009f65:	74 06                	je     c0009f6d <kernel_main+0x1f0>
c0009f67:	e4 60                	in     al,0x60
c0009f69:	3c 5a                	cmp    al,0x5a
c0009f6b:	75 f6                	jne    c0009f63 <kernel_main+0x1e6>
c0009f6d:	e4 60                	in     al,0x60
c0009f6f:	3c 5a                	cmp    al,0x5a
c0009f71:	74 fa                	je     c0009f6d <kernel_main+0x1f0>
c0009f73:	3c 1c                	cmp    al,0x1c
c0009f75:	74 f6                	je     c0009f6d <kernel_main+0x1f0>
c0009f77:	e9 09 ff ff ff       	jmp    c0009e85 <kernel_main+0x108>
c0009f7c:	83 ec 0c             	sub    esp,0xc
c0009f7f:	68 a2 3f 02 c0       	push   0xc0023fa2
c0009f84:	e8 88 fd ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0009f89:	83 c4 10             	add    esp,0x10
c0009f8c:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c0009f93:	74 0c                	je     c0009fa1 <kernel_main+0x224>
c0009f95:	8b 1d 08 7f 02 c0    	mov    ebx,DWORD PTR ds:0xc0027f08
c0009f9b:	eb 8c                	jmp    c0009f29 <kernel_main+0x1ac>
c0009f9d:	3c 1c                	cmp    al,0x1c
c0009f9f:	74 06                	je     c0009fa7 <kernel_main+0x22a>
c0009fa1:	e4 60                	in     al,0x60
c0009fa3:	3c 5a                	cmp    al,0x5a
c0009fa5:	75 f6                	jne    c0009f9d <kernel_main+0x220>
c0009fa7:	e4 60                	in     al,0x60
c0009fa9:	3c 5a                	cmp    al,0x5a
c0009fab:	74 fa                	je     c0009fa7 <kernel_main+0x22a>
c0009fad:	3c 1c                	cmp    al,0x1c
c0009faf:	74 f6                	je     c0009fa7 <kernel_main+0x22a>
c0009fb1:	eb e2                	jmp    c0009f95 <kernel_main+0x218>
c0009fb3:	83 ec 0c             	sub    esp,0xc
c0009fb6:	68 8f 3f 02 c0       	push   0xc0023f8f
c0009fbb:	e8 51 fd ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0009fc0:	83 c4 10             	add    esp,0x10
c0009fc3:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c0009fca:	0f 85 30 ff ff ff    	jne    c0009f00 <kernel_main+0x183>
c0009fd0:	eb 04                	jmp    c0009fd6 <kernel_main+0x259>
c0009fd2:	3c 1c                	cmp    al,0x1c
c0009fd4:	74 06                	je     c0009fdc <kernel_main+0x25f>
c0009fd6:	e4 60                	in     al,0x60
c0009fd8:	3c 5a                	cmp    al,0x5a
c0009fda:	75 f6                	jne    c0009fd2 <kernel_main+0x255>
c0009fdc:	e4 60                	in     al,0x60
c0009fde:	3c 5a                	cmp    al,0x5a
c0009fe0:	74 fa                	je     c0009fdc <kernel_main+0x25f>
c0009fe2:	3c 1c                	cmp    al,0x1c
c0009fe4:	74 f6                	je     c0009fdc <kernel_main+0x25f>
c0009fe6:	e9 15 ff ff ff       	jmp    c0009f00 <kernel_main+0x183>
c0009feb:	83 ec 0c             	sub    esp,0xc
c0009fee:	68 85 3f 02 c0       	push   0xc0023f85
c0009ff3:	e8 19 fd ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0009ff8:	83 c4 10             	add    esp,0x10
c0009ffb:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c000a002:	0f 85 e6 fe ff ff    	jne    c0009eee <kernel_main+0x171>
c000a008:	eb 04                	jmp    c000a00e <kernel_main+0x291>
c000a00a:	3c 1c                	cmp    al,0x1c
c000a00c:	74 06                	je     c000a014 <kernel_main+0x297>
c000a00e:	e4 60                	in     al,0x60
c000a010:	3c 5a                	cmp    al,0x5a
c000a012:	75 f6                	jne    c000a00a <kernel_main+0x28d>
c000a014:	e4 60                	in     al,0x60
c000a016:	3c 5a                	cmp    al,0x5a
c000a018:	74 fa                	je     c000a014 <kernel_main+0x297>
c000a01a:	3c 1c                	cmp    al,0x1c
c000a01c:	74 f6                	je     c000a014 <kernel_main+0x297>
c000a01e:	e9 cb fe ff ff       	jmp    c0009eee <kernel_main+0x171>
c000a023:	83 ec 0c             	sub    esp,0xc
c000a026:	68 7a 3f 02 c0       	push   0xc0023f7a
c000a02b:	e8 e1 fc ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c000a030:	83 c4 10             	add    esp,0x10
c000a033:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c000a03a:	0f 85 8b fe ff ff    	jne    c0009ecb <kernel_main+0x14e>
c000a040:	eb 04                	jmp    c000a046 <kernel_main+0x2c9>
c000a042:	3c 1c                	cmp    al,0x1c
c000a044:	74 06                	je     c000a04c <kernel_main+0x2cf>
c000a046:	e4 60                	in     al,0x60
c000a048:	3c 5a                	cmp    al,0x5a
c000a04a:	75 f6                	jne    c000a042 <kernel_main+0x2c5>
c000a04c:	e4 60                	in     al,0x60
c000a04e:	3c 5a                	cmp    al,0x5a
c000a050:	74 fa                	je     c000a04c <kernel_main+0x2cf>
c000a052:	3c 1c                	cmp    al,0x1c
c000a054:	74 f6                	je     c000a04c <kernel_main+0x2cf>
c000a056:	e9 70 fe ff ff       	jmp    c0009ecb <kernel_main+0x14e>
c000a05b:	83 ec 0c             	sub    esp,0xc
c000a05e:	68 6f 3f 02 c0       	push   0xc0023f6f
c000a063:	e8 a9 fc ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c000a068:	83 c4 10             	add    esp,0x10
c000a06b:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c000a072:	0f 85 41 fe ff ff    	jne    c0009eb9 <kernel_main+0x13c>
c000a078:	eb 04                	jmp    c000a07e <kernel_main+0x301>
c000a07a:	3c 1c                	cmp    al,0x1c
c000a07c:	74 06                	je     c000a084 <kernel_main+0x307>
c000a07e:	e4 60                	in     al,0x60
c000a080:	3c 5a                	cmp    al,0x5a
c000a082:	75 f6                	jne    c000a07a <kernel_main+0x2fd>
c000a084:	e4 60                	in     al,0x60
c000a086:	3c 5a                	cmp    al,0x5a
c000a088:	74 fa                	je     c000a084 <kernel_main+0x307>
c000a08a:	3c 1c                	cmp    al,0x1c
c000a08c:	74 f6                	je     c000a084 <kernel_main+0x307>
c000a08e:	e9 26 fe ff ff       	jmp    c0009eb9 <kernel_main+0x13c>
c000a093:	83 ec 0c             	sub    esp,0xc
c000a096:	68 51 3f 02 c0       	push   0xc0023f51
c000a09b:	e8 71 fc ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c000a0a0:	8b 15 20 7f 02 c0    	mov    edx,DWORD PTR ds:0xc0027f20
c000a0a6:	83 c4 10             	add    esp,0x10
c000a0a9:	f6 c2 80             	test   dl,0x80
c000a0ac:	74 18                	je     c000a0c6 <kernel_main+0x349>
c000a0ae:	0f b6 05 80 71 02 c0 	movzx  eax,BYTE PTR ds:0xc0027180
c000a0b5:	84 c0                	test   al,al
c000a0b7:	0f 85 4d fd ff ff    	jne    c0009e0a <kernel_main+0x8d>
c000a0bd:	e9 ba fd ff ff       	jmp    c0009e7c <kernel_main+0xff>
c000a0c2:	3c 1c                	cmp    al,0x1c
c000a0c4:	74 06                	je     c000a0cc <kernel_main+0x34f>
c000a0c6:	e4 60                	in     al,0x60
c000a0c8:	3c 5a                	cmp    al,0x5a
c000a0ca:	75 f6                	jne    c000a0c2 <kernel_main+0x345>
c000a0cc:	e4 60                	in     al,0x60
c000a0ce:	3c 5a                	cmp    al,0x5a
c000a0d0:	74 fa                	je     c000a0cc <kernel_main+0x34f>
c000a0d2:	3c 1c                	cmp    al,0x1c
c000a0d4:	74 f6                	je     c000a0cc <kernel_main+0x34f>
c000a0d6:	eb d6                	jmp    c000a0ae <kernel_main+0x331>
c000a0d8:	83 ec 0c             	sub    esp,0xc
c000a0db:	68 42 3f 02 c0       	push   0xc0023f42
c000a0e0:	e8 2c fc ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c000a0e5:	83 c4 10             	add    esp,0x10
c000a0e8:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c000a0ef:	0f 85 f8 fc ff ff    	jne    c0009ded <kernel_main+0x70>
c000a0f5:	eb 04                	jmp    c000a0fb <kernel_main+0x37e>
c000a0f7:	3c 1c                	cmp    al,0x1c
c000a0f9:	74 06                	je     c000a101 <kernel_main+0x384>
c000a0fb:	e4 60                	in     al,0x60
c000a0fd:	3c 5a                	cmp    al,0x5a
c000a0ff:	75 f6                	jne    c000a0f7 <kernel_main+0x37a>
c000a101:	e4 60                	in     al,0x60
c000a103:	3c 5a                	cmp    al,0x5a
c000a105:	74 fa                	je     c000a101 <kernel_main+0x384>
c000a107:	3c 1c                	cmp    al,0x1c
c000a109:	74 f6                	je     c000a101 <kernel_main+0x384>
c000a10b:	e9 dd fc ff ff       	jmp    c0009ded <kernel_main+0x70>
c000a110:	83 ec 0c             	sub    esp,0xc
c000a113:	68 2f 3f 02 c0       	push   0xc0023f2f
c000a118:	e8 f4 fb ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c000a11d:	83 c4 10             	add    esp,0x10
c000a120:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c000a127:	0f 85 69 fc ff ff    	jne    c0009d96 <kernel_main+0x19>
c000a12d:	eb 04                	jmp    c000a133 <kernel_main+0x3b6>
c000a12f:	3c 1c                	cmp    al,0x1c
c000a131:	74 06                	je     c000a139 <kernel_main+0x3bc>
c000a133:	e4 60                	in     al,0x60
c000a135:	3c 5a                	cmp    al,0x5a
c000a137:	75 f6                	jne    c000a12f <kernel_main+0x3b2>
c000a139:	e4 60                	in     al,0x60
c000a13b:	3c 5a                	cmp    al,0x5a
c000a13d:	74 fa                	je     c000a139 <kernel_main+0x3bc>
c000a13f:	3c 1c                	cmp    al,0x1c
c000a141:	74 f6                	je     c000a139 <kernel_main+0x3bc>
c000a143:	e9 4e fc ff ff       	jmp    c0009d96 <kernel_main+0x19>

c000a148 <Phys::allocateDMA(unsigned long)>:
c000a148:	55                   	push   ebp
c000a149:	31 ed                	xor    ebp,ebp
c000a14b:	57                   	push   edi
c000a14c:	56                   	push   esi
c000a14d:	53                   	push   ebx
c000a14e:	31 db                	xor    ebx,ebx
c000a150:	83 ec 28             	sub    esp,0x28
c000a153:	68 d3 3f 02 c0       	push   0xc0023fd3
c000a158:	e8 68 2e 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000a15d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a161:	83 c4 10             	add    esp,0x10
c000a164:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000a16a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000a172:	c1 ef 0c             	shr    edi,0xc
c000a175:	31 c0                	xor    eax,eax
c000a177:	eb 19                	jmp    c000a192 <Phys::allocateDMA(unsigned long)+0x4a>
c000a179:	85 c0                	test   eax,eax
c000a17b:	75 06                	jne    c000a183 <Phys::allocateDMA(unsigned long)+0x3b>
c000a17d:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a181:	89 dd                	mov    ebp,ebx
c000a183:	8d 70 01             	lea    esi,[eax+0x1]
c000a186:	39 f7                	cmp    edi,esi
c000a188:	74 3f                	je     c000a1c9 <Phys::allocateDMA(unsigned long)+0x81>
c000a18a:	89 f0                	mov    eax,esi
c000a18c:	43                   	inc    ebx
c000a18d:	83 fb 0f             	cmp    ebx,0xf
c000a190:	7f 11                	jg     c000a1a3 <Phys::allocateDMA(unsigned long)+0x5b>
c000a192:	80 bb 3c 7f 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd80c4],0x0
c000a199:	74 de                	je     c000a179 <Phys::allocateDMA(unsigned long)+0x31>
c000a19b:	31 c0                	xor    eax,eax
c000a19d:	43                   	inc    ebx
c000a19e:	83 fb 0f             	cmp    ebx,0xf
c000a1a1:	7e ef                	jle    c000a192 <Phys::allocateDMA(unsigned long)+0x4a>
c000a1a3:	83 ec 0c             	sub    esp,0xc
c000a1a6:	68 03 40 02 c0       	push   0xc0024003
c000a1ab:	e8 15 2e 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000a1b0:	c7 04 24 c0 40 02 c0 	mov    DWORD PTR [esp],0xc00240c0
c000a1b7:	e8 1f 9e 00 00       	call   c0013fdb <Krnl::panic(char const*)>
c000a1bc:	83 c4 10             	add    esp,0x10
c000a1bf:	31 c0                	xor    eax,eax
c000a1c1:	83 c4 1c             	add    esp,0x1c
c000a1c4:	5b                   	pop    ebx
c000a1c5:	5e                   	pop    esi
c000a1c6:	5f                   	pop    edi
c000a1c7:	5d                   	pop    ebp
c000a1c8:	c3                   	ret    
c000a1c9:	89 e9                	mov    ecx,ebp
c000a1cb:	c1 f9 04             	sar    ecx,0x4
c000a1ce:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000a1d2:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c000a1d6:	89 ca                	mov    edx,ecx
c000a1d8:	4a                   	dec    edx
c000a1d9:	79 03                	jns    c000a1de <Phys::allocateDMA(unsigned long)+0x96>
c000a1db:	8d 51 0e             	lea    edx,[ecx+0xe]
c000a1de:	c1 fa 04             	sar    edx,0x4
c000a1e1:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c000a1e5:	74 08                	je     c000a1ef <Phys::allocateDMA(unsigned long)+0xa7>
c000a1e7:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a1eb:	31 c0                	xor    eax,eax
c000a1ed:	eb ae                	jmp    c000a19d <Phys::allocateDMA(unsigned long)+0x55>
c000a1ef:	85 f6                	test   esi,esi
c000a1f1:	74 15                	je     c000a208 <Phys::allocateDMA(unsigned long)+0xc0>
c000a1f3:	8d 95 3c 7f 02 c0    	lea    edx,[ebp-0x3ffd80c4]
c000a1f9:	8d 84 05 3d 7f 02 c0 	lea    eax,[ebp+eax*1-0x3ffd80c3]
c000a200:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000a203:	42                   	inc    edx
c000a204:	39 d0                	cmp    eax,edx
c000a206:	75 f8                	jne    c000a200 <Phys::allocateDMA(unsigned long)+0xb8>
c000a208:	83 ec 0c             	sub    esp,0xc
c000a20b:	01 3d 34 7f 02 c0    	add    DWORD PTR ds:0xc0027f34,edi
c000a211:	68 ec 3f 02 c0       	push   0xc0023fec
c000a216:	e8 aa 2d 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000a21b:	83 c4 10             	add    esp,0x10
c000a21e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a222:	85 c0                	test   eax,eax
c000a224:	74 23                	je     c000a249 <Phys::allocateDMA(unsigned long)+0x101>
c000a226:	83 ec 0c             	sub    esp,0xc
c000a229:	68 c4 6e 02 c0       	push   0xc0026ec4
c000a22e:	e8 92 2d 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000a233:	c7 04 24 c0 40 02 c0 	mov    DWORD PTR [esp],0xc00240c0
c000a23a:	e8 9c 9d 00 00       	call   c0013fdb <Krnl::panic(char const*)>
c000a23f:	83 c4 10             	add    esp,0x10
c000a242:	89 f0                	mov    eax,esi
c000a244:	e9 43 ff ff ff       	jmp    c000a18c <Phys::allocateDMA(unsigned long)+0x44>
c000a249:	c1 e5 0c             	shl    ebp,0xc
c000a24c:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c000a252:	e9 6a ff ff ff       	jmp    c000a1c1 <Phys::allocateDMA(unsigned long)+0x79>

c000a257 <Phys::freeDMA(unsigned long, unsigned long)>:
c000a257:	83 ec 18             	sub    esp,0x18
c000a25a:	68 07 40 02 c0       	push   0xc0024007
c000a25f:	e8 61 2d 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000a264:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a268:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000a26e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a272:	c1 ea 0c             	shr    edx,0xc
c000a275:	05 00 00 ff 3d       	add    eax,0x3dff0000
c000a27a:	29 15 34 7f 02 c0    	sub    DWORD PTR ds:0xc0027f34,edx
c000a280:	c1 e8 0c             	shr    eax,0xc
c000a283:	83 c4 10             	add    esp,0x10
c000a286:	85 d2                	test   edx,edx
c000a288:	74 0f                	je     c000a299 <Phys::freeDMA(unsigned long, unsigned long)+0x42>
c000a28a:	05 3c 7f 02 c0       	add    eax,0xc0027f3c
c000a28f:	01 c2                	add    edx,eax
c000a291:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000a294:	40                   	inc    eax
c000a295:	39 d0                	cmp    eax,edx
c000a297:	75 f8                	jne    c000a291 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c000a299:	83 c4 0c             	add    esp,0xc
c000a29c:	c3                   	ret    

c000a29d <Phys::setPageState(unsigned long, bool)>:
c000a29d:	56                   	push   esi
c000a29e:	ba 01 00 00 00       	mov    edx,0x1
c000a2a3:	53                   	push   ebx
c000a2a4:	8b 35 c4 72 02 c0    	mov    esi,DWORD PTR ds:0xc00272c4
c000a2aa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a2ae:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a2b2:	89 c8                	mov    eax,ecx
c000a2b4:	83 e1 07             	and    ecx,0x7
c000a2b7:	c1 e8 03             	shr    eax,0x3
c000a2ba:	d3 e3                	shl    ebx,cl
c000a2bc:	01 c6                	add    esi,eax
c000a2be:	d3 e2                	shl    edx,cl
c000a2c0:	f7 d2                	not    edx
c000a2c2:	20 16                	and    BYTE PTR [esi],dl
c000a2c4:	03 05 c4 72 02 c0    	add    eax,DWORD PTR ds:0xc00272c4
c000a2ca:	08 18                	or     BYTE PTR [eax],bl
c000a2cc:	5b                   	pop    ebx
c000a2cd:	5e                   	pop    esi
c000a2ce:	c3                   	ret    

c000a2cf <Phys::getPageState(unsigned long)>:
c000a2cf:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a2d3:	8b 15 c4 72 02 c0    	mov    edx,DWORD PTR ds:0xc00272c4
c000a2d9:	89 c8                	mov    eax,ecx
c000a2db:	83 e1 07             	and    ecx,0x7
c000a2de:	c1 e8 03             	shr    eax,0x3
c000a2e1:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000a2e5:	d3 f8                	sar    eax,cl
c000a2e7:	83 e0 01             	and    eax,0x1
c000a2ea:	c3                   	ret    

c000a2eb <Phys::freePage(unsigned long)>:
c000a2eb:	53                   	push   ebx
c000a2ec:	83 ec 10             	sub    esp,0x10
c000a2ef:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a2f3:	53                   	push   ebx
c000a2f4:	68 1d 40 02 c0       	push   0xc002401d
c000a2f9:	e8 c7 2c 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000a2fe:	8d 83 00 00 ff ff    	lea    eax,[ebx-0x10000]
c000a304:	83 c4 10             	add    esp,0x10
c000a307:	3d ff ff 00 00       	cmp    eax,0xffff
c000a30c:	76 3d                	jbe    c000a34b <Phys::freePage(unsigned long)+0x60>
c000a30e:	83 ec 0c             	sub    esp,0xc
c000a311:	c1 eb 0c             	shr    ebx,0xc
c000a314:	53                   	push   ebx
c000a315:	e8 b5 ff ff ff       	call   c000a2cf <Phys::getPageState(unsigned long)>
c000a31a:	83 c4 10             	add    esp,0x10
c000a31d:	84 c0                	test   al,al
c000a31f:	74 19                	je     c000a33a <Phys::freePage(unsigned long)+0x4f>
c000a321:	83 ec 08             	sub    esp,0x8
c000a324:	ff 0d 34 7f 02 c0    	dec    DWORD PTR ds:0xc0027f34
c000a32a:	6a 00                	push   0x0
c000a32c:	53                   	push   ebx
c000a32d:	e8 6b ff ff ff       	call   c000a29d <Phys::setPageState(unsigned long, bool)>
c000a332:	83 c4 10             	add    esp,0x10
c000a335:	83 c4 08             	add    esp,0x8
c000a338:	5b                   	pop    ebx
c000a339:	c3                   	ret    
c000a33a:	c7 44 24 10 47 40 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024047
c000a342:	83 c4 08             	add    esp,0x8
c000a345:	5b                   	pop    ebx
c000a346:	e9 90 9c 00 00       	jmp    c0013fdb <Krnl::panic(char const*)>
c000a34b:	83 ec 08             	sub    esp,0x8
c000a34e:	53                   	push   ebx
c000a34f:	68 30 40 02 c0       	push   0xc0024030
c000a354:	e8 6c 2c 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000a359:	58                   	pop    eax
c000a35a:	5a                   	pop    edx
c000a35b:	68 00 10 00 00       	push   0x1000
c000a360:	53                   	push   ebx
c000a361:	e8 f1 fe ff ff       	call   c000a257 <Phys::freeDMA(unsigned long, unsigned long)>
c000a366:	83 c4 10             	add    esp,0x10
c000a369:	83 c4 08             	add    esp,0x8
c000a36c:	5b                   	pop    ebx
c000a36d:	c3                   	ret    

c000a36e <Phys::allocatePage()>:
c000a36e:	56                   	push   esi
c000a36f:	53                   	push   ebx
c000a370:	83 ec 14             	sub    esp,0x14
c000a373:	8b 35 28 7f 02 c0    	mov    esi,DWORD PTR ds:0xc0027f28
c000a379:	89 f3                	mov    ebx,esi
c000a37b:	eb 0a                	jmp    c000a387 <Phys::allocatePage()+0x19>
c000a37d:	89 1d 28 7f 02 c0    	mov    DWORD PTR ds:0xc0027f28,ebx
c000a383:	39 de                	cmp    esi,ebx
c000a385:	74 24                	je     c000a3ab <Phys::allocatePage()+0x3d>
c000a387:	53                   	push   ebx
c000a388:	e8 42 ff ff ff       	call   c000a2cf <Phys::getPageState(unsigned long)>
c000a38d:	5a                   	pop    edx
c000a38e:	84 c0                	test   al,al
c000a390:	74 69                	je     c000a3fb <Phys::allocatePage()+0x8d>
c000a392:	43                   	inc    ebx
c000a393:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000a399:	75 e2                	jne    c000a37d <Phys::allocatePage()+0xf>
c000a39b:	31 db                	xor    ebx,ebx
c000a39d:	c7 05 28 7f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027f28,0x0
c000a3a7:	39 de                	cmp    esi,ebx
c000a3a9:	75 dc                	jne    c000a387 <Phys::allocatePage()+0x19>
c000a3ab:	83 ec 0c             	sub    esp,0xc
c000a3ae:	80 35 4c 7f 02 c0 01 	xor    BYTE PTR ds:0xc0027f4c,0x1
c000a3b5:	68 e8 40 02 c0       	push   0xc00240e8
c000a3ba:	e8 06 2c 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000a3bf:	58                   	pop    eax
c000a3c0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a3c5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a3c8:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c000a3ce:	e8 81 28 00 00       	call   c000cc54 <VAS::scanForEviction()>
c000a3d3:	83 c4 10             	add    esp,0x10
c000a3d6:	85 c0                	test   eax,eax
c000a3d8:	75 62                	jne    c000a43c <Phys::allocatePage()+0xce>
c000a3da:	83 ec 0c             	sub    esp,0xc
c000a3dd:	68 0c 41 02 c0       	push   0xc002410c
c000a3e2:	e8 f4 9b 00 00       	call   c0013fdb <Krnl::panic(char const*)>
c000a3e7:	83 c4 10             	add    esp,0x10
c000a3ea:	8b 1d 28 7f 02 c0    	mov    ebx,DWORD PTR ds:0xc0027f28
c000a3f0:	53                   	push   ebx
c000a3f1:	e8 d9 fe ff ff       	call   c000a2cf <Phys::getPageState(unsigned long)>
c000a3f6:	5a                   	pop    edx
c000a3f7:	84 c0                	test   al,al
c000a3f9:	75 97                	jne    c000a392 <Phys::allocatePage()+0x24>
c000a3fb:	6a 01                	push   0x1
c000a3fd:	53                   	push   ebx
c000a3fe:	e8 9a fe ff ff       	call   c000a29d <Phys::setPageState(unsigned long, bool)>
c000a403:	5a                   	pop    edx
c000a404:	a1 34 7f 02 c0       	mov    eax,ds:0xc0027f34
c000a409:	59                   	pop    ecx
c000a40a:	40                   	inc    eax
c000a40b:	8b 15 28 7f 02 c0    	mov    edx,DWORD PTR ds:0xc0027f28
c000a411:	a3 34 7f 02 c0       	mov    ds:0xc0027f34,eax
c000a416:	c1 e2 0c             	shl    edx,0xc
c000a419:	52                   	push   edx
c000a41a:	ff 35 38 7f 02 c0    	push   DWORD PTR ds:0xc0027f38
c000a420:	50                   	push   eax
c000a421:	68 5d 40 02 c0       	push   0xc002405d
c000a426:	e8 9a 2b 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000a42b:	a1 28 7f 02 c0       	mov    eax,ds:0xc0027f28
c000a430:	83 c4 10             	add    esp,0x10
c000a433:	c1 e0 0c             	shl    eax,0xc
c000a436:	83 c4 14             	add    esp,0x14
c000a439:	5b                   	pop    ebx
c000a43a:	5e                   	pop    esi
c000a43b:	c3                   	ret    
c000a43c:	83 ec 08             	sub    esp,0x8
c000a43f:	89 c2                	mov    edx,eax
c000a441:	6a 01                	push   0x1
c000a443:	c1 ea 0c             	shr    edx,0xc
c000a446:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a44a:	52                   	push   edx
c000a44b:	e8 4d fe ff ff       	call   c000a29d <Phys::setPageState(unsigned long, bool)>
c000a450:	83 c4 10             	add    esp,0x10
c000a453:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a457:	eb dd                	jmp    c000a436 <Phys::allocatePage()+0xc8>

c000a459 <Phys::allocateContiguousPages(int)>:
c000a459:	57                   	push   edi
c000a45a:	56                   	push   esi
c000a45b:	53                   	push   ebx
c000a45c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a460:	fa                   	cli    
c000a461:	ff 05 28 94 02 c0    	inc    DWORD PTR ds:0xc0029428
c000a467:	31 db                	xor    ebx,ebx
c000a469:	85 db                	test   ebx,ebx
c000a46b:	75 11                	jne    c000a47e <Phys::allocateContiguousPages(int)+0x25>
c000a46d:	e8 fc fe ff ff       	call   c000a36e <Phys::allocatePage()>
c000a472:	83 fe 01             	cmp    esi,0x1
c000a475:	89 c7                	mov    edi,eax
c000a477:	74 21                	je     c000a49a <Phys::allocateContiguousPages(int)+0x41>
c000a479:	bb 01 00 00 00       	mov    ebx,0x1
c000a47e:	e8 eb fe ff ff       	call   c000a36e <Phys::allocatePage()>
c000a483:	89 da                	mov    edx,ebx
c000a485:	c1 e2 0c             	shl    edx,0xc
c000a488:	01 fa                	add    edx,edi
c000a48a:	39 c2                	cmp    edx,eax
c000a48c:	74 20                	je     c000a4ae <Phys::allocateContiguousPages(int)+0x55>
c000a48e:	bb 01 00 00 00       	mov    ebx,0x1
c000a493:	89 c7                	mov    edi,eax
c000a495:	83 fe 01             	cmp    esi,0x1
c000a498:	75 e4                	jne    c000a47e <Phys::allocateContiguousPages(int)+0x25>
c000a49a:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c000a49f:	48                   	dec    eax
c000a4a0:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c000a4a5:	75 01                	jne    c000a4a8 <Phys::allocateContiguousPages(int)+0x4f>
c000a4a7:	fb                   	sti    
c000a4a8:	89 f8                	mov    eax,edi
c000a4aa:	5b                   	pop    ebx
c000a4ab:	5e                   	pop    esi
c000a4ac:	5f                   	pop    edi
c000a4ad:	c3                   	ret    
c000a4ae:	43                   	inc    ebx
c000a4af:	39 f3                	cmp    ebx,esi
c000a4b1:	75 b6                	jne    c000a469 <Phys::allocateContiguousPages(int)+0x10>
c000a4b3:	eb e5                	jmp    c000a49a <Phys::allocateContiguousPages(int)+0x41>

c000a4b5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000a4b5:	56                   	push   esi
c000a4b6:	53                   	push   ebx
c000a4b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a4bb:	39 1d 2c 7f 02 c0    	cmp    DWORD PTR ds:0xc0027f2c,ebx
c000a4c1:	73 06                	jae    c000a4c9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000a4c3:	89 1d 2c 7f 02 c0    	mov    DWORD PTR ds:0xc0027f2c,ebx
c000a4c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a4cd:	c1 eb 0c             	shr    ebx,0xc
c000a4d0:	c1 e8 0c             	shr    eax,0xc
c000a4d3:	39 d8                	cmp    eax,ebx
c000a4d5:	73 13                	jae    c000a4ea <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000a4d7:	6a 00                	push   0x0
c000a4d9:	8d 70 01             	lea    esi,[eax+0x1]
c000a4dc:	50                   	push   eax
c000a4dd:	e8 bb fd ff ff       	call   c000a29d <Phys::setPageState(unsigned long, bool)>
c000a4e2:	5a                   	pop    edx
c000a4e3:	89 f0                	mov    eax,esi
c000a4e5:	59                   	pop    ecx
c000a4e6:	39 f3                	cmp    ebx,esi
c000a4e8:	75 ed                	jne    c000a4d7 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000a4ea:	5b                   	pop    ebx
c000a4eb:	5e                   	pop    esi
c000a4ec:	c3                   	ret    

c000a4ed <Phys::physicalMemorySetup(unsigned int)>:
c000a4ed:	55                   	push   ebp
c000a4ee:	57                   	push   edi
c000a4ef:	56                   	push   esi
c000a4f0:	53                   	push   ebx
c000a4f1:	31 db                	xor    ebx,ebx
c000a4f3:	83 ec 40             	sub    esp,0x40
c000a4f6:	6a 10                	push   0x10
c000a4f8:	6a 00                	push   0x0
c000a4fa:	68 3c 7f 02 c0       	push   0xc0027f3c
c000a4ff:	e8 78 61 ff ff       	call   c000067c <memset>
c000a504:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000a508:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a50d:	05 00 10 00 00       	add    eax,0x1000
c000a512:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a516:	5a                   	pop    edx
c000a517:	59                   	pop    ecx
c000a518:	50                   	push   eax
c000a519:	68 7b 40 02 c0       	push   0xc002407b
c000a51e:	e8 a2 2a 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000a523:	83 c4 10             	add    esp,0x10
c000a526:	83 ec 08             	sub    esp,0x8
c000a529:	6a 01                	push   0x1
c000a52b:	53                   	push   ebx
c000a52c:	43                   	inc    ebx
c000a52d:	e8 6b fd ff ff       	call   c000a29d <Phys::setPageState(unsigned long, bool)>
c000a532:	83 c4 10             	add    esp,0x10
c000a535:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000a53b:	75 e9                	jne    c000a526 <Phys::physicalMemorySetup(unsigned int)+0x39>
c000a53d:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000a544:	66 85 c0             	test   ax,ax
c000a547:	0f 84 8e 01 00 00    	je     c000a6db <Phys::physicalMemorySetup(unsigned int)+0x1ee>
c000a54d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a551:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000a559:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a55d:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000a562:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a566:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000a56e:	eb 15                	jmp    c000a585 <Phys::physicalMemorySetup(unsigned int)+0x98>
c000a570:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000a574:	83 c3 18             	add    ebx,0x18
c000a577:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a57b:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000a57f:	0f 84 66 01 00 00    	je     c000a6eb <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a585:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000a588:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000a58b:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000a58e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a592:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a596:	8b 33                	mov    esi,DWORD PTR [ebx]
c000a598:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000a59b:	01 f0                	add    eax,esi
c000a59d:	55                   	push   ebp
c000a59e:	11 fa                	adc    edx,edi
c000a5a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a5a4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000a5a8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a5ac:	56                   	push   esi
c000a5ad:	68 3c 41 02 c0       	push   0xc002413c
c000a5b2:	e8 0e 2a 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000a5b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5bb:	83 c4 10             	add    esp,0x10
c000a5be:	09 f8                	or     eax,edi
c000a5c0:	0f 85 25 01 00 00    	jne    c000a6eb <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a5c6:	4d                   	dec    ebp
c000a5c7:	75 a7                	jne    c000a570 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a5c9:	ba 00 00 08 00       	mov    edx,0x80000
c000a5ce:	89 c1                	mov    ecx,eax
c000a5d0:	39 f2                	cmp    edx,esi
c000a5d2:	19 f9                	sbb    ecx,edi
c000a5d4:	0f 82 a7 00 00 00    	jb     c000a681 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a5da:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000a5de:	89 c1                	mov    ecx,eax
c000a5e0:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000a5e4:	0f 83 97 00 00 00    	jae    c000a681 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a5ea:	ba 00 00 0a 00       	mov    edx,0xa0000
c000a5ef:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a5f3:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a5f7:	39 fa                	cmp    edx,edi
c000a5f9:	19 e8                	sbb    eax,ebp
c000a5fb:	0f 82 9a 01 00 00    	jb     c000a79b <Phys::physicalMemorySetup(unsigned int)+0x2ae>
c000a601:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a605:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a609:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000a60f:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a614:	83 d5 ff             	adc    ebp,0xffffffff
c000a617:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000a61b:	31 c0                	xor    eax,eax
c000a61d:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000a621:	39 fa                	cmp    edx,edi
c000a623:	89 c1                	mov    ecx,eax
c000a625:	19 e9                	sbb    ecx,ebp
c000a627:	0f 83 43 ff ff ff    	jae    c000a570 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a62d:	be 00 00 08 00       	mov    esi,0x80000
c000a632:	51                   	push   ecx
c000a633:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000a637:	57                   	push   edi
c000a638:	56                   	push   esi
c000a639:	68 60 41 02 c0       	push   0xc0024160
c000a63e:	e8 82 29 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000a643:	5d                   	pop    ebp
c000a644:	58                   	pop    eax
c000a645:	57                   	push   edi
c000a646:	56                   	push   esi
c000a647:	e8 69 fe ff ff       	call   c000a4b5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000a64c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000a650:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a654:	83 c4 0c             	add    esp,0xc
c000a657:	0f ac d0 0c          	shrd   eax,edx,0xc
c000a65b:	03 05 38 7f 02 c0    	add    eax,DWORD PTR ds:0xc0027f38
c000a661:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000a668:	a3 38 7f 02 c0       	mov    ds:0xc0027f38,eax
c000a66d:	52                   	push   edx
c000a66e:	50                   	push   eax
c000a66f:	68 a1 40 02 c0       	push   0xc00240a1
c000a674:	e8 4c 29 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000a679:	83 c4 10             	add    esp,0x10
c000a67c:	e9 ef fe ff ff       	jmp    c000a570 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a681:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000a685:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a689:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a68d:	39 ea                	cmp    edx,ebp
c000a68f:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000a693:	0f 82 d7 fe ff ff    	jb     c000a570 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a699:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a69e:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000a6a2:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000a6a6:	0f 83 c4 fe ff ff    	jae    c000a570 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a6ac:	39 ee                	cmp    esi,ebp
c000a6ae:	89 f8                	mov    eax,edi
c000a6b0:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000a6b4:	0f 83 78 ff ff ff    	jae    c000a632 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a6ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a6be:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a6c2:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000a6c6:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000a6ca:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000a6ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a6d2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a6d6:	e9 57 ff ff ff       	jmp    c000a632 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a6db:	83 ec 0c             	sub    esp,0xc
c000a6de:	68 93 40 02 c0       	push   0xc0024093
c000a6e3:	e8 f3 98 00 00       	call   c0013fdb <Krnl::panic(char const*)>
c000a6e8:	83 c4 10             	add    esp,0x10
c000a6eb:	83 ec 08             	sub    esp,0x8
c000a6ee:	bb 60 00 00 00       	mov    ebx,0x60
c000a6f3:	6a 00                	push   0x0
c000a6f5:	6a 06                	push   0x6
c000a6f7:	e8 a1 fb ff ff       	call   c000a29d <Phys::setPageState(unsigned long, bool)>
c000a6fc:	58                   	pop    eax
c000a6fd:	5a                   	pop    edx
c000a6fe:	6a 00                	push   0x0
c000a700:	6a 07                	push   0x7
c000a702:	e8 96 fb ff ff       	call   c000a29d <Phys::setPageState(unsigned long, bool)>
c000a707:	83 05 38 7f 02 c0 02 	add    DWORD PTR ds:0xc0027f38,0x2
c000a70e:	83 c4 10             	add    esp,0x10
c000a711:	83 ec 08             	sub    esp,0x8
c000a714:	6a 00                	push   0x0
c000a716:	53                   	push   ebx
c000a717:	43                   	inc    ebx
c000a718:	e8 80 fb ff ff       	call   c000a29d <Phys::setPageState(unsigned long, bool)>
c000a71d:	83 c4 10             	add    esp,0x10
c000a720:	81 fb 80 00 00 00    	cmp    ebx,0x80
c000a726:	75 e9                	jne    c000a711 <Phys::physicalMemorySetup(unsigned int)+0x224>
c000a728:	a1 38 7f 02 c0       	mov    eax,ds:0xc0027f38
c000a72d:	bb 40 01 00 00       	mov    ebx,0x140
c000a732:	83 c0 20             	add    eax,0x20
c000a735:	a3 38 7f 02 c0       	mov    ds:0xc0027f38,eax
c000a73a:	eb 22                	jmp    c000a75e <Phys::physicalMemorySetup(unsigned int)+0x271>
c000a73c:	83 ec 08             	sub    esp,0x8
c000a73f:	6a 00                	push   0x0
c000a741:	53                   	push   ebx
c000a742:	43                   	inc    ebx
c000a743:	e8 55 fb ff ff       	call   c000a29d <Phys::setPageState(unsigned long, bool)>
c000a748:	a1 38 7f 02 c0       	mov    eax,ds:0xc0027f38
c000a74d:	83 c4 10             	add    esp,0x10
c000a750:	40                   	inc    eax
c000a751:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000a757:	a3 38 7f 02 c0       	mov    ds:0xc0027f38,eax
c000a75c:	74 07                	je     c000a765 <Phys::physicalMemorySetup(unsigned int)+0x278>
c000a75e:	3d ff 03 00 00       	cmp    eax,0x3ff
c000a763:	7e d7                	jle    c000a73c <Phys::physicalMemorySetup(unsigned int)+0x24f>
c000a765:	bb d0 01 00 00       	mov    ebx,0x1d0
c000a76a:	3d ff 07 00 00       	cmp    eax,0x7ff
c000a76f:	7f 22                	jg     c000a793 <Phys::physicalMemorySetup(unsigned int)+0x2a6>
c000a771:	83 ec 08             	sub    esp,0x8
c000a774:	6a 00                	push   0x0
c000a776:	53                   	push   ebx
c000a777:	43                   	inc    ebx
c000a778:	e8 20 fb ff ff       	call   c000a29d <Phys::setPageState(unsigned long, bool)>
c000a77d:	a1 38 7f 02 c0       	mov    eax,ds:0xc0027f38
c000a782:	83 c4 10             	add    esp,0x10
c000a785:	40                   	inc    eax
c000a786:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c000a78c:	a3 38 7f 02 c0       	mov    ds:0xc0027f38,eax
c000a791:	75 d7                	jne    c000a76a <Phys::physicalMemorySetup(unsigned int)+0x27d>
c000a793:	83 c4 3c             	add    esp,0x3c
c000a796:	5b                   	pop    ebx
c000a797:	5e                   	pop    esi
c000a798:	5f                   	pop    edi
c000a799:	5d                   	pop    ebp
c000a79a:	c3                   	ret    
c000a79b:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000a7a3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000a7ab:	e9 51 fe ff ff       	jmp    c000a601 <Phys::physicalMemorySetup(unsigned int)+0x114>

c000a7b0 <Pipe::isAtty()>:
c000a7b0:	31 c0                	xor    eax,eax
c000a7b2:	c3                   	ret    
c000a7b3:	90                   	nop

c000a7b4 <Pipe::~Pipe()>:
c000a7b4:	83 ec 0c             	sub    esp,0xc
c000a7b7:	ba cc 41 02 c0       	mov    edx,0xc00241cc
c000a7bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a7c0:	89 10                	mov    DWORD PTR [eax],edx
c000a7c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a7c6:	83 ec 0c             	sub    esp,0xc
c000a7c9:	50                   	push   eax
c000a7ca:	e8 39 12 00 00       	call   c000ba08 <UnixFile::~UnixFile()>
c000a7cf:	83 c4 10             	add    esp,0x10
c000a7d2:	90                   	nop
c000a7d3:	83 c4 0c             	add    esp,0xc
c000a7d6:	c3                   	ret    
c000a7d7:	90                   	nop

c000a7d8 <Pipe::~Pipe()>:
c000a7d8:	83 ec 0c             	sub    esp,0xc
c000a7db:	83 ec 0c             	sub    esp,0xc
c000a7de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7e2:	e8 cd ff ff ff       	call   c000a7b4 <Pipe::~Pipe()>
c000a7e7:	83 c4 10             	add    esp,0x10
c000a7ea:	83 ec 08             	sub    esp,0x8
c000a7ed:	6a 20                	push   0x20
c000a7ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7f3:	e8 ec 26 00 00       	call   c000cee4 <operator delete(void*, unsigned long)>
c000a7f8:	83 c4 10             	add    esp,0x10
c000a7fb:	83 c4 0c             	add    esp,0xc
c000a7fe:	c3                   	ret    
c000a7ff:	90                   	nop

c000a800 <Pipe::write(unsigned long long, void*, int*)>:
c000a800:	55                   	push   ebp
c000a801:	57                   	push   edi
c000a802:	56                   	push   esi
c000a803:	53                   	push   ebx
c000a804:	83 ec 1c             	sub    esp,0x1c
c000a807:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000a80b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a80f:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000a812:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a816:	89 04 24             	mov    DWORD PTR [esp],eax
c000a819:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a81d:	89 d8                	mov    eax,ebx
c000a81f:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000a822:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a826:	89 d6                	mov    esi,edx
c000a828:	89 d7                	mov    edi,edx
c000a82a:	c1 ff 1f             	sar    edi,0x1f
c000a82d:	03 34 24             	add    esi,DWORD PTR [esp]
c000a830:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000a834:	c1 f8 1f             	sar    eax,0x1f
c000a837:	39 f3                	cmp    ebx,esi
c000a839:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a83d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a841:	19 f8                	sbb    eax,edi
c000a843:	b8 01 00 00 00       	mov    eax,0x1
c000a848:	72 6e                	jb     c000a8b8 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000a84a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000a84d:	01 d0                	add    eax,edx
c000a84f:	99                   	cdq    
c000a850:	f7 fb                	idiv   ebx
c000a852:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a856:	29 d3                	sub    ebx,edx
c000a858:	89 d7                	mov    edi,edx
c000a85a:	89 de                	mov    esi,ebx
c000a85c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000a85f:	c1 fb 1f             	sar    ebx,0x1f
c000a862:	39 f2                	cmp    edx,esi
c000a864:	19 d8                	sbb    eax,ebx
c000a866:	b8 00 00 00 00       	mov    eax,0x0
c000a86b:	72 04                	jb     c000a871 <Pipe::write(unsigned long long, void*, int*)+0x71>
c000a86d:	89 d0                	mov    eax,edx
c000a86f:	29 f0                	sub    eax,esi
c000a871:	89 d3                	mov    ebx,edx
c000a873:	29 c3                	sub    ebx,eax
c000a875:	74 0b                	je     c000a882 <Pipe::write(unsigned long long, void*, int*)+0x82>
c000a877:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000a87a:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000a87e:	89 d9                	mov    ecx,ebx
c000a880:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a882:	85 c0                	test   eax,eax
c000a884:	74 0d                	je     c000a893 <Pipe::write(unsigned long long, void*, int*)+0x93>
c000a886:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000a88a:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000a88d:	89 de                	mov    esi,ebx
c000a88f:	89 c1                	mov    ecx,eax
c000a891:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a893:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000a896:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000a89b:	75 10                	jne    c000a8ad <Pipe::write(unsigned long long, void*, int*)+0xad>
c000a89d:	83 ec 0c             	sub    esp,0xc
c000a8a0:	68 89 41 02 c0       	push   0xc0024189
c000a8a5:	e8 31 97 00 00       	call   c0013fdb <Krnl::panic(char const*)>
c000a8aa:	83 c4 10             	add    esp,0x10
c000a8ad:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a8b1:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a8b4:	89 08                	mov    DWORD PTR [eax],ecx
c000a8b6:	31 c0                	xor    eax,eax
c000a8b8:	83 c4 1c             	add    esp,0x1c
c000a8bb:	5b                   	pop    ebx
c000a8bc:	5e                   	pop    esi
c000a8bd:	5f                   	pop    edi
c000a8be:	5d                   	pop    ebp
c000a8bf:	c3                   	ret    

c000a8c0 <Pipe::read(unsigned long long, void*, int*)>:
c000a8c0:	55                   	push   ebp
c000a8c1:	57                   	push   edi
c000a8c2:	56                   	push   esi
c000a8c3:	53                   	push   ebx
c000a8c4:	83 ec 1c             	sub    esp,0x1c
c000a8c7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000a8cb:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000a8cf:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a8d3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a8d6:	89 c8                	mov    eax,ecx
c000a8d8:	99                   	cdq    
c000a8d9:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000a8dd:	74 24                	je     c000a903 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a8df:	39 f9                	cmp    ecx,edi
c000a8e1:	89 d1                	mov    ecx,edx
c000a8e3:	19 f1                	sbb    ecx,esi
c000a8e5:	73 1c                	jae    c000a903 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a8e7:	fa                   	cli    
c000a8e8:	ff 05 28 94 02 c0    	inc    DWORD PTR ds:0xc0029428
c000a8ee:	e8 4d cd 00 00       	call   c0017640 <schedule()>
c000a8f3:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c000a8f8:	48                   	dec    eax
c000a8f9:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c000a8fe:	75 d3                	jne    c000a8d3 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a900:	fb                   	sti    
c000a901:	eb d0                	jmp    c000a8d3 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a903:	39 f8                	cmp    eax,edi
c000a905:	89 d1                	mov    ecx,edx
c000a907:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a90a:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000a90e:	19 f1                	sbb    ecx,esi
c000a910:	73 07                	jae    c000a919 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000a912:	89 04 24             	mov    DWORD PTR [esp],eax
c000a915:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a919:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000a91c:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000a91f:	29 f7                	sub    edi,esi
c000a921:	89 f8                	mov    eax,edi
c000a923:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000a927:	99                   	cdq    
c000a928:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000a92b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a92f:	19 d0                	sbb    eax,edx
c000a931:	73 07                	jae    c000a93a <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000a933:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000a936:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a93a:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a93d:	89 ea                	mov    edx,ebp
c000a93f:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000a943:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a948:	74 0d                	je     c000a957 <Pipe::read(unsigned long long, void*, int*)+0x97>
c000a94a:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000a94d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000a951:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a955:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a957:	85 d2                	test   edx,edx
c000a959:	74 11                	je     c000a96c <Pipe::read(unsigned long long, void*, int*)+0xac>
c000a95b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a95f:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000a962:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000a966:	89 d1                	mov    ecx,edx
c000a968:	89 c7                	mov    edi,eax
c000a96a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a96c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a96f:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000a972:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000a975:	99                   	cdq    
c000a976:	89 f7                	mov    edi,esi
c000a978:	03 04 24             	add    eax,DWORD PTR [esp]
c000a97b:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000a97f:	c1 ff 1f             	sar    edi,0x1f
c000a982:	57                   	push   edi
c000a983:	56                   	push   esi
c000a984:	52                   	push   edx
c000a985:	50                   	push   eax
c000a986:	e8 95 7e 01 00       	call   c0022820 <__umoddi3>
c000a98b:	83 c4 10             	add    esp,0x10
c000a98e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a991:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000a996:	75 10                	jne    c000a9a8 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000a998:	83 ec 0c             	sub    esp,0xc
c000a99b:	68 a6 41 02 c0       	push   0xc00241a6
c000a9a0:	e8 36 96 00 00       	call   c0013fdb <Krnl::panic(char const*)>
c000a9a5:	83 c4 10             	add    esp,0x10
c000a9a8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a9ac:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000a9af:	89 10                	mov    DWORD PTR [eax],edx
c000a9b1:	83 c4 1c             	add    esp,0x1c
c000a9b4:	31 c0                	xor    eax,eax
c000a9b6:	5b                   	pop    ebx
c000a9b7:	5e                   	pop    esi
c000a9b8:	5f                   	pop    edi
c000a9b9:	5d                   	pop    ebp
c000a9ba:	c3                   	ret    
c000a9bb:	90                   	nop

c000a9bc <Pipe::Pipe(int)>:
c000a9bc:	83 ec 0c             	sub    esp,0xc
c000a9bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a9c3:	83 ec 08             	sub    esp,0x8
c000a9c6:	6a 00                	push   0x0
c000a9c8:	50                   	push   eax
c000a9c9:	e8 58 0e 00 00       	call   c000b826 <UnixFile::UnixFile(int)>
c000a9ce:	83 c4 10             	add    esp,0x10
c000a9d1:	ba cc 41 02 c0       	mov    edx,0xc00241cc
c000a9d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a9da:	89 10                	mov    DWORD PTR [eax],edx
c000a9dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a9e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000a9e4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000a9e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a9eb:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000a9f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a9f6:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000a9fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aa01:	83 ec 0c             	sub    esp,0xc
c000aa04:	50                   	push   eax
c000aa05:	e8 ad f2 ff ff       	call   c0009cb7 <malloc>
c000aa0a:	83 c4 10             	add    esp,0x10
c000aa0d:	89 c2                	mov    edx,eax
c000aa0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa13:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000aa16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa1a:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000aa1e:	90                   	nop
c000aa1f:	83 c4 0c             	add    esp,0xc
c000aa22:	c3                   	ret    
c000aa23:	90                   	nop

c000aa24 <VgaText::isAtty()>:
c000aa24:	b0 01                	mov    al,0x1
c000aa26:	c3                   	ret    
c000aa27:	90                   	nop

c000aa28 <VgaText::~VgaText()>:
c000aa28:	83 ec 0c             	sub    esp,0xc
c000aa2b:	ba 54 42 02 c0       	mov    edx,0xc0024254
c000aa30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa34:	89 10                	mov    DWORD PTR [eax],edx
c000aa36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa3a:	83 ec 0c             	sub    esp,0xc
c000aa3d:	50                   	push   eax
c000aa3e:	e8 c5 0f 00 00       	call   c000ba08 <UnixFile::~UnixFile()>
c000aa43:	83 c4 10             	add    esp,0x10
c000aa46:	90                   	nop
c000aa47:	83 c4 0c             	add    esp,0xc
c000aa4a:	c3                   	ret    
c000aa4b:	90                   	nop

c000aa4c <VgaText::~VgaText()>:
c000aa4c:	83 ec 0c             	sub    esp,0xc
c000aa4f:	83 ec 0c             	sub    esp,0xc
c000aa52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aa56:	e8 cd ff ff ff       	call   c000aa28 <VgaText::~VgaText()>
c000aa5b:	83 c4 10             	add    esp,0x10
c000aa5e:	83 ec 08             	sub    esp,0x8
c000aa61:	68 b4 01 00 00       	push   0x1b4
c000aa66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aa6a:	e8 75 24 00 00       	call   c000cee4 <operator delete(void*, unsigned long)>
c000aa6f:	83 c4 10             	add    esp,0x10
c000aa72:	83 c4 0c             	add    esp,0xc
c000aa75:	c3                   	ret    

c000aa76 <VgaText::read(unsigned long long, void*, int*)>:
c000aa76:	83 ec 10             	sub    esp,0x10
c000aa79:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aa7d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aa81:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aa85:	e8 2d 49 00 00       	call   c000f3b7 <readKeyboard(VgaText*, char*, unsigned long)>
c000aa8a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000aa8e:	89 02                	mov    DWORD PTR [edx],eax
c000aa90:	31 c0                	xor    eax,eax
c000aa92:	83 c4 1c             	add    esp,0x1c
c000aa95:	c3                   	ret    

c000aa96 <setTerminalScrollLock(bool)>:
c000aa96:	c3                   	ret    

c000aa97 <addToTerminalCycle(VgaText*)>:
c000aa97:	8b 15 80 7f 02 c0    	mov    edx,DWORD PTR ds:0xc0027f80
c000aa9d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aaa1:	85 d2                	test   edx,edx
c000aaa3:	75 09                	jne    c000aaae <addToTerminalCycle(VgaText*)+0x17>
c000aaa5:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c000aaa8:	a3 80 7f 02 c0       	mov    ds:0xc0027f80,eax
c000aaad:	c3                   	ret    
c000aaae:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c000aab1:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c000aab4:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c000aab7:	c3                   	ret    

c000aab8 <installVgaTextImplementation()>:
c000aab8:	83 ec 10             	sub    esp,0x10
c000aabb:	6a 20                	push   0x20
c000aabd:	6a 00                	push   0x0
c000aabf:	68 60 7f 02 c0       	push   0xc0027f60
c000aac4:	e8 b3 5b ff ff       	call   c000067c <memset>
c000aac9:	83 c4 1c             	add    esp,0x1c
c000aacc:	c3                   	ret    

c000aacd <scrollTerminalScrollLock(int)>:
c000aacd:	c3                   	ret    

c000aace <VgaText::updateTitle()>:
c000aace:	53                   	push   ebx
c000aacf:	31 c0                	xor    eax,eax
c000aad1:	83 ec 58             	sub    esp,0x58
c000aad4:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000aad8:	89 e1                	mov    ecx,esp
c000aada:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c000aade:	40                   	inc    eax
c000aadf:	83 f8 50             	cmp    eax,0x50
c000aae2:	75 f6                	jne    c000aada <VgaText::updateTitle()+0xc>
c000aae4:	31 c0                	xor    eax,eax
c000aae6:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c000aaed:	84 db                	test   bl,bl
c000aaef:	74 06                	je     c000aaf7 <VgaText::updateTitle()+0x29>
c000aaf1:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c000aaf4:	40                   	inc    eax
c000aaf5:	eb ef                	jmp    c000aae6 <VgaText::updateTitle()+0x18>
c000aaf7:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c000aafa:	85 c0                	test   eax,eax
c000aafc:	74 09                	je     c000ab07 <VgaText::updateTitle()+0x39>
c000aafe:	53                   	push   ebx
c000aaff:	53                   	push   ebx
c000ab00:	51                   	push   ecx
c000ab01:	52                   	push   edx
c000ab02:	ff d0                	call   eax
c000ab04:	83 c4 10             	add    esp,0x10
c000ab07:	83 c4 58             	add    esp,0x58
c000ab0a:	5b                   	pop    ebx
c000ab0b:	c3                   	ret    

c000ab0c <VgaText::load()>:
c000ab0c:	53                   	push   ebx
c000ab0d:	31 c0                	xor    eax,eax
c000ab0f:	83 ec 58             	sub    esp,0x58
c000ab12:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ab16:	89 e2                	mov    edx,esp
c000ab18:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000ab1c:	40                   	inc    eax
c000ab1d:	83 f8 50             	cmp    eax,0x50
c000ab20:	75 f6                	jne    c000ab18 <VgaText::load()+0xc>
c000ab22:	31 c0                	xor    eax,eax
c000ab24:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c000ab2b:	84 c9                	test   cl,cl
c000ab2d:	74 06                	je     c000ab35 <VgaText::load()+0x29>
c000ab2f:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000ab32:	40                   	inc    eax
c000ab33:	eb ef                	jmp    c000ab24 <VgaText::load()+0x18>
c000ab35:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c000ab38:	85 c0                	test   eax,eax
c000ab3a:	74 09                	je     c000ab45 <VgaText::load()+0x39>
c000ab3c:	51                   	push   ecx
c000ab3d:	51                   	push   ecx
c000ab3e:	52                   	push   edx
c000ab3f:	53                   	push   ebx
c000ab40:	ff d0                	call   eax
c000ab42:	83 c4 10             	add    esp,0x10
c000ab45:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c000ab48:	85 c0                	test   eax,eax
c000ab4a:	74 09                	je     c000ab55 <VgaText::load()+0x49>
c000ab4c:	83 ec 0c             	sub    esp,0xc
c000ab4f:	53                   	push   ebx
c000ab50:	ff d0                	call   eax
c000ab52:	83 c4 10             	add    esp,0x10
c000ab55:	83 c4 58             	add    esp,0x58
c000ab58:	5b                   	pop    ebx
c000ab59:	c3                   	ret    

c000ab5a <VgaText::updateCursor()>:
c000ab5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ab5e:	39 05 84 7f 02 c0    	cmp    DWORD PTR ds:0xc0027f84,eax
c000ab64:	75 09                	jne    c000ab6f <VgaText::updateCursor()+0x15>
c000ab66:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000ab69:	85 c0                	test   eax,eax
c000ab6b:	74 02                	je     c000ab6f <VgaText::updateCursor()+0x15>
c000ab6d:	ff e0                	jmp    eax
c000ab6f:	c3                   	ret    

c000ab70 <VgaText::doANSI_SGR(int)>:
c000ab70:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ab74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ab78:	85 d2                	test   edx,edx
c000ab7a:	75 0b                	jne    c000ab87 <VgaText::doANSI_SGR(int)+0x17>
c000ab7c:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000ab7f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000ab82:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000ab85:	eb 59                	jmp    c000abe0 <VgaText::doANSI_SGR(int)+0x70>
c000ab87:	83 fa 07             	cmp    edx,0x7
c000ab8a:	75 0b                	jne    c000ab97 <VgaText::doANSI_SGR(int)+0x27>
c000ab8c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000ab8f:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000ab92:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000ab95:	eb 49                	jmp    c000abe0 <VgaText::doANSI_SGR(int)+0x70>
c000ab97:	83 fa 1b             	cmp    edx,0x1b
c000ab9a:	74 e0                	je     c000ab7c <VgaText::doANSI_SGR(int)+0xc>
c000ab9c:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000ab9f:	83 f9 07             	cmp    ecx,0x7
c000aba2:	77 09                	ja     c000abad <VgaText::doANSI_SGR(int)+0x3d>
c000aba4:	8b 14 8d 00 73 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd8d00]
c000abab:	eb 20                	jmp    c000abcd <VgaText::doANSI_SGR(int)+0x5d>
c000abad:	8d 4a d8             	lea    ecx,[edx-0x28]
c000abb0:	83 f9 07             	cmp    ecx,0x7
c000abb3:	77 09                	ja     c000abbe <VgaText::doANSI_SGR(int)+0x4e>
c000abb5:	8b 14 8d 00 73 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd8d00]
c000abbc:	eb 22                	jmp    c000abe0 <VgaText::doANSI_SGR(int)+0x70>
c000abbe:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000abc1:	83 f9 07             	cmp    ecx,0x7
c000abc4:	77 0b                	ja     c000abd1 <VgaText::doANSI_SGR(int)+0x61>
c000abc6:	8b 14 95 b8 71 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8e48]
c000abcd:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000abd0:	c3                   	ret    
c000abd1:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000abd4:	83 f9 07             	cmp    ecx,0x7
c000abd7:	77 0a                	ja     c000abe3 <VgaText::doANSI_SGR(int)+0x73>
c000abd9:	8b 14 95 90 71 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8e70]
c000abe0:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000abe3:	c3                   	ret    

c000abe4 <VgaText::setDefaultBgColour(VgaColour)>:
c000abe4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000abe8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000abec:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000abef:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000abf2:	c3                   	ret    
c000abf3:	90                   	nop

c000abf4 <VgaText::setDefaultFgColour(VgaColour)>:
c000abf4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000abf8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000abfc:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000abff:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000ac02:	c3                   	ret    
c000ac03:	90                   	nop

c000ac04 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000ac04:	53                   	push   ebx
c000ac05:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ac09:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ac0d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ac11:	51                   	push   ecx
c000ac12:	e8 cd ff ff ff       	call   c000abe4 <VgaText::setDefaultBgColour(VgaColour)>
c000ac17:	58                   	pop    eax
c000ac18:	5a                   	pop    edx
c000ac19:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000ac1d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000ac21:	5b                   	pop    ebx
c000ac22:	eb d0                	jmp    c000abf4 <VgaText::setDefaultFgColour(VgaColour)>

c000ac24 <VgaText::setTitleTextColour(VgaColour)>:
c000ac24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ac28:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ac2c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c000ac2f:	e9 9a fe ff ff       	jmp    c000aace <VgaText::updateTitle()>

c000ac34 <VgaText::setTitleColour(VgaColour)>:
c000ac34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ac38:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ac3c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000ac3f:	e9 8a fe ff ff       	jmp    c000aace <VgaText::updateTitle()>

c000ac44 <VgaText::setTitle(char*)>:
c000ac44:	53                   	push   ebx
c000ac45:	83 ec 10             	sub    esp,0x10
c000ac48:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ac4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac50:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c000ac56:	50                   	push   eax
c000ac57:	e8 dc 5a ff ff       	call   c0000738 <strcpy>
c000ac5c:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000ac60:	83 c4 18             	add    esp,0x18
c000ac63:	5b                   	pop    ebx
c000ac64:	e9 65 fe ff ff       	jmp    c000aace <VgaText::updateTitle()>
c000ac69:	90                   	nop

c000ac6a <VgaText::combineColours(unsigned char, unsigned char)>:
c000ac6a:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000ac6e:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000ac73:	83 e0 0f             	and    eax,0xf
c000ac76:	c1 e2 04             	shl    edx,0x4
c000ac79:	09 d0                	or     eax,edx
c000ac7b:	c3                   	ret    

c000ac7c <VgaText::scrollScreen()>:
c000ac7c:	55                   	push   ebp
c000ac7d:	b9 01 00 00 00       	mov    ecx,0x1
c000ac82:	57                   	push   edi
c000ac83:	56                   	push   esi
c000ac84:	53                   	push   ebx
c000ac85:	83 ec 0c             	sub    esp,0xc
c000ac88:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ac8c:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c000ac92:	31 ff                	xor    edi,edi
c000ac94:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000ac97:	83 f9 17             	cmp    ecx,0x17
c000ac9a:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c000ac9d:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c000aca4:	75 27                	jne    c000accd <VgaText::scrollScreen()+0x51>
c000aca6:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000aca9:	01 f5                	add    ebp,esi
c000acab:	f7 c7 01 00 00 00    	test   edi,0x1
c000acb1:	74 16                	je     c000acc9 <VgaText::scrollScreen()+0x4d>
c000acb3:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000acb7:	50                   	push   eax
c000acb8:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000acbc:	50                   	push   eax
c000acbd:	e8 a8 ff ff ff       	call   c000ac6a <VgaText::combineColours(unsigned char, unsigned char)>
c000acc2:	5a                   	pop    edx
c000acc3:	5a                   	pop    edx
c000acc4:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c000acc7:	eb 04                	jmp    c000accd <VgaText::scrollScreen()+0x51>
c000acc9:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c000accd:	47                   	inc    edi
c000acce:	46                   	inc    esi
c000accf:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000acd5:	75 bd                	jne    c000ac94 <VgaText::scrollScreen()+0x18>
c000acd7:	41                   	inc    ecx
c000acd8:	83 f9 18             	cmp    ecx,0x18
c000acdb:	75 af                	jne    c000ac8c <VgaText::scrollScreen()+0x10>
c000acdd:	39 1d 84 7f 02 c0    	cmp    DWORD PTR ds:0xc0027f84,ebx
c000ace3:	75 1b                	jne    c000ad00 <VgaText::scrollScreen()+0x84>
c000ace5:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000ace9:	74 05                	je     c000acf0 <VgaText::scrollScreen()+0x74>
c000aceb:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000acee:	eb 10                	jmp    c000ad00 <VgaText::scrollScreen()+0x84>
c000acf0:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c000acf3:	85 c0                	test   eax,eax
c000acf5:	74 09                	je     c000ad00 <VgaText::scrollScreen()+0x84>
c000acf7:	83 ec 0c             	sub    esp,0xc
c000acfa:	53                   	push   ebx
c000acfb:	ff d0                	call   eax
c000acfd:	83 c4 10             	add    esp,0x10
c000ad00:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000ad04:	83 c4 0c             	add    esp,0xc
c000ad07:	5b                   	pop    ebx
c000ad08:	5e                   	pop    esi
c000ad09:	5f                   	pop    edi
c000ad0a:	5d                   	pop    ebp
c000ad0b:	e9 4a fe ff ff       	jmp    c000ab5a <VgaText::updateCursor()>

c000ad10 <VgaText::combineCharAndColour(char, unsigned char)>:
c000ad10:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000ad15:	c1 e0 08             	shl    eax,0x8
c000ad18:	89 c2                	mov    edx,eax
c000ad1a:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000ad1f:	09 d0                	or     eax,edx
c000ad21:	c3                   	ret    

c000ad22 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000ad22:	56                   	push   esi
c000ad23:	53                   	push   ebx
c000ad24:	51                   	push   ecx
c000ad25:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ad29:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ad2e:	50                   	push   eax
c000ad2f:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ad34:	50                   	push   eax
c000ad35:	e8 30 ff ff ff       	call   c000ac6a <VgaText::combineColours(unsigned char, unsigned char)>
c000ad3a:	5b                   	pop    ebx
c000ad3b:	0f b6 c0             	movzx  eax,al
c000ad3e:	5e                   	pop    esi
c000ad3f:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000ad44:	50                   	push   eax
c000ad45:	53                   	push   ebx
c000ad46:	e8 c5 ff ff ff       	call   c000ad10 <VgaText::combineCharAndColour(char, unsigned char)>
c000ad4b:	5a                   	pop    edx
c000ad4c:	5e                   	pop    esi
c000ad4d:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c000ad50:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000ad56:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000ad5a:	0f b7 d2             	movzx  edx,dx
c000ad5d:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000ad61:	39 0d 84 7f 02 c0    	cmp    DWORD PTR ds:0xc0027f84,ecx
c000ad67:	75 10                	jne    c000ad79 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000ad69:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c000ad6c:	85 c0                	test   eax,eax
c000ad6e:	74 09                	je     c000ad79 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000ad70:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000ad74:	5a                   	pop    edx
c000ad75:	5b                   	pop    ebx
c000ad76:	5e                   	pop    esi
c000ad77:	ff e0                	jmp    eax
c000ad79:	58                   	pop    eax
c000ad7a:	5b                   	pop    ebx
c000ad7b:	5e                   	pop    esi
c000ad7c:	c3                   	ret    
c000ad7d:	90                   	nop

c000ad7e <VgaText::getCursorX()>:
c000ad7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ad82:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000ad85:	c3                   	ret    

c000ad86 <VgaText::getCursorY()>:
c000ad86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ad8a:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000ad8d:	c3                   	ret    

c000ad8e <VgaText::setCursor(int, int)>:
c000ad8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ad92:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ad96:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000ad99:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ad9d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000ada0:	e9 b5 fd ff ff       	jmp    c000ab5a <VgaText::updateCursor()>

c000ada5 <setActiveTerminal(VgaText*)>:
c000ada5:	53                   	push   ebx
c000ada6:	83 ec 08             	sub    esp,0x8
c000ada9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000adad:	85 db                	test   ebx,ebx
c000adaf:	75 11                	jne    c000adc2 <setActiveTerminal(VgaText*)+0x1d>
c000adb1:	c7 44 24 10 e0 41 02 c0 	mov    DWORD PTR [esp+0x10],0xc00241e0
c000adb9:	83 c4 08             	add    esp,0x8
c000adbc:	5b                   	pop    ebx
c000adbd:	e9 19 92 00 00       	jmp    c0013fdb <Krnl::panic(char const*)>
c000adc2:	a1 84 7f 02 c0       	mov    eax,ds:0xc0027f84
c000adc7:	85 c0                	test   eax,eax
c000adc9:	74 0c                	je     c000add7 <setActiveTerminal(VgaText*)+0x32>
c000adcb:	83 ec 0c             	sub    esp,0xc
c000adce:	50                   	push   eax
c000adcf:	e8 86 fd ff ff       	call   c000ab5a <VgaText::updateCursor()>
c000add4:	83 c4 10             	add    esp,0x10
c000add7:	89 1d 84 7f 02 c0    	mov    DWORD PTR ds:0xc0027f84,ebx
c000addd:	51                   	push   ecx
c000adde:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ade1:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ade4:	53                   	push   ebx
c000ade5:	e8 a4 ff ff ff       	call   c000ad8e <VgaText::setCursor(int, int)>
c000adea:	83 c4 10             	add    esp,0x10
c000aded:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000adf1:	75 07                	jne    c000adfa <setActiveTerminal(VgaText*)+0x55>
c000adf3:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c000adfa:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000adfe:	83 c4 08             	add    esp,0x8
c000ae01:	5b                   	pop    ebx
c000ae02:	e9 05 fd ff ff       	jmp    c000ab0c <VgaText::load()>

c000ae07 <doTerminalCycle()>:
c000ae07:	83 ec 18             	sub    esp,0x18
c000ae0a:	a1 80 7f 02 c0       	mov    eax,ds:0xc0027f80
c000ae0f:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000ae12:	50                   	push   eax
c000ae13:	a3 80 7f 02 c0       	mov    ds:0xc0027f80,eax
c000ae18:	e8 88 ff ff ff       	call   c000ada5 <setActiveTerminal(VgaText*)>
c000ae1d:	83 c4 1c             	add    esp,0x1c
c000ae20:	c3                   	ret    
c000ae21:	90                   	nop

c000ae22 <VgaText::setCursorX(int)>:
c000ae22:	83 ec 10             	sub    esp,0x10
c000ae25:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae29:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000ae2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae30:	50                   	push   eax
c000ae31:	e8 58 ff ff ff       	call   c000ad8e <VgaText::setCursor(int, int)>
c000ae36:	83 c4 1c             	add    esp,0x1c
c000ae39:	c3                   	ret    

c000ae3a <VgaText::setCursorY(int)>:
c000ae3a:	83 ec 10             	sub    esp,0x10
c000ae3d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae41:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ae45:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000ae48:	50                   	push   eax
c000ae49:	e8 40 ff ff ff       	call   c000ad8e <VgaText::setCursor(int, int)>
c000ae4e:	83 c4 1c             	add    esp,0x1c
c000ae51:	c3                   	ret    

c000ae52 <VgaText::incrementCursor(bool)>:
c000ae52:	56                   	push   esi
c000ae53:	53                   	push   ebx
c000ae54:	51                   	push   ecx
c000ae55:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ae59:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ae5d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000ae60:	40                   	inc    eax
c000ae61:	83 f8 50             	cmp    eax,0x50
c000ae64:	74 05                	je     c000ae6b <VgaText::incrementCursor(bool)+0x19>
c000ae66:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ae69:	eb 24                	jmp    c000ae8f <VgaText::incrementCursor(bool)+0x3d>
c000ae6b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000ae6e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ae75:	8d 50 01             	lea    edx,[eax+0x1]
c000ae78:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000ae7b:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000ae7e:	75 0f                	jne    c000ae8f <VgaText::incrementCursor(bool)+0x3d>
c000ae80:	83 ec 0c             	sub    esp,0xc
c000ae83:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000ae86:	53                   	push   ebx
c000ae87:	e8 f0 fd ff ff       	call   c000ac7c <VgaText::scrollScreen()>
c000ae8c:	83 c4 10             	add    esp,0x10
c000ae8f:	89 f0                	mov    eax,esi
c000ae91:	84 c0                	test   al,al
c000ae93:	74 0c                	je     c000aea1 <VgaText::incrementCursor(bool)+0x4f>
c000ae95:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ae99:	5a                   	pop    edx
c000ae9a:	5b                   	pop    ebx
c000ae9b:	5e                   	pop    esi
c000ae9c:	e9 b9 fc ff ff       	jmp    c000ab5a <VgaText::updateCursor()>
c000aea1:	58                   	pop    eax
c000aea2:	5b                   	pop    ebx
c000aea3:	5e                   	pop    esi
c000aea4:	c3                   	ret    
c000aea5:	90                   	nop

c000aea6 <VgaText::decrementCursor(bool)>:
c000aea6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aeaa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000aeae:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000aeb1:	85 c0                	test   eax,eax
c000aeb3:	74 04                	je     c000aeb9 <VgaText::decrementCursor(bool)+0x13>
c000aeb5:	48                   	dec    eax
c000aeb6:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000aeb9:	84 c9                	test   cl,cl
c000aebb:	74 09                	je     c000aec6 <VgaText::decrementCursor(bool)+0x20>
c000aebd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aec1:	e9 94 fc ff ff       	jmp    c000ab5a <VgaText::updateCursor()>
c000aec6:	c3                   	ret    
c000aec7:	90                   	nop

c000aec8 <VgaText::putchar(char, VgaColour, VgaColour)>:
c000aec8:	53                   	push   ebx
c000aec9:	83 ec 08             	sub    esp,0x8
c000aecc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aed0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000aed4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000aed8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000aedc:	3c 07                	cmp    al,0x7
c000aede:	75 21                	jne    c000af01 <VgaText::putchar(char, VgaColour, VgaColour)+0x39>
c000aee0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000aee8:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c000aef0:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c000aef8:	83 c4 08             	add    esp,0x8
c000aefb:	5b                   	pop    ebx
c000aefc:	e9 5e 2f 00 00       	jmp    c000de5f <Krnl::beep(int, int, bool)>
c000af01:	3c 0d                	cmp    al,0xd
c000af03:	75 09                	jne    c000af0e <VgaText::putchar(char, VgaColour, VgaColour)+0x46>
c000af05:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000af0c:	eb 2c                	jmp    c000af3a <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c000af0e:	3c 0a                	cmp    al,0xa
c000af10:	75 31                	jne    c000af43 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c000af12:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000af15:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000af1c:	8d 50 01             	lea    edx,[eax+0x1]
c000af1f:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000af22:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000af25:	75 0f                	jne    c000af36 <VgaText::putchar(char, VgaColour, VgaColour)+0x6e>
c000af27:	83 ec 0c             	sub    esp,0xc
c000af2a:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000af2d:	53                   	push   ebx
c000af2e:	e8 49 fd ff ff       	call   c000ac7c <VgaText::scrollScreen()>
c000af33:	83 c4 10             	add    esp,0x10
c000af36:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000af3a:	83 c4 08             	add    esp,0x8
c000af3d:	5b                   	pop    ebx
c000af3e:	e9 17 fc ff ff       	jmp    c000ab5a <VgaText::updateCursor()>
c000af43:	3c 08                	cmp    al,0x8
c000af45:	75 25                	jne    c000af6c <VgaText::putchar(char, VgaColour, VgaColour)+0xa4>
c000af47:	50                   	push   eax
c000af48:	50                   	push   eax
c000af49:	6a 01                	push   0x1
c000af4b:	53                   	push   ebx
c000af4c:	e8 55 ff ff ff       	call   c000aea6 <VgaText::decrementCursor(bool)>
c000af51:	5a                   	pop    edx
c000af52:	59                   	pop    ecx
c000af53:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000af56:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000af59:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000af5c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000af5f:	6a 20                	push   0x20
c000af61:	53                   	push   ebx
c000af62:	e8 bb fd ff ff       	call   c000ad22 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000af67:	83 c4 28             	add    esp,0x28
c000af6a:	5b                   	pop    ebx
c000af6b:	c3                   	ret    
c000af6c:	83 ec 08             	sub    esp,0x8
c000af6f:	0f be c0             	movsx  eax,al
c000af72:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000af75:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000af78:	51                   	push   ecx
c000af79:	52                   	push   edx
c000af7a:	50                   	push   eax
c000af7b:	53                   	push   ebx
c000af7c:	e8 a1 fd ff ff       	call   c000ad22 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000af81:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000af85:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000af8d:	83 c4 28             	add    esp,0x28
c000af90:	5b                   	pop    ebx
c000af91:	e9 bc fe ff ff       	jmp    c000ae52 <VgaText::incrementCursor(bool)>

c000af96 <VgaText::doUpdate()>:
c000af96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af9a:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c000af9d:	85 c0                	test   eax,eax
c000af9f:	74 02                	je     c000afa3 <VgaText::doUpdate()+0xd>
c000afa1:	ff e0                	jmp    eax
c000afa3:	c3                   	ret    

c000afa4 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000afa4:	55                   	push   ebp
c000afa5:	31 ed                	xor    ebp,ebp
c000afa7:	57                   	push   edi
c000afa8:	56                   	push   esi
c000afa9:	53                   	push   ebx
c000afaa:	83 ec 1c             	sub    esp,0x1c
c000afad:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000afb1:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000afb6:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000afbd:	50                   	push   eax
c000afbe:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000afc3:	50                   	push   eax
c000afc4:	e8 a1 fc ff ff       	call   c000ac6a <VgaText::combineColours(unsigned char, unsigned char)>
c000afc9:	59                   	pop    ecx
c000afca:	0f b6 c0             	movzx  eax,al
c000afcd:	5e                   	pop    esi
c000afce:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000afd3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000afd7:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000afda:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000afde:	0f b7 f6             	movzx  esi,si
c000afe1:	01 f6                	add    esi,esi
c000afe3:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000afe6:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000afe9:	84 c0                	test   al,al
c000afeb:	0f 84 fd 00 00 00    	je     c000b0ee <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c000aff1:	3c 0d                	cmp    al,0xd
c000aff3:	75 0c                	jne    c000b001 <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c000aff5:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000affc:	e9 e7 00 00 00       	jmp    c000b0e8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000b001:	3c 0a                	cmp    al,0xa
c000b003:	75 47                	jne    c000b04c <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c000b005:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000b008:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b00f:	8d 48 01             	lea    ecx,[eax+0x1]
c000b012:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000b015:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c000b018:	75 0f                	jne    c000b029 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c000b01a:	83 ec 0c             	sub    esp,0xc
c000b01d:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000b020:	53                   	push   ebx
c000b021:	e8 56 fc ff ff       	call   c000ac7c <VgaText::scrollScreen()>
c000b026:	83 c4 10             	add    esp,0x10
c000b029:	83 ec 0c             	sub    esp,0xc
c000b02c:	31 ed                	xor    ebp,ebp
c000b02e:	53                   	push   ebx
c000b02f:	e8 26 fb ff ff       	call   c000ab5a <VgaText::updateCursor()>
c000b034:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000b039:	83 c4 10             	add    esp,0x10
c000b03c:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000b03f:	0f b7 f6             	movzx  esi,si
c000b042:	01 f6                	add    esi,esi
c000b044:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000b047:	e9 9c 00 00 00       	jmp    c000b0e8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000b04c:	3c 08                	cmp    al,0x8
c000b04e:	75 35                	jne    c000b085 <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c000b050:	56                   	push   esi
c000b051:	56                   	push   esi
c000b052:	6a 01                	push   0x1
c000b054:	53                   	push   ebx
c000b055:	e8 4c fe ff ff       	call   c000aea6 <VgaText::decrementCursor(bool)>
c000b05a:	58                   	pop    eax
c000b05b:	5a                   	pop    edx
c000b05c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b05f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000b062:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000b065:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000b068:	6a 20                	push   0x20
c000b06a:	53                   	push   ebx
c000b06b:	e8 b2 fc ff ff       	call   c000ad22 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000b070:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000b075:	83 c4 20             	add    esp,0x20
c000b078:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000b07b:	0f b7 f6             	movzx  esi,si
c000b07e:	01 f6                	add    esi,esi
c000b080:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000b083:	eb 63                	jmp    c000b0e8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000b085:	51                   	push   ecx
c000b086:	51                   	push   ecx
c000b087:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b08b:	50                   	push   eax
c000b08c:	e8 7f fc ff ff       	call   c000ad10 <VgaText::combineCharAndColour(char, unsigned char)>
c000b091:	83 c4 10             	add    esp,0x10
c000b094:	66 89 06             	mov    WORD PTR [esi],ax
c000b097:	39 1d 84 7f 02 c0    	cmp    DWORD PTR ds:0xc0027f84,ebx
c000b09d:	75 21                	jne    c000b0c0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000b09f:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c000b0a2:	85 c0                	test   eax,eax
c000b0a4:	74 1a                	je     c000b0c0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000b0a6:	52                   	push   edx
c000b0a7:	52                   	push   edx
c000b0a8:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b0ab:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000b0ae:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000b0b2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000b0b6:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c000b0b9:	51                   	push   ecx
c000b0ba:	53                   	push   ebx
c000b0bb:	ff d0                	call   eax
c000b0bd:	83 c4 20             	add    esp,0x20
c000b0c0:	83 c6 02             	add    esi,0x2
c000b0c3:	50                   	push   eax
c000b0c4:	50                   	push   eax
c000b0c5:	6a 00                	push   0x0
c000b0c7:	53                   	push   ebx
c000b0c8:	e8 85 fd ff ff       	call   c000ae52 <VgaText::incrementCursor(bool)>
c000b0cd:	83 c4 10             	add    esp,0x10
c000b0d0:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c000b0d4:	75 0d                	jne    c000b0e3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c000b0d6:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000b0db:	0f b7 f6             	movzx  esi,si
c000b0de:	01 f6                	add    esi,esi
c000b0e0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000b0e3:	bd 01 00 00 00       	mov    ebp,0x1
c000b0e8:	47                   	inc    edi
c000b0e9:	e9 f8 fe ff ff       	jmp    c000afe6 <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c000b0ee:	83 ec 0c             	sub    esp,0xc
c000b0f1:	53                   	push   ebx
c000b0f2:	e8 63 fa ff ff       	call   c000ab5a <VgaText::updateCursor()>
c000b0f7:	83 c4 10             	add    esp,0x10
c000b0fa:	89 e8                	mov    eax,ebp
c000b0fc:	84 c0                	test   al,al
c000b0fe:	74 0c                	je     c000b10c <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c000b100:	83 ec 0c             	sub    esp,0xc
c000b103:	53                   	push   ebx
c000b104:	e8 8d fe ff ff       	call   c000af96 <VgaText::doUpdate()>
c000b109:	83 c4 10             	add    esp,0x10
c000b10c:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000b113:	83 c4 1c             	add    esp,0x1c
c000b116:	5b                   	pop    ebx
c000b117:	5e                   	pop    esi
c000b118:	5f                   	pop    edi
c000b119:	5d                   	pop    ebp
c000b11a:	c3                   	ret    
c000b11b:	90                   	nop

c000b11c <VgaText::clearScreen()>:
c000b11c:	57                   	push   edi
c000b11d:	56                   	push   esi
c000b11e:	31 f6                	xor    esi,esi
c000b120:	53                   	push   ebx
c000b121:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b125:	52                   	push   edx
c000b126:	6a 00                	push   0x0
c000b128:	6a 00                	push   0x0
c000b12a:	53                   	push   ebx
c000b12b:	e8 5e fc ff ff       	call   c000ad8e <VgaText::setCursor(int, int)>
c000b130:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000b137:	83 c4 10             	add    esp,0x10
c000b13a:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c000b13d:	7e 20                	jle    c000b15f <VgaText::clearScreen()+0x43>
c000b13f:	31 ff                	xor    edi,edi
c000b141:	50                   	push   eax
c000b142:	50                   	push   eax
c000b143:	56                   	push   esi
c000b144:	57                   	push   edi
c000b145:	47                   	inc    edi
c000b146:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000b149:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000b14c:	6a 20                	push   0x20
c000b14e:	53                   	push   ebx
c000b14f:	e8 ce fb ff ff       	call   c000ad22 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000b154:	83 c4 20             	add    esp,0x20
c000b157:	83 ff 50             	cmp    edi,0x50
c000b15a:	75 e5                	jne    c000b141 <VgaText::clearScreen()+0x25>
c000b15c:	46                   	inc    esi
c000b15d:	eb db                	jmp    c000b13a <VgaText::clearScreen()+0x1e>
c000b15f:	83 ec 0c             	sub    esp,0xc
c000b162:	53                   	push   ebx
c000b163:	e8 2e fe ff ff       	call   c000af96 <VgaText::doUpdate()>
c000b168:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000b16f:	83 c4 10             	add    esp,0x10
c000b172:	5b                   	pop    ebx
c000b173:	5e                   	pop    esi
c000b174:	5f                   	pop    edi
c000b175:	c3                   	ret    

c000b176 <VgaText::putchar(char)>:
c000b176:	56                   	push   esi
c000b177:	53                   	push   ebx
c000b178:	83 ec 14             	sub    esp,0x14
c000b17b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b17f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b183:	3c 5b                	cmp    al,0x5b
c000b185:	75 18                	jne    c000b19f <VgaText::putchar(char)+0x29>
c000b187:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c000b18b:	74 1f                	je     c000b1ac <VgaText::putchar(char)+0x36>
c000b18d:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000b193:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c000b19a:	e9 bd 00 00 00       	jmp    c000b25c <VgaText::putchar(char)+0xe6>
c000b19f:	3c 1b                	cmp    al,0x1b
c000b1a1:	75 09                	jne    c000b1ac <VgaText::putchar(char)+0x36>
c000b1a3:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c000b1a7:	e9 b0 00 00 00       	jmp    c000b25c <VgaText::putchar(char)+0xe6>
c000b1ac:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000b1af:	84 c9                	test   cl,cl
c000b1b1:	0f 84 92 00 00 00    	je     c000b249 <VgaText::putchar(char)+0xd3>
c000b1b7:	8d 50 c0             	lea    edx,[eax-0x40]
c000b1ba:	80 fa 3e             	cmp    dl,0x3e
c000b1bd:	77 76                	ja     c000b235 <VgaText::putchar(char)+0xbf>
c000b1bf:	3c 6d                	cmp    al,0x6d
c000b1c1:	75 47                	jne    c000b20a <VgaText::putchar(char)+0x94>
c000b1c3:	31 f6                	xor    esi,esi
c000b1c5:	31 d2                	xor    edx,edx
c000b1c7:	31 c0                	xor    eax,eax
c000b1c9:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000b1cc:	7e 2d                	jle    c000b1fb <VgaText::putchar(char)+0x85>
c000b1ce:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c000b1d3:	80 fa 3b             	cmp    dl,0x3b
c000b1d6:	75 17                	jne    c000b1ef <VgaText::putchar(char)+0x79>
c000b1d8:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000b1dc:	50                   	push   eax
c000b1dd:	53                   	push   ebx
c000b1de:	e8 8d f9 ff ff       	call   c000ab70 <VgaText::doANSI_SGR(int)>
c000b1e3:	59                   	pop    ecx
c000b1e4:	31 d2                	xor    edx,edx
c000b1e6:	58                   	pop    eax
c000b1e7:	31 c0                	xor    eax,eax
c000b1e9:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000b1ed:	eb 09                	jmp    c000b1f8 <VgaText::putchar(char)+0x82>
c000b1ef:	6b c0 0a             	imul   eax,eax,0xa
c000b1f2:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000b1f6:	88 ca                	mov    dl,cl
c000b1f8:	46                   	inc    esi
c000b1f9:	eb ce                	jmp    c000b1c9 <VgaText::putchar(char)+0x53>
c000b1fb:	84 d2                	test   dl,dl
c000b1fd:	74 2e                	je     c000b22d <VgaText::putchar(char)+0xb7>
c000b1ff:	50                   	push   eax
c000b200:	53                   	push   ebx
c000b201:	e8 6a f9 ff ff       	call   c000ab70 <VgaText::doANSI_SGR(int)>
c000b206:	58                   	pop    eax
c000b207:	5a                   	pop    edx
c000b208:	eb 23                	jmp    c000b22d <VgaText::putchar(char)+0xb7>
c000b20a:	3c 4a                	cmp    al,0x4a
c000b20c:	75 1f                	jne    c000b22d <VgaText::putchar(char)+0xb7>
c000b20e:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c000b212:	75 19                	jne    c000b22d <VgaText::putchar(char)+0xb7>
c000b214:	83 ec 0c             	sub    esp,0xc
c000b217:	53                   	push   ebx
c000b218:	e8 ff fe ff ff       	call   c000b11c <VgaText::clearScreen()>
c000b21d:	83 c4 0c             	add    esp,0xc
c000b220:	6a 00                	push   0x0
c000b222:	6a 00                	push   0x0
c000b224:	53                   	push   ebx
c000b225:	e8 64 fb ff ff       	call   c000ad8e <VgaText::setCursor(int, int)>
c000b22a:	83 c4 10             	add    esp,0x10
c000b22d:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c000b233:	eb 27                	jmp    c000b25c <VgaText::putchar(char)+0xe6>
c000b235:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c000b238:	83 fa 0e             	cmp    edx,0xe
c000b23b:	7f 1f                	jg     c000b25c <VgaText::putchar(char)+0xe6>
c000b23d:	8d 4a 01             	lea    ecx,[edx+0x1]
c000b240:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c000b243:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c000b247:	eb 13                	jmp    c000b25c <VgaText::putchar(char)+0xe6>
c000b249:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000b24c:	0f be c0             	movsx  eax,al
c000b24f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000b252:	50                   	push   eax
c000b253:	53                   	push   ebx
c000b254:	e8 6f fc ff ff       	call   c000aec8 <VgaText::putchar(char, VgaColour, VgaColour)>
c000b259:	83 c4 10             	add    esp,0x10
c000b25c:	83 c4 14             	add    esp,0x14
c000b25f:	5b                   	pop    ebx
c000b260:	5e                   	pop    esi
c000b261:	c3                   	ret    

c000b262 <VgaText::putx(unsigned int)>:
c000b262:	57                   	push   edi
c000b263:	b9 11 00 00 00       	mov    ecx,0x11
c000b268:	56                   	push   esi
c000b269:	be ee 41 02 c0       	mov    esi,0xc00241ee
c000b26e:	53                   	push   ebx
c000b26f:	83 ec 20             	sub    esp,0x20
c000b272:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b276:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000b27a:	fc                   	cld    
c000b27b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b27d:	be 08 00 00 00       	mov    esi,0x8
c000b282:	50                   	push   eax
c000b283:	50                   	push   eax
c000b284:	89 d8                	mov    eax,ebx
c000b286:	c1 e3 04             	shl    ebx,0x4
c000b289:	c1 e8 1c             	shr    eax,0x1c
c000b28c:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000b291:	50                   	push   eax
c000b292:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b296:	e8 db fe ff ff       	call   c000b176 <VgaText::putchar(char)>
c000b29b:	83 c4 10             	add    esp,0x10
c000b29e:	4e                   	dec    esi
c000b29f:	75 e1                	jne    c000b282 <VgaText::putx(unsigned int)+0x20>
c000b2a1:	83 c4 20             	add    esp,0x20
c000b2a4:	5b                   	pop    ebx
c000b2a5:	5e                   	pop    esi
c000b2a6:	5f                   	pop    edi
c000b2a7:	c3                   	ret    

c000b2a8 <VgaText::puts(char const*)>:
c000b2a8:	53                   	push   ebx
c000b2a9:	83 ec 08             	sub    esp,0x8
c000b2ac:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b2b0:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000b2b3:	84 c0                	test   al,al
c000b2b5:	74 12                	je     c000b2c9 <VgaText::puts(char const*)+0x21>
c000b2b7:	43                   	inc    ebx
c000b2b8:	51                   	push   ecx
c000b2b9:	51                   	push   ecx
c000b2ba:	50                   	push   eax
c000b2bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b2bf:	e8 b2 fe ff ff       	call   c000b176 <VgaText::putchar(char)>
c000b2c4:	83 c4 10             	add    esp,0x10
c000b2c7:	eb e7                	jmp    c000b2b0 <VgaText::puts(char const*)+0x8>
c000b2c9:	83 c4 08             	add    esp,0x8
c000b2cc:	5b                   	pop    ebx
c000b2cd:	c3                   	ret    

c000b2ce <VgaText::VgaText(char const*)>:
c000b2ce:	57                   	push   edi
c000b2cf:	56                   	push   esi
c000b2d0:	53                   	push   ebx
c000b2d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2d5:	83 ec 08             	sub    esp,0x8
c000b2d8:	6a 00                	push   0x0
c000b2da:	50                   	push   eax
c000b2db:	e8 46 05 00 00       	call   c000b826 <UnixFile::UnixFile(int)>
c000b2e0:	83 c4 10             	add    esp,0x10
c000b2e3:	ba 54 42 02 c0       	mov    edx,0xc0024254
c000b2e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2ec:	89 10                	mov    DWORD PTR [eax],edx
c000b2ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2f2:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c000b2f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2fd:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c000b304:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b308:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c000b30c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b310:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c000b314:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b318:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c000b31f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b323:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c000b32a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b32e:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c000b335:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b339:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c000b340:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b344:	8d 50 60             	lea    edx,[eax+0x60]
c000b347:	bb 60 7f 02 c0       	mov    ebx,0xc0027f60
c000b34c:	b8 08 00 00 00       	mov    eax,0x8
c000b351:	fc                   	cld    
c000b352:	89 d7                	mov    edi,edx
c000b354:	89 de                	mov    esi,ebx
c000b356:	89 c1                	mov    ecx,eax
c000b358:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000b35a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b35e:	05 82 00 00 00       	add    eax,0x82
c000b363:	83 ec 08             	sub    esp,0x8
c000b366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b36a:	50                   	push   eax
c000b36b:	e8 c8 53 ff ff       	call   c0000738 <strcpy>
c000b370:	83 c4 10             	add    esp,0x10
c000b373:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b377:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c000b37e:	83 ec 0c             	sub    esp,0xc
c000b381:	6a 01                	push   0x1
c000b383:	e8 e1 08 00 00       	call   c000bc69 <Virt::allocateKernelVirtualPages(int)>
c000b388:	83 c4 10             	add    esp,0x10
c000b38b:	89 c2                	mov    edx,eax
c000b38d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b391:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b394:	8b 1d 34 80 02 c0    	mov    ebx,DWORD PTR ds:0xc0028034
c000b39a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b39e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b3a1:	89 c6                	mov    esi,eax
c000b3a3:	e8 c6 ef ff ff       	call   c000a36e <Phys::allocatePage()>
c000b3a8:	68 05 0c 00 00       	push   0xc05
c000b3ad:	56                   	push   esi
c000b3ae:	50                   	push   eax
c000b3af:	53                   	push   ebx
c000b3b0:	e8 1f 0f 00 00       	call   c000c2d4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000b3b5:	83 c4 10             	add    esp,0x10
c000b3b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3bc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b3bf:	83 ec 04             	sub    esp,0x4
c000b3c2:	68 00 0f 00 00       	push   0xf00
c000b3c7:	6a 00                	push   0x0
c000b3c9:	50                   	push   eax
c000b3ca:	e8 ad 52 ff ff       	call   c000067c <memset>
c000b3cf:	83 c4 10             	add    esp,0x10
c000b3d2:	83 ec 04             	sub    esp,0x4
c000b3d5:	6a 00                	push   0x0
c000b3d7:	6a 07                	push   0x7
c000b3d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3dd:	e8 22 f8 ff ff       	call   c000ac04 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000b3e2:	83 c4 10             	add    esp,0x10
c000b3e5:	83 ec 04             	sub    esp,0x4
c000b3e8:	6a 00                	push   0x0
c000b3ea:	6a 00                	push   0x0
c000b3ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3f0:	e8 99 f9 ff ff       	call   c000ad8e <VgaText::setCursor(int, int)>
c000b3f5:	83 c4 10             	add    esp,0x10
c000b3f8:	83 ec 0c             	sub    esp,0xc
c000b3fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3ff:	e8 18 fd ff ff       	call   c000b11c <VgaText::clearScreen()>
c000b404:	83 c4 10             	add    esp,0x10
c000b407:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b40b:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c000b40f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b413:	05 02 01 00 00       	add    eax,0x102
c000b418:	83 ec 04             	sub    esp,0x4
c000b41b:	6a 30                	push   0x30
c000b41d:	6a 00                	push   0x0
c000b41f:	50                   	push   eax
c000b420:	e8 57 52 ff ff       	call   c000067c <memset>
c000b425:	83 c4 10             	add    esp,0x10
c000b428:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b42c:	05 32 01 00 00       	add    eax,0x132
c000b431:	83 ec 04             	sub    esp,0x4
c000b434:	68 80 00 00 00       	push   0x80
c000b439:	6a 00                	push   0x0
c000b43b:	50                   	push   eax
c000b43c:	e8 3b 52 ff ff       	call   c000067c <memset>
c000b441:	83 c4 10             	add    esp,0x10
c000b444:	90                   	nop
c000b445:	5b                   	pop    ebx
c000b446:	5e                   	pop    esi
c000b447:	5f                   	pop    edi
c000b448:	c3                   	ret    
c000b449:	90                   	nop

c000b44a <VgaText::receiveKey(unsigned char)>:
c000b44a:	55                   	push   ebp
c000b44b:	57                   	push   edi
c000b44c:	56                   	push   esi
c000b44d:	53                   	push   ebx
c000b44e:	83 ec 1c             	sub    esp,0x1c
c000b451:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b455:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b459:	84 db                	test   bl,bl
c000b45b:	0f 84 c6 00 00 00    	je     c000b527 <VgaText::receiveKey(unsigned char)+0xdd>
c000b461:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c000b467:	80 fb 08             	cmp    bl,0x8
c000b46a:	75 2c                	jne    c000b498 <VgaText::receiveKey(unsigned char)+0x4e>
c000b46c:	83 ec 0c             	sub    esp,0xc
c000b46f:	57                   	push   edi
c000b470:	e8 23 52 ff ff       	call   c0000698 <strlen>
c000b475:	83 c4 10             	add    esp,0x10
c000b478:	85 c0                	test   eax,eax
c000b47a:	74 41                	je     c000b4bd <VgaText::receiveKey(unsigned char)+0x73>
c000b47c:	50                   	push   eax
c000b47d:	50                   	push   eax
c000b47e:	6a 08                	push   0x8
c000b480:	56                   	push   esi
c000b481:	e8 f0 fc ff ff       	call   c000b176 <VgaText::putchar(char)>
c000b486:	89 3c 24             	mov    DWORD PTR [esp],edi
c000b489:	e8 0a 52 ff ff       	call   c0000698 <strlen>
c000b48e:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c000b496:	eb 22                	jmp    c000b4ba <VgaText::receiveKey(unsigned char)+0x70>
c000b498:	0f be c3             	movsx  eax,bl
c000b49b:	52                   	push   edx
c000b49c:	52                   	push   edx
c000b49d:	50                   	push   eax
c000b49e:	56                   	push   esi
c000b49f:	e8 d2 fc ff ff       	call   c000b176 <VgaText::putchar(char)>
c000b4a4:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000b4a8:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000b4ad:	59                   	pop    ecx
c000b4ae:	5d                   	pop    ebp
c000b4af:	8d 44 24 16          	lea    eax,[esp+0x16]
c000b4b3:	50                   	push   eax
c000b4b4:	57                   	push   edi
c000b4b5:	e8 be 53 ff ff       	call   c0000878 <strcat>
c000b4ba:	83 c4 10             	add    esp,0x10
c000b4bd:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c000b4c4:	75 05                	jne    c000b4cb <VgaText::receiveKey(unsigned char)+0x81>
c000b4c6:	80 fb 0a             	cmp    bl,0xa
c000b4c9:	75 50                	jne    c000b51b <VgaText::receiveKey(unsigned char)+0xd1>
c000b4cb:	83 ec 0c             	sub    esp,0xc
c000b4ce:	8d 9e 32 01 00 00    	lea    ebx,[esi+0x132]
c000b4d4:	53                   	push   ebx
c000b4d5:	e8 be 51 ff ff       	call   c0000698 <strlen>
c000b4da:	89 3c 24             	mov    DWORD PTR [esp],edi
c000b4dd:	89 c5                	mov    ebp,eax
c000b4df:	e8 b4 51 ff ff       	call   c0000698 <strlen>
c000b4e4:	83 c4 10             	add    esp,0x10
c000b4e7:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c000b4eb:	3d 80 00 00 00       	cmp    eax,0x80
c000b4f0:	76 10                	jbe    c000b502 <VgaText::receiveKey(unsigned char)+0xb8>
c000b4f2:	83 ec 0c             	sub    esp,0xc
c000b4f5:	68 ff 41 02 c0       	push   0xc00241ff
c000b4fa:	e8 dc 8a 00 00       	call   c0013fdb <Krnl::panic(char const*)>
c000b4ff:	83 c4 10             	add    esp,0x10
c000b502:	50                   	push   eax
c000b503:	50                   	push   eax
c000b504:	57                   	push   edi
c000b505:	53                   	push   ebx
c000b506:	e8 6d 53 ff ff       	call   c0000878 <strcat>
c000b50b:	83 c4 0c             	add    esp,0xc
c000b50e:	6a 30                	push   0x30
c000b510:	6a 00                	push   0x0
c000b512:	57                   	push   edi
c000b513:	e8 64 51 ff ff       	call   c000067c <memset>
c000b518:	83 c4 10             	add    esp,0x10
c000b51b:	83 ec 0c             	sub    esp,0xc
c000b51e:	56                   	push   esi
c000b51f:	e8 72 fa ff ff       	call   c000af96 <VgaText::doUpdate()>
c000b524:	83 c4 10             	add    esp,0x10
c000b527:	83 c4 1c             	add    esp,0x1c
c000b52a:	5b                   	pop    ebx
c000b52b:	5e                   	pop    esi
c000b52c:	5f                   	pop    edi
c000b52d:	5d                   	pop    ebp
c000b52e:	c3                   	ret    
c000b52f:	90                   	nop

c000b530 <VgaText::write(unsigned long long, void*, int*)>:
c000b530:	55                   	push   ebp
c000b531:	57                   	push   edi
c000b532:	56                   	push   esi
c000b533:	53                   	push   ebx
c000b534:	83 ec 0c             	sub    esp,0xc
c000b537:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000b53b:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000b53f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000b543:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c000b54a:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000b54d:	39 eb                	cmp    ebx,ebp
c000b54f:	74 13                	je     c000b564 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000b551:	43                   	inc    ebx
c000b552:	50                   	push   eax
c000b553:	50                   	push   eax
c000b554:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000b558:	50                   	push   eax
c000b559:	56                   	push   esi
c000b55a:	e8 17 fc ff ff       	call   c000b176 <VgaText::putchar(char)>
c000b55f:	83 c4 10             	add    esp,0x10
c000b562:	eb e9                	jmp    c000b54d <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000b564:	83 ec 0c             	sub    esp,0xc
c000b567:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c000b56e:	56                   	push   esi
c000b56f:	e8 22 fa ff ff       	call   c000af96 <VgaText::doUpdate()>
c000b574:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b578:	89 38                	mov    DWORD PTR [eax],edi
c000b57a:	83 c4 1c             	add    esp,0x1c
c000b57d:	31 c0                	xor    eax,eax
c000b57f:	5b                   	pop    ebx
c000b580:	5e                   	pop    esi
c000b581:	5f                   	pop    edi
c000b582:	5d                   	pop    ebp
c000b583:	c3                   	ret    

c000b584 <newTerminal(char*)>:
c000b584:	83 ec 28             	sub    esp,0x28
c000b587:	68 b4 01 00 00       	push   0x1b4
c000b58c:	e8 26 e7 ff ff       	call   c0009cb7 <malloc>
c000b591:	5a                   	pop    edx
c000b592:	59                   	pop    ecx
c000b593:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b597:	50                   	push   eax
c000b598:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b59c:	e8 2d fd ff ff       	call   c000b2ce <VgaText::VgaText(char const*)>
c000b5a1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b5a5:	83 c4 2c             	add    esp,0x2c
c000b5a8:	c3                   	ret    
c000b5a9:	66 90                	xchg   ax,ax
c000b5ab:	90                   	nop

c000b5ac <TSS::TSS()>:
c000b5ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5b0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b5b7:	90                   	nop
c000b5b8:	c3                   	ret    
c000b5b9:	90                   	nop
c000b5ba:	66 90                	xchg   ax,ax

c000b5bc <TSS::setESP(unsigned long)>:
c000b5bc:	55                   	push   ebp
c000b5bd:	89 e5                	mov    ebp,esp
c000b5bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b5c2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b5c5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b5c8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b5cb:	90                   	nop
c000b5cc:	5d                   	pop    ebp
c000b5cd:	c3                   	ret    
c000b5ce:	66 90                	xchg   ax,ax

c000b5d0 <TSS::flush()>:
c000b5d0:	55                   	push   ebp
c000b5d1:	89 e5                	mov    ebp,esp
c000b5d3:	83 ec 10             	sub    esp,0x10
c000b5d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b5d9:	8b 00                	mov    eax,DWORD PTR [eax]
c000b5db:	83 c8 03             	or     eax,0x3
c000b5de:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000b5e2:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000b5e6:	66 89 d0             	mov    ax,dx
c000b5e9:	0f 00 d8             	ltr    ax
c000b5ec:	90                   	nop
c000b5ed:	c9                   	leave  
c000b5ee:	c3                   	ret    
c000b5ef:	90                   	nop

c000b5f0 <TSS::setup(unsigned long, unsigned long)>:
c000b5f0:	55                   	push   ebp
c000b5f1:	89 e5                	mov    ebp,esp
c000b5f3:	83 ec 18             	sub    esp,0x18
c000b5f6:	83 ec 0c             	sub    esp,0xc
c000b5f9:	6a 68                	push   0x68
c000b5fb:	e8 b7 e6 ff ff       	call   c0009cb7 <malloc>
c000b600:	83 c4 10             	add    esp,0x10
c000b603:	89 c2                	mov    edx,eax
c000b605:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b608:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b60b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b60e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b611:	83 ec 04             	sub    esp,0x4
c000b614:	6a 68                	push   0x68
c000b616:	6a 00                	push   0x0
c000b618:	50                   	push   eax
c000b619:	e8 5e 50 ff ff       	call   c000067c <memset>
c000b61e:	83 c4 10             	add    esp,0x10
c000b621:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b624:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b627:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000b62d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b630:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b633:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000b639:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b63c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b63f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b642:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b645:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b648:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b64b:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000b651:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b654:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b657:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000b65d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b660:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b663:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000b669:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b66c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b66f:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000b675:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b678:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b67b:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c000b681:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b684:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b687:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000b68d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b690:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b693:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000b696:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000b699:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b69c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b69f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b6a2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000b6a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b6a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b6ab:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000b6b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b6b5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b6b8:	0f 20 da             	mov    edx,cr3
c000b6bb:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000b6be:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000b6c1:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000b6c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b6c7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b6ca:	83 ec 08             	sub    esp,0x8
c000b6cd:	50                   	push   eax
c000b6ce:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b6d1:	50                   	push   eax
c000b6d2:	e8 19 de ff ff       	call   c00094f0 <GDTEntry::setBase(unsigned int)>
c000b6d7:	83 c4 10             	add    esp,0x10
c000b6da:	83 ec 08             	sub    esp,0x8
c000b6dd:	6a 68                	push   0x68
c000b6df:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b6e2:	50                   	push   eax
c000b6e3:	e8 24 de ff ff       	call   c000950c <GDTEntry::setLimit(unsigned int)>
c000b6e8:	83 c4 10             	add    esp,0x10
c000b6eb:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000b6ef:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b6f2:	83 e0 0f             	and    eax,0xf
c000b6f5:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b6f8:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b6fb:	83 c8 40             	or     eax,0x40
c000b6fe:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b701:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c000b706:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b70c:	05 78 01 00 00       	add    eax,0x178
c000b711:	83 ec 04             	sub    esp,0x4
c000b714:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000b717:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000b71a:	50                   	push   eax
c000b71b:	e8 20 de ff ff       	call   c0009540 <GDT::addEntry(GDTEntry)>
c000b720:	83 c4 10             	add    esp,0x10
c000b723:	89 c2                	mov    edx,eax
c000b725:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b728:	89 10                	mov    DWORD PTR [eax],edx
c000b72a:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c000b72f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b735:	05 78 01 00 00       	add    eax,0x178
c000b73a:	83 ec 0c             	sub    esp,0xc
c000b73d:	50                   	push   eax
c000b73e:	e8 27 de ff ff       	call   c000956a <GDT::flush()>
c000b743:	83 c4 10             	add    esp,0x10
c000b746:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b749:	8b 00                	mov    eax,DWORD PTR [eax]
c000b74b:	c9                   	leave  
c000b74c:	c3                   	ret    
c000b74d:	90                   	nop

c000b74e <ReservedFilename::read(unsigned long long, void*, int*)>:
c000b74e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b752:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b756:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b759:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b75e:	75 08                	jne    c000b768 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c000b760:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b766:	eb 38                	jmp    c000b7a0 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c000b768:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b76d:	75 17                	jne    c000b786 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c000b76f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b774:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b777:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b77d:	8b 10                	mov    edx,DWORD PTR [eax]
c000b77f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b783:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000b786:	89 c1                	mov    ecx,eax
c000b788:	83 e1 fd             	and    ecx,0xfffffffd
c000b78b:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c000b791:	74 cd                	je     c000b760 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b793:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b798:	83 e0 ef             	and    eax,0xffffffef
c000b79b:	83 f8 08             	cmp    eax,0x8
c000b79e:	76 c0                	jbe    c000b760 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b7a0:	31 c0                	xor    eax,eax
c000b7a2:	c3                   	ret    
c000b7a3:	90                   	nop

c000b7a4 <ReservedFilename::isAtty()>:
c000b7a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7a8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b7ab:	31 c0                	xor    eax,eax
c000b7ad:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000b7b3:	74 09                	je     c000b7be <ReservedFilename::isAtty()+0x1a>
c000b7b5:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000b7bb:	0f 94 c0             	sete   al
c000b7be:	c3                   	ret    
c000b7bf:	90                   	nop

c000b7c0 <ReservedFilename::write(unsigned long long, void*, int*)>:
c000b7c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7c4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b7c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b7cb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b7cf:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b7d4:	75 08                	jne    c000b7de <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000b7d6:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b7dc:	eb 3d                	jmp    c000b81b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b7de:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b7e3:	75 17                	jne    c000b7fc <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000b7e5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b7ea:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b7ed:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b7f3:	8b 10                	mov    edx,DWORD PTR [eax]
c000b7f5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b7f9:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000b7fc:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000b801:	75 04                	jne    c000b807 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000b803:	89 0a                	mov    DWORD PTR [edx],ecx
c000b805:	eb 14                	jmp    c000b81b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b807:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000b80c:	74 c8                	je     c000b7d6 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b80e:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b813:	83 e0 ef             	and    eax,0xffffffef
c000b816:	83 f8 08             	cmp    eax,0x8
c000b819:	76 bb                	jbe    c000b7d6 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b81b:	31 c0                	xor    eax,eax
c000b81d:	c3                   	ret    

c000b81e <UnixFile::getFileDescriptor()>:
c000b81e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b822:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b825:	c3                   	ret    

c000b826 <UnixFile::UnixFile(int)>:
c000b826:	53                   	push   ebx
c000b827:	83 ec 28             	sub    esp,0x28
c000b82a:	ba 1c 43 02 c0       	mov    edx,0xc002431c
c000b82f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b833:	89 10                	mov    DWORD PTR [eax],edx
c000b835:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c000b83d:	0f 8f 8c 01 00 00    	jg     c000b9cf <UnixFile::UnixFile(int)+0x1a9>
c000b843:	a1 40 73 02 c0       	mov    eax,ds:0xc0027340
c000b848:	8d 50 01             	lea    edx,[eax+0x1]
c000b84b:	89 15 40 73 02 c0    	mov    DWORD PTR ds:0xc0027340,edx
c000b851:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b855:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000b858:	83 ec 08             	sub    esp,0x8
c000b85b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b85f:	68 18 80 02 c0       	push   0xc0028018
c000b864:	e8 9f 71 01 00       	call   c0022a08 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000b869:	83 c4 10             	add    esp,0x10
c000b86c:	a0 14 80 02 c0       	mov    al,ds:0xc0028014
c000b871:	83 f0 01             	xor    eax,0x1
c000b874:	84 c0                	test   al,al
c000b876:	0f 84 54 01 00 00    	je     c000b9d0 <UnixFile::UnixFile(int)+0x1aa>
c000b87c:	c6 05 14 80 02 c0 01 	mov    BYTE PTR ds:0xc0028014,0x1
c000b883:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000b88b:	83 ec 0c             	sub    esp,0xc
c000b88e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b892:	e8 20 e4 ff ff       	call   c0009cb7 <malloc>
c000b897:	83 c4 10             	add    esp,0x10
c000b89a:	89 c3                	mov    ebx,eax
c000b89c:	83 ec 08             	sub    esp,0x8
c000b89f:	68 03 ff ff 0f       	push   0xfffff03
c000b8a4:	53                   	push   ebx
c000b8a5:	e8 2c 01 00 00       	call   c000b9d6 <ReservedFilename::ReservedFilename(int)>
c000b8aa:	83 c4 10             	add    esp,0x10
c000b8ad:	89 1d 0c 80 02 c0    	mov    DWORD PTR ds:0xc002800c,ebx
c000b8b3:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000b8bb:	83 ec 0c             	sub    esp,0xc
c000b8be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8c2:	e8 f0 e3 ff ff       	call   c0009cb7 <malloc>
c000b8c7:	83 c4 10             	add    esp,0x10
c000b8ca:	89 c3                	mov    ebx,eax
c000b8cc:	83 ec 08             	sub    esp,0x8
c000b8cf:	68 01 ff ff 0f       	push   0xfffff01
c000b8d4:	53                   	push   ebx
c000b8d5:	e8 fc 00 00 00       	call   c000b9d6 <ReservedFilename::ReservedFilename(int)>
c000b8da:	83 c4 10             	add    esp,0x10
c000b8dd:	89 1d 10 80 02 c0    	mov    DWORD PTR ds:0xc0028010,ebx
c000b8e3:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000b8eb:	83 ec 0c             	sub    esp,0xc
c000b8ee:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b8f2:	e8 c0 e3 ff ff       	call   c0009cb7 <malloc>
c000b8f7:	83 c4 10             	add    esp,0x10
c000b8fa:	89 c3                	mov    ebx,eax
c000b8fc:	83 ec 08             	sub    esp,0x8
c000b8ff:	68 00 ff ff 0f       	push   0xfffff00
c000b904:	53                   	push   ebx
c000b905:	e8 cc 00 00 00       	call   c000b9d6 <ReservedFilename::ReservedFilename(int)>
c000b90a:	83 c4 10             	add    esp,0x10
c000b90d:	89 1d 04 80 02 c0    	mov    DWORD PTR ds:0xc0028004,ebx
c000b913:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000b91b:	83 ec 0c             	sub    esp,0xc
c000b91e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b922:	e8 90 e3 ff ff       	call   c0009cb7 <malloc>
c000b927:	83 c4 10             	add    esp,0x10
c000b92a:	89 c3                	mov    ebx,eax
c000b92c:	83 ec 08             	sub    esp,0x8
c000b92f:	68 02 ff ff 0f       	push   0xfffff02
c000b934:	53                   	push   ebx
c000b935:	e8 9c 00 00 00       	call   c000b9d6 <ReservedFilename::ReservedFilename(int)>
c000b93a:	83 c4 10             	add    esp,0x10
c000b93d:	89 1d 08 80 02 c0    	mov    DWORD PTR ds:0xc0028008,ebx
c000b943:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b94b:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c000b950:	7f 7e                	jg     c000b9d0 <UnixFile::UnixFile(int)+0x1aa>
c000b952:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c000b95a:	83 ec 0c             	sub    esp,0xc
c000b95d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b961:	e8 51 e3 ff ff       	call   c0009cb7 <malloc>
c000b966:	83 c4 10             	add    esp,0x10
c000b969:	89 c3                	mov    ebx,eax
c000b96b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b96f:	05 10 ff ff 0f       	add    eax,0xfffff10
c000b974:	83 ec 08             	sub    esp,0x8
c000b977:	50                   	push   eax
c000b978:	53                   	push   ebx
c000b979:	e8 58 00 00 00       	call   c000b9d6 <ReservedFilename::ReservedFilename(int)>
c000b97e:	83 c4 10             	add    esp,0x10
c000b981:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b985:	89 1c 85 e0 7f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8020],ebx
c000b98c:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000b994:	83 ec 0c             	sub    esp,0xc
c000b997:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b99b:	e8 17 e3 ff ff       	call   c0009cb7 <malloc>
c000b9a0:	83 c4 10             	add    esp,0x10
c000b9a3:	89 c3                	mov    ebx,eax
c000b9a5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b9a9:	05 20 ff ff 0f       	add    eax,0xfffff20
c000b9ae:	83 ec 08             	sub    esp,0x8
c000b9b1:	50                   	push   eax
c000b9b2:	53                   	push   ebx
c000b9b3:	e8 1e 00 00 00       	call   c000b9d6 <ReservedFilename::ReservedFilename(int)>
c000b9b8:	83 c4 10             	add    esp,0x10
c000b9bb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b9bf:	89 1c 85 a0 7f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8060],ebx
c000b9c6:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000b9ca:	e9 7c ff ff ff       	jmp    c000b94b <UnixFile::UnixFile(int)+0x125>
c000b9cf:	90                   	nop
c000b9d0:	83 c4 28             	add    esp,0x28
c000b9d3:	5b                   	pop    ebx
c000b9d4:	c3                   	ret    
c000b9d5:	90                   	nop

c000b9d6 <ReservedFilename::ReservedFilename(int)>:
c000b9d6:	83 ec 0c             	sub    esp,0xc
c000b9d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9dd:	83 ec 08             	sub    esp,0x8
c000b9e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9e4:	50                   	push   eax
c000b9e5:	e8 3c fe ff ff       	call   c000b826 <UnixFile::UnixFile(int)>
c000b9ea:	83 c4 10             	add    esp,0x10
c000b9ed:	ba 38 43 02 c0       	mov    edx,0xc0024338
c000b9f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9f6:	89 10                	mov    DWORD PTR [eax],edx
c000b9f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9fc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ba00:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ba03:	90                   	nop
c000ba04:	83 c4 0c             	add    esp,0xc
c000ba07:	c3                   	ret    

c000ba08 <UnixFile::~UnixFile()>:
c000ba08:	83 ec 1c             	sub    esp,0x1c
c000ba0b:	ba 1c 43 02 c0       	mov    edx,0xc002431c
c000ba10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba14:	89 10                	mov    DWORD PTR [eax],edx
c000ba16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba1a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ba1d:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000ba22:	7f 73                	jg     c000ba97 <UnixFile::~UnixFile()+0x8f>
c000ba24:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ba2c:	83 ec 0c             	sub    esp,0xc
c000ba2f:	68 18 80 02 c0       	push   0xc0028018
c000ba34:	e8 a3 70 01 00       	call   c0022adc <LinkedList<UnixFile>::getFirstElement()>
c000ba39:	83 c4 10             	add    esp,0x10
c000ba3c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ba40:	83 ec 0c             	sub    esp,0xc
c000ba43:	68 18 80 02 c0       	push   0xc0028018
c000ba48:	e8 97 70 01 00       	call   c0022ae4 <LinkedList<UnixFile>::removeFirst()>
c000ba4d:	83 c4 10             	add    esp,0x10
c000ba50:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba54:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000ba58:	74 40                	je     c000ba9a <UnixFile::~UnixFile()+0x92>
c000ba5a:	83 ec 08             	sub    esp,0x8
c000ba5d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ba61:	68 18 80 02 c0       	push   0xc0028018
c000ba66:	e8 9d 6f 01 00       	call   c0022a08 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000ba6b:	83 c4 10             	add    esp,0x10
c000ba6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ba72:	8d 50 01             	lea    edx,[eax+0x1]
c000ba75:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ba79:	3d 88 13 00 00       	cmp    eax,0x1388
c000ba7e:	0f 94 c0             	sete   al
c000ba81:	84 c0                	test   al,al
c000ba83:	74 a7                	je     c000ba2c <UnixFile::~UnixFile()+0x24>
c000ba85:	83 ec 0c             	sub    esp,0xc
c000ba88:	68 f4 42 02 c0       	push   0xc00242f4
c000ba8d:	e8 49 85 00 00       	call   c0013fdb <Krnl::panic(char const*)>
c000ba92:	83 c4 10             	add    esp,0x10
c000ba95:	eb 95                	jmp    c000ba2c <UnixFile::~UnixFile()+0x24>
c000ba97:	90                   	nop
c000ba98:	eb 01                	jmp    c000ba9b <UnixFile::~UnixFile()+0x93>
c000ba9a:	90                   	nop
c000ba9b:	90                   	nop
c000ba9c:	83 c4 1c             	add    esp,0x1c
c000ba9f:	c3                   	ret    

c000baa0 <UnixFile::~UnixFile()>:
c000baa0:	83 ec 0c             	sub    esp,0xc
c000baa3:	83 ec 0c             	sub    esp,0xc
c000baa6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baaa:	e8 59 ff ff ff       	call   c000ba08 <UnixFile::~UnixFile()>
c000baaf:	83 c4 10             	add    esp,0x10
c000bab2:	83 ec 08             	sub    esp,0x8
c000bab5:	6a 0c                	push   0xc
c000bab7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000babb:	e8 24 14 00 00       	call   c000cee4 <operator delete(void*, unsigned long)>
c000bac0:	83 c4 10             	add    esp,0x10
c000bac3:	83 c4 0c             	add    esp,0xc
c000bac6:	c3                   	ret    
c000bac7:	90                   	nop

c000bac8 <ReservedFilename::~ReservedFilename()>:
c000bac8:	83 ec 0c             	sub    esp,0xc
c000bacb:	ba 38 43 02 c0       	mov    edx,0xc0024338
c000bad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bad4:	89 10                	mov    DWORD PTR [eax],edx
c000bad6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bada:	83 ec 0c             	sub    esp,0xc
c000badd:	50                   	push   eax
c000bade:	e8 25 ff ff ff       	call   c000ba08 <UnixFile::~UnixFile()>
c000bae3:	83 c4 10             	add    esp,0x10
c000bae6:	90                   	nop
c000bae7:	83 c4 0c             	add    esp,0xc
c000baea:	c3                   	ret    
c000baeb:	90                   	nop

c000baec <ReservedFilename::~ReservedFilename()>:
c000baec:	83 ec 0c             	sub    esp,0xc
c000baef:	83 ec 0c             	sub    esp,0xc
c000baf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baf6:	e8 cd ff ff ff       	call   c000bac8 <ReservedFilename::~ReservedFilename()>
c000bafb:	83 c4 10             	add    esp,0x10
c000bafe:	83 ec 08             	sub    esp,0x8
c000bb01:	6a 0c                	push   0xc
c000bb03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb07:	e8 d8 13 00 00       	call   c000cee4 <operator delete(void*, unsigned long)>
c000bb0c:	83 c4 10             	add    esp,0x10
c000bb0f:	83 c4 0c             	add    esp,0xc
c000bb12:	c3                   	ret    

c000bb13 <getFromFileDescriptor(int)>:
c000bb13:	53                   	push   ebx
c000bb14:	83 ec 08             	sub    esp,0x8
c000bb17:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bb1b:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000bb21:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000bb27:	7f 2c                	jg     c000bb55 <getFromFileDescriptor(int)+0x42>
c000bb29:	83 ec 0c             	sub    esp,0xc
c000bb2c:	68 18 80 02 c0       	push   0xc0028018
c000bb31:	e8 a6 6f 01 00       	call   c0022adc <LinkedList<UnixFile>::getFirstElement()>
c000bb36:	83 c4 10             	add    esp,0x10
c000bb39:	85 c0                	test   eax,eax
c000bb3b:	75 04                	jne    c000bb41 <getFromFileDescriptor(int)+0x2e>
c000bb3d:	31 c0                	xor    eax,eax
c000bb3f:	eb 6e                	jmp    c000bbaf <getFromFileDescriptor(int)+0x9c>
c000bb41:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000bb44:	74 69                	je     c000bbaf <getFromFileDescriptor(int)+0x9c>
c000bb46:	52                   	push   edx
c000bb47:	52                   	push   edx
c000bb48:	50                   	push   eax
c000bb49:	68 18 80 02 c0       	push   0xc0028018
c000bb4e:	e8 33 70 01 00       	call   c0022b86 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000bb53:	eb e1                	jmp    c000bb36 <getFromFileDescriptor(int)+0x23>
c000bb55:	a1 0c 80 02 c0       	mov    eax,ds:0xc002800c
c000bb5a:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000bb60:	74 4d                	je     c000bbaf <getFromFileDescriptor(int)+0x9c>
c000bb62:	a1 10 80 02 c0       	mov    eax,ds:0xc0028010
c000bb67:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000bb6d:	74 40                	je     c000bbaf <getFromFileDescriptor(int)+0x9c>
c000bb6f:	a1 08 80 02 c0       	mov    eax,ds:0xc0028008
c000bb74:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000bb7a:	74 33                	je     c000bbaf <getFromFileDescriptor(int)+0x9c>
c000bb7c:	a1 04 80 02 c0       	mov    eax,ds:0xc0028004
c000bb81:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000bb87:	74 26                	je     c000bbaf <getFromFileDescriptor(int)+0x9c>
c000bb89:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000bb8f:	83 f8 08             	cmp    eax,0x8
c000bb92:	77 09                	ja     c000bb9d <getFromFileDescriptor(int)+0x8a>
c000bb94:	8b 04 85 e0 7f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8020]
c000bb9b:	eb 12                	jmp    c000bbaf <getFromFileDescriptor(int)+0x9c>
c000bb9d:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000bba3:	83 fb 08             	cmp    ebx,0x8
c000bba6:	77 95                	ja     c000bb3d <getFromFileDescriptor(int)+0x2a>
c000bba8:	8b 04 9d a0 7f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd8060]
c000bbaf:	83 c4 08             	add    esp,0x8
c000bbb2:	5b                   	pop    ebx
c000bbb3:	c3                   	ret    

c000bbb4 <__static_initialization_and_destruction_0(int, int)>:
c000bbb4:	83 ec 0c             	sub    esp,0xc
c000bbb7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000bbbc:	75 34                	jne    c000bbf2 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000bbbe:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000bbc6:	75 2a                	jne    c000bbf2 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000bbc8:	83 ec 0c             	sub    esp,0xc
c000bbcb:	68 18 80 02 c0       	push   0xc0028018
c000bbd0:	e8 f1 6d 01 00       	call   c00229c6 <LinkedList<UnixFile>::LinkedList()>
c000bbd5:	83 c4 10             	add    esp,0x10
c000bbd8:	83 ec 04             	sub    esp,0x4
c000bbdb:	68 68 71 02 c0       	push   0xc0027168
c000bbe0:	68 18 80 02 c0       	push   0xc0028018
c000bbe5:	68 c4 29 02 c0       	push   0xc00229c4
c000bbea:	e8 6f 12 00 00       	call   c000ce5e <__cxa_atexit>
c000bbef:	83 c4 10             	add    esp,0x10
c000bbf2:	90                   	nop
c000bbf3:	83 c4 0c             	add    esp,0xc
c000bbf6:	c3                   	ret    

c000bbf7 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000bbf7:	83 ec 0c             	sub    esp,0xc
c000bbfa:	83 ec 08             	sub    esp,0x8
c000bbfd:	68 ff ff 00 00       	push   0xffff
c000bc02:	6a 01                	push   0x1
c000bc04:	e8 ab ff ff ff       	call   c000bbb4 <__static_initialization_and_destruction_0(int, int)>
c000bc09:	83 c4 10             	add    esp,0x10
c000bc0c:	83 c4 0c             	add    esp,0xc
c000bc0f:	c3                   	ret    

c000bc10 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000bc10:	53                   	push   ebx
c000bc11:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bc15:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bc19:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000bc1f:	89 c8                	mov    eax,ecx
c000bc21:	d1 e8                	shr    eax,1
c000bc23:	03 05 48 73 02 c0    	add    eax,DWORD PTR ds:0xc0027348
c000bc29:	83 e1 01             	and    ecx,0x1
c000bc2c:	8a 10                	mov    dl,BYTE PTR [eax]
c000bc2e:	75 09                	jne    c000bc39 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000bc30:	83 e2 f0             	and    edx,0xfffffff0
c000bc33:	09 da                	or     edx,ebx
c000bc35:	88 10                	mov    BYTE PTR [eax],dl
c000bc37:	5b                   	pop    ebx
c000bc38:	c3                   	ret    
c000bc39:	c1 e3 04             	shl    ebx,0x4
c000bc3c:	83 e2 0f             	and    edx,0xf
c000bc3f:	09 da                	or     edx,ebx
c000bc41:	88 10                	mov    BYTE PTR [eax],dl
c000bc43:	5b                   	pop    ebx
c000bc44:	c3                   	ret    

c000bc45 <Virt::getPageState(unsigned long)>:
c000bc45:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc49:	8b 0d 48 73 02 c0    	mov    ecx,DWORD PTR ds:0xc0027348
c000bc4f:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000bc55:	89 d0                	mov    eax,edx
c000bc57:	d1 e8                	shr    eax,1
c000bc59:	83 e2 01             	and    edx,0x1
c000bc5c:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000bc5f:	75 04                	jne    c000bc65 <Virt::getPageState(unsigned long)+0x20>
c000bc61:	83 e0 0f             	and    eax,0xf
c000bc64:	c3                   	ret    
c000bc65:	c0 e8 04             	shr    al,0x4
c000bc68:	c3                   	ret    

c000bc69 <Virt::allocateKernelVirtualPages(int)>:
c000bc69:	55                   	push   ebp
c000bc6a:	31 ed                	xor    ebp,ebp
c000bc6c:	57                   	push   edi
c000bc6d:	56                   	push   esi
c000bc6e:	53                   	push   ebx
c000bc6f:	31 db                	xor    ebx,ebx
c000bc71:	83 ec 1c             	sub    esp,0x1c
c000bc74:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000bc78:	8b 3d 44 73 02 c0    	mov    edi,DWORD PTR ds:0xc0027344
c000bc7e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000bc83:	57                   	push   edi
c000bc84:	e8 bc ff ff ff       	call   c000bc45 <Virt::getPageState(unsigned long)>
c000bc89:	5a                   	pop    edx
c000bc8a:	84 c0                	test   al,al
c000bc8c:	75 3a                	jne    c000bcc8 <Virt::allocateKernelVirtualPages(int)+0x5f>
c000bc8e:	85 db                	test   ebx,ebx
c000bc90:	75 02                	jne    c000bc94 <Virt::allocateKernelVirtualPages(int)+0x2b>
c000bc92:	89 fd                	mov    ebp,edi
c000bc94:	43                   	inc    ebx
c000bc95:	39 f3                	cmp    ebx,esi
c000bc97:	74 5a                	je     c000bcf3 <Virt::allocateKernelVirtualPages(int)+0x8a>
c000bc99:	47                   	inc    edi
c000bc9a:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000bca0:	76 31                	jbe    c000bcd3 <Virt::allocateKernelVirtualPages(int)+0x6a>
c000bca2:	c7 05 44 73 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0027344,0xc8000
c000bcac:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000bcb1:	75 28                	jne    c000bcdb <Virt::allocateKernelVirtualPages(int)+0x72>
c000bcb3:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000bcb8:	bf 00 80 0c 00       	mov    edi,0xc8000
c000bcbd:	57                   	push   edi
c000bcbe:	e8 82 ff ff ff       	call   c000bc45 <Virt::getPageState(unsigned long)>
c000bcc3:	5a                   	pop    edx
c000bcc4:	84 c0                	test   al,al
c000bcc6:	74 c6                	je     c000bc8e <Virt::allocateKernelVirtualPages(int)+0x25>
c000bcc8:	31 db                	xor    ebx,ebx
c000bcca:	47                   	inc    edi
c000bccb:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000bcd1:	77 cf                	ja     c000bca2 <Virt::allocateKernelVirtualPages(int)+0x39>
c000bcd3:	89 3d 44 73 02 c0    	mov    DWORD PTR ds:0xc0027344,edi
c000bcd9:	eb a8                	jmp    c000bc83 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000bcdb:	83 ec 0c             	sub    esp,0xc
c000bcde:	68 4c 43 02 c0       	push   0xc002434c
c000bce3:	e8 f3 82 00 00       	call   c0013fdb <Krnl::panic(char const*)>
c000bce8:	8b 3d 44 73 02 c0    	mov    edi,DWORD PTR ds:0xc0027344
c000bcee:	83 c4 10             	add    esp,0x10
c000bcf1:	eb 90                	jmp    c000bc83 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000bcf3:	89 2d 44 73 02 c0    	mov    DWORD PTR ds:0xc0027344,ebp
c000bcf9:	4b                   	dec    ebx
c000bcfa:	74 5f                	je     c000bd5b <Virt::allocateKernelVirtualPages(int)+0xf2>
c000bcfc:	85 f6                	test   esi,esi
c000bcfe:	74 3d                	je     c000bd3d <Virt::allocateKernelVirtualPages(int)+0xd4>
c000bd00:	89 e8                	mov    eax,ebp
c000bd02:	31 db                	xor    ebx,ebx
c000bd04:	8d 7e ff             	lea    edi,[esi-0x1]
c000bd07:	eb 14                	jmp    c000bd1d <Virt::allocateKernelVirtualPages(int)+0xb4>
c000bd09:	6a 01                	push   0x1
c000bd0b:	43                   	inc    ebx
c000bd0c:	50                   	push   eax
c000bd0d:	e8 fe fe ff ff       	call   c000bc10 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bd12:	58                   	pop    eax
c000bd13:	39 f3                	cmp    ebx,esi
c000bd15:	5a                   	pop    edx
c000bd16:	74 25                	je     c000bd3d <Virt::allocateKernelVirtualPages(int)+0xd4>
c000bd18:	a1 44 73 02 c0       	mov    eax,ds:0xc0027344
c000bd1d:	8d 50 01             	lea    edx,[eax+0x1]
c000bd20:	85 db                	test   ebx,ebx
c000bd22:	89 15 44 73 02 c0    	mov    DWORD PTR ds:0xc0027344,edx
c000bd28:	74 20                	je     c000bd4a <Virt::allocateKernelVirtualPages(int)+0xe1>
c000bd2a:	39 df                	cmp    edi,ebx
c000bd2c:	75 db                	jne    c000bd09 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000bd2e:	6a 03                	push   0x3
c000bd30:	43                   	inc    ebx
c000bd31:	50                   	push   eax
c000bd32:	e8 d9 fe ff ff       	call   c000bc10 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bd37:	59                   	pop    ecx
c000bd38:	39 f3                	cmp    ebx,esi
c000bd3a:	58                   	pop    eax
c000bd3b:	75 db                	jne    c000bd18 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000bd3d:	83 c4 1c             	add    esp,0x1c
c000bd40:	89 e8                	mov    eax,ebp
c000bd42:	5b                   	pop    ebx
c000bd43:	c1 e0 0c             	shl    eax,0xc
c000bd46:	5e                   	pop    esi
c000bd47:	5f                   	pop    edi
c000bd48:	5d                   	pop    ebp
c000bd49:	c3                   	ret    
c000bd4a:	6a 02                	push   0x2
c000bd4c:	bb 01 00 00 00       	mov    ebx,0x1
c000bd51:	50                   	push   eax
c000bd52:	e8 b9 fe ff ff       	call   c000bc10 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bd57:	58                   	pop    eax
c000bd58:	5a                   	pop    edx
c000bd59:	eb bd                	jmp    c000bd18 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000bd5b:	6a 04                	push   0x4
c000bd5d:	8d 45 01             	lea    eax,[ebp+0x1]
c000bd60:	55                   	push   ebp
c000bd61:	a3 44 73 02 c0       	mov    ds:0xc0027344,eax
c000bd66:	e8 a5 fe ff ff       	call   c000bc10 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bd6b:	59                   	pop    ecx
c000bd6c:	89 e8                	mov    eax,ebp
c000bd6e:	5b                   	pop    ebx
c000bd6f:	c1 e0 0c             	shl    eax,0xc
c000bd72:	83 c4 1c             	add    esp,0x1c
c000bd75:	5b                   	pop    ebx
c000bd76:	5e                   	pop    esi
c000bd77:	5f                   	pop    edi
c000bd78:	5d                   	pop    ebp
c000bd79:	c3                   	ret    

c000bd7a <Virt::freeSwapfilePage(unsigned long)>:
c000bd7a:	53                   	push   ebx
c000bd7b:	8b 15 30 80 02 c0    	mov    edx,DWORD PTR ds:0xc0028030
c000bd81:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bd85:	b8 01 00 00 00       	mov    eax,0x1
c000bd8a:	89 cb                	mov    ebx,ecx
c000bd8c:	d3 e0                	shl    eax,cl
c000bd8e:	c1 eb 05             	shr    ebx,0x5
c000bd91:	f7 d0                	not    eax
c000bd93:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c000bd96:	5b                   	pop    ebx
c000bd97:	c3                   	ret    

c000bd98 <Virt::swapIDToSector(unsigned long)>:
c000bd98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bd9c:	0f af 05 4c 73 02 c0 	imul   eax,DWORD PTR ds:0xc002734c
c000bda3:	03 05 54 73 02 c0    	add    eax,DWORD PTR ds:0xc0027354
c000bda9:	c3                   	ret    

c000bdaa <Virt::allocateSwapfilePage()>:
c000bdaa:	55                   	push   ebp
c000bdab:	31 d2                	xor    edx,edx
c000bdad:	57                   	push   edi
c000bdae:	56                   	push   esi
c000bdaf:	53                   	push   ebx
c000bdb0:	83 ec 0c             	sub    esp,0xc
c000bdb3:	8b 0d 4c 73 02 c0    	mov    ecx,DWORD PTR ds:0xc002734c
c000bdb9:	a1 50 73 02 c0       	mov    eax,ds:0xc0027350
c000bdbe:	f7 f1                	div    ecx
c000bdc0:	39 0d 50 73 02 c0    	cmp    DWORD PTR ds:0xc0027350,ecx
c000bdc6:	72 2d                	jb     c000bdf5 <Virt::allocateSwapfilePage()+0x4b>
c000bdc8:	8b 35 30 80 02 c0    	mov    esi,DWORD PTR ds:0xc0028030
c000bdce:	8b 16                	mov    edx,DWORD PTR [esi]
c000bdd0:	f6 c2 01             	test   dl,0x1
c000bdd3:	74 3c                	je     c000be11 <Virt::allocateSwapfilePage()+0x67>
c000bdd5:	31 c9                	xor    ecx,ecx
c000bdd7:	bf 01 00 00 00       	mov    edi,0x1
c000bddc:	eb 12                	jmp    c000bdf0 <Virt::allocateSwapfilePage()+0x46>
c000bdde:	89 fd                	mov    ebp,edi
c000bde0:	89 ca                	mov    edx,ecx
c000bde2:	d3 e5                	shl    ebp,cl
c000bde4:	c1 ea 05             	shr    edx,0x5
c000bde7:	8d 1c 96             	lea    ebx,[esi+edx*4]
c000bdea:	8b 13                	mov    edx,DWORD PTR [ebx]
c000bdec:	85 ea                	test   edx,ebp
c000bdee:	74 2a                	je     c000be1a <Virt::allocateSwapfilePage()+0x70>
c000bdf0:	41                   	inc    ecx
c000bdf1:	39 c8                	cmp    eax,ecx
c000bdf3:	77 e9                	ja     c000bdde <Virt::allocateSwapfilePage()+0x34>
c000bdf5:	83 ec 0c             	sub    esp,0xc
c000bdf8:	68 04 45 02 c0       	push   0xc0024504
c000bdfd:	e8 d9 81 00 00       	call   c0013fdb <Krnl::panic(char const*)>
c000be02:	83 c4 10             	add    esp,0x10
c000be05:	31 c9                	xor    ecx,ecx
c000be07:	83 c4 0c             	add    esp,0xc
c000be0a:	89 c8                	mov    eax,ecx
c000be0c:	5b                   	pop    ebx
c000be0d:	5e                   	pop    esi
c000be0e:	5f                   	pop    edi
c000be0f:	5d                   	pop    ebp
c000be10:	c3                   	ret    
c000be11:	89 f3                	mov    ebx,esi
c000be13:	bd 01 00 00 00       	mov    ebp,0x1
c000be18:	31 c9                	xor    ecx,ecx
c000be1a:	09 ea                	or     edx,ebp
c000be1c:	89 c8                	mov    eax,ecx
c000be1e:	89 13                	mov    DWORD PTR [ebx],edx
c000be20:	83 c4 0c             	add    esp,0xc
c000be23:	5b                   	pop    ebx
c000be24:	5e                   	pop    esi
c000be25:	5f                   	pop    edi
c000be26:	5d                   	pop    ebp
c000be27:	c3                   	ret    

c000be28 <Virt::virtualMemorySetup()>:
c000be28:	53                   	push   ebx
c000be29:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000be2e:	6a 0f                	push   0xf
c000be30:	53                   	push   ebx
c000be31:	43                   	inc    ebx
c000be32:	e8 d9 fd ff ff       	call   c000bc10 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000be37:	58                   	pop    eax
c000be38:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000be3e:	5a                   	pop    edx
c000be3f:	75 ed                	jne    c000be2e <Virt::virtualMemorySetup()+0x6>
c000be41:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000be46:	6a 00                	push   0x0
c000be48:	53                   	push   ebx
c000be49:	43                   	inc    ebx
c000be4a:	e8 c1 fd ff ff       	call   c000bc10 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000be4f:	59                   	pop    ecx
c000be50:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000be56:	58                   	pop    eax
c000be57:	75 ed                	jne    c000be46 <Virt::virtualMemorySetup()+0x1e>
c000be59:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000be5e:	6a 0f                	push   0xf
c000be60:	53                   	push   ebx
c000be61:	43                   	inc    ebx
c000be62:	e8 a9 fd ff ff       	call   c000bc10 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000be67:	58                   	pop    eax
c000be68:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000be6e:	5a                   	pop    edx
c000be6f:	75 ed                	jne    c000be5e <Virt::virtualMemorySetup()+0x36>
c000be71:	5b                   	pop    ebx
c000be72:	c3                   	ret    

c000be73 <Virt::setupPageSwapping(int)>:
c000be73:	53                   	push   ebx
c000be74:	83 ec 0c             	sub    esp,0xc
c000be77:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000be7b:	a1 c8 84 02 c0       	mov    eax,ds:0xc00284c8
c000be80:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000be86:	8b 10                	mov    edx,DWORD PTR [eax]
c000be88:	53                   	push   ebx
c000be89:	c1 e3 0b             	shl    ebx,0xb
c000be8c:	68 1b 45 02 c0       	push   0xc002451b
c000be91:	50                   	push   eax
c000be92:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c000be95:	89 1d 50 73 02 c0    	mov    DWORD PTR ds:0xc0027350,ebx
c000be9b:	c6 05 58 73 02 c0 43 	mov    BYTE PTR ds:0xc0027358,0x43
c000bea2:	c1 eb 08             	shr    ebx,0x8
c000bea5:	a3 54 73 02 c0       	mov    ds:0xc0027354,eax
c000beaa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000bead:	c7 05 4c 73 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002734c,0x8
c000beb7:	e8 fb dd ff ff       	call   c0009cb7 <malloc>
c000bebc:	83 c4 0c             	add    esp,0xc
c000bebf:	89 c1                	mov    ecx,eax
c000bec1:	a3 30 80 02 c0       	mov    ds:0xc0028030,eax
c000bec6:	31 d2                	xor    edx,edx
c000bec8:	a1 50 73 02 c0       	mov    eax,ds:0xc0027350
c000becd:	f7 35 4c 73 02 c0    	div    DWORD PTR ds:0xc002734c
c000bed3:	c1 e8 05             	shr    eax,0x5
c000bed6:	50                   	push   eax
c000bed7:	6a 00                	push   0x0
c000bed9:	51                   	push   ecx
c000beda:	e8 9d 47 ff ff       	call   c000067c <memset>
c000bedf:	83 c4 18             	add    esp,0x18
c000bee2:	5b                   	pop    ebx
c000bee3:	c3                   	ret    

c000bee4 <VAS::VAS(VAS*)>:
c000bee4:	83 ec 0c             	sub    esp,0xc
c000bee7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000beeb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bef2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bef6:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000befd:	83 ec 0c             	sub    esp,0xc
c000bf00:	68 6c 43 02 c0       	push   0xc002436c
c000bf05:	e8 d1 80 00 00       	call   c0013fdb <Krnl::panic(char const*)>
c000bf0a:	83 c4 10             	add    esp,0x10
c000bf0d:	90                   	nop
c000bf0e:	83 c4 0c             	add    esp,0xc
c000bf11:	c3                   	ret    

c000bf12 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000bf12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bf16:	89 c2                	mov    edx,eax
c000bf18:	c1 e8 0a             	shr    eax,0xa
c000bf1b:	c1 ea 16             	shr    edx,0x16
c000bf1e:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000bf23:	19 c9                	sbb    ecx,ecx
c000bf25:	c1 e2 0c             	shl    edx,0xc
c000bf28:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000bf2e:	25 fc 0f 00 00       	and    eax,0xffc
c000bf33:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000bf3a:	01 d0                	add    eax,edx
c000bf3c:	c3                   	ret    
c000bf3d:	90                   	nop

c000bf3e <VAS::getPageTableEntry(unsigned long)>:
c000bf3e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bf42:	89 ca                	mov    edx,ecx
c000bf44:	c1 e9 0a             	shr    ecx,0xa
c000bf47:	c1 ea 16             	shr    edx,0x16
c000bf4a:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000bf50:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000bf56:	c1 e0 0c             	shl    eax,0xc
c000bf59:	8d 04 08             	lea    eax,[eax+ecx*1]
c000bf5c:	c3                   	ret    

c000bf5d <Virt::freeKernelVirtualPages(unsigned long)>:
c000bf5d:	57                   	push   edi
c000bf5e:	56                   	push   esi
c000bf5f:	be 01 00 00 00       	mov    esi,0x1
c000bf64:	53                   	push   ebx
c000bf65:	83 ec 10             	sub    esp,0x10
c000bf68:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000bf6c:	c1 eb 0c             	shr    ebx,0xc
c000bf6f:	eb 3f                	jmp    c000bfb0 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c000bf71:	83 ec 08             	sub    esp,0x8
c000bf74:	57                   	push   edi
c000bf75:	ff 35 34 80 02 c0    	push   DWORD PTR ds:0xc0028034
c000bf7b:	e8 be ff ff ff       	call   c000bf3e <VAS::getPageTableEntry(unsigned long)>
c000bf80:	83 c4 10             	add    esp,0x10
c000bf83:	8b 00                	mov    eax,DWORD PTR [eax]
c000bf85:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000bf89:	f6 c4 04             	test   ah,0x4
c000bf8c:	75 5f                	jne    c000bfed <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c000bf8e:	80 fa 04             	cmp    dl,0x4
c000bf91:	74 78                	je     c000c00b <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c000bf93:	80 fa 02             	cmp    dl,0x2
c000bf96:	0f 84 88 00 00 00    	je     c000c024 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c000bf9c:	80 fa 03             	cmp    dl,0x3
c000bf9f:	0f 84 ad 00 00 00    	je     c000c052 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c000bfa5:	fe ca                	dec    dl
c000bfa7:	0f 84 92 00 00 00    	je     c000c03f <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000bfad:	43                   	inc    ebx
c000bfae:	31 f6                	xor    esi,esi
c000bfb0:	53                   	push   ebx
c000bfb1:	89 df                	mov    edi,ebx
c000bfb3:	e8 8d fc ff ff       	call   c000bc45 <Virt::getPageState(unsigned long)>
c000bfb8:	c1 e7 0c             	shl    edi,0xc
c000bfbb:	59                   	pop    ecx
c000bfbc:	84 c0                	test   al,al
c000bfbe:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000bfc2:	75 ad                	jne    c000bf71 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000bfc4:	83 ec 0c             	sub    esp,0xc
c000bfc7:	68 32 45 02 c0       	push   0xc0024532
c000bfcc:	e8 0a 80 00 00       	call   c0013fdb <Krnl::panic(char const*)>
c000bfd1:	58                   	pop    eax
c000bfd2:	5a                   	pop    edx
c000bfd3:	57                   	push   edi
c000bfd4:	ff 35 34 80 02 c0    	push   DWORD PTR ds:0xc0028034
c000bfda:	e8 5f ff ff ff       	call   c000bf3e <VAS::getPageTableEntry(unsigned long)>
c000bfdf:	83 c4 10             	add    esp,0x10
c000bfe2:	8b 00                	mov    eax,DWORD PTR [eax]
c000bfe4:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000bfe8:	f6 c4 04             	test   ah,0x4
c000bfeb:	74 c0                	je     c000bfad <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000bfed:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000bff1:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bff6:	83 ec 0c             	sub    esp,0xc
c000bff9:	50                   	push   eax
c000bffa:	e8 ec e2 ff ff       	call   c000a2eb <Phys::freePage(unsigned long)>
c000bfff:	83 c4 10             	add    esp,0x10
c000c002:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000c006:	80 fa 04             	cmp    dl,0x4
c000c009:	75 88                	jne    c000bf93 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c000c00b:	89 f0                	mov    eax,esi
c000c00d:	84 c0                	test   al,al
c000c00f:	75 47                	jne    c000c058 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c000c011:	c7 44 24 20 90 43 02 c0 	mov    DWORD PTR [esp+0x20],0xc0024390
c000c019:	83 c4 10             	add    esp,0x10
c000c01c:	5b                   	pop    ebx
c000c01d:	5e                   	pop    esi
c000c01e:	5f                   	pop    edi
c000c01f:	e9 b7 7f 00 00       	jmp    c0013fdb <Krnl::panic(char const*)>
c000c024:	89 f0                	mov    eax,esi
c000c026:	84 c0                	test   al,al
c000c028:	75 15                	jne    c000c03f <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000c02a:	83 ec 0c             	sub    esp,0xc
c000c02d:	68 4e 45 02 c0       	push   0xc002454e
c000c032:	e8 a4 7f 00 00       	call   c0013fdb <Krnl::panic(char const*)>
c000c037:	83 c4 10             	add    esp,0x10
c000c03a:	e9 6e ff ff ff       	jmp    c000bfad <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000c03f:	83 ec 08             	sub    esp,0x8
c000c042:	6a 00                	push   0x0
c000c044:	53                   	push   ebx
c000c045:	e8 c6 fb ff ff       	call   c000bc10 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000c04a:	83 c4 10             	add    esp,0x10
c000c04d:	e9 5b ff ff ff       	jmp    c000bfad <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000c052:	89 f0                	mov    eax,esi
c000c054:	84 c0                	test   al,al
c000c056:	75 15                	jne    c000c06d <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c000c058:	83 ec 08             	sub    esp,0x8
c000c05b:	6a 00                	push   0x0
c000c05d:	53                   	push   ebx
c000c05e:	e8 ad fb ff ff       	call   c000bc10 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000c063:	83 c4 10             	add    esp,0x10
c000c066:	83 c4 10             	add    esp,0x10
c000c069:	5b                   	pop    ebx
c000c06a:	5e                   	pop    esi
c000c06b:	5f                   	pop    edi
c000c06c:	c3                   	ret    
c000c06d:	c7 44 24 20 6a 45 02 c0 	mov    DWORD PTR [esp+0x20],0xc002456a
c000c075:	83 c4 10             	add    esp,0x10
c000c078:	5b                   	pop    ebx
c000c079:	5e                   	pop    esi
c000c07a:	5f                   	pop    edi
c000c07b:	e9 5b 7f 00 00       	jmp    c0013fdb <Krnl::panic(char const*)>

c000c080 <VAS::freeAllocatedPages(unsigned long)>:
c000c080:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c084:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c088:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000c08c:	74 09                	je     c000c097 <VAS::freeAllocatedPages(unsigned long)+0x17>
c000c08e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c092:	e9 c6 fe ff ff       	jmp    c000bf5d <Virt::freeKernelVirtualPages(unsigned long)>
c000c097:	c7 44 24 04 b4 43 02 c0 	mov    DWORD PTR [esp+0x4],0xc00243b4
c000c09f:	e9 21 0f 00 00       	jmp    c000cfc5 <Dbg::kprintf(char const*, ...)>

c000c0a4 <VAS::virtualToPhysical(unsigned long)>:
c000c0a4:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000c0a8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000c0ac:	e8 8d fe ff ff       	call   c000bf3e <VAS::getPageTableEntry(unsigned long)>
c000c0b1:	5a                   	pop    edx
c000c0b2:	8b 00                	mov    eax,DWORD PTR [eax]
c000c0b4:	59                   	pop    ecx
c000c0b5:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c0ba:	c3                   	ret    
c000c0bb:	90                   	nop

c000c0bc <VAS::reflagRange(unsigned long, int, int, int)>:
c000c0bc:	55                   	push   ebp
c000c0bd:	57                   	push   edi
c000c0be:	56                   	push   esi
c000c0bf:	53                   	push   ebx
c000c0c0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c0c4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000c0c8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000c0cc:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000c0d0:	85 db                	test   ebx,ebx
c000c0d2:	7e 22                	jle    c000c0f6 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c000c0d4:	c1 e3 0c             	shl    ebx,0xc
c000c0d7:	01 f3                	add    ebx,esi
c000c0d9:	56                   	push   esi
c000c0da:	81 c6 00 10 00 00    	add    esi,0x1000
c000c0e0:	55                   	push   ebp
c000c0e1:	e8 58 fe ff ff       	call   c000bf3e <VAS::getPageTableEntry(unsigned long)>
c000c0e6:	5a                   	pop    edx
c000c0e7:	59                   	pop    ecx
c000c0e8:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c0ea:	21 f9                	and    ecx,edi
c000c0ec:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c000c0f0:	39 f3                	cmp    ebx,esi
c000c0f2:	89 08                	mov    DWORD PTR [eax],ecx
c000c0f4:	75 e3                	jne    c000c0d9 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c000c0f6:	5b                   	pop    ebx
c000c0f7:	5e                   	pop    esi
c000c0f8:	5f                   	pop    edi
c000c0f9:	5d                   	pop    ebp
c000c0fa:	c3                   	ret    
c000c0fb:	90                   	nop

c000c0fc <VAS::setToWriteCombining(unsigned long, int)>:
c000c0fc:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c000c101:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c107:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c000c10e:	75 01                	jne    c000c111 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000c110:	c3                   	ret    
c000c111:	68 80 00 00 00       	push   0x80
c000c116:	6a ff                	push   0xffffffff
c000c118:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c11c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c120:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c124:	e8 93 ff ff ff       	call   c000c0bc <VAS::reflagRange(unsigned long, int, int, int)>
c000c129:	83 c4 14             	add    esp,0x14
c000c12c:	c3                   	ret    
c000c12d:	90                   	nop

c000c12e <VAS::mapOtherVASIn(bool, VAS*)>:
c000c12e:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000c133:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c137:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000c13a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c13e:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000c141:	19 c0                	sbb    eax,eax
c000c143:	83 ca 03             	or     edx,0x3
c000c146:	83 e0 fc             	and    eax,0xfffffffc
c000c149:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000c150:	0f 20 d8             	mov    eax,cr3
c000c153:	0f 22 d8             	mov    cr3,eax
c000c156:	c3                   	ret    
c000c157:	90                   	nop

c000c158 <VAS::~VAS()>:
c000c158:	83 ec 2c             	sub    esp,0x2c
c000c15b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000c163:	fa                   	cli    
c000c164:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c000c169:	40                   	inc    eax
c000c16a:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c000c16f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000c174:	8b 00                	mov    eax,DWORD PTR [eax]
c000c176:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c179:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000c17f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c183:	6a 01                	push   0x1
c000c185:	50                   	push   eax
c000c186:	e8 a3 ff ff ff       	call   c000c12e <VAS::mapOtherVASIn(bool, VAS*)>
c000c18b:	83 c4 0c             	add    esp,0xc
c000c18e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c196:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000c19e:	0f 8f d4 00 00 00    	jg     c000c278 <VAS::~VAS()+0x120>
c000c1a4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c1a8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c1ab:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c1af:	c1 e2 02             	shl    edx,0x2
c000c1b2:	01 d0                	add    eax,edx
c000c1b4:	8b 00                	mov    eax,DWORD PTR [eax]
c000c1b6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c1ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1be:	83 e0 01             	and    eax,0x1
c000c1c1:	0f 84 a8 00 00 00    	je     c000c26f <VAS::~VAS()+0x117>
c000c1c7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000c1cf:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000c1d7:	7f 72                	jg     c000c24b <VAS::~VAS()+0xf3>
c000c1d9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c1dd:	c1 e0 0a             	shl    eax,0xa
c000c1e0:	89 c2                	mov    edx,eax
c000c1e2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c1e6:	01 d0                	add    eax,edx
c000c1e8:	c1 e0 0c             	shl    eax,0xc
c000c1eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c1ef:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000c1f4:	8b 00                	mov    eax,DWORD PTR [eax]
c000c1f6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c1f9:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000c1ff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c203:	6a 01                	push   0x1
c000c205:	50                   	push   eax
c000c206:	e8 07 fd ff ff       	call   c000bf12 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000c20b:	83 c4 0c             	add    esp,0xc
c000c20e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c212:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c216:	8b 00                	mov    eax,DWORD PTR [eax]
c000c218:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c21c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c220:	25 01 04 00 00       	and    eax,0x401
c000c225:	3d 01 04 00 00       	cmp    eax,0x401
c000c22a:	75 19                	jne    c000c245 <VAS::~VAS()+0xed>
c000c22c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c230:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c235:	83 ec 0c             	sub    esp,0xc
c000c238:	50                   	push   eax
c000c239:	e8 ad e0 ff ff       	call   c000a2eb <Phys::freePage(unsigned long)>
c000c23e:	83 c4 10             	add    esp,0x10
c000c241:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c245:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000c249:	eb 84                	jmp    c000c1cf <VAS::~VAS()+0x77>
c000c24b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c24f:	25 00 04 00 00       	and    eax,0x400
c000c254:	74 19                	je     c000c26f <VAS::~VAS()+0x117>
c000c256:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c25a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c25f:	83 ec 0c             	sub    esp,0xc
c000c262:	50                   	push   eax
c000c263:	e8 83 e0 ff ff       	call   c000a2eb <Phys::freePage(unsigned long)>
c000c268:	83 c4 10             	add    esp,0x10
c000c26b:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c26f:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000c273:	e9 1e ff ff ff       	jmp    c000c196 <VAS::~VAS()+0x3e>
c000c278:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c27c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c27f:	83 ec 0c             	sub    esp,0xc
c000c282:	50                   	push   eax
c000c283:	e8 d5 fc ff ff       	call   c000bf5d <Virt::freeKernelVirtualPages(unsigned long)>
c000c288:	83 c4 10             	add    esp,0x10
c000c28b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c28f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000c292:	83 ec 0c             	sub    esp,0xc
c000c295:	50                   	push   eax
c000c296:	e8 50 e0 ff ff       	call   c000a2eb <Phys::freePage(unsigned long)>
c000c29b:	83 c4 10             	add    esp,0x10
c000c29e:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c2a2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c2a6:	c1 e0 02             	shl    eax,0x2
c000c2a9:	83 ec 08             	sub    esp,0x8
c000c2ac:	50                   	push   eax
c000c2ad:	68 d8 43 02 c0       	push   0xc00243d8
c000c2b2:	e8 0e 0d 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000c2b7:	83 c4 10             	add    esp,0x10
c000c2ba:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c000c2bf:	48                   	dec    eax
c000c2c0:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c000c2c5:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c000c2ca:	85 c0                	test   eax,eax
c000c2cc:	75 01                	jne    c000c2cf <VAS::~VAS()+0x177>
c000c2ce:	fb                   	sti    
c000c2cf:	90                   	nop
c000c2d0:	83 c4 2c             	add    esp,0x2c
c000c2d3:	c3                   	ret    

c000c2d4 <VAS::mapPage(unsigned long, unsigned long, int)>:
c000c2d4:	55                   	push   ebp
c000c2d5:	57                   	push   edi
c000c2d6:	56                   	push   esi
c000c2d7:	53                   	push   ebx
c000c2d8:	83 ec 1c             	sub    esp,0x1c
c000c2db:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000c2df:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c2e3:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000c2e9:	77 0b                	ja     c000c2f6 <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c000c2eb:	0f 20 d8             	mov    eax,cr3
c000c2ee:	0f 20 d8             	mov    eax,cr3
c000c2f1:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c000c2f4:	75 47                	jne    c000c33d <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c000c2f6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c2fa:	09 d8                	or     eax,ebx
c000c2fc:	a9 ff 0f 00 00       	test   eax,0xfff
c000c301:	75 57                	jne    c000c35a <VAS::mapPage(unsigned long, unsigned long, int)+0x86>
c000c303:	89 de                	mov    esi,ebx
c000c305:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c308:	c1 ee 16             	shr    esi,0x16
c000c30b:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000c312:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000c316:	74 54                	je     c000c36c <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c000c318:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c31c:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000c322:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000c326:	c1 e6 0c             	shl    esi,0xc
c000c329:	c1 eb 0a             	shr    ebx,0xa
c000c32c:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000c332:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000c335:	83 c4 1c             	add    esp,0x1c
c000c338:	5b                   	pop    ebx
c000c339:	5e                   	pop    esi
c000c33a:	5f                   	pop    edi
c000c33b:	5d                   	pop    ebp
c000c33c:	c3                   	ret    
c000c33d:	83 ec 0c             	sub    esp,0xc
c000c340:	68 f8 43 02 c0       	push   0xc00243f8
c000c345:	e8 7b 0c 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000c34a:	83 c4 10             	add    esp,0x10
c000c34d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c351:	09 d8                	or     eax,ebx
c000c353:	a9 ff 0f 00 00       	test   eax,0xfff
c000c358:	74 a9                	je     c000c303 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c000c35a:	83 ec 0c             	sub    esp,0xc
c000c35d:	68 60 44 02 c0       	push   0xc0024460
c000c362:	e8 74 7c 00 00       	call   c0013fdb <Krnl::panic(char const*)>
c000c367:	83 c4 10             	add    esp,0x10
c000c36a:	eb 97                	jmp    c000c303 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c000c36c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c370:	e8 f9 df ff ff       	call   c000a36e <Phys::allocatePage()>
c000c375:	83 ec 0c             	sub    esp,0xc
c000c378:	89 c5                	mov    ebp,eax
c000c37a:	8b 0d 34 80 02 c0    	mov    ecx,DWORD PTR ds:0xc0028034
c000c380:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c384:	6a 01                	push   0x1
c000c386:	e8 de f8 ff ff       	call   c000bc69 <Virt::allocateKernelVirtualPages(int)>
c000c38b:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000c392:	6a 01                	push   0x1
c000c394:	50                   	push   eax
c000c395:	55                   	push   ebp
c000c396:	81 cd 07 04 00 00    	or     ebp,0x407
c000c39c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000c3a0:	51                   	push   ecx
c000c3a1:	e8 26 02 00 00       	call   c000c5cc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c3a6:	83 c4 1c             	add    esp,0x1c
c000c3a9:	68 00 10 00 00       	push   0x1000
c000c3ae:	6a 00                	push   0x0
c000c3b0:	50                   	push   eax
c000c3b1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c3b5:	e8 c2 42 ff ff       	call   c000067c <memset>
c000c3ba:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000c3be:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c3c1:	e8 97 fb ff ff       	call   c000bf5d <Virt::freeKernelVirtualPages(unsigned long)>
c000c3c6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c3ca:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c3cd:	83 c4 10             	add    esp,0x10
c000c3d0:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000c3d3:	e9 40 ff ff ff       	jmp    c000c318 <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c000c3d8 <VAS::allocatePages(int, int)>:
c000c3d8:	55                   	push   ebp
c000c3d9:	57                   	push   edi
c000c3da:	56                   	push   esi
c000c3db:	53                   	push   ebx
c000c3dc:	83 ec 1c             	sub    esp,0x1c
c000c3df:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c3e3:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c000c3e8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c3ee:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000c3f4:	83 e0 01             	and    eax,0x1
c000c3f7:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000c3fb:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000c3ff:	0f 85 cc 00 00 00    	jne    c000c4d1 <VAS::allocatePages(int, int)+0xf9>
c000c405:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000c408:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c40c:	85 c0                	test   eax,eax
c000c40e:	0f 84 a1 00 00 00    	je     c000c4b5 <VAS::allocatePages(int, int)+0xdd>
c000c414:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000c418:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c41c:	c1 e6 0c             	shl    esi,0xc
c000c41f:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c000c423:	85 c0                	test   eax,eax
c000c425:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000c428:	7e 33                	jle    c000c45d <VAS::allocatePages(int, int)+0x85>
c000c42a:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c42e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c432:	81 cd 00 04 00 00    	or     ebp,0x400
c000c438:	e8 31 df ff ff       	call   c000a36e <Phys::allocatePage()>
c000c43d:	55                   	push   ebp
c000c43e:	53                   	push   ebx
c000c43f:	50                   	push   eax
c000c440:	57                   	push   edi
c000c441:	e8 8e fe ff ff       	call   c000c2d4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c446:	83 c4 10             	add    esp,0x10
c000c449:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c44e:	74 03                	je     c000c453 <VAS::allocatePages(int, int)+0x7b>
c000c450:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c453:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c459:	39 de                	cmp    esi,ebx
c000c45b:	75 db                	jne    c000c438 <VAS::allocatePages(int, int)+0x60>
c000c45d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c462:	75 12                	jne    c000c476 <VAS::allocatePages(int, int)+0x9e>
c000c464:	0f 20 d8             	mov    eax,cr3
c000c467:	0f 22 d8             	mov    cr3,eax
c000c46a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c46e:	83 c4 1c             	add    esp,0x1c
c000c471:	5b                   	pop    ebx
c000c472:	5e                   	pop    esi
c000c473:	5f                   	pop    edi
c000c474:	5d                   	pop    ebp
c000c475:	c3                   	ret    
c000c476:	c1 ee 0a             	shr    esi,0xa
c000c479:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c47d:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000c483:	c1 eb 0a             	shr    ebx,0xa
c000c486:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c000c48c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c492:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c498:	39 c3                	cmp    ebx,eax
c000c49a:	77 ce                	ja     c000c46a <VAS::allocatePages(int, int)+0x92>
c000c49c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c49f:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c4a5:	39 d8                	cmp    eax,ebx
c000c4a7:	73 f3                	jae    c000c49c <VAS::allocatePages(int, int)+0xc4>
c000c4a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c4ad:	83 c4 1c             	add    esp,0x1c
c000c4b0:	5b                   	pop    ebx
c000c4b1:	5e                   	pop    esi
c000c4b2:	5f                   	pop    edi
c000c4b3:	5d                   	pop    ebp
c000c4b4:	c3                   	ret    
c000c4b5:	83 ec 0c             	sub    esp,0xc
c000c4b8:	68 84 44 02 c0       	push   0xc0024484
c000c4bd:	e8 19 7b 00 00       	call   c0013fdb <Krnl::panic(char const*)>
c000c4c2:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000c4c5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c4c9:	83 c4 10             	add    esp,0x10
c000c4cc:	e9 43 ff ff ff       	jmp    c000c414 <VAS::allocatePages(int, int)+0x3c>
c000c4d1:	83 ec 0c             	sub    esp,0xc
c000c4d4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000c4d8:	e8 8c f7 ff ff       	call   c000bc69 <Virt::allocateKernelVirtualPages(int)>
c000c4dd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c4e1:	83 c4 10             	add    esp,0x10
c000c4e4:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000c4e9:	0f 87 9b 00 00 00    	ja     c000c58a <VAS::allocatePages(int, int)+0x1b2>
c000c4ef:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c4f3:	85 d2                	test   edx,edx
c000c4f5:	7e 3c                	jle    c000c533 <VAS::allocatePages(int, int)+0x15b>
c000c4f7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c4fb:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000c4ff:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c503:	c1 e5 0c             	shl    ebp,0xc
c000c506:	81 ce 00 04 00 00    	or     esi,0x400
c000c50c:	01 dd                	add    ebp,ebx
c000c50e:	e8 5b de ff ff       	call   c000a36e <Phys::allocatePage()>
c000c513:	56                   	push   esi
c000c514:	53                   	push   ebx
c000c515:	50                   	push   eax
c000c516:	57                   	push   edi
c000c517:	e8 b8 fd ff ff       	call   c000c2d4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c51c:	83 c4 10             	add    esp,0x10
c000c51f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c524:	74 03                	je     c000c529 <VAS::allocatePages(int, int)+0x151>
c000c526:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c529:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c52f:	39 dd                	cmp    ebp,ebx
c000c531:	75 db                	jne    c000c50e <VAS::allocatePages(int, int)+0x136>
c000c533:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c538:	0f 84 26 ff ff ff    	je     c000c464 <VAS::allocatePages(int, int)+0x8c>
c000c53e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c542:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c546:	89 d3                	mov    ebx,edx
c000c548:	c1 e0 0c             	shl    eax,0xc
c000c54b:	c1 eb 0a             	shr    ebx,0xa
c000c54e:	01 d0                	add    eax,edx
c000c550:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c556:	c1 e8 0a             	shr    eax,0xa
c000c559:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c55f:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c564:	2d 00 00 40 00       	sub    eax,0x400000
c000c569:	39 c3                	cmp    ebx,eax
c000c56b:	0f 87 f9 fe ff ff    	ja     c000c46a <VAS::allocatePages(int, int)+0x92>
c000c571:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c574:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c57a:	39 d8                	cmp    eax,ebx
c000c57c:	73 f3                	jae    c000c571 <VAS::allocatePages(int, int)+0x199>
c000c57e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c582:	83 c4 1c             	add    esp,0x1c
c000c585:	5b                   	pop    ebx
c000c586:	5e                   	pop    esi
c000c587:	5f                   	pop    edi
c000c588:	5d                   	pop    ebp
c000c589:	c3                   	ret    
c000c58a:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c000c58f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c595:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c000c59c:	0f 84 4d ff ff ff    	je     c000c4ef <VAS::allocatePages(int, int)+0x117>
c000c5a2:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c000c5aa:	e9 40 ff ff ff       	jmp    c000c4ef <VAS::allocatePages(int, int)+0x117>
c000c5af:	90                   	nop

c000c5b0 <VAS::setCPUSpecific(unsigned long)>:
c000c5b0:	83 ec 0c             	sub    esp,0xc
c000c5b3:	6a 05                	push   0x5
c000c5b5:	68 00 00 40 c2       	push   0xc2400000
c000c5ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5c2:	e8 0d fd ff ff       	call   c000c2d4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c5c7:	83 c4 1c             	add    esp,0x1c
c000c5ca:	c3                   	ret    
c000c5cb:	90                   	nop

c000c5cc <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000c5cc:	55                   	push   ebp
c000c5cd:	57                   	push   edi
c000c5ce:	56                   	push   esi
c000c5cf:	53                   	push   ebx
c000c5d0:	83 ec 1c             	sub    esp,0x1c
c000c5d3:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c000c5d8:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c5dc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c5e2:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c5e6:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000c5ec:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000c5f0:	83 e0 01             	and    eax,0x1
c000c5f3:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000c5f7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c5fb:	85 c0                	test   eax,eax
c000c5fd:	7e 39                	jle    c000c638 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c000c5ff:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c603:	89 f3                	mov    ebx,esi
c000c605:	c1 e0 0c             	shl    eax,0xc
c000c608:	01 f0                	add    eax,esi
c000c60a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c60e:	55                   	push   ebp
c000c60f:	53                   	push   ebx
c000c610:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c614:	29 f0                	sub    eax,esi
c000c616:	01 d8                	add    eax,ebx
c000c618:	50                   	push   eax
c000c619:	57                   	push   edi
c000c61a:	e8 b5 fc ff ff       	call   c000c2d4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c61f:	83 c4 10             	add    esp,0x10
c000c622:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c627:	74 03                	je     c000c62c <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c000c629:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c62c:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c632:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000c636:	75 d6                	jne    c000c60e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c000c638:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c63d:	75 10                	jne    c000c64f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c000c63f:	0f 20 d8             	mov    eax,cr3
c000c642:	0f 22 d8             	mov    cr3,eax
c000c645:	83 c4 1c             	add    esp,0x1c
c000c648:	89 f0                	mov    eax,esi
c000c64a:	5b                   	pop    ebx
c000c64b:	5e                   	pop    esi
c000c64c:	5f                   	pop    edi
c000c64d:	5d                   	pop    ebp
c000c64e:	c3                   	ret    
c000c64f:	89 f3                	mov    ebx,esi
c000c651:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c655:	c1 eb 0a             	shr    ebx,0xa
c000c658:	c1 e0 0c             	shl    eax,0xc
c000c65b:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c661:	01 f0                	add    eax,esi
c000c663:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c669:	c1 e8 0a             	shr    eax,0xa
c000c66c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c671:	2d 00 00 40 00       	sub    eax,0x400000
c000c676:	39 c3                	cmp    ebx,eax
c000c678:	77 cb                	ja     c000c645 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c000c67a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c67d:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c683:	39 d8                	cmp    eax,ebx
c000c685:	73 f3                	jae    c000c67a <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c000c687:	83 c4 1c             	add    esp,0x1c
c000c68a:	89 f0                	mov    eax,esi
c000c68c:	5b                   	pop    ebx
c000c68d:	5e                   	pop    esi
c000c68e:	5f                   	pop    edi
c000c68f:	5d                   	pop    ebp
c000c690:	c3                   	ret    
c000c691:	90                   	nop

c000c692 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000c692:	55                   	push   ebp
c000c693:	57                   	push   edi
c000c694:	56                   	push   esi
c000c695:	53                   	push   ebx
c000c696:	83 ec 1c             	sub    esp,0x1c
c000c699:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c69d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c6a1:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c000c6a5:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000c6a9:	a9 ff 0f 00 00       	test   eax,0xfff
c000c6ae:	75 4a                	jne    c000c6fa <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c000c6b0:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000c6b4:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c6b7:	c1 eb 16             	shr    ebx,0x16
c000c6ba:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000c6c1:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000c6c5:	74 4d                	je     c000c714 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c000c6c7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c6cb:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000c6cf:	c1 e8 0a             	shr    eax,0xa
c000c6d2:	80 fa 01             	cmp    dl,0x1
c000c6d5:	19 d2                	sbb    edx,edx
c000c6d7:	c1 e3 0c             	shl    ebx,0xc
c000c6da:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000c6de:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000c6e4:	25 fc 0f 00 00       	and    eax,0xffc
c000c6e9:	01 d8                	add    eax,ebx
c000c6eb:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000c6f2:	83 c4 1c             	add    esp,0x1c
c000c6f5:	5b                   	pop    ebx
c000c6f6:	5e                   	pop    esi
c000c6f7:	5f                   	pop    edi
c000c6f8:	5d                   	pop    ebp
c000c6f9:	c3                   	ret    
c000c6fa:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c6fe:	83 ec 0c             	sub    esp,0xc
c000c701:	68 b0 44 02 c0       	push   0xc00244b0
c000c706:	e8 d0 78 00 00       	call   c0013fdb <Krnl::panic(char const*)>
c000c70b:	83 c4 10             	add    esp,0x10
c000c70e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c712:	eb 9c                	jmp    c000c6b0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c000c714:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c718:	e8 51 dc ff ff       	call   c000a36e <Phys::allocatePage()>
c000c71d:	83 ec 0c             	sub    esp,0xc
c000c720:	89 c5                	mov    ebp,eax
c000c722:	8b 0d 34 80 02 c0    	mov    ecx,DWORD PTR ds:0xc0028034
c000c728:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c72c:	6a 01                	push   0x1
c000c72e:	e8 36 f5 ff ff       	call   c000bc69 <Virt::allocateKernelVirtualPages(int)>
c000c733:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000c73a:	6a 01                	push   0x1
c000c73c:	50                   	push   eax
c000c73d:	55                   	push   ebp
c000c73e:	81 cd 07 04 00 00    	or     ebp,0x407
c000c744:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000c748:	51                   	push   ecx
c000c749:	e8 7e fe ff ff       	call   c000c5cc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c74e:	83 c4 1c             	add    esp,0x1c
c000c751:	68 00 10 00 00       	push   0x1000
c000c756:	6a 00                	push   0x0
c000c758:	50                   	push   eax
c000c759:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c75d:	e8 1a 3f ff ff       	call   c000067c <memset>
c000c762:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000c766:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c769:	e8 ef f7 ff ff       	call   c000bf5d <Virt::freeKernelVirtualPages(unsigned long)>
c000c76e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c771:	83 c4 10             	add    esp,0x10
c000c774:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000c777:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c77b:	e9 47 ff ff ff       	jmp    c000c6c7 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c000c780 <VAS::VAS(bool)>:
c000c780:	53                   	push   ebx
c000c781:	83 ec 28             	sub    esp,0x28
c000c784:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c788:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000c78c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c790:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c797:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c79b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000c7a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c7a6:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000c7aa:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000c7ad:	e8 bc db ff ff       	call   c000a36e <Phys::allocatePage()>
c000c7b2:	89 c2                	mov    edx,eax
c000c7b4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c7b8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000c7bb:	8b 1d 34 80 02 c0    	mov    ebx,DWORD PTR ds:0xc0028034
c000c7c1:	83 ec 0c             	sub    esp,0xc
c000c7c4:	6a 01                	push   0x1
c000c7c6:	e8 9e f4 ff ff       	call   c000bc69 <Virt::allocateKernelVirtualPages(int)>
c000c7cb:	83 c4 10             	add    esp,0x10
c000c7ce:	89 c2                	mov    edx,eax
c000c7d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c7d4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000c7d7:	83 ec 0c             	sub    esp,0xc
c000c7da:	6a 03                	push   0x3
c000c7dc:	6a 01                	push   0x1
c000c7de:	52                   	push   edx
c000c7df:	50                   	push   eax
c000c7e0:	53                   	push   ebx
c000c7e1:	e8 e6 fd ff ff       	call   c000c5cc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c7e6:	83 c4 20             	add    esp,0x20
c000c7e9:	89 c2                	mov    edx,eax
c000c7eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c7ef:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000c7f2:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000c7fa:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000c802:	7f 1c                	jg     c000c820 <VAS::VAS(bool)+0xa0>
c000c804:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c808:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c80b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c80f:	c1 e2 02             	shl    edx,0x2
c000c812:	01 d0                	add    eax,edx
c000c814:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c81a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c81e:	eb da                	jmp    c000c7fa <VAS::VAS(bool)+0x7a>
c000c820:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000c828:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000c830:	7f 7a                	jg     c000c8ac <VAS::VAS(bool)+0x12c>
c000c832:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c836:	2d 00 02 00 00       	sub    eax,0x200
c000c83b:	c1 e0 0c             	shl    eax,0xc
c000c83e:	83 c8 03             	or     eax,0x3
c000c841:	89 c2                	mov    edx,eax
c000c843:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c000c848:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c84e:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c854:	83 e0 10             	and    eax,0x10
c000c857:	84 c0                	test   al,al
c000c859:	74 07                	je     c000c862 <VAS::VAS(bool)+0xe2>
c000c85b:	b8 00 01 00 00       	mov    eax,0x100
c000c860:	eb 05                	jmp    c000c867 <VAS::VAS(bool)+0xe7>
c000c862:	b8 00 00 00 00       	mov    eax,0x0
c000c867:	09 d0                	or     eax,edx
c000c869:	89 c1                	mov    ecx,eax
c000c86b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c86f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c872:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c876:	c1 e2 02             	shl    edx,0x2
c000c879:	01 d0                	add    eax,edx
c000c87b:	89 ca                	mov    edx,ecx
c000c87d:	89 10                	mov    DWORD PTR [eax],edx
c000c87f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c883:	2d 40 03 00 00       	sub    eax,0x340
c000c888:	83 f8 7f             	cmp    eax,0x7f
c000c88b:	77 16                	ja     c000c8a3 <VAS::VAS(bool)+0x123>
c000c88d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c891:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c894:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c898:	c1 e2 02             	shl    edx,0x2
c000c89b:	01 d0                	add    eax,edx
c000c89d:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c8a3:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000c8a7:	e9 7c ff ff ff       	jmp    c000c828 <VAS::VAS(bool)+0xa8>
c000c8ac:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c000c8b1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c8b7:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c8bd:	83 e0 10             	and    eax,0x10
c000c8c0:	84 c0                	test   al,al
c000c8c2:	74 07                	je     c000c8cb <VAS::VAS(bool)+0x14b>
c000c8c4:	b8 03 41 00 00       	mov    eax,0x4103
c000c8c9:	eb 05                	jmp    c000c8d0 <VAS::VAS(bool)+0x150>
c000c8cb:	b8 03 40 00 00       	mov    eax,0x4003
c000c8d0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c8d4:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000c8d7:	81 c2 20 0c 00 00    	add    edx,0xc20
c000c8dd:	89 02                	mov    DWORD PTR [edx],eax
c000c8df:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c000c8e4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c8ea:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000c8f0:	83 ec 08             	sub    esp,0x8
c000c8f3:	50                   	push   eax
c000c8f4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c8f8:	e8 b3 fc ff ff       	call   c000c5b0 <VAS::setCPUSpecific(unsigned long)>
c000c8fd:	83 c4 10             	add    esp,0x10
c000c900:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c904:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000c907:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c000c90c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c912:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c918:	83 e0 10             	and    eax,0x10
c000c91b:	84 c0                	test   al,al
c000c91d:	74 07                	je     c000c926 <VAS::VAS(bool)+0x1a6>
c000c91f:	b8 00 01 00 00       	mov    eax,0x100
c000c924:	eb 05                	jmp    c000c92b <VAS::VAS(bool)+0x1ab>
c000c926:	b8 00 00 00 00       	mov    eax,0x0
c000c92b:	09 c2                	or     edx,eax
c000c92d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c931:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c934:	05 fc 0f 00 00       	add    eax,0xffc
c000c939:	83 ca 03             	or     edx,0x3
c000c93c:	89 10                	mov    DWORD PTR [eax],edx
c000c93e:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c000c943:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c949:	83 ec 0c             	sub    esp,0xc
c000c94c:	50                   	push   eax
c000c94d:	e8 24 1e 00 00       	call   c000e776 <Device::getName()>
c000c952:	83 c4 10             	add    esp,0x10
c000c955:	83 ec 08             	sub    esp,0x8
c000c958:	68 84 45 02 c0       	push   0xc0024584
c000c95d:	50                   	push   eax
c000c95e:	e8 61 3e ff ff       	call   c00007c4 <strcmp>
c000c963:	83 c4 10             	add    esp,0x10
c000c966:	85 c0                	test   eax,eax
c000c968:	0f 94 c0             	sete   al
c000c96b:	84 c0                	test   al,al
c000c96d:	0f 84 87 00 00 00    	je     c000c9fa <VAS::VAS(bool)+0x27a>
c000c973:	fa                   	cli    
c000c974:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c000c979:	40                   	inc    eax
c000c97a:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c000c97f:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c000c984:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c98a:	05 7c 09 00 00       	add    eax,0x97c
c000c98f:	83 ec 0c             	sub    esp,0xc
c000c992:	50                   	push   eax
c000c993:	e8 0e ce ff ff       	call   c00097a6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000c998:	83 c4 10             	add    esp,0x10
c000c99b:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c9a0:	89 c3                	mov    ebx,eax
c000c9a2:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c000c9a7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c9ad:	05 7c 09 00 00       	add    eax,0x97c
c000c9b2:	83 ec 0c             	sub    esp,0xc
c000c9b5:	50                   	push   eax
c000c9b6:	e8 eb cd ff ff       	call   c00097a6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000c9bb:	83 c4 10             	add    esp,0x10
c000c9be:	83 ec 08             	sub    esp,0x8
c000c9c1:	50                   	push   eax
c000c9c2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c9c6:	e8 73 f5 ff ff       	call   c000bf3e <VAS::getPageTableEntry(unsigned long)>
c000c9cb:	83 c4 10             	add    esp,0x10
c000c9ce:	8b 00                	mov    eax,DWORD PTR [eax]
c000c9d0:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c9d5:	6a 11                	push   0x11
c000c9d7:	53                   	push   ebx
c000c9d8:	50                   	push   eax
c000c9d9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c9dd:	e8 f2 f8 ff ff       	call   c000c2d4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c9e2:	83 c4 10             	add    esp,0x10
c000c9e5:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c000c9ea:	48                   	dec    eax
c000c9eb:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c000c9f0:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c000c9f5:	85 c0                	test   eax,eax
c000c9f7:	75 01                	jne    c000c9fa <VAS::VAS(bool)+0x27a>
c000c9f9:	fb                   	sti    
c000c9fa:	90                   	nop
c000c9fb:	83 c4 28             	add    esp,0x28
c000c9fe:	5b                   	pop    ebx
c000c9ff:	c3                   	ret    

c000ca00 <VAS::VAS()>:
c000ca00:	53                   	push   ebx
c000ca01:	83 ec 18             	sub    esp,0x18
c000ca04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca08:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ca0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca13:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000ca1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca1e:	a3 34 80 02 c0       	mov    ds:0xc0028034,eax
c000ca23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca27:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000ca2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca2f:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000ca32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca36:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c000ca3d:	c7 44 24 0c 14 00 00 00 	mov    DWORD PTR [esp+0xc],0x14
c000ca45:	83 ec 0c             	sub    esp,0xc
c000ca48:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ca4c:	e8 66 d2 ff ff       	call   c0009cb7 <malloc>
c000ca51:	83 c4 10             	add    esp,0x10
c000ca54:	89 c3                	mov    ebx,eax
c000ca56:	83 ec 08             	sub    esp,0x8
c000ca59:	6a 01                	push   0x1
c000ca5b:	53                   	push   ebx
c000ca5c:	e8 1f fd ff ff       	call   c000c780 <VAS::VAS(bool)>
c000ca61:	83 c4 10             	add    esp,0x10
c000ca64:	89 1d 2c 80 02 c0    	mov    DWORD PTR ds:0xc002802c,ebx
c000ca6a:	90                   	nop
c000ca6b:	83 c4 18             	add    esp,0x18
c000ca6e:	5b                   	pop    ebx
c000ca6f:	c3                   	ret    

c000ca70 <VAS::evict(unsigned long)>:
c000ca70:	55                   	push   ebp
c000ca71:	57                   	push   edi
c000ca72:	56                   	push   esi
c000ca73:	53                   	push   ebx
c000ca74:	83 ec 1c             	sub    esp,0x1c
c000ca77:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca7b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ca7f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ca83:	e8 22 f3 ff ff       	call   c000bdaa <Virt::allocateSwapfilePage()>
c000ca88:	89 c7                	mov    edi,eax
c000ca8a:	a1 4c 73 02 c0       	mov    eax,ds:0xc002734c
c000ca8f:	85 c0                	test   eax,eax
c000ca91:	7e 3d                	jle    c000cad0 <VAS::evict(unsigned long)+0x60>
c000ca93:	89 ee                	mov    esi,ebp
c000ca95:	31 db                	xor    ebx,ebx
c000ca97:	83 ec 0c             	sub    esp,0xc
c000ca9a:	57                   	push   edi
c000ca9b:	e8 f8 f2 ff ff       	call   c000bd98 <Virt::swapIDToSector(unsigned long)>
c000caa0:	89 34 24             	mov    DWORD PTR [esp],esi
c000caa3:	01 d8                	add    eax,ebx
c000caa5:	6a 01                	push   0x1
c000caa7:	31 d2                	xor    edx,edx
c000caa9:	43                   	inc    ebx
c000caaa:	52                   	push   edx
c000caab:	81 c6 00 02 00 00    	add    esi,0x200
c000cab1:	50                   	push   eax
c000cab2:	0f be 05 58 73 02 c0 	movsx  eax,BYTE PTR ds:0xc0027358
c000cab9:	ff 34 85 bc 83 02 c0 	push   DWORD PTR [eax*4-0x3ffd7c44]
c000cac0:	e8 2b 2e 00 00       	call   c000f8f0 <LogicalDisk::write(unsigned long long, int, void*)>
c000cac5:	83 c4 20             	add    esp,0x20
c000cac8:	39 1d 4c 73 02 c0    	cmp    DWORD PTR ds:0xc002734c,ebx
c000cace:	7f c7                	jg     c000ca97 <VAS::evict(unsigned long)+0x27>
c000cad0:	83 ec 08             	sub    esp,0x8
c000cad3:	c1 e7 0b             	shl    edi,0xb
c000cad6:	55                   	push   ebp
c000cad7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cadb:	e8 5e f4 ff ff       	call   c000bf3e <VAS::getPageTableEntry(unsigned long)>
c000cae0:	8b 10                	mov    edx,DWORD PTR [eax]
c000cae2:	89 d3                	mov    ebx,edx
c000cae4:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000caea:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000caf0:	09 d7                	or     edi,edx
c000caf2:	89 38                	mov    DWORD PTR [eax],edi
c000caf4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000caf7:	ff 05 28 80 02 c0    	inc    DWORD PTR ds:0xc0028028
c000cafd:	e8 e9 d7 ff ff       	call   c000a2eb <Phys::freePage(unsigned long)>
c000cb02:	0f 20 d8             	mov    eax,cr3
c000cb05:	0f 22 d8             	mov    cr3,eax
c000cb08:	ff 35 28 80 02 c0    	push   DWORD PTR ds:0xc0028028
c000cb0e:	55                   	push   ebp
c000cb0f:	53                   	push   ebx
c000cb10:	68 d4 44 02 c0       	push   0xc00244d4
c000cb15:	e8 ab 04 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000cb1a:	a1 24 80 02 c0       	mov    eax,ds:0xc0028024
c000cb1f:	c7 44 24 50 92 45 02 c0 	mov    DWORD PTR [esp+0x50],0xc0024592
c000cb27:	8d 50 01             	lea    edx,[eax+0x1]
c000cb2a:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000cb2e:	89 15 24 80 02 c0    	mov    DWORD PTR ds:0xc0028024,edx
c000cb34:	83 c4 3c             	add    esp,0x3c
c000cb37:	5b                   	pop    ebx
c000cb38:	5e                   	pop    esi
c000cb39:	5f                   	pop    edi
c000cb3a:	5d                   	pop    ebp
c000cb3b:	e9 85 04 00 00       	jmp    c000cfc5 <Dbg::kprintf(char const*, ...)>

c000cb40 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000cb40:	55                   	push   ebp
c000cb41:	57                   	push   edi
c000cb42:	56                   	push   esi
c000cb43:	53                   	push   ebx
c000cb44:	83 ec 14             	sub    esp,0x14
c000cb47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb4b:	68 a3 45 02 c0       	push   0xc00245a3
c000cb50:	e8 70 04 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000cb55:	83 c4 10             	add    esp,0x10
c000cb58:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000cb5c:	81 e5 00 f0 ff ff    	and    ebp,0xfffff000
c000cb62:	74 20                	je     c000cb84 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>
c000cb64:	83 ec 08             	sub    esp,0x8
c000cb67:	55                   	push   ebp
c000cb68:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb6c:	e8 cd f3 ff ff       	call   c000bf3e <VAS::getPageTableEntry(unsigned long)>
c000cb71:	83 c4 10             	add    esp,0x10
c000cb74:	89 c3                	mov    ebx,eax
c000cb76:	85 c0                	test   eax,eax
c000cb78:	74 0a                	je     c000cb84 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>
c000cb7a:	8b 38                	mov    edi,DWORD PTR [eax]
c000cb7c:	f7 c7 01 00 00 00    	test   edi,0x1
c000cb82:	74 0a                	je     c000cb8e <VAS::tryLoadBackOffDisk(unsigned long)+0x4e>
c000cb84:	31 c0                	xor    eax,eax
c000cb86:	83 c4 0c             	add    esp,0xc
c000cb89:	5b                   	pop    ebx
c000cb8a:	5e                   	pop    esi
c000cb8b:	5f                   	pop    edi
c000cb8c:	5d                   	pop    ebp
c000cb8d:	c3                   	ret    
c000cb8e:	e8 db d7 ff ff       	call   c000a36e <Phys::allocatePage()>
c000cb93:	c1 ef 0b             	shr    edi,0xb
c000cb96:	8b 13                	mov    edx,DWORD PTR [ebx]
c000cb98:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000cb9e:	09 c2                	or     edx,eax
c000cba0:	81 ca 01 08 00 00    	or     edx,0x801
c000cba6:	89 13                	mov    DWORD PTR [ebx],edx
c000cba8:	8b 0d 4c 73 02 c0    	mov    ecx,DWORD PTR ds:0xc002734c
c000cbae:	85 c9                	test   ecx,ecx
c000cbb0:	7e 3d                	jle    c000cbef <VAS::tryLoadBackOffDisk(unsigned long)+0xaf>
c000cbb2:	89 ee                	mov    esi,ebp
c000cbb4:	31 db                	xor    ebx,ebx
c000cbb6:	83 ec 0c             	sub    esp,0xc
c000cbb9:	57                   	push   edi
c000cbba:	e8 d9 f1 ff ff       	call   c000bd98 <Virt::swapIDToSector(unsigned long)>
c000cbbf:	89 34 24             	mov    DWORD PTR [esp],esi
c000cbc2:	01 d8                	add    eax,ebx
c000cbc4:	6a 01                	push   0x1
c000cbc6:	31 d2                	xor    edx,edx
c000cbc8:	43                   	inc    ebx
c000cbc9:	52                   	push   edx
c000cbca:	81 c6 00 02 00 00    	add    esi,0x200
c000cbd0:	50                   	push   eax
c000cbd1:	0f be 05 58 73 02 c0 	movsx  eax,BYTE PTR ds:0xc0027358
c000cbd8:	ff 34 85 bc 83 02 c0 	push   DWORD PTR [eax*4-0x3ffd7c44]
c000cbdf:	e8 a0 2c 00 00       	call   c000f884 <LogicalDisk::read(unsigned long long, int, void*)>
c000cbe4:	83 c4 20             	add    esp,0x20
c000cbe7:	39 1d 4c 73 02 c0    	cmp    DWORD PTR ds:0xc002734c,ebx
c000cbed:	7f c7                	jg     c000cbb6 <VAS::tryLoadBackOffDisk(unsigned long)+0x76>
c000cbef:	a1 28 80 02 c0       	mov    eax,ds:0xc0028028
c000cbf4:	48                   	dec    eax
c000cbf5:	52                   	push   edx
c000cbf6:	a3 28 80 02 c0       	mov    ds:0xc0028028,eax
c000cbfb:	50                   	push   eax
c000cbfc:	55                   	push   ebp
c000cbfd:	68 b6 45 02 c0       	push   0xc00245b6
c000cc02:	e8 be 03 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000cc07:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cc0a:	e8 6b f1 ff ff       	call   c000bd7a <Virt::freeSwapfilePage(unsigned long)>
c000cc0f:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c000cc14:	83 c4 10             	add    esp,0x10
c000cc17:	48                   	dec    eax
c000cc18:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c000cc1d:	85 c0                	test   eax,eax
c000cc1f:	74 1d                	je     c000cc3e <VAS::tryLoadBackOffDisk(unsigned long)+0xfe>
c000cc21:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000cc25:	25 ff 0f 00 00       	and    eax,0xfff
c000cc2a:	3d e0 0f 00 00       	cmp    eax,0xfe0
c000cc2f:	77 10                	ja     c000cc41 <VAS::tryLoadBackOffDisk(unsigned long)+0x101>
c000cc31:	0f 20 d8             	mov    eax,cr3
c000cc34:	0f 22 d8             	mov    cr3,eax
c000cc37:	b0 01                	mov    al,0x1
c000cc39:	e9 48 ff ff ff       	jmp    c000cb86 <VAS::tryLoadBackOffDisk(unsigned long)+0x46>
c000cc3e:	fb                   	sti    
c000cc3f:	eb e0                	jmp    c000cc21 <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000cc41:	83 ec 0c             	sub    esp,0xc
c000cc44:	68 cb 45 02 c0       	push   0xc00245cb
c000cc49:	e8 77 03 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000cc4e:	83 c4 10             	add    esp,0x10
c000cc51:	eb de                	jmp    c000cc31 <VAS::tryLoadBackOffDisk(unsigned long)+0xf1>
c000cc53:	90                   	nop

c000cc54 <VAS::scanForEviction()>:
c000cc54:	57                   	push   edi
c000cc55:	31 ff                	xor    edi,edi
c000cc57:	56                   	push   esi
c000cc58:	53                   	push   ebx
c000cc59:	83 ec 10             	sub    esp,0x10
c000cc5c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000cc60:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000cc63:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000cc69:	75 0e                	jne    c000cc79 <VAS::scanForEviction()+0x25>
c000cc6b:	89 da                	mov    edx,ebx
c000cc6d:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000cc70:	c1 ea 16             	shr    edx,0x16
c000cc73:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000cc77:	74 4e                	je     c000ccc7 <VAS::scanForEviction()+0x73>
c000cc79:	53                   	push   ebx
c000cc7a:	56                   	push   esi
c000cc7b:	e8 be f2 ff ff       	call   c000bf3e <VAS::getPageTableEntry(unsigned long)>
c000cc80:	5a                   	pop    edx
c000cc81:	8b 10                	mov    edx,DWORD PTR [eax]
c000cc83:	59                   	pop    ecx
c000cc84:	89 d1                	mov    ecx,edx
c000cc86:	81 e1 01 08 00 00    	and    ecx,0x801
c000cc8c:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000cc92:	74 3e                	je     c000ccd2 <VAS::scanForEviction()+0x7e>
c000cc94:	81 c3 00 10 00 00    	add    ebx,0x1000
c000cc9a:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000cca0:	76 2b                	jbe    c000cccd <VAS::scanForEviction()+0x79>
c000cca2:	47                   	inc    edi
c000cca3:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000ccaa:	83 ff 03             	cmp    edi,0x3
c000ccad:	74 32                	je     c000cce1 <VAS::scanForEviction()+0x8d>
c000ccaf:	31 db                	xor    ebx,ebx
c000ccb1:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000ccb7:	75 c0                	jne    c000cc79 <VAS::scanForEviction()+0x25>
c000ccb9:	89 da                	mov    edx,ebx
c000ccbb:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ccbe:	c1 ea 16             	shr    edx,0x16
c000ccc1:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000ccc5:	75 b2                	jne    c000cc79 <VAS::scanForEviction()+0x25>
c000ccc7:	81 c3 00 00 40 00    	add    ebx,0x400000
c000cccd:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000ccd0:	eb 91                	jmp    c000cc63 <VAS::scanForEviction()+0xf>
c000ccd2:	f6 c2 20             	test   dl,0x20
c000ccd5:	74 13                	je     c000ccea <VAS::scanForEviction()+0x96>
c000ccd7:	83 e2 df             	and    edx,0xffffffdf
c000ccda:	89 10                	mov    DWORD PTR [eax],edx
c000ccdc:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000ccdf:	eb b3                	jmp    c000cc94 <VAS::scanForEviction()+0x40>
c000cce1:	83 c4 10             	add    esp,0x10
c000cce4:	31 c0                	xor    eax,eax
c000cce6:	5b                   	pop    ebx
c000cce7:	5e                   	pop    esi
c000cce8:	5f                   	pop    edi
c000cce9:	c3                   	ret    
c000ccea:	83 ec 08             	sub    esp,0x8
c000cced:	89 d0                	mov    eax,edx
c000ccef:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ccf4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ccf8:	53                   	push   ebx
c000ccf9:	68 db 45 02 c0       	push   0xc00245db
c000ccfe:	e8 c2 02 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000cd03:	58                   	pop    eax
c000cd04:	5a                   	pop    edx
c000cd05:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000cd08:	56                   	push   esi
c000cd09:	e8 62 fd ff ff       	call   c000ca70 <VAS::evict(unsigned long)>
c000cd0e:	59                   	pop    ecx
c000cd0f:	5b                   	pop    ebx
c000cd10:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000cd13:	68 ef 45 02 c0       	push   0xc00245ef
c000cd18:	e8 a8 02 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000cd1d:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000cd24:	83 c4 10             	add    esp,0x10
c000cd27:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cd2b:	83 c4 10             	add    esp,0x10
c000cd2e:	5b                   	pop    ebx
c000cd2f:	5e                   	pop    esi
c000cd30:	5f                   	pop    edi
c000cd31:	c3                   	ret    

c000cd32 <mapVASFirstTime>:
c000cd32:	55                   	push   ebp
c000cd33:	57                   	push   edi
c000cd34:	56                   	push   esi
c000cd35:	53                   	push   ebx
c000cd36:	83 ec 0c             	sub    esp,0xc
c000cd39:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000cd3e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000cd41:	4a                   	dec    edx
c000cd42:	0f 84 fe 00 00 00    	je     c000ce46 <mapVASFirstTime+0x114>
c000cd48:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000cd4b:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000cd4e:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000cd53:	c1 e5 15             	shl    ebp,0x15
c000cd56:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000cd5b:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000cd61:	29 eb                	sub    ebx,ebp
c000cd63:	29 ef                	sub    edi,ebp
c000cd65:	83 ec 08             	sub    esp,0x8
c000cd68:	53                   	push   ebx
c000cd69:	68 1b 46 02 c0       	push   0xc002461b
c000cd6e:	e8 52 02 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000cd73:	e8 f6 d5 ff ff       	call   c000a36e <Phys::allocatePage()>
c000cd78:	c7 04 24 03 04 00 00 	mov    DWORD PTR [esp],0x403
c000cd7f:	6a 01                	push   0x1
c000cd81:	53                   	push   ebx
c000cd82:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000cd88:	50                   	push   eax
c000cd89:	56                   	push   esi
c000cd8a:	e8 3d f8 ff ff       	call   c000c5cc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000cd8f:	83 c4 20             	add    esp,0x20
c000cd92:	39 fb                	cmp    ebx,edi
c000cd94:	75 cf                	jne    c000cd65 <mapVASFirstTime+0x33>
c000cd96:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000cd9b:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000cda0:	29 eb                	sub    ebx,ebp
c000cda2:	29 ef                	sub    edi,ebp
c000cda4:	83 ec 08             	sub    esp,0x8
c000cda7:	53                   	push   ebx
c000cda8:	68 37 46 02 c0       	push   0xc0024637
c000cdad:	e8 13 02 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000cdb2:	58                   	pop    eax
c000cdb3:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000cdb7:	5a                   	pop    edx
c000cdb8:	19 c0                	sbb    eax,eax
c000cdba:	83 e0 04             	and    eax,0x4
c000cdbd:	05 03 04 00 00       	add    eax,0x403
c000cdc2:	50                   	push   eax
c000cdc3:	68 4b 46 02 c0       	push   0xc002464b
c000cdc8:	e8 f8 01 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000cdcd:	e8 9c d5 ff ff       	call   c000a36e <Phys::allocatePage()>
c000cdd2:	59                   	pop    ecx
c000cdd3:	89 c5                	mov    ebp,eax
c000cdd5:	58                   	pop    eax
c000cdd6:	55                   	push   ebp
c000cdd7:	68 59 46 02 c0       	push   0xc0024659
c000cddc:	e8 e4 01 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000cde1:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000cde5:	19 d2                	sbb    edx,edx
c000cde7:	83 e2 04             	and    edx,0x4
c000cdea:	81 c2 03 04 00 00    	add    edx,0x403
c000cdf0:	89 14 24             	mov    DWORD PTR [esp],edx
c000cdf3:	6a 01                	push   0x1
c000cdf5:	53                   	push   ebx
c000cdf6:	55                   	push   ebp
c000cdf7:	56                   	push   esi
c000cdf8:	e8 cf f7 ff ff       	call   c000c5cc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000cdfd:	83 c4 18             	add    esp,0x18
c000ce00:	53                   	push   ebx
c000ce01:	56                   	push   esi
c000ce02:	e8 37 f1 ff ff       	call   c000bf3e <VAS::getPageTableEntry(unsigned long)>
c000ce07:	5a                   	pop    edx
c000ce08:	59                   	pop    ecx
c000ce09:	ff 30                	push   DWORD PTR [eax]
c000ce0b:	68 75 46 02 c0       	push   0xc0024675
c000ce10:	e8 b0 01 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000ce15:	0f 20 d8             	mov    eax,cr3
c000ce18:	83 c4 0c             	add    esp,0xc
c000ce1b:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000ce21:	56                   	push   esi
c000ce22:	50                   	push   eax
c000ce23:	68 80 46 02 c0       	push   0xc0024680
c000ce28:	e8 98 01 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000ce2d:	83 c4 10             	add    esp,0x10
c000ce30:	39 df                	cmp    edi,ebx
c000ce32:	0f 85 6c ff ff ff    	jne    c000cda4 <mapVASFirstTime+0x72>
c000ce38:	0f 20 d8             	mov    eax,cr3
c000ce3b:	0f 22 d8             	mov    cr3,eax
c000ce3e:	83 c4 0c             	add    esp,0xc
c000ce41:	5b                   	pop    ebx
c000ce42:	5e                   	pop    esi
c000ce43:	5f                   	pop    edi
c000ce44:	5d                   	pop    ebp
c000ce45:	c3                   	ret    
c000ce46:	83 ec 0c             	sub    esp,0xc
c000ce49:	68 02 46 02 c0       	push   0xc0024602
c000ce4e:	e8 72 01 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000ce53:	83 c4 10             	add    esp,0x10
c000ce56:	83 c4 0c             	add    esp,0xc
c000ce59:	5b                   	pop    ebx
c000ce5a:	5e                   	pop    esi
c000ce5b:	5f                   	pop    edi
c000ce5c:	5d                   	pop    ebp
c000ce5d:	c3                   	ret    

c000ce5e <__cxa_atexit>:
c000ce5e:	31 c0                	xor    eax,eax
c000ce60:	c3                   	ret    

c000ce61 <__cxa_finalize>:
c000ce61:	c3                   	ret    

c000ce62 <__stack_chk_fail>:
c000ce62:	55                   	push   ebp
c000ce63:	89 e5                	mov    ebp,esp
c000ce65:	83 ec 14             	sub    esp,0x14
c000ce68:	68 98 46 02 c0       	push   0xc0024698
c000ce6d:	e8 53 01 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000ce72:	58                   	pop    eax
c000ce73:	5a                   	pop    edx
c000ce74:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ce77:	68 e8 46 02 c0       	push   0xc00246e8
c000ce7c:	e8 44 01 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000ce81:	59                   	pop    ecx
c000ce82:	58                   	pop    eax
c000ce83:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ce86:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000ce89:	68 e8 46 02 c0       	push   0xc00246e8
c000ce8e:	e8 32 01 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000ce93:	5a                   	pop    edx
c000ce94:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ce97:	59                   	pop    ecx
c000ce98:	8b 00                	mov    eax,DWORD PTR [eax]
c000ce9a:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000ce9d:	68 e8 46 02 c0       	push   0xc00246e8
c000cea2:	e8 1e 01 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000cea7:	5a                   	pop    edx
c000cea8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ceab:	59                   	pop    ecx
c000ceac:	8b 00                	mov    eax,DWORD PTR [eax]
c000ceae:	8b 00                	mov    eax,DWORD PTR [eax]
c000ceb0:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000ceb3:	68 e8 46 02 c0       	push   0xc00246e8
c000ceb8:	e8 08 01 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000cebd:	c7 04 24 f0 46 02 c0 	mov    DWORD PTR [esp],0xc00246f0
c000cec4:	e8 12 71 00 00       	call   c0013fdb <Krnl::panic(char const*)>
c000cec9:	83 c4 10             	add    esp,0x10
c000cecc:	c9                   	leave  
c000cecd:	c3                   	ret    

c000cece <__cxa_pure_virtual>:
c000cece:	83 ec 18             	sub    esp,0x18
c000ced1:	68 08 47 02 c0       	push   0xc0024708
c000ced6:	e8 00 71 00 00       	call   c0013fdb <Krnl::panic(char const*)>
c000cedb:	83 c4 1c             	add    esp,0x1c
c000cede:	c3                   	ret    

c000cedf <operator new[](unsigned long)>:
c000cedf:	e9 d3 cd ff ff       	jmp    c0009cb7 <malloc>

c000cee4 <operator delete(void*, unsigned long)>:
c000cee4:	e9 ee cd ff ff       	jmp    c0009cd7 <rfree>

c000cee9 <operator delete[](void*)>:
c000cee9:	e9 e9 cd ff ff       	jmp    c0009cd7 <rfree>

c000ceee <operator delete[](void*, unsigned long)>:
c000ceee:	e9 e4 cd ff ff       	jmp    c0009cd7 <rfree>

c000cef3 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000cef3:	55                   	push   ebp
c000cef4:	b9 11 00 00 00       	mov    ecx,0x11
c000cef9:	57                   	push   edi
c000cefa:	56                   	push   esi
c000cefb:	be ee 41 02 c0       	mov    esi,0xc00241ee
c000cf00:	53                   	push   ebx
c000cf01:	83 ec 20             	sub    esp,0x20
c000cf04:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000cf08:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000cf0c:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000cf10:	fc                   	cld    
c000cf11:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000cf13:	89 ee                	mov    esi,ebp
c000cf15:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000cf19:	eb 02                	jmp    c000cf1d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c000cf1b:	89 c6                	mov    esi,eax
c000cf1d:	31 d2                	xor    edx,edx
c000cf1f:	41                   	inc    ecx
c000cf20:	89 f0                	mov    eax,esi
c000cf22:	f7 f3                	div    ebx
c000cf24:	39 de                	cmp    esi,ebx
c000cf26:	73 f3                	jae    c000cf1b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c000cf28:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000cf2b:	eb 02                	jmp    c000cf2f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000cf2d:	89 c5                	mov    ebp,eax
c000cf2f:	31 d2                	xor    edx,edx
c000cf31:	49                   	dec    ecx
c000cf32:	89 e8                	mov    eax,ebp
c000cf34:	f7 f3                	div    ebx
c000cf36:	39 dd                	cmp    ebp,ebx
c000cf38:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000cf3c:	88 11                	mov    BYTE PTR [ecx],dl
c000cf3e:	73 ed                	jae    c000cf2d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000cf40:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cf44:	83 c4 20             	add    esp,0x20
c000cf47:	5b                   	pop    ebx
c000cf48:	5e                   	pop    esi
c000cf49:	5f                   	pop    edi
c000cf4a:	5d                   	pop    ebp
c000cf4b:	c3                   	ret    

c000cf4c <Dbg::logc(char)>:
c000cf4c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cf50:	f6 05 20 7f 02 c0 10 	test   BYTE PTR ds:0xc0027f20,0x10
c000cf57:	75 12                	jne    c000cf6b <Dbg::logc(char)+0x1f>
c000cf59:	ba fd 03 00 00       	mov    edx,0x3fd
c000cf5e:	ec                   	in     al,dx
c000cf5f:	a8 20                	test   al,0x20
c000cf61:	74 fb                	je     c000cf5e <Dbg::logc(char)+0x12>
c000cf63:	ba f8 03 00 00       	mov    edx,0x3f8
c000cf68:	88 c8                	mov    al,cl
c000cf6a:	ee                   	out    dx,al
c000cf6b:	c3                   	ret    

c000cf6c <Dbg::logs(char*)>:
c000cf6c:	53                   	push   ebx
c000cf6d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000cf71:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000cf74:	84 c0                	test   al,al
c000cf76:	74 0f                	je     c000cf87 <Dbg::logs(char*)+0x1b>
c000cf78:	50                   	push   eax
c000cf79:	43                   	inc    ebx
c000cf7a:	e8 cd ff ff ff       	call   c000cf4c <Dbg::logc(char)>
c000cf7f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000cf82:	5a                   	pop    edx
c000cf83:	84 c0                	test   al,al
c000cf85:	75 f1                	jne    c000cf78 <Dbg::logs(char*)+0xc>
c000cf87:	5b                   	pop    ebx
c000cf88:	c3                   	ret    

c000cf89 <Dbg::logWriteInt(unsigned int)>:
c000cf89:	83 ec 10             	sub    esp,0x10
c000cf8c:	6a 0a                	push   0xa
c000cf8e:	8d 44 24 08          	lea    eax,[esp+0x8]
c000cf92:	50                   	push   eax
c000cf93:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf97:	e8 57 ff ff ff       	call   c000cef3 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000cf9c:	50                   	push   eax
c000cf9d:	e8 ca ff ff ff       	call   c000cf6c <Dbg::logs(char*)>
c000cfa2:	83 c4 20             	add    esp,0x20
c000cfa5:	c3                   	ret    

c000cfa6 <Dbg::logWriteIntBase(unsigned int, int)>:
c000cfa6:	83 ec 10             	sub    esp,0x10
c000cfa9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cfad:	8d 44 24 08          	lea    eax,[esp+0x8]
c000cfb1:	50                   	push   eax
c000cfb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb6:	e8 38 ff ff ff       	call   c000cef3 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000cfbb:	50                   	push   eax
c000cfbc:	e8 ab ff ff ff       	call   c000cf6c <Dbg::logs(char*)>
c000cfc1:	83 c4 20             	add    esp,0x20
c000cfc4:	c3                   	ret    

c000cfc5 <Dbg::kprintf(char const*, ...)>:
c000cfc5:	55                   	push   ebp
c000cfc6:	57                   	push   edi
c000cfc7:	56                   	push   esi
c000cfc8:	53                   	push   ebx
c000cfc9:	83 ec 0c             	sub    esp,0xc
c000cfcc:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000cfd0:	f6 05 20 7f 02 c0 10 	test   BYTE PTR ds:0xc0027f20,0x10
c000cfd7:	74 08                	je     c000cfe1 <Dbg::kprintf(char const*, ...)+0x1c>
c000cfd9:	83 c4 0c             	add    esp,0xc
c000cfdc:	5b                   	pop    ebx
c000cfdd:	5e                   	pop    esi
c000cfde:	5f                   	pop    edi
c000cfdf:	5d                   	pop    ebp
c000cfe0:	c3                   	ret    
c000cfe1:	8d 44 24 24          	lea    eax,[esp+0x24]
c000cfe5:	31 db                	xor    ebx,ebx
c000cfe7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cfeb:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000cfee:	84 c0                	test   al,al
c000cff0:	74 e7                	je     c000cfd9 <Dbg::kprintf(char const*, ...)+0x14>
c000cff2:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000cff5:	3c 25                	cmp    al,0x25
c000cff7:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000cffa:	75 44                	jne    c000d040 <Dbg::kprintf(char const*, ...)+0x7b>
c000cffc:	83 c3 02             	add    ebx,0x2
c000cfff:	8a 07                	mov    al,BYTE PTR [edi]
c000d001:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000d004:	83 e8 25             	sub    eax,0x25
c000d007:	3c 53                	cmp    al,0x53
c000d009:	0f 87 c9 00 00 00    	ja     c000d0d8 <Dbg::kprintf(char const*, ...)+0x113>
c000d00f:	0f b6 c0             	movzx  eax,al
c000d012:	ff 24 85 1c 47 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdb8e4]
c000d019:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d01d:	89 c8                	mov    eax,ecx
c000d01f:	83 c1 04             	add    ecx,0x4
c000d022:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000d026:	ff 30                	push   DWORD PTR [eax]
c000d028:	e8 5c ff ff ff       	call   c000cf89 <Dbg::logWriteInt(unsigned int)>
c000d02d:	5f                   	pop    edi
c000d02e:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000d032:	84 c0                	test   al,al
c000d034:	74 a3                	je     c000cfd9 <Dbg::kprintf(char const*, ...)+0x14>
c000d036:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000d039:	3c 25                	cmp    al,0x25
c000d03b:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000d03e:	74 bc                	je     c000cffc <Dbg::kprintf(char const*, ...)+0x37>
c000d040:	50                   	push   eax
c000d041:	89 eb                	mov    ebx,ebp
c000d043:	e8 04 ff ff ff       	call   c000cf4c <Dbg::logc(char)>
c000d048:	89 fd                	mov    ebp,edi
c000d04a:	58                   	pop    eax
c000d04b:	eb e1                	jmp    c000d02e <Dbg::kprintf(char const*, ...)+0x69>
c000d04d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d051:	89 c8                	mov    eax,ecx
c000d053:	83 c1 04             	add    ecx,0x4
c000d056:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000d05a:	ff 30                	push   DWORD PTR [eax]
c000d05c:	e8 0b ff ff ff       	call   c000cf6c <Dbg::logs(char*)>
c000d061:	58                   	pop    eax
c000d062:	eb ca                	jmp    c000d02e <Dbg::kprintf(char const*, ...)+0x69>
c000d064:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d068:	89 d0                	mov    eax,edx
c000d06a:	83 c2 04             	add    edx,0x4
c000d06d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d071:	ff 30                	push   DWORD PTR [eax]
c000d073:	e8 11 ff ff ff       	call   c000cf89 <Dbg::logWriteInt(unsigned int)>
c000d078:	58                   	pop    eax
c000d079:	eb b3                	jmp    c000d02e <Dbg::kprintf(char const*, ...)+0x69>
c000d07b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d07f:	89 d0                	mov    eax,edx
c000d081:	83 c2 04             	add    edx,0x4
c000d084:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000d087:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d08b:	50                   	push   eax
c000d08c:	e8 bb fe ff ff       	call   c000cf4c <Dbg::logc(char)>
c000d091:	58                   	pop    eax
c000d092:	eb 9a                	jmp    c000d02e <Dbg::kprintf(char const*, ...)+0x69>
c000d094:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d098:	89 c8                	mov    eax,ecx
c000d09a:	83 c1 04             	add    ecx,0x4
c000d09d:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000d0a1:	6a 10                	push   0x10
c000d0a3:	ff 30                	push   DWORD PTR [eax]
c000d0a5:	e8 fc fe ff ff       	call   c000cfa6 <Dbg::logWriteIntBase(unsigned int, int)>
c000d0aa:	59                   	pop    ecx
c000d0ab:	5f                   	pop    edi
c000d0ac:	eb 80                	jmp    c000d02e <Dbg::kprintf(char const*, ...)+0x69>
c000d0ae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d0b2:	89 d0                	mov    eax,edx
c000d0b4:	83 c2 08             	add    edx,0x8
c000d0b7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d0bb:	6a 10                	push   0x10
c000d0bd:	ff 30                	push   DWORD PTR [eax]
c000d0bf:	e8 e2 fe ff ff       	call   c000cfa6 <Dbg::logWriteIntBase(unsigned int, int)>
c000d0c4:	58                   	pop    eax
c000d0c5:	5a                   	pop    edx
c000d0c6:	e9 63 ff ff ff       	jmp    c000d02e <Dbg::kprintf(char const*, ...)+0x69>
c000d0cb:	6a 25                	push   0x25
c000d0cd:	e8 7a fe ff ff       	call   c000cf4c <Dbg::logc(char)>
c000d0d2:	58                   	pop    eax
c000d0d3:	e9 56 ff ff ff       	jmp    c000d02e <Dbg::kprintf(char const*, ...)+0x69>
c000d0d8:	6a 25                	push   0x25
c000d0da:	e8 6d fe ff ff       	call   c000cf4c <Dbg::logc(char)>
c000d0df:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000d0e2:	50                   	push   eax
c000d0e3:	e8 64 fe ff ff       	call   c000cf4c <Dbg::logc(char)>
c000d0e8:	5a                   	pop    edx
c000d0e9:	59                   	pop    ecx
c000d0ea:	e9 3f ff ff ff       	jmp    c000d02e <Dbg::kprintf(char const*, ...)+0x69>
c000d0ef:	90                   	nop

c000d0f0 <File::read(unsigned long long, void*, int*)>:
c000d0f0:	53                   	push   ebx
c000d0f1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d0f5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d0f9:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000d100:	3c 19                	cmp    al,0x19
c000d102:	77 35                	ja     c000d139 <File::read(unsigned long long, void*, int*)+0x49>
c000d104:	8b 04 85 c0 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7b40]
c000d10b:	85 c0                	test   eax,eax
c000d10d:	74 2a                	je     c000d139 <File::read(unsigned long long, void*, int*)+0x49>
c000d10f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d115:	85 c0                	test   eax,eax
c000d117:	74 20                	je     c000d139 <File::read(unsigned long long, void*, int*)+0x49>
c000d119:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d11d:	74 21                	je     c000d140 <File::read(unsigned long long, void*, int*)+0x50>
c000d11f:	8b 08                	mov    ecx,DWORD PTR [eax]
c000d121:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d125:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000d12b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d12f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d133:	5b                   	pop    ebx
c000d134:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000d137:	ff e0                	jmp    eax
c000d139:	b8 0b 00 00 00       	mov    eax,0xb
c000d13e:	eb 05                	jmp    c000d145 <File::read(unsigned long long, void*, int*)+0x55>
c000d140:	b8 05 00 00 00       	mov    eax,0x5
c000d145:	5b                   	pop    ebx
c000d146:	c3                   	ret    
c000d147:	90                   	nop

c000d148 <File::write(unsigned long long, void*, int*)>:
c000d148:	53                   	push   ebx
c000d149:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d14d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d151:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000d158:	3c 19                	cmp    al,0x19
c000d15a:	77 35                	ja     c000d191 <File::write(unsigned long long, void*, int*)+0x49>
c000d15c:	8b 04 85 c0 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7b40]
c000d163:	85 c0                	test   eax,eax
c000d165:	74 2a                	je     c000d191 <File::write(unsigned long long, void*, int*)+0x49>
c000d167:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d16d:	85 c0                	test   eax,eax
c000d16f:	74 20                	je     c000d191 <File::write(unsigned long long, void*, int*)+0x49>
c000d171:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d175:	74 21                	je     c000d198 <File::write(unsigned long long, void*, int*)+0x50>
c000d177:	8b 08                	mov    ecx,DWORD PTR [eax]
c000d179:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d17d:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000d183:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d187:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d18b:	5b                   	pop    ebx
c000d18c:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000d18f:	ff e0                	jmp    eax
c000d191:	b8 0b 00 00 00       	mov    eax,0xb
c000d196:	eb 05                	jmp    c000d19d <File::write(unsigned long long, void*, int*)+0x55>
c000d198:	b8 05 00 00 00       	mov    eax,0x5
c000d19d:	5b                   	pop    ebx
c000d19e:	c3                   	ret    
c000d19f:	90                   	nop

c000d1a0 <Directory::read(unsigned long long, void*, int*)>:
c000d1a0:	53                   	push   ebx
c000d1a1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d1a5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d1a9:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000d1b0:	3c 19                	cmp    al,0x19
c000d1b2:	77 35                	ja     c000d1e9 <Directory::read(unsigned long long, void*, int*)+0x49>
c000d1b4:	8b 04 85 c0 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7b40]
c000d1bb:	85 c0                	test   eax,eax
c000d1bd:	74 2a                	je     c000d1e9 <Directory::read(unsigned long long, void*, int*)+0x49>
c000d1bf:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d1c5:	85 c0                	test   eax,eax
c000d1c7:	74 20                	je     c000d1e9 <Directory::read(unsigned long long, void*, int*)+0x49>
c000d1c9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d1cd:	74 21                	je     c000d1f0 <Directory::read(unsigned long long, void*, int*)+0x50>
c000d1cf:	8b 08                	mov    ecx,DWORD PTR [eax]
c000d1d1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d1d5:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000d1db:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d1df:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d1e3:	5b                   	pop    ebx
c000d1e4:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000d1e7:	ff e0                	jmp    eax
c000d1e9:	b8 0b 00 00 00       	mov    eax,0xb
c000d1ee:	eb 05                	jmp    c000d1f5 <Directory::read(unsigned long long, void*, int*)+0x55>
c000d1f0:	b8 05 00 00 00       	mov    eax,0x5
c000d1f5:	5b                   	pop    ebx
c000d1f6:	c3                   	ret    
c000d1f7:	90                   	nop

c000d1f8 <Directory::write(unsigned long long, void*, int*)>:
c000d1f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d1fc:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000d203:	b8 0b 00 00 00       	mov    eax,0xb
c000d208:	80 fa 19             	cmp    dl,0x19
c000d20b:	77 18                	ja     c000d225 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000d20d:	8b 14 95 c0 84 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7b40]
c000d214:	85 d2                	test   edx,edx
c000d216:	74 0d                	je     c000d225 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000d218:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000d21f:	19 c0                	sbb    eax,eax
c000d221:	83 e0 0a             	and    eax,0xa
c000d224:	40                   	inc    eax
c000d225:	c3                   	ret    

c000d226 <File::isAtty()>:
c000d226:	31 c0                	xor    eax,eax
c000d228:	c3                   	ret    
c000d229:	90                   	nop

c000d22a <Directory::isAtty()>:
c000d22a:	31 c0                	xor    eax,eax
c000d22c:	c3                   	ret    
c000d22d:	90                   	nop

c000d22e <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000d22e:	b8 0a 00 00 00       	mov    eax,0xa
c000d233:	c3                   	ret    

c000d234 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000d234:	b8 0a 00 00 00       	mov    eax,0xa
c000d239:	c3                   	ret    

c000d23a <Filesystem::allocateSwapfile(char const*, int)>:
c000d23a:	31 c0                	xor    eax,eax
c000d23c:	31 d2                	xor    edx,edx
c000d23e:	c3                   	ret    
c000d23f:	90                   	nop

c000d240 <File::~File()>:
c000d240:	83 ec 0c             	sub    esp,0xc
c000d243:	ba 58 49 02 c0       	mov    edx,0xc0024958
c000d248:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d24c:	89 10                	mov    DWORD PTR [eax],edx
c000d24e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d252:	83 ec 0c             	sub    esp,0xc
c000d255:	50                   	push   eax
c000d256:	e8 ad e7 ff ff       	call   c000ba08 <UnixFile::~UnixFile()>
c000d25b:	83 c4 10             	add    esp,0x10
c000d25e:	90                   	nop
c000d25f:	83 c4 0c             	add    esp,0xc
c000d262:	c3                   	ret    
c000d263:	90                   	nop

c000d264 <File::~File()>:
c000d264:	83 ec 0c             	sub    esp,0xc
c000d267:	83 ec 0c             	sub    esp,0xc
c000d26a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d26e:	e8 cd ff ff ff       	call   c000d240 <File::~File()>
c000d273:	83 c4 10             	add    esp,0x10
c000d276:	83 ec 08             	sub    esp,0x8
c000d279:	68 14 01 00 00       	push   0x114
c000d27e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d282:	e8 5d fc ff ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c000d287:	83 c4 10             	add    esp,0x10
c000d28a:	83 c4 0c             	add    esp,0xc
c000d28d:	c3                   	ret    

c000d28e <Directory::~Directory()>:
c000d28e:	83 ec 0c             	sub    esp,0xc
c000d291:	ba 74 49 02 c0       	mov    edx,0xc0024974
c000d296:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d29a:	89 10                	mov    DWORD PTR [eax],edx
c000d29c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2a0:	83 ec 0c             	sub    esp,0xc
c000d2a3:	50                   	push   eax
c000d2a4:	e8 5f e7 ff ff       	call   c000ba08 <UnixFile::~UnixFile()>
c000d2a9:	83 c4 10             	add    esp,0x10
c000d2ac:	90                   	nop
c000d2ad:	83 c4 0c             	add    esp,0xc
c000d2b0:	c3                   	ret    
c000d2b1:	90                   	nop

c000d2b2 <Directory::~Directory()>:
c000d2b2:	83 ec 0c             	sub    esp,0xc
c000d2b5:	83 ec 0c             	sub    esp,0xc
c000d2b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2bc:	e8 cd ff ff ff       	call   c000d28e <Directory::~Directory()>
c000d2c1:	83 c4 10             	add    esp,0x10
c000d2c4:	83 ec 08             	sub    esp,0x8
c000d2c7:	68 14 01 00 00       	push   0x114
c000d2cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2d0:	e8 0f fc ff ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c000d2d5:	83 c4 10             	add    esp,0x10
c000d2d8:	83 c4 0c             	add    esp,0xc
c000d2db:	c3                   	ret    

c000d2dc <Filesystem::Filesystem()>:
c000d2dc:	ba f0 48 02 c0       	mov    edx,0xc00248f0
c000d2e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d2e5:	89 10                	mov    DWORD PTR [eax],edx
c000d2e7:	8b 15 38 80 02 c0    	mov    edx,DWORD PTR ds:0xc0028038
c000d2ed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d2f1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000d2f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d2f8:	a3 38 80 02 c0       	mov    ds:0xc0028038,eax
c000d2fd:	90                   	nop
c000d2fe:	c3                   	ret    
c000d2ff:	90                   	nop

c000d300 <Filesystem::~Filesystem()>:
c000d300:	ba f0 48 02 c0       	mov    edx,0xc00248f0
c000d305:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d309:	89 10                	mov    DWORD PTR [eax],edx
c000d30b:	90                   	nop
c000d30c:	c3                   	ret    
c000d30d:	90                   	nop

c000d30e <Filesystem::~Filesystem()>:
c000d30e:	83 ec 0c             	sub    esp,0xc
c000d311:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d315:	e8 e6 ff ff ff       	call   c000d300 <Filesystem::~Filesystem()>
c000d31a:	83 c4 04             	add    esp,0x4
c000d31d:	83 ec 08             	sub    esp,0x8
c000d320:	6a 08                	push   0x8
c000d322:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d326:	e8 b9 fb ff ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c000d32b:	83 c4 10             	add    esp,0x10
c000d32e:	83 c4 0c             	add    esp,0xc
c000d331:	c3                   	ret    

c000d332 <Fs::getcwd(Process*, char*, int)>:
c000d332:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d336:	31 c0                	xor    eax,eax
c000d338:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000d33b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000d33f:	7d 15                	jge    c000d356 <Fs::getcwd(Process*, char*, int)+0x24>
c000d341:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d345:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000d34c:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000d34f:	84 c9                	test   cl,cl
c000d351:	74 06                	je     c000d359 <Fs::getcwd(Process*, char*, int)+0x27>
c000d353:	40                   	inc    eax
c000d354:	eb e2                	jmp    c000d338 <Fs::getcwd(Process*, char*, int)+0x6>
c000d356:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000d359:	31 c0                	xor    eax,eax
c000d35b:	c3                   	ret    

c000d35c <Fs::initVFS()>:
c000d35c:	83 ec 18             	sub    esp,0x18
c000d35f:	6a 08                	push   0x8
c000d361:	e8 51 c9 ff ff       	call   c0009cb7 <malloc>
c000d366:	89 04 24             	mov    DWORD PTR [esp],eax
c000d369:	e8 66 e9 00 00       	call   c001bcd4 <FAT::FAT()>
c000d36e:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000d375:	e8 3d c9 ff ff       	call   c0009cb7 <malloc>
c000d37a:	89 04 24             	mov    DWORD PTR [esp],eax
c000d37d:	e8 e2 fb 00 00       	call   c001cf64 <ISO9660::ISO9660()>
c000d382:	83 c4 1c             	add    esp,0x1c
c000d385:	c3                   	ret    

c000d386 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000d386:	55                   	push   ebp
c000d387:	57                   	push   edi
c000d388:	56                   	push   esi
c000d389:	53                   	push   ebx
c000d38a:	81 ec 10 04 00 00    	sub    esp,0x410
c000d390:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000d397:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000d39e:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000d3a5:	68 00 04 00 00       	push   0x400
c000d3aa:	6a 00                	push   0x0
c000d3ac:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000d3b0:	56                   	push   esi
c000d3b1:	e8 c6 32 ff ff       	call   c000067c <memset>
c000d3b6:	83 c4 10             	add    esp,0x10
c000d3b9:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000d3bd:	75 0b                	jne    c000d3ca <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000d3bf:	50                   	push   eax
c000d3c0:	50                   	push   eax
c000d3c1:	57                   	push   edi
c000d3c2:	56                   	push   esi
c000d3c3:	e8 70 33 ff ff       	call   c0000738 <strcpy>
c000d3c8:	eb 41                	jmp    c000d40b <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000d3ca:	8a 07                	mov    al,BYTE PTR [edi]
c000d3cc:	3c 5c                	cmp    al,0x5c
c000d3ce:	74 04                	je     c000d3d4 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000d3d0:	3c 2f                	cmp    al,0x2f
c000d3d2:	75 18                	jne    c000d3ec <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000d3d4:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000d3d7:	3c 60                	cmp    al,0x60
c000d3d9:	7e 03                	jle    c000d3de <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000d3db:	83 e8 20             	sub    eax,0x20
c000d3de:	88 04 24             	mov    BYTE PTR [esp],al
c000d3e1:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000d3e8:	50                   	push   eax
c000d3e9:	50                   	push   eax
c000d3ea:	eb 18                	jmp    c000d404 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000d3ec:	50                   	push   eax
c000d3ed:	50                   	push   eax
c000d3ee:	55                   	push   ebp
c000d3ef:	56                   	push   esi
c000d3f0:	e8 43 33 ff ff       	call   c0000738 <strcpy>
c000d3f5:	5a                   	pop    edx
c000d3f6:	59                   	pop    ecx
c000d3f7:	68 03 5e 02 c0       	push   0xc0025e03
c000d3fc:	56                   	push   esi
c000d3fd:	e8 76 34 ff ff       	call   c0000878 <strcat>
c000d402:	5d                   	pop    ebp
c000d403:	58                   	pop    eax
c000d404:	57                   	push   edi
c000d405:	56                   	push   esi
c000d406:	e8 6d 34 ff ff       	call   c0000878 <strcat>
c000d40b:	83 c4 10             	add    esp,0x10
c000d40e:	8a 04 24             	mov    al,BYTE PTR [esp]
c000d411:	3c 60                	cmp    al,0x60
c000d413:	7e 03                	jle    c000d418 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000d415:	83 e8 20             	sub    eax,0x20
c000d418:	88 04 24             	mov    BYTE PTR [esp],al
c000d41b:	88 03                	mov    BYTE PTR [ebx],al
c000d41d:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000d424:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000d42a:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000d42e:	bf 03 00 00 00       	mov    edi,0x3
c000d433:	b8 03 00 00 00       	mov    eax,0x3
c000d438:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000d43b:	84 d2                	test   dl,dl
c000d43d:	0f 84 91 00 00 00    	je     c000d4d4 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000d443:	8d 4f 01             	lea    ecx,[edi+0x1]
c000d446:	80 fa 5c             	cmp    dl,0x5c
c000d449:	74 05                	je     c000d450 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000d44b:	80 fa 2f             	cmp    dl,0x2f
c000d44e:	75 12                	jne    c000d462 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000d450:	89 c5                	mov    ebp,eax
c000d452:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000d457:	74 09                	je     c000d462 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000d459:	40                   	inc    eax
c000d45a:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000d45e:	89 cf                	mov    edi,ecx
c000d460:	eb d6                	jmp    c000d438 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000d462:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000d467:	75 5b                	jne    c000d4c4 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000d469:	80 fa 2e             	cmp    dl,0x2e
c000d46c:	75 56                	jne    c000d4c4 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000d46e:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000d472:	74 19                	je     c000d48d <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000d474:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000d479:	74 53                	je     c000d4ce <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000d47b:	89 f9                	mov    ecx,edi
c000d47d:	41                   	inc    ecx
c000d47e:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000d481:	80 fa 2f             	cmp    dl,0x2f
c000d484:	74 f7                	je     c000d47d <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000d486:	80 fa 5c             	cmp    dl,0x5c
c000d489:	74 f2                	je     c000d47d <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000d48b:	eb d1                	jmp    c000d45e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d48d:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000d492:	74 3a                	je     c000d4ce <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000d494:	83 f8 03             	cmp    eax,0x3
c000d497:	74 c5                	je     c000d45e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d499:	41                   	inc    ecx
c000d49a:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000d49d:	80 fa 2f             	cmp    dl,0x2f
c000d4a0:	74 f7                	je     c000d499 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000d4a2:	80 fa 5c             	cmp    dl,0x5c
c000d4a5:	74 f2                	je     c000d499 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000d4a7:	48                   	dec    eax
c000d4a8:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000d4ac:	75 06                	jne    c000d4b4 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000d4ae:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d4b2:	eb f3                	jmp    c000d4a7 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000d4b4:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000d4b8:	74 07                	je     c000d4c1 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000d4ba:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d4be:	48                   	dec    eax
c000d4bf:	eb f3                	jmp    c000d4b4 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000d4c1:	40                   	inc    eax
c000d4c2:	eb 9a                	jmp    c000d45e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d4c4:	80 fa 2f             	cmp    dl,0x2f
c000d4c7:	74 95                	je     c000d45e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d4c9:	80 fa 5c             	cmp    dl,0x5c
c000d4cc:	74 90                	je     c000d45e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d4ce:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000d4d1:	40                   	inc    eax
c000d4d2:	eb 8a                	jmp    c000d45e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d4d4:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d4d8:	83 ec 0c             	sub    esp,0xc
c000d4db:	53                   	push   ebx
c000d4dc:	e8 b7 31 ff ff       	call   c0000698 <strlen>
c000d4e1:	83 c4 10             	add    esp,0x10
c000d4e4:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000d4e9:	75 26                	jne    c000d511 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000d4eb:	83 ec 0c             	sub    esp,0xc
c000d4ee:	53                   	push   ebx
c000d4ef:	e8 a4 31 ff ff       	call   c0000698 <strlen>
c000d4f4:	83 c4 10             	add    esp,0x10
c000d4f7:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000d4fc:	74 26                	je     c000d524 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000d4fe:	83 ec 0c             	sub    esp,0xc
c000d501:	53                   	push   ebx
c000d502:	e8 91 31 ff ff       	call   c0000698 <strlen>
c000d507:	83 c4 10             	add    esp,0x10
c000d50a:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000d50f:	eb c7                	jmp    c000d4d8 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000d511:	83 ec 0c             	sub    esp,0xc
c000d514:	53                   	push   ebx
c000d515:	e8 7e 31 ff ff       	call   c0000698 <strlen>
c000d51a:	83 c4 10             	add    esp,0x10
c000d51d:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000d522:	74 c7                	je     c000d4eb <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000d524:	81 c4 0c 04 00 00    	add    esp,0x40c
c000d52a:	5b                   	pop    ebx
c000d52b:	5e                   	pop    esi
c000d52c:	5f                   	pop    edi
c000d52d:	5d                   	pop    ebp
c000d52e:	c3                   	ret    
c000d52f:	90                   	nop

c000d530 <File::File(char const*, Process*)>:
c000d530:	83 ec 0c             	sub    esp,0xc
c000d533:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d537:	83 ec 08             	sub    esp,0x8
c000d53a:	6a 00                	push   0x0
c000d53c:	50                   	push   eax
c000d53d:	e8 e4 e2 ff ff       	call   c000b826 <UnixFile::UnixFile(int)>
c000d542:	83 c4 10             	add    esp,0x10
c000d545:	ba 58 49 02 c0       	mov    edx,0xc0024958
c000d54a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d54e:	89 10                	mov    DWORD PTR [eax],edx
c000d550:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d554:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000d55a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d55e:	83 c0 0d             	add    eax,0xd
c000d561:	83 ec 04             	sub    esp,0x4
c000d564:	52                   	push   edx
c000d565:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d569:	50                   	push   eax
c000d56a:	e8 17 fe ff ff       	call   c000d386 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d56f:	83 c4 10             	add    esp,0x10
c000d572:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d576:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000d579:	8d 50 bf             	lea    edx,[eax-0x41]
c000d57c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d580:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000d586:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d58a:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000d58e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d592:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d598:	0f b6 c0             	movzx  eax,al
c000d59b:	8b 04 85 c0 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7b40]
c000d5a2:	85 c0                	test   eax,eax
c000d5a4:	74 5e                	je     c000d604 <File::File(char const*, Process*)+0xd4>
c000d5a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5aa:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d5b0:	0f b6 c0             	movzx  eax,al
c000d5b3:	8b 04 85 c0 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7b40]
c000d5ba:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d5c0:	85 c0                	test   eax,eax
c000d5c2:	75 40                	jne    c000d604 <File::File(char const*, Process*)+0xd4>
c000d5c4:	83 ec 0c             	sub    esp,0xc
c000d5c7:	68 94 48 02 c0       	push   0xc0024894
c000d5cc:	e8 f4 f9 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000d5d1:	83 c4 10             	add    esp,0x10
c000d5d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5d8:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d5de:	0f b6 c0             	movzx  eax,al
c000d5e1:	8b 04 85 c0 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7b40]
c000d5e8:	83 ec 0c             	sub    esp,0xc
c000d5eb:	50                   	push   eax
c000d5ec:	e8 91 21 00 00       	call   c000f782 <LogicalDisk::mount()>
c000d5f1:	83 c4 10             	add    esp,0x10
c000d5f4:	83 ec 0c             	sub    esp,0xc
c000d5f7:	68 33 6b 02 c0       	push   0xc0026b33
c000d5fc:	e8 c4 f9 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000d601:	83 c4 10             	add    esp,0x10
c000d604:	90                   	nop
c000d605:	83 c4 0c             	add    esp,0xc
c000d608:	c3                   	ret    
c000d609:	90                   	nop

c000d60a <File::open(FileOpenMode)>:
c000d60a:	53                   	push   ebx
c000d60b:	b8 0b 00 00 00       	mov    eax,0xb
c000d610:	83 ec 08             	sub    esp,0x8
c000d613:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d617:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000d61e:	80 fa 19             	cmp    dl,0x19
c000d621:	77 40                	ja     c000d663 <File::open(FileOpenMode)+0x59>
c000d623:	8b 14 95 c0 84 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7b40]
c000d62a:	85 d2                	test   edx,edx
c000d62c:	74 35                	je     c000d663 <File::open(FileOpenMode)+0x59>
c000d62e:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d634:	85 d2                	test   edx,edx
c000d636:	74 2b                	je     c000d663 <File::open(FileOpenMode)+0x59>
c000d638:	b8 06 00 00 00       	mov    eax,0x6
c000d63d:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000d641:	75 20                	jne    c000d663 <File::open(FileOpenMode)+0x59>
c000d643:	8b 02                	mov    eax,DWORD PTR [edx]
c000d645:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000d64b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d64f:	51                   	push   ecx
c000d650:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000d653:	51                   	push   ecx
c000d654:	52                   	push   edx
c000d655:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000d658:	83 c4 10             	add    esp,0x10
c000d65b:	85 c0                	test   eax,eax
c000d65d:	75 04                	jne    c000d663 <File::open(FileOpenMode)+0x59>
c000d65f:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000d663:	83 c4 08             	add    esp,0x8
c000d666:	5b                   	pop    ebx
c000d667:	c3                   	ret    

c000d668 <File::close()>:
c000d668:	53                   	push   ebx
c000d669:	b8 0b 00 00 00       	mov    eax,0xb
c000d66e:	83 ec 08             	sub    esp,0x8
c000d671:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d675:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d67c:	80 fa 19             	cmp    dl,0x19
c000d67f:	77 41                	ja     c000d6c2 <File::close()+0x5a>
c000d681:	8b 1c 95 c0 84 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd7b40]
c000d688:	85 db                	test   ebx,ebx
c000d68a:	74 36                	je     c000d6c2 <File::close()+0x5a>
c000d68c:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000d693:	74 2d                	je     c000d6c2 <File::close()+0x5a>
c000d695:	b8 05 00 00 00       	mov    eax,0x5
c000d69a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d69e:	74 22                	je     c000d6c2 <File::close()+0x5a>
c000d6a0:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000d6a4:	8b 04 95 c0 84 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7b40]
c000d6ab:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d6b1:	53                   	push   ebx
c000d6b2:	53                   	push   ebx
c000d6b3:	8b 10                	mov    edx,DWORD PTR [eax]
c000d6b5:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d6bb:	50                   	push   eax
c000d6bc:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000d6bf:	83 c4 10             	add    esp,0x10
c000d6c2:	83 c4 08             	add    esp,0x8
c000d6c5:	5b                   	pop    ebx
c000d6c6:	c3                   	ret    
c000d6c7:	90                   	nop

c000d6c8 <File::seek(unsigned long long)>:
c000d6c8:	56                   	push   esi
c000d6c9:	53                   	push   ebx
c000d6ca:	b8 0b 00 00 00       	mov    eax,0xb
c000d6cf:	51                   	push   ecx
c000d6d0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d6d4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d6d8:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000d6df:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d6e3:	80 fa 19             	cmp    dl,0x19
c000d6e6:	77 31                	ja     c000d719 <File::seek(unsigned long long)+0x51>
c000d6e8:	8b 14 95 c0 84 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7b40]
c000d6ef:	85 d2                	test   edx,edx
c000d6f1:	74 26                	je     c000d719 <File::seek(unsigned long long)+0x51>
c000d6f3:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d6f9:	85 d2                	test   edx,edx
c000d6fb:	74 1c                	je     c000d719 <File::seek(unsigned long long)+0x51>
c000d6fd:	b8 05 00 00 00       	mov    eax,0x5
c000d702:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000d706:	74 11                	je     c000d719 <File::seek(unsigned long long)+0x51>
c000d708:	8b 02                	mov    eax,DWORD PTR [edx]
c000d70a:	53                   	push   ebx
c000d70b:	51                   	push   ecx
c000d70c:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000d712:	52                   	push   edx
c000d713:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d716:	83 c4 10             	add    esp,0x10
c000d719:	5a                   	pop    edx
c000d71a:	5b                   	pop    ebx
c000d71b:	5e                   	pop    esi
c000d71c:	c3                   	ret    
c000d71d:	90                   	nop

c000d71e <File::tell(unsigned long long*)>:
c000d71e:	83 ec 0c             	sub    esp,0xc
c000d721:	b8 0b 00 00 00       	mov    eax,0xb
c000d726:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d72a:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d731:	80 fa 19             	cmp    dl,0x19
c000d734:	77 34                	ja     c000d76a <File::tell(unsigned long long*)+0x4c>
c000d736:	8b 14 95 c0 84 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7b40]
c000d73d:	85 d2                	test   edx,edx
c000d73f:	74 29                	je     c000d76a <File::tell(unsigned long long*)+0x4c>
c000d741:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d747:	85 d2                	test   edx,edx
c000d749:	74 1f                	je     c000d76a <File::tell(unsigned long long*)+0x4c>
c000d74b:	b8 05 00 00 00       	mov    eax,0x5
c000d750:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d754:	74 14                	je     c000d76a <File::tell(unsigned long long*)+0x4c>
c000d756:	50                   	push   eax
c000d757:	8b 02                	mov    eax,DWORD PTR [edx]
c000d759:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d75d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d763:	52                   	push   edx
c000d764:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d767:	83 c4 10             	add    esp,0x10
c000d76a:	83 c4 0c             	add    esp,0xc
c000d76d:	c3                   	ret    

c000d76e <File::rewind()>:
c000d76e:	83 ec 10             	sub    esp,0x10
c000d771:	6a 00                	push   0x0
c000d773:	6a 00                	push   0x0
c000d775:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d779:	e8 4a ff ff ff       	call   c000d6c8 <File::seek(unsigned long long)>
c000d77e:	83 c4 1c             	add    esp,0x1c
c000d781:	c3                   	ret    

c000d782 <File::unlink()>:
c000d782:	83 ec 0c             	sub    esp,0xc
c000d785:	b8 0b 00 00 00       	mov    eax,0xb
c000d78a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d78e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d795:	80 f9 19             	cmp    cl,0x19
c000d798:	77 2f                	ja     c000d7c9 <File::unlink()+0x47>
c000d79a:	8b 0c 8d c0 84 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7b40]
c000d7a1:	85 c9                	test   ecx,ecx
c000d7a3:	74 24                	je     c000d7c9 <File::unlink()+0x47>
c000d7a5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d7ab:	85 c9                	test   ecx,ecx
c000d7ad:	74 1a                	je     c000d7c9 <File::unlink()+0x47>
c000d7af:	b8 06 00 00 00       	mov    eax,0x6
c000d7b4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d7b8:	75 0f                	jne    c000d7c9 <File::unlink()+0x47>
c000d7ba:	83 c2 0d             	add    edx,0xd
c000d7bd:	50                   	push   eax
c000d7be:	50                   	push   eax
c000d7bf:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d7c1:	52                   	push   edx
c000d7c2:	51                   	push   ecx
c000d7c3:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000d7c6:	83 c4 10             	add    esp,0x10
c000d7c9:	83 c4 0c             	add    esp,0xc
c000d7cc:	c3                   	ret    
c000d7cd:	90                   	nop

c000d7ce <File::rename(char const*)>:
c000d7ce:	83 ec 0c             	sub    esp,0xc
c000d7d1:	b8 0b 00 00 00       	mov    eax,0xb
c000d7d6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d7da:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d7e1:	80 f9 19             	cmp    cl,0x19
c000d7e4:	77 32                	ja     c000d818 <File::rename(char const*)+0x4a>
c000d7e6:	8b 0c 8d c0 84 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7b40]
c000d7ed:	85 c9                	test   ecx,ecx
c000d7ef:	74 27                	je     c000d818 <File::rename(char const*)+0x4a>
c000d7f1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d7f7:	85 c9                	test   ecx,ecx
c000d7f9:	74 1d                	je     c000d818 <File::rename(char const*)+0x4a>
c000d7fb:	b8 06 00 00 00       	mov    eax,0x6
c000d800:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d804:	75 12                	jne    c000d818 <File::rename(char const*)+0x4a>
c000d806:	83 c2 0d             	add    edx,0xd
c000d809:	50                   	push   eax
c000d80a:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d80c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d810:	52                   	push   edx
c000d811:	51                   	push   ecx
c000d812:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000d815:	83 c4 10             	add    esp,0x10
c000d818:	83 c4 0c             	add    esp,0xc
c000d81b:	c3                   	ret    

c000d81c <File::chfatattr(unsigned char, unsigned char)>:
c000d81c:	57                   	push   edi
c000d81d:	b8 0b 00 00 00       	mov    eax,0xb
c000d822:	56                   	push   esi
c000d823:	53                   	push   ebx
c000d824:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d828:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d82c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d833:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000d837:	80 f9 19             	cmp    cl,0x19
c000d83a:	77 37                	ja     c000d873 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d83c:	8b 0c 8d c0 84 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7b40]
c000d843:	85 c9                	test   ecx,ecx
c000d845:	74 2c                	je     c000d873 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d847:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d84d:	85 c9                	test   ecx,ecx
c000d84f:	74 22                	je     c000d873 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d851:	b8 06 00 00 00       	mov    eax,0x6
c000d856:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d85a:	75 17                	jne    c000d873 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d85c:	8b 39                	mov    edi,DWORD PTR [ecx]
c000d85e:	89 f0                	mov    eax,esi
c000d860:	83 c2 0d             	add    edx,0xd
c000d863:	0f b6 f0             	movzx  esi,al
c000d866:	0f b6 db             	movzx  ebx,bl
c000d869:	56                   	push   esi
c000d86a:	53                   	push   ebx
c000d86b:	52                   	push   edx
c000d86c:	51                   	push   ecx
c000d86d:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000d870:	83 c4 10             	add    esp,0x10
c000d873:	5b                   	pop    ebx
c000d874:	5e                   	pop    esi
c000d875:	5f                   	pop    edi
c000d876:	c3                   	ret    
c000d877:	90                   	nop

c000d878 <File::exists()>:
c000d878:	83 ec 0c             	sub    esp,0xc
c000d87b:	31 c0                	xor    eax,eax
c000d87d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d881:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d888:	80 f9 19             	cmp    cl,0x19
c000d88b:	77 24                	ja     c000d8b1 <File::exists()+0x39>
c000d88d:	8b 0c 8d c0 84 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7b40]
c000d894:	85 c9                	test   ecx,ecx
c000d896:	74 19                	je     c000d8b1 <File::exists()+0x39>
c000d898:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d89e:	85 c9                	test   ecx,ecx
c000d8a0:	74 0f                	je     c000d8b1 <File::exists()+0x39>
c000d8a2:	83 c2 0d             	add    edx,0xd
c000d8a5:	50                   	push   eax
c000d8a6:	50                   	push   eax
c000d8a7:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d8a9:	52                   	push   edx
c000d8aa:	51                   	push   ecx
c000d8ab:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000d8ae:	83 c4 10             	add    esp,0x10
c000d8b1:	83 c4 0c             	add    esp,0xc
c000d8b4:	c3                   	ret    
c000d8b5:	90                   	nop

c000d8b6 <File::stat(unsigned long long*, bool*)>:
c000d8b6:	56                   	push   esi
c000d8b7:	53                   	push   ebx
c000d8b8:	50                   	push   eax
c000d8b9:	b8 0b 00 00 00       	mov    eax,0xb
c000d8be:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d8c2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000d8c6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d8cd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d8d1:	80 f9 19             	cmp    cl,0x19
c000d8d4:	77 3d                	ja     c000d913 <File::stat(unsigned long long*, bool*)+0x5d>
c000d8d6:	8b 0c 8d c0 84 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7b40]
c000d8dd:	85 c9                	test   ecx,ecx
c000d8df:	74 32                	je     c000d913 <File::stat(unsigned long long*, bool*)+0x5d>
c000d8e1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d8e7:	85 c9                	test   ecx,ecx
c000d8e9:	74 28                	je     c000d913 <File::stat(unsigned long long*, bool*)+0x5d>
c000d8eb:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d8ed:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d8f1:	74 13                	je     c000d906 <File::stat(unsigned long long*, bool*)+0x50>
c000d8f3:	83 ec 04             	sub    esp,0x4
c000d8f6:	56                   	push   esi
c000d8f7:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000d8fd:	51                   	push   ecx
c000d8fe:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000d901:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000d904:	eb 0a                	jmp    c000d910 <File::stat(unsigned long long*, bool*)+0x5a>
c000d906:	53                   	push   ebx
c000d907:	83 c2 0d             	add    edx,0xd
c000d90a:	56                   	push   esi
c000d90b:	52                   	push   edx
c000d90c:	51                   	push   ecx
c000d90d:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000d910:	83 c4 10             	add    esp,0x10
c000d913:	5a                   	pop    edx
c000d914:	5b                   	pop    ebx
c000d915:	5e                   	pop    esi
c000d916:	c3                   	ret    

c000d917 <Fs::setcwd(Process*, char*)>:
c000d917:	55                   	push   ebp
c000d918:	57                   	push   edi
c000d919:	56                   	push   esi
c000d91a:	53                   	push   ebx
c000d91b:	81 ec 20 02 00 00    	sub    esp,0x220
c000d921:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000d928:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000d92e:	57                   	push   edi
c000d92f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000d936:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000d93a:	56                   	push   esi
c000d93b:	e8 46 fa ff ff       	call   c000d386 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d940:	89 34 24             	mov    DWORD PTR [esp],esi
c000d943:	e8 50 2d ff ff       	call   c0000698 <strlen>
c000d948:	83 c4 10             	add    esp,0x10
c000d94b:	83 f8 02             	cmp    eax,0x2
c000d94e:	77 15                	ja     c000d965 <Fs::setcwd(Process*, char*)+0x4e>
c000d950:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000d955:	83 eb 41             	sub    ebx,0x41
c000d958:	8b 04 9d c0 84 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd7b40]
c000d95f:	85 c0                	test   eax,eax
c000d961:	75 1c                	jne    c000d97f <Fs::setcwd(Process*, char*)+0x68>
c000d963:	eb 4c                	jmp    c000d9b1 <Fs::setcwd(Process*, char*)+0x9a>
c000d965:	83 ec 0c             	sub    esp,0xc
c000d968:	56                   	push   esi
c000d969:	e8 2a 2d ff ff       	call   c0000698 <strlen>
c000d96e:	83 c4 10             	add    esp,0x10
c000d971:	83 f8 03             	cmp    eax,0x3
c000d974:	75 74                	jne    c000d9ea <Fs::setcwd(Process*, char*)+0xd3>
c000d976:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000d97b:	75 6d                	jne    c000d9ea <Fs::setcwd(Process*, char*)+0xd3>
c000d97d:	eb d1                	jmp    c000d950 <Fs::setcwd(Process*, char*)+0x39>
c000d97f:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000d986:	75 29                	jne    c000d9b1 <Fs::setcwd(Process*, char*)+0x9a>
c000d988:	83 ec 0c             	sub    esp,0xc
c000d98b:	68 6c 48 02 c0       	push   0xc002486c
c000d990:	e8 30 f6 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000d995:	5a                   	pop    edx
c000d996:	ff 34 9d c0 84 02 c0 	push   DWORD PTR [ebx*4-0x3ffd7b40]
c000d99d:	e8 e0 1d 00 00       	call   c000f782 <LogicalDisk::mount()>
c000d9a2:	c7 04 24 33 6b 02 c0 	mov    DWORD PTR [esp],0xc0026b33
c000d9a9:	e8 17 f6 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000d9ae:	83 c4 10             	add    esp,0x10
c000d9b1:	b8 03 00 00 00       	mov    eax,0x3
c000d9b6:	83 fb 19             	cmp    ebx,0x19
c000d9b9:	0f 87 c6 00 00 00    	ja     c000da85 <Fs::setcwd(Process*, char*)+0x16e>
c000d9bf:	8b 14 9d c0 84 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd7b40]
c000d9c6:	b8 05 00 00 00       	mov    eax,0x5
c000d9cb:	85 d2                	test   edx,edx
c000d9cd:	0f 84 b2 00 00 00    	je     c000da85 <Fs::setcwd(Process*, char*)+0x16e>
c000d9d3:	b8 06 00 00 00       	mov    eax,0x6
c000d9d8:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000d9df:	0f 85 92 00 00 00    	jne    c000da77 <Fs::setcwd(Process*, char*)+0x160>
c000d9e5:	e9 9b 00 00 00       	jmp    c000da85 <Fs::setcwd(Process*, char*)+0x16e>
c000d9ea:	83 ec 0c             	sub    esp,0xc
c000d9ed:	68 14 01 00 00       	push   0x114
c000d9f2:	e8 c0 c2 ff ff       	call   c0009cb7 <malloc>
c000d9f7:	83 c4 0c             	add    esp,0xc
c000d9fa:	89 c3                	mov    ebx,eax
c000d9fc:	55                   	push   ebp
c000d9fd:	56                   	push   esi
c000d9fe:	50                   	push   eax
c000d9ff:	e8 2c fb ff ff       	call   c000d530 <File::File(char const*, Process*)>
c000da04:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000da09:	83 c4 0c             	add    esp,0xc
c000da0c:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000da10:	50                   	push   eax
c000da11:	8d 44 24 10          	lea    eax,[esp+0x10]
c000da15:	50                   	push   eax
c000da16:	53                   	push   ebx
c000da17:	e8 9a fe ff ff       	call   c000d8b6 <File::stat(unsigned long long*, bool*)>
c000da1c:	83 c4 10             	add    esp,0x10
c000da1f:	83 f8 02             	cmp    eax,0x2
c000da22:	74 04                	je     c000da28 <Fs::setcwd(Process*, char*)+0x111>
c000da24:	85 c0                	test   eax,eax
c000da26:	74 1c                	je     c000da44 <Fs::setcwd(Process*, char*)+0x12d>
c000da28:	b8 01 00 00 00       	mov    eax,0x1
c000da2d:	85 db                	test   ebx,ebx
c000da2f:	74 54                	je     c000da85 <Fs::setcwd(Process*, char*)+0x16e>
c000da31:	83 ec 0c             	sub    esp,0xc
c000da34:	8b 03                	mov    eax,DWORD PTR [ebx]
c000da36:	53                   	push   ebx
c000da37:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000da3a:	83 c4 10             	add    esp,0x10
c000da3d:	b8 01 00 00 00       	mov    eax,0x1
c000da42:	eb 41                	jmp    c000da85 <Fs::setcwd(Process*, char*)+0x16e>
c000da44:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000da49:	75 1c                	jne    c000da67 <Fs::setcwd(Process*, char*)+0x150>
c000da4b:	b8 02 00 00 00       	mov    eax,0x2
c000da50:	85 db                	test   ebx,ebx
c000da52:	74 31                	je     c000da85 <Fs::setcwd(Process*, char*)+0x16e>
c000da54:	83 ec 0c             	sub    esp,0xc
c000da57:	8b 03                	mov    eax,DWORD PTR [ebx]
c000da59:	53                   	push   ebx
c000da5a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000da5d:	83 c4 10             	add    esp,0x10
c000da60:	b8 02 00 00 00       	mov    eax,0x2
c000da65:	eb 1e                	jmp    c000da85 <Fs::setcwd(Process*, char*)+0x16e>
c000da67:	85 db                	test   ebx,ebx
c000da69:	74 0c                	je     c000da77 <Fs::setcwd(Process*, char*)+0x160>
c000da6b:	83 ec 0c             	sub    esp,0xc
c000da6e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000da70:	53                   	push   ebx
c000da71:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000da74:	83 c4 10             	add    esp,0x10
c000da77:	50                   	push   eax
c000da78:	50                   	push   eax
c000da79:	56                   	push   esi
c000da7a:	57                   	push   edi
c000da7b:	e8 b8 2c ff ff       	call   c0000738 <strcpy>
c000da80:	83 c4 10             	add    esp,0x10
c000da83:	31 c0                	xor    eax,eax
c000da85:	81 c4 1c 02 00 00    	add    esp,0x21c
c000da8b:	5b                   	pop    ebx
c000da8c:	5e                   	pop    esi
c000da8d:	5f                   	pop    edi
c000da8e:	5d                   	pop    ebp
c000da8f:	c3                   	ret    

c000da90 <Directory::Directory(char const*, Process*)>:
c000da90:	83 ec 0c             	sub    esp,0xc
c000da93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da97:	83 ec 08             	sub    esp,0x8
c000da9a:	6a 00                	push   0x0
c000da9c:	50                   	push   eax
c000da9d:	e8 84 dd ff ff       	call   c000b826 <UnixFile::UnixFile(int)>
c000daa2:	83 c4 10             	add    esp,0x10
c000daa5:	ba 74 49 02 c0       	mov    edx,0xc0024974
c000daaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daae:	89 10                	mov    DWORD PTR [eax],edx
c000dab0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000dab4:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000daba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dabe:	83 c0 0d             	add    eax,0xd
c000dac1:	83 ec 04             	sub    esp,0x4
c000dac4:	52                   	push   edx
c000dac5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dac9:	50                   	push   eax
c000daca:	e8 b7 f8 ff ff       	call   c000d386 <Fs::standardiseFiles(char*, char const*, char const*)>
c000dacf:	83 c4 10             	add    esp,0x10
c000dad2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dad6:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000dad9:	8d 50 bf             	lea    edx,[eax-0x41]
c000dadc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dae0:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000dae6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daea:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000daee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daf2:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000daf8:	0f b6 c0             	movzx  eax,al
c000dafb:	8b 04 85 c0 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7b40]
c000db02:	85 c0                	test   eax,eax
c000db04:	74 5e                	je     c000db64 <Directory::Directory(char const*, Process*)+0xd4>
c000db06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db0a:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000db10:	0f b6 c0             	movzx  eax,al
c000db13:	8b 04 85 c0 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7b40]
c000db1a:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000db20:	85 c0                	test   eax,eax
c000db22:	75 40                	jne    c000db64 <Directory::Directory(char const*, Process*)+0xd4>
c000db24:	83 ec 0c             	sub    esp,0xc
c000db27:	68 bc 48 02 c0       	push   0xc00248bc
c000db2c:	e8 94 f4 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000db31:	83 c4 10             	add    esp,0x10
c000db34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db38:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000db3e:	0f b6 c0             	movzx  eax,al
c000db41:	8b 04 85 c0 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7b40]
c000db48:	83 ec 0c             	sub    esp,0xc
c000db4b:	50                   	push   eax
c000db4c:	e8 31 1c 00 00       	call   c000f782 <LogicalDisk::mount()>
c000db51:	83 c4 10             	add    esp,0x10
c000db54:	83 ec 0c             	sub    esp,0xc
c000db57:	68 33 6b 02 c0       	push   0xc0026b33
c000db5c:	e8 64 f4 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000db61:	83 c4 10             	add    esp,0x10
c000db64:	90                   	nop
c000db65:	83 c4 0c             	add    esp,0xc
c000db68:	c3                   	ret    
c000db69:	90                   	nop

c000db6a <Directory::open()>:
c000db6a:	53                   	push   ebx
c000db6b:	b8 0b 00 00 00       	mov    eax,0xb
c000db70:	83 ec 08             	sub    esp,0x8
c000db73:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000db77:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000db7e:	80 fa 19             	cmp    dl,0x19
c000db81:	77 3d                	ja     c000dbc0 <Directory::open()+0x56>
c000db83:	8b 14 95 c0 84 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7b40]
c000db8a:	85 d2                	test   edx,edx
c000db8c:	74 32                	je     c000dbc0 <Directory::open()+0x56>
c000db8e:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000db94:	85 d2                	test   edx,edx
c000db96:	74 28                	je     c000dbc0 <Directory::open()+0x56>
c000db98:	b8 06 00 00 00       	mov    eax,0x6
c000db9d:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000dba1:	75 1d                	jne    c000dbc0 <Directory::open()+0x56>
c000dba3:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000dba9:	50                   	push   eax
c000dbaa:	8b 02                	mov    eax,DWORD PTR [edx]
c000dbac:	51                   	push   ecx
c000dbad:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000dbb0:	51                   	push   ecx
c000dbb1:	52                   	push   edx
c000dbb2:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000dbb5:	83 c4 10             	add    esp,0x10
c000dbb8:	85 c0                	test   eax,eax
c000dbba:	75 04                	jne    c000dbc0 <Directory::open()+0x56>
c000dbbc:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000dbc0:	83 c4 08             	add    esp,0x8
c000dbc3:	5b                   	pop    ebx
c000dbc4:	c3                   	ret    
c000dbc5:	90                   	nop

c000dbc6 <Directory::close()>:
c000dbc6:	53                   	push   ebx
c000dbc7:	b8 0b 00 00 00       	mov    eax,0xb
c000dbcc:	83 ec 08             	sub    esp,0x8
c000dbcf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000dbd3:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000dbda:	80 fa 19             	cmp    dl,0x19
c000dbdd:	77 41                	ja     c000dc20 <Directory::close()+0x5a>
c000dbdf:	8b 1c 95 c0 84 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd7b40]
c000dbe6:	85 db                	test   ebx,ebx
c000dbe8:	74 36                	je     c000dc20 <Directory::close()+0x5a>
c000dbea:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000dbf1:	74 2d                	je     c000dc20 <Directory::close()+0x5a>
c000dbf3:	b8 05 00 00 00       	mov    eax,0x5
c000dbf8:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000dbfc:	74 22                	je     c000dc20 <Directory::close()+0x5a>
c000dbfe:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000dc02:	8b 04 95 c0 84 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7b40]
c000dc09:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000dc0f:	53                   	push   ebx
c000dc10:	53                   	push   ebx
c000dc11:	8b 10                	mov    edx,DWORD PTR [eax]
c000dc13:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000dc19:	50                   	push   eax
c000dc1a:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000dc1d:	83 c4 10             	add    esp,0x10
c000dc20:	83 c4 08             	add    esp,0x8
c000dc23:	5b                   	pop    ebx
c000dc24:	c3                   	ret    
c000dc25:	90                   	nop

c000dc26 <Directory::unlink()>:
c000dc26:	83 ec 0c             	sub    esp,0xc
c000dc29:	b8 0b 00 00 00       	mov    eax,0xb
c000dc2e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dc32:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000dc39:	80 f9 19             	cmp    cl,0x19
c000dc3c:	77 2f                	ja     c000dc6d <Directory::unlink()+0x47>
c000dc3e:	8b 0c 8d c0 84 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7b40]
c000dc45:	85 c9                	test   ecx,ecx
c000dc47:	74 24                	je     c000dc6d <Directory::unlink()+0x47>
c000dc49:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000dc4f:	85 c9                	test   ecx,ecx
c000dc51:	74 1a                	je     c000dc6d <Directory::unlink()+0x47>
c000dc53:	b8 06 00 00 00       	mov    eax,0x6
c000dc58:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000dc5c:	75 0f                	jne    c000dc6d <Directory::unlink()+0x47>
c000dc5e:	83 c2 0d             	add    edx,0xd
c000dc61:	50                   	push   eax
c000dc62:	50                   	push   eax
c000dc63:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dc65:	52                   	push   edx
c000dc66:	51                   	push   ecx
c000dc67:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000dc6a:	83 c4 10             	add    esp,0x10
c000dc6d:	83 c4 0c             	add    esp,0xc
c000dc70:	c3                   	ret    
c000dc71:	90                   	nop

c000dc72 <Directory::rename(char const*)>:
c000dc72:	83 ec 0c             	sub    esp,0xc
c000dc75:	b8 0b 00 00 00       	mov    eax,0xb
c000dc7a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dc7e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000dc85:	80 f9 19             	cmp    cl,0x19
c000dc88:	77 32                	ja     c000dcbc <Directory::rename(char const*)+0x4a>
c000dc8a:	8b 0c 8d c0 84 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7b40]
c000dc91:	85 c9                	test   ecx,ecx
c000dc93:	74 27                	je     c000dcbc <Directory::rename(char const*)+0x4a>
c000dc95:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000dc9b:	85 c9                	test   ecx,ecx
c000dc9d:	74 1d                	je     c000dcbc <Directory::rename(char const*)+0x4a>
c000dc9f:	b8 06 00 00 00       	mov    eax,0x6
c000dca4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000dca8:	75 12                	jne    c000dcbc <Directory::rename(char const*)+0x4a>
c000dcaa:	83 c2 0d             	add    edx,0xd
c000dcad:	50                   	push   eax
c000dcae:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dcb0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dcb4:	52                   	push   edx
c000dcb5:	51                   	push   ecx
c000dcb6:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000dcb9:	83 c4 10             	add    esp,0x10
c000dcbc:	83 c4 0c             	add    esp,0xc
c000dcbf:	c3                   	ret    

c000dcc0 <Directory::exists()>:
c000dcc0:	83 ec 0c             	sub    esp,0xc
c000dcc3:	31 c0                	xor    eax,eax
c000dcc5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dcc9:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000dcd0:	80 f9 19             	cmp    cl,0x19
c000dcd3:	77 24                	ja     c000dcf9 <Directory::exists()+0x39>
c000dcd5:	8b 0c 8d c0 84 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7b40]
c000dcdc:	85 c9                	test   ecx,ecx
c000dcde:	74 19                	je     c000dcf9 <Directory::exists()+0x39>
c000dce0:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000dce6:	85 c9                	test   ecx,ecx
c000dce8:	74 0f                	je     c000dcf9 <Directory::exists()+0x39>
c000dcea:	83 c2 0d             	add    edx,0xd
c000dced:	50                   	push   eax
c000dcee:	50                   	push   eax
c000dcef:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dcf1:	52                   	push   edx
c000dcf2:	51                   	push   ecx
c000dcf3:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000dcf6:	83 c4 10             	add    esp,0x10
c000dcf9:	83 c4 0c             	add    esp,0xc
c000dcfc:	c3                   	ret    
c000dcfd:	90                   	nop

c000dcfe <Directory::read(dirent*)>:
c000dcfe:	83 ec 1c             	sub    esp,0x1c
c000dd01:	b8 0b 00 00 00       	mov    eax,0xb
c000dd06:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000dd0a:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000dd11:	80 fa 19             	cmp    dl,0x19
c000dd14:	77 30                	ja     c000dd46 <Directory::read(dirent*)+0x48>
c000dd16:	8b 14 95 c0 84 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7b40]
c000dd1d:	85 d2                	test   edx,edx
c000dd1f:	74 25                	je     c000dd46 <Directory::read(dirent*)+0x48>
c000dd21:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000dd28:	74 1c                	je     c000dd46 <Directory::read(dirent*)+0x48>
c000dd2a:	83 ec 0c             	sub    esp,0xc
c000dd2d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dd2f:	8d 54 24 18          	lea    edx,[esp+0x18]
c000dd33:	52                   	push   edx
c000dd34:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dd38:	6a 00                	push   0x0
c000dd3a:	68 10 01 00 00       	push   0x110
c000dd3f:	51                   	push   ecx
c000dd40:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000dd43:	83 c4 20             	add    esp,0x20
c000dd46:	83 c4 1c             	add    esp,0x1c
c000dd49:	c3                   	ret    

c000dd4a <Directory::create()>:
c000dd4a:	83 ec 0c             	sub    esp,0xc
c000dd4d:	b8 0b 00 00 00       	mov    eax,0xb
c000dd52:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dd56:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000dd5d:	80 f9 19             	cmp    cl,0x19
c000dd60:	77 2f                	ja     c000dd91 <Directory::create()+0x47>
c000dd62:	8b 0c 8d c0 84 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7b40]
c000dd69:	85 c9                	test   ecx,ecx
c000dd6b:	74 24                	je     c000dd91 <Directory::create()+0x47>
c000dd6d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000dd73:	85 c9                	test   ecx,ecx
c000dd75:	74 1a                	je     c000dd91 <Directory::create()+0x47>
c000dd77:	b8 06 00 00 00       	mov    eax,0x6
c000dd7c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000dd80:	75 0f                	jne    c000dd91 <Directory::create()+0x47>
c000dd82:	83 c2 0d             	add    edx,0xd
c000dd85:	50                   	push   eax
c000dd86:	50                   	push   eax
c000dd87:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dd89:	52                   	push   edx
c000dd8a:	51                   	push   ecx
c000dd8b:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000dd8e:	83 c4 10             	add    esp,0x10
c000dd91:	83 c4 0c             	add    esp,0xc
c000dd94:	c3                   	ret    
c000dd95:	90                   	nop

c000dd96 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000dd96:	b8 0a 00 00 00       	mov    eax,0xa
c000dd9b:	c3                   	ret    

c000dd9c <Bus::Bus(char const*)>:
c000dd9c:	83 ec 0c             	sub    esp,0xc
c000dd9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dda3:	83 ec 08             	sub    esp,0x8
c000dda6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddaa:	50                   	push   eax
c000ddab:	e8 ca 08 00 00       	call   c000e67a <Device::Device(char const*)>
c000ddb0:	83 c4 10             	add    esp,0x10
c000ddb3:	ba 90 49 02 c0       	mov    edx,0xc0024990
c000ddb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ddbc:	89 10                	mov    DWORD PTR [eax],edx
c000ddbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ddc2:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000ddcc:	90                   	nop
c000ddcd:	83 c4 0c             	add    esp,0xc
c000ddd0:	c3                   	ret    
c000ddd1:	90                   	nop
c000ddd2:	66 90                	xchg   ax,ax

c000ddd4 <Bus::~Bus()>:
c000ddd4:	83 ec 0c             	sub    esp,0xc
c000ddd7:	ba 90 49 02 c0       	mov    edx,0xc0024990
c000dddc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dde0:	89 10                	mov    DWORD PTR [eax],edx
c000dde2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dde6:	83 ec 0c             	sub    esp,0xc
c000dde9:	50                   	push   eax
c000ddea:	e8 55 05 00 00       	call   c000e344 <Device::~Device()>
c000ddef:	83 c4 10             	add    esp,0x10
c000ddf2:	90                   	nop
c000ddf3:	83 c4 0c             	add    esp,0xc
c000ddf6:	c3                   	ret    
c000ddf7:	90                   	nop

c000ddf8 <Bus::~Bus()>:
c000ddf8:	83 ec 0c             	sub    esp,0xc
c000ddfb:	83 ec 0c             	sub    esp,0xc
c000ddfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de02:	e8 cd ff ff ff       	call   c000ddd4 <Bus::~Bus()>
c000de07:	83 c4 10             	add    esp,0x10
c000de0a:	83 ec 08             	sub    esp,0x8
c000de0d:	68 58 01 00 00       	push   0x158
c000de12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de16:	e8 c9 f0 ff ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c000de1b:	83 c4 10             	add    esp,0x10
c000de1e:	83 c4 0c             	add    esp,0xc
c000de21:	c3                   	ret    

c000de22 <beepThread(void*)>:
c000de22:	83 ec 0c             	sub    esp,0xc
c000de25:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c000de2a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000de2e:	48                   	dec    eax
c000de2f:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c000de34:	75 01                	jne    c000de37 <beepThread(void*)+0x15>
c000de36:	fb                   	sti    
c000de37:	83 ec 0c             	sub    esp,0xc
c000de3a:	6b c2 0a             	imul   eax,edx,0xa
c000de3d:	50                   	push   eax
c000de3e:	e8 f5 9a 00 00       	call   c0017938 <milliTenthSleep(unsigned int)>
c000de43:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000de4a:	e8 78 cc 00 00       	call   c001aac7 <Hal::makeBeep(int)>
c000de4f:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000de57:	83 c4 1c             	add    esp,0x1c
c000de5a:	e9 d9 99 00 00       	jmp    c0017838 <blockTask(TaskState)>

c000de5f <Krnl::beep(int, int, bool)>:
c000de5f:	56                   	push   esi
c000de60:	53                   	push   ebx
c000de61:	83 ec 10             	sub    esp,0x10
c000de64:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000de68:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000de6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de70:	e8 52 cc 00 00       	call   c001aac7 <Hal::makeBeep(int)>
c000de75:	83 c4 10             	add    esp,0x10
c000de78:	89 f0                	mov    eax,esi
c000de7a:	84 c0                	test   al,al
c000de7c:	74 1e                	je     c000de9c <Krnl::beep(int, int, bool)+0x3d>
c000de7e:	83 ec 0c             	sub    esp,0xc
c000de81:	6b db 0a             	imul   ebx,ebx,0xa
c000de84:	53                   	push   ebx
c000de85:	e8 ae 9a 00 00       	call   c0017938 <milliTenthSleep(unsigned int)>
c000de8a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000de92:	83 c4 14             	add    esp,0x14
c000de95:	5b                   	pop    ebx
c000de96:	5e                   	pop    esi
c000de97:	e9 2b cc 00 00       	jmp    c001aac7 <Hal::makeBeep(int)>
c000de9c:	68 e6 00 00 00       	push   0xe6
c000dea1:	53                   	push   ebx
c000dea2:	68 22 de 00 c0       	push   0xc000de22
c000dea7:	ff 35 50 94 02 c0    	push   DWORD PTR ds:0xc0029450
c000dead:	e8 72 95 00 00       	call   c0017424 <Process::createThread(void (*)(void*), void*, int)>
c000deb2:	83 c4 14             	add    esp,0x14
c000deb5:	5b                   	pop    ebx
c000deb6:	5e                   	pop    esi
c000deb7:	c3                   	ret    

c000deb8 <User::loadClockSettings(int)>:
c000deb8:	53                   	push   ebx
c000deb9:	83 ec 14             	sub    esp,0x14
c000debc:	68 14 01 00 00       	push   0x114
c000dec1:	e8 f1 bd ff ff       	call   c0009cb7 <malloc>
c000dec6:	83 c4 0c             	add    esp,0xc
c000dec9:	89 c3                	mov    ebx,eax
c000decb:	ff 35 50 94 02 c0    	push   DWORD PTR ds:0xc0029450
c000ded1:	68 b4 49 02 c0       	push   0xc00249b4
c000ded6:	50                   	push   eax
c000ded7:	e8 54 f6 ff ff       	call   c000d530 <File::File(char const*, Process*)>
c000dedc:	58                   	pop    eax
c000dedd:	5a                   	pop    edx
c000dede:	6a 01                	push   0x1
c000dee0:	53                   	push   ebx
c000dee1:	e8 24 f7 ff ff       	call   c000d60a <File::open(FileOpenMode)>
c000dee6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dee9:	e8 7a f7 ff ff       	call   c000d668 <File::close()>
c000deee:	83 c4 10             	add    esp,0x10
c000def1:	85 db                	test   ebx,ebx
c000def3:	74 0f                	je     c000df04 <User::loadClockSettings(int)+0x4c>
c000def5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000def7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000defb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000defe:	83 c4 08             	add    esp,0x8
c000df01:	5b                   	pop    ebx
c000df02:	ff e0                	jmp    eax
c000df04:	83 c4 08             	add    esp,0x8
c000df07:	5b                   	pop    ebx
c000df08:	c3                   	ret    
c000df09:	90                   	nop

c000df0a <Clock::Clock(char const*)>:
c000df0a:	83 ec 0c             	sub    esp,0xc
c000df0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df11:	83 ec 08             	sub    esp,0x8
c000df14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df18:	50                   	push   eax
c000df19:	e8 5c 07 00 00       	call   c000e67a <Device::Device(char const*)>
c000df1e:	83 c4 10             	add    esp,0x10
c000df21:	ba dc 49 02 c0       	mov    edx,0xc00249dc
c000df26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df2a:	89 10                	mov    DWORD PTR [eax],edx
c000df2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df30:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000df3a:	90                   	nop
c000df3b:	83 c4 0c             	add    esp,0xc
c000df3e:	c3                   	ret    
c000df3f:	90                   	nop

c000df40 <Clock::~Clock()>:
c000df40:	83 ec 0c             	sub    esp,0xc
c000df43:	ba dc 49 02 c0       	mov    edx,0xc00249dc
c000df48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df4c:	89 10                	mov    DWORD PTR [eax],edx
c000df4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df52:	83 ec 0c             	sub    esp,0xc
c000df55:	50                   	push   eax
c000df56:	e8 e9 03 00 00       	call   c000e344 <Device::~Device()>
c000df5b:	83 c4 10             	add    esp,0x10
c000df5e:	90                   	nop
c000df5f:	83 c4 0c             	add    esp,0xc
c000df62:	c3                   	ret    
c000df63:	90                   	nop

c000df64 <Clock::~Clock()>:
c000df64:	83 ec 0c             	sub    esp,0xc
c000df67:	83 ec 0c             	sub    esp,0xc
c000df6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df6e:	e8 cd ff ff ff       	call   c000df40 <Clock::~Clock()>
c000df73:	83 c4 10             	add    esp,0x10
c000df76:	83 ec 08             	sub    esp,0x8
c000df79:	68 58 01 00 00       	push   0x158
c000df7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df82:	e8 5d ef ff ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c000df87:	83 c4 10             	add    esp,0x10
c000df8a:	83 c4 0c             	add    esp,0xc
c000df8d:	c3                   	ret    

c000df8e <Clock::timeInSecondsLocal()>:
c000df8e:	53                   	push   ebx
c000df8f:	83 ec 14             	sub    esp,0x14
c000df92:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000df96:	8b 10                	mov    edx,DWORD PTR [eax]
c000df98:	50                   	push   eax
c000df99:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000df9c:	0f b6 0d 3c 80 02 c0 	movzx  ecx,BYTE PTR ds:0xc002803c
c000dfa3:	03 0d 40 80 02 c0    	add    ecx,DWORD PTR ds:0xc0028040
c000dfa9:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000dfaf:	89 cb                	mov    ebx,ecx
c000dfb1:	c1 fb 1f             	sar    ebx,0x1f
c000dfb4:	01 c8                	add    eax,ecx
c000dfb6:	11 da                	adc    edx,ebx
c000dfb8:	83 c4 10             	add    esp,0x10
c000dfbb:	31 c9                	xor    ecx,ecx
c000dfbd:	80 3d 3d 80 02 c0 00 	cmp    BYTE PTR ds:0xc002803d,0x0
c000dfc4:	74 05                	je     c000dfcb <Clock::timeInSecondsLocal()+0x3d>
c000dfc6:	b9 08 07 00 00       	mov    ecx,0x708
c000dfcb:	31 db                	xor    ebx,ebx
c000dfcd:	01 c8                	add    eax,ecx
c000dfcf:	11 da                	adc    edx,ebx
c000dfd1:	83 c4 08             	add    esp,0x8
c000dfd4:	5b                   	pop    ebx
c000dfd5:	c3                   	ret    

c000dfd6 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000dfd6:	57                   	push   edi
c000dfd7:	56                   	push   esi
c000dfd8:	53                   	push   ebx
c000dfd9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000dfdd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000dfe1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dfe3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000dfe7:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000dfea:	0f b6 05 3c 80 02 c0 	movzx  eax,BYTE PTR ds:0xc002803c
c000dff1:	03 05 40 80 02 c0    	add    eax,DWORD PTR ds:0xc0028040
c000dff7:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000dffd:	99                   	cdq    
c000dffe:	29 c6                	sub    esi,eax
c000e000:	19 d7                	sbb    edi,edx
c000e002:	89 f0                	mov    eax,esi
c000e004:	89 fa                	mov    edx,edi
c000e006:	31 f6                	xor    esi,esi
c000e008:	80 3d 3d 80 02 c0 00 	cmp    BYTE PTR ds:0xc002803d,0x0
c000e00f:	74 05                	je     c000e016 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000e011:	be 08 07 00 00       	mov    esi,0x708
c000e016:	31 ff                	xor    edi,edi
c000e018:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000e01c:	29 f0                	sub    eax,esi
c000e01e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e022:	19 fa                	sbb    edx,edi
c000e024:	89 d8                	mov    eax,ebx
c000e026:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000e02a:	5b                   	pop    ebx
c000e02b:	5e                   	pop    esi
c000e02c:	5f                   	pop    edi
c000e02d:	ff e0                	jmp    eax

c000e02f <datetimeToSeconds(datetime_t)>:
c000e02f:	55                   	push   ebp
c000e030:	57                   	push   edi
c000e031:	56                   	push   esi
c000e032:	53                   	push   ebx
c000e033:	83 ec 14             	sub    esp,0x14
c000e036:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e03a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e03e:	89 d3                	mov    ebx,edx
c000e040:	0f b6 c6             	movzx  eax,dh
c000e043:	c1 eb 10             	shr    ebx,0x10
c000e046:	48                   	dec    eax
c000e047:	66 81 eb 6c 07       	sub    bx,0x76c
c000e04c:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000e050:	0f b6 f5             	movzx  esi,ch
c000e053:	89 cf                	mov    edi,ecx
c000e055:	6b f6 3c             	imul   esi,esi,0x3c
c000e058:	c1 ef 10             	shr    edi,0x10
c000e05b:	0f b6 c9             	movzx  ecx,cl
c000e05e:	89 f8                	mov    eax,edi
c000e060:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000e066:	0f b6 f8             	movzx  edi,al
c000e069:	0f b6 d2             	movzx  edx,dl
c000e06c:	01 fe                	add    esi,edi
c000e06e:	01 f1                	add    ecx,esi
c000e070:	0f b7 f3             	movzx  esi,bx
c000e073:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000e077:	c1 f9 1f             	sar    ecx,0x1f
c000e07a:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000e07f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e083:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000e088:	8b 0c 8d 20 4a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb5e0]
c000e08f:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000e093:	76 29                	jbe    c000e0be <datetimeToSeconds(datetime_t)+0x8f>
c000e095:	f6 c3 03             	test   bl,0x3
c000e098:	75 24                	jne    c000e0be <datetimeToSeconds(datetime_t)+0x8f>
c000e09a:	31 d2                	xor    edx,edx
c000e09c:	bf 64 00 00 00       	mov    edi,0x64
c000e0a1:	89 d8                	mov    eax,ebx
c000e0a3:	66 f7 f7             	div    di
c000e0a6:	66 85 d2             	test   dx,dx
c000e0a9:	75 12                	jne    c000e0bd <datetimeToSeconds(datetime_t)+0x8e>
c000e0ab:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000e0b1:	bf 90 01 00 00       	mov    edi,0x190
c000e0b6:	99                   	cdq    
c000e0b7:	f7 ff                	idiv   edi
c000e0b9:	85 d2                	test   edx,edx
c000e0bb:	75 01                	jne    c000e0be <datetimeToSeconds(datetime_t)+0x8f>
c000e0bd:	41                   	inc    ecx
c000e0be:	66 83 fb 46          	cmp    bx,0x46
c000e0c2:	76 45                	jbe    c000e109 <datetimeToSeconds(datetime_t)+0xda>
c000e0c4:	bb 46 00 00 00       	mov    ebx,0x46
c000e0c9:	bf 64 00 00 00       	mov    edi,0x64
c000e0ce:	bd 90 01 00 00       	mov    ebp,0x190
c000e0d3:	b8 6d 01 00 00       	mov    eax,0x16d
c000e0d8:	f6 c3 03             	test   bl,0x3
c000e0db:	75 23                	jne    c000e100 <datetimeToSeconds(datetime_t)+0xd1>
c000e0dd:	89 d8                	mov    eax,ebx
c000e0df:	99                   	cdq    
c000e0e0:	f7 ff                	idiv   edi
c000e0e2:	b8 6e 01 00 00       	mov    eax,0x16e
c000e0e7:	85 d2                	test   edx,edx
c000e0e9:	75 15                	jne    c000e100 <datetimeToSeconds(datetime_t)+0xd1>
c000e0eb:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000e0f1:	99                   	cdq    
c000e0f2:	f7 fd                	idiv   ebp
c000e0f4:	83 fa 01             	cmp    edx,0x1
c000e0f7:	19 c0                	sbb    eax,eax
c000e0f9:	f7 d0                	not    eax
c000e0fb:	05 6e 01 00 00       	add    eax,0x16e
c000e100:	01 c1                	add    ecx,eax
c000e102:	43                   	inc    ebx
c000e103:	39 f3                	cmp    ebx,esi
c000e105:	7c cc                	jl     c000e0d3 <datetimeToSeconds(datetime_t)+0xa4>
c000e107:	eb 35                	jmp    c000e13e <datetimeToSeconds(datetime_t)+0x10f>
c000e109:	74 33                	je     c000e13e <datetimeToSeconds(datetime_t)+0x10f>
c000e10b:	b8 45 00 00 00       	mov    eax,0x45
c000e110:	89 c2                	mov    edx,eax
c000e112:	83 e2 03             	and    edx,0x3
c000e115:	39 f0                	cmp    eax,esi
c000e117:	7e 0f                	jle    c000e128 <datetimeToSeconds(datetime_t)+0xf9>
c000e119:	83 fa 01             	cmp    edx,0x1
c000e11c:	19 d2                	sbb    edx,edx
c000e11e:	48                   	dec    eax
c000e11f:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000e126:	eb e8                	jmp    c000e110 <datetimeToSeconds(datetime_t)+0xe1>
c000e128:	b8 6d 01 00 00       	mov    eax,0x16d
c000e12d:	85 d2                	test   edx,edx
c000e12f:	75 0b                	jne    c000e13c <datetimeToSeconds(datetime_t)+0x10d>
c000e131:	66 83 fb 01          	cmp    bx,0x1
c000e135:	19 c0                	sbb    eax,eax
c000e137:	05 6e 01 00 00       	add    eax,0x16e
c000e13c:	29 c1                	sub    ecx,eax
c000e13e:	b8 80 51 01 00       	mov    eax,0x15180
c000e143:	f7 e9                	imul   ecx
c000e145:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000e149:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000e14d:	83 c4 14             	add    esp,0x14
c000e150:	5b                   	pop    ebx
c000e151:	5e                   	pop    esi
c000e152:	5f                   	pop    edi
c000e153:	5d                   	pop    ebp
c000e154:	c3                   	ret    
c000e155:	90                   	nop

c000e156 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000e156:	57                   	push   edi
c000e157:	56                   	push   esi
c000e158:	53                   	push   ebx
c000e159:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e15d:	8b 06                	mov    eax,DWORD PTR [esi]
c000e15f:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000e162:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e166:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e16a:	e8 c0 fe ff ff       	call   c000e02f <datetimeToSeconds(datetime_t)>
c000e16f:	59                   	pop    ecx
c000e170:	0f b6 0d 3c 80 02 c0 	movzx  ecx,BYTE PTR ds:0xc002803c
c000e177:	5b                   	pop    ebx
c000e178:	03 0d 40 80 02 c0    	add    ecx,DWORD PTR ds:0xc0028040
c000e17e:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000e184:	89 cb                	mov    ebx,ecx
c000e186:	c1 fb 1f             	sar    ebx,0x1f
c000e189:	29 c8                	sub    eax,ecx
c000e18b:	19 da                	sbb    edx,ebx
c000e18d:	31 c9                	xor    ecx,ecx
c000e18f:	80 3d 3d 80 02 c0 00 	cmp    BYTE PTR ds:0xc002803d,0x0
c000e196:	74 05                	je     c000e19d <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000e198:	b9 08 07 00 00       	mov    ecx,0x708
c000e19d:	31 db                	xor    ebx,ebx
c000e19f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000e1a3:	29 c8                	sub    eax,ecx
c000e1a5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e1a9:	19 da                	sbb    edx,ebx
c000e1ab:	89 f8                	mov    eax,edi
c000e1ad:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000e1b1:	5b                   	pop    ebx
c000e1b2:	5e                   	pop    esi
c000e1b3:	5f                   	pop    edi
c000e1b4:	ff e0                	jmp    eax

c000e1b6 <secondsToDatetime(unsigned long long)>:
c000e1b6:	55                   	push   ebp
c000e1b7:	57                   	push   edi
c000e1b8:	56                   	push   esi
c000e1b9:	53                   	push   ebx
c000e1ba:	83 ec 1c             	sub    esp,0x1c
c000e1bd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e1c1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000e1c5:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e1c9:	6a 00                	push   0x0
c000e1cb:	68 80 51 01 00       	push   0x15180
c000e1d0:	55                   	push   ebp
c000e1d1:	57                   	push   edi
c000e1d2:	e8 49 45 01 00       	call   c0022720 <__udivdi3>
c000e1d7:	83 c4 10             	add    esp,0x10
c000e1da:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000e1e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1e4:	6a 00                	push   0x0
c000e1e6:	68 80 51 01 00       	push   0x15180
c000e1eb:	55                   	push   ebp
c000e1ec:	57                   	push   edi
c000e1ed:	bf 10 0e 00 00       	mov    edi,0xe10
c000e1f2:	e8 29 46 01 00       	call   c0022820 <__umoddi3>
c000e1f7:	83 c4 10             	add    esp,0x10
c000e1fa:	99                   	cdq    
c000e1fb:	f7 ff                	idiv   edi
c000e1fd:	bf 3c 00 00 00       	mov    edi,0x3c
c000e202:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000e205:	89 d0                	mov    eax,edx
c000e207:	99                   	cdq    
c000e208:	f7 ff                	idiv   edi
c000e20a:	85 db                	test   ebx,ebx
c000e20c:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000e20f:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000e212:	79 11                	jns    c000e225 <secondsToDatetime(unsigned long long)+0x6f>
c000e214:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e218:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000e21e:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000e223:	eb 07                	jmp    c000e22c <secondsToDatetime(unsigned long long)+0x76>
c000e225:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000e22a:	89 d8                	mov    eax,ebx
c000e22c:	bf b4 05 00 00       	mov    edi,0x5b4
c000e231:	99                   	cdq    
c000e232:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000e237:	f7 f9                	idiv   ecx
c000e239:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000e23e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e242:	31 d2                	xor    edx,edx
c000e244:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000e24c:	01 c3                	add    ebx,eax
c000e24e:	89 d8                	mov    eax,ebx
c000e250:	f7 f1                	div    ecx
c000e252:	31 d2                	xor    edx,edx
c000e254:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000e257:	89 d8                	mov    eax,ebx
c000e259:	f7 f7                	div    edi
c000e25b:	31 d2                	xor    edx,edx
c000e25d:	29 c1                	sub    ecx,eax
c000e25f:	89 d8                	mov    eax,ebx
c000e261:	f7 f5                	div    ebp
c000e263:	bd 6d 01 00 00       	mov    ebp,0x16d
c000e268:	29 c1                	sub    ecx,eax
c000e26a:	31 d2                	xor    edx,edx
c000e26c:	89 c8                	mov    eax,ecx
c000e26e:	f7 f5                	div    ebp
c000e270:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000e275:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e279:	31 d2                	xor    edx,edx
c000e27b:	89 c8                	mov    eax,ecx
c000e27d:	f7 f5                	div    ebp
c000e27f:	31 d2                	xor    edx,edx
c000e281:	01 c3                	add    ebx,eax
c000e283:	89 c8                	mov    eax,ecx
c000e285:	f7 f7                	div    edi
c000e287:	bf 99 00 00 00       	mov    edi,0x99
c000e28c:	29 c3                	sub    ebx,eax
c000e28e:	31 d2                	xor    edx,edx
c000e290:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000e298:	29 c3                	sub    ebx,eax
c000e29a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000e29d:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000e2a0:	bb 05 00 00 00       	mov    ebx,0x5
c000e2a5:	83 c1 02             	add    ecx,0x2
c000e2a8:	89 c8                	mov    eax,ecx
c000e2aa:	f7 f7                	div    edi
c000e2ac:	31 d2                	xor    edx,edx
c000e2ae:	89 c7                	mov    edi,eax
c000e2b0:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000e2b6:	83 c0 02             	add    eax,0x2
c000e2b9:	f7 f3                	div    ebx
c000e2bb:	89 eb                	mov    ebx,ebp
c000e2bd:	29 c3                	sub    ebx,eax
c000e2bf:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000e2c5:	88 1e                	mov    BYTE PTR [esi],bl
c000e2c7:	19 c0                	sbb    eax,eax
c000e2c9:	31 d2                	xor    edx,edx
c000e2cb:	83 e0 0c             	and    eax,0xc
c000e2ce:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000e2d2:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000e2da:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000e2de:	83 f9 01             	cmp    ecx,0x1
c000e2e1:	0f 96 c2             	setbe  dl
c000e2e4:	41                   	inc    ecx
c000e2e5:	01 d0                	add    eax,edx
c000e2e7:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000e2ea:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000e2ee:	83 c4 1c             	add    esp,0x1c
c000e2f1:	89 f0                	mov    eax,esi
c000e2f3:	5b                   	pop    ebx
c000e2f4:	5e                   	pop    esi
c000e2f5:	5f                   	pop    edi
c000e2f6:	5d                   	pop    ebp
c000e2f7:	c2 04 00             	ret    0x4

c000e2fa <Clock::timeInDatetimeLocal()>:
c000e2fa:	53                   	push   ebx
c000e2fb:	83 ec 14             	sub    esp,0x14
c000e2fe:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e302:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e306:	e8 83 fc ff ff       	call   c000df8e <Clock::timeInSecondsLocal()>
c000e30b:	83 c4 0c             	add    esp,0xc
c000e30e:	52                   	push   edx
c000e30f:	50                   	push   eax
c000e310:	53                   	push   ebx
c000e311:	e8 a0 fe ff ff       	call   c000e1b6 <secondsToDatetime(unsigned long long)>
c000e316:	89 d8                	mov    eax,ebx
c000e318:	83 c4 14             	add    esp,0x14
c000e31b:	5b                   	pop    ebx
c000e31c:	c2 04 00             	ret    0x4
c000e31f:	90                   	nop

c000e320 <Device::hibernate()>:
c000e320:	c3                   	ret    
c000e321:	90                   	nop

c000e322 <Device::wake()>:
c000e322:	c3                   	ret    
c000e323:	90                   	nop

c000e324 <Device::detect()>:
c000e324:	c3                   	ret    
c000e325:	90                   	nop

c000e326 <Device::disableLegacy()>:
c000e326:	c3                   	ret    
c000e327:	90                   	nop

c000e328 <Device::powerSaving(PowerSavingLevel)>:
c000e328:	c3                   	ret    
c000e329:	90                   	nop

c000e32a <DriverlessDevice::close(int, int, void*)>:
c000e32a:	31 c0                	xor    eax,eax
c000e32c:	c3                   	ret    
c000e32d:	90                   	nop

c000e32e <DriverlessDevice::detect()>:
c000e32e:	c3                   	ret    
c000e32f:	90                   	nop

c000e330 <DriverlessDevice::open(int, int, void*)>:
c000e330:	83 ec 18             	sub    esp,0x18
c000e333:	68 50 4a 02 c0       	push   0xc0024a50
c000e338:	e8 9e 5c 00 00       	call   c0013fdb <Krnl::panic(char const*)>
c000e33d:	83 c8 ff             	or     eax,0xffffffff
c000e340:	83 c4 1c             	add    esp,0x1c
c000e343:	c3                   	ret    

c000e344 <Device::~Device()>:
c000e344:	ba b0 4a 02 c0       	mov    edx,0xc0024ab0
c000e349:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e34d:	89 10                	mov    DWORD PTR [eax],edx
c000e34f:	90                   	nop
c000e350:	c3                   	ret    
c000e351:	90                   	nop

c000e352 <Device::~Device()>:
c000e352:	83 ec 0c             	sub    esp,0xc
c000e355:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e359:	e8 e6 ff ff ff       	call   c000e344 <Device::~Device()>
c000e35e:	83 c4 04             	add    esp,0x4
c000e361:	83 ec 08             	sub    esp,0x8
c000e364:	68 58 01 00 00       	push   0x158
c000e369:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e36d:	e8 72 eb ff ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c000e372:	83 c4 10             	add    esp,0x10
c000e375:	83 c4 0c             	add    esp,0xc
c000e378:	c3                   	ret    
c000e379:	90                   	nop

c000e37a <Device::findAndLoadDriver()>:
c000e37a:	c7 44 24 04 6e 4a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024a6e
c000e382:	e9 3e ec ff ff       	jmp    c000cfc5 <Dbg::kprintf(char const*, ...)>
c000e387:	90                   	nop

c000e388 <Device::preOpenPCI(PCIDeviceInfo)>:
c000e388:	57                   	push   edi
c000e389:	b9 09 00 00 00       	mov    ecx,0x9
c000e38e:	56                   	push   esi
c000e38f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000e393:	8d 74 24 10          	lea    esi,[esp+0x10]
c000e397:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000e3a1:	81 c7 18 01 00 00    	add    edi,0x118
c000e3a7:	fc                   	cld    
c000e3a8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000e3aa:	5e                   	pop    esi
c000e3ab:	5f                   	pop    edi
c000e3ac:	c3                   	ret    
c000e3ad:	90                   	nop

c000e3ae <Device::preOpenACPI(void*, char*, char*)>:
c000e3ae:	57                   	push   edi
c000e3af:	b9 1e 00 00 00       	mov    ecx,0x1e
c000e3b4:	56                   	push   esi
c000e3b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e3b9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e3bd:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000e3c7:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000e3cd:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000e3d3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e3d7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e3d9:	b9 0e 00 00 00       	mov    ecx,0xe
c000e3de:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000e3e4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e3e8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e3ea:	5e                   	pop    esi
c000e3eb:	5f                   	pop    edi
c000e3ec:	c3                   	ret    
c000e3ed:	90                   	nop

c000e3ee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000e3ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3f2:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000e3f7:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000e3fe:	75 0b                	jne    c000e40b <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c000e400:	8b 00                	mov    eax,DWORD PTR [eax]
c000e402:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e406:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e409:	eb 1e                	jmp    c000e429 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c000e40b:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c000e410:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e416:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000e41c:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e41e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e422:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e426:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c000e429:	ff e0                	jmp    eax
c000e42b:	90                   	nop

c000e42c <Device::getParent()>:
c000e42c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e430:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000e436:	c3                   	ret    
c000e437:	90                   	nop

c000e438 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000e438:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e43c:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000e441:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000e448:	75 0b                	jne    c000e455 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000e44a:	8b 00                	mov    eax,DWORD PTR [eax]
c000e44c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e450:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000e453:	eb 1e                	jmp    c000e473 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c000e455:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c000e45a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e460:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000e466:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e468:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e46c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e470:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c000e473:	ff e0                	jmp    eax
c000e475:	90                   	nop

c000e476 <Device::addChild(Device*)>:
c000e476:	53                   	push   ebx
c000e477:	83 ec 08             	sub    esp,0x8
c000e47a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e47e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e482:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000e488:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000e48e:	8b 13                	mov    edx,DWORD PTR [ebx]
c000e490:	85 d2                	test   edx,edx
c000e492:	74 04                	je     c000e498 <Device::addChild(Device*)+0x22>
c000e494:	89 d3                	mov    ebx,edx
c000e496:	eb f6                	jmp    c000e48e <Device::addChild(Device*)+0x18>
c000e498:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000e49b:	83 ec 0c             	sub    esp,0xc
c000e49e:	6a 08                	push   0x8
c000e4a0:	e8 12 b8 ff ff       	call   c0009cb7 <malloc>
c000e4a5:	89 03                	mov    DWORD PTR [ebx],eax
c000e4a7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e4ad:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e4b4:	83 c4 18             	add    esp,0x18
c000e4b7:	5b                   	pop    ebx
c000e4b8:	c3                   	ret    
c000e4b9:	90                   	nop

c000e4ba <Device::removeAllChildren()>:
c000e4ba:	56                   	push   esi
c000e4bb:	53                   	push   ebx
c000e4bc:	52                   	push   edx
c000e4bd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e4c1:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000e4c7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e4ca:	74 17                	je     c000e4e3 <Device::removeAllChildren()+0x29>
c000e4cc:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e4cf:	85 c0                	test   eax,eax
c000e4d1:	74 0c                	je     c000e4df <Device::removeAllChildren()+0x25>
c000e4d3:	83 ec 0c             	sub    esp,0xc
c000e4d6:	8b 10                	mov    edx,DWORD PTR [eax]
c000e4d8:	50                   	push   eax
c000e4d9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000e4dc:	83 c4 10             	add    esp,0x10
c000e4df:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e4e1:	eb e4                	jmp    c000e4c7 <Device::removeAllChildren()+0xd>
c000e4e3:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000e4e9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e4ef:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000e4f5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e4fc:	58                   	pop    eax
c000e4fd:	5b                   	pop    ebx
c000e4fe:	5e                   	pop    esi
c000e4ff:	c3                   	ret    

c000e500 <Device::hibernateAll()>:
c000e500:	53                   	push   ebx
c000e501:	83 ec 14             	sub    esp,0x14
c000e504:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e508:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e50a:	53                   	push   ebx
c000e50b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000e50e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e514:	83 c4 10             	add    esp,0x10
c000e517:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e51a:	74 0f                	je     c000e52b <Device::hibernateAll()+0x2b>
c000e51c:	83 ec 0c             	sub    esp,0xc
c000e51f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e522:	e8 d9 ff ff ff       	call   c000e500 <Device::hibernateAll()>
c000e527:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e529:	eb e9                	jmp    c000e514 <Device::hibernateAll()+0x14>
c000e52b:	83 c4 08             	add    esp,0x8
c000e52e:	5b                   	pop    ebx
c000e52f:	c3                   	ret    

c000e530 <Device::wakeAll()>:
c000e530:	53                   	push   ebx
c000e531:	83 ec 14             	sub    esp,0x14
c000e534:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e538:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e53a:	53                   	push   ebx
c000e53b:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000e53e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e544:	83 c4 10             	add    esp,0x10
c000e547:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e54a:	74 0f                	je     c000e55b <Device::wakeAll()+0x2b>
c000e54c:	83 ec 0c             	sub    esp,0xc
c000e54f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e552:	e8 d9 ff ff ff       	call   c000e530 <Device::wakeAll()>
c000e557:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e559:	eb e9                	jmp    c000e544 <Device::wakeAll()+0x14>
c000e55b:	83 c4 08             	add    esp,0x8
c000e55e:	5b                   	pop    ebx
c000e55f:	c3                   	ret    

c000e560 <Device::detectAll()>:
c000e560:	53                   	push   ebx
c000e561:	83 ec 14             	sub    esp,0x14
c000e564:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e568:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e56a:	53                   	push   ebx
c000e56b:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000e56e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e574:	83 c4 10             	add    esp,0x10
c000e577:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e57a:	74 0f                	je     c000e58b <Device::detectAll()+0x2b>
c000e57c:	83 ec 0c             	sub    esp,0xc
c000e57f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e582:	e8 d9 ff ff ff       	call   c000e560 <Device::detectAll()>
c000e587:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e589:	eb e9                	jmp    c000e574 <Device::detectAll()+0x14>
c000e58b:	83 c4 08             	add    esp,0x8
c000e58e:	5b                   	pop    ebx
c000e58f:	c3                   	ret    

c000e590 <Device::disableLegacyAll()>:
c000e590:	53                   	push   ebx
c000e591:	83 ec 14             	sub    esp,0x14
c000e594:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e598:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e59a:	53                   	push   ebx
c000e59b:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c000e59e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e5a4:	83 c4 10             	add    esp,0x10
c000e5a7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e5aa:	74 0f                	je     c000e5bb <Device::disableLegacyAll()+0x2b>
c000e5ac:	83 ec 0c             	sub    esp,0xc
c000e5af:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e5b2:	e8 d9 ff ff ff       	call   c000e590 <Device::disableLegacyAll()>
c000e5b7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e5b9:	eb e9                	jmp    c000e5a4 <Device::disableLegacyAll()+0x14>
c000e5bb:	83 c4 08             	add    esp,0x8
c000e5be:	5b                   	pop    ebx
c000e5bf:	c3                   	ret    

c000e5c0 <Device::loadDriversForAll()>:
c000e5c0:	53                   	push   ebx
c000e5c1:	83 ec 08             	sub    esp,0x8
c000e5c4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e5c8:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c000e5cf:	75 0c                	jne    c000e5dd <Device::loadDriversForAll()+0x1d>
c000e5d1:	83 ec 0c             	sub    esp,0xc
c000e5d4:	53                   	push   ebx
c000e5d5:	e8 a0 fd ff ff       	call   c000e37a <Device::findAndLoadDriver()>
c000e5da:	83 c4 10             	add    esp,0x10
c000e5dd:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e5e3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e5e6:	74 12                	je     c000e5fa <Device::loadDriversForAll()+0x3a>
c000e5e8:	83 ec 0c             	sub    esp,0xc
c000e5eb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e5ee:	e8 cd ff ff ff       	call   c000e5c0 <Device::loadDriversForAll()>
c000e5f3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e5f5:	83 c4 10             	add    esp,0x10
c000e5f8:	eb e9                	jmp    c000e5e3 <Device::loadDriversForAll()+0x23>
c000e5fa:	83 c4 08             	add    esp,0x8
c000e5fd:	5b                   	pop    ebx
c000e5fe:	c3                   	ret    
c000e5ff:	90                   	nop

c000e600 <Device::closeAll()>:
c000e600:	53                   	push   ebx
c000e601:	83 ec 08             	sub    esp,0x8
c000e604:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e608:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e60a:	6a 00                	push   0x0
c000e60c:	6a 00                	push   0x0
c000e60e:	6a 00                	push   0x0
c000e610:	53                   	push   ebx
c000e611:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000e614:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e61a:	83 c4 10             	add    esp,0x10
c000e61d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e620:	74 0f                	je     c000e631 <Device::closeAll()+0x31>
c000e622:	83 ec 0c             	sub    esp,0xc
c000e625:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e628:	e8 d3 ff ff ff       	call   c000e600 <Device::closeAll()>
c000e62d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e62f:	eb e9                	jmp    c000e61a <Device::closeAll()+0x1a>
c000e631:	83 c4 08             	add    esp,0x8
c000e634:	5b                   	pop    ebx
c000e635:	c3                   	ret    

c000e636 <Device::powerSavingAll(PowerSavingLevel)>:
c000e636:	56                   	push   esi
c000e637:	53                   	push   ebx
c000e638:	83 ec 0c             	sub    esp,0xc
c000e63b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000e63f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000e643:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e645:	56                   	push   esi
c000e646:	53                   	push   ebx
c000e647:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000e64a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e650:	83 c4 10             	add    esp,0x10
c000e653:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e656:	74 0f                	je     c000e667 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000e658:	52                   	push   edx
c000e659:	52                   	push   edx
c000e65a:	56                   	push   esi
c000e65b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e65e:	e8 d3 ff ff ff       	call   c000e636 <Device::powerSavingAll(PowerSavingLevel)>
c000e663:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e665:	eb e9                	jmp    c000e650 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000e667:	58                   	pop    eax
c000e668:	5b                   	pop    ebx
c000e669:	5e                   	pop    esi
c000e66a:	c3                   	ret    
c000e66b:	90                   	nop

c000e66c <Device::setName(char const*)>:
c000e66c:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000e674:	e9 bf 20 ff ff       	jmp    c0000738 <strcpy>
c000e679:	90                   	nop

c000e67a <Device::Device(char const*)>:
c000e67a:	83 ec 1c             	sub    esp,0x1c
c000e67d:	ba b0 4a 02 c0       	mov    edx,0xc0024ab0
c000e682:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e686:	89 10                	mov    DWORD PTR [eax],edx
c000e688:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e68c:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000e696:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e69a:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e6a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6a8:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e6b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6b6:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e6c0:	83 ec 08             	sub    esp,0x8
c000e6c3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e6c7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e6cb:	e8 9c ff ff ff       	call   c000e66c <Device::setName(char const*)>
c000e6d0:	83 c4 10             	add    esp,0x10
c000e6d3:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000e6db:	83 ec 0c             	sub    esp,0xc
c000e6de:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e6e2:	e8 d0 b5 ff ff       	call   c0009cb7 <malloc>
c000e6e7:	83 c4 10             	add    esp,0x10
c000e6ea:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e6f0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e6f7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e6fb:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000e701:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e705:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e70b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e711:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e715:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e71b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e722:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e726:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000e72d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e731:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000e738:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e73c:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e746:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e74a:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e754:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e758:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e762:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e766:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000e770:	90                   	nop
c000e771:	83 c4 1c             	add    esp,0x1c
c000e774:	c3                   	ret    
c000e775:	90                   	nop

c000e776 <Device::getName()>:
c000e776:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e77a:	05 d0 00 00 00       	add    eax,0xd0
c000e77f:	c3                   	ret    

c000e780 <DriverlessDevice::DriverlessDevice(char const*)>:
c000e780:	83 ec 0c             	sub    esp,0xc
c000e783:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e787:	83 ec 08             	sub    esp,0x8
c000e78a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e78e:	50                   	push   eax
c000e78f:	e8 e6 fe ff ff       	call   c000e67a <Device::Device(char const*)>
c000e794:	83 c4 10             	add    esp,0x10
c000e797:	ba dc 4a 02 c0       	mov    edx,0xc0024adc
c000e79c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a0:	89 10                	mov    DWORD PTR [eax],edx
c000e7a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a6:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000e7b0:	90                   	nop
c000e7b1:	83 c4 0c             	add    esp,0xc
c000e7b4:	c3                   	ret    
c000e7b5:	90                   	nop

c000e7b6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000e7b6:	57                   	push   edi
c000e7b7:	56                   	push   esi
c000e7b8:	53                   	push   ebx
c000e7b9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e7bd:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e7c1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e7c5:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000e7cb:	75 0c                	jne    c000e7d9 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000e7cd:	52                   	push   edx
c000e7ce:	52                   	push   edx
c000e7cf:	53                   	push   ebx
c000e7d0:	56                   	push   esi
c000e7d1:	e8 fc 43 01 00       	call   c0022bd2 <LinkedList<Device>::addElement(Device*)>
c000e7d6:	83 c4 10             	add    esp,0x10
c000e7d9:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e7df:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e7e2:	74 12                	je     c000e7f6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000e7e4:	50                   	push   eax
c000e7e5:	57                   	push   edi
c000e7e6:	56                   	push   esi
c000e7e7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e7ea:	e8 c7 ff ff ff       	call   c000e7b6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e7ef:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e7f1:	83 c4 10             	add    esp,0x10
c000e7f4:	eb e9                	jmp    c000e7df <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000e7f6:	5b                   	pop    ebx
c000e7f7:	5e                   	pop    esi
c000e7f8:	5f                   	pop    edi
c000e7f9:	c3                   	ret    

c000e7fa <getDevicesOfType(DeviceType)>:
c000e7fa:	53                   	push   ebx
c000e7fb:	83 ec 14             	sub    esp,0x14
c000e7fe:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e802:	53                   	push   ebx
c000e803:	e8 a6 44 01 00       	call   c0022cae <LinkedList<Device>::LinkedList()>
c000e808:	83 c4 0c             	add    esp,0xc
c000e80b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e80f:	53                   	push   ebx
c000e810:	ff 35 08 7f 02 c0    	push   DWORD PTR ds:0xc0027f08
c000e816:	e8 9b ff ff ff       	call   c000e7b6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e81b:	89 d8                	mov    eax,ebx
c000e81d:	83 c4 18             	add    esp,0x18
c000e820:	5b                   	pop    ebx
c000e821:	c2 04 00             	ret    0x4

c000e824 <HardDiskController::HardDiskController(char const*)>:
c000e824:	83 ec 0c             	sub    esp,0xc
c000e827:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82b:	83 ec 08             	sub    esp,0x8
c000e82e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e832:	50                   	push   eax
c000e833:	e8 42 fe ff ff       	call   c000e67a <Device::Device(char const*)>
c000e838:	83 c4 10             	add    esp,0x10
c000e83b:	ba 08 4b 02 c0       	mov    edx,0xc0024b08
c000e840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e844:	89 10                	mov    DWORD PTR [eax],edx
c000e846:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e84a:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000e854:	90                   	nop
c000e855:	83 c4 0c             	add    esp,0xc
c000e858:	c3                   	ret    
c000e859:	90                   	nop
c000e85a:	66 90                	xchg   ax,ax

c000e85c <HardDiskController::~HardDiskController()>:
c000e85c:	83 ec 0c             	sub    esp,0xc
c000e85f:	ba 08 4b 02 c0       	mov    edx,0xc0024b08
c000e864:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e868:	89 10                	mov    DWORD PTR [eax],edx
c000e86a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e86e:	83 ec 0c             	sub    esp,0xc
c000e871:	50                   	push   eax
c000e872:	e8 cd fa ff ff       	call   c000e344 <Device::~Device()>
c000e877:	83 c4 10             	add    esp,0x10
c000e87a:	90                   	nop
c000e87b:	83 c4 0c             	add    esp,0xc
c000e87e:	c3                   	ret    
c000e87f:	90                   	nop

c000e880 <HardDiskController::~HardDiskController()>:
c000e880:	83 ec 0c             	sub    esp,0xc
c000e883:	83 ec 0c             	sub    esp,0xc
c000e886:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e88a:	e8 cd ff ff ff       	call   c000e85c <HardDiskController::~HardDiskController()>
c000e88f:	83 c4 10             	add    esp,0x10
c000e892:	83 ec 08             	sub    esp,0x8
c000e895:	68 58 01 00 00       	push   0x158
c000e89a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e89e:	e8 41 e6 ff ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c000e8a3:	83 c4 10             	add    esp,0x10
c000e8a6:	83 c4 0c             	add    esp,0xc
c000e8a9:	c3                   	ret    

c000e8aa <PhysicalDisk::eject()>:
c000e8aa:	83 c8 ff             	or     eax,0xffffffff
c000e8ad:	c3                   	ret    

c000e8ae <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000e8ae:	83 ec 0c             	sub    esp,0xc
c000e8b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8b5:	83 ec 08             	sub    esp,0x8
c000e8b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e8bc:	50                   	push   eax
c000e8bd:	e8 b8 fd ff ff       	call   c000e67a <Device::Device(char const*)>
c000e8c2:	83 c4 10             	add    esp,0x10
c000e8c5:	ba 34 4b 02 c0       	mov    edx,0xc0024b34
c000e8ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8ce:	89 10                	mov    DWORD PTR [eax],edx
c000e8d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8d4:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000e8db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8df:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000e8e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8ea:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000e8f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8f8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e8fc:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000e902:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e906:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000e910:	90                   	nop
c000e911:	83 c4 0c             	add    esp,0xc
c000e914:	c3                   	ret    
c000e915:	90                   	nop

c000e916 <PhysicalDisk::startCache()>:
c000e916:	56                   	push   esi
c000e917:	53                   	push   ebx
c000e918:	83 ec 10             	sub    esp,0x10
c000e91b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e91f:	6a 44                	push   0x44
c000e921:	e8 91 b3 ff ff       	call   c0009cb7 <malloc>
c000e926:	89 c6                	mov    esi,eax
c000e928:	58                   	pop    eax
c000e929:	5a                   	pop    edx
c000e92a:	53                   	push   ebx
c000e92b:	56                   	push   esi
c000e92c:	e8 67 17 00 00       	call   c0010098 <VCache::VCache(PhysicalDisk*)>
c000e931:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000e937:	83 c4 14             	add    esp,0x14
c000e93a:	5b                   	pop    ebx
c000e93b:	5e                   	pop    esi
c000e93c:	c3                   	ret    
c000e93d:	90                   	nop

c000e93e <PhysicalDisk::~PhysicalDisk()>:
c000e93e:	83 ec 0c             	sub    esp,0xc
c000e941:	ba 34 4b 02 c0       	mov    edx,0xc0024b34
c000e946:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e94a:	89 10                	mov    DWORD PTR [eax],edx
c000e94c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e950:	83 ec 0c             	sub    esp,0xc
c000e953:	50                   	push   eax
c000e954:	e8 eb f9 ff ff       	call   c000e344 <Device::~Device()>
c000e959:	83 c4 10             	add    esp,0x10
c000e95c:	90                   	nop
c000e95d:	83 c4 0c             	add    esp,0xc
c000e960:	c3                   	ret    
c000e961:	90                   	nop

c000e962 <PhysicalDisk::~PhysicalDisk()>:
c000e962:	83 ec 0c             	sub    esp,0xc
c000e965:	83 ec 0c             	sub    esp,0xc
c000e968:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e96c:	e8 cd ff ff ff       	call   c000e93e <PhysicalDisk::~PhysicalDisk()>
c000e971:	83 c4 10             	add    esp,0x10
c000e974:	83 ec 08             	sub    esp,0x8
c000e977:	68 6c 01 00 00       	push   0x16c
c000e97c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e980:	e8 5f e5 ff ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c000e985:	83 c4 10             	add    esp,0x10
c000e988:	83 c4 0c             	add    esp,0xc
c000e98b:	c3                   	ret    

c000e98c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c000e98c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e990:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e994:	c1 e0 04             	shl    eax,0x4
c000e997:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c000e99b:	8d 50 10             	lea    edx,[eax+0x10]
c000e99e:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c000e9a4:	74 08                	je     c000e9ae <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c000e9a6:	83 c0 04             	add    eax,0x4
c000e9a9:	39 d0                	cmp    eax,edx
c000e9ab:	75 f1                	jne    c000e99e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c000e9ad:	c3                   	ret    
c000e9ae:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000e9b8:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000e9c2:	eb e2                	jmp    c000e9a6 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c000e9c4 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c000e9c4:	57                   	push   edi
c000e9c5:	31 c0                	xor    eax,eax
c000e9c7:	56                   	push   esi
c000e9c8:	53                   	push   ebx
c000e9c9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e9cd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e9d1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e9d5:	89 da                	mov    edx,ebx
c000e9d7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e9db:	c1 e2 04             	shl    edx,0x4
c000e9de:	01 ca                	add    edx,ecx
c000e9e0:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c000e9e8:	74 16                	je     c000ea00 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c000e9ea:	40                   	inc    eax
c000e9eb:	83 f8 04             	cmp    eax,0x4
c000e9ee:	75 f0                	jne    c000e9e0 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c000e9f0:	c7 44 24 10 64 4b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024b64
c000e9f8:	5b                   	pop    ebx
c000e9f9:	5e                   	pop    esi
c000e9fa:	5f                   	pop    edi
c000e9fb:	e9 db 55 00 00       	jmp    c0013fdb <Krnl::panic(char const*)>
c000ea00:	8d 04 98             	lea    eax,[eax+ebx*4]
c000ea03:	8d 04 81             	lea    eax,[ecx+eax*4]
c000ea06:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c000ea0c:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c000ea12:	5b                   	pop    ebx
c000ea13:	5e                   	pop    esi
c000ea14:	5f                   	pop    edi
c000ea15:	c3                   	ret    

c000ea16 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000ea16:	56                   	push   esi
c000ea17:	53                   	push   ebx
c000ea18:	50                   	push   eax
c000ea19:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ea1d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ea21:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000ea26:	75 35                	jne    c000ea5d <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c000ea28:	8d 43 20             	lea    eax,[ebx+0x20]
c000ea2b:	31 d2                	xor    edx,edx
c000ea2d:	89 c1                	mov    ecx,eax
c000ea2f:	c1 e1 04             	shl    ecx,0x4
c000ea32:	01 f1                	add    ecx,esi
c000ea34:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c000ea3c:	74 3e                	je     c000ea7c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c000ea3e:	42                   	inc    edx
c000ea3f:	83 fa 04             	cmp    edx,0x4
c000ea42:	75 f0                	jne    c000ea34 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c000ea44:	83 ec 0c             	sub    esp,0xc
c000ea47:	68 7e 4b 02 c0       	push   0xc0024b7e
c000ea4c:	e8 8a 55 00 00       	call   c0013fdb <Krnl::panic(char const*)>
c000ea51:	83 c4 10             	add    esp,0x10
c000ea54:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ea59:	5a                   	pop    edx
c000ea5a:	5b                   	pop    ebx
c000ea5b:	5e                   	pop    esi
c000ea5c:	c3                   	ret    
c000ea5d:	83 ec 0c             	sub    esp,0xc
c000ea60:	56                   	push   esi
c000ea61:	e8 10 fd ff ff       	call   c000e776 <Device::getName()>
c000ea66:	83 c4 10             	add    esp,0x10
c000ea69:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000ea6c:	75 ba                	jne    c000ea28 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000ea6e:	83 fb 0f             	cmp    ebx,0xf
c000ea71:	7f 29                	jg     c000ea9c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c000ea73:	0f b6 9b 60 73 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd8ca0]
c000ea7a:	eb ac                	jmp    c000ea28 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000ea7c:	8d 04 82             	lea    eax,[edx+eax*4]
c000ea7f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ea83:	8d 04 86             	lea    eax,[esi+eax*4]
c000ea86:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c000ea8c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ea90:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c000ea96:	89 d8                	mov    eax,ebx
c000ea98:	5a                   	pop    edx
c000ea99:	5b                   	pop    ebx
c000ea9a:	5e                   	pop    esi
c000ea9b:	c3                   	ret    
c000ea9c:	83 ec 0c             	sub    esp,0xc
c000ea9f:	68 71 4b 02 c0       	push   0xc0024b71
c000eaa4:	e8 32 55 00 00       	call   c0013fdb <Krnl::panic(char const*)>
c000eaa9:	83 c4 10             	add    esp,0x10
c000eaac:	e9 77 ff ff ff       	jmp    c000ea28 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000eab1:	90                   	nop

c000eab2 <InterruptController::clearAllHandlers(int, bool)>:
c000eab2:	56                   	push   esi
c000eab3:	53                   	push   ebx
c000eab4:	52                   	push   edx
c000eab5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000eab9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000eabd:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000eac2:	75 61                	jne    c000eb25 <InterruptController::clearAllHandlers(int, bool)+0x73>
c000eac4:	8d 46 20             	lea    eax,[esi+0x20]
c000eac7:	c1 e6 04             	shl    esi,0x4
c000eaca:	c1 e0 04             	shl    eax,0x4
c000eacd:	01 de                	add    esi,ebx
c000eacf:	01 d8                	add    eax,ebx
c000ead1:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c000eadb:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c000eae5:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c000eaef:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000eaf9:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c000eb03:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c000eb0d:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c000eb17:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c000eb21:	58                   	pop    eax
c000eb22:	5b                   	pop    ebx
c000eb23:	5e                   	pop    esi
c000eb24:	c3                   	ret    
c000eb25:	83 ec 0c             	sub    esp,0xc
c000eb28:	53                   	push   ebx
c000eb29:	e8 48 fc ff ff       	call   c000e776 <Device::getName()>
c000eb2e:	83 c4 10             	add    esp,0x10
c000eb31:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000eb34:	75 8e                	jne    c000eac4 <InterruptController::clearAllHandlers(int, bool)+0x12>
c000eb36:	83 fe 0f             	cmp    esi,0xf
c000eb39:	7f 09                	jg     c000eb44 <InterruptController::clearAllHandlers(int, bool)+0x92>
c000eb3b:	0f b6 b6 60 73 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd8ca0]
c000eb42:	eb 80                	jmp    c000eac4 <InterruptController::clearAllHandlers(int, bool)+0x12>
c000eb44:	83 ec 0c             	sub    esp,0xc
c000eb47:	68 8b 4b 02 c0       	push   0xc0024b8b
c000eb4c:	e8 8a 54 00 00       	call   c0013fdb <Krnl::panic(char const*)>
c000eb51:	83 c4 10             	add    esp,0x10
c000eb54:	e9 6b ff ff ff       	jmp    c000eac4 <InterruptController::clearAllHandlers(int, bool)+0x12>
c000eb59:	90                   	nop

c000eb5a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000eb5a:	56                   	push   esi
c000eb5b:	53                   	push   ebx
c000eb5c:	52                   	push   edx
c000eb5d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000eb61:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000eb65:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000eb6a:	75 3a                	jne    c000eba6 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c000eb6c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000eb70:	8d 50 20             	lea    edx,[eax+0x20]
c000eb73:	c1 e2 04             	shl    edx,0x4
c000eb76:	8d 04 16             	lea    eax,[esi+edx*1]
c000eb79:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c000eb7d:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c000eb83:	74 0b                	je     c000eb90 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c000eb85:	83 c0 04             	add    eax,0x4
c000eb88:	39 d0                	cmp    eax,edx
c000eb8a:	75 f1                	jne    c000eb7d <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c000eb8c:	58                   	pop    eax
c000eb8d:	5b                   	pop    ebx
c000eb8e:	5e                   	pop    esi
c000eb8f:	c3                   	ret    
c000eb90:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000eb9a:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000eba4:	eb df                	jmp    c000eb85 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000eba6:	83 ec 0c             	sub    esp,0xc
c000eba9:	56                   	push   esi
c000ebaa:	e8 c7 fb ff ff       	call   c000e776 <Device::getName()>
c000ebaf:	83 c4 10             	add    esp,0x10
c000ebb2:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000ebb5:	75 b5                	jne    c000eb6c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000ebb7:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c000ebbc:	7f 11                	jg     c000ebcf <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c000ebbe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ebc2:	0f b6 80 60 73 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd8ca0]
c000ebc9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ebcd:	eb 9d                	jmp    c000eb6c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000ebcf:	83 ec 0c             	sub    esp,0xc
c000ebd2:	68 98 4b 02 c0       	push   0xc0024b98
c000ebd7:	e8 ff 53 00 00       	call   c0013fdb <Krnl::panic(char const*)>
c000ebdc:	83 c4 10             	add    esp,0x10
c000ebdf:	eb 8b                	jmp    c000eb6c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c000ebe1 <int_handler>:
c000ebe1:	55                   	push   ebp
c000ebe2:	57                   	push   edi
c000ebe3:	56                   	push   esi
c000ebe4:	53                   	push   ebx
c000ebe5:	83 ec 0c             	sub    esp,0xc
c000ebe8:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000ebec:	80 3d e4 89 02 c0 00 	cmp    BYTE PTR ds:0xc00289e4,0x0
c000ebf3:	74 0b                	je     c000ec00 <int_handler+0x1f>
c000ebf5:	fa                   	cli    
c000ebf6:	f4                   	hlt    
c000ebf7:	80 3d e4 89 02 c0 00 	cmp    BYTE PTR ds:0xc00289e4,0x0
c000ebfe:	75 f5                	jne    c000ebf5 <int_handler+0x14>
c000ec00:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c000ec05:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c000ec08:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000ec0e:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c000ec14:	8d 43 e0             	lea    eax,[ebx-0x20]
c000ec17:	83 f8 17             	cmp    eax,0x17
c000ec1a:	76 40                	jbe    c000ec5c <int_handler+0x7b>
c000ec1c:	8d 43 15             	lea    eax,[ebx+0x15]
c000ec1f:	31 db                	xor    ebx,ebx
c000ec21:	c1 e0 04             	shl    eax,0x4
c000ec24:	8d 6c 07 08          	lea    ebp,[edi+eax*1+0x8]
c000ec28:	8d bc 07 08 10 00 00 	lea    edi,[edi+eax*1+0x1008]
c000ec2f:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000ec33:	85 c0                	test   eax,eax
c000ec35:	74 13                	je     c000ec4a <int_handler+0x69>
c000ec37:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c000ec3a:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c000ec3e:	74 2a                	je     c000ec6a <int_handler+0x89>
c000ec40:	83 ec 08             	sub    esp,0x8
c000ec43:	52                   	push   edx
c000ec44:	56                   	push   esi
c000ec45:	ff d0                	call   eax
c000ec47:	83 c4 10             	add    esp,0x10
c000ec4a:	43                   	inc    ebx
c000ec4b:	83 fb 04             	cmp    ebx,0x4
c000ec4e:	75 df                	jne    c000ec2f <int_handler+0x4e>
c000ec50:	83 c4 0c             	add    esp,0xc
c000ec53:	31 c0                	xor    eax,eax
c000ec55:	5b                   	pop    ebx
c000ec56:	31 d2                	xor    edx,edx
c000ec58:	5e                   	pop    esi
c000ec59:	5f                   	pop    edi
c000ec5a:	5d                   	pop    ebp
c000ec5b:	c3                   	ret    
c000ec5c:	83 ec 0c             	sub    esp,0xc
c000ec5f:	50                   	push   eax
c000ec60:	e8 9f be 00 00       	call   c001ab04 <Hal::endOfInterrupt(int)>
c000ec65:	83 c4 10             	add    esp,0x10
c000ec68:	eb b2                	jmp    c000ec1c <int_handler+0x3b>
c000ec6a:	83 ec 08             	sub    esp,0x8
c000ec6d:	52                   	push   edx
c000ec6e:	56                   	push   esi
c000ec6f:	ff d0                	call   eax
c000ec71:	83 c4 10             	add    esp,0x10
c000ec74:	83 c4 0c             	add    esp,0xc
c000ec77:	5b                   	pop    ebx
c000ec78:	5e                   	pop    esi
c000ec79:	5f                   	pop    edi
c000ec7a:	5d                   	pop    ebp
c000ec7b:	c3                   	ret    

c000ec7c <InterruptController::InterruptController(char const*)>:
c000ec7c:	83 ec 1c             	sub    esp,0x1c
c000ec7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ec83:	83 ec 08             	sub    esp,0x8
c000ec86:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ec8a:	50                   	push   eax
c000ec8b:	e8 ea f9 ff ff       	call   c000e67a <Device::Device(char const*)>
c000ec90:	83 c4 10             	add    esp,0x10
c000ec93:	ba e8 4b 02 c0       	mov    edx,0xc0024be8
c000ec98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ec9c:	89 10                	mov    DWORD PTR [eax],edx
c000ec9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eca2:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000ecac:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ecb4:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c000ecbc:	7f 5e                	jg     c000ed1c <InterruptController::InterruptController(char const*)+0xa0>
c000ecbe:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000ecc6:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c000eccb:	7f 49                	jg     c000ed16 <InterruptController::InterruptController(char const*)+0x9a>
c000eccd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ecd1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ecd5:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000ecdc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ece0:	01 ca                	add    edx,ecx
c000ece2:	83 c2 54             	add    edx,0x54
c000ece5:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000eced:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ecf1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ecf5:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000ecfc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ed00:	01 ca                	add    edx,ecx
c000ed02:	81 c2 54 04 00 00    	add    edx,0x454
c000ed08:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000ed10:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000ed14:	eb b0                	jmp    c000ecc6 <InterruptController::InterruptController(char const*)+0x4a>
c000ed16:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000ed1a:	eb 98                	jmp    c000ecb4 <InterruptController::InterruptController(char const*)+0x38>
c000ed1c:	90                   	nop
c000ed1d:	83 c4 1c             	add    esp,0x1c
c000ed20:	c3                   	ret    
c000ed21:	90                   	nop

c000ed22 <InterruptController::~InterruptController()>:
c000ed22:	83 ec 0c             	sub    esp,0xc
c000ed25:	ba e8 4b 02 c0       	mov    edx,0xc0024be8
c000ed2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed2e:	89 10                	mov    DWORD PTR [eax],edx
c000ed30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed34:	83 ec 0c             	sub    esp,0xc
c000ed37:	50                   	push   eax
c000ed38:	e8 07 f6 ff ff       	call   c000e344 <Device::~Device()>
c000ed3d:	83 c4 10             	add    esp,0x10
c000ed40:	90                   	nop
c000ed41:	83 c4 0c             	add    esp,0xc
c000ed44:	c3                   	ret    
c000ed45:	90                   	nop

c000ed46 <InterruptController::~InterruptController()>:
c000ed46:	83 ec 0c             	sub    esp,0xc
c000ed49:	83 ec 0c             	sub    esp,0xc
c000ed4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ed50:	e8 cd ff ff ff       	call   c000ed22 <InterruptController::~InterruptController()>
c000ed55:	83 c4 10             	add    esp,0x10
c000ed58:	83 ec 08             	sub    esp,0x8
c000ed5b:	68 58 21 00 00       	push   0x2158
c000ed60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ed64:	e8 7b e1 ff ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c000ed69:	83 c4 10             	add    esp,0x10
c000ed6c:	83 c4 0c             	add    esp,0xc
c000ed6f:	c3                   	ret    

c000ed70 <InterruptController::convertLegacyIRQNumber(int)>:
c000ed70:	53                   	push   ebx
c000ed71:	83 ec 14             	sub    esp,0x14
c000ed74:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ed78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ed7c:	e8 f5 f9 ff ff       	call   c000e776 <Device::getName()>
c000ed81:	83 c4 10             	add    esp,0x10
c000ed84:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000ed87:	74 07                	je     c000ed90 <InterruptController::convertLegacyIRQNumber(int)+0x20>
c000ed89:	89 d8                	mov    eax,ebx
c000ed8b:	83 c4 08             	add    esp,0x8
c000ed8e:	5b                   	pop    ebx
c000ed8f:	c3                   	ret    
c000ed90:	83 fb 0f             	cmp    ebx,0xf
c000ed93:	7f 0e                	jg     c000eda3 <InterruptController::convertLegacyIRQNumber(int)+0x33>
c000ed95:	0f b6 9b 60 73 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd8ca0]
c000ed9c:	83 c4 08             	add    esp,0x8
c000ed9f:	89 d8                	mov    eax,ebx
c000eda1:	5b                   	pop    ebx
c000eda2:	c3                   	ret    
c000eda3:	83 ec 0c             	sub    esp,0xc
c000eda6:	68 a8 4b 02 c0       	push   0xc0024ba8
c000edab:	e8 2b 52 00 00       	call   c0013fdb <Krnl::panic(char const*)>
c000edb0:	89 d8                	mov    eax,ebx
c000edb2:	83 c4 10             	add    esp,0x10
c000edb5:	83 c4 08             	add    esp,0x8
c000edb8:	5b                   	pop    ebx
c000edb9:	c3                   	ret    

c000edba <startGUI(void*)>:
c000edba:	55                   	push   ebp
c000edbb:	89 e5                	mov    ebp,esp
c000edbd:	53                   	push   ebx
c000edbe:	83 ec 04             	sub    esp,0x4
c000edc1:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c000edc6:	48                   	dec    eax
c000edc7:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c000edcc:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c000edd1:	85 c0                	test   eax,eax
c000edd3:	75 01                	jne    c000edd6 <startGUI(void*)+0x1c>
c000edd5:	fb                   	sti    
c000edd6:	8b 1d 08 7f 02 c0    	mov    ebx,DWORD PTR ds:0xc0027f08
c000eddc:	83 ec 08             	sub    esp,0x8
c000eddf:	6a 01                	push   0x1
c000ede1:	68 24 4c 02 c0       	push   0xc0024c24
c000ede6:	e8 75 7e 00 00       	call   c0016c60 <Thr::loadDLL(char const*, bool)>
c000edeb:	83 c4 10             	add    esp,0x10
c000edee:	83 ec 08             	sub    esp,0x8
c000edf1:	53                   	push   ebx
c000edf2:	50                   	push   eax
c000edf3:	e8 99 80 00 00       	call   c0016e91 <Thr::executeDLL(unsigned long, void*)>
c000edf8:	83 c4 10             	add    esp,0x10
c000edfb:	8b 1d 08 7f 02 c0    	mov    ebx,DWORD PTR ds:0xc0027f08
c000ee01:	83 ec 08             	sub    esp,0x8
c000ee04:	6a 01                	push   0x1
c000ee06:	68 3e 4c 02 c0       	push   0xc0024c3e
c000ee0b:	e8 50 7e 00 00       	call   c0016c60 <Thr::loadDLL(char const*, bool)>
c000ee10:	83 c4 10             	add    esp,0x10
c000ee13:	83 ec 08             	sub    esp,0x8
c000ee16:	53                   	push   ebx
c000ee17:	50                   	push   eax
c000ee18:	e8 74 80 00 00       	call   c0016e91 <Thr::executeDLL(unsigned long, void*)>
c000ee1d:	83 c4 10             	add    esp,0x10
c000ee20:	90                   	nop
c000ee21:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000ee24:	c9                   	leave  
c000ee25:	c3                   	ret    

c000ee26 <startGUIVESA(void*)>:
c000ee26:	55                   	push   ebp
c000ee27:	89 e5                	mov    ebp,esp
c000ee29:	53                   	push   ebx
c000ee2a:	83 ec 04             	sub    esp,0x4
c000ee2d:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c000ee32:	48                   	dec    eax
c000ee33:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c000ee38:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c000ee3d:	85 c0                	test   eax,eax
c000ee3f:	75 01                	jne    c000ee42 <startGUIVESA(void*)+0x1c>
c000ee41:	fb                   	sti    
c000ee42:	8b 1d 08 7f 02 c0    	mov    ebx,DWORD PTR ds:0xc0027f08
c000ee48:	83 ec 08             	sub    esp,0x8
c000ee4b:	6a 01                	push   0x1
c000ee4d:	68 5c 4c 02 c0       	push   0xc0024c5c
c000ee52:	e8 09 7e 00 00       	call   c0016c60 <Thr::loadDLL(char const*, bool)>
c000ee57:	83 c4 10             	add    esp,0x10
c000ee5a:	83 ec 08             	sub    esp,0x8
c000ee5d:	53                   	push   ebx
c000ee5e:	50                   	push   eax
c000ee5f:	e8 2d 80 00 00       	call   c0016e91 <Thr::executeDLL(unsigned long, void*)>
c000ee64:	83 c4 10             	add    esp,0x10
c000ee67:	8b 1d 08 7f 02 c0    	mov    ebx,DWORD PTR ds:0xc0027f08
c000ee6d:	83 ec 08             	sub    esp,0x8
c000ee70:	6a 01                	push   0x1
c000ee72:	68 3e 4c 02 c0       	push   0xc0024c3e
c000ee77:	e8 e4 7d 00 00       	call   c0016c60 <Thr::loadDLL(char const*, bool)>
c000ee7c:	83 c4 10             	add    esp,0x10
c000ee7f:	83 ec 08             	sub    esp,0x8
c000ee82:	53                   	push   ebx
c000ee83:	50                   	push   eax
c000ee84:	e8 08 80 00 00       	call   c0016e91 <Thr::executeDLL(unsigned long, void*)>
c000ee89:	83 c4 10             	add    esp,0x10
c000ee8c:	90                   	nop
c000ee8d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000ee90:	c9                   	leave  
c000ee91:	c3                   	ret    

c000ee92 <sendKeyToTerminal(unsigned char)>:
c000ee92:	55                   	push   ebp
c000ee93:	89 e5                	mov    ebp,esp
c000ee95:	83 ec 28             	sub    esp,0x28
c000ee98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ee9b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000ee9e:	a1 84 7f 02 c0       	mov    eax,ds:0xc0027f84
c000eea3:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000eea7:	83 ec 08             	sub    esp,0x8
c000eeaa:	52                   	push   edx
c000eeab:	50                   	push   eax
c000eeac:	e8 99 c5 ff ff       	call   c000b44a <VgaText::receiveKey(unsigned char)>
c000eeb1:	83 c4 10             	add    esp,0x10
c000eeb4:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000eeb8:	0f 85 8f 00 00 00    	jne    c000ef4d <sendKeyToTerminal(unsigned char)+0xbb>
c000eebe:	fa                   	cli    
c000eebf:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c000eec4:	40                   	inc    eax
c000eec5:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c000eeca:	a1 24 94 02 c0       	mov    eax,ds:0xc0029424
c000eecf:	40                   	inc    eax
c000eed0:	a3 24 94 02 c0       	mov    ds:0xc0029424,eax
c000eed5:	a1 60 80 02 c0       	mov    eax,ds:0xc0028060
c000eeda:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000eedd:	c7 05 60 80 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028060,0x0
c000eee7:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000eeeb:	74 1f                	je     c000ef0c <sendKeyToTerminal(unsigned char)+0x7a>
c000eeed:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000eef0:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000eef3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000eef6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000eef9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000eefc:	83 ec 0c             	sub    esp,0xc
c000eeff:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000ef02:	e8 f5 8b 00 00       	call   c0017afc <unblockTask(ThreadControlBlock*)>
c000ef07:	83 c4 10             	add    esp,0x10
c000ef0a:	eb db                	jmp    c000eee7 <sendKeyToTerminal(unsigned char)+0x55>
c000ef0c:	a1 24 94 02 c0       	mov    eax,ds:0xc0029424
c000ef11:	48                   	dec    eax
c000ef12:	a3 24 94 02 c0       	mov    ds:0xc0029424,eax
c000ef17:	a1 24 94 02 c0       	mov    eax,ds:0xc0029424
c000ef1c:	85 c0                	test   eax,eax
c000ef1e:	75 18                	jne    c000ef38 <sendKeyToTerminal(unsigned char)+0xa6>
c000ef20:	a1 20 94 02 c0       	mov    eax,ds:0xc0029420
c000ef25:	85 c0                	test   eax,eax
c000ef27:	74 0f                	je     c000ef38 <sendKeyToTerminal(unsigned char)+0xa6>
c000ef29:	c7 05 20 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029420,0x0
c000ef33:	e8 08 87 00 00       	call   c0017640 <schedule()>
c000ef38:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c000ef3d:	48                   	dec    eax
c000ef3e:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c000ef43:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c000ef48:	85 c0                	test   eax,eax
c000ef4a:	75 01                	jne    c000ef4d <sendKeyToTerminal(unsigned char)+0xbb>
c000ef4c:	fb                   	sti    
c000ef4d:	90                   	nop
c000ef4e:	c9                   	leave  
c000ef4f:	c3                   	ret    

c000ef50 <sendKeyboardToken(KeyboardToken)>:
c000ef50:	55                   	push   ebp
c000ef51:	89 e5                	mov    ebp,esp
c000ef53:	83 ec 18             	sub    esp,0x18
c000ef56:	e8 59 53 00 00       	call   c00142b4 <Krnl::userIOReceived()>
c000ef5b:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000ef5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef61:	0f b7 c0             	movzx  eax,ax
c000ef64:	83 f2 01             	xor    edx,0x1
c000ef67:	88 90 80 80 02 c0    	mov    BYTE PTR [eax-0x3ffd7f80],dl
c000ef6d:	a1 68 80 02 c0       	mov    eax,ds:0xc0028068
c000ef72:	85 c0                	test   eax,eax
c000ef74:	74 24                	je     c000ef9a <sendKeyboardToken(KeyboardToken)+0x4a>
c000ef76:	8b 0d 68 80 02 c0    	mov    ecx,DWORD PTR ds:0xc0028068
c000ef7c:	83 ec 04             	sub    esp,0x4
c000ef7f:	68 80 80 02 c0       	push   0xc0028080
c000ef84:	83 ec 08             	sub    esp,0x8
c000ef87:	89 e2                	mov    edx,esp
c000ef89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef8c:	89 02                	mov    DWORD PTR [edx],eax
c000ef8e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000ef91:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000ef95:	ff d1                	call   ecx
c000ef97:	83 c4 10             	add    esp,0x10
c000ef9a:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000ef9e:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000efa1:	a0 88 84 02 c0       	mov    al,ds:0xc0028488
c000efa6:	38 c2                	cmp    dl,al
c000efa8:	74 1c                	je     c000efc6 <sendKeyboardToken(KeyboardToken)+0x76>
c000efaa:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000efad:	a2 88 84 02 c0       	mov    ds:0xc0028488,al
c000efb2:	a0 88 84 02 c0       	mov    al,ds:0xc0028488
c000efb7:	0f b6 c0             	movzx  eax,al
c000efba:	83 ec 0c             	sub    esp,0xc
c000efbd:	50                   	push   eax
c000efbe:	e8 d3 ba ff ff       	call   c000aa96 <setTerminalScrollLock(bool)>
c000efc3:	83 c4 10             	add    esp,0x10
c000efc6:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000efc9:	84 c0                	test   al,al
c000efcb:	0f 84 ae 00 00 00    	je     c000f07f <sendKeyboardToken(KeyboardToken)+0x12f>
c000efd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000efd4:	66 3d 10 03          	cmp    ax,0x310
c000efd8:	75 06                	jne    c000efe0 <sendKeyboardToken(KeyboardToken)+0x90>
c000efda:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000efe0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000efe3:	66 3d 11 03          	cmp    ax,0x311
c000efe7:	75 06                	jne    c000efef <sendKeyboardToken(KeyboardToken)+0x9f>
c000efe9:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000efef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000eff2:	66 3d 12 03          	cmp    ax,0x312
c000eff6:	75 06                	jne    c000effe <sendKeyboardToken(KeyboardToken)+0xae>
c000eff8:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000effe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f001:	66 3d 13 03          	cmp    ax,0x313
c000f005:	75 06                	jne    c000f00d <sendKeyboardToken(KeyboardToken)+0xbd>
c000f007:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000f00d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f010:	66 3d 14 03          	cmp    ax,0x314
c000f014:	75 06                	jne    c000f01c <sendKeyboardToken(KeyboardToken)+0xcc>
c000f016:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000f01c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f01f:	66 3d 15 03          	cmp    ax,0x315
c000f023:	75 06                	jne    c000f02b <sendKeyboardToken(KeyboardToken)+0xdb>
c000f025:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000f02b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f02e:	66 3d 16 03          	cmp    ax,0x316
c000f032:	75 06                	jne    c000f03a <sendKeyboardToken(KeyboardToken)+0xea>
c000f034:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000f03a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f03d:	66 3d 17 03          	cmp    ax,0x317
c000f041:	75 06                	jne    c000f049 <sendKeyboardToken(KeyboardToken)+0xf9>
c000f043:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000f049:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f04c:	66 3d 18 03          	cmp    ax,0x318
c000f050:	75 06                	jne    c000f058 <sendKeyboardToken(KeyboardToken)+0x108>
c000f052:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000f058:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f05b:	66 3d 19 03          	cmp    ax,0x319
c000f05f:	75 06                	jne    c000f067 <sendKeyboardToken(KeyboardToken)+0x117>
c000f061:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000f067:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f06a:	66 3d 1a 03          	cmp    ax,0x31a
c000f06e:	0f 85 c9 00 00 00    	jne    c000f13d <sendKeyboardToken(KeyboardToken)+0x1ed>
c000f074:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000f07a:	e9 be 00 00 00       	jmp    c000f13d <sendKeyboardToken(KeyboardToken)+0x1ed>
c000f07f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f082:	66 3d 10 03          	cmp    ax,0x310
c000f086:	75 0a                	jne    c000f092 <sendKeyboardToken(KeyboardToken)+0x142>
c000f088:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000f08e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000f092:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f095:	66 3d 11 03          	cmp    ax,0x311
c000f099:	75 0a                	jne    c000f0a5 <sendKeyboardToken(KeyboardToken)+0x155>
c000f09b:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000f0a1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000f0a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f0a8:	66 3d 12 03          	cmp    ax,0x312
c000f0ac:	75 0a                	jne    c000f0b8 <sendKeyboardToken(KeyboardToken)+0x168>
c000f0ae:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000f0b4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000f0b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f0bb:	66 3d 13 03          	cmp    ax,0x313
c000f0bf:	75 0a                	jne    c000f0cb <sendKeyboardToken(KeyboardToken)+0x17b>
c000f0c1:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000f0c7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000f0cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f0ce:	66 3d 14 03          	cmp    ax,0x314
c000f0d2:	75 0a                	jne    c000f0de <sendKeyboardToken(KeyboardToken)+0x18e>
c000f0d4:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000f0da:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000f0de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f0e1:	66 3d 15 03          	cmp    ax,0x315
c000f0e5:	75 0a                	jne    c000f0f1 <sendKeyboardToken(KeyboardToken)+0x1a1>
c000f0e7:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000f0ed:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000f0f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f0f4:	66 3d 16 03          	cmp    ax,0x316
c000f0f8:	75 0a                	jne    c000f104 <sendKeyboardToken(KeyboardToken)+0x1b4>
c000f0fa:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000f100:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000f104:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f107:	66 3d 17 03          	cmp    ax,0x317
c000f10b:	75 0a                	jne    c000f117 <sendKeyboardToken(KeyboardToken)+0x1c7>
c000f10d:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000f113:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000f117:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f11a:	66 3d 18 03          	cmp    ax,0x318
c000f11e:	75 0a                	jne    c000f12a <sendKeyboardToken(KeyboardToken)+0x1da>
c000f120:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000f126:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000f12a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f12d:	66 3d 19 03          	cmp    ax,0x319
c000f131:	75 0a                	jne    c000f13d <sendKeyboardToken(KeyboardToken)+0x1ed>
c000f133:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000f139:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000f13d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f140:	66 3d 00 02          	cmp    ax,0x200
c000f144:	75 2c                	jne    c000f172 <sendKeyboardToken(KeyboardToken)+0x222>
c000f146:	a0 80 84 02 c0       	mov    al,ds:0xc0028480
c000f14b:	83 f0 01             	xor    eax,0x1
c000f14e:	84 c0                	test   al,al
c000f150:	74 20                	je     c000f172 <sendKeyboardToken(KeyboardToken)+0x222>
c000f152:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c000f157:	6a 01                	push   0x1
c000f159:	6a 00                	push   0x0
c000f15b:	68 ba ed 00 c0       	push   0xc000edba
c000f160:	50                   	push   eax
c000f161:	e8 be 82 00 00       	call   c0017424 <Process::createThread(void (*)(void*), void*, int)>
c000f166:	83 c4 10             	add    esp,0x10
c000f169:	c6 05 80 84 02 c0 01 	mov    BYTE PTR ds:0xc0028480,0x1
c000f170:	eb 33                	jmp    c000f1a5 <sendKeyboardToken(KeyboardToken)+0x255>
c000f172:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f175:	66 3d 01 02          	cmp    ax,0x201
c000f179:	75 2a                	jne    c000f1a5 <sendKeyboardToken(KeyboardToken)+0x255>
c000f17b:	a0 80 84 02 c0       	mov    al,ds:0xc0028480
c000f180:	83 f0 01             	xor    eax,0x1
c000f183:	84 c0                	test   al,al
c000f185:	74 1e                	je     c000f1a5 <sendKeyboardToken(KeyboardToken)+0x255>
c000f187:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c000f18c:	6a 01                	push   0x1
c000f18e:	6a 00                	push   0x0
c000f190:	68 26 ee 00 c0       	push   0xc000ee26
c000f195:	50                   	push   eax
c000f196:	e8 89 82 00 00       	call   c0017424 <Process::createThread(void (*)(void*), void*, int)>
c000f19b:	83 c4 10             	add    esp,0x10
c000f19e:	c6 05 80 84 02 c0 01 	mov    BYTE PTR ds:0xc0028480,0x1
c000f1a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1a8:	66 3d 1d 03          	cmp    ax,0x31d
c000f1ac:	75 06                	jne    c000f1b4 <sendKeyboardToken(KeyboardToken)+0x264>
c000f1ae:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000f1b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1b7:	66 3d 1c 03          	cmp    ax,0x31c
c000f1bb:	75 06                	jne    c000f1c3 <sendKeyboardToken(KeyboardToken)+0x273>
c000f1bd:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000f1c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1c6:	66 3d 1b 03          	cmp    ax,0x31b
c000f1ca:	75 06                	jne    c000f1d2 <sendKeyboardToken(KeyboardToken)+0x282>
c000f1cc:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000f1d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1d5:	66 3d 1e 03          	cmp    ax,0x31e
c000f1d9:	75 06                	jne    c000f1e1 <sendKeyboardToken(KeyboardToken)+0x291>
c000f1db:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000f1e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1e4:	66 3d 1f 03          	cmp    ax,0x31f
c000f1e8:	75 06                	jne    c000f1f0 <sendKeyboardToken(KeyboardToken)+0x2a0>
c000f1ea:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000f1f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1f3:	66 3d 1a 03          	cmp    ax,0x31a
c000f1f7:	75 06                	jne    c000f1ff <sendKeyboardToken(KeyboardToken)+0x2af>
c000f1f9:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000f1ff:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000f203:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000f206:	83 f0 01             	xor    eax,0x1
c000f209:	84 c0                	test   al,al
c000f20b:	74 77                	je     c000f284 <sendKeyboardToken(KeyboardToken)+0x334>
c000f20d:	a0 81 81 02 c0       	mov    al,ds:0xc0028181
c000f212:	84 c0                	test   al,al
c000f214:	74 41                	je     c000f257 <sendKeyboardToken(KeyboardToken)+0x307>
c000f216:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000f21a:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000f21e:	74 2b                	je     c000f24b <sendKeyboardToken(KeyboardToken)+0x2fb>
c000f220:	8b 15 84 84 02 c0    	mov    edx,DWORD PTR ds:0xc0028484
c000f226:	89 d0                	mov    eax,edx
c000f228:	c1 e0 02             	shl    eax,0x2
c000f22b:	01 d0                	add    eax,edx
c000f22d:	01 c0                	add    eax,eax
c000f22f:	a3 84 84 02 c0       	mov    ds:0xc0028484,eax
c000f234:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f237:	0f b7 c0             	movzx  eax,ax
c000f23a:	8d 50 d0             	lea    edx,[eax-0x30]
c000f23d:	a1 84 84 02 c0       	mov    eax,ds:0xc0028484
c000f242:	01 d0                	add    eax,edx
c000f244:	a3 84 84 02 c0       	mov    ds:0xc0028484,eax
c000f249:	eb 6d                	jmp    c000f2b8 <sendKeyboardToken(KeyboardToken)+0x368>
c000f24b:	c7 05 84 84 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028484,0x0
c000f255:	eb 61                	jmp    c000f2b8 <sendKeyboardToken(KeyboardToken)+0x368>
c000f257:	a1 84 84 02 c0       	mov    eax,ds:0xc0028484
c000f25c:	85 c0                	test   eax,eax
c000f25e:	74 18                	je     c000f278 <sendKeyboardToken(KeyboardToken)+0x328>
c000f260:	a1 84 84 02 c0       	mov    eax,ds:0xc0028484
c000f265:	0f b6 c0             	movzx  eax,al
c000f268:	83 ec 0c             	sub    esp,0xc
c000f26b:	50                   	push   eax
c000f26c:	e8 21 fc ff ff       	call   c000ee92 <sendKeyToTerminal(unsigned char)>
c000f271:	83 c4 10             	add    esp,0x10
c000f274:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000f278:	c7 05 84 84 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028484,0x0
c000f282:	eb 34                	jmp    c000f2b8 <sendKeyboardToken(KeyboardToken)+0x368>
c000f284:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f287:	66 3d 01 01          	cmp    ax,0x101
c000f28b:	75 2b                	jne    c000f2b8 <sendKeyboardToken(KeyboardToken)+0x368>
c000f28d:	a1 84 84 02 c0       	mov    eax,ds:0xc0028484
c000f292:	85 c0                	test   eax,eax
c000f294:	74 18                	je     c000f2ae <sendKeyboardToken(KeyboardToken)+0x35e>
c000f296:	a1 84 84 02 c0       	mov    eax,ds:0xc0028484
c000f29b:	0f b6 c0             	movzx  eax,al
c000f29e:	83 ec 0c             	sub    esp,0xc
c000f2a1:	50                   	push   eax
c000f2a2:	e8 eb fb ff ff       	call   c000ee92 <sendKeyToTerminal(unsigned char)>
c000f2a7:	83 c4 10             	add    esp,0x10
c000f2aa:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000f2ae:	c7 05 84 84 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028484,0x0
c000f2b8:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000f2bb:	83 f0 01             	xor    eax,0x1
c000f2be:	84 c0                	test   al,al
c000f2c0:	74 4c                	je     c000f30e <sendKeyboardToken(KeyboardToken)+0x3be>
c000f2c2:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000f2c5:	83 f0 01             	xor    eax,0x1
c000f2c8:	84 c0                	test   al,al
c000f2ca:	74 42                	je     c000f30e <sendKeyboardToken(KeyboardToken)+0x3be>
c000f2cc:	a0 80 81 02 c0       	mov    al,ds:0xc0028180
c000f2d1:	83 f0 01             	xor    eax,0x1
c000f2d4:	84 c0                	test   al,al
c000f2d6:	74 36                	je     c000f30e <sendKeyboardToken(KeyboardToken)+0x3be>
c000f2d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f2db:	66 83 f8 1f          	cmp    ax,0x1f
c000f2df:	76 09                	jbe    c000f2ea <sendKeyboardToken(KeyboardToken)+0x39a>
c000f2e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f2e4:	66 83 f8 7e          	cmp    ax,0x7e
c000f2e8:	76 12                	jbe    c000f2fc <sendKeyboardToken(KeyboardToken)+0x3ac>
c000f2ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f2ed:	66 83 f8 0a          	cmp    ax,0xa
c000f2f1:	74 09                	je     c000f2fc <sendKeyboardToken(KeyboardToken)+0x3ac>
c000f2f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f2f6:	66 83 f8 08          	cmp    ax,0x8
c000f2fa:	75 12                	jne    c000f30e <sendKeyboardToken(KeyboardToken)+0x3be>
c000f2fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f2ff:	0f b6 c0             	movzx  eax,al
c000f302:	83 ec 0c             	sub    esp,0xc
c000f305:	50                   	push   eax
c000f306:	e8 87 fb ff ff       	call   c000ee92 <sendKeyToTerminal(unsigned char)>
c000f30b:	83 c4 10             	add    esp,0x10
c000f30e:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000f311:	83 f0 01             	xor    eax,0x1
c000f314:	84 c0                	test   al,al
c000f316:	74 4f                	je     c000f367 <sendKeyboardToken(KeyboardToken)+0x417>
c000f318:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000f31b:	83 f0 01             	xor    eax,0x1
c000f31e:	84 c0                	test   al,al
c000f320:	74 45                	je     c000f367 <sendKeyboardToken(KeyboardToken)+0x417>
c000f322:	a0 80 81 02 c0       	mov    al,ds:0xc0028180
c000f327:	84 c0                	test   al,al
c000f329:	74 3c                	je     c000f367 <sendKeyboardToken(KeyboardToken)+0x417>
c000f32b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f32e:	66 83 f8 3f          	cmp    ax,0x3f
c000f332:	76 33                	jbe    c000f367 <sendKeyboardToken(KeyboardToken)+0x417>
c000f334:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f337:	66 83 f8 7f          	cmp    ax,0x7f
c000f33b:	77 2a                	ja     c000f367 <sendKeyboardToken(KeyboardToken)+0x417>
c000f33d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f340:	88 c2                	mov    dl,al
c000f342:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f345:	66 83 f8 5f          	cmp    ax,0x5f
c000f349:	76 04                	jbe    c000f34f <sendKeyboardToken(KeyboardToken)+0x3ff>
c000f34b:	b0 20                	mov    al,0x20
c000f34d:	eb 02                	jmp    c000f351 <sendKeyboardToken(KeyboardToken)+0x401>
c000f34f:	b0 00                	mov    al,0x0
c000f351:	29 c2                	sub    edx,eax
c000f353:	88 d0                	mov    al,dl
c000f355:	83 e8 40             	sub    eax,0x40
c000f358:	0f b6 c0             	movzx  eax,al
c000f35b:	83 ec 0c             	sub    esp,0xc
c000f35e:	50                   	push   eax
c000f35f:	e8 2e fb ff ff       	call   c000ee92 <sendKeyToTerminal(unsigned char)>
c000f364:	83 c4 10             	add    esp,0x10
c000f367:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f36a:	66 3d 00 03          	cmp    ax,0x300
c000f36e:	75 0f                	jne    c000f37f <sendKeyboardToken(KeyboardToken)+0x42f>
c000f370:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000f373:	83 f0 01             	xor    eax,0x1
c000f376:	84 c0                	test   al,al
c000f378:	74 05                	je     c000f37f <sendKeyboardToken(KeyboardToken)+0x42f>
c000f37a:	e8 88 ba ff ff       	call   c000ae07 <doTerminalCycle()>
c000f37f:	90                   	nop
c000f380:	c9                   	leave  
c000f381:	c3                   	ret    

c000f382 <clearInternalKeybuffer(VgaText*)>:
c000f382:	55                   	push   ebp
c000f383:	89 e5                	mov    ebp,esp
c000f385:	83 ec 08             	sub    esp,0x8
c000f388:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f38b:	05 32 01 00 00       	add    eax,0x132
c000f390:	83 ec 0c             	sub    esp,0xc
c000f393:	50                   	push   eax
c000f394:	e8 ff 12 ff ff       	call   c0000698 <strlen>
c000f399:	83 c4 10             	add    esp,0x10
c000f39c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000f39f:	81 c2 32 01 00 00    	add    edx,0x132
c000f3a5:	83 ec 04             	sub    esp,0x4
c000f3a8:	50                   	push   eax
c000f3a9:	6a 00                	push   0x0
c000f3ab:	52                   	push   edx
c000f3ac:	e8 cb 12 ff ff       	call   c000067c <memset>
c000f3b1:	83 c4 10             	add    esp,0x10
c000f3b4:	90                   	nop
c000f3b5:	c9                   	leave  
c000f3b6:	c3                   	ret    

c000f3b7 <readKeyboard(VgaText*, char*, unsigned long)>:
c000f3b7:	55                   	push   ebp
c000f3b8:	89 e5                	mov    ebp,esp
c000f3ba:	83 ec 18             	sub    esp,0x18
c000f3bd:	a1 68 80 02 c0       	mov    eax,ds:0xc0028068
c000f3c2:	85 c0                	test   eax,eax
c000f3c4:	74 2a                	je     c000f3f0 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000f3c6:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000f3cc:	8b 0d 68 80 02 c0    	mov    ecx,DWORD PTR ds:0xc0028068
c000f3d2:	83 ec 04             	sub    esp,0x4
c000f3d5:	68 80 80 02 c0       	push   0xc0028080
c000f3da:	83 ec 08             	sub    esp,0x8
c000f3dd:	89 e2                	mov    edx,esp
c000f3df:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000f3e2:	89 02                	mov    DWORD PTR [edx],eax
c000f3e4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f3e7:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000f3eb:	ff d1                	call   ecx
c000f3ed:	83 c4 10             	add    esp,0x10
c000f3f0:	fb                   	sti    
c000f3f1:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000f3f8:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000f3fc:	0f 84 a1 00 00 00    	je     c000f4a3 <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c000f402:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f405:	8a 80 32 01 00 00    	mov    al,BYTE PTR [eax+0x132]
c000f40b:	84 c0                	test   al,al
c000f40d:	75 28                	jne    c000f437 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000f40f:	fa                   	cli    
c000f410:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c000f415:	40                   	inc    eax
c000f416:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c000f41b:	e8 20 82 00 00       	call   c0017640 <schedule()>
c000f420:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c000f425:	48                   	dec    eax
c000f426:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c000f42b:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c000f430:	85 c0                	test   eax,eax
c000f432:	75 ce                	jne    c000f402 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000f434:	fb                   	sti    
c000f435:	eb cb                	jmp    c000f402 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000f437:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000f43a:	8d 50 01             	lea    edx,[eax+0x1]
c000f43d:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000f440:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000f443:	8a 92 32 01 00 00    	mov    dl,BYTE PTR [edx+0x132]
c000f449:	88 10                	mov    BYTE PTR [eax],dl
c000f44b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f44e:	8a 80 32 01 00 00    	mov    al,BYTE PTR [eax+0x132]
c000f454:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000f457:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f45a:	05 32 01 00 00       	add    eax,0x132
c000f45f:	83 ec 0c             	sub    esp,0xc
c000f462:	50                   	push   eax
c000f463:	e8 30 12 ff ff       	call   c0000698 <strlen>
c000f468:	83 c4 10             	add    esp,0x10
c000f46b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000f46e:	81 c2 32 01 00 00    	add    edx,0x132
c000f474:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f477:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000f47a:	81 c2 32 01 00 00    	add    edx,0x132
c000f480:	83 ec 04             	sub    esp,0x4
c000f483:	50                   	push   eax
c000f484:	51                   	push   ecx
c000f485:	52                   	push   edx
c000f486:	e8 29 11 ff ff       	call   c00005b4 <memmove>
c000f48b:	83 c4 10             	add    esp,0x10
c000f48e:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000f491:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f494:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000f498:	0f 85 5a ff ff ff    	jne    c000f3f8 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000f49e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f4a1:	eb 03                	jmp    c000f4a6 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c000f4a3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f4a6:	c9                   	leave  
c000f4a7:	c3                   	ret    

c000f4a8 <Keyboard::Keyboard(char const*)>:
c000f4a8:	83 ec 0c             	sub    esp,0xc
c000f4ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f4af:	83 ec 08             	sub    esp,0x8
c000f4b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4b6:	50                   	push   eax
c000f4b7:	e8 be f1 ff ff       	call   c000e67a <Device::Device(char const*)>
c000f4bc:	83 c4 10             	add    esp,0x10
c000f4bf:	ba 80 4c 02 c0       	mov    edx,0xc0024c80
c000f4c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f4c8:	89 10                	mov    DWORD PTR [eax],edx
c000f4ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f4ce:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000f4d8:	c6 05 64 80 02 c0 01 	mov    BYTE PTR ds:0xc0028064,0x1
c000f4df:	90                   	nop
c000f4e0:	83 c4 0c             	add    esp,0xc
c000f4e3:	c3                   	ret    

c000f4e4 <Keyboard::~Keyboard()>:
c000f4e4:	83 ec 0c             	sub    esp,0xc
c000f4e7:	ba 80 4c 02 c0       	mov    edx,0xc0024c80
c000f4ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f4f0:	89 10                	mov    DWORD PTR [eax],edx
c000f4f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f4f6:	83 ec 0c             	sub    esp,0xc
c000f4f9:	50                   	push   eax
c000f4fa:	e8 45 ee ff ff       	call   c000e344 <Device::~Device()>
c000f4ff:	83 c4 10             	add    esp,0x10
c000f502:	90                   	nop
c000f503:	83 c4 0c             	add    esp,0xc
c000f506:	c3                   	ret    
c000f507:	90                   	nop

c000f508 <Keyboard::~Keyboard()>:
c000f508:	83 ec 0c             	sub    esp,0xc
c000f50b:	83 ec 0c             	sub    esp,0xc
c000f50e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f512:	e8 cd ff ff ff       	call   c000f4e4 <Keyboard::~Keyboard()>
c000f517:	83 c4 10             	add    esp,0x10
c000f51a:	83 ec 08             	sub    esp,0x8
c000f51d:	68 5c 01 00 00       	push   0x15c
c000f522:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f526:	e8 b9 d9 ff ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c000f52b:	83 c4 10             	add    esp,0x10
c000f52e:	83 c4 0c             	add    esp,0xc
c000f531:	c3                   	ret    

c000f532 <LogicalDisk::close(int, int, void*)>:
c000f532:	83 c8 ff             	or     eax,0xffffffff
c000f535:	c3                   	ret    

c000f536 <LogicalDisk::~LogicalDisk()>:
c000f536:	83 ec 0c             	sub    esp,0xc
c000f539:	ba 50 4d 02 c0       	mov    edx,0xc0024d50
c000f53e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f542:	89 10                	mov    DWORD PTR [eax],edx
c000f544:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f548:	83 ec 0c             	sub    esp,0xc
c000f54b:	50                   	push   eax
c000f54c:	e8 f3 ed ff ff       	call   c000e344 <Device::~Device()>
c000f551:	83 c4 10             	add    esp,0x10
c000f554:	90                   	nop
c000f555:	83 c4 0c             	add    esp,0xc
c000f558:	c3                   	ret    
c000f559:	90                   	nop

c000f55a <LogicalDisk::~LogicalDisk()>:
c000f55a:	83 ec 0c             	sub    esp,0xc
c000f55d:	83 ec 0c             	sub    esp,0xc
c000f560:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f564:	e8 cd ff ff ff       	call   c000f536 <LogicalDisk::~LogicalDisk()>
c000f569:	83 c4 10             	add    esp,0x10
c000f56c:	83 ec 08             	sub    esp,0x8
c000f56f:	68 74 01 00 00       	push   0x174
c000f574:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f578:	e8 67 d9 ff ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c000f57d:	83 c4 10             	add    esp,0x10
c000f580:	83 c4 0c             	add    esp,0xc
c000f583:	c3                   	ret    

c000f584 <LogicalDisk::open(int, int, void*)>:
c000f584:	83 ec 18             	sub    esp,0x18
c000f587:	68 ac 4c 02 c0       	push   0xc0024cac
c000f58c:	e8 4a 4a 00 00       	call   c0013fdb <Krnl::panic(char const*)>
c000f591:	83 c8 ff             	or     eax,0xffffffff
c000f594:	83 c4 1c             	add    esp,0x1c
c000f597:	c3                   	ret    

c000f598 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000f598:	53                   	push   ebx
c000f599:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f59d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f5a1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f5a5:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000f5ab:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000f5b1:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000f5b7:	77 10                	ja     c000f5c9 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000f5b9:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000f5bf:	89 d3                	mov    ebx,edx
c000f5c1:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000f5c7:	72 05                	jb     c000f5ce <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000f5c9:	83 c8 ff             	or     eax,0xffffffff
c000f5cc:	89 c2                	mov    edx,eax
c000f5ce:	5b                   	pop    ebx
c000f5cf:	c3                   	ret    

c000f5d0 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000f5d0:	56                   	push   esi
c000f5d1:	83 c8 ff             	or     eax,0xffffffff
c000f5d4:	53                   	push   ebx
c000f5d5:	89 c2                	mov    edx,eax
c000f5d7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f5db:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f5df:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f5e3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000f5e9:	77 27                	ja     c000f612 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000f5eb:	89 d8                	mov    eax,ebx
c000f5ed:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000f5f3:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000f5f9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f5fe:	89 c2                	mov    edx,eax
c000f600:	73 10                	jae    c000f612 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000f602:	89 c8                	mov    eax,ecx
c000f604:	89 da                	mov    edx,ebx
c000f606:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000f60c:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000f612:	5b                   	pop    ebx
c000f613:	5e                   	pop    esi
c000f614:	c3                   	ret    
c000f615:	90                   	nop

c000f616 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000f616:	83 ec 1c             	sub    esp,0x1c
c000f619:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f61d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f621:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f625:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f629:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f62d:	89 04 24             	mov    DWORD PTR [esp],eax
c000f630:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f634:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f638:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f63c:	83 ec 08             	sub    esp,0x8
c000f63f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f643:	50                   	push   eax
c000f644:	e8 31 f0 ff ff       	call   c000e67a <Device::Device(char const*)>
c000f649:	83 c4 10             	add    esp,0x10
c000f64c:	ba 50 4d 02 c0       	mov    edx,0xc0024d50
c000f651:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f655:	89 10                	mov    DWORD PTR [eax],edx
c000f657:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f65b:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000f662:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f666:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000f66d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f671:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000f67b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000f67f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f683:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f687:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000f68d:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000f693:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000f697:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000f69a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f69e:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000f6a4:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000f6aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6ae:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f6b2:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000f6b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6bc:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000f6c6:	90                   	nop
c000f6c7:	83 c4 1c             	add    esp,0x1c
c000f6ca:	c3                   	ret    
c000f6cb:	90                   	nop

c000f6cc <LogicalDisk::assignDriveLetter()>:
c000f6cc:	55                   	push   ebp
c000f6cd:	57                   	push   edi
c000f6ce:	56                   	push   esi
c000f6cf:	53                   	push   ebx
c000f6d0:	83 ec 14             	sub    esp,0x14
c000f6d3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f6d7:	8b 3d a0 84 02 c0    	mov    edi,DWORD PTR ds:0xc00284a0
c000f6dd:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000f6e3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000f6e7:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c000f6ed:	8b 3d a4 84 02 c0    	mov    edi,DWORD PTR ds:0xc00284a4
c000f6f3:	3c 01                	cmp    al,0x1
c000f6f5:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000f6f9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000f6fd:	19 c0                	sbb    eax,eax
c000f6ff:	83 e0 02             	and    eax,0x2
c000f702:	83 c0 41             	add    eax,0x41
c000f705:	0f be e8             	movsx  ebp,al
c000f708:	3c 43                	cmp    al,0x43
c000f70a:	75 10                	jne    c000f71c <LogicalDisk::assignDriveLetter()+0x50>
c000f70c:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000f713:	75 5d                	jne    c000f772 <LogicalDisk::assignDriveLetter()+0xa6>
c000f715:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c000f71a:	75 56                	jne    c000f772 <LogicalDisk::assignDriveLetter()+0xa6>
c000f71c:	8d 75 bf             	lea    esi,[ebp-0x41]
c000f71f:	ba 01 00 00 00       	mov    edx,0x1
c000f724:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000f728:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000f72c:	d3 e2                	shl    edx,cl
c000f72e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f732:	89 d7                	mov    edi,edx
c000f734:	89 d6                	mov    esi,edx
c000f736:	c1 ff 1f             	sar    edi,0x1f
c000f739:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c000f73d:	21 f9                	and    ecx,edi
c000f73f:	09 d1                	or     ecx,edx
c000f741:	75 2f                	jne    c000f772 <LogicalDisk::assignDriveLetter()+0xa6>
c000f743:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000f747:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f74b:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000f751:	09 f2                	or     edx,esi
c000f753:	89 15 a0 84 02 c0    	mov    DWORD PTR ds:0xc00284a0,edx
c000f759:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f75d:	09 fa                	or     edx,edi
c000f75f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000f763:	89 15 a4 84 02 c0    	mov    DWORD PTR ds:0xc00284a4,edx
c000f769:	89 1c bd c0 84 02 c0 	mov    DWORD PTR [edi*4-0x3ffd7b40],ebx
c000f770:	eb 08                	jmp    c000f77a <LogicalDisk::assignDriveLetter()+0xae>
c000f772:	45                   	inc    ebp
c000f773:	40                   	inc    eax
c000f774:	3c 5b                	cmp    al,0x5b
c000f776:	75 90                	jne    c000f708 <LogicalDisk::assignDriveLetter()+0x3c>
c000f778:	31 c0                	xor    eax,eax
c000f77a:	83 c4 14             	add    esp,0x14
c000f77d:	5b                   	pop    ebx
c000f77e:	5e                   	pop    esi
c000f77f:	5f                   	pop    edi
c000f780:	5d                   	pop    ebp
c000f781:	c3                   	ret    

c000f782 <LogicalDisk::mount()>:
c000f782:	56                   	push   esi
c000f783:	53                   	push   ebx
c000f784:	83 ec 1c             	sub    esp,0x1c
c000f787:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000f78b:	8b 1d 38 80 02 c0    	mov    ebx,DWORD PTR ds:0xc0028038
c000f791:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000f798:	50                   	push   eax
c000f799:	68 d0 4c 02 c0       	push   0xc0024cd0
c000f79e:	e8 22 d8 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000f7a3:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c000f7ad:	83 c4 10             	add    esp,0x10
c000f7b0:	85 db                	test   ebx,ebx
c000f7b2:	74 4e                	je     c000f802 <LogicalDisk::mount()+0x80>
c000f7b4:	83 ec 0c             	sub    esp,0xc
c000f7b7:	68 f1 4c 02 c0       	push   0xc0024cf1
c000f7bc:	e8 04 d8 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000f7c1:	83 c4 0c             	add    esp,0xc
c000f7c4:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000f7cb:	8b 13                	mov    edx,DWORD PTR [ebx]
c000f7cd:	83 e8 41             	sub    eax,0x41
c000f7d0:	50                   	push   eax
c000f7d1:	56                   	push   esi
c000f7d2:	53                   	push   ebx
c000f7d3:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000f7d6:	83 c4 10             	add    esp,0x10
c000f7d9:	84 c0                	test   al,al
c000f7db:	74 20                	je     c000f7fd <LogicalDisk::mount()+0x7b>
c000f7dd:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000f7e1:	83 ec 0c             	sub    esp,0xc
c000f7e4:	68 0d 4d 02 c0       	push   0xc0024d0d
c000f7e9:	e8 d7 d7 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000f7ee:	83 c4 10             	add    esp,0x10
c000f7f1:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c000f7f7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f7fb:	eb 07                	jmp    c000f804 <LogicalDisk::mount()+0x82>
c000f7fd:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000f800:	eb ae                	jmp    c000f7b0 <LogicalDisk::mount()+0x2e>
c000f802:	31 c0                	xor    eax,eax
c000f804:	83 c4 14             	add    esp,0x14
c000f807:	5b                   	pop    ebx
c000f808:	5e                   	pop    esi
c000f809:	c3                   	ret    

c000f80a <LogicalDisk::unmount()>:
c000f80a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f80e:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000f818:	c3                   	ret    
c000f819:	90                   	nop

c000f81a <LogicalDisk::eject()>:
c000f81a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f81e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000f824:	8b 10                	mov    edx,DWORD PTR [eax]
c000f826:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f82a:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000f82d:	90                   	nop

c000f82e <LogicalDisk::unassignDriveLetter()>:
c000f82e:	57                   	push   edi
c000f82f:	56                   	push   esi
c000f830:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f834:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000f83b:	84 c9                	test   cl,cl
c000f83d:	75 0f                	jne    c000f84e <LogicalDisk::unassignDriveLetter()+0x20>
c000f83f:	c7 44 24 0c 26 4d 02 c0 	mov    DWORD PTR [esp+0xc],0xc0024d26
c000f847:	5e                   	pop    esi
c000f848:	5f                   	pop    edi
c000f849:	e9 8d 47 00 00       	jmp    c0013fdb <Krnl::panic(char const*)>
c000f84e:	83 e9 41             	sub    ecx,0x41
c000f851:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000f858:	b8 01 00 00 00       	mov    eax,0x1
c000f85d:	c7 04 8d c0 84 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd7b40],0x0
c000f868:	d3 e0                	shl    eax,cl
c000f86a:	89 c7                	mov    edi,eax
c000f86c:	f7 d0                	not    eax
c000f86e:	c1 ff 1f             	sar    edi,0x1f
c000f871:	21 05 a0 84 02 c0    	and    DWORD PTR ds:0xc00284a0,eax
c000f877:	89 fe                	mov    esi,edi
c000f879:	f7 d6                	not    esi
c000f87b:	21 35 a4 84 02 c0    	and    DWORD PTR ds:0xc00284a4,esi
c000f881:	5e                   	pop    esi
c000f882:	5f                   	pop    edi
c000f883:	c3                   	ret    

c000f884 <LogicalDisk::read(unsigned long long, int, void*)>:
c000f884:	57                   	push   edi
c000f885:	56                   	push   esi
c000f886:	53                   	push   ebx
c000f887:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f88b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f88f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f893:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f897:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000f89d:	77 41                	ja     c000f8e0 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000f89f:	99                   	cdq    
c000f8a0:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000f8a6:	01 c8                	add    eax,ecx
c000f8a8:	11 da                	adc    edx,ebx
c000f8aa:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000f8b0:	19 d7                	sbb    edi,edx
c000f8b2:	72 33                	jb     c000f8e7 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000f8b4:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000f8ba:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000f8c0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000f8c4:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000f8c8:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000f8ce:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000f8d4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f8d8:	5b                   	pop    ebx
c000f8d9:	5e                   	pop    esi
c000f8da:	5f                   	pop    edi
c000f8db:	e9 f2 0a 00 00       	jmp    c00103d2 <VCache::read(unsigned long long, int, void*)>
c000f8e0:	b8 05 00 00 00       	mov    eax,0x5
c000f8e5:	eb 05                	jmp    c000f8ec <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000f8e7:	b8 07 00 00 00       	mov    eax,0x7
c000f8ec:	5b                   	pop    ebx
c000f8ed:	5e                   	pop    esi
c000f8ee:	5f                   	pop    edi
c000f8ef:	c3                   	ret    

c000f8f0 <LogicalDisk::write(unsigned long long, int, void*)>:
c000f8f0:	57                   	push   edi
c000f8f1:	56                   	push   esi
c000f8f2:	53                   	push   ebx
c000f8f3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f8f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f8fb:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f8ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f903:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000f909:	77 41                	ja     c000f94c <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000f90b:	99                   	cdq    
c000f90c:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000f912:	01 c8                	add    eax,ecx
c000f914:	11 da                	adc    edx,ebx
c000f916:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000f91c:	19 d7                	sbb    edi,edx
c000f91e:	72 33                	jb     c000f953 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000f920:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000f926:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000f92c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000f930:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000f934:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000f93a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000f940:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f944:	5b                   	pop    ebx
c000f945:	5e                   	pop    esi
c000f946:	5f                   	pop    edi
c000f947:	e9 8c 09 00 00       	jmp    c00102d8 <VCache::write(unsigned long long, int, void*)>
c000f94c:	b8 05 00 00 00       	mov    eax,0x5
c000f951:	eb 05                	jmp    c000f958 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000f953:	b8 07 00 00 00       	mov    eax,0x7
c000f958:	5b                   	pop    ebx
c000f959:	5e                   	pop    esi
c000f95a:	5f                   	pop    edi
c000f95b:	c3                   	ret    

c000f95c <Mouse::Mouse(char const*)>:
c000f95c:	83 ec 0c             	sub    esp,0xc
c000f95f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f963:	83 ec 08             	sub    esp,0x8
c000f966:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f96a:	50                   	push   eax
c000f96b:	e8 0a ed ff ff       	call   c000e67a <Device::Device(char const*)>
c000f970:	83 c4 10             	add    esp,0x10
c000f973:	ba 7c 4d 02 c0       	mov    edx,0xc0024d7c
c000f978:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f97c:	89 10                	mov    DWORD PTR [eax],edx
c000f97e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f982:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000f98c:	90                   	nop
c000f98d:	83 c4 0c             	add    esp,0xc
c000f990:	c3                   	ret    
c000f991:	90                   	nop
c000f992:	66 90                	xchg   ax,ax

c000f994 <Mouse::~Mouse()>:
c000f994:	83 ec 0c             	sub    esp,0xc
c000f997:	ba 7c 4d 02 c0       	mov    edx,0xc0024d7c
c000f99c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f9a0:	89 10                	mov    DWORD PTR [eax],edx
c000f9a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f9a6:	83 ec 0c             	sub    esp,0xc
c000f9a9:	50                   	push   eax
c000f9aa:	e8 95 e9 ff ff       	call   c000e344 <Device::~Device()>
c000f9af:	83 c4 10             	add    esp,0x10
c000f9b2:	90                   	nop
c000f9b3:	83 c4 0c             	add    esp,0xc
c000f9b6:	c3                   	ret    
c000f9b7:	90                   	nop

c000f9b8 <Mouse::~Mouse()>:
c000f9b8:	83 ec 0c             	sub    esp,0xc
c000f9bb:	83 ec 0c             	sub    esp,0xc
c000f9be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f9c2:	e8 cd ff ff ff       	call   c000f994 <Mouse::~Mouse()>
c000f9c7:	83 c4 10             	add    esp,0x10
c000f9ca:	83 ec 08             	sub    esp,0x8
c000f9cd:	68 58 01 00 00       	push   0x158
c000f9d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f9d6:	e8 09 d5 ff ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c000f9db:	83 c4 10             	add    esp,0x10
c000f9de:	83 c4 0c             	add    esp,0xc
c000f9e1:	c3                   	ret    

c000f9e2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000f9e2:	55                   	push   ebp
c000f9e3:	57                   	push   edi
c000f9e4:	56                   	push   esi
c000f9e5:	53                   	push   ebx
c000f9e6:	81 ec 28 01 00 00    	sub    esp,0x128
c000f9ec:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000f9f3:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000f9fa:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000fa01:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000fa08:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000fa0c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000fa10:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000fa17:	e8 5a ed ff ff       	call   c000e776 <Device::getName()>
c000fa1c:	5a                   	pop    edx
c000fa1d:	59                   	pop    ecx
c000fa1e:	50                   	push   eax
c000fa1f:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000fa23:	55                   	push   ebp
c000fa24:	e8 0f 0d ff ff       	call   c0000738 <strcpy>
c000fa29:	5b                   	pop    ebx
c000fa2a:	58                   	pop    eax
c000fa2b:	68 a0 4d 02 c0       	push   0xc0024da0
c000fa30:	55                   	push   ebp
c000fa31:	e8 42 0e ff ff       	call   c0000878 <strcat>
c000fa36:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c000fa3d:	e8 75 a2 ff ff       	call   c0009cb7 <malloc>
c000fa42:	83 c4 0c             	add    esp,0xc
c000fa45:	89 c3                	mov    ebx,eax
c000fa47:	57                   	push   edi
c000fa48:	56                   	push   esi
c000fa49:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fa4d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fa51:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000fa58:	55                   	push   ebp
c000fa59:	50                   	push   eax
c000fa5a:	e8 b7 fb ff ff       	call   c000f616 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000fa5f:	83 c4 14             	add    esp,0x14
c000fa62:	53                   	push   ebx
c000fa63:	e8 64 fc ff ff       	call   c000f6cc <LogicalDisk::assignDriveLetter()>
c000fa68:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fa6b:	e8 12 fd ff ff       	call   c000f782 <LogicalDisk::mount()>
c000fa70:	58                   	pop    eax
c000fa71:	5a                   	pop    edx
c000fa72:	53                   	push   ebx
c000fa73:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000fa7a:	e8 f7 e9 ff ff       	call   c000e476 <Device::addChild(Device*)>
c000fa7f:	81 c4 2c 01 00 00    	add    esp,0x12c
c000fa85:	5b                   	pop    ebx
c000fa86:	5e                   	pop    esi
c000fa87:	5f                   	pop    edi
c000fa88:	5d                   	pop    ebp
c000fa89:	c3                   	ret    

c000fa8a <createPartitionsForDisk(PhysicalDisk*)>:
c000fa8a:	55                   	push   ebp
c000fa8b:	57                   	push   edi
c000fa8c:	56                   	push   esi
c000fa8d:	53                   	push   ebx
c000fa8e:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000fa94:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000fa9b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000faa1:	3d 00 02 00 00       	cmp    eax,0x200
c000faa6:	74 27                	je     c000facf <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000faa8:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000faae:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000fab4:	83 ec 10             	sub    esp,0x10
c000fab7:	0f a4 f7 0a          	shld   edi,esi,0xa
c000fabb:	99                   	cdq    
c000fabc:	c1 e6 0a             	shl    esi,0xa
c000fabf:	52                   	push   edx
c000fac0:	89 fd                	mov    ebp,edi
c000fac2:	50                   	push   eax
c000fac3:	55                   	push   ebp
c000fac4:	56                   	push   esi
c000fac5:	e8 56 2c 01 00       	call   c0022720 <__udivdi3>
c000faca:	e9 b1 00 00 00       	jmp    c000fb80 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000facf:	83 ec 0c             	sub    esp,0xc
c000fad2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fad4:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000fad8:	56                   	push   esi
c000fad9:	6a 01                	push   0x1
c000fadb:	6a 00                	push   0x0
c000fadd:	6a 00                	push   0x0
c000fadf:	53                   	push   ebx
c000fae0:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000fae3:	83 c4 20             	add    esp,0x20
c000fae6:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000faee:	75 0a                	jne    c000fafa <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000faf0:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000faf8:	74 2c                	je     c000fb26 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000fafa:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000fb00:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000fb06:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000fb0c:	83 ec 10             	sub    esp,0x10
c000fb0f:	0f a4 c2 0a          	shld   edx,eax,0xa
c000fb13:	89 f7                	mov    edi,esi
c000fb15:	c1 e0 0a             	shl    eax,0xa
c000fb18:	c1 ff 1f             	sar    edi,0x1f
c000fb1b:	57                   	push   edi
c000fb1c:	56                   	push   esi
c000fb1d:	52                   	push   edx
c000fb1e:	50                   	push   eax
c000fb1f:	e8 fc 2b 01 00       	call   c0022720 <__udivdi3>
c000fb24:	eb 5a                	jmp    c000fb80 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000fb26:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000fb2d:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c000fb34:	83 e1 7f             	and    ecx,0x7f
c000fb37:	83 e0 7f             	and    eax,0x7f
c000fb3a:	01 c1                	add    ecx,eax
c000fb3c:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000fb43:	83 e0 7f             	and    eax,0x7f
c000fb46:	01 c1                	add    ecx,eax
c000fb48:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000fb4f:	83 e0 7f             	and    eax,0x7f
c000fb52:	00 c1                	add    cl,al
c000fb54:	74 41                	je     c000fb97 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c000fb56:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000fb5c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000fb62:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000fb68:	83 ec 10             	sub    esp,0x10
c000fb6b:	0f a4 c2 0a          	shld   edx,eax,0xa
c000fb6f:	89 f7                	mov    edi,esi
c000fb71:	c1 e0 0a             	shl    eax,0xa
c000fb74:	c1 ff 1f             	sar    edi,0x1f
c000fb77:	57                   	push   edi
c000fb78:	56                   	push   esi
c000fb79:	52                   	push   edx
c000fb7a:	50                   	push   eax
c000fb7b:	e8 a0 2b 01 00       	call   c0022720 <__udivdi3>
c000fb80:	83 c4 14             	add    esp,0x14
c000fb83:	52                   	push   edx
c000fb84:	50                   	push   eax
c000fb85:	6a 00                	push   0x0
c000fb87:	6a 00                	push   0x0
c000fb89:	53                   	push   ebx
c000fb8a:	e8 53 fe ff ff       	call   c000f9e2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000fb8f:	83 c4 20             	add    esp,0x20
c000fb92:	e9 79 01 00 00       	jmp    c000fd10 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c000fb97:	89 f0                	mov    eax,esi
c000fb99:	31 f6                	xor    esi,esi
c000fb9b:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000fba2:	75 02                	jne    c000fba6 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c000fba4:	89 f1                	mov    ecx,esi
c000fba6:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000fbad:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c000fbb4:	c1 e2 08             	shl    edx,0x8
c000fbb7:	c1 e7 10             	shl    edi,0x10
c000fbba:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c000fbc2:	09 fa                	or     edx,edi
c000fbc4:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c000fbcc:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c000fbd3:	83 c0 10             	add    eax,0x10
c000fbd6:	09 fa                	or     edx,edi
c000fbd8:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c000fbdf:	c1 e7 18             	shl    edi,0x18
c000fbe2:	09 fa                	or     edx,edi
c000fbe4:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c000fbeb:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c000fbef:	c1 e7 10             	shl    edi,0x10
c000fbf2:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000fbf9:	c1 e2 08             	shl    edx,0x8
c000fbfc:	09 fa                	or     edx,edi
c000fbfe:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c000fc05:	09 fa                	or     edx,edi
c000fc07:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c000fc0e:	c1 e7 18             	shl    edi,0x18
c000fc11:	09 fa                	or     edx,edi
c000fc13:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c000fc17:	46                   	inc    esi
c000fc18:	83 fe 04             	cmp    esi,0x4
c000fc1b:	0f 85 7a ff ff ff    	jne    c000fb9b <createPartitionsForDisk(PhysicalDisk*)+0x111>
c000fc21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc25:	83 f0 01             	xor    eax,0x1
c000fc28:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000fc2c:	75 57                	jne    c000fc85 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000fc2e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fc32:	83 f0 01             	xor    eax,0x1
c000fc35:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000fc39:	75 4a                	jne    c000fc85 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000fc3b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000fc3f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000fc47:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fc4f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000fc55:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000fc5b:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000fc61:	0f a4 c2 0a          	shld   edx,eax,0xa
c000fc65:	89 f7                	mov    edi,esi
c000fc67:	c1 e0 0a             	shl    eax,0xa
c000fc6a:	c1 ff 1f             	sar    edi,0x1f
c000fc6d:	57                   	push   edi
c000fc6e:	56                   	push   esi
c000fc6f:	52                   	push   edx
c000fc70:	50                   	push   eax
c000fc71:	e8 aa 2a 01 00       	call   c0022720 <__udivdi3>
c000fc76:	83 c4 10             	add    esp,0x10
c000fc79:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000fc7d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000fc81:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000fc85:	84 c9                	test   cl,cl
c000fc87:	74 53                	je     c000fcdc <createPartitionsForDisk(PhysicalDisk*)+0x252>
c000fc89:	0f b6 c9             	movzx  ecx,cl
c000fc8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc90:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000fc94:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000fc98:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000fc9c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fca0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000fca4:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c000fca8:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c000fcac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000fcb0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000fcb4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fcb8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fcbc:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c000fcc0:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c000fcc4:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c000fcc8:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c000fccc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000fcd0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000fcd4:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c000fcd8:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c000fcdc:	31 ed                	xor    ebp,ebp
c000fcde:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000fce2:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000fce6:	89 f8                	mov    eax,edi
c000fce8:	09 f0                	or     eax,esi
c000fcea:	74 1e                	je     c000fd0a <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000fcec:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000fcf0:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000fcf4:	89 d1                	mov    ecx,edx
c000fcf6:	09 c1                	or     ecx,eax
c000fcf8:	74 10                	je     c000fd0a <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000fcfa:	83 ec 0c             	sub    esp,0xc
c000fcfd:	57                   	push   edi
c000fcfe:	56                   	push   esi
c000fcff:	52                   	push   edx
c000fd00:	50                   	push   eax
c000fd01:	53                   	push   ebx
c000fd02:	e8 db fc ff ff       	call   c000f9e2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000fd07:	83 c4 20             	add    esp,0x20
c000fd0a:	45                   	inc    ebp
c000fd0b:	83 fd 04             	cmp    ebp,0x4
c000fd0e:	75 ce                	jne    c000fcde <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000fd10:	81 c4 5c 02 00 00    	add    esp,0x25c
c000fd16:	5b                   	pop    ebx
c000fd17:	5e                   	pop    esi
c000fd18:	5f                   	pop    edi
c000fd19:	5d                   	pop    ebp
c000fd1a:	c3                   	ret    
c000fd1b:	90                   	nop

c000fd1c <Serial::Serial(char const*)>:
c000fd1c:	83 ec 0c             	sub    esp,0xc
c000fd1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd23:	83 ec 08             	sub    esp,0x8
c000fd26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd2a:	50                   	push   eax
c000fd2b:	e8 4a e9 ff ff       	call   c000e67a <Device::Device(char const*)>
c000fd30:	83 c4 10             	add    esp,0x10
c000fd33:	ba b4 4d 02 c0       	mov    edx,0xc0024db4
c000fd38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd3c:	89 10                	mov    DWORD PTR [eax],edx
c000fd3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd42:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000fd4c:	90                   	nop
c000fd4d:	83 c4 0c             	add    esp,0xc
c000fd50:	c3                   	ret    
c000fd51:	90                   	nop
c000fd52:	66 90                	xchg   ax,ax

c000fd54 <Serial::~Serial()>:
c000fd54:	83 ec 0c             	sub    esp,0xc
c000fd57:	ba b4 4d 02 c0       	mov    edx,0xc0024db4
c000fd5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd60:	89 10                	mov    DWORD PTR [eax],edx
c000fd62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd66:	83 ec 0c             	sub    esp,0xc
c000fd69:	50                   	push   eax
c000fd6a:	e8 d5 e5 ff ff       	call   c000e344 <Device::~Device()>
c000fd6f:	83 c4 10             	add    esp,0x10
c000fd72:	90                   	nop
c000fd73:	83 c4 0c             	add    esp,0xc
c000fd76:	c3                   	ret    
c000fd77:	90                   	nop

c000fd78 <Serial::~Serial()>:
c000fd78:	83 ec 0c             	sub    esp,0xc
c000fd7b:	83 ec 0c             	sub    esp,0xc
c000fd7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd82:	e8 cd ff ff ff       	call   c000fd54 <Serial::~Serial()>
c000fd87:	83 c4 10             	add    esp,0x10
c000fd8a:	83 ec 08             	sub    esp,0x8
c000fd8d:	68 58 01 00 00       	push   0x158
c000fd92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd96:	e8 49 d1 ff ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c000fd9b:	83 c4 10             	add    esp,0x10
c000fd9e:	83 c4 0c             	add    esp,0xc
c000fda1:	c3                   	ret    
c000fda2:	66 90                	xchg   ax,ax

c000fda4 <Timer::Timer(char const*)>:
c000fda4:	83 ec 0c             	sub    esp,0xc
c000fda7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fdab:	83 ec 08             	sub    esp,0x8
c000fdae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fdb2:	50                   	push   eax
c000fdb3:	e8 c2 e8 ff ff       	call   c000e67a <Device::Device(char const*)>
c000fdb8:	83 c4 10             	add    esp,0x10
c000fdbb:	ba f8 4d 02 c0       	mov    edx,0xc0024df8
c000fdc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fdc4:	89 10                	mov    DWORD PTR [eax],edx
c000fdc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fdca:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c000fdd4:	90                   	nop
c000fdd5:	83 c4 0c             	add    esp,0xc
c000fdd8:	c3                   	ret    
c000fdd9:	90                   	nop
c000fdda:	66 90                	xchg   ax,ax

c000fddc <Timer::~Timer()>:
c000fddc:	83 ec 0c             	sub    esp,0xc
c000fddf:	ba f8 4d 02 c0       	mov    edx,0xc0024df8
c000fde4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fde8:	89 10                	mov    DWORD PTR [eax],edx
c000fdea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fdee:	83 ec 0c             	sub    esp,0xc
c000fdf1:	50                   	push   eax
c000fdf2:	e8 4d e5 ff ff       	call   c000e344 <Device::~Device()>
c000fdf7:	83 c4 10             	add    esp,0x10
c000fdfa:	90                   	nop
c000fdfb:	83 c4 0c             	add    esp,0xc
c000fdfe:	c3                   	ret    
c000fdff:	90                   	nop

c000fe00 <Timer::~Timer()>:
c000fe00:	83 ec 0c             	sub    esp,0xc
c000fe03:	83 ec 0c             	sub    esp,0xc
c000fe06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe0a:	e8 cd ff ff ff       	call   c000fddc <Timer::~Timer()>
c000fe0f:	83 c4 10             	add    esp,0x10
c000fe12:	83 ec 08             	sub    esp,0x8
c000fe15:	68 5c 01 00 00       	push   0x15c
c000fe1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe1e:	e8 c1 d0 ff ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c000fe23:	83 c4 10             	add    esp,0x10
c000fe26:	83 c4 0c             	add    esp,0xc
c000fe29:	c3                   	ret    

c000fe2a <Timer::read()>:
c000fe2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe2e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000fe34:	c3                   	ret    

c000fe35 <timerHandler(unsigned int)>:
c000fe35:	56                   	push   esi
c000fe36:	53                   	push   ebx
c000fe37:	51                   	push   ecx
c000fe38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe3c:	01 05 2c 85 02 c0    	add    DWORD PTR ds:0xc002852c,eax
c000fe42:	80 3d 0d 7f 02 c0 00 	cmp    BYTE PTR ds:0xc0027f0d,0x0
c000fe49:	0f 84 49 01 00 00    	je     c000ff98 <timerHandler(unsigned int)+0x163>
c000fe4f:	fa                   	cli    
c000fe50:	ff 05 28 94 02 c0    	inc    DWORD PTR ds:0xc0029428
c000fe56:	83 ec 0c             	sub    esp,0xc
c000fe59:	ff 05 24 94 02 c0    	inc    DWORD PTR ds:0xc0029424
c000fe5f:	68 38 94 02 c0       	push   0xc0029438
c000fe64:	e8 87 2e 01 00       	call   c0022cf0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000fe69:	83 c4 10             	add    esp,0x10
c000fe6c:	84 c0                	test   al,al
c000fe6e:	0f 85 a0 00 00 00    	jne    c000ff14 <timerHandler(unsigned int)+0xdf>
c000fe74:	83 ec 0c             	sub    esp,0xc
c000fe77:	68 38 94 02 c0       	push   0xc0029438
c000fe7c:	e8 8b 2e 01 00       	call   c0022d0c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000fe81:	83 c4 10             	add    esp,0x10
c000fe84:	89 c6                	mov    esi,eax
c000fe86:	66 90                	xchg   ax,ax
c000fe88:	83 ec 0c             	sub    esp,0xc
c000fe8b:	68 38 94 02 c0       	push   0xc0029438
c000fe90:	e8 77 2e 01 00       	call   c0022d0c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000fe95:	c7 04 24 38 94 02 c0 	mov    DWORD PTR [esp],0xc0029438
c000fe9c:	89 c3                	mov    ebx,eax
c000fe9e:	e8 71 2e 01 00       	call   c0022d14 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000fea3:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000fea6:	83 c4 10             	add    esp,0x10
c000fea9:	3b 05 2c 85 02 c0    	cmp    eax,DWORD PTR ds:0xc002852c
c000feaf:	77 23                	ja     c000fed4 <timerHandler(unsigned int)+0x9f>
c000feb1:	83 ec 0c             	sub    esp,0xc
c000feb4:	53                   	push   ebx
c000feb5:	e8 42 7c 00 00       	call   c0017afc <unblockTask(ThreadControlBlock*)>
c000feba:	83 c4 10             	add    esp,0x10
c000febd:	39 de                	cmp    esi,ebx
c000febf:	75 27                	jne    c000fee8 <timerHandler(unsigned int)+0xb3>
c000fec1:	83 ec 0c             	sub    esp,0xc
c000fec4:	68 38 94 02 c0       	push   0xc0029438
c000fec9:	e8 3e 2e 01 00       	call   c0022d0c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000fece:	89 c6                	mov    esi,eax
c000fed0:	eb 12                	jmp    c000fee4 <timerHandler(unsigned int)+0xaf>
c000fed2:	66 90                	xchg   ax,ax
c000fed4:	52                   	push   edx
c000fed5:	52                   	push   edx
c000fed6:	53                   	push   ebx
c000fed7:	68 38 94 02 c0       	push   0xc0029438
c000fedc:	e8 eb 2e 01 00       	call   c0022dcc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000fee1:	8d 76 00             	lea    esi,[esi+0x0]
c000fee4:	83 c4 10             	add    esp,0x10
c000fee7:	90                   	nop
c000fee8:	83 ec 0c             	sub    esp,0xc
c000feeb:	68 38 94 02 c0       	push   0xc0029438
c000fef0:	e8 fb 2d 01 00       	call   c0022cf0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000fef5:	83 c4 10             	add    esp,0x10
c000fef8:	84 c0                	test   al,al
c000fefa:	75 18                	jne    c000ff14 <timerHandler(unsigned int)+0xdf>
c000fefc:	83 ec 0c             	sub    esp,0xc
c000feff:	68 38 94 02 c0       	push   0xc0029438
c000ff04:	e8 03 2e 01 00       	call   c0022d0c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000ff09:	83 c4 10             	add    esp,0x10
c000ff0c:	39 f0                	cmp    eax,esi
c000ff0e:	0f 85 74 ff ff ff    	jne    c000fe88 <timerHandler(unsigned int)+0x53>
c000ff14:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ff19:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000ff1d:	74 41                	je     c000ff60 <timerHandler(unsigned int)+0x12b>
c000ff1f:	80 3d 0c 7f 02 c0 00 	cmp    BYTE PTR ds:0xc0027f0c,0x0
c000ff26:	74 38                	je     c000ff60 <timerHandler(unsigned int)+0x12b>
c000ff28:	fa                   	cli    
c000ff29:	ff 05 28 94 02 c0    	inc    DWORD PTR ds:0xc0029428
c000ff2f:	a1 2c 85 02 c0       	mov    eax,ds:0xc002852c
c000ff34:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000ff3a:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000ff3d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000ff43:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000ff46:	72 08                	jb     c000ff50 <timerHandler(unsigned int)+0x11b>
c000ff48:	e8 f3 76 00 00       	call   c0017640 <schedule()>
c000ff4d:	8d 76 00             	lea    esi,[esi+0x0]
c000ff50:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c000ff55:	48                   	dec    eax
c000ff56:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c000ff5b:	75 03                	jne    c000ff60 <timerHandler(unsigned int)+0x12b>
c000ff5d:	fb                   	sti    
c000ff5e:	66 90                	xchg   ax,ax
c000ff60:	a1 24 94 02 c0       	mov    eax,ds:0xc0029424
c000ff65:	48                   	dec    eax
c000ff66:	a3 24 94 02 c0       	mov    ds:0xc0029424,eax
c000ff6b:	75 1b                	jne    c000ff88 <timerHandler(unsigned int)+0x153>
c000ff6d:	83 3d 20 94 02 c0 00 	cmp    DWORD PTR ds:0xc0029420,0x0
c000ff74:	74 12                	je     c000ff88 <timerHandler(unsigned int)+0x153>
c000ff76:	c7 05 20 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029420,0x0
c000ff80:	e8 bb 76 00 00       	call   c0017640 <schedule()>
c000ff85:	8d 76 00             	lea    esi,[esi+0x0]
c000ff88:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c000ff8d:	48                   	dec    eax
c000ff8e:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c000ff93:	75 03                	jne    c000ff98 <timerHandler(unsigned int)+0x163>
c000ff95:	fb                   	sti    
c000ff96:	66 90                	xchg   ax,ax
c000ff98:	58                   	pop    eax
c000ff99:	5b                   	pop    ebx
c000ff9a:	5e                   	pop    esi
c000ff9b:	c3                   	ret    

c000ff9c <setupTimer(int)>:
c000ff9c:	57                   	push   edi
c000ff9d:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c000ffa2:	56                   	push   esi
c000ffa3:	53                   	push   ebx
c000ffa4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ffa8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000ffae:	83 ec 0c             	sub    esp,0xc
c000ffb1:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c000ffb7:	e8 ba e7 ff ff       	call   c000e776 <Device::getName()>
c000ffbc:	83 c4 10             	add    esp,0x10
c000ffbf:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000ffc2:	0f 85 94 00 00 00    	jne    c001005c <setupTimer(int)+0xc0>
c000ffc8:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c000ffcd:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c000ffd4:	0f 84 82 00 00 00    	je     c001005c <setupTimer(int)+0xc0>
c000ffda:	83 ec 0c             	sub    esp,0xc
c000ffdd:	68 5c 01 00 00       	push   0x15c
c000ffe2:	e8 d0 9c ff ff       	call   c0009cb7 <malloc>
c000ffe7:	89 04 24             	mov    DWORD PTR [esp],eax
c000ffea:	89 c3                	mov    ebx,eax
c000ffec:	e8 8f 22 01 00       	call   c0022280 <PIT::PIT()>
c000fff1:	59                   	pop    ecx
c000fff2:	5f                   	pop    edi
c000fff3:	53                   	push   ebx
c000fff4:	ff 35 08 7f 02 c0    	push   DWORD PTR ds:0xc0027f08
c000fffa:	e8 77 e4 ff ff       	call   c000e476 <Device::addChild(Device*)>
c000ffff:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010001:	6a 00                	push   0x0
c0010003:	6a 00                	push   0x0
c0010005:	56                   	push   esi
c0010006:	53                   	push   ebx
c0010007:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001000a:	83 c4 14             	add    esp,0x14
c001000d:	68 60 01 00 00       	push   0x160
c0010012:	e8 a0 9c ff ff       	call   c0009cb7 <malloc>
c0010017:	89 04 24             	mov    DWORD PTR [esp],eax
c001001a:	89 c7                	mov    edi,eax
c001001c:	e8 13 21 01 00       	call   c0022134 <APICTimer::APICTimer()>
c0010021:	6a 00                	push   0x0
c0010023:	6a 00                	push   0x0
c0010025:	56                   	push   esi
c0010026:	57                   	push   edi
c0010027:	e8 08 20 01 00       	call   c0022034 <APICTimer::open(int, int, void*)>
c001002c:	83 c4 20             	add    esp,0x20
c001002f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010031:	6a 00                	push   0x0
c0010033:	6a 00                	push   0x0
c0010035:	6a 00                	push   0x0
c0010037:	53                   	push   ebx
c0010038:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001003b:	58                   	pop    eax
c001003c:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c0010041:	5a                   	pop    edx
c0010042:	57                   	push   edi
c0010043:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010049:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c001004f:	e8 22 e4 ff ff       	call   c000e476 <Device::addChild(Device*)>
c0010054:	83 c4 10             	add    esp,0x10
c0010057:	eb 37                	jmp    c0010090 <setupTimer(int)+0xf4>
c0010059:	8d 76 00             	lea    esi,[esi+0x0]
c001005c:	83 ec 0c             	sub    esp,0xc
c001005f:	68 5c 01 00 00       	push   0x15c
c0010064:	e8 4e 9c ff ff       	call   c0009cb7 <malloc>
c0010069:	89 04 24             	mov    DWORD PTR [esp],eax
c001006c:	89 c3                	mov    ebx,eax
c001006e:	e8 0d 22 01 00       	call   c0022280 <PIT::PIT()>
c0010073:	58                   	pop    eax
c0010074:	5a                   	pop    edx
c0010075:	53                   	push   ebx
c0010076:	ff 35 08 7f 02 c0    	push   DWORD PTR ds:0xc0027f08
c001007c:	e8 f5 e3 ff ff       	call   c000e476 <Device::addChild(Device*)>
c0010081:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010083:	6a 00                	push   0x0
c0010085:	6a 00                	push   0x0
c0010087:	56                   	push   esi
c0010088:	53                   	push   ebx
c0010089:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001008c:	83 c4 20             	add    esp,0x20
c001008f:	90                   	nop
c0010090:	89 d8                	mov    eax,ebx
c0010092:	5b                   	pop    ebx
c0010093:	5e                   	pop    esi
c0010094:	5f                   	pop    edi
c0010095:	c3                   	ret    
c0010096:	66 90                	xchg   ax,ax

c0010098 <VCache::VCache(PhysicalDisk*)>:
c0010098:	53                   	push   ebx
c0010099:	83 ec 18             	sub    esp,0x18
c001009c:	ba 28 4e 02 c0       	mov    edx,0xc0024e28
c00100a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00100a5:	89 10                	mov    DWORD PTR [eax],edx
c00100a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00100ab:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c00100b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00100b6:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c00100bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00100c1:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c00100c8:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00100cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00100d3:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00100da:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00100e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00100e5:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00100ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00100f0:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00100f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00100f8:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c00100ff:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0010106:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001010a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001010e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010112:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0010116:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001011a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001011e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010122:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0010129:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0010131:	83 ec 0c             	sub    esp,0xc
c0010134:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010138:	e8 7a 9b ff ff       	call   c0009cb7 <malloc>
c001013d:	83 c4 10             	add    esp,0x10
c0010140:	89 c3                	mov    ebx,eax
c0010142:	83 ec 0c             	sub    esp,0xc
c0010145:	53                   	push   ebx
c0010146:	e8 c5 72 00 00       	call   c0017410 <Mutex::Mutex()>
c001014b:	83 c4 10             	add    esp,0x10
c001014e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010152:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010155:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010159:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001015d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010160:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010164:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c001016b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001016f:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0010175:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010179:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001017c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010180:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0010186:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001018c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010190:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0010193:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0010196:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001019a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001019e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00101a2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00101a8:	05 00 01 00 00       	add    eax,0x100
c00101ad:	c1 e0 04             	shl    eax,0x4
c00101b0:	83 ec 0c             	sub    esp,0xc
c00101b3:	50                   	push   eax
c00101b4:	e8 fe 9a ff ff       	call   c0009cb7 <malloc>
c00101b9:	83 c4 10             	add    esp,0x10
c00101bc:	89 c2                	mov    edx,eax
c00101be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00101c2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00101c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00101c9:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c00101d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00101d4:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00101d8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00101dc:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00101e2:	c1 e0 06             	shl    eax,0x6
c00101e5:	83 ec 0c             	sub    esp,0xc
c00101e8:	50                   	push   eax
c00101e9:	e8 c9 9a ff ff       	call   c0009cb7 <malloc>
c00101ee:	83 c4 10             	add    esp,0x10
c00101f1:	89 c2                	mov    edx,eax
c00101f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00101f7:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00101fa:	90                   	nop
c00101fb:	83 c4 18             	add    esp,0x18
c00101fe:	5b                   	pop    ebx
c00101ff:	c3                   	ret    

c0010200 <VCache::invalidateReadBuffer()>:
c0010200:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010204:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c001020a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001020e:	c3                   	ret    
c001020f:	90                   	nop

c0010210 <VCache::writeWriteBuffer()>:
c0010210:	53                   	push   ebx
c0010211:	83 ec 08             	sub    esp,0x8
c0010214:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010218:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001021c:	74 1e                	je     c001023c <VCache::writeWriteBuffer()+0x2c>
c001021e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010221:	83 ec 0c             	sub    esp,0xc
c0010224:	8b 10                	mov    edx,DWORD PTR [eax]
c0010226:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010229:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001022c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001022f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0010232:	50                   	push   eax
c0010233:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0010236:	83 c4 20             	add    esp,0x20
c0010239:	8d 76 00             	lea    esi,[esi+0x0]
c001023c:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0010243:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c001024a:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c001024e:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0010255:	83 c4 08             	add    esp,0x8
c0010258:	5b                   	pop    ebx
c0010259:	c3                   	ret    
c001025a:	66 90                	xchg   ax,ax

c001025c <VCache::~VCache()>:
c001025c:	83 ec 0c             	sub    esp,0xc
c001025f:	ba 28 4e 02 c0       	mov    edx,0xc0024e28
c0010264:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010268:	89 10                	mov    DWORD PTR [eax],edx
c001026a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001026e:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0010271:	84 c0                	test   al,al
c0010273:	74 0f                	je     c0010284 <VCache::~VCache()+0x28>
c0010275:	83 ec 0c             	sub    esp,0xc
c0010278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001027c:	e8 8f ff ff ff       	call   c0010210 <VCache::writeWriteBuffer()>
c0010281:	83 c4 10             	add    esp,0x10
c0010284:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010288:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001028b:	83 ec 0c             	sub    esp,0xc
c001028e:	50                   	push   eax
c001028f:	e8 33 9a ff ff       	call   c0009cc7 <free>
c0010294:	83 c4 10             	add    esp,0x10
c0010297:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001029b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001029e:	83 ec 0c             	sub    esp,0xc
c00102a1:	50                   	push   eax
c00102a2:	e8 20 9a ff ff       	call   c0009cc7 <free>
c00102a7:	83 c4 10             	add    esp,0x10
c00102aa:	90                   	nop
c00102ab:	83 c4 0c             	add    esp,0xc
c00102ae:	c3                   	ret    
c00102af:	90                   	nop

c00102b0 <VCache::~VCache()>:
c00102b0:	83 ec 0c             	sub    esp,0xc
c00102b3:	83 ec 0c             	sub    esp,0xc
c00102b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102ba:	e8 9d ff ff ff       	call   c001025c <VCache::~VCache()>
c00102bf:	83 c4 10             	add    esp,0x10
c00102c2:	83 ec 08             	sub    esp,0x8
c00102c5:	6a 44                	push   0x44
c00102c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102cb:	e8 14 cc ff ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c00102d0:	83 c4 10             	add    esp,0x10
c00102d3:	83 c4 0c             	add    esp,0xc
c00102d6:	c3                   	ret    
c00102d7:	90                   	nop

c00102d8 <VCache::write(unsigned long long, int, void*)>:
c00102d8:	55                   	push   ebp
c00102d9:	31 c0                	xor    eax,eax
c00102db:	57                   	push   edi
c00102dc:	56                   	push   esi
c00102dd:	53                   	push   ebx
c00102de:	83 ec 0c             	sub    esp,0xc
c00102e1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00102e5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00102e9:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00102ed:	8d 76 00             	lea    esi,[esi+0x0]
c00102f0:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00102f4:	7d 1a                	jge    c0010310 <VCache::write(unsigned long long, int, void*)+0x38>
c00102f6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00102f9:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c00102ff:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010303:	0f af c8             	imul   ecx,eax
c0010306:	01 ca                	add    edx,ecx
c0010308:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001030a:	40                   	inc    eax
c001030b:	eb e3                	jmp    c00102f0 <VCache::write(unsigned long long, int, void*)+0x18>
c001030d:	8d 76 00             	lea    esi,[esi+0x0]
c0010310:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0010314:	74 0a                	je     c0010320 <VCache::write(unsigned long long, int, void*)+0x48>
c0010316:	53                   	push   ebx
c0010317:	e8 e4 fe ff ff       	call   c0010200 <VCache::invalidateReadBuffer()>
c001031c:	58                   	pop    eax
c001031d:	8d 76 00             	lea    esi,[esi+0x0]
c0010320:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0010324:	74 5e                	je     c0010384 <VCache::write(unsigned long long, int, void*)+0xac>
c0010326:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c0010329:	89 e8                	mov    eax,ebp
c001032b:	99                   	cdq    
c001032c:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c001032f:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0010332:	89 c1                	mov    ecx,eax
c0010334:	89 d0                	mov    eax,edx
c0010336:	31 f1                	xor    ecx,esi
c0010338:	31 f8                	xor    eax,edi
c001033a:	09 c1                	or     ecx,eax
c001033c:	75 3a                	jne    c0010378 <VCache::write(unsigned long long, int, void*)+0xa0>
c001033e:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0010343:	75 33                	jne    c0010378 <VCache::write(unsigned long long, int, void*)+0xa0>
c0010345:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010348:	89 ef                	mov    edi,ebp
c001034a:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0010350:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010354:	0f af f9             	imul   edi,ecx
c0010357:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c001035a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001035c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001035f:	40                   	inc    eax
c0010360:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0010363:	83 f8 40             	cmp    eax,0x40
c0010366:	75 60                	jne    c00103c8 <VCache::write(unsigned long long, int, void*)+0xf0>
c0010368:	83 ec 0c             	sub    esp,0xc
c001036b:	53                   	push   ebx
c001036c:	e8 9f fe ff ff       	call   c0010210 <VCache::writeWriteBuffer()>
c0010371:	83 c4 10             	add    esp,0x10
c0010374:	eb 52                	jmp    c00103c8 <VCache::write(unsigned long long, int, void*)+0xf0>
c0010376:	66 90                	xchg   ax,ax
c0010378:	83 ec 0c             	sub    esp,0xc
c001037b:	53                   	push   ebx
c001037c:	e8 8f fe ff ff       	call   c0010210 <VCache::writeWriteBuffer()>
c0010381:	83 c4 10             	add    esp,0x10
c0010384:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010387:	83 7c 24 2c 3f       	cmp    DWORD PTR [esp+0x2c],0x3f
c001038c:	7f 22                	jg     c00103b0 <VCache::write(unsigned long long, int, void*)+0xd8>
c001038e:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0010391:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0010394:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0010398:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c001039c:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c001039f:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c00103a2:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c00103a8:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00103ac:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00103ae:	eb 18                	jmp    c00103c8 <VCache::write(unsigned long long, int, void*)+0xf0>
c00103b0:	83 ec 0c             	sub    esp,0xc
c00103b3:	8b 10                	mov    edx,DWORD PTR [eax]
c00103b5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00103b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00103bd:	57                   	push   edi
c00103be:	56                   	push   esi
c00103bf:	50                   	push   eax
c00103c0:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00103c3:	83 c4 20             	add    esp,0x20
c00103c6:	66 90                	xchg   ax,ax
c00103c8:	83 c4 0c             	add    esp,0xc
c00103cb:	31 c0                	xor    eax,eax
c00103cd:	5b                   	pop    ebx
c00103ce:	5e                   	pop    esi
c00103cf:	5f                   	pop    edi
c00103d0:	5d                   	pop    ebp
c00103d1:	c3                   	ret    

c00103d2 <VCache::read(unsigned long long, int, void*)>:
c00103d2:	55                   	push   ebp
c00103d3:	31 c0                	xor    eax,eax
c00103d5:	57                   	push   edi
c00103d6:	56                   	push   esi
c00103d7:	53                   	push   ebx
c00103d8:	83 ec 1c             	sub    esp,0x1c
c00103db:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00103df:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00103e3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00103e7:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00103eb:	90                   	nop
c00103ec:	39 e8                	cmp    eax,ebp
c00103ee:	7d 18                	jge    c0010408 <VCache::read(unsigned long long, int, void*)+0x36>
c00103f0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00103f3:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c00103f9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00103fd:	0f af c8             	imul   ecx,eax
c0010400:	01 ca                	add    edx,ecx
c0010402:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0010404:	40                   	inc    eax
c0010405:	eb e5                	jmp    c00103ec <VCache::read(unsigned long long, int, void*)+0x1a>
c0010407:	90                   	nop
c0010408:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001040c:	74 0e                	je     c001041c <VCache::read(unsigned long long, int, void*)+0x4a>
c001040e:	83 ec 0c             	sub    esp,0xc
c0010411:	53                   	push   ebx
c0010412:	e8 f9 fd ff ff       	call   c0010210 <VCache::writeWriteBuffer()>
c0010417:	83 c4 10             	add    esp,0x10
c001041a:	66 90                	xchg   ax,ax
c001041c:	83 fd 01             	cmp    ebp,0x1
c001041f:	0f 85 87 00 00 00    	jne    c00104ac <VCache::read(unsigned long long, int, void*)+0xda>
c0010425:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010428:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001042c:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0010433:	75 77                	jne    c00104ac <VCache::read(unsigned long long, int, void*)+0xda>
c0010435:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c0010438:	89 e9                	mov    ecx,ebp
c001043a:	f7 d9                	neg    ecx
c001043c:	89 c8                	mov    eax,ecx
c001043e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010442:	c1 f8 1f             	sar    eax,0x1f
c0010445:	21 f1                	and    ecx,esi
c0010447:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001044b:	89 c8                	mov    eax,ecx
c001044d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010451:	21 f9                	and    ecx,edi
c0010453:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0010457:	89 ca                	mov    edx,ecx
c0010459:	74 0d                	je     c0010468 <VCache::read(unsigned long long, int, void*)+0x96>
c001045b:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c001045e:	75 08                	jne    c0010468 <VCache::read(unsigned long long, int, void*)+0x96>
c0010460:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c0010463:	74 27                	je     c001048c <VCache::read(unsigned long long, int, void*)+0xba>
c0010465:	8d 76 00             	lea    esi,[esi+0x0]
c0010468:	83 ec 0c             	sub    esp,0xc
c001046b:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c001046f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010473:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0010476:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0010479:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001047b:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001047e:	55                   	push   ebp
c001047f:	52                   	push   edx
c0010480:	50                   	push   eax
c0010481:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010485:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0010488:	83 c4 20             	add    esp,0x20
c001048b:	90                   	nop
c001048c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001048f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0010493:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0010499:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001049c:	48                   	dec    eax
c001049d:	21 c6                	and    esi,eax
c001049f:	0f af f1             	imul   esi,ecx
c00104a2:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c00104a5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00104a7:	eb 23                	jmp    c00104cc <VCache::read(unsigned long long, int, void*)+0xfa>
c00104a9:	8d 76 00             	lea    esi,[esi+0x0]
c00104ac:	83 ec 0c             	sub    esp,0xc
c00104af:	53                   	push   ebx
c00104b0:	e8 4b fd ff ff       	call   c0010200 <VCache::invalidateReadBuffer()>
c00104b5:	5a                   	pop    edx
c00104b6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00104b9:	8b 10                	mov    edx,DWORD PTR [eax]
c00104bb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00104bf:	55                   	push   ebp
c00104c0:	57                   	push   edi
c00104c1:	56                   	push   esi
c00104c2:	50                   	push   eax
c00104c3:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00104c6:	83 c4 20             	add    esp,0x20
c00104c9:	8d 76 00             	lea    esi,[esi+0x0]
c00104cc:	83 c4 1c             	add    esp,0x1c
c00104cf:	31 c0                	xor    eax,eax
c00104d1:	5b                   	pop    ebx
c00104d2:	5e                   	pop    esi
c00104d3:	5f                   	pop    edi
c00104d4:	5d                   	pop    ebp
c00104d5:	c3                   	ret    

c00104d6 <Video::putrect(int, int, int, int, unsigned int)>:
c00104d6:	55                   	push   ebp
c00104d7:	57                   	push   edi
c00104d8:	56                   	push   esi
c00104d9:	53                   	push   ebx
c00104da:	83 ec 1c             	sub    esp,0x1c
c00104dd:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00104e1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00104e5:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00104e9:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00104ed:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00104f1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00104f5:	01 df                	add    edi,ebx
c00104f7:	39 fb                	cmp    ebx,edi
c00104f9:	7d 1f                	jge    c001051a <Video::putrect(int, int, int, int, unsigned int)+0x44>
c00104fb:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00104ff:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0010503:	7d 12                	jge    c0010517 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0010505:	8b 16                	mov    edx,DWORD PTR [esi]
c0010507:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001050b:	53                   	push   ebx
c001050c:	55                   	push   ebp
c001050d:	45                   	inc    ebp
c001050e:	56                   	push   esi
c001050f:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0010512:	83 c4 10             	add    esp,0x10
c0010515:	eb e8                	jmp    c00104ff <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0010517:	43                   	inc    ebx
c0010518:	eb dd                	jmp    c00104f7 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c001051a:	83 c4 1c             	add    esp,0x1c
c001051d:	5b                   	pop    ebx
c001051e:	5e                   	pop    esi
c001051f:	5f                   	pop    edi
c0010520:	5d                   	pop    ebp
c0010521:	c3                   	ret    

c0010522 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0010522:	55                   	push   ebp
c0010523:	57                   	push   edi
c0010524:	31 ff                	xor    edi,edi
c0010526:	56                   	push   esi
c0010527:	53                   	push   ebx
c0010528:	83 ec 1c             	sub    esp,0x1c
c001052b:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001052f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010533:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c001053a:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c001053f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010543:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0010547:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001054b:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c001054e:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0010552:	01 f9                	add    ecx,edi
c0010554:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0010558:	7d 2f                	jge    c0010589 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c001055a:	31 f6                	xor    esi,esi
c001055c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0010560:	01 f2                	add    edx,esi
c0010562:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0010566:	7d 1a                	jge    c0010582 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0010568:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001056b:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c001056e:	46                   	inc    esi
c001056f:	51                   	push   ecx
c0010570:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010574:	52                   	push   edx
c0010575:	55                   	push   ebp
c0010576:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0010579:	83 c4 10             	add    esp,0x10
c001057c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010580:	eb da                	jmp    c001055c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0010582:	47                   	inc    edi
c0010583:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0010587:	eb c5                	jmp    c001054e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0010589:	83 c4 1c             	add    esp,0x1c
c001058c:	5b                   	pop    ebx
c001058d:	5e                   	pop    esi
c001058e:	5f                   	pop    edi
c001058f:	5d                   	pop    ebp
c0010590:	c3                   	ret    
c0010591:	90                   	nop

c0010592 <Video::blit(unsigned int*, int, int, int, int)>:
c0010592:	55                   	push   ebp
c0010593:	57                   	push   edi
c0010594:	56                   	push   esi
c0010595:	53                   	push   ebx
c0010596:	83 ec 1c             	sub    esp,0x1c
c0010599:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001059d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00105a1:	85 c0                	test   eax,eax
c00105a3:	79 02                	jns    c00105a7 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c00105a5:	31 c0                	xor    eax,eax
c00105a7:	c1 e0 02             	shl    eax,0x2
c00105aa:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00105ae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00105b2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00105b6:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00105ba:	39 d8                	cmp    eax,ebx
c00105bc:	7e 49                	jle    c0010607 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00105be:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00105c4:	7c 41                	jl     c0010607 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00105c6:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00105ca:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00105ce:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00105d2:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c00105d6:	39 f9                	cmp    ecx,edi
c00105d8:	7e 22                	jle    c00105fc <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c00105da:	83 c5 04             	add    ebp,0x4
c00105dd:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00105e3:	7c 14                	jl     c00105f9 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c00105e5:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00105e7:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c00105ea:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00105ee:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00105f2:	56                   	push   esi
c00105f3:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c00105f6:	83 c4 10             	add    esp,0x10
c00105f9:	47                   	inc    edi
c00105fa:	eb d2                	jmp    c00105ce <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c00105fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010600:	43                   	inc    ebx
c0010601:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0010605:	eb ab                	jmp    c00105b2 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0010607:	83 c4 1c             	add    esp,0x1c
c001060a:	5b                   	pop    ebx
c001060b:	5e                   	pop    esi
c001060c:	5f                   	pop    edi
c001060d:	5d                   	pop    ebp
c001060e:	c3                   	ret    
c001060f:	90                   	nop

c0010610 <Video::clearScreen(unsigned int)>:
c0010610:	57                   	push   edi
c0010611:	56                   	push   esi
c0010612:	53                   	push   ebx
c0010613:	31 db                	xor    ebx,ebx
c0010615:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010619:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001061f:	7e 1f                	jle    c0010640 <Video::clearScreen(unsigned int)+0x30>
c0010621:	31 ff                	xor    edi,edi
c0010623:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0010629:	7e 12                	jle    c001063d <Video::clearScreen(unsigned int)+0x2d>
c001062b:	8b 06                	mov    eax,DWORD PTR [esi]
c001062d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010631:	53                   	push   ebx
c0010632:	57                   	push   edi
c0010633:	47                   	inc    edi
c0010634:	56                   	push   esi
c0010635:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0010638:	83 c4 10             	add    esp,0x10
c001063b:	eb e6                	jmp    c0010623 <Video::clearScreen(unsigned int)+0x13>
c001063d:	43                   	inc    ebx
c001063e:	eb d9                	jmp    c0010619 <Video::clearScreen(unsigned int)+0x9>
c0010640:	5b                   	pop    ebx
c0010641:	5e                   	pop    esi
c0010642:	5f                   	pop    edi
c0010643:	c3                   	ret    

c0010644 <Video::putpixel(int, int, unsigned int)>:
c0010644:	c7 44 24 04 30 4e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024e30
c001064c:	e9 8a 39 00 00       	jmp    c0013fdb <Krnl::panic(char const*)>
c0010651:	90                   	nop

c0010652 <Video::Video(char const*)>:
c0010652:	83 ec 0c             	sub    esp,0xc
c0010655:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010659:	83 ec 08             	sub    esp,0x8
c001065c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010660:	50                   	push   eax
c0010661:	e8 14 e0 ff ff       	call   c000e67a <Device::Device(char const*)>
c0010666:	83 c4 10             	add    esp,0x10
c0010669:	ba a0 4e 02 c0       	mov    edx,0xc0024ea0
c001066e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010672:	89 10                	mov    DWORD PTR [eax],edx
c0010674:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010678:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0010682:	90                   	nop
c0010683:	83 c4 0c             	add    esp,0xc
c0010686:	c3                   	ret    
c0010687:	90                   	nop

c0010688 <Video::~Video()>:
c0010688:	83 ec 0c             	sub    esp,0xc
c001068b:	ba a0 4e 02 c0       	mov    edx,0xc0024ea0
c0010690:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010694:	89 10                	mov    DWORD PTR [eax],edx
c0010696:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001069a:	83 ec 0c             	sub    esp,0xc
c001069d:	50                   	push   eax
c001069e:	e8 a1 dc ff ff       	call   c000e344 <Device::~Device()>
c00106a3:	83 c4 10             	add    esp,0x10
c00106a6:	90                   	nop
c00106a7:	83 c4 0c             	add    esp,0xc
c00106aa:	c3                   	ret    
c00106ab:	90                   	nop

c00106ac <Video::~Video()>:
c00106ac:	83 ec 0c             	sub    esp,0xc
c00106af:	83 ec 0c             	sub    esp,0xc
c00106b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106b6:	e8 cd ff ff ff       	call   c0010688 <Video::~Video()>
c00106bb:	83 c4 10             	add    esp,0x10
c00106be:	83 ec 08             	sub    esp,0x8
c00106c1:	68 64 01 00 00       	push   0x164
c00106c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106ca:	e8 15 c8 ff ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c00106cf:	83 c4 10             	add    esp,0x10
c00106d2:	83 c4 0c             	add    esp,0xc
c00106d5:	c3                   	ret    

c00106d6 <Video::isMonochrome()>:
c00106d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106da:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c00106e0:	c3                   	ret    
c00106e1:	90                   	nop

c00106e2 <Video::getWidth()>:
c00106e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106e6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00106ec:	c3                   	ret    
c00106ed:	90                   	nop

c00106ee <Video::getHeight()>:
c00106ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106f2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00106f8:	c3                   	ret    
c00106f9:	90                   	nop

c00106fa <Video::drawCursor(int, int, unsigned char*, int)>:
c00106fa:	55                   	push   ebp
c00106fb:	57                   	push   edi
c00106fc:	56                   	push   esi
c00106fd:	53                   	push   ebx
c00106fe:	83 ec 2c             	sub    esp,0x2c
c0010701:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0010705:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0010709:	83 f8 01             	cmp    eax,0x1
c001070c:	19 c9                	sbb    ecx,ecx
c001070e:	31 db                	xor    ebx,ebx
c0010710:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0010714:	89 cd                	mov    ebp,ecx
c0010716:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c001071e:	f7 d5                	not    ebp
c0010720:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0010726:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001072a:	01 d8                	add    eax,ebx
c001072c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010730:	56                   	push   esi
c0010731:	e8 b8 ff ff ff       	call   c00106ee <Video::getHeight()>
c0010736:	59                   	pop    ecx
c0010737:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001073b:	7e 70                	jle    c00107ad <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c001073d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0010741:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0010745:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0010748:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001074c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0010750:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0010757:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001075b:	89 f8                	mov    eax,edi
c001075d:	83 c0 20             	add    eax,0x20
c0010760:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010764:	56                   	push   esi
c0010765:	e8 78 ff ff ff       	call   c00106e2 <Video::getWidth()>
c001076a:	5a                   	pop    edx
c001076b:	39 c7                	cmp    edi,eax
c001076d:	7d 34                	jge    c00107a3 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c001076f:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0010774:	74 05                	je     c001077b <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0010776:	8b 06                	mov    eax,DWORD PTR [esi]
c0010778:	55                   	push   ebp
c0010779:	eb 0d                	jmp    c0010788 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c001077b:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0010780:	74 12                	je     c0010794 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0010782:	8b 06                	mov    eax,DWORD PTR [esi]
c0010784:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010788:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001078c:	57                   	push   edi
c001078d:	56                   	push   esi
c001078e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0010791:	83 c4 10             	add    esp,0x10
c0010794:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0010798:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c001079c:	47                   	inc    edi
c001079d:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00107a1:	75 c1                	jne    c0010764 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c00107a3:	43                   	inc    ebx
c00107a4:	83 fb 20             	cmp    ebx,0x20
c00107a7:	0f 85 79 ff ff ff    	jne    c0010726 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c00107ad:	83 c4 2c             	add    esp,0x2c
c00107b0:	5b                   	pop    ebx
c00107b1:	5e                   	pop    esi
c00107b2:	5f                   	pop    edi
c00107b3:	5d                   	pop    ebp
c00107b4:	c3                   	ret    
c00107b5:	90                   	nop

c00107b6 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c00107b6:	55                   	push   ebp
c00107b7:	57                   	push   edi
c00107b8:	56                   	push   esi
c00107b9:	53                   	push   ebx
c00107ba:	83 ec 28             	sub    esp,0x28
c00107bd:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00107c1:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c00107c5:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c00107c9:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c00107cd:	c1 e6 08             	shl    esi,0x8
c00107d0:	01 c6                	add    esi,eax
c00107d2:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c00107d6:	c1 e0 08             	shl    eax,0x8
c00107d9:	01 d0                	add    eax,edx
c00107db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00107df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00107e3:	0f af c6             	imul   eax,esi
c00107e6:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c00107ed:	50                   	push   eax
c00107ee:	e8 c4 94 ff ff       	call   c0009cb7 <malloc>
c00107f3:	83 c4 10             	add    esp,0x10
c00107f6:	89 c7                	mov    edi,eax
c00107f8:	85 c0                	test   eax,eax
c00107fa:	75 10                	jne    c001080c <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c00107fc:	83 ec 0c             	sub    esp,0xc
c00107ff:	68 51 4e 02 c0       	push   0xc0024e51
c0010804:	e8 d2 37 00 00       	call   c0013fdb <Krnl::panic(char const*)>
c0010809:	83 c4 10             	add    esp,0x10
c001080c:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c001080f:	ba 12 00 00 00       	mov    edx,0x12
c0010814:	84 c0                	test   al,al
c0010816:	74 11                	je     c0010829 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c0010818:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c001081c:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c0010820:	c1 fa 03             	sar    edx,0x3
c0010823:	0f af d1             	imul   edx,ecx
c0010826:	83 c2 12             	add    edx,0x12
c0010829:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c001082d:	74 04                	je     c0010833 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c001082f:	85 f6                	test   esi,esi
c0010831:	75 12                	jne    c0010845 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c0010833:	83 ec 0c             	sub    esp,0xc
c0010836:	68 61 4e 02 c0       	push   0xc0024e61
c001083b:	e8 85 c7 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0010840:	e9 b8 00 00 00       	jmp    c00108fd <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c0010845:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c0010849:	80 f9 02             	cmp    cl,0x2
c001084c:	0f 85 96 00 00 00    	jne    c00108e8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c0010852:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0010857:	75 0e                	jne    c0010867 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0010859:	84 c0                	test   al,al
c001085b:	75 0a                	jne    c0010867 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c001085d:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0010860:	83 e8 18             	sub    eax,0x18
c0010863:	a8 f7                	test   al,0xf7
c0010865:	74 0a                	je     c0010871 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c0010867:	83 ec 0c             	sub    esp,0xc
c001086a:	68 76 4e 02 c0       	push   0xc0024e76
c001086f:	eb 7f                	jmp    c00108f0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c0010871:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010879:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0010881:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0010885:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001088d:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0010891:	75 0c                	jne    c001089f <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0010893:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c0010898:	c1 e0 18             	shl    eax,0x18
c001089b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001089f:	45                   	inc    ebp
c00108a0:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c00108a5:	c1 e1 10             	shl    ecx,0x10
c00108a8:	89 c8                	mov    eax,ecx
c00108aa:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c00108af:	c1 e1 08             	shl    ecx,0x8
c00108b2:	09 c1                	or     ecx,eax
c00108b4:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c00108b8:	09 c1                	or     ecx,eax
c00108ba:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c00108be:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c00108c2:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c00108c6:	c1 f8 03             	sar    eax,0x3
c00108c9:	01 c2                	add    edx,eax
c00108cb:	89 e8                	mov    eax,ebp
c00108cd:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00108d1:	39 c6                	cmp    esi,eax
c00108d3:	7f b0                	jg     c0010885 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c00108d5:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00108d9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00108dd:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00108e0:	7e 22                	jle    c0010904 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c00108e2:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c00108e6:	eb 99                	jmp    c0010881 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00108e8:	50                   	push   eax
c00108e9:	50                   	push   eax
c00108ea:	51                   	push   ecx
c00108eb:	68 84 4e 02 c0       	push   0xc0024e84
c00108f0:	e8 d0 c6 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00108f5:	89 3c 24             	mov    DWORD PTR [esp],edi
c00108f8:	e8 ca 93 ff ff       	call   c0009cc7 <free>
c00108fd:	83 c4 10             	add    esp,0x10
c0010900:	31 ff                	xor    edi,edi
c0010902:	eb 0f                	jmp    c0010913 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c0010904:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0010908:	89 30                	mov    DWORD PTR [eax],esi
c001090a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001090e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0010911:	89 30                	mov    DWORD PTR [eax],esi
c0010913:	83 c4 1c             	add    esp,0x1c
c0010916:	89 f8                	mov    eax,edi
c0010918:	5b                   	pop    ebx
c0010919:	5e                   	pop    esi
c001091a:	5f                   	pop    edi
c001091b:	5d                   	pop    ebp
c001091c:	c3                   	ret    
c001091d:	90                   	nop

c001091e <Video::putTGA(int, int, unsigned char*, int)>:
c001091e:	55                   	push   ebp
c001091f:	57                   	push   edi
c0010920:	56                   	push   esi
c0010921:	53                   	push   ebx
c0010922:	83 ec 28             	sub    esp,0x28
c0010925:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0010929:	8d 44 24 18          	lea    eax,[esp+0x18]
c001092d:	50                   	push   eax
c001092e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0010932:	50                   	push   eax
c0010933:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0010937:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001093b:	56                   	push   esi
c001093c:	e8 75 fe ff ff       	call   c00107b6 <Video::tgaParse(unsigned char*, int, int*, int*)>
c0010941:	83 c4 20             	add    esp,0x20
c0010944:	85 c0                	test   eax,eax
c0010946:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001094a:	74 35                	je     c0010981 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001094c:	89 c7                	mov    edi,eax
c001094e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0010952:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0010956:	39 d8                	cmp    eax,ebx
c0010958:	7e 27                	jle    c0010981 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001095a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001095e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010962:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0010966:	39 e8                	cmp    eax,ebp
c0010968:	7e 14                	jle    c001097e <Video::putTGA(int, int, unsigned char*, int)+0x60>
c001096a:	8b 06                	mov    eax,DWORD PTR [esi]
c001096c:	83 c7 04             	add    edi,0x4
c001096f:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0010972:	53                   	push   ebx
c0010973:	55                   	push   ebp
c0010974:	45                   	inc    ebp
c0010975:	56                   	push   esi
c0010976:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0010979:	83 c4 10             	add    esp,0x10
c001097c:	eb e0                	jmp    c001095e <Video::putTGA(int, int, unsigned char*, int)+0x40>
c001097e:	43                   	inc    ebx
c001097f:	eb cd                	jmp    c001094e <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0010981:	83 c4 1c             	add    esp,0x1c
c0010984:	5b                   	pop    ebx
c0010985:	5e                   	pop    esi
c0010986:	5f                   	pop    edi
c0010987:	5d                   	pop    ebp
c0010988:	c3                   	ret    
c0010989:	66 90                	xchg   ax,ax
c001098b:	90                   	nop

c001098c <ACPI::close(int, int, void*)>:
c001098c:	83 ec 1c             	sub    esp,0x1c
c001098f:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0010997:	74 0b                	je     c00109a4 <ACPI::close(int, int, void*)+0x18>
c0010999:	b8 00 00 00 00       	mov    eax,0x0
c001099e:	e9 99 00 00 00       	jmp    c0010a3c <ACPI::close(int, int, void*)+0xb0>
c00109a3:	90                   	nop
c00109a4:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00109a9:	75 29                	jne    c00109d4 <ACPI::close(int, int, void*)+0x48>
c00109ab:	a1 48 85 02 c0       	mov    eax,ds:0xc0028548
c00109b0:	85 c0                	test   eax,eax
c00109b2:	74 08                	je     c00109bc <ACPI::close(int, int, void*)+0x30>
c00109b4:	a1 48 85 02 c0       	mov    eax,ds:0xc0028548
c00109b9:	ff d0                	call   eax
c00109bb:	90                   	nop
c00109bc:	83 ec 0c             	sub    esp,0xc
c00109bf:	68 e0 4e 02 c0       	push   0xc0024ee0
c00109c4:	e8 12 36 00 00       	call   c0013fdb <Krnl::panic(char const*)>
c00109c9:	83 c4 10             	add    esp,0x10
c00109cc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00109d1:	eb 69                	jmp    c0010a3c <ACPI::close(int, int, void*)+0xb0>
c00109d3:	90                   	nop
c00109d4:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c00109d9:	75 59                	jne    c0010a34 <ACPI::close(int, int, void*)+0xa8>
c00109db:	a1 44 85 02 c0       	mov    eax,ds:0xc0028544
c00109e0:	85 c0                	test   eax,eax
c00109e2:	74 08                	je     c00109ec <ACPI::close(int, int, void*)+0x60>
c00109e4:	a1 44 85 02 c0       	mov    eax,ds:0xc0028544
c00109e9:	ff d0                	call   eax
c00109eb:	90                   	nop
c00109ec:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c00109f1:	8d 76 00             	lea    esi,[esi+0x0]
c00109f4:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00109f9:	83 e0 02             	and    eax,0x2
c00109fc:	74 1e                	je     c0010a1c <ACPI::close(int, int, void*)+0x90>
c00109fe:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0010a05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010a09:	89 c2                	mov    edx,eax
c0010a0b:	ec                   	in     al,dx
c0010a0c:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0010a10:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0010a14:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0010a18:	eb da                	jmp    c00109f4 <ACPI::close(int, int, void*)+0x68>
c0010a1a:	66 90                	xchg   ax,ax
c0010a1c:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0010a23:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0010a28:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0010a2c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010a30:	ee                   	out    dx,al
c0010a31:	8d 76 00             	lea    esi,[esi+0x0]
c0010a34:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010a39:	8d 76 00             	lea    esi,[esi+0x0]
c0010a3c:	83 c4 1c             	add    esp,0x1c
c0010a3f:	c3                   	ret    

c0010a40 <findRSDP()>:
c0010a40:	83 ec 1c             	sub    esp,0x1c
c0010a43:	83 ec 0c             	sub    esp,0xc
c0010a46:	68 03 50 02 c0       	push   0xc0025003
c0010a4b:	e8 c1 92 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0010a50:	83 c4 10             	add    esp,0x10
c0010a53:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c0010a58:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0010a5e:	83 e0 04             	and    eax,0x4
c0010a61:	84 c0                	test   al,al
c0010a63:	75 0b                	jne    c0010a70 <findRSDP()+0x30>
c0010a65:	b8 00 00 00 00       	mov    eax,0x0
c0010a6a:	e9 a1 00 00 00       	jmp    c0010b10 <findRSDP()+0xd0>
c0010a6f:	90                   	nop
c0010a70:	a1 38 7f 02 c0       	mov    eax,ds:0xc0027f38
c0010a75:	3d ff 07 00 00       	cmp    eax,0x7ff
c0010a7a:	7f 1c                	jg     c0010a98 <findRSDP()+0x58>
c0010a7c:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c0010a81:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0010a87:	83 e2 fb             	and    edx,0xfffffffb
c0010a8a:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0010a90:	b8 00 00 00 00       	mov    eax,0x0
c0010a95:	eb 79                	jmp    c0010b10 <findRSDP()+0xd0>
c0010a97:	90                   	nop
c0010a98:	83 ec 0c             	sub    esp,0xc
c0010a9b:	68 13 50 02 c0       	push   0xc0025013
c0010aa0:	e8 6c 92 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0010aa5:	83 c4 10             	add    esp,0x10
c0010aa8:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0010ab0:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0010ab8:	77 3e                	ja     c0010af8 <findRSDP()+0xb8>
c0010aba:	83 ec 04             	sub    esp,0x4
c0010abd:	6a 08                	push   0x8
c0010abf:	68 2c 50 02 c0       	push   0xc002502c
c0010ac4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010ac8:	e8 ab fa fe ff       	call   c0000578 <memcmp>
c0010acd:	83 c4 10             	add    esp,0x10
c0010ad0:	85 c0                	test   eax,eax
c0010ad2:	0f 94 c0             	sete   al
c0010ad5:	84 c0                	test   al,al
c0010ad7:	74 17                	je     c0010af0 <findRSDP()+0xb0>
c0010ad9:	83 ec 0c             	sub    esp,0xc
c0010adc:	68 35 50 02 c0       	push   0xc0025035
c0010ae1:	e8 2b 92 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0010ae6:	83 c4 10             	add    esp,0x10
c0010ae9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010aed:	eb 21                	jmp    c0010b10 <findRSDP()+0xd0>
c0010aef:	90                   	nop
c0010af0:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0010af5:	eb b9                	jmp    c0010ab0 <findRSDP()+0x70>
c0010af7:	90                   	nop
c0010af8:	83 ec 0c             	sub    esp,0xc
c0010afb:	68 43 50 02 c0       	push   0xc0025043
c0010b00:	e8 0c 92 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0010b05:	83 c4 10             	add    esp,0x10
c0010b08:	b8 00 00 00 00       	mov    eax,0x0
c0010b0d:	8d 76 00             	lea    esi,[esi+0x0]
c0010b10:	83 c4 1c             	add    esp,0x1c
c0010b13:	c3                   	ret    

c0010b14 <loadACPITables(unsigned char*)>:
c0010b14:	57                   	push   edi
c0010b15:	56                   	push   esi
c0010b16:	53                   	push   ebx
c0010b17:	83 ec 60             	sub    esp,0x60
c0010b1a:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c0010b1f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0010b25:	83 e0 04             	and    eax,0x4
c0010b28:	84 c0                	test   al,al
c0010b2a:	0f 84 3c 02 00 00    	je     c0010d6c <loadACPITables(unsigned char*)+0x258>
c0010b30:	a0 60 87 02 c0       	mov    al,ds:0xc0028760
c0010b35:	84 c0                	test   al,al
c0010b37:	74 77                	je     c0010bb0 <loadACPITables(unsigned char*)+0x9c>
c0010b39:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0010b3d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0010b41:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0010b45:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b48:	83 e8 24             	sub    eax,0x24
c0010b4b:	c1 e8 03             	shr    eax,0x3
c0010b4e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0010b52:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c0010b5a:	66 90                	xchg   ax,ax
c0010b5c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0010b60:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c0010b64:	0f 8d b6 00 00 00    	jge    c0010c20 <loadACPITables(unsigned char*)+0x10c>
c0010b6a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0010b6e:	83 c0 24             	add    eax,0x24
c0010b71:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0010b75:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0010b79:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0010b7d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0010b81:	c1 e0 03             	shl    eax,0x3
c0010b84:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c0010b88:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0010b8c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010b8f:	8b 00                	mov    eax,DWORD PTR [eax]
c0010b91:	89 c1                	mov    ecx,eax
c0010b93:	a1 4c 85 02 c0       	mov    eax,ds:0xc002854c
c0010b98:	8d 50 01             	lea    edx,[eax+0x1]
c0010b9b:	89 15 4c 85 02 c0    	mov    DWORD PTR ds:0xc002854c,edx
c0010ba1:	89 ca                	mov    edx,ecx
c0010ba3:	89 14 c5 64 85 02 c0 	mov    DWORD PTR [eax*8-0x3ffd7a9c],edx
c0010baa:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c0010bae:	eb ac                	jmp    c0010b5c <loadACPITables(unsigned char*)+0x48>
c0010bb0:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0010bb4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0010bb8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010bbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bbf:	83 e8 24             	sub    eax,0x24
c0010bc2:	c1 e8 02             	shr    eax,0x2
c0010bc5:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0010bc9:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0010bd1:	8d 76 00             	lea    esi,[esi+0x0]
c0010bd4:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0010bd8:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c0010bdc:	7d 42                	jge    c0010c20 <loadACPITables(unsigned char*)+0x10c>
c0010bde:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0010be2:	83 c0 24             	add    eax,0x24
c0010be5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0010be9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0010bed:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0010bf1:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0010bf5:	c1 e0 02             	shl    eax,0x2
c0010bf8:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0010bfc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010c00:	8b 08                	mov    ecx,DWORD PTR [eax]
c0010c02:	a1 4c 85 02 c0       	mov    eax,ds:0xc002854c
c0010c07:	8d 50 01             	lea    edx,[eax+0x1]
c0010c0a:	89 15 4c 85 02 c0    	mov    DWORD PTR ds:0xc002854c,edx
c0010c10:	89 ca                	mov    edx,ecx
c0010c12:	89 14 c5 64 85 02 c0 	mov    DWORD PTR [eax*8-0x3ffd7a9c],edx
c0010c19:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c0010c1d:	eb b5                	jmp    c0010bd4 <loadACPITables(unsigned char*)+0xc0>
c0010c1f:	90                   	nop
c0010c20:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0010c28:	a1 4c 85 02 c0       	mov    eax,ds:0xc002854c
c0010c2d:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0010c31:	0f 8d 39 01 00 00    	jge    c0010d70 <loadACPITables(unsigned char*)+0x25c>
c0010c37:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0010c3b:	8b 04 c5 64 85 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd7a9c]
c0010c42:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010c46:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010c4a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0010c4e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010c52:	25 ff 0f 00 00       	and    eax,0xfff
c0010c57:	89 c6                	mov    esi,eax
c0010c59:	8b 1d 34 80 02 c0    	mov    ebx,DWORD PTR ds:0xc0028034
c0010c5f:	83 ec 0c             	sub    esp,0xc
c0010c62:	6a 01                	push   0x1
c0010c64:	e8 00 b0 ff ff       	call   c000bc69 <Virt::allocateKernelVirtualPages(int)>
c0010c69:	83 c4 10             	add    esp,0x10
c0010c6c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0010c70:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0010c76:	83 ec 0c             	sub    esp,0xc
c0010c79:	6a 01                	push   0x1
c0010c7b:	6a 01                	push   0x1
c0010c7d:	50                   	push   eax
c0010c7e:	52                   	push   edx
c0010c7f:	53                   	push   ebx
c0010c80:	e8 47 b9 ff ff       	call   c000c5cc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0010c85:	83 c4 20             	add    esp,0x20
c0010c88:	09 f0                	or     eax,esi
c0010c8a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010c8e:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0010c92:	c1 e0 03             	shl    eax,0x3
c0010c95:	05 60 85 02 c0       	add    eax,0xc0028560
c0010c9a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010c9e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010ca2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010ca6:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c0010cae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010cb2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010cb6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010cba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0010cbe:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010cc2:	89 c6                	mov    esi,eax
c0010cc4:	89 d7                	mov    edi,edx
c0010cc6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010cc8:	89 c8                	mov    eax,ecx
c0010cca:	89 fa                	mov    edx,edi
c0010ccc:	89 f3                	mov    ebx,esi
c0010cce:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0010cd2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0010cd6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010cda:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010cde:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ce1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010ce5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010ce9:	05 00 10 00 00       	add    eax,0x1000
c0010cee:	c1 e8 0c             	shr    eax,0xc
c0010cf1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0010cf5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010cf9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0010cfd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010d01:	25 ff 0f 00 00       	and    eax,0xfff
c0010d06:	89 c6                	mov    esi,eax
c0010d08:	8b 1d 34 80 02 c0    	mov    ebx,DWORD PTR ds:0xc0028034
c0010d0e:	83 ec 0c             	sub    esp,0xc
c0010d11:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0010d15:	e8 4f af ff ff       	call   c000bc69 <Virt::allocateKernelVirtualPages(int)>
c0010d1a:	83 c4 10             	add    esp,0x10
c0010d1d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0010d21:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0010d27:	83 ec 0c             	sub    esp,0xc
c0010d2a:	6a 01                	push   0x1
c0010d2c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0010d30:	50                   	push   eax
c0010d31:	52                   	push   edx
c0010d32:	53                   	push   ebx
c0010d33:	e8 94 b8 ff ff       	call   c000c5cc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0010d38:	83 c4 20             	add    esp,0x20
c0010d3b:	09 f0                	or     eax,esi
c0010d3d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010d41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d45:	83 ec 0c             	sub    esp,0xc
c0010d48:	50                   	push   eax
c0010d49:	e8 0f b2 ff ff       	call   c000bf5d <Virt::freeKernelVirtualPages(unsigned long)>
c0010d4e:	83 c4 10             	add    esp,0x10
c0010d51:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0010d55:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010d59:	89 14 c5 64 85 02 c0 	mov    DWORD PTR [eax*8-0x3ffd7a9c],edx
c0010d60:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c0010d64:	e9 bf fe ff ff       	jmp    c0010c28 <loadACPITables(unsigned char*)+0x114>
c0010d69:	8d 76 00             	lea    esi,[esi+0x0]
c0010d6c:	90                   	nop
c0010d6d:	8d 76 00             	lea    esi,[esi+0x0]
c0010d70:	83 c4 60             	add    esp,0x60
c0010d73:	5b                   	pop    ebx
c0010d74:	5e                   	pop    esi
c0010d75:	5f                   	pop    edi
c0010d76:	c3                   	ret    
c0010d77:	90                   	nop

c0010d78 <findRSDT(unsigned char*)>:
c0010d78:	57                   	push   edi
c0010d79:	56                   	push   esi
c0010d7a:	53                   	push   ebx
c0010d7b:	83 ec 50             	sub    esp,0x50
c0010d7e:	83 ec 0c             	sub    esp,0xc
c0010d81:	68 57 50 02 c0       	push   0xc0025057
c0010d86:	e8 86 8f ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0010d8b:	83 c4 10             	add    esp,0x10
c0010d8e:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c0010d93:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0010d99:	83 e0 04             	and    eax,0x4
c0010d9c:	84 c0                	test   al,al
c0010d9e:	75 0c                	jne    c0010dac <findRSDT(unsigned char*)+0x34>
c0010da0:	b8 00 00 00 00       	mov    eax,0x0
c0010da5:	e9 86 01 00 00       	jmp    c0010f30 <findRSDT(unsigned char*)+0x1b8>
c0010daa:	66 90                	xchg   ax,ax
c0010dac:	83 ec 0c             	sub    esp,0xc
c0010daf:	68 69 50 02 c0       	push   0xc0025069
c0010db4:	e8 58 8f ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0010db9:	83 c4 10             	add    esp,0x10
c0010dbc:	89 e0                	mov    eax,esp
c0010dbe:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0010dc2:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0010dc6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0010dca:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c0010dd2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0010dd6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010dda:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0010dde:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0010de2:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0010de6:	89 c6                	mov    esi,eax
c0010de8:	89 d7                	mov    edi,edx
c0010dea:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010dec:	89 c8                	mov    eax,ecx
c0010dee:	89 fa                	mov    edx,edi
c0010df0:	89 f3                	mov    ebx,esi
c0010df2:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0010df6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0010dfa:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0010dfe:	83 ec 0c             	sub    esp,0xc
c0010e01:	68 7b 50 02 c0       	push   0xc002507b
c0010e06:	e8 06 8f ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0010e0b:	83 c4 10             	add    esp,0x10
c0010e0e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0010e12:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c0010e16:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0010e1e:	83 ec 0c             	sub    esp,0xc
c0010e21:	68 8d 50 02 c0       	push   0xc002508d
c0010e26:	e8 e6 8e ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0010e2b:	83 c4 10             	add    esp,0x10
c0010e2e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010e32:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0010e36:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0010e3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e3e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0010e42:	83 ec 04             	sub    esp,0x4
c0010e45:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0010e49:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0010e4d:	68 04 4f 02 c0       	push   0xc0024f04
c0010e52:	e8 6e c1 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0010e57:	83 c4 10             	add    esp,0x10
c0010e5a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0010e5e:	25 ff 0f 00 00       	and    eax,0xfff
c0010e63:	89 c6                	mov    esi,eax
c0010e65:	8b 1d 34 80 02 c0    	mov    ebx,DWORD PTR ds:0xc0028034
c0010e6b:	83 ec 0c             	sub    esp,0xc
c0010e6e:	6a 02                	push   0x2
c0010e70:	e8 f4 ad ff ff       	call   c000bc69 <Virt::allocateKernelVirtualPages(int)>
c0010e75:	83 c4 10             	add    esp,0x10
c0010e78:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0010e7c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0010e82:	83 ec 0c             	sub    esp,0xc
c0010e85:	6a 01                	push   0x1
c0010e87:	6a 02                	push   0x2
c0010e89:	50                   	push   eax
c0010e8a:	52                   	push   edx
c0010e8b:	53                   	push   ebx
c0010e8c:	e8 3b b7 ff ff       	call   c000c5cc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0010e91:	83 c4 20             	add    esp,0x20
c0010e94:	09 f0                	or     eax,esi
c0010e96:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0010e9a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010e9e:	25 ff 0f 00 00       	and    eax,0xfff
c0010ea3:	89 c6                	mov    esi,eax
c0010ea5:	8b 1d 34 80 02 c0    	mov    ebx,DWORD PTR ds:0xc0028034
c0010eab:	83 ec 0c             	sub    esp,0xc
c0010eae:	6a 02                	push   0x2
c0010eb0:	e8 b4 ad ff ff       	call   c000bc69 <Virt::allocateKernelVirtualPages(int)>
c0010eb5:	83 c4 10             	add    esp,0x10
c0010eb8:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0010ebc:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0010ec2:	83 ec 0c             	sub    esp,0xc
c0010ec5:	6a 01                	push   0x1
c0010ec7:	6a 02                	push   0x2
c0010ec9:	50                   	push   eax
c0010eca:	52                   	push   edx
c0010ecb:	53                   	push   ebx
c0010ecc:	e8 fb b6 ff ff       	call   c000c5cc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0010ed1:	83 c4 20             	add    esp,0x20
c0010ed4:	09 f0                	or     eax,esi
c0010ed6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0010eda:	83 ec 04             	sub    esp,0x4
c0010edd:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0010ee1:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0010ee5:	68 24 4f 02 c0       	push   0xc0024f24
c0010eea:	e8 d6 c0 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0010eef:	83 c4 10             	add    esp,0x10
c0010ef2:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0010ef7:	75 13                	jne    c0010f0c <findRSDT(unsigned char*)+0x194>
c0010ef9:	c6 05 60 87 02 c0 00 	mov    BYTE PTR ds:0xc0028760,0x0
c0010f00:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010f04:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0010f08:	eb 22                	jmp    c0010f2c <findRSDT(unsigned char*)+0x1b4>
c0010f0a:	66 90                	xchg   ax,ax
c0010f0c:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c0010f11:	75 11                	jne    c0010f24 <findRSDT(unsigned char*)+0x1ac>
c0010f13:	c6 05 60 87 02 c0 01 	mov    BYTE PTR ds:0xc0028760,0x1
c0010f1a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0010f1e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0010f22:	eb 08                	jmp    c0010f2c <findRSDT(unsigned char*)+0x1b4>
c0010f24:	b8 00 00 00 00       	mov    eax,0x0
c0010f29:	eb 05                	jmp    c0010f30 <findRSDT(unsigned char*)+0x1b8>
c0010f2b:	90                   	nop
c0010f2c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0010f30:	83 c4 50             	add    esp,0x50
c0010f33:	5b                   	pop    ebx
c0010f34:	5e                   	pop    esi
c0010f35:	5f                   	pop    edi
c0010f36:	c3                   	ret    
c0010f37:	90                   	nop

c0010f38 <findDataTable(unsigned char*, char*)>:
c0010f38:	83 ec 1c             	sub    esp,0x1c
c0010f3b:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c0010f40:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0010f46:	83 e0 04             	and    eax,0x4
c0010f49:	84 c0                	test   al,al
c0010f4b:	75 07                	jne    c0010f54 <findDataTable(unsigned char*, char*)+0x1c>
c0010f4d:	b8 00 00 00 00       	mov    eax,0x0
c0010f52:	eb 58                	jmp    c0010fac <findDataTable(unsigned char*, char*)+0x74>
c0010f54:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010f5c:	a1 4c 85 02 c0       	mov    eax,ds:0xc002854c
c0010f61:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0010f65:	7d 3d                	jge    c0010fa4 <findDataTable(unsigned char*, char*)+0x6c>
c0010f67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010f6b:	c1 e0 03             	shl    eax,0x3
c0010f6e:	05 60 85 02 c0       	add    eax,0xc0028560
c0010f73:	83 ec 04             	sub    esp,0x4
c0010f76:	6a 04                	push   0x4
c0010f78:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010f7c:	50                   	push   eax
c0010f7d:	e8 f6 f5 fe ff       	call   c0000578 <memcmp>
c0010f82:	83 c4 10             	add    esp,0x10
c0010f85:	85 c0                	test   eax,eax
c0010f87:	0f 94 c0             	sete   al
c0010f8a:	84 c0                	test   al,al
c0010f8c:	74 0e                	je     c0010f9c <findDataTable(unsigned char*, char*)+0x64>
c0010f8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010f92:	8b 04 c5 64 85 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd7a9c]
c0010f99:	eb 11                	jmp    c0010fac <findDataTable(unsigned char*, char*)+0x74>
c0010f9b:	90                   	nop
c0010f9c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0010fa0:	eb ba                	jmp    c0010f5c <findDataTable(unsigned char*, char*)+0x24>
c0010fa2:	66 90                	xchg   ax,ax
c0010fa4:	b8 00 00 00 00       	mov    eax,0x0
c0010fa9:	8d 76 00             	lea    esi,[esi+0x0]
c0010fac:	83 c4 1c             	add    esp,0x1c
c0010faf:	c3                   	ret    

c0010fb0 <scanMADT()>:
c0010fb0:	53                   	push   ebx
c0010fb1:	83 ec 38             	sub    esp,0x38
c0010fb4:	83 ec 0c             	sub    esp,0xc
c0010fb7:	68 9f 50 02 c0       	push   0xc002509f
c0010fbc:	e8 50 8d ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0010fc1:	83 c4 10             	add    esp,0x10
c0010fc4:	a1 20 7f 02 c0       	mov    eax,ds:0xc0027f20
c0010fc9:	25 00 04 00 00       	and    eax,0x400
c0010fce:	74 14                	je     c0010fe4 <scanMADT()+0x34>
c0010fd0:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c0010fd5:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0010fdb:	83 e2 fb             	and    edx,0xfffffffb
c0010fde:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0010fe4:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c0010fe9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0010fef:	83 e0 04             	and    eax,0x4
c0010ff2:	84 c0                	test   al,al
c0010ff4:	0f 84 82 04 00 00    	je     c001147c <scanMADT()+0x4cc>
c0010ffa:	83 ec 0c             	sub    esp,0xc
c0010ffd:	68 ac 50 02 c0       	push   0xc00250ac
c0011002:	e8 0a 8d ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0011007:	83 c4 10             	add    esp,0x10
c001100a:	e8 31 fa ff ff       	call   c0010a40 <findRSDP()>
c001100f:	a3 6c 87 02 c0       	mov    ds:0xc002876c,eax
c0011014:	a1 6c 87 02 c0       	mov    eax,ds:0xc002876c
c0011019:	85 c0                	test   eax,eax
c001101b:	75 1b                	jne    c0011038 <scanMADT()+0x88>
c001101d:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c0011022:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011028:	83 e2 fb             	and    edx,0xfffffffb
c001102b:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011031:	e9 4e 04 00 00       	jmp    c0011484 <scanMADT()+0x4d4>
c0011036:	66 90                	xchg   ax,ax
c0011038:	83 ec 0c             	sub    esp,0xc
c001103b:	68 be 50 02 c0       	push   0xc00250be
c0011040:	e8 cc 8c ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0011045:	83 c4 10             	add    esp,0x10
c0011048:	a1 6c 87 02 c0       	mov    eax,ds:0xc002876c
c001104d:	83 ec 0c             	sub    esp,0xc
c0011050:	50                   	push   eax
c0011051:	e8 22 fd ff ff       	call   c0010d78 <findRSDT(unsigned char*)>
c0011056:	83 c4 10             	add    esp,0x10
c0011059:	a3 68 87 02 c0       	mov    ds:0xc0028768,eax
c001105e:	a1 68 87 02 c0       	mov    eax,ds:0xc0028768
c0011063:	85 c0                	test   eax,eax
c0011065:	75 19                	jne    c0011080 <scanMADT()+0xd0>
c0011067:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c001106c:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011072:	83 e2 fb             	and    edx,0xfffffffb
c0011075:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001107b:	e9 04 04 00 00       	jmp    c0011484 <scanMADT()+0x4d4>
c0011080:	83 ec 0c             	sub    esp,0xc
c0011083:	68 ce 50 02 c0       	push   0xc00250ce
c0011088:	e8 84 8c ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001108d:	83 c4 10             	add    esp,0x10
c0011090:	a1 68 87 02 c0       	mov    eax,ds:0xc0028768
c0011095:	83 ec 0c             	sub    esp,0xc
c0011098:	50                   	push   eax
c0011099:	e8 76 fa ff ff       	call   c0010b14 <loadACPITables(unsigned char*)>
c001109e:	83 c4 10             	add    esp,0x10
c00110a1:	a1 68 87 02 c0       	mov    eax,ds:0xc0028768
c00110a6:	83 ec 08             	sub    esp,0x8
c00110a9:	68 e6 50 02 c0       	push   0xc00250e6
c00110ae:	50                   	push   eax
c00110af:	e8 84 fe ff ff       	call   c0010f38 <findDataTable(unsigned char*, char*)>
c00110b4:	83 c4 10             	add    esp,0x10
c00110b7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00110bb:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c00110c0:	75 1a                	jne    c00110dc <scanMADT()+0x12c>
c00110c2:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c00110c7:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00110cd:	83 e2 fe             	and    edx,0xfffffffe
c00110d0:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00110d6:	e9 a9 03 00 00       	jmp    c0011484 <scanMADT()+0x4d4>
c00110db:	90                   	nop
c00110dc:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00110e4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00110e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110eb:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c00110ef:	0f 87 8f 03 00 00    	ja     c0011484 <scanMADT()+0x4d4>
c00110f5:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c00110fd:	0f 87 81 03 00 00    	ja     c0011484 <scanMADT()+0x4d4>
c0011103:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011107:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001110b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001110f:	8d 50 01             	lea    edx,[eax+0x1]
c0011112:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011116:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001111a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001111e:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0011122:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011126:	8d 50 01             	lea    edx,[eax+0x1]
c0011129:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001112d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011131:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011135:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0011139:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c001113e:	0f 86 3c 03 00 00    	jbe    c0011480 <scanMADT()+0x4d0>
c0011144:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0011149:	75 59                	jne    c00111a4 <scanMADT()+0x1f4>
c001114b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001114f:	8d 50 01             	lea    edx,[eax+0x1]
c0011152:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011156:	8a 15 60 89 02 c0    	mov    dl,BYTE PTR ds:0xc0028960
c001115c:	0f b6 d2             	movzx  edx,dl
c001115f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011163:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011167:	88 82 a0 89 02 c0    	mov    BYTE PTR [edx-0x3ffd7660],al
c001116d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011171:	8d 50 01             	lea    edx,[eax+0x1]
c0011174:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011178:	8a 15 60 89 02 c0    	mov    dl,BYTE PTR ds:0xc0028960
c001117e:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011181:	88 0d 60 89 02 c0    	mov    BYTE PTR ds:0xc0028960,cl
c0011187:	0f b6 d2             	movzx  edx,dl
c001118a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001118e:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011192:	88 82 80 89 02 c0    	mov    BYTE PTR [edx-0x3ffd7680],al
c0011198:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001119d:	e9 c6 02 00 00       	jmp    c0011468 <scanMADT()+0x4b8>
c00111a2:	66 90                	xchg   ax,ax
c00111a4:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c00111a9:	0f 85 15 01 00 00    	jne    c00112c4 <scanMADT()+0x314>
c00111af:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00111b3:	8d 50 01             	lea    edx,[eax+0x1]
c00111b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00111ba:	8a 15 20 88 02 c0    	mov    dl,BYTE PTR ds:0xc0028820
c00111c0:	0f b6 d2             	movzx  edx,dl
c00111c3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00111c7:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00111cb:	88 82 40 88 02 c0    	mov    BYTE PTR [edx-0x3ffd77c0],al
c00111d1:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c00111d5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00111d9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00111dd:	01 d0                	add    eax,edx
c00111df:	83 c0 2c             	add    eax,0x2c
c00111e2:	8a 00                	mov    al,BYTE PTR [eax]
c00111e4:	0f b6 d0             	movzx  edx,al
c00111e7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00111eb:	8d 48 01             	lea    ecx,[eax+0x1]
c00111ee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00111f2:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00111f6:	0f b6 c0             	movzx  eax,al
c00111f9:	c1 e0 08             	shl    eax,0x8
c00111fc:	89 d1                	mov    ecx,edx
c00111fe:	09 c1                	or     ecx,eax
c0011200:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011204:	8d 50 02             	lea    edx,[eax+0x2]
c0011207:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001120b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001120f:	0f b6 c0             	movzx  eax,al
c0011212:	c1 e0 10             	shl    eax,0x10
c0011215:	09 c1                	or     ecx,eax
c0011217:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001121b:	8d 50 03             	lea    edx,[eax+0x3]
c001121e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011222:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011226:	0f b6 c0             	movzx  eax,al
c0011229:	c1 e0 18             	shl    eax,0x18
c001122c:	09 c1                	or     ecx,eax
c001122e:	89 ca                	mov    edx,ecx
c0011230:	a0 20 88 02 c0       	mov    al,ds:0xc0028820
c0011235:	0f b6 c0             	movzx  eax,al
c0011238:	89 14 85 60 88 02 c0 	mov    DWORD PTR [eax*4-0x3ffd77a0],edx
c001123f:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011244:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011248:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001124c:	01 d0                	add    eax,edx
c001124e:	83 c0 2c             	add    eax,0x2c
c0011251:	8a 00                	mov    al,BYTE PTR [eax]
c0011253:	0f b6 d0             	movzx  edx,al
c0011256:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001125a:	8d 48 01             	lea    ecx,[eax+0x1]
c001125d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011261:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011265:	0f b6 c0             	movzx  eax,al
c0011268:	c1 e0 08             	shl    eax,0x8
c001126b:	89 d1                	mov    ecx,edx
c001126d:	09 c1                	or     ecx,eax
c001126f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011273:	8d 50 02             	lea    edx,[eax+0x2]
c0011276:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001127a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001127e:	0f b6 c0             	movzx  eax,al
c0011281:	c1 e0 10             	shl    eax,0x10
c0011284:	09 c1                	or     ecx,eax
c0011286:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001128a:	8d 50 03             	lea    edx,[eax+0x3]
c001128d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011291:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011295:	0f b6 c0             	movzx  eax,al
c0011298:	c1 e0 18             	shl    eax,0x18
c001129b:	09 c1                	or     ecx,eax
c001129d:	89 ca                	mov    edx,ecx
c001129f:	a0 20 88 02 c0       	mov    al,ds:0xc0028820
c00112a4:	0f b6 c0             	movzx  eax,al
c00112a7:	89 14 85 e0 88 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7720],edx
c00112ae:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00112b3:	a0 20 88 02 c0       	mov    al,ds:0xc0028820
c00112b8:	40                   	inc    eax
c00112b9:	a2 20 88 02 c0       	mov    ds:0xc0028820,al
c00112be:	e9 a5 01 00 00       	jmp    c0011468 <scanMADT()+0x4b8>
c00112c3:	90                   	nop
c00112c4:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c00112c9:	0f 85 e9 00 00 00    	jne    c00113b8 <scanMADT()+0x408>
c00112cf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00112d3:	8d 50 01             	lea    edx,[eax+0x1]
c00112d6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00112da:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00112de:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00112e2:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c00112e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00112ea:	8d 50 01             	lea    edx,[eax+0x1]
c00112ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00112f1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00112f5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00112f9:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00112fd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011301:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011305:	01 d0                	add    eax,edx
c0011307:	83 c0 2c             	add    eax,0x2c
c001130a:	8a 00                	mov    al,BYTE PTR [eax]
c001130c:	0f b6 d0             	movzx  edx,al
c001130f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011313:	8d 48 01             	lea    ecx,[eax+0x1]
c0011316:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001131a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001131e:	0f b6 c0             	movzx  eax,al
c0011321:	c1 e0 08             	shl    eax,0x8
c0011324:	89 d1                	mov    ecx,edx
c0011326:	09 c1                	or     ecx,eax
c0011328:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001132c:	8d 50 02             	lea    edx,[eax+0x2]
c001132f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011333:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011337:	0f b6 c0             	movzx  eax,al
c001133a:	c1 e0 10             	shl    eax,0x10
c001133d:	09 c1                	or     ecx,eax
c001133f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011343:	8d 50 03             	lea    edx,[eax+0x3]
c0011346:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001134a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001134e:	0f b6 c0             	movzx  eax,al
c0011351:	c1 e0 18             	shl    eax,0x18
c0011354:	09 c8                	or     eax,ecx
c0011356:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001135a:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001135f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011363:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011367:	01 d0                	add    eax,edx
c0011369:	83 c0 2c             	add    eax,0x2c
c001136c:	8a 00                	mov    al,BYTE PTR [eax]
c001136e:	0f b6 c0             	movzx  eax,al
c0011371:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011375:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011378:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001137c:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0011380:	0f b6 d2             	movzx  edx,dl
c0011383:	c1 e2 08             	shl    edx,0x8
c0011386:	09 d0                	or     eax,edx
c0011388:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001138d:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0011392:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0011397:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001139b:	88 90 60 73 02 c0    	mov    BYTE PTR [eax-0x3ffd8ca0],dl
c00113a1:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c00113a6:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00113ab:	66 89 84 12 00 88 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd7800],ax
c00113b3:	e9 b0 00 00 00       	jmp    c0011468 <scanMADT()+0x4b8>
c00113b8:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c00113bd:	0f 85 99 00 00 00    	jne    c001145c <scanMADT()+0x4ac>
c00113c3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00113c7:	8d 50 01             	lea    edx,[eax+0x1]
c00113ca:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00113ce:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00113d2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00113d6:	0f b6 c0             	movzx  eax,al
c00113d9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00113dd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00113e1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00113e5:	01 d0                	add    eax,edx
c00113e7:	83 c0 2c             	add    eax,0x2c
c00113ea:	8a 00                	mov    al,BYTE PTR [eax]
c00113ec:	0f b6 d0             	movzx  edx,al
c00113ef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00113f3:	8d 48 01             	lea    ecx,[eax+0x1]
c00113f6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00113fa:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00113fe:	0f b6 c0             	movzx  eax,al
c0011401:	c1 e0 08             	shl    eax,0x8
c0011404:	09 d0                	or     eax,edx
c0011406:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001140a:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001140f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011413:	8d 50 01             	lea    edx,[eax+0x1]
c0011416:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001141a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001141e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011422:	0f b6 c0             	movzx  eax,al
c0011425:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011429:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001142d:	c1 e0 08             	shl    eax,0x8
c0011430:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0011434:	89 c1                	mov    ecx,eax
c0011436:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001143a:	c1 e0 18             	shl    eax,0x18
c001143d:	89 c3                	mov    ebx,eax
c001143f:	a1 70 87 02 c0       	mov    eax,ds:0xc0028770
c0011444:	8d 50 01             	lea    edx,[eax+0x1]
c0011447:	89 15 70 87 02 c0    	mov    DWORD PTR ds:0xc0028770,edx
c001144d:	09 d9                	or     ecx,ebx
c001144f:	89 ca                	mov    edx,ecx
c0011451:	89 14 85 80 87 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7880],edx
c0011458:	eb 0e                	jmp    c0011468 <scanMADT()+0x4b8>
c001145a:	66 90                	xchg   ax,ax
c001145c:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0011461:	75 05                	jne    c0011468 <scanMADT()+0x4b8>
c0011463:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0011468:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c001146d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011471:	01 d0                	add    eax,edx
c0011473:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0011477:	e9 68 fc ff ff       	jmp    c00110e4 <scanMADT()+0x134>
c001147c:	90                   	nop
c001147d:	eb 05                	jmp    c0011484 <scanMADT()+0x4d4>
c001147f:	90                   	nop
c0011480:	90                   	nop
c0011481:	8d 76 00             	lea    esi,[esi+0x0]
c0011484:	83 c4 38             	add    esp,0x38
c0011487:	5b                   	pop    ebx
c0011488:	c3                   	ret    
c0011489:	90                   	nop
c001148a:	66 90                	xchg   ax,ax

c001148c <ACPI::ACPI()>:
c001148c:	83 ec 0c             	sub    esp,0xc
c001148f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011493:	83 ec 08             	sub    esp,0x8
c0011496:	68 eb 50 02 c0       	push   0xc00250eb
c001149b:	50                   	push   eax
c001149c:	e8 d9 d1 ff ff       	call   c000e67a <Device::Device(char const*)>
c00114a1:	83 c4 10             	add    esp,0x10
c00114a4:	ba ac 52 02 c0       	mov    edx,0xc00252ac
c00114a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00114ad:	89 10                	mov    DWORD PTR [eax],edx
c00114af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00114b3:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00114ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00114be:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00114c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00114cc:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c00114d6:	83 ec 0c             	sub    esp,0xc
c00114d9:	68 f0 50 02 c0       	push   0xc00250f0
c00114de:	e8 2e 88 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c00114e3:	83 c4 10             	add    esp,0x10
c00114e6:	e8 c5 fa ff ff       	call   c0010fb0 <scanMADT()>
c00114eb:	90                   	nop
c00114ec:	83 c4 0c             	add    esp,0xc
c00114ef:	c3                   	ret    

c00114f0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c00114f0:	83 ec 2c             	sub    esp,0x2c
c00114f3:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00114f7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00114fb:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00114ff:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0011503:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0011508:	88 d0                	mov    al,dl
c001150a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001150e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0011513:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001151b:	90                   	nop
c001151c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011520:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0011526:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001152a:	0f 8d 9c 00 00 00    	jge    c00115cc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c0011530:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011534:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011538:	83 c2 2a             	add    edx,0x2a
c001153b:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c001153f:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0011544:	75 7a                	jne    c00115c0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c0011546:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001154a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001154e:	83 c2 2a             	add    edx,0x2a
c0011551:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0011555:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0011559:	75 65                	jne    c00115c0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c001155b:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0011560:	74 3a                	je     c001159c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c0011562:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011566:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001156a:	83 c2 2a             	add    edx,0x2a
c001156d:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0011571:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011575:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011578:	39 c2                	cmp    edx,eax
c001157a:	74 10                	je     c001158c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c001157c:	83 ec 0c             	sub    esp,0xc
c001157f:	68 44 4f 02 c0       	push   0xc0024f44
c0011584:	e8 52 2a 00 00       	call   c0013fdb <Krnl::panic(char const*)>
c0011589:	83 c4 10             	add    esp,0x10
c001158c:	83 ec 0c             	sub    esp,0xc
c001158f:	68 fe 50 02 c0       	push   0xc00250fe
c0011594:	e8 42 2a 00 00       	call   c0013fdb <Krnl::panic(char const*)>
c0011599:	83 c4 10             	add    esp,0x10
c001159c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00115a0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00115a4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00115a8:	83 c2 2a             	add    edx,0x2a
c00115ab:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c00115af:	8b 02                	mov    eax,DWORD PTR [edx]
c00115b1:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00115b4:	89 01                	mov    DWORD PTR [ecx],eax
c00115b6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00115b9:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00115be:	66 90                	xchg   ax,ax
c00115c0:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00115c4:	e9 53 ff ff ff       	jmp    c001151c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c00115c9:	8d 76 00             	lea    esi,[esi+0x0]
c00115cc:	90                   	nop
c00115cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00115d1:	83 c4 2c             	add    esp,0x2c
c00115d4:	c2 04 00             	ret    0x4
c00115d7:	90                   	nop

c00115d8 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c00115d8:	83 ec 1c             	sub    esp,0x1c
c00115db:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00115df:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00115e3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00115e7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00115ec:	88 c8                	mov    al,cl
c00115ee:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00115f2:	88 d0                	mov    al,dl
c00115f4:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00115f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00115fc:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0011602:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011606:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0011609:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c001160d:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0011611:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011615:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001161b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001161f:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0011622:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011626:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c001162b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001162f:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0011635:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0011639:	8d 48 01             	lea    ecx,[eax+0x1]
c001163c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011640:	83 c2 2a             	add    edx,0x2a
c0011643:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0011647:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001164b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0011651:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011655:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0011658:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001165c:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0011660:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011664:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001166a:	8d 50 01             	lea    edx,[eax+0x1]
c001166d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011671:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0011677:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001167b:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0011681:	3d 00 02 00 00       	cmp    eax,0x200
c0011686:	75 10                	jne    c0011698 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0011688:	83 ec 0c             	sub    esp,0xc
c001168b:	68 0d 51 02 c0       	push   0xc002510d
c0011690:	e8 46 29 00 00       	call   c0013fdb <Krnl::panic(char const*)>
c0011695:	83 c4 10             	add    esp,0x10
c0011698:	90                   	nop
c0011699:	83 c4 1c             	add    esp,0x1c
c001169c:	c3                   	ret    
c001169d:	90                   	nop
c001169e:	66 90                	xchg   ax,ax

c00116a0 <ACPI::setScreenBrightnessLevel(void*, int)>:
c00116a0:	b8 00 00 00 00       	mov    eax,0x0
c00116a5:	c3                   	ret    
c00116a6:	66 90                	xchg   ax,ax

c00116a8 <ACPI::detectPCI()>:
c00116a8:	53                   	push   ebx
c00116a9:	83 ec 68             	sub    esp,0x68
c00116ac:	c6 44 24 5f 00       	mov    BYTE PTR [esp+0x5f],0x0
c00116b1:	c6 44 24 5e 00       	mov    BYTE PTR [esp+0x5e],0x0
c00116b6:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c00116bb:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00116c1:	83 e0 04             	and    eax,0x4
c00116c4:	84 c0                	test   al,al
c00116c6:	74 2c                	je     c00116f4 <ACPI::detectPCI()+0x4c>
c00116c8:	a1 68 87 02 c0       	mov    eax,ds:0xc0028768
c00116cd:	83 ec 08             	sub    esp,0x8
c00116d0:	68 2a 51 02 c0       	push   0xc002512a
c00116d5:	50                   	push   eax
c00116d6:	e8 5d f8 ff ff       	call   c0010f38 <findDataTable(unsigned char*, char*)>
c00116db:	83 c4 10             	add    esp,0x10
c00116de:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00116e2:	83 7c 24 58 00       	cmp    DWORD PTR [esp+0x58],0x0
c00116e7:	74 0b                	je     c00116f4 <ACPI::detectPCI()+0x4c>
c00116e9:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c00116ee:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c00116f3:	90                   	nop
c00116f4:	c7 44 24 54 5f 0c 00 00 	mov    DWORD PTR [esp+0x54],0xc5f
c00116fc:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011700:	8a 00                	mov    al,BYTE PTR [eax]
c0011702:	3c 01                	cmp    al,0x1
c0011704:	75 0e                	jne    c0011714 <ACPI::detectPCI()+0x6c>
c0011706:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c001170b:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c0011710:	eb 2a                	jmp    c001173c <ACPI::detectPCI()+0x94>
c0011712:	66 90                	xchg   ax,ax
c0011714:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011718:	8a 00                	mov    al,BYTE PTR [eax]
c001171a:	3c 02                	cmp    al,0x2
c001171c:	75 1e                	jne    c001173c <ACPI::detectPCI()+0x94>
c001171e:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c0011723:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c0011728:	74 12                	je     c001173c <ACPI::detectPCI()+0x94>
c001172a:	83 ec 0c             	sub    esp,0xc
c001172d:	68 74 4f 02 c0       	push   0xc0024f74
c0011732:	e8 a4 28 00 00       	call   c0013fdb <Krnl::panic(char const*)>
c0011737:	83 c4 10             	add    esp,0x10
c001173a:	66 90                	xchg   ax,ax
c001173c:	8a 44 24 5f          	mov    al,BYTE PTR [esp+0x5f]
c0011740:	83 f0 01             	xor    eax,0x1
c0011743:	84 c0                	test   al,al
c0011745:	74 41                	je     c0011788 <ACPI::detectPCI()+0xe0>
c0011747:	e8 04 ea fe ff       	call   c0000150 <manualPCIProbe>
c001174c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0011750:	83 7c 24 50 01       	cmp    DWORD PTR [esp+0x50],0x1
c0011755:	75 0d                	jne    c0011764 <ACPI::detectPCI()+0xbc>
c0011757:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c001175c:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c0011761:	eb 25                	jmp    c0011788 <ACPI::detectPCI()+0xe0>
c0011763:	90                   	nop
c0011764:	83 7c 24 50 02       	cmp    DWORD PTR [esp+0x50],0x2
c0011769:	75 1d                	jne    c0011788 <ACPI::detectPCI()+0xe0>
c001176b:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c0011770:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c0011775:	74 11                	je     c0011788 <ACPI::detectPCI()+0xe0>
c0011777:	83 ec 0c             	sub    esp,0xc
c001177a:	68 74 4f 02 c0       	push   0xc0024f74
c001177f:	e8 57 28 00 00       	call   c0013fdb <Krnl::panic(char const*)>
c0011784:	83 c4 10             	add    esp,0x10
c0011787:	90                   	nop
c0011788:	80 7c 24 5f 00       	cmp    BYTE PTR [esp+0x5f],0x0
c001178d:	0f 84 49 03 00 00    	je     c0011adc <ACPI::detectPCI()+0x434>
c0011793:	83 ec 0c             	sub    esp,0xc
c0011796:	68 2f 51 02 c0       	push   0xc002512f
c001179b:	e8 71 85 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c00117a0:	83 c4 10             	add    esp,0x10
c00117a3:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c00117a8:	0f 84 8e 00 00 00    	je     c001183c <ACPI::detectPCI()+0x194>
c00117ae:	a1 20 7f 02 c0       	mov    eax,ds:0xc0027f20
c00117b3:	25 00 08 00 00       	and    eax,0x800
c00117b8:	0f 84 16 01 00 00    	je     c00118d4 <ACPI::detectPCI()+0x22c>
c00117be:	83 ec 0c             	sub    esp,0xc
c00117c1:	68 9c 4f 02 c0       	push   0xc0024f9c
c00117c6:	e8 46 85 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c00117cb:	83 c4 10             	add    esp,0x10
c00117ce:	a1 20 7f 02 c0       	mov    eax,ds:0xc0027f20
c00117d3:	25 80 00 00 00       	and    eax,0x80
c00117d8:	0f 85 f6 00 00 00    	jne    c00118d4 <ACPI::detectPCI()+0x22c>
c00117de:	66 90                	xchg   ax,ax
c00117e0:	66 c7 44 24 3a 60 00 	mov    WORD PTR [esp+0x3a],0x60
c00117e7:	66 8b 44 24 3a       	mov    ax,WORD PTR [esp+0x3a]
c00117ec:	89 c2                	mov    edx,eax
c00117ee:	ec                   	in     al,dx
c00117ef:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c00117f3:	8a 44 24 39          	mov    al,BYTE PTR [esp+0x39]
c00117f7:	88 44 24 4f          	mov    BYTE PTR [esp+0x4f],al
c00117fb:	80 7c 24 4f 5a       	cmp    BYTE PTR [esp+0x4f],0x5a
c0011800:	74 0a                	je     c001180c <ACPI::detectPCI()+0x164>
c0011802:	80 7c 24 4f 1c       	cmp    BYTE PTR [esp+0x4f],0x1c
c0011807:	74 03                	je     c001180c <ACPI::detectPCI()+0x164>
c0011809:	eb d5                	jmp    c00117e0 <ACPI::detectPCI()+0x138>
c001180b:	90                   	nop
c001180c:	66 c7 44 24 36 60 00 	mov    WORD PTR [esp+0x36],0x60
c0011813:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c0011818:	89 c2                	mov    edx,eax
c001181a:	ec                   	in     al,dx
c001181b:	88 44 24 35          	mov    BYTE PTR [esp+0x35],al
c001181f:	8a 44 24 35          	mov    al,BYTE PTR [esp+0x35]
c0011823:	88 44 24 4e          	mov    BYTE PTR [esp+0x4e],al
c0011827:	80 7c 24 4e 5a       	cmp    BYTE PTR [esp+0x4e],0x5a
c001182c:	74 de                	je     c001180c <ACPI::detectPCI()+0x164>
c001182e:	80 7c 24 4e 1c       	cmp    BYTE PTR [esp+0x4e],0x1c
c0011833:	0f 85 93 00 00 00    	jne    c00118cc <ACPI::detectPCI()+0x224>
c0011839:	eb d1                	jmp    c001180c <ACPI::detectPCI()+0x164>
c001183b:	90                   	nop
c001183c:	8a 44 24 5e          	mov    al,BYTE PTR [esp+0x5e]
c0011840:	83 f0 01             	xor    eax,0x1
c0011843:	84 c0                	test   al,al
c0011845:	0f 84 89 00 00 00    	je     c00118d4 <ACPI::detectPCI()+0x22c>
c001184b:	a1 20 7f 02 c0       	mov    eax,ds:0xc0027f20
c0011850:	25 00 08 00 00       	and    eax,0x800
c0011855:	74 7d                	je     c00118d4 <ACPI::detectPCI()+0x22c>
c0011857:	83 ec 0c             	sub    esp,0xc
c001185a:	68 c0 4f 02 c0       	push   0xc0024fc0
c001185f:	e8 ad 84 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0011864:	83 c4 10             	add    esp,0x10
c0011867:	a1 20 7f 02 c0       	mov    eax,ds:0xc0027f20
c001186c:	25 80 00 00 00       	and    eax,0x80
c0011871:	75 61                	jne    c00118d4 <ACPI::detectPCI()+0x22c>
c0011873:	90                   	nop
c0011874:	66 c7 44 24 32 60 00 	mov    WORD PTR [esp+0x32],0x60
c001187b:	66 8b 44 24 32       	mov    ax,WORD PTR [esp+0x32]
c0011880:	89 c2                	mov    edx,eax
c0011882:	ec                   	in     al,dx
c0011883:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0011887:	8a 44 24 31          	mov    al,BYTE PTR [esp+0x31]
c001188b:	88 44 24 4d          	mov    BYTE PTR [esp+0x4d],al
c001188f:	80 7c 24 4d 5a       	cmp    BYTE PTR [esp+0x4d],0x5a
c0011894:	74 0a                	je     c00118a0 <ACPI::detectPCI()+0x1f8>
c0011896:	80 7c 24 4d 1c       	cmp    BYTE PTR [esp+0x4d],0x1c
c001189b:	74 03                	je     c00118a0 <ACPI::detectPCI()+0x1f8>
c001189d:	eb d5                	jmp    c0011874 <ACPI::detectPCI()+0x1cc>
c001189f:	90                   	nop
c00118a0:	66 c7 44 24 2e 60 00 	mov    WORD PTR [esp+0x2e],0x60
c00118a7:	66 8b 44 24 2e       	mov    ax,WORD PTR [esp+0x2e]
c00118ac:	89 c2                	mov    edx,eax
c00118ae:	ec                   	in     al,dx
c00118af:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c00118b3:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c00118b7:	88 44 24 4c          	mov    BYTE PTR [esp+0x4c],al
c00118bb:	80 7c 24 4c 5a       	cmp    BYTE PTR [esp+0x4c],0x5a
c00118c0:	74 de                	je     c00118a0 <ACPI::detectPCI()+0x1f8>
c00118c2:	80 7c 24 4c 1c       	cmp    BYTE PTR [esp+0x4c],0x1c
c00118c7:	75 07                	jne    c00118d0 <ACPI::detectPCI()+0x228>
c00118c9:	eb d5                	jmp    c00118a0 <ACPI::detectPCI()+0x1f8>
c00118cb:	90                   	nop
c00118cc:	90                   	nop
c00118cd:	eb 05                	jmp    c00118d4 <ACPI::detectPCI()+0x22c>
c00118cf:	90                   	nop
c00118d0:	90                   	nop
c00118d1:	8d 76 00             	lea    esi,[esi+0x0]
c00118d4:	c7 44 24 28 5c 01 00 00 	mov    DWORD PTR [esp+0x28],0x15c
c00118dc:	83 ec 0c             	sub    esp,0xc
c00118df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00118e3:	e8 cf 83 ff ff       	call   c0009cb7 <malloc>
c00118e8:	83 c4 10             	add    esp,0x10
c00118eb:	89 c3                	mov    ebx,eax
c00118ed:	83 ec 0c             	sub    esp,0xc
c00118f0:	53                   	push   ebx
c00118f1:	e8 48 bd 00 00       	call   c001d63e <PCI::PCI()>
c00118f6:	83 c4 10             	add    esp,0x10
c00118f9:	89 5c 24 48          	mov    DWORD PTR [esp+0x48],ebx
c00118fd:	a1 20 7f 02 c0       	mov    eax,ds:0xc0027f20
c0011902:	25 00 08 00 00       	and    eax,0x800
c0011907:	74 7b                	je     c0011984 <ACPI::detectPCI()+0x2dc>
c0011909:	83 ec 0c             	sub    esp,0xc
c001190c:	68 47 51 02 c0       	push   0xc0025147
c0011911:	e8 fb 83 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0011916:	83 c4 10             	add    esp,0x10
c0011919:	a1 20 7f 02 c0       	mov    eax,ds:0xc0027f20
c001191e:	25 80 00 00 00       	and    eax,0x80
c0011923:	75 5f                	jne    c0011984 <ACPI::detectPCI()+0x2dc>
c0011925:	8d 76 00             	lea    esi,[esi+0x0]
c0011928:	66 c7 44 24 26 60 00 	mov    WORD PTR [esp+0x26],0x60
c001192f:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c0011934:	89 c2                	mov    edx,eax
c0011936:	ec                   	in     al,dx
c0011937:	88 44 24 25          	mov    BYTE PTR [esp+0x25],al
c001193b:	8a 44 24 25          	mov    al,BYTE PTR [esp+0x25]
c001193f:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0011943:	80 7c 24 47 5a       	cmp    BYTE PTR [esp+0x47],0x5a
c0011948:	74 0a                	je     c0011954 <ACPI::detectPCI()+0x2ac>
c001194a:	80 7c 24 47 1c       	cmp    BYTE PTR [esp+0x47],0x1c
c001194f:	74 03                	je     c0011954 <ACPI::detectPCI()+0x2ac>
c0011951:	eb d5                	jmp    c0011928 <ACPI::detectPCI()+0x280>
c0011953:	90                   	nop
c0011954:	66 c7 44 24 22 60 00 	mov    WORD PTR [esp+0x22],0x60
c001195b:	66 8b 44 24 22       	mov    ax,WORD PTR [esp+0x22]
c0011960:	89 c2                	mov    edx,eax
c0011962:	ec                   	in     al,dx
c0011963:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0011967:	8a 44 24 21          	mov    al,BYTE PTR [esp+0x21]
c001196b:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c001196f:	80 7c 24 46 5a       	cmp    BYTE PTR [esp+0x46],0x5a
c0011974:	74 de                	je     c0011954 <ACPI::detectPCI()+0x2ac>
c0011976:	80 7c 24 46 1c       	cmp    BYTE PTR [esp+0x46],0x1c
c001197b:	75 03                	jne    c0011980 <ACPI::detectPCI()+0x2d8>
c001197d:	eb d5                	jmp    c0011954 <ACPI::detectPCI()+0x2ac>
c001197f:	90                   	nop
c0011980:	90                   	nop
c0011981:	8d 76 00             	lea    esi,[esi+0x0]
c0011984:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011988:	83 ec 08             	sub    esp,0x8
c001198b:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001198f:	50                   	push   eax
c0011990:	e8 e1 ca ff ff       	call   c000e476 <Device::addChild(Device*)>
c0011995:	83 c4 10             	add    esp,0x10
c0011998:	a1 20 7f 02 c0       	mov    eax,ds:0xc0027f20
c001199d:	25 00 08 00 00       	and    eax,0x800
c00119a2:	74 78                	je     c0011a1c <ACPI::detectPCI()+0x374>
c00119a4:	83 ec 0c             	sub    esp,0xc
c00119a7:	68 4d 51 02 c0       	push   0xc002514d
c00119ac:	e8 60 83 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c00119b1:	83 c4 10             	add    esp,0x10
c00119b4:	a1 20 7f 02 c0       	mov    eax,ds:0xc0027f20
c00119b9:	25 80 00 00 00       	and    eax,0x80
c00119be:	75 5c                	jne    c0011a1c <ACPI::detectPCI()+0x374>
c00119c0:	66 c7 44 24 1e 60 00 	mov    WORD PTR [esp+0x1e],0x60
c00119c7:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00119cc:	89 c2                	mov    edx,eax
c00119ce:	ec                   	in     al,dx
c00119cf:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c00119d3:	8a 44 24 1d          	mov    al,BYTE PTR [esp+0x1d]
c00119d7:	88 44 24 45          	mov    BYTE PTR [esp+0x45],al
c00119db:	80 7c 24 45 5a       	cmp    BYTE PTR [esp+0x45],0x5a
c00119e0:	74 0a                	je     c00119ec <ACPI::detectPCI()+0x344>
c00119e2:	80 7c 24 45 1c       	cmp    BYTE PTR [esp+0x45],0x1c
c00119e7:	74 03                	je     c00119ec <ACPI::detectPCI()+0x344>
c00119e9:	eb d5                	jmp    c00119c0 <ACPI::detectPCI()+0x318>
c00119eb:	90                   	nop
c00119ec:	66 c7 44 24 1a 60 00 	mov    WORD PTR [esp+0x1a],0x60
c00119f3:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00119f8:	89 c2                	mov    edx,eax
c00119fa:	ec                   	in     al,dx
c00119fb:	88 44 24 19          	mov    BYTE PTR [esp+0x19],al
c00119ff:	8a 44 24 19          	mov    al,BYTE PTR [esp+0x19]
c0011a03:	88 44 24 44          	mov    BYTE PTR [esp+0x44],al
c0011a07:	80 7c 24 44 5a       	cmp    BYTE PTR [esp+0x44],0x5a
c0011a0c:	74 de                	je     c00119ec <ACPI::detectPCI()+0x344>
c0011a0e:	80 7c 24 44 1c       	cmp    BYTE PTR [esp+0x44],0x1c
c0011a13:	75 03                	jne    c0011a18 <ACPI::detectPCI()+0x370>
c0011a15:	eb d5                	jmp    c00119ec <ACPI::detectPCI()+0x344>
c0011a17:	90                   	nop
c0011a18:	90                   	nop
c0011a19:	8d 76 00             	lea    esi,[esi+0x0]
c0011a1c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0011a20:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a22:	83 c0 08             	add    eax,0x8
c0011a25:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a27:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c0011a2c:	74 0a                	je     c0011a38 <ACPI::detectPCI()+0x390>
c0011a2e:	ba 01 00 00 00       	mov    edx,0x1
c0011a33:	eb 0b                	jmp    c0011a40 <ACPI::detectPCI()+0x398>
c0011a35:	8d 76 00             	lea    esi,[esi+0x0]
c0011a38:	ba 02 00 00 00       	mov    edx,0x2
c0011a3d:	8d 76 00             	lea    esi,[esi+0x0]
c0011a40:	6a 00                	push   0x0
c0011a42:	6a 00                	push   0x0
c0011a44:	52                   	push   edx
c0011a45:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0011a49:	ff d0                	call   eax
c0011a4b:	83 c4 10             	add    esp,0x10
c0011a4e:	a1 20 7f 02 c0       	mov    eax,ds:0xc0027f20
c0011a53:	25 00 08 00 00       	and    eax,0x800
c0011a58:	0f 84 26 01 00 00    	je     c0011b84 <ACPI::detectPCI()+0x4dc>
c0011a5e:	83 ec 0c             	sub    esp,0xc
c0011a61:	68 53 51 02 c0       	push   0xc0025153
c0011a66:	e8 a6 82 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0011a6b:	83 c4 10             	add    esp,0x10
c0011a6e:	a1 20 7f 02 c0       	mov    eax,ds:0xc0027f20
c0011a73:	25 80 00 00 00       	and    eax,0x80
c0011a78:	0f 85 06 01 00 00    	jne    c0011b84 <ACPI::detectPCI()+0x4dc>
c0011a7e:	66 90                	xchg   ax,ax
c0011a80:	66 c7 44 24 16 60 00 	mov    WORD PTR [esp+0x16],0x60
c0011a87:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0011a8c:	89 c2                	mov    edx,eax
c0011a8e:	ec                   	in     al,dx
c0011a8f:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0011a93:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c0011a97:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0011a9b:	80 7c 24 43 5a       	cmp    BYTE PTR [esp+0x43],0x5a
c0011aa0:	74 0a                	je     c0011aac <ACPI::detectPCI()+0x404>
c0011aa2:	80 7c 24 43 1c       	cmp    BYTE PTR [esp+0x43],0x1c
c0011aa7:	74 03                	je     c0011aac <ACPI::detectPCI()+0x404>
c0011aa9:	eb d5                	jmp    c0011a80 <ACPI::detectPCI()+0x3d8>
c0011aab:	90                   	nop
c0011aac:	66 c7 44 24 12 60 00 	mov    WORD PTR [esp+0x12],0x60
c0011ab3:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0011ab8:	89 c2                	mov    edx,eax
c0011aba:	ec                   	in     al,dx
c0011abb:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0011abf:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0011ac3:	88 44 24 42          	mov    BYTE PTR [esp+0x42],al
c0011ac7:	80 7c 24 42 5a       	cmp    BYTE PTR [esp+0x42],0x5a
c0011acc:	74 de                	je     c0011aac <ACPI::detectPCI()+0x404>
c0011ace:	80 7c 24 42 1c       	cmp    BYTE PTR [esp+0x42],0x1c
c0011ad3:	0f 85 a7 00 00 00    	jne    c0011b80 <ACPI::detectPCI()+0x4d8>
c0011ad9:	eb d1                	jmp    c0011aac <ACPI::detectPCI()+0x404>
c0011adb:	90                   	nop
c0011adc:	83 ec 0c             	sub    esp,0xc
c0011adf:	68 59 51 02 c0       	push   0xc0025159
c0011ae4:	e8 dc b4 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0011ae9:	83 c4 10             	add    esp,0x10
c0011aec:	83 ec 0c             	sub    esp,0xc
c0011aef:	68 64 51 02 c0       	push   0xc0025164
c0011af4:	e8 18 82 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0011af9:	83 c4 10             	add    esp,0x10
c0011afc:	c7 44 24 0c 70 02 00 00 	mov    DWORD PTR [esp+0xc],0x270
c0011b04:	83 ec 0c             	sub    esp,0xc
c0011b07:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011b0b:	e8 a7 81 ff ff       	call   c0009cb7 <malloc>
c0011b10:	83 c4 10             	add    esp,0x10
c0011b13:	89 c3                	mov    ebx,eax
c0011b15:	83 ec 0c             	sub    esp,0xc
c0011b18:	53                   	push   ebx
c0011b19:	e8 8a cc 00 00       	call   c001e7a8 <IDE::IDE()>
c0011b1e:	83 c4 10             	add    esp,0x10
c0011b21:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c0011b25:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011b29:	83 ec 08             	sub    esp,0x8
c0011b2c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0011b30:	50                   	push   eax
c0011b31:	e8 40 c9 ff ff       	call   c000e476 <Device::addChild(Device*)>
c0011b36:	83 c4 10             	add    esp,0x10
c0011b39:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011b3d:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c0011b47:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011b4b:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c0011b54:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011b58:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c0011b61:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011b65:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b67:	83 c0 08             	add    eax,0x8
c0011b6a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b6c:	6a 00                	push   0x0
c0011b6e:	6a 00                	push   0x0
c0011b70:	6a 00                	push   0x0
c0011b72:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011b76:	ff d0                	call   eax
c0011b78:	83 c4 10             	add    esp,0x10
c0011b7b:	eb 07                	jmp    c0011b84 <ACPI::detectPCI()+0x4dc>
c0011b7d:	8d 76 00             	lea    esi,[esi+0x0]
c0011b80:	90                   	nop
c0011b81:	8d 76 00             	lea    esi,[esi+0x0]
c0011b84:	90                   	nop
c0011b85:	83 c4 68             	add    esp,0x68
c0011b88:	5b                   	pop    ebx
c0011b89:	c3                   	ret    
c0011b8a:	66 90                	xchg   ax,ax

c0011b8c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0011b8c:	83 ec 1c             	sub    esp,0x1c
c0011b8f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011b93:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0011b96:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011b9a:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c0011b9f:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0011ba4:	83 ec 08             	sub    esp,0x8
c0011ba7:	52                   	push   edx
c0011ba8:	50                   	push   eax
c0011ba9:	e8 6c 77 ff ff       	call   c000931a <Computer::readCMOS(unsigned char)>
c0011bae:	83 c4 10             	add    esp,0x10
c0011bb1:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0011bb5:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c0011bba:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0011bbf:	83 ec 04             	sub    esp,0x4
c0011bc2:	6a 01                	push   0x1
c0011bc4:	52                   	push   edx
c0011bc5:	50                   	push   eax
c0011bc6:	e8 75 78 ff ff       	call   c0009440 <Computer::writeCMOS(unsigned char, unsigned char)>
c0011bcb:	83 c4 10             	add    esp,0x10
c0011bce:	90                   	nop
c0011bcf:	83 c4 1c             	add    esp,0x1c
c0011bd2:	c3                   	ret    
c0011bd3:	90                   	nop

c0011bd4 <ACPI::sleep()>:
c0011bd4:	83 ec 0c             	sub    esp,0xc
c0011bd7:	83 ec 0c             	sub    esp,0xc
c0011bda:	68 79 51 02 c0       	push   0xc0025179
c0011bdf:	e8 e1 b3 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0011be4:	83 c4 10             	add    esp,0x10
c0011be7:	a1 40 85 02 c0       	mov    eax,ds:0xc0028540
c0011bec:	85 c0                	test   eax,eax
c0011bee:	74 18                	je     c0011c08 <ACPI::sleep()+0x34>
c0011bf0:	83 ec 0c             	sub    esp,0xc
c0011bf3:	68 86 51 02 c0       	push   0xc0025186
c0011bf8:	e8 c8 b3 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0011bfd:	83 c4 10             	add    esp,0x10
c0011c00:	a1 40 85 02 c0       	mov    eax,ds:0xc0028540
c0011c05:	ff d0                	call   eax
c0011c07:	90                   	nop
c0011c08:	90                   	nop
c0011c09:	83 c4 0c             	add    esp,0xc
c0011c0c:	c3                   	ret    
c0011c0d:	90                   	nop
c0011c0e:	66 90                	xchg   ax,ax

c0011c10 <ACPI::open(int, int, void*)>:
c0011c10:	57                   	push   edi
c0011c11:	56                   	push   esi
c0011c12:	53                   	push   ebx
c0011c13:	81 ec 70 01 00 00    	sub    esp,0x170
c0011c19:	83 ec 0c             	sub    esp,0xc
c0011c1c:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c0011c23:	e8 80 fa ff ff       	call   c00116a8 <ACPI::detectPCI()>
c0011c28:	83 c4 10             	add    esp,0x10
c0011c2b:	83 ec 0c             	sub    esp,0xc
c0011c2e:	68 e4 4f 02 c0       	push   0xc0024fe4
c0011c33:	e8 d9 80 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0011c38:	83 c4 10             	add    esp,0x10
c0011c3b:	83 ec 0c             	sub    esp,0xc
c0011c3e:	68 a0 51 02 c0       	push   0xc00251a0
c0011c43:	e8 a1 45 00 00       	call   c00161e9 <Thr::loadKernelSymbolTable(char const*)>
c0011c48:	83 c4 10             	add    esp,0x10
c0011c4b:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c0011c53:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c0011c5e:	83 ec 0c             	sub    esp,0xc
c0011c61:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0011c68:	e8 4a 80 ff ff       	call   c0009cb7 <malloc>
c0011c6d:	83 c4 10             	add    esp,0x10
c0011c70:	89 c3                	mov    ebx,eax
c0011c72:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c0011c77:	83 ec 04             	sub    esp,0x4
c0011c7a:	50                   	push   eax
c0011c7b:	68 be 51 02 c0       	push   0xc00251be
c0011c80:	53                   	push   ebx
c0011c81:	e8 aa b8 ff ff       	call   c000d530 <File::File(char const*, Process*)>
c0011c86:	83 c4 10             	add    esp,0x10
c0011c89:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c0011c90:	83 ec 08             	sub    esp,0x8
c0011c93:	6a 01                	push   0x1
c0011c95:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0011c9c:	e8 69 b9 ff ff       	call   c000d60a <File::open(FileOpenMode)>
c0011ca1:	83 c4 10             	add    esp,0x10
c0011ca4:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c0011cab:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c0011cb3:	75 17                	jne    c0011ccc <ACPI::open(int, int, void*)+0xbc>
c0011cb5:	83 ec 0c             	sub    esp,0xc
c0011cb8:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0011cbf:	e8 a4 b9 ff ff       	call   c000d668 <File::close()>
c0011cc4:	83 c4 10             	add    esp,0x10
c0011cc7:	eb 0b                	jmp    c0011cd4 <ACPI::open(int, int, void*)+0xc4>
c0011cc9:	8d 76 00             	lea    esi,[esi+0x0]
c0011ccc:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c0011cd4:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c0011cdc:	74 1e                	je     c0011cfc <ACPI::open(int, int, void*)+0xec>
c0011cde:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c0011ce5:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ce7:	83 c0 08             	add    eax,0x8
c0011cea:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cec:	83 ec 0c             	sub    esp,0xc
c0011cef:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0011cf6:	ff d0                	call   eax
c0011cf8:	83 c4 10             	add    esp,0x10
c0011cfb:	90                   	nop
c0011cfc:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c0011d03:	83 f0 01             	xor    eax,0x1
c0011d06:	84 c0                	test   al,al
c0011d08:	74 42                	je     c0011d4c <ACPI::open(int, int, void*)+0x13c>
c0011d0a:	83 ec 0c             	sub    esp,0xc
c0011d0d:	68 dc 51 02 c0       	push   0xc00251dc
c0011d12:	e8 fa 7f ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0011d17:	83 c4 10             	add    esp,0x10
c0011d1a:	83 ec 04             	sub    esp,0x4
c0011d1d:	6a 0c                	push   0xc
c0011d1f:	68 f7 51 02 c0       	push   0xc00251f7
c0011d24:	68 08 52 02 c0       	push   0xc0025208
c0011d29:	e8 25 2b 00 00       	call   c0014853 <Reg::readIntWithDefault(char*, char*, int)>
c0011d2e:	83 c4 10             	add    esp,0x10
c0011d31:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c0011d38:	83 ec 0c             	sub    esp,0xc
c0011d3b:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c0011d42:	e8 2c a1 ff ff       	call   c000be73 <Virt::setupPageSwapping(int)>
c0011d47:	83 c4 10             	add    esp,0x10
c0011d4a:	66 90                	xchg   ax,ax
c0011d4c:	83 ec 0c             	sub    esp,0xc
c0011d4f:	68 c6 3b 02 c0       	push   0xc0023bc6
c0011d54:	e8 b8 7f ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0011d59:	83 c4 10             	add    esp,0x10
c0011d5c:	8b 1d 08 7f 02 c0    	mov    ebx,DWORD PTR ds:0xc0027f08
c0011d62:	83 ec 08             	sub    esp,0x8
c0011d65:	6a 01                	push   0x1
c0011d67:	68 0f 52 02 c0       	push   0xc002520f
c0011d6c:	e8 ef 4e 00 00       	call   c0016c60 <Thr::loadDLL(char const*, bool)>
c0011d71:	83 c4 10             	add    esp,0x10
c0011d74:	83 ec 08             	sub    esp,0x8
c0011d77:	53                   	push   ebx
c0011d78:	50                   	push   eax
c0011d79:	e8 13 51 00 00       	call   c0016e91 <Thr::executeDLL(unsigned long, void*)>
c0011d7e:	83 c4 10             	add    esp,0x10
c0011d81:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c0011d88:	83 ec 08             	sub    esp,0x8
c0011d8b:	6a 12                	push   0x12
c0011d8d:	50                   	push   eax
c0011d8e:	e8 67 ca ff ff       	call   c000e7fa <getDevicesOfType(DeviceType)>
c0011d93:	83 c4 0c             	add    esp,0xc
c0011d96:	66 90                	xchg   ax,ax
c0011d98:	83 ec 0c             	sub    esp,0xc
c0011d9b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0011da2:	50                   	push   eax
c0011da3:	e8 54 11 01 00       	call   c0022efc <LinkedList<Device>::isEmpty()>
c0011da8:	83 c4 10             	add    esp,0x10
c0011dab:	83 f0 01             	xor    eax,0x1
c0011dae:	84 c0                	test   al,al
c0011db0:	0f 84 46 01 00 00    	je     c0011efc <ACPI::open(int, int, void*)+0x2ec>
c0011db6:	83 ec 0c             	sub    esp,0xc
c0011db9:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0011dc0:	50                   	push   eax
c0011dc1:	e8 52 11 01 00       	call   c0022f18 <LinkedList<Device>::getFirstElement()>
c0011dc6:	83 c4 10             	add    esp,0x10
c0011dc9:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c0011dd0:	83 ec 0c             	sub    esp,0xc
c0011dd3:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0011dda:	50                   	push   eax
c0011ddb:	e8 40 11 01 00       	call   c0022f20 <LinkedList<Device>::removeFirst()>
c0011de0:	83 c4 10             	add    esp,0x10
c0011de3:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c0011dea:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c0011df1:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c0011df8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011dfc:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c0011e02:	ba 09 00 00 00       	mov    edx,0x9
c0011e07:	fc                   	cld    
c0011e08:	89 c7                	mov    edi,eax
c0011e0a:	89 de                	mov    esi,ebx
c0011e0c:	89 d1                	mov    ecx,edx
c0011e0e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011e10:	83 ec 08             	sub    esp,0x8
c0011e13:	8d 44 24 38          	lea    eax,[esp+0x38]
c0011e17:	50                   	push   eax
c0011e18:	83 ec 24             	sub    esp,0x24
c0011e1b:	89 e0                	mov    eax,esp
c0011e1d:	89 c3                	mov    ebx,eax
c0011e1f:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0011e23:	ba 09 00 00 00       	mov    edx,0x9
c0011e28:	89 df                	mov    edi,ebx
c0011e2a:	89 c6                	mov    esi,eax
c0011e2c:	89 d1                	mov    ecx,edx
c0011e2e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011e30:	e8 e7 bc 00 00       	call   c001db1c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c0011e35:	83 c4 30             	add    esp,0x30
c0011e38:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c0011e3f:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c0011e47:	0f 84 4b ff ff ff    	je     c0011d98 <ACPI::open(int, int, void*)+0x188>
c0011e4d:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c0011e58:	83 ec 0c             	sub    esp,0xc
c0011e5b:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0011e62:	e8 50 7e ff ff       	call   c0009cb7 <malloc>
c0011e67:	83 c4 10             	add    esp,0x10
c0011e6a:	89 c3                	mov    ebx,eax
c0011e6c:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c0011e71:	83 ec 04             	sub    esp,0x4
c0011e74:	50                   	push   eax
c0011e75:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0011e7c:	53                   	push   ebx
c0011e7d:	e8 ae b6 ff ff       	call   c000d530 <File::File(char const*, Process*)>
c0011e82:	83 c4 10             	add    esp,0x10
c0011e85:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c0011e8c:	83 ec 0c             	sub    esp,0xc
c0011e8f:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0011e96:	e8 dd b9 ff ff       	call   c000d878 <File::exists()>
c0011e9b:	83 c4 10             	add    esp,0x10
c0011e9e:	84 c0                	test   al,al
c0011ea0:	74 2a                	je     c0011ecc <ACPI::open(int, int, void*)+0x2bc>
c0011ea2:	83 ec 08             	sub    esp,0x8
c0011ea5:	6a 01                	push   0x1
c0011ea7:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0011eae:	e8 ad 4d 00 00       	call   c0016c60 <Thr::loadDLL(char const*, bool)>
c0011eb3:	83 c4 10             	add    esp,0x10
c0011eb6:	83 ec 08             	sub    esp,0x8
c0011eb9:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0011ec0:	50                   	push   eax
c0011ec1:	e8 cb 4f 00 00       	call   c0016e91 <Thr::executeDLL(unsigned long, void*)>
c0011ec6:	83 c4 10             	add    esp,0x10
c0011ec9:	8d 76 00             	lea    esi,[esi+0x0]
c0011ecc:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c0011ed4:	0f 84 be fe ff ff    	je     c0011d98 <ACPI::open(int, int, void*)+0x188>
c0011eda:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c0011ee1:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ee3:	83 c0 08             	add    eax,0x8
c0011ee6:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ee8:	83 ec 0c             	sub    esp,0xc
c0011eeb:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0011ef2:	ff d0                	call   eax
c0011ef4:	83 c4 10             	add    esp,0x10
c0011ef7:	e9 9c fe ff ff       	jmp    c0011d98 <ACPI::open(int, int, void*)+0x188>
c0011efc:	83 ec 0c             	sub    esp,0xc
c0011eff:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0011f06:	50                   	push   eax
c0011f07:	e8 ec 0f 01 00       	call   c0022ef8 <LinkedList<Device>::~LinkedList()>
c0011f0c:	83 c4 10             	add    esp,0x10
c0011f0f:	8b 1d 08 7f 02 c0    	mov    ebx,DWORD PTR ds:0xc0027f08
c0011f15:	83 ec 08             	sub    esp,0x8
c0011f18:	6a 01                	push   0x1
c0011f1a:	68 2a 52 02 c0       	push   0xc002522a
c0011f1f:	e8 3c 4d 00 00       	call   c0016c60 <Thr::loadDLL(char const*, bool)>
c0011f24:	83 c4 10             	add    esp,0x10
c0011f27:	83 ec 08             	sub    esp,0x8
c0011f2a:	53                   	push   ebx
c0011f2b:	50                   	push   eax
c0011f2c:	e8 60 4f 00 00       	call   c0016e91 <Thr::executeDLL(unsigned long, void*)>
c0011f31:	83 c4 10             	add    esp,0x10
c0011f34:	8b 1d 08 7f 02 c0    	mov    ebx,DWORD PTR ds:0xc0027f08
c0011f3a:	83 ec 08             	sub    esp,0x8
c0011f3d:	6a 01                	push   0x1
c0011f3f:	68 47 52 02 c0       	push   0xc0025247
c0011f44:	e8 17 4d 00 00       	call   c0016c60 <Thr::loadDLL(char const*, bool)>
c0011f49:	83 c4 10             	add    esp,0x10
c0011f4c:	83 ec 08             	sub    esp,0x8
c0011f4f:	53                   	push   ebx
c0011f50:	50                   	push   eax
c0011f51:	e8 3b 4f 00 00       	call   c0016e91 <Thr::executeDLL(unsigned long, void*)>
c0011f56:	83 c4 10             	add    esp,0x10
c0011f59:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c0011f5e:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011f64:	83 e0 04             	and    eax,0x4
c0011f67:	84 c0                	test   al,al
c0011f69:	0f 84 15 01 00 00    	je     c0012084 <ACPI::open(int, int, void*)+0x474>
c0011f6f:	83 ec 0c             	sub    esp,0xc
c0011f72:	68 64 52 02 c0       	push   0xc0025264
c0011f77:	e8 95 7d ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0011f7c:	83 c4 10             	add    esp,0x10
c0011f7f:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c0011f8a:	83 ec 0c             	sub    esp,0xc
c0011f8d:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c0011f94:	e8 1e 7d ff ff       	call   c0009cb7 <malloc>
c0011f99:	83 c4 10             	add    esp,0x10
c0011f9c:	89 c3                	mov    ebx,eax
c0011f9e:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c0011fa3:	83 ec 04             	sub    esp,0x4
c0011fa6:	50                   	push   eax
c0011fa7:	68 81 52 02 c0       	push   0xc0025281
c0011fac:	53                   	push   ebx
c0011fad:	e8 7e b5 ff ff       	call   c000d530 <File::File(char const*, Process*)>
c0011fb2:	83 c4 10             	add    esp,0x10
c0011fb5:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c0011fbc:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0011fc4:	74 1a                	je     c0011fe0 <ACPI::open(int, int, void*)+0x3d0>
c0011fc6:	83 ec 0c             	sub    esp,0xc
c0011fc9:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0011fd0:	e8 a3 b8 ff ff       	call   c000d878 <File::exists()>
c0011fd5:	83 c4 10             	add    esp,0x10
c0011fd8:	84 c0                	test   al,al
c0011fda:	74 04                	je     c0011fe0 <ACPI::open(int, int, void*)+0x3d0>
c0011fdc:	b0 01                	mov    al,0x1
c0011fde:	eb 04                	jmp    c0011fe4 <ACPI::open(int, int, void*)+0x3d4>
c0011fe0:	b0 00                	mov    al,0x0
c0011fe2:	66 90                	xchg   ax,ax
c0011fe4:	84 c0                	test   al,al
c0011fe6:	74 28                	je     c0012010 <ACPI::open(int, int, void*)+0x400>
c0011fe8:	83 ec 08             	sub    esp,0x8
c0011feb:	6a 01                	push   0x1
c0011fed:	68 81 52 02 c0       	push   0xc0025281
c0011ff2:	e8 69 4c 00 00       	call   c0016c60 <Thr::loadDLL(char const*, bool)>
c0011ff7:	83 c4 10             	add    esp,0x10
c0011ffa:	83 ec 08             	sub    esp,0x8
c0011ffd:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c0012004:	50                   	push   eax
c0012005:	e8 87 4e 00 00       	call   c0016e91 <Thr::executeDLL(unsigned long, void*)>
c001200a:	83 c4 10             	add    esp,0x10
c001200d:	8d 76 00             	lea    esi,[esi+0x0]
c0012010:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0012018:	74 2a                	je     c0012044 <ACPI::open(int, int, void*)+0x434>
c001201a:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0012022:	74 20                	je     c0012044 <ACPI::open(int, int, void*)+0x434>
c0012024:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c001202b:	8b 00                	mov    eax,DWORD PTR [eax]
c001202d:	83 c0 08             	add    eax,0x8
c0012030:	8b 00                	mov    eax,DWORD PTR [eax]
c0012032:	83 ec 0c             	sub    esp,0xc
c0012035:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c001203c:	ff d0                	call   eax
c001203e:	83 c4 10             	add    esp,0x10
c0012041:	8d 76 00             	lea    esi,[esi+0x0]
c0012044:	a1 68 87 02 c0       	mov    eax,ds:0xc0028768
c0012049:	83 ec 08             	sub    esp,0x8
c001204c:	68 9e 52 02 c0       	push   0xc002529e
c0012051:	50                   	push   eax
c0012052:	e8 e1 ee ff ff       	call   c0010f38 <findDataTable(unsigned char*, char*)>
c0012057:	83 c4 10             	add    esp,0x10
c001205a:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c0012061:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0012069:	74 19                	je     c0012084 <ACPI::open(int, int, void*)+0x474>
c001206b:	83 ec 08             	sub    esp,0x8
c001206e:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0012075:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c001207c:	e8 0b fb ff ff       	call   c0011b8c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0012081:	83 c4 10             	add    esp,0x10
c0012084:	b8 00 00 00 00       	mov    eax,0x0
c0012089:	81 c4 70 01 00 00    	add    esp,0x170
c001208f:	5b                   	pop    ebx
c0012090:	5e                   	pop    esi
c0012091:	5f                   	pop    edi
c0012092:	c3                   	ret    
c0012093:	90                   	nop

c0012094 <CPU::close(int, int, void*)>:
c0012094:	31 c0                	xor    eax,eax
c0012096:	c3                   	ret    
c0012097:	90                   	nop

c0012098 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0012098:	55                   	push   ebp
c0012099:	57                   	push   edi
c001209a:	56                   	push   esi
c001209b:	53                   	push   ebx
c001209c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00120a0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00120a4:	89 ce                	mov    esi,ecx
c00120a6:	89 d5                	mov    ebp,edx
c00120a8:	80 f9 04             	cmp    cl,0x4
c00120ab:	75 28                	jne    c00120d5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c00120ad:	8d 42 f9             	lea    eax,[edx-0x7]
c00120b0:	3c 03                	cmp    al,0x3
c00120b2:	0f 86 63 01 00 00    	jbe    c001221b <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00120b8:	80 fa 03             	cmp    dl,0x3
c00120bb:	0f 84 5a 01 00 00    	je     c001221b <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00120c1:	8d 7a f2             	lea    edi,[edx-0xe]
c00120c4:	b8 30 75 02 c0       	mov    eax,0xc0027530
c00120c9:	89 fb                	mov    ebx,edi
c00120cb:	80 fb 01             	cmp    bl,0x1
c00120ce:	77 4e                	ja     c001211e <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c00120d0:	e9 52 01 00 00       	jmp    c0012227 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00120d5:	80 f9 05             	cmp    cl,0x5
c00120d8:	75 4d                	jne    c0012127 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c00120da:	b8 40 75 02 c0       	mov    eax,0xc0027540
c00120df:	80 fa 03             	cmp    dl,0x3
c00120e2:	0f 86 3f 01 00 00    	jbe    c0012227 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00120e8:	8d 7a fa             	lea    edi,[edx-0x6]
c00120eb:	b8 50 75 02 c0       	mov    eax,0xc0027550
c00120f0:	89 fb                	mov    ebx,edi
c00120f2:	80 fb 01             	cmp    bl,0x1
c00120f5:	0f 86 2c 01 00 00    	jbe    c0012227 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00120fb:	b8 60 75 02 c0       	mov    eax,0xc0027560
c0012100:	80 fa 08             	cmp    dl,0x8
c0012103:	0f 84 1e 01 00 00    	je     c0012227 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012109:	89 d7                	mov    edi,edx
c001210b:	b8 70 75 02 c0       	mov    eax,0xc0027570
c0012110:	83 e7 fb             	and    edi,0xfffffffb
c0012113:	89 fb                	mov    ebx,edi
c0012115:	80 fb 09             	cmp    bl,0x9
c0012118:	0f 84 09 01 00 00    	je     c0012227 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001211e:	31 c0                	xor    eax,eax
c0012120:	89 eb                	mov    ebx,ebp
c0012122:	0f b6 fb             	movzx  edi,bl
c0012125:	eb 30                	jmp    c0012157 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0012127:	31 c0                	xor    eax,eax
c0012129:	80 f9 06             	cmp    cl,0x6
c001212c:	75 f2                	jne    c0012120 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001212e:	80 fa 0a             	cmp    dl,0xa
c0012131:	77 ed                	ja     c0012120 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0012133:	bf de 05 00 00       	mov    edi,0x5de
c0012138:	0f a3 d7             	bt     edi,edx
c001213b:	73 e3                	jae    c0012120 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001213d:	b8 80 75 02 c0       	mov    eax,0xc0027580
c0012142:	e9 e0 00 00 00       	jmp    c0012227 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012147:	39 c7                	cmp    edi,eax
c0012149:	0f 84 d3 00 00 00    	je     c0012222 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c001214f:	40                   	inc    eax
c0012150:	3d d0 00 00 00       	cmp    eax,0xd0
c0012155:	74 09                	je     c0012160 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0012157:	89 f3                	mov    ebx,esi
c0012159:	80 fb 0f             	cmp    bl,0xf
c001215c:	75 f1                	jne    c001214f <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c001215e:	eb e7                	jmp    c0012147 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0012160:	80 f9 10             	cmp    cl,0x10
c0012163:	75 14                	jne    c0012179 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0012165:	8d 42 fc             	lea    eax,[edx-0x4]
c0012168:	83 e0 fb             	and    eax,0xfffffffb
c001216b:	3c 02                	cmp    al,0x2
c001216d:	76 34                	jbe    c00121a3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c001216f:	b8 d9 55 02 c0       	mov    eax,0xc00255d9
c0012174:	80 fa 02             	cmp    dl,0x2
c0012177:	eb 24                	jmp    c001219d <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0012179:	80 f9 11             	cmp    cl,0x11
c001217c:	75 13                	jne    c0012191 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c001217e:	b8 d9 55 02 c0       	mov    eax,0xc00255d9
c0012183:	80 fa 03             	cmp    dl,0x3
c0012186:	0f 85 9b 00 00 00    	jne    c0012227 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001218c:	e9 91 00 00 00       	jmp    c0012222 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0012191:	80 f9 12             	cmp    cl,0x12
c0012194:	75 14                	jne    c00121aa <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0012196:	b8 d9 55 02 c0       	mov    eax,0xc00255d9
c001219b:	fe ca                	dec    dl
c001219d:	0f 85 84 00 00 00    	jne    c0012227 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00121a3:	b8 a0 75 02 c0       	mov    eax,0xc00275a0
c00121a8:	eb 7d                	jmp    c0012227 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00121aa:	80 f9 14             	cmp    cl,0x14
c00121ad:	75 12                	jne    c00121c1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c00121af:	4a                   	dec    edx
c00121b0:	b8 d9 55 02 c0       	mov    eax,0xc00255d9
c00121b5:	80 fa 01             	cmp    dl,0x1
c00121b8:	77 6d                	ja     c0012227 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00121ba:	b8 b0 75 02 c0       	mov    eax,0xc00275b0
c00121bf:	eb 66                	jmp    c0012227 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00121c1:	80 f9 15             	cmp    cl,0x15
c00121c4:	75 31                	jne    c00121f7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c00121c6:	b8 c0 75 02 c0       	mov    eax,0xc00275c0
c00121cb:	80 fa 01             	cmp    dl,0x1
c00121ce:	74 57                	je     c0012227 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00121d0:	b8 d9 55 02 c0       	mov    eax,0xc00255d9
c00121d5:	80 fa 13             	cmp    dl,0x13
c00121d8:	76 0c                	jbe    c00121e6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c00121da:	80 fa 30             	cmp    dl,0x30
c00121dd:	75 48                	jne    c0012227 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00121df:	b8 e0 75 02 c0       	mov    eax,0xc00275e0
c00121e4:	eb 41                	jmp    c0012227 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00121e6:	b9 04 00 09 00       	mov    ecx,0x90004
c00121eb:	0f a3 d1             	bt     ecx,edx
c00121ee:	73 37                	jae    c0012227 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00121f0:	b8 d0 75 02 c0       	mov    eax,0xc00275d0
c00121f5:	eb 30                	jmp    c0012227 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00121f7:	b8 d9 55 02 c0       	mov    eax,0xc00255d9
c00121fc:	80 f9 16             	cmp    cl,0x16
c00121ff:	75 26                	jne    c0012227 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012201:	b8 f0 75 02 c0       	mov    eax,0xc00275f0
c0012206:	84 d2                	test   dl,dl
c0012208:	74 1d                	je     c0012227 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001220a:	b8 d9 55 02 c0       	mov    eax,0xc00255d9
c001220f:	80 fa 30             	cmp    dl,0x30
c0012212:	75 13                	jne    c0012227 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012214:	b8 00 76 02 c0       	mov    eax,0xc0027600
c0012219:	eb 0c                	jmp    c0012227 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001221b:	b8 20 75 02 c0       	mov    eax,0xc0027520
c0012220:	eb 05                	jmp    c0012227 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012222:	b8 90 75 02 c0       	mov    eax,0xc0027590
c0012227:	5b                   	pop    ebx
c0012228:	5e                   	pop    esi
c0012229:	5f                   	pop    edi
c001222a:	5d                   	pop    ebp
c001222b:	c3                   	ret    

c001222c <CPU::lookupIntelName(unsigned char, unsigned char)>:
c001222c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012230:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012234:	80 f9 04             	cmp    cl,0x4
c0012237:	75 6b                	jne    c00122a4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0012239:	b8 80 73 02 c0       	mov    eax,0xc0027380
c001223e:	80 fa 01             	cmp    dl,0x1
c0012241:	0f 86 92 02 00 00    	jbe    c00124d9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012247:	b8 90 73 02 c0       	mov    eax,0xc0027390
c001224c:	80 fa 02             	cmp    dl,0x2
c001224f:	0f 84 84 02 00 00    	je     c00124d9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012255:	b8 a0 73 02 c0       	mov    eax,0xc00273a0
c001225a:	80 fa 03             	cmp    dl,0x3
c001225d:	0f 84 76 02 00 00    	je     c00124d9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012263:	b8 b0 73 02 c0       	mov    eax,0xc00273b0
c0012268:	80 fa 04             	cmp    dl,0x4
c001226b:	0f 84 68 02 00 00    	je     c00124d9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012271:	b8 c0 73 02 c0       	mov    eax,0xc00273c0
c0012276:	80 fa 05             	cmp    dl,0x5
c0012279:	0f 84 5a 02 00 00    	je     c00124d9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001227f:	b8 a0 73 02 c0       	mov    eax,0xc00273a0
c0012284:	80 fa 07             	cmp    dl,0x7
c0012287:	0f 84 4c 02 00 00    	je     c00124d9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001228d:	83 ea 08             	sub    edx,0x8
c0012290:	b8 d9 55 02 c0       	mov    eax,0xc00255d9
c0012295:	80 fa 01             	cmp    dl,0x1
c0012298:	0f 87 3b 02 00 00    	ja     c00124d9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001229e:	b8 d0 73 02 c0       	mov    eax,0xc00273d0
c00122a3:	c3                   	ret    
c00122a4:	80 f9 05             	cmp    cl,0x5
c00122a7:	75 45                	jne    c00122ee <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c00122a9:	8d 4a ff             	lea    ecx,[edx-0x1]
c00122ac:	b8 e0 73 02 c0       	mov    eax,0xc00273e0
c00122b1:	80 f9 02             	cmp    cl,0x2
c00122b4:	0f 86 1f 02 00 00    	jbe    c00124d9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00122ba:	80 fa 04             	cmp    dl,0x4
c00122bd:	0f 84 f3 01 00 00    	je     c00124b6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c00122c3:	80 fa 07             	cmp    dl,0x7
c00122c6:	0f 84 0d 02 00 00    	je     c00124d9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00122cc:	b8 f0 73 02 c0       	mov    eax,0xc00273f0
c00122d1:	80 fa 08             	cmp    dl,0x8
c00122d4:	0f 84 ff 01 00 00    	je     c00124d9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00122da:	b8 d9 55 02 c0       	mov    eax,0xc00255d9
c00122df:	80 fa 09             	cmp    dl,0x9
c00122e2:	0f 85 f1 01 00 00    	jne    c00124d9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00122e8:	b8 00 74 02 c0       	mov    eax,0xc0027400
c00122ed:	c3                   	ret    
c00122ee:	80 f9 06             	cmp    cl,0x6
c00122f1:	0f 85 85 01 00 00    	jne    c001247c <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c00122f7:	b8 10 74 02 c0       	mov    eax,0xc0027410
c00122fc:	80 fa 01             	cmp    dl,0x1
c00122ff:	0f 84 d4 01 00 00    	je     c00124d9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012305:	8d 42 fb             	lea    eax,[edx-0x5]
c0012308:	3c 01                	cmp    al,0x1
c001230a:	0f 86 ac 01 00 00    	jbe    c00124bc <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0012310:	80 fa 03             	cmp    dl,0x3
c0012313:	0f 84 a3 01 00 00    	je     c00124bc <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0012319:	8d 4a f9             	lea    ecx,[edx-0x7]
c001231c:	b8 30 74 02 c0       	mov    eax,0xc0027430
c0012321:	80 f9 01             	cmp    cl,0x1
c0012324:	0f 86 af 01 00 00    	jbe    c00124d9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001232a:	80 fa 09             	cmp    dl,0x9
c001232d:	0f 84 8f 01 00 00    	je     c00124c2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0012333:	8d 4a f6             	lea    ecx,[edx-0xa]
c0012336:	80 f9 01             	cmp    cl,0x1
c0012339:	0f 86 9a 01 00 00    	jbe    c00124d9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001233f:	b8 40 74 02 c0       	mov    eax,0xc0027440
c0012344:	80 fa 0d             	cmp    dl,0xd
c0012347:	0f 84 8c 01 00 00    	je     c00124d9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001234d:	b8 50 74 02 c0       	mov    eax,0xc0027450
c0012352:	80 fa 0e             	cmp    dl,0xe
c0012355:	0f 84 7e 01 00 00    	je     c00124d9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001235b:	b8 60 74 02 c0       	mov    eax,0xc0027460
c0012360:	80 fa 0f             	cmp    dl,0xf
c0012363:	0f 84 70 01 00 00    	je     c00124d9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012369:	b8 40 74 02 c0       	mov    eax,0xc0027440
c001236e:	80 fa 15             	cmp    dl,0x15
c0012371:	0f 84 62 01 00 00    	je     c00124d9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012377:	8d 4a ea             	lea    ecx,[edx-0x16]
c001237a:	b8 60 74 02 c0       	mov    eax,0xc0027460
c001237f:	80 f9 01             	cmp    cl,0x1
c0012382:	0f 86 51 01 00 00    	jbe    c00124d9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012388:	80 fa 1a             	cmp    dl,0x1a
c001238b:	0f 84 37 01 00 00    	je     c00124c8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0012391:	80 fa 1c             	cmp    dl,0x1c
c0012394:	0f 84 34 01 00 00    	je     c00124ce <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c001239a:	80 fa 1d             	cmp    dl,0x1d
c001239d:	0f 84 36 01 00 00    	je     c00124d9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00123a3:	b8 90 74 02 c0       	mov    eax,0xc0027490
c00123a8:	80 fa 25             	cmp    dl,0x25
c00123ab:	0f 84 28 01 00 00    	je     c00124d9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00123b1:	8d 4a da             	lea    ecx,[edx-0x26]
c00123b4:	b8 80 74 02 c0       	mov    eax,0xc0027480
c00123b9:	80 f9 01             	cmp    cl,0x1
c00123bc:	0f 86 17 01 00 00    	jbe    c00124d9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00123c2:	b8 a0 74 02 c0       	mov    eax,0xc00274a0
c00123c7:	80 fa 2a             	cmp    dl,0x2a
c00123ca:	0f 84 09 01 00 00    	je     c00124d9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00123d0:	b8 90 74 02 c0       	mov    eax,0xc0027490
c00123d5:	80 fa 2c             	cmp    dl,0x2c
c00123d8:	0f 84 fb 00 00 00    	je     c00124d9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00123de:	b8 a0 74 02 c0       	mov    eax,0xc00274a0
c00123e3:	80 fa 2d             	cmp    dl,0x2d
c00123e6:	0f 84 ed 00 00 00    	je     c00124d9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00123ec:	b8 70 74 02 c0       	mov    eax,0xc0027470
c00123f1:	80 fa 2e             	cmp    dl,0x2e
c00123f4:	0f 84 df 00 00 00    	je     c00124d9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00123fa:	b8 90 74 02 c0       	mov    eax,0xc0027490
c00123ff:	80 fa 2f             	cmp    dl,0x2f
c0012402:	0f 84 d1 00 00 00    	je     c00124d9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012408:	8d 4a cb             	lea    ecx,[edx-0x35]
c001240b:	b8 80 74 02 c0       	mov    eax,0xc0027480
c0012410:	80 f9 01             	cmp    cl,0x1
c0012413:	0f 86 c0 00 00 00    	jbe    c00124d9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012419:	b8 b0 74 02 c0       	mov    eax,0xc00274b0
c001241e:	80 fa 37             	cmp    dl,0x37
c0012421:	0f 84 b2 00 00 00    	je     c00124d9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012427:	b8 c0 74 02 c0       	mov    eax,0xc00274c0
c001242c:	80 fa 3a             	cmp    dl,0x3a
c001242f:	0f 84 a4 00 00 00    	je     c00124d9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012435:	b8 d0 74 02 c0       	mov    eax,0xc00274d0
c001243a:	80 fa 3c             	cmp    dl,0x3c
c001243d:	0f 84 96 00 00 00    	je     c00124d9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012443:	b8 e0 74 02 c0       	mov    eax,0xc00274e0
c0012448:	80 fa 3d             	cmp    dl,0x3d
c001244b:	0f 84 88 00 00 00    	je     c00124d9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012451:	b8 c0 74 02 c0       	mov    eax,0xc00274c0
c0012456:	80 fa 3e             	cmp    dl,0x3e
c0012459:	74 7e                	je     c00124d9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001245b:	8d 42 bb             	lea    eax,[edx-0x45]
c001245e:	3c 01                	cmp    al,0x1
c0012460:	76 72                	jbe    c00124d4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0012462:	80 fa 3f             	cmp    dl,0x3f
c0012465:	74 6d                	je     c00124d4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0012467:	80 fa 4a             	cmp    dl,0x4a
c001246a:	74 0a                	je     c0012476 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c001246c:	b8 d9 55 02 c0       	mov    eax,0xc00255d9
c0012471:	80 fa 4d             	cmp    dl,0x4d
c0012474:	75 63                	jne    c00124d9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012476:	b8 b0 74 02 c0       	mov    eax,0xc00274b0
c001247b:	c3                   	ret    
c001247c:	b8 d9 55 02 c0       	mov    eax,0xc00255d9
c0012481:	80 f9 0b             	cmp    cl,0xb
c0012484:	75 0a                	jne    c0012490 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0012486:	fe ca                	dec    dl
c0012488:	75 4f                	jne    c00124d9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001248a:	b8 f0 74 02 c0       	mov    eax,0xc00274f0
c001248f:	c3                   	ret    
c0012490:	80 f9 0f             	cmp    cl,0xf
c0012493:	75 44                	jne    c00124d9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012495:	b8 00 75 02 c0       	mov    eax,0xc0027500
c001249a:	80 fa 02             	cmp    dl,0x2
c001249d:	76 3a                	jbe    c00124d9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001249f:	8d 42 fd             	lea    eax,[edx-0x3]
c00124a2:	3c 01                	cmp    al,0x1
c00124a4:	76 0a                	jbe    c00124b0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c00124a6:	b8 d9 55 02 c0       	mov    eax,0xc00255d9
c00124ab:	80 fa 06             	cmp    dl,0x6
c00124ae:	75 29                	jne    c00124d9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00124b0:	b8 10 75 02 c0       	mov    eax,0xc0027510
c00124b5:	c3                   	ret    
c00124b6:	b8 f0 73 02 c0       	mov    eax,0xc00273f0
c00124bb:	c3                   	ret    
c00124bc:	b8 20 74 02 c0       	mov    eax,0xc0027420
c00124c1:	c3                   	ret    
c00124c2:	b8 40 74 02 c0       	mov    eax,0xc0027440
c00124c7:	c3                   	ret    
c00124c8:	b8 70 74 02 c0       	mov    eax,0xc0027470
c00124cd:	c3                   	ret    
c00124ce:	b8 80 74 02 c0       	mov    eax,0xc0027480
c00124d3:	c3                   	ret    
c00124d4:	b8 d0 74 02 c0       	mov    eax,0xc00274d0
c00124d9:	c3                   	ret    

c00124da <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c00124da:	60                   	pusha  
c00124db:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00124df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00124e3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00124e7:	9c                   	pushf  
c00124e8:	fa                   	cli    
c00124e9:	0f 09                	wbinvd 
c00124eb:	0f 30                	wrmsr  
c00124ed:	9d                   	popf   
c00124ee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00124f2:	89 02                	mov    DWORD PTR [edx],eax
c00124f4:	61                   	popa   
c00124f5:	c3                   	ret    

c00124f6 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c00124f6:	60                   	pusha  
c00124f7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00124fb:	9c                   	pushf  
c00124fc:	fa                   	cli    
c00124fd:	0f 09                	wbinvd 
c00124ff:	31 c0                	xor    eax,eax
c0012501:	31 d2                	xor    edx,edx
c0012503:	0f 32                	rdmsr  
c0012505:	9d                   	popf   
c0012506:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001250a:	89 02                	mov    DWORD PTR [edx],eax
c001250c:	61                   	popa   
c001250d:	c3                   	ret    

c001250e <CPU::AMD_K6_writeback(int, int, int)>:
c001250e:	56                   	push   esi
c001250f:	53                   	push   ebx
c0012510:	83 ec 10             	sub    esp,0x10
c0012513:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012517:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c001251c:	75 5d                	jne    c001257b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001251e:	83 f8 08             	cmp    eax,0x8
c0012521:	75 09                	jne    c001252c <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0012523:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0012528:	7e 13                	jle    c001253d <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001252a:	eb 30                	jmp    c001255c <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001252c:	83 f8 06             	cmp    eax,0x6
c001252f:	7c 4a                	jl     c001257b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0012531:	83 f8 07             	cmp    eax,0x7
c0012534:	7e 07                	jle    c001253d <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0012536:	83 f8 09             	cmp    eax,0x9
c0012539:	74 21                	je     c001255c <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001253b:	eb 3e                	jmp    c001257b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001253d:	89 e6                	mov    esi,esp
c001253f:	8b 1d 2c 7f 02 c0    	mov    ebx,DWORD PTR ds:0xc0027f2c
c0012545:	56                   	push   esi
c0012546:	c1 eb 15             	shr    ebx,0x15
c0012549:	68 82 00 00 c0       	push   0xc0000082
c001254e:	83 e3 7e             	and    ebx,0x7e
c0012551:	e8 a0 ff ff ff       	call   c00124f6 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0012556:	56                   	push   esi
c0012557:	6a 00                	push   0x0
c0012559:	53                   	push   ebx
c001255a:	eb 12                	jmp    c001256e <CPU::AMD_K6_writeback(int, int, int)+0x60>
c001255c:	89 e3                	mov    ebx,esp
c001255e:	53                   	push   ebx
c001255f:	68 82 00 00 c0       	push   0xc0000082
c0012564:	e8 8d ff ff ff       	call   c00124f6 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0012569:	53                   	push   ebx
c001256a:	6a 00                	push   0x0
c001256c:	6a 00                	push   0x0
c001256e:	68 82 00 00 c0       	push   0xc0000082
c0012573:	e8 62 ff ff ff       	call   c00124da <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0012578:	83 c4 18             	add    esp,0x18
c001257b:	83 c4 10             	add    esp,0x10
c001257e:	5b                   	pop    ebx
c001257f:	5e                   	pop    esi
c0012580:	c3                   	ret    
c0012581:	90                   	nop

c0012582 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0012582:	55                   	push   ebp
c0012583:	57                   	push   edi
c0012584:	56                   	push   esi
c0012585:	53                   	push   ebx
c0012586:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001258a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001258e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0012592:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0012596:	39 05 20 76 02 c0    	cmp    DWORD PTR ds:0xc0027620,eax
c001259c:	75 23                	jne    c00125c1 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c001259e:	a1 cc 89 02 c0       	mov    eax,ds:0xc00289cc
c00125a3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00125a7:	89 06                	mov    DWORD PTR [esi],eax
c00125a9:	a1 c8 89 02 c0       	mov    eax,ds:0xc00289c8
c00125ae:	89 07                	mov    DWORD PTR [edi],eax
c00125b0:	a1 c4 89 02 c0       	mov    eax,ds:0xc00289c4
c00125b5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00125b8:	a1 c0 89 02 c0       	mov    eax,ds:0xc00289c0
c00125bd:	89 02                	mov    DWORD PTR [edx],eax
c00125bf:	eb 3f                	jmp    c0012600 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c00125c1:	31 c9                	xor    ecx,ecx
c00125c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00125c7:	0f a2                	cpuid  
c00125c9:	89 06                	mov    DWORD PTR [esi],eax
c00125cb:	89 1f                	mov    DWORD PTR [edi],ebx
c00125cd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00125d1:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00125d4:	89 10                	mov    DWORD PTR [eax],edx
c00125d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00125da:	a3 20 76 02 c0       	mov    ds:0xc0027620,eax
c00125df:	8b 06                	mov    eax,DWORD PTR [esi]
c00125e1:	a3 cc 89 02 c0       	mov    ds:0xc00289cc,eax
c00125e6:	8b 07                	mov    eax,DWORD PTR [edi]
c00125e8:	a3 c8 89 02 c0       	mov    ds:0xc00289c8,eax
c00125ed:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00125f0:	a3 c4 89 02 c0       	mov    ds:0xc00289c4,eax
c00125f5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00125f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00125fb:	a3 c0 89 02 c0       	mov    ds:0xc00289c0,eax
c0012600:	5b                   	pop    ebx
c0012601:	5e                   	pop    esi
c0012602:	5f                   	pop    edi
c0012603:	5d                   	pop    ebp
c0012604:	c3                   	ret    
c0012605:	90                   	nop

c0012606 <CPU::cpuidCheckEDX(unsigned int)>:
c0012606:	83 ec 10             	sub    esp,0x10
c0012609:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001260d:	50                   	push   eax
c001260e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012612:	50                   	push   eax
c0012613:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012617:	50                   	push   eax
c0012618:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001261c:	50                   	push   eax
c001261d:	6a 01                	push   0x1
c001261f:	e8 5e ff ff ff       	call   c0012582 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012624:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012628:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c001262c:	0f 95 c0             	setne  al
c001262f:	83 c4 24             	add    esp,0x24
c0012632:	c3                   	ret    
c0012633:	90                   	nop

c0012634 <CPU::cpuidCheckECX(unsigned int)>:
c0012634:	83 ec 10             	sub    esp,0x10
c0012637:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001263b:	50                   	push   eax
c001263c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012640:	50                   	push   eax
c0012641:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012645:	50                   	push   eax
c0012646:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001264a:	50                   	push   eax
c001264b:	6a 01                	push   0x1
c001264d:	e8 30 ff ff ff       	call   c0012582 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012652:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012656:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001265a:	0f 95 c0             	setne  al
c001265d:	83 c4 24             	add    esp,0x24
c0012660:	c3                   	ret    
c0012661:	90                   	nop

c0012662 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0012662:	83 ec 10             	sub    esp,0x10
c0012665:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012669:	50                   	push   eax
c001266a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001266e:	50                   	push   eax
c001266f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012673:	50                   	push   eax
c0012674:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012678:	50                   	push   eax
c0012679:	6a 07                	push   0x7
c001267b:	e8 02 ff ff ff       	call   c0012582 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012680:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012684:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0012688:	0f 95 c0             	setne  al
c001268b:	83 c4 24             	add    esp,0x24
c001268e:	c3                   	ret    
c001268f:	90                   	nop

c0012690 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0012690:	83 ec 10             	sub    esp,0x10
c0012693:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012697:	50                   	push   eax
c0012698:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001269c:	50                   	push   eax
c001269d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00126a1:	50                   	push   eax
c00126a2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00126a6:	50                   	push   eax
c00126a7:	6a 07                	push   0x7
c00126a9:	e8 d4 fe ff ff       	call   c0012582 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00126ae:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00126b2:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00126b6:	0f 95 c0             	setne  al
c00126b9:	83 c4 24             	add    esp,0x24
c00126bc:	c3                   	ret    
c00126bd:	90                   	nop

c00126be <CPU::CPU()>:
c00126be:	83 ec 0c             	sub    esp,0xc
c00126c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00126c5:	83 ec 08             	sub    esp,0x8
c00126c8:	68 d9 55 02 c0       	push   0xc00255d9
c00126cd:	50                   	push   eax
c00126ce:	e8 a7 bf ff ff       	call   c000e67a <Device::Device(char const*)>
c00126d3:	83 c4 10             	add    esp,0x10
c00126d6:	ba 2c 58 02 c0       	mov    edx,0xc002582c
c00126db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00126df:	89 10                	mov    DWORD PTR [eax],edx
c00126e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00126e5:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c00126ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00126f3:	05 78 01 00 00       	add    eax,0x178
c00126f8:	83 ec 0c             	sub    esp,0xc
c00126fb:	50                   	push   eax
c00126fc:	e8 29 6e ff ff       	call   c000952a <GDT::GDT()>
c0012701:	83 c4 10             	add    esp,0x10
c0012704:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012708:	05 7c 09 00 00       	add    eax,0x97c
c001270d:	83 ec 0c             	sub    esp,0xc
c0012710:	50                   	push   eax
c0012711:	e8 8e 70 ff ff       	call   c00097a4 <IDT::IDT()>
c0012716:	83 c4 10             	add    esp,0x10
c0012719:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001271d:	05 7c 11 00 00       	add    eax,0x117c
c0012722:	83 ec 0c             	sub    esp,0xc
c0012725:	50                   	push   eax
c0012726:	e8 81 8e ff ff       	call   c000b5ac <TSS::TSS()>
c001272b:	83 c4 10             	add    esp,0x10
c001272e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012732:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0012739:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001273d:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0012747:	90                   	nop
c0012748:	83 c4 0c             	add    esp,0xc
c001274b:	c3                   	ret    

c001274c <CPU::displayFeatures()>:
c001274c:	53                   	push   ebx
c001274d:	83 ec 10             	sub    esp,0x10
c0012750:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012754:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001275a:	68 d0 52 02 c0       	push   0xc00252d0
c001275f:	e8 61 a8 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0012764:	58                   	pop    eax
c0012765:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c001276b:	5a                   	pop    edx
c001276c:	50                   	push   eax
c001276d:	68 e1 52 02 c0       	push   0xc00252e1
c0012772:	e8 4e a8 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0012777:	59                   	pop    ecx
c0012778:	58                   	pop    eax
c0012779:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001277f:	c1 e8 0e             	shr    eax,0xe
c0012782:	0f b6 c0             	movzx  eax,al
c0012785:	50                   	push   eax
c0012786:	68 f2 52 02 c0       	push   0xc00252f2
c001278b:	e8 35 a8 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0012790:	58                   	pop    eax
c0012791:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0012797:	5a                   	pop    edx
c0012798:	66 c1 e8 06          	shr    ax,0x6
c001279c:	0f b6 c0             	movzx  eax,al
c001279f:	50                   	push   eax
c00127a0:	68 03 53 02 c0       	push   0xc0025303
c00127a5:	e8 1b a8 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00127aa:	c7 04 24 f3 58 02 c0 	mov    DWORD PTR [esp],0xc00258f3
c00127b1:	e8 0f a8 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00127b6:	83 c4 10             	add    esp,0x10
c00127b9:	b8 45 3c 02 c0       	mov    eax,0xc0023c45
c00127be:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c00127c5:	74 05                	je     c00127cc <CPU::displayFeatures()+0x80>
c00127c7:	b8 41 3c 02 c0       	mov    eax,0xc0023c41
c00127cc:	51                   	push   ecx
c00127cd:	51                   	push   ecx
c00127ce:	50                   	push   eax
c00127cf:	68 14 53 02 c0       	push   0xc0025314
c00127d4:	e8 ec a7 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00127d9:	83 c4 10             	add    esp,0x10
c00127dc:	b8 41 3c 02 c0       	mov    eax,0xc0023c41
c00127e1:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c00127e8:	78 05                	js     c00127ef <CPU::displayFeatures()+0xa3>
c00127ea:	b8 45 3c 02 c0       	mov    eax,0xc0023c45
c00127ef:	52                   	push   edx
c00127f0:	52                   	push   edx
c00127f1:	50                   	push   eax
c00127f2:	68 2b 53 02 c0       	push   0xc002532b
c00127f7:	e8 c9 a7 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00127fc:	83 c4 10             	add    esp,0x10
c00127ff:	b8 41 3c 02 c0       	mov    eax,0xc0023c41
c0012804:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c001280b:	75 05                	jne    c0012812 <CPU::displayFeatures()+0xc6>
c001280d:	b8 45 3c 02 c0       	mov    eax,0xc0023c45
c0012812:	51                   	push   ecx
c0012813:	51                   	push   ecx
c0012814:	50                   	push   eax
c0012815:	68 42 53 02 c0       	push   0xc0025342
c001281a:	e8 a6 a7 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001281f:	83 c4 10             	add    esp,0x10
c0012822:	b8 41 3c 02 c0       	mov    eax,0xc0023c41
c0012827:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c001282e:	75 05                	jne    c0012835 <CPU::displayFeatures()+0xe9>
c0012830:	b8 45 3c 02 c0       	mov    eax,0xc0023c45
c0012835:	52                   	push   edx
c0012836:	52                   	push   edx
c0012837:	50                   	push   eax
c0012838:	68 59 53 02 c0       	push   0xc0025359
c001283d:	e8 83 a7 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0012842:	83 c4 10             	add    esp,0x10
c0012845:	b8 41 3c 02 c0       	mov    eax,0xc0023c41
c001284a:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0012851:	75 05                	jne    c0012858 <CPU::displayFeatures()+0x10c>
c0012853:	b8 45 3c 02 c0       	mov    eax,0xc0023c45
c0012858:	51                   	push   ecx
c0012859:	51                   	push   ecx
c001285a:	50                   	push   eax
c001285b:	68 70 53 02 c0       	push   0xc0025370
c0012860:	e8 60 a7 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0012865:	83 c4 10             	add    esp,0x10
c0012868:	b8 41 3c 02 c0       	mov    eax,0xc0023c41
c001286d:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0012874:	75 05                	jne    c001287b <CPU::displayFeatures()+0x12f>
c0012876:	b8 45 3c 02 c0       	mov    eax,0xc0023c45
c001287b:	52                   	push   edx
c001287c:	52                   	push   edx
c001287d:	50                   	push   eax
c001287e:	68 87 53 02 c0       	push   0xc0025387
c0012883:	e8 3d a7 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0012888:	83 c4 10             	add    esp,0x10
c001288b:	b8 41 3c 02 c0       	mov    eax,0xc0023c41
c0012890:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0012897:	75 05                	jne    c001289e <CPU::displayFeatures()+0x152>
c0012899:	b8 45 3c 02 c0       	mov    eax,0xc0023c45
c001289e:	51                   	push   ecx
c001289f:	51                   	push   ecx
c00128a0:	50                   	push   eax
c00128a1:	68 9e 53 02 c0       	push   0xc002539e
c00128a6:	e8 1a a7 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00128ab:	83 c4 10             	add    esp,0x10
c00128ae:	b8 41 3c 02 c0       	mov    eax,0xc0023c41
c00128b3:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c00128ba:	75 05                	jne    c00128c1 <CPU::displayFeatures()+0x175>
c00128bc:	b8 45 3c 02 c0       	mov    eax,0xc0023c45
c00128c1:	52                   	push   edx
c00128c2:	52                   	push   edx
c00128c3:	50                   	push   eax
c00128c4:	68 b5 53 02 c0       	push   0xc00253b5
c00128c9:	e8 f7 a6 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00128ce:	83 c4 10             	add    esp,0x10
c00128d1:	b8 41 3c 02 c0       	mov    eax,0xc0023c41
c00128d6:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c00128dd:	75 05                	jne    c00128e4 <CPU::displayFeatures()+0x198>
c00128df:	b8 45 3c 02 c0       	mov    eax,0xc0023c45
c00128e4:	51                   	push   ecx
c00128e5:	51                   	push   ecx
c00128e6:	50                   	push   eax
c00128e7:	68 cc 53 02 c0       	push   0xc00253cc
c00128ec:	e8 d4 a6 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00128f1:	83 c4 10             	add    esp,0x10
c00128f4:	b8 41 3c 02 c0       	mov    eax,0xc0023c41
c00128f9:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0012900:	75 05                	jne    c0012907 <CPU::displayFeatures()+0x1bb>
c0012902:	b8 45 3c 02 c0       	mov    eax,0xc0023c45
c0012907:	52                   	push   edx
c0012908:	52                   	push   edx
c0012909:	50                   	push   eax
c001290a:	68 e3 53 02 c0       	push   0xc00253e3
c001290f:	e8 b1 a6 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0012914:	83 c4 10             	add    esp,0x10
c0012917:	b8 41 3c 02 c0       	mov    eax,0xc0023c41
c001291c:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0012923:	75 05                	jne    c001292a <CPU::displayFeatures()+0x1de>
c0012925:	b8 45 3c 02 c0       	mov    eax,0xc0023c45
c001292a:	51                   	push   ecx
c001292b:	51                   	push   ecx
c001292c:	50                   	push   eax
c001292d:	68 fa 53 02 c0       	push   0xc00253fa
c0012932:	e8 8e a6 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0012937:	83 c4 10             	add    esp,0x10
c001293a:	b8 41 3c 02 c0       	mov    eax,0xc0023c41
c001293f:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0012946:	75 05                	jne    c001294d <CPU::displayFeatures()+0x201>
c0012948:	b8 45 3c 02 c0       	mov    eax,0xc0023c45
c001294d:	52                   	push   edx
c001294e:	52                   	push   edx
c001294f:	50                   	push   eax
c0012950:	68 11 54 02 c0       	push   0xc0025411
c0012955:	e8 6b a6 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001295a:	83 c4 10             	add    esp,0x10
c001295d:	b8 41 3c 02 c0       	mov    eax,0xc0023c41
c0012962:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0012969:	75 05                	jne    c0012970 <CPU::displayFeatures()+0x224>
c001296b:	b8 45 3c 02 c0       	mov    eax,0xc0023c45
c0012970:	51                   	push   ecx
c0012971:	51                   	push   ecx
c0012972:	50                   	push   eax
c0012973:	68 28 54 02 c0       	push   0xc0025428
c0012978:	e8 48 a6 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001297d:	83 c4 10             	add    esp,0x10
c0012980:	b8 41 3c 02 c0       	mov    eax,0xc0023c41
c0012985:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c001298c:	78 05                	js     c0012993 <CPU::displayFeatures()+0x247>
c001298e:	b8 45 3c 02 c0       	mov    eax,0xc0023c45
c0012993:	52                   	push   edx
c0012994:	52                   	push   edx
c0012995:	50                   	push   eax
c0012996:	68 3f 54 02 c0       	push   0xc002543f
c001299b:	e8 25 a6 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00129a0:	83 c4 10             	add    esp,0x10
c00129a3:	b8 41 3c 02 c0       	mov    eax,0xc0023c41
c00129a8:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c00129af:	75 05                	jne    c00129b6 <CPU::displayFeatures()+0x26a>
c00129b1:	b8 45 3c 02 c0       	mov    eax,0xc0023c45
c00129b6:	51                   	push   ecx
c00129b7:	51                   	push   ecx
c00129b8:	50                   	push   eax
c00129b9:	68 56 54 02 c0       	push   0xc0025456
c00129be:	e8 02 a6 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00129c3:	83 c4 10             	add    esp,0x10
c00129c6:	b8 41 3c 02 c0       	mov    eax,0xc0023c41
c00129cb:	f6 83 92 11 00 00 02 	test   BYTE PTR [ebx+0x1192],0x2
c00129d2:	75 05                	jne    c00129d9 <CPU::displayFeatures()+0x28d>
c00129d4:	b8 45 3c 02 c0       	mov    eax,0xc0023c45
c00129d9:	52                   	push   edx
c00129da:	52                   	push   edx
c00129db:	50                   	push   eax
c00129dc:	68 6d 54 02 c0       	push   0xc002546d
c00129e1:	e8 df a5 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00129e6:	83 c4 18             	add    esp,0x18
c00129e9:	5b                   	pop    ebx
c00129ea:	c3                   	ret    
c00129eb:	90                   	nop

c00129ec <CPU::detectFeatures()>:
c00129ec:	55                   	push   ebp
c00129ed:	57                   	push   edi
c00129ee:	56                   	push   esi
c00129ef:	53                   	push   ebx
c00129f0:	83 ec 50             	sub    esp,0x50
c00129f3:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00129f7:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0012a01:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0012a08:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0012a0e:	6a 0d                	push   0xd
c0012a10:	6a 00                	push   0x0
c0012a12:	55                   	push   ebp
c0012a13:	e8 64 dc fe ff       	call   c000067c <memset>
c0012a18:	83 c4 10             	add    esp,0x10
c0012a1b:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c0012a20:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0012a27:	0f 84 22 09 00 00    	je     c001334f <CPU::detectFeatures()+0x963>
c0012a2d:	83 ec 0c             	sub    esp,0xc
c0012a30:	89 ef                	mov    edi,ebp
c0012a32:	6a 10                	push   0x10
c0012a34:	e8 cd fb ff ff       	call   c0012606 <CPU::cpuidCheckEDX(unsigned int)>
c0012a39:	83 e0 01             	and    eax,0x1
c0012a3c:	8d 14 00             	lea    edx,[eax+eax*1]
c0012a3f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0012a45:	83 e0 fd             	and    eax,0xfffffffd
c0012a48:	09 d0                	or     eax,edx
c0012a4a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0012a50:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0012a57:	e8 aa fb ff ff       	call   c0012606 <CPU::cpuidCheckEDX(unsigned int)>
c0012a5c:	83 e0 01             	and    eax,0x1
c0012a5f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0012a66:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0012a6c:	83 e0 fb             	and    eax,0xfffffffb
c0012a6f:	09 d0                	or     eax,edx
c0012a71:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0012a77:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012a7e:	e8 83 fb ff ff       	call   c0012606 <CPU::cpuidCheckEDX(unsigned int)>
c0012a83:	83 e0 01             	and    eax,0x1
c0012a86:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0012a8d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0012a93:	83 e0 f7             	and    eax,0xfffffff7
c0012a96:	09 d0                	or     eax,edx
c0012a98:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0012a9e:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0012aa5:	e8 5c fb ff ff       	call   c0012606 <CPU::cpuidCheckEDX(unsigned int)>
c0012aaa:	83 e0 01             	and    eax,0x1
c0012aad:	c1 e0 04             	shl    eax,0x4
c0012ab0:	88 c2                	mov    dl,al
c0012ab2:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0012ab8:	83 e0 ef             	and    eax,0xffffffef
c0012abb:	09 d0                	or     eax,edx
c0012abd:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0012ac3:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0012aca:	e8 37 fb ff ff       	call   c0012606 <CPU::cpuidCheckEDX(unsigned int)>
c0012acf:	83 e0 01             	and    eax,0x1
c0012ad2:	c1 e0 05             	shl    eax,0x5
c0012ad5:	88 c2                	mov    dl,al
c0012ad7:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0012add:	83 e0 df             	and    eax,0xffffffdf
c0012ae0:	09 d0                	or     eax,edx
c0012ae2:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0012ae8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0012aef:	e8 12 fb ff ff       	call   c0012606 <CPU::cpuidCheckEDX(unsigned int)>
c0012af4:	83 e0 01             	and    eax,0x1
c0012af7:	8d 14 00             	lea    edx,[eax+eax*1]
c0012afa:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0012b00:	83 e0 fd             	and    eax,0xfffffffd
c0012b03:	09 d0                	or     eax,edx
c0012b05:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0012b0b:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0012b12:	e8 ef fa ff ff       	call   c0012606 <CPU::cpuidCheckEDX(unsigned int)>
c0012b17:	83 e0 01             	and    eax,0x1
c0012b1a:	c1 e0 06             	shl    eax,0x6
c0012b1d:	88 c2                	mov    dl,al
c0012b1f:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0012b25:	83 e0 bf             	and    eax,0xffffffbf
c0012b28:	09 d0                	or     eax,edx
c0012b2a:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0012b30:	58                   	pop    eax
c0012b31:	8d 44 24 28          	lea    eax,[esp+0x28]
c0012b35:	50                   	push   eax
c0012b36:	8d 44 24 28          	lea    eax,[esp+0x28]
c0012b3a:	50                   	push   eax
c0012b3b:	8d 74 24 28          	lea    esi,[esp+0x28]
c0012b3f:	56                   	push   esi
c0012b40:	8d 44 24 28          	lea    eax,[esp+0x28]
c0012b44:	50                   	push   eax
c0012b45:	6a 00                	push   0x0
c0012b47:	e8 36 fa ff ff       	call   c0012582 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012b4c:	b8 04 00 00 00       	mov    eax,0x4
c0012b51:	89 c1                	mov    ecx,eax
c0012b53:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012b55:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0012b5b:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0012b5f:	89 c1                	mov    ecx,eax
c0012b61:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012b63:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0012b69:	8d 74 24 38          	lea    esi,[esp+0x38]
c0012b6d:	89 c1                	mov    ecx,eax
c0012b6f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012b71:	83 c4 18             	add    esp,0x18
c0012b74:	68 84 54 02 c0       	push   0xc0025484
c0012b79:	55                   	push   ebp
c0012b7a:	e8 45 dc fe ff       	call   c00007c4 <strcmp>
c0012b7f:	83 c4 10             	add    esp,0x10
c0012b82:	85 c0                	test   eax,eax
c0012b84:	75 0f                	jne    c0012b95 <CPU::detectFeatures()+0x1a9>
c0012b86:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0012b90:	e9 22 02 00 00       	jmp    c0012db7 <CPU::detectFeatures()+0x3cb>
c0012b95:	50                   	push   eax
c0012b96:	50                   	push   eax
c0012b97:	68 91 54 02 c0       	push   0xc0025491
c0012b9c:	55                   	push   ebp
c0012b9d:	e8 22 dc fe ff       	call   c00007c4 <strcmp>
c0012ba2:	83 c4 10             	add    esp,0x10
c0012ba5:	85 c0                	test   eax,eax
c0012ba7:	74 dd                	je     c0012b86 <CPU::detectFeatures()+0x19a>
c0012ba9:	50                   	push   eax
c0012baa:	50                   	push   eax
c0012bab:	68 9e 54 02 c0       	push   0xc002549e
c0012bb0:	55                   	push   ebp
c0012bb1:	e8 0e dc fe ff       	call   c00007c4 <strcmp>
c0012bb6:	83 c4 10             	add    esp,0x10
c0012bb9:	85 c0                	test   eax,eax
c0012bbb:	74 2a                	je     c0012be7 <CPU::detectFeatures()+0x1fb>
c0012bbd:	50                   	push   eax
c0012bbe:	50                   	push   eax
c0012bbf:	68 ab 54 02 c0       	push   0xc00254ab
c0012bc4:	55                   	push   ebp
c0012bc5:	e8 fa db fe ff       	call   c00007c4 <strcmp>
c0012bca:	83 c4 10             	add    esp,0x10
c0012bcd:	85 c0                	test   eax,eax
c0012bcf:	74 16                	je     c0012be7 <CPU::detectFeatures()+0x1fb>
c0012bd1:	50                   	push   eax
c0012bd2:	50                   	push   eax
c0012bd3:	68 b8 54 02 c0       	push   0xc00254b8
c0012bd8:	55                   	push   ebp
c0012bd9:	e8 e6 db fe ff       	call   c00007c4 <strcmp>
c0012bde:	83 c4 10             	add    esp,0x10
c0012be1:	85 c0                	test   eax,eax
c0012be3:	74 48                	je     c0012c2d <CPU::detectFeatures()+0x241>
c0012be5:	eb 0f                	jmp    c0012bf6 <CPU::detectFeatures()+0x20a>
c0012be7:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0012bf1:	e9 c1 01 00 00       	jmp    c0012db7 <CPU::detectFeatures()+0x3cb>
c0012bf6:	50                   	push   eax
c0012bf7:	50                   	push   eax
c0012bf8:	68 c5 54 02 c0       	push   0xc00254c5
c0012bfd:	55                   	push   ebp
c0012bfe:	e8 c1 db fe ff       	call   c00007c4 <strcmp>
c0012c03:	83 c4 10             	add    esp,0x10
c0012c06:	85 c0                	test   eax,eax
c0012c08:	74 23                	je     c0012c2d <CPU::detectFeatures()+0x241>
c0012c0a:	57                   	push   edi
c0012c0b:	57                   	push   edi
c0012c0c:	68 d2 54 02 c0       	push   0xc00254d2
c0012c11:	55                   	push   ebp
c0012c12:	e8 ad db fe ff       	call   c00007c4 <strcmp>
c0012c17:	83 c4 10             	add    esp,0x10
c0012c1a:	85 c0                	test   eax,eax
c0012c1c:	75 1e                	jne    c0012c3c <CPU::detectFeatures()+0x250>
c0012c1e:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0012c28:	e9 8a 01 00 00       	jmp    c0012db7 <CPU::detectFeatures()+0x3cb>
c0012c2d:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0012c37:	e9 7b 01 00 00       	jmp    c0012db7 <CPU::detectFeatures()+0x3cb>
c0012c3c:	56                   	push   esi
c0012c3d:	56                   	push   esi
c0012c3e:	68 df 54 02 c0       	push   0xc00254df
c0012c43:	55                   	push   ebp
c0012c44:	e8 7b db fe ff       	call   c00007c4 <strcmp>
c0012c49:	83 c4 10             	add    esp,0x10
c0012c4c:	85 c0                	test   eax,eax
c0012c4e:	75 0f                	jne    c0012c5f <CPU::detectFeatures()+0x273>
c0012c50:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0012c5a:	e9 58 01 00 00       	jmp    c0012db7 <CPU::detectFeatures()+0x3cb>
c0012c5f:	51                   	push   ecx
c0012c60:	51                   	push   ecx
c0012c61:	68 9e 54 02 c0       	push   0xc002549e
c0012c66:	55                   	push   ebp
c0012c67:	e8 58 db fe ff       	call   c00007c4 <strcmp>
c0012c6c:	83 c4 10             	add    esp,0x10
c0012c6f:	85 c0                	test   eax,eax
c0012c71:	75 0f                	jne    c0012c82 <CPU::detectFeatures()+0x296>
c0012c73:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0012c7d:	e9 35 01 00 00       	jmp    c0012db7 <CPU::detectFeatures()+0x3cb>
c0012c82:	52                   	push   edx
c0012c83:	52                   	push   edx
c0012c84:	68 ec 54 02 c0       	push   0xc00254ec
c0012c89:	55                   	push   ebp
c0012c8a:	e8 35 db fe ff       	call   c00007c4 <strcmp>
c0012c8f:	83 c4 10             	add    esp,0x10
c0012c92:	85 c0                	test   eax,eax
c0012c94:	75 0f                	jne    c0012ca5 <CPU::detectFeatures()+0x2b9>
c0012c96:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0012ca0:	e9 12 01 00 00       	jmp    c0012db7 <CPU::detectFeatures()+0x3cb>
c0012ca5:	50                   	push   eax
c0012ca6:	50                   	push   eax
c0012ca7:	68 f9 54 02 c0       	push   0xc00254f9
c0012cac:	55                   	push   ebp
c0012cad:	e8 12 db fe ff       	call   c00007c4 <strcmp>
c0012cb2:	83 c4 10             	add    esp,0x10
c0012cb5:	85 c0                	test   eax,eax
c0012cb7:	75 0f                	jne    c0012cc8 <CPU::detectFeatures()+0x2dc>
c0012cb9:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0012cc3:	e9 ef 00 00 00       	jmp    c0012db7 <CPU::detectFeatures()+0x3cb>
c0012cc8:	50                   	push   eax
c0012cc9:	50                   	push   eax
c0012cca:	68 06 55 02 c0       	push   0xc0025506
c0012ccf:	55                   	push   ebp
c0012cd0:	e8 ef da fe ff       	call   c00007c4 <strcmp>
c0012cd5:	83 c4 10             	add    esp,0x10
c0012cd8:	85 c0                	test   eax,eax
c0012cda:	75 0f                	jne    c0012ceb <CPU::detectFeatures()+0x2ff>
c0012cdc:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0012ce6:	e9 cc 00 00 00       	jmp    c0012db7 <CPU::detectFeatures()+0x3cb>
c0012ceb:	50                   	push   eax
c0012cec:	50                   	push   eax
c0012ced:	68 13 55 02 c0       	push   0xc0025513
c0012cf2:	55                   	push   ebp
c0012cf3:	e8 cc da fe ff       	call   c00007c4 <strcmp>
c0012cf8:	83 c4 10             	add    esp,0x10
c0012cfb:	85 c0                	test   eax,eax
c0012cfd:	75 0f                	jne    c0012d0e <CPU::detectFeatures()+0x322>
c0012cff:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0012d09:	e9 a9 00 00 00       	jmp    c0012db7 <CPU::detectFeatures()+0x3cb>
c0012d0e:	50                   	push   eax
c0012d0f:	50                   	push   eax
c0012d10:	68 20 55 02 c0       	push   0xc0025520
c0012d15:	55                   	push   ebp
c0012d16:	e8 a9 da fe ff       	call   c00007c4 <strcmp>
c0012d1b:	83 c4 10             	add    esp,0x10
c0012d1e:	85 c0                	test   eax,eax
c0012d20:	75 0f                	jne    c0012d31 <CPU::detectFeatures()+0x345>
c0012d22:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0012d2c:	e9 86 00 00 00       	jmp    c0012db7 <CPU::detectFeatures()+0x3cb>
c0012d31:	50                   	push   eax
c0012d32:	50                   	push   eax
c0012d33:	68 2d 55 02 c0       	push   0xc002552d
c0012d38:	55                   	push   ebp
c0012d39:	e8 86 da fe ff       	call   c00007c4 <strcmp>
c0012d3e:	83 c4 10             	add    esp,0x10
c0012d41:	85 c0                	test   eax,eax
c0012d43:	75 0c                	jne    c0012d51 <CPU::detectFeatures()+0x365>
c0012d45:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0012d4f:	eb 66                	jmp    c0012db7 <CPU::detectFeatures()+0x3cb>
c0012d51:	50                   	push   eax
c0012d52:	50                   	push   eax
c0012d53:	68 3a 55 02 c0       	push   0xc002553a
c0012d58:	55                   	push   ebp
c0012d59:	e8 66 da fe ff       	call   c00007c4 <strcmp>
c0012d5e:	83 c4 10             	add    esp,0x10
c0012d61:	85 c0                	test   eax,eax
c0012d63:	75 0c                	jne    c0012d71 <CPU::detectFeatures()+0x385>
c0012d65:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0012d6f:	eb 46                	jmp    c0012db7 <CPU::detectFeatures()+0x3cb>
c0012d71:	57                   	push   edi
c0012d72:	57                   	push   edi
c0012d73:	68 47 55 02 c0       	push   0xc0025547
c0012d78:	55                   	push   ebp
c0012d79:	e8 46 da fe ff       	call   c00007c4 <strcmp>
c0012d7e:	83 c4 10             	add    esp,0x10
c0012d81:	85 c0                	test   eax,eax
c0012d83:	74 e0                	je     c0012d65 <CPU::detectFeatures()+0x379>
c0012d85:	56                   	push   esi
c0012d86:	56                   	push   esi
c0012d87:	68 54 55 02 c0       	push   0xc0025554
c0012d8c:	55                   	push   ebp
c0012d8d:	e8 32 da fe ff       	call   c00007c4 <strcmp>
c0012d92:	83 c4 10             	add    esp,0x10
c0012d95:	85 c0                	test   eax,eax
c0012d97:	74 cc                	je     c0012d65 <CPU::detectFeatures()+0x379>
c0012d99:	51                   	push   ecx
c0012d9a:	51                   	push   ecx
c0012d9b:	68 61 55 02 c0       	push   0xc0025561
c0012da0:	55                   	push   ebp
c0012da1:	e8 1e da fe ff       	call   c00007c4 <strcmp>
c0012da6:	83 c4 10             	add    esp,0x10
c0012da9:	85 c0                	test   eax,eax
c0012dab:	74 b8                	je     c0012d65 <CPU::detectFeatures()+0x379>
c0012dad:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0012db7:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0012dbc:	0f 86 be 00 00 00    	jbe    c0012e80 <CPU::detectFeatures()+0x494>
c0012dc2:	83 ec 0c             	sub    esp,0xc
c0012dc5:	68 80 00 00 00       	push   0x80
c0012dca:	e8 93 f8 ff ff       	call   c0012662 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0012dcf:	83 e0 01             	and    eax,0x1
c0012dd2:	c1 e0 06             	shl    eax,0x6
c0012dd5:	88 c2                	mov    dl,al
c0012dd7:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0012ddd:	83 e0 bf             	and    eax,0xffffffbf
c0012de0:	09 d0                	or     eax,edx
c0012de2:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0012de8:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0012def:	e8 6e f8 ff ff       	call   c0012662 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0012df4:	83 e0 01             	and    eax,0x1
c0012df7:	c1 e0 04             	shl    eax,0x4
c0012dfa:	88 c2                	mov    dl,al
c0012dfc:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0012e02:	83 e0 ef             	and    eax,0xffffffef
c0012e05:	09 d0                	or     eax,edx
c0012e07:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0012e0d:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0012e14:	e8 49 f8 ff ff       	call   c0012662 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0012e19:	c1 e0 07             	shl    eax,0x7
c0012e1c:	88 c2                	mov    dl,al
c0012e1e:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0012e24:	83 e0 7f             	and    eax,0x7f
c0012e27:	09 d0                	or     eax,edx
c0012e29:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0012e2f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0012e36:	e8 55 f8 ff ff       	call   c0012690 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0012e3b:	83 e0 01             	and    eax,0x1
c0012e3e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0012e45:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0012e4b:	83 e0 f7             	and    eax,0xfffffff7
c0012e4e:	09 d0                	or     eax,edx
c0012e50:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0012e56:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0012e5d:	e8 2e f8 ff ff       	call   c0012690 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0012e62:	83 c4 10             	add    esp,0x10
c0012e65:	83 e0 01             	and    eax,0x1
c0012e68:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0012e6f:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0012e75:	83 e0 fb             	and    eax,0xfffffffb
c0012e78:	09 d0                	or     eax,edx
c0012e7a:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0012e80:	83 ec 0c             	sub    esp,0xc
c0012e83:	8d 44 24 28          	lea    eax,[esp+0x28]
c0012e87:	50                   	push   eax
c0012e88:	8d 44 24 28          	lea    eax,[esp+0x28]
c0012e8c:	50                   	push   eax
c0012e8d:	8d 74 24 28          	lea    esi,[esp+0x28]
c0012e91:	56                   	push   esi
c0012e92:	8d 44 24 28          	lea    eax,[esp+0x28]
c0012e96:	50                   	push   eax
c0012e97:	6a 01                	push   0x1
c0012e99:	e8 e4 f6 ff ff       	call   c0012582 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012e9e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0012ea2:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0012ea8:	88 ca                	mov    dl,cl
c0012eaa:	83 e0 f0             	and    eax,0xfffffff0
c0012ead:	83 e2 0f             	and    edx,0xf
c0012eb0:	09 d0                	or     eax,edx
c0012eb2:	88 ca                	mov    dl,cl
c0012eb4:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0012eba:	c0 ea 04             	shr    dl,0x4
c0012ebd:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0012ec1:	0f b6 c2             	movzx  eax,dl
c0012ec4:	83 c4 20             	add    esp,0x20
c0012ec7:	c1 e0 06             	shl    eax,0x6
c0012eca:	89 c7                	mov    edi,eax
c0012ecc:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0012ed2:	66 25 3f c0          	and    ax,0xc03f
c0012ed6:	09 f8                	or     eax,edi
c0012ed8:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0012edf:	89 c8                	mov    eax,ecx
c0012ee1:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c0012ee8:	c1 e8 08             	shr    eax,0x8
c0012eeb:	83 e5 3f             	and    ebp,0x3f
c0012eee:	83 e0 0f             	and    eax,0xf
c0012ef1:	89 c7                	mov    edi,eax
c0012ef3:	c1 e7 06             	shl    edi,0x6
c0012ef6:	09 ef                	or     edi,ebp
c0012ef8:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c0012eff:	89 fa                	mov    edx,edi
c0012f01:	83 e5 c0             	and    ebp,0xffffffc0
c0012f04:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0012f0a:	88 c2                	mov    dl,al
c0012f0c:	c0 ea 02             	shr    dl,0x2
c0012f0f:	89 d7                	mov    edi,edx
c0012f11:	09 ef                	or     edi,ebp
c0012f13:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0012f19:	89 fa                	mov    edx,edi
c0012f1b:	83 e5 cf             	and    ebp,0xffffffcf
c0012f1e:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0012f24:	89 cf                	mov    edi,ecx
c0012f26:	c1 ef 0c             	shr    edi,0xc
c0012f29:	83 e7 03             	and    edi,0x3
c0012f2c:	c1 e7 04             	shl    edi,0x4
c0012f2f:	09 ef                	or     edi,ebp
c0012f31:	3c 06                	cmp    al,0x6
c0012f33:	89 fa                	mov    edx,edi
c0012f35:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0012f3b:	74 04                	je     c0012f41 <CPU::detectFeatures()+0x555>
c0012f3d:	3c 0f                	cmp    al,0xf
c0012f3f:	75 5c                	jne    c0012f9d <CPU::detectFeatures()+0x5b1>
c0012f41:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0012f45:	89 cf                	mov    edi,ecx
c0012f47:	c1 ef 10             	shr    edi,0x10
c0012f4a:	c1 e7 04             	shl    edi,0x4
c0012f4d:	09 fa                	or     edx,edi
c0012f4f:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c0012f55:	0f b6 d2             	movzx  edx,dl
c0012f58:	66 81 e7 3f c0       	and    di,0xc03f
c0012f5d:	c1 e2 06             	shl    edx,0x6
c0012f60:	09 fa                	or     edx,edi
c0012f62:	3c 0f                	cmp    al,0xf
c0012f64:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0012f6b:	75 30                	jne    c0012f9d <CPU::detectFeatures()+0x5b1>
c0012f6d:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0012f73:	c1 e9 14             	shr    ecx,0x14
c0012f76:	83 e0 3f             	and    eax,0x3f
c0012f79:	83 c1 0f             	add    ecx,0xf
c0012f7c:	88 ca                	mov    dl,cl
c0012f7e:	c0 e9 02             	shr    cl,0x2
c0012f81:	c1 e2 06             	shl    edx,0x6
c0012f84:	09 d0                	or     eax,edx
c0012f86:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0012f8c:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0012f92:	83 e0 c0             	and    eax,0xffffffc0
c0012f95:	09 c1                	or     ecx,eax
c0012f97:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0012f9d:	83 ec 0c             	sub    esp,0xc
c0012fa0:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0012fa7:	8d 44 24 28          	lea    eax,[esp+0x28]
c0012fab:	50                   	push   eax
c0012fac:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0012fb0:	55                   	push   ebp
c0012fb1:	56                   	push   esi
c0012fb2:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0012fb6:	57                   	push   edi
c0012fb7:	68 00 00 00 80       	push   0x80000000
c0012fbc:	e8 c1 f5 ff ff       	call   c0012582 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012fc1:	83 c4 20             	add    esp,0x20
c0012fc4:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0012fcc:	76 22                	jbe    c0012ff0 <CPU::detectFeatures()+0x604>
c0012fce:	83 ec 0c             	sub    esp,0xc
c0012fd1:	8d 44 24 28          	lea    eax,[esp+0x28]
c0012fd5:	50                   	push   eax
c0012fd6:	55                   	push   ebp
c0012fd7:	56                   	push   esi
c0012fd8:	57                   	push   edi
c0012fd9:	68 01 00 00 80       	push   0x80000001
c0012fde:	e8 9f f5 ff ff       	call   c0012582 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012fe3:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0012fed:	83 c4 20             	add    esp,0x20
c0012ff0:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0012ff6:	83 f8 01             	cmp    eax,0x1
c0012ff9:	75 6f                	jne    c001306a <CPU::detectFeatures()+0x67e>
c0012ffb:	51                   	push   ecx
c0012ffc:	51                   	push   ecx
c0012ffd:	68 6d 55 02 c0       	push   0xc002556d
c0013002:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0013006:	56                   	push   esi
c0013007:	e8 2c d7 fe ff       	call   c0000738 <strcpy>
c001300c:	5f                   	pop    edi
c001300d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013013:	5d                   	pop    ebp
c0013014:	66 c1 e8 06          	shr    ax,0x6
c0013018:	0f b6 c0             	movzx  eax,al
c001301b:	50                   	push   eax
c001301c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013022:	c1 e8 0e             	shr    eax,0xe
c0013025:	0f b6 c0             	movzx  eax,al
c0013028:	50                   	push   eax
c0013029:	e8 fe f1 ff ff       	call   c001222c <CPU::lookupIntelName(unsigned char, unsigned char)>
c001302e:	5a                   	pop    edx
c001302f:	59                   	pop    ecx
c0013030:	50                   	push   eax
c0013031:	56                   	push   esi
c0013032:	e8 41 d8 fe ff       	call   c0000878 <strcat>
c0013037:	5f                   	pop    edi
c0013038:	5d                   	pop    ebp
c0013039:	56                   	push   esi
c001303a:	53                   	push   ebx
c001303b:	e8 2c b6 ff ff       	call   c000e66c <Device::setName(char const*)>
c0013040:	58                   	pop    eax
c0013041:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0013047:	5a                   	pop    edx
c0013048:	68 74 55 02 c0       	push   0xc0025574
c001304d:	50                   	push   eax
c001304e:	e8 71 d7 fe ff       	call   c00007c4 <strcmp>
c0013053:	83 c4 10             	add    esp,0x10
c0013056:	85 c0                	test   eax,eax
c0013058:	0f 85 71 03 00 00    	jne    c00133cf <CPU::detectFeatures()+0x9e3>
c001305e:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0013065:	e9 65 03 00 00       	jmp    c00133cf <CPU::detectFeatures()+0x9e3>
c001306a:	83 f8 02             	cmp    eax,0x2
c001306d:	0f 85 b5 00 00 00    	jne    c0013128 <CPU::detectFeatures()+0x73c>
c0013073:	57                   	push   edi
c0013074:	57                   	push   edi
c0013075:	68 86 55 02 c0       	push   0xc0025586
c001307a:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001307e:	56                   	push   esi
c001307f:	e8 b4 d6 fe ff       	call   c0000738 <strcpy>
c0013084:	5d                   	pop    ebp
c0013085:	58                   	pop    eax
c0013086:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001308c:	66 c1 e8 06          	shr    ax,0x6
c0013090:	0f b6 c0             	movzx  eax,al
c0013093:	50                   	push   eax
c0013094:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001309a:	c1 e8 0e             	shr    eax,0xe
c001309d:	0f b6 c0             	movzx  eax,al
c00130a0:	50                   	push   eax
c00130a1:	e8 f2 ef ff ff       	call   c0012098 <CPU::lookupAMDName(unsigned char, unsigned char)>
c00130a6:	5a                   	pop    edx
c00130a7:	59                   	pop    ecx
c00130a8:	50                   	push   eax
c00130a9:	56                   	push   esi
c00130aa:	e8 c9 d7 fe ff       	call   c0000878 <strcat>
c00130af:	5f                   	pop    edi
c00130b0:	5d                   	pop    ebp
c00130b1:	56                   	push   esi
c00130b2:	53                   	push   ebx
c00130b3:	e8 b4 b5 ff ff       	call   c000e66c <Device::setName(char const*)>
c00130b8:	58                   	pop    eax
c00130b9:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00130bf:	5a                   	pop    edx
c00130c0:	68 8b 55 02 c0       	push   0xc002558b
c00130c5:	50                   	push   eax
c00130c6:	e8 f9 d6 fe ff       	call   c00007c4 <strcmp>
c00130cb:	83 c4 10             	add    esp,0x10
c00130ce:	85 c0                	test   eax,eax
c00130d0:	75 20                	jne    c00130f2 <CPU::detectFeatures()+0x706>
c00130d2:	8b 15 08 7f 02 c0    	mov    edx,DWORD PTR ds:0xc0027f08
c00130d8:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00130de:	a8 01                	test   al,0x1
c00130e0:	74 10                	je     c00130f2 <CPU::detectFeatures()+0x706>
c00130e2:	83 e0 fe             	and    eax,0xfffffffe
c00130e5:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00130eb:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c00130f2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00130f8:	c1 e8 0e             	shr    eax,0xe
c00130fb:	3c 05                	cmp    al,0x5
c00130fd:	0f 85 cc 02 00 00    	jne    c00133cf <CPU::detectFeatures()+0x9e3>
c0013103:	56                   	push   esi
c0013104:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001310a:	83 e0 0f             	and    eax,0xf
c001310d:	50                   	push   eax
c001310e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013114:	66 c1 e8 06          	shr    ax,0x6
c0013118:	0f b6 c0             	movzx  eax,al
c001311b:	50                   	push   eax
c001311c:	6a 05                	push   0x5
c001311e:	e8 eb f3 ff ff       	call   c001250e <CPU::AMD_K6_writeback(int, int, int)>
c0013123:	e9 1f 02 00 00       	jmp    c0013347 <CPU::detectFeatures()+0x95b>
c0013128:	8d 50 fd             	lea    edx,[eax-0x3]
c001312b:	83 fa 01             	cmp    edx,0x1
c001312e:	76 09                	jbe    c0013139 <CPU::detectFeatures()+0x74d>
c0013130:	83 f8 06             	cmp    eax,0x6
c0013133:	0f 85 91 01 00 00    	jne    c00132ca <CPU::detectFeatures()+0x8de>
c0013139:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001313f:	c1 ea 0e             	shr    edx,0xe
c0013142:	80 fa 05             	cmp    dl,0x5
c0013145:	75 7b                	jne    c00131c2 <CPU::detectFeatures()+0x7d6>
c0013147:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001314d:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0013152:	66 81 fa 00 01       	cmp    dx,0x100
c0013157:	75 0c                	jne    c0013165 <CPU::detectFeatures()+0x779>
c0013159:	51                   	push   ecx
c001315a:	51                   	push   ecx
c001315b:	68 92 55 02 c0       	push   0xc0025592
c0013160:	e9 dc 01 00 00       	jmp    c0013341 <CPU::detectFeatures()+0x955>
c0013165:	66 81 fa 00 02       	cmp    dx,0x200
c001316a:	75 0c                	jne    c0013178 <CPU::detectFeatures()+0x78c>
c001316c:	52                   	push   edx
c001316d:	52                   	push   edx
c001316e:	68 a5 55 02 c0       	push   0xc00255a5
c0013173:	e9 c9 01 00 00       	jmp    c0013341 <CPU::detectFeatures()+0x955>
c0013178:	66 81 fa 40 02       	cmp    dx,0x240
c001317d:	75 0c                	jne    c001318b <CPU::detectFeatures()+0x79f>
c001317f:	50                   	push   eax
c0013180:	50                   	push   eax
c0013181:	68 b7 55 02 c0       	push   0xc00255b7
c0013186:	e9 b6 01 00 00       	jmp    c0013341 <CPU::detectFeatures()+0x955>
c001318b:	83 f8 06             	cmp    eax,0x6
c001318e:	75 0c                	jne    c001319c <CPU::detectFeatures()+0x7b0>
c0013190:	50                   	push   eax
c0013191:	50                   	push   eax
c0013192:	68 c9 55 02 c0       	push   0xc00255c9
c0013197:	e9 a5 01 00 00       	jmp    c0013341 <CPU::detectFeatures()+0x955>
c001319c:	83 f8 04             	cmp    eax,0x4
c001319f:	75 0c                	jne    c00131ad <CPU::detectFeatures()+0x7c1>
c00131a1:	50                   	push   eax
c00131a2:	50                   	push   eax
c00131a3:	68 d5 55 02 c0       	push   0xc00255d5
c00131a8:	e9 94 01 00 00       	jmp    c0013341 <CPU::detectFeatures()+0x955>
c00131ad:	83 f8 03             	cmp    eax,0x3
c00131b0:	0f 85 19 02 00 00    	jne    c00133cf <CPU::detectFeatures()+0x9e3>
c00131b6:	50                   	push   eax
c00131b7:	50                   	push   eax
c00131b8:	68 dd 55 02 c0       	push   0xc00255dd
c00131bd:	e9 7f 01 00 00       	jmp    c0013341 <CPU::detectFeatures()+0x955>
c00131c2:	80 fa 06             	cmp    dl,0x6
c00131c5:	0f 85 db 00 00 00    	jne    c00132a6 <CPU::detectFeatures()+0x8ba>
c00131cb:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00131d1:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00131d6:	66 81 fa 80 01       	cmp    dx,0x180
c00131db:	75 0c                	jne    c00131e9 <CPU::detectFeatures()+0x7fd>
c00131dd:	50                   	push   eax
c00131de:	50                   	push   eax
c00131df:	68 e8 55 02 c0       	push   0xc00255e8
c00131e4:	e9 58 01 00 00       	jmp    c0013341 <CPU::detectFeatures()+0x955>
c00131e9:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c00131ef:	66 f7 c1 80 ff       	test   cx,0xff80
c00131f4:	75 0c                	jne    c0013202 <CPU::detectFeatures()+0x816>
c00131f6:	50                   	push   eax
c00131f7:	50                   	push   eax
c00131f8:	68 f8 55 02 c0       	push   0xc00255f8
c00131fd:	e9 3f 01 00 00       	jmp    c0013341 <CPU::detectFeatures()+0x955>
c0013202:	66 81 fa 40 02       	cmp    dx,0x240
c0013207:	75 0c                	jne    c0013215 <CPU::detectFeatures()+0x829>
c0013209:	55                   	push   ebp
c001320a:	55                   	push   ebp
c001320b:	68 ff 55 02 c0       	push   0xc00255ff
c0013210:	e9 2c 01 00 00       	jmp    c0013341 <CPU::detectFeatures()+0x955>
c0013215:	66 81 fa 80 02       	cmp    dx,0x280
c001321a:	75 0c                	jne    c0013228 <CPU::detectFeatures()+0x83c>
c001321c:	57                   	push   edi
c001321d:	57                   	push   edi
c001321e:	68 08 56 02 c0       	push   0xc0025608
c0013223:	e9 19 01 00 00       	jmp    c0013341 <CPU::detectFeatures()+0x955>
c0013228:	66 81 fa 40 03       	cmp    dx,0x340
c001322d:	74 ed                	je     c001321c <CPU::detectFeatures()+0x830>
c001322f:	66 81 fa c0 03       	cmp    dx,0x3c0
c0013234:	75 0c                	jne    c0013242 <CPU::detectFeatures()+0x856>
c0013236:	56                   	push   esi
c0013237:	56                   	push   esi
c0013238:	68 0f 56 02 c0       	push   0xc002560f
c001323d:	e9 ff 00 00 00       	jmp    c0013341 <CPU::detectFeatures()+0x955>
c0013242:	83 f8 06             	cmp    eax,0x6
c0013245:	0f 84 45 ff ff ff    	je     c0013190 <CPU::detectFeatures()+0x7a4>
c001324b:	83 f8 04             	cmp    eax,0x4
c001324e:	0f 84 4d ff ff ff    	je     c00131a1 <CPU::detectFeatures()+0x7b5>
c0013254:	83 f8 03             	cmp    eax,0x3
c0013257:	0f 85 72 01 00 00    	jne    c00133cf <CPU::detectFeatures()+0x9e3>
c001325d:	51                   	push   ecx
c001325e:	51                   	push   ecx
c001325f:	68 18 56 02 c0       	push   0xc0025618
c0013264:	53                   	push   ebx
c0013265:	e8 02 b4 ff ff       	call   c000e66c <Device::setName(char const*)>
c001326a:	b1 c1                	mov    cl,0xc1
c001326c:	88 c8                	mov    al,cl
c001326e:	e6 22                	out    0x22,al
c0013270:	e4 23                	in     al,0x23
c0013272:	88 c2                	mov    dl,al
c0013274:	88 c8                	mov    al,cl
c0013276:	e6 22                	out    0x22,al
c0013278:	88 d0                	mov    al,dl
c001327a:	83 c8 10             	or     eax,0x10
c001327d:	e6 23                	out    0x23,al
c001327f:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0013286:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0013289:	89 d0                	mov    eax,edx
c001328b:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0013291:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0013295:	40                   	inc    eax
c0013296:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001329c:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00132a1:	e9 a1 00 00 00       	jmp    c0013347 <CPU::detectFeatures()+0x95b>
c00132a6:	83 f8 06             	cmp    eax,0x6
c00132a9:	0f 84 e1 fe ff ff    	je     c0013190 <CPU::detectFeatures()+0x7a4>
c00132af:	83 f8 04             	cmp    eax,0x4
c00132b2:	0f 84 e9 fe ff ff    	je     c00131a1 <CPU::detectFeatures()+0x7b5>
c00132b8:	83 f8 03             	cmp    eax,0x3
c00132bb:	0f 85 0e 01 00 00    	jne    c00133cf <CPU::detectFeatures()+0x9e3>
c00132c1:	52                   	push   edx
c00132c2:	52                   	push   edx
c00132c3:	68 23 56 02 c0       	push   0xc0025623
c00132c8:	eb 77                	jmp    c0013341 <CPU::detectFeatures()+0x955>
c00132ca:	83 f8 07             	cmp    eax,0x7
c00132cd:	75 09                	jne    c00132d8 <CPU::detectFeatures()+0x8ec>
c00132cf:	50                   	push   eax
c00132d0:	50                   	push   eax
c00132d1:	68 2d 56 02 c0       	push   0xc002562d
c00132d6:	eb 69                	jmp    c0013341 <CPU::detectFeatures()+0x955>
c00132d8:	83 f8 0a             	cmp    eax,0xa
c00132db:	75 09                	jne    c00132e6 <CPU::detectFeatures()+0x8fa>
c00132dd:	50                   	push   eax
c00132de:	50                   	push   eax
c00132df:	68 38 56 02 c0       	push   0xc0025638
c00132e4:	eb 5b                	jmp    c0013341 <CPU::detectFeatures()+0x955>
c00132e6:	83 f8 0b             	cmp    eax,0xb
c00132e9:	75 09                	jne    c00132f4 <CPU::detectFeatures()+0x908>
c00132eb:	50                   	push   eax
c00132ec:	50                   	push   eax
c00132ed:	68 40 56 02 c0       	push   0xc0025640
c00132f2:	eb 4d                	jmp    c0013341 <CPU::detectFeatures()+0x955>
c00132f4:	83 f8 08             	cmp    eax,0x8
c00132f7:	75 09                	jne    c0013302 <CPU::detectFeatures()+0x916>
c00132f9:	50                   	push   eax
c00132fa:	50                   	push   eax
c00132fb:	68 49 56 02 c0       	push   0xc0025649
c0013300:	eb 3f                	jmp    c0013341 <CPU::detectFeatures()+0x955>
c0013302:	83 f8 09             	cmp    eax,0x9
c0013305:	75 09                	jne    c0013310 <CPU::detectFeatures()+0x924>
c0013307:	50                   	push   eax
c0013308:	50                   	push   eax
c0013309:	68 51 56 02 c0       	push   0xc0025651
c001330e:	eb 31                	jmp    c0013341 <CPU::detectFeatures()+0x955>
c0013310:	83 f8 05             	cmp    eax,0x5
c0013313:	75 09                	jne    c001331e <CPU::detectFeatures()+0x932>
c0013315:	50                   	push   eax
c0013316:	50                   	push   eax
c0013317:	68 59 56 02 c0       	push   0xc0025659
c001331c:	eb 23                	jmp    c0013341 <CPU::detectFeatures()+0x955>
c001331e:	83 f8 0c             	cmp    eax,0xc
c0013321:	75 09                	jne    c001332c <CPU::detectFeatures()+0x940>
c0013323:	55                   	push   ebp
c0013324:	55                   	push   ebp
c0013325:	68 67 56 02 c0       	push   0xc0025667
c001332a:	eb 15                	jmp    c0013341 <CPU::detectFeatures()+0x955>
c001332c:	83 f8 0d             	cmp    eax,0xd
c001332f:	75 09                	jne    c001333a <CPU::detectFeatures()+0x94e>
c0013331:	57                   	push   edi
c0013332:	57                   	push   edi
c0013333:	68 72 56 02 c0       	push   0xc0025672
c0013338:	eb 07                	jmp    c0013341 <CPU::detectFeatures()+0x955>
c001333a:	56                   	push   esi
c001333b:	56                   	push   esi
c001333c:	68 86 56 02 c0       	push   0xc0025686
c0013341:	53                   	push   ebx
c0013342:	e8 25 b3 ff ff       	call   c000e66c <Device::setName(char const*)>
c0013347:	83 c4 10             	add    esp,0x10
c001334a:	e9 80 00 00 00       	jmp    c00133cf <CPU::detectFeatures()+0x9e3>
c001334f:	51                   	push   ecx
c0013350:	51                   	push   ecx
c0013351:	68 d2 54 02 c0       	push   0xc00254d2
c0013356:	55                   	push   ebp
c0013357:	e8 dc d3 fe ff       	call   c0000738 <strcpy>
c001335c:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0013366:	e8 78 ce fe ff       	call   c00001e3 <is486>
c001336b:	83 c4 10             	add    esp,0x10
c001336e:	85 c0                	test   eax,eax
c0013370:	74 2b                	je     c001339d <CPU::detectFeatures()+0x9b1>
c0013372:	52                   	push   edx
c0013373:	52                   	push   edx
c0013374:	68 92 56 02 c0       	push   0xc0025692
c0013379:	53                   	push   ebx
c001337a:	e8 ed b2 ff ff       	call   c000e66c <Device::setName(char const*)>
c001337f:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0013386:	0f 20 c0             	mov    eax,cr0
c0013389:	83 e0 14             	and    eax,0x14
c001338c:	83 c4 10             	add    esp,0x10
c001338f:	83 f8 04             	cmp    eax,0x4
c0013392:	75 1f                	jne    c00133b3 <CPU::detectFeatures()+0x9c7>
c0013394:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c001339b:	eb 32                	jmp    c00133cf <CPU::detectFeatures()+0x9e3>
c001339d:	50                   	push   eax
c001339e:	50                   	push   eax
c001339f:	68 9d 56 02 c0       	push   0xc002569d
c00133a4:	53                   	push   ebx
c00133a5:	e8 c2 b2 ff ff       	call   c000e66c <Device::setName(char const*)>
c00133aa:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c00133b1:	eb d3                	jmp    c0013386 <CPU::detectFeatures()+0x99a>
c00133b3:	e8 06 ce fe ff       	call   c00001be <hasLegacyFPU>
c00133b8:	83 e0 01             	and    eax,0x1
c00133bb:	8d 14 00             	lea    edx,[eax+eax*1]
c00133be:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00133c4:	83 e0 fd             	and    eax,0xfffffffd
c00133c7:	09 d0                	or     eax,edx
c00133c9:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00133cf:	f6 83 92 11 00 00 02 	test   BYTE PTR [ebx+0x1192],0x2
c00133d6:	74 0e                	je     c00133e6 <CPU::detectFeatures()+0x9fa>
c00133d8:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c00133dd:	80 88 e8 01 00 00 10 	or     BYTE PTR [eax+0x1e8],0x10
c00133e4:	eb 20                	jmp    c0013406 <CPU::detectFeatures()+0xa1a>
c00133e6:	e8 d3 cd fe ff       	call   c00001be <hasLegacyFPU>
c00133eb:	83 e0 01             	and    eax,0x1
c00133ee:	8d 14 00             	lea    edx,[eax+eax*1]
c00133f1:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00133f7:	83 e0 fd             	and    eax,0xfffffffd
c00133fa:	09 d0                	or     eax,edx
c00133fc:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0013402:	a8 02                	test   al,0x2
c0013404:	75 d2                	jne    c00133d8 <CPU::detectFeatures()+0x9ec>
c0013406:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c001340d:	83 c4 4c             	add    esp,0x4c
c0013410:	5b                   	pop    ebx
c0013411:	5e                   	pop    esi
c0013412:	5f                   	pop    edi
c0013413:	5d                   	pop    ebp
c0013414:	c3                   	ret    
c0013415:	90                   	nop

c0013416 <CPU::setupSMEP()>:
c0013416:	0f 20 e0             	mov    eax,cr4
c0013419:	0d 00 00 10 00       	or     eax,0x100000
c001341e:	0f 22 e0             	mov    cr4,eax
c0013421:	c3                   	ret    

c0013422 <CPU::setupUMIP()>:
c0013422:	0f 20 e0             	mov    eax,cr4
c0013425:	80 cc 08             	or     ah,0x8
c0013428:	0f 22 e0             	mov    cr4,eax
c001342b:	c3                   	ret    

c001342c <CPU::setupTSC()>:
c001342c:	0f 20 e0             	mov    eax,cr4
c001342f:	83 c8 04             	or     eax,0x4
c0013432:	0f 22 e0             	mov    cr4,eax
c0013435:	c3                   	ret    

c0013436 <CPU::setupLargePages()>:
c0013436:	0f 20 e0             	mov    eax,cr4
c0013439:	83 c8 10             	or     eax,0x10
c001343c:	0f 22 e0             	mov    cr4,eax
c001343f:	c3                   	ret    

c0013440 <CPU::setupPAT()>:
c0013440:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c0013445:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c001344c:	74 2c                	je     c001347a <CPU::setupPAT()+0x3a>
c001344e:	53                   	push   ebx
c001344f:	83 ec 10             	sub    esp,0x10
c0013452:	68 77 02 00 00       	push   0x277
c0013457:	50                   	push   eax
c0013458:	e8 09 5e ff ff       	call   c0009266 <Computer::rdmsr(unsigned int)>
c001345d:	83 e2 f8             	and    edx,0xfffffff8
c0013460:	83 ca 01             	or     edx,0x1
c0013463:	52                   	push   edx
c0013464:	50                   	push   eax
c0013465:	68 77 02 00 00       	push   0x277
c001346a:	ff 35 08 7f 02 c0    	push   DWORD PTR ds:0xc0027f08
c0013470:	e8 1d 5e ff ff       	call   c0009292 <Computer::wrmsr(unsigned int, unsigned long long)>
c0013475:	83 c4 28             	add    esp,0x28
c0013478:	5b                   	pop    ebx
c0013479:	c3                   	ret    
c001347a:	c3                   	ret    
c001347b:	90                   	nop

c001347c <CPU::setupMTRR()>:
c001347c:	c3                   	ret    
c001347d:	90                   	nop

c001347e <CPU::setupGlobalPages()>:
c001347e:	0f 20 e0             	mov    eax,cr4
c0013481:	0c 80                	or     al,0x80
c0013483:	0f 22 e0             	mov    cr4,eax
c0013486:	c3                   	ret    
c0013487:	90                   	nop

c0013488 <CPU::allowUsermodeDataAccess()>:
c0013488:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001348c:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0013493:	74 03                	je     c0013498 <CPU::allowUsermodeDataAccess()+0x10>
c0013495:	0f 01 cb             	stac   
c0013498:	c3                   	ret    
c0013499:	90                   	nop

c001349a <CPU::prohibitUsermodeDataAccess()>:
c001349a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001349e:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00134a5:	74 03                	je     c00134aa <CPU::prohibitUsermodeDataAccess()+0x10>
c00134a7:	0f 01 ca             	clac   
c00134aa:	c3                   	ret    
c00134ab:	90                   	nop

c00134ac <CPU::setupSMAP()>:
c00134ac:	0f 20 e0             	mov    eax,cr4
c00134af:	0d 00 00 20 00       	or     eax,0x200000
c00134b4:	0f 22 e0             	mov    cr4,eax
c00134b7:	eb e1                	jmp    c001349a <CPU::prohibitUsermodeDataAccess()>
c00134b9:	90                   	nop

c00134ba <CPU::setupFeatures()>:
c00134ba:	53                   	push   ebx
c00134bb:	83 ec 08             	sub    esp,0x8
c00134be:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00134c2:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c00134c9:	74 18                	je     c00134e3 <CPU::setupFeatures()+0x29>
c00134cb:	83 ec 0c             	sub    esp,0xc
c00134ce:	68 a8 56 02 c0       	push   0xc00256a8
c00134d3:	e8 ed 9a ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00134d8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00134db:	e8 42 ff ff ff       	call   c0013422 <CPU::setupUMIP()>
c00134e0:	83 c4 10             	add    esp,0x10
c00134e3:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c00134ea:	74 18                	je     c0013504 <CPU::setupFeatures()+0x4a>
c00134ec:	83 ec 0c             	sub    esp,0xc
c00134ef:	68 b2 56 02 c0       	push   0xc00256b2
c00134f4:	e8 cc 9a ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00134f9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00134fc:	e8 2b ff ff ff       	call   c001342c <CPU::setupTSC()>
c0013501:	83 c4 10             	add    esp,0x10
c0013504:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c001350b:	74 18                	je     c0013525 <CPU::setupFeatures()+0x6b>
c001350d:	83 ec 0c             	sub    esp,0xc
c0013510:	68 bb 56 02 c0       	push   0xc00256bb
c0013515:	e8 ab 9a ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001351a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001351d:	e8 14 ff ff ff       	call   c0013436 <CPU::setupLargePages()>
c0013522:	83 c4 10             	add    esp,0x10
c0013525:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c001352c:	74 18                	je     c0013546 <CPU::setupFeatures()+0x8c>
c001352e:	83 ec 0c             	sub    esp,0xc
c0013531:	68 c4 56 02 c0       	push   0xc00256c4
c0013536:	e8 8a 9a ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001353b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001353e:	e8 3b ff ff ff       	call   c001347e <CPU::setupGlobalPages()>
c0013543:	83 c4 10             	add    esp,0x10
c0013546:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c001354d:	74 18                	je     c0013567 <CPU::setupFeatures()+0xad>
c001354f:	83 ec 0c             	sub    esp,0xc
c0013552:	68 d6 56 02 c0       	push   0xc00256d6
c0013557:	e8 69 9a ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001355c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001355f:	e8 dc fe ff ff       	call   c0013440 <CPU::setupPAT()>
c0013564:	83 c4 10             	add    esp,0x10
c0013567:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c001356e:	74 11                	je     c0013581 <CPU::setupFeatures()+0xc7>
c0013570:	c7 44 24 10 df 56 02 c0 	mov    DWORD PTR [esp+0x10],0xc00256df
c0013578:	83 c4 08             	add    esp,0x8
c001357b:	5b                   	pop    ebx
c001357c:	e9 44 9a ff ff       	jmp    c000cfc5 <Dbg::kprintf(char const*, ...)>
c0013581:	83 c4 08             	add    esp,0x8
c0013584:	5b                   	pop    ebx
c0013585:	c3                   	ret    

c0013586 <CPU::open(int, int, void*)>:
c0013586:	57                   	push   edi
c0013587:	56                   	push   esi
c0013588:	53                   	push   ebx
c0013589:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001358d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013591:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0013597:	83 ec 0c             	sub    esp,0xc
c001359a:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c00135a0:	68 e9 56 02 c0       	push   0xc00256e9
c00135a5:	e8 67 67 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c00135aa:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c00135b0:	89 04 24             	mov    DWORD PTR [esp],eax
c00135b3:	e8 d4 5f ff ff       	call   c000958c <GDT::setup()>
c00135b8:	c7 04 24 fb 56 02 c0 	mov    DWORD PTR [esp],0xc00256fb
c00135bf:	e8 4d 67 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c00135c4:	83 c4 0c             	add    esp,0xc
c00135c7:	6a 00                	push   0x0
c00135c9:	68 ef be ad de       	push   0xdeadbeef
c00135ce:	57                   	push   edi
c00135cf:	e8 1c 80 ff ff       	call   c000b5f0 <TSS::setup(unsigned long, unsigned long)>
c00135d4:	c7 04 24 0d 57 02 c0 	mov    DWORD PTR [esp],0xc002570d
c00135db:	e8 31 67 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c00135e0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00135e3:	e8 e8 7f ff ff       	call   c000b5d0 <TSS::flush()>
c00135e8:	c7 04 24 21 57 02 c0 	mov    DWORD PTR [esp],0xc0025721
c00135ef:	e8 1d 67 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c00135f4:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00135fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00135fd:	e8 18 62 ff ff       	call   c000981a <IDT::setup()>
c0013602:	c7 04 24 33 57 02 c0 	mov    DWORD PTR [esp],0xc0025733
c0013609:	e8 03 67 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001360e:	b8 00 04 00 00       	mov    eax,0x400
c0013613:	0f 23 f8             	mov    db7,eax
c0013616:	c7 04 24 51 57 02 c0 	mov    DWORD PTR [esp],0xc0025751
c001361d:	e8 ef 66 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0013622:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c001362c:	e8 3d 6d ff ff       	call   c000a36e <Phys::allocatePage()>
c0013631:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0013637:	89 30                	mov    DWORD PTR [eax],esi
c0013639:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001363f:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0013642:	c7 04 24 73 57 02 c0 	mov    DWORD PTR [esp],0xc0025773
c0013649:	e8 c3 66 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001364e:	58                   	pop    eax
c001364f:	5a                   	pop    edx
c0013650:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0013656:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001365a:	e8 51 8f ff ff       	call   c000c5b0 <VAS::setCPUSpecific(unsigned long)>
c001365f:	c7 04 24 9b 57 02 c0 	mov    DWORD PTR [esp],0xc002579b
c0013666:	e8 a6 66 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001366b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001366e:	e8 79 f3 ff ff       	call   c00129ec <CPU::detectFeatures()>
c0013673:	c7 04 24 be 57 02 c0 	mov    DWORD PTR [esp],0xc00257be
c001367a:	e8 92 66 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001367f:	e8 b1 74 00 00       	call   c001ab35 <Hal::initialise()>
c0013684:	c7 04 24 d2 57 02 c0 	mov    DWORD PTR [esp],0xc00257d2
c001368b:	e8 81 66 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0013690:	a1 20 7f 02 c0       	mov    eax,ds:0xc0027f20
c0013695:	83 e0 10             	and    eax,0x10
c0013698:	83 f8 01             	cmp    eax,0x1
c001369b:	19 c0                	sbb    eax,eax
c001369d:	83 e0 46             	and    eax,0x46
c00136a0:	83 c0 1e             	add    eax,0x1e
c00136a3:	89 04 24             	mov    DWORD PTR [esp],eax
c00136a6:	e8 f1 c8 ff ff       	call   c000ff9c <setupTimer(int)>
c00136ab:	83 c4 10             	add    esp,0x10
c00136ae:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c00136b4:	f6 05 20 7f 02 c0 20 	test   BYTE PTR ds:0xc0027f20,0x20
c00136bb:	74 18                	je     c00136d5 <CPU::open(int, int, void*)+0x14f>
c00136bd:	83 ec 0c             	sub    esp,0xc
c00136c0:	68 ed 57 02 c0       	push   0xc00257ed
c00136c5:	e8 47 66 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c00136ca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00136cd:	e8 e8 fd ff ff       	call   c00134ba <CPU::setupFeatures()>
c00136d2:	83 c4 10             	add    esp,0x10
c00136d5:	83 ec 0c             	sub    esp,0xc
c00136d8:	68 08 58 02 c0       	push   0xc0025808
c00136dd:	e8 2f 66 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c00136e2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00136e5:	e8 62 f0 ff ff       	call   c001274c <CPU::displayFeatures()>
c00136ea:	83 c4 10             	add    esp,0x10
c00136ed:	31 c0                	xor    eax,eax
c00136ef:	5b                   	pop    ebx
c00136f0:	5e                   	pop    esi
c00136f1:	5f                   	pop    edi
c00136f2:	c3                   	ret    
c00136f3:	90                   	nop

c00136f4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c00136f4:	57                   	push   edi
c00136f5:	56                   	push   esi
c00136f6:	53                   	push   ebx
c00136f7:	51                   	push   ecx
c00136f8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00136fc:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c00136ff:	0f 02 c0             	lar    eax,ax
c0013702:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0013705:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013709:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c001370c:	88 ca                	mov    dl,cl
c001370e:	c0 ea 06             	shr    dl,0x6
c0013711:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0013715:	89 ca                	mov    edx,ecx
c0013717:	66 c1 ea 03          	shr    dx,0x3
c001371b:	83 e2 07             	and    edx,0x7
c001371e:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0013723:	88 17                	mov    BYTE PTR [edi],dl
c0013725:	0f 84 a6 01 00 00    	je     c00138d1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c001372b:	83 e1 07             	and    ecx,0x7
c001372e:	80 f9 04             	cmp    cl,0x4
c0013731:	0f 84 98 00 00 00    	je     c00137cf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0013737:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001373c:	0f 95 c0             	setne  al
c001373f:	80 f9 05             	cmp    cl,0x5
c0013742:	0f 95 c2             	setne  dl
c0013745:	08 c2                	or     dl,al
c0013747:	74 79                	je     c00137c2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0013749:	84 c9                	test   cl,cl
c001374b:	75 05                	jne    c0013752 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c001374d:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0013750:	eb 3c                	jmp    c001378e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013752:	80 f9 01             	cmp    cl,0x1
c0013755:	75 05                	jne    c001375c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0013757:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001375a:	eb 32                	jmp    c001378e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001375c:	80 f9 02             	cmp    cl,0x2
c001375f:	75 05                	jne    c0013766 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0013761:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0013764:	eb 28                	jmp    c001378e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013766:	31 c0                	xor    eax,eax
c0013768:	80 f9 03             	cmp    cl,0x3
c001376b:	75 05                	jne    c0013772 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c001376d:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0013770:	eb 1c                	jmp    c001378e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013772:	80 f9 05             	cmp    cl,0x5
c0013775:	75 05                	jne    c001377c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0013777:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c001377a:	eb 12                	jmp    c001378e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001377c:	80 f9 06             	cmp    cl,0x6
c001377f:	75 05                	jne    c0013786 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0013781:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013784:	eb 08                	jmp    c001378e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013786:	80 f9 07             	cmp    cl,0x7
c0013789:	75 03                	jne    c001378e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001378b:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001378e:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0013793:	75 10                	jne    c00137a5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0013795:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0013799:	b9 03 00 00 00       	mov    ecx,0x3
c001379e:	01 d0                	add    eax,edx
c00137a0:	e9 37 01 00 00       	jmp    c00138dc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00137a5:	b9 02 00 00 00       	mov    ecx,0x2
c00137aa:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c00137af:	0f 85 27 01 00 00    	jne    c00138dc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00137b5:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c00137b8:	b9 06 00 00 00       	mov    ecx,0x6
c00137bd:	e9 1a 01 00 00       	jmp    c00138dc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00137c2:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c00137c5:	b9 06 00 00 00       	mov    ecx,0x6
c00137ca:	e9 0f 01 00 00       	jmp    c00138de <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00137cf:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c00137d2:	88 ca                	mov    dl,cl
c00137d4:	c0 ea 06             	shr    dl,0x6
c00137d7:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c00137db:	89 ca                	mov    edx,ecx
c00137dd:	66 c1 ea 03          	shr    dx,0x3
c00137e1:	83 e2 07             	and    edx,0x7
c00137e4:	80 e1 07             	and    cl,0x7
c00137e7:	75 05                	jne    c00137ee <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c00137e9:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c00137ec:	eb 4c                	jmp    c001383a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00137ee:	80 f9 01             	cmp    cl,0x1
c00137f1:	75 05                	jne    c00137f8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c00137f3:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c00137f6:	eb 42                	jmp    c001383a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00137f8:	80 f9 02             	cmp    cl,0x2
c00137fb:	75 05                	jne    c0013802 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c00137fd:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0013800:	eb 38                	jmp    c001383a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013802:	80 f9 03             	cmp    cl,0x3
c0013805:	75 05                	jne    c001380c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0013807:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001380a:	eb 2e                	jmp    c001383a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001380c:	80 f9 04             	cmp    cl,0x4
c001380f:	75 12                	jne    c0013823 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0013811:	f6 c4 60             	test   ah,0x60
c0013814:	75 08                	jne    c001381e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0013816:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0013819:	8d 78 14             	lea    edi,[eax+0x14]
c001381c:	eb 1c                	jmp    c001383a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001381e:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0013821:	eb 17                	jmp    c001383a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013823:	80 f9 05             	cmp    cl,0x5
c0013826:	75 05                	jne    c001382d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0013828:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c001382b:	eb 0d                	jmp    c001383a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001382d:	80 f9 06             	cmp    cl,0x6
c0013830:	75 05                	jne    c0013837 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0013832:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0013835:	eb 03                	jmp    c001383a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013837:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001383a:	84 d2                	test   dl,dl
c001383c:	75 05                	jne    c0013843 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c001383e:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0013841:	eb 3c                	jmp    c001387f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013843:	80 fa 01             	cmp    dl,0x1
c0013846:	75 05                	jne    c001384d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0013848:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001384b:	eb 32                	jmp    c001387f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001384d:	80 fa 02             	cmp    dl,0x2
c0013850:	75 05                	jne    c0013857 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0013852:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0013855:	eb 28                	jmp    c001387f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013857:	80 fa 03             	cmp    dl,0x3
c001385a:	75 05                	jne    c0013861 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c001385c:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001385f:	eb 1e                	jmp    c001387f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013861:	31 c0                	xor    eax,eax
c0013863:	80 fa 04             	cmp    dl,0x4
c0013866:	74 17                	je     c001387f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013868:	80 fa 05             	cmp    dl,0x5
c001386b:	75 05                	jne    c0013872 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c001386d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0013870:	eb 0d                	jmp    c001387f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013872:	80 fa 06             	cmp    dl,0x6
c0013875:	75 05                	jne    c001387c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0013877:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001387a:	eb 03                	jmp    c001387f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001387c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001387f:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0013884:	0f 94 c2             	sete   dl
c0013887:	80 f9 05             	cmp    cl,0x5
c001388a:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c001388e:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0013893:	d3 e0                	shl    eax,cl
c0013895:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0013899:	74 0a                	je     c00138a5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c001389b:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001389e:	b9 07 00 00 00       	mov    ecx,0x7
c00138a3:	eb 37                	jmp    c00138dc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00138a5:	01 f8                	add    eax,edi
c00138a7:	b9 03 00 00 00       	mov    ecx,0x3
c00138ac:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00138b1:	74 2b                	je     c00138de <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00138b3:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00138b8:	75 0d                	jne    c00138c7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c00138ba:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c00138be:	01 c8                	add    eax,ecx
c00138c0:	b9 04 00 00 00       	mov    ecx,0x4
c00138c5:	eb 17                	jmp    c00138de <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00138c7:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00138ca:	b9 07 00 00 00       	mov    ecx,0x7
c00138cf:	eb 0d                	jmp    c00138de <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00138d1:	b9 02 00 00 00       	mov    ecx,0x2
c00138d6:	b2 01                	mov    dl,0x1
c00138d8:	31 c0                	xor    eax,eax
c00138da:	eb 02                	jmp    c00138de <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00138dc:	31 d2                	xor    edx,edx
c00138de:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00138e2:	89 0b                	mov    DWORD PTR [ebx],ecx
c00138e4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00138e8:	88 11                	mov    BYTE PTR [ecx],dl
c00138ea:	5a                   	pop    edx
c00138eb:	5b                   	pop    ebx
c00138ec:	5e                   	pop    esi
c00138ed:	5f                   	pop    edi
c00138ee:	c3                   	ret    

c00138ef <Krnl::smpEntry()>:
c00138ef:	eb fe                	jmp    c00138ef <Krnl::smpEntry()>

c00138f1 <Krnl::startCPU(int)>:
c00138f1:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c00138f6:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00138fd:	0f 84 36 01 00 00    	je     c0013a39 <Krnl::startCPU(int)+0x148>
c0013903:	53                   	push   ebx
c0013904:	83 ec 10             	sub    esp,0x10
c0013907:	fa                   	cli    
c0013908:	ff 05 28 94 02 c0    	inc    DWORD PTR ds:0xc0029428
c001390e:	6a 1b                	push   0x1b
c0013910:	ff 35 08 7f 02 c0    	push   DWORD PTR ds:0xc0027f08
c0013916:	e8 4b 59 ff ff       	call   c0009266 <Computer::rdmsr(unsigned int)>
c001391b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013920:	89 c3                	mov    ebx,eax
c0013922:	58                   	pop    eax
c0013923:	5a                   	pop    edx
c0013924:	53                   	push   ebx
c0013925:	68 50 58 02 c0       	push   0xc0025850
c001392a:	e8 96 96 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001392f:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0013939:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001393d:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0013947:	c1 e0 18             	shl    eax,0x18
c001394a:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0013950:	83 c4 10             	add    esp,0x10
c0013953:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0013959:	09 c2                	or     edx,eax
c001395b:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0013961:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0013967:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001396d:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0013973:	80 cd c5             	or     ch,0xc5
c0013976:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001397c:	f3 90                	pause  
c001397e:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0013980:	0f ba e1 0c          	bt     ecx,0xc
c0013984:	72 f6                	jb     c001397c <Krnl::startCPU(int)+0x8b>
c0013986:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001398c:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0013992:	09 c1                	or     ecx,eax
c0013994:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001399a:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c00139a0:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c00139a6:	80 cd 85             	or     ch,0x85
c00139a9:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c00139af:	f3 90                	pause  
c00139b1:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00139b3:	0f ba e1 0c          	bt     ecx,0xc
c00139b7:	72 f6                	jb     c00139af <Krnl::startCPU(int)+0xbe>
c00139b9:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c00139c3:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c00139c9:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c00139cf:	09 c1                	or     ecx,eax
c00139d1:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c00139d7:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c00139dd:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c00139e3:	81 c9 02 06 00 00    	or     ecx,0x602
c00139e9:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c00139ef:	f3 90                	pause  
c00139f1:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00139f3:	0f ba e1 0c          	bt     ecx,0xc
c00139f7:	72 f6                	jb     c00139ef <Krnl::startCPU(int)+0xfe>
c00139f9:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0013a03:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0013a09:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0013a0f:	09 c8                	or     eax,ecx
c0013a11:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0013a17:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0013a1d:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0013a22:	0d 02 06 00 00       	or     eax,0x602
c0013a27:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0013a2d:	f3 90                	pause  
c0013a2f:	8b 02                	mov    eax,DWORD PTR [edx]
c0013a31:	0f ba e0 0c          	bt     eax,0xc
c0013a35:	72 f6                	jb     c0013a2d <Krnl::startCPU(int)+0x13c>
c0013a37:	eb fe                	jmp    c0013a37 <Krnl::startCPU(int)+0x146>
c0013a39:	c3                   	ret    

c0013a3a <Krnl::startCPUs()>:
c0013a3a:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c0013a3f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013a45:	88 c2                	mov    dl,al
c0013a47:	83 e2 0a             	and    edx,0xa
c0013a4a:	80 fa 0a             	cmp    dl,0xa
c0013a4d:	75 09                	jne    c0013a58 <Krnl::startCPUs()+0x1e>
c0013a4f:	a8 01                	test   al,0x1
c0013a51:	74 05                	je     c0013a58 <Krnl::startCPUs()+0x1e>
c0013a53:	e9 43 c7 fe ff       	jmp    c000019b <prepareTramp>
c0013a58:	c3                   	ret    
c0013a59:	90                   	nop

c0013a5a <EnvVarContainer::getEnv(char const*)>:
c0013a5a:	57                   	push   edi
c0013a5b:	56                   	push   esi
c0013a5c:	53                   	push   ebx
c0013a5d:	31 db                	xor    ebx,ebx
c0013a5f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013a63:	39 1e                	cmp    DWORD PTR [esi],ebx
c0013a65:	7e 2b                	jle    c0013a92 <EnvVarContainer::getEnv(char const*)+0x38>
c0013a67:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0013a6e:	50                   	push   eax
c0013a6f:	50                   	push   eax
c0013a70:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013a73:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0013a76:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013a7a:	e8 45 cd fe ff       	call   c00007c4 <strcmp>
c0013a7f:	83 c4 10             	add    esp,0x10
c0013a82:	85 c0                	test   eax,eax
c0013a84:	75 09                	jne    c0013a8f <EnvVarContainer::getEnv(char const*)+0x35>
c0013a86:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013a89:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0013a8d:	eb 05                	jmp    c0013a94 <EnvVarContainer::getEnv(char const*)+0x3a>
c0013a8f:	43                   	inc    ebx
c0013a90:	eb d1                	jmp    c0013a63 <EnvVarContainer::getEnv(char const*)+0x9>
c0013a92:	31 c0                	xor    eax,eax
c0013a94:	5b                   	pop    ebx
c0013a95:	5e                   	pop    esi
c0013a96:	5f                   	pop    edi
c0013a97:	c3                   	ret    

c0013a98 <EnvVarContainer::setEnv(char const*, char const*)>:
c0013a98:	55                   	push   ebp
c0013a99:	57                   	push   edi
c0013a9a:	56                   	push   esi
c0013a9b:	53                   	push   ebx
c0013a9c:	83 ec 28             	sub    esp,0x28
c0013a9f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0013aa3:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0013aa7:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0013aab:	56                   	push   esi
c0013aac:	e8 e7 cb fe ff       	call   c0000698 <strlen>
c0013ab1:	40                   	inc    eax
c0013ab2:	89 04 24             	mov    DWORD PTR [esp],eax
c0013ab5:	e8 fd 61 ff ff       	call   c0009cb7 <malloc>
c0013aba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013abd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013ac1:	e8 d2 cb fe ff       	call   c0000698 <strlen>
c0013ac6:	40                   	inc    eax
c0013ac7:	89 04 24             	mov    DWORD PTR [esp],eax
c0013aca:	e8 e8 61 ff ff       	call   c0009cb7 <malloc>
c0013acf:	89 34 24             	mov    DWORD PTR [esp],esi
c0013ad2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013ad6:	e8 bd cb fe ff       	call   c0000698 <strlen>
c0013adb:	83 c4 0c             	add    esp,0xc
c0013ade:	40                   	inc    eax
c0013adf:	50                   	push   eax
c0013ae0:	6a 00                	push   0x0
c0013ae2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013ae6:	e8 91 cb fe ff       	call   c000067c <memset>
c0013aeb:	89 34 24             	mov    DWORD PTR [esp],esi
c0013aee:	e8 a5 cb fe ff       	call   c0000698 <strlen>
c0013af3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013af7:	8d 48 01             	lea    ecx,[eax+0x1]
c0013afa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013afc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013aff:	89 de                	mov    esi,ebx
c0013b01:	e8 92 cb fe ff       	call   c0000698 <strlen>
c0013b06:	83 c4 0c             	add    esp,0xc
c0013b09:	40                   	inc    eax
c0013b0a:	50                   	push   eax
c0013b0b:	6a 00                	push   0x0
c0013b0d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013b11:	e8 66 cb fe ff       	call   c000067c <memset>
c0013b16:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013b19:	e8 7a cb fe ff       	call   c0000698 <strlen>
c0013b1e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013b22:	8d 48 01             	lea    ecx,[eax+0x1]
c0013b25:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013b27:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013b2a:	40                   	inc    eax
c0013b2b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0013b2e:	c1 e0 03             	shl    eax,0x3
c0013b31:	5a                   	pop    edx
c0013b32:	59                   	pop    ecx
c0013b33:	50                   	push   eax
c0013b34:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0013b37:	e8 67 61 ff ff       	call   c0009ca3 <realloc>
c0013b3c:	8d 74 24 18          	lea    esi,[esp+0x18]
c0013b40:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0013b43:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0013b46:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0013b4a:	b9 08 00 00 00       	mov    ecx,0x8
c0013b4f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013b51:	83 c4 2c             	add    esp,0x2c
c0013b54:	5b                   	pop    ebx
c0013b55:	5e                   	pop    esi
c0013b56:	5f                   	pop    edi
c0013b57:	5d                   	pop    ebp
c0013b58:	c3                   	ret    
c0013b59:	90                   	nop

c0013b5a <EnvVarContainer::deleteEnv(char const*)>:
c0013b5a:	c3                   	ret    
c0013b5b:	90                   	nop

c0013b5c <EnvVarContainer::loadFrom(char const*, char const*)>:
c0013b5c:	55                   	push   ebp
c0013b5d:	57                   	push   edi
c0013b5e:	56                   	push   esi
c0013b5f:	53                   	push   ebx
c0013b60:	81 ec 38 01 00 00    	sub    esp,0x138
c0013b66:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0013b6d:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0013b74:	68 14 01 00 00       	push   0x114
c0013b79:	e8 39 61 ff ff       	call   c0009cb7 <malloc>
c0013b7e:	83 c4 0c             	add    esp,0xc
c0013b81:	89 c3                	mov    ebx,eax
c0013b83:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0013b86:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0013b8d:	50                   	push   eax
c0013b8e:	e8 9d 99 ff ff       	call   c000d530 <File::File(char const*, Process*)>
c0013b93:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013b96:	e8 dd 9c ff ff       	call   c000d878 <File::exists()>
c0013b9b:	83 c4 10             	add    esp,0x10
c0013b9e:	84 c0                	test   al,al
c0013ba0:	75 31                	jne    c0013bd3 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0013ba2:	50                   	push   eax
c0013ba3:	50                   	push   eax
c0013ba4:	6a 12                	push   0x12
c0013ba6:	53                   	push   ebx
c0013ba7:	e8 5e 9a ff ff       	call   c000d60a <File::open(FileOpenMode)>
c0013bac:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013bae:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0013bb1:	89 34 24             	mov    DWORD PTR [esp],esi
c0013bb4:	e8 df ca fe ff       	call   c0000698 <strlen>
c0013bb9:	5a                   	pop    edx
c0013bba:	31 d2                	xor    edx,edx
c0013bbc:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0013bc0:	51                   	push   ecx
c0013bc1:	56                   	push   esi
c0013bc2:	52                   	push   edx
c0013bc3:	50                   	push   eax
c0013bc4:	53                   	push   ebx
c0013bc5:	ff d7                	call   edi
c0013bc7:	83 c4 14             	add    esp,0x14
c0013bca:	53                   	push   ebx
c0013bcb:	e8 98 9a ff ff       	call   c000d668 <File::close()>
c0013bd0:	83 c4 10             	add    esp,0x10
c0013bd3:	56                   	push   esi
c0013bd4:	31 f6                	xor    esi,esi
c0013bd6:	68 00 01 00 00       	push   0x100
c0013bdb:	6a 00                	push   0x0
c0013bdd:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0013be1:	50                   	push   eax
c0013be2:	e8 95 ca fe ff       	call   c000067c <memset>
c0013be7:	5f                   	pop    edi
c0013be8:	58                   	pop    eax
c0013be9:	6a 01                	push   0x1
c0013beb:	53                   	push   ebx
c0013bec:	e8 19 9a ff ff       	call   c000d60a <File::open(FileOpenMode)>
c0013bf1:	83 c4 10             	add    esp,0x10
c0013bf4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013bfc:	83 ec 0c             	sub    esp,0xc
c0013bff:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c01:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0013c05:	51                   	push   ecx
c0013c06:	8d 54 24 23          	lea    edx,[esp+0x23]
c0013c0a:	52                   	push   edx
c0013c0b:	6a 00                	push   0x0
c0013c0d:	6a 01                	push   0x1
c0013c0f:	53                   	push   ebx
c0013c10:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013c13:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0013c17:	83 c4 20             	add    esp,0x20
c0013c1a:	3c 0d                	cmp    al,0xd
c0013c1c:	0f 84 09 01 00 00    	je     c0013d2b <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0013c22:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0013c27:	0f 84 ef 00 00 00    	je     c0013d1c <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0013c2d:	3c 0a                	cmp    al,0xa
c0013c2f:	74 13                	je     c0013c44 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0013c31:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0013c36:	74 0c                	je     c0013c44 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0013c38:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0013c3e:	0f 8e d8 00 00 00    	jle    c0013d1c <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0013c44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013c48:	83 ec 0c             	sub    esp,0xc
c0013c4b:	8d 78 01             	lea    edi,[eax+0x1]
c0013c4e:	57                   	push   edi
c0013c4f:	e8 63 60 ff ff       	call   c0009cb7 <malloc>
c0013c54:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0013c58:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0013c5c:	8d 56 04             	lea    edx,[esi+0x4]
c0013c5f:	89 14 24             	mov    DWORD PTR [esp],edx
c0013c62:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013c66:	e8 4c 60 ff ff       	call   c0009cb7 <malloc>
c0013c6b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0013c6f:	83 c4 0c             	add    esp,0xc
c0013c72:	57                   	push   edi
c0013c73:	6a 00                	push   0x0
c0013c75:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0013c79:	e8 fe c9 fe ff       	call   c000067c <memset>
c0013c7e:	8d 74 24 30          	lea    esi,[esp+0x30]
c0013c82:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0013c86:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013c8a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013c8c:	83 c4 0c             	add    esp,0xc
c0013c8f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013c93:	52                   	push   edx
c0013c94:	6a 00                	push   0x0
c0013c96:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0013c9a:	e8 dd c9 fe ff       	call   c000067c <memset>
c0013c9f:	8d 74 24 30          	lea    esi,[esp+0x30]
c0013ca3:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0013ca7:	89 34 24             	mov    DWORD PTR [esp],esi
c0013caa:	e8 e9 c9 fe ff       	call   c0000698 <strlen>
c0013caf:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0013cb3:	89 c1                	mov    ecx,eax
c0013cb5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013cb7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013cba:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0013cbd:	40                   	inc    eax
c0013cbe:	83 c4 10             	add    esp,0x10
c0013cc1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0013cc4:	85 d2                	test   edx,edx
c0013cc6:	75 0c                	jne    c0013cd4 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c0013cc8:	83 ec 0c             	sub    esp,0xc
c0013ccb:	6a 08                	push   0x8
c0013ccd:	e8 e5 5f ff ff       	call   c0009cb7 <malloc>
c0013cd2:	eb 0c                	jmp    c0013ce0 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c0013cd4:	c1 e0 03             	shl    eax,0x3
c0013cd7:	51                   	push   ecx
c0013cd8:	51                   	push   ecx
c0013cd9:	50                   	push   eax
c0013cda:	52                   	push   edx
c0013cdb:	e8 c3 5f ff ff       	call   c0009ca3 <realloc>
c0013ce0:	83 c4 10             	add    esp,0x10
c0013ce3:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0013ce6:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0013ce9:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0013cec:	8d 74 24 18          	lea    esi,[esp+0x18]
c0013cf0:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0013cf4:	b9 08 00 00 00       	mov    ecx,0x8
c0013cf9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013cfb:	31 f6                	xor    esi,esi
c0013cfd:	50                   	push   eax
c0013cfe:	68 00 01 00 00       	push   0x100
c0013d03:	6a 00                	push   0x0
c0013d05:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0013d09:	50                   	push   eax
c0013d0a:	e8 6d c9 fe ff       	call   c000067c <memset>
c0013d0f:	83 c4 10             	add    esp,0x10
c0013d12:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013d1a:	eb 0f                	jmp    c0013d2b <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0013d1c:	3c 3d                	cmp    al,0x3d
c0013d1e:	74 07                	je     c0013d27 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c0013d20:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0013d24:	46                   	inc    esi
c0013d25:	eb 04                	jmp    c0013d2b <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0013d27:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0013d2b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0013d30:	0f 85 c6 fe ff ff    	jne    c0013bfc <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0013d36:	81 c4 2c 01 00 00    	add    esp,0x12c
c0013d3c:	5b                   	pop    ebx
c0013d3d:	5e                   	pop    esi
c0013d3e:	5f                   	pop    edi
c0013d3f:	5d                   	pop    ebp
c0013d40:	c3                   	ret    
c0013d41:	90                   	nop

c0013d42 <EnvVarContainer::__loadSystem()>:
c0013d42:	83 ec 10             	sub    esp,0x10
c0013d45:	68 40 76 02 c0       	push   0xc0027640
c0013d4a:	68 61 58 02 c0       	push   0xc0025861
c0013d4f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d53:	e8 04 fe ff ff       	call   c0013b5c <EnvVarContainer::loadFrom(char const*, char const*)>
c0013d58:	83 c4 1c             	add    esp,0x1c
c0013d5b:	c3                   	ret    

c0013d5c <EnvVarContainer::__loadUser()>:
c0013d5c:	c3                   	ret    
c0013d5d:	90                   	nop

c0013d5e <EnvVarContainer::EnvVarContainer(Process*)>:
c0013d5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013d62:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013d68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013d6c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013d70:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0013d73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013d77:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013d7e:	90                   	nop
c0013d7f:	c3                   	ret    

c0013d80 <EnvVarContainer::~EnvVarContainer()>:
c0013d80:	83 ec 0c             	sub    esp,0xc
c0013d83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d87:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013d8a:	85 c0                	test   eax,eax
c0013d8c:	74 1d                	je     c0013dab <EnvVarContainer::~EnvVarContainer()+0x2b>
c0013d8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d92:	8b 00                	mov    eax,DWORD PTR [eax]
c0013d94:	85 c0                	test   eax,eax
c0013d96:	74 13                	je     c0013dab <EnvVarContainer::~EnvVarContainer()+0x2b>
c0013d98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d9c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013d9f:	83 ec 0c             	sub    esp,0xc
c0013da2:	50                   	push   eax
c0013da3:	e8 1f 5f ff ff       	call   c0009cc7 <free>
c0013da8:	83 c4 10             	add    esp,0x10
c0013dab:	90                   	nop
c0013dac:	83 c4 0c             	add    esp,0xc
c0013daf:	c3                   	ret    

c0013db0 <Krnl::getEnv(Process*, char const*)>:
c0013db0:	53                   	push   ebx
c0013db1:	83 ec 08             	sub    esp,0x8
c0013db4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013db8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013dbc:	39 05 50 94 02 c0    	cmp    DWORD PTR ds:0xc0029450,eax
c0013dc2:	74 04                	je     c0013dc8 <Krnl::getEnv(Process*, char const*)+0x18>
c0013dc4:	85 c0                	test   eax,eax
c0013dc6:	75 0b                	jne    c0013dd3 <Krnl::getEnv(Process*, char const*)+0x23>
c0013dc8:	a1 d4 89 02 c0       	mov    eax,ds:0xc00289d4
c0013dcd:	85 c0                	test   eax,eax
c0013dcf:	75 19                	jne    c0013dea <Krnl::getEnv(Process*, char const*)+0x3a>
c0013dd1:	eb 27                	jmp    c0013dfa <Krnl::getEnv(Process*, char const*)+0x4a>
c0013dd3:	52                   	push   edx
c0013dd4:	52                   	push   edx
c0013dd5:	53                   	push   ebx
c0013dd6:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0013ddc:	e8 79 fc ff ff       	call   c0013a5a <EnvVarContainer::getEnv(char const*)>
c0013de1:	83 c4 10             	add    esp,0x10
c0013de4:	85 c0                	test   eax,eax
c0013de6:	75 28                	jne    c0013e10 <Krnl::getEnv(Process*, char const*)+0x60>
c0013de8:	eb de                	jmp    c0013dc8 <Krnl::getEnv(Process*, char const*)+0x18>
c0013dea:	52                   	push   edx
c0013deb:	52                   	push   edx
c0013dec:	53                   	push   ebx
c0013ded:	50                   	push   eax
c0013dee:	e8 67 fc ff ff       	call   c0013a5a <EnvVarContainer::getEnv(char const*)>
c0013df3:	83 c4 10             	add    esp,0x10
c0013df6:	85 c0                	test   eax,eax
c0013df8:	75 16                	jne    c0013e10 <Krnl::getEnv(Process*, char const*)+0x60>
c0013dfa:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0013dfe:	a1 d8 89 02 c0       	mov    eax,ds:0xc00289d8
c0013e03:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013e07:	83 c4 08             	add    esp,0x8
c0013e0a:	5b                   	pop    ebx
c0013e0b:	e9 4a fc ff ff       	jmp    c0013a5a <EnvVarContainer::getEnv(char const*)>
c0013e10:	83 c4 08             	add    esp,0x8
c0013e13:	5b                   	pop    ebx
c0013e14:	c3                   	ret    

c0013e15 <Krnl::setEnvSystem(char const*, char const*)>:
c0013e15:	83 ec 10             	sub    esp,0x10
c0013e18:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013e1c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013e20:	ff 35 d8 89 02 c0    	push   DWORD PTR ds:0xc00289d8
c0013e26:	e8 6d fc ff ff       	call   c0013a98 <EnvVarContainer::setEnv(char const*, char const*)>
c0013e2b:	83 c4 1c             	add    esp,0x1c
c0013e2e:	c3                   	ret    

c0013e2f <Krnl::setEnvUser(char const*, char const*)>:
c0013e2f:	a1 d4 89 02 c0       	mov    eax,ds:0xc00289d4
c0013e34:	85 c0                	test   eax,eax
c0013e36:	74 15                	je     c0013e4d <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0013e38:	83 ec 10             	sub    esp,0x10
c0013e3b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013e3f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013e43:	50                   	push   eax
c0013e44:	e8 4f fc ff ff       	call   c0013a98 <EnvVarContainer::setEnv(char const*, char const*)>
c0013e49:	83 c4 1c             	add    esp,0x1c
c0013e4c:	c3                   	ret    
c0013e4d:	c3                   	ret    

c0013e4e <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0013e4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013e52:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0013e58:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013e5c:	e9 37 fc ff ff       	jmp    c0013a98 <EnvVarContainer::setEnv(char const*, char const*)>

c0013e61 <Krnl::deleteEnvSystem(char const*)>:
c0013e61:	c3                   	ret    

c0013e62 <Krnl::deleteEnvUser(char const*)>:
c0013e62:	c3                   	ret    

c0013e63 <Krnl::deleteEnvProcess(Process*, char const*)>:
c0013e63:	c3                   	ret    

c0013e64 <Krnl::newProcessEnv(Process*)>:
c0013e64:	83 ec 28             	sub    esp,0x28
c0013e67:	6a 0c                	push   0xc
c0013e69:	e8 49 5e ff ff       	call   c0009cb7 <malloc>
c0013e6e:	5a                   	pop    edx
c0013e6f:	59                   	pop    ecx
c0013e70:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0013e74:	50                   	push   eax
c0013e75:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013e79:	e8 e0 fe ff ff       	call   c0013d5e <EnvVarContainer::EnvVarContainer(Process*)>
c0013e7e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013e82:	83 c4 2c             	add    esp,0x2c
c0013e85:	c3                   	ret    

c0013e86 <Krnl::copyProcessEnv(Process*, Process*)>:
c0013e86:	57                   	push   edi
c0013e87:	56                   	push   esi
c0013e88:	53                   	push   ebx
c0013e89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e8d:	83 ec 0c             	sub    esp,0xc
c0013e90:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c0013e96:	6a 0c                	push   0xc
c0013e98:	e8 1a 5e ff ff       	call   c0009cb7 <malloc>
c0013e9d:	89 c3                	mov    ebx,eax
c0013e9f:	58                   	pop    eax
c0013ea0:	5a                   	pop    edx
c0013ea1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ea5:	53                   	push   ebx
c0013ea6:	e8 b3 fe ff ff       	call   c0013d5e <EnvVarContainer::EnvVarContainer(Process*)>
c0013eab:	8b 07                	mov    eax,DWORD PTR [edi]
c0013ead:	89 03                	mov    DWORD PTR [ebx],eax
c0013eaf:	c1 e0 03             	shl    eax,0x3
c0013eb2:	89 04 24             	mov    DWORD PTR [esp],eax
c0013eb5:	e8 fd 5d ff ff       	call   c0009cb7 <malloc>
c0013eba:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013ebd:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0013ebf:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0013ec2:	c1 e1 03             	shl    ecx,0x3
c0013ec5:	89 c7                	mov    edi,eax
c0013ec7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013ec9:	83 c4 10             	add    esp,0x10
c0013ecc:	89 d8                	mov    eax,ebx
c0013ece:	5b                   	pop    ebx
c0013ecf:	5e                   	pop    esi
c0013ed0:	5f                   	pop    edi
c0013ed1:	c3                   	ret    

c0013ed2 <Krnl::loadSystemEnv()>:
c0013ed2:	53                   	push   ebx
c0013ed3:	83 ec 14             	sub    esp,0x14
c0013ed6:	6a 0c                	push   0xc
c0013ed8:	e8 da 5d ff ff       	call   c0009cb7 <malloc>
c0013edd:	89 c3                	mov    ebx,eax
c0013edf:	58                   	pop    eax
c0013ee0:	5a                   	pop    edx
c0013ee1:	ff 35 50 94 02 c0    	push   DWORD PTR ds:0xc0029450
c0013ee7:	53                   	push   ebx
c0013ee8:	e8 71 fe ff ff       	call   c0013d5e <EnvVarContainer::EnvVarContainer(Process*)>
c0013eed:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013ef0:	89 1d d8 89 02 c0    	mov    DWORD PTR ds:0xc00289d8,ebx
c0013ef6:	e8 47 fe ff ff       	call   c0013d42 <EnvVarContainer::__loadSystem()>
c0013efb:	83 c4 18             	add    esp,0x18
c0013efe:	5b                   	pop    ebx
c0013eff:	c3                   	ret    

c0013f00 <Krnl::loadUserEnv()>:
c0013f00:	53                   	push   ebx
c0013f01:	83 ec 14             	sub    esp,0x14
c0013f04:	6a 0c                	push   0xc
c0013f06:	e8 ac 5d ff ff       	call   c0009cb7 <malloc>
c0013f0b:	89 c3                	mov    ebx,eax
c0013f0d:	58                   	pop    eax
c0013f0e:	5a                   	pop    edx
c0013f0f:	ff 35 50 94 02 c0    	push   DWORD PTR ds:0xc0029450
c0013f15:	53                   	push   ebx
c0013f16:	e8 43 fe ff ff       	call   c0013d5e <EnvVarContainer::EnvVarContainer(Process*)>
c0013f1b:	89 1d d4 89 02 c0    	mov    DWORD PTR ds:0xc00289d4,ebx
c0013f21:	83 c4 18             	add    esp,0x18
c0013f24:	5b                   	pop    ebx
c0013f25:	c3                   	ret    

c0013f26 <Krnl::flushEnv()>:
c0013f26:	c3                   	ret    

c0013f27 <Krnl::getProcessTotalEnvCount(Process*)>:
c0013f27:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013f2b:	8b 15 d4 89 02 c0    	mov    edx,DWORD PTR ds:0xc00289d4
c0013f31:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0013f37:	a1 d8 89 02 c0       	mov    eax,ds:0xc00289d8
c0013f3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0013f3e:	03 01                	add    eax,DWORD PTR [ecx]
c0013f40:	85 d2                	test   edx,edx
c0013f42:	74 02                	je     c0013f46 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0013f44:	03 02                	add    eax,DWORD PTR [edx]
c0013f46:	c3                   	ret    

c0013f47 <Krnl::getProcessEnvPair(Process*, int)>:
c0013f47:	57                   	push   edi
c0013f48:	56                   	push   esi
c0013f49:	8b 35 d4 89 02 c0    	mov    esi,DWORD PTR ds:0xc00289d4
c0013f4f:	53                   	push   ebx
c0013f50:	85 f6                	test   esi,esi
c0013f52:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013f56:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013f5a:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0013f60:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013f64:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013f66:	75 16                	jne    c0013f7e <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0013f68:	39 c2                	cmp    edx,eax
c0013f6a:	7c 16                	jl     c0013f82 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0013f6c:	8b 0d d8 89 02 c0    	mov    ecx,DWORD PTR ds:0xc00289d8
c0013f72:	8b 31                	mov    esi,DWORD PTR [ecx]
c0013f74:	01 c6                	add    esi,eax
c0013f76:	39 d6                	cmp    esi,edx
c0013f78:	7e 3c                	jle    c0013fb6 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0013f7a:	29 c2                	sub    edx,eax
c0013f7c:	eb 04                	jmp    c0013f82 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0013f7e:	39 c2                	cmp    edx,eax
c0013f80:	7d 05                	jge    c0013f87 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0013f82:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0013f85:	eb 20                	jmp    c0013fa7 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c0013f87:	8b 3e                	mov    edi,DWORD PTR [esi]
c0013f89:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0013f8c:	39 d1                	cmp    ecx,edx
c0013f8e:	7e 04                	jle    c0013f94 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0013f90:	29 c2                	sub    edx,eax
c0013f92:	eb 10                	jmp    c0013fa4 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c0013f94:	8b 35 d8 89 02 c0    	mov    esi,DWORD PTR ds:0xc00289d8
c0013f9a:	03 0e                	add    ecx,DWORD PTR [esi]
c0013f9c:	39 d1                	cmp    ecx,edx
c0013f9e:	7e 16                	jle    c0013fb6 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0013fa0:	29 c2                	sub    edx,eax
c0013fa2:	29 fa                	sub    edx,edi
c0013fa4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013fa7:	8d 14 d0             	lea    edx,[eax+edx*8]
c0013faa:	8b 02                	mov    eax,DWORD PTR [edx]
c0013fac:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0013faf:	89 03                	mov    DWORD PTR [ebx],eax
c0013fb1:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0013fb4:	eb 1d                	jmp    c0013fd3 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c0013fb6:	83 ec 0c             	sub    esp,0xc
c0013fb9:	68 83 58 02 c0       	push   0xc0025883
c0013fbe:	e8 18 00 00 00       	call   c0013fdb <Krnl::panic(char const*)>
c0013fc3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0013fc9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0013fd0:	83 c4 10             	add    esp,0x10
c0013fd3:	89 d8                	mov    eax,ebx
c0013fd5:	5b                   	pop    ebx
c0013fd6:	5e                   	pop    esi
c0013fd7:	5f                   	pop    edi
c0013fd8:	c2 04 00             	ret    0x4

c0013fdb <Krnl::panic(char const*)>:
c0013fdb:	53                   	push   ebx
c0013fdc:	83 ec 10             	sub    esp,0x10
c0013fdf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013fe3:	fa                   	cli    
c0013fe4:	c6 05 e4 89 02 c0 01 	mov    BYTE PTR ds:0xc00289e4,0x1
c0013feb:	53                   	push   ebx
c0013fec:	68 9d 58 02 c0       	push   0xc002589d
c0013ff1:	e8 cf 8f ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0013ff6:	83 c4 0c             	add    esp,0xc
c0013ff9:	6a 01                	push   0x1
c0013ffb:	6a 0f                	push   0xf
c0013ffd:	ff 35 84 7f 02 c0    	push   DWORD PTR ds:0xc0027f84
c0014003:	e8 fc 6b ff ff       	call   c000ac04 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0014008:	59                   	pop    ecx
c0014009:	ff 35 84 7f 02 c0    	push   DWORD PTR ds:0xc0027f84
c001400f:	e8 08 71 ff ff       	call   c000b11c <VgaText::clearScreen()>
c0014014:	58                   	pop    eax
c0014015:	5a                   	pop    edx
c0014016:	68 f4 58 02 c0       	push   0xc00258f4
c001401b:	ff 35 84 7f 02 c0    	push   DWORD PTR ds:0xc0027f84
c0014021:	e8 1e 6c ff ff       	call   c000ac44 <VgaText::setTitle(char*)>
c0014026:	83 c4 0c             	add    esp,0xc
c0014029:	6a 01                	push   0x1
c001402b:	6a 0f                	push   0xf
c001402d:	ff 35 84 7f 02 c0    	push   DWORD PTR ds:0xc0027f84
c0014033:	e8 cc 6b ff ff       	call   c000ac04 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0014038:	59                   	pop    ecx
c0014039:	58                   	pop    eax
c001403a:	68 b6 58 02 c0       	push   0xc00258b6
c001403f:	ff 35 84 7f 02 c0    	push   DWORD PTR ds:0xc0027f84
c0014045:	e8 5e 72 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c001404a:	58                   	pop    eax
c001404b:	5a                   	pop    edx
c001404c:	68 40 59 02 c0       	push   0xc0025940
c0014051:	ff 35 84 7f 02 c0    	push   DWORD PTR ds:0xc0027f84
c0014057:	e8 4c 72 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c001405c:	59                   	pop    ecx
c001405d:	58                   	pop    eax
c001405e:	68 d2 58 02 c0       	push   0xc00258d2
c0014063:	ff 35 84 7f 02 c0    	push   DWORD PTR ds:0xc0027f84
c0014069:	e8 3a 72 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c001406e:	58                   	pop    eax
c001406f:	5a                   	pop    edx
c0014070:	53                   	push   ebx
c0014071:	ff 35 84 7f 02 c0    	push   DWORD PTR ds:0xc0027f84
c0014077:	e8 2c 72 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c001407c:	59                   	pop    ecx
c001407d:	5b                   	pop    ebx
c001407e:	68 f2 58 02 c0       	push   0xc00258f2
c0014083:	ff 35 84 7f 02 c0    	push   DWORD PTR ds:0xc0027f84
c0014089:	e8 1a 72 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c001408e:	58                   	pop    eax
c001408f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014093:	e8 77 2b 00 00       	call   c0016c0f <Thr::getDriverNameFromAddress(unsigned long)>
c0014098:	83 c4 10             	add    esp,0x10
c001409b:	85 c0                	test   eax,eax
c001409d:	0f 84 36 01 00 00    	je     c00141d9 <Krnl::panic(char const*)+0x1fe>
c00140a3:	83 ec 08             	sub    esp,0x8
c00140a6:	89 c3                	mov    ebx,eax
c00140a8:	68 7c 59 02 c0       	push   0xc002597c
c00140ad:	ff 35 84 7f 02 c0    	push   DWORD PTR ds:0xc0027f84
c00140b3:	e8 f0 71 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c00140b8:	59                   	pop    ecx
c00140b9:	58                   	pop    eax
c00140ba:	68 d2 58 02 c0       	push   0xc00258d2
c00140bf:	ff 35 84 7f 02 c0    	push   DWORD PTR ds:0xc0027f84
c00140c5:	e8 de 71 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c00140ca:	58                   	pop    eax
c00140cb:	5a                   	pop    edx
c00140cc:	53                   	push   ebx
c00140cd:	ff 35 84 7f 02 c0    	push   DWORD PTR ds:0xc0027f84
c00140d3:	e8 d0 71 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c00140d8:	83 c4 10             	add    esp,0x10
c00140db:	83 ec 08             	sub    esp,0x8
c00140de:	68 f1 58 02 c0       	push   0xc00258f1
c00140e3:	ff 35 84 7f 02 c0    	push   DWORD PTR ds:0xc0027f84
c00140e9:	e8 ba 71 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c00140ee:	58                   	pop    eax
c00140ef:	5a                   	pop    edx
c00140f0:	68 d4 59 02 c0       	push   0xc00259d4
c00140f5:	ff 35 84 7f 02 c0    	push   DWORD PTR ds:0xc0027f84
c00140fb:	e8 a8 71 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0014100:	59                   	pop    ecx
c0014101:	5b                   	pop    ebx
c0014102:	68 14 5a 02 c0       	push   0xc0025a14
c0014107:	ff 35 84 7f 02 c0    	push   DWORD PTR ds:0xc0027f84
c001410d:	e8 96 71 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0014112:	58                   	pop    eax
c0014113:	5a                   	pop    edx
c0014114:	68 dd 58 02 c0       	push   0xc00258dd
c0014119:	ff 35 84 7f 02 c0    	push   DWORD PTR ds:0xc0027f84
c001411f:	e8 84 71 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0014124:	59                   	pop    ecx
c0014125:	5b                   	pop    ebx
c0014126:	68 58 5a 02 c0       	push   0xc0025a58
c001412b:	ff 35 84 7f 02 c0    	push   DWORD PTR ds:0xc0027f84
c0014131:	e8 72 71 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0014136:	58                   	pop    eax
c0014137:	5a                   	pop    edx
c0014138:	68 f5 58 02 c0       	push   0xc00258f5
c001413d:	ff 35 84 7f 02 c0    	push   DWORD PTR ds:0xc0027f84
c0014143:	e8 60 71 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0014148:	0f 20 c0             	mov    eax,cr0
c001414b:	59                   	pop    ecx
c001414c:	5b                   	pop    ebx
c001414d:	50                   	push   eax
c001414e:	ff 35 84 7f 02 c0    	push   DWORD PTR ds:0xc0027f84
c0014154:	e8 09 71 ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c0014159:	58                   	pop    eax
c001415a:	5a                   	pop    edx
c001415b:	68 ff 58 02 c0       	push   0xc00258ff
c0014160:	ff 35 84 7f 02 c0    	push   DWORD PTR ds:0xc0027f84
c0014166:	e8 3d 71 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c001416b:	0f 20 d0             	mov    eax,cr2
c001416e:	59                   	pop    ecx
c001416f:	5b                   	pop    ebx
c0014170:	50                   	push   eax
c0014171:	ff 35 84 7f 02 c0    	push   DWORD PTR ds:0xc0027f84
c0014177:	e8 e6 70 ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c001417c:	58                   	pop    eax
c001417d:	5a                   	pop    edx
c001417e:	68 09 59 02 c0       	push   0xc0025909
c0014183:	ff 35 84 7f 02 c0    	push   DWORD PTR ds:0xc0027f84
c0014189:	e8 1a 71 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c001418e:	0f 20 d8             	mov    eax,cr3
c0014191:	59                   	pop    ecx
c0014192:	5b                   	pop    ebx
c0014193:	50                   	push   eax
c0014194:	ff 35 84 7f 02 c0    	push   DWORD PTR ds:0xc0027f84
c001419a:	e8 c3 70 ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c001419f:	58                   	pop    eax
c00141a0:	5a                   	pop    edx
c00141a1:	68 1c 59 02 c0       	push   0xc002591c
c00141a6:	ff 35 84 7f 02 c0    	push   DWORD PTR ds:0xc0027f84
c00141ac:	e8 f7 70 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c00141b1:	0f 20 e0             	mov    eax,cr4
c00141b4:	59                   	pop    ecx
c00141b5:	5b                   	pop    ebx
c00141b6:	50                   	push   eax
c00141b7:	ff 35 84 7f 02 c0    	push   DWORD PTR ds:0xc0027f84
c00141bd:	e8 a0 70 ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c00141c2:	58                   	pop    eax
c00141c3:	5a                   	pop    edx
c00141c4:	68 26 59 02 c0       	push   0xc0025926
c00141c9:	ff 35 84 7f 02 c0    	push   DWORD PTR ds:0xc0027f84
c00141cf:	e8 d4 70 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c00141d4:	83 c4 10             	add    esp,0x10
c00141d7:	eb fe                	jmp    c00141d7 <Krnl::panic(char const*)+0x1fc>
c00141d9:	51                   	push   ecx
c00141da:	51                   	push   ecx
c00141db:	68 a8 59 02 c0       	push   0xc00259a8
c00141e0:	ff 35 84 7f 02 c0    	push   DWORD PTR ds:0xc0027f84
c00141e6:	e8 bd 70 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c00141eb:	5b                   	pop    ebx
c00141ec:	58                   	pop    eax
c00141ed:	68 d2 58 02 c0       	push   0xc00258d2
c00141f2:	ff 35 84 7f 02 c0    	push   DWORD PTR ds:0xc0027f84
c00141f8:	e8 ab 70 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c00141fd:	58                   	pop    eax
c00141fe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014203:	5a                   	pop    edx
c0014204:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014207:	83 c0 0c             	add    eax,0xc
c001420a:	50                   	push   eax
c001420b:	ff 35 84 7f 02 c0    	push   DWORD PTR ds:0xc0027f84
c0014211:	e8 92 70 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0014216:	83 c4 10             	add    esp,0x10
c0014219:	e9 bd fe ff ff       	jmp    c00140db <Krnl::panic(char const*)+0x100>

c001421e <Krnl::powerThread(void*)>:
c001421e:	53                   	push   ebx
c001421f:	83 ec 08             	sub    esp,0x8
c0014222:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c0014227:	48                   	dec    eax
c0014228:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c001422d:	75 01                	jne    c0014230 <Krnl::powerThread(void*)+0x12>
c001422f:	fb                   	sti    
c0014230:	52                   	push   edx
c0014231:	52                   	push   edx
c0014232:	ff 35 44 8a 02 c0    	push   DWORD PTR ds:0xc0028a44
c0014238:	68 7e 5a 02 c0       	push   0xc0025a7e
c001423d:	e8 83 8d ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0014242:	59                   	pop    ecx
c0014243:	8b 1d 34 8a 02 c0    	mov    ebx,DWORD PTR ds:0xc0028a34
c0014249:	58                   	pop    eax
c001424a:	c6 05 00 8a 02 c0 00 	mov    BYTE PTR ds:0xc0028a00,0x0
c0014251:	53                   	push   ebx
c0014252:	68 88 5a 02 c0       	push   0xc0025a88
c0014257:	e8 69 8d ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001425c:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c0014263:	e8 e0 36 00 00       	call   c0017948 <sleep(unsigned int)>
c0014268:	a1 44 8a 02 c0       	mov    eax,ds:0xc0028a44
c001426d:	83 c4 10             	add    esp,0x10
c0014270:	83 c0 0a             	add    eax,0xa
c0014273:	85 db                	test   ebx,ebx
c0014275:	a3 44 8a 02 c0       	mov    ds:0xc0028a44,eax
c001427a:	74 b4                	je     c0014230 <Krnl::powerThread(void*)+0x12>
c001427c:	39 d8                	cmp    eax,ebx
c001427e:	7e b0                	jle    c0014230 <Krnl::powerThread(void*)+0x12>
c0014280:	83 ec 0c             	sub    esp,0xc
c0014283:	68 a0 5a 02 c0       	push   0xc0025aa0
c0014288:	e8 38 8d ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001428d:	58                   	pop    eax
c001428e:	ff 35 08 7f 02 c0    	push   DWORD PTR ds:0xc0027f08
c0014294:	e8 61 50 ff ff       	call   c00092fa <Computer::sleep()>
c0014299:	83 c4 10             	add    esp,0x10
c001429c:	eb 92                	jmp    c0014230 <Krnl::powerThread(void*)+0x12>

c001429e <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c001429e:	57                   	push   edi
c001429f:	b9 09 00 00 00       	mov    ecx,0x9
c00142a4:	56                   	push   esi
c00142a5:	bf 20 8a 02 c0       	mov    edi,0xc0028a20
c00142aa:	fc                   	cld    
c00142ab:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00142af:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00142b1:	5e                   	pop    esi
c00142b2:	5f                   	pop    edi
c00142b3:	c3                   	ret    

c00142b4 <Krnl::userIOReceived()>:
c00142b4:	c7 05 44 8a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028a44,0x0
c00142be:	c3                   	ret    

c00142bf <Krnl::handlePowerButton()>:
c00142bf:	83 ec 0c             	sub    esp,0xc
c00142c2:	a1 20 8a 02 c0       	mov    eax,ds:0xc0028a20
c00142c7:	83 f8 02             	cmp    eax,0x2
c00142ca:	75 10                	jne    c00142dc <Krnl::handlePowerButton()+0x1d>
c00142cc:	83 ec 0c             	sub    esp,0xc
c00142cf:	ff 35 08 7f 02 c0    	push   DWORD PTR ds:0xc0027f08
c00142d5:	e8 f0 4f ff ff       	call   c00092ca <Computer::shutdown()>
c00142da:	eb 11                	jmp    c00142ed <Krnl::handlePowerButton()+0x2e>
c00142dc:	48                   	dec    eax
c00142dd:	75 11                	jne    c00142f0 <Krnl::handlePowerButton()+0x31>
c00142df:	83 ec 0c             	sub    esp,0xc
c00142e2:	ff 35 08 7f 02 c0    	push   DWORD PTR ds:0xc0027f08
c00142e8:	e8 0d 50 ff ff       	call   c00092fa <Computer::sleep()>
c00142ed:	83 c4 10             	add    esp,0x10
c00142f0:	83 c4 0c             	add    esp,0xc
c00142f3:	c3                   	ret    

c00142f4 <Krnl::handleSleepButton()>:
c00142f4:	83 ec 0c             	sub    esp,0xc
c00142f7:	a1 24 8a 02 c0       	mov    eax,ds:0xc0028a24
c00142fc:	83 f8 02             	cmp    eax,0x2
c00142ff:	75 10                	jne    c0014311 <Krnl::handleSleepButton()+0x1d>
c0014301:	83 ec 0c             	sub    esp,0xc
c0014304:	ff 35 08 7f 02 c0    	push   DWORD PTR ds:0xc0027f08
c001430a:	e8 bb 4f ff ff       	call   c00092ca <Computer::shutdown()>
c001430f:	eb 11                	jmp    c0014322 <Krnl::handleSleepButton()+0x2e>
c0014311:	48                   	dec    eax
c0014312:	75 11                	jne    c0014325 <Krnl::handleSleepButton()+0x31>
c0014314:	83 ec 0c             	sub    esp,0xc
c0014317:	ff 35 08 7f 02 c0    	push   DWORD PTR ds:0xc0027f08
c001431d:	e8 d8 4f ff ff       	call   c00092fa <Computer::sleep()>
c0014322:	83 c4 10             	add    esp,0x10
c0014325:	83 c4 0c             	add    esp,0xc
c0014328:	c3                   	ret    

c0014329 <Krnl::setupPowerManager()>:
c0014329:	83 ec 0c             	sub    esp,0xc
c001432c:	c7 05 44 8a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028a44,0x0
c0014336:	68 f0 00 00 00       	push   0xf0
c001433b:	c6 05 00 8a 02 c0 00 	mov    BYTE PTR ds:0xc0028a00,0x0
c0014342:	6a 00                	push   0x0
c0014344:	68 1e 42 01 c0       	push   0xc001421e
c0014349:	ff 35 50 94 02 c0    	push   DWORD PTR ds:0xc0029450
c001434f:	e8 d0 30 00 00       	call   c0017424 <Process::createThread(void (*)(void*), void*, int)>
c0014354:	c7 05 20 8a 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0028a20,0x2
c001435e:	c7 05 24 8a 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028a24,0x1
c0014368:	c7 05 28 8a 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0028a28,0x3
c0014372:	c7 05 2c 8a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028a2c,0x0
c001437c:	c7 05 38 8a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028a38,0x0
c0014386:	c7 05 30 8a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028a30,0x0
c0014390:	c7 05 3c 8a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028a3c,0x0
c001439a:	c7 05 34 8a 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0028a34,0x3c
c00143a4:	c7 05 40 8a 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0028a40,0x3c
c00143ae:	83 c4 1c             	add    esp,0x1c
c00143b1:	c3                   	ret    

c00143b2 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c00143b2:	55                   	push   ebp
c00143b3:	57                   	push   edi
c00143b4:	56                   	push   esi
c00143b5:	53                   	push   ebx
c00143b6:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00143bc:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c00143c3:	8a 1e                	mov    bl,BYTE PTR [esi]
c00143c5:	8d 6e 01             	lea    ebp,[esi+0x1]
c00143c8:	80 fb 40             	cmp    bl,0x40
c00143cb:	75 1b                	jne    c00143e8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c00143cd:	8a 16                	mov    dl,BYTE PTR [esi]
c00143cf:	84 d2                	test   dl,dl
c00143d1:	0f 84 f1 00 00 00    	je     c00144c8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00143d7:	8d 46 01             	lea    eax,[esi+0x1]
c00143da:	80 fa 3a             	cmp    dl,0x3a
c00143dd:	74 04                	je     c00143e3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c00143df:	89 c6                	mov    esi,eax
c00143e1:	eb ea                	jmp    c00143cd <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c00143e3:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00143e6:	89 c6                	mov    esi,eax
c00143e8:	50                   	push   eax
c00143e9:	6a 40                	push   0x40
c00143eb:	6a 00                	push   0x0
c00143ed:	8d 44 24 24          	lea    eax,[esp+0x24]
c00143f1:	50                   	push   eax
c00143f2:	e8 85 c2 fe ff       	call   c000067c <memset>
c00143f7:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c00143fe:	31 c0                	xor    eax,eax
c0014400:	83 c4 10             	add    esp,0x10
c0014403:	8a 0f                	mov    cl,BYTE PTR [edi]
c0014405:	84 c9                	test   cl,cl
c0014407:	0f 84 bb 00 00 00    	je     c00144c8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001440d:	3d c7 00 00 00       	cmp    eax,0xc7
c0014412:	0f 8f b0 00 00 00    	jg     c00144c8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014418:	80 f9 0a             	cmp    cl,0xa
c001441b:	0f 85 98 00 00 00    	jne    c00144b9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0014421:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0014426:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001442a:	a8 df                	test   al,0xdf
c001442c:	0f 94 c1             	sete   cl
c001442f:	3c 23                	cmp    al,0x23
c0014431:	0f 94 c2             	sete   dl
c0014434:	08 d1                	or     cl,dl
c0014436:	75 4a                	jne    c0014482 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014438:	8d 50 f7             	lea    edx,[eax-0x9]
c001443b:	80 fa 01             	cmp    dl,0x1
c001443e:	76 42                	jbe    c0014482 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014440:	3c 5b                	cmp    al,0x5b
c0014442:	75 42                	jne    c0014486 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0014444:	80 fb 40             	cmp    bl,0x40
c0014447:	75 39                	jne    c0014482 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014449:	83 ec 0c             	sub    esp,0xc
c001444c:	8d 54 24 65          	lea    edx,[esp+0x65]
c0014450:	52                   	push   edx
c0014451:	e8 42 c2 fe ff       	call   c0000698 <strlen>
c0014456:	83 c4 10             	add    esp,0x10
c0014459:	83 f8 3f             	cmp    eax,0x3f
c001445c:	77 6a                	ja     c00144c8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001445e:	50                   	push   eax
c001445f:	50                   	push   eax
c0014460:	8d 54 24 61          	lea    edx,[esp+0x61]
c0014464:	52                   	push   edx
c0014465:	8d 54 24 24          	lea    edx,[esp+0x24]
c0014469:	52                   	push   edx
c001446a:	e8 c9 c2 fe ff       	call   c0000738 <strcpy>
c001446f:	58                   	pop    eax
c0014470:	8d 54 24 24          	lea    edx,[esp+0x24]
c0014474:	52                   	push   edx
c0014475:	e8 1e c2 fe ff       	call   c0000698 <strlen>
c001447a:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001447f:	83 c4 10             	add    esp,0x10
c0014482:	31 d2                	xor    edx,edx
c0014484:	eb 3a                	jmp    c00144c0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0014486:	80 fb 40             	cmp    bl,0x40
c0014489:	74 06                	je     c0014491 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001448b:	8d 44 24 58          	lea    eax,[esp+0x58]
c001448f:	eb 20                	jmp    c00144b1 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0014491:	50                   	push   eax
c0014492:	50                   	push   eax
c0014493:	55                   	push   ebp
c0014494:	8d 44 24 24          	lea    eax,[esp+0x24]
c0014498:	50                   	push   eax
c0014499:	e8 26 c3 fe ff       	call   c00007c4 <strcmp>
c001449e:	83 c4 10             	add    esp,0x10
c00144a1:	85 c0                	test   eax,eax
c00144a3:	75 dd                	jne    c0014482 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00144a5:	eb e4                	jmp    c001448b <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c00144a7:	8d 50 01             	lea    edx,[eax+0x1]
c00144aa:	80 f9 3d             	cmp    cl,0x3d
c00144ad:	74 1d                	je     c00144cc <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c00144af:	89 d0                	mov    eax,edx
c00144b1:	8a 08                	mov    cl,BYTE PTR [eax]
c00144b3:	84 c9                	test   cl,cl
c00144b5:	75 f0                	jne    c00144a7 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c00144b7:	eb 0f                	jmp    c00144c8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00144b9:	8d 50 01             	lea    edx,[eax+0x1]
c00144bc:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c00144c0:	47                   	inc    edi
c00144c1:	89 d0                	mov    eax,edx
c00144c3:	e9 3b ff ff ff       	jmp    c0014403 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c00144c8:	31 c0                	xor    eax,eax
c00144ca:	eb 33                	jmp    c00144ff <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c00144cc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00144d0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00144d3:	50                   	push   eax
c00144d4:	50                   	push   eax
c00144d5:	8d 44 24 60          	lea    eax,[esp+0x60]
c00144d9:	50                   	push   eax
c00144da:	56                   	push   esi
c00144db:	e8 e4 c2 fe ff       	call   c00007c4 <strcmp>
c00144e0:	83 c4 10             	add    esp,0x10
c00144e3:	85 c0                	test   eax,eax
c00144e5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00144e9:	75 97                	jne    c0014482 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00144eb:	51                   	push   ecx
c00144ec:	51                   	push   ecx
c00144ed:	52                   	push   edx
c00144ee:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00144f5:	e8 3e c2 fe ff       	call   c0000738 <strcpy>
c00144fa:	83 c4 10             	add    esp,0x10
c00144fd:	b0 01                	mov    al,0x1
c00144ff:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014505:	5b                   	pop    ebx
c0014506:	5e                   	pop    esi
c0014507:	5f                   	pop    edi
c0014508:	5d                   	pop    ebp
c0014509:	c3                   	ret    

c001450a <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001450a:	57                   	push   edi
c001450b:	56                   	push   esi
c001450c:	53                   	push   ebx
c001450d:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0014513:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001451a:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0014521:	53                   	push   ebx
c0014522:	e8 71 c1 fe ff       	call   c0000698 <strlen>
c0014527:	89 34 24             	mov    DWORD PTR [esp],esi
c001452a:	89 c7                	mov    edi,eax
c001452c:	e8 67 c1 fe ff       	call   c0000698 <strlen>
c0014531:	83 c4 10             	add    esp,0x10
c0014534:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0014538:	3d ff 00 00 00       	cmp    eax,0xff
c001453d:	0f 87 d3 00 00 00    	ja     c0014616 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0014543:	57                   	push   edi
c0014544:	57                   	push   edi
c0014545:	56                   	push   esi
c0014546:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001454a:	56                   	push   esi
c001454b:	e8 e8 c1 fe ff       	call   c0000738 <strcpy>
c0014550:	58                   	pop    eax
c0014551:	5a                   	pop    edx
c0014552:	68 03 5e 02 c0       	push   0xc0025e03
c0014557:	56                   	push   esi
c0014558:	e8 1b c3 fe ff       	call   c0000878 <strcat>
c001455d:	59                   	pop    ecx
c001455e:	5f                   	pop    edi
c001455f:	53                   	push   ebx
c0014560:	56                   	push   esi
c0014561:	e8 12 c3 fe ff       	call   c0000878 <strcat>
c0014566:	58                   	pop    eax
c0014567:	5a                   	pop    edx
c0014568:	68 ad 5a 02 c0       	push   0xc0025aad
c001456d:	56                   	push   esi
c001456e:	e8 05 c3 fe ff       	call   c0000878 <strcat>
c0014573:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001457a:	e8 38 57 ff ff       	call   c0009cb7 <malloc>
c001457f:	83 c4 0c             	add    esp,0xc
c0014582:	89 c3                	mov    ebx,eax
c0014584:	ff 35 50 94 02 c0    	push   DWORD PTR ds:0xc0029450
c001458a:	56                   	push   esi
c001458b:	50                   	push   eax
c001458c:	e8 9f 8f ff ff       	call   c000d530 <File::File(char const*, Process*)>
c0014591:	83 c4 10             	add    esp,0x10
c0014594:	85 db                	test   ebx,ebx
c0014596:	74 7e                	je     c0014616 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0014598:	51                   	push   ecx
c0014599:	51                   	push   ecx
c001459a:	6a 01                	push   0x1
c001459c:	53                   	push   ebx
c001459d:	e8 68 90 ff ff       	call   c000d60a <File::open(FileOpenMode)>
c00145a2:	83 c4 10             	add    esp,0x10
c00145a5:	85 c0                	test   eax,eax
c00145a7:	74 08                	je     c00145b1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c00145a9:	83 ec 0c             	sub    esp,0xc
c00145ac:	8b 03                	mov    eax,DWORD PTR [ebx]
c00145ae:	53                   	push   ebx
c00145af:	eb 5f                	jmp    c0014610 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c00145b1:	52                   	push   edx
c00145b2:	8d 44 24 17          	lea    eax,[esp+0x17]
c00145b6:	50                   	push   eax
c00145b7:	8d 44 24 20          	lea    eax,[esp+0x20]
c00145bb:	50                   	push   eax
c00145bc:	53                   	push   ebx
c00145bd:	e8 f4 92 ff ff       	call   c000d8b6 <File::stat(unsigned long long*, bool*)>
c00145c2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00145c6:	83 c4 10             	add    esp,0x10
c00145c9:	89 c1                	mov    ecx,eax
c00145cb:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c00145cf:	74 31                	je     c0014602 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00145d1:	83 ec 0c             	sub    esp,0xc
c00145d4:	50                   	push   eax
c00145d5:	e8 dd 56 ff ff       	call   c0009cb7 <malloc>
c00145da:	89 c6                	mov    esi,eax
c00145dc:	58                   	pop    eax
c00145dd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00145df:	8d 54 24 20          	lea    edx,[esp+0x20]
c00145e3:	52                   	push   edx
c00145e4:	56                   	push   esi
c00145e5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00145e9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00145ed:	53                   	push   ebx
c00145ee:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00145f1:	83 c4 20             	add    esp,0x20
c00145f4:	85 c0                	test   eax,eax
c00145f6:	75 0a                	jne    c0014602 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00145f8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00145fc:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0014600:	74 18                	je     c001461a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0014602:	83 ec 0c             	sub    esp,0xc
c0014605:	53                   	push   ebx
c0014606:	e8 5d 90 ff ff       	call   c000d668 <File::close()>
c001460b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001460d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014610:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014613:	83 c4 10             	add    esp,0x10
c0014616:	31 c0                	xor    eax,eax
c0014618:	eb 3b                	jmp    c0014655 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001461a:	83 ec 0c             	sub    esp,0xc
c001461d:	53                   	push   ebx
c001461e:	e8 45 90 ff ff       	call   c000d668 <File::close()>
c0014623:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014625:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014628:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001462b:	83 c4 0c             	add    esp,0xc
c001462e:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0014635:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001463c:	56                   	push   esi
c001463d:	e8 70 fd ff ff       	call   c00143b2 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0014642:	89 34 24             	mov    DWORD PTR [esp],esi
c0014645:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0014649:	e8 79 56 ff ff       	call   c0009cc7 <free>
c001464e:	83 c4 10             	add    esp,0x10
c0014651:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0014655:	81 c4 20 01 00 00    	add    esp,0x120
c001465b:	5b                   	pop    ebx
c001465c:	5e                   	pop    esi
c001465d:	5f                   	pop    edi
c001465e:	c3                   	ret    

c001465f <Reg::getLine(char*, char*, char*)>:
c001465f:	57                   	push   edi
c0014660:	56                   	push   esi
c0014661:	53                   	push   ebx
c0014662:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014666:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001466a:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001466e:	57                   	push   edi
c001466f:	56                   	push   esi
c0014670:	53                   	push   ebx
c0014671:	68 b2 5a 02 c0       	push   0xc0025ab2
c0014676:	e8 8f fe ff ff       	call   c001450a <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001467b:	83 c4 10             	add    esp,0x10
c001467e:	84 c0                	test   al,al
c0014680:	75 10                	jne    c0014692 <Reg::getLine(char*, char*, char*)+0x33>
c0014682:	57                   	push   edi
c0014683:	56                   	push   esi
c0014684:	53                   	push   ebx
c0014685:	68 d7 5a 02 c0       	push   0xc0025ad7
c001468a:	e8 7b fe ff ff       	call   c001450a <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001468f:	83 c4 10             	add    esp,0x10
c0014692:	5b                   	pop    ebx
c0014693:	5e                   	pop    esi
c0014694:	5f                   	pop    edi
c0014695:	c3                   	ret    

c0014696 <Reg::readInt(char*, char*, int*)>:
c0014696:	55                   	push   ebp
c0014697:	57                   	push   edi
c0014698:	56                   	push   esi
c0014699:	53                   	push   ebx
c001469a:	81 ec f0 00 00 00    	sub    esp,0xf0
c00146a0:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c00146a4:	57                   	push   edi
c00146a5:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00146ac:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00146b3:	e8 a7 ff ff ff       	call   c001465f <Reg::getLine(char*, char*, char*)>
c00146b8:	83 c4 10             	add    esp,0x10
c00146bb:	84 c0                	test   al,al
c00146bd:	0f 84 b3 00 00 00    	je     c0014776 <Reg::readInt(char*, char*, int*)+0xe0>
c00146c3:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c00146c7:	80 fa 2b             	cmp    dl,0x2b
c00146ca:	74 0c                	je     c00146d8 <Reg::readInt(char*, char*, int*)+0x42>
c00146cc:	80 fa 2d             	cmp    dl,0x2d
c00146cf:	75 0e                	jne    c00146df <Reg::readInt(char*, char*, int*)+0x49>
c00146d1:	ba 01 00 00 00       	mov    edx,0x1
c00146d6:	eb 0b                	jmp    c00146e3 <Reg::readInt(char*, char*, int*)+0x4d>
c00146d8:	ba 01 00 00 00       	mov    edx,0x1
c00146dd:	eb 02                	jmp    c00146e1 <Reg::readInt(char*, char*, int*)+0x4b>
c00146df:	31 d2                	xor    edx,edx
c00146e1:	31 c0                	xor    eax,eax
c00146e3:	be 0a 00 00 00       	mov    esi,0xa
c00146e8:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c00146ed:	75 20                	jne    c001470f <Reg::readInt(char*, char*, int*)+0x79>
c00146ef:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c00146f3:	80 f9 78             	cmp    cl,0x78
c00146f6:	75 0a                	jne    c0014702 <Reg::readInt(char*, char*, int*)+0x6c>
c00146f8:	83 c2 02             	add    edx,0x2
c00146fb:	be 10 00 00 00       	mov    esi,0x10
c0014700:	eb 0d                	jmp    c001470f <Reg::readInt(char*, char*, int*)+0x79>
c0014702:	80 f9 62             	cmp    cl,0x62
c0014705:	75 08                	jne    c001470f <Reg::readInt(char*, char*, int*)+0x79>
c0014707:	83 c2 02             	add    edx,0x2
c001470a:	be 02 00 00 00       	mov    esi,0x2
c001470f:	01 d7                	add    edi,edx
c0014711:	31 d2                	xor    edx,edx
c0014713:	8a 1f                	mov    bl,BYTE PTR [edi]
c0014715:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0014719:	80 fb 0d             	cmp    bl,0xd
c001471c:	0f 94 c3             	sete   bl
c001471f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0014724:	0f 94 c1             	sete   cl
c0014727:	08 cb                	or     bl,cl
c0014729:	75 3a                	jne    c0014765 <Reg::readInt(char*, char*, int*)+0xcf>
c001472b:	0f af d6             	imul   edx,esi
c001472e:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0014733:	83 fe 10             	cmp    esi,0x10
c0014736:	75 26                	jne    c001475e <Reg::readInt(char*, char*, int*)+0xc8>
c0014738:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001473c:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001473f:	89 e9                	mov    ecx,ebp
c0014741:	80 f9 05             	cmp    cl,0x5
c0014744:	77 06                	ja     c001474c <Reg::readInt(char*, char*, int*)+0xb6>
c0014746:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001474a:	eb 16                	jmp    c0014762 <Reg::readInt(char*, char*, int*)+0xcc>
c001474c:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0014750:	83 e9 61             	sub    ecx,0x61
c0014753:	80 f9 05             	cmp    cl,0x5
c0014756:	77 06                	ja     c001475e <Reg::readInt(char*, char*, int*)+0xc8>
c0014758:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001475c:	eb 04                	jmp    c0014762 <Reg::readInt(char*, char*, int*)+0xcc>
c001475e:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0014762:	47                   	inc    edi
c0014763:	eb ae                	jmp    c0014713 <Reg::readInt(char*, char*, int*)+0x7d>
c0014765:	84 c0                	test   al,al
c0014767:	74 02                	je     c001476b <Reg::readInt(char*, char*, int*)+0xd5>
c0014769:	f7 da                	neg    edx
c001476b:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0014772:	89 10                	mov    DWORD PTR [eax],edx
c0014774:	88 d8                	mov    al,bl
c0014776:	81 c4 ec 00 00 00    	add    esp,0xec
c001477c:	5b                   	pop    ebx
c001477d:	5e                   	pop    esi
c001477e:	5f                   	pop    edi
c001477f:	5d                   	pop    ebp
c0014780:	c3                   	ret    

c0014781 <Reg::readString(char*, char*, char*, int)>:
c0014781:	57                   	push   edi
c0014782:	56                   	push   esi
c0014783:	53                   	push   ebx
c0014784:	81 ec d4 00 00 00    	sub    esp,0xd4
c001478a:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0014791:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0014795:	57                   	push   edi
c0014796:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001479d:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00147a4:	e8 b6 fe ff ff       	call   c001465f <Reg::getLine(char*, char*, char*)>
c00147a9:	83 c4 10             	add    esp,0x10
c00147ac:	89 c6                	mov    esi,eax
c00147ae:	84 c0                	test   al,al
c00147b0:	74 44                	je     c00147f6 <Reg::readString(char*, char*, char*, int)+0x75>
c00147b2:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c00147b9:	31 c0                	xor    eax,eax
c00147bb:	4a                   	dec    edx
c00147bc:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c00147bf:	84 c9                	test   cl,cl
c00147c1:	74 0f                	je     c00147d2 <Reg::readString(char*, char*, char*, int)+0x51>
c00147c3:	39 c2                	cmp    edx,eax
c00147c5:	7e 0b                	jle    c00147d2 <Reg::readString(char*, char*, char*, int)+0x51>
c00147c7:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c00147ca:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c00147cf:	40                   	inc    eax
c00147d0:	eb ea                	jmp    c00147bc <Reg::readString(char*, char*, char*, int)+0x3b>
c00147d2:	83 ec 0c             	sub    esp,0xc
c00147d5:	53                   	push   ebx
c00147d6:	e8 bd be fe ff       	call   c0000698 <strlen>
c00147db:	83 c4 10             	add    esp,0x10
c00147de:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c00147e3:	75 11                	jne    c00147f6 <Reg::readString(char*, char*, char*, int)+0x75>
c00147e5:	83 ec 0c             	sub    esp,0xc
c00147e8:	53                   	push   ebx
c00147e9:	e8 aa be fe ff       	call   c0000698 <strlen>
c00147ee:	83 c4 10             	add    esp,0x10
c00147f1:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00147f6:	81 c4 d0 00 00 00    	add    esp,0xd0
c00147fc:	89 f0                	mov    eax,esi
c00147fe:	5b                   	pop    ebx
c00147ff:	5e                   	pop    esi
c0014800:	5f                   	pop    edi
c0014801:	c3                   	ret    

c0014802 <Reg::readBool(char*, char*, bool*)>:
c0014802:	83 ec 20             	sub    esp,0x20
c0014805:	8d 44 24 10          	lea    eax,[esp+0x10]
c0014809:	50                   	push   eax
c001480a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001480e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014812:	e8 7f fe ff ff       	call   c0014696 <Reg::readInt(char*, char*, int*)>
c0014817:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001481c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0014820:	0f 95 02             	setne  BYTE PTR [edx]
c0014823:	83 c4 2c             	add    esp,0x2c
c0014826:	c3                   	ret    

c0014827 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0014827:	53                   	push   ebx
c0014828:	83 ec 1c             	sub    esp,0x1c
c001482b:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001482f:	8d 44 24 13          	lea    eax,[esp+0x13]
c0014833:	50                   	push   eax
c0014834:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014838:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001483c:	e8 c1 ff ff ff       	call   c0014802 <Reg::readBool(char*, char*, bool*)>
c0014841:	83 c4 10             	add    esp,0x10
c0014844:	84 c0                	test   al,al
c0014846:	74 04                	je     c001484c <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0014848:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001484c:	88 d8                	mov    al,bl
c001484e:	83 c4 18             	add    esp,0x18
c0014851:	5b                   	pop    ebx
c0014852:	c3                   	ret    

c0014853 <Reg::readIntWithDefault(char*, char*, int)>:
c0014853:	53                   	push   ebx
c0014854:	83 ec 1c             	sub    esp,0x1c
c0014857:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001485b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001485f:	50                   	push   eax
c0014860:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014864:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014868:	e8 29 fe ff ff       	call   c0014696 <Reg::readInt(char*, char*, int*)>
c001486d:	83 c4 10             	add    esp,0x10
c0014870:	84 c0                	test   al,al
c0014872:	74 04                	je     c0014878 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0014874:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0014878:	89 d8                	mov    eax,ebx
c001487a:	83 c4 18             	add    esp,0x18
c001487d:	5b                   	pop    ebx
c001487e:	c3                   	ret    

c001487f <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001487f:	57                   	push   edi
c0014880:	56                   	push   esi
c0014881:	56                   	push   esi
c0014882:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014886:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001488a:	56                   	push   esi
c001488b:	57                   	push   edi
c001488c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014890:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014894:	e8 e8 fe ff ff       	call   c0014781 <Reg::readString(char*, char*, char*, int)>
c0014899:	83 c4 10             	add    esp,0x10
c001489c:	84 c0                	test   al,al
c001489e:	75 1a                	jne    c00148ba <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c00148a0:	51                   	push   ecx
c00148a1:	56                   	push   esi
c00148a2:	6a 00                	push   0x0
c00148a4:	57                   	push   edi
c00148a5:	e8 d2 bd fe ff       	call   c000067c <memset>
c00148aa:	8d 4e ff             	lea    ecx,[esi-0x1]
c00148ad:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00148b1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00148b3:	83 c4 10             	add    esp,0x10
c00148b6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00148ba:	89 f8                	mov    eax,edi
c00148bc:	5a                   	pop    edx
c00148bd:	5e                   	pop    esi
c00148be:	5f                   	pop    edi
c00148bf:	c3                   	ret    

c00148c0 <Sys::eject(regs*)>:
c00148c0:	83 ec 0c             	sub    esp,0xc
c00148c3:	83 ca ff             	or     edx,0xffffffff
c00148c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148ca:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00148cd:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00148d2:	83 e9 41             	sub    ecx,0x41
c00148d5:	83 f9 19             	cmp    ecx,0x19
c00148d8:	77 18                	ja     c00148f2 <Sys::eject(regs*)+0x32>
c00148da:	8b 0c 8d c0 84 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7b40]
c00148e1:	85 c9                	test   ecx,ecx
c00148e3:	74 0d                	je     c00148f2 <Sys::eject(regs*)+0x32>
c00148e5:	83 ec 0c             	sub    esp,0xc
c00148e8:	51                   	push   ecx
c00148e9:	e8 2c af ff ff       	call   c000f81a <LogicalDisk::eject()>
c00148ee:	83 c4 10             	add    esp,0x10
c00148f1:	99                   	cdq    
c00148f2:	83 c4 0c             	add    esp,0xc
c00148f5:	c3                   	ret    

c00148f6 <Sys::exit(regs*)>:
c00148f6:	83 ec 18             	sub    esp,0x18
c00148f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00148fd:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014900:	e8 53 36 00 00       	call   c0017f58 <terminateTask(int)>
c0014905:	83 c8 ff             	or     eax,0xffffffff
c0014908:	83 c4 1c             	add    esp,0x1c
c001490b:	89 c2                	mov    edx,eax
c001490d:	c3                   	ret    

c001490e <Sys::getCwd(regs*)>:
c001490e:	83 ec 10             	sub    esp,0x10
c0014911:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014915:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0014918:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001491b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014920:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0014923:	e8 0a 8a ff ff       	call   c000d332 <Fs::getcwd(Process*, char*, int)>
c0014928:	83 c4 1c             	add    esp,0x1c
c001492b:	99                   	cdq    
c001492c:	c3                   	ret    

c001492d <Sys::getPID(regs*)>:
c001492d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014932:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014935:	8b 00                	mov    eax,DWORD PTR [eax]
c0014937:	99                   	cdq    
c0014938:	c3                   	ret    

c0014939 <Sys::getRAMData(regs*)>:
c0014939:	8b 0d 38 7f 02 c0    	mov    ecx,DWORD PTR ds:0xc0027f38
c001493f:	69 05 34 7f 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0027f34,0xc8
c0014949:	99                   	cdq    
c001494a:	f7 f9                	idiv   ecx
c001494c:	c1 e0 18             	shl    eax,0x18
c001494f:	09 c8                	or     eax,ecx
c0014951:	99                   	cdq    
c0014952:	c3                   	ret    

c0014953 <Sys::getVGAPtr(regs*)>:
c0014953:	55                   	push   ebp
c0014954:	57                   	push   edi
c0014955:	56                   	push   esi
c0014956:	53                   	push   ebx
c0014957:	83 ec 18             	sub    esp,0x18
c001495a:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001495e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c0014961:	e8 f6 30 00 00       	call   c0017a5c <Thr::processFromPID(int)>
c0014966:	83 c4 10             	add    esp,0x10
c0014969:	89 c1                	mov    ecx,eax
c001496b:	b8 01 00 00 00       	mov    eax,0x1
c0014970:	85 c9                	test   ecx,ecx
c0014972:	74 59                	je     c00149cd <Sys::getVGAPtr(regs*)+0x7a>
c0014974:	8b 99 06 05 00 00    	mov    ebx,DWORD PTR [ecx+0x506]
c001497a:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c001497e:	74 0c                	je     c001498c <Sys::getVGAPtr(regs*)+0x39>
c0014980:	83 ec 0c             	sub    esp,0xc
c0014983:	53                   	push   ebx
c0014984:	e8 1c 64 ff ff       	call   c000ada5 <setActiveTerminal(VgaText*)>
c0014989:	83 c4 10             	add    esp,0x10
c001498c:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001498f:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c0014992:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0014997:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014999:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001499c:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001499f:	81 c3 82 00 00 00    	add    ebx,0x82
c00149a5:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c00149ab:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00149ae:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c00149b1:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c00149b7:	50                   	push   eax
c00149b8:	50                   	push   eax
c00149b9:	53                   	push   ebx
c00149ba:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00149bd:	05 a8 0f 00 00       	add    eax,0xfa8
c00149c2:	50                   	push   eax
c00149c3:	e8 70 bd fe ff       	call   c0000738 <strcpy>
c00149c8:	83 c4 10             	add    esp,0x10
c00149cb:	31 c0                	xor    eax,eax
c00149cd:	83 c4 0c             	add    esp,0xc
c00149d0:	31 d2                	xor    edx,edx
c00149d2:	5b                   	pop    ebx
c00149d3:	5e                   	pop    esi
c00149d4:	5f                   	pop    edi
c00149d5:	5d                   	pop    ebp
c00149d6:	c3                   	ret    

c00149d7 <Sys::loadDLL(regs*)>:
c00149d7:	56                   	push   esi
c00149d8:	53                   	push   ebx
c00149d9:	31 d2                	xor    edx,edx
c00149db:	51                   	push   ecx
c00149dc:	b8 01 00 00 00       	mov    eax,0x1
c00149e1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00149e5:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00149e9:	0f 84 8c 00 00 00    	je     c0014a7b <Sys::loadDLL(regs*)+0xa4>
c00149ef:	83 ec 0c             	sub    esp,0xc
c00149f2:	68 14 01 00 00       	push   0x114
c00149f7:	e8 bb 52 ff ff       	call   c0009cb7 <malloc>
c00149fc:	83 c4 0c             	add    esp,0xc
c00149ff:	89 c3                	mov    ebx,eax
c0014a01:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014a06:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0014a09:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014a0c:	53                   	push   ebx
c0014a0d:	e8 1e 8b ff ff       	call   c000d530 <File::File(char const*, Process*)>
c0014a12:	83 c4 10             	add    esp,0x10
c0014a15:	31 d2                	xor    edx,edx
c0014a17:	b8 02 00 00 00       	mov    eax,0x2
c0014a1c:	85 db                	test   ebx,ebx
c0014a1e:	74 5b                	je     c0014a7b <Sys::loadDLL(regs*)+0xa4>
c0014a20:	83 ec 0c             	sub    esp,0xc
c0014a23:	53                   	push   ebx
c0014a24:	e8 4f 8e ff ff       	call   c000d878 <File::exists()>
c0014a29:	83 c4 10             	add    esp,0x10
c0014a2c:	84 c0                	test   al,al
c0014a2e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014a30:	75 11                	jne    c0014a43 <Sys::loadDLL(regs*)+0x6c>
c0014a32:	83 ec 0c             	sub    esp,0xc
c0014a35:	53                   	push   ebx
c0014a36:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014a39:	83 c4 10             	add    esp,0x10
c0014a3c:	b8 03 00 00 00       	mov    eax,0x3
c0014a41:	eb 36                	jmp    c0014a79 <Sys::loadDLL(regs*)+0xa2>
c0014a43:	83 ec 0c             	sub    esp,0xc
c0014a46:	53                   	push   ebx
c0014a47:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014a4a:	58                   	pop    eax
c0014a4b:	5a                   	pop    edx
c0014a4c:	6a 00                	push   0x0
c0014a4e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014a51:	e8 0a 22 00 00       	call   c0016c60 <Thr::loadDLL(char const*, bool)>
c0014a56:	83 c4 10             	add    esp,0x10
c0014a59:	89 c1                	mov    ecx,eax
c0014a5b:	31 d2                	xor    edx,edx
c0014a5d:	b8 04 00 00 00       	mov    eax,0x4
c0014a62:	85 c9                	test   ecx,ecx
c0014a64:	74 15                	je     c0014a7b <Sys::loadDLL(regs*)+0xa4>
c0014a66:	53                   	push   ebx
c0014a67:	53                   	push   ebx
c0014a68:	ff 35 08 7f 02 c0    	push   DWORD PTR ds:0xc0027f08
c0014a6e:	51                   	push   ecx
c0014a6f:	e8 1d 24 00 00       	call   c0016e91 <Thr::executeDLL(unsigned long, void*)>
c0014a74:	83 c4 10             	add    esp,0x10
c0014a77:	31 c0                	xor    eax,eax
c0014a79:	31 d2                	xor    edx,edx
c0014a7b:	59                   	pop    ecx
c0014a7c:	5b                   	pop    ebx
c0014a7d:	5e                   	pop    esi
c0014a7e:	c3                   	ret    

c0014a7f <Sys::read(regs*)>:
c0014a7f:	57                   	push   edi
c0014a80:	56                   	push   esi
c0014a81:	53                   	push   ebx
c0014a82:	83 ec 10             	sub    esp,0x10
c0014a85:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014a89:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014a8c:	83 f8 02             	cmp    eax,0x2
c0014a8f:	77 10                	ja     c0014aa1 <Sys::read(regs*)+0x22>
c0014a91:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014a96:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014a99:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0014a9f:	eb 0e                	jmp    c0014aaf <Sys::read(regs*)+0x30>
c0014aa1:	83 ec 0c             	sub    esp,0xc
c0014aa4:	50                   	push   eax
c0014aa5:	e8 69 70 ff ff       	call   c000bb13 <getFromFileDescriptor(int)>
c0014aaa:	83 c4 10             	add    esp,0x10
c0014aad:	89 c1                	mov    ecx,eax
c0014aaf:	83 c8 ff             	or     eax,0xffffffff
c0014ab2:	85 c9                	test   ecx,ecx
c0014ab4:	89 c2                	mov    edx,eax
c0014ab6:	74 28                	je     c0014ae0 <Sys::read(regs*)+0x61>
c0014ab8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014ac0:	31 ff                	xor    edi,edi
c0014ac2:	83 ec 0c             	sub    esp,0xc
c0014ac5:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014ac7:	8d 54 24 18          	lea    edx,[esp+0x18]
c0014acb:	52                   	push   edx
c0014acc:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014acf:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0014ad2:	57                   	push   edi
c0014ad3:	56                   	push   esi
c0014ad4:	51                   	push   ecx
c0014ad5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014ad8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014adc:	83 c4 20             	add    esp,0x20
c0014adf:	99                   	cdq    
c0014ae0:	83 c4 10             	add    esp,0x10
c0014ae3:	5b                   	pop    ebx
c0014ae4:	5e                   	pop    esi
c0014ae5:	5f                   	pop    edi
c0014ae6:	c3                   	ret    

c0014ae7 <Sys::sbrk(regs*)>:
c0014ae7:	56                   	push   esi
c0014ae8:	53                   	push   ebx
c0014ae9:	50                   	push   eax
c0014aea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014aef:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014af3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014af6:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0014af9:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0014aff:	85 db                	test   ebx,ebx
c0014b01:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0014b04:	74 02                	je     c0014b08 <Sys::sbrk(regs*)+0x21>
c0014b06:	79 06                	jns    c0014b0e <Sys::sbrk(regs*)+0x27>
c0014b08:	89 f0                	mov    eax,esi
c0014b0a:	31 d2                	xor    edx,edx
c0014b0c:	eb 2a                	jmp    c0014b38 <Sys::sbrk(regs*)+0x51>
c0014b0e:	83 c8 ff             	or     eax,0xffffffff
c0014b11:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0014b17:	89 c2                	mov    edx,eax
c0014b19:	77 1d                	ja     c0014b38 <Sys::sbrk(regs*)+0x51>
c0014b1b:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0014b21:	50                   	push   eax
c0014b22:	c1 ea 0c             	shr    edx,0xc
c0014b25:	68 07 0c 00 00       	push   0xc07
c0014b2a:	52                   	push   edx
c0014b2b:	51                   	push   ecx
c0014b2c:	e8 a7 78 ff ff       	call   c000c3d8 <VAS::allocatePages(int, int)>
c0014b31:	89 f0                	mov    eax,esi
c0014b33:	31 d2                	xor    edx,edx
c0014b35:	83 c4 10             	add    esp,0x10
c0014b38:	59                   	pop    ecx
c0014b39:	5b                   	pop    ebx
c0014b3a:	5e                   	pop    esi
c0014b3b:	c3                   	ret    

c0014b3c <Sys::setCwd(regs*)>:
c0014b3c:	83 ec 14             	sub    esp,0x14
c0014b3f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014b43:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014b46:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b4b:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0014b4e:	e8 c4 8d ff ff       	call   c000d917 <Fs::setcwd(Process*, char*)>
c0014b53:	83 c4 1c             	add    esp,0x1c
c0014b56:	99                   	cdq    
c0014b57:	c3                   	ret    

c0014b58 <Sys::setTime(regs*)>:
c0014b58:	55                   	push   ebp
c0014b59:	31 c9                	xor    ecx,ecx
c0014b5b:	57                   	push   edi
c0014b5c:	bd 0c 00 00 00       	mov    ebp,0xc
c0014b61:	56                   	push   esi
c0014b62:	53                   	push   ebx
c0014b63:	31 db                	xor    ebx,ebx
c0014b65:	83 ec 10             	sub    esp,0x10
c0014b68:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014b6c:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0014b6f:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0014b72:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0014b75:	89 c2                	mov    edx,eax
c0014b77:	66 81 ef 6c 07       	sub    di,0x76c
c0014b7c:	83 e2 1f             	and    edx,0x1f
c0014b7f:	c1 e7 10             	shl    edi,0x10
c0014b82:	42                   	inc    edx
c0014b83:	c1 e8 05             	shr    eax,0x5
c0014b86:	88 d1                	mov    cl,dl
c0014b88:	31 d2                	xor    edx,edx
c0014b8a:	f7 f5                	div    ebp
c0014b8c:	89 dd                	mov    ebp,ebx
c0014b8e:	88 d5                	mov    ch,dl
c0014b90:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0014b96:	0f b7 c1             	movzx  eax,cx
c0014b99:	31 d2                	xor    edx,edx
c0014b9b:	09 f8                	or     eax,edi
c0014b9d:	bf 3c 00 00 00       	mov    edi,0x3c
c0014ba2:	89 c1                	mov    ecx,eax
c0014ba4:	89 f0                	mov    eax,esi
c0014ba6:	f7 f7                	div    edi
c0014ba8:	c1 e2 10             	shl    edx,0x10
c0014bab:	09 d5                	or     ebp,edx
c0014bad:	31 d2                	xor    edx,edx
c0014baf:	89 eb                	mov    ebx,ebp
c0014bb1:	f7 f7                	div    edi
c0014bb3:	bf 10 0e 00 00       	mov    edi,0xe10
c0014bb8:	88 d7                	mov    bh,dl
c0014bba:	89 f0                	mov    eax,esi
c0014bbc:	31 d2                	xor    edx,edx
c0014bbe:	f7 f7                	div    edi
c0014bc0:	bf 18 00 00 00       	mov    edi,0x18
c0014bc5:	31 d2                	xor    edx,edx
c0014bc7:	f7 f7                	div    edi
c0014bc9:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c0014bce:	88 d3                	mov    bl,dl
c0014bd0:	53                   	push   ebx
c0014bd1:	51                   	push   ecx
c0014bd2:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0014bd8:	e8 79 95 ff ff       	call   c000e156 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0014bdd:	83 c4 1c             	add    esp,0x1c
c0014be0:	83 f0 01             	xor    eax,0x1
c0014be3:	5b                   	pop    ebx
c0014be4:	0f b6 c0             	movzx  eax,al
c0014be7:	5e                   	pop    esi
c0014be8:	31 d2                	xor    edx,edx
c0014bea:	5f                   	pop    edi
c0014beb:	5d                   	pop    ebp
c0014bec:	c3                   	ret    

c0014bed <Sys::timezone(regs*)>:
c0014bed:	53                   	push   ebx
c0014bee:	83 ec 08             	sub    esp,0x8
c0014bf1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014bf5:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0014bf9:	75 17                	jne    c0014c12 <Sys::timezone(regs*)+0x25>
c0014bfb:	83 ec 0c             	sub    esp,0xc
c0014bfe:	68 f2 5a 02 c0       	push   0xc0025af2
c0014c03:	e8 bd 83 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0014c08:	83 c8 ff             	or     eax,0xffffffff
c0014c0b:	83 c4 10             	add    esp,0x10
c0014c0e:	89 c2                	mov    edx,eax
c0014c10:	eb 20                	jmp    c0014c32 <Sys::timezone(regs*)+0x45>
c0014c12:	83 ec 0c             	sub    esp,0xc
c0014c15:	68 07 5b 02 c0       	push   0xc0025b07
c0014c1a:	e8 a6 83 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0014c1f:	58                   	pop    eax
c0014c20:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014c23:	e8 90 92 ff ff       	call   c000deb8 <User::loadClockSettings(int)>
c0014c28:	83 c4 10             	add    esp,0x10
c0014c2b:	b8 01 00 00 00       	mov    eax,0x1
c0014c30:	31 d2                	xor    edx,edx
c0014c32:	83 c4 08             	add    esp,0x8
c0014c35:	5b                   	pop    ebx
c0014c36:	c3                   	ret    

c0014c37 <Sys::write(regs*)>:
c0014c37:	57                   	push   edi
c0014c38:	56                   	push   esi
c0014c39:	53                   	push   ebx
c0014c3a:	83 ec 10             	sub    esp,0x10
c0014c3d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014c41:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014c44:	83 f8 02             	cmp    eax,0x2
c0014c47:	77 10                	ja     c0014c59 <Sys::write(regs*)+0x22>
c0014c49:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c4e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014c51:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0014c57:	eb 0e                	jmp    c0014c67 <Sys::write(regs*)+0x30>
c0014c59:	83 ec 0c             	sub    esp,0xc
c0014c5c:	50                   	push   eax
c0014c5d:	e8 b1 6e ff ff       	call   c000bb13 <getFromFileDescriptor(int)>
c0014c62:	83 c4 10             	add    esp,0x10
c0014c65:	89 c1                	mov    ecx,eax
c0014c67:	83 c8 ff             	or     eax,0xffffffff
c0014c6a:	85 c9                	test   ecx,ecx
c0014c6c:	89 c2                	mov    edx,eax
c0014c6e:	74 28                	je     c0014c98 <Sys::write(regs*)+0x61>
c0014c70:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014c78:	31 ff                	xor    edi,edi
c0014c7a:	83 ec 0c             	sub    esp,0xc
c0014c7d:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014c7f:	8d 54 24 18          	lea    edx,[esp+0x18]
c0014c83:	52                   	push   edx
c0014c84:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014c87:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0014c8a:	57                   	push   edi
c0014c8b:	56                   	push   esi
c0014c8c:	51                   	push   ecx
c0014c8d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0014c90:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014c94:	83 c4 20             	add    esp,0x20
c0014c97:	99                   	cdq    
c0014c98:	83 c4 10             	add    esp,0x10
c0014c9b:	5b                   	pop    ebx
c0014c9c:	5e                   	pop    esi
c0014c9d:	5f                   	pop    edi
c0014c9e:	c3                   	ret    

c0014c9f <Sys::wsbe(regs*)>:
c0014c9f:	57                   	push   edi
c0014ca0:	b9 0b 00 00 00       	mov    ecx,0xb
c0014ca5:	56                   	push   esi
c0014ca6:	be 46 5b 02 c0       	mov    esi,0xc0025b46
c0014cab:	53                   	push   ebx
c0014cac:	83 ec 30             	sub    esp,0x30
c0014caf:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0014cb3:	fc                   	cld    
c0014cb4:	83 ec 0c             	sub    esp,0xc
c0014cb7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0014cb9:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0014cbd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014cc2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014cc5:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0014ccb:	8b 06                	mov    eax,DWORD PTR [esi]
c0014ccd:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0014cd0:	57                   	push   edi
c0014cd1:	e8 c2 b9 fe ff       	call   c0000698 <strlen>
c0014cd6:	5a                   	pop    edx
c0014cd7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014cdb:	52                   	push   edx
c0014cdc:	31 d2                	xor    edx,edx
c0014cde:	57                   	push   edi
c0014cdf:	52                   	push   edx
c0014ce0:	50                   	push   eax
c0014ce1:	56                   	push   esi
c0014ce2:	ff d3                	call   ebx
c0014ce4:	83 c4 14             	add    esp,0x14
c0014ce7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0014ceb:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014cee:	e8 65 32 00 00       	call   c0017f58 <terminateTask(int)>
c0014cf3:	83 c4 40             	add    esp,0x40
c0014cf6:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0014cfb:	5b                   	pop    ebx
c0014cfc:	31 d2                	xor    edx,edx
c0014cfe:	5e                   	pop    esi
c0014cff:	5f                   	pop    edi
c0014d00:	c3                   	ret    

c0014d01 <Sys::yield(regs*)>:
c0014d01:	83 ec 0c             	sub    esp,0xc
c0014d04:	fa                   	cli    
c0014d05:	ff 05 28 94 02 c0    	inc    DWORD PTR ds:0xc0029428
c0014d0b:	e8 30 29 00 00       	call   c0017640 <schedule()>
c0014d10:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c0014d15:	48                   	dec    eax
c0014d16:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c0014d1b:	75 01                	jne    c0014d1e <Sys::yield(regs*)+0x1d>
c0014d1d:	fb                   	sti    
c0014d1e:	8b 15 2c 85 02 c0    	mov    edx,DWORD PTR ds:0xc002852c
c0014d24:	83 c4 0c             	add    esp,0xc
c0014d27:	89 d0                	mov    eax,edx
c0014d29:	c1 ea 11             	shr    edx,0x11
c0014d2c:	c1 e0 07             	shl    eax,0x7
c0014d2f:	25 80 30 0f 00       	and    eax,0xf3080
c0014d34:	31 d0                	xor    eax,edx
c0014d36:	31 d2                	xor    edx,edx
c0014d38:	c3                   	ret    

c0014d39 <sysCallSeekDir(regs*)>:
c0014d39:	31 c0                	xor    eax,eax
c0014d3b:	31 d2                	xor    edx,edx
c0014d3d:	c3                   	ret    

c0014d3e <sysCallTellDir(regs*)>:
c0014d3e:	31 c0                	xor    eax,eax
c0014d40:	31 d2                	xor    edx,edx
c0014d42:	c3                   	ret    

c0014d43 <sysCallVerify(regs*)>:
c0014d43:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014d47:	31 d2                	xor    edx,edx
c0014d49:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014d4c:	c3                   	ret    

c0014d4d <sysCallGetArgc(regs*)>:
c0014d4d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d52:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014d55:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0014d5b:	99                   	cdq    
c0014d5c:	c3                   	ret    

c0014d5d <sysFormatDisk(regs*)>:
c0014d5d:	56                   	push   esi
c0014d5e:	53                   	push   ebx
c0014d5f:	53                   	push   ebx
c0014d60:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014d64:	8b 1d 38 80 02 c0    	mov    ebx,DWORD PTR ds:0xc0028038
c0014d6a:	eb 25                	jmp    c0014d91 <sysFormatDisk(regs*)+0x34>
c0014d6c:	83 ec 0c             	sub    esp,0xc
c0014d6f:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0014d72:	8b 13                	mov    edx,DWORD PTR [ebx]
c0014d74:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0014d77:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014d7a:	50                   	push   eax
c0014d7b:	ff 34 85 c0 84 02 c0 	push   DWORD PTR [eax*4-0x3ffd7b40]
c0014d82:	53                   	push   ebx
c0014d83:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0014d86:	83 c4 20             	add    esp,0x20
c0014d89:	83 f8 08             	cmp    eax,0x8
c0014d8c:	75 12                	jne    c0014da0 <sysFormatDisk(regs*)+0x43>
c0014d8e:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0014d91:	85 db                	test   ebx,ebx
c0014d93:	75 d7                	jne    c0014d6c <sysFormatDisk(regs*)+0xf>
c0014d95:	59                   	pop    ecx
c0014d96:	b8 03 00 00 00       	mov    eax,0x3
c0014d9b:	31 d2                	xor    edx,edx
c0014d9d:	5b                   	pop    ebx
c0014d9e:	5e                   	pop    esi
c0014d9f:	c3                   	ret    
c0014da0:	85 c0                	test   eax,eax
c0014da2:	74 1b                	je     c0014dbf <sysFormatDisk(regs*)+0x62>
c0014da4:	83 f8 09             	cmp    eax,0x9
c0014da7:	74 0b                	je     c0014db4 <sysFormatDisk(regs*)+0x57>
c0014da9:	59                   	pop    ecx
c0014daa:	b8 02 00 00 00       	mov    eax,0x2
c0014daf:	31 d2                	xor    edx,edx
c0014db1:	5b                   	pop    ebx
c0014db2:	5e                   	pop    esi
c0014db3:	c3                   	ret    
c0014db4:	59                   	pop    ecx
c0014db5:	b8 01 00 00 00       	mov    eax,0x1
c0014dba:	31 d2                	xor    edx,edx
c0014dbc:	5b                   	pop    ebx
c0014dbd:	5e                   	pop    esi
c0014dbe:	c3                   	ret    
c0014dbf:	59                   	pop    ecx
c0014dc0:	31 c0                	xor    eax,eax
c0014dc2:	31 d2                	xor    edx,edx
c0014dc4:	5b                   	pop    ebx
c0014dc5:	5e                   	pop    esi
c0014dc6:	c3                   	ret    

c0014dc7 <sysSetDiskVolumeLabel(regs*)>:
c0014dc7:	56                   	push   esi
c0014dc8:	53                   	push   ebx
c0014dc9:	53                   	push   ebx
c0014dca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014dce:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0014dd1:	83 f8 19             	cmp    eax,0x19
c0014dd4:	77 2d                	ja     c0014e03 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0014dd6:	8b 0c 85 c0 84 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7b40]
c0014ddd:	85 c9                	test   ecx,ecx
c0014ddf:	74 22                	je     c0014e03 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0014de1:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0014de4:	85 db                	test   ebx,ebx
c0014de6:	74 1b                	je     c0014e03 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0014de8:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c0014dee:	85 d2                	test   edx,edx
c0014df0:	74 11                	je     c0014e03 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0014df2:	8b 32                	mov    esi,DWORD PTR [edx]
c0014df4:	53                   	push   ebx
c0014df5:	50                   	push   eax
c0014df6:	51                   	push   ecx
c0014df7:	52                   	push   edx
c0014df8:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0014dfb:	83 c4 10             	add    esp,0x10
c0014dfe:	99                   	cdq    
c0014dff:	59                   	pop    ecx
c0014e00:	5b                   	pop    ebx
c0014e01:	5e                   	pop    esi
c0014e02:	c3                   	ret    
c0014e03:	59                   	pop    ecx
c0014e04:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0014e09:	ba ff ff ff ff       	mov    edx,0xffffffff
c0014e0e:	5b                   	pop    ebx
c0014e0f:	5e                   	pop    esi
c0014e10:	c3                   	ret    

c0014e11 <sysGetDiskVolumeLabel(regs*)>:
c0014e11:	57                   	push   edi
c0014e12:	56                   	push   esi
c0014e13:	53                   	push   ebx
c0014e14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e18:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0014e1b:	83 fa 19             	cmp    edx,0x19
c0014e1e:	77 38                	ja     c0014e58 <sysGetDiskVolumeLabel(regs*)+0x47>
c0014e20:	8b 0c 95 c0 84 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd7b40]
c0014e27:	85 c9                	test   ecx,ecx
c0014e29:	74 2d                	je     c0014e58 <sysGetDiskVolumeLabel(regs*)+0x47>
c0014e2b:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0014e2e:	85 db                	test   ebx,ebx
c0014e30:	74 26                	je     c0014e58 <sysGetDiskVolumeLabel(regs*)+0x47>
c0014e32:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0014e35:	85 f6                	test   esi,esi
c0014e37:	74 1f                	je     c0014e58 <sysGetDiskVolumeLabel(regs*)+0x47>
c0014e39:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c0014e3f:	85 c0                	test   eax,eax
c0014e41:	74 15                	je     c0014e58 <sysGetDiskVolumeLabel(regs*)+0x47>
c0014e43:	83 ec 0c             	sub    esp,0xc
c0014e46:	8b 38                	mov    edi,DWORD PTR [eax]
c0014e48:	56                   	push   esi
c0014e49:	53                   	push   ebx
c0014e4a:	52                   	push   edx
c0014e4b:	51                   	push   ecx
c0014e4c:	50                   	push   eax
c0014e4d:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0014e50:	83 c4 20             	add    esp,0x20
c0014e53:	99                   	cdq    
c0014e54:	5b                   	pop    ebx
c0014e55:	5e                   	pop    esi
c0014e56:	5f                   	pop    edi
c0014e57:	c3                   	ret    
c0014e58:	5b                   	pop    ebx
c0014e59:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0014e5e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0014e63:	5e                   	pop    esi
c0014e64:	5f                   	pop    edi
c0014e65:	c3                   	ret    

c0014e66 <sysShutdown(regs*)>:
c0014e66:	83 ec 0c             	sub    esp,0xc
c0014e69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e6d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014e70:	85 c0                	test   eax,eax
c0014e72:	74 18                	je     c0014e8c <sysShutdown(regs*)+0x26>
c0014e74:	83 f8 01             	cmp    eax,0x1
c0014e77:	74 38                	je     c0014eb1 <sysShutdown(regs*)+0x4b>
c0014e79:	83 f8 02             	cmp    eax,0x2
c0014e7c:	74 24                	je     c0014ea2 <sysShutdown(regs*)+0x3c>
c0014e7e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014e83:	ba ff ff ff ff       	mov    edx,0xffffffff
c0014e88:	83 c4 0c             	add    esp,0xc
c0014e8b:	c3                   	ret    
c0014e8c:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c0014e91:	8b 10                	mov    edx,DWORD PTR [eax]
c0014e93:	6a 00                	push   0x0
c0014e95:	6a 00                	push   0x0
c0014e97:	6a 00                	push   0x0
c0014e99:	50                   	push   eax
c0014e9a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0014e9d:	83 c4 10             	add    esp,0x10
c0014ea0:	eb dc                	jmp    c0014e7e <sysShutdown(regs*)+0x18>
c0014ea2:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c0014ea7:	8b 10                	mov    edx,DWORD PTR [eax]
c0014ea9:	6a 00                	push   0x0
c0014eab:	6a 00                	push   0x0
c0014ead:	6a 01                	push   0x1
c0014eaf:	eb e8                	jmp    c0014e99 <sysShutdown(regs*)+0x33>
c0014eb1:	a1 40 85 02 c0       	mov    eax,ds:0xc0028540
c0014eb6:	85 c0                	test   eax,eax
c0014eb8:	74 02                	je     c0014ebc <sysShutdown(regs*)+0x56>
c0014eba:	ff d0                	call   eax
c0014ebc:	31 c0                	xor    eax,eax
c0014ebe:	31 d2                	xor    edx,edx
c0014ec0:	83 c4 0c             	add    esp,0xc
c0014ec3:	c3                   	ret    

c0014ec4 <sysCallRealpath(regs*)>:
c0014ec4:	83 ec 0c             	sub    esp,0xc
c0014ec7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014ecb:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0014ece:	85 d2                	test   edx,edx
c0014ed0:	74 07                	je     c0014ed9 <sysCallRealpath(regs*)+0x15>
c0014ed2:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014ed5:	85 c0                	test   eax,eax
c0014ed7:	75 0b                	jne    c0014ee4 <sysCallRealpath(regs*)+0x20>
c0014ed9:	b8 01 00 00 00       	mov    eax,0x1
c0014ede:	31 d2                	xor    edx,edx
c0014ee0:	83 c4 0c             	add    esp,0xc
c0014ee3:	c3                   	ret    
c0014ee4:	51                   	push   ecx
c0014ee5:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014eeb:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0014eee:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0014ef4:	51                   	push   ecx
c0014ef5:	52                   	push   edx
c0014ef6:	50                   	push   eax
c0014ef7:	e8 8a 84 ff ff       	call   c000d386 <Fs::standardiseFiles(char*, char const*, char const*)>
c0014efc:	83 c4 10             	add    esp,0x10
c0014eff:	31 c0                	xor    eax,eax
c0014f01:	31 d2                	xor    edx,edx
c0014f03:	83 c4 0c             	add    esp,0xc
c0014f06:	c3                   	ret    

c0014f07 <sysCallReadDir(regs*)>:
c0014f07:	53                   	push   ebx
c0014f08:	83 ec 18             	sub    esp,0x18
c0014f0b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014f0f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0014f12:	83 f8 02             	cmp    eax,0x2
c0014f15:	76 60                	jbe    c0014f77 <sysCallReadDir(regs*)+0x70>
c0014f17:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0014f1e:	77 48                	ja     c0014f68 <sysCallReadDir(regs*)+0x61>
c0014f20:	83 ec 0c             	sub    esp,0xc
c0014f23:	50                   	push   eax
c0014f24:	e8 ea 6b ff ff       	call   c000bb13 <getFromFileDescriptor(int)>
c0014f29:	83 c4 10             	add    esp,0x10
c0014f2c:	85 c0                	test   eax,eax
c0014f2e:	74 38                	je     c0014f68 <sysCallReadDir(regs*)+0x61>
c0014f30:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014f38:	83 ec 0c             	sub    esp,0xc
c0014f3b:	8b 10                	mov    edx,DWORD PTR [eax]
c0014f3d:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0014f41:	51                   	push   ecx
c0014f42:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014f45:	6a 00                	push   0x0
c0014f47:	68 10 01 00 00       	push   0x110
c0014f4c:	50                   	push   eax
c0014f4d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0014f50:	83 c4 20             	add    esp,0x20
c0014f53:	85 c0                	test   eax,eax
c0014f55:	74 29                	je     c0014f80 <sysCallReadDir(regs*)+0x79>
c0014f57:	83 f8 07             	cmp    eax,0x7
c0014f5a:	74 1b                	je     c0014f77 <sysCallReadDir(regs*)+0x70>
c0014f5c:	b8 02 00 00 00       	mov    eax,0x2
c0014f61:	31 d2                	xor    edx,edx
c0014f63:	83 c4 18             	add    esp,0x18
c0014f66:	5b                   	pop    ebx
c0014f67:	c3                   	ret    
c0014f68:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014f6d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0014f72:	83 c4 18             	add    esp,0x18
c0014f75:	5b                   	pop    ebx
c0014f76:	c3                   	ret    
c0014f77:	b8 01 00 00 00       	mov    eax,0x1
c0014f7c:	31 d2                	xor    edx,edx
c0014f7e:	eb e3                	jmp    c0014f63 <sysCallReadDir(regs*)+0x5c>
c0014f80:	31 c0                	xor    eax,eax
c0014f82:	31 d2                	xor    edx,edx
c0014f84:	eb dd                	jmp    c0014f63 <sysCallReadDir(regs*)+0x5c>

c0014f86 <sysCallIsATTY(regs*)>:
c0014f86:	83 ec 0c             	sub    esp,0xc
c0014f89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014f8d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014f90:	83 f8 02             	cmp    eax,0x2
c0014f93:	76 07                	jbe    c0014f9c <sysCallIsATTY(regs*)+0x16>
c0014f95:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0014f9a:	75 26                	jne    c0014fc2 <sysCallIsATTY(regs*)+0x3c>
c0014f9c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014fa1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014fa4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014faa:	85 c0                	test   eax,eax
c0014fac:	74 24                	je     c0014fd2 <sysCallIsATTY(regs*)+0x4c>
c0014fae:	83 ec 0c             	sub    esp,0xc
c0014fb1:	8b 10                	mov    edx,DWORD PTR [eax]
c0014fb3:	50                   	push   eax
c0014fb4:	ff 12                	call   DWORD PTR [edx]
c0014fb6:	31 d2                	xor    edx,edx
c0014fb8:	0f b6 c0             	movzx  eax,al
c0014fbb:	83 c4 10             	add    esp,0x10
c0014fbe:	83 c4 0c             	add    esp,0xc
c0014fc1:	c3                   	ret    
c0014fc2:	83 ec 0c             	sub    esp,0xc
c0014fc5:	50                   	push   eax
c0014fc6:	e8 48 6b ff ff       	call   c000bb13 <getFromFileDescriptor(int)>
c0014fcb:	83 c4 10             	add    esp,0x10
c0014fce:	85 c0                	test   eax,eax
c0014fd0:	75 dc                	jne    c0014fae <sysCallIsATTY(regs*)+0x28>
c0014fd2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014fd7:	ba ff ff ff ff       	mov    edx,0xffffffff
c0014fdc:	83 c4 0c             	add    esp,0xc
c0014fdf:	c3                   	ret    

c0014fe0 <sysCallSeek(regs*)>:
c0014fe0:	53                   	push   ebx
c0014fe1:	83 ec 08             	sub    esp,0x8
c0014fe4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014fe8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014feb:	8d 50 fd             	lea    edx,[eax-0x3]
c0014fee:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0014ff4:	77 32                	ja     c0015028 <sysCallSeek(regs*)+0x48>
c0014ff6:	83 ec 0c             	sub    esp,0xc
c0014ff9:	50                   	push   eax
c0014ffa:	e8 14 6b ff ff       	call   c000bb13 <getFromFileDescriptor(int)>
c0014fff:	83 c4 0c             	add    esp,0xc
c0015002:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0015005:	31 db                	xor    ebx,ebx
c0015007:	53                   	push   ebx
c0015008:	51                   	push   ecx
c0015009:	50                   	push   eax
c001500a:	e8 b9 86 ff ff       	call   c000d6c8 <File::seek(unsigned long long)>
c001500f:	83 c4 10             	add    esp,0x10
c0015012:	85 c0                	test   eax,eax
c0015014:	0f 95 c0             	setne  al
c0015017:	31 d2                	xor    edx,edx
c0015019:	0f b6 c0             	movzx  eax,al
c001501c:	f7 d8                	neg    eax
c001501e:	83 d2 00             	adc    edx,0x0
c0015021:	83 c4 08             	add    esp,0x8
c0015024:	f7 da                	neg    edx
c0015026:	5b                   	pop    ebx
c0015027:	c3                   	ret    
c0015028:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001502d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015032:	83 c4 08             	add    esp,0x8
c0015035:	5b                   	pop    ebx
c0015036:	c3                   	ret    

c0015037 <sysCallTell(regs*)>:
c0015037:	53                   	push   ebx
c0015038:	83 ec 08             	sub    esp,0x8
c001503b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001503f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015042:	83 f8 02             	cmp    eax,0x2
c0015045:	76 4d                	jbe    c0015094 <sysCallTell(regs*)+0x5d>
c0015047:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001504c:	76 19                	jbe    c0015067 <sysCallTell(regs*)+0x30>
c001504e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0015051:	31 d2                	xor    edx,edx
c0015053:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015059:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015060:	31 c0                	xor    eax,eax
c0015062:	83 c4 08             	add    esp,0x8
c0015065:	5b                   	pop    ebx
c0015066:	c3                   	ret    
c0015067:	83 ec 0c             	sub    esp,0xc
c001506a:	50                   	push   eax
c001506b:	e8 a3 6a ff ff       	call   c000bb13 <getFromFileDescriptor(int)>
c0015070:	5a                   	pop    edx
c0015071:	59                   	pop    ecx
c0015072:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015075:	50                   	push   eax
c0015076:	e8 a3 86 ff ff       	call   c000d71e <File::tell(unsigned long long*)>
c001507b:	83 c4 10             	add    esp,0x10
c001507e:	85 c0                	test   eax,eax
c0015080:	0f 95 c0             	setne  al
c0015083:	31 d2                	xor    edx,edx
c0015085:	0f b6 c0             	movzx  eax,al
c0015088:	f7 d8                	neg    eax
c001508a:	83 d2 00             	adc    edx,0x0
c001508d:	83 c4 08             	add    esp,0x8
c0015090:	f7 da                	neg    edx
c0015092:	5b                   	pop    ebx
c0015093:	c3                   	ret    
c0015094:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015099:	ba ff ff ff ff       	mov    edx,0xffffffff
c001509e:	83 c4 08             	add    esp,0x8
c00150a1:	5b                   	pop    ebx
c00150a2:	c3                   	ret    

c00150a3 <sysCallSize(regs*)>:
c00150a3:	53                   	push   ebx
c00150a4:	83 ec 18             	sub    esp,0x18
c00150a7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00150ab:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00150ae:	83 f8 02             	cmp    eax,0x2
c00150b1:	76 53                	jbe    c0015106 <sysCallSize(regs*)+0x63>
c00150b3:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00150b8:	76 19                	jbe    c00150d3 <sysCallSize(regs*)+0x30>
c00150ba:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00150bd:	31 d2                	xor    edx,edx
c00150bf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00150c5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00150cc:	31 c0                	xor    eax,eax
c00150ce:	83 c4 18             	add    esp,0x18
c00150d1:	5b                   	pop    ebx
c00150d2:	c3                   	ret    
c00150d3:	83 ec 0c             	sub    esp,0xc
c00150d6:	50                   	push   eax
c00150d7:	e8 37 6a ff ff       	call   c000bb13 <getFromFileDescriptor(int)>
c00150dc:	83 c4 0c             	add    esp,0xc
c00150df:	8d 54 24 13          	lea    edx,[esp+0x13]
c00150e3:	52                   	push   edx
c00150e4:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00150e7:	50                   	push   eax
c00150e8:	e8 c9 87 ff ff       	call   c000d8b6 <File::stat(unsigned long long*, bool*)>
c00150ed:	83 c4 10             	add    esp,0x10
c00150f0:	85 c0                	test   eax,eax
c00150f2:	0f 95 c0             	setne  al
c00150f5:	31 d2                	xor    edx,edx
c00150f7:	0f b6 c0             	movzx  eax,al
c00150fa:	f7 d8                	neg    eax
c00150fc:	83 d2 00             	adc    edx,0x0
c00150ff:	83 c4 18             	add    esp,0x18
c0015102:	f7 da                	neg    edx
c0015104:	5b                   	pop    ebx
c0015105:	c3                   	ret    
c0015106:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001510b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015110:	83 c4 18             	add    esp,0x18
c0015113:	5b                   	pop    ebx
c0015114:	c3                   	ret    

c0015115 <sysCallSizeFromFilename(regs*)>:
c0015115:	57                   	push   edi
c0015116:	56                   	push   esi
c0015117:	53                   	push   ebx
c0015118:	83 ec 20             	sub    esp,0x20
c001511b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001511f:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0015122:	83 fb 02             	cmp    ebx,0x2
c0015125:	0f 86 88 00 00 00    	jbe    c00151b3 <sysCallSizeFromFilename(regs*)+0x9e>
c001512b:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0015131:	76 1b                	jbe    c001514e <sysCallSizeFromFilename(regs*)+0x39>
c0015133:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0015136:	31 d2                	xor    edx,edx
c0015138:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001513e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015145:	83 c4 20             	add    esp,0x20
c0015148:	31 c0                	xor    eax,eax
c001514a:	5b                   	pop    ebx
c001514b:	5e                   	pop    esi
c001514c:	5f                   	pop    edi
c001514d:	c3                   	ret    
c001514e:	83 ec 0c             	sub    esp,0xc
c0015151:	68 14 01 00 00       	push   0x114
c0015156:	e8 5c 4b ff ff       	call   c0009cb7 <malloc>
c001515b:	83 c4 0c             	add    esp,0xc
c001515e:	89 c7                	mov    edi,eax
c0015160:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015165:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015168:	53                   	push   ebx
c0015169:	57                   	push   edi
c001516a:	e8 c1 83 ff ff       	call   c000d530 <File::File(char const*, Process*)>
c001516f:	83 c4 0c             	add    esp,0xc
c0015172:	8d 44 24 23          	lea    eax,[esp+0x23]
c0015176:	50                   	push   eax
c0015177:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001517a:	57                   	push   edi
c001517b:	e8 36 87 ff ff       	call   c000d8b6 <File::stat(unsigned long long*, bool*)>
c0015180:	83 c4 10             	add    esp,0x10
c0015183:	85 ff                	test   edi,edi
c0015185:	74 14                	je     c001519b <sysCallSizeFromFilename(regs*)+0x86>
c0015187:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001518b:	8b 17                	mov    edx,DWORD PTR [edi]
c001518d:	83 ec 0c             	sub    esp,0xc
c0015190:	57                   	push   edi
c0015191:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0015194:	83 c4 10             	add    esp,0x10
c0015197:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001519b:	85 c0                	test   eax,eax
c001519d:	0f 95 c0             	setne  al
c00151a0:	31 d2                	xor    edx,edx
c00151a2:	0f b6 c0             	movzx  eax,al
c00151a5:	f7 d8                	neg    eax
c00151a7:	83 d2 00             	adc    edx,0x0
c00151aa:	83 c4 20             	add    esp,0x20
c00151ad:	f7 da                	neg    edx
c00151af:	5b                   	pop    ebx
c00151b0:	5e                   	pop    esi
c00151b1:	5f                   	pop    edi
c00151b2:	c3                   	ret    
c00151b3:	83 c4 20             	add    esp,0x20
c00151b6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00151bb:	5b                   	pop    ebx
c00151bc:	ba ff ff ff ff       	mov    edx,0xffffffff
c00151c1:	5e                   	pop    esi
c00151c2:	5f                   	pop    edi
c00151c3:	c3                   	ret    

c00151c4 <sysCallClose(regs*)>:
c00151c4:	53                   	push   ebx
c00151c5:	83 ec 08             	sub    esp,0x8
c00151c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00151cc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00151cf:	83 f8 02             	cmp    eax,0x2
c00151d2:	76 41                	jbe    c0015215 <sysCallClose(regs*)+0x51>
c00151d4:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c00151da:	83 fa 01             	cmp    edx,0x1
c00151dd:	76 2d                	jbe    c001520c <sysCallClose(regs*)+0x48>
c00151df:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00151e4:	77 2f                	ja     c0015215 <sysCallClose(regs*)+0x51>
c00151e6:	83 ec 0c             	sub    esp,0xc
c00151e9:	50                   	push   eax
c00151ea:	e8 24 69 ff ff       	call   c000bb13 <getFromFileDescriptor(int)>
c00151ef:	89 c3                	mov    ebx,eax
c00151f1:	89 04 24             	mov    DWORD PTR [esp],eax
c00151f4:	e8 6f 84 ff ff       	call   c000d668 <File::close()>
c00151f9:	83 c4 10             	add    esp,0x10
c00151fc:	85 db                	test   ebx,ebx
c00151fe:	74 0c                	je     c001520c <sysCallClose(regs*)+0x48>
c0015200:	83 ec 0c             	sub    esp,0xc
c0015203:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015205:	53                   	push   ebx
c0015206:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015209:	83 c4 10             	add    esp,0x10
c001520c:	31 c0                	xor    eax,eax
c001520e:	31 d2                	xor    edx,edx
c0015210:	83 c4 08             	add    esp,0x8
c0015213:	5b                   	pop    ebx
c0015214:	c3                   	ret    
c0015215:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001521a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001521f:	83 c4 08             	add    esp,0x8
c0015222:	5b                   	pop    ebx
c0015223:	c3                   	ret    

c0015224 <sysCallOpenDir(regs*)>:
c0015224:	56                   	push   esi
c0015225:	53                   	push   ebx
c0015226:	53                   	push   ebx
c0015227:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001522b:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001522e:	85 f6                	test   esi,esi
c0015230:	74 59                	je     c001528b <sysCallOpenDir(regs*)+0x67>
c0015232:	83 ec 0c             	sub    esp,0xc
c0015235:	68 14 01 00 00       	push   0x114
c001523a:	e8 78 4a ff ff       	call   c0009cb7 <malloc>
c001523f:	83 c4 0c             	add    esp,0xc
c0015242:	89 c6                	mov    esi,eax
c0015244:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015249:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001524c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001524f:	56                   	push   esi
c0015250:	e8 3b 88 ff ff       	call   c000da90 <Directory::Directory(char const*, Process*)>
c0015255:	83 c4 10             	add    esp,0x10
c0015258:	85 f6                	test   esi,esi
c001525a:	74 2f                	je     c001528b <sysCallOpenDir(regs*)+0x67>
c001525c:	83 ec 0c             	sub    esp,0xc
c001525f:	56                   	push   esi
c0015260:	e8 05 89 ff ff       	call   c000db6a <Directory::open()>
c0015265:	83 c4 10             	add    esp,0x10
c0015268:	85 c0                	test   eax,eax
c001526a:	75 1f                	jne    c001528b <sysCallOpenDir(regs*)+0x67>
c001526c:	83 ec 0c             	sub    esp,0xc
c001526f:	56                   	push   esi
c0015270:	e8 a9 65 ff ff       	call   c000b81e <UnixFile::getFileDescriptor()>
c0015275:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0015278:	83 c4 10             	add    esp,0x10
c001527b:	89 02                	mov    DWORD PTR [edx],eax
c001527d:	c1 f8 1f             	sar    eax,0x1f
c0015280:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015283:	31 c0                	xor    eax,eax
c0015285:	59                   	pop    ecx
c0015286:	31 d2                	xor    edx,edx
c0015288:	5b                   	pop    ebx
c0015289:	5e                   	pop    esi
c001528a:	c3                   	ret    
c001528b:	59                   	pop    ecx
c001528c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015291:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015296:	5b                   	pop    ebx
c0015297:	5e                   	pop    esi
c0015298:	c3                   	ret    

c0015299 <sysCallCloseDir(regs*)>:
c0015299:	53                   	push   ebx
c001529a:	83 ec 08             	sub    esp,0x8
c001529d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00152a1:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00152a4:	8d 50 fd             	lea    edx,[eax-0x3]
c00152a7:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00152ad:	77 2f                	ja     c00152de <sysCallCloseDir(regs*)+0x45>
c00152af:	83 ec 0c             	sub    esp,0xc
c00152b2:	50                   	push   eax
c00152b3:	e8 5b 68 ff ff       	call   c000bb13 <getFromFileDescriptor(int)>
c00152b8:	89 c3                	mov    ebx,eax
c00152ba:	89 04 24             	mov    DWORD PTR [esp],eax
c00152bd:	e8 04 89 ff ff       	call   c000dbc6 <Directory::close()>
c00152c2:	83 c4 10             	add    esp,0x10
c00152c5:	85 db                	test   ebx,ebx
c00152c7:	74 0c                	je     c00152d5 <sysCallCloseDir(regs*)+0x3c>
c00152c9:	83 ec 0c             	sub    esp,0xc
c00152cc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00152ce:	53                   	push   ebx
c00152cf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00152d2:	83 c4 10             	add    esp,0x10
c00152d5:	31 c0                	xor    eax,eax
c00152d7:	31 d2                	xor    edx,edx
c00152d9:	83 c4 08             	add    esp,0x8
c00152dc:	5b                   	pop    ebx
c00152dd:	c3                   	ret    
c00152de:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00152e3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00152e8:	83 c4 08             	add    esp,0x8
c00152eb:	5b                   	pop    ebx
c00152ec:	c3                   	ret    

c00152ed <sysCallMakeDir(regs*)>:
c00152ed:	56                   	push   esi
c00152ee:	53                   	push   ebx
c00152ef:	83 ec 10             	sub    esp,0x10
c00152f2:	68 14 01 00 00       	push   0x114
c00152f7:	e8 bb 49 ff ff       	call   c0009cb7 <malloc>
c00152fc:	83 c4 0c             	add    esp,0xc
c00152ff:	89 c3                	mov    ebx,eax
c0015301:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015306:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015309:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001530d:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015310:	53                   	push   ebx
c0015311:	e8 7a 87 ff ff       	call   c000da90 <Directory::Directory(char const*, Process*)>
c0015316:	83 c4 10             	add    esp,0x10
c0015319:	85 db                	test   ebx,ebx
c001531b:	74 32                	je     c001534f <sysCallMakeDir(regs*)+0x62>
c001531d:	83 ec 0c             	sub    esp,0xc
c0015320:	53                   	push   ebx
c0015321:	e8 24 8a ff ff       	call   c000dd4a <Directory::create()>
c0015326:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015329:	89 c6                	mov    esi,eax
c001532b:	e8 96 88 ff ff       	call   c000dbc6 <Directory::close()>
c0015330:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015332:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015335:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015338:	83 c4 10             	add    esp,0x10
c001533b:	31 c0                	xor    eax,eax
c001533d:	59                   	pop    ecx
c001533e:	85 f6                	test   esi,esi
c0015340:	5b                   	pop    ebx
c0015341:	0f 95 c0             	setne  al
c0015344:	5e                   	pop    esi
c0015345:	31 d2                	xor    edx,edx
c0015347:	f7 d8                	neg    eax
c0015349:	83 d2 00             	adc    edx,0x0
c001534c:	f7 da                	neg    edx
c001534e:	c3                   	ret    
c001534f:	59                   	pop    ecx
c0015350:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015355:	ba ff ff ff ff       	mov    edx,0xffffffff
c001535a:	5b                   	pop    ebx
c001535b:	5e                   	pop    esi
c001535c:	c3                   	ret    

c001535d <sysCallWait(regs*)>:
c001535d:	83 ec 10             	sub    esp,0x10
c0015360:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015364:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0015367:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001536a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001536d:	e8 f6 24 00 00       	call   c0017868 <waitTask(int, int*, int)>
c0015372:	83 c4 1c             	add    esp,0x1c
c0015375:	99                   	cdq    
c0015376:	c3                   	ret    

c0015377 <sysCallNotImpl(regs*)>:
c0015377:	83 ec 18             	sub    esp,0x18
c001537a:	68 72 5b 02 c0       	push   0xc0025b72
c001537f:	e8 57 ec ff ff       	call   c0013fdb <Krnl::panic(char const*)>
c0015384:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015389:	ba ff ff ff ff       	mov    edx,0xffffffff
c001538e:	83 c4 1c             	add    esp,0x1c
c0015391:	c3                   	ret    

c0015392 <sysPanic(regs*)>:
c0015392:	83 ec 18             	sub    esp,0x18
c0015395:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015399:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001539c:	e8 3a ec ff ff       	call   c0013fdb <Krnl::panic(char const*)>
c00153a1:	b8 01 00 00 00       	mov    eax,0x1
c00153a6:	31 d2                	xor    edx,edx
c00153a8:	83 c4 1c             	add    esp,0x1c
c00153ab:	c3                   	ret    

c00153ac <sysCallRmdir(regs*)>:
c00153ac:	56                   	push   esi
c00153ad:	53                   	push   ebx
c00153ae:	83 ec 20             	sub    esp,0x20
c00153b1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00153b5:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00153b8:	68 14 01 00 00       	push   0x114
c00153bd:	e8 f5 48 ff ff       	call   c0009cb7 <malloc>
c00153c2:	83 c4 0c             	add    esp,0xc
c00153c5:	89 c3                	mov    ebx,eax
c00153c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00153cc:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00153cf:	56                   	push   esi
c00153d0:	53                   	push   ebx
c00153d1:	e8 5a 81 ff ff       	call   c000d530 <File::File(char const*, Process*)>
c00153d6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00153d9:	e8 a4 83 ff ff       	call   c000d782 <File::unlink()>
c00153de:	83 c4 10             	add    esp,0x10
c00153e1:	85 db                	test   ebx,ebx
c00153e3:	74 14                	je     c00153f9 <sysCallRmdir(regs*)+0x4d>
c00153e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00153e9:	8b 13                	mov    edx,DWORD PTR [ebx]
c00153eb:	83 ec 0c             	sub    esp,0xc
c00153ee:	53                   	push   ebx
c00153ef:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00153f2:	83 c4 10             	add    esp,0x10
c00153f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00153f9:	85 c0                	test   eax,eax
c00153fb:	0f 95 c0             	setne  al
c00153fe:	31 d2                	xor    edx,edx
c0015400:	0f b6 c0             	movzx  eax,al
c0015403:	f7 d8                	neg    eax
c0015405:	83 d2 00             	adc    edx,0x0
c0015408:	83 c4 14             	add    esp,0x14
c001540b:	f7 da                	neg    edx
c001540d:	5b                   	pop    ebx
c001540e:	5e                   	pop    esi
c001540f:	c3                   	ret    

c0015410 <sysCallUnlink(regs*)>:
c0015410:	56                   	push   esi
c0015411:	53                   	push   ebx
c0015412:	83 ec 20             	sub    esp,0x20
c0015415:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015419:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001541c:	68 14 01 00 00       	push   0x114
c0015421:	e8 91 48 ff ff       	call   c0009cb7 <malloc>
c0015426:	83 c4 0c             	add    esp,0xc
c0015429:	89 c3                	mov    ebx,eax
c001542b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015430:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015433:	56                   	push   esi
c0015434:	53                   	push   ebx
c0015435:	e8 f6 80 ff ff       	call   c000d530 <File::File(char const*, Process*)>
c001543a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001543d:	e8 40 83 ff ff       	call   c000d782 <File::unlink()>
c0015442:	83 c4 10             	add    esp,0x10
c0015445:	85 db                	test   ebx,ebx
c0015447:	74 14                	je     c001545d <sysCallUnlink(regs*)+0x4d>
c0015449:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001544d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001544f:	83 ec 0c             	sub    esp,0xc
c0015452:	53                   	push   ebx
c0015453:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0015456:	83 c4 10             	add    esp,0x10
c0015459:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001545d:	85 c0                	test   eax,eax
c001545f:	0f 95 c0             	setne  al
c0015462:	31 d2                	xor    edx,edx
c0015464:	0f b6 c0             	movzx  eax,al
c0015467:	f7 d8                	neg    eax
c0015469:	83 d2 00             	adc    edx,0x0
c001546c:	83 c4 14             	add    esp,0x14
c001546f:	f7 da                	neg    edx
c0015471:	5b                   	pop    ebx
c0015472:	5e                   	pop    esi
c0015473:	c3                   	ret    

c0015474 <sysCallGetArgv(regs*)>:
c0015474:	83 ec 0c             	sub    esp,0xc
c0015477:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001547b:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001547e:	85 c0                	test   eax,eax
c0015480:	78 2b                	js     c00154ad <sysCallGetArgv(regs*)+0x39>
c0015482:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015488:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c001548b:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0015491:	7d 1a                	jge    c00154ad <sysCallGetArgv(regs*)+0x39>
c0015493:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c001549a:	85 c0                	test   eax,eax
c001549c:	74 17                	je     c00154b5 <sysCallGetArgv(regs*)+0x41>
c001549e:	83 ec 08             	sub    esp,0x8
c00154a1:	50                   	push   eax
c00154a2:	ff 72 24             	push   DWORD PTR [edx+0x24]
c00154a5:	e8 8e b2 fe ff       	call   c0000738 <strcpy>
c00154aa:	83 c4 10             	add    esp,0x10
c00154ad:	31 c0                	xor    eax,eax
c00154af:	31 d2                	xor    edx,edx
c00154b1:	83 c4 0c             	add    esp,0xc
c00154b4:	c3                   	ret    
c00154b5:	b8 01 00 00 00       	mov    eax,0x1
c00154ba:	31 d2                	xor    edx,edx
c00154bc:	83 c4 0c             	add    esp,0xc
c00154bf:	c3                   	ret    

c00154c0 <sysCallTTYName(regs*)>:
c00154c0:	56                   	push   esi
c00154c1:	53                   	push   ebx
c00154c2:	53                   	push   ebx
c00154c3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00154c7:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00154ca:	85 c0                	test   eax,eax
c00154cc:	74 5f                	je     c001552d <sysCallTTYName(regs*)+0x6d>
c00154ce:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00154d1:	83 f8 02             	cmp    eax,0x2
c00154d4:	77 3e                	ja     c0015514 <sysCallTTYName(regs*)+0x54>
c00154d6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154db:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00154de:	8b 98 06 05 00 00    	mov    ebx,DWORD PTR [eax+0x506]
c00154e4:	85 db                	test   ebx,ebx
c00154e6:	74 45                	je     c001552d <sysCallTTYName(regs*)+0x6d>
c00154e8:	83 ec 0c             	sub    esp,0xc
c00154eb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00154ed:	53                   	push   ebx
c00154ee:	ff 10                	call   DWORD PTR [eax]
c00154f0:	83 c4 10             	add    esp,0x10
c00154f3:	84 c0                	test   al,al
c00154f5:	74 41                	je     c0015538 <sysCallTTYName(regs*)+0x78>
c00154f7:	83 ec 08             	sub    esp,0x8
c00154fa:	81 c3 82 00 00 00    	add    ebx,0x82
c0015500:	53                   	push   ebx
c0015501:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0015504:	e8 2f b2 fe ff       	call   c0000738 <strcpy>
c0015509:	83 c4 10             	add    esp,0x10
c001550c:	31 c0                	xor    eax,eax
c001550e:	59                   	pop    ecx
c001550f:	31 d2                	xor    edx,edx
c0015511:	5b                   	pop    ebx
c0015512:	5e                   	pop    esi
c0015513:	c3                   	ret    
c0015514:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0015519:	74 bb                	je     c00154d6 <sysCallTTYName(regs*)+0x16>
c001551b:	83 ec 0c             	sub    esp,0xc
c001551e:	50                   	push   eax
c001551f:	e8 ef 65 ff ff       	call   c000bb13 <getFromFileDescriptor(int)>
c0015524:	83 c4 10             	add    esp,0x10
c0015527:	89 c3                	mov    ebx,eax
c0015529:	85 db                	test   ebx,ebx
c001552b:	75 bb                	jne    c00154e8 <sysCallTTYName(regs*)+0x28>
c001552d:	59                   	pop    ecx
c001552e:	b8 01 00 00 00       	mov    eax,0x1
c0015533:	31 d2                	xor    edx,edx
c0015535:	5b                   	pop    ebx
c0015536:	5e                   	pop    esi
c0015537:	c3                   	ret    
c0015538:	59                   	pop    ecx
c0015539:	b8 02 00 00 00       	mov    eax,0x2
c001553e:	31 d2                	xor    edx,edx
c0015540:	5b                   	pop    ebx
c0015541:	5e                   	pop    esi
c0015542:	c3                   	ret    

c0015543 <sysCallUSleep(regs*)>:
c0015543:	83 ec 1c             	sub    esp,0x1c
c0015546:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001554a:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001554d:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0015550:	6a 00                	push   0x0
c0015552:	6a 64                	push   0x64
c0015554:	52                   	push   edx
c0015555:	50                   	push   eax
c0015556:	e8 c5 d1 00 00       	call   c0022720 <__udivdi3>
c001555b:	83 c4 14             	add    esp,0x14
c001555e:	50                   	push   eax
c001555f:	e8 d4 23 00 00       	call   c0017938 <milliTenthSleep(unsigned int)>
c0015564:	31 c0                	xor    eax,eax
c0015566:	31 d2                	xor    edx,edx
c0015568:	83 c4 1c             	add    esp,0x1c
c001556b:	c3                   	ret    

c001556c <sysCallSpawn(regs*)>:
c001556c:	56                   	push   esi
c001556d:	53                   	push   ebx
c001556e:	50                   	push   eax
c001556f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015573:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0015576:	85 c0                	test   eax,eax
c0015578:	75 08                	jne    c0015582 <sysCallSpawn(regs*)+0x16>
c001557a:	59                   	pop    ecx
c001557b:	31 c0                	xor    eax,eax
c001557d:	31 d2                	xor    edx,edx
c001557f:	5b                   	pop    ebx
c0015580:	5e                   	pop    esi
c0015581:	c3                   	ret    
c0015582:	83 ec 0c             	sub    esp,0xc
c0015585:	68 1f 07 00 00       	push   0x71f
c001558a:	e8 28 47 ff ff       	call   c0009cb7 <malloc>
c001558f:	83 c4 10             	add    esp,0x10
c0015592:	89 c6                	mov    esi,eax
c0015594:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0015597:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001559a:	85 c0                	test   eax,eax
c001559c:	75 32                	jne    c00155d0 <sysCallSpawn(regs*)+0x64>
c001559e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00155a3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00155a6:	52                   	push   edx
c00155a7:	50                   	push   eax
c00155a8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00155ab:	56                   	push   esi
c00155ac:	e8 7f 1a 00 00       	call   c0017030 <Process::Process(char const*, Process*, char**)>
c00155b1:	83 c4 10             	add    esp,0x10
c00155b4:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c00155bb:	75 bd                	jne    c001557a <sysCallSpawn(regs*)+0xe>
c00155bd:	83 ec 0c             	sub    esp,0xc
c00155c0:	56                   	push   esi
c00155c1:	e8 56 1f 00 00       	call   c001751c <Process::createUserThread()>
c00155c6:	8b 06                	mov    eax,DWORD PTR [esi]
c00155c8:	83 c4 10             	add    esp,0x10
c00155cb:	99                   	cdq    
c00155cc:	59                   	pop    ecx
c00155cd:	5b                   	pop    ebx
c00155ce:	5e                   	pop    esi
c00155cf:	c3                   	ret    
c00155d0:	31 c0                	xor    eax,eax
c00155d2:	eb d2                	jmp    c00155a6 <sysCallSpawn(regs*)+0x3a>

c00155d4 <sysCallGetEnv(regs*)>:
c00155d4:	57                   	push   edi
c00155d5:	56                   	push   esi
c00155d6:	53                   	push   ebx
c00155d7:	83 ec 1c             	sub    esp,0x1c
c00155da:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00155de:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00155e3:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00155e6:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00155e9:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00155ec:	e8 36 e9 ff ff       	call   c0013f27 <Krnl::getProcessTotalEnvCount(Process*)>
c00155f1:	83 c4 10             	add    esp,0x10
c00155f4:	39 c7                	cmp    edi,eax
c00155f6:	7c 14                	jl     c001560c <sysCallGetEnv(regs*)+0x38>
c00155f8:	85 f6                	test   esi,esi
c00155fa:	75 0b                	jne    c0015607 <sysCallGetEnv(regs*)+0x33>
c00155fc:	83 c4 10             	add    esp,0x10
c00155ff:	31 c0                	xor    eax,eax
c0015601:	5b                   	pop    ebx
c0015602:	31 d2                	xor    edx,edx
c0015604:	5e                   	pop    esi
c0015605:	5f                   	pop    edi
c0015606:	c3                   	ret    
c0015607:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001560a:	eb f0                	jmp    c00155fc <sysCallGetEnv(regs*)+0x28>
c001560c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0015610:	52                   	push   edx
c0015611:	57                   	push   edi
c0015612:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015618:	ff 72 3c             	push   DWORD PTR [edx+0x3c]
c001561b:	50                   	push   eax
c001561c:	e8 26 e9 ff ff       	call   c0013f47 <Krnl::getProcessEnvPair(Process*, int)>
c0015621:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0015624:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015628:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001562c:	83 c4 0c             	add    esp,0xc
c001562f:	85 c9                	test   ecx,ecx
c0015631:	75 23                	jne    c0015656 <sysCallGetEnv(regs*)+0x82>
c0015633:	83 ec 0c             	sub    esp,0xc
c0015636:	50                   	push   eax
c0015637:	e8 5c b0 fe ff       	call   c0000698 <strlen>
c001563c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001563f:	89 c3                	mov    ebx,eax
c0015641:	e8 52 b0 fe ff       	call   c0000698 <strlen>
c0015646:	83 c4 10             	add    esp,0x10
c0015649:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001564d:	83 c4 10             	add    esp,0x10
c0015650:	31 d2                	xor    edx,edx
c0015652:	5b                   	pop    ebx
c0015653:	5e                   	pop    esi
c0015654:	5f                   	pop    edi
c0015655:	c3                   	ret    
c0015656:	83 ec 08             	sub    esp,0x8
c0015659:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001565c:	50                   	push   eax
c001565d:	56                   	push   esi
c001565e:	e8 d5 b0 fe ff       	call   c0000738 <strcpy>
c0015663:	58                   	pop    eax
c0015664:	5a                   	pop    edx
c0015665:	68 8c 5b 02 c0       	push   0xc0025b8c
c001566a:	56                   	push   esi
c001566b:	e8 08 b2 fe ff       	call   c0000878 <strcat>
c0015670:	59                   	pop    ecx
c0015671:	5b                   	pop    ebx
c0015672:	57                   	push   edi
c0015673:	56                   	push   esi
c0015674:	e8 ff b1 fe ff       	call   c0000878 <strcat>
c0015679:	83 c4 10             	add    esp,0x10
c001567c:	e9 7b ff ff ff       	jmp    c00155fc <sysCallGetEnv(regs*)+0x28>

c0015681 <sysAppSettings(regs*)>:
c0015681:	57                   	push   edi
c0015682:	56                   	push   esi
c0015683:	56                   	push   esi
c0015684:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015688:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001568b:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c0015691:	25 e0 1f 00 00       	and    eax,0x1fe0
c0015696:	66 3d c0 09          	cmp    ax,0x9c0
c001569a:	75 2e                	jne    c00156ca <sysAppSettings(regs*)+0x49>
c001569c:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c00156a2:	83 e0 1f             	and    eax,0x1f
c00156a5:	3c 01                	cmp    al,0x1
c00156a7:	74 2c                	je     c00156d5 <sysAppSettings(regs*)+0x54>
c00156a9:	3c 07                	cmp    al,0x7
c00156ab:	0f 84 b3 00 00 00    	je     c0015764 <sysAppSettings(regs*)+0xe3>
c00156b1:	84 c0                	test   al,al
c00156b3:	0f 84 d2 00 00 00    	je     c001578b <sysAppSettings(regs*)+0x10a>
c00156b9:	3c 08                	cmp    al,0x8
c00156bb:	74 63                	je     c0015720 <sysAppSettings(regs*)+0x9f>
c00156bd:	59                   	pop    ecx
c00156be:	0f b6 c0             	movzx  eax,al
c00156c1:	5e                   	pop    esi
c00156c2:	05 e8 03 00 00       	add    eax,0x3e8
c00156c7:	5f                   	pop    edi
c00156c8:	99                   	cdq    
c00156c9:	c3                   	ret    
c00156ca:	b8 01 00 00 00       	mov    eax,0x1
c00156cf:	59                   	pop    ecx
c00156d0:	31 d2                	xor    edx,edx
c00156d2:	5e                   	pop    esi
c00156d3:	5f                   	pop    edi
c00156d4:	c3                   	ret    
c00156d5:	50                   	push   eax
c00156d6:	68 00 01 00 00       	push   0x100
c00156db:	6a 00                	push   0x0
c00156dd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00156e2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00156e5:	83 c0 0c             	add    eax,0xc
c00156e8:	50                   	push   eax
c00156e9:	e8 8e af fe ff       	call   c000067c <memset>
c00156ee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00156f3:	b9 ff 00 00 00       	mov    ecx,0xff
c00156f8:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00156fb:	83 c7 0c             	add    edi,0xc
c00156fe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015700:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015705:	5a                   	pop    edx
c0015706:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015709:	59                   	pop    ecx
c001570a:	8d 50 0c             	lea    edx,[eax+0xc]
c001570d:	52                   	push   edx
c001570e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0015714:	e8 2b 55 ff ff       	call   c000ac44 <VgaText::setTitle(char*)>
c0015719:	83 c4 10             	add    esp,0x10
c001571c:	31 c0                	xor    eax,eax
c001571e:	eb af                	jmp    c00156cf <sysAppSettings(regs*)+0x4e>
c0015720:	83 ec 08             	sub    esp,0x8
c0015723:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c0015729:	83 e0 0f             	and    eax,0xf
c001572c:	50                   	push   eax
c001572d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015732:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015735:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001573b:	e8 f4 54 ff ff       	call   c000ac34 <VgaText::setTitleColour(VgaColour)>
c0015740:	5f                   	pop    edi
c0015741:	58                   	pop    eax
c0015742:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c0015748:	c1 e8 04             	shr    eax,0x4
c001574b:	83 e0 0f             	and    eax,0xf
c001574e:	50                   	push   eax
c001574f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015754:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015757:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001575d:	e8 c2 54 ff ff       	call   c000ac24 <VgaText::setTitleTextColour(VgaColour)>
c0015762:	eb b5                	jmp    c0015719 <sysAppSettings(regs*)+0x98>
c0015764:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015769:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001576c:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015772:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c0015778:	c0 e8 06             	shr    al,0x6
c001577b:	83 e0 01             	and    eax,0x1
c001577e:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c0015784:	31 c0                	xor    eax,eax
c0015786:	e9 44 ff ff ff       	jmp    c00156cf <sysAppSettings(regs*)+0x4e>
c001578b:	b8 02 00 00 00       	mov    eax,0x2
c0015790:	e9 3a ff ff ff       	jmp    c00156cf <sysAppSettings(regs*)+0x4e>

c0015795 <sysSetFatAttrib(regs*)>:
c0015795:	57                   	push   edi
c0015796:	56                   	push   esi
c0015797:	53                   	push   ebx
c0015798:	83 ec 1c             	sub    esp,0x1c
c001579b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001579f:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00157a2:	68 14 01 00 00       	push   0x114
c00157a7:	e8 0b 45 ff ff       	call   c0009cb7 <malloc>
c00157ac:	83 c4 0c             	add    esp,0xc
c00157af:	89 c3                	mov    ebx,eax
c00157b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00157b6:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00157b9:	57                   	push   edi
c00157ba:	53                   	push   ebx
c00157bb:	e8 70 7d ff ff       	call   c000d530 <File::File(char const*, Process*)>
c00157c0:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00157c3:	83 c4 0c             	add    esp,0xc
c00157c6:	0f b6 d4             	movzx  edx,ah
c00157c9:	0f b6 c0             	movzx  eax,al
c00157cc:	52                   	push   edx
c00157cd:	50                   	push   eax
c00157ce:	53                   	push   ebx
c00157cf:	e8 48 80 ff ff       	call   c000d81c <File::chfatattr(unsigned char, unsigned char)>
c00157d4:	83 c4 10             	add    esp,0x10
c00157d7:	85 db                	test   ebx,ebx
c00157d9:	74 14                	je     c00157ef <sysSetFatAttrib(regs*)+0x5a>
c00157db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00157df:	8b 13                	mov    edx,DWORD PTR [ebx]
c00157e1:	83 ec 0c             	sub    esp,0xc
c00157e4:	53                   	push   ebx
c00157e5:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00157e8:	83 c4 10             	add    esp,0x10
c00157eb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00157ef:	85 c0                	test   eax,eax
c00157f1:	0f 95 c0             	setne  al
c00157f4:	31 d2                	xor    edx,edx
c00157f6:	0f b6 c0             	movzx  eax,al
c00157f9:	f7 d8                	neg    eax
c00157fb:	83 d2 00             	adc    edx,0x0
c00157fe:	83 c4 10             	add    esp,0x10
c0015801:	f7 da                	neg    edx
c0015803:	5b                   	pop    ebx
c0015804:	5e                   	pop    esi
c0015805:	5f                   	pop    edi
c0015806:	c3                   	ret    

c0015807 <sysPipe(regs*)>:
c0015807:	57                   	push   edi
c0015808:	56                   	push   esi
c0015809:	53                   	push   ebx
c001580a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001580e:	83 ec 0c             	sub    esp,0xc
c0015811:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0015814:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0015817:	6a 20                	push   0x20
c0015819:	e8 99 44 ff ff       	call   c0009cb7 <malloc>
c001581e:	89 c3                	mov    ebx,eax
c0015820:	58                   	pop    eax
c0015821:	5a                   	pop    edx
c0015822:	68 00 50 00 00       	push   0x5000
c0015827:	53                   	push   ebx
c0015828:	e8 8f 51 ff ff       	call   c000a9bc <Pipe::Pipe(int)>
c001582d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015830:	e8 e9 5f ff ff       	call   c000b81e <UnixFile::getFileDescriptor()>
c0015835:	89 07                	mov    DWORD PTR [edi],eax
c0015837:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001583a:	e8 df 5f ff ff       	call   c000b81e <UnixFile::getFileDescriptor()>
c001583f:	83 c4 10             	add    esp,0x10
c0015842:	89 06                	mov    DWORD PTR [esi],eax
c0015844:	31 d2                	xor    edx,edx
c0015846:	5b                   	pop    ebx
c0015847:	31 c0                	xor    eax,eax
c0015849:	5e                   	pop    esi
c001584a:	5f                   	pop    edi
c001584b:	c3                   	ret    

c001584c <sysGetUnixTime(regs*)>:
c001584c:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c0015851:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0015857:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001585b:	e9 2e 87 ff ff       	jmp    c000df8e <Clock::timeInSecondsLocal()>

c0015860 <string_ends_with(char const*, char const*)>:
c0015860:	57                   	push   edi
c0015861:	56                   	push   esi
c0015862:	53                   	push   ebx
c0015863:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015867:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001586b:	83 ec 0c             	sub    esp,0xc
c001586e:	53                   	push   ebx
c001586f:	e8 24 ae fe ff       	call   c0000698 <strlen>
c0015874:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015877:	89 c6                	mov    esi,eax
c0015879:	e8 1a ae fe ff       	call   c0000698 <strlen>
c001587e:	83 c4 10             	add    esp,0x10
c0015881:	39 c6                	cmp    esi,eax
c0015883:	7d 06                	jge    c001588b <string_ends_with(char const*, char const*)+0x2b>
c0015885:	5b                   	pop    ebx
c0015886:	31 c0                	xor    eax,eax
c0015888:	5e                   	pop    esi
c0015889:	5f                   	pop    edi
c001588a:	c3                   	ret    
c001588b:	83 ec 08             	sub    esp,0x8
c001588e:	29 c6                	sub    esi,eax
c0015890:	57                   	push   edi
c0015891:	01 f3                	add    ebx,esi
c0015893:	53                   	push   ebx
c0015894:	e8 2b af fe ff       	call   c00007c4 <strcmp>
c0015899:	83 c4 10             	add    esp,0x10
c001589c:	85 c0                	test   eax,eax
c001589e:	5b                   	pop    ebx
c001589f:	0f 94 c0             	sete   al
c00158a2:	5e                   	pop    esi
c00158a3:	0f b6 c0             	movzx  eax,al
c00158a6:	5f                   	pop    edi
c00158a7:	c3                   	ret    

c00158a8 <sysCallOpen(regs*)>:
c00158a8:	56                   	push   esi
c00158a9:	53                   	push   ebx
c00158aa:	81 ec 04 01 00 00    	sub    esp,0x104
c00158b0:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c00158b7:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00158ba:	85 c9                	test   ecx,ecx
c00158bc:	0f 84 ad 01 00 00    	je     c0015a6f <sysCallOpen(regs*)+0x1c7>
c00158c2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00158c5:	85 c0                	test   eax,eax
c00158c7:	0f 84 a2 01 00 00    	je     c0015a6f <sysCallOpen(regs*)+0x1c7>
c00158cd:	52                   	push   edx
c00158ce:	68 8e 5b 02 c0       	push   0xc0025b8e
c00158d3:	50                   	push   eax
c00158d4:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00158d8:	56                   	push   esi
c00158d9:	e8 a8 7a ff ff       	call   c000d386 <Fs::standardiseFiles(char*, char const*, char const*)>
c00158de:	89 34 24             	mov    DWORD PTR [esp],esi
c00158e1:	e8 b2 ad fe ff       	call   c0000698 <strlen>
c00158e6:	83 c4 10             	add    esp,0x10
c00158e9:	48                   	dec    eax
c00158ea:	74 1d                	je     c0015909 <sysCallOpen(regs*)+0x61>
c00158ec:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c00158ef:	eb 0f                	jmp    c0015900 <sysCallOpen(regs*)+0x58>
c00158f1:	80 fa 3a             	cmp    dl,0x3a
c00158f4:	74 0f                	je     c0015905 <sysCallOpen(regs*)+0x5d>
c00158f6:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c00158fa:	48                   	dec    eax
c00158fb:	74 0c                	je     c0015909 <sysCallOpen(regs*)+0x61>
c00158fd:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0015900:	80 fa 2e             	cmp    dl,0x2e
c0015903:	75 ec                	jne    c00158f1 <sysCallOpen(regs*)+0x49>
c0015905:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0015909:	83 ec 08             	sub    esp,0x8
c001590c:	68 92 5b 02 c0       	push   0xc0025b92
c0015911:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015914:	e8 47 ff ff ff       	call   c0015860 <string_ends_with(char const*, char const*)>
c0015919:	83 c4 10             	add    esp,0x10
c001591c:	85 c0                	test   eax,eax
c001591e:	74 1d                	je     c001593d <sysCallOpen(regs*)+0x95>
c0015920:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015923:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0015929:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015930:	81 c4 04 01 00 00    	add    esp,0x104
c0015936:	31 c0                	xor    eax,eax
c0015938:	31 d2                	xor    edx,edx
c001593a:	5b                   	pop    ebx
c001593b:	5e                   	pop    esi
c001593c:	c3                   	ret    
c001593d:	83 ec 08             	sub    esp,0x8
c0015940:	68 97 5b 02 c0       	push   0xc0025b97
c0015945:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015948:	e8 13 ff ff ff       	call   c0015860 <string_ends_with(char const*, char const*)>
c001594d:	83 c4 10             	add    esp,0x10
c0015950:	85 c0                	test   eax,eax
c0015952:	75 cc                	jne    c0015920 <sysCallOpen(regs*)+0x78>
c0015954:	83 ec 08             	sub    esp,0x8
c0015957:	68 93 5b 02 c0       	push   0xc0025b93
c001595c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001595f:	e8 60 ae fe ff       	call   c00007c4 <strcmp>
c0015964:	83 c4 10             	add    esp,0x10
c0015967:	85 c0                	test   eax,eax
c0015969:	74 b5                	je     c0015920 <sysCallOpen(regs*)+0x78>
c001596b:	83 ec 08             	sub    esp,0x8
c001596e:	68 92 5b 02 c0       	push   0xc0025b92
c0015973:	56                   	push   esi
c0015974:	e8 e7 fe ff ff       	call   c0015860 <string_ends_with(char const*, char const*)>
c0015979:	83 c4 10             	add    esp,0x10
c001597c:	85 c0                	test   eax,eax
c001597e:	75 a0                	jne    c0015920 <sysCallOpen(regs*)+0x78>
c0015980:	83 ec 08             	sub    esp,0x8
c0015983:	68 9c 5b 02 c0       	push   0xc0025b9c
c0015988:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001598b:	e8 d0 fe ff ff       	call   c0015860 <string_ends_with(char const*, char const*)>
c0015990:	83 c4 10             	add    esp,0x10
c0015993:	85 c0                	test   eax,eax
c0015995:	0f 85 e7 00 00 00    	jne    c0015a82 <sysCallOpen(regs*)+0x1da>
c001599b:	83 ec 08             	sub    esp,0x8
c001599e:	68 a1 5b 02 c0       	push   0xc0025ba1
c00159a3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00159a6:	e8 b5 fe ff ff       	call   c0015860 <string_ends_with(char const*, char const*)>
c00159ab:	83 c4 10             	add    esp,0x10
c00159ae:	85 c0                	test   eax,eax
c00159b0:	0f 85 cc 00 00 00    	jne    c0015a82 <sysCallOpen(regs*)+0x1da>
c00159b6:	83 ec 08             	sub    esp,0x8
c00159b9:	68 9d 5b 02 c0       	push   0xc0025b9d
c00159be:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00159c1:	e8 fe ad fe ff       	call   c00007c4 <strcmp>
c00159c6:	83 c4 10             	add    esp,0x10
c00159c9:	85 c0                	test   eax,eax
c00159cb:	0f 84 b1 00 00 00    	je     c0015a82 <sysCallOpen(regs*)+0x1da>
c00159d1:	83 ec 08             	sub    esp,0x8
c00159d4:	68 9c 5b 02 c0       	push   0xc0025b9c
c00159d9:	56                   	push   esi
c00159da:	e8 81 fe ff ff       	call   c0015860 <string_ends_with(char const*, char const*)>
c00159df:	83 c4 10             	add    esp,0x10
c00159e2:	85 c0                	test   eax,eax
c00159e4:	0f 85 98 00 00 00    	jne    c0015a82 <sysCallOpen(regs*)+0x1da>
c00159ea:	83 ec 0c             	sub    esp,0xc
c00159ed:	68 14 01 00 00       	push   0x114
c00159f2:	e8 c0 42 ff ff       	call   c0009cb7 <malloc>
c00159f7:	83 c4 0c             	add    esp,0xc
c00159fa:	89 c6                	mov    esi,eax
c00159fc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a01:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015a04:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015a07:	56                   	push   esi
c0015a08:	e8 23 7b ff ff       	call   c000d530 <File::File(char const*, Process*)>
c0015a0d:	83 c4 10             	add    esp,0x10
c0015a10:	85 f6                	test   esi,esi
c0015a12:	74 5b                	je     c0015a6f <sysCallOpen(regs*)+0x1c7>
c0015a14:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0015a17:	0f b6 c2             	movzx  eax,dl
c0015a1a:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0015a1d:	89 d0                	mov    eax,edx
c0015a1f:	83 e0 01             	and    eax,0x1
c0015a22:	f6 c2 02             	test   dl,0x2
c0015a25:	74 03                	je     c0015a2a <sysCallOpen(regs*)+0x182>
c0015a27:	83 c8 02             	or     eax,0x2
c0015a2a:	f6 c2 04             	test   dl,0x4
c0015a2d:	74 03                	je     c0015a32 <sysCallOpen(regs*)+0x18a>
c0015a2f:	83 c8 04             	or     eax,0x4
c0015a32:	f6 c2 08             	test   dl,0x8
c0015a35:	74 03                	je     c0015a3a <sysCallOpen(regs*)+0x192>
c0015a37:	83 c8 0a             	or     eax,0xa
c0015a3a:	83 e2 10             	and    edx,0x10
c0015a3d:	74 03                	je     c0015a42 <sysCallOpen(regs*)+0x19a>
c0015a3f:	83 c8 12             	or     eax,0x12
c0015a42:	83 ec 08             	sub    esp,0x8
c0015a45:	50                   	push   eax
c0015a46:	56                   	push   esi
c0015a47:	e8 be 7b ff ff       	call   c000d60a <File::open(FileOpenMode)>
c0015a4c:	83 c4 10             	add    esp,0x10
c0015a4f:	85 c0                	test   eax,eax
c0015a51:	75 1c                	jne    c0015a6f <sysCallOpen(regs*)+0x1c7>
c0015a53:	83 ec 0c             	sub    esp,0xc
c0015a56:	56                   	push   esi
c0015a57:	e8 c2 5d ff ff       	call   c000b81e <UnixFile::getFileDescriptor()>
c0015a5c:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0015a5f:	83 c4 10             	add    esp,0x10
c0015a62:	89 02                	mov    DWORD PTR [edx],eax
c0015a64:	c1 f8 1f             	sar    eax,0x1f
c0015a67:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015a6a:	e9 c1 fe ff ff       	jmp    c0015930 <sysCallOpen(regs*)+0x88>
c0015a6f:	81 c4 04 01 00 00    	add    esp,0x104
c0015a75:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015a7a:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015a7f:	5b                   	pop    ebx
c0015a80:	5e                   	pop    esi
c0015a81:	c3                   	ret    
c0015a82:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015a85:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0015a8b:	e9 99 fe ff ff       	jmp    c0015929 <sysCallOpen(regs*)+0x81>

c0015a90 <Sys::loadSyscalls()>:
c0015a90:	c7 05 60 8a 02 c0 01 4d 01 c0 	mov    DWORD PTR ds:0xc0028a60,0xc0014d01
c0015a9a:	c7 05 64 8a 02 c0 f6 48 01 c0 	mov    DWORD PTR ds:0xc0028a64,0xc00148f6
c0015aa4:	c7 05 68 8a 02 c0 e7 4a 01 c0 	mov    DWORD PTR ds:0xc0028a68,0xc0014ae7
c0015aae:	c7 05 6c 8a 02 c0 37 4c 01 c0 	mov    DWORD PTR ds:0xc0028a6c,0xc0014c37
c0015ab8:	c7 05 70 8a 02 c0 7f 4a 01 c0 	mov    DWORD PTR ds:0xc0028a70,0xc0014a7f
c0015ac2:	c7 05 74 8a 02 c0 2d 49 01 c0 	mov    DWORD PTR ds:0xc0028a74,0xc001492d
c0015acc:	c7 05 78 8a 02 c0 0e 49 01 c0 	mov    DWORD PTR ds:0xc0028a78,0xc001490e
c0015ad6:	c7 05 7c 8a 02 c0 3c 4b 01 c0 	mov    DWORD PTR ds:0xc0028a7c,0xc0014b3c
c0015ae0:	c7 05 84 8a 02 c0 c4 51 01 c0 	mov    DWORD PTR ds:0xc0028a84,0xc00151c4
c0015aea:	c7 05 80 8a 02 c0 a8 58 01 c0 	mov    DWORD PTR ds:0xc0028a80,0xc00158a8
c0015af4:	c7 05 88 8a 02 c0 24 52 01 c0 	mov    DWORD PTR ds:0xc0028a88,0xc0015224
c0015afe:	c7 05 8c 8a 02 c0 07 4f 01 c0 	mov    DWORD PTR ds:0xc0028a8c,0xc0014f07
c0015b08:	c7 05 90 8a 02 c0 39 4d 01 c0 	mov    DWORD PTR ds:0xc0028a90,0xc0014d39
c0015b12:	c7 05 94 8a 02 c0 3e 4d 01 c0 	mov    DWORD PTR ds:0xc0028a94,0xc0014d3e
c0015b1c:	c7 05 98 8a 02 c0 ed 52 01 c0 	mov    DWORD PTR ds:0xc0028a98,0xc00152ed
c0015b26:	c7 05 9c 8a 02 c0 99 52 01 c0 	mov    DWORD PTR ds:0xc0028a9c,0xc0015299
c0015b30:	c7 05 a0 8a 02 c0 e0 4f 01 c0 	mov    DWORD PTR ds:0xc0028aa0,0xc0014fe0
c0015b3a:	c7 05 a4 8a 02 c0 37 50 01 c0 	mov    DWORD PTR ds:0xc0028aa4,0xc0015037
c0015b44:	c7 05 a8 8a 02 c0 a3 50 01 c0 	mov    DWORD PTR ds:0xc0028aa8,0xc00150a3
c0015b4e:	c7 05 ac 8a 02 c0 43 4d 01 c0 	mov    DWORD PTR ds:0xc0028aac,0xc0014d43
c0015b58:	c7 05 b0 8a 02 c0 5d 53 01 c0 	mov    DWORD PTR ds:0xc0028ab0,0xc001535d
c0015b62:	c7 05 b4 8a 02 c0 77 53 01 c0 	mov    DWORD PTR ds:0xc0028ab4,0xc0015377
c0015b6c:	c7 05 b8 8a 02 c0 77 53 01 c0 	mov    DWORD PTR ds:0xc0028ab8,0xc0015377
c0015b76:	c7 05 bc 8a 02 c0 ac 53 01 c0 	mov    DWORD PTR ds:0xc0028abc,0xc00153ac
c0015b80:	c7 05 c0 8a 02 c0 10 54 01 c0 	mov    DWORD PTR ds:0xc0028ac0,0xc0015410
c0015b8a:	c7 05 c4 8a 02 c0 4d 4d 01 c0 	mov    DWORD PTR ds:0xc0028ac4,0xc0014d4d
c0015b94:	c7 05 c8 8a 02 c0 74 54 01 c0 	mov    DWORD PTR ds:0xc0028ac8,0xc0015474
c0015b9e:	c7 05 cc 8a 02 c0 c4 4e 01 c0 	mov    DWORD PTR ds:0xc0028acc,0xc0014ec4
c0015ba8:	c7 05 d0 8a 02 c0 c0 54 01 c0 	mov    DWORD PTR ds:0xc0028ad0,0xc00154c0
c0015bb2:	c7 05 d4 8a 02 c0 86 4f 01 c0 	mov    DWORD PTR ds:0xc0028ad4,0xc0014f86
c0015bbc:	c7 05 d8 8a 02 c0 43 55 01 c0 	mov    DWORD PTR ds:0xc0028ad8,0xc0015543
c0015bc6:	c7 05 dc 8a 02 c0 15 51 01 c0 	mov    DWORD PTR ds:0xc0028adc,0xc0015115
c0015bd0:	c7 05 e0 8a 02 c0 6c 55 01 c0 	mov    DWORD PTR ds:0xc0028ae0,0xc001556c
c0015bda:	c7 05 e4 8a 02 c0 d4 55 01 c0 	mov    DWORD PTR ds:0xc0028ae4,0xc00155d4
c0015be4:	c7 05 e8 8a 02 c0 81 56 01 c0 	mov    DWORD PTR ds:0xc0028ae8,0xc0015681
c0015bee:	c7 05 ec 8a 02 c0 5d 4d 01 c0 	mov    DWORD PTR ds:0xc0028aec,0xc0014d5d
c0015bf8:	c7 05 f0 8a 02 c0 c7 4d 01 c0 	mov    DWORD PTR ds:0xc0028af0,0xc0014dc7
c0015c02:	c7 05 f4 8a 02 c0 11 4e 01 c0 	mov    DWORD PTR ds:0xc0028af4,0xc0014e11
c0015c0c:	c7 05 f8 8a 02 c0 95 57 01 c0 	mov    DWORD PTR ds:0xc0028af8,0xc0015795
c0015c16:	c7 05 fc 8a 02 c0 92 53 01 c0 	mov    DWORD PTR ds:0xc0028afc,0xc0015392
c0015c20:	c7 05 00 8b 02 c0 66 4e 01 c0 	mov    DWORD PTR ds:0xc0028b00,0xc0014e66
c0015c2a:	c7 05 04 8b 02 c0 07 58 01 c0 	mov    DWORD PTR ds:0xc0028b04,0xc0015807
c0015c34:	c7 05 08 8b 02 c0 4c 58 01 c0 	mov    DWORD PTR ds:0xc0028b08,0xc001584c
c0015c3e:	c7 05 0c 8b 02 c0 d7 49 01 c0 	mov    DWORD PTR ds:0xc0028b0c,0xc00149d7
c0015c48:	c7 05 10 8b 02 c0 58 4b 01 c0 	mov    DWORD PTR ds:0xc0028b10,0xc0014b58
c0015c52:	c7 05 14 8b 02 c0 ed 4b 01 c0 	mov    DWORD PTR ds:0xc0028b14,0xc0014bed
c0015c5c:	c7 05 18 8b 02 c0 c0 48 01 c0 	mov    DWORD PTR ds:0xc0028b18,0xc00148c0
c0015c66:	c7 05 1c 8b 02 c0 9f 4c 01 c0 	mov    DWORD PTR ds:0xc0028b1c,0xc0014c9f
c0015c70:	c7 05 20 8b 02 c0 39 49 01 c0 	mov    DWORD PTR ds:0xc0028b20,0xc0014939
c0015c7a:	c7 05 24 8b 02 c0 53 49 01 c0 	mov    DWORD PTR ds:0xc0028b24,0xc0014953
c0015c84:	c3                   	ret    

c0015c85 <Sys::systemCall(regs*, void*)>:
c0015c85:	53                   	push   ebx
c0015c86:	83 ec 08             	sub    esp,0x8
c0015c89:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015c8d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0015c90:	83 f8 7f             	cmp    eax,0x7f
c0015c93:	77 16                	ja     c0015cab <Sys::systemCall(regs*, void*)+0x26>
c0015c95:	8b 14 85 60 8a 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd75a0]
c0015c9c:	85 d2                	test   edx,edx
c0015c9e:	74 0b                	je     c0015cab <Sys::systemCall(regs*, void*)+0x26>
c0015ca0:	83 ec 0c             	sub    esp,0xc
c0015ca3:	53                   	push   ebx
c0015ca4:	ff d2                	call   edx
c0015ca6:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0015ca9:	eb 0d                	jmp    c0015cb8 <Sys::systemCall(regs*, void*)+0x33>
c0015cab:	52                   	push   edx
c0015cac:	52                   	push   edx
c0015cad:	50                   	push   eax
c0015cae:	68 a6 5b 02 c0       	push   0xc0025ba6
c0015cb3:	e8 0d 73 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0015cb8:	83 c4 10             	add    esp,0x10
c0015cbb:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0015cc0:	31 d2                	xor    edx,edx
c0015cc2:	83 c4 08             	add    esp,0x8
c0015cc5:	5b                   	pop    ebx
c0015cc6:	c3                   	ret    

c0015cc7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0015cc7:	55                   	push   ebp
c0015cc8:	57                   	push   edi
c0015cc9:	56                   	push   esi
c0015cca:	53                   	push   ebx
c0015ccb:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0015cd1:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0015cd8:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c0015cdf:	85 c0                	test   eax,eax
c0015ce1:	0f 95 c1             	setne  cl
c0015ce4:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0015cec:	0f 94 c2             	sete   dl
c0015cef:	84 d1                	test   cl,dl
c0015cf1:	74 23                	je     c0015d16 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c0015cf3:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c0015cf9:	74 1b                	je     c0015d16 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c0015cfb:	81 c3 00 10 00 00    	add    ebx,0x1000
c0015d01:	89 da                	mov    edx,ebx
c0015d03:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0015d09:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c0015d0f:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c0015d16:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c0015d1d:	05 ff 0f 00 00       	add    eax,0xfff
c0015d22:	83 ec 0c             	sub    esp,0xc
c0015d25:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015d29:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c0015d2f:	c1 e8 0c             	shr    eax,0xc
c0015d32:	89 fe                	mov    esi,edi
c0015d34:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015d38:	c1 ee 0c             	shr    esi,0xc
c0015d3b:	6a 01                	push   0x1
c0015d3d:	e8 27 5f ff ff       	call   c000bc69 <Virt::allocateKernelVirtualPages(int)>
c0015d42:	89 c5                	mov    ebp,eax
c0015d44:	58                   	pop    eax
c0015d45:	5a                   	pop    edx
c0015d46:	56                   	push   esi
c0015d47:	68 ba 5b 02 c0       	push   0xc0025bba
c0015d4c:	e8 74 72 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0015d51:	59                   	pop    ecx
c0015d52:	58                   	pop    eax
c0015d53:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015d57:	68 cc 5b 02 c0       	push   0xc0025bcc
c0015d5c:	e8 64 72 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0015d61:	83 c4 10             	add    esp,0x10
c0015d64:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c0015d6a:	0f 86 31 01 00 00    	jbe    c0015ea1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c0015d70:	c1 e6 0c             	shl    esi,0xc
c0015d73:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015d76:	8d 04 1e             	lea    eax,[esi+ebx*1]
c0015d79:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015d7d:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0015d84:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015d87:	01 df                	add    edi,ebx
c0015d89:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c0015d8c:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0015d90:	0f 84 08 01 00 00    	je     c0015e9e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c0015d96:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0015d9c:	76 05                	jbe    c0015da3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c0015d9e:	bf 00 10 00 00       	mov    edi,0x1000
c0015da3:	83 ec 0c             	sub    esp,0xc
c0015da6:	31 d2                	xor    edx,edx
c0015da8:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0015daf:	8b 08                	mov    ecx,DWORD PTR [eax]
c0015db1:	8d 44 24 28          	lea    eax,[esp+0x28]
c0015db5:	50                   	push   eax
c0015db6:	8d 74 24 30          	lea    esi,[esp+0x30]
c0015dba:	56                   	push   esi
c0015dbb:	52                   	push   edx
c0015dbc:	57                   	push   edi
c0015dbd:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0015dc4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015dc7:	83 c4 20             	add    esp,0x20
c0015dca:	85 c0                	test   eax,eax
c0015dcc:	74 0a                	je     c0015dd8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c0015dce:	53                   	push   ebx
c0015dcf:	53                   	push   ebx
c0015dd0:	50                   	push   eax
c0015dd1:	68 de 5b 02 c0       	push   0xc0025bde
c0015dd6:	eb 0f                	jmp    c0015de7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c0015dd8:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0015ddc:	74 20                	je     c0015dfe <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c0015dde:	51                   	push   ecx
c0015ddf:	51                   	push   ecx
c0015de0:	6a 00                	push   0x0
c0015de2:	68 09 5c 02 c0       	push   0xc0025c09
c0015de7:	e8 d9 71 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0015dec:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015def:	e8 69 61 ff ff       	call   c000bf5d <Virt::freeKernelVirtualPages(unsigned long)>
c0015df4:	83 c4 10             	add    esp,0x10
c0015df7:	31 c0                	xor    eax,eax
c0015df9:	e9 68 01 00 00       	jmp    c0015f66 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c0015dfe:	fa                   	cli    
c0015dff:	ff 05 28 94 02 c0    	inc    DWORD PTR ds:0xc0029428
c0015e05:	e8 64 45 ff ff       	call   c000a36e <Phys::allocatePage()>
c0015e0a:	6a 07                	push   0x7
c0015e0c:	89 c7                	mov    edi,eax
c0015e0e:	55                   	push   ebp
c0015e0f:	50                   	push   eax
c0015e10:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e15:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015e18:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0015e1e:	e8 b1 64 ff ff       	call   c000c2d4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0015e23:	83 c4 0c             	add    esp,0xc
c0015e26:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0015e2d:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0015e33:	6a 00                	push   0x0
c0015e35:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e3a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015e3d:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0015e43:	e8 e6 62 ff ff       	call   c000c12e <VAS::mapOtherVASIn(bool, VAS*)>
c0015e48:	58                   	pop    eax
c0015e49:	5a                   	pop    edx
c0015e4a:	68 07 0c 00 00       	push   0xc07
c0015e4f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0015e53:	57                   	push   edi
c0015e54:	89 ef                	mov    edi,ebp
c0015e56:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0015e5d:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0015e63:	6a 00                	push   0x0
c0015e65:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e6a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015e6d:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0015e73:	e8 1a 68 ff ff       	call   c000c692 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0015e78:	b9 00 10 00 00       	mov    ecx,0x1000
c0015e7d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015e7f:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c0015e84:	83 c4 20             	add    esp,0x20
c0015e87:	48                   	dec    eax
c0015e88:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c0015e8d:	85 c0                	test   eax,eax
c0015e8f:	75 01                	jne    c0015e92 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c0015e91:	fb                   	sti    
c0015e92:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c0015e99:	e9 df fe ff ff       	jmp    c0015d7d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c0015e9e:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0015ea1:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c0015ea9:	0f 86 a9 00 00 00    	jbe    c0015f58 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c0015eaf:	fa                   	cli    
c0015eb0:	ff 05 28 94 02 c0    	inc    DWORD PTR ds:0xc0029428
c0015eb6:	51                   	push   ecx
c0015eb7:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0015ebe:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0015ec4:	6a 00                	push   0x0
c0015ec6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ecb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015ece:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0015ed4:	e8 55 62 ff ff       	call   c000c12e <VAS::mapOtherVASIn(bool, VAS*)>
c0015ed9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0015edd:	c1 e6 0c             	shl    esi,0xc
c0015ee0:	01 de                	add    esi,ebx
c0015ee2:	83 c4 10             	add    esp,0x10
c0015ee5:	39 de                	cmp    esi,ebx
c0015ee7:	74 61                	je     c0015f4a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c0015ee9:	e8 80 44 ff ff       	call   c000a36e <Phys::allocatePage()>
c0015eee:	6a 07                	push   0x7
c0015ef0:	89 c7                	mov    edi,eax
c0015ef2:	55                   	push   ebp
c0015ef3:	50                   	push   eax
c0015ef4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ef9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015efc:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0015f02:	e8 cd 63 ff ff       	call   c000c2d4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0015f07:	58                   	pop    eax
c0015f08:	5a                   	pop    edx
c0015f09:	68 07 0c 00 00       	push   0xc07
c0015f0e:	53                   	push   ebx
c0015f0f:	81 c3 00 10 00 00    	add    ebx,0x1000
c0015f15:	57                   	push   edi
c0015f16:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0015f1d:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0015f23:	6a 00                	push   0x0
c0015f25:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f2a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015f2d:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0015f33:	e8 5a 67 ff ff       	call   c000c692 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0015f38:	83 c4 1c             	add    esp,0x1c
c0015f3b:	68 00 10 00 00       	push   0x1000
c0015f40:	6a 00                	push   0x0
c0015f42:	55                   	push   ebp
c0015f43:	e8 34 a7 fe ff       	call   c000067c <memset>
c0015f48:	eb 98                	jmp    c0015ee2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c0015f4a:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c0015f4f:	48                   	dec    eax
c0015f50:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c0015f55:	75 01                	jne    c0015f58 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c0015f57:	fb                   	sti    
c0015f58:	83 ec 0c             	sub    esp,0xc
c0015f5b:	55                   	push   ebp
c0015f5c:	e8 fc 5f ff ff       	call   c000bf5d <Virt::freeKernelVirtualPages(unsigned long)>
c0015f61:	83 c4 10             	add    esp,0x10
c0015f64:	b0 01                	mov    al,0x1
c0015f66:	81 c4 2c 10 00 00    	add    esp,0x102c
c0015f6c:	5b                   	pop    ebx
c0015f6d:	5e                   	pop    esi
c0015f6e:	5f                   	pop    edi
c0015f6f:	5d                   	pop    ebp
c0015f70:	c3                   	ret    

c0015f71 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0015f71:	55                   	push   ebp
c0015f72:	57                   	push   edi
c0015f73:	56                   	push   esi
c0015f74:	53                   	push   ebx
c0015f75:	83 ec 48             	sub    esp,0x48
c0015f78:	68 14 01 00 00       	push   0x114
c0015f7d:	e8 35 3d ff ff       	call   c0009cb7 <malloc>
c0015f82:	83 c4 0c             	add    esp,0xc
c0015f85:	89 c6                	mov    esi,eax
c0015f87:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0015f8b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0015f8f:	50                   	push   eax
c0015f90:	e8 9b 75 ff ff       	call   c000d530 <File::File(char const*, Process*)>
c0015f95:	58                   	pop    eax
c0015f96:	5a                   	pop    edx
c0015f97:	6a 01                	push   0x1
c0015f99:	56                   	push   esi
c0015f9a:	e8 6b 76 ff ff       	call   c000d60a <File::open(FileOpenMode)>
c0015f9f:	83 c4 10             	add    esp,0x10
c0015fa2:	85 c0                	test   eax,eax
c0015fa4:	0f 85 47 01 00 00    	jne    c00160f1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0015faa:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0015fb2:	83 ec 0c             	sub    esp,0xc
c0015fb5:	6a 34                	push   0x34
c0015fb7:	e8 fb 3c ff ff       	call   c0009cb7 <malloc>
c0015fbc:	89 c3                	mov    ebx,eax
c0015fbe:	58                   	pop    eax
c0015fbf:	8b 06                	mov    eax,DWORD PTR [esi]
c0015fc1:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0015fc5:	57                   	push   edi
c0015fc6:	53                   	push   ebx
c0015fc7:	6a 00                	push   0x0
c0015fc9:	6a 34                	push   0x34
c0015fcb:	56                   	push   esi
c0015fcc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015fcf:	83 c4 20             	add    esp,0x20
c0015fd2:	85 c0                	test   eax,eax
c0015fd4:	0f 85 17 01 00 00    	jne    c00160f1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0015fda:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0015fe0:	0f 85 0b 01 00 00    	jne    c00160f1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0015fe6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015fe9:	85 c0                	test   eax,eax
c0015feb:	0f 84 00 01 00 00    	je     c00160f1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0015ff1:	31 d2                	xor    edx,edx
c0015ff3:	55                   	push   ebp
c0015ff4:	52                   	push   edx
c0015ff5:	50                   	push   eax
c0015ff6:	56                   	push   esi
c0015ff7:	e8 cc 76 ff ff       	call   c000d6c8 <File::seek(unsigned long long)>
c0015ffc:	83 c4 10             	add    esp,0x10
c0015fff:	85 c0                	test   eax,eax
c0016001:	0f 85 ea 00 00 00    	jne    c00160f1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016007:	83 ec 0c             	sub    esp,0xc
c001600a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001600d:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0016011:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0016015:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0016019:	0f af c2             	imul   eax,edx
c001601c:	50                   	push   eax
c001601d:	e8 95 3c ff ff       	call   c0009cb7 <malloc>
c0016022:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016024:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016028:	89 3c 24             	mov    DWORD PTR [esp],edi
c001602b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001602f:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0016033:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0016037:	0f af c2             	imul   eax,edx
c001603a:	99                   	cdq    
c001603b:	52                   	push   edx
c001603c:	50                   	push   eax
c001603d:	56                   	push   esi
c001603e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016041:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0016044:	83 c4 20             	add    esp,0x20
c0016047:	85 c0                	test   eax,eax
c0016049:	0f 84 a2 00 00 00    	je     c00160f1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001604f:	31 d2                	xor    edx,edx
c0016051:	51                   	push   ecx
c0016052:	52                   	push   edx
c0016053:	50                   	push   eax
c0016054:	56                   	push   esi
c0016055:	e8 6e 76 ff ff       	call   c000d6c8 <File::seek(unsigned long long)>
c001605a:	83 c4 10             	add    esp,0x10
c001605d:	85 c0                	test   eax,eax
c001605f:	0f 85 8c 00 00 00    	jne    c00160f1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016065:	83 ec 0c             	sub    esp,0xc
c0016068:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001606c:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0016070:	31 ed                	xor    ebp,ebp
c0016072:	0f af c2             	imul   eax,edx
c0016075:	50                   	push   eax
c0016076:	e8 3c 3c ff ff       	call   c0009cb7 <malloc>
c001607b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001607d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016081:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016088:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001608c:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0016090:	0f af c2             	imul   eax,edx
c0016093:	99                   	cdq    
c0016094:	52                   	push   edx
c0016095:	50                   	push   eax
c0016096:	56                   	push   esi
c0016097:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001609a:	83 c4 20             	add    esp,0x20
c001609d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00160a5:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c00160a9:	0f 86 80 00 00 00    	jbe    c001612f <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c00160af:	0f b7 fd             	movzx  edi,bp
c00160b2:	c1 e7 05             	shl    edi,0x5
c00160b5:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c00160b9:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c00160bc:	75 6b                	jne    c0016129 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00160be:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00160c1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00160c5:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00160c8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00160cc:	52                   	push   edx
c00160cd:	31 d2                	xor    edx,edx
c00160cf:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00160d2:	52                   	push   edx
c00160d3:	50                   	push   eax
c00160d4:	56                   	push   esi
c00160d5:	e8 ee 75 ff ff       	call   c000d6c8 <File::seek(unsigned long long)>
c00160da:	83 c4 10             	add    esp,0x10
c00160dd:	85 c0                	test   eax,eax
c00160df:	74 17                	je     c00160f8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c00160e1:	83 ec 0c             	sub    esp,0xc
c00160e4:	68 35 5c 02 c0       	push   0xc0025c35
c00160e9:	e8 d7 6e ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00160ee:	83 c4 10             	add    esp,0x10
c00160f1:	31 c0                	xor    eax,eax
c00160f3:	e9 87 00 00 00       	jmp    c001617f <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c00160f8:	83 ec 0c             	sub    esp,0xc
c00160fb:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00160fe:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0016101:	50                   	push   eax
c0016102:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016106:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001610a:	56                   	push   esi
c001610b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001610f:	e8 b3 fb ff ff       	call   c0015cc7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0016114:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016118:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001611c:	83 c4 20             	add    esp,0x20
c001611f:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0016123:	73 04                	jae    c0016129 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0016125:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016129:	45                   	inc    ebp
c001612a:	e9 76 ff ff ff       	jmp    c00160a5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001612f:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0016133:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016137:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001613b:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0016141:	83 ec 0c             	sub    esp,0xc
c0016144:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c001614a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001614f:	05 00 10 00 00       	add    eax,0x1000
c0016154:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016157:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001615b:	e8 67 3b ff ff       	call   c0009cc7 <free>
c0016160:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016163:	e8 5f 3b ff ff       	call   c0009cc7 <free>
c0016168:	58                   	pop    eax
c0016169:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001616d:	e8 55 3b ff ff       	call   c0009cc7 <free>
c0016172:	89 34 24             	mov    DWORD PTR [esp],esi
c0016175:	e8 ee 74 ff ff       	call   c000d668 <File::close()>
c001617a:	83 c4 10             	add    esp,0x10
c001617d:	b0 01                	mov    al,0x1
c001617f:	83 c4 3c             	add    esp,0x3c
c0016182:	5b                   	pop    ebx
c0016183:	5e                   	pop    esi
c0016184:	5f                   	pop    edi
c0016185:	5d                   	pop    ebp
c0016186:	c3                   	ret    

c0016187 <Thr::runtimeReferenceHelper()>:
c0016187:	83 ec 18             	sub    esp,0x18
c001618a:	68 3d 5c 02 c0       	push   0xc0025c3d
c001618f:	e8 31 6e ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0016194:	fa                   	cli    
c0016195:	83 c4 10             	add    esp,0x10
c0016198:	eb fe                	jmp    c0016198 <Thr::runtimeReferenceHelper()+0x11>

c001619a <Thr::getAddressOfKernelSymbol(char const*)>:
c001619a:	57                   	push   edi
c001619b:	56                   	push   esi
c001619c:	53                   	push   ebx
c001619d:	31 db                	xor    ebx,ebx
c001619f:	39 1d 00 94 02 c0    	cmp    DWORD PTR ds:0xc0029400,ebx
c00161a5:	7e 3c                	jle    c00161e3 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c00161a7:	8b 34 9d 80 93 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd6c80]
c00161ae:	31 ff                	xor    edi,edi
c00161b0:	39 3c 9d 80 92 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd6d80],edi
c00161b7:	7e 27                	jle    c00161e0 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c00161b9:	50                   	push   eax
c00161ba:	50                   	push   eax
c00161bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00161bf:	8b 06                	mov    eax,DWORD PTR [esi]
c00161c1:	03 04 9d 00 93 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd6d00]
c00161c8:	50                   	push   eax
c00161c9:	e8 f6 a5 fe ff       	call   c00007c4 <strcmp>
c00161ce:	83 c4 10             	add    esp,0x10
c00161d1:	85 c0                	test   eax,eax
c00161d3:	75 05                	jne    c00161da <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c00161d5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00161d8:	eb 0b                	jmp    c00161e5 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c00161da:	83 c6 10             	add    esi,0x10
c00161dd:	47                   	inc    edi
c00161de:	eb d0                	jmp    c00161b0 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c00161e0:	43                   	inc    ebx
c00161e1:	eb bc                	jmp    c001619f <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c00161e3:	31 c0                	xor    eax,eax
c00161e5:	5b                   	pop    ebx
c00161e6:	5e                   	pop    esi
c00161e7:	5f                   	pop    edi
c00161e8:	c3                   	ret    

c00161e9 <Thr::loadKernelSymbolTable(char const*)>:
c00161e9:	55                   	push   ebp
c00161ea:	57                   	push   edi
c00161eb:	56                   	push   esi
c00161ec:	53                   	push   ebx
c00161ed:	83 ec 68             	sub    esp,0x68
c00161f0:	8b 35 50 94 02 c0    	mov    esi,DWORD PTR ds:0xc0029450
c00161f6:	68 14 01 00 00       	push   0x114
c00161fb:	e8 b7 3a ff ff       	call   c0009cb7 <malloc>
c0016200:	83 c4 0c             	add    esp,0xc
c0016203:	89 c3                	mov    ebx,eax
c0016205:	56                   	push   esi
c0016206:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001620a:	50                   	push   eax
c001620b:	e8 20 73 ff ff       	call   c000d530 <File::File(char const*, Process*)>
c0016210:	5e                   	pop    esi
c0016211:	5f                   	pop    edi
c0016212:	6a 01                	push   0x1
c0016214:	53                   	push   ebx
c0016215:	e8 f0 73 ff ff       	call   c000d60a <File::open(FileOpenMode)>
c001621a:	83 c4 10             	add    esp,0x10
c001621d:	85 c0                	test   eax,eax
c001621f:	74 0a                	je     c001622b <Thr::loadKernelSymbolTable(char const*)+0x42>
c0016221:	83 ec 0c             	sub    esp,0xc
c0016224:	68 5f 5c 02 c0       	push   0xc0025c5f
c0016229:	eb 34                	jmp    c001625f <Thr::loadKernelSymbolTable(char const*)+0x76>
c001622b:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0016233:	83 ec 0c             	sub    esp,0xc
c0016236:	6a 34                	push   0x34
c0016238:	e8 7a 3a ff ff       	call   c0009cb7 <malloc>
c001623d:	59                   	pop    ecx
c001623e:	89 c7                	mov    edi,eax
c0016240:	8d 74 24 34          	lea    esi,[esp+0x34]
c0016244:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016246:	56                   	push   esi
c0016247:	57                   	push   edi
c0016248:	6a 00                	push   0x0
c001624a:	6a 34                	push   0x34
c001624c:	53                   	push   ebx
c001624d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016250:	83 c4 20             	add    esp,0x20
c0016253:	85 c0                	test   eax,eax
c0016255:	74 17                	je     c001626e <Thr::loadKernelSymbolTable(char const*)+0x85>
c0016257:	83 ec 0c             	sub    esp,0xc
c001625a:	68 76 5c 02 c0       	push   0xc0025c76
c001625f:	e8 77 dd ff ff       	call   c0013fdb <Krnl::panic(char const*)>
c0016264:	83 c4 10             	add    esp,0x10
c0016267:	31 c0                	xor    eax,eax
c0016269:	e9 31 02 00 00       	jmp    c001649f <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001626e:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0016274:	75 e1                	jne    c0016257 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0016276:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0016279:	85 c0                	test   eax,eax
c001627b:	74 da                	je     c0016257 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001627d:	52                   	push   edx
c001627e:	31 d2                	xor    edx,edx
c0016280:	52                   	push   edx
c0016281:	50                   	push   eax
c0016282:	53                   	push   ebx
c0016283:	e8 40 74 ff ff       	call   c000d6c8 <File::seek(unsigned long long)>
c0016288:	83 c4 10             	add    esp,0x10
c001628b:	85 c0                	test   eax,eax
c001628d:	75 c8                	jne    c0016257 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001628f:	83 ec 0c             	sub    esp,0xc
c0016292:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016296:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001629a:	31 ed                	xor    ebp,ebp
c001629c:	0f af c2             	imul   eax,edx
c001629f:	50                   	push   eax
c00162a0:	e8 12 3a ff ff       	call   c0009cb7 <malloc>
c00162a5:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00162a7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00162ab:	89 34 24             	mov    DWORD PTR [esp],esi
c00162ae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00162b2:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00162b6:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00162ba:	0f af c2             	imul   eax,edx
c00162bd:	99                   	cdq    
c00162be:	52                   	push   edx
c00162bf:	50                   	push   eax
c00162c0:	53                   	push   ebx
c00162c1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00162c4:	83 c4 20             	add    esp,0x20
c00162c7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00162cf:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00162d7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00162df:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00162e7:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c00162eb:	0f 86 aa 00 00 00    	jbe    c001639b <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c00162f1:	0f b7 f5             	movzx  esi,bp
c00162f4:	6b f6 28             	imul   esi,esi,0x28
c00162f7:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00162fb:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00162fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016302:	50                   	push   eax
c0016303:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016307:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001630b:	8b 16                	mov    edx,DWORD PTR [esi]
c001630d:	6b c0 28             	imul   eax,eax,0x28
c0016310:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0016314:	89 d0                	mov    eax,edx
c0016316:	31 d2                	xor    edx,edx
c0016318:	52                   	push   edx
c0016319:	50                   	push   eax
c001631a:	53                   	push   ebx
c001631b:	e8 a8 73 ff ff       	call   c000d6c8 <File::seek(unsigned long long)>
c0016320:	83 c4 0c             	add    esp,0xc
c0016323:	6a 20                	push   0x20
c0016325:	6a 00                	push   0x0
c0016327:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001632b:	52                   	push   edx
c001632c:	e8 4b a3 fe ff       	call   c000067c <memset>
c0016331:	58                   	pop    eax
c0016332:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016334:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0016338:	51                   	push   ecx
c0016339:	8d 54 24 40          	lea    edx,[esp+0x40]
c001633d:	52                   	push   edx
c001633e:	6a 00                	push   0x0
c0016340:	6a 1f                	push   0x1f
c0016342:	53                   	push   ebx
c0016343:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016346:	83 c4 18             	add    esp,0x18
c0016349:	68 8d 5c 02 c0       	push   0xc0025c8d
c001634e:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0016352:	52                   	push   edx
c0016353:	e8 6c a4 fe ff       	call   c00007c4 <strcmp>
c0016358:	83 c4 10             	add    esp,0x10
c001635b:	85 c0                	test   eax,eax
c001635d:	75 0f                	jne    c001636e <Thr::loadKernelSymbolTable(char const*)+0x185>
c001635f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016362:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016366:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001636a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001636e:	50                   	push   eax
c001636f:	50                   	push   eax
c0016370:	68 95 5c 02 c0       	push   0xc0025c95
c0016375:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0016379:	50                   	push   eax
c001637a:	e8 45 a4 fe ff       	call   c00007c4 <strcmp>
c001637f:	83 c4 10             	add    esp,0x10
c0016382:	85 c0                	test   eax,eax
c0016384:	75 0f                	jne    c0016395 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0016386:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016389:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001638d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016391:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016395:	45                   	inc    ebp
c0016396:	e9 4c ff ff ff       	jmp    c00162e7 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001639b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00163a0:	75 10                	jne    c00163b2 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c00163a2:	83 ec 0c             	sub    esp,0xc
c00163a5:	68 9d 5c 02 c0       	push   0xc0025c9d
c00163aa:	e8 2c dc ff ff       	call   c0013fdb <Krnl::panic(char const*)>
c00163af:	83 c4 10             	add    esp,0x10
c00163b2:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00163b7:	75 10                	jne    c00163c9 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c00163b9:	83 ec 0c             	sub    esp,0xc
c00163bc:	68 9d 5c 02 c0       	push   0xc0025c9d
c00163c1:	e8 15 dc ff ff       	call   c0013fdb <Krnl::panic(char const*)>
c00163c6:	83 c4 10             	add    esp,0x10
c00163c9:	31 d2                	xor    edx,edx
c00163cb:	50                   	push   eax
c00163cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163d0:	52                   	push   edx
c00163d1:	50                   	push   eax
c00163d2:	53                   	push   ebx
c00163d3:	e8 f0 72 ff ff       	call   c000d6c8 <File::seek(unsigned long long)>
c00163d8:	5a                   	pop    edx
c00163d9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00163dd:	e8 d5 38 ff ff       	call   c0009cb7 <malloc>
c00163e2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00163e6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00163ea:	31 c9                	xor    ecx,ecx
c00163ec:	5e                   	pop    esi
c00163ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c00163ef:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c00163f3:	55                   	push   ebp
c00163f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163f8:	51                   	push   ecx
c00163f9:	52                   	push   edx
c00163fa:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00163fe:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0016402:	53                   	push   ebx
c0016403:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016406:	83 c4 14             	add    esp,0x14
c0016409:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001640d:	e8 a5 38 ff ff       	call   c0009cb7 <malloc>
c0016412:	89 c6                	mov    esi,eax
c0016414:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016416:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016419:	56                   	push   esi
c001641a:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001641e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0016422:	51                   	push   ecx
c0016423:	52                   	push   edx
c0016424:	53                   	push   ebx
c0016425:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016428:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001642c:	8b 15 00 94 02 c0    	mov    edx,DWORD PTR ds:0xc0029400
c0016432:	83 c4 1c             	add    esp,0x1c
c0016435:	c1 e8 04             	shr    eax,0x4
c0016438:	89 04 95 80 92 02 c0 	mov    DWORD PTR [edx*4-0x3ffd6d80],eax
c001643f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016443:	31 d2                	xor    edx,edx
c0016445:	52                   	push   edx
c0016446:	50                   	push   eax
c0016447:	53                   	push   ebx
c0016448:	e8 7b 72 ff ff       	call   c000d6c8 <File::seek(unsigned long long)>
c001644d:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001644f:	31 d2                	xor    edx,edx
c0016451:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016454:	56                   	push   esi
c0016455:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016459:	52                   	push   edx
c001645a:	50                   	push   eax
c001645b:	53                   	push   ebx
c001645c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001645f:	83 c4 14             	add    esp,0x14
c0016462:	53                   	push   ebx
c0016463:	e8 00 72 ff ff       	call   c000d668 <File::close()>
c0016468:	5d                   	pop    ebp
c0016469:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001646d:	e8 55 38 ff ff       	call   c0009cc7 <free>
c0016472:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016475:	e8 4d 38 ff ff       	call   c0009cc7 <free>
c001647a:	a1 00 94 02 c0       	mov    eax,ds:0xc0029400
c001647f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0016483:	8d 50 01             	lea    edx,[eax+0x1]
c0016486:	89 0c 85 80 93 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6c80],ecx
c001648d:	89 34 85 00 93 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6d00],esi
c0016494:	89 15 00 94 02 c0    	mov    DWORD PTR ds:0xc0029400,edx
c001649a:	83 c4 10             	add    esp,0x10
c001649d:	b0 01                	mov    al,0x1
c001649f:	83 c4 5c             	add    esp,0x5c
c00164a2:	5b                   	pop    ebx
c00164a3:	5e                   	pop    esi
c00164a4:	5f                   	pop    edi
c00164a5:	5d                   	pop    ebp
c00164a6:	c3                   	ret    

c00164a7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c00164a7:	55                   	push   ebp
c00164a8:	57                   	push   edi
c00164a9:	56                   	push   esi
c00164aa:	53                   	push   ebx
c00164ab:	81 ec 68 03 00 00    	sub    esp,0x368
c00164b1:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c00164b8:	8b 1d 50 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029450
c00164be:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00164c2:	68 14 01 00 00       	push   0x114
c00164c7:	e8 eb 37 ff ff       	call   c0009cb7 <malloc>
c00164cc:	83 c4 0c             	add    esp,0xc
c00164cf:	89 c5                	mov    ebp,eax
c00164d1:	53                   	push   ebx
c00164d2:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c00164d9:	50                   	push   eax
c00164da:	e8 51 70 ff ff       	call   c000d530 <File::File(char const*, Process*)>
c00164df:	5e                   	pop    esi
c00164e0:	5f                   	pop    edi
c00164e1:	6a 01                	push   0x1
c00164e3:	55                   	push   ebp
c00164e4:	e8 21 71 ff ff       	call   c000d60a <File::open(FileOpenMode)>
c00164e9:	83 c4 10             	add    esp,0x10
c00164ec:	85 c0                	test   eax,eax
c00164ee:	0f 85 a7 06 00 00    	jne    c0016b9b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00164f4:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00164fc:	83 ec 0c             	sub    esp,0xc
c00164ff:	6a 34                	push   0x34
c0016501:	e8 b1 37 ff ff       	call   c0009cb7 <malloc>
c0016506:	5b                   	pop    ebx
c0016507:	89 c7                	mov    edi,eax
c0016509:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001650d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016510:	53                   	push   ebx
c0016511:	57                   	push   edi
c0016512:	6a 00                	push   0x0
c0016514:	6a 34                	push   0x34
c0016516:	55                   	push   ebp
c0016517:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001651a:	83 c4 20             	add    esp,0x20
c001651d:	85 c0                	test   eax,eax
c001651f:	0f 85 76 06 00 00    	jne    c0016b9b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016525:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001652b:	0f 85 6a 06 00 00    	jne    c0016b9b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016531:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0016534:	85 c0                	test   eax,eax
c0016536:	0f 84 5f 06 00 00    	je     c0016b9b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001653c:	31 d2                	xor    edx,edx
c001653e:	51                   	push   ecx
c001653f:	52                   	push   edx
c0016540:	50                   	push   eax
c0016541:	55                   	push   ebp
c0016542:	e8 81 71 ff ff       	call   c000d6c8 <File::seek(unsigned long long)>
c0016547:	83 c4 10             	add    esp,0x10
c001654a:	85 c0                	test   eax,eax
c001654c:	0f 85 49 06 00 00    	jne    c0016b9b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016552:	83 ec 0c             	sub    esp,0xc
c0016555:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0016558:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001655c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0016560:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016564:	0f af c2             	imul   eax,edx
c0016567:	50                   	push   eax
c0016568:	e8 4a 37 ff ff       	call   c0009cb7 <malloc>
c001656d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016570:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016574:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016577:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001657b:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001657f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016583:	0f af c2             	imul   eax,edx
c0016586:	99                   	cdq    
c0016587:	52                   	push   edx
c0016588:	50                   	push   eax
c0016589:	55                   	push   ebp
c001658a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001658d:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0016590:	83 c4 20             	add    esp,0x20
c0016593:	85 c0                	test   eax,eax
c0016595:	0f 84 00 06 00 00    	je     c0016b9b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001659b:	52                   	push   edx
c001659c:	31 d2                	xor    edx,edx
c001659e:	52                   	push   edx
c001659f:	50                   	push   eax
c00165a0:	55                   	push   ebp
c00165a1:	e8 22 71 ff ff       	call   c000d6c8 <File::seek(unsigned long long)>
c00165a6:	83 c4 10             	add    esp,0x10
c00165a9:	85 c0                	test   eax,eax
c00165ab:	0f 85 ea 05 00 00    	jne    c0016b9b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00165b1:	83 ec 0c             	sub    esp,0xc
c00165b4:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00165b8:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00165bc:	31 f6                	xor    esi,esi
c00165be:	0f af c2             	imul   eax,edx
c00165c1:	50                   	push   eax
c00165c2:	e8 f0 36 ff ff       	call   c0009cb7 <malloc>
c00165c7:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00165ca:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00165ce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00165d1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00165d5:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00165d9:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00165dd:	0f af c2             	imul   eax,edx
c00165e0:	99                   	cdq    
c00165e1:	52                   	push   edx
c00165e2:	50                   	push   eax
c00165e3:	55                   	push   ebp
c00165e4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00165e7:	83 c4 20             	add    esp,0x20
c00165ea:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c00165ee:	0f 86 8a 00 00 00    	jbe    c001667e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c00165f4:	0f b7 de             	movzx  ebx,si
c00165f7:	c1 e3 05             	shl    ebx,0x5
c00165fa:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c00165fe:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0016601:	75 75                	jne    c0016678 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0016603:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016606:	31 d2                	xor    edx,edx
c0016608:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001660c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001660f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016613:	50                   	push   eax
c0016614:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0016617:	52                   	push   edx
c0016618:	50                   	push   eax
c0016619:	55                   	push   ebp
c001661a:	e8 a9 70 ff ff       	call   c000d6c8 <File::seek(unsigned long long)>
c001661f:	83 c4 10             	add    esp,0x10
c0016622:	85 c0                	test   eax,eax
c0016624:	0f 85 71 05 00 00    	jne    c0016b9b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001662a:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0016631:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016634:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0016638:	31 d2                	xor    edx,edx
c001663a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001663e:	83 ec 0c             	sub    esp,0xc
c0016641:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016645:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001664c:	50                   	push   eax
c001664d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016651:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016655:	52                   	push   edx
c0016656:	50                   	push   eax
c0016657:	55                   	push   ebp
c0016658:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001665b:	83 c4 1c             	add    esp,0x1c
c001665e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016661:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0016664:	50                   	push   eax
c0016665:	6a 00                	push   0x0
c0016667:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001666b:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001666f:	50                   	push   eax
c0016670:	e8 07 a0 fe ff       	call   c000067c <memset>
c0016675:	83 c4 10             	add    esp,0x10
c0016678:	46                   	inc    esi
c0016679:	e9 6c ff ff ff       	jmp    c00165ea <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001667e:	53                   	push   ebx
c001667f:	31 db                	xor    ebx,ebx
c0016681:	68 00 01 00 00       	push   0x100
c0016686:	6a 00                	push   0x0
c0016688:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001668c:	50                   	push   eax
c001668d:	e8 ea 9f fe ff       	call   c000067c <memset>
c0016692:	83 c4 0c             	add    esp,0xc
c0016695:	68 00 01 00 00       	push   0x100
c001669a:	6a 00                	push   0x0
c001669c:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c00166a3:	50                   	push   eax
c00166a4:	e8 d3 9f fe ff       	call   c000067c <memset>
c00166a9:	83 c4 10             	add    esp,0x10
c00166ac:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00166b4:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00166bc:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00166c4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00166cc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00166d4:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c00166d8:	0f 86 30 01 00 00    	jbe    c001680e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c00166de:	0f b7 f3             	movzx  esi,bx
c00166e1:	6b f6 28             	imul   esi,esi,0x28
c00166e4:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00166e8:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00166eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00166ef:	52                   	push   edx
c00166f0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00166f4:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c00166f8:	8b 06                	mov    eax,DWORD PTR [esi]
c00166fa:	6b d2 28             	imul   edx,edx,0x28
c00166fd:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0016701:	31 d2                	xor    edx,edx
c0016703:	52                   	push   edx
c0016704:	50                   	push   eax
c0016705:	55                   	push   ebp
c0016706:	e8 bd 6f ff ff       	call   c000d6c8 <File::seek(unsigned long long)>
c001670b:	83 c4 0c             	add    esp,0xc
c001670e:	6a 20                	push   0x20
c0016710:	6a 00                	push   0x0
c0016712:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0016719:	51                   	push   ecx
c001671a:	e8 5d 9f fe ff       	call   c000067c <memset>
c001671f:	59                   	pop    ecx
c0016720:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016723:	8d 54 24 58          	lea    edx,[esp+0x58]
c0016727:	52                   	push   edx
c0016728:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001672f:	51                   	push   ecx
c0016730:	6a 00                	push   0x0
c0016732:	6a 1f                	push   0x1f
c0016734:	55                   	push   ebp
c0016735:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016738:	83 c4 1c             	add    esp,0x1c
c001673b:	6a 09                	push   0x9
c001673d:	68 b7 5c 02 c0       	push   0xc0025cb7
c0016742:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0016749:	51                   	push   ecx
c001674a:	e8 29 9e fe ff       	call   c0000578 <memcmp>
c001674f:	83 c4 10             	add    esp,0x10
c0016752:	85 c0                	test   eax,eax
c0016754:	75 21                	jne    c0016777 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0016756:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001675a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001675e:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0016762:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016766:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016769:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0016770:	89 d0                	mov    eax,edx
c0016772:	40                   	inc    eax
c0016773:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016777:	50                   	push   eax
c0016778:	6a 09                	push   0x9
c001677a:	68 c1 5c 02 c0       	push   0xc0025cc1
c001677f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0016786:	50                   	push   eax
c0016787:	e8 ec 9d fe ff       	call   c0000578 <memcmp>
c001678c:	83 c4 10             	add    esp,0x10
c001678f:	85 c0                	test   eax,eax
c0016791:	75 21                	jne    c00167b4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0016793:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016797:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001679b:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001679f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00167a3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00167a6:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00167ad:	89 d0                	mov    eax,edx
c00167af:	40                   	inc    eax
c00167b0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00167b4:	50                   	push   eax
c00167b5:	50                   	push   eax
c00167b6:	68 8d 5c 02 c0       	push   0xc0025c8d
c00167bb:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00167c2:	50                   	push   eax
c00167c3:	e8 fc 9f fe ff       	call   c00007c4 <strcmp>
c00167c8:	83 c4 10             	add    esp,0x10
c00167cb:	85 c0                	test   eax,eax
c00167cd:	75 0f                	jne    c00167de <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c00167cf:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00167d2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00167d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00167da:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00167de:	50                   	push   eax
c00167df:	50                   	push   eax
c00167e0:	68 95 5c 02 c0       	push   0xc0025c95
c00167e5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00167ec:	50                   	push   eax
c00167ed:	e8 d2 9f fe ff       	call   c00007c4 <strcmp>
c00167f2:	83 c4 10             	add    esp,0x10
c00167f5:	85 c0                	test   eax,eax
c00167f7:	75 0f                	jne    c0016808 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c00167f9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00167fc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016800:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016804:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0016808:	43                   	inc    ebx
c0016809:	e9 c6 fe ff ff       	jmp    c00166d4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001680e:	31 d2                	xor    edx,edx
c0016810:	50                   	push   eax
c0016811:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016815:	52                   	push   edx
c0016816:	50                   	push   eax
c0016817:	55                   	push   ebp
c0016818:	e8 ab 6e ff ff       	call   c000d6c8 <File::seek(unsigned long long)>
c001681d:	58                   	pop    eax
c001681e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016822:	e8 90 34 ff ff       	call   c0009cb7 <malloc>
c0016827:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001682a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001682e:	31 d2                	xor    edx,edx
c0016830:	58                   	pop    eax
c0016831:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0016835:	53                   	push   ebx
c0016836:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001683a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001683e:	52                   	push   edx
c001683f:	50                   	push   eax
c0016840:	55                   	push   ebp
c0016841:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016844:	83 c4 14             	add    esp,0x14
c0016847:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001684b:	e8 67 34 ff ff       	call   c0009cb7 <malloc>
c0016850:	31 d2                	xor    edx,edx
c0016852:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0016856:	83 c4 0c             	add    esp,0xc
c0016859:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001685d:	52                   	push   edx
c001685e:	50                   	push   eax
c001685f:	55                   	push   ebp
c0016860:	e8 63 6e ff ff       	call   c000d6c8 <File::seek(unsigned long long)>
c0016865:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016868:	31 d2                	xor    edx,edx
c001686a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001686d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0016871:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016875:	52                   	push   edx
c0016876:	50                   	push   eax
c0016877:	55                   	push   ebp
c0016878:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001687b:	83 c4 20             	add    esp,0x20
c001687e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016886:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001688a:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001688e:	0f 84 0b 03 00 00    	je     c0016b9f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c0016894:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001689b:	31 d2                	xor    edx,edx
c001689d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00168a1:	c1 e8 03             	shr    eax,0x3
c00168a4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00168a8:	51                   	push   ecx
c00168a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00168ad:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c00168b1:	52                   	push   edx
c00168b2:	50                   	push   eax
c00168b3:	55                   	push   ebp
c00168b4:	e8 0f 6e ff ff       	call   c000d6c8 <File::seek(unsigned long long)>
c00168b9:	5b                   	pop    ebx
c00168ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168be:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c00168c5:	e8 ed 33 ff ff       	call   c0009cb7 <malloc>
c00168ca:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00168cd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00168d1:	31 d2                	xor    edx,edx
c00168d3:	5e                   	pop    esi
c00168d4:	8d 44 24 58          	lea    eax,[esp+0x58]
c00168d8:	50                   	push   eax
c00168d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00168e1:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c00168e8:	52                   	push   edx
c00168e9:	50                   	push   eax
c00168ea:	55                   	push   ebp
c00168eb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00168ee:	83 c4 20             	add    esp,0x20
c00168f1:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00168f9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00168fd:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c0016901:	0f 8d 7c 02 00 00    	jge    c0016b83 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c0016907:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001690b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001690f:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c0016914:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0016917:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001691b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001691f:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c0016923:	89 d8                	mov    eax,ebx
c0016925:	c1 e8 08             	shr    eax,0x8
c0016928:	89 c6                	mov    esi,eax
c001692a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001692e:	c1 e6 04             	shl    esi,0x4
c0016931:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0016935:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0016938:	85 d2                	test   edx,edx
c001693a:	0f 85 bf 00 00 00    	jne    c00169ff <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0016940:	83 ec 0c             	sub    esp,0xc
c0016943:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016947:	03 06                	add    eax,DWORD PTR [esi]
c0016949:	50                   	push   eax
c001694a:	e8 4b f8 ff ff       	call   c001619a <Thr::getAddressOfKernelSymbol(char const*)>
c001694f:	83 c4 10             	add    esp,0x10
c0016952:	89 c2                	mov    edx,eax
c0016954:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0016959:	85 c0                	test   eax,eax
c001695b:	0f 85 9e 00 00 00    	jne    c00169ff <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0016961:	83 ec 0c             	sub    esp,0xc
c0016964:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016968:	03 06                	add    eax,DWORD PTR [esi]
c001696a:	50                   	push   eax
c001696b:	e8 98 1f ff ff       	call   c0008908 <Krnl::resolveCompatibilitySymbol(char*)>
c0016970:	83 c4 10             	add    esp,0x10
c0016973:	89 c2                	mov    edx,eax
c0016975:	85 c0                	test   eax,eax
c0016977:	0f 85 82 00 00 00    	jne    c00169ff <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001697d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0016981:	50                   	push   eax
c0016982:	50                   	push   eax
c0016983:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016987:	03 06                	add    eax,DWORD PTR [esi]
c0016989:	50                   	push   eax
c001698a:	68 cb 5c 02 c0       	push   0xc0025ccb
c001698f:	e8 31 66 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0016994:	58                   	pop    eax
c0016995:	5a                   	pop    edx
c0016996:	68 e5 5c 02 c0       	push   0xc0025ce5
c001699b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00169a2:	50                   	push   eax
c00169a3:	e8 90 9d fe ff       	call   c0000738 <strcpy>
c00169a8:	59                   	pop    ecx
c00169a9:	58                   	pop    eax
c00169aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169ae:	03 06                	add    eax,DWORD PTR [esi]
c00169b0:	50                   	push   eax
c00169b1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00169b8:	50                   	push   eax
c00169b9:	e8 ba 9e fe ff       	call   c0000878 <strcat>
c00169be:	58                   	pop    eax
c00169bf:	5a                   	pop    edx
c00169c0:	68 7b 5d 02 c0       	push   0xc0025d7b
c00169c5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00169cc:	50                   	push   eax
c00169cd:	e8 a6 9e fe ff       	call   c0000878 <strcat>
c00169d2:	83 c4 10             	add    esp,0x10
c00169d5:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00169da:	0f 84 5d 01 00 00    	je     c0016b3d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c00169e0:	83 ec 0c             	sub    esp,0xc
c00169e3:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00169ea:	50                   	push   eax
c00169eb:	e8 eb d5 ff ff       	call   c0013fdb <Krnl::panic(char const*)>
c00169f0:	83 c4 10             	add    esp,0x10
c00169f3:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00169f7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00169fb:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00169ff:	80 fb 01             	cmp    bl,0x1
c0016a02:	0f 85 88 00 00 00    	jne    c0016a90 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c0016a08:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0016a0f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0016a13:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0016a17:	01 ce                	add    esi,ecx
c0016a19:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0016a1f:	0f 94 c0             	sete   al
c0016a22:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0016a28:	0f 94 c3             	sete   bl
c0016a2b:	09 c3                	or     ebx,eax
c0016a2d:	8b 06                	mov    eax,DWORD PTR [esi]
c0016a2f:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0016a34:	74 41                	je     c0016a77 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0016a36:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0016a39:	84 db                	test   bl,bl
c0016a3b:	75 15                	jne    c0016a52 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c0016a3d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016a41:	66 83 f8 0c          	cmp    ax,0xc
c0016a45:	76 05                	jbe    c0016a4c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0016a47:	b8 0c 00 00 00       	mov    eax,0xc
c0016a4c:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0016a50:	76 37                	jbe    c0016a89 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0016a52:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0016a56:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0016a5b:	0f 84 dc 00 00 00    	je     c0016b3d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0016a61:	83 ec 0c             	sub    esp,0xc
c0016a64:	68 fc 5c 02 c0       	push   0xc0025cfc
c0016a69:	e8 6d d5 ff ff       	call   c0013fdb <Krnl::panic(char const*)>
c0016a6e:	83 c4 10             	add    esp,0x10
c0016a71:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0016a75:	eb 12                	jmp    c0016a89 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0016a77:	01 c1                	add    ecx,eax
c0016a79:	84 db                	test   bl,bl
c0016a7b:	75 0c                	jne    c0016a89 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0016a7d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016a81:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0016a85:	77 02                	ja     c0016a89 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0016a87:	01 d1                	add    ecx,edx
c0016a89:	89 0e                	mov    DWORD PTR [esi],ecx
c0016a8b:	e9 ea 00 00 00       	jmp    c0016b7a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0016a90:	80 fb 02             	cmp    bl,0x2
c0016a93:	75 7c                	jne    c0016b11 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0016a95:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0016a9c:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0016aa0:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c0016aa4:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0016aaa:	74 20                	je     c0016acc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0016aac:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0016ab2:	74 18                	je     c0016acc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0016ab4:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016ab8:	b9 0a 00 00 00       	mov    ecx,0xa
c0016abd:	66 83 f8 0e          	cmp    ax,0xe
c0016ac1:	77 03                	ja     c0016ac6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0016ac3:	8d 48 fc             	lea    ecx,[eax-0x4]
c0016ac6:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0016aca:	76 1f                	jbe    c0016aeb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0016acc:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0016ad0:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0016ad5:	74 66                	je     c0016b3d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0016ad7:	83 ec 0c             	sub    esp,0xc
c0016ada:	68 18 5d 02 c0       	push   0xc0025d18
c0016adf:	e8 f7 d4 ff ff       	call   c0013fdb <Krnl::panic(char const*)>
c0016ae4:	83 c4 10             	add    esp,0x10
c0016ae7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016aeb:	8b 06                	mov    eax,DWORD PTR [esi]
c0016aed:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0016af2:	74 13                	je     c0016b07 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0016af4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0016af8:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0016aff:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0016b03:	01 c8                	add    eax,ecx
c0016b05:	eb 04                	jmp    c0016b0b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0016b07:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0016b0b:	01 c2                	add    edx,eax
c0016b0d:	89 16                	mov    DWORD PTR [esi],edx
c0016b0f:	eb 69                	jmp    c0016b7a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0016b11:	0f b6 db             	movzx  ebx,bl
c0016b14:	50                   	push   eax
c0016b15:	50                   	push   eax
c0016b16:	53                   	push   ebx
c0016b17:	68 34 5d 02 c0       	push   0xc0025d34
c0016b1c:	e8 a4 64 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0016b21:	83 c4 10             	add    esp,0x10
c0016b24:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0016b29:	74 12                	je     c0016b3d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0016b2b:	83 ec 0c             	sub    esp,0xc
c0016b2e:	68 3f 5d 02 c0       	push   0xc0025d3f
c0016b33:	e8 a3 d4 ff ff       	call   c0013fdb <Krnl::panic(char const*)>
c0016b38:	83 c4 10             	add    esp,0x10
c0016b3b:	eb 3d                	jmp    c0016b7a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0016b3d:	83 ec 0c             	sub    esp,0xc
c0016b40:	55                   	push   ebp
c0016b41:	e8 22 6b ff ff       	call   c000d668 <File::close()>
c0016b46:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016b49:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016b4c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016b4f:	59                   	pop    ecx
c0016b50:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016b54:	e8 6e 31 ff ff       	call   c0009cc7 <free>
c0016b59:	5b                   	pop    ebx
c0016b5a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016b5e:	e8 64 31 ff ff       	call   c0009cc7 <free>
c0016b63:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016b66:	e8 5c 31 ff ff       	call   c0009cc7 <free>
c0016b6b:	5e                   	pop    esi
c0016b6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016b70:	e8 52 31 ff ff       	call   c0009cc7 <free>
c0016b75:	83 c4 10             	add    esp,0x10
c0016b78:	eb 21                	jmp    c0016b9b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016b7a:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0016b7e:	e9 76 fd ff ff       	jmp    c00168f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0016b83:	83 ec 0c             	sub    esp,0xc
c0016b86:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016b8a:	e8 38 31 ff ff       	call   c0009cc7 <free>
c0016b8f:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0016b93:	83 c4 10             	add    esp,0x10
c0016b96:	e9 eb fc ff ff       	jmp    c0016886 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0016b9b:	31 c0                	xor    eax,eax
c0016b9d:	eb 33                	jmp    c0016bd2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0016b9f:	83 ec 0c             	sub    esp,0xc
c0016ba2:	55                   	push   ebp
c0016ba3:	e8 c0 6a ff ff       	call   c000d668 <File::close()>
c0016ba8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016bab:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016bae:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016bb1:	58                   	pop    eax
c0016bb2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016bb6:	e8 0c 31 ff ff       	call   c0009cc7 <free>
c0016bbb:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016bbe:	e8 04 31 ff ff       	call   c0009cc7 <free>
c0016bc3:	5a                   	pop    edx
c0016bc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016bc8:	e8 fa 30 ff ff       	call   c0009cc7 <free>
c0016bcd:	83 c4 10             	add    esp,0x10
c0016bd0:	b0 01                	mov    al,0x1
c0016bd2:	81 c4 5c 03 00 00    	add    esp,0x35c
c0016bd8:	5b                   	pop    ebx
c0016bd9:	5e                   	pop    esi
c0016bda:	5f                   	pop    edi
c0016bdb:	5d                   	pop    ebp
c0016bdc:	c3                   	ret    

c0016bdd <Thr::getDriverBaseFromAddress(unsigned long)>:
c0016bdd:	56                   	push   esi
c0016bde:	31 d2                	xor    edx,edx
c0016be0:	53                   	push   ebx
c0016be1:	8b 1d 60 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028c60
c0016be7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016beb:	39 d3                	cmp    ebx,edx
c0016bed:	7e 1b                	jle    c0016c0a <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0016bef:	8b 04 95 80 8e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7180]
c0016bf6:	39 c8                	cmp    eax,ecx
c0016bf8:	77 0d                	ja     c0016c07 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0016bfa:	8b 34 95 80 8c 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd7380]
c0016c01:	01 c6                	add    esi,eax
c0016c03:	39 ce                	cmp    esi,ecx
c0016c05:	77 05                	ja     c0016c0c <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0016c07:	42                   	inc    edx
c0016c08:	eb e1                	jmp    c0016beb <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0016c0a:	31 c0                	xor    eax,eax
c0016c0c:	5b                   	pop    ebx
c0016c0d:	5e                   	pop    esi
c0016c0e:	c3                   	ret    

c0016c0f <Thr::getDriverNameFromAddress(unsigned long)>:
c0016c0f:	53                   	push   ebx
c0016c10:	31 c0                	xor    eax,eax
c0016c12:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0016c16:	8b 1d 60 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028c60
c0016c1c:	39 c3                	cmp    ebx,eax
c0016c1e:	7e 22                	jle    c0016c42 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0016c20:	8b 14 85 80 8e 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7180]
c0016c27:	39 ca                	cmp    edx,ecx
c0016c29:	77 14                	ja     c0016c3f <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0016c2b:	03 14 85 80 8c 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd7380]
c0016c32:	39 ca                	cmp    edx,ecx
c0016c34:	76 09                	jbe    c0016c3f <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0016c36:	8b 04 85 80 90 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6f80]
c0016c3d:	eb 05                	jmp    c0016c44 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0016c3f:	40                   	inc    eax
c0016c40:	eb da                	jmp    c0016c1c <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0016c42:	31 c0                	xor    eax,eax
c0016c44:	5b                   	pop    ebx
c0016c45:	c3                   	ret    

c0016c46 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0016c46:	53                   	push   ebx
c0016c47:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0016c4b:	53                   	push   ebx
c0016c4c:	e8 8c ff ff ff       	call   c0016bdd <Thr::getDriverBaseFromAddress(unsigned long)>
c0016c51:	5a                   	pop    edx
c0016c52:	31 d2                	xor    edx,edx
c0016c54:	85 c0                	test   eax,eax
c0016c56:	74 04                	je     c0016c5c <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0016c58:	89 da                	mov    edx,ebx
c0016c5a:	29 c2                	sub    edx,eax
c0016c5c:	89 d0                	mov    eax,edx
c0016c5e:	5b                   	pop    ebx
c0016c5f:	c3                   	ret    

c0016c60 <Thr::loadDLL(char const*, bool)>:
c0016c60:	55                   	push   ebp
c0016c61:	57                   	push   edi
c0016c62:	56                   	push   esi
c0016c63:	53                   	push   ebx
c0016c64:	81 ec 34 01 00 00    	sub    esp,0x134
c0016c6a:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0016c71:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0016c78:	56                   	push   esi
c0016c79:	68 57 5d 02 c0       	push   0xc0025d57
c0016c7e:	e8 42 63 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0016c83:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0016c8a:	e8 28 30 ff ff       	call   c0009cb7 <malloc>
c0016c8f:	83 c4 0c             	add    esp,0xc
c0016c92:	89 c3                	mov    ebx,eax
c0016c94:	ff 35 50 94 02 c0    	push   DWORD PTR ds:0xc0029450
c0016c9a:	56                   	push   esi
c0016c9b:	50                   	push   eax
c0016c9c:	e8 8f 68 ff ff       	call   c000d530 <File::File(char const*, Process*)>
c0016ca1:	83 c4 10             	add    esp,0x10
c0016ca4:	85 db                	test   ebx,ebx
c0016ca6:	75 3c                	jne    c0016ce4 <Thr::loadDLL(char const*, bool)+0x84>
c0016ca8:	89 f8                	mov    eax,edi
c0016caa:	84 c0                	test   al,al
c0016cac:	0f 84 d2 01 00 00    	je     c0016e84 <Thr::loadDLL(char const*, bool)+0x224>
c0016cb2:	55                   	push   ebp
c0016cb3:	55                   	push   ebp
c0016cb4:	68 68 5d 02 c0       	push   0xc0025d68
c0016cb9:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0016cbd:	55                   	push   ebp
c0016cbe:	e8 75 9a fe ff       	call   c0000738 <strcpy>
c0016cc3:	58                   	pop    eax
c0016cc4:	5a                   	pop    edx
c0016cc5:	56                   	push   esi
c0016cc6:	55                   	push   ebp
c0016cc7:	e8 ac 9b fe ff       	call   c0000878 <strcat>
c0016ccc:	59                   	pop    ecx
c0016ccd:	58                   	pop    eax
c0016cce:	68 7b 5d 02 c0       	push   0xc0025d7b
c0016cd3:	55                   	push   ebp
c0016cd4:	e8 9f 9b fe ff       	call   c0000878 <strcat>
c0016cd9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016cdc:	e8 fa d2 ff ff       	call   c0013fdb <Krnl::panic(char const*)>
c0016ce1:	83 c4 10             	add    esp,0x10
c0016ce4:	51                   	push   ecx
c0016ce5:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0016ce9:	50                   	push   eax
c0016cea:	8d 44 24 20          	lea    eax,[esp+0x20]
c0016cee:	50                   	push   eax
c0016cef:	53                   	push   ebx
c0016cf0:	e8 c1 6b ff ff       	call   c000d8b6 <File::stat(unsigned long long*, bool*)>
c0016cf5:	83 c4 10             	add    esp,0x10
c0016cf8:	85 db                	test   ebx,ebx
c0016cfa:	74 0c                	je     c0016d08 <Thr::loadDLL(char const*, bool)+0xa8>
c0016cfc:	83 ec 0c             	sub    esp,0xc
c0016cff:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016d01:	53                   	push   ebx
c0016d02:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016d05:	83 c4 10             	add    esp,0x10
c0016d08:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0016d0d:	75 0a                	jne    c0016d19 <Thr::loadDLL(char const*, bool)+0xb9>
c0016d0f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d13:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0016d17:	75 3c                	jne    c0016d55 <Thr::loadDLL(char const*, bool)+0xf5>
c0016d19:	89 f8                	mov    eax,edi
c0016d1b:	84 c0                	test   al,al
c0016d1d:	0f 84 49 01 00 00    	je     c0016e6c <Thr::loadDLL(char const*, bool)+0x20c>
c0016d23:	51                   	push   ecx
c0016d24:	51                   	push   ecx
c0016d25:	68 68 5d 02 c0       	push   0xc0025d68
c0016d2a:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0016d2e:	53                   	push   ebx
c0016d2f:	e8 04 9a fe ff       	call   c0000738 <strcpy>
c0016d34:	5d                   	pop    ebp
c0016d35:	58                   	pop    eax
c0016d36:	56                   	push   esi
c0016d37:	53                   	push   ebx
c0016d38:	e8 3b 9b fe ff       	call   c0000878 <strcat>
c0016d3d:	58                   	pop    eax
c0016d3e:	5a                   	pop    edx
c0016d3f:	68 7b 5d 02 c0       	push   0xc0025d7b
c0016d44:	53                   	push   ebx
c0016d45:	e8 2e 9b fe ff       	call   c0000878 <strcat>
c0016d4a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016d4d:	e8 89 d2 ff ff       	call   c0013fdb <Krnl::panic(char const*)>
c0016d52:	83 c4 10             	add    esp,0x10
c0016d55:	52                   	push   edx
c0016d56:	6a 03                	push   0x3
c0016d58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016d5c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016d60:	05 ff 0f 00 00       	add    eax,0xfff
c0016d65:	83 d2 00             	adc    edx,0x0
c0016d68:	0f ac d0 0c          	shrd   eax,edx,0xc
c0016d6c:	50                   	push   eax
c0016d6d:	ff 35 34 80 02 c0    	push   DWORD PTR ds:0xc0028034
c0016d73:	e8 60 56 ff ff       	call   c000c3d8 <VAS::allocatePages(int, int)>
c0016d78:	59                   	pop    ecx
c0016d79:	89 c3                	mov    ebx,eax
c0016d7b:	5d                   	pop    ebp
c0016d7c:	50                   	push   eax
c0016d7d:	68 86 40 02 c0       	push   0xc0024086
c0016d82:	e8 3e 62 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0016d87:	89 34 24             	mov    DWORD PTR [esp],esi
c0016d8a:	e8 09 99 fe ff       	call   c0000698 <strlen>
c0016d8f:	8b 2d 60 8c 02 c0    	mov    ebp,DWORD PTR ds:0xc0028c60
c0016d95:	40                   	inc    eax
c0016d96:	89 04 24             	mov    DWORD PTR [esp],eax
c0016d99:	e8 19 2f ff ff       	call   c0009cb7 <malloc>
c0016d9e:	89 04 ad 80 90 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd6f80],eax
c0016da5:	58                   	pop    eax
c0016da6:	a1 60 8c 02 c0       	mov    eax,ds:0xc0028c60
c0016dab:	5a                   	pop    edx
c0016dac:	56                   	push   esi
c0016dad:	ff 34 85 80 90 02 c0 	push   DWORD PTR [eax*4-0x3ffd6f80]
c0016db4:	e8 7f 99 fe ff       	call   c0000738 <strcpy>
c0016db9:	a1 60 8c 02 c0       	mov    eax,ds:0xc0028c60
c0016dbe:	8d 50 01             	lea    edx,[eax+0x1]
c0016dc1:	89 1c 85 80 8e 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7180],ebx
c0016dc8:	89 15 60 8c 02 c0    	mov    DWORD PTR ds:0xc0028c60,edx
c0016dce:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016dd2:	83 c4 0c             	add    esp,0xc
c0016dd5:	89 14 85 80 8c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7380],edx
c0016ddc:	6a 01                	push   0x1
c0016dde:	53                   	push   ebx
c0016ddf:	56                   	push   esi
c0016de0:	e8 c2 f6 ff ff       	call   c00164a7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0016de5:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0016de9:	83 c4 10             	add    esp,0x10
c0016dec:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0016df1:	0f 85 89 00 00 00    	jne    c0016e80 <Thr::loadDLL(char const*, bool)+0x220>
c0016df7:	89 f8                	mov    eax,edi
c0016df9:	84 c0                	test   al,al
c0016dfb:	74 73                	je     c0016e70 <Thr::loadDLL(char const*, bool)+0x210>
c0016dfd:	83 ec 0c             	sub    esp,0xc
c0016e00:	68 7d 5d 02 c0       	push   0xc0025d7d
c0016e05:	e8 d1 d1 ff ff       	call   c0013fdb <Krnl::panic(char const*)>
c0016e0a:	83 c4 10             	add    esp,0x10
c0016e0d:	eb 61                	jmp    c0016e70 <Thr::loadDLL(char const*, bool)+0x210>
c0016e0f:	50                   	push   eax
c0016e10:	50                   	push   eax
c0016e11:	89 e8                	mov    eax,ebp
c0016e13:	c1 e0 0c             	shl    eax,0xc
c0016e16:	01 d8                	add    eax,ebx
c0016e18:	50                   	push   eax
c0016e19:	ff 35 34 80 02 c0    	push   DWORD PTR ds:0xc0028034
c0016e1f:	e8 1a 51 ff ff       	call   c000bf3e <VAS::getPageTableEntry(unsigned long)>
c0016e24:	83 c4 10             	add    esp,0x10
c0016e27:	8b 00                	mov    eax,DWORD PTR [eax]
c0016e29:	a8 60                	test   al,0x60
c0016e2b:	75 11                	jne    c0016e3e <Thr::loadDLL(char const*, bool)+0x1de>
c0016e2d:	83 ec 0c             	sub    esp,0xc
c0016e30:	25 00 f0 ff ff       	and    eax,0xfffff000
c0016e35:	50                   	push   eax
c0016e36:	e8 b0 34 ff ff       	call   c000a2eb <Phys::freePage(unsigned long)>
c0016e3b:	83 c4 10             	add    esp,0x10
c0016e3e:	45                   	inc    ebp
c0016e3f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016e43:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016e47:	05 ff 0f 00 00       	add    eax,0xfff
c0016e4c:	bf 00 00 00 00       	mov    edi,0x0
c0016e51:	83 d2 00             	adc    edx,0x0
c0016e54:	0f ac d0 0c          	shrd   eax,edx,0xc
c0016e58:	c1 ea 0c             	shr    edx,0xc
c0016e5b:	39 c5                	cmp    ebp,eax
c0016e5d:	89 d1                	mov    ecx,edx
c0016e5f:	89 f8                	mov    eax,edi
c0016e61:	19 c8                	sbb    eax,ecx
c0016e63:	72 aa                	jb     c0016e0f <Thr::loadDLL(char const*, bool)+0x1af>
c0016e65:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0016e6a:	75 18                	jne    c0016e84 <Thr::loadDLL(char const*, bool)+0x224>
c0016e6c:	31 db                	xor    ebx,ebx
c0016e6e:	eb 14                	jmp    c0016e84 <Thr::loadDLL(char const*, bool)+0x224>
c0016e70:	83 ec 0c             	sub    esp,0xc
c0016e73:	68 9c 5d 02 c0       	push   0xc0025d9c
c0016e78:	e8 5e d1 ff ff       	call   c0013fdb <Krnl::panic(char const*)>
c0016e7d:	83 c4 10             	add    esp,0x10
c0016e80:	31 ed                	xor    ebp,ebp
c0016e82:	eb bb                	jmp    c0016e3f <Thr::loadDLL(char const*, bool)+0x1df>
c0016e84:	81 c4 2c 01 00 00    	add    esp,0x12c
c0016e8a:	89 d8                	mov    eax,ebx
c0016e8c:	5b                   	pop    ebx
c0016e8d:	5e                   	pop    esi
c0016e8e:	5f                   	pop    edi
c0016e8f:	5d                   	pop    ebp
c0016e90:	c3                   	ret    

c0016e91 <Thr::executeDLL(unsigned long, void*)>:
c0016e91:	56                   	push   esi
c0016e92:	53                   	push   ebx
c0016e93:	52                   	push   edx
c0016e94:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016e98:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0016e9c:	85 db                	test   ebx,ebx
c0016e9e:	75 10                	jne    c0016eb0 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0016ea0:	83 ec 0c             	sub    esp,0xc
c0016ea3:	68 b8 5d 02 c0       	push   0xc0025db8
c0016ea8:	e8 2e d1 ff ff       	call   c0013fdb <Krnl::panic(char const*)>
c0016ead:	83 c4 10             	add    esp,0x10
c0016eb0:	50                   	push   eax
c0016eb1:	50                   	push   eax
c0016eb2:	53                   	push   ebx
c0016eb3:	68 e2 5d 02 c0       	push   0xc0025de2
c0016eb8:	e8 08 61 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0016ebd:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0016ec1:	89 d8                	mov    eax,ebx
c0016ec3:	83 c4 14             	add    esp,0x14
c0016ec6:	5b                   	pop    ebx
c0016ec7:	5e                   	pop    esi
c0016ec8:	ff e0                	jmp    eax
c0016eca:	66 90                	xchg   ax,ax

c0016ecc <userModeEntryPoint(void*)>:
c0016ecc:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c0016ed1:	48                   	dec    eax
c0016ed2:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c0016ed7:	75 03                	jne    c0016edc <userModeEntryPoint(void*)+0x10>
c0016ed9:	fb                   	sti    
c0016eda:	66 90                	xchg   ax,ax
c0016edc:	fb                   	sti    
c0016edd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ee2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016ee5:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0016eeb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016eef:	e9 6b 93 fe ff       	jmp    c000025f <goToUsermode>

c0016ef4 <changeTSS>:
c0016ef4:	83 ec 14             	sub    esp,0x14
c0016ef7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016efc:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0016eff:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0016f04:	c1 e2 15             	shl    edx,0x15
c0016f07:	29 d0                	sub    eax,edx
c0016f09:	50                   	push   eax
c0016f0a:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c0016f0f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016f15:	05 7c 11 00 00       	add    eax,0x117c
c0016f1a:	50                   	push   eax
c0016f1b:	e8 9c 46 ff ff       	call   c000b5bc <TSS::setESP(unsigned long)>
c0016f20:	83 c4 1c             	add    esp,0x1c
c0016f23:	c3                   	ret    

c0016f24 <switchToThread(ThreadControlBlock*)>:
c0016f24:	57                   	push   edi
c0016f25:	a1 24 94 02 c0       	mov    eax,ds:0xc0029424
c0016f2a:	56                   	push   esi
c0016f2b:	85 c0                	test   eax,eax
c0016f2d:	53                   	push   ebx
c0016f2e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016f32:	0f 85 88 00 00 00    	jne    c0016fc0 <switchToThread(ThreadControlBlock*)+0x9c>
c0016f38:	8a 43 40             	mov    al,BYTE PTR [ebx+0x40]
c0016f3b:	3c ff                	cmp    al,0xff
c0016f3d:	74 7d                	je     c0016fbc <switchToThread(ThreadControlBlock*)+0x98>
c0016f3f:	0f b6 d0             	movzx  edx,al
c0016f42:	b8 00 04 00 00       	mov    eax,0x400
c0016f47:	29 d0                	sub    eax,edx
c0016f49:	d1 f8                	sar    eax,1
c0016f4b:	03 43 34             	add    eax,DWORD PTR [ebx+0x34]
c0016f4e:	66 90                	xchg   ax,ax
c0016f50:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0016f53:	ff 15 18 95 02 c0    	call   DWORD PTR ds:0xc0029518
c0016f59:	a3 68 94 02 c0       	mov    ds:0xc0029468,eax
c0016f5e:	89 15 6c 94 02 c0    	mov    DWORD PTR ds:0xc002946c,edx
c0016f64:	89 c6                	mov    esi,eax
c0016f66:	89 d7                	mov    edi,edx
c0016f68:	2b 35 58 94 02 c0    	sub    esi,DWORD PTR ds:0xc0029458
c0016f6e:	a3 58 94 02 c0       	mov    ds:0xc0029458,eax
c0016f73:	1b 3d 5c 94 02 c0    	sbb    edi,DWORD PTR ds:0xc002945c
c0016f79:	89 35 60 94 02 c0    	mov    DWORD PTR ds:0xc0029460,esi
c0016f7f:	89 3d 64 94 02 c0    	mov    DWORD PTR ds:0xc0029464,edi
c0016f85:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016f8b:	89 15 5c 94 02 c0    	mov    DWORD PTR ds:0xc002945c,edx
c0016f91:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0016f94:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0016f97:	01 c6                	add    esi,eax
c0016f99:	11 d7                	adc    edi,edx
c0016f9b:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0016f9e:	83 ec 0c             	sub    esp,0xc
c0016fa1:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0016fa4:	53                   	push   ebx
c0016fa5:	e8 ed 92 fe ff       	call   c0000297 <switchToThreadASM>
c0016faa:	0f 20 c0             	mov    eax,cr0
c0016fad:	83 c8 08             	or     eax,0x8
c0016fb0:	0f 22 c0             	mov    cr0,eax
c0016fb3:	83 c4 10             	add    esp,0x10
c0016fb6:	5b                   	pop    ebx
c0016fb7:	5e                   	pop    esi
c0016fb8:	5f                   	pop    edi
c0016fb9:	c3                   	ret    
c0016fba:	66 90                	xchg   ax,ax
c0016fbc:	31 c0                	xor    eax,eax
c0016fbe:	eb 90                	jmp    c0016f50 <switchToThread(ThreadControlBlock*)+0x2c>
c0016fc0:	5b                   	pop    ebx
c0016fc1:	c7 05 20 94 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0029420,0x1
c0016fcb:	5e                   	pop    esi
c0016fcc:	5f                   	pop    edi
c0016fcd:	c3                   	ret    
c0016fce:	66 90                	xchg   ax,ax

c0016fd0 <Process::addArgs(char**)>:
c0016fd0:	57                   	push   edi
c0016fd1:	56                   	push   esi
c0016fd2:	53                   	push   ebx
c0016fd3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016fd7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016fdb:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0016fe5:	85 ff                	test   edi,edi
c0016fe7:	74 43                	je     c001702c <Process::addArgs(char**)+0x5c>
c0016fe9:	8b 07                	mov    eax,DWORD PTR [edi]
c0016feb:	85 c0                	test   eax,eax
c0016fed:	74 3d                	je     c001702c <Process::addArgs(char**)+0x5c>
c0016fef:	31 db                	xor    ebx,ebx
c0016ff1:	8d 76 00             	lea    esi,[esi+0x0]
c0016ff4:	83 ec 0c             	sub    esp,0xc
c0016ff7:	50                   	push   eax
c0016ff8:	e8 9b 96 fe ff       	call   c0000698 <strlen>
c0016ffd:	40                   	inc    eax
c0016ffe:	89 04 24             	mov    DWORD PTR [esp],eax
c0017001:	e8 b1 2c ff ff       	call   c0009cb7 <malloc>
c0017006:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c001700d:	5a                   	pop    edx
c001700e:	59                   	pop    ecx
c001700f:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c0017012:	43                   	inc    ebx
c0017013:	50                   	push   eax
c0017014:	e8 1f 97 fe ff       	call   c0000738 <strcpy>
c0017019:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c001701f:	83 c4 10             	add    esp,0x10
c0017022:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0017025:	85 c0                	test   eax,eax
c0017027:	75 cb                	jne    c0016ff4 <Process::addArgs(char**)+0x24>
c0017029:	8d 76 00             	lea    esi,[esi+0x0]
c001702c:	5b                   	pop    ebx
c001702d:	5e                   	pop    esi
c001702e:	5f                   	pop    edi
c001702f:	c3                   	ret    

c0017030 <Process::Process(char const*, Process*, char**)>:
c0017030:	56                   	push   esi
c0017031:	53                   	push   ebx
c0017032:	83 ec 14             	sub    esp,0x14
c0017035:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017039:	05 0c 02 00 00       	add    eax,0x20c
c001703e:	bb 07 00 00 00       	mov    ebx,0x7
c0017043:	89 c6                	mov    esi,eax
c0017045:	8d 76 00             	lea    esi,[esi+0x0]
c0017048:	85 db                	test   ebx,ebx
c001704a:	78 14                	js     c0017060 <Process::Process(char const*, Process*, char**)+0x30>
c001704c:	83 ec 0c             	sub    esp,0xc
c001704f:	56                   	push   esi
c0017050:	e8 d7 bf 00 00       	call   c002302c <ThreadControlBlock::ThreadControlBlock()>
c0017055:	83 c4 10             	add    esp,0x10
c0017058:	83 c6 5f             	add    esi,0x5f
c001705b:	4b                   	dec    ebx
c001705c:	eb ea                	jmp    c0017048 <Process::Process(char const*, Process*, char**)+0x18>
c001705e:	66 90                	xchg   ax,ax
c0017060:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017064:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001706b:	83 ec 0c             	sub    esp,0xc
c001706e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017072:	e8 ed cd ff ff       	call   c0013e64 <Krnl::newProcessEnv(Process*)>
c0017077:	83 c4 10             	add    esp,0x10
c001707a:	89 c2                	mov    edx,eax
c001707c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017080:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0017086:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001708a:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0017093:	a1 90 76 02 c0       	mov    eax,ds:0xc0027690
c0017098:	8d 50 01             	lea    edx,[eax+0x1]
c001709b:	89 15 90 76 02 c0    	mov    DWORD PTR ds:0xc0027690,edx
c00170a1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00170a5:	89 02                	mov    DWORD PTR [edx],eax
c00170a7:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c00170af:	83 ec 0c             	sub    esp,0xc
c00170b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00170b6:	e8 fc 2b ff ff       	call   c0009cb7 <malloc>
c00170bb:	83 c4 10             	add    esp,0x10
c00170be:	89 c3                	mov    ebx,eax
c00170c0:	83 ec 08             	sub    esp,0x8
c00170c3:	6a 00                	push   0x0
c00170c5:	53                   	push   ebx
c00170c6:	e8 b5 56 ff ff       	call   c000c780 <VAS::VAS(bool)>
c00170cb:	83 c4 10             	add    esp,0x10
c00170ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170d2:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00170d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170dc:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00170e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170ea:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00170ee:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00170f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170f8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00170fe:	85 c0                	test   eax,eax
c0017100:	74 42                	je     c0017144 <Process::Process(char const*, Process*, char**)+0x114>
c0017102:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017106:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001710c:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0017112:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017116:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c001711c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017120:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0017126:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001712c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017130:	05 0c 01 00 00       	add    eax,0x10c
c0017135:	83 ec 08             	sub    esp,0x8
c0017138:	52                   	push   edx
c0017139:	50                   	push   eax
c001713a:	e8 f9 95 fe ff       	call   c0000738 <strcpy>
c001713f:	83 c4 10             	add    esp,0x10
c0017142:	eb 64                	jmp    c00171a8 <Process::Process(char const*, Process*, char**)+0x178>
c0017144:	c7 44 24 04 b4 01 00 00 	mov    DWORD PTR [esp+0x4],0x1b4
c001714c:	83 ec 0c             	sub    esp,0xc
c001714f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017153:	e8 5f 2b ff ff       	call   c0009cb7 <malloc>
c0017158:	83 c4 10             	add    esp,0x10
c001715b:	89 c3                	mov    ebx,eax
c001715d:	83 ec 08             	sub    esp,0x8
c0017160:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017164:	53                   	push   ebx
c0017165:	e8 64 41 ff ff       	call   c000b2ce <VgaText::VgaText(char const*)>
c001716a:	83 c4 10             	add    esp,0x10
c001716d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017171:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0017177:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001717b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017181:	83 ec 0c             	sub    esp,0xc
c0017184:	50                   	push   eax
c0017185:	e8 0d 39 ff ff       	call   c000aa97 <addToTerminalCycle(VgaText*)>
c001718a:	83 c4 10             	add    esp,0x10
c001718d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017191:	05 0c 01 00 00       	add    eax,0x10c
c0017196:	83 ec 08             	sub    esp,0x8
c0017199:	68 01 5e 02 c0       	push   0xc0025e01
c001719e:	50                   	push   eax
c001719f:	e8 94 95 fe ff       	call   c0000738 <strcpy>
c00171a4:	83 c4 10             	add    esp,0x10
c00171a7:	90                   	nop
c00171a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00171ac:	83 c0 0c             	add    eax,0xc
c00171af:	83 ec 08             	sub    esp,0x8
c00171b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00171b6:	50                   	push   eax
c00171b7:	e8 7c 95 fe ff       	call   c0000738 <strcpy>
c00171bc:	83 c4 10             	add    esp,0x10
c00171bf:	83 ec 08             	sub    esp,0x8
c00171c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00171c6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00171ca:	e8 01 fe ff ff       	call   c0016fd0 <Process::addArgs(char**)>
c00171cf:	83 c4 10             	add    esp,0x10
c00171d2:	83 ec 08             	sub    esp,0x8
c00171d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00171d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00171dd:	e8 8f ed ff ff       	call   c0015f71 <Thr::loadProgramIntoMemory(Process*, char const*)>
c00171e2:	83 c4 10             	add    esp,0x10
c00171e5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00171e9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00171ed:	83 f0 01             	xor    eax,0x1
c00171f0:	88 c2                	mov    dl,al
c00171f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00171f6:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c00171fc:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017201:	83 ec 08             	sub    esp,0x8
c0017204:	50                   	push   eax
c0017205:	68 58 5e 02 c0       	push   0xc0025e58
c001720a:	e8 b6 5d ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001720f:	83 c4 10             	add    esp,0x10
c0017212:	90                   	nop
c0017213:	83 c4 14             	add    esp,0x14
c0017216:	5b                   	pop    ebx
c0017217:	5e                   	pop    esi
c0017218:	c3                   	ret    
c0017219:	90                   	nop
c001721a:	66 90                	xchg   ax,ax

c001721c <Process::Process(bool, char const*, Process*, char**)>:
c001721c:	56                   	push   esi
c001721d:	53                   	push   ebx
c001721e:	83 ec 24             	sub    esp,0x24
c0017221:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017225:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017229:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001722d:	05 0c 02 00 00       	add    eax,0x20c
c0017232:	bb 07 00 00 00       	mov    ebx,0x7
c0017237:	89 c6                	mov    esi,eax
c0017239:	8d 76 00             	lea    esi,[esi+0x0]
c001723c:	85 db                	test   ebx,ebx
c001723e:	78 14                	js     c0017254 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0017240:	83 ec 0c             	sub    esp,0xc
c0017243:	56                   	push   esi
c0017244:	e8 e3 bd 00 00       	call   c002302c <ThreadControlBlock::ThreadControlBlock()>
c0017249:	83 c4 10             	add    esp,0x10
c001724c:	83 c6 5f             	add    esi,0x5f
c001724f:	4b                   	dec    ebx
c0017250:	eb ea                	jmp    c001723c <Process::Process(bool, char const*, Process*, char**)+0x20>
c0017252:	66 90                	xchg   ax,ax
c0017254:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017258:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001725f:	83 ec 0c             	sub    esp,0xc
c0017262:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017266:	e8 f9 cb ff ff       	call   c0013e64 <Krnl::newProcessEnv(Process*)>
c001726b:	83 c4 10             	add    esp,0x10
c001726e:	89 c2                	mov    edx,eax
c0017270:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017274:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c001727a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001727e:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0017287:	a1 90 76 02 c0       	mov    eax,ds:0xc0027690
c001728c:	8d 50 01             	lea    edx,[eax+0x1]
c001728f:	89 15 90 76 02 c0    	mov    DWORD PTR ds:0xc0027690,edx
c0017295:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017299:	89 02                	mov    DWORD PTR [edx],eax
c001729b:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c00172a3:	83 ec 0c             	sub    esp,0xc
c00172a6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00172aa:	e8 08 2a ff ff       	call   c0009cb7 <malloc>
c00172af:	83 c4 10             	add    esp,0x10
c00172b2:	89 c3                	mov    ebx,eax
c00172b4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00172b9:	83 ec 08             	sub    esp,0x8
c00172bc:	50                   	push   eax
c00172bd:	53                   	push   ebx
c00172be:	e8 bd 54 ff ff       	call   c000c780 <VAS::VAS(bool)>
c00172c3:	83 c4 10             	add    esp,0x10
c00172c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00172ca:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00172d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00172d4:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00172de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00172e2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00172e6:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00172ec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00172f0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00172f6:	85 c0                	test   eax,eax
c00172f8:	74 42                	je     c001733c <Process::Process(bool, char const*, Process*, char**)+0x120>
c00172fa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00172fe:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0017304:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001730a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001730e:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0017314:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017318:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001731e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0017324:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017328:	05 0c 01 00 00       	add    eax,0x10c
c001732d:	83 ec 08             	sub    esp,0x8
c0017330:	52                   	push   edx
c0017331:	50                   	push   eax
c0017332:	e8 01 94 fe ff       	call   c0000738 <strcpy>
c0017337:	83 c4 10             	add    esp,0x10
c001733a:	eb 64                	jmp    c00173a0 <Process::Process(bool, char const*, Process*, char**)+0x184>
c001733c:	c7 44 24 18 b4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1b4
c0017344:	83 ec 0c             	sub    esp,0xc
c0017347:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001734b:	e8 67 29 ff ff       	call   c0009cb7 <malloc>
c0017350:	83 c4 10             	add    esp,0x10
c0017353:	89 c3                	mov    ebx,eax
c0017355:	83 ec 08             	sub    esp,0x8
c0017358:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001735c:	53                   	push   ebx
c001735d:	e8 6c 3f ff ff       	call   c000b2ce <VgaText::VgaText(char const*)>
c0017362:	83 c4 10             	add    esp,0x10
c0017365:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017369:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c001736f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017373:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017379:	83 ec 0c             	sub    esp,0xc
c001737c:	50                   	push   eax
c001737d:	e8 15 37 ff ff       	call   c000aa97 <addToTerminalCycle(VgaText*)>
c0017382:	83 c4 10             	add    esp,0x10
c0017385:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017389:	05 0c 01 00 00       	add    eax,0x10c
c001738e:	83 ec 08             	sub    esp,0x8
c0017391:	68 01 5e 02 c0       	push   0xc0025e01
c0017396:	50                   	push   eax
c0017397:	e8 9c 93 fe ff       	call   c0000738 <strcpy>
c001739c:	83 c4 10             	add    esp,0x10
c001739f:	90                   	nop
c00173a0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00173a4:	83 c0 0c             	add    eax,0xc
c00173a7:	83 ec 08             	sub    esp,0x8
c00173aa:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00173ae:	50                   	push   eax
c00173af:	e8 84 93 fe ff       	call   c0000738 <strcpy>
c00173b4:	83 c4 10             	add    esp,0x10
c00173b7:	83 ec 08             	sub    esp,0x8
c00173ba:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00173be:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00173c2:	e8 09 fc ff ff       	call   c0016fd0 <Process::addArgs(char**)>
c00173c7:	83 c4 10             	add    esp,0x10
c00173ca:	90                   	nop
c00173cb:	83 c4 24             	add    esp,0x24
c00173ce:	5b                   	pop    ebx
c00173cf:	5e                   	pop    esi
c00173d0:	c3                   	ret    
c00173d1:	8d 76 00             	lea    esi,[esi+0x0]

c00173d4 <taskStartupFunction>:
c00173d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00173d9:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c00173dc:	c3                   	ret    
c00173dd:	90                   	nop
c00173de:	66 90                	xchg   ax,ax

c00173e0 <Semaphore::Semaphore(int)>:
c00173e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00173e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00173e8:	89 10                	mov    DWORD PTR [eax],edx
c00173ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00173ee:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00173f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00173f9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0017400:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017404:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001740b:	90                   	nop
c001740c:	c3                   	ret    
c001740d:	90                   	nop
c001740e:	66 90                	xchg   ax,ax

c0017410 <Mutex::Mutex()>:
c0017410:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017414:	6a 01                	push   0x1
c0017416:	50                   	push   eax
c0017417:	e8 c4 ff ff ff       	call   c00173e0 <Semaphore::Semaphore(int)>
c001741c:	83 c4 08             	add    esp,0x8
c001741f:	90                   	nop
c0017420:	c3                   	ret    
c0017421:	90                   	nop
c0017422:	66 90                	xchg   ax,ax

c0017424 <Process::createThread(void (*)(void*), void*, int)>:
c0017424:	57                   	push   edi
c0017425:	31 c9                	xor    ecx,ecx
c0017427:	56                   	push   esi
c0017428:	53                   	push   ebx
c0017429:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001742d:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0017434:	89 f2                	mov    edx,esi
c0017436:	66 90                	xchg   ax,ax
c0017438:	0f b7 c2             	movzx  eax,dx
c001743b:	83 e2 01             	and    edx,0x1
c001743e:	74 14                	je     c0017454 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0017440:	d1 f8                	sar    eax,1
c0017442:	41                   	inc    ecx
c0017443:	89 c2                	mov    edx,eax
c0017445:	83 f9 10             	cmp    ecx,0x10
c0017448:	75 ee                	jne    c0017438 <Process::createThread(void (*)(void*), void*, int)+0x14>
c001744a:	31 db                	xor    ebx,ebx
c001744c:	89 d8                	mov    eax,ebx
c001744e:	5b                   	pop    ebx
c001744f:	5e                   	pop    esi
c0017450:	5f                   	pop    edi
c0017451:	c3                   	ret    
c0017452:	66 90                	xchg   ax,ax
c0017454:	b8 01 00 00 00       	mov    eax,0x1
c0017459:	d3 e0                	shl    eax,cl
c001745b:	09 c6                	or     esi,eax
c001745d:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0017460:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0017467:	01 c0                	add    eax,eax
c0017469:	01 c8                	add    eax,ecx
c001746b:	8d 04 80             	lea    eax,[eax+eax*4]
c001746e:	01 d8                	add    eax,ebx
c0017470:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0017477:	75 0b                	jne    c0017484 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0017479:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0017483:	90                   	nop
c0017484:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c001748a:	83 ec 08             	sub    esp,0x8
c001748d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0017490:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0017493:	01 c0                	add    eax,eax
c0017495:	01 c8                	add    eax,ecx
c0017497:	8d 3c 80             	lea    edi,[eax+eax*4]
c001749a:	8d 04 3b             	lea    eax,[ebx+edi*1]
c001749d:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c00174a3:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c00174a9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00174ad:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c00174b3:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c00174b9:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c00174c0:	89 ca                	mov    edx,ecx
c00174c2:	f7 da                	neg    edx
c00174c4:	c1 e2 15             	shl    edx,0x15
c00174c7:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c00174cd:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c00174d3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00174d7:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c00174e1:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c00174e7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00174eb:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c00174f1:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c00174fb:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0017505:	53                   	push   ebx
c0017506:	68 44 94 02 c0       	push   0xc0029444
c001750b:	e8 bc b8 00 00       	call   c0022dcc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017510:	83 c4 10             	add    esp,0x10
c0017513:	89 d8                	mov    eax,ebx
c0017515:	5b                   	pop    ebx
c0017516:	5e                   	pop    esi
c0017517:	5f                   	pop    edi
c0017518:	c3                   	ret    
c0017519:	90                   	nop
c001751a:	66 90                	xchg   ax,ax

c001751c <Process::createUserThread()>:
c001751c:	83 ec 0c             	sub    esp,0xc
c001751f:	68 80 00 00 00       	push   0x80
c0017524:	6a 00                	push   0x0
c0017526:	68 cc 6e 01 c0       	push   0xc0016ecc
c001752b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001752f:	e8 f0 fe ff ff       	call   c0017424 <Process::createThread(void (*)(void*), void*, int)>
c0017534:	83 c4 1c             	add    esp,0x1c
c0017537:	c3                   	ret    

c0017538 <setupMultitasking(void (*)())>:
c0017538:	56                   	push   esi
c0017539:	53                   	push   ebx
c001753a:	51                   	push   ecx
c001753b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001753f:	eb 13                	jmp    c0017554 <setupMultitasking(void (*)())+0x1c>
c0017541:	8d 76 00             	lea    esi,[esi+0x0]
c0017544:	83 ec 0c             	sub    esp,0xc
c0017547:	68 44 94 02 c0       	push   0xc0029444
c001754c:	e8 c3 b7 00 00       	call   c0022d14 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017551:	83 c4 10             	add    esp,0x10
c0017554:	83 ec 0c             	sub    esp,0xc
c0017557:	68 44 94 02 c0       	push   0xc0029444
c001755c:	e8 8f b7 00 00       	call   c0022cf0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017561:	83 c4 10             	add    esp,0x10
c0017564:	84 c0                	test   al,al
c0017566:	74 dc                	je     c0017544 <setupMultitasking(void (*)())+0xc>
c0017568:	83 ec 0c             	sub    esp,0xc
c001756b:	68 1f 07 00 00       	push   0x71f
c0017570:	e8 42 27 ff ff       	call   c0009cb7 <malloc>
c0017575:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001757c:	89 c3                	mov    ebx,eax
c001757e:	6a 00                	push   0x0
c0017580:	68 05 5e 02 c0       	push   0xc0025e05
c0017585:	6a 01                	push   0x1
c0017587:	50                   	push   eax
c0017588:	e8 8f fc ff ff       	call   c001721c <Process::Process(bool, char const*, Process*, char**)>
c001758d:	83 c4 14             	add    esp,0x14
c0017590:	89 1d 50 94 02 c0    	mov    DWORD PTR ds:0xc0029450,ebx
c0017596:	ff b3 06 05 00 00    	push   DWORD PTR [ebx+0x506]
c001759c:	e8 04 38 ff ff       	call   c000ada5 <setActiveTerminal(VgaText*)>
c00175a1:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c00175a9:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c00175b3:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00175b9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00175bc:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c00175c6:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c00175cc:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c00175d2:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c00175dc:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c00175e6:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c00175f0:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c00175f6:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0017600:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0017606:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0017610:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0017616:	58                   	pop    eax
c0017617:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001761d:	5a                   	pop    edx
c001761e:	68 01 5e 02 c0       	push   0xc0025e01
c0017623:	50                   	push   eax
c0017624:	e8 0f 91 fe ff       	call   c0000738 <strcpy>
c0017629:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0017630:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0017634:	83 c4 14             	add    esp,0x14
c0017637:	5b                   	pop    ebx
c0017638:	5e                   	pop    esi
c0017639:	e9 4b 8c fe ff       	jmp    c0000289 <switchToThreadASMFirstTime>
c001763e:	66 90                	xchg   ax,ax

c0017640 <schedule()>:
c0017640:	a1 24 94 02 c0       	mov    eax,ds:0xc0029424
c0017645:	85 c0                	test   eax,eax
c0017647:	74 0b                	je     c0017654 <schedule()+0x14>
c0017649:	c7 05 20 94 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0029420,0x1
c0017653:	c3                   	ret    
c0017654:	53                   	push   ebx
c0017655:	83 ec 14             	sub    esp,0x14
c0017658:	68 44 94 02 c0       	push   0xc0029444
c001765d:	e8 8e b6 00 00       	call   c0022cf0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017662:	83 c4 10             	add    esp,0x10
c0017665:	84 c0                	test   al,al
c0017667:	75 3b                	jne    c00176a4 <schedule()+0x64>
c0017669:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001766e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0017671:	4a                   	dec    edx
c0017672:	74 38                	je     c00176ac <schedule()+0x6c>
c0017674:	83 ec 0c             	sub    esp,0xc
c0017677:	68 44 94 02 c0       	push   0xc0029444
c001767c:	e8 8b b6 00 00       	call   c0022d0c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017681:	c7 04 24 44 94 02 c0 	mov    DWORD PTR [esp],0xc0029444
c0017688:	89 c3                	mov    ebx,eax
c001768a:	e8 85 b6 00 00       	call   c0022d14 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001768f:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0017696:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017699:	e8 86 f8 ff ff       	call   c0016f24 <switchToThread(ThreadControlBlock*)>
c001769e:	83 c4 10             	add    esp,0x10
c00176a1:	8d 76 00             	lea    esi,[esi+0x0]
c00176a4:	83 c4 08             	add    esp,0x8
c00176a7:	5b                   	pop    ebx
c00176a8:	c3                   	ret    
c00176a9:	8d 76 00             	lea    esi,[esi+0x0]
c00176ac:	83 ec 08             	sub    esp,0x8
c00176af:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00176b6:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c00176bc:	68 44 94 02 c0       	push   0xc0029444
c00176c1:	e8 06 b7 00 00       	call   c0022dcc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00176c6:	83 c4 10             	add    esp,0x10
c00176c9:	eb a9                	jmp    c0017674 <schedule()+0x34>
c00176cb:	90                   	nop

c00176cc <Semaphore::tryAcquire()>:
c00176cc:	53                   	push   ebx
c00176cd:	83 ec 08             	sub    esp,0x8
c00176d0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00176d4:	fa                   	cli    
c00176d5:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c00176da:	8d 50 01             	lea    edx,[eax+0x1]
c00176dd:	89 15 28 94 02 c0    	mov    DWORD PTR ds:0xc0029428,edx
c00176e3:	8b 15 24 94 02 c0    	mov    edx,DWORD PTR ds:0xc0029424
c00176e9:	8d 5a 01             	lea    ebx,[edx+0x1]
c00176ec:	89 1d 24 94 02 c0    	mov    DWORD PTR ds:0xc0029424,ebx
c00176f2:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c00176f5:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c00176f7:	7c 33                	jl     c001772c <Semaphore::tryAcquire()+0x60>
c00176f9:	89 15 24 94 02 c0    	mov    DWORD PTR ds:0xc0029424,edx
c00176ff:	85 d2                	test   edx,edx
c0017701:	75 0d                	jne    c0017710 <Semaphore::tryAcquire()+0x44>
c0017703:	8b 15 20 94 02 c0    	mov    edx,DWORD PTR ds:0xc0029420
c0017709:	85 d2                	test   edx,edx
c001770b:	75 6b                	jne    c0017778 <Semaphore::tryAcquire()+0xac>
c001770d:	8d 76 00             	lea    esi,[esi+0x0]
c0017710:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c0017715:	85 c0                	test   eax,eax
c0017717:	74 0b                	je     c0017724 <Semaphore::tryAcquire()+0x58>
c0017719:	8d 76 00             	lea    esi,[esi+0x0]
c001771c:	31 c0                	xor    eax,eax
c001771e:	83 c4 08             	add    esp,0x8
c0017721:	5b                   	pop    ebx
c0017722:	c3                   	ret    
c0017723:	90                   	nop
c0017724:	fb                   	sti    
c0017725:	83 c4 08             	add    esp,0x8
c0017728:	5b                   	pop    ebx
c0017729:	c3                   	ret    
c001772a:	66 90                	xchg   ax,ax
c001772c:	43                   	inc    ebx
c001772d:	89 15 24 94 02 c0    	mov    DWORD PTR ds:0xc0029424,edx
c0017733:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0017736:	85 d2                	test   edx,edx
c0017738:	75 22                	jne    c001775c <Semaphore::tryAcquire()+0x90>
c001773a:	8b 0d 20 94 02 c0    	mov    ecx,DWORD PTR ds:0xc0029420
c0017740:	85 c9                	test   ecx,ecx
c0017742:	74 18                	je     c001775c <Semaphore::tryAcquire()+0x90>
c0017744:	c7 05 20 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029420,0x0
c001774e:	e8 ed fe ff ff       	call   c0017640 <schedule()>
c0017753:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c0017758:	48                   	dec    eax
c0017759:	8d 76 00             	lea    esi,[esi+0x0]
c001775c:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c0017761:	85 c0                	test   eax,eax
c0017763:	75 0b                	jne    c0017770 <Semaphore::tryAcquire()+0xa4>
c0017765:	fb                   	sti    
c0017766:	b0 01                	mov    al,0x1
c0017768:	83 c4 08             	add    esp,0x8
c001776b:	5b                   	pop    ebx
c001776c:	c3                   	ret    
c001776d:	8d 76 00             	lea    esi,[esi+0x0]
c0017770:	b0 01                	mov    al,0x1
c0017772:	83 c4 08             	add    esp,0x8
c0017775:	5b                   	pop    ebx
c0017776:	c3                   	ret    
c0017777:	90                   	nop
c0017778:	c7 05 20 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029420,0x0
c0017782:	e8 b9 fe ff ff       	call   c0017640 <schedule()>
c0017787:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c001778c:	48                   	dec    eax
c001778d:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c0017792:	85 c0                	test   eax,eax
c0017794:	75 86                	jne    c001771c <Semaphore::tryAcquire()+0x50>
c0017796:	eb 8c                	jmp    c0017724 <Semaphore::tryAcquire()+0x58>

c0017798 <Semaphore::assertLocked(char const*)>:
c0017798:	83 ec 0c             	sub    esp,0xc
c001779b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001779f:	fa                   	cli    
c00177a0:	ff 05 28 94 02 c0    	inc    DWORD PTR ds:0xc0029428
c00177a6:	a1 24 94 02 c0       	mov    eax,ds:0xc0029424
c00177ab:	8d 48 01             	lea    ecx,[eax+0x1]
c00177ae:	89 0d 24 94 02 c0    	mov    DWORD PTR ds:0xc0029424,ecx
c00177b4:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00177b6:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c00177b9:	7c 29                	jl     c00177e4 <Semaphore::assertLocked(char const*)+0x4c>
c00177bb:	90                   	nop
c00177bc:	a3 24 94 02 c0       	mov    ds:0xc0029424,eax
c00177c1:	85 c0                	test   eax,eax
c00177c3:	75 0b                	jne    c00177d0 <Semaphore::assertLocked(char const*)+0x38>
c00177c5:	a1 20 94 02 c0       	mov    eax,ds:0xc0029420
c00177ca:	85 c0                	test   eax,eax
c00177cc:	75 2e                	jne    c00177fc <Semaphore::assertLocked(char const*)+0x64>
c00177ce:	66 90                	xchg   ax,ax
c00177d0:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c00177d5:	48                   	dec    eax
c00177d6:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c00177db:	75 03                	jne    c00177e0 <Semaphore::assertLocked(char const*)+0x48>
c00177dd:	fb                   	sti    
c00177de:	66 90                	xchg   ax,ax
c00177e0:	83 c4 0c             	add    esp,0xc
c00177e3:	c3                   	ret    
c00177e4:	83 ec 0c             	sub    esp,0xc
c00177e7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00177eb:	e8 eb c7 ff ff       	call   c0013fdb <Krnl::panic(char const*)>
c00177f0:	a1 24 94 02 c0       	mov    eax,ds:0xc0029424
c00177f5:	83 c4 10             	add    esp,0x10
c00177f8:	48                   	dec    eax
c00177f9:	eb c1                	jmp    c00177bc <Semaphore::assertLocked(char const*)+0x24>
c00177fb:	90                   	nop
c00177fc:	c7 05 20 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029420,0x0
c0017806:	e8 35 fe ff ff       	call   c0017640 <schedule()>
c001780b:	eb c3                	jmp    c00177d0 <Semaphore::assertLocked(char const*)+0x38>
c001780d:	8d 76 00             	lea    esi,[esi+0x0]

c0017810 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0017810:	83 ec 0c             	sub    esp,0xc
c0017813:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017818:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001781c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001781f:	e8 1c fe ff ff       	call   c0017640 <schedule()>
c0017824:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c0017829:	48                   	dec    eax
c001782a:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c001782f:	75 03                	jne    c0017834 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0017831:	fb                   	sti    
c0017832:	66 90                	xchg   ax,ax
c0017834:	83 c4 0c             	add    esp,0xc
c0017837:	c3                   	ret    

c0017838 <blockTask(TaskState)>:
c0017838:	83 ec 0c             	sub    esp,0xc
c001783b:	fa                   	cli    
c001783c:	ff 05 28 94 02 c0    	inc    DWORD PTR ds:0xc0029428
c0017842:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017846:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001784b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001784e:	e8 ed fd ff ff       	call   c0017640 <schedule()>
c0017853:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c0017858:	48                   	dec    eax
c0017859:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c001785e:	75 04                	jne    c0017864 <blockTask(TaskState)+0x2c>
c0017860:	fb                   	sti    
c0017861:	8d 76 00             	lea    esi,[esi+0x0]
c0017864:	83 c4 0c             	add    esp,0xc
c0017867:	c3                   	ret    

c0017868 <waitTask(int, int*, int)>:
c0017868:	83 ec 18             	sub    esp,0x18
c001786b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017870:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017874:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0017877:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001787b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017880:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0017883:	6a 07                	push   0x7
c0017885:	e8 ae ff ff ff       	call   c0017838 <blockTask(TaskState)>
c001788a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001788f:	83 c4 10             	add    esp,0x10
c0017892:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0017895:	85 d2                	test   edx,edx
c0017897:	74 0b                	je     c00178a4 <waitTask(int, int*, int)+0x3c>
c0017899:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c001789c:	89 02                	mov    DWORD PTR [edx],eax
c001789e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00178a3:	90                   	nop
c00178a4:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c00178a7:	83 c4 0c             	add    esp,0xc
c00178aa:	c3                   	ret    
c00178ab:	90                   	nop

c00178ac <milliTenthSleepUntil(unsigned int)>:
c00178ac:	83 ec 0c             	sub    esp,0xc
c00178af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178b3:	39 05 2c 85 02 c0    	cmp    DWORD PTR ds:0xc002852c,eax
c00178b9:	76 05                	jbe    c00178c0 <milliTenthSleepUntil(unsigned int)+0x14>
c00178bb:	90                   	nop
c00178bc:	83 c4 0c             	add    esp,0xc
c00178bf:	c3                   	ret    
c00178c0:	fa                   	cli    
c00178c1:	ff 05 28 94 02 c0    	inc    DWORD PTR ds:0xc0029428
c00178c7:	83 ec 08             	sub    esp,0x8
c00178ca:	ff 05 24 94 02 c0    	inc    DWORD PTR ds:0xc0029424
c00178d0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00178d6:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c00178d9:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c00178df:	68 38 94 02 c0       	push   0xc0029438
c00178e4:	e8 e3 b4 00 00       	call   c0022dcc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00178e9:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00178f0:	e8 43 ff ff ff       	call   c0017838 <blockTask(TaskState)>
c00178f5:	a1 24 94 02 c0       	mov    eax,ds:0xc0029424
c00178fa:	83 c4 10             	add    esp,0x10
c00178fd:	48                   	dec    eax
c00178fe:	a3 24 94 02 c0       	mov    ds:0xc0029424,eax
c0017903:	85 c0                	test   eax,eax
c0017905:	75 09                	jne    c0017910 <milliTenthSleepUntil(unsigned int)+0x64>
c0017907:	a1 20 94 02 c0       	mov    eax,ds:0xc0029420
c001790c:	85 c0                	test   eax,eax
c001790e:	75 14                	jne    c0017924 <milliTenthSleepUntil(unsigned int)+0x78>
c0017910:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c0017915:	48                   	dec    eax
c0017916:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c001791b:	75 9f                	jne    c00178bc <milliTenthSleepUntil(unsigned int)+0x10>
c001791d:	fb                   	sti    
c001791e:	83 c4 0c             	add    esp,0xc
c0017921:	c3                   	ret    
c0017922:	66 90                	xchg   ax,ax
c0017924:	c7 05 20 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029420,0x0
c001792e:	e8 0d fd ff ff       	call   c0017640 <schedule()>
c0017933:	eb db                	jmp    c0017910 <milliTenthSleepUntil(unsigned int)+0x64>
c0017935:	8d 76 00             	lea    esi,[esi+0x0]

c0017938 <milliTenthSleep(unsigned int)>:
c0017938:	a1 2c 85 02 c0       	mov    eax,ds:0xc002852c
c001793d:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0017941:	e9 66 ff ff ff       	jmp    c00178ac <milliTenthSleepUntil(unsigned int)>
c0017946:	66 90                	xchg   ax,ax

c0017948 <sleep(unsigned int)>:
c0017948:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001794c:	8d 04 80             	lea    eax,[eax+eax*4]
c001794f:	8d 04 80             	lea    eax,[eax+eax*4]
c0017952:	8d 04 80             	lea    eax,[eax+eax*4]
c0017955:	8d 04 80             	lea    eax,[eax+eax*4]
c0017958:	c1 e0 04             	shl    eax,0x4
c001795b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001795f:	eb d7                	jmp    c0017938 <milliTenthSleep(unsigned int)>
c0017961:	90                   	nop
c0017962:	66 90                	xchg   ax,ax

c0017964 <Semaphore::acquire()>:
c0017964:	83 ec 0c             	sub    esp,0xc
c0017967:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001796b:	fa                   	cli    
c001796c:	a1 24 94 02 c0       	mov    eax,ds:0xc0029424
c0017971:	ff 05 28 94 02 c0    	inc    DWORD PTR ds:0xc0029428
c0017977:	8d 48 01             	lea    ecx,[eax+0x1]
c001797a:	89 0d 24 94 02 c0    	mov    DWORD PTR ds:0xc0029424,ecx
c0017980:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0017983:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0017985:	7d 2d                	jge    c00179b4 <Semaphore::acquire()+0x50>
c0017987:	41                   	inc    ecx
c0017988:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001798b:	90                   	nop
c001798c:	a3 24 94 02 c0       	mov    ds:0xc0029424,eax
c0017991:	85 c0                	test   eax,eax
c0017993:	75 0b                	jne    c00179a0 <Semaphore::acquire()+0x3c>
c0017995:	a1 20 94 02 c0       	mov    eax,ds:0xc0029420
c001799a:	85 c0                	test   eax,eax
c001799c:	75 62                	jne    c0017a00 <Semaphore::acquire()+0x9c>
c001799e:	66 90                	xchg   ax,ax
c00179a0:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c00179a5:	48                   	dec    eax
c00179a6:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c00179ab:	75 03                	jne    c00179b0 <Semaphore::acquire()+0x4c>
c00179ad:	fb                   	sti    
c00179ae:	66 90                	xchg   ax,ax
c00179b0:	83 c4 0c             	add    esp,0xc
c00179b3:	c3                   	ret    
c00179b4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00179b9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00179c0:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00179c3:	85 c9                	test   ecx,ecx
c00179c5:	74 4d                	je     c0017a14 <Semaphore::acquire()+0xb0>
c00179c7:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c00179ca:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00179d0:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c00179d3:	90                   	nop
c00179d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00179d9:	83 ec 0c             	sub    esp,0xc
c00179dc:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00179df:	68 80 5e 02 c0       	push   0xc0025e80
c00179e4:	e8 dc 55 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00179e9:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c00179f0:	e8 43 fe ff ff       	call   c0017838 <blockTask(TaskState)>
c00179f5:	a1 24 94 02 c0       	mov    eax,ds:0xc0029424
c00179fa:	83 c4 10             	add    esp,0x10
c00179fd:	48                   	dec    eax
c00179fe:	eb 8c                	jmp    c001798c <Semaphore::acquire()+0x28>
c0017a00:	c7 05 20 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029420,0x0
c0017a0a:	e8 31 fc ff ff       	call   c0017640 <schedule()>
c0017a0f:	eb 8f                	jmp    c00179a0 <Semaphore::acquire()+0x3c>
c0017a11:	8d 76 00             	lea    esi,[esi+0x0]
c0017a14:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017a19:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0017a1c:	eb b6                	jmp    c00179d4 <Semaphore::acquire()+0x70>
c0017a1e:	66 90                	xchg   ax,ax

c0017a20 <taskReturned>:
c0017a20:	83 ec 18             	sub    esp,0x18
c0017a23:	68 a0 5e 02 c0       	push   0xc0025ea0
c0017a28:	e8 ae c5 ff ff       	call   c0013fdb <Krnl::panic(char const*)>
c0017a2d:	83 c4 10             	add    esp,0x10
c0017a30:	83 ec 0c             	sub    esp,0xc
c0017a33:	6a 02                	push   0x2
c0017a35:	e8 fe fd ff ff       	call   c0017838 <blockTask(TaskState)>
c0017a3a:	fa                   	cli    
c0017a3b:	ff 05 28 94 02 c0    	inc    DWORD PTR ds:0xc0029428
c0017a41:	e8 fa fb ff ff       	call   c0017640 <schedule()>
c0017a46:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c0017a4b:	83 c4 10             	add    esp,0x10
c0017a4e:	48                   	dec    eax
c0017a4f:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c0017a54:	85 c0                	test   eax,eax
c0017a56:	75 d8                	jne    c0017a30 <taskReturned+0x10>
c0017a58:	fb                   	sti    
c0017a59:	eb d5                	jmp    c0017a30 <taskReturned+0x10>
c0017a5b:	90                   	nop

c0017a5c <Thr::processFromPID(int)>:
c0017a5c:	57                   	push   edi
c0017a5d:	56                   	push   esi
c0017a5e:	53                   	push   ebx
c0017a5f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017a63:	fa                   	cli    
c0017a64:	ff 05 28 94 02 c0    	inc    DWORD PTR ds:0xc0029428
c0017a6a:	83 ec 0c             	sub    esp,0xc
c0017a6d:	68 44 94 02 c0       	push   0xc0029444
c0017a72:	e8 95 b2 00 00       	call   c0022d0c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017a77:	83 c4 10             	add    esp,0x10
c0017a7a:	89 c7                	mov    edi,eax
c0017a7c:	eb 16                	jmp    c0017a94 <Thr::processFromPID(int)+0x38>
c0017a7e:	66 90                	xchg   ax,ax
c0017a80:	83 ec 0c             	sub    esp,0xc
c0017a83:	68 44 94 02 c0       	push   0xc0029444
c0017a88:	e8 7f b2 00 00       	call   c0022d0c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017a8d:	83 c4 10             	add    esp,0x10
c0017a90:	39 f8                	cmp    eax,edi
c0017a92:	74 4c                	je     c0017ae0 <Thr::processFromPID(int)+0x84>
c0017a94:	83 ec 0c             	sub    esp,0xc
c0017a97:	68 44 94 02 c0       	push   0xc0029444
c0017a9c:	e8 6b b2 00 00       	call   c0022d0c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017aa1:	c7 04 24 44 94 02 c0 	mov    DWORD PTR [esp],0xc0029444
c0017aa8:	89 c3                	mov    ebx,eax
c0017aaa:	e8 65 b2 00 00       	call   c0022d14 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017aaf:	58                   	pop    eax
c0017ab0:	5a                   	pop    edx
c0017ab1:	53                   	push   ebx
c0017ab2:	68 44 94 02 c0       	push   0xc0029444
c0017ab7:	e8 10 b3 00 00       	call   c0022dcc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017abc:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0017abf:	83 c4 10             	add    esp,0x10
c0017ac2:	39 30                	cmp    DWORD PTR [eax],esi
c0017ac4:	75 ba                	jne    c0017a80 <Thr::processFromPID(int)+0x24>
c0017ac6:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c0017acb:	48                   	dec    eax
c0017acc:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c0017ad1:	74 09                	je     c0017adc <Thr::processFromPID(int)+0x80>
c0017ad3:	90                   	nop
c0017ad4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0017ad7:	5b                   	pop    ebx
c0017ad8:	5e                   	pop    esi
c0017ad9:	5f                   	pop    edi
c0017ada:	c3                   	ret    
c0017adb:	90                   	nop
c0017adc:	fb                   	sti    
c0017add:	eb f5                	jmp    c0017ad4 <Thr::processFromPID(int)+0x78>
c0017adf:	90                   	nop
c0017ae0:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c0017ae5:	48                   	dec    eax
c0017ae6:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c0017aeb:	75 07                	jne    c0017af4 <Thr::processFromPID(int)+0x98>
c0017aed:	fb                   	sti    
c0017aee:	5b                   	pop    ebx
c0017aef:	5e                   	pop    esi
c0017af0:	5f                   	pop    edi
c0017af1:	c3                   	ret    
c0017af2:	66 90                	xchg   ax,ax
c0017af4:	5b                   	pop    ebx
c0017af5:	31 c0                	xor    eax,eax
c0017af7:	5e                   	pop    esi
c0017af8:	5f                   	pop    edi
c0017af9:	c3                   	ret    
c0017afa:	66 90                	xchg   ax,ax

c0017afc <unblockTask(ThreadControlBlock*)>:
c0017afc:	53                   	push   ebx
c0017afd:	83 ec 08             	sub    esp,0x8
c0017b00:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017b04:	fa                   	cli    
c0017b05:	ff 05 28 94 02 c0    	inc    DWORD PTR ds:0xc0029428
c0017b0b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0017b0e:	85 c0                	test   eax,eax
c0017b10:	74 66                	je     c0017b78 <unblockTask(ThreadControlBlock*)+0x7c>
c0017b12:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0017b15:	48                   	dec    eax
c0017b16:	74 38                	je     c0017b50 <unblockTask(ThreadControlBlock*)+0x54>
c0017b18:	83 ec 0c             	sub    esp,0xc
c0017b1b:	68 44 94 02 c0       	push   0xc0029444
c0017b20:	e8 e7 b1 00 00       	call   c0022d0c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017b25:	83 c4 10             	add    esp,0x10
c0017b28:	85 c0                	test   eax,eax
c0017b2a:	75 1c                	jne    c0017b48 <unblockTask(ThreadControlBlock*)+0x4c>
c0017b2c:	eb 5e                	jmp    c0017b8c <unblockTask(ThreadControlBlock*)+0x90>
c0017b2e:	66 90                	xchg   ax,ax
c0017b30:	83 ec 08             	sub    esp,0x8
c0017b33:	50                   	push   eax
c0017b34:	68 44 94 02 c0       	push   0xc0029444
c0017b39:	e8 7e b5 00 00       	call   c00230bc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0017b3e:	83 c4 10             	add    esp,0x10
c0017b41:	85 c0                	test   eax,eax
c0017b43:	74 47                	je     c0017b8c <unblockTask(ThreadControlBlock*)+0x90>
c0017b45:	8d 76 00             	lea    esi,[esi+0x0]
c0017b48:	39 c3                	cmp    ebx,eax
c0017b4a:	75 e4                	jne    c0017b30 <unblockTask(ThreadControlBlock*)+0x34>
c0017b4c:	eb 12                	jmp    c0017b60 <unblockTask(ThreadControlBlock*)+0x64>
c0017b4e:	66 90                	xchg   ax,ax
c0017b50:	83 ec 0c             	sub    esp,0xc
c0017b53:	68 23 5e 02 c0       	push   0xc0025e23
c0017b58:	e8 68 54 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0017b5d:	83 c4 10             	add    esp,0x10
c0017b60:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c0017b65:	48                   	dec    eax
c0017b66:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c0017b6b:	75 03                	jne    c0017b70 <unblockTask(ThreadControlBlock*)+0x74>
c0017b6d:	fb                   	sti    
c0017b6e:	66 90                	xchg   ax,ax
c0017b70:	83 c4 08             	add    esp,0x8
c0017b73:	5b                   	pop    ebx
c0017b74:	c3                   	ret    
c0017b75:	8d 76 00             	lea    esi,[esi+0x0]
c0017b78:	83 ec 0c             	sub    esp,0xc
c0017b7b:	68 0c 5e 02 c0       	push   0xc0025e0c
c0017b80:	e8 40 54 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0017b85:	83 c4 10             	add    esp,0x10
c0017b88:	eb d6                	jmp    c0017b60 <unblockTask(ThreadControlBlock*)+0x64>
c0017b8a:	66 90                	xchg   ax,ax
c0017b8c:	83 ec 08             	sub    esp,0x8
c0017b8f:	53                   	push   ebx
c0017b90:	68 44 94 02 c0       	push   0xc0029444
c0017b95:	e8 32 b2 00 00       	call   c0022dcc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017b9a:	83 c4 10             	add    esp,0x10
c0017b9d:	eb c1                	jmp    c0017b60 <unblockTask(ThreadControlBlock*)+0x64>
c0017b9f:	90                   	nop

c0017ba0 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0017ba0:	55                   	push   ebp
c0017ba1:	57                   	push   edi
c0017ba2:	56                   	push   esi
c0017ba3:	53                   	push   ebx
c0017ba4:	83 ec 1c             	sub    esp,0x1c
c0017ba7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0017bab:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0017bae:	8b b8 16 05 00 00    	mov    edi,DWORD PTR [eax+0x516]
c0017bb4:	85 ff                	test   edi,edi
c0017bb6:	7e 24                	jle    c0017bdc <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0017bb8:	31 f6                	xor    esi,esi
c0017bba:	66 90                	xchg   ax,ax
c0017bbc:	83 ec 0c             	sub    esp,0xc
c0017bbf:	ff b4 b0 1a 05 00 00 	push   DWORD PTR [eax+esi*4+0x51a]
c0017bc6:	46                   	inc    esi
c0017bc7:	e8 fb 20 ff ff       	call   c0009cc7 <free>
c0017bcc:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0017bcf:	83 c4 10             	add    esp,0x10
c0017bd2:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0017bd8:	7f e2                	jg     c0017bbc <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0017bda:	66 90                	xchg   ax,ax
c0017bdc:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0017be6:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0017beb:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0017bee:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0017bf1:	d3 c0                	rol    eax,cl
c0017bf3:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c0017bfa:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0017bfd:	89 f7                	mov    edi,esi
c0017bff:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0017c07:	0f 85 73 01 00 00    	jne    c0017d80 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c0017c0d:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0017c13:	85 ed                	test   ebp,ebp
c0017c15:	74 1d                	je     c0017c34 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c0017c17:	83 ec 0c             	sub    esp,0xc
c0017c1a:	55                   	push   ebp
c0017c1b:	e8 60 c1 ff ff       	call   c0013d80 <EnvVarContainer::~EnvVarContainer()>
c0017c20:	59                   	pop    ecx
c0017c21:	5e                   	pop    esi
c0017c22:	6a 0c                	push   0xc
c0017c24:	55                   	push   ebp
c0017c25:	e8 ba 52 ff ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c0017c2a:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0017c2d:	83 c4 10             	add    esp,0x10
c0017c30:	89 f7                	mov    edi,esi
c0017c32:	66 90                	xchg   ax,ax
c0017c34:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0017c3a:	85 c0                	test   eax,eax
c0017c3c:	0f 84 b2 00 00 00    	je     c0017cf4 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c0017c42:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0017c45:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0017c49:	31 c9                	xor    ecx,ecx
c0017c4b:	eb 17                	jmp    c0017c64 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0017c4d:	8d 76 00             	lea    esi,[esi+0x0]
c0017c50:	41                   	inc    ecx
c0017c51:	83 f9 10             	cmp    ecx,0x10
c0017c54:	0f 84 9a 00 00 00    	je     c0017cf4 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c0017c5a:	66 90                	xchg   ax,ax
c0017c5c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0017c62:	66 90                	xchg   ax,ax
c0017c64:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c0017c6b:	d3 fa                	sar    edx,cl
c0017c6d:	83 e2 01             	and    edx,0x1
c0017c70:	74 de                	je     c0017c50 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0017c72:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0017c75:	01 d2                	add    edx,edx
c0017c77:	01 ca                	add    edx,ecx
c0017c79:	8d 14 92             	lea    edx,[edx+edx*4]
c0017c7c:	01 d0                	add    eax,edx
c0017c7e:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0017c84:	83 fd 07             	cmp    ebp,0x7
c0017c87:	75 c7                	jne    c0017c50 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0017c89:	05 40 02 00 00       	add    eax,0x240
c0017c8e:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0017c91:	83 fd ff             	cmp    ebp,0xffffffff
c0017c94:	0f 8c ee 00 00 00    	jl     c0017d88 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c0017c9a:	0f 84 ac 01 00 00    	je     c0017e4c <cleanupTerminatedTask(ThreadControlBlock*)+0x2ac>
c0017ca0:	85 ed                	test   ebp,ebp
c0017ca2:	0f 84 90 01 00 00    	je     c0017e38 <cleanupTerminatedTask(ThreadControlBlock*)+0x298>
c0017ca8:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0017caa:	75 a4                	jne    c0017c50 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0017cac:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0017cb2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0017cb6:	01 d0                	add    eax,edx
c0017cb8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0017cbc:	83 ec 0c             	sub    esp,0xc
c0017cbf:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0017cc5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0017cc8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0017cce:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0017cd5:	50                   	push   eax
c0017cd6:	e8 21 fe ff ff       	call   c0017afc <unblockTask(ThreadControlBlock*)>
c0017cdb:	83 c4 10             	add    esp,0x10
c0017cde:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0017ce1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017ce5:	89 f7                	mov    edi,esi
c0017ce7:	41                   	inc    ecx
c0017ce8:	83 f9 10             	cmp    ecx,0x10
c0017ceb:	0f 85 6b ff ff ff    	jne    c0017c5c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0017cf1:	8d 76 00             	lea    esi,[esi+0x0]
c0017cf4:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0017cfa:	85 c0                	test   eax,eax
c0017cfc:	74 62                	je     c0017d60 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c0017cfe:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0017d04:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0017d0a:	74 54                	je     c0017d60 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c0017d0c:	83 ec 0c             	sub    esp,0xc
c0017d0f:	68 44 94 02 c0       	push   0xc0029444
c0017d14:	e8 f3 af 00 00       	call   c0022d0c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017d19:	c7 04 24 44 94 02 c0 	mov    DWORD PTR [esp],0xc0029444
c0017d20:	89 c7                	mov    edi,eax
c0017d22:	e8 c9 af 00 00       	call   c0022cf0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017d27:	83 c4 10             	add    esp,0x10
c0017d2a:	84 c0                	test   al,al
c0017d2c:	0f 84 ce 00 00 00    	je     c0017e00 <cleanupTerminatedTask(ThreadControlBlock*)+0x260>
c0017d32:	66 90                	xchg   ax,ax
c0017d34:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0017d37:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0017d3d:	85 d2                	test   edx,edx
c0017d3f:	74 0f                	je     c0017d50 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b0>
c0017d41:	83 ec 0c             	sub    esp,0xc
c0017d44:	8b 02                	mov    eax,DWORD PTR [edx]
c0017d46:	52                   	push   edx
c0017d47:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017d4a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0017d4d:	83 c4 10             	add    esp,0x10
c0017d50:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0017d5a:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0017d5d:	8d 76 00             	lea    esi,[esi+0x0]
c0017d60:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0017d66:	85 db                	test   ebx,ebx
c0017d68:	74 16                	je     c0017d80 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c0017d6a:	83 ec 0c             	sub    esp,0xc
c0017d6d:	53                   	push   ebx
c0017d6e:	e8 e5 43 ff ff       	call   c000c158 <VAS::~VAS()>
c0017d73:	58                   	pop    eax
c0017d74:	5a                   	pop    edx
c0017d75:	6a 14                	push   0x14
c0017d77:	53                   	push   ebx
c0017d78:	e8 67 51 ff ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c0017d7d:	83 c4 10             	add    esp,0x10
c0017d80:	83 c4 1c             	add    esp,0x1c
c0017d83:	5b                   	pop    ebx
c0017d84:	5e                   	pop    esi
c0017d85:	5f                   	pop    edi
c0017d86:	5d                   	pop    ebp
c0017d87:	c3                   	ret    
c0017d88:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0017d8c:	83 ec 0c             	sub    esp,0xc
c0017d8f:	68 d4 5e 02 c0       	push   0xc0025ed4
c0017d94:	e8 42 c2 ff ff       	call   c0013fdb <Krnl::panic(char const*)>
c0017d99:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0017d9c:	83 c4 10             	add    esp,0x10
c0017d9f:	89 f7                	mov    edi,esi
c0017da1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017da5:	e9 a6 fe ff ff       	jmp    c0017c50 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0017daa:	66 90                	xchg   ax,ax
c0017dac:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017db2:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0017db8:	75 1e                	jne    c0017dd8 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0017dba:	83 ec 0c             	sub    esp,0xc
c0017dbd:	68 3c 5f 02 c0       	push   0xc0025f3c
c0017dc2:	e8 fe 51 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0017dc7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0017dce:	e8 65 fa ff ff       	call   c0017838 <blockTask(TaskState)>
c0017dd3:	83 c4 10             	add    esp,0x10
c0017dd6:	66 90                	xchg   ax,ax
c0017dd8:	83 ec 08             	sub    esp,0x8
c0017ddb:	56                   	push   esi
c0017ddc:	68 44 94 02 c0       	push   0xc0029444
c0017de1:	e8 e6 af 00 00       	call   c0022dcc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017de6:	c7 04 24 44 94 02 c0 	mov    DWORD PTR [esp],0xc0029444
c0017ded:	e8 1a af 00 00       	call   c0022d0c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017df2:	83 c4 10             	add    esp,0x10
c0017df5:	39 f8                	cmp    eax,edi
c0017df7:	0f 84 37 ff ff ff    	je     c0017d34 <cleanupTerminatedTask(ThreadControlBlock*)+0x194>
c0017dfd:	8d 76 00             	lea    esi,[esi+0x0]
c0017e00:	83 ec 0c             	sub    esp,0xc
c0017e03:	68 44 94 02 c0       	push   0xc0029444
c0017e08:	e8 ff ae 00 00       	call   c0022d0c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017e0d:	c7 04 24 44 94 02 c0 	mov    DWORD PTR [esp],0xc0029444
c0017e14:	89 c6                	mov    esi,eax
c0017e16:	e8 f9 ae 00 00       	call   c0022d14 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017e1b:	83 c4 10             	add    esp,0x10
c0017e1e:	39 f3                	cmp    ebx,esi
c0017e20:	74 b6                	je     c0017dd8 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0017e22:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0017e25:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0017e28:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0017e2e:	75 a8                	jne    c0017dd8 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0017e30:	e9 77 ff ff ff       	jmp    c0017dac <cleanupTerminatedTask(ThreadControlBlock*)+0x20c>
c0017e35:	8d 76 00             	lea    esi,[esi+0x0]
c0017e38:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0017e3c:	83 ec 0c             	sub    esp,0xc
c0017e3f:	68 08 5f 02 c0       	push   0xc0025f08
c0017e44:	e9 4b ff ff ff       	jmp    c0017d94 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0017e49:	8d 76 00             	lea    esi,[esi+0x0]
c0017e4c:	8b 36                	mov    esi,DWORD PTR [esi]
c0017e4e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0017e52:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0017e55:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0017e58:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0017e5e:	01 d7                	add    edi,edx
c0017e60:	89 f8                	mov    eax,edi
c0017e62:	e9 51 fe ff ff       	jmp    c0017cb8 <cleanupTerminatedTask(ThreadControlBlock*)+0x118>
c0017e67:	90                   	nop

c0017e68 <cleanerTaskFunction(void*)>:
c0017e68:	53                   	push   ebx
c0017e69:	83 ec 08             	sub    esp,0x8
c0017e6c:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c0017e71:	48                   	dec    eax
c0017e72:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c0017e77:	75 03                	jne    c0017e7c <cleanerTaskFunction(void*)+0x14>
c0017e79:	fb                   	sti    
c0017e7a:	66 90                	xchg   ax,ax
c0017e7c:	fa                   	cli    
c0017e7d:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c0017e82:	80 3d 0c 94 02 c0 00 	cmp    BYTE PTR ds:0xc002940c,0x0
c0017e89:	8d 50 01             	lea    edx,[eax+0x1]
c0017e8c:	89 15 28 94 02 c0    	mov    DWORD PTR ds:0xc0029428,edx
c0017e92:	0f 84 ac 00 00 00    	je     c0017f44 <cleanerTaskFunction(void*)+0xdc>
c0017e98:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c0017e9d:	85 c0                	test   eax,eax
c0017e9f:	75 03                	jne    c0017ea4 <cleanerTaskFunction(void*)+0x3c>
c0017ea1:	fb                   	sti    
c0017ea2:	66 90                	xchg   ax,ax
c0017ea4:	c6 05 0c 94 02 c0 00 	mov    BYTE PTR ds:0xc002940c,0x0
c0017eab:	fa                   	cli    
c0017eac:	ff 05 28 94 02 c0    	inc    DWORD PTR ds:0xc0029428
c0017eb2:	ff 05 24 94 02 c0    	inc    DWORD PTR ds:0xc0029424
c0017eb8:	fa                   	cli    
c0017eb9:	ff 05 28 94 02 c0    	inc    DWORD PTR ds:0xc0029428
c0017ebf:	eb 2b                	jmp    c0017eec <cleanerTaskFunction(void*)+0x84>
c0017ec1:	8d 76 00             	lea    esi,[esi+0x0]
c0017ec4:	83 ec 0c             	sub    esp,0xc
c0017ec7:	68 2c 94 02 c0       	push   0xc002942c
c0017ecc:	e8 3b ae 00 00       	call   c0022d0c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017ed1:	c7 04 24 2c 94 02 c0 	mov    DWORD PTR [esp],0xc002942c
c0017ed8:	89 c3                	mov    ebx,eax
c0017eda:	e8 35 ae 00 00       	call   c0022d14 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017edf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017ee2:	e8 b9 fc ff ff       	call   c0017ba0 <cleanupTerminatedTask(ThreadControlBlock*)>
c0017ee7:	83 c4 10             	add    esp,0x10
c0017eea:	66 90                	xchg   ax,ax
c0017eec:	83 ec 0c             	sub    esp,0xc
c0017eef:	68 2c 94 02 c0       	push   0xc002942c
c0017ef4:	e8 f7 ad 00 00       	call   c0022cf0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017ef9:	83 c4 10             	add    esp,0x10
c0017efc:	84 c0                	test   al,al
c0017efe:	74 c4                	je     c0017ec4 <cleanerTaskFunction(void*)+0x5c>
c0017f00:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c0017f05:	48                   	dec    eax
c0017f06:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c0017f0b:	75 03                	jne    c0017f10 <cleanerTaskFunction(void*)+0xa8>
c0017f0d:	fb                   	sti    
c0017f0e:	66 90                	xchg   ax,ax
c0017f10:	a1 24 94 02 c0       	mov    eax,ds:0xc0029424
c0017f15:	48                   	dec    eax
c0017f16:	a3 24 94 02 c0       	mov    ds:0xc0029424,eax
c0017f1b:	0f 85 4b ff ff ff    	jne    c0017e6c <cleanerTaskFunction(void*)+0x4>
c0017f21:	a1 20 94 02 c0       	mov    eax,ds:0xc0029420
c0017f26:	85 c0                	test   eax,eax
c0017f28:	0f 84 3e ff ff ff    	je     c0017e6c <cleanerTaskFunction(void*)+0x4>
c0017f2e:	c7 05 20 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029420,0x0
c0017f38:	e8 03 f7 ff ff       	call   c0017640 <schedule()>
c0017f3d:	e9 2a ff ff ff       	jmp    c0017e6c <cleanerTaskFunction(void*)+0x4>
c0017f42:	66 90                	xchg   ax,ax
c0017f44:	83 ec 0c             	sub    esp,0xc
c0017f47:	6a 02                	push   0x2
c0017f49:	e8 c2 f8 ff ff       	call   c0017810 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0017f4e:	83 c4 10             	add    esp,0x10
c0017f51:	e9 4e ff ff ff       	jmp    c0017ea4 <cleanerTaskFunction(void*)+0x3c>
c0017f56:	66 90                	xchg   ax,ax

c0017f58 <terminateTask(int)>:
c0017f58:	83 ec 14             	sub    esp,0x14
c0017f5b:	fa                   	cli    
c0017f5c:	ff 05 28 94 02 c0    	inc    DWORD PTR ds:0xc0029428
c0017f62:	ff 05 24 94 02 c0    	inc    DWORD PTR ds:0xc0029424
c0017f68:	fa                   	cli    
c0017f69:	ff 05 28 94 02 c0    	inc    DWORD PTR ds:0xc0029428
c0017f6f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017f73:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017f78:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0017f7b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017f80:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0017f83:	50                   	push   eax
c0017f84:	68 2c 94 02 c0       	push   0xc002942c
c0017f89:	e8 3e ae 00 00       	call   c0022dcc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017f8e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017f93:	83 c4 10             	add    esp,0x10
c0017f96:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0017f9d:	a1 08 94 02 c0       	mov    eax,ds:0xc0029408
c0017fa2:	85 c0                	test   eax,eax
c0017fa4:	74 5e                	je     c0018004 <terminateTask(int)+0xac>
c0017fa6:	83 ec 0c             	sub    esp,0xc
c0017fa9:	c6 05 0c 94 02 c0 01 	mov    BYTE PTR ds:0xc002940c,0x1
c0017fb0:	50                   	push   eax
c0017fb1:	e8 46 fb ff ff       	call   c0017afc <unblockTask(ThreadControlBlock*)>
c0017fb6:	83 c4 10             	add    esp,0x10
c0017fb9:	8d 76 00             	lea    esi,[esi+0x0]
c0017fbc:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c0017fc1:	48                   	dec    eax
c0017fc2:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c0017fc7:	75 03                	jne    c0017fcc <terminateTask(int)+0x74>
c0017fc9:	fb                   	sti    
c0017fca:	66 90                	xchg   ax,ax
c0017fcc:	a1 24 94 02 c0       	mov    eax,ds:0xc0029424
c0017fd1:	48                   	dec    eax
c0017fd2:	a3 24 94 02 c0       	mov    ds:0xc0029424,eax
c0017fd7:	75 0b                	jne    c0017fe4 <terminateTask(int)+0x8c>
c0017fd9:	83 3d 20 94 02 c0 00 	cmp    DWORD PTR ds:0xc0029420,0x0
c0017fe0:	75 36                	jne    c0018018 <terminateTask(int)+0xc0>
c0017fe2:	66 90                	xchg   ax,ax
c0017fe4:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c0017fe9:	48                   	dec    eax
c0017fea:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c0017fef:	75 03                	jne    c0017ff4 <terminateTask(int)+0x9c>
c0017ff1:	fb                   	sti    
c0017ff2:	66 90                	xchg   ax,ax
c0017ff4:	fa                   	cli    
c0017ff5:	ff 05 28 94 02 c0    	inc    DWORD PTR ds:0xc0029428
c0017ffb:	90                   	nop
c0017ffc:	e8 3f f6 ff ff       	call   c0017640 <schedule()>
c0018001:	eb e1                	jmp    c0017fe4 <terminateTask(int)+0x8c>
c0018003:	90                   	nop
c0018004:	83 ec 0c             	sub    esp,0xc
c0018007:	68 3a 5e 02 c0       	push   0xc0025e3a
c001800c:	e8 b4 4f ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0018011:	83 c4 10             	add    esp,0x10
c0018014:	eb a6                	jmp    c0017fbc <terminateTask(int)+0x64>
c0018016:	66 90                	xchg   ax,ax
c0018018:	c7 05 20 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029420,0x0
c0018022:	eb d8                	jmp    c0017ffc <terminateTask(int)+0xa4>

c0018024 <Thr::terminateFromIRQ(int)>:
c0018024:	83 ec 18             	sub    esp,0x18
c0018027:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001802b:	e8 28 ff ff ff       	call   c0017f58 <terminateTask(int)>

c0018030 <Semaphore::release()>:
c0018030:	83 ec 0c             	sub    esp,0xc
c0018033:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018037:	fa                   	cli    
c0018038:	a1 24 94 02 c0       	mov    eax,ds:0xc0029424
c001803d:	ff 05 28 94 02 c0    	inc    DWORD PTR ds:0xc0029428
c0018043:	8d 48 01             	lea    ecx,[eax+0x1]
c0018046:	89 0d 24 94 02 c0    	mov    DWORD PTR ds:0xc0029424,ecx
c001804c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001804f:	85 c9                	test   ecx,ecx
c0018051:	74 41                	je     c0018094 <Semaphore::release()+0x64>
c0018053:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0018056:	83 ec 0c             	sub    esp,0xc
c0018059:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001805c:	51                   	push   ecx
c001805d:	e8 9a fa ff ff       	call   c0017afc <unblockTask(ThreadControlBlock*)>
c0018062:	a1 24 94 02 c0       	mov    eax,ds:0xc0029424
c0018067:	83 c4 10             	add    esp,0x10
c001806a:	48                   	dec    eax
c001806b:	90                   	nop
c001806c:	a3 24 94 02 c0       	mov    ds:0xc0029424,eax
c0018071:	85 c0                	test   eax,eax
c0018073:	75 0b                	jne    c0018080 <Semaphore::release()+0x50>
c0018075:	a1 20 94 02 c0       	mov    eax,ds:0xc0029420
c001807a:	85 c0                	test   eax,eax
c001807c:	75 1e                	jne    c001809c <Semaphore::release()+0x6c>
c001807e:	66 90                	xchg   ax,ax
c0018080:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c0018085:	48                   	dec    eax
c0018086:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c001808b:	75 03                	jne    c0018090 <Semaphore::release()+0x60>
c001808d:	fb                   	sti    
c001808e:	66 90                	xchg   ax,ax
c0018090:	83 c4 0c             	add    esp,0xc
c0018093:	c3                   	ret    
c0018094:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c0018097:	eb d3                	jmp    c001806c <Semaphore::release()+0x3c>
c0018099:	8d 76 00             	lea    esi,[esi+0x0]
c001809c:	c7 05 20 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029420,0x0
c00180a6:	e8 95 f5 ff ff       	call   c0017640 <schedule()>
c00180ab:	eb d3                	jmp    c0018080 <Semaphore::release()+0x50>
c00180ad:	8d 76 00             	lea    esi,[esi+0x0]

c00180b0 <__static_initialization_and_destruction_0(int, int)>:
c00180b0:	83 ec 0c             	sub    esp,0xc
c00180b3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00180b8:	0f 85 8e 00 00 00    	jne    c001814c <__static_initialization_and_destruction_0(int, int)+0x9c>
c00180be:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00180c6:	0f 85 80 00 00 00    	jne    c001814c <__static_initialization_and_destruction_0(int, int)+0x9c>
c00180cc:	83 ec 0c             	sub    esp,0xc
c00180cf:	68 44 94 02 c0       	push   0xc0029444
c00180d4:	e8 9f af 00 00       	call   c0023078 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00180d9:	83 c4 10             	add    esp,0x10
c00180dc:	83 ec 04             	sub    esp,0x4
c00180df:	68 68 71 02 c0       	push   0xc0027168
c00180e4:	68 44 94 02 c0       	push   0xc0029444
c00180e9:	68 28 30 02 c0       	push   0xc0023028
c00180ee:	e8 6b 4d ff ff       	call   c000ce5e <__cxa_atexit>
c00180f3:	83 c4 10             	add    esp,0x10
c00180f6:	83 ec 0c             	sub    esp,0xc
c00180f9:	68 38 94 02 c0       	push   0xc0029438
c00180fe:	e8 75 af 00 00       	call   c0023078 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0018103:	83 c4 10             	add    esp,0x10
c0018106:	83 ec 04             	sub    esp,0x4
c0018109:	68 68 71 02 c0       	push   0xc0027168
c001810e:	68 38 94 02 c0       	push   0xc0029438
c0018113:	68 28 30 02 c0       	push   0xc0023028
c0018118:	e8 41 4d ff ff       	call   c000ce5e <__cxa_atexit>
c001811d:	83 c4 10             	add    esp,0x10
c0018120:	83 ec 0c             	sub    esp,0xc
c0018123:	68 2c 94 02 c0       	push   0xc002942c
c0018128:	e8 4b af 00 00       	call   c0023078 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001812d:	83 c4 10             	add    esp,0x10
c0018130:	83 ec 04             	sub    esp,0x4
c0018133:	68 68 71 02 c0       	push   0xc0027168
c0018138:	68 2c 94 02 c0       	push   0xc002942c
c001813d:	68 28 30 02 c0       	push   0xc0023028
c0018142:	e8 17 4d ff ff       	call   c000ce5e <__cxa_atexit>
c0018147:	83 c4 10             	add    esp,0x10
c001814a:	66 90                	xchg   ax,ax
c001814c:	90                   	nop
c001814d:	83 c4 0c             	add    esp,0xc
c0018150:	c3                   	ret    
c0018151:	8d 76 00             	lea    esi,[esi+0x0]

c0018154 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0018154:	83 ec 0c             	sub    esp,0xc
c0018157:	83 ec 08             	sub    esp,0x8
c001815a:	68 ff ff 00 00       	push   0xffff
c001815f:	6a 01                	push   0x1
c0018161:	e8 4a ff ff ff       	call   c00180b0 <__static_initialization_and_destruction_0(int, int)>
c0018166:	83 c4 10             	add    esp,0x10
c0018169:	83 c4 0c             	add    esp,0xc
c001816c:	c3                   	ret    

c001816d <Vm::inbv(unsigned short)>:
c001816d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018171:	66 81 fa fe fe       	cmp    dx,0xfefe
c0018176:	75 06                	jne    c001817e <Vm::inbv(unsigned short)+0x11>
c0018178:	a0 8c 94 02 c0       	mov    al,ds:0xc002948c
c001817d:	c3                   	ret    
c001817e:	ec                   	in     al,dx
c001817f:	c3                   	ret    

c0018180 <Vm::outbv(unsigned short, unsigned char)>:
c0018180:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018184:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018188:	66 81 fa fe fe       	cmp    dx,0xfefe
c001818d:	75 25                	jne    c00181b4 <Vm::outbv(unsigned short, unsigned char)+0x34>
c001818f:	8b 0d 8c 94 02 c0    	mov    ecx,DWORD PTR ds:0xc002948c
c0018195:	8d 51 01             	lea    edx,[ecx+0x1]
c0018198:	88 81 a0 94 02 c0    	mov    BYTE PTR [ecx-0x3ffd6b60],al
c001819e:	89 15 8c 94 02 c0    	mov    DWORD PTR ds:0xc002948c,edx
c00181a4:	83 fa 20             	cmp    edx,0x20
c00181a7:	75 0c                	jne    c00181b5 <Vm::outbv(unsigned short, unsigned char)+0x35>
c00181a9:	c7 05 8c 94 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002948c,0x1f
c00181b3:	c3                   	ret    
c00181b4:	ee                   	out    dx,al
c00181b5:	c3                   	ret    

c00181b6 <Vm::realToLinear(unsigned short, unsigned short)>:
c00181b6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00181bb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00181c0:	c1 e0 04             	shl    eax,0x4
c00181c3:	01 d0                	add    eax,edx
c00181c5:	c3                   	ret    

c00181c6 <Vm::getSegment(unsigned int)>:
c00181c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00181ca:	c1 e8 10             	shr    eax,0x10
c00181cd:	c3                   	ret    

c00181ce <Vm::getOffset(unsigned int)>:
c00181ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00181d2:	c3                   	ret    

c00181d3 <Vm::mainloop2()>:
c00181d3:	83 ec 18             	sub    esp,0x18
c00181d6:	fa                   	cli    
c00181d7:	ff 05 28 94 02 c0    	inc    DWORD PTR ds:0xc0029428
c00181dd:	6a 02                	push   0x2
c00181df:	c6 05 85 94 02 c0 01 	mov    BYTE PTR ds:0xc0029485,0x1
c00181e6:	e8 25 f6 ff ff       	call   c0017810 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00181eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00181f0:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c00181f4:	52                   	push   edx
c00181f5:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c00181f9:	52                   	push   edx
c00181fa:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c00181fe:	52                   	push   edx
c00181ff:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0018203:	50                   	push   eax
c0018204:	e8 26 80 fe ff       	call   c000022f <goToVM86>
c0018209:	83 c4 2c             	add    esp,0x2c
c001820c:	c3                   	ret    

c001820d <Vm::mainVm8086Loop(void*)>:
c001820d:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c0018212:	48                   	dec    eax
c0018213:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c0018218:	75 01                	jne    c001821b <Vm::mainVm8086Loop(void*)+0xe>
c001821a:	fb                   	sti    
c001821b:	eb b6                	jmp    c00181d3 <Vm::mainloop2()>

c001821d <Vm::mainloop3(unsigned long)>:
c001821d:	83 ec 18             	sub    esp,0x18
c0018220:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018224:	fa                   	cli    
c0018225:	ff 05 28 94 02 c0    	inc    DWORD PTR ds:0xc0029428
c001822b:	6a 02                	push   0x2
c001822d:	c6 05 84 94 02 c0 01 	mov    BYTE PTR ds:0xc0029484,0x1
c0018234:	a3 80 94 02 c0       	mov    ds:0xc0029480,eax
c0018239:	e8 d2 f5 ff ff       	call   c0017810 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001823e:	83 c4 1c             	add    esp,0x1c
c0018241:	eb 90                	jmp    c00181d3 <Vm::mainloop2()>

c0018243 <Vm::initialise8086()>:
c0018243:	83 ec 0c             	sub    esp,0xc
c0018246:	68 80 00 00 00       	push   0x80
c001824b:	6a 00                	push   0x0
c001824d:	68 0d 82 01 c0       	push   0xc001820d
c0018252:	ff 35 50 94 02 c0    	push   DWORD PTR ds:0xc0029450
c0018258:	e8 c7 f1 ff ff       	call   c0017424 <Process::createThread(void (*)(void*), void*, int)>
c001825d:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0018264:	a3 88 94 02 c0       	mov    ds:0xc0029488,eax
c0018269:	68 00 01 00 00       	push   0x100
c001826e:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c0018273:	6a 00                	push   0x0
c0018275:	6a 00                	push   0x0
c0018277:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001827d:	e8 4a 43 ff ff       	call   c000c5cc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0018282:	83 c4 2c             	add    esp,0x2c
c0018285:	c3                   	ret    

c0018286 <Vm::finish8086()>:
c0018286:	53                   	push   ebx
c0018287:	83 ec 08             	sub    esp,0x8
c001828a:	fa                   	cli    
c001828b:	ff 05 28 94 02 c0    	inc    DWORD PTR ds:0xc0029428
c0018291:	80 3d 84 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029484,0x0
c0018298:	75 15                	jne    c00182af <Vm::finish8086()+0x29>
c001829a:	e8 a1 f3 ff ff       	call   c0017640 <schedule()>
c001829f:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c00182a4:	48                   	dec    eax
c00182a5:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c00182aa:	75 de                	jne    c001828a <Vm::finish8086()+0x4>
c00182ac:	fb                   	sti    
c00182ad:	eb db                	jmp    c001828a <Vm::finish8086()+0x4>
c00182af:	83 ec 0c             	sub    esp,0xc
c00182b2:	8b 1d 80 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029480
c00182b8:	ff 35 88 94 02 c0    	push   DWORD PTR ds:0xc0029488
c00182be:	c6 05 84 94 02 c0 00 	mov    BYTE PTR ds:0xc0029484,0x0
c00182c5:	e8 32 f8 ff ff       	call   c0017afc <unblockTask(ThreadControlBlock*)>
c00182ca:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c00182cf:	83 c4 10             	add    esp,0x10
c00182d2:	8d 50 ff             	lea    edx,[eax-0x1]
c00182d5:	89 15 28 94 02 c0    	mov    DWORD PTR ds:0xc0029428,edx
c00182db:	85 d2                	test   edx,edx
c00182dd:	75 01                	jne    c00182e0 <Vm::finish8086()+0x5a>
c00182df:	fb                   	sti    
c00182e0:	89 d8                	mov    eax,ebx
c00182e2:	83 c4 08             	add    esp,0x8
c00182e5:	5b                   	pop    ebx
c00182e6:	c3                   	ret    

c00182e7 <Vm::getOutput8086(unsigned char*)>:
c00182e7:	57                   	push   edi
c00182e8:	8b 0d 8c 94 02 c0    	mov    ecx,DWORD PTR ds:0xc002948c
c00182ee:	56                   	push   esi
c00182ef:	be a0 94 02 c0       	mov    esi,0xc00294a0
c00182f4:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00182f8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00182fa:	a1 8c 94 02 c0       	mov    eax,ds:0xc002948c
c00182ff:	5e                   	pop    esi
c0018300:	c7 05 8c 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002948c,0x0
c001830a:	5f                   	pop    edi
c001830b:	c3                   	ret    

c001830c <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001830c:	55                   	push   ebp
c001830d:	57                   	push   edi
c001830e:	56                   	push   esi
c001830f:	53                   	push   ebx
c0018310:	83 ec 0c             	sub    esp,0xc
c0018313:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0018317:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001831b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001831f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0018323:	fa                   	cli    
c0018324:	ff 05 28 94 02 c0    	inc    DWORD PTR ds:0xc0029428
c001832a:	80 3d 85 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029485,0x0
c0018331:	75 15                	jne    c0018348 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0018333:	e8 08 f3 ff ff       	call   c0017640 <schedule()>
c0018338:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c001833d:	48                   	dec    eax
c001833e:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c0018343:	75 de                	jne    c0018323 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0018345:	fb                   	sti    
c0018346:	eb db                	jmp    c0018323 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0018348:	a1 88 94 02 c0       	mov    eax,ds:0xc0029488
c001834d:	c7 05 8c 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002948c,0x0
c0018357:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c001835b:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c001835f:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0018363:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0018367:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c001836b:	0f b7 ff             	movzx  edi,di
c001836e:	0f b7 f6             	movzx  esi,si
c0018371:	50                   	push   eax
c0018372:	6a 20                	push   0x20
c0018374:	6a 00                	push   0x0
c0018376:	68 a0 94 02 c0       	push   0xc00294a0
c001837b:	e8 fc 82 fe ff       	call   c000067c <memset>
c0018380:	5a                   	pop    edx
c0018381:	59                   	pop    ecx
c0018382:	57                   	push   edi
c0018383:	56                   	push   esi
c0018384:	e8 2d fe ff ff       	call   c00181b6 <Vm::realToLinear(unsigned short, unsigned short)>
c0018389:	83 c4 10             	add    esp,0x10
c001838c:	89 c7                	mov    edi,eax
c001838e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0018392:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0018396:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018398:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c001839d:	c6 05 85 94 02 c0 00 	mov    BYTE PTR ds:0xc0029485,0x0
c00183a4:	48                   	dec    eax
c00183a5:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c00183aa:	75 01                	jne    c00183ad <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c00183ac:	fb                   	sti    
c00183ad:	83 ec 0c             	sub    esp,0xc
c00183b0:	ff 35 88 94 02 c0    	push   DWORD PTR ds:0xc0029488
c00183b6:	e8 41 f7 ff ff       	call   c0017afc <unblockTask(ThreadControlBlock*)>
c00183bb:	83 c4 1c             	add    esp,0x1c
c00183be:	b0 01                	mov    al,0x1
c00183c0:	5b                   	pop    ebx
c00183c1:	5e                   	pop    esi
c00183c2:	5f                   	pop    edi
c00183c3:	5d                   	pop    ebp
c00183c4:	c3                   	ret    

c00183c5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00183c5:	55                   	push   ebp
c00183c6:	57                   	push   edi
c00183c7:	56                   	push   esi
c00183c8:	53                   	push   ebx
c00183c9:	83 ec 2c             	sub    esp,0x2c
c00183cc:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00183d0:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00183d4:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00183d8:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00183dc:	fa                   	cli    
c00183dd:	ff 05 28 94 02 c0    	inc    DWORD PTR ds:0xc0029428
c00183e3:	0f b6 35 85 94 02 c0 	movzx  esi,BYTE PTR ds:0xc0029485
c00183ea:	89 f0                	mov    eax,esi
c00183ec:	84 c0                	test   al,al
c00183ee:	75 1d                	jne    c001840d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c00183f0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00183f4:	e8 47 f2 ff ff       	call   c0017640 <schedule()>
c00183f9:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c00183fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018402:	48                   	dec    eax
c0018403:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c0018408:	75 d2                	jne    c00183dc <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001840a:	fb                   	sti    
c001840b:	eb cf                	jmp    c00183dc <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001840d:	a1 88 94 02 c0       	mov    eax,ds:0xc0029488
c0018412:	c7 05 8c 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002948c,0x0
c001841c:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0018420:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0018424:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c0018428:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c001842c:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0018430:	50                   	push   eax
c0018431:	6a 20                	push   0x20
c0018433:	6a 00                	push   0x0
c0018435:	68 a0 94 02 c0       	push   0xc00294a0
c001843a:	e8 3d 82 fe ff       	call   c000067c <memset>
c001843f:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0018446:	e8 6c 18 ff ff       	call   c0009cb7 <malloc>
c001844b:	83 c4 0c             	add    esp,0xc
c001844e:	89 c3                	mov    ebx,eax
c0018450:	ff 35 50 94 02 c0    	push   DWORD PTR ds:0xc0029450
c0018456:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001845a:	50                   	push   eax
c001845b:	e8 d0 50 ff ff       	call   c000d530 <File::File(char const*, Process*)>
c0018460:	83 c4 10             	add    esp,0x10
c0018463:	85 db                	test   ebx,ebx
c0018465:	75 0a                	jne    c0018471 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c0018467:	83 ec 0c             	sub    esp,0xc
c001846a:	68 64 5f 02 c0       	push   0xc0025f64
c001846f:	eb 3e                	jmp    c00184af <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0018471:	50                   	push   eax
c0018472:	8d 44 24 17          	lea    eax,[esp+0x17]
c0018476:	50                   	push   eax
c0018477:	8d 44 24 20          	lea    eax,[esp+0x20]
c001847b:	50                   	push   eax
c001847c:	53                   	push   ebx
c001847d:	e8 34 54 ff ff       	call   c000d8b6 <File::stat(unsigned long long*, bool*)>
c0018482:	83 c4 10             	add    esp,0x10
c0018485:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001848a:	74 0a                	je     c0018496 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001848c:	83 ec 0c             	sub    esp,0xc
c001848f:	68 78 5f 02 c0       	push   0xc0025f78
c0018494:	eb 19                	jmp    c00184af <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0018496:	51                   	push   ecx
c0018497:	51                   	push   ecx
c0018498:	6a 01                	push   0x1
c001849a:	53                   	push   ebx
c001849b:	e8 6a 51 ff ff       	call   c000d60a <File::open(FileOpenMode)>
c00184a0:	83 c4 10             	add    esp,0x10
c00184a3:	85 c0                	test   eax,eax
c00184a5:	74 24                	je     c00184cb <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c00184a7:	83 ec 0c             	sub    esp,0xc
c00184aa:	68 91 5f 02 c0       	push   0xc0025f91
c00184af:	e8 27 bb ff ff       	call   c0013fdb <Krnl::panic(char const*)>
c00184b4:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c00184b9:	83 c4 10             	add    esp,0x10
c00184bc:	48                   	dec    eax
c00184bd:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c00184c2:	85 c0                	test   eax,eax
c00184c4:	75 01                	jne    c00184c7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c00184c6:	fb                   	sti    
c00184c7:	31 f6                	xor    esi,esi
c00184c9:	eb 58                	jmp    c0018523 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c00184cb:	0f b7 ed             	movzx  ebp,bp
c00184ce:	50                   	push   eax
c00184cf:	0f b7 ff             	movzx  edi,di
c00184d2:	50                   	push   eax
c00184d3:	55                   	push   ebp
c00184d4:	57                   	push   edi
c00184d5:	e8 dc fc ff ff       	call   c00181b6 <Vm::realToLinear(unsigned short, unsigned short)>
c00184da:	5a                   	pop    edx
c00184db:	8b 13                	mov    edx,DWORD PTR [ebx]
c00184dd:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00184e1:	51                   	push   ecx
c00184e2:	50                   	push   eax
c00184e3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00184e7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00184eb:	53                   	push   ebx
c00184ec:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00184ef:	83 c4 14             	add    esp,0x14
c00184f2:	53                   	push   ebx
c00184f3:	e8 70 51 ff ff       	call   c000d668 <File::close()>
c00184f8:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c00184fd:	83 c4 10             	add    esp,0x10
c0018500:	48                   	dec    eax
c0018501:	c6 05 85 94 02 c0 00 	mov    BYTE PTR ds:0xc0029485,0x0
c0018508:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c001850d:	85 c0                	test   eax,eax
c001850f:	75 01                	jne    c0018512 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c0018511:	fb                   	sti    
c0018512:	83 ec 0c             	sub    esp,0xc
c0018515:	ff 35 88 94 02 c0    	push   DWORD PTR ds:0xc0029488
c001851b:	e8 dc f5 ff ff       	call   c0017afc <unblockTask(ThreadControlBlock*)>
c0018520:	83 c4 10             	add    esp,0x10
c0018523:	83 c4 2c             	add    esp,0x2c
c0018526:	89 f0                	mov    eax,esi
c0018528:	5b                   	pop    ebx
c0018529:	5e                   	pop    esi
c001852a:	5f                   	pop    edi
c001852b:	5d                   	pop    ebp
c001852c:	c3                   	ret    

c001852d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001852d:	57                   	push   edi
c001852e:	56                   	push   esi
c001852f:	53                   	push   ebx
c0018530:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018534:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018538:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001853c:	83 e8 06             	sub    eax,0x6
c001853f:	0f b7 c0             	movzx  eax,ax
c0018542:	50                   	push   eax
c0018543:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0018548:	50                   	push   eax
c0018549:	e8 68 fc ff ff       	call   c00181b6 <Vm::realToLinear(unsigned short, unsigned short)>
c001854e:	5a                   	pop    edx
c001854f:	5e                   	pop    esi
c0018550:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0018553:	8d 56 fa             	lea    edx,[esi-0x6]
c0018556:	81 e2 ff ff 00 00    	and    edx,0xffff
c001855c:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001855f:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c0018562:	83 c2 02             	add    edx,0x2
c0018565:	66 89 10             	mov    WORD PTR [eax],dx
c0018568:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001856b:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001856f:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0018572:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0018576:	89 d6                	mov    esi,edx
c0018578:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001857e:	66 81 e6 ff fd       	and    si,0xfdff
c0018583:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c0018587:	74 07                	je     c0018590 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0018589:	89 d6                	mov    esi,edx
c001858b:	66 81 ce 00 02       	or     si,0x200
c0018590:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0018594:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018599:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001859d:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c00185a5:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c00185a8:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c00185b0:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c00185b3:	5b                   	pop    ebx
c00185b4:	5e                   	pop    esi
c00185b5:	5f                   	pop    edi
c00185b6:	c3                   	ret    

c00185b7 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c00185b7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00185bc:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00185c1:	c1 e0 04             	shl    eax,0x4
c00185c4:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c00185c7:	c3                   	ret    

c00185c8 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c00185c8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00185cd:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00185d2:	c1 e0 04             	shl    eax,0x4
c00185d5:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c00185d9:	c3                   	ret    

c00185da <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c00185da:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00185df:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00185e4:	c1 e0 04             	shl    eax,0x4
c00185e7:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c00185ea:	c3                   	ret    

c00185eb <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c00185eb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00185f0:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00185f5:	c1 e0 04             	shl    eax,0x4
c00185f8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00185fc:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00185ff:	c3                   	ret    

c0018600 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0018600:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018605:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001860a:	c1 e0 04             	shl    eax,0x4
c001860d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018611:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0018615:	c3                   	ret    

c0018616 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0018616:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001861b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018620:	c1 e0 04             	shl    eax,0x4
c0018623:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018627:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001862a:	c3                   	ret    

c001862b <Vm::faultHandler(regs*)>:
c001862b:	55                   	push   ebp
c001862c:	57                   	push   edi
c001862d:	56                   	push   esi
c001862e:	53                   	push   ebx
c001862f:	83 ec 1c             	sub    esp,0x1c
c0018632:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018636:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018639:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001863d:	0f b7 f8             	movzx  edi,ax
c0018640:	52                   	push   edx
c0018641:	0f b7 c0             	movzx  eax,ax
c0018644:	50                   	push   eax
c0018645:	e8 6c fb ff ff       	call   c00181b6 <Vm::realToLinear(unsigned short, unsigned short)>
c001864a:	5a                   	pop    edx
c001864b:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001864e:	59                   	pop    ecx
c001864f:	89 c1                	mov    ecx,eax
c0018651:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018654:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018658:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001865d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018661:	0f b7 c5             	movzx  eax,bp
c0018664:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018668:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001866c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018670:	e8 41 fb ff ff       	call   c00181b6 <Vm::realToLinear(unsigned short, unsigned short)>
c0018675:	5e                   	pop    esi
c0018676:	be 06 00 00 00       	mov    esi,0x6
c001867b:	5a                   	pop    edx
c001867c:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0018681:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0018686:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0018689:	80 fa 9d             	cmp    dl,0x9d
c001868c:	0f 84 2c 02 00 00    	je     c00188be <Vm::faultHandler(regs*)+0x293>
c0018692:	0f 87 91 00 00 00    	ja     c0018729 <Vm::faultHandler(regs*)+0xfe>
c0018698:	80 fa 66             	cmp    dl,0x66
c001869b:	0f 84 98 01 00 00    	je     c0018839 <Vm::faultHandler(regs*)+0x20e>
c00186a1:	77 47                	ja     c00186ea <Vm::faultHandler(regs*)+0xbf>
c00186a3:	80 fa 36             	cmp    dl,0x36
c00186a6:	0f 84 80 01 00 00    	je     c001882c <Vm::faultHandler(regs*)+0x201>
c00186ac:	77 1a                	ja     c00186c8 <Vm::faultHandler(regs*)+0x9d>
c00186ae:	80 fa 26             	cmp    dl,0x26
c00186b1:	0f 84 4e 01 00 00    	je     c0018805 <Vm::faultHandler(regs*)+0x1da>
c00186b7:	80 fa 2e             	cmp    dl,0x2e
c00186ba:	0f 85 e2 05 00 00    	jne    c0018ca2 <Vm::faultHandler(regs*)+0x677>
c00186c0:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00186c3:	31 f6                	xor    esi,esi
c00186c5:	41                   	inc    ecx
c00186c6:	eb be                	jmp    c0018686 <Vm::faultHandler(regs*)+0x5b>
c00186c8:	80 fa 64             	cmp    dl,0x64
c00186cb:	0f 84 41 01 00 00    	je     c0018812 <Vm::faultHandler(regs*)+0x1e7>
c00186d1:	0f 87 48 01 00 00    	ja     c001881f <Vm::faultHandler(regs*)+0x1f4>
c00186d7:	80 fa 3e             	cmp    dl,0x3e
c00186da:	0f 85 c2 05 00 00    	jne    c0018ca2 <Vm::faultHandler(regs*)+0x677>
c00186e0:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00186e3:	be 01 00 00 00       	mov    esi,0x1
c00186e8:	eb db                	jmp    c00186c5 <Vm::faultHandler(regs*)+0x9a>
c00186ea:	80 fa 6d             	cmp    dl,0x6d
c00186ed:	0f 84 ec 02 00 00    	je     c00189df <Vm::faultHandler(regs*)+0x3b4>
c00186f3:	77 17                	ja     c001870c <Vm::faultHandler(regs*)+0xe1>
c00186f5:	80 fa 67             	cmp    dl,0x67
c00186f8:	0f 84 48 01 00 00    	je     c0018846 <Vm::faultHandler(regs*)+0x21b>
c00186fe:	80 fa 6c             	cmp    dl,0x6c
c0018701:	0f 84 69 02 00 00    	je     c0018970 <Vm::faultHandler(regs*)+0x345>
c0018707:	e9 96 05 00 00       	jmp    c0018ca2 <Vm::faultHandler(regs*)+0x677>
c001870c:	80 fa 6f             	cmp    dl,0x6f
c001870f:	0f 84 f4 03 00 00    	je     c0018b09 <Vm::faultHandler(regs*)+0x4de>
c0018715:	0f 82 59 03 00 00    	jb     c0018a74 <Vm::faultHandler(regs*)+0x449>
c001871b:	80 fa 9c             	cmp    dl,0x9c
c001871e:	0f 84 2f 01 00 00    	je     c0018853 <Vm::faultHandler(regs*)+0x228>
c0018724:	e9 79 05 00 00       	jmp    c0018ca2 <Vm::faultHandler(regs*)+0x677>
c0018729:	80 fa ec             	cmp    dl,0xec
c001872c:	0f 84 14 05 00 00    	je     c0018c46 <Vm::faultHandler(regs*)+0x61b>
c0018732:	77 7b                	ja     c00187af <Vm::faultHandler(regs*)+0x184>
c0018734:	80 fa e4             	cmp    dl,0xe4
c0018737:	0f 84 93 04 00 00    	je     c0018bd0 <Vm::faultHandler(regs*)+0x5a5>
c001873d:	77 53                	ja     c0018792 <Vm::faultHandler(regs*)+0x167>
c001873f:	80 fa cd             	cmp    dl,0xcd
c0018742:	0f 84 d9 01 00 00    	je     c0018921 <Vm::faultHandler(regs*)+0x2f6>
c0018748:	80 fa cf             	cmp    dl,0xcf
c001874b:	0f 85 51 05 00 00    	jne    c0018ca2 <Vm::faultHandler(regs*)+0x677>
c0018751:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0018754:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0018757:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001875b:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001875e:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0018762:	81 ca 00 02 02 00    	or     edx,0x20200
c0018768:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001876b:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001876f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018775:	66 c1 e8 09          	shr    ax,0x9
c0018779:	83 e0 01             	and    eax,0x1
c001877c:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001877f:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018782:	83 c0 06             	add    eax,0x6
c0018785:	25 ff ff 00 00       	and    eax,0xffff
c001878a:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001878d:	e9 0c 05 00 00       	jmp    c0018c9e <Vm::faultHandler(regs*)+0x673>
c0018792:	80 fa e6             	cmp    dl,0xe6
c0018795:	0f 84 7f 04 00 00    	je     c0018c1a <Vm::faultHandler(regs*)+0x5ef>
c001879b:	0f 82 4b 04 00 00    	jb     c0018bec <Vm::faultHandler(regs*)+0x5c1>
c00187a1:	80 fa e7             	cmp    dl,0xe7
c00187a4:	0f 84 87 04 00 00    	je     c0018c31 <Vm::faultHandler(regs*)+0x606>
c00187aa:	e9 f3 04 00 00       	jmp    c0018ca2 <Vm::faultHandler(regs*)+0x677>
c00187af:	80 fa ef             	cmp    dl,0xef
c00187b2:	0f 84 d1 04 00 00    	je     c0018c89 <Vm::faultHandler(regs*)+0x65e>
c00187b8:	77 28                	ja     c00187e2 <Vm::faultHandler(regs*)+0x1b7>
c00187ba:	80 fa ed             	cmp    dl,0xed
c00187bd:	0f 84 9f 04 00 00    	je     c0018c62 <Vm::faultHandler(regs*)+0x637>
c00187c3:	80 fa ee             	cmp    dl,0xee
c00187c6:	0f 85 d6 04 00 00    	jne    c0018ca2 <Vm::faultHandler(regs*)+0x677>
c00187cc:	50                   	push   eax
c00187cd:	50                   	push   eax
c00187ce:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00187d2:	50                   	push   eax
c00187d3:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00187d7:	50                   	push   eax
c00187d8:	e8 a3 f9 ff ff       	call   c0018180 <Vm::outbv(unsigned short, unsigned char)>
c00187dd:	e9 9f 04 00 00       	jmp    c0018c81 <Vm::faultHandler(regs*)+0x656>
c00187e2:	80 fa fa             	cmp    dl,0xfa
c00187e5:	0f 84 69 01 00 00    	je     c0018954 <Vm::faultHandler(regs*)+0x329>
c00187eb:	80 fa fb             	cmp    dl,0xfb
c00187ee:	0f 84 6e 01 00 00    	je     c0018962 <Vm::faultHandler(regs*)+0x337>
c00187f4:	80 fa f3             	cmp    dl,0xf3
c00187f7:	0f 85 a5 04 00 00    	jne    c0018ca2 <Vm::faultHandler(regs*)+0x677>
c00187fd:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018800:	e9 c0 fe ff ff       	jmp    c00186c5 <Vm::faultHandler(regs*)+0x9a>
c0018805:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018808:	be 02 00 00 00       	mov    esi,0x2
c001880d:	e9 b3 fe ff ff       	jmp    c00186c5 <Vm::faultHandler(regs*)+0x9a>
c0018812:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018815:	be 03 00 00 00       	mov    esi,0x3
c001881a:	e9 a6 fe ff ff       	jmp    c00186c5 <Vm::faultHandler(regs*)+0x9a>
c001881f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018822:	be 04 00 00 00       	mov    esi,0x4
c0018827:	e9 99 fe ff ff       	jmp    c00186c5 <Vm::faultHandler(regs*)+0x9a>
c001882c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001882f:	be 05 00 00 00       	mov    esi,0x5
c0018834:	e9 8c fe ff ff       	jmp    c00186c5 <Vm::faultHandler(regs*)+0x9a>
c0018839:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001883c:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0018841:	e9 7f fe ff ff       	jmp    c00186c5 <Vm::faultHandler(regs*)+0x9a>
c0018846:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018849:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001884e:	e9 72 fe ff ff       	jmp    c00186c5 <Vm::faultHandler(regs*)+0x9a>
c0018853:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0018856:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001885a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001885f:	74 30                	je     c0018891 <Vm::faultHandler(regs*)+0x266>
c0018861:	83 e9 04             	sub    ecx,0x4
c0018864:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001886a:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0018870:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0018873:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0018876:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001887c:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0018880:	0f 84 15 04 00 00    	je     c0018c9b <Vm::faultHandler(regs*)+0x670>
c0018886:	80 ce 02             	or     dh,0x2
c0018889:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001888c:	e9 0a 04 00 00       	jmp    c0018c9b <Vm::faultHandler(regs*)+0x670>
c0018891:	83 e9 02             	sub    ecx,0x2
c0018894:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001889a:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001889d:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00188a1:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00188a7:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00188ab:	74 05                	je     c00188b2 <Vm::faultHandler(regs*)+0x287>
c00188ad:	80 ce 02             	or     dh,0x2
c00188b0:	eb 03                	jmp    c00188b5 <Vm::faultHandler(regs*)+0x28a>
c00188b2:	80 e6 fd             	and    dh,0xfd
c00188b5:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00188b9:	e9 dd 03 00 00       	jmp    c0018c9b <Vm::faultHandler(regs*)+0x670>
c00188be:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00188c3:	74 2a                	je     c00188ef <Vm::faultHandler(regs*)+0x2c4>
c00188c5:	8b 10                	mov    edx,DWORD PTR [eax]
c00188c7:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00188cd:	81 ca 00 02 02 00    	or     edx,0x20200
c00188d3:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00188d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00188d8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00188de:	c1 e8 09             	shr    eax,0x9
c00188e1:	83 e0 01             	and    eax,0x1
c00188e4:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00188e7:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00188ea:	83 c0 04             	add    eax,0x4
c00188ed:	eb 25                	jmp    c0018914 <Vm::faultHandler(regs*)+0x2e9>
c00188ef:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00188f2:	81 ca 00 02 02 00    	or     edx,0x20200
c00188f8:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00188fb:	66 8b 00             	mov    ax,WORD PTR [eax]
c00188fe:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018904:	66 c1 e8 09          	shr    ax,0x9
c0018908:	83 e0 01             	and    eax,0x1
c001890b:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001890e:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018911:	83 c0 02             	add    eax,0x2
c0018914:	25 ff ff 00 00       	and    eax,0xffff
c0018919:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001891c:	e9 7a 03 00 00       	jmp    c0018c9b <Vm::faultHandler(regs*)+0x670>
c0018921:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018925:	3c ee                	cmp    al,0xee
c0018927:	75 10                	jne    c0018939 <Vm::faultHandler(regs*)+0x30e>
c0018929:	83 ec 0c             	sub    esp,0xc
c001892c:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001892f:	e8 e9 f8 ff ff       	call   c001821d <Vm::mainloop3(unsigned long)>
c0018934:	e9 4b 03 00 00       	jmp    c0018c84 <Vm::faultHandler(regs*)+0x659>
c0018939:	83 ec 0c             	sub    esp,0xc
c001893c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018940:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018944:	51                   	push   ecx
c0018945:	50                   	push   eax
c0018946:	53                   	push   ebx
c0018947:	e8 e1 fb ff ff       	call   c001852d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001894c:	83 c4 20             	add    esp,0x20
c001894f:	e9 4a 03 00 00       	jmp    c0018c9e <Vm::faultHandler(regs*)+0x673>
c0018954:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018959:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001895d:	e9 39 03 00 00       	jmp    c0018c9b <Vm::faultHandler(regs*)+0x670>
c0018962:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018967:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c001896b:	e9 2b 03 00 00       	jmp    c0018c9b <Vm::faultHandler(regs*)+0x670>
c0018970:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0018973:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0018978:	74 2b                	je     c00189a5 <Vm::faultHandler(regs*)+0x37a>
c001897a:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0018981:	76 22                	jbe    c00189a5 <Vm::faultHandler(regs*)+0x37a>
c0018983:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0018987:	50                   	push   eax
c0018988:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001898c:	50                   	push   eax
c001898d:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0018991:	50                   	push   eax
c0018992:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0018996:	50                   	push   eax
c0018997:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001899b:	50                   	push   eax
c001899c:	6a 6c                	push   0x6c
c001899e:	6a 6c                	push   0x6c
c00189a0:	e9 b9 01 00 00       	jmp    c0018b5e <Vm::faultHandler(regs*)+0x533>
c00189a5:	83 ec 0c             	sub    esp,0xc
c00189a8:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00189ac:	0f b7 f6             	movzx  esi,si
c00189af:	50                   	push   eax
c00189b0:	e8 b8 f7 ff ff       	call   c001816d <Vm::inbv(unsigned short)>
c00189b5:	83 c4 0c             	add    esp,0xc
c00189b8:	0f b6 c0             	movzx  eax,al
c00189bb:	50                   	push   eax
c00189bc:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c00189c0:	50                   	push   eax
c00189c1:	56                   	push   esi
c00189c2:	e8 24 fc ff ff       	call   c00185eb <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c00189c7:	83 c4 10             	add    esp,0x10
c00189ca:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00189cd:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00189d1:	74 03                	je     c00189d6 <Vm::faultHandler(regs*)+0x3ab>
c00189d3:	48                   	dec    eax
c00189d4:	eb 01                	jmp    c00189d7 <Vm::faultHandler(regs*)+0x3ac>
c00189d6:	40                   	inc    eax
c00189d7:	0f b7 c0             	movzx  eax,ax
c00189da:	e9 8d 00 00 00       	jmp    c0018a6c <Vm::faultHandler(regs*)+0x441>
c00189df:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00189e2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00189e5:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00189ea:	74 29                	je     c0018a15 <Vm::faultHandler(regs*)+0x3ea>
c00189ec:	3d ff ff 00 00       	cmp    eax,0xffff
c00189f1:	76 22                	jbe    c0018a15 <Vm::faultHandler(regs*)+0x3ea>
c00189f3:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00189f7:	50                   	push   eax
c00189f8:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00189fc:	50                   	push   eax
c00189fd:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0018a01:	50                   	push   eax
c0018a02:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0018a06:	50                   	push   eax
c0018a07:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018a0b:	50                   	push   eax
c0018a0c:	6a 6d                	push   0x6d
c0018a0e:	6a 6d                	push   0x6d
c0018a10:	e9 49 01 00 00       	jmp    c0018b5e <Vm::faultHandler(regs*)+0x533>
c0018a15:	0f b7 c8             	movzx  ecx,ax
c0018a18:	0f b7 f6             	movzx  esi,si
c0018a1b:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0018a1e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018a23:	74 20                	je     c0018a45 <Vm::faultHandler(regs*)+0x41a>
c0018a25:	ed                   	in     eax,dx
c0018a26:	55                   	push   ebp
c0018a27:	50                   	push   eax
c0018a28:	51                   	push   ecx
c0018a29:	56                   	push   esi
c0018a2a:	e8 e7 fb ff ff       	call   c0018616 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0018a2f:	83 c4 10             	add    esp,0x10
c0018a32:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018a35:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018a39:	74 05                	je     c0018a40 <Vm::faultHandler(regs*)+0x415>
c0018a3b:	83 e8 04             	sub    eax,0x4
c0018a3e:	eb 27                	jmp    c0018a67 <Vm::faultHandler(regs*)+0x43c>
c0018a40:	83 c0 04             	add    eax,0x4
c0018a43:	eb 22                	jmp    c0018a67 <Vm::faultHandler(regs*)+0x43c>
c0018a45:	66 ed                	in     ax,dx
c0018a47:	0f b7 c0             	movzx  eax,ax
c0018a4a:	57                   	push   edi
c0018a4b:	50                   	push   eax
c0018a4c:	51                   	push   ecx
c0018a4d:	56                   	push   esi
c0018a4e:	e8 ad fb ff ff       	call   c0018600 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0018a53:	83 c4 10             	add    esp,0x10
c0018a56:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018a59:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018a5d:	74 05                	je     c0018a64 <Vm::faultHandler(regs*)+0x439>
c0018a5f:	83 e8 02             	sub    eax,0x2
c0018a62:	eb 03                	jmp    c0018a67 <Vm::faultHandler(regs*)+0x43c>
c0018a64:	83 c0 02             	add    eax,0x2
c0018a67:	25 ff ff 00 00       	and    eax,0xffff
c0018a6c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0018a6f:	e9 27 02 00 00       	jmp    c0018c9b <Vm::faultHandler(regs*)+0x670>
c0018a74:	8d 46 ff             	lea    eax,[esi-0x1]
c0018a77:	3c 05                	cmp    al,0x5
c0018a79:	77 24                	ja     c0018a9f <Vm::faultHandler(regs*)+0x474>
c0018a7b:	0f b6 c0             	movzx  eax,al
c0018a7e:	ff 24 85 04 60 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd9ffc]
c0018a85:	0f b7 fd             	movzx  edi,bp
c0018a88:	eb 15                	jmp    c0018a9f <Vm::faultHandler(regs*)+0x474>
c0018a8a:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0018a8e:	eb 0f                	jmp    c0018a9f <Vm::faultHandler(regs*)+0x474>
c0018a90:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0018a94:	eb 09                	jmp    c0018a9f <Vm::faultHandler(regs*)+0x474>
c0018a96:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0018a9a:	eb 03                	jmp    c0018a9f <Vm::faultHandler(regs*)+0x474>
c0018a9c:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0018a9f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0018aa2:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0018aa7:	74 29                	je     c0018ad2 <Vm::faultHandler(regs*)+0x4a7>
c0018aa9:	3d ff ff 00 00       	cmp    eax,0xffff
c0018aae:	76 22                	jbe    c0018ad2 <Vm::faultHandler(regs*)+0x4a7>
c0018ab0:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0018ab4:	50                   	push   eax
c0018ab5:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0018ab9:	50                   	push   eax
c0018aba:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0018abe:	50                   	push   eax
c0018abf:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0018ac3:	50                   	push   eax
c0018ac4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018ac8:	50                   	push   eax
c0018ac9:	6a 6e                	push   0x6e
c0018acb:	6a 6e                	push   0x6e
c0018acd:	e9 8c 00 00 00       	jmp    c0018b5e <Vm::faultHandler(regs*)+0x533>
c0018ad2:	0f b7 c0             	movzx  eax,ax
c0018ad5:	52                   	push   edx
c0018ad6:	52                   	push   edx
c0018ad7:	50                   	push   eax
c0018ad8:	57                   	push   edi
c0018ad9:	e8 d9 fa ff ff       	call   c00185b7 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0018ade:	59                   	pop    ecx
c0018adf:	0f b6 c0             	movzx  eax,al
c0018ae2:	5e                   	pop    esi
c0018ae3:	50                   	push   eax
c0018ae4:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018ae8:	50                   	push   eax
c0018ae9:	e8 92 f6 ff ff       	call   c0018180 <Vm::outbv(unsigned short, unsigned char)>
c0018aee:	83 c4 10             	add    esp,0x10
c0018af1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0018af4:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018af8:	74 03                	je     c0018afd <Vm::faultHandler(regs*)+0x4d2>
c0018afa:	48                   	dec    eax
c0018afb:	eb 01                	jmp    c0018afe <Vm::faultHandler(regs*)+0x4d3>
c0018afd:	40                   	inc    eax
c0018afe:	0f b7 c0             	movzx  eax,ax
c0018b01:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0018b04:	e9 92 01 00 00       	jmp    c0018c9b <Vm::faultHandler(regs*)+0x670>
c0018b09:	8d 46 ff             	lea    eax,[esi-0x1]
c0018b0c:	3c 05                	cmp    al,0x5
c0018b0e:	77 1f                	ja     c0018b2f <Vm::faultHandler(regs*)+0x504>
c0018b10:	0f b6 c0             	movzx  eax,al
c0018b13:	ff 24 85 1c 60 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd9fe4]
c0018b1a:	89 ef                	mov    edi,ebp
c0018b1c:	eb 11                	jmp    c0018b2f <Vm::faultHandler(regs*)+0x504>
c0018b1e:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0018b21:	eb 0c                	jmp    c0018b2f <Vm::faultHandler(regs*)+0x504>
c0018b23:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0018b26:	eb 07                	jmp    c0018b2f <Vm::faultHandler(regs*)+0x504>
c0018b28:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0018b2b:	eb 02                	jmp    c0018b2f <Vm::faultHandler(regs*)+0x504>
c0018b2d:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0018b2f:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0018b32:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0018b37:	74 37                	je     c0018b70 <Vm::faultHandler(regs*)+0x545>
c0018b39:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0018b3f:	76 2f                	jbe    c0018b70 <Vm::faultHandler(regs*)+0x545>
c0018b41:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0018b45:	50                   	push   eax
c0018b46:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0018b4a:	50                   	push   eax
c0018b4b:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0018b4f:	50                   	push   eax
c0018b50:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0018b54:	50                   	push   eax
c0018b55:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018b59:	50                   	push   eax
c0018b5a:	6a 6f                	push   0x6f
c0018b5c:	6a 6f                	push   0x6f
c0018b5e:	68 aa 5f 02 c0       	push   0xc0025faa
c0018b63:	e8 5d 44 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0018b68:	83 c4 20             	add    esp,0x20
c0018b6b:	e9 86 01 00 00       	jmp    c0018cf6 <Vm::faultHandler(regs*)+0x6cb>
c0018b70:	0f b7 d7             	movzx  edx,di
c0018b73:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0018b76:	0f b7 c6             	movzx  eax,si
c0018b79:	81 e1 00 04 00 00    	and    ecx,0x400
c0018b7f:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0018b82:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018b87:	74 1d                	je     c0018ba6 <Vm::faultHandler(regs*)+0x57b>
c0018b89:	55                   	push   ebp
c0018b8a:	55                   	push   ebp
c0018b8b:	50                   	push   eax
c0018b8c:	52                   	push   edx
c0018b8d:	e8 48 fa ff ff       	call   c00185da <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0018b92:	83 c4 10             	add    esp,0x10
c0018b95:	89 fa                	mov    edx,edi
c0018b97:	ef                   	out    dx,eax
c0018b98:	85 c9                	test   ecx,ecx
c0018b9a:	74 05                	je     c0018ba1 <Vm::faultHandler(regs*)+0x576>
c0018b9c:	83 ee 04             	sub    esi,0x4
c0018b9f:	eb 21                	jmp    c0018bc2 <Vm::faultHandler(regs*)+0x597>
c0018ba1:	83 c6 04             	add    esi,0x4
c0018ba4:	eb 1c                	jmp    c0018bc2 <Vm::faultHandler(regs*)+0x597>
c0018ba6:	55                   	push   ebp
c0018ba7:	55                   	push   ebp
c0018ba8:	50                   	push   eax
c0018ba9:	52                   	push   edx
c0018baa:	e8 19 fa ff ff       	call   c00185c8 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0018baf:	83 c4 10             	add    esp,0x10
c0018bb2:	89 fa                	mov    edx,edi
c0018bb4:	66 ef                	out    dx,ax
c0018bb6:	85 c9                	test   ecx,ecx
c0018bb8:	74 05                	je     c0018bbf <Vm::faultHandler(regs*)+0x594>
c0018bba:	83 ee 02             	sub    esi,0x2
c0018bbd:	eb 03                	jmp    c0018bc2 <Vm::faultHandler(regs*)+0x597>
c0018bbf:	83 c6 02             	add    esi,0x2
c0018bc2:	81 e6 ff ff 00 00    	and    esi,0xffff
c0018bc8:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0018bcb:	e9 cb 00 00 00       	jmp    c0018c9b <Vm::faultHandler(regs*)+0x670>
c0018bd0:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0018bd7:	83 ec 0c             	sub    esp,0xc
c0018bda:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018bde:	50                   	push   eax
c0018bdf:	e8 89 f5 ff ff       	call   c001816d <Vm::inbv(unsigned short)>
c0018be4:	0f b6 c0             	movzx  eax,al
c0018be7:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0018bea:	eb 3f                	jmp    c0018c2b <Vm::faultHandler(regs*)+0x600>
c0018bec:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018bf1:	74 07                	je     c0018bfa <Vm::faultHandler(regs*)+0x5cf>
c0018bf3:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0018bf7:	ed                   	in     eax,dx
c0018bf8:	eb 14                	jmp    c0018c0e <Vm::faultHandler(regs*)+0x5e3>
c0018bfa:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0018bfd:	66 31 f6             	xor    si,si
c0018c00:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0018c03:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0018c07:	66 ed                	in     ax,dx
c0018c09:	0f b7 c0             	movzx  eax,ax
c0018c0c:	09 f0                	or     eax,esi
c0018c0e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0018c11:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0018c15:	e9 84 00 00 00       	jmp    c0018c9e <Vm::faultHandler(regs*)+0x673>
c0018c1a:	52                   	push   edx
c0018c1b:	52                   	push   edx
c0018c1c:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0018c20:	50                   	push   eax
c0018c21:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018c25:	50                   	push   eax
c0018c26:	e8 55 f5 ff ff       	call   c0018180 <Vm::outbv(unsigned short, unsigned char)>
c0018c2b:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0018c2f:	eb 53                	jmp    c0018c84 <Vm::faultHandler(regs*)+0x659>
c0018c31:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0018c34:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0018c38:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018c3d:	74 03                	je     c0018c42 <Vm::faultHandler(regs*)+0x617>
c0018c3f:	ef                   	out    dx,eax
c0018c40:	eb cf                	jmp    c0018c11 <Vm::faultHandler(regs*)+0x5e6>
c0018c42:	66 ef                	out    dx,ax
c0018c44:	eb cb                	jmp    c0018c11 <Vm::faultHandler(regs*)+0x5e6>
c0018c46:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0018c4d:	83 ec 0c             	sub    esp,0xc
c0018c50:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018c54:	50                   	push   eax
c0018c55:	e8 13 f5 ff ff       	call   c001816d <Vm::inbv(unsigned short)>
c0018c5a:	0f b6 c0             	movzx  eax,al
c0018c5d:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0018c60:	eb 1f                	jmp    c0018c81 <Vm::faultHandler(regs*)+0x656>
c0018c62:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0018c65:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018c6a:	74 03                	je     c0018c6f <Vm::faultHandler(regs*)+0x644>
c0018c6c:	ed                   	in     eax,dx
c0018c6d:	eb 0d                	jmp    c0018c7c <Vm::faultHandler(regs*)+0x651>
c0018c6f:	66 ed                	in     ax,dx
c0018c71:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0018c74:	0f b7 c0             	movzx  eax,ax
c0018c77:	66 31 d2             	xor    dx,dx
c0018c7a:	09 d0                	or     eax,edx
c0018c7c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0018c7f:	eb 1a                	jmp    c0018c9b <Vm::faultHandler(regs*)+0x670>
c0018c81:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018c84:	83 c4 10             	add    esp,0x10
c0018c87:	eb 15                	jmp    c0018c9e <Vm::faultHandler(regs*)+0x673>
c0018c89:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0018c8c:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0018c8f:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018c94:	74 03                	je     c0018c99 <Vm::faultHandler(regs*)+0x66e>
c0018c96:	ef                   	out    dx,eax
c0018c97:	eb 02                	jmp    c0018c9b <Vm::faultHandler(regs*)+0x670>
c0018c99:	66 ef                	out    dx,ax
c0018c9b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018c9e:	b0 01                	mov    al,0x1
c0018ca0:	eb 56                	jmp    c0018cf8 <Vm::faultHandler(regs*)+0x6cd>
c0018ca2:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0018ca6:	50                   	push   eax
c0018ca7:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0018cab:	50                   	push   eax
c0018cac:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0018cb0:	50                   	push   eax
c0018cb1:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0018cb5:	50                   	push   eax
c0018cb6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018cba:	50                   	push   eax
c0018cbb:	52                   	push   edx
c0018cbc:	52                   	push   edx
c0018cbd:	68 d7 5f 02 c0       	push   0xc0025fd7
c0018cc2:	e8 fe 42 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0018cc7:	83 c4 20             	add    esp,0x20
c0018cca:	83 ec 0c             	sub    esp,0xc
c0018ccd:	6a 60                	push   0x60
c0018ccf:	e8 99 f4 ff ff       	call   c001816d <Vm::inbv(unsigned short)>
c0018cd4:	83 c4 10             	add    esp,0x10
c0018cd7:	3c 1c                	cmp    al,0x1c
c0018cd9:	74 04                	je     c0018cdf <Vm::faultHandler(regs*)+0x6b4>
c0018cdb:	3c 5a                	cmp    al,0x5a
c0018cdd:	75 eb                	jne    c0018cca <Vm::faultHandler(regs*)+0x69f>
c0018cdf:	3c 5a                	cmp    al,0x5a
c0018ce1:	74 04                	je     c0018ce7 <Vm::faultHandler(regs*)+0x6bc>
c0018ce3:	3c 1c                	cmp    al,0x1c
c0018ce5:	75 0f                	jne    c0018cf6 <Vm::faultHandler(regs*)+0x6cb>
c0018ce7:	83 ec 0c             	sub    esp,0xc
c0018cea:	6a 60                	push   0x60
c0018cec:	e8 7c f4 ff ff       	call   c001816d <Vm::inbv(unsigned short)>
c0018cf1:	83 c4 10             	add    esp,0x10
c0018cf4:	eb e9                	jmp    c0018cdf <Vm::faultHandler(regs*)+0x6b4>
c0018cf6:	31 c0                	xor    eax,eax
c0018cf8:	83 c4 1c             	add    esp,0x1c
c0018cfb:	5b                   	pop    ebx
c0018cfc:	5e                   	pop    esi
c0018cfd:	5f                   	pop    edi
c0018cfe:	5d                   	pop    ebp
c0018cff:	c3                   	ret    

c0018d00 <Vm::fpuInternalTo32(unsigned long long)>:
c0018d00:	57                   	push   edi
c0018d01:	56                   	push   esi
c0018d02:	53                   	push   ebx
c0018d03:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018d07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d0b:	89 d6                	mov    esi,edx
c0018d0d:	89 d7                	mov    edi,edx
c0018d0f:	89 c1                	mov    ecx,eax
c0018d11:	c1 ef 14             	shr    edi,0x14
c0018d14:	89 d3                	mov    ebx,edx
c0018d16:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0018d1c:	31 d2                	xor    edx,edx
c0018d1e:	89 f8                	mov    eax,edi
c0018d20:	81 e6 00 00 00 80    	and    esi,0x80000000
c0018d26:	bf ff 00 00 00       	mov    edi,0xff
c0018d2b:	05 80 fc ff ff       	add    eax,0xfffffc80
c0018d30:	83 d2 ff             	adc    edx,0xffffffff
c0018d33:	39 c7                	cmp    edi,eax
c0018d35:	bf 00 00 00 00       	mov    edi,0x0
c0018d3a:	19 d7                	sbb    edi,edx
c0018d3c:	72 16                	jb     c0018d54 <Vm::fpuInternalTo32(unsigned long long)+0x54>
c0018d3e:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c0018d42:	c1 e0 17             	shl    eax,0x17
c0018d45:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c0018d4b:	09 f1                	or     ecx,esi
c0018d4d:	09 c1                	or     ecx,eax
c0018d4f:	89 cf                	mov    edi,ecx
c0018d51:	eb 05                	jmp    c0018d58 <Vm::fpuInternalTo32(unsigned long long)+0x58>
c0018d53:	90                   	nop
c0018d54:	31 ff                	xor    edi,edi
c0018d56:	66 90                	xchg   ax,ax
c0018d58:	89 f8                	mov    eax,edi
c0018d5a:	5b                   	pop    ebx
c0018d5b:	5e                   	pop    esi
c0018d5c:	5f                   	pop    edi
c0018d5d:	c3                   	ret    

c0018d5e <Vm::fpuInternalTo64(unsigned long long)>:
c0018d5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018d62:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018d66:	c3                   	ret    

c0018d67 <Vm::fpu32ToInternal(unsigned int)>:
c0018d67:	57                   	push   edi
c0018d68:	31 ff                	xor    edi,edi
c0018d6a:	56                   	push   esi
c0018d6b:	53                   	push   ebx
c0018d6c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018d70:	89 cb                	mov    ebx,ecx
c0018d72:	89 ce                	mov    esi,ecx
c0018d74:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0018d7a:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c0018d80:	c1 e9 17             	shr    ecx,0x17
c0018d83:	89 f0                	mov    eax,esi
c0018d85:	0f b6 d1             	movzx  edx,cl
c0018d88:	81 c2 80 03 00 00    	add    edx,0x380
c0018d8e:	89 d1                	mov    ecx,edx
c0018d90:	89 fa                	mov    edx,edi
c0018d92:	c1 e1 14             	shl    ecx,0x14
c0018d95:	0f a4 c2 1d          	shld   edx,eax,0x1d
c0018d99:	c1 e0 1d             	shl    eax,0x1d
c0018d9c:	89 d7                	mov    edi,edx
c0018d9e:	89 c6                	mov    esi,eax
c0018da0:	89 ca                	mov    edx,ecx
c0018da2:	89 f0                	mov    eax,esi
c0018da4:	09 fa                	or     edx,edi
c0018da6:	09 da                	or     edx,ebx
c0018da8:	5b                   	pop    ebx
c0018da9:	5e                   	pop    esi
c0018daa:	5f                   	pop    edi
c0018dab:	c3                   	ret    

c0018dac <Vm::fpu64ToInternal(unsigned long long)>:
c0018dac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018db0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018db4:	c3                   	ret    

c0018db5 <Vm::fpuFloatToLong(unsigned long long)>:
c0018db5:	57                   	push   edi
c0018db6:	31 c0                	xor    eax,eax
c0018db8:	56                   	push   esi
c0018db9:	31 d2                	xor    edx,edx
c0018dbb:	53                   	push   ebx
c0018dbc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018dc0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018dc4:	89 d9                	mov    ecx,ebx
c0018dc6:	c1 e9 14             	shr    ecx,0x14
c0018dc9:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0018dcf:	89 cf                	mov    edi,ecx
c0018dd1:	81 ef ff 03 00 00    	sub    edi,0x3ff
c0018dd7:	78 37                	js     c0018e10 <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c0018dd9:	89 d9                	mov    ecx,ebx
c0018ddb:	89 f0                	mov    eax,esi
c0018ddd:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c0018de3:	81 c9 00 00 10 00    	or     ecx,0x100000
c0018de9:	89 ca                	mov    edx,ecx
c0018deb:	b9 34 00 00 00       	mov    ecx,0x34
c0018df0:	29 f9                	sub    ecx,edi
c0018df2:	0f ad d0             	shrd   eax,edx,cl
c0018df5:	d3 fa                	sar    edx,cl
c0018df7:	f6 c1 20             	test   cl,0x20
c0018dfa:	74 08                	je     c0018e04 <Vm::fpuFloatToLong(unsigned long long)+0x4f>
c0018dfc:	89 d0                	mov    eax,edx
c0018dfe:	c1 fa 1f             	sar    edx,0x1f
c0018e01:	8d 76 00             	lea    esi,[esi+0x0]
c0018e04:	85 db                	test   ebx,ebx
c0018e06:	79 08                	jns    c0018e10 <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c0018e08:	f7 d8                	neg    eax
c0018e0a:	83 d2 00             	adc    edx,0x0
c0018e0d:	f7 da                	neg    edx
c0018e0f:	90                   	nop
c0018e10:	5b                   	pop    ebx
c0018e11:	5e                   	pop    esi
c0018e12:	5f                   	pop    edi
c0018e13:	c3                   	ret    

c0018e14 <Vm::fpuULongToFloat(unsigned long long)>:
c0018e14:	57                   	push   edi
c0018e15:	31 c9                	xor    ecx,ecx
c0018e17:	56                   	push   esi
c0018e18:	53                   	push   ebx
c0018e19:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018e1d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0018e21:	8d 76 00             	lea    esi,[esi+0x0]
c0018e24:	0f ba e7 14          	bt     edi,0x14
c0018e28:	72 0a                	jb     c0018e34 <Vm::fpuULongToFloat(unsigned long long)+0x20>
c0018e2a:	01 f6                	add    esi,esi
c0018e2c:	11 ff                	adc    edi,edi
c0018e2e:	41                   	inc    ecx
c0018e2f:	eb f3                	jmp    c0018e24 <Vm::fpuULongToFloat(unsigned long long)+0x10>
c0018e31:	8d 76 00             	lea    esi,[esi+0x0]
c0018e34:	89 fa                	mov    edx,edi
c0018e36:	89 f0                	mov    eax,esi
c0018e38:	bb 33 04 00 00       	mov    ebx,0x433
c0018e3d:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c0018e43:	29 cb                	sub    ebx,ecx
c0018e45:	89 d9                	mov    ecx,ebx
c0018e47:	5b                   	pop    ebx
c0018e48:	c1 e1 14             	shl    ecx,0x14
c0018e4b:	5e                   	pop    esi
c0018e4c:	09 ca                	or     edx,ecx
c0018e4e:	5f                   	pop    edi
c0018e4f:	c3                   	ret    

c0018e50 <Vm::fpuLongToFloat(long long)>:
c0018e50:	56                   	push   esi
c0018e51:	31 c0                	xor    eax,eax
c0018e53:	53                   	push   ebx
c0018e54:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018e58:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018e5c:	39 c8                	cmp    eax,ecx
c0018e5e:	19 d8                	sbb    eax,ebx
c0018e60:	7d 06                	jge    c0018e68 <Vm::fpuLongToFloat(long long)+0x18>
c0018e62:	31 f6                	xor    esi,esi
c0018e64:	eb 0e                	jmp    c0018e74 <Vm::fpuLongToFloat(long long)+0x24>
c0018e66:	66 90                	xchg   ax,ax
c0018e68:	f7 d9                	neg    ecx
c0018e6a:	be 01 00 00 00       	mov    esi,0x1
c0018e6f:	83 d3 00             	adc    ebx,0x0
c0018e72:	f7 db                	neg    ebx
c0018e74:	31 c0                	xor    eax,eax
c0018e76:	66 90                	xchg   ax,ax
c0018e78:	0f ba e3 14          	bt     ebx,0x14
c0018e7c:	72 0a                	jb     c0018e88 <Vm::fpuLongToFloat(long long)+0x38>
c0018e7e:	01 c9                	add    ecx,ecx
c0018e80:	11 db                	adc    ebx,ebx
c0018e82:	40                   	inc    eax
c0018e83:	eb f3                	jmp    c0018e78 <Vm::fpuLongToFloat(long long)+0x28>
c0018e85:	8d 76 00             	lea    esi,[esi+0x0]
c0018e88:	ba 33 04 00 00       	mov    edx,0x433
c0018e8d:	29 c2                	sub    edx,eax
c0018e8f:	89 c8                	mov    eax,ecx
c0018e91:	c1 e2 14             	shl    edx,0x14
c0018e94:	89 d9                	mov    ecx,ebx
c0018e96:	89 f3                	mov    ebx,esi
c0018e98:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c0018e9e:	09 ca                	or     edx,ecx
c0018ea0:	84 db                	test   bl,bl
c0018ea2:	74 08                	je     c0018eac <Vm::fpuLongToFloat(long long)+0x5c>
c0018ea4:	81 ca 00 00 00 80    	or     edx,0x80000000
c0018eaa:	66 90                	xchg   ax,ax
c0018eac:	5b                   	pop    ebx
c0018ead:	5e                   	pop    esi
c0018eae:	c3                   	ret    

c0018eaf <Vm::fpuGet0()>:
c0018eaf:	31 c0                	xor    eax,eax
c0018eb1:	31 d2                	xor    edx,edx
c0018eb3:	c3                   	ret    

c0018eb4 <Vm::fpuGet1()>:
c0018eb4:	b8 01 00 00 00       	mov    eax,0x1
c0018eb9:	31 d2                	xor    edx,edx
c0018ebb:	c3                   	ret    

c0018ebc <Vm::fpuGetPi()>:
c0018ebc:	b8 03 00 00 00       	mov    eax,0x3
c0018ec1:	31 d2                	xor    edx,edx
c0018ec3:	c3                   	ret    

c0018ec4 <Vm::fpuGetLog2E()>:
c0018ec4:	83 ec 18             	sub    esp,0x18
c0018ec7:	68 34 60 02 c0       	push   0xc0026034
c0018ecc:	e8 0a b1 ff ff       	call   c0013fdb <Krnl::panic(char const*)>
c0018ed1:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0018ed6:	31 d2                	xor    edx,edx
c0018ed8:	83 c4 1c             	add    esp,0x1c
c0018edb:	c3                   	ret    

c0018edc <Vm::fpuGetLogE2()>:
c0018edc:	83 ec 18             	sub    esp,0x18
c0018edf:	68 40 60 02 c0       	push   0xc0026040
c0018ee4:	e8 f2 b0 ff ff       	call   c0013fdb <Krnl::panic(char const*)>
c0018ee9:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0018eee:	31 d2                	xor    edx,edx
c0018ef0:	83 c4 1c             	add    esp,0x1c
c0018ef3:	c3                   	ret    

c0018ef4 <Vm::fpuGetLog210()>:
c0018ef4:	83 ec 18             	sub    esp,0x18
c0018ef7:	68 4c 60 02 c0       	push   0xc002604c
c0018efc:	e8 da b0 ff ff       	call   c0013fdb <Krnl::panic(char const*)>
c0018f01:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0018f06:	31 d2                	xor    edx,edx
c0018f08:	83 c4 1c             	add    esp,0x1c
c0018f0b:	c3                   	ret    

c0018f0c <Vm::fpuGetLog102()>:
c0018f0c:	83 ec 18             	sub    esp,0x18
c0018f0f:	68 59 60 02 c0       	push   0xc0026059
c0018f14:	e8 c2 b0 ff ff       	call   c0013fdb <Krnl::panic(char const*)>
c0018f19:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0018f1e:	31 d2                	xor    edx,edx
c0018f20:	83 c4 1c             	add    esp,0x1c
c0018f23:	c3                   	ret    

c0018f24 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c0018f24:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018f28:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0018f2c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018f30:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c0018f34:	0f 92 c0             	setb   al
c0018f37:	c3                   	ret    

c0018f38 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c0018f38:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018f3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f40:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c0018f44:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c0018f48:	09 c2                	or     edx,eax
c0018f4a:	0f 94 c0             	sete   al
c0018f4d:	c3                   	ret    

c0018f4e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c0018f4e:	57                   	push   edi
c0018f4f:	56                   	push   esi
c0018f50:	53                   	push   ebx
c0018f51:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018f55:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018f59:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018f5d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018f61:	57                   	push   edi
c0018f62:	56                   	push   esi
c0018f63:	53                   	push   ebx
c0018f64:	51                   	push   ecx
c0018f65:	e8 ce ff ff ff       	call   c0018f38 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c0018f6a:	83 c4 10             	add    esp,0x10
c0018f6d:	88 c2                	mov    dl,al
c0018f6f:	31 c0                	xor    eax,eax
c0018f71:	84 d2                	test   dl,dl
c0018f73:	75 0f                	jne    c0018f84 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x36>
c0018f75:	57                   	push   edi
c0018f76:	56                   	push   esi
c0018f77:	53                   	push   ebx
c0018f78:	51                   	push   ecx
c0018f79:	e8 a6 ff ff ff       	call   c0018f24 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c0018f7e:	83 c4 10             	add    esp,0x10
c0018f81:	8d 76 00             	lea    esi,[esi+0x0]
c0018f84:	83 e0 01             	and    eax,0x1
c0018f87:	5b                   	pop    ebx
c0018f88:	88 c1                	mov    cl,al
c0018f8a:	83 e2 01             	and    edx,0x1
c0018f8d:	a0 c1 94 02 c0       	mov    al,ds:0xc00294c1
c0018f92:	c1 e2 06             	shl    edx,0x6
c0018f95:	83 e0 ba             	and    eax,0xffffffba
c0018f98:	5e                   	pop    esi
c0018f99:	09 c8                	or     eax,ecx
c0018f9b:	5f                   	pop    edi
c0018f9c:	09 d0                	or     eax,edx
c0018f9e:	a2 c1 94 02 c0       	mov    ds:0xc00294c1,al
c0018fa3:	c3                   	ret    

c0018fa4 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c0018fa4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018fa8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018fac:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0018fb0:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c0018fb4:	c3                   	ret    

c0018fb5 <Vm::fpuAbs(unsigned long long)>:
c0018fb5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018fb9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018fbd:	c3                   	ret    

c0018fbe <Vm::fpuChs(unsigned long long)>:
c0018fbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018fc2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018fc6:	f7 d8                	neg    eax
c0018fc8:	83 d2 00             	adc    edx,0x0
c0018fcb:	f7 da                	neg    edx
c0018fcd:	c3                   	ret    

c0018fce <Vm::fpuSub(unsigned long long, unsigned long long)>:
c0018fce:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c0018fd2:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c0018fd7:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c0018fdb:	eb c7                	jmp    c0018fa4 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c0018fdd <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c0018fdd:	53                   	push   ebx
c0018fde:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018fe2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018fe6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018fea:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018fee:	0f af ca             	imul   ecx,edx
c0018ff1:	0f af d8             	imul   ebx,eax
c0018ff4:	f7 e2                	mul    edx
c0018ff6:	01 d9                	add    ecx,ebx
c0018ff8:	5b                   	pop    ebx
c0018ff9:	01 ca                	add    edx,ecx
c0018ffb:	c3                   	ret    

c0018ffc <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c0018ffc:	83 ec 0c             	sub    esp,0xc
c0018fff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019003:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019007:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001900b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001900f:	e8 0c 97 00 00       	call   c0022720 <__udivdi3>
c0019014:	83 c4 1c             	add    esp,0x1c
c0019017:	c3                   	ret    

c0019018 <Vm::fpuSquare(unsigned long long)>:
c0019018:	50                   	push   eax
c0019019:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001901d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019021:	52                   	push   edx
c0019022:	50                   	push   eax
c0019023:	52                   	push   edx
c0019024:	50                   	push   eax
c0019025:	e8 b3 ff ff ff       	call   c0018fdd <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001902a:	83 c4 14             	add    esp,0x14
c001902d:	c3                   	ret    

c001902e <Vm::fpuGetReg(int)>:
c001902e:	83 ec 0c             	sub    esp,0xc
c0019031:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c0019036:	76 10                	jbe    c0019048 <Vm::fpuGetReg(int)+0x1a>
c0019038:	83 ec 0c             	sub    esp,0xc
c001903b:	68 66 60 02 c0       	push   0xc0026066
c0019040:	e8 96 af ff ff       	call   c0013fdb <Krnl::panic(char const*)>
c0019045:	83 c4 10             	add    esp,0x10
c0019048:	a0 c1 94 02 c0       	mov    al,ds:0xc00294c1
c001904d:	b9 08 00 00 00       	mov    ecx,0x8
c0019052:	c0 e8 03             	shr    al,0x3
c0019055:	83 e0 07             	and    eax,0x7
c0019058:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001905c:	99                   	cdq    
c001905d:	f7 f9                	idiv   ecx
c001905f:	8b 04 d5 c4 94 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd6b3c]
c0019066:	8b 14 d5 c8 94 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd6b38]
c001906d:	83 c4 0c             	add    esp,0xc
c0019070:	c3                   	ret    

c0019071 <Vm::fpuSetReg(int, unsigned long long)>:
c0019071:	57                   	push   edi
c0019072:	56                   	push   esi
c0019073:	52                   	push   edx
c0019074:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019078:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001907c:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c0019081:	76 11                	jbe    c0019094 <Vm::fpuSetReg(int, unsigned long long)+0x23>
c0019083:	83 ec 0c             	sub    esp,0xc
c0019086:	68 79 60 02 c0       	push   0xc0026079
c001908b:	e8 4b af ff ff       	call   c0013fdb <Krnl::panic(char const*)>
c0019090:	83 c4 10             	add    esp,0x10
c0019093:	90                   	nop
c0019094:	a0 c1 94 02 c0       	mov    al,ds:0xc00294c1
c0019099:	b9 08 00 00 00       	mov    ecx,0x8
c001909e:	c0 e8 03             	shr    al,0x3
c00190a1:	83 e0 07             	and    eax,0x7
c00190a4:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00190a8:	99                   	cdq    
c00190a9:	f7 f9                	idiv   ecx
c00190ab:	89 34 d5 c4 94 02 c0 	mov    DWORD PTR [edx*8-0x3ffd6b3c],esi
c00190b2:	89 3c d5 c8 94 02 c0 	mov    DWORD PTR [edx*8-0x3ffd6b38],edi
c00190b9:	58                   	pop    eax
c00190ba:	5e                   	pop    esi
c00190bb:	5f                   	pop    edi
c00190bc:	c3                   	ret    

c00190bd <Vm::fpuPush(unsigned long long)>:
c00190bd:	a0 c1 94 02 c0       	mov    al,ds:0xc00294c1
c00190c2:	c0 e8 03             	shr    al,0x3
c00190c5:	83 e0 07             	and    eax,0x7
c00190c8:	83 c0 07             	add    eax,0x7
c00190cb:	88 c2                	mov    dl,al
c00190cd:	83 e0 07             	and    eax,0x7
c00190d0:	83 e2 07             	and    edx,0x7
c00190d3:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c00190da:	8a 15 c1 94 02 c0    	mov    dl,BYTE PTR ds:0xc00294c1
c00190e0:	83 e2 c7             	and    edx,0xffffffc7
c00190e3:	09 ca                	or     edx,ecx
c00190e5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00190e9:	88 15 c1 94 02 c0    	mov    BYTE PTR ds:0xc00294c1,dl
c00190ef:	89 0c c5 c8 94 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6b38],ecx
c00190f6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00190fa:	89 14 c5 c4 94 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6b3c],edx
c0019101:	a1 04 95 02 c0       	mov    eax,ds:0xc0029504
c0019106:	83 f8 08             	cmp    eax,0x8
c0019109:	75 09                	jne    c0019114 <Vm::fpuPush(unsigned long long)+0x57>
c001910b:	80 0d c0 94 02 c0 40 	or     BYTE PTR ds:0xc00294c0,0x40
c0019112:	c3                   	ret    
c0019113:	90                   	nop
c0019114:	40                   	inc    eax
c0019115:	a3 04 95 02 c0       	mov    ds:0xc0029504,eax
c001911a:	c3                   	ret    

c001911b <Vm::fpuPop()>:
c001911b:	8a 0d c1 94 02 c0    	mov    cl,BYTE PTR ds:0xc00294c1
c0019121:	53                   	push   ebx
c0019122:	c0 e9 03             	shr    cl,0x3
c0019125:	8a 1d c1 94 02 c0    	mov    bl,BYTE PTR ds:0xc00294c1
c001912b:	83 e1 07             	and    ecx,0x7
c001912e:	83 e3 c7             	and    ebx,0xffffffc7
c0019131:	8b 04 cd c4 94 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd6b3c]
c0019138:	8b 14 cd c8 94 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd6b38]
c001913f:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c0019146:	83 e1 38             	and    ecx,0x38
c0019149:	09 d9                	or     ecx,ebx
c001914b:	88 0d c1 94 02 c0    	mov    BYTE PTR ds:0xc00294c1,cl
c0019151:	8b 0d 04 95 02 c0    	mov    ecx,DWORD PTR ds:0xc0029504
c0019157:	85 c9                	test   ecx,ecx
c0019159:	74 09                	je     c0019164 <Vm::fpuPop()+0x49>
c001915b:	49                   	dec    ecx
c001915c:	89 0d 04 95 02 c0    	mov    DWORD PTR ds:0xc0029504,ecx
c0019162:	eb 08                	jmp    c001916c <Vm::fpuPop()+0x51>
c0019164:	80 0d c0 94 02 c0 40 	or     BYTE PTR ds:0xc00294c0,0x40
c001916b:	90                   	nop
c001916c:	5b                   	pop    ebx
c001916d:	c3                   	ret    

c001916e <Vm::x87Handler(regs*)>:
c001916e:	55                   	push   ebp
c001916f:	57                   	push   edi
c0019170:	56                   	push   esi
c0019171:	53                   	push   ebx
c0019172:	83 ec 1c             	sub    esp,0x1c
c0019175:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019179:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001917e:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0019181:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0019189:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001918d:	50                   	push   eax
c001918e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0019192:	50                   	push   eax
c0019193:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019197:	50                   	push   eax
c0019198:	53                   	push   ebx
c0019199:	e8 56 a5 ff ff       	call   c00136f4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001919e:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c00191a1:	83 c4 10             	add    esp,0x10
c00191a4:	89 c6                	mov    esi,eax
c00191a6:	80 fa d9             	cmp    dl,0xd9
c00191a9:	0f 85 79 01 00 00    	jne    c0019328 <Vm::x87Handler(regs*)+0x1ba>
c00191af:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00191b3:	8d 50 20             	lea    edx,[eax+0x20]
c00191b6:	80 fa 0e             	cmp    dl,0xe
c00191b9:	0f 87 a5 00 00 00    	ja     c0019264 <Vm::x87Handler(regs*)+0xf6>
c00191bf:	0f b6 d2             	movzx  edx,dl
c00191c2:	ff 24 95 8c 60 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd9f74]
c00191c9:	8d 76 00             	lea    esi,[esi+0x0]
c00191cc:	e8 de fc ff ff       	call   c0018eaf <Vm::fpuGet0()>
c00191d1:	eb 09                	jmp    c00191dc <Vm::x87Handler(regs*)+0x6e>
c00191d3:	90                   	nop
c00191d4:	e8 db fc ff ff       	call   c0018eb4 <Vm::fpuGet1()>
c00191d9:	8d 76 00             	lea    esi,[esi+0x0]
c00191dc:	57                   	push   edi
c00191dd:	57                   	push   edi
c00191de:	66 90                	xchg   ax,ax
c00191e0:	52                   	push   edx
c00191e1:	50                   	push   eax
c00191e2:	e8 d6 fe ff ff       	call   c00190bd <Vm::fpuPush(unsigned long long)>
c00191e7:	90                   	nop
c00191e8:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00191ec:	83 c4 10             	add    esp,0x10
c00191ef:	90                   	nop
c00191f0:	b0 01                	mov    al,0x1
c00191f2:	e9 89 0a 00 00       	jmp    c0019c80 <Vm::x87Handler(regs*)+0xb12>
c00191f7:	90                   	nop
c00191f8:	83 ec 0c             	sub    esp,0xc
c00191fb:	6a 00                	push   0x0
c00191fd:	e8 2c fe ff ff       	call   c001902e <Vm::fpuGetReg(int)>
c0019202:	59                   	pop    ecx
c0019203:	5e                   	pop    esi
c0019204:	52                   	push   edx
c0019205:	50                   	push   eax
c0019206:	e8 b3 fd ff ff       	call   c0018fbe <Vm::fpuChs(unsigned long long)>
c001920b:	eb 17                	jmp    c0019224 <Vm::x87Handler(regs*)+0xb6>
c001920d:	8d 76 00             	lea    esi,[esi+0x0]
c0019210:	83 ec 0c             	sub    esp,0xc
c0019213:	6a 00                	push   0x0
c0019215:	e8 14 fe ff ff       	call   c001902e <Vm::fpuGetReg(int)>
c001921a:	5f                   	pop    edi
c001921b:	5d                   	pop    ebp
c001921c:	52                   	push   edx
c001921d:	50                   	push   eax
c001921e:	e8 92 fd ff ff       	call   c0018fb5 <Vm::fpuAbs(unsigned long long)>
c0019223:	90                   	nop
c0019224:	83 c4 0c             	add    esp,0xc
c0019227:	90                   	nop
c0019228:	52                   	push   edx
c0019229:	50                   	push   eax
c001922a:	66 90                	xchg   ax,ax
c001922c:	6a 00                	push   0x0
c001922e:	66 90                	xchg   ax,ax
c0019230:	e8 3c fe ff ff       	call   c0019071 <Vm::fpuSetReg(int, unsigned long long)>
c0019235:	eb b1                	jmp    c00191e8 <Vm::x87Handler(regs*)+0x7a>
c0019237:	90                   	nop
c0019238:	e8 b7 fc ff ff       	call   c0018ef4 <Vm::fpuGetLog210()>
c001923d:	eb 9d                	jmp    c00191dc <Vm::x87Handler(regs*)+0x6e>
c001923f:	90                   	nop
c0019240:	e8 7f fc ff ff       	call   c0018ec4 <Vm::fpuGetLog2E()>
c0019245:	eb 95                	jmp    c00191dc <Vm::x87Handler(regs*)+0x6e>
c0019247:	90                   	nop
c0019248:	e8 6f fc ff ff       	call   c0018ebc <Vm::fpuGetPi()>
c001924d:	eb 8d                	jmp    c00191dc <Vm::x87Handler(regs*)+0x6e>
c001924f:	90                   	nop
c0019250:	e8 b7 fc ff ff       	call   c0018f0c <Vm::fpuGetLog102()>
c0019255:	eb 85                	jmp    c00191dc <Vm::x87Handler(regs*)+0x6e>
c0019257:	90                   	nop
c0019258:	e8 7f fc ff ff       	call   c0018edc <Vm::fpuGetLogE2()>
c001925d:	e9 7a ff ff ff       	jmp    c00191dc <Vm::x87Handler(regs*)+0x6e>
c0019262:	66 90                	xchg   ax,ax
c0019264:	8d 50 40             	lea    edx,[eax+0x40]
c0019267:	80 fa 07             	cmp    dl,0x7
c001926a:	77 18                	ja     c0019284 <Vm::x87Handler(regs*)+0x116>
c001926c:	83 ec 0c             	sub    esp,0xc
c001926f:	2d c0 00 00 00       	sub    eax,0xc0
c0019274:	50                   	push   eax
c0019275:	e8 b4 fd ff ff       	call   c001902e <Vm::fpuGetReg(int)>
c001927a:	59                   	pop    ecx
c001927b:	5e                   	pop    esi
c001927c:	e9 5f ff ff ff       	jmp    c00191e0 <Vm::x87Handler(regs*)+0x72>
c0019281:	8d 76 00             	lea    esi,[esi+0x0]
c0019284:	8d 50 38             	lea    edx,[eax+0x38]
c0019287:	80 fa 07             	cmp    dl,0x7
c001928a:	77 3c                	ja     c00192c8 <Vm::x87Handler(regs*)+0x15a>
c001928c:	83 ec 0c             	sub    esp,0xc
c001928f:	2d c8 00 00 00       	sub    eax,0xc8
c0019294:	50                   	push   eax
c0019295:	e8 94 fd ff ff       	call   c001902e <Vm::fpuGetReg(int)>
c001929a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00192a1:	89 c6                	mov    esi,eax
c00192a3:	89 d7                	mov    edi,edx
c00192a5:	e8 84 fd ff ff       	call   c001902e <Vm::fpuGetReg(int)>
c00192aa:	83 c4 0c             	add    esp,0xc
c00192ad:	52                   	push   edx
c00192ae:	50                   	push   eax
c00192af:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00192b3:	2d c8 00 00 00       	sub    eax,0xc8
c00192b8:	50                   	push   eax
c00192b9:	e8 b3 fd ff ff       	call   c0019071 <Vm::fpuSetReg(int, unsigned long long)>
c00192be:	83 c4 0c             	add    esp,0xc
c00192c1:	57                   	push   edi
c00192c2:	56                   	push   esi
c00192c3:	e9 64 ff ff ff       	jmp    c001922c <Vm::x87Handler(regs*)+0xbe>
c00192c8:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00192cc:	84 d2                	test   dl,dl
c00192ce:	75 10                	jne    c00192e0 <Vm::x87Handler(regs*)+0x172>
c00192d0:	83 ec 0c             	sub    esp,0xc
c00192d3:	ff 36                	push   DWORD PTR [esi]
c00192d5:	e8 8d fa ff ff       	call   c0018d67 <Vm::fpu32ToInternal(unsigned int)>
c00192da:	e9 c9 00 00 00       	jmp    c00193a8 <Vm::x87Handler(regs*)+0x23a>
c00192df:	90                   	nop
c00192e0:	80 fa 03             	cmp    dl,0x3
c00192e3:	75 13                	jne    c00192f8 <Vm::x87Handler(regs*)+0x18a>
c00192e5:	e8 31 fe ff ff       	call   c001911b <Vm::fpuPop()>
c00192ea:	55                   	push   ebp
c00192eb:	55                   	push   ebp
c00192ec:	52                   	push   edx
c00192ed:	50                   	push   eax
c00192ee:	e8 0d fa ff ff       	call   c0018d00 <Vm::fpuInternalTo32(unsigned long long)>
c00192f3:	e9 90 00 00 00       	jmp    c0019388 <Vm::x87Handler(regs*)+0x21a>
c00192f8:	80 fa 05             	cmp    dl,0x5
c00192fb:	75 0f                	jne    c001930c <Vm::x87Handler(regs*)+0x19e>
c00192fd:	66 8b 06             	mov    ax,WORD PTR [esi]
c0019300:	66 a3 c2 94 02 c0    	mov    ds:0xc00294c2,ax
c0019306:	e9 ed 00 00 00       	jmp    c00193f8 <Vm::x87Handler(regs*)+0x28a>
c001930b:	90                   	nop
c001930c:	31 c0                	xor    eax,eax
c001930e:	80 fa 07             	cmp    dl,0x7
c0019311:	0f 85 69 09 00 00    	jne    c0019c80 <Vm::x87Handler(regs*)+0xb12>
c0019317:	66 a1 c2 94 02 c0    	mov    ax,ds:0xc00294c2
c001931d:	66 89 06             	mov    WORD PTR [esi],ax
c0019320:	e9 d3 00 00 00       	jmp    c00193f8 <Vm::x87Handler(regs*)+0x28a>
c0019325:	8d 76 00             	lea    esi,[esi+0x0]
c0019328:	80 fa d8             	cmp    dl,0xd8
c001932b:	0f 84 d3 00 00 00    	je     c0019404 <Vm::x87Handler(regs*)+0x296>
c0019331:	80 fa dc             	cmp    dl,0xdc
c0019334:	0f 84 2a 02 00 00    	je     c0019564 <Vm::x87Handler(regs*)+0x3f6>
c001933a:	80 fa de             	cmp    dl,0xde
c001933d:	0f 84 f1 02 00 00    	je     c0019634 <Vm::x87Handler(regs*)+0x4c6>
c0019343:	80 fa dd             	cmp    dl,0xdd
c0019346:	0f 84 94 04 00 00    	je     c00197e0 <Vm::x87Handler(regs*)+0x672>
c001934c:	80 fa da             	cmp    dl,0xda
c001934f:	0f 84 5f 05 00 00    	je     c00198b4 <Vm::x87Handler(regs*)+0x746>
c0019355:	80 fa df             	cmp    dl,0xdf
c0019358:	0f 84 aa 05 00 00    	je     c0019908 <Vm::x87Handler(regs*)+0x79a>
c001935e:	31 c0                	xor    eax,eax
c0019360:	80 fa db             	cmp    dl,0xdb
c0019363:	0f 85 17 09 00 00    	jne    c0019c80 <Vm::x87Handler(regs*)+0xb12>
c0019369:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001936d:	80 fa 03             	cmp    dl,0x3
c0019370:	0f 85 c2 06 00 00    	jne    c0019a38 <Vm::x87Handler(regs*)+0x8ca>
c0019376:	e8 a0 fd ff ff       	call   c001911b <Vm::fpuPop()>
c001937b:	55                   	push   ebp
c001937c:	55                   	push   ebp
c001937d:	8d 76 00             	lea    esi,[esi+0x0]
c0019380:	52                   	push   edx
c0019381:	50                   	push   eax
c0019382:	e8 2e fa ff ff       	call   c0018db5 <Vm::fpuFloatToLong(unsigned long long)>
c0019387:	90                   	nop
c0019388:	83 c4 10             	add    esp,0x10
c001938b:	89 06                	mov    DWORD PTR [esi],eax
c001938d:	eb 69                	jmp    c00193f8 <Vm::x87Handler(regs*)+0x28a>
c001938f:	90                   	nop
c0019390:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0019394:	84 d2                	test   dl,dl
c0019396:	0f 85 2c 06 00 00    	jne    c00199c8 <Vm::x87Handler(regs*)+0x85a>
c001939c:	57                   	push   edi
c001939d:	57                   	push   edi
c001939e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00193a1:	ff 36                	push   DWORD PTR [esi]
c00193a3:	e8 04 fa ff ff       	call   c0018dac <Vm::fpu64ToInternal(unsigned long long)>
c00193a8:	5e                   	pop    esi
c00193a9:	5f                   	pop    edi
c00193aa:	52                   	push   edx
c00193ab:	50                   	push   eax
c00193ac:	e8 0c fd ff ff       	call   c00190bd <Vm::fpuPush(unsigned long long)>
c00193b1:	8d 76 00             	lea    esi,[esi+0x0]
c00193b4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00193b8:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c00193bb:	e9 2c fe ff ff       	jmp    c00191ec <Vm::x87Handler(regs*)+0x7e>
c00193c0:	80 fa 03             	cmp    dl,0x3
c00193c3:	0f 85 2b 07 00 00    	jne    c0019af4 <Vm::x87Handler(regs*)+0x986>
c00193c9:	57                   	push   edi
c00193ca:	57                   	push   edi
c00193cb:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00193ce:	ff 36                	push   DWORD PTR [esi]
c00193d0:	e8 d7 f9 ff ff       	call   c0018dac <Vm::fpu64ToInternal(unsigned long long)>
c00193d5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00193dc:	89 c6                	mov    esi,eax
c00193de:	89 d7                	mov    edi,edx
c00193e0:	e8 49 fc ff ff       	call   c001902e <Vm::fpuGetReg(int)>
c00193e5:	57                   	push   edi
c00193e6:	56                   	push   esi
c00193e7:	52                   	push   edx
c00193e8:	50                   	push   eax
c00193e9:	e8 60 fb ff ff       	call   c0018f4e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00193ee:	83 c4 20             	add    esp,0x20
c00193f1:	e8 25 fd ff ff       	call   c001911b <Vm::fpuPop()>
c00193f6:	66 90                	xchg   ax,ax
c00193f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00193fc:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c00193ff:	e9 ec fd ff ff       	jmp    c00191f0 <Vm::x87Handler(regs*)+0x82>
c0019404:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019408:	8d 50 40             	lea    edx,[eax+0x40]
c001940b:	80 fa 07             	cmp    dl,0x7
c001940e:	77 2c                	ja     c001943c <Vm::x87Handler(regs*)+0x2ce>
c0019410:	83 ec 0c             	sub    esp,0xc
c0019413:	2d c0 00 00 00       	sub    eax,0xc0
c0019418:	50                   	push   eax
c0019419:	e8 10 fc ff ff       	call   c001902e <Vm::fpuGetReg(int)>
c001941e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019425:	89 c6                	mov    esi,eax
c0019427:	89 d7                	mov    edi,edx
c0019429:	e8 00 fc ff ff       	call   c001902e <Vm::fpuGetReg(int)>
c001942e:	57                   	push   edi
c001942f:	56                   	push   esi
c0019430:	52                   	push   edx
c0019431:	50                   	push   eax
c0019432:	e8 6d fb ff ff       	call   c0018fa4 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0019437:	eb 33                	jmp    c001946c <Vm::x87Handler(regs*)+0x2fe>
c0019439:	8d 76 00             	lea    esi,[esi+0x0]
c001943c:	8d 50 38             	lea    edx,[eax+0x38]
c001943f:	80 fa 07             	cmp    dl,0x7
c0019442:	77 30                	ja     c0019474 <Vm::x87Handler(regs*)+0x306>
c0019444:	83 ec 0c             	sub    esp,0xc
c0019447:	2d c8 00 00 00       	sub    eax,0xc8
c001944c:	50                   	push   eax
c001944d:	e8 dc fb ff ff       	call   c001902e <Vm::fpuGetReg(int)>
c0019452:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019459:	89 c6                	mov    esi,eax
c001945b:	89 d7                	mov    edi,edx
c001945d:	e8 cc fb ff ff       	call   c001902e <Vm::fpuGetReg(int)>
c0019462:	57                   	push   edi
c0019463:	56                   	push   esi
c0019464:	52                   	push   edx
c0019465:	50                   	push   eax
c0019466:	e8 72 fb ff ff       	call   c0018fdd <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001946b:	90                   	nop
c001946c:	83 c4 1c             	add    esp,0x1c
c001946f:	e9 b4 fd ff ff       	jmp    c0019228 <Vm::x87Handler(regs*)+0xba>
c0019474:	8d 50 30             	lea    edx,[eax+0x30]
c0019477:	80 fa 07             	cmp    dl,0x7
c001947a:	77 10                	ja     c001948c <Vm::x87Handler(regs*)+0x31e>
c001947c:	83 ec 0c             	sub    esp,0xc
c001947f:	2d d0 00 00 00       	sub    eax,0xd0
c0019484:	e9 c3 03 00 00       	jmp    c001984c <Vm::x87Handler(regs*)+0x6de>
c0019489:	8d 76 00             	lea    esi,[esi+0x0]
c001948c:	8d 50 28             	lea    edx,[eax+0x28]
c001948f:	80 fa 07             	cmp    dl,0x7
c0019492:	77 10                	ja     c00194a4 <Vm::x87Handler(regs*)+0x336>
c0019494:	83 ec 0c             	sub    esp,0xc
c0019497:	2d d8 00 00 00       	sub    eax,0xd8
c001949c:	e9 e7 03 00 00       	jmp    c0019888 <Vm::x87Handler(regs*)+0x71a>
c00194a1:	8d 76 00             	lea    esi,[esi+0x0]
c00194a4:	8d 50 20             	lea    edx,[eax+0x20]
c00194a7:	80 fa 07             	cmp    dl,0x7
c00194aa:	77 1c                	ja     c00194c8 <Vm::x87Handler(regs*)+0x35a>
c00194ac:	83 ec 0c             	sub    esp,0xc
c00194af:	2d e0 00 00 00       	sub    eax,0xe0
c00194b4:	50                   	push   eax
c00194b5:	e8 74 fb ff ff       	call   c001902e <Vm::fpuGetReg(int)>
c00194ba:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00194c1:	89 c6                	mov    esi,eax
c00194c3:	89 d7                	mov    edi,edx
c00194c5:	eb 25                	jmp    c00194ec <Vm::x87Handler(regs*)+0x37e>
c00194c7:	90                   	nop
c00194c8:	8d 50 18             	lea    edx,[eax+0x18]
c00194cb:	80 fa 07             	cmp    dl,0x7
c00194ce:	77 30                	ja     c0019500 <Vm::x87Handler(regs*)+0x392>
c00194d0:	83 ec 0c             	sub    esp,0xc
c00194d3:	6a 00                	push   0x0
c00194d5:	e8 54 fb ff ff       	call   c001902e <Vm::fpuGetReg(int)>
c00194da:	89 c6                	mov    esi,eax
c00194dc:	89 d7                	mov    edi,edx
c00194de:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00194e2:	2d e8 00 00 00       	sub    eax,0xe8
c00194e7:	89 04 24             	mov    DWORD PTR [esp],eax
c00194ea:	66 90                	xchg   ax,ax
c00194ec:	e8 3d fb ff ff       	call   c001902e <Vm::fpuGetReg(int)>
c00194f1:	57                   	push   edi
c00194f2:	56                   	push   esi
c00194f3:	52                   	push   edx
c00194f4:	50                   	push   eax
c00194f5:	e8 d4 fa ff ff       	call   c0018fce <Vm::fpuSub(unsigned long long, unsigned long long)>
c00194fa:	e9 6d ff ff ff       	jmp    c001946c <Vm::x87Handler(regs*)+0x2fe>
c00194ff:	90                   	nop
c0019500:	8d 50 10             	lea    edx,[eax+0x10]
c0019503:	80 fa 07             	cmp    dl,0x7
c0019506:	77 1c                	ja     c0019524 <Vm::x87Handler(regs*)+0x3b6>
c0019508:	83 ec 0c             	sub    esp,0xc
c001950b:	2d f0 00 00 00       	sub    eax,0xf0
c0019510:	50                   	push   eax
c0019511:	e8 18 fb ff ff       	call   c001902e <Vm::fpuGetReg(int)>
c0019516:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001951d:	89 c6                	mov    esi,eax
c001951f:	89 d7                	mov    edi,edx
c0019521:	eb 25                	jmp    c0019548 <Vm::x87Handler(regs*)+0x3da>
c0019523:	90                   	nop
c0019524:	3c f7                	cmp    al,0xf7
c0019526:	0f 86 00 04 00 00    	jbe    c001992c <Vm::x87Handler(regs*)+0x7be>
c001952c:	83 ec 0c             	sub    esp,0xc
c001952f:	6a 00                	push   0x0
c0019531:	e8 f8 fa ff ff       	call   c001902e <Vm::fpuGetReg(int)>
c0019536:	89 c6                	mov    esi,eax
c0019538:	89 d7                	mov    edi,edx
c001953a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001953e:	2d f8 00 00 00       	sub    eax,0xf8
c0019543:	89 04 24             	mov    DWORD PTR [esp],eax
c0019546:	66 90                	xchg   ax,ax
c0019548:	e8 e1 fa ff ff       	call   c001902e <Vm::fpuGetReg(int)>
c001954d:	57                   	push   edi
c001954e:	56                   	push   esi
c001954f:	52                   	push   edx
c0019550:	50                   	push   eax
c0019551:	e8 a6 fa ff ff       	call   c0018ffc <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0019556:	83 c4 1c             	add    esp,0x1c
c0019559:	52                   	push   edx
c001955a:	50                   	push   eax
c001955b:	6a 00                	push   0x0
c001955d:	e9 6a 02 00 00       	jmp    c00197cc <Vm::x87Handler(regs*)+0x65e>
c0019562:	66 90                	xchg   ax,ax
c0019564:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019568:	8d 50 40             	lea    edx,[eax+0x40]
c001956b:	80 fa 07             	cmp    dl,0x7
c001956e:	77 38                	ja     c00195a8 <Vm::x87Handler(regs*)+0x43a>
c0019570:	83 ec 0c             	sub    esp,0xc
c0019573:	2d c0 00 00 00       	sub    eax,0xc0
c0019578:	50                   	push   eax
c0019579:	e8 b0 fa ff ff       	call   c001902e <Vm::fpuGetReg(int)>
c001957e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019585:	89 c6                	mov    esi,eax
c0019587:	89 d7                	mov    edi,edx
c0019589:	e8 a0 fa ff ff       	call   c001902e <Vm::fpuGetReg(int)>
c001958e:	57                   	push   edi
c001958f:	56                   	push   esi
c0019590:	52                   	push   edx
c0019591:	50                   	push   eax
c0019592:	e8 0d fa ff ff       	call   c0018fa4 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0019597:	83 c4 1c             	add    esp,0x1c
c001959a:	52                   	push   edx
c001959b:	50                   	push   eax
c001959c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00195a0:	2d c0 00 00 00       	sub    eax,0xc0
c00195a5:	eb 41                	jmp    c00195e8 <Vm::x87Handler(regs*)+0x47a>
c00195a7:	90                   	nop
c00195a8:	8d 50 38             	lea    edx,[eax+0x38]
c00195ab:	80 fa 07             	cmp    dl,0x7
c00195ae:	77 40                	ja     c00195f0 <Vm::x87Handler(regs*)+0x482>
c00195b0:	83 ec 0c             	sub    esp,0xc
c00195b3:	2d c8 00 00 00       	sub    eax,0xc8
c00195b8:	50                   	push   eax
c00195b9:	e8 70 fa ff ff       	call   c001902e <Vm::fpuGetReg(int)>
c00195be:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00195c5:	89 c6                	mov    esi,eax
c00195c7:	89 d7                	mov    edi,edx
c00195c9:	e8 60 fa ff ff       	call   c001902e <Vm::fpuGetReg(int)>
c00195ce:	57                   	push   edi
c00195cf:	56                   	push   esi
c00195d0:	52                   	push   edx
c00195d1:	50                   	push   eax
c00195d2:	e8 06 fa ff ff       	call   c0018fdd <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c00195d7:	83 c4 1c             	add    esp,0x1c
c00195da:	52                   	push   edx
c00195db:	50                   	push   eax
c00195dc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00195e0:	2d c8 00 00 00       	sub    eax,0xc8
c00195e5:	8d 76 00             	lea    esi,[esi+0x0]
c00195e8:	50                   	push   eax
c00195e9:	e9 42 fc ff ff       	jmp    c0019230 <Vm::x87Handler(regs*)+0xc2>
c00195ee:	66 90                	xchg   ax,ax
c00195f0:	83 c0 18             	add    eax,0x18
c00195f3:	3c 07                	cmp    al,0x7
c00195f5:	0f 87 6d 04 00 00    	ja     c0019a68 <Vm::x87Handler(regs*)+0x8fa>
c00195fb:	83 ec 0c             	sub    esp,0xc
c00195fe:	6a 00                	push   0x0
c0019600:	e8 29 fa ff ff       	call   c001902e <Vm::fpuGetReg(int)>
c0019605:	89 c6                	mov    esi,eax
c0019607:	89 d7                	mov    edi,edx
c0019609:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001960d:	2d e8 00 00 00       	sub    eax,0xe8
c0019612:	89 04 24             	mov    DWORD PTR [esp],eax
c0019615:	e8 14 fa ff ff       	call   c001902e <Vm::fpuGetReg(int)>
c001961a:	57                   	push   edi
c001961b:	56                   	push   esi
c001961c:	52                   	push   edx
c001961d:	50                   	push   eax
c001961e:	e8 ab f9 ff ff       	call   c0018fce <Vm::fpuSub(unsigned long long, unsigned long long)>
c0019623:	83 c4 1c             	add    esp,0x1c
c0019626:	52                   	push   edx
c0019627:	50                   	push   eax
c0019628:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001962c:	2d e8 00 00 00       	sub    eax,0xe8
c0019631:	eb b5                	jmp    c00195e8 <Vm::x87Handler(regs*)+0x47a>
c0019633:	90                   	nop
c0019634:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019638:	8d 50 40             	lea    edx,[eax+0x40]
c001963b:	80 fa 07             	cmp    dl,0x7
c001963e:	77 3c                	ja     c001967c <Vm::x87Handler(regs*)+0x50e>
c0019640:	83 ec 0c             	sub    esp,0xc
c0019643:	2d c0 00 00 00       	sub    eax,0xc0
c0019648:	50                   	push   eax
c0019649:	e8 e0 f9 ff ff       	call   c001902e <Vm::fpuGetReg(int)>
c001964e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019655:	89 c6                	mov    esi,eax
c0019657:	89 d7                	mov    edi,edx
c0019659:	e8 d0 f9 ff ff       	call   c001902e <Vm::fpuGetReg(int)>
c001965e:	57                   	push   edi
c001965f:	56                   	push   esi
c0019660:	52                   	push   edx
c0019661:	50                   	push   eax
c0019662:	e8 3d f9 ff ff       	call   c0018fa4 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0019667:	83 c4 1c             	add    esp,0x1c
c001966a:	52                   	push   edx
c001966b:	50                   	push   eax
c001966c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019670:	2d c0 00 00 00       	sub    eax,0xc0
c0019675:	e9 b2 01 00 00       	jmp    c001982c <Vm::x87Handler(regs*)+0x6be>
c001967a:	66 90                	xchg   ax,ax
c001967c:	8d 50 20             	lea    edx,[eax+0x20]
c001967f:	80 fa 07             	cmp    dl,0x7
c0019682:	77 3c                	ja     c00196c0 <Vm::x87Handler(regs*)+0x552>
c0019684:	83 ec 0c             	sub    esp,0xc
c0019687:	2d e0 00 00 00       	sub    eax,0xe0
c001968c:	50                   	push   eax
c001968d:	e8 9c f9 ff ff       	call   c001902e <Vm::fpuGetReg(int)>
c0019692:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019699:	89 c6                	mov    esi,eax
c001969b:	89 d7                	mov    edi,edx
c001969d:	e8 8c f9 ff ff       	call   c001902e <Vm::fpuGetReg(int)>
c00196a2:	57                   	push   edi
c00196a3:	56                   	push   esi
c00196a4:	52                   	push   edx
c00196a5:	50                   	push   eax
c00196a6:	e8 23 f9 ff ff       	call   c0018fce <Vm::fpuSub(unsigned long long, unsigned long long)>
c00196ab:	83 c4 1c             	add    esp,0x1c
c00196ae:	52                   	push   edx
c00196af:	50                   	push   eax
c00196b0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00196b4:	2d e0 00 00 00       	sub    eax,0xe0
c00196b9:	e9 6e 01 00 00       	jmp    c001982c <Vm::x87Handler(regs*)+0x6be>
c00196be:	66 90                	xchg   ax,ax
c00196c0:	8d 50 18             	lea    edx,[eax+0x18]
c00196c3:	80 fa 07             	cmp    dl,0x7
c00196c6:	77 3c                	ja     c0019704 <Vm::x87Handler(regs*)+0x596>
c00196c8:	83 ec 0c             	sub    esp,0xc
c00196cb:	6a 00                	push   0x0
c00196cd:	e8 5c f9 ff ff       	call   c001902e <Vm::fpuGetReg(int)>
c00196d2:	89 c6                	mov    esi,eax
c00196d4:	89 d7                	mov    edi,edx
c00196d6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00196da:	2d e8 00 00 00       	sub    eax,0xe8
c00196df:	89 04 24             	mov    DWORD PTR [esp],eax
c00196e2:	e8 47 f9 ff ff       	call   c001902e <Vm::fpuGetReg(int)>
c00196e7:	57                   	push   edi
c00196e8:	56                   	push   esi
c00196e9:	52                   	push   edx
c00196ea:	50                   	push   eax
c00196eb:	e8 de f8 ff ff       	call   c0018fce <Vm::fpuSub(unsigned long long, unsigned long long)>
c00196f0:	83 c4 1c             	add    esp,0x1c
c00196f3:	52                   	push   edx
c00196f4:	50                   	push   eax
c00196f5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00196f9:	2d e8 00 00 00       	sub    eax,0xe8
c00196fe:	e9 29 01 00 00       	jmp    c001982c <Vm::x87Handler(regs*)+0x6be>
c0019703:	90                   	nop
c0019704:	8d 50 38             	lea    edx,[eax+0x38]
c0019707:	80 fa 07             	cmp    dl,0x7
c001970a:	77 3c                	ja     c0019748 <Vm::x87Handler(regs*)+0x5da>
c001970c:	83 ec 0c             	sub    esp,0xc
c001970f:	2d c8 00 00 00       	sub    eax,0xc8
c0019714:	50                   	push   eax
c0019715:	e8 14 f9 ff ff       	call   c001902e <Vm::fpuGetReg(int)>
c001971a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019721:	89 c6                	mov    esi,eax
c0019723:	89 d7                	mov    edi,edx
c0019725:	e8 04 f9 ff ff       	call   c001902e <Vm::fpuGetReg(int)>
c001972a:	57                   	push   edi
c001972b:	56                   	push   esi
c001972c:	52                   	push   edx
c001972d:	50                   	push   eax
c001972e:	e8 aa f8 ff ff       	call   c0018fdd <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0019733:	83 c4 1c             	add    esp,0x1c
c0019736:	52                   	push   edx
c0019737:	50                   	push   eax
c0019738:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001973c:	2d c8 00 00 00       	sub    eax,0xc8
c0019741:	e9 82 00 00 00       	jmp    c00197c8 <Vm::x87Handler(regs*)+0x65a>
c0019746:	66 90                	xchg   ax,ax
c0019748:	3c f7                	cmp    al,0xf7
c001974a:	76 38                	jbe    c0019784 <Vm::x87Handler(regs*)+0x616>
c001974c:	83 ec 0c             	sub    esp,0xc
c001974f:	6a 00                	push   0x0
c0019751:	e8 d8 f8 ff ff       	call   c001902e <Vm::fpuGetReg(int)>
c0019756:	89 c6                	mov    esi,eax
c0019758:	89 d7                	mov    edi,edx
c001975a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001975e:	2d f8 00 00 00       	sub    eax,0xf8
c0019763:	89 04 24             	mov    DWORD PTR [esp],eax
c0019766:	e8 c3 f8 ff ff       	call   c001902e <Vm::fpuGetReg(int)>
c001976b:	57                   	push   edi
c001976c:	56                   	push   esi
c001976d:	52                   	push   edx
c001976e:	50                   	push   eax
c001976f:	e8 88 f8 ff ff       	call   c0018ffc <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0019774:	83 c4 1c             	add    esp,0x1c
c0019777:	52                   	push   edx
c0019778:	50                   	push   eax
c0019779:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001977d:	2d f8 00 00 00       	sub    eax,0xf8
c0019782:	eb 44                	jmp    c00197c8 <Vm::x87Handler(regs*)+0x65a>
c0019784:	8d 50 10             	lea    edx,[eax+0x10]
c0019787:	80 fa 07             	cmp    dl,0x7
c001978a:	0f 87 6c 01 00 00    	ja     c00198fc <Vm::x87Handler(regs*)+0x78e>
c0019790:	83 ec 0c             	sub    esp,0xc
c0019793:	2d f0 00 00 00       	sub    eax,0xf0
c0019798:	50                   	push   eax
c0019799:	e8 90 f8 ff ff       	call   c001902e <Vm::fpuGetReg(int)>
c001979e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00197a5:	89 c6                	mov    esi,eax
c00197a7:	89 d7                	mov    edi,edx
c00197a9:	e8 80 f8 ff ff       	call   c001902e <Vm::fpuGetReg(int)>
c00197ae:	57                   	push   edi
c00197af:	56                   	push   esi
c00197b0:	52                   	push   edx
c00197b1:	50                   	push   eax
c00197b2:	e8 45 f8 ff ff       	call   c0018ffc <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00197b7:	83 c4 1c             	add    esp,0x1c
c00197ba:	52                   	push   edx
c00197bb:	50                   	push   eax
c00197bc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00197c0:	2d f0 00 00 00       	sub    eax,0xf0
c00197c5:	8d 76 00             	lea    esi,[esi+0x0]
c00197c8:	50                   	push   eax
c00197c9:	8d 76 00             	lea    esi,[esi+0x0]
c00197cc:	e8 a0 f8 ff ff       	call   c0019071 <Vm::fpuSetReg(int, unsigned long long)>
c00197d1:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00197d5:	e8 41 f9 ff ff       	call   c001911b <Vm::fpuPop()>
c00197da:	e9 0d fa ff ff       	jmp    c00191ec <Vm::x87Handler(regs*)+0x7e>
c00197df:	90                   	nop
c00197e0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00197e4:	8d 50 30             	lea    edx,[eax+0x30]
c00197e7:	80 fa 07             	cmp    dl,0x7
c00197ea:	77 20                	ja     c001980c <Vm::x87Handler(regs*)+0x69e>
c00197ec:	83 ec 0c             	sub    esp,0xc
c00197ef:	6a 00                	push   0x0
c00197f1:	e8 38 f8 ff ff       	call   c001902e <Vm::fpuGetReg(int)>
c00197f6:	83 c4 0c             	add    esp,0xc
c00197f9:	52                   	push   edx
c00197fa:	50                   	push   eax
c00197fb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00197ff:	2d d0 00 00 00       	sub    eax,0xd0
c0019804:	e9 df fd ff ff       	jmp    c00195e8 <Vm::x87Handler(regs*)+0x47a>
c0019809:	8d 76 00             	lea    esi,[esi+0x0]
c001980c:	8d 50 28             	lea    edx,[eax+0x28]
c001980f:	80 fa 07             	cmp    dl,0x7
c0019812:	77 28                	ja     c001983c <Vm::x87Handler(regs*)+0x6ce>
c0019814:	83 ec 0c             	sub    esp,0xc
c0019817:	6a 00                	push   0x0
c0019819:	e8 10 f8 ff ff       	call   c001902e <Vm::fpuGetReg(int)>
c001981e:	83 c4 0c             	add    esp,0xc
c0019821:	52                   	push   edx
c0019822:	50                   	push   eax
c0019823:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019827:	2d d8 00 00 00       	sub    eax,0xd8
c001982c:	50                   	push   eax
c001982d:	e8 3f f8 ff ff       	call   c0019071 <Vm::fpuSetReg(int, unsigned long long)>
c0019832:	e8 e4 f8 ff ff       	call   c001911b <Vm::fpuPop()>
c0019837:	e9 ac f9 ff ff       	jmp    c00191e8 <Vm::x87Handler(regs*)+0x7a>
c001983c:	8d 50 20             	lea    edx,[eax+0x20]
c001983f:	80 fa 07             	cmp    dl,0x7
c0019842:	77 30                	ja     c0019874 <Vm::x87Handler(regs*)+0x706>
c0019844:	83 ec 0c             	sub    esp,0xc
c0019847:	2d e0 00 00 00       	sub    eax,0xe0
c001984c:	50                   	push   eax
c001984d:	e8 dc f7 ff ff       	call   c001902e <Vm::fpuGetReg(int)>
c0019852:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019859:	89 c6                	mov    esi,eax
c001985b:	89 d7                	mov    edi,edx
c001985d:	e8 cc f7 ff ff       	call   c001902e <Vm::fpuGetReg(int)>
c0019862:	57                   	push   edi
c0019863:	56                   	push   esi
c0019864:	52                   	push   edx
c0019865:	50                   	push   eax
c0019866:	e8 e3 f6 ff ff       	call   c0018f4e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001986b:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001986f:	e9 78 02 00 00       	jmp    c0019aec <Vm::x87Handler(regs*)+0x97e>
c0019874:	8d 50 18             	lea    edx,[eax+0x18]
c0019877:	80 fa 07             	cmp    dl,0x7
c001987a:	0f 87 10 fb ff ff    	ja     c0019390 <Vm::x87Handler(regs*)+0x222>
c0019880:	83 ec 0c             	sub    esp,0xc
c0019883:	2d e8 00 00 00       	sub    eax,0xe8
c0019888:	50                   	push   eax
c0019889:	e8 a0 f7 ff ff       	call   c001902e <Vm::fpuGetReg(int)>
c001988e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019895:	89 c6                	mov    esi,eax
c0019897:	89 d7                	mov    edi,edx
c0019899:	e8 90 f7 ff ff       	call   c001902e <Vm::fpuGetReg(int)>
c001989e:	57                   	push   edi
c001989f:	56                   	push   esi
c00198a0:	52                   	push   edx
c00198a1:	50                   	push   eax
c00198a2:	e8 a7 f6 ff ff       	call   c0018f4e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00198a7:	83 c4 20             	add    esp,0x20
c00198aa:	e8 6c f8 ff ff       	call   c001911b <Vm::fpuPop()>
c00198af:	eb 6f                	jmp    c0019920 <Vm::x87Handler(regs*)+0x7b2>
c00198b1:	8d 76 00             	lea    esi,[esi+0x0]
c00198b4:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c00198b8:	0f 85 22 01 00 00    	jne    c00199e0 <Vm::x87Handler(regs*)+0x872>
c00198be:	66 90                	xchg   ax,ax
c00198c0:	83 ec 0c             	sub    esp,0xc
c00198c3:	6a 01                	push   0x1
c00198c5:	e8 64 f7 ff ff       	call   c001902e <Vm::fpuGetReg(int)>
c00198ca:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00198d1:	89 c6                	mov    esi,eax
c00198d3:	89 d7                	mov    edi,edx
c00198d5:	e8 54 f7 ff ff       	call   c001902e <Vm::fpuGetReg(int)>
c00198da:	57                   	push   edi
c00198db:	56                   	push   esi
c00198dc:	52                   	push   edx
c00198dd:	50                   	push   eax
c00198de:	e8 6b f6 ff ff       	call   c0018f4e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00198e3:	83 c4 20             	add    esp,0x20
c00198e6:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00198ea:	e8 2c f8 ff ff       	call   c001911b <Vm::fpuPop()>
c00198ef:	e8 27 f8 ff ff       	call   c001911b <Vm::fpuPop()>
c00198f4:	e9 f7 f8 ff ff       	jmp    c00191f0 <Vm::x87Handler(regs*)+0x82>
c00198f9:	8d 76 00             	lea    esi,[esi+0x0]
c00198fc:	3c d9                	cmp    al,0xd9
c00198fe:	0f 85 e8 02 00 00    	jne    c0019bec <Vm::x87Handler(regs*)+0xa7e>
c0019904:	eb ba                	jmp    c00198c0 <Vm::x87Handler(regs*)+0x752>
c0019906:	66 90                	xchg   ax,ax
c0019908:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001990c:	0f 85 2a 03 00 00    	jne    c0019c3c <Vm::x87Handler(regs*)+0xace>
c0019912:	0f b7 05 c0 94 02 c0 	movzx  eax,WORD PTR ds:0xc00294c0
c0019919:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001991d:	8d 76 00             	lea    esi,[esi+0x0]
c0019920:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019924:	e9 c7 f8 ff ff       	jmp    c00191f0 <Vm::x87Handler(regs*)+0x82>
c0019929:	8d 76 00             	lea    esi,[esi+0x0]
c001992c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0019930:	84 d2                	test   dl,dl
c0019932:	75 10                	jne    c0019944 <Vm::x87Handler(regs*)+0x7d6>
c0019934:	83 ec 0c             	sub    esp,0xc
c0019937:	ff 36                	push   DWORD PTR [esi]
c0019939:	e8 29 f4 ff ff       	call   c0018d67 <Vm::fpu32ToInternal(unsigned int)>
c001993e:	e9 39 01 00 00       	jmp    c0019a7c <Vm::x87Handler(regs*)+0x90e>
c0019943:	90                   	nop
c0019944:	80 fa 01             	cmp    dl,0x1
c0019947:	75 0f                	jne    c0019958 <Vm::x87Handler(regs*)+0x7ea>
c0019949:	83 ec 0c             	sub    esp,0xc
c001994c:	ff 36                	push   DWORD PTR [esi]
c001994e:	e8 14 f4 ff ff       	call   c0018d67 <Vm::fpu32ToInternal(unsigned int)>
c0019953:	e9 b4 02 00 00       	jmp    c0019c0c <Vm::x87Handler(regs*)+0xa9e>
c0019958:	80 fa 04             	cmp    dl,0x4
c001995b:	75 0f                	jne    c001996c <Vm::x87Handler(regs*)+0x7fe>
c001995d:	83 ec 0c             	sub    esp,0xc
c0019960:	ff 36                	push   DWORD PTR [esi]
c0019962:	e8 00 f4 ff ff       	call   c0018d67 <Vm::fpu32ToInternal(unsigned int)>
c0019967:	e9 9c 01 00 00       	jmp    c0019b08 <Vm::x87Handler(regs*)+0x99a>
c001996c:	80 fa 05             	cmp    dl,0x5
c001996f:	75 1b                	jne    c001998c <Vm::x87Handler(regs*)+0x81e>
c0019971:	83 ec 0c             	sub    esp,0xc
c0019974:	6a 00                	push   0x0
c0019976:	e8 b3 f6 ff ff       	call   c001902e <Vm::fpuGetReg(int)>
c001997b:	89 c7                	mov    edi,eax
c001997d:	89 d5                	mov    ebp,edx
c001997f:	58                   	pop    eax
c0019980:	ff 36                	push   DWORD PTR [esi]
c0019982:	e8 e0 f3 ff ff       	call   c0018d67 <Vm::fpu32ToInternal(unsigned int)>
c0019987:	e9 bc 01 00 00       	jmp    c0019b48 <Vm::x87Handler(regs*)+0x9da>
c001998c:	80 fa 06             	cmp    dl,0x6
c001998f:	75 0f                	jne    c00199a0 <Vm::x87Handler(regs*)+0x832>
c0019991:	83 ec 0c             	sub    esp,0xc
c0019994:	ff 36                	push   DWORD PTR [esi]
c0019996:	e8 cc f3 ff ff       	call   c0018d67 <Vm::fpu32ToInternal(unsigned int)>
c001999b:	e9 cc 01 00 00       	jmp    c0019b6c <Vm::x87Handler(regs*)+0x9fe>
c00199a0:	31 c0                	xor    eax,eax
c00199a2:	80 fa 07             	cmp    dl,0x7
c00199a5:	0f 85 d5 02 00 00    	jne    c0019c80 <Vm::x87Handler(regs*)+0xb12>
c00199ab:	83 ec 0c             	sub    esp,0xc
c00199ae:	6a 00                	push   0x0
c00199b0:	e8 79 f6 ff ff       	call   c001902e <Vm::fpuGetReg(int)>
c00199b5:	89 c7                	mov    edi,eax
c00199b7:	89 d5                	mov    ebp,edx
c00199b9:	58                   	pop    eax
c00199ba:	ff 36                	push   DWORD PTR [esi]
c00199bc:	e8 a6 f3 ff ff       	call   c0018d67 <Vm::fpu32ToInternal(unsigned int)>
c00199c1:	e9 ee 01 00 00       	jmp    c0019bb4 <Vm::x87Handler(regs*)+0xa46>
c00199c6:	66 90                	xchg   ax,ax
c00199c8:	80 fa 03             	cmp    dl,0x3
c00199cb:	0f 85 f7 01 00 00    	jne    c0019bc8 <Vm::x87Handler(regs*)+0xa5a>
c00199d1:	e8 45 f7 ff ff       	call   c001911b <Vm::fpuPop()>
c00199d6:	51                   	push   ecx
c00199d7:	51                   	push   ecx
c00199d8:	e9 03 02 00 00       	jmp    c0019be0 <Vm::x87Handler(regs*)+0xa72>
c00199dd:	8d 76 00             	lea    esi,[esi+0x0]
c00199e0:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00199e4:	80 fa 01             	cmp    dl,0x1
c00199e7:	75 0b                	jne    c00199f4 <Vm::x87Handler(regs*)+0x886>
c00199e9:	57                   	push   edi
c00199ea:	57                   	push   edi
c00199eb:	8b 06                	mov    eax,DWORD PTR [esi]
c00199ed:	e9 0e 02 00 00       	jmp    c0019c00 <Vm::x87Handler(regs*)+0xa92>
c00199f2:	66 90                	xchg   ax,ax
c00199f4:	80 fa 04             	cmp    dl,0x4
c00199f7:	75 13                	jne    c0019a0c <Vm::x87Handler(regs*)+0x89e>
c00199f9:	31 d2                	xor    edx,edx
c00199fb:	51                   	push   ecx
c00199fc:	51                   	push   ecx
c00199fd:	8b 06                	mov    eax,DWORD PTR [esi]
c00199ff:	52                   	push   edx
c0019a00:	50                   	push   eax
c0019a01:	e8 4a f4 ff ff       	call   c0018e50 <Vm::fpuLongToFloat(long long)>
c0019a06:	e9 fd 00 00 00       	jmp    c0019b08 <Vm::x87Handler(regs*)+0x99a>
c0019a0b:	90                   	nop
c0019a0c:	31 c0                	xor    eax,eax
c0019a0e:	80 fa 07             	cmp    dl,0x7
c0019a11:	0f 85 69 02 00 00    	jne    c0019c80 <Vm::x87Handler(regs*)+0xb12>
c0019a17:	83 ec 0c             	sub    esp,0xc
c0019a1a:	6a 00                	push   0x0
c0019a1c:	e8 0d f6 ff ff       	call   c001902e <Vm::fpuGetReg(int)>
c0019a21:	89 c7                	mov    edi,eax
c0019a23:	89 d5                	mov    ebp,edx
c0019a25:	58                   	pop    eax
c0019a26:	8b 06                	mov    eax,DWORD PTR [esi]
c0019a28:	5a                   	pop    edx
c0019a29:	31 d2                	xor    edx,edx
c0019a2b:	52                   	push   edx
c0019a2c:	50                   	push   eax
c0019a2d:	e8 1e f4 ff ff       	call   c0018e50 <Vm::fpuLongToFloat(long long)>
c0019a32:	e9 7d 01 00 00       	jmp    c0019bb4 <Vm::x87Handler(regs*)+0xa46>
c0019a37:	90                   	nop
c0019a38:	84 d2                	test   dl,dl
c0019a3a:	75 10                	jne    c0019a4c <Vm::x87Handler(regs*)+0x8de>
c0019a3c:	31 d2                	xor    edx,edx
c0019a3e:	55                   	push   ebp
c0019a3f:	55                   	push   ebp
c0019a40:	8b 06                	mov    eax,DWORD PTR [esi]
c0019a42:	52                   	push   edx
c0019a43:	50                   	push   eax
c0019a44:	e9 03 02 00 00       	jmp    c0019c4c <Vm::x87Handler(regs*)+0xade>
c0019a49:	8d 76 00             	lea    esi,[esi+0x0]
c0019a4c:	31 c0                	xor    eax,eax
c0019a4e:	80 fa 02             	cmp    dl,0x2
c0019a51:	0f 85 29 02 00 00    	jne    c0019c80 <Vm::x87Handler(regs*)+0xb12>
c0019a57:	83 ec 0c             	sub    esp,0xc
c0019a5a:	6a 00                	push   0x0
c0019a5c:	e8 cd f5 ff ff       	call   c001902e <Vm::fpuGetReg(int)>
c0019a61:	59                   	pop    ecx
c0019a62:	5f                   	pop    edi
c0019a63:	e9 18 f9 ff ff       	jmp    c0019380 <Vm::x87Handler(regs*)+0x212>
c0019a68:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0019a6c:	84 d2                	test   dl,dl
c0019a6e:	75 2c                	jne    c0019a9c <Vm::x87Handler(regs*)+0x92e>
c0019a70:	50                   	push   eax
c0019a71:	50                   	push   eax
c0019a72:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0019a75:	ff 36                	push   DWORD PTR [esi]
c0019a77:	e8 30 f3 ff ff       	call   c0018dac <Vm::fpu64ToInternal(unsigned long long)>
c0019a7c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019a83:	89 c6                	mov    esi,eax
c0019a85:	89 d7                	mov    edi,edx
c0019a87:	e8 a2 f5 ff ff       	call   c001902e <Vm::fpuGetReg(int)>
c0019a8c:	57                   	push   edi
c0019a8d:	56                   	push   esi
c0019a8e:	52                   	push   edx
c0019a8f:	50                   	push   eax
c0019a90:	e8 0f f5 ff ff       	call   c0018fa4 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0019a95:	e9 8e 01 00 00       	jmp    c0019c28 <Vm::x87Handler(regs*)+0xaba>
c0019a9a:	66 90                	xchg   ax,ax
c0019a9c:	80 fa 01             	cmp    dl,0x1
c0019a9f:	75 13                	jne    c0019ab4 <Vm::x87Handler(regs*)+0x946>
c0019aa1:	50                   	push   eax
c0019aa2:	50                   	push   eax
c0019aa3:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0019aa6:	ff 36                	push   DWORD PTR [esi]
c0019aa8:	e8 ff f2 ff ff       	call   c0018dac <Vm::fpu64ToInternal(unsigned long long)>
c0019aad:	e9 5a 01 00 00       	jmp    c0019c0c <Vm::x87Handler(regs*)+0xa9e>
c0019ab2:	66 90                	xchg   ax,ax
c0019ab4:	80 fa 02             	cmp    dl,0x2
c0019ab7:	0f 85 03 f9 ff ff    	jne    c00193c0 <Vm::x87Handler(regs*)+0x252>
c0019abd:	55                   	push   ebp
c0019abe:	55                   	push   ebp
c0019abf:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0019ac2:	ff 36                	push   DWORD PTR [esi]
c0019ac4:	e8 e3 f2 ff ff       	call   c0018dac <Vm::fpu64ToInternal(unsigned long long)>
c0019ac9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019ad0:	89 c6                	mov    esi,eax
c0019ad2:	89 d7                	mov    edi,edx
c0019ad4:	e8 55 f5 ff ff       	call   c001902e <Vm::fpuGetReg(int)>
c0019ad9:	57                   	push   edi
c0019ada:	56                   	push   esi
c0019adb:	52                   	push   edx
c0019adc:	50                   	push   eax
c0019add:	e8 6c f4 ff ff       	call   c0018f4e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0019ae2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0019ae6:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0019ae9:	8d 76 00             	lea    esi,[esi+0x0]
c0019aec:	83 c4 20             	add    esp,0x20
c0019aef:	e9 fc f6 ff ff       	jmp    c00191f0 <Vm::x87Handler(regs*)+0x82>
c0019af4:	80 fa 04             	cmp    dl,0x4
c0019af7:	75 2f                	jne    c0019b28 <Vm::x87Handler(regs*)+0x9ba>
c0019af9:	51                   	push   ecx
c0019afa:	51                   	push   ecx
c0019afb:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0019afe:	ff 36                	push   DWORD PTR [esi]
c0019b00:	e8 a7 f2 ff ff       	call   c0018dac <Vm::fpu64ToInternal(unsigned long long)>
c0019b05:	8d 76 00             	lea    esi,[esi+0x0]
c0019b08:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019b0f:	89 c6                	mov    esi,eax
c0019b11:	89 d7                	mov    edi,edx
c0019b13:	e8 16 f5 ff ff       	call   c001902e <Vm::fpuGetReg(int)>
c0019b18:	57                   	push   edi
c0019b19:	56                   	push   esi
c0019b1a:	52                   	push   edx
c0019b1b:	50                   	push   eax
c0019b1c:	e8 ad f4 ff ff       	call   c0018fce <Vm::fpuSub(unsigned long long, unsigned long long)>
c0019b21:	e9 02 01 00 00       	jmp    c0019c28 <Vm::x87Handler(regs*)+0xaba>
c0019b26:	66 90                	xchg   ax,ax
c0019b28:	80 fa 05             	cmp    dl,0x5
c0019b2b:	75 2b                	jne    c0019b58 <Vm::x87Handler(regs*)+0x9ea>
c0019b2d:	83 ec 0c             	sub    esp,0xc
c0019b30:	6a 00                	push   0x0
c0019b32:	e8 f7 f4 ff ff       	call   c001902e <Vm::fpuGetReg(int)>
c0019b37:	89 c7                	mov    edi,eax
c0019b39:	89 d5                	mov    ebp,edx
c0019b3b:	58                   	pop    eax
c0019b3c:	5a                   	pop    edx
c0019b3d:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0019b40:	ff 36                	push   DWORD PTR [esi]
c0019b42:	e8 65 f2 ff ff       	call   c0018dac <Vm::fpu64ToInternal(unsigned long long)>
c0019b47:	90                   	nop
c0019b48:	83 c4 10             	add    esp,0x10
c0019b4b:	55                   	push   ebp
c0019b4c:	57                   	push   edi
c0019b4d:	52                   	push   edx
c0019b4e:	50                   	push   eax
c0019b4f:	e8 7a f4 ff ff       	call   c0018fce <Vm::fpuSub(unsigned long long, unsigned long long)>
c0019b54:	eb 6a                	jmp    c0019bc0 <Vm::x87Handler(regs*)+0xa52>
c0019b56:	66 90                	xchg   ax,ax
c0019b58:	80 fa 06             	cmp    dl,0x6
c0019b5b:	75 2f                	jne    c0019b8c <Vm::x87Handler(regs*)+0xa1e>
c0019b5d:	51                   	push   ecx
c0019b5e:	51                   	push   ecx
c0019b5f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0019b62:	ff 36                	push   DWORD PTR [esi]
c0019b64:	e8 43 f2 ff ff       	call   c0018dac <Vm::fpu64ToInternal(unsigned long long)>
c0019b69:	8d 76 00             	lea    esi,[esi+0x0]
c0019b6c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019b73:	89 c6                	mov    esi,eax
c0019b75:	89 d7                	mov    edi,edx
c0019b77:	e8 b2 f4 ff ff       	call   c001902e <Vm::fpuGetReg(int)>
c0019b7c:	57                   	push   edi
c0019b7d:	56                   	push   esi
c0019b7e:	52                   	push   edx
c0019b7f:	50                   	push   eax
c0019b80:	e8 77 f4 ff ff       	call   c0018ffc <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0019b85:	e9 9e 00 00 00       	jmp    c0019c28 <Vm::x87Handler(regs*)+0xaba>
c0019b8a:	66 90                	xchg   ax,ax
c0019b8c:	31 c0                	xor    eax,eax
c0019b8e:	80 fa 07             	cmp    dl,0x7
c0019b91:	0f 85 e9 00 00 00    	jne    c0019c80 <Vm::x87Handler(regs*)+0xb12>
c0019b97:	83 ec 0c             	sub    esp,0xc
c0019b9a:	6a 00                	push   0x0
c0019b9c:	e8 8d f4 ff ff       	call   c001902e <Vm::fpuGetReg(int)>
c0019ba1:	89 c7                	mov    edi,eax
c0019ba3:	89 d5                	mov    ebp,edx
c0019ba5:	58                   	pop    eax
c0019ba6:	5a                   	pop    edx
c0019ba7:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0019baa:	ff 36                	push   DWORD PTR [esi]
c0019bac:	e8 fb f1 ff ff       	call   c0018dac <Vm::fpu64ToInternal(unsigned long long)>
c0019bb1:	8d 76 00             	lea    esi,[esi+0x0]
c0019bb4:	83 c4 10             	add    esp,0x10
c0019bb7:	55                   	push   ebp
c0019bb8:	57                   	push   edi
c0019bb9:	52                   	push   edx
c0019bba:	50                   	push   eax
c0019bbb:	e8 3c f4 ff ff       	call   c0018ffc <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0019bc0:	83 c4 0c             	add    esp,0xc
c0019bc3:	eb 67                	jmp    c0019c2c <Vm::x87Handler(regs*)+0xabe>
c0019bc5:	8d 76 00             	lea    esi,[esi+0x0]
c0019bc8:	31 c0                	xor    eax,eax
c0019bca:	80 fa 02             	cmp    dl,0x2
c0019bcd:	0f 85 ad 00 00 00    	jne    c0019c80 <Vm::x87Handler(regs*)+0xb12>
c0019bd3:	83 ec 0c             	sub    esp,0xc
c0019bd6:	6a 00                	push   0x0
c0019bd8:	e8 51 f4 ff ff       	call   c001902e <Vm::fpuGetReg(int)>
c0019bdd:	59                   	pop    ecx
c0019bde:	5f                   	pop    edi
c0019bdf:	90                   	nop
c0019be0:	52                   	push   edx
c0019be1:	50                   	push   eax
c0019be2:	e8 77 f1 ff ff       	call   c0018d5e <Vm::fpuInternalTo64(unsigned long long)>
c0019be7:	e9 84 00 00 00       	jmp    c0019c70 <Vm::x87Handler(regs*)+0xb02>
c0019bec:	31 c0                	xor    eax,eax
c0019bee:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c0019bf3:	0f 85 87 00 00 00    	jne    c0019c80 <Vm::x87Handler(regs*)+0xb12>
c0019bf9:	50                   	push   eax
c0019bfa:	50                   	push   eax
c0019bfb:	0f b7 06             	movzx  eax,WORD PTR [esi]
c0019bfe:	66 90                	xchg   ax,ax
c0019c00:	31 d2                	xor    edx,edx
c0019c02:	52                   	push   edx
c0019c03:	50                   	push   eax
c0019c04:	e8 47 f2 ff ff       	call   c0018e50 <Vm::fpuLongToFloat(long long)>
c0019c09:	8d 76 00             	lea    esi,[esi+0x0]
c0019c0c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019c13:	89 c6                	mov    esi,eax
c0019c15:	89 d7                	mov    edi,edx
c0019c17:	e8 12 f4 ff ff       	call   c001902e <Vm::fpuGetReg(int)>
c0019c1c:	57                   	push   edi
c0019c1d:	56                   	push   esi
c0019c1e:	52                   	push   edx
c0019c1f:	50                   	push   eax
c0019c20:	e8 b8 f3 ff ff       	call   c0018fdd <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0019c25:	8d 76 00             	lea    esi,[esi+0x0]
c0019c28:	83 c4 1c             	add    esp,0x1c
c0019c2b:	90                   	nop
c0019c2c:	52                   	push   edx
c0019c2d:	50                   	push   eax
c0019c2e:	6a 00                	push   0x0
c0019c30:	e8 3c f4 ff ff       	call   c0019071 <Vm::fpuSetReg(int, unsigned long long)>
c0019c35:	e9 7a f7 ff ff       	jmp    c00193b4 <Vm::x87Handler(regs*)+0x246>
c0019c3a:	66 90                	xchg   ax,ax
c0019c3c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0019c40:	80 fa 05             	cmp    dl,0x5
c0019c43:	75 13                	jne    c0019c58 <Vm::x87Handler(regs*)+0xaea>
c0019c45:	55                   	push   ebp
c0019c46:	55                   	push   ebp
c0019c47:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0019c4a:	ff 36                	push   DWORD PTR [esi]
c0019c4c:	e8 c3 f1 ff ff       	call   c0018e14 <Vm::fpuULongToFloat(unsigned long long)>
c0019c51:	e9 52 f7 ff ff       	jmp    c00193a8 <Vm::x87Handler(regs*)+0x23a>
c0019c56:	66 90                	xchg   ax,ax
c0019c58:	31 c0                	xor    eax,eax
c0019c5a:	80 fa 07             	cmp    dl,0x7
c0019c5d:	75 21                	jne    c0019c80 <Vm::x87Handler(regs*)+0xb12>
c0019c5f:	e8 b7 f4 ff ff       	call   c001911b <Vm::fpuPop()>
c0019c64:	51                   	push   ecx
c0019c65:	51                   	push   ecx
c0019c66:	52                   	push   edx
c0019c67:	50                   	push   eax
c0019c68:	e8 48 f1 ff ff       	call   c0018db5 <Vm::fpuFloatToLong(unsigned long long)>
c0019c6d:	8d 76 00             	lea    esi,[esi+0x0]
c0019c70:	83 c4 10             	add    esp,0x10
c0019c73:	89 06                	mov    DWORD PTR [esi],eax
c0019c75:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0019c78:	e9 7b f7 ff ff       	jmp    c00193f8 <Vm::x87Handler(regs*)+0x28a>
c0019c7d:	8d 76 00             	lea    esi,[esi+0x0]
c0019c80:	83 c4 1c             	add    esp,0x1c
c0019c83:	5b                   	pop    ebx
c0019c84:	5e                   	pop    esi
c0019c85:	5f                   	pop    edi
c0019c86:	5d                   	pop    ebp
c0019c87:	c3                   	ret    

c0019c88 <__static_initialization_and_destruction_0(int, int)>:
c0019c88:	83 ec 0c             	sub    esp,0xc
c0019c8b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0019c90:	75 1a                	jne    c0019cac <__static_initialization_and_destruction_0(int, int)+0x24>
c0019c92:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0019c9a:	75 10                	jne    c0019cac <__static_initialization_and_destruction_0(int, int)+0x24>
c0019c9c:	83 ec 0c             	sub    esp,0xc
c0019c9f:	68 c0 94 02 c0       	push   0xc00294c0
c0019ca4:	e8 1b 94 00 00       	call   c00230c4 <Vm::_FPUState::_FPUState()>
c0019ca9:	83 c4 10             	add    esp,0x10
c0019cac:	90                   	nop
c0019cad:	83 c4 0c             	add    esp,0xc
c0019cb0:	c3                   	ret    
c0019cb1:	8d 76 00             	lea    esi,[esi+0x0]

c0019cb4 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c0019cb4:	83 ec 0c             	sub    esp,0xc
c0019cb7:	83 ec 08             	sub    esp,0x8
c0019cba:	68 ff ff 00 00       	push   0xffff
c0019cbf:	6a 01                	push   0x1
c0019cc1:	e8 c2 ff ff ff       	call   c0019c88 <__static_initialization_and_destruction_0(int, int)>
c0019cc6:	83 c4 10             	add    esp,0x10
c0019cc9:	83 c4 0c             	add    esp,0xc
c0019ccc:	c3                   	ret    

c0019ccd <Hal::noCopro(unsigned long)>:
c0019ccd:	c3                   	ret    

c0019cce <Hal::noTSC()>:
c0019cce:	31 c0                	xor    eax,eax
c0019cd0:	31 d2                	xor    edx,edx
c0019cd2:	c3                   	ret    

c0019cd3 <Hal::readTSC()>:
c0019cd3:	0f 31                	rdtsc  
c0019cd5:	c3                   	ret    

c0019cd6 <nmiHandler(regs*, void*)>:
c0019cd6:	83 ec 0c             	sub    esp,0xc
c0019cd9:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c0019cde:	83 ec 0c             	sub    esp,0xc
c0019ce1:	50                   	push   eax
c0019ce2:	e8 77 f7 fe ff       	call   c000945e <Computer::handleNMI()>
c0019ce7:	83 c4 10             	add    esp,0x10
c0019cea:	90                   	nop
c0019ceb:	83 c4 0c             	add    esp,0xc
c0019cee:	c3                   	ret    

c0019cef <doubleFault(regs*, void*)>:
c0019cef:	55                   	push   ebp
c0019cf0:	89 e5                	mov    ebp,esp
c0019cf2:	83 ec 08             	sub    esp,0x8
c0019cf5:	83 ec 0c             	sub    esp,0xc
c0019cf8:	68 c8 60 02 c0       	push   0xc00260c8
c0019cfd:	e8 d9 a2 ff ff       	call   c0013fdb <Krnl::panic(char const*)>
c0019d02:	83 c4 10             	add    esp,0x10
c0019d05:	90                   	nop
c0019d06:	c9                   	leave  
c0019d07:	c3                   	ret    

c0019d08 <displayDebugInfo(regs*)>:
c0019d08:	53                   	push   ebx
c0019d09:	83 ec 38             	sub    esp,0x38
c0019d0c:	0f 20 c0             	mov    eax,cr0
c0019d0f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0019d13:	0f 20 d0             	mov    eax,cr2
c0019d16:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019d1a:	0f 20 d8             	mov    eax,cr3
c0019d1d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0019d21:	0f 20 e0             	mov    eax,cr4
c0019d24:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0019d28:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019d2c:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0019d2f:	83 ec 08             	sub    esp,0x8
c0019d32:	50                   	push   eax
c0019d33:	68 d5 60 02 c0       	push   0xc00260d5
c0019d38:	e8 88 32 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0019d3d:	83 c4 10             	add    esp,0x10
c0019d40:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019d44:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0019d47:	83 ec 08             	sub    esp,0x8
c0019d4a:	50                   	push   eax
c0019d4b:	68 e0 60 02 c0       	push   0xc00260e0
c0019d50:	e8 70 32 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0019d55:	83 c4 10             	add    esp,0x10
c0019d58:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019d5c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0019d5f:	83 ec 08             	sub    esp,0x8
c0019d62:	50                   	push   eax
c0019d63:	68 eb 60 02 c0       	push   0xc00260eb
c0019d68:	e8 58 32 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0019d6d:	83 c4 10             	add    esp,0x10
c0019d70:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019d74:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0019d77:	83 ec 08             	sub    esp,0x8
c0019d7a:	50                   	push   eax
c0019d7b:	68 f6 60 02 c0       	push   0xc00260f6
c0019d80:	e8 40 32 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0019d85:	83 c4 10             	add    esp,0x10
c0019d88:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019d8c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019d8f:	83 ec 08             	sub    esp,0x8
c0019d92:	50                   	push   eax
c0019d93:	68 01 61 02 c0       	push   0xc0026101
c0019d98:	e8 28 32 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0019d9d:	83 c4 10             	add    esp,0x10
c0019da0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019da4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0019da7:	83 ec 08             	sub    esp,0x8
c0019daa:	50                   	push   eax
c0019dab:	68 0c 61 02 c0       	push   0xc002610c
c0019db0:	e8 10 32 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0019db5:	83 c4 10             	add    esp,0x10
c0019db8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019dbc:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0019dbf:	83 ec 08             	sub    esp,0x8
c0019dc2:	50                   	push   eax
c0019dc3:	68 26 61 02 c0       	push   0xc0026126
c0019dc8:	e8 f8 31 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0019dcd:	83 c4 10             	add    esp,0x10
c0019dd0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019dd4:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0019dd7:	83 ec 08             	sub    esp,0x8
c0019dda:	50                   	push   eax
c0019ddb:	68 17 61 02 c0       	push   0xc0026117
c0019de0:	e8 e0 31 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0019de5:	83 c4 10             	add    esp,0x10
c0019de8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019dec:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0019def:	83 ec 08             	sub    esp,0x8
c0019df2:	50                   	push   eax
c0019df3:	68 22 61 02 c0       	push   0xc0026122
c0019df8:	e8 c8 31 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0019dfd:	83 c4 10             	add    esp,0x10
c0019e00:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019e04:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019e07:	83 ec 08             	sub    esp,0x8
c0019e0a:	50                   	push   eax
c0019e0b:	68 31 61 02 c0       	push   0xc0026131
c0019e10:	e8 b0 31 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0019e15:	83 c4 10             	add    esp,0x10
c0019e18:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019e1c:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0019e1f:	83 ec 08             	sub    esp,0x8
c0019e22:	50                   	push   eax
c0019e23:	68 3c 61 02 c0       	push   0xc002613c
c0019e28:	e8 98 31 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0019e2d:	83 c4 10             	add    esp,0x10
c0019e30:	83 ec 08             	sub    esp,0x8
c0019e33:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019e37:	68 47 61 02 c0       	push   0xc0026147
c0019e3c:	e8 84 31 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0019e41:	83 c4 10             	add    esp,0x10
c0019e44:	83 ec 08             	sub    esp,0x8
c0019e47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019e4b:	68 52 61 02 c0       	push   0xc0026152
c0019e50:	e8 70 31 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0019e55:	83 c4 10             	add    esp,0x10
c0019e58:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c0019e5d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019e63:	83 ec 0c             	sub    esp,0xc
c0019e66:	50                   	push   eax
c0019e67:	e8 39 0f ff ff       	call   c000ada5 <setActiveTerminal(VgaText*)>
c0019e6c:	83 c4 10             	add    esp,0x10
c0019e6f:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c0019e74:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019e7a:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0019e7e:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0019e81:	c1 e2 05             	shl    edx,0x5
c0019e84:	81 c2 a0 76 02 c0    	add    edx,0xc00276a0
c0019e8a:	83 ec 08             	sub    esp,0x8
c0019e8d:	52                   	push   edx
c0019e8e:	50                   	push   eax
c0019e8f:	e8 14 14 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0019e94:	83 c4 10             	add    esp,0x10
c0019e97:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c0019e9c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019ea2:	83 ec 08             	sub    esp,0x8
c0019ea5:	68 5d 61 02 c0       	push   0xc002615d
c0019eaa:	50                   	push   eax
c0019eab:	e8 f8 13 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0019eb0:	83 c4 10             	add    esp,0x10
c0019eb3:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c0019eb8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019ebe:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0019ec3:	8b 12                	mov    edx,DWORD PTR [edx]
c0019ec5:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0019ec8:	83 c2 0c             	add    edx,0xc
c0019ecb:	83 ec 08             	sub    esp,0x8
c0019ece:	52                   	push   edx
c0019ecf:	50                   	push   eax
c0019ed0:	e8 d3 13 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0019ed5:	83 c4 10             	add    esp,0x10
c0019ed8:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c0019edd:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019ee3:	83 ec 08             	sub    esp,0x8
c0019ee6:	68 66 61 02 c0       	push   0xc0026166
c0019eeb:	50                   	push   eax
c0019eec:	e8 b7 13 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0019ef1:	83 c4 10             	add    esp,0x10
c0019ef4:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c0019ef9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019eff:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0019f03:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0019f06:	83 ec 08             	sub    esp,0x8
c0019f09:	52                   	push   edx
c0019f0a:	50                   	push   eax
c0019f0b:	e8 52 13 ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c0019f10:	83 c4 10             	add    esp,0x10
c0019f13:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c0019f18:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019f1e:	83 ec 08             	sub    esp,0x8
c0019f21:	68 6e 61 02 c0       	push   0xc002616e
c0019f26:	50                   	push   eax
c0019f27:	e8 7c 13 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0019f2c:	83 c4 10             	add    esp,0x10
c0019f2f:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c0019f34:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019f3a:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0019f3e:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0019f41:	83 ec 08             	sub    esp,0x8
c0019f44:	52                   	push   edx
c0019f45:	50                   	push   eax
c0019f46:	e8 17 13 ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c0019f4b:	83 c4 10             	add    esp,0x10
c0019f4e:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c0019f53:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019f59:	83 ec 08             	sub    esp,0x8
c0019f5c:	68 76 61 02 c0       	push   0xc0026176
c0019f61:	50                   	push   eax
c0019f62:	e8 41 13 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0019f67:	83 c4 10             	add    esp,0x10
c0019f6a:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c0019f6f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019f75:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0019f79:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0019f7c:	83 ec 08             	sub    esp,0x8
c0019f7f:	52                   	push   edx
c0019f80:	50                   	push   eax
c0019f81:	e8 dc 12 ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c0019f86:	83 c4 10             	add    esp,0x10
c0019f89:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c0019f8e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019f94:	83 ec 08             	sub    esp,0x8
c0019f97:	68 7e 61 02 c0       	push   0xc002617e
c0019f9c:	50                   	push   eax
c0019f9d:	e8 06 13 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0019fa2:	83 c4 10             	add    esp,0x10
c0019fa5:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c0019faa:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019fb0:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0019fb4:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0019fb7:	83 ec 08             	sub    esp,0x8
c0019fba:	52                   	push   edx
c0019fbb:	50                   	push   eax
c0019fbc:	e8 a1 12 ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c0019fc1:	83 c4 10             	add    esp,0x10
c0019fc4:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c0019fc9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019fcf:	83 ec 08             	sub    esp,0x8
c0019fd2:	68 86 61 02 c0       	push   0xc0026186
c0019fd7:	50                   	push   eax
c0019fd8:	e8 cb 12 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0019fdd:	83 c4 10             	add    esp,0x10
c0019fe0:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c0019fe5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019feb:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0019fef:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0019ff2:	83 ec 08             	sub    esp,0x8
c0019ff5:	52                   	push   edx
c0019ff6:	50                   	push   eax
c0019ff7:	e8 66 12 ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c0019ffc:	83 c4 10             	add    esp,0x10
c0019fff:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c001a004:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001a00a:	83 ec 08             	sub    esp,0x8
c001a00d:	68 8e 61 02 c0       	push   0xc002618e
c001a012:	50                   	push   eax
c001a013:	e8 90 12 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c001a018:	83 c4 10             	add    esp,0x10
c001a01b:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c001a020:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001a026:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001a02a:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001a02d:	83 ec 08             	sub    esp,0x8
c001a030:	52                   	push   edx
c001a031:	50                   	push   eax
c001a032:	e8 2b 12 ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c001a037:	83 c4 10             	add    esp,0x10
c001a03a:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c001a03f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001a045:	83 ec 08             	sub    esp,0x8
c001a048:	68 96 61 02 c0       	push   0xc0026196
c001a04d:	50                   	push   eax
c001a04e:	e8 55 12 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c001a053:	83 c4 10             	add    esp,0x10
c001a056:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c001a05b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001a061:	83 ec 08             	sub    esp,0x8
c001a064:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a068:	50                   	push   eax
c001a069:	e8 f4 11 ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c001a06e:	83 c4 10             	add    esp,0x10
c001a071:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c001a076:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001a07c:	83 ec 08             	sub    esp,0x8
c001a07f:	68 9f 61 02 c0       	push   0xc002619f
c001a084:	50                   	push   eax
c001a085:	e8 1e 12 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c001a08a:	83 c4 10             	add    esp,0x10
c001a08d:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c001a092:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001a098:	83 ec 08             	sub    esp,0x8
c001a09b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a09f:	50                   	push   eax
c001a0a0:	e8 bd 11 ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c001a0a5:	83 c4 10             	add    esp,0x10
c001a0a8:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c001a0ad:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001a0b3:	83 ec 08             	sub    esp,0x8
c001a0b6:	68 a7 61 02 c0       	push   0xc00261a7
c001a0bb:	50                   	push   eax
c001a0bc:	e8 e7 11 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c001a0c1:	83 c4 10             	add    esp,0x10
c001a0c4:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c001a0c9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001a0cf:	83 ec 08             	sub    esp,0x8
c001a0d2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a0d6:	50                   	push   eax
c001a0d7:	e8 86 11 ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c001a0dc:	83 c4 10             	add    esp,0x10
c001a0df:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c001a0e4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001a0ea:	83 ec 08             	sub    esp,0x8
c001a0ed:	68 af 61 02 c0       	push   0xc00261af
c001a0f2:	50                   	push   eax
c001a0f3:	e8 b0 11 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c001a0f8:	83 c4 10             	add    esp,0x10
c001a0fb:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c001a100:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001a106:	83 ec 08             	sub    esp,0x8
c001a109:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a10d:	50                   	push   eax
c001a10e:	e8 4f 11 ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c001a113:	83 c4 10             	add    esp,0x10
c001a116:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c001a11b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001a121:	83 ec 08             	sub    esp,0x8
c001a124:	68 b7 61 02 c0       	push   0xc00261b7
c001a129:	50                   	push   eax
c001a12a:	e8 79 11 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c001a12f:	83 c4 10             	add    esp,0x10
c001a132:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c001a137:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001a13d:	0f 21 c2             	mov    edx,db0
c001a140:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a144:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a148:	83 ec 08             	sub    esp,0x8
c001a14b:	52                   	push   edx
c001a14c:	50                   	push   eax
c001a14d:	e8 10 11 ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c001a152:	83 c4 10             	add    esp,0x10
c001a155:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c001a15a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001a160:	83 ec 08             	sub    esp,0x8
c001a163:	68 c0 61 02 c0       	push   0xc00261c0
c001a168:	50                   	push   eax
c001a169:	e8 3a 11 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c001a16e:	83 c4 10             	add    esp,0x10
c001a171:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c001a176:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001a17c:	0f 21 ca             	mov    edx,db1
c001a17f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001a183:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a187:	83 ec 08             	sub    esp,0x8
c001a18a:	52                   	push   edx
c001a18b:	50                   	push   eax
c001a18c:	e8 d1 10 ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c001a191:	83 c4 10             	add    esp,0x10
c001a194:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c001a199:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001a19f:	83 ec 08             	sub    esp,0x8
c001a1a2:	68 c8 61 02 c0       	push   0xc00261c8
c001a1a7:	50                   	push   eax
c001a1a8:	e8 fb 10 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c001a1ad:	83 c4 10             	add    esp,0x10
c001a1b0:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c001a1b5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001a1bb:	0f 21 d2             	mov    edx,db2
c001a1be:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a1c2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a1c6:	83 ec 08             	sub    esp,0x8
c001a1c9:	52                   	push   edx
c001a1ca:	50                   	push   eax
c001a1cb:	e8 92 10 ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c001a1d0:	83 c4 10             	add    esp,0x10
c001a1d3:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c001a1d8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001a1de:	83 ec 08             	sub    esp,0x8
c001a1e1:	68 d0 61 02 c0       	push   0xc00261d0
c001a1e6:	50                   	push   eax
c001a1e7:	e8 bc 10 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c001a1ec:	83 c4 10             	add    esp,0x10
c001a1ef:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c001a1f4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001a1fa:	0f 21 da             	mov    edx,db3
c001a1fd:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001a201:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a205:	83 ec 08             	sub    esp,0x8
c001a208:	52                   	push   edx
c001a209:	50                   	push   eax
c001a20a:	e8 53 10 ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c001a20f:	83 c4 10             	add    esp,0x10
c001a212:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c001a217:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001a21d:	83 ec 08             	sub    esp,0x8
c001a220:	68 d8 61 02 c0       	push   0xc00261d8
c001a225:	50                   	push   eax
c001a226:	e8 7d 10 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c001a22b:	83 c4 10             	add    esp,0x10
c001a22e:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c001a233:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001a239:	0f 21 f2             	mov    edx,db6
c001a23c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001a240:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a244:	83 ec 08             	sub    esp,0x8
c001a247:	52                   	push   edx
c001a248:	50                   	push   eax
c001a249:	e8 14 10 ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c001a24e:	83 c4 10             	add    esp,0x10
c001a251:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c001a256:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001a25c:	83 ec 08             	sub    esp,0x8
c001a25f:	68 e0 61 02 c0       	push   0xc00261e0
c001a264:	50                   	push   eax
c001a265:	e8 3e 10 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c001a26a:	83 c4 10             	add    esp,0x10
c001a26d:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c001a272:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001a278:	0f 21 fa             	mov    edx,db7
c001a27b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001a27f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a283:	83 ec 08             	sub    esp,0x8
c001a286:	52                   	push   edx
c001a287:	50                   	push   eax
c001a288:	e8 d5 0f ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c001a28d:	83 c4 10             	add    esp,0x10
c001a290:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001a294:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001a297:	83 ec 0c             	sub    esp,0xc
c001a29a:	50                   	push   eax
c001a29b:	e8 6f c9 ff ff       	call   c0016c0f <Thr::getDriverNameFromAddress(unsigned long)>
c001a2a0:	83 c4 10             	add    esp,0x10
c001a2a3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a2a7:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a2ac:	0f 84 a6 00 00 00    	je     c001a358 <displayDebugInfo(regs*)+0x650>
c001a2b2:	83 ec 08             	sub    esp,0x8
c001a2b5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a2b9:	68 e8 61 02 c0       	push   0xc00261e8
c001a2be:	e8 02 2d ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001a2c3:	83 c4 10             	add    esp,0x10
c001a2c6:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c001a2cb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001a2d1:	83 ec 08             	sub    esp,0x8
c001a2d4:	68 f6 61 02 c0       	push   0xc00261f6
c001a2d9:	50                   	push   eax
c001a2da:	e8 c9 0f ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c001a2df:	83 c4 10             	add    esp,0x10
c001a2e2:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c001a2e7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001a2ed:	83 ec 08             	sub    esp,0x8
c001a2f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a2f4:	50                   	push   eax
c001a2f5:	e8 ae 0f ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c001a2fa:	83 c4 10             	add    esp,0x10
c001a2fd:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c001a302:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001a308:	83 ec 08             	sub    esp,0x8
c001a30b:	68 02 62 02 c0       	push   0xc0026202
c001a310:	50                   	push   eax
c001a311:	e8 92 0f ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c001a316:	83 c4 10             	add    esp,0x10
c001a319:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c001a31e:	8b 98 06 05 00 00    	mov    ebx,DWORD PTR [eax+0x506]
c001a324:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001a328:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001a32b:	83 ec 0c             	sub    esp,0xc
c001a32e:	50                   	push   eax
c001a32f:	e8 12 c9 ff ff       	call   c0016c46 <Thr::getDriverOffsetFromAddress(unsigned long)>
c001a334:	83 c4 10             	add    esp,0x10
c001a337:	83 ec 08             	sub    esp,0x8
c001a33a:	50                   	push   eax
c001a33b:	53                   	push   ebx
c001a33c:	e8 21 0f ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c001a341:	83 c4 10             	add    esp,0x10
c001a344:	83 ec 08             	sub    esp,0x8
c001a347:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a34b:	68 0e 62 02 c0       	push   0xc002620e
c001a350:	e8 70 2c ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001a355:	83 c4 10             	add    esp,0x10
c001a358:	fa                   	cli    
c001a359:	f4                   	hlt    
c001a35a:	eb fe                	jmp    c001a35a <displayDebugInfo(regs*)+0x652>

c001a35c <displayProgramFault(char const*)>:
c001a35c:	83 ec 0c             	sub    esp,0xc
c001a35f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001a364:	8b 00                	mov    eax,DWORD PTR [eax]
c001a366:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001a369:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001a36f:	85 c0                	test   eax,eax
c001a371:	74 21                	je     c001a394 <displayProgramFault(char const*)+0x38>
c001a373:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001a378:	8b 00                	mov    eax,DWORD PTR [eax]
c001a37a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001a37d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001a383:	6a 04                	push   0x4
c001a385:	6a 0f                	push   0xf
c001a387:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a38b:	50                   	push   eax
c001a38c:	e8 13 0c ff ff       	call   c000afa4 <VgaText::puts(char const*, VgaColour, VgaColour)>
c001a391:	83 c4 10             	add    esp,0x10
c001a394:	90                   	nop
c001a395:	83 c4 0c             	add    esp,0xc
c001a398:	c3                   	ret    

c001a399 <gpFault(regs*, void*)>:
c001a399:	83 ec 1c             	sub    esp,0x1c
c001a39c:	c7 05 1c 95 02 c0 2b 86 01 c0 	mov    DWORD PTR ds:0xc002951c,0xc001862b
c001a3a6:	a1 1c 95 02 c0       	mov    eax,ds:0xc002951c
c001a3ab:	85 c0                	test   eax,eax
c001a3ad:	74 1c                	je     c001a3cb <gpFault(regs*, void*)+0x32>
c001a3af:	a1 1c 95 02 c0       	mov    eax,ds:0xc002951c
c001a3b4:	83 ec 0c             	sub    esp,0xc
c001a3b7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a3bb:	ff d0                	call   eax
c001a3bd:	83 c4 10             	add    esp,0x10
c001a3c0:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a3c4:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001a3c9:	75 3e                	jne    c001a409 <gpFault(regs*, void*)+0x70>
c001a3cb:	83 ec 0c             	sub    esp,0xc
c001a3ce:	68 1e 62 02 c0       	push   0xc002621e
c001a3d3:	e8 ed 2b ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001a3d8:	83 c4 10             	add    esp,0x10
c001a3db:	83 ec 0c             	sub    esp,0xc
c001a3de:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a3e2:	e8 21 f9 ff ff       	call   c0019d08 <displayDebugInfo(regs*)>
c001a3e7:	83 c4 10             	add    esp,0x10
c001a3ea:	83 ec 0c             	sub    esp,0xc
c001a3ed:	68 39 62 02 c0       	push   0xc0026239
c001a3f2:	e8 65 ff ff ff       	call   c001a35c <displayProgramFault(char const*)>
c001a3f7:	83 c4 10             	add    esp,0x10
c001a3fa:	83 ec 0c             	sub    esp,0xc
c001a3fd:	6a 00                	push   0x0
c001a3ff:	e8 20 dc ff ff       	call   c0018024 <Thr::terminateFromIRQ(int)>
c001a404:	83 c4 10             	add    esp,0x10
c001a407:	eb 01                	jmp    c001a40a <gpFault(regs*, void*)+0x71>
c001a409:	90                   	nop
c001a40a:	83 c4 1c             	add    esp,0x1c
c001a40d:	c3                   	ret    

c001a40e <pgFault(regs*, void*)>:
c001a40e:	83 ec 1c             	sub    esp,0x1c
c001a411:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a415:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001a418:	83 ec 08             	sub    esp,0x8
c001a41b:	50                   	push   eax
c001a41c:	68 52 62 02 c0       	push   0xc0026252
c001a421:	e8 9f 2b ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001a426:	83 c4 10             	add    esp,0x10
c001a429:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001a42e:	8b 00                	mov    eax,DWORD PTR [eax]
c001a430:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001a433:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c001a439:	0f 20 d2             	mov    edx,cr2
c001a43c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a440:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a444:	83 ec 08             	sub    esp,0x8
c001a447:	52                   	push   edx
c001a448:	50                   	push   eax
c001a449:	e8 f2 26 ff ff       	call   c000cb40 <VAS::tryLoadBackOffDisk(unsigned long)>
c001a44e:	83 c4 10             	add    esp,0x10
c001a451:	84 c0                	test   al,al
c001a453:	75 3e                	jne    c001a493 <pgFault(regs*, void*)+0x85>
c001a455:	83 ec 0c             	sub    esp,0xc
c001a458:	68 67 62 02 c0       	push   0xc0026267
c001a45d:	e8 63 2b ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001a462:	83 c4 10             	add    esp,0x10
c001a465:	83 ec 0c             	sub    esp,0xc
c001a468:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a46c:	e8 97 f8 ff ff       	call   c0019d08 <displayDebugInfo(regs*)>
c001a471:	83 c4 10             	add    esp,0x10
c001a474:	83 ec 0c             	sub    esp,0xc
c001a477:	68 74 62 02 c0       	push   0xc0026274
c001a47c:	e8 db fe ff ff       	call   c001a35c <displayProgramFault(char const*)>
c001a481:	83 c4 10             	add    esp,0x10
c001a484:	83 ec 0c             	sub    esp,0xc
c001a487:	6a 00                	push   0x0
c001a489:	e8 96 db ff ff       	call   c0018024 <Thr::terminateFromIRQ(int)>
c001a48e:	83 c4 10             	add    esp,0x10
c001a491:	eb 01                	jmp    c001a494 <pgFault(regs*, void*)+0x86>
c001a493:	90                   	nop
c001a494:	83 c4 1c             	add    esp,0x1c
c001a497:	c3                   	ret    

c001a498 <otherISRHandler(regs*, void*)>:
c001a498:	83 ec 0c             	sub    esp,0xc
c001a49b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a49f:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001a4a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a4a6:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001a4a9:	83 ec 04             	sub    esp,0x4
c001a4ac:	52                   	push   edx
c001a4ad:	50                   	push   eax
c001a4ae:	68 7f 62 02 c0       	push   0xc002627f
c001a4b3:	e8 0d 2b ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001a4b8:	83 c4 10             	add    esp,0x10
c001a4bb:	83 ec 0c             	sub    esp,0xc
c001a4be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a4c2:	e8 41 f8 ff ff       	call   c0019d08 <displayDebugInfo(regs*)>
c001a4c7:	83 c4 10             	add    esp,0x10
c001a4ca:	83 ec 0c             	sub    esp,0xc
c001a4cd:	68 30 63 02 c0       	push   0xc0026330
c001a4d2:	e8 85 fe ff ff       	call   c001a35c <displayProgramFault(char const*)>
c001a4d7:	83 c4 10             	add    esp,0x10
c001a4da:	83 ec 0c             	sub    esp,0xc
c001a4dd:	6a 00                	push   0x0
c001a4df:	e8 40 db ff ff       	call   c0018024 <Thr::terminateFromIRQ(int)>
c001a4e4:	83 c4 10             	add    esp,0x10
c001a4e7:	90                   	nop
c001a4e8:	83 c4 0c             	add    esp,0xc
c001a4eb:	c3                   	ret    

c001a4ec <opcodeFault(regs*, void*)>:
c001a4ec:	55                   	push   ebp
c001a4ed:	89 e5                	mov    ebp,esp
c001a4ef:	56                   	push   esi
c001a4f0:	53                   	push   ebx
c001a4f1:	83 ec 30             	sub    esp,0x30
c001a4f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a4f7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001a4fa:	83 ec 08             	sub    esp,0x8
c001a4fd:	50                   	push   eax
c001a4fe:	68 9c 62 02 c0       	push   0xc002629c
c001a503:	e8 bd 2a ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001a508:	83 c4 10             	add    esp,0x10
c001a50b:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c001a510:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001a516:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c001a51c:	84 c0                	test   al,al
c001a51e:	74 24                	je     c001a544 <opcodeFault(regs*, void*)+0x58>
c001a520:	83 ec 0c             	sub    esp,0xc
c001a523:	68 58 63 02 c0       	push   0xc0026358
c001a528:	e8 98 2a ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001a52d:	83 c4 10             	add    esp,0x10
c001a530:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a533:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001a536:	8d 50 19             	lea    edx,[eax+0x19]
c001a539:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a53c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001a53f:	e9 9b 03 00 00       	jmp    c001a8df <opcodeFault(regs*, void*)+0x3f3>
c001a544:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a547:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001a54a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001a54d:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c001a551:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a554:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001a557:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001a55a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001a55d:	8a 00                	mov    al,BYTE PTR [eax]
c001a55f:	3c f0                	cmp    al,0xf0
c001a561:	75 17                	jne    c001a57a <opcodeFault(regs*, void*)+0x8e>
c001a563:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001a566:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a569:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001a56c:	8d 50 01             	lea    edx,[eax+0x1]
c001a56f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a572:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001a575:	e9 d6 00 00 00       	jmp    c001a650 <opcodeFault(regs*, void*)+0x164>
c001a57a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001a57d:	8a 00                	mov    al,BYTE PTR [eax]
c001a57f:	3c f2                	cmp    al,0xf2
c001a581:	74 09                	je     c001a58c <opcodeFault(regs*, void*)+0xa0>
c001a583:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001a586:	8a 00                	mov    al,BYTE PTR [eax]
c001a588:	3c f3                	cmp    al,0xf3
c001a58a:	75 1b                	jne    c001a5a7 <opcodeFault(regs*, void*)+0xbb>
c001a58c:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001a590:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001a593:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a596:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001a599:	8d 50 01             	lea    edx,[eax+0x1]
c001a59c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a59f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001a5a2:	e9 a9 00 00 00       	jmp    c001a650 <opcodeFault(regs*, void*)+0x164>
c001a5a7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001a5aa:	8a 00                	mov    al,BYTE PTR [eax]
c001a5ac:	3c 66                	cmp    al,0x66
c001a5ae:	75 1b                	jne    c001a5cb <opcodeFault(regs*, void*)+0xdf>
c001a5b0:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001a5b4:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001a5b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a5ba:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001a5bd:	8d 50 01             	lea    edx,[eax+0x1]
c001a5c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a5c3:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001a5c6:	e9 85 00 00 00       	jmp    c001a650 <opcodeFault(regs*, void*)+0x164>
c001a5cb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001a5ce:	8a 00                	mov    al,BYTE PTR [eax]
c001a5d0:	3c 67                	cmp    al,0x67
c001a5d2:	75 18                	jne    c001a5ec <opcodeFault(regs*, void*)+0x100>
c001a5d4:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001a5d8:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001a5db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a5de:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001a5e1:	8d 50 01             	lea    edx,[eax+0x1]
c001a5e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a5e7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001a5ea:	eb 64                	jmp    c001a650 <opcodeFault(regs*, void*)+0x164>
c001a5ec:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001a5ef:	8a 00                	mov    al,BYTE PTR [eax]
c001a5f1:	3c 2e                	cmp    al,0x2e
c001a5f3:	74 09                	je     c001a5fe <opcodeFault(regs*, void*)+0x112>
c001a5f5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001a5f8:	8a 00                	mov    al,BYTE PTR [eax]
c001a5fa:	3c 3e                	cmp    al,0x3e
c001a5fc:	75 18                	jne    c001a616 <opcodeFault(regs*, void*)+0x12a>
c001a5fe:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001a602:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001a605:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a608:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001a60b:	8d 50 01             	lea    edx,[eax+0x1]
c001a60e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a611:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001a614:	eb 3a                	jmp    c001a650 <opcodeFault(regs*, void*)+0x164>
c001a616:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001a619:	8a 00                	mov    al,BYTE PTR [eax]
c001a61b:	3c 36                	cmp    al,0x36
c001a61d:	74 1b                	je     c001a63a <opcodeFault(regs*, void*)+0x14e>
c001a61f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001a622:	8a 00                	mov    al,BYTE PTR [eax]
c001a624:	3c 26                	cmp    al,0x26
c001a626:	74 12                	je     c001a63a <opcodeFault(regs*, void*)+0x14e>
c001a628:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001a62b:	8a 00                	mov    al,BYTE PTR [eax]
c001a62d:	3c 64                	cmp    al,0x64
c001a62f:	74 09                	je     c001a63a <opcodeFault(regs*, void*)+0x14e>
c001a631:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001a634:	8a 00                	mov    al,BYTE PTR [eax]
c001a636:	3c 65                	cmp    al,0x65
c001a638:	75 16                	jne    c001a650 <opcodeFault(regs*, void*)+0x164>
c001a63a:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001a63e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001a641:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a644:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001a647:	8d 50 01             	lea    edx,[eax+0x1]
c001a64a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a64d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001a650:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001a653:	8a 00                	mov    al,BYTE PTR [eax]
c001a655:	3c 0f                	cmp    al,0xf
c001a657:	0f 85 8d 01 00 00    	jne    c001a7ea <opcodeFault(regs*, void*)+0x2fe>
c001a65d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001a660:	40                   	inc    eax
c001a661:	8a 00                	mov    al,BYTE PTR [eax]
c001a663:	3c c7                	cmp    al,0xc7
c001a665:	0f 85 7f 01 00 00    	jne    c001a7ea <opcodeFault(regs*, void*)+0x2fe>
c001a66b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001a66e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a671:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001a674:	8d 50 01             	lea    edx,[eax+0x1]
c001a677:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a67a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001a67d:	8d 45 d2             	lea    eax,[ebp-0x2e]
c001a680:	50                   	push   eax
c001a681:	8d 45 d3             	lea    eax,[ebp-0x2d]
c001a684:	50                   	push   eax
c001a685:	8d 45 d4             	lea    eax,[ebp-0x2c]
c001a688:	50                   	push   eax
c001a689:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001a68c:	e8 63 90 ff ff       	call   c00136f4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001a691:	83 c4 10             	add    esp,0x10
c001a694:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001a697:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c001a69a:	83 f0 01             	xor    eax,0x1
c001a69d:	84 c0                	test   al,al
c001a69f:	0f 84 45 01 00 00    	je     c001a7ea <opcodeFault(regs*, void*)+0x2fe>
c001a6a5:	8a 45 d2             	mov    al,BYTE PTR [ebp-0x2e]
c001a6a8:	3c 01                	cmp    al,0x1
c001a6aa:	0f 85 3a 01 00 00    	jne    c001a7ea <opcodeFault(regs*, void*)+0x2fe>
c001a6b0:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c001a6b3:	83 f0 01             	xor    eax,0x1
c001a6b6:	84 c0                	test   al,al
c001a6b8:	0f 84 2c 01 00 00    	je     c001a7ea <opcodeFault(regs*, void*)+0x2fe>
c001a6be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a6c1:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001a6c4:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001a6c7:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c001a6ce:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001a6d1:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001a6d4:	89 c2                	mov    edx,eax
c001a6d6:	b8 00 00 00 00       	mov    eax,0x0
c001a6db:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001a6de:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c001a6e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a6e4:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001a6e7:	ba 00 00 00 00       	mov    edx,0x0
c001a6ec:	09 45 e0             	or     DWORD PTR [ebp-0x20],eax
c001a6ef:	09 55 e4             	or     DWORD PTR [ebp-0x1c],edx
c001a6f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a6f5:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001a6f8:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001a6fb:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c001a702:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001a705:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c001a708:	89 c2                	mov    edx,eax
c001a70a:	b8 00 00 00 00       	mov    eax,0x0
c001a70f:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001a712:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
c001a715:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a718:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001a71b:	ba 00 00 00 00       	mov    edx,0x0
c001a720:	09 45 d8             	or     DWORD PTR [ebp-0x28],eax
c001a723:	09 55 dc             	or     DWORD PTR [ebp-0x24],edx
c001a726:	fa                   	cli    
c001a727:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c001a72c:	40                   	inc    eax
c001a72d:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c001a732:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001a735:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001a738:	8b 00                	mov    eax,DWORD PTR [eax]
c001a73a:	89 c1                	mov    ecx,eax
c001a73c:	33 4d e0             	xor    ecx,DWORD PTR [ebp-0x20]
c001a73f:	89 cb                	mov    ebx,ecx
c001a741:	89 d0                	mov    eax,edx
c001a743:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c001a746:	89 c6                	mov    esi,eax
c001a748:	89 f0                	mov    eax,esi
c001a74a:	09 d8                	or     eax,ebx
c001a74c:	85 c0                	test   eax,eax
c001a74e:	75 21                	jne    c001a771 <opcodeFault(regs*, void*)+0x285>
c001a750:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c001a753:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001a756:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c001a759:	89 01                	mov    DWORD PTR [ecx],eax
c001a75b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a75e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a761:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a764:	83 c8 40             	or     eax,0x40
c001a767:	89 c2                	mov    edx,eax
c001a769:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a76c:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001a76f:	eb 3e                	jmp    c001a7af <opcodeFault(regs*, void*)+0x2c3>
c001a771:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001a774:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001a777:	8b 00                	mov    eax,DWORD PTR [eax]
c001a779:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001a77c:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c001a77f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001a782:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a785:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001a788:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001a78b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001a78e:	89 d0                	mov    eax,edx
c001a790:	31 d2                	xor    edx,edx
c001a792:	89 c3                	mov    ebx,eax
c001a794:	89 d6                	mov    esi,edx
c001a796:	89 da                	mov    edx,ebx
c001a798:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a79b:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c001a79e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a7a1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a7a4:	83 e0 bf             	and    eax,0xffffffbf
c001a7a7:	89 c2                	mov    edx,eax
c001a7a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a7ac:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001a7af:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c001a7b4:	48                   	dec    eax
c001a7b5:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c001a7ba:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c001a7bf:	85 c0                	test   eax,eax
c001a7c1:	75 01                	jne    c001a7c4 <opcodeFault(regs*, void*)+0x2d8>
c001a7c3:	fb                   	sti    
c001a7c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a7c7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001a7ca:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001a7cd:	01 c2                	add    edx,eax
c001a7cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a7d2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001a7d5:	83 ec 0c             	sub    esp,0xc
c001a7d8:	68 aa 62 02 c0       	push   0xc00262aa
c001a7dd:	e8 e3 27 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001a7e2:	83 c4 10             	add    esp,0x10
c001a7e5:	e9 f5 00 00 00       	jmp    c001a8df <opcodeFault(regs*, void*)+0x3f3>
c001a7ea:	83 ec 0c             	sub    esp,0xc
c001a7ed:	68 bd 62 02 c0       	push   0xc00262bd
c001a7f2:	e8 ce 27 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001a7f7:	83 c4 10             	add    esp,0x10
c001a7fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a7fd:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001a800:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a803:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001a806:	c1 e0 04             	shl    eax,0x4
c001a809:	01 d0                	add    eax,edx
c001a80b:	83 c0 03             	add    eax,0x3
c001a80e:	8a 00                	mov    al,BYTE PTR [eax]
c001a810:	0f b6 d8             	movzx  ebx,al
c001a813:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a816:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001a819:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a81c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001a81f:	c1 e0 04             	shl    eax,0x4
c001a822:	01 d0                	add    eax,edx
c001a824:	83 c0 02             	add    eax,0x2
c001a827:	8a 00                	mov    al,BYTE PTR [eax]
c001a829:	0f b6 c8             	movzx  ecx,al
c001a82c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a82f:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001a832:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a835:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001a838:	c1 e0 04             	shl    eax,0x4
c001a83b:	01 d0                	add    eax,edx
c001a83d:	40                   	inc    eax
c001a83e:	8a 00                	mov    al,BYTE PTR [eax]
c001a840:	0f b6 d0             	movzx  edx,al
c001a843:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a846:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c001a849:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a84c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001a84f:	c1 e0 04             	shl    eax,0x4
c001a852:	01 f0                	add    eax,esi
c001a854:	8a 00                	mov    al,BYTE PTR [eax]
c001a856:	0f b6 c0             	movzx  eax,al
c001a859:	83 ec 0c             	sub    esp,0xc
c001a85c:	53                   	push   ebx
c001a85d:	51                   	push   ecx
c001a85e:	52                   	push   edx
c001a85f:	50                   	push   eax
c001a860:	68 7c 63 02 c0       	push   0xc002637c
c001a865:	e8 5b 27 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001a86a:	83 c4 20             	add    esp,0x20
c001a86d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a870:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001a873:	83 c0 03             	add    eax,0x3
c001a876:	8a 00                	mov    al,BYTE PTR [eax]
c001a878:	0f b6 d8             	movzx  ebx,al
c001a87b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a87e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001a881:	83 c0 02             	add    eax,0x2
c001a884:	8a 00                	mov    al,BYTE PTR [eax]
c001a886:	0f b6 c8             	movzx  ecx,al
c001a889:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a88c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001a88f:	40                   	inc    eax
c001a890:	8a 00                	mov    al,BYTE PTR [eax]
c001a892:	0f b6 d0             	movzx  edx,al
c001a895:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a898:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001a89b:	8a 00                	mov    al,BYTE PTR [eax]
c001a89d:	0f b6 c0             	movzx  eax,al
c001a8a0:	83 ec 0c             	sub    esp,0xc
c001a8a3:	53                   	push   ebx
c001a8a4:	51                   	push   ecx
c001a8a5:	52                   	push   edx
c001a8a6:	50                   	push   eax
c001a8a7:	68 a4 63 02 c0       	push   0xc00263a4
c001a8ac:	e8 14 27 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001a8b1:	83 c4 20             	add    esp,0x20
c001a8b4:	83 ec 0c             	sub    esp,0xc
c001a8b7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001a8ba:	e8 49 f4 ff ff       	call   c0019d08 <displayDebugInfo(regs*)>
c001a8bf:	83 c4 10             	add    esp,0x10
c001a8c2:	83 ec 0c             	sub    esp,0xc
c001a8c5:	68 ce 62 02 c0       	push   0xc00262ce
c001a8ca:	e8 8d fa ff ff       	call   c001a35c <displayProgramFault(char const*)>
c001a8cf:	83 c4 10             	add    esp,0x10
c001a8d2:	83 ec 0c             	sub    esp,0xc
c001a8d5:	6a 00                	push   0x0
c001a8d7:	e8 48 d7 ff ff       	call   c0018024 <Thr::terminateFromIRQ(int)>
c001a8dc:	83 c4 10             	add    esp,0x10
c001a8df:	8d 65 f8             	lea    esp,[ebp-0x8]
c001a8e2:	5b                   	pop    ebx
c001a8e3:	5e                   	pop    esi
c001a8e4:	5d                   	pop    ebp
c001a8e5:	c3                   	ret    

c001a8e6 <i386SaveCoprocessor(void*)>:
c001a8e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8ea:	83 c0 3f             	add    eax,0x3f
c001a8ed:	83 e0 c0             	and    eax,0xffffffc0
c001a8f0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a8f4:	ff 25 14 95 02 c0    	jmp    DWORD PTR ds:0xc0029514

c001a8fa <i386LoadCoprocessor(void*)>:
c001a8fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8fe:	83 c0 3f             	add    eax,0x3f
c001a901:	83 e0 c0             	and    eax,0xffffffc0
c001a904:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a908:	ff 25 10 95 02 c0    	jmp    DWORD PTR ds:0xc0029510

c001a90e <x87EmulHandler(regs*, void*)>:
c001a90e:	53                   	push   ebx
c001a90f:	83 ec 14             	sub    esp,0x14
c001a912:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001a916:	68 db 62 02 c0       	push   0xc00262db
c001a91b:	e8 a5 26 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001a920:	83 c4 10             	add    esp,0x10
c001a923:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a928:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c001a92c:	74 10                	je     c001a93e <x87EmulHandler(regs*, void*)+0x30>
c001a92e:	83 ec 0c             	sub    esp,0xc
c001a931:	68 eb 62 02 c0       	push   0xc00262eb
c001a936:	e8 a0 96 ff ff       	call   c0013fdb <Krnl::panic(char const*)>
c001a93b:	83 c4 10             	add    esp,0x10
c001a93e:	0f 20 c0             	mov    eax,cr0
c001a941:	a8 08                	test   al,0x8
c001a943:	74 56                	je     c001a99b <x87EmulHandler(regs*, void*)+0x8d>
c001a945:	0f 06                	clts   
c001a947:	a1 0c 95 02 c0       	mov    eax,ds:0xc002950c
c001a94c:	85 c0                	test   eax,eax
c001a94e:	74 0e                	je     c001a95e <x87EmulHandler(regs*, void*)+0x50>
c001a950:	83 ec 0c             	sub    esp,0xc
c001a953:	ff 70 55             	push   DWORD PTR [eax+0x55]
c001a956:	e8 8b ff ff ff       	call   c001a8e6 <i386SaveCoprocessor(void*)>
c001a95b:	83 c4 10             	add    esp,0x10
c001a95e:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001a964:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c001a968:	75 12                	jne    c001a97c <x87EmulHandler(regs*, void*)+0x6e>
c001a96a:	83 ec 0c             	sub    esp,0xc
c001a96d:	68 40 02 00 00       	push   0x240
c001a972:	e8 40 f3 fe ff       	call   c0009cb7 <malloc>
c001a977:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c001a97a:	eb 10                	jmp    c001a98c <x87EmulHandler(regs*, void*)+0x7e>
c001a97c:	83 ec 0c             	sub    esp,0xc
c001a97f:	a1 0c 95 02 c0       	mov    eax,ds:0xc002950c
c001a984:	ff 70 55             	push   DWORD PTR [eax+0x55]
c001a987:	e8 6e ff ff ff       	call   c001a8fa <i386LoadCoprocessor(void*)>
c001a98c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a991:	83 c4 10             	add    esp,0x10
c001a994:	a3 0c 95 02 c0       	mov    ds:0xc002950c,eax
c001a999:	eb 2e                	jmp    c001a9c9 <x87EmulHandler(regs*, void*)+0xbb>
c001a99b:	83 ec 0c             	sub    esp,0xc
c001a99e:	53                   	push   ebx
c001a99f:	e8 ca e7 ff ff       	call   c001916e <Vm::x87Handler(regs*)>
c001a9a4:	83 c4 10             	add    esp,0x10
c001a9a7:	84 c0                	test   al,al
c001a9a9:	75 1e                	jne    c001a9c9 <x87EmulHandler(regs*, void*)+0xbb>
c001a9ab:	83 ec 0c             	sub    esp,0xc
c001a9ae:	68 ff 62 02 c0       	push   0xc00262ff
c001a9b3:	e8 0d 26 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001a9b8:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001a9c0:	83 c4 18             	add    esp,0x18
c001a9c3:	5b                   	pop    ebx
c001a9c4:	e9 5b d6 ff ff       	jmp    c0018024 <Thr::terminateFromIRQ(int)>
c001a9c9:	83 c4 08             	add    esp,0x8
c001a9cc:	5b                   	pop    ebx
c001a9cd:	c3                   	ret    

c001a9ce <Hal::initialiseCoprocessor()>:
c001a9ce:	83 ec 0c             	sub    esp,0xc
c001a9d1:	c7 05 0c 95 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002950c,0x0
c001a9db:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c001a9e0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001a9e6:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001a9ec:	8b 10                	mov    edx,DWORD PTR [eax]
c001a9ee:	6a 00                	push   0x0
c001a9f0:	68 0e a9 01 c0       	push   0xc001a90e
c001a9f5:	6a 07                	push   0x7
c001a9f7:	50                   	push   eax
c001a9f8:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001a9fb:	e8 00 79 00 00       	call   c0022300 <avxDetect>
c001aa00:	83 c4 10             	add    esp,0x10
c001aa03:	85 c0                	test   eax,eax
c001aa05:	74 29                	je     c001aa30 <Hal::initialiseCoprocessor()+0x62>
c001aa07:	83 ec 0c             	sub    esp,0xc
c001aa0a:	68 15 63 02 c0       	push   0xc0026315
c001aa0f:	e8 b1 25 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001aa14:	c7 05 14 95 02 c0 2a 23 02 c0 	mov    DWORD PTR ds:0xc0029514,0xc002232a
c001aa1e:	c7 05 10 95 02 c0 3b 23 02 c0 	mov    DWORD PTR ds:0xc0029510,0xc002233b
c001aa28:	83 c4 1c             	add    esp,0x1c
c001aa2b:	e9 1c 79 00 00       	jmp    c002234c <avxInit>
c001aa30:	e8 6b 79 00 00       	call   c00223a0 <absolutelyNoChanceInHell>
c001aa35:	85 c0                	test   eax,eax
c001aa37:	74 29                	je     c001aa62 <Hal::initialiseCoprocessor()+0x94>
c001aa39:	83 ec 0c             	sub    esp,0xc
c001aa3c:	68 1b 63 02 c0       	push   0xc002631b
c001aa41:	e8 7f 25 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001aa46:	c7 05 14 95 02 c0 b8 23 02 c0 	mov    DWORD PTR ds:0xc0029514,0xc00223b8
c001aa50:	c7 05 10 95 02 c0 c0 23 02 c0 	mov    DWORD PTR ds:0xc0029510,0xc00223c0
c001aa5a:	83 c4 1c             	add    esp,0x1c
c001aa5d:	e9 66 79 00 00       	jmp    c00223c8 <sseInit>
c001aa62:	e8 7f 79 00 00       	call   c00223e6 <x87Detect>
c001aa67:	85 c0                	test   eax,eax
c001aa69:	74 29                	je     c001aa94 <Hal::initialiseCoprocessor()+0xc6>
c001aa6b:	83 ec 0c             	sub    esp,0xc
c001aa6e:	68 21 63 02 c0       	push   0xc0026321
c001aa73:	e8 4d 25 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001aa78:	c7 05 14 95 02 c0 01 24 02 c0 	mov    DWORD PTR ds:0xc0029514,0xc0022401
c001aa82:	c7 05 10 95 02 c0 08 24 02 c0 	mov    DWORD PTR ds:0xc0029510,0xc0022408
c001aa8c:	83 c4 1c             	add    esp,0x1c
c001aa8f:	e9 7b 79 00 00       	jmp    c002240f <x87Init>
c001aa94:	83 ec 0c             	sub    esp,0xc
c001aa97:	68 27 63 02 c0       	push   0xc0026327
c001aa9c:	e8 24 25 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001aaa1:	c7 05 14 95 02 c0 cd 9c 01 c0 	mov    DWORD PTR ds:0xc0029514,0xc0019ccd
c001aaab:	c7 05 10 95 02 c0 cd 9c 01 c0 	mov    DWORD PTR ds:0xc0029510,0xc0019ccd
c001aab5:	0f 20 c0             	mov    eax,cr0
c001aab8:	83 c8 04             	or     eax,0x4
c001aabb:	0f 22 c0             	mov    cr0,eax
c001aabe:	83 c4 1c             	add    esp,0x1c
c001aac1:	c3                   	ret    

c001aac2 <Hal::panic(char const*)>:
c001aac2:	e9 14 95 ff ff       	jmp    c0013fdb <Krnl::panic(char const*)>

c001aac7 <Hal::makeBeep(int)>:
c001aac7:	53                   	push   ebx
c001aac8:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001aacc:	85 db                	test   ebx,ebx
c001aace:	75 07                	jne    c001aad7 <Hal::makeBeep(int)+0x10>
c001aad0:	e4 61                	in     al,0x61
c001aad2:	83 e0 fc             	and    eax,0xfffffffc
c001aad5:	eb 26                	jmp    c001aafd <Hal::makeBeep(int)+0x36>
c001aad7:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001aadc:	99                   	cdq    
c001aadd:	f7 fb                	idiv   ebx
c001aadf:	89 c1                	mov    ecx,eax
c001aae1:	b0 b6                	mov    al,0xb6
c001aae3:	e6 43                	out    0x43,al
c001aae5:	88 c8                	mov    al,cl
c001aae7:	e6 42                	out    0x42,al
c001aae9:	89 c8                	mov    eax,ecx
c001aaeb:	c1 e8 08             	shr    eax,0x8
c001aaee:	e6 42                	out    0x42,al
c001aaf0:	e4 61                	in     al,0x61
c001aaf2:	88 c2                	mov    dl,al
c001aaf4:	83 ca 03             	or     edx,0x3
c001aaf7:	38 c2                	cmp    dl,al
c001aaf9:	74 04                	je     c001aaff <Hal::makeBeep(int)+0x38>
c001aafb:	88 d0                	mov    al,dl
c001aafd:	e6 61                	out    0x61,al
c001aaff:	5b                   	pop    ebx
c001ab00:	c3                   	ret    

c001ab01 <Hal::getRand()>:
c001ab01:	31 c0                	xor    eax,eax
c001ab03:	c3                   	ret    

c001ab04 <Hal::endOfInterrupt(int)>:
c001ab04:	80 3d 08 95 02 c0 00 	cmp    BYTE PTR ds:0xc0029508,0x0
c001ab0b:	74 23                	je     c001ab30 <Hal::endOfInterrupt(int)+0x2c>
c001ab0d:	83 ec 14             	sub    esp,0x14
c001ab10:	6a 1b                	push   0x1b
c001ab12:	ff 35 08 7f 02 c0    	push   DWORD PTR ds:0xc0027f08
c001ab18:	e8 49 e7 fe ff       	call   c0009266 <Computer::rdmsr(unsigned int)>
c001ab1d:	25 00 f0 ff ff       	and    eax,0xfffff000
c001ab22:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c001ab2c:	83 c4 1c             	add    esp,0x1c
c001ab2f:	c3                   	ret    
c001ab30:	e9 53 04 00 00       	jmp    c001af88 <picEOI(int)>

c001ab35 <Hal::initialise()>:
c001ab35:	53                   	push   ebx
c001ab36:	ba ce 9c 01 c0       	mov    edx,0xc0019cce
c001ab3b:	83 ec 08             	sub    esp,0x8
c001ab3e:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c001ab43:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001ab49:	f6 81 90 11 00 00 02 	test   BYTE PTR [ecx+0x1190],0x2
c001ab50:	74 05                	je     c001ab57 <Hal::initialise()+0x22>
c001ab52:	ba d3 9c 01 c0       	mov    edx,0xc0019cd3
c001ab57:	89 15 18 95 02 c0    	mov    DWORD PTR ds:0xc0029518,edx
c001ab5d:	80 3d 20 88 02 c0 00 	cmp    BYTE PTR ds:0xc0028820,0x0
c001ab64:	75 07                	jne    c001ab6d <Hal::initialise()+0x38>
c001ab66:	80 a0 e8 01 00 00 fe 	and    BYTE PTR [eax+0x1e8],0xfe
c001ab6d:	83 ec 0c             	sub    esp,0xc
c001ab70:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001ab76:	68 58 21 00 00       	push   0x2158
c001ab7b:	83 e0 01             	and    eax,0x1
c001ab7e:	a2 08 95 02 c0       	mov    ds:0xc0029508,al
c001ab83:	e8 2f f1 fe ff       	call   c0009cb7 <malloc>
c001ab88:	89 04 24             	mov    DWORD PTR [esp],eax
c001ab8b:	89 c3                	mov    ebx,eax
c001ab8d:	e8 98 70 00 00       	call   c0021c2a <PIC::PIC()>
c001ab92:	6a 00                	push   0x0
c001ab94:	6a 00                	push   0x0
c001ab96:	6a 00                	push   0x0
c001ab98:	53                   	push   ebx
c001ab99:	e8 3e 73 00 00       	call   c0021edc <PIC::open(int, int, void*)>
c001ab9e:	83 c4 20             	add    esp,0x20
c001aba1:	80 3d 08 95 02 c0 00 	cmp    BYTE PTR ds:0xc0029508,0x0
c001aba8:	74 39                	je     c001abe3 <Hal::initialise()+0xae>
c001abaa:	8b 03                	mov    eax,DWORD PTR [ebx]
c001abac:	6a 00                	push   0x0
c001abae:	6a 00                	push   0x0
c001abb0:	6a 00                	push   0x0
c001abb2:	53                   	push   ebx
c001abb3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001abb6:	8b 03                	mov    eax,DWORD PTR [ebx]
c001abb8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001abbb:	ff 50 04             	call   DWORD PTR [eax+0x4]
c001abbe:	c7 04 24 58 21 00 00 	mov    DWORD PTR [esp],0x2158
c001abc5:	e8 ed f0 fe ff       	call   c0009cb7 <malloc>
c001abca:	89 04 24             	mov    DWORD PTR [esp],eax
c001abcd:	89 c3                	mov    ebx,eax
c001abcf:	e8 fe 6a 00 00       	call   c00216d2 <APIC::APIC()>
c001abd4:	6a 00                	push   0x0
c001abd6:	6a 00                	push   0x0
c001abd8:	6a 00                	push   0x0
c001abda:	53                   	push   ebx
c001abdb:	e8 7c 69 00 00       	call   c002155c <APIC::open(int, int, void*)>
c001abe0:	83 c4 20             	add    esp,0x20
c001abe3:	50                   	push   eax
c001abe4:	50                   	push   eax
c001abe5:	53                   	push   ebx
c001abe6:	ff 35 08 7f 02 c0    	push   DWORD PTR ds:0xc0027f08
c001abec:	e8 85 38 ff ff       	call   c000e476 <Device::addChild(Device*)>
c001abf1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001abf3:	6a 00                	push   0x0
c001abf5:	68 98 a4 01 c0       	push   0xc001a498
c001abfa:	6a 00                	push   0x0
c001abfc:	53                   	push   ebx
c001abfd:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001ac00:	83 c4 20             	add    esp,0x20
c001ac03:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ac05:	6a 00                	push   0x0
c001ac07:	68 98 a4 01 c0       	push   0xc001a498
c001ac0c:	6a 01                	push   0x1
c001ac0e:	53                   	push   ebx
c001ac0f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001ac12:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ac14:	6a 00                	push   0x0
c001ac16:	68 d6 9c 01 c0       	push   0xc0019cd6
c001ac1b:	6a 02                	push   0x2
c001ac1d:	53                   	push   ebx
c001ac1e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001ac21:	83 c4 20             	add    esp,0x20
c001ac24:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ac26:	6a 00                	push   0x0
c001ac28:	68 98 a4 01 c0       	push   0xc001a498
c001ac2d:	6a 03                	push   0x3
c001ac2f:	53                   	push   ebx
c001ac30:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001ac33:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ac35:	6a 00                	push   0x0
c001ac37:	68 98 a4 01 c0       	push   0xc001a498
c001ac3c:	6a 04                	push   0x4
c001ac3e:	53                   	push   ebx
c001ac3f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001ac42:	83 c4 20             	add    esp,0x20
c001ac45:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ac47:	6a 00                	push   0x0
c001ac49:	68 98 a4 01 c0       	push   0xc001a498
c001ac4e:	6a 05                	push   0x5
c001ac50:	53                   	push   ebx
c001ac51:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001ac54:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ac56:	6a 00                	push   0x0
c001ac58:	68 ec a4 01 c0       	push   0xc001a4ec
c001ac5d:	6a 06                	push   0x6
c001ac5f:	53                   	push   ebx
c001ac60:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001ac63:	83 c4 20             	add    esp,0x20
c001ac66:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ac68:	6a 00                	push   0x0
c001ac6a:	68 ef 9c 01 c0       	push   0xc0019cef
c001ac6f:	6a 08                	push   0x8
c001ac71:	53                   	push   ebx
c001ac72:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001ac75:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ac77:	6a 00                	push   0x0
c001ac79:	68 98 a4 01 c0       	push   0xc001a498
c001ac7e:	6a 09                	push   0x9
c001ac80:	53                   	push   ebx
c001ac81:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001ac84:	83 c4 20             	add    esp,0x20
c001ac87:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ac89:	6a 00                	push   0x0
c001ac8b:	68 98 a4 01 c0       	push   0xc001a498
c001ac90:	6a 0a                	push   0xa
c001ac92:	53                   	push   ebx
c001ac93:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001ac96:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ac98:	6a 00                	push   0x0
c001ac9a:	68 98 a4 01 c0       	push   0xc001a498
c001ac9f:	6a 0b                	push   0xb
c001aca1:	53                   	push   ebx
c001aca2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001aca5:	83 c4 20             	add    esp,0x20
c001aca8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001acaa:	6a 00                	push   0x0
c001acac:	68 98 a4 01 c0       	push   0xc001a498
c001acb1:	6a 0c                	push   0xc
c001acb3:	53                   	push   ebx
c001acb4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001acb7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001acb9:	6a 00                	push   0x0
c001acbb:	68 99 a3 01 c0       	push   0xc001a399
c001acc0:	6a 0d                	push   0xd
c001acc2:	53                   	push   ebx
c001acc3:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001acc6:	83 c4 20             	add    esp,0x20
c001acc9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001accb:	6a 00                	push   0x0
c001accd:	68 0e a4 01 c0       	push   0xc001a40e
c001acd2:	6a 0e                	push   0xe
c001acd4:	53                   	push   ebx
c001acd5:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001acd8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001acda:	6a 00                	push   0x0
c001acdc:	68 98 a4 01 c0       	push   0xc001a498
c001ace1:	6a 0f                	push   0xf
c001ace3:	53                   	push   ebx
c001ace4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001ace7:	83 c4 20             	add    esp,0x20
c001acea:	8b 03                	mov    eax,DWORD PTR [ebx]
c001acec:	6a 00                	push   0x0
c001acee:	68 98 a4 01 c0       	push   0xc001a498
c001acf3:	6a 10                	push   0x10
c001acf5:	53                   	push   ebx
c001acf6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001acf9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001acfb:	6a 00                	push   0x0
c001acfd:	68 98 a4 01 c0       	push   0xc001a498
c001ad02:	6a 11                	push   0x11
c001ad04:	53                   	push   ebx
c001ad05:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001ad08:	83 c4 20             	add    esp,0x20
c001ad0b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ad0d:	6a 00                	push   0x0
c001ad0f:	68 98 a4 01 c0       	push   0xc001a498
c001ad14:	6a 12                	push   0x12
c001ad16:	53                   	push   ebx
c001ad17:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001ad1a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ad1c:	6a 00                	push   0x0
c001ad1e:	68 98 a4 01 c0       	push   0xc001a498
c001ad23:	6a 13                	push   0x13
c001ad25:	53                   	push   ebx
c001ad26:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001ad29:	83 c4 20             	add    esp,0x20
c001ad2c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ad2e:	6a 00                	push   0x0
c001ad30:	68 98 a4 01 c0       	push   0xc001a498
c001ad35:	6a 14                	push   0x14
c001ad37:	53                   	push   ebx
c001ad38:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001ad3b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ad3d:	6a 00                	push   0x0
c001ad3f:	68 98 a4 01 c0       	push   0xc001a498
c001ad44:	6a 1e                	push   0x1e
c001ad46:	53                   	push   ebx
c001ad47:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001ad4a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ad4c:	83 c4 20             	add    esp,0x20
c001ad4f:	6a 00                	push   0x0
c001ad51:	68 85 5c 01 c0       	push   0xc0015c85
c001ad56:	6a 60                	push   0x60
c001ad58:	53                   	push   ebx
c001ad59:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001ad5c:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c001ad61:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ad67:	89 98 88 11 00 00    	mov    DWORD PTR [eax+0x1188],ebx
c001ad6d:	83 c4 18             	add    esp,0x18
c001ad70:	5b                   	pop    ebx
c001ad71:	c3                   	ret    
c001ad72:	66 90                	xchg   ax,ax

c001ad74 <picIoWait()>:
c001ad74:	eb 00                	jmp    c001ad76 <picIoWait()+0x2>
c001ad76:	eb 00                	jmp    c001ad78 <picIoWait()+0x4>
c001ad78:	90                   	nop
c001ad79:	c3                   	ret    
c001ad7a:	66 90                	xchg   ax,ax

c001ad7c <picDisable()>:
c001ad7c:	83 ec 10             	sub    esp,0x10
c001ad7f:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c001ad86:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c001ad8b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ad8f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001ad94:	ee                   	out    dx,al
c001ad95:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c001ad9c:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c001ada1:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001ada5:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001adaa:	ee                   	out    dx,al
c001adab:	90                   	nop
c001adac:	83 c4 10             	add    esp,0x10
c001adaf:	c3                   	ret    

c001adb0 <picGetIRQReg(int)>:
c001adb0:	83 ec 10             	sub    esp,0x10
c001adb3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001adb7:	0f b6 c0             	movzx  eax,al
c001adba:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001adc1:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c001adc5:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001adc9:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001adce:	ee                   	out    dx,al
c001adcf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001add3:	0f b6 c0             	movzx  eax,al
c001add6:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001addd:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001ade1:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001ade5:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001adea:	ee                   	out    dx,al
c001adeb:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c001adf2:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001adf7:	89 c2                	mov    edx,eax
c001adf9:	ec                   	in     al,dx
c001adfa:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001adfe:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ae02:	0f b6 c0             	movzx  eax,al
c001ae05:	c1 e0 08             	shl    eax,0x8
c001ae08:	89 c1                	mov    ecx,eax
c001ae0a:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c001ae11:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c001ae16:	89 c2                	mov    edx,eax
c001ae18:	ec                   	in     al,dx
c001ae19:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001ae1d:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001ae21:	0f b6 c0             	movzx  eax,al
c001ae24:	09 c8                	or     eax,ecx
c001ae26:	83 c4 10             	add    esp,0x10
c001ae29:	c3                   	ret    
c001ae2a:	66 90                	xchg   ax,ax

c001ae2c <picRemap()>:
c001ae2c:	83 ec 40             	sub    esp,0x40
c001ae2f:	c7 44 24 3c 20 00 00 00 	mov    DWORD PTR [esp+0x3c],0x20
c001ae37:	c7 44 24 38 28 00 00 00 	mov    DWORD PTR [esp+0x38],0x28
c001ae3f:	66 c7 44 24 08 21 00 	mov    WORD PTR [esp+0x8],0x21
c001ae46:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ae4a:	89 c2                	mov    edx,eax
c001ae4c:	ec                   	in     al,dx
c001ae4d:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001ae51:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001ae55:	88 44 24 37          	mov    BYTE PTR [esp+0x37],al
c001ae59:	66 c7 44 24 0c a1 00 	mov    WORD PTR [esp+0xc],0xa1
c001ae60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ae64:	89 c2                	mov    edx,eax
c001ae66:	ec                   	in     al,dx
c001ae67:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001ae6b:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001ae6f:	88 44 24 36          	mov    BYTE PTR [esp+0x36],al
c001ae73:	66 c7 44 24 10 20 00 	mov    WORD PTR [esp+0x10],0x20
c001ae7a:	c6 44 24 0f 11       	mov    BYTE PTR [esp+0xf],0x11
c001ae7f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001ae83:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ae87:	ee                   	out    dx,al
c001ae88:	e8 e7 fe ff ff       	call   c001ad74 <picIoWait()>
c001ae8d:	66 c7 44 24 14 a0 00 	mov    WORD PTR [esp+0x14],0xa0
c001ae94:	c6 44 24 13 11       	mov    BYTE PTR [esp+0x13],0x11
c001ae99:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001ae9d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001aea1:	ee                   	out    dx,al
c001aea2:	e8 cd fe ff ff       	call   c001ad74 <picIoWait()>
c001aea7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001aeab:	0f b6 c0             	movzx  eax,al
c001aeae:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c001aeb5:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001aeb9:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001aebd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001aec1:	ee                   	out    dx,al
c001aec2:	e8 ad fe ff ff       	call   c001ad74 <picIoWait()>
c001aec7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aecb:	0f b6 c0             	movzx  eax,al
c001aece:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c001aed5:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001aed9:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001aedd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001aee1:	ee                   	out    dx,al
c001aee2:	e8 8d fe ff ff       	call   c001ad74 <picIoWait()>
c001aee7:	66 c7 44 24 20 21 00 	mov    WORD PTR [esp+0x20],0x21
c001aeee:	c6 44 24 1f 04       	mov    BYTE PTR [esp+0x1f],0x4
c001aef3:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001aef7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001aefb:	ee                   	out    dx,al
c001aefc:	e8 73 fe ff ff       	call   c001ad74 <picIoWait()>
c001af01:	66 c7 44 24 24 a1 00 	mov    WORD PTR [esp+0x24],0xa1
c001af08:	c6 44 24 23 02       	mov    BYTE PTR [esp+0x23],0x2
c001af0d:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001af11:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001af15:	ee                   	out    dx,al
c001af16:	e8 59 fe ff ff       	call   c001ad74 <picIoWait()>
c001af1b:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c001af22:	c6 44 24 27 01       	mov    BYTE PTR [esp+0x27],0x1
c001af27:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c001af2b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001af2f:	ee                   	out    dx,al
c001af30:	e8 3f fe ff ff       	call   c001ad74 <picIoWait()>
c001af35:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c001af3c:	c6 44 24 2b 01       	mov    BYTE PTR [esp+0x2b],0x1
c001af41:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001af45:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001af49:	ee                   	out    dx,al
c001af4a:	e8 25 fe ff ff       	call   c001ad74 <picIoWait()>
c001af4f:	0f b6 44 24 37       	movzx  eax,BYTE PTR [esp+0x37]
c001af54:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c001af5b:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c001af5f:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c001af63:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001af67:	ee                   	out    dx,al
c001af68:	0f b6 44 24 36       	movzx  eax,BYTE PTR [esp+0x36]
c001af6d:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c001af74:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001af78:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001af7c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001af80:	ee                   	out    dx,al
c001af81:	90                   	nop
c001af82:	83 c4 40             	add    esp,0x40
c001af85:	c3                   	ret    
c001af86:	66 90                	xchg   ax,ax

c001af88 <picEOI(int)>:
c001af88:	83 ec 10             	sub    esp,0x10
c001af8b:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001af90:	75 1e                	jne    c001afb0 <picEOI(int)+0x28>
c001af92:	6a 0b                	push   0xb
c001af94:	e8 17 fe ff ff       	call   c001adb0 <picGetIRQReg(int)>
c001af99:	83 c4 04             	add    esp,0x4
c001af9c:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001afa1:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c001afa6:	25 80 00 00 00       	and    eax,0x80
c001afab:	74 73                	je     c001b020 <picEOI(int)+0x98>
c001afad:	8d 76 00             	lea    esi,[esi+0x0]
c001afb0:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c001afb5:	75 31                	jne    c001afe8 <picEOI(int)+0x60>
c001afb7:	6a 0b                	push   0xb
c001afb9:	e8 f2 fd ff ff       	call   c001adb0 <picGetIRQReg(int)>
c001afbe:	83 c4 04             	add    esp,0x4
c001afc1:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001afc6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001afca:	66 85 c0             	test   ax,ax
c001afcd:	78 19                	js     c001afe8 <picEOI(int)+0x60>
c001afcf:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c001afd6:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c001afdb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001afdf:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001afe4:	ee                   	out    dx,al
c001afe5:	eb 3d                	jmp    c001b024 <picEOI(int)+0x9c>
c001afe7:	90                   	nop
c001afe8:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001afed:	7e 19                	jle    c001b008 <picEOI(int)+0x80>
c001afef:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001aff6:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c001affb:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001afff:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001b004:	ee                   	out    dx,al
c001b005:	8d 76 00             	lea    esi,[esi+0x0]
c001b008:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001b00f:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c001b014:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001b018:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001b01d:	ee                   	out    dx,al
c001b01e:	eb 04                	jmp    c001b024 <picEOI(int)+0x9c>
c001b020:	90                   	nop
c001b021:	8d 76 00             	lea    esi,[esi+0x0]
c001b024:	83 c4 10             	add    esp,0x10
c001b027:	c3                   	ret    

c001b028 <FAT::getName()>:
c001b028:	b8 c9 63 02 c0       	mov    eax,0xc00263c9
c001b02d:	c3                   	ret    
c001b02e:	66 90                	xchg   ax,ax

c001b030 <FAT::tell(void*, unsigned long long*)>:
c001b030:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001b035:	75 09                	jne    c001b040 <FAT::tell(void*, unsigned long long*)+0x10>
c001b037:	b8 04 00 00 00       	mov    eax,0x4
c001b03c:	c3                   	ret    
c001b03d:	8d 76 00             	lea    esi,[esi+0x0]
c001b040:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b045:	75 09                	jne    c001b050 <FAT::tell(void*, unsigned long long*)+0x20>
c001b047:	b8 04 00 00 00       	mov    eax,0x4
c001b04c:	c3                   	ret    
c001b04d:	8d 76 00             	lea    esi,[esi+0x0]
c001b050:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b054:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001b057:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001b05a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b05e:	89 01                	mov    DWORD PTR [ecx],eax
c001b060:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b063:	b8 00 00 00 00       	mov    eax,0x0
c001b068:	c3                   	ret    
c001b069:	90                   	nop
c001b06a:	66 90                	xchg   ax,ax

c001b06c <FAT::stat(void*, unsigned long long*)>:
c001b06c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001b071:	75 09                	jne    c001b07c <FAT::stat(void*, unsigned long long*)+0x10>
c001b073:	b8 04 00 00 00       	mov    eax,0x4
c001b078:	c3                   	ret    
c001b079:	8d 76 00             	lea    esi,[esi+0x0]
c001b07c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b081:	75 09                	jne    c001b08c <FAT::stat(void*, unsigned long long*)+0x20>
c001b083:	b8 04 00 00 00       	mov    eax,0x4
c001b088:	c3                   	ret    
c001b089:	8d 76 00             	lea    esi,[esi+0x0]
c001b08c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b090:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001b093:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001b096:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b09a:	89 01                	mov    DWORD PTR [ecx],eax
c001b09c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b09f:	b8 00 00 00 00       	mov    eax,0x0
c001b0a4:	c3                   	ret    
c001b0a5:	90                   	nop
c001b0a6:	66 90                	xchg   ax,ax

c001b0a8 <FAT::~FAT()>:
c001b0a8:	83 ec 0c             	sub    esp,0xc
c001b0ab:	ba 14 64 02 c0       	mov    edx,0xc0026414
c001b0b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b0b4:	89 10                	mov    DWORD PTR [eax],edx
c001b0b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b0ba:	83 ec 0c             	sub    esp,0xc
c001b0bd:	50                   	push   eax
c001b0be:	e8 3d 22 ff ff       	call   c000d300 <Filesystem::~Filesystem()>
c001b0c3:	83 c4 10             	add    esp,0x10
c001b0c6:	90                   	nop
c001b0c7:	83 c4 0c             	add    esp,0xc
c001b0ca:	c3                   	ret    
c001b0cb:	90                   	nop

c001b0cc <FAT::~FAT()>:
c001b0cc:	83 ec 0c             	sub    esp,0xc
c001b0cf:	83 ec 0c             	sub    esp,0xc
c001b0d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b0d6:	e8 cd ff ff ff       	call   c001b0a8 <FAT::~FAT()>
c001b0db:	83 c4 10             	add    esp,0x10
c001b0de:	83 ec 08             	sub    esp,0x8
c001b0e1:	6a 08                	push   0x8
c001b0e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b0e7:	e8 f8 1d ff ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c001b0ec:	83 c4 10             	add    esp,0x10
c001b0ef:	83 c4 0c             	add    esp,0xc
c001b0f2:	c3                   	ret    
c001b0f3:	90                   	nop

c001b0f4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001b0f4:	83 ec 1c             	sub    esp,0x1c
c001b0f7:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001b0fe:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001b103:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b107:	8b 04 85 40 95 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6ac0]
c001b10e:	83 f8 ff             	cmp    eax,0xffffffff
c001b111:	75 35                	jne    c001b148 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001b113:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b117:	88 c2                	mov    dl,al
c001b119:	a1 20 95 02 c0       	mov    eax,ds:0xc0029520
c001b11e:	01 d0                	add    eax,edx
c001b120:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b124:	8b 15 20 95 02 c0    	mov    edx,DWORD PTR ds:0xc0029520
c001b12a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b12e:	89 14 85 40 95 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6ac0],edx
c001b135:	a1 20 95 02 c0       	mov    eax,ds:0xc0029520
c001b13a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b13e:	89 14 85 c0 95 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6a40],edx
c001b145:	eb 19                	jmp    c001b160 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001b147:	90                   	nop
c001b148:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b14c:	88 c2                	mov    dl,al
c001b14e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b152:	8b 04 85 40 95 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6ac0]
c001b159:	01 d0                	add    eax,edx
c001b15b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b15f:	90                   	nop
c001b160:	83 ec 04             	sub    esp,0x4
c001b163:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b167:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b16b:	8d 44 24 15          	lea    eax,[esp+0x15]
c001b16f:	50                   	push   eax
c001b170:	e8 b5 ba fe ff       	call   c0006c2a <f_getlabel>
c001b175:	83 c4 10             	add    esp,0x10
c001b178:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b17c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b181:	75 09                	jne    c001b18c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001b183:	b8 00 00 00 00       	mov    eax,0x0
c001b188:	eb 0a                	jmp    c001b194 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001b18a:	66 90                	xchg   ax,ax
c001b18c:	b8 01 00 00 00       	mov    eax,0x1
c001b191:	8d 76 00             	lea    esi,[esi+0x0]
c001b194:	83 c4 1c             	add    esp,0x1c
c001b197:	c3                   	ret    

c001b198 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001b198:	57                   	push   edi
c001b199:	83 ec 58             	sub    esp,0x58
c001b19c:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001b1a4:	8d 54 24 10          	lea    edx,[esp+0x10]
c001b1a8:	b9 0f 00 00 00       	mov    ecx,0xf
c001b1ad:	b8 00 00 00 00       	mov    eax,0x0
c001b1b2:	fc                   	cld    
c001b1b3:	89 d7                	mov    edi,edx
c001b1b5:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b1b7:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b1bb:	8b 04 85 40 95 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6ac0]
c001b1c2:	83 f8 ff             	cmp    eax,0xffffffff
c001b1c5:	75 35                	jne    c001b1fc <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001b1c7:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b1cb:	88 c2                	mov    dl,al
c001b1cd:	a1 20 95 02 c0       	mov    eax,ds:0xc0029520
c001b1d2:	01 d0                	add    eax,edx
c001b1d4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b1d8:	8b 15 20 95 02 c0    	mov    edx,DWORD PTR ds:0xc0029520
c001b1de:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b1e2:	89 14 85 40 95 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6ac0],edx
c001b1e9:	a1 20 95 02 c0       	mov    eax,ds:0xc0029520
c001b1ee:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001b1f2:	89 14 85 c0 95 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6a40],edx
c001b1f9:	eb 19                	jmp    c001b214 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001b1fb:	90                   	nop
c001b1fc:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b200:	88 c2                	mov    dl,al
c001b202:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b206:	8b 04 85 40 95 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6ac0]
c001b20d:	01 d0                	add    eax,edx
c001b20f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b213:	90                   	nop
c001b214:	83 ec 08             	sub    esp,0x8
c001b217:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001b21b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b21f:	50                   	push   eax
c001b220:	e8 53 56 fe ff       	call   c0000878 <strcat>
c001b225:	83 c4 10             	add    esp,0x10
c001b228:	83 ec 0c             	sub    esp,0xc
c001b22b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b22f:	50                   	push   eax
c001b230:	e8 e3 bb fe ff       	call   c0006e18 <f_setlabel>
c001b235:	83 c4 10             	add    esp,0x10
c001b238:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b23c:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001b241:	75 09                	jne    c001b24c <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001b243:	b8 00 00 00 00       	mov    eax,0x0
c001b248:	eb 0a                	jmp    c001b254 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001b24a:	66 90                	xchg   ax,ax
c001b24c:	b8 01 00 00 00       	mov    eax,0x1
c001b251:	8d 76 00             	lea    esi,[esi+0x0]
c001b254:	83 c4 58             	add    esp,0x58
c001b257:	5f                   	pop    edi
c001b258:	c3                   	ret    
c001b259:	90                   	nop
c001b25a:	66 90                	xchg   ax,ax

c001b25c <FAT::format(LogicalDisk*, int, char const*, int)>:
c001b25c:	83 ec 2c             	sub    esp,0x2c
c001b25f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001b267:	83 ec 08             	sub    esp,0x8
c001b26a:	68 ed 63 02 c0       	push   0xc00263ed
c001b26f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b273:	e8 4c 55 fe ff       	call   c00007c4 <strcmp>
c001b278:	83 c4 10             	add    esp,0x10
c001b27b:	85 c0                	test   eax,eax
c001b27d:	0f 94 c0             	sete   al
c001b280:	84 c0                	test   al,al
c001b282:	74 10                	je     c001b294 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001b284:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001b28c:	e9 b3 00 00 00       	jmp    c001b344 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b291:	8d 76 00             	lea    esi,[esi+0x0]
c001b294:	83 ec 08             	sub    esp,0x8
c001b297:	68 df 63 02 c0       	push   0xc00263df
c001b29c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b2a0:	e8 1f 55 fe ff       	call   c00007c4 <strcmp>
c001b2a5:	83 c4 10             	add    esp,0x10
c001b2a8:	85 c0                	test   eax,eax
c001b2aa:	0f 94 c0             	sete   al
c001b2ad:	84 c0                	test   al,al
c001b2af:	74 0f                	je     c001b2c0 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c001b2b1:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001b2b9:	e9 86 00 00 00       	jmp    c001b344 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b2be:	66 90                	xchg   ax,ax
c001b2c0:	83 ec 08             	sub    esp,0x8
c001b2c3:	68 e5 63 02 c0       	push   0xc00263e5
c001b2c8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b2cc:	e8 f3 54 fe ff       	call   c00007c4 <strcmp>
c001b2d1:	83 c4 10             	add    esp,0x10
c001b2d4:	85 c0                	test   eax,eax
c001b2d6:	0f 94 c0             	sete   al
c001b2d9:	84 c0                	test   al,al
c001b2db:	74 0b                	je     c001b2e8 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c001b2dd:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001b2e5:	eb 5d                	jmp    c001b344 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b2e7:	90                   	nop
c001b2e8:	83 ec 08             	sub    esp,0x8
c001b2eb:	68 ec 36 02 c0       	push   0xc00236ec
c001b2f0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b2f4:	e8 cb 54 fe ff       	call   c00007c4 <strcmp>
c001b2f9:	83 c4 10             	add    esp,0x10
c001b2fc:	85 c0                	test   eax,eax
c001b2fe:	0f 94 c0             	sete   al
c001b301:	84 c0                	test   al,al
c001b303:	74 0b                	je     c001b310 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c001b305:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001b30d:	eb 35                	jmp    c001b344 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b30f:	90                   	nop
c001b310:	83 ec 08             	sub    esp,0x8
c001b313:	68 eb 63 02 c0       	push   0xc00263eb
c001b318:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b31c:	e8 a3 54 fe ff       	call   c00007c4 <strcmp>
c001b321:	83 c4 10             	add    esp,0x10
c001b324:	85 c0                	test   eax,eax
c001b326:	0f 94 c0             	sete   al
c001b329:	84 c0                	test   al,al
c001b32b:	74 0b                	je     c001b338 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c001b32d:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001b335:	eb 0d                	jmp    c001b344 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b337:	90                   	nop
c001b338:	b8 08 00 00 00       	mov    eax,0x8
c001b33d:	e9 ea 00 00 00       	jmp    c001b42c <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001b342:	66 90                	xchg   ax,ax
c001b344:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001b34b:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001b350:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b354:	8b 04 85 40 95 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6ac0]
c001b35b:	83 f8 ff             	cmp    eax,0xffffffff
c001b35e:	75 34                	jne    c001b394 <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c001b360:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001b364:	88 c2                	mov    dl,al
c001b366:	a1 20 95 02 c0       	mov    eax,ds:0xc0029520
c001b36b:	01 d0                	add    eax,edx
c001b36d:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001b371:	8b 15 20 95 02 c0    	mov    edx,DWORD PTR ds:0xc0029520
c001b377:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b37b:	89 14 85 40 95 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6ac0],edx
c001b382:	a1 20 95 02 c0       	mov    eax,ds:0xc0029520
c001b387:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b38b:	89 14 85 c0 95 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6a40],edx
c001b392:	eb 18                	jmp    c001b3ac <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c001b394:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001b398:	88 c2                	mov    dl,al
c001b39a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b39e:	8b 04 85 40 95 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6ac0]
c001b3a5:	01 d0                	add    eax,edx
c001b3a7:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001b3ab:	90                   	nop
c001b3ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b3b0:	88 04 24             	mov    BYTE PTR [esp],al
c001b3b3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001b3b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b3bb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001b3c3:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001b3c8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001b3d0:	83 ec 0c             	sub    esp,0xc
c001b3d3:	68 00 20 00 00       	push   0x2000
c001b3d8:	e8 da e8 fe ff       	call   c0009cb7 <malloc>
c001b3dd:	83 c4 10             	add    esp,0x10
c001b3e0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b3e4:	68 00 20 00 00       	push   0x2000
c001b3e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b3ed:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b3f1:	50                   	push   eax
c001b3f2:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001b3f6:	50                   	push   eax
c001b3f7:	e8 9d c0 fe ff       	call   c0007499 <f_mkfs>
c001b3fc:	83 c4 10             	add    esp,0x10
c001b3ff:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b403:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001b408:	75 0a                	jne    c001b414 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c001b40a:	b8 00 00 00 00       	mov    eax,0x0
c001b40f:	eb 1b                	jmp    c001b42c <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001b411:	8d 76 00             	lea    esi,[esi+0x0]
c001b414:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001b419:	75 09                	jne    c001b424 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001b41b:	b8 09 00 00 00       	mov    eax,0x9
c001b420:	eb 0a                	jmp    c001b42c <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001b422:	66 90                	xchg   ax,ax
c001b424:	b8 01 00 00 00       	mov    eax,0x1
c001b429:	8d 76 00             	lea    esi,[esi+0x0]
c001b42c:	83 c4 2c             	add    esp,0x2c
c001b42f:	c3                   	ret    

c001b430 <FAT::tryMount(LogicalDisk*, int)>:
c001b430:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001b436:	a1 20 95 02 c0       	mov    eax,ds:0xc0029520
c001b43b:	83 f8 14             	cmp    eax,0x14
c001b43e:	75 18                	jne    c001b458 <FAT::tryMount(LogicalDisk*, int)+0x28>
c001b440:	83 ec 0c             	sub    esp,0xc
c001b443:	68 f1 63 02 c0       	push   0xc00263f1
c001b448:	e8 8e 8b ff ff       	call   c0013fdb <Krnl::panic(char const*)>
c001b44d:	83 c4 10             	add    esp,0x10
c001b450:	b0 00                	mov    al,0x0
c001b452:	e9 e9 01 00 00       	jmp    c001b640 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b457:	90                   	nop
c001b458:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001b45f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b465:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b46b:	3d 00 02 00 00       	cmp    eax,0x200
c001b470:	74 0a                	je     c001b47c <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001b472:	b0 00                	mov    al,0x0
c001b474:	e9 c7 01 00 00       	jmp    c001b640 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b479:	8d 76 00             	lea    esi,[esi+0x0]
c001b47c:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001b484:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001b48b:	8b 04 85 40 95 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6ac0]
c001b492:	83 f8 ff             	cmp    eax,0xffffffff
c001b495:	74 09                	je     c001b4a0 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001b497:	b0 01                	mov    al,0x1
c001b499:	e9 a2 01 00 00       	jmp    c001b640 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b49e:	66 90                	xchg   ax,ax
c001b4a0:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001b4aa:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001b4b2:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001b4b9:	88 c2                	mov    dl,al
c001b4bb:	a1 20 95 02 c0       	mov    eax,ds:0xc0029520
c001b4c0:	01 d0                	add    eax,edx
c001b4c2:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001b4c9:	8b 15 20 95 02 c0    	mov    edx,DWORD PTR ds:0xc0029520
c001b4cf:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001b4d6:	89 14 85 40 95 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6ac0],edx
c001b4dd:	a1 20 95 02 c0       	mov    eax,ds:0xc0029520
c001b4e2:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001b4e9:	89 14 85 c0 95 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6a40],edx
c001b4f0:	83 ec 0c             	sub    esp,0xc
c001b4f3:	68 54 02 00 00       	push   0x254
c001b4f8:	e8 ba e7 fe ff       	call   c0009cb7 <malloc>
c001b4fd:	83 c4 10             	add    esp,0x10
c001b500:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001b507:	83 ec 04             	sub    esp,0x4
c001b50a:	6a 00                	push   0x0
c001b50c:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001b513:	50                   	push   eax
c001b514:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001b51b:	e8 01 99 fe ff       	call   c0004e21 <f_mount>
c001b520:	83 c4 10             	add    esp,0x10
c001b523:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001b52a:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001b532:	74 1c                	je     c001b550 <FAT::tryMount(LogicalDisk*, int)+0x120>
c001b534:	83 ec 0c             	sub    esp,0xc
c001b537:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001b53e:	e8 94 e7 fe ff       	call   c0009cd7 <rfree>
c001b543:	83 c4 10             	add    esp,0x10
c001b546:	b0 00                	mov    al,0x0
c001b548:	e9 f3 00 00 00       	jmp    c001b640 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b54d:	8d 76 00             	lea    esi,[esi+0x0]
c001b550:	83 ec 04             	sub    esp,0x4
c001b553:	68 00 01 00 00       	push   0x100
c001b558:	6a 00                	push   0x0
c001b55a:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001b561:	50                   	push   eax
c001b562:	e8 15 51 fe ff       	call   c000067c <memset>
c001b567:	83 c4 10             	add    esp,0x10
c001b56a:	83 ec 08             	sub    esp,0x8
c001b56d:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001b574:	50                   	push   eax
c001b575:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001b57c:	50                   	push   eax
c001b57d:	e8 f6 52 fe ff       	call   c0000878 <strcat>
c001b582:	83 c4 10             	add    esp,0x10
c001b585:	83 ec 08             	sub    esp,0x8
c001b588:	68 ff 63 02 c0       	push   0xc00263ff
c001b58d:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001b594:	50                   	push   eax
c001b595:	e8 de 52 fe ff       	call   c0000878 <strcat>
c001b59a:	83 c4 10             	add    esp,0x10
c001b59d:	83 ec 04             	sub    esp,0x4
c001b5a0:	6a 01                	push   0x1
c001b5a2:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001b5a9:	50                   	push   eax
c001b5aa:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b5ae:	50                   	push   eax
c001b5af:	e8 cf 98 fe ff       	call   c0004e83 <f_open>
c001b5b4:	83 c4 10             	add    esp,0x10
c001b5b7:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001b5be:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001b5c5:	85 c0                	test   eax,eax
c001b5c7:	74 0b                	je     c001b5d4 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001b5c9:	78 31                	js     c001b5fc <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001b5cb:	83 e8 04             	sub    eax,0x4
c001b5ce:	83 f8 01             	cmp    eax,0x1
c001b5d1:	77 29                	ja     c001b5fc <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001b5d3:	90                   	nop
c001b5d4:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001b5dc:	83 ec 0c             	sub    esp,0xc
c001b5df:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b5e3:	50                   	push   eax
c001b5e4:	e8 ec a3 fe ff       	call   c00059d5 <f_close>
c001b5e9:	83 c4 10             	add    esp,0x10
c001b5ec:	90                   	nop
c001b5ed:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001b5f5:	74 41                	je     c001b638 <FAT::tryMount(LogicalDisk*, int)+0x208>
c001b5f7:	eb 33                	jmp    c001b62c <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001b5f9:	8d 76 00             	lea    esi,[esi+0x0]
c001b5fc:	83 ec 0c             	sub    esp,0xc
c001b5ff:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001b606:	e8 cc e6 fe ff       	call   c0009cd7 <rfree>
c001b60b:	83 c4 10             	add    esp,0x10
c001b60e:	83 ec 04             	sub    esp,0x4
c001b611:	6a 00                	push   0x0
c001b613:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001b61a:	50                   	push   eax
c001b61b:	6a 00                	push   0x0
c001b61d:	e8 ff 97 fe ff       	call   c0004e21 <f_mount>
c001b622:	83 c4 10             	add    esp,0x10
c001b625:	b0 00                	mov    al,0x0
c001b627:	eb 17                	jmp    c001b640 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b629:	8d 76 00             	lea    esi,[esi+0x0]
c001b62c:	a1 20 95 02 c0       	mov    eax,ds:0xc0029520
c001b631:	40                   	inc    eax
c001b632:	a3 20 95 02 c0       	mov    ds:0xc0029520,eax
c001b637:	90                   	nop
c001b638:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001b63f:	90                   	nop
c001b640:	81 c4 6c 03 00 00    	add    esp,0x36c
c001b646:	c3                   	ret    
c001b647:	90                   	nop

c001b648 <FAT::allocateSwapfile(char const*, int)>:
c001b648:	55                   	push   ebp
c001b649:	57                   	push   edi
c001b64a:	56                   	push   esi
c001b64b:	53                   	push   ebx
c001b64c:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001b652:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001b65d:	83 ec 0c             	sub    esp,0xc
c001b660:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001b667:	e8 4b e6 fe ff       	call   c0009cb7 <malloc>
c001b66c:	83 c4 10             	add    esp,0x10
c001b66f:	89 c7                	mov    edi,eax
c001b671:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c001b676:	83 ec 04             	sub    esp,0x4
c001b679:	50                   	push   eax
c001b67a:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001b681:	57                   	push   edi
c001b682:	e8 a9 1e ff ff       	call   c000d530 <File::File(char const*, Process*)>
c001b687:	83 c4 10             	add    esp,0x10
c001b68a:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001b691:	83 ec 04             	sub    esp,0x4
c001b694:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b698:	50                   	push   eax
c001b699:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b69d:	50                   	push   eax
c001b69e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b6a5:	e8 0c 22 ff ff       	call   c000d8b6 <File::stat(unsigned long long*, bool*)>
c001b6aa:	83 c4 10             	add    esp,0x10
c001b6ad:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001b6b4:	c1 e0 14             	shl    eax,0x14
c001b6b7:	89 c7                	mov    edi,eax
c001b6b9:	89 c5                	mov    ebp,eax
c001b6bb:	c1 fd 1f             	sar    ebp,0x1f
c001b6be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6c2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b6c6:	89 f9                	mov    ecx,edi
c001b6c8:	31 c1                	xor    ecx,eax
c001b6ca:	89 cb                	mov    ebx,ecx
c001b6cc:	89 e9                	mov    ecx,ebp
c001b6ce:	31 d1                	xor    ecx,edx
c001b6d0:	89 ce                	mov    esi,ecx
c001b6d2:	89 f0                	mov    eax,esi
c001b6d4:	09 d8                	or     eax,ebx
c001b6d6:	0f 84 98 00 00 00    	je     c001b774 <FAT::allocateSwapfile(char const*, int)+0x12c>
c001b6dc:	83 ec 0c             	sub    esp,0xc
c001b6df:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b6e6:	e8 97 20 ff ff       	call   c000d782 <File::unlink()>
c001b6eb:	83 c4 10             	add    esp,0x10
c001b6ee:	83 ec 08             	sub    esp,0x8
c001b6f1:	6a 12                	push   0x12
c001b6f3:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b6fa:	e8 0b 1f ff ff       	call   c000d60a <File::open(FileOpenMode)>
c001b6ff:	83 c4 10             	add    esp,0x10
c001b702:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b709:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001b70f:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001b716:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001b71d:	c1 e0 14             	shl    eax,0x14
c001b720:	99                   	cdq    
c001b721:	6a 01                	push   0x1
c001b723:	52                   	push   edx
c001b724:	50                   	push   eax
c001b725:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001b72c:	e8 54 b9 fe ff       	call   c0007085 <f_expand>
c001b731:	83 c4 10             	add    esp,0x10
c001b734:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b73b:	8b 00                	mov    eax,DWORD PTR [eax]
c001b73d:	83 c0 10             	add    eax,0x10
c001b740:	8b 00                	mov    eax,DWORD PTR [eax]
c001b742:	83 ec 0c             	sub    esp,0xc
c001b745:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b749:	52                   	push   edx
c001b74a:	8d 54 24 30          	lea    edx,[esp+0x30]
c001b74e:	52                   	push   edx
c001b74f:	6a 00                	push   0x0
c001b751:	68 00 04 00 00       	push   0x400
c001b756:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001b75d:	ff d0                	call   eax
c001b75f:	83 c4 20             	add    esp,0x20
c001b762:	83 ec 0c             	sub    esp,0xc
c001b765:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b76c:	e8 f7 1e ff ff       	call   c000d668 <File::close()>
c001b771:	83 c4 10             	add    esp,0x10
c001b774:	83 ec 08             	sub    esp,0x8
c001b777:	6a 01                	push   0x1
c001b779:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b780:	e8 85 1e ff ff       	call   c000d60a <File::open(FileOpenMode)>
c001b785:	83 c4 10             	add    esp,0x10
c001b788:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b78f:	8b 00                	mov    eax,DWORD PTR [eax]
c001b791:	83 c0 0c             	add    eax,0xc
c001b794:	8b 00                	mov    eax,DWORD PTR [eax]
c001b796:	83 ec 0c             	sub    esp,0xc
c001b799:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b79d:	52                   	push   edx
c001b79e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001b7a2:	52                   	push   edx
c001b7a3:	6a 00                	push   0x0
c001b7a5:	6a 04                	push   0x4
c001b7a7:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001b7ae:	ff d0                	call   eax
c001b7b0:	83 c4 20             	add    esp,0x20
c001b7b3:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b7ba:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001b7c0:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001b7c7:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001b7ce:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001b7d1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001b7d4:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001b7db:	83 ec 0c             	sub    esp,0xc
c001b7de:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b7e5:	e8 7e 1e ff ff       	call   c000d668 <File::close()>
c001b7ea:	83 c4 10             	add    esp,0x10
c001b7ed:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001b7f4:	ba 00 00 00 00       	mov    edx,0x0
c001b7f9:	81 c4 3c 04 00 00    	add    esp,0x43c
c001b7ff:	5b                   	pop    ebx
c001b800:	5e                   	pop    esi
c001b801:	5f                   	pop    edi
c001b802:	5d                   	pop    ebp
c001b803:	c3                   	ret    

c001b804 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001b804:	57                   	push   edi
c001b805:	56                   	push   esi
c001b806:	53                   	push   ebx
c001b807:	81 ec 50 02 00 00    	sub    esp,0x250
c001b80d:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001b815:	74 0d                	je     c001b824 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001b817:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001b81f:	75 0f                	jne    c001b830 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001b821:	8d 76 00             	lea    esi,[esi+0x0]
c001b824:	b8 04 00 00 00       	mov    eax,0x4
c001b829:	e9 36 01 00 00       	jmp    c001b964 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001b82e:	66 90                	xchg   ax,ax
c001b830:	83 ec 08             	sub    esp,0x8
c001b833:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001b83a:	50                   	push   eax
c001b83b:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001b842:	e8 98 a7 fe ff       	call   c0005fdf <f_readdir>
c001b847:	83 c4 10             	add    esp,0x10
c001b84a:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001b851:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c001b858:	83 ec 0c             	sub    esp,0xc
c001b85b:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001b862:	83 c0 1a             	add    eax,0x1a
c001b865:	50                   	push   eax
c001b866:	e8 2d 4e fe ff       	call   c0000698 <strlen>
c001b86b:	83 c4 10             	add    esp,0x10
c001b86e:	ba 00 00 00 00       	mov    edx,0x0
c001b873:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b877:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b87b:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001b882:	0f b6 c0             	movzx  eax,al
c001b885:	83 e0 10             	and    eax,0x10
c001b888:	74 0a                	je     c001b894 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001b88a:	b8 02 00 00 00       	mov    eax,0x2
c001b88f:	eb 0b                	jmp    c001b89c <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001b891:	8d 76 00             	lea    esi,[esi+0x0]
c001b894:	b8 01 00 00 00       	mov    eax,0x1
c001b899:	8d 76 00             	lea    esi,[esi+0x0]
c001b89c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b8a0:	83 ec 08             	sub    esp,0x8
c001b8a3:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001b8aa:	83 c0 1a             	add    eax,0x1a
c001b8ad:	50                   	push   eax
c001b8ae:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b8b2:	83 c0 10             	add    eax,0x10
c001b8b5:	50                   	push   eax
c001b8b6:	e8 7d 4e fe ff       	call   c0000738 <strcpy>
c001b8bb:	83 c4 10             	add    esp,0x10
c001b8be:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001b8c5:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001b8cc:	8d 44 24 04          	lea    eax,[esp+0x4]
c001b8d0:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001b8d7:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001b8de:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001b8e5:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001b8ec:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001b8f3:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001b8fa:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001b901:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001b908:	89 c6                	mov    esi,eax
c001b90a:	89 d7                	mov    edi,edx
c001b90c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b90e:	89 c8                	mov    eax,ecx
c001b910:	89 fa                	mov    edx,edi
c001b912:	89 f3                	mov    ebx,esi
c001b914:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001b91b:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001b922:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001b929:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001b930:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001b936:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001b93d:	84 c0                	test   al,al
c001b93f:	75 07                	jne    c001b948 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c001b941:	b8 07 00 00 00       	mov    eax,0x7
c001b946:	eb 1c                	jmp    c001b964 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001b948:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001b94f:	85 c0                	test   eax,eax
c001b951:	75 09                	jne    c001b95c <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c001b953:	b8 00 00 00 00       	mov    eax,0x0
c001b958:	eb 0a                	jmp    c001b964 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001b95a:	66 90                	xchg   ax,ax
c001b95c:	b8 01 00 00 00       	mov    eax,0x1
c001b961:	8d 76 00             	lea    esi,[esi+0x0]
c001b964:	81 c4 50 02 00 00    	add    esp,0x250
c001b96a:	5b                   	pop    ebx
c001b96b:	5e                   	pop    esi
c001b96c:	5f                   	pop    edi
c001b96d:	c3                   	ret    
c001b96e:	66 90                	xchg   ax,ax

c001b970 <FAT::read(void*, unsigned long, void*, int*)>:
c001b970:	83 ec 1c             	sub    esp,0x1c
c001b973:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b978:	74 0a                	je     c001b984 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001b97a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001b97f:	75 0b                	jne    c001b98c <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001b981:	8d 76 00             	lea    esi,[esi+0x0]
c001b984:	b8 04 00 00 00       	mov    eax,0x4
c001b989:	eb 41                	jmp    c001b9cc <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001b98b:	90                   	nop
c001b98c:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b990:	50                   	push   eax
c001b991:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b995:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b999:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b99d:	e8 1d 99 fe ff       	call   c00052bf <f_read>
c001b9a2:	83 c4 10             	add    esp,0x10
c001b9a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b9a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b9ad:	89 c2                	mov    edx,eax
c001b9af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b9b3:	89 10                	mov    DWORD PTR [eax],edx
c001b9b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b9b9:	85 c0                	test   eax,eax
c001b9bb:	75 07                	jne    c001b9c4 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001b9bd:	b8 00 00 00 00       	mov    eax,0x0
c001b9c2:	eb 08                	jmp    c001b9cc <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001b9c4:	b8 01 00 00 00       	mov    eax,0x1
c001b9c9:	8d 76 00             	lea    esi,[esi+0x0]
c001b9cc:	83 c4 1c             	add    esp,0x1c
c001b9cf:	c3                   	ret    

c001b9d0 <FAT::write(void*, unsigned long, void*, int*)>:
c001b9d0:	83 ec 1c             	sub    esp,0x1c
c001b9d3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b9d8:	74 0a                	je     c001b9e4 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001b9da:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001b9df:	75 0b                	jne    c001b9ec <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001b9e1:	8d 76 00             	lea    esi,[esi+0x0]
c001b9e4:	b8 04 00 00 00       	mov    eax,0x4
c001b9e9:	eb 41                	jmp    c001ba2c <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001b9eb:	90                   	nop
c001b9ec:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b9f0:	50                   	push   eax
c001b9f1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b9f5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b9f9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b9fd:	e8 3d 9b fe ff       	call   c000553f <f_write>
c001ba02:	83 c4 10             	add    esp,0x10
c001ba05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ba09:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ba0d:	89 c2                	mov    edx,eax
c001ba0f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ba13:	89 10                	mov    DWORD PTR [eax],edx
c001ba15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ba19:	85 c0                	test   eax,eax
c001ba1b:	75 07                	jne    c001ba24 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001ba1d:	b8 00 00 00 00       	mov    eax,0x0
c001ba22:	eb 08                	jmp    c001ba2c <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001ba24:	b8 01 00 00 00       	mov    eax,0x1
c001ba29:	8d 76 00             	lea    esi,[esi+0x0]
c001ba2c:	83 c4 1c             	add    esp,0x1c
c001ba2f:	c3                   	ret    

c001ba30 <FAT::close(void*)>:
c001ba30:	83 ec 1c             	sub    esp,0x1c
c001ba33:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001ba38:	75 0a                	jne    c001ba44 <FAT::close(void*)+0x14>
c001ba3a:	b8 04 00 00 00       	mov    eax,0x4
c001ba3f:	eb 3f                	jmp    c001ba80 <FAT::close(void*)+0x50>
c001ba41:	8d 76 00             	lea    esi,[esi+0x0]
c001ba44:	83 ec 0c             	sub    esp,0xc
c001ba47:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ba4b:	e8 85 9f fe ff       	call   c00059d5 <f_close>
c001ba50:	83 c4 10             	add    esp,0x10
c001ba53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ba57:	83 ec 0c             	sub    esp,0xc
c001ba5a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ba5e:	e8 64 e2 fe ff       	call   c0009cc7 <free>
c001ba63:	83 c4 10             	add    esp,0x10
c001ba66:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ba6a:	85 c0                	test   eax,eax
c001ba6c:	75 0a                	jne    c001ba78 <FAT::close(void*)+0x48>
c001ba6e:	b8 00 00 00 00       	mov    eax,0x0
c001ba73:	eb 0b                	jmp    c001ba80 <FAT::close(void*)+0x50>
c001ba75:	8d 76 00             	lea    esi,[esi+0x0]
c001ba78:	b8 01 00 00 00       	mov    eax,0x1
c001ba7d:	8d 76 00             	lea    esi,[esi+0x0]
c001ba80:	83 c4 1c             	add    esp,0x1c
c001ba83:	c3                   	ret    

c001ba84 <FAT::closeDir(void*)>:
c001ba84:	83 ec 1c             	sub    esp,0x1c
c001ba87:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001ba8c:	75 0a                	jne    c001ba98 <FAT::closeDir(void*)+0x14>
c001ba8e:	b8 04 00 00 00       	mov    eax,0x4
c001ba93:	eb 3f                	jmp    c001bad4 <FAT::closeDir(void*)+0x50>
c001ba95:	8d 76 00             	lea    esi,[esi+0x0]
c001ba98:	83 ec 0c             	sub    esp,0xc
c001ba9b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ba9f:	e8 19 a5 fe ff       	call   c0005fbd <f_closedir>
c001baa4:	83 c4 10             	add    esp,0x10
c001baa7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001baab:	83 ec 0c             	sub    esp,0xc
c001baae:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bab2:	e8 10 e2 fe ff       	call   c0009cc7 <free>
c001bab7:	83 c4 10             	add    esp,0x10
c001baba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001babe:	85 c0                	test   eax,eax
c001bac0:	75 0a                	jne    c001bacc <FAT::closeDir(void*)+0x48>
c001bac2:	b8 00 00 00 00       	mov    eax,0x0
c001bac7:	eb 0b                	jmp    c001bad4 <FAT::closeDir(void*)+0x50>
c001bac9:	8d 76 00             	lea    esi,[esi+0x0]
c001bacc:	b8 01 00 00 00       	mov    eax,0x1
c001bad1:	8d 76 00             	lea    esi,[esi+0x0]
c001bad4:	83 c4 1c             	add    esp,0x1c
c001bad7:	c3                   	ret    

c001bad8 <FAT::seek(void*, unsigned long long)>:
c001bad8:	83 ec 2c             	sub    esp,0x2c
c001badb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001badf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bae3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001bae7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001baeb:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001baf0:	75 0a                	jne    c001bafc <FAT::seek(void*, unsigned long long)+0x24>
c001baf2:	b8 04 00 00 00       	mov    eax,0x4
c001baf7:	eb 37                	jmp    c001bb30 <FAT::seek(void*, unsigned long long)+0x58>
c001baf9:	8d 76 00             	lea    esi,[esi+0x0]
c001bafc:	83 ec 04             	sub    esp,0x4
c001baff:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001bb03:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001bb07:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001bb0b:	e8 f4 9e fe ff       	call   c0005a04 <f_lseek>
c001bb10:	83 c4 10             	add    esp,0x10
c001bb13:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001bb17:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bb1b:	85 c0                	test   eax,eax
c001bb1d:	75 09                	jne    c001bb28 <FAT::seek(void*, unsigned long long)+0x50>
c001bb1f:	b8 00 00 00 00       	mov    eax,0x0
c001bb24:	eb 0a                	jmp    c001bb30 <FAT::seek(void*, unsigned long long)+0x58>
c001bb26:	66 90                	xchg   ax,ax
c001bb28:	b8 01 00 00 00       	mov    eax,0x1
c001bb2d:	8d 76 00             	lea    esi,[esi+0x0]
c001bb30:	83 c4 2c             	add    esp,0x2c
c001bb33:	c3                   	ret    

c001bb34 <fatWrapperReadDisk>:
c001bb34:	83 ec 1c             	sub    esp,0x1c
c001bb37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bb3b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001bb3f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001bb43:	89 04 24             	mov    DWORD PTR [esp],eax
c001bb46:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bb4a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bb4e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bb53:	8b 04 85 c0 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7b40]
c001bb5a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001bb5e:	83 ec 0c             	sub    esp,0xc
c001bb61:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bb65:	52                   	push   edx
c001bb66:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bb6a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bb6e:	50                   	push   eax
c001bb6f:	e8 10 3d ff ff       	call   c000f884 <LogicalDisk::read(unsigned long long, int, void*)>
c001bb74:	83 c4 20             	add    esp,0x20
c001bb77:	83 c4 1c             	add    esp,0x1c
c001bb7a:	c3                   	ret    
c001bb7b:	90                   	nop

c001bb7c <fatWrapperWriteDisk>:
c001bb7c:	83 ec 1c             	sub    esp,0x1c
c001bb7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bb83:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001bb87:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001bb8b:	89 04 24             	mov    DWORD PTR [esp],eax
c001bb8e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bb92:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bb96:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bb9b:	8b 04 85 c0 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7b40]
c001bba2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001bba6:	83 ec 0c             	sub    esp,0xc
c001bba9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bbad:	52                   	push   edx
c001bbae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bbb2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bbb6:	50                   	push   eax
c001bbb7:	e8 34 3d ff ff       	call   c000f8f0 <LogicalDisk::write(unsigned long long, int, void*)>
c001bbbc:	83 c4 20             	add    esp,0x20
c001bbbf:	83 c4 1c             	add    esp,0x1c
c001bbc2:	c3                   	ret    
c001bbc3:	90                   	nop

c001bbc4 <fatWrapperIoctl>:
c001bbc4:	53                   	push   ebx
c001bbc5:	83 ec 28             	sub    esp,0x28
c001bbc8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001bbcc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001bbd0:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001bbd4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001bbd8:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001bbdd:	75 31                	jne    c001bc10 <fatWrapperIoctl+0x4c>
c001bbdf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bbe3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001bbe7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bbec:	8b 04 85 c0 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7b40]
c001bbf3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001bbf9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001bbff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bc03:	66 89 02             	mov    WORD PTR [edx],ax
c001bc06:	b8 00 00 00 00       	mov    eax,0x0
c001bc0b:	e9 bc 00 00 00       	jmp    c001bccc <fatWrapperIoctl+0x108>
c001bc10:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001bc15:	75 6d                	jne    c001bc84 <fatWrapperIoctl+0xc0>
c001bc17:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bc1b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bc1f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bc24:	8b 04 85 c0 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7b40]
c001bc2b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001bc31:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001bc37:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001bc3d:	89 c8                	mov    eax,ecx
c001bc3f:	89 da                	mov    edx,ebx
c001bc41:	0f a4 c2 0a          	shld   edx,eax,0xa
c001bc45:	c1 e0 0a             	shl    eax,0xa
c001bc48:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001bc4d:	8b 0c 8d c0 84 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7b40]
c001bc54:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001bc5a:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001bc60:	89 cb                	mov    ebx,ecx
c001bc62:	c1 fb 1f             	sar    ebx,0x1f
c001bc65:	53                   	push   ebx
c001bc66:	51                   	push   ecx
c001bc67:	52                   	push   edx
c001bc68:	50                   	push   eax
c001bc69:	e8 b2 6a 00 00       	call   c0022720 <__udivdi3>
c001bc6e:	83 c4 10             	add    esp,0x10
c001bc71:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001bc75:	89 01                	mov    DWORD PTR [ecx],eax
c001bc77:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001bc7a:	b8 00 00 00 00       	mov    eax,0x0
c001bc7f:	eb 4b                	jmp    c001bccc <fatWrapperIoctl+0x108>
c001bc81:	8d 76 00             	lea    esi,[esi+0x0]
c001bc84:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001bc89:	75 09                	jne    c001bc94 <fatWrapperIoctl+0xd0>
c001bc8b:	b8 00 00 00 00       	mov    eax,0x0
c001bc90:	eb 3a                	jmp    c001bccc <fatWrapperIoctl+0x108>
c001bc92:	66 90                	xchg   ax,ax
c001bc94:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001bc99:	75 19                	jne    c001bcb4 <fatWrapperIoctl+0xf0>
c001bc9b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bc9f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bca3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bca7:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001bcad:	b8 00 00 00 00       	mov    eax,0x0
c001bcb2:	eb 18                	jmp    c001bccc <fatWrapperIoctl+0x108>
c001bcb4:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001bcb9:	75 09                	jne    c001bcc4 <fatWrapperIoctl+0x100>
c001bcbb:	b8 00 00 00 00       	mov    eax,0x0
c001bcc0:	eb 0a                	jmp    c001bccc <fatWrapperIoctl+0x108>
c001bcc2:	66 90                	xchg   ax,ax
c001bcc4:	b8 04 00 00 00       	mov    eax,0x4
c001bcc9:	8d 76 00             	lea    esi,[esi+0x0]
c001bccc:	83 c4 28             	add    esp,0x28
c001bccf:	5b                   	pop    ebx
c001bcd0:	c3                   	ret    
c001bcd1:	90                   	nop
c001bcd2:	66 90                	xchg   ax,ax

c001bcd4 <FAT::FAT()>:
c001bcd4:	83 ec 1c             	sub    esp,0x1c
c001bcd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bcdb:	83 ec 0c             	sub    esp,0xc
c001bcde:	50                   	push   eax
c001bcdf:	e8 f8 15 ff ff       	call   c000d2dc <Filesystem::Filesystem()>
c001bce4:	83 c4 10             	add    esp,0x10
c001bce7:	ba 14 64 02 c0       	mov    edx,0xc0026414
c001bcec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bcf0:	89 10                	mov    DWORD PTR [eax],edx
c001bcf2:	c7 05 20 95 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029520,0x0
c001bcfc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001bd04:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001bd09:	7f 15                	jg     c001bd20 <FAT::FAT()+0x4c>
c001bd0b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bd0f:	c7 04 85 40 95 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd6ac0],0xffffffff
c001bd1a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001bd1e:	eb e4                	jmp    c001bd04 <FAT::FAT()+0x30>
c001bd20:	90                   	nop
c001bd21:	83 c4 1c             	add    esp,0x1c
c001bd24:	c3                   	ret    
c001bd25:	90                   	nop
c001bd26:	66 90                	xchg   ax,ax

c001bd28 <FAT::fixFilepath(char*)>:
c001bd28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bd2c:	8a 00                	mov    al,BYTE PTR [eax]
c001bd2e:	3c 40                	cmp    al,0x40
c001bd30:	7e 2e                	jle    c001bd60 <FAT::fixFilepath(char*)+0x38>
c001bd32:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bd36:	8a 00                	mov    al,BYTE PTR [eax]
c001bd38:	83 e8 41             	sub    eax,0x41
c001bd3b:	88 c2                	mov    dl,al
c001bd3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bd41:	88 10                	mov    BYTE PTR [eax],dl
c001bd43:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bd47:	8a 00                	mov    al,BYTE PTR [eax]
c001bd49:	0f be c0             	movsx  eax,al
c001bd4c:	8b 04 85 40 95 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6ac0]
c001bd53:	83 c0 30             	add    eax,0x30
c001bd56:	88 c2                	mov    dl,al
c001bd58:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bd5c:	88 10                	mov    BYTE PTR [eax],dl
c001bd5e:	66 90                	xchg   ax,ax
c001bd60:	90                   	nop
c001bd61:	c3                   	ret    
c001bd62:	66 90                	xchg   ax,ax

c001bd64 <FAT::open(char const*, void**, FileOpenMode)>:
c001bd64:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001bd6a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001bd72:	74 0c                	je     c001bd80 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001bd74:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001bd7c:	75 0e                	jne    c001bd8c <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001bd7e:	66 90                	xchg   ax,ax
c001bd80:	b8 04 00 00 00       	mov    eax,0x4
c001bd85:	e9 06 01 00 00       	jmp    c001be90 <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001bd8a:	66 90                	xchg   ax,ax
c001bd8c:	83 ec 08             	sub    esp,0x8
c001bd8f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bd96:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bd9a:	50                   	push   eax
c001bd9b:	e8 98 49 fe ff       	call   c0000738 <strcpy>
c001bda0:	83 c4 10             	add    esp,0x10
c001bda3:	83 ec 08             	sub    esp,0x8
c001bda6:	8d 44 24 10          	lea    eax,[esp+0x10]
c001bdaa:	50                   	push   eax
c001bdab:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bdb2:	e8 71 ff ff ff       	call   c001bd28 <FAT::fixFilepath(char*)>
c001bdb7:	83 c4 10             	add    esp,0x10
c001bdba:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001bdc2:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001bdc9:	83 e0 01             	and    eax,0x1
c001bdcc:	74 0a                	je     c001bdd8 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c001bdce:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001bdd6:	66 90                	xchg   ax,ax
c001bdd8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001bddf:	83 e0 04             	and    eax,0x4
c001bde2:	74 10                	je     c001bdf4 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c001bde4:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001bdec:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001bdf4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001bdfb:	83 e0 02             	and    eax,0x2
c001bdfe:	74 08                	je     c001be08 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c001be00:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001be08:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001be0f:	83 e0 08             	and    eax,0x8
c001be12:	74 08                	je     c001be1c <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c001be14:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001be1c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001be23:	83 e0 10             	and    eax,0x10
c001be26:	74 08                	je     c001be30 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001be28:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001be30:	83 ec 0c             	sub    esp,0xc
c001be33:	68 50 02 00 00       	push   0x250
c001be38:	e8 7a de fe ff       	call   c0009cb7 <malloc>
c001be3d:	83 c4 10             	add    esp,0x10
c001be40:	89 c2                	mov    edx,eax
c001be42:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001be49:	89 10                	mov    DWORD PTR [eax],edx
c001be4b:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001be53:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001be5a:	8b 00                	mov    eax,DWORD PTR [eax]
c001be5c:	83 ec 04             	sub    esp,0x4
c001be5f:	52                   	push   edx
c001be60:	8d 54 24 10          	lea    edx,[esp+0x10]
c001be64:	52                   	push   edx
c001be65:	50                   	push   eax
c001be66:	e8 18 90 fe ff       	call   c0004e83 <f_open>
c001be6b:	83 c4 10             	add    esp,0x10
c001be6e:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001be75:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001be7d:	74 09                	je     c001be88 <FAT::open(char const*, void**, FileOpenMode)+0x124>
c001be7f:	b8 01 00 00 00       	mov    eax,0x1
c001be84:	eb 0a                	jmp    c001be90 <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001be86:	66 90                	xchg   ax,ax
c001be88:	b8 00 00 00 00       	mov    eax,0x0
c001be8d:	8d 76 00             	lea    esi,[esi+0x0]
c001be90:	81 c4 1c 01 00 00    	add    esp,0x11c
c001be96:	c3                   	ret    
c001be97:	90                   	nop

c001be98 <FAT::openDir(char const*, void**)>:
c001be98:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001be9e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001bea6:	74 0c                	je     c001beb4 <FAT::openDir(char const*, void**)+0x1c>
c001bea8:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001beb0:	75 0e                	jne    c001bec0 <FAT::openDir(char const*, void**)+0x28>
c001beb2:	66 90                	xchg   ax,ax
c001beb4:	b8 04 00 00 00       	mov    eax,0x4
c001beb9:	e9 82 00 00 00       	jmp    c001bf40 <FAT::openDir(char const*, void**)+0xa8>
c001bebe:	66 90                	xchg   ax,ax
c001bec0:	83 ec 08             	sub    esp,0x8
c001bec3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001beca:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bece:	50                   	push   eax
c001becf:	e8 64 48 fe ff       	call   c0000738 <strcpy>
c001bed4:	83 c4 10             	add    esp,0x10
c001bed7:	83 ec 08             	sub    esp,0x8
c001beda:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bede:	50                   	push   eax
c001bedf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bee6:	e8 3d fe ff ff       	call   c001bd28 <FAT::fixFilepath(char*)>
c001beeb:	83 c4 10             	add    esp,0x10
c001beee:	83 ec 0c             	sub    esp,0xc
c001bef1:	6a 4c                	push   0x4c
c001bef3:	e8 bf dd fe ff       	call   c0009cb7 <malloc>
c001bef8:	83 c4 10             	add    esp,0x10
c001befb:	89 c2                	mov    edx,eax
c001befd:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001bf04:	89 10                	mov    DWORD PTR [eax],edx
c001bf06:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001bf0d:	8b 00                	mov    eax,DWORD PTR [eax]
c001bf0f:	83 ec 08             	sub    esp,0x8
c001bf12:	8d 54 24 14          	lea    edx,[esp+0x14]
c001bf16:	52                   	push   edx
c001bf17:	50                   	push   eax
c001bf18:	e8 9e 9f fe ff       	call   c0005ebb <f_opendir>
c001bf1d:	83 c4 10             	add    esp,0x10
c001bf20:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001bf27:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001bf2f:	74 07                	je     c001bf38 <FAT::openDir(char const*, void**)+0xa0>
c001bf31:	b8 01 00 00 00       	mov    eax,0x1
c001bf36:	eb 08                	jmp    c001bf40 <FAT::openDir(char const*, void**)+0xa8>
c001bf38:	b8 00 00 00 00       	mov    eax,0x0
c001bf3d:	8d 76 00             	lea    esi,[esi+0x0]
c001bf40:	81 c4 1c 01 00 00    	add    esp,0x11c
c001bf46:	c3                   	ret    
c001bf47:	90                   	nop

c001bf48 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001bf48:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001bf4e:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001bf56:	75 0c                	jne    c001bf64 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001bf58:	b8 04 00 00 00       	mov    eax,0x4
c001bf5d:	e9 d2 00 00 00       	jmp    c001c034 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001bf62:	66 90                	xchg   ax,ax
c001bf64:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001bf6c:	75 0a                	jne    c001bf78 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001bf6e:	b8 04 00 00 00       	mov    eax,0x4
c001bf73:	e9 bc 00 00 00       	jmp    c001c034 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001bf78:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001bf80:	75 0a                	jne    c001bf8c <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001bf82:	b8 04 00 00 00       	mov    eax,0x4
c001bf87:	e9 a8 00 00 00       	jmp    c001c034 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001bf8c:	83 ec 08             	sub    esp,0x8
c001bf8f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001bf96:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001bf9d:	50                   	push   eax
c001bf9e:	e8 95 47 fe ff       	call   c0000738 <strcpy>
c001bfa3:	83 c4 10             	add    esp,0x10
c001bfa6:	83 ec 08             	sub    esp,0x8
c001bfa9:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001bfb0:	50                   	push   eax
c001bfb1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001bfb8:	e8 6b fd ff ff       	call   c001bd28 <FAT::fixFilepath(char*)>
c001bfbd:	83 c4 10             	add    esp,0x10
c001bfc0:	83 ec 08             	sub    esp,0x8
c001bfc3:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bfc7:	50                   	push   eax
c001bfc8:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001bfcf:	50                   	push   eax
c001bfd0:	e8 a5 a0 fe ff       	call   c000607a <f_stat>
c001bfd5:	83 c4 10             	add    esp,0x10
c001bfd8:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001bfdf:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001bfe6:	85 c0                	test   eax,eax
c001bfe8:	74 0a                	je     c001bff4 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001bfea:	83 f8 04             	cmp    eax,0x4
c001bfed:	74 35                	je     c001c024 <FAT::stat(char const*, unsigned long long*, bool*)+0xdc>
c001bfef:	eb 3b                	jmp    c001c02c <FAT::stat(char const*, unsigned long long*, bool*)+0xe4>
c001bff1:	8d 76 00             	lea    esi,[esi+0x0]
c001bff4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001bff8:	0f b6 c0             	movzx  eax,al
c001bffb:	83 e0 10             	and    eax,0x10
c001bffe:	0f 95 c2             	setne  dl
c001c001:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001c008:	88 10                	mov    BYTE PTR [eax],dl
c001c00a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c00d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c011:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001c018:	89 01                	mov    DWORD PTR [ecx],eax
c001c01a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001c01d:	b8 00 00 00 00       	mov    eax,0x0
c001c022:	eb 10                	jmp    c001c034 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001c024:	b8 02 00 00 00       	mov    eax,0x2
c001c029:	eb 09                	jmp    c001c034 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001c02b:	90                   	nop
c001c02c:	b8 01 00 00 00       	mov    eax,0x1
c001c031:	8d 76 00             	lea    esi,[esi+0x0]
c001c034:	81 c4 2c 02 00 00    	add    esp,0x22c
c001c03a:	c3                   	ret    
c001c03b:	90                   	nop

c001c03c <FAT::unlink(char const*)>:
c001c03c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c042:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c04a:	75 08                	jne    c001c054 <FAT::unlink(char const*)+0x18>
c001c04c:	b8 04 00 00 00       	mov    eax,0x4
c001c051:	eb 61                	jmp    c001c0b4 <FAT::unlink(char const*)+0x78>
c001c053:	90                   	nop
c001c054:	83 ec 08             	sub    esp,0x8
c001c057:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c05e:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c062:	50                   	push   eax
c001c063:	e8 d0 46 fe ff       	call   c0000738 <strcpy>
c001c068:	83 c4 10             	add    esp,0x10
c001c06b:	83 ec 08             	sub    esp,0x8
c001c06e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c072:	50                   	push   eax
c001c073:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c07a:	e8 a9 fc ff ff       	call   c001bd28 <FAT::fixFilepath(char*)>
c001c07f:	83 c4 10             	add    esp,0x10
c001c082:	83 ec 0c             	sub    esp,0xc
c001c085:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c089:	50                   	push   eax
c001c08a:	e8 3d a3 fe ff       	call   c00063cc <f_unlink>
c001c08f:	83 c4 10             	add    esp,0x10
c001c092:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001c099:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001c0a0:	85 c0                	test   eax,eax
c001c0a2:	75 08                	jne    c001c0ac <FAT::unlink(char const*)+0x70>
c001c0a4:	b8 00 00 00 00       	mov    eax,0x0
c001c0a9:	eb 09                	jmp    c001c0b4 <FAT::unlink(char const*)+0x78>
c001c0ab:	90                   	nop
c001c0ac:	b8 01 00 00 00       	mov    eax,0x1
c001c0b1:	8d 76 00             	lea    esi,[esi+0x0]
c001c0b4:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c0ba:	c3                   	ret    
c001c0bb:	90                   	nop

c001c0bc <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001c0bc:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001c0c2:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001c0c9:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001c0d0:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001c0d4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c0d8:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001c0e0:	75 0a                	jne    c001c0ec <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001c0e2:	b8 04 00 00 00       	mov    eax,0x4
c001c0e7:	e9 30 01 00 00       	jmp    c001c21c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001c0ec:	83 ec 08             	sub    esp,0x8
c001c0ef:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001c0f6:	8d 44 24 24          	lea    eax,[esp+0x24]
c001c0fa:	50                   	push   eax
c001c0fb:	e8 38 46 fe ff       	call   c0000738 <strcpy>
c001c100:	83 c4 10             	add    esp,0x10
c001c103:	83 ec 08             	sub    esp,0x8
c001c106:	8d 44 24 20          	lea    eax,[esp+0x20]
c001c10a:	50                   	push   eax
c001c10b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001c112:	e8 11 fc ff ff       	call   c001bd28 <FAT::fixFilepath(char*)>
c001c117:	83 c4 10             	add    esp,0x10
c001c11a:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001c122:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001c12a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c12f:	83 e0 01             	and    eax,0x1
c001c132:	74 08                	je     c001c13c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c001c134:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001c13c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c141:	83 e0 02             	and    eax,0x2
c001c144:	74 0a                	je     c001c150 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x94>
c001c146:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001c14e:	66 90                	xchg   ax,ax
c001c150:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c155:	83 e0 04             	and    eax,0x4
c001c158:	74 0a                	je     c001c164 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001c15a:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001c162:	66 90                	xchg   ax,ax
c001c164:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c169:	83 e0 08             	and    eax,0x8
c001c16c:	74 0a                	je     c001c178 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xbc>
c001c16e:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001c176:	66 90                	xchg   ax,ax
c001c178:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c17d:	83 e0 01             	and    eax,0x1
c001c180:	74 0a                	je     c001c18c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xd0>
c001c182:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001c18a:	66 90                	xchg   ax,ax
c001c18c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c191:	83 e0 02             	and    eax,0x2
c001c194:	74 0a                	je     c001c1a0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001c196:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001c19e:	66 90                	xchg   ax,ax
c001c1a0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c1a5:	83 e0 04             	and    eax,0x4
c001c1a8:	74 0a                	je     c001c1b4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xf8>
c001c1aa:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001c1b2:	66 90                	xchg   ax,ax
c001c1b4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c1b9:	83 e0 08             	and    eax,0x8
c001c1bc:	74 0a                	je     c001c1c8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x10c>
c001c1be:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001c1c6:	66 90                	xchg   ax,ax
c001c1c8:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001c1cf:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001c1d6:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001c1de:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001c1e6:	83 ec 04             	sub    esp,0x4
c001c1e9:	52                   	push   edx
c001c1ea:	50                   	push   eax
c001c1eb:	8d 44 24 24          	lea    eax,[esp+0x24]
c001c1ef:	50                   	push   eax
c001c1f0:	e8 79 a8 fe ff       	call   c0006a6e <f_chmod>
c001c1f5:	83 c4 10             	add    esp,0x10
c001c1f8:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001c1ff:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001c206:	85 c0                	test   eax,eax
c001c208:	75 0a                	jne    c001c214 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x158>
c001c20a:	b8 00 00 00 00       	mov    eax,0x0
c001c20f:	eb 0b                	jmp    c001c21c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001c211:	8d 76 00             	lea    esi,[esi+0x0]
c001c214:	b8 01 00 00 00       	mov    eax,0x1
c001c219:	8d 76 00             	lea    esi,[esi+0x0]
c001c21c:	81 c4 2c 01 00 00    	add    esp,0x12c
c001c222:	c3                   	ret    
c001c223:	90                   	nop

c001c224 <FAT::rename(char const*, char const*)>:
c001c224:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c22a:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001c232:	74 0c                	je     c001c240 <FAT::rename(char const*, char const*)+0x1c>
c001c234:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001c23c:	75 0e                	jne    c001c24c <FAT::rename(char const*, char const*)+0x28>
c001c23e:	66 90                	xchg   ax,ax
c001c240:	b8 04 00 00 00       	mov    eax,0x4
c001c245:	e9 9e 00 00 00       	jmp    c001c2e8 <FAT::rename(char const*, char const*)+0xc4>
c001c24a:	66 90                	xchg   ax,ax
c001c24c:	83 ec 08             	sub    esp,0x8
c001c24f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001c256:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001c25d:	50                   	push   eax
c001c25e:	e8 d5 44 fe ff       	call   c0000738 <strcpy>
c001c263:	83 c4 10             	add    esp,0x10
c001c266:	83 ec 08             	sub    esp,0x8
c001c269:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001c270:	50                   	push   eax
c001c271:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001c278:	e8 ab fa ff ff       	call   c001bd28 <FAT::fixFilepath(char*)>
c001c27d:	83 c4 10             	add    esp,0x10
c001c280:	83 ec 08             	sub    esp,0x8
c001c283:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001c28a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c28e:	50                   	push   eax
c001c28f:	e8 a4 44 fe ff       	call   c0000738 <strcpy>
c001c294:	83 c4 10             	add    esp,0x10
c001c297:	83 ec 08             	sub    esp,0x8
c001c29a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c29e:	50                   	push   eax
c001c29f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001c2a6:	e8 7d fa ff ff       	call   c001bd28 <FAT::fixFilepath(char*)>
c001c2ab:	83 c4 10             	add    esp,0x10
c001c2ae:	83 ec 08             	sub    esp,0x8
c001c2b1:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c2b5:	50                   	push   eax
c001c2b6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001c2bd:	50                   	push   eax
c001c2be:	e8 b8 a4 fe ff       	call   c000677b <f_rename>
c001c2c3:	83 c4 10             	add    esp,0x10
c001c2c6:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001c2cd:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001c2d4:	85 c0                	test   eax,eax
c001c2d6:	75 08                	jne    c001c2e0 <FAT::rename(char const*, char const*)+0xbc>
c001c2d8:	b8 00 00 00 00       	mov    eax,0x0
c001c2dd:	eb 09                	jmp    c001c2e8 <FAT::rename(char const*, char const*)+0xc4>
c001c2df:	90                   	nop
c001c2e0:	b8 01 00 00 00       	mov    eax,0x1
c001c2e5:	8d 76 00             	lea    esi,[esi+0x0]
c001c2e8:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c2ee:	c3                   	ret    
c001c2ef:	90                   	nop

c001c2f0 <FAT::mkdir(char const*)>:
c001c2f0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c2f6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c2fe:	75 08                	jne    c001c308 <FAT::mkdir(char const*)+0x18>
c001c300:	b8 04 00 00 00       	mov    eax,0x4
c001c305:	eb 61                	jmp    c001c368 <FAT::mkdir(char const*)+0x78>
c001c307:	90                   	nop
c001c308:	83 ec 08             	sub    esp,0x8
c001c30b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c312:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c316:	50                   	push   eax
c001c317:	e8 1c 44 fe ff       	call   c0000738 <strcpy>
c001c31c:	83 c4 10             	add    esp,0x10
c001c31f:	83 ec 08             	sub    esp,0x8
c001c322:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c326:	50                   	push   eax
c001c327:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c32e:	e8 f5 f9 ff ff       	call   c001bd28 <FAT::fixFilepath(char*)>
c001c333:	83 c4 10             	add    esp,0x10
c001c336:	83 ec 0c             	sub    esp,0xc
c001c339:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c33d:	50                   	push   eax
c001c33e:	e8 0c a2 fe ff       	call   c000654f <f_mkdir>
c001c343:	83 c4 10             	add    esp,0x10
c001c346:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001c34d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001c354:	85 c0                	test   eax,eax
c001c356:	75 08                	jne    c001c360 <FAT::mkdir(char const*)+0x70>
c001c358:	b8 00 00 00 00       	mov    eax,0x0
c001c35d:	eb 09                	jmp    c001c368 <FAT::mkdir(char const*)+0x78>
c001c35f:	90                   	nop
c001c360:	b8 01 00 00 00       	mov    eax,0x1
c001c365:	8d 76 00             	lea    esi,[esi+0x0]
c001c368:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c36e:	c3                   	ret    
c001c36f:	90                   	nop

c001c370 <FAT::exists(char const*)>:
c001c370:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001c376:	83 ec 08             	sub    esp,0x8
c001c379:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c380:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001c384:	50                   	push   eax
c001c385:	e8 ae 43 fe ff       	call   c0000738 <strcpy>
c001c38a:	83 c4 10             	add    esp,0x10
c001c38d:	83 ec 08             	sub    esp,0x8
c001c390:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c394:	50                   	push   eax
c001c395:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c39c:	e8 87 f9 ff ff       	call   c001bd28 <FAT::fixFilepath(char*)>
c001c3a1:	83 c4 10             	add    esp,0x10
c001c3a4:	83 ec 08             	sub    esp,0x8
c001c3a7:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001c3ae:	50                   	push   eax
c001c3af:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001c3b3:	50                   	push   eax
c001c3b4:	e8 c1 9c fe ff       	call   c000607a <f_stat>
c001c3b9:	83 c4 10             	add    esp,0x10
c001c3bc:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001c3c3:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001c3ca:	85 c0                	test   eax,eax
c001c3cc:	75 06                	jne    c001c3d4 <FAT::exists(char const*)+0x64>
c001c3ce:	b0 01                	mov    al,0x1
c001c3d0:	eb 06                	jmp    c001c3d8 <FAT::exists(char const*)+0x68>
c001c3d2:	66 90                	xchg   ax,ax
c001c3d4:	b0 00                	mov    al,0x0
c001c3d6:	66 90                	xchg   ax,ax
c001c3d8:	81 c4 2c 02 00 00    	add    esp,0x22c
c001c3de:	c3                   	ret    
c001c3df:	90                   	nop

c001c3e0 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001c3e0:	b8 08 00 00 00       	mov    eax,0x8
c001c3e5:	c3                   	ret    

c001c3e6 <ISO9660::seek(void*, unsigned long long)>:
c001c3e6:	53                   	push   ebx
c001c3e7:	b8 04 00 00 00       	mov    eax,0x4
c001c3ec:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c3f0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c3f4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001c3f8:	85 d2                	test   edx,edx
c001c3fa:	74 17                	je     c001c413 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001c3fc:	89 c8                	mov    eax,ecx
c001c3fe:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001c401:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001c404:	b8 01 00 00 00       	mov    eax,0x1
c001c409:	73 08                	jae    c001c413 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001c40b:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001c40e:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001c411:	31 c0                	xor    eax,eax
c001c413:	5b                   	pop    ebx
c001c414:	c3                   	ret    
c001c415:	90                   	nop

c001c416 <ISO9660::tell(void*, unsigned long long*)>:
c001c416:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c41a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c41e:	85 d2                	test   edx,edx
c001c420:	74 12                	je     c001c434 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001c422:	85 c0                	test   eax,eax
c001c424:	74 0e                	je     c001c434 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001c426:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c429:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001c42c:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001c42f:	89 10                	mov    DWORD PTR [eax],edx
c001c431:	31 c0                	xor    eax,eax
c001c433:	c3                   	ret    
c001c434:	b8 04 00 00 00       	mov    eax,0x4
c001c439:	c3                   	ret    

c001c43a <ISO9660::getName()>:
c001c43a:	b8 74 64 02 c0       	mov    eax,0xc0026474
c001c43f:	c3                   	ret    

c001c440 <ISO9660::stat(void*, unsigned long long*)>:
c001c440:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c444:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c448:	85 d2                	test   edx,edx
c001c44a:	74 12                	je     c001c45e <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001c44c:	85 c0                	test   eax,eax
c001c44e:	74 0e                	je     c001c45e <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001c450:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001c453:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001c456:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001c459:	89 10                	mov    DWORD PTR [eax],edx
c001c45b:	31 c0                	xor    eax,eax
c001c45d:	c3                   	ret    
c001c45e:	b8 04 00 00 00       	mov    eax,0x4
c001c463:	c3                   	ret    

c001c464 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001c464:	b8 01 00 00 00       	mov    eax,0x1
c001c469:	c3                   	ret    

c001c46a <ISO9660::unlink(char const*)>:
c001c46a:	b8 01 00 00 00       	mov    eax,0x1
c001c46f:	c3                   	ret    

c001c470 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001c470:	b8 01 00 00 00       	mov    eax,0x1
c001c475:	c3                   	ret    

c001c476 <ISO9660::rename(char const*, char const*)>:
c001c476:	b8 01 00 00 00       	mov    eax,0x1
c001c47b:	c3                   	ret    

c001c47c <ISO9660::mkdir(char const*)>:
c001c47c:	b8 01 00 00 00       	mov    eax,0x1
c001c481:	c3                   	ret    

c001c482 <ISO9660::close(void*)>:
c001c482:	83 ec 0c             	sub    esp,0xc
c001c485:	b8 04 00 00 00       	mov    eax,0x4
c001c48a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c48e:	85 d2                	test   edx,edx
c001c490:	74 0e                	je     c001c4a0 <ISO9660::close(void*)+0x1e>
c001c492:	83 ec 0c             	sub    esp,0xc
c001c495:	52                   	push   edx
c001c496:	e8 2c d8 fe ff       	call   c0009cc7 <free>
c001c49b:	83 c4 10             	add    esp,0x10
c001c49e:	31 c0                	xor    eax,eax
c001c4a0:	83 c4 0c             	add    esp,0xc
c001c4a3:	c3                   	ret    

c001c4a4 <ISO9660::closeDir(void*)>:
c001c4a4:	83 ec 0c             	sub    esp,0xc
c001c4a7:	b8 04 00 00 00       	mov    eax,0x4
c001c4ac:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c4b0:	85 d2                	test   edx,edx
c001c4b2:	74 0e                	je     c001c4c2 <ISO9660::closeDir(void*)+0x1e>
c001c4b4:	83 ec 0c             	sub    esp,0xc
c001c4b7:	52                   	push   edx
c001c4b8:	e8 0a d8 fe ff       	call   c0009cc7 <free>
c001c4bd:	83 c4 10             	add    esp,0x10
c001c4c0:	31 c0                	xor    eax,eax
c001c4c2:	83 c4 0c             	add    esp,0xc
c001c4c5:	c3                   	ret    

c001c4c6 <ISO9660::~ISO9660()>:
c001c4c6:	83 ec 0c             	sub    esp,0xc
c001c4c9:	ba 98 64 02 c0       	mov    edx,0xc0026498
c001c4ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4d2:	89 10                	mov    DWORD PTR [eax],edx
c001c4d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4d8:	83 ec 0c             	sub    esp,0xc
c001c4db:	50                   	push   eax
c001c4dc:	e8 1f 0e ff ff       	call   c000d300 <Filesystem::~Filesystem()>
c001c4e1:	83 c4 10             	add    esp,0x10
c001c4e4:	90                   	nop
c001c4e5:	83 c4 0c             	add    esp,0xc
c001c4e8:	c3                   	ret    
c001c4e9:	90                   	nop

c001c4ea <ISO9660::~ISO9660()>:
c001c4ea:	83 ec 0c             	sub    esp,0xc
c001c4ed:	83 ec 0c             	sub    esp,0xc
c001c4f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c4f4:	e8 cd ff ff ff       	call   c001c4c6 <ISO9660::~ISO9660()>
c001c4f9:	83 c4 10             	add    esp,0x10
c001c4fc:	83 ec 08             	sub    esp,0x8
c001c4ff:	6a 08                	push   0x8
c001c501:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c505:	e8 da 09 ff ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c001c50a:	83 c4 10             	add    esp,0x10
c001c50d:	83 c4 0c             	add    esp,0xc
c001c510:	c3                   	ret    

c001c511 <__memmem(unsigned char*, int, unsigned char*, int)>:
c001c511:	55                   	push   ebp
c001c512:	31 c9                	xor    ecx,ecx
c001c514:	57                   	push   edi
c001c515:	56                   	push   esi
c001c516:	53                   	push   ebx
c001c517:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c51b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001c51f:	89 eb                	mov    ebx,ebp
c001c521:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001c525:	39 ce                	cmp    esi,ecx
c001c527:	7e 17                	jle    c001c540 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001c529:	31 d2                	xor    edx,edx
c001c52b:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001c52f:	7d 13                	jge    c001c544 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001c531:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001c535:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001c538:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001c53b:	75 0d                	jne    c001c54a <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001c53d:	42                   	inc    edx
c001c53e:	eb eb                	jmp    c001c52b <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001c540:	31 c0                	xor    eax,eax
c001c542:	eb 0a                	jmp    c001c54e <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001c544:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001c548:	eb 04                	jmp    c001c54e <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001c54a:	41                   	inc    ecx
c001c54b:	43                   	inc    ebx
c001c54c:	eb d7                	jmp    c001c525 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001c54e:	5b                   	pop    ebx
c001c54f:	5e                   	pop    esi
c001c550:	5f                   	pop    edi
c001c551:	5d                   	pop    ebp
c001c552:	c3                   	ret    

c001c553 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001c553:	57                   	push   edi
c001c554:	56                   	push   esi
c001c555:	53                   	push   ebx
c001c556:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c55a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c55e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c562:	39 35 20 96 02 c0    	cmp    DWORD PTR ds:0xc0029620,esi
c001c568:	75 08                	jne    c001c572 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001c56a:	38 1d 40 79 02 c0    	cmp    BYTE PTR ds:0xc0027940,bl
c001c570:	74 4a                	je     c001c5bc <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c001c572:	83 ec 0c             	sub    esp,0xc
c001c575:	31 d2                	xor    edx,edx
c001c577:	68 40 96 02 c0       	push   0xc0029640
c001c57c:	0f be c3             	movsx  eax,bl
c001c57f:	6a 01                	push   0x1
c001c581:	52                   	push   edx
c001c582:	56                   	push   esi
c001c583:	ff 34 85 bc 83 02 c0 	push   DWORD PTR [eax*4-0x3ffd7c44]
c001c58a:	e8 f5 32 ff ff       	call   c000f884 <LogicalDisk::read(unsigned long long, int, void*)>
c001c58f:	83 c4 20             	add    esp,0x20
c001c592:	85 c0                	test   eax,eax
c001c594:	75 0e                	jne    c001c5a4 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c001c596:	89 35 20 96 02 c0    	mov    DWORD PTR ds:0xc0029620,esi
c001c59c:	88 1d 40 79 02 c0    	mov    BYTE PTR ds:0xc0027940,bl
c001c5a2:	eb 18                	jmp    c001c5bc <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c001c5a4:	50                   	push   eax
c001c5a5:	68 00 08 00 00       	push   0x800
c001c5aa:	6a 00                	push   0x0
c001c5ac:	57                   	push   edi
c001c5ad:	e8 ca 40 fe ff       	call   c000067c <memset>
c001c5b2:	83 c4 10             	add    esp,0x10
c001c5b5:	b8 01 00 00 00       	mov    eax,0x1
c001c5ba:	eb 0e                	jmp    c001c5ca <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x77>
c001c5bc:	be 40 96 02 c0       	mov    esi,0xc0029640
c001c5c1:	b9 00 08 00 00       	mov    ecx,0x800
c001c5c6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c5c8:	31 c0                	xor    eax,eax
c001c5ca:	5b                   	pop    ebx
c001c5cb:	5e                   	pop    esi
c001c5cc:	5f                   	pop    edi
c001c5cd:	c3                   	ret    

c001c5ce <ISO9660::tryMount(LogicalDisk*, int)>:
c001c5ce:	81 ec 10 08 00 00    	sub    esp,0x810
c001c5d4:	c7 05 20 96 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0029620,0xdeadbeef
c001c5de:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001c5e5:	83 c0 41             	add    eax,0x41
c001c5e8:	0f be c0             	movsx  eax,al
c001c5eb:	50                   	push   eax
c001c5ec:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c5f0:	50                   	push   eax
c001c5f1:	6a 10                	push   0x10
c001c5f3:	e8 5b ff ff ff       	call   c001c553 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c5f8:	83 c4 10             	add    esp,0x10
c001c5fb:	31 d2                	xor    edx,edx
c001c5fd:	85 c0                	test   eax,eax
c001c5ff:	75 24                	jne    c001c625 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001c601:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001c606:	75 1d                	jne    c001c625 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001c608:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001c60d:	75 16                	jne    c001c625 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001c60f:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001c614:	75 0f                	jne    c001c625 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001c616:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001c61b:	75 08                	jne    c001c625 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001c61d:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001c622:	0f 94 c2             	sete   dl
c001c625:	88 d0                	mov    al,dl
c001c627:	81 c4 0c 08 00 00    	add    esp,0x80c
c001c62d:	c3                   	ret    

c001c62e <ISO9660::read(void*, unsigned long, void*, int*)>:
c001c62e:	55                   	push   ebp
c001c62f:	57                   	push   edi
c001c630:	56                   	push   esi
c001c631:	53                   	push   ebx
c001c632:	81 ec 2c 08 00 00    	sub    esp,0x82c
c001c638:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c001c63f:	85 ed                	test   ebp,ebp
c001c641:	0f 84 da 01 00 00    	je     c001c821 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001c647:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001c64f:	0f 84 cc 01 00 00    	je     c001c821 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001c655:	b8 01 00 00 00       	mov    eax,0x1
c001c65a:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c001c65e:	0f 85 c2 01 00 00    	jne    c001c826 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001c664:	31 d2                	xor    edx,edx
c001c666:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001c66d:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001c670:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001c673:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001c676:	89 04 24             	mov    DWORD PTR [esp],eax
c001c679:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c67d:	01 c8                	add    eax,ecx
c001c67f:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001c682:	11 da                	adc    edx,ebx
c001c684:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001c688:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c68c:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001c690:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c694:	19 d7                	sbb    edi,edx
c001c696:	72 11                	jb     c001c6a9 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c001c698:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001c69b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001c69f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c6a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c6a7:	eb 0c                	jmp    c001c6b5 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c001c6a9:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c001c6ad:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c6b1:	29 ce                	sub    esi,ecx
c001c6b3:	19 df                	sbb    edi,ebx
c001c6b5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c6b8:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001c6bb:	0f a4 c2 0b          	shld   edx,eax,0xb
c001c6bf:	c1 e0 0b             	shl    eax,0xb
c001c6c2:	01 c8                	add    eax,ecx
c001c6c4:	11 da                	adc    edx,ebx
c001c6c6:	89 04 24             	mov    DWORD PTR [esp],eax
c001c6c9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c6cd:	51                   	push   ecx
c001c6ce:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c6d2:	50                   	push   eax
c001c6d3:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c001c6d7:	53                   	push   ebx
c001c6d8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c6dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c6e0:	0f ac d0 0b          	shrd   eax,edx,0xb
c001c6e4:	50                   	push   eax
c001c6e5:	e8 69 fe ff ff       	call   c001c553 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c6ea:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001c6ed:	b8 00 08 00 00       	mov    eax,0x800
c001c6f2:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001c6f8:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c001c6fc:	29 d0                	sub    eax,edx
c001c6fe:	83 c4 10             	add    esp,0x10
c001c701:	89 f9                	mov    ecx,edi
c001c703:	39 c6                	cmp    esi,eax
c001c705:	83 d9 00             	sbb    ecx,0x0
c001c708:	7d 1b                	jge    c001c725 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c001c70a:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001c70f:	75 12                	jne    c001c723 <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c001c711:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001c718:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c71e:	e9 fa 00 00 00       	jmp    c001c81d <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c001c723:	89 f0                	mov    eax,esi
c001c725:	01 d3                	add    ebx,edx
c001c727:	31 d2                	xor    edx,edx
c001c729:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001c72d:	39 c2                	cmp    edx,eax
c001c72f:	7d 14                	jge    c001c745 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c001c731:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c001c738:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001c73c:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c001c73f:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c001c742:	42                   	inc    edx
c001c743:	eb e8                	jmp    c001c72d <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c001c745:	89 c2                	mov    edx,eax
c001c747:	85 c0                	test   eax,eax
c001c749:	79 02                	jns    c001c74d <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c001c74b:	31 d2                	xor    edx,edx
c001c74d:	01 c2                	add    edx,eax
c001c74f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001c752:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c001c759:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001c75d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001c761:	99                   	cdq    
c001c762:	01 c1                	add    ecx,eax
c001c764:	11 d3                	adc    ebx,edx
c001c766:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001c76a:	29 c6                	sub    esi,eax
c001c76c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001c770:	19 d7                	sbb    edi,edx
c001c772:	89 34 24             	mov    DWORD PTR [esp],esi
c001c775:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c001c779:	b8 ff 07 00 00       	mov    eax,0x7ff
c001c77e:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001c781:	b8 00 00 00 00       	mov    eax,0x0
c001c786:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001c78a:	7d 43                	jge    c001c7cf <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c001c78c:	52                   	push   edx
c001c78d:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c791:	50                   	push   eax
c001c792:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c796:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c79a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c79e:	0f ac d0 0b          	shrd   eax,edx,0xb
c001c7a2:	50                   	push   eax
c001c7a3:	e8 ab fd ff ff       	call   c001c553 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c7a8:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001c7b0:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c001c7b5:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c001c7bd:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001c7c5:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001c7ca:	83 c4 10             	add    esp,0x10
c001c7cd:	eb aa                	jmp    c001c779 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c001c7cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7d3:	0b 04 24             	or     eax,DWORD PTR [esp]
c001c7d6:	74 2a                	je     c001c802 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c001c7d8:	50                   	push   eax
c001c7d9:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c7dd:	50                   	push   eax
c001c7de:	8d 74 24 28          	lea    esi,[esp+0x28]
c001c7e2:	56                   	push   esi
c001c7e3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c7e7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c7eb:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c001c7ef:	51                   	push   ecx
c001c7f0:	e8 5e fd ff ff       	call   c001c553 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c7f5:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c7f9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c7fd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c7ff:	83 c4 10             	add    esp,0x10
c001c802:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001c809:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001c80d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c811:	89 18                	mov    DWORD PTR [eax],ebx
c001c813:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c817:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001c81a:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001c81d:	31 c0                	xor    eax,eax
c001c81f:	eb 05                	jmp    c001c826 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001c821:	b8 04 00 00 00       	mov    eax,0x4
c001c826:	81 c4 2c 08 00 00    	add    esp,0x82c
c001c82c:	5b                   	pop    ebx
c001c82d:	5e                   	pop    esi
c001c82e:	5f                   	pop    edi
c001c82f:	5d                   	pop    ebp
c001c830:	c3                   	ret    
c001c831:	90                   	nop

c001c832 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001c832:	55                   	push   ebp
c001c833:	57                   	push   edi
c001c834:	56                   	push   esi
c001c835:	53                   	push   ebx
c001c836:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001c83c:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c001c843:	85 ed                	test   ebp,ebp
c001c845:	0f 84 51 02 00 00    	je     c001ca9c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001c84b:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001c853:	0f 84 43 02 00 00    	je     c001ca9c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001c859:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001c85c:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c001c85f:	75 0a                	jne    c001c86b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001c861:	b8 07 00 00 00       	mov    eax,0x7
c001c866:	e9 36 02 00 00       	jmp    c001caa1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001c86b:	50                   	push   eax
c001c86c:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c870:	50                   	push   eax
c001c871:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001c878:	53                   	push   ebx
c001c879:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c87c:	c1 e0 0b             	shl    eax,0xb
c001c87f:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c001c882:	c1 e8 0b             	shr    eax,0xb
c001c885:	50                   	push   eax
c001c886:	e8 c8 fc ff ff       	call   c001c553 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c88b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001c88e:	83 c4 10             	add    esp,0x10
c001c891:	89 c1                	mov    ecx,eax
c001c893:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c001c896:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001c89c:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001c89f:	84 db                	test   bl,bl
c001c8a1:	0f 85 8b 00 00 00    	jne    c001c932 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c001c8a7:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c001c8ad:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001c8b0:	81 e6 ff 07 00 00    	and    esi,0x7ff
c001c8b6:	29 c6                	sub    esi,eax
c001c8b8:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001c8bc:	89 f3                	mov    ebx,esi
c001c8be:	89 f1                	mov    ecx,esi
c001c8c0:	c1 fb 1f             	sar    ebx,0x1f
c001c8c3:	01 f0                	add    eax,esi
c001c8c5:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001c8c8:	11 da                	adc    edx,ebx
c001c8ca:	89 04 24             	mov    DWORD PTR [esp],eax
c001c8cd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c8d1:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001c8d4:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001c8d7:	89 d8                	mov    eax,ebx
c001c8d9:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c001c8dd:	ba 00 00 00 00       	mov    edx,0x0
c001c8e2:	19 f8                	sbb    eax,edi
c001c8e4:	b8 00 00 00 00       	mov    eax,0x0
c001c8e9:	73 08                	jae    c001c8f3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c001c8eb:	89 f0                	mov    eax,esi
c001c8ed:	89 fa                	mov    edx,edi
c001c8ef:	29 c8                	sub    eax,ecx
c001c8f1:	19 da                	sbb    edx,ebx
c001c8f3:	89 d7                	mov    edi,edx
c001c8f5:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001c8f8:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001c8fb:	09 c7                	or     edi,eax
c001c8fd:	0f 84 5e ff ff ff    	je     c001c861 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001c903:	57                   	push   edi
c001c904:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c908:	50                   	push   eax
c001c909:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001c910:	53                   	push   ebx
c001c911:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c914:	c1 e0 0b             	shl    eax,0xb
c001c917:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001c91b:	c1 e8 0b             	shr    eax,0xb
c001c91e:	50                   	push   eax
c001c91f:	e8 2f fc ff ff       	call   c001c553 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c924:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001c927:	83 c4 10             	add    esp,0x10
c001c92a:	25 ff 07 00 00       	and    eax,0x7ff
c001c92f:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001c932:	31 ff                	xor    edi,edi
c001c934:	56                   	push   esi
c001c935:	6a 28                	push   0x28
c001c937:	6a 00                	push   0x0
c001c939:	8d 44 24 24          	lea    eax,[esp+0x24]
c001c93d:	50                   	push   eax
c001c93e:	e8 39 3d fe ff       	call   c000067c <memset>
c001c943:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001c946:	25 ff 07 00 00       	and    eax,0x7ff
c001c94b:	89 c6                	mov    esi,eax
c001c94d:	83 c6 21             	add    esi,0x21
c001c950:	83 d7 00             	adc    edi,0x0
c001c953:	83 c4 10             	add    esp,0x10
c001c956:	31 c9                	xor    ecx,ecx
c001c958:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c001c95f:	83 f9 28             	cmp    ecx,0x28
c001c962:	88 04 24             	mov    BYTE PTR [esp],al
c001c965:	0f 94 c2             	sete   dl
c001c968:	88 d0                	mov    al,dl
c001c96a:	ba ff 07 00 00       	mov    edx,0x7ff
c001c96f:	39 f2                	cmp    edx,esi
c001c971:	ba 00 00 00 00       	mov    edx,0x0
c001c976:	19 fa                	sbb    edx,edi
c001c978:	0f 92 c2             	setb   dl
c001c97b:	09 c2                	or     edx,eax
c001c97d:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001c981:	0f 94 c0             	sete   al
c001c984:	08 d0                	or     al,dl
c001c986:	75 16                	jne    c001c99e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001c988:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001c98c:	74 10                	je     c001c99e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001c98e:	8a 04 24             	mov    al,BYTE PTR [esp]
c001c991:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001c995:	41                   	inc    ecx
c001c996:	83 c6 01             	add    esi,0x1
c001c999:	83 d7 00             	adc    edi,0x0
c001c99c:	eb ba                	jmp    c001c958 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c001c99e:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001c9a5:	83 ec 0c             	sub    esp,0xc
c001c9a8:	8d 74 24 24          	lea    esi,[esp+0x24]
c001c9ac:	56                   	push   esi
c001c9ad:	e8 e6 3c fe ff       	call   c0000698 <strlen>
c001c9b2:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c001c9b9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001c9bd:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001c9c5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001c9c8:	5a                   	pop    edx
c001c9c9:	25 ff 07 00 00       	and    eax,0x7ff
c001c9ce:	59                   	pop    ecx
c001c9cf:	01 f8                	add    eax,edi
c001c9d1:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001c9d7:	83 e0 02             	and    eax,0x2
c001c9da:	3c 01                	cmp    al,0x1
c001c9dc:	19 c0                	sbb    eax,eax
c001c9de:	83 c0 02             	add    eax,0x2
c001c9e1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001c9e5:	56                   	push   esi
c001c9e6:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001c9ea:	50                   	push   eax
c001c9eb:	e8 48 3d fe ff       	call   c0000738 <strcpy>
c001c9f0:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001c9f4:	83 c4 10             	add    esp,0x10
c001c9f7:	84 c0                	test   al,al
c001c9f9:	75 21                	jne    c001ca1c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c001c9fb:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001ca03:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001ca0b:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001ca13:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001ca1a:	eb 28                	jmp    c001ca44 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001ca1c:	fe c8                	dec    al
c001ca1e:	75 24                	jne    c001ca44 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001ca20:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001ca28:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001ca30:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001ca38:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001ca3f:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001ca44:	8d 74 24 40          	lea    esi,[esp+0x40]
c001ca48:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c001ca4f:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c001ca56:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ca58:	0f b6 f3             	movzx  esi,bl
c001ca5b:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c001ca62:	31 db                	xor    ebx,ebx
c001ca64:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001ca6a:	89 df                	mov    edi,ebx
c001ca6c:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c001ca6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ca72:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c001ca75:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001ca78:	39 c6                	cmp    esi,eax
c001ca7a:	19 d7                	sbb    edi,edx
c001ca7c:	72 10                	jb     c001ca8e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c001ca7e:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c001ca85:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c001ca8c:	eb 0a                	jmp    c001ca98 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c001ca8e:	29 f0                	sub    eax,esi
c001ca90:	19 da                	sbb    edx,ebx
c001ca92:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001ca95:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001ca98:	31 c0                	xor    eax,eax
c001ca9a:	eb 05                	jmp    c001caa1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001ca9c:	b8 04 00 00 00       	mov    eax,0x4
c001caa1:	81 c4 5c 09 00 00    	add    esp,0x95c
c001caa7:	5b                   	pop    ebx
c001caa8:	5e                   	pop    esi
c001caa9:	5f                   	pop    edi
c001caaa:	5d                   	pop    ebp
c001caab:	c3                   	ret    

c001caac <readRoot(unsigned int*, unsigned int*, char)>:
c001caac:	57                   	push   edi
c001caad:	56                   	push   esi
c001caae:	81 ec 38 08 00 00    	sub    esp,0x838
c001cab4:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001cabc:	50                   	push   eax
c001cabd:	8d 44 24 38          	lea    eax,[esp+0x38]
c001cac1:	50                   	push   eax
c001cac2:	6a 10                	push   0x10
c001cac4:	e8 8a fa ff ff       	call   c001c553 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001cac9:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c001cad0:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c001cad4:	b9 22 00 00 00       	mov    ecx,0x22
c001cad9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cadb:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001cae2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001cae6:	89 10                	mov    DWORD PTR [eax],edx
c001cae8:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001caef:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001caf3:	89 10                	mov    DWORD PTR [eax],edx
c001caf5:	81 c4 44 08 00 00    	add    esp,0x844
c001cafb:	b0 01                	mov    al,0x1
c001cafd:	5e                   	pop    esi
c001cafe:	5f                   	pop    edi
c001caff:	c3                   	ret    

c001cb00 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001cb00:	55                   	push   ebp
c001cb01:	57                   	push   edi
c001cb02:	56                   	push   esi
c001cb03:	53                   	push   ebx
c001cb04:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001cb0a:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001cb11:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001cb18:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cb1c:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001cb20:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001cb24:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001cb28:	75 03                	jne    c001cb2d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001cb2a:	83 c3 02             	add    ebx,0x2
c001cb2d:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001cb30:	75 03                	jne    c001cb35 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001cb32:	43                   	inc    ebx
c001cb33:	eb f8                	jmp    c001cb2d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001cb35:	52                   	push   edx
c001cb36:	68 00 01 00 00       	push   0x100
c001cb3b:	6a 00                	push   0x0
c001cb3d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cb41:	50                   	push   eax
c001cb42:	e8 35 3b fe ff       	call   c000067c <memset>
c001cb47:	83 c4 10             	add    esp,0x10
c001cb4a:	31 d2                	xor    edx,edx
c001cb4c:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001cb4f:	84 c0                	test   al,al
c001cb51:	74 21                	je     c001cb74 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001cb53:	3c 2f                	cmp    al,0x2f
c001cb55:	75 0b                	jne    c001cb62 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001cb57:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001cb5b:	bd 01 00 00 00       	mov    ebp,0x1
c001cb60:	eb 14                	jmp    c001cb76 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001cb62:	8d 48 9f             	lea    ecx,[eax-0x61]
c001cb65:	80 f9 19             	cmp    cl,0x19
c001cb68:	77 03                	ja     c001cb6d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001cb6a:	83 e8 20             	sub    eax,0x20
c001cb6d:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001cb71:	42                   	inc    edx
c001cb72:	eb d8                	jmp    c001cb4c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001cb74:	31 ed                	xor    ebp,ebp
c001cb76:	83 ec 0c             	sub    esp,0xc
c001cb79:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001cb80:	e8 32 d1 fe ff       	call   c0009cb7 <malloc>
c001cb85:	89 c6                	mov    esi,eax
c001cb87:	89 c2                	mov    edx,eax
c001cb89:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c001cb90:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001cb96:	c1 ef 0b             	shr    edi,0xb
c001cb99:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001cba0:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001cba4:	83 c4 10             	add    esp,0x10
c001cba7:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001cbac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cbb0:	3b 84 24 34 01 00 00 	cmp    eax,DWORD PTR [esp+0x134]
c001cbb7:	74 29                	je     c001cbe2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xe2>
c001cbb9:	50                   	push   eax
c001cbba:	57                   	push   edi
c001cbbb:	52                   	push   edx
c001cbbc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001cbc0:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001cbc7:	e8 87 f9 ff ff       	call   c001c553 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001cbcc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cbd0:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001cbd7:	81 c2 00 08 00 00    	add    edx,0x800
c001cbdd:	83 c4 10             	add    esp,0x10
c001cbe0:	eb ca                	jmp    c001cbac <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xac>
c001cbe2:	83 ec 0c             	sub    esp,0xc
c001cbe5:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001cbe9:	57                   	push   edi
c001cbea:	e8 a9 3a fe ff       	call   c0000698 <strlen>
c001cbef:	50                   	push   eax
c001cbf0:	57                   	push   edi
c001cbf1:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001cbf8:	56                   	push   esi
c001cbf9:	e8 13 f9 ff ff       	call   c001c511 <__memmem(unsigned char*, int, unsigned char*, int)>
c001cbfe:	83 c4 20             	add    esp,0x20
c001cc01:	85 c0                	test   eax,eax
c001cc03:	75 13                	jne    c001cc18 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x118>
c001cc05:	83 ec 0c             	sub    esp,0xc
c001cc08:	56                   	push   esi
c001cc09:	e8 b9 d0 fe ff       	call   c0009cc7 <free>
c001cc0e:	83 c4 10             	add    esp,0x10
c001cc11:	31 c0                	xor    eax,eax
c001cc13:	e9 b3 00 00 00       	jmp    c001cccb <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1cb>
c001cc18:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001cc1c:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001cc20:	c1 e7 08             	shl    edi,0x8
c001cc23:	c1 e2 10             	shl    edx,0x10
c001cc26:	09 d7                	or     edi,edx
c001cc28:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001cc2c:	09 d7                	or     edi,edx
c001cc2e:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001cc32:	c1 e2 18             	shl    edx,0x18
c001cc35:	09 d7                	or     edi,edx
c001cc37:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001cc3b:	89 d1                	mov    ecx,edx
c001cc3d:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001cc41:	c1 e1 08             	shl    ecx,0x8
c001cc44:	c1 e2 10             	shl    edx,0x10
c001cc47:	09 ca                	or     edx,ecx
c001cc49:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001cc4d:	09 ca                	or     edx,ecx
c001cc4f:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001cc53:	c1 e1 18             	shl    ecx,0x18
c001cc56:	09 ca                	or     edx,ecx
c001cc58:	89 e9                	mov    ecx,ebp
c001cc5a:	84 c9                	test   cl,cl
c001cc5c:	74 3c                	je     c001cc9a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x19a>
c001cc5e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001cc62:	83 ec 0c             	sub    esp,0xc
c001cc65:	56                   	push   esi
c001cc66:	e8 5c d0 fe ff       	call   c0009cc7 <free>
c001cc6b:	83 c4 0c             	add    esp,0xc
c001cc6e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001cc75:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001cc7a:	50                   	push   eax
c001cc7b:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001cc82:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001cc89:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cc8d:	52                   	push   edx
c001cc8e:	57                   	push   edi
c001cc8f:	53                   	push   ebx
c001cc90:	e8 6b fe ff ff       	call   c001cb00 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001cc95:	83 c4 20             	add    esp,0x20
c001cc98:	eb 31                	jmp    c001cccb <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1cb>
c001cc9a:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001cc9d:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001cca4:	d0 e8                	shr    al,1
c001cca6:	89 3b                	mov    DWORD PTR [ebx],edi
c001cca8:	83 e0 01             	and    eax,0x1
c001ccab:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001ccb2:	83 ec 0c             	sub    esp,0xc
c001ccb5:	89 13                	mov    DWORD PTR [ebx],edx
c001ccb7:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001ccbe:	89 03                	mov    DWORD PTR [ebx],eax
c001ccc0:	56                   	push   esi
c001ccc1:	e8 01 d0 fe ff       	call   c0009cc7 <free>
c001ccc6:	83 c4 10             	add    esp,0x10
c001ccc9:	b0 01                	mov    al,0x1
c001cccb:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ccd1:	5b                   	pop    ebx
c001ccd2:	5e                   	pop    esi
c001ccd3:	5f                   	pop    edi
c001ccd4:	5d                   	pop    ebp
c001ccd5:	c3                   	ret    

c001ccd6 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001ccd6:	55                   	push   ebp
c001ccd7:	57                   	push   edi
c001ccd8:	56                   	push   esi
c001ccd9:	53                   	push   ebx
c001ccda:	83 ec 20             	sub    esp,0x20
c001ccdd:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001cce1:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001cce5:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001cce9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ccf1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001ccf9:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001ccfe:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001cd04:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001cd0a:	57                   	push   edi
c001cd0b:	8d 44 24 14          	lea    eax,[esp+0x14]
c001cd0f:	50                   	push   eax
c001cd10:	8d 44 24 14          	lea    eax,[esp+0x14]
c001cd14:	50                   	push   eax
c001cd15:	e8 92 fd ff ff       	call   c001caac <readRoot(unsigned int*, unsigned int*, char)>
c001cd1a:	5a                   	pop    edx
c001cd1b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cd1f:	e8 74 39 fe ff       	call   c0000698 <strlen>
c001cd24:	83 c4 10             	add    esp,0x10
c001cd27:	83 f8 03             	cmp    eax,0x3
c001cd2a:	77 17                	ja     c001cd43 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001cd2c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cd30:	89 03                	mov    DWORD PTR [ebx],eax
c001cd32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cd36:	89 06                	mov    DWORD PTR [esi],eax
c001cd38:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001cd3f:	b0 01                	mov    al,0x1
c001cd41:	eb 19                	jmp    c001cd5c <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001cd43:	50                   	push   eax
c001cd44:	55                   	push   ebp
c001cd45:	57                   	push   edi
c001cd46:	56                   	push   esi
c001cd47:	53                   	push   ebx
c001cd48:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cd4c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cd50:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001cd54:	e8 a7 fd ff ff       	call   c001cb00 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001cd59:	83 c4 20             	add    esp,0x20
c001cd5c:	83 c4 1c             	add    esp,0x1c
c001cd5f:	5b                   	pop    ebx
c001cd60:	5e                   	pop    esi
c001cd61:	5f                   	pop    edi
c001cd62:	5d                   	pop    ebp
c001cd63:	c3                   	ret    

c001cd64 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001cd64:	57                   	push   edi
c001cd65:	56                   	push   esi
c001cd66:	53                   	push   ebx
c001cd67:	83 ec 10             	sub    esp,0x10
c001cd6a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001cd6e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001cd72:	85 ff                	test   edi,edi
c001cd74:	0f 84 8b 00 00 00    	je     c001ce05 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001cd7a:	85 f6                	test   esi,esi
c001cd7c:	0f 84 83 00 00 00    	je     c001ce05 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001cd82:	b8 03 00 00 00       	mov    eax,0x3
c001cd87:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c001cd8c:	75 7c                	jne    c001ce0a <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001cd8e:	83 ec 0c             	sub    esp,0xc
c001cd91:	6a 1c                	push   0x1c
c001cd93:	e8 1f cf fe ff       	call   c0009cb7 <malloc>
c001cd98:	89 07                	mov    DWORD PTR [edi],eax
c001cd9a:	89 c3                	mov    ebx,eax
c001cd9c:	58                   	pop    eax
c001cd9d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001cda1:	50                   	push   eax
c001cda2:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001cda5:	50                   	push   eax
c001cda6:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cdaa:	50                   	push   eax
c001cdab:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cdaf:	50                   	push   eax
c001cdb0:	56                   	push   esi
c001cdb1:	e8 20 ff ff ff       	call   c001ccd6 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001cdb6:	83 c4 20             	add    esp,0x20
c001cdb9:	84 c0                	test   al,al
c001cdbb:	74 07                	je     c001cdc4 <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c001cdbd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001cdc2:	74 0b                	je     c001cdcf <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c001cdc4:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001cdc8:	b8 01 00 00 00       	mov    eax,0x1
c001cdcd:	eb 3b                	jmp    c001ce0a <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001cdcf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cdd3:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001cdd7:	89 03                	mov    DWORD PTR [ebx],eax
c001cdd9:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001cde0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cde4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001cdeb:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001cdf2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001cdf5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001cdfc:	8a 06                	mov    al,BYTE PTR [esi]
c001cdfe:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001ce01:	31 c0                	xor    eax,eax
c001ce03:	eb 05                	jmp    c001ce0a <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001ce05:	b8 04 00 00 00       	mov    eax,0x4
c001ce0a:	83 c4 10             	add    esp,0x10
c001ce0d:	5b                   	pop    ebx
c001ce0e:	5e                   	pop    esi
c001ce0f:	5f                   	pop    edi
c001ce10:	c3                   	ret    
c001ce11:	90                   	nop

c001ce12 <ISO9660::exists(char const*)>:
c001ce12:	83 ec 28             	sub    esp,0x28
c001ce15:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ce19:	8d 54 24 18          	lea    edx,[esp+0x18]
c001ce1d:	52                   	push   edx
c001ce1e:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001ce21:	52                   	push   edx
c001ce22:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001ce26:	52                   	push   edx
c001ce27:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001ce2b:	52                   	push   edx
c001ce2c:	50                   	push   eax
c001ce2d:	e8 a4 fe ff ff       	call   c001ccd6 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001ce32:	83 c4 3c             	add    esp,0x3c
c001ce35:	c3                   	ret    

c001ce36 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001ce36:	56                   	push   esi
c001ce37:	53                   	push   ebx
c001ce38:	83 ec 14             	sub    esp,0x14
c001ce3b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001ce3f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001ce43:	85 db                	test   ebx,ebx
c001ce45:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001ce49:	0f 94 c2             	sete   dl
c001ce4c:	85 f6                	test   esi,esi
c001ce4e:	0f 94 c0             	sete   al
c001ce51:	08 c2                	or     dl,al
c001ce53:	75 68                	jne    c001cebd <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001ce55:	85 c9                	test   ecx,ecx
c001ce57:	74 64                	je     c001cebd <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001ce59:	83 ec 0c             	sub    esp,0xc
c001ce5c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001ce5f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ce63:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001ce69:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ce70:	50                   	push   eax
c001ce71:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001ce74:	50                   	push   eax
c001ce75:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ce79:	50                   	push   eax
c001ce7a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ce7e:	50                   	push   eax
c001ce7f:	51                   	push   ecx
c001ce80:	e8 51 fe ff ff       	call   c001ccd6 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001ce85:	83 c4 20             	add    esp,0x20
c001ce88:	ba 01 00 00 00       	mov    edx,0x1
c001ce8d:	84 c0                	test   al,al
c001ce8f:	74 31                	je     c001cec2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001ce91:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ce95:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ce9c:	89 03                	mov    DWORD PTR [ebx],eax
c001ce9e:	ba 00 00 00 00       	mov    edx,0x0
c001cea3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cea7:	85 c0                	test   eax,eax
c001cea9:	0f 95 06             	setne  BYTE PTR [esi]
c001ceac:	74 14                	je     c001cec2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001ceae:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001ceb4:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001cebb:	eb 05                	jmp    c001cec2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001cebd:	ba 04 00 00 00       	mov    edx,0x4
c001cec2:	83 c4 14             	add    esp,0x14
c001cec5:	89 d0                	mov    eax,edx
c001cec7:	5b                   	pop    ebx
c001cec8:	5e                   	pop    esi
c001cec9:	c3                   	ret    

c001ceca <ISO9660::openDir(char const*, void**)>:
c001ceca:	57                   	push   edi
c001cecb:	56                   	push   esi
c001cecc:	53                   	push   ebx
c001cecd:	83 ec 10             	sub    esp,0x10
c001ced0:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001ced4:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001ced8:	85 ff                	test   edi,edi
c001ceda:	74 7b                	je     c001cf57 <ISO9660::openDir(char const*, void**)+0x8d>
c001cedc:	85 f6                	test   esi,esi
c001cede:	74 77                	je     c001cf57 <ISO9660::openDir(char const*, void**)+0x8d>
c001cee0:	83 ec 0c             	sub    esp,0xc
c001cee3:	6a 1c                	push   0x1c
c001cee5:	e8 cd cd fe ff       	call   c0009cb7 <malloc>
c001ceea:	89 07                	mov    DWORD PTR [edi],eax
c001ceec:	89 c3                	mov    ebx,eax
c001ceee:	58                   	pop    eax
c001ceef:	8d 44 24 18          	lea    eax,[esp+0x18]
c001cef3:	50                   	push   eax
c001cef4:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001cef7:	50                   	push   eax
c001cef8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cefc:	50                   	push   eax
c001cefd:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cf01:	50                   	push   eax
c001cf02:	56                   	push   esi
c001cf03:	e8 ce fd ff ff       	call   c001ccd6 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001cf08:	83 c4 20             	add    esp,0x20
c001cf0b:	84 c0                	test   al,al
c001cf0d:	74 07                	je     c001cf16 <ISO9660::openDir(char const*, void**)+0x4c>
c001cf0f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001cf14:	75 0b                	jne    c001cf21 <ISO9660::openDir(char const*, void**)+0x57>
c001cf16:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001cf1a:	b8 01 00 00 00       	mov    eax,0x1
c001cf1f:	eb 3b                	jmp    c001cf5c <ISO9660::openDir(char const*, void**)+0x92>
c001cf21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cf25:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001cf29:	89 03                	mov    DWORD PTR [ebx],eax
c001cf2b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001cf32:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cf36:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001cf3d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001cf44:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001cf47:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001cf4e:	8a 06                	mov    al,BYTE PTR [esi]
c001cf50:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001cf53:	31 c0                	xor    eax,eax
c001cf55:	eb 05                	jmp    c001cf5c <ISO9660::openDir(char const*, void**)+0x92>
c001cf57:	b8 04 00 00 00       	mov    eax,0x4
c001cf5c:	83 c4 10             	add    esp,0x10
c001cf5f:	5b                   	pop    ebx
c001cf60:	5e                   	pop    esi
c001cf61:	5f                   	pop    edi
c001cf62:	c3                   	ret    
c001cf63:	90                   	nop

c001cf64 <ISO9660::ISO9660()>:
c001cf64:	83 ec 0c             	sub    esp,0xc
c001cf67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf6b:	83 ec 0c             	sub    esp,0xc
c001cf6e:	50                   	push   eax
c001cf6f:	e8 68 03 ff ff       	call   c000d2dc <Filesystem::Filesystem()>
c001cf74:	83 c4 10             	add    esp,0x10
c001cf77:	ba 98 64 02 c0       	mov    edx,0xc0026498
c001cf7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf80:	89 10                	mov    DWORD PTR [eax],edx
c001cf82:	90                   	nop
c001cf83:	83 c4 0c             	add    esp,0xc
c001cf86:	c3                   	ret    
c001cf87:	90                   	nop

c001cf88 <SoundCard::beginPlayback()>:
c001cf88:	c7 44 24 04 f8 64 02 c0 	mov    DWORD PTR [esp+0x4],0xc00264f8
c001cf90:	e9 46 70 ff ff       	jmp    c0013fdb <Krnl::panic(char const*)>
c001cf95:	90                   	nop

c001cf96 <SoundCard::stopPlayback()>:
c001cf96:	c7 44 24 04 2c 65 02 c0 	mov    DWORD PTR [esp+0x4],0xc002652c
c001cf9e:	e9 38 70 ff ff       	jmp    c0013fdb <Krnl::panic(char const*)>
c001cfa3:	90                   	nop

c001cfa4 <SoundCard::SoundCard(char const*)>:
c001cfa4:	83 ec 1c             	sub    esp,0x1c
c001cfa7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cfab:	83 ec 08             	sub    esp,0x8
c001cfae:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cfb2:	50                   	push   eax
c001cfb3:	e8 c2 16 ff ff       	call   c000e67a <Device::Device(char const*)>
c001cfb8:	83 c4 10             	add    esp,0x10
c001cfbb:	ba c4 65 02 c0       	mov    edx,0xc00265c4
c001cfc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cfc4:	89 10                	mov    DWORD PTR [eax],edx
c001cfc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cfca:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001cfd1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cfd5:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001cfdf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cfe3:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001cfed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cff1:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001cffb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cfff:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001d009:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d011:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001d016:	7f 19                	jg     c001d031 <SoundCard::SoundCard(char const*)+0x8d>
c001d018:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d01c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d020:	83 c2 54             	add    edx,0x54
c001d023:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001d02b:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001d02f:	eb e0                	jmp    c001d011 <SoundCard::SoundCard(char const*)+0x6d>
c001d031:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d035:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001d03c:	90                   	nop
c001d03d:	83 c4 1c             	add    esp,0x1c
c001d040:	c3                   	ret    
c001d041:	90                   	nop

c001d042 <SoundCard::~SoundCard()>:
c001d042:	83 ec 0c             	sub    esp,0xc
c001d045:	ba c4 65 02 c0       	mov    edx,0xc00265c4
c001d04a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d04e:	89 10                	mov    DWORD PTR [eax],edx
c001d050:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d054:	83 ec 0c             	sub    esp,0xc
c001d057:	50                   	push   eax
c001d058:	e8 e7 12 ff ff       	call   c000e344 <Device::~Device()>
c001d05d:	83 c4 10             	add    esp,0x10
c001d060:	90                   	nop
c001d061:	83 c4 0c             	add    esp,0xc
c001d064:	c3                   	ret    
c001d065:	90                   	nop

c001d066 <SoundCard::~SoundCard()>:
c001d066:	83 ec 0c             	sub    esp,0xc
c001d069:	83 ec 0c             	sub    esp,0xc
c001d06c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d070:	e8 cd ff ff ff       	call   c001d042 <SoundCard::~SoundCard()>
c001d075:	83 c4 10             	add    esp,0x10
c001d078:	83 ec 08             	sub    esp,0x8
c001d07b:	68 e8 01 00 00       	push   0x1e8
c001d080:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d084:	e8 5b fe fe ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c001d089:	83 c4 10             	add    esp,0x10
c001d08c:	83 c4 0c             	add    esp,0xc
c001d08f:	c3                   	ret    

c001d090 <SoundCard::configureRates(int, int, int)>:
c001d090:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d094:	31 c0                	xor    eax,eax
c001d096:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001d09d:	75 20                	jne    c001d0bf <SoundCard::configureRates(int, int, int)+0x2f>
c001d09f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d0a3:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001d0a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d0ad:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001d0b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d0b7:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001d0bd:	b0 01                	mov    al,0x1
c001d0bf:	c3                   	ret    

c001d0c0 <SoundCard::getSamples16(int, short*)>:
c001d0c0:	55                   	push   ebp
c001d0c1:	57                   	push   edi
c001d0c2:	31 ff                	xor    edi,edi
c001d0c4:	56                   	push   esi
c001d0c5:	53                   	push   ebx
c001d0c6:	31 db                	xor    ebx,ebx
c001d0c8:	83 ec 18             	sub    esp,0x18
c001d0cb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d0cf:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d0d3:	68 5f 65 02 c0       	push   0xc002655f
c001d0d8:	e8 e8 fe fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001d0dd:	83 c4 0c             	add    esp,0xc
c001d0e0:	8d 04 36             	lea    eax,[esi+esi*1]
c001d0e3:	50                   	push   eax
c001d0e4:	6a 00                	push   0x0
c001d0e6:	55                   	push   ebp
c001d0e7:	e8 90 35 fe ff       	call   c000067c <memset>
c001d0ec:	83 c4 10             	add    esp,0x10
c001d0ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d0f3:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001d0fa:	85 c0                	test   eax,eax
c001d0fc:	74 1b                	je     c001d119 <SoundCard::getSamples16(int, short*)+0x59>
c001d0fe:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001d102:	75 15                	jne    c001d119 <SoundCard::getSamples16(int, short*)+0x59>
c001d104:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d108:	55                   	push   ebp
c001d109:	56                   	push   esi
c001d10a:	50                   	push   eax
c001d10b:	e8 58 03 00 00       	call   c001d468 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001d110:	83 c4 10             	add    esp,0x10
c001d113:	39 c7                	cmp    edi,eax
c001d115:	7d 02                	jge    c001d119 <SoundCard::getSamples16(int, short*)+0x59>
c001d117:	89 c7                	mov    edi,eax
c001d119:	43                   	inc    ebx
c001d11a:	83 fb 20             	cmp    ebx,0x20
c001d11d:	75 d0                	jne    c001d0ef <SoundCard::getSamples16(int, short*)+0x2f>
c001d11f:	83 c4 0c             	add    esp,0xc
c001d122:	89 f8                	mov    eax,edi
c001d124:	5b                   	pop    ebx
c001d125:	5e                   	pop    esi
c001d126:	5f                   	pop    edi
c001d127:	5d                   	pop    ebp
c001d128:	c3                   	ret    
c001d129:	90                   	nop

c001d12a <SoundCard::getSamples32(int, int*)>:
c001d12a:	55                   	push   ebp
c001d12b:	57                   	push   edi
c001d12c:	31 ff                	xor    edi,edi
c001d12e:	56                   	push   esi
c001d12f:	31 f6                	xor    esi,esi
c001d131:	53                   	push   ebx
c001d132:	83 ec 10             	sub    esp,0x10
c001d135:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d139:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d13d:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001d141:	c1 e0 02             	shl    eax,0x2
c001d144:	50                   	push   eax
c001d145:	6a 00                	push   0x0
c001d147:	55                   	push   ebp
c001d148:	e8 2f 35 fe ff       	call   c000067c <memset>
c001d14d:	83 c4 10             	add    esp,0x10
c001d150:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001d157:	85 c0                	test   eax,eax
c001d159:	74 1b                	je     c001d176 <SoundCard::getSamples32(int, int*)+0x4c>
c001d15b:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001d15f:	75 15                	jne    c001d176 <SoundCard::getSamples32(int, int*)+0x4c>
c001d161:	53                   	push   ebx
c001d162:	55                   	push   ebp
c001d163:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d167:	50                   	push   eax
c001d168:	e8 f7 03 00 00       	call   c001d564 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001d16d:	83 c4 10             	add    esp,0x10
c001d170:	39 c6                	cmp    esi,eax
c001d172:	7d 02                	jge    c001d176 <SoundCard::getSamples32(int, int*)+0x4c>
c001d174:	89 c6                	mov    esi,eax
c001d176:	47                   	inc    edi
c001d177:	83 ff 20             	cmp    edi,0x20
c001d17a:	75 d4                	jne    c001d150 <SoundCard::getSamples32(int, int*)+0x26>
c001d17c:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c001d182:	85 f6                	test   esi,esi
c001d184:	75 0f                	jne    c001d195 <SoundCard::getSamples32(int, int*)+0x6b>
c001d186:	84 c0                	test   al,al
c001d188:	74 1b                	je     c001d1a5 <SoundCard::getSamples32(int, int*)+0x7b>
c001d18a:	83 ec 0c             	sub    esp,0xc
c001d18d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d18f:	53                   	push   ebx
c001d190:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001d193:	eb 0d                	jmp    c001d1a2 <SoundCard::getSamples32(int, int*)+0x78>
c001d195:	84 c0                	test   al,al
c001d197:	75 0c                	jne    c001d1a5 <SoundCard::getSamples32(int, int*)+0x7b>
c001d199:	83 ec 0c             	sub    esp,0xc
c001d19c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d19e:	53                   	push   ebx
c001d19f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d1a2:	83 c4 10             	add    esp,0x10
c001d1a5:	83 c4 0c             	add    esp,0xc
c001d1a8:	89 f0                	mov    eax,esi
c001d1aa:	5b                   	pop    ebx
c001d1ab:	5e                   	pop    esi
c001d1ac:	5f                   	pop    edi
c001d1ad:	5d                   	pop    ebp
c001d1ae:	c3                   	ret    
c001d1af:	90                   	nop

c001d1b0 <SoundCard::addChannel(SoundPort*)>:
c001d1b0:	56                   	push   esi
c001d1b1:	53                   	push   ebx
c001d1b2:	53                   	push   ebx
c001d1b3:	31 db                	xor    ebx,ebx
c001d1b5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d1b9:	83 bc 9e 58 01 00 00 00 	cmp    DWORD PTR [esi+ebx*4+0x158],0x0
c001d1c1:	74 27                	je     c001d1ea <SoundCard::addChannel(SoundPort*)+0x3a>
c001d1c3:	43                   	inc    ebx
c001d1c4:	83 fb 20             	cmp    ebx,0x20
c001d1c7:	75 f0                	jne    c001d1b9 <SoundCard::addChannel(SoundPort*)+0x9>
c001d1c9:	83 ec 0c             	sub    esp,0xc
c001d1cc:	83 cb ff             	or     ebx,0xffffffff
c001d1cf:	68 85 65 02 c0       	push   0xc0026585
c001d1d4:	e8 ec fd fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001d1d9:	c7 04 24 7e 65 02 c0 	mov    DWORD PTR [esp],0xc002657e
c001d1e0:	e8 f6 6d ff ff       	call   c0013fdb <Krnl::panic(char const*)>
c001d1e5:	83 c4 10             	add    esp,0x10
c001d1e8:	eb 1b                	jmp    c001d205 <SoundCard::addChannel(SoundPort*)+0x55>
c001d1ea:	51                   	push   ecx
c001d1eb:	51                   	push   ecx
c001d1ec:	53                   	push   ebx
c001d1ed:	68 9d 65 02 c0       	push   0xc002659d
c001d1f2:	e8 ce fd fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001d1f7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d1fb:	83 c4 10             	add    esp,0x10
c001d1fe:	89 84 9e 58 01 00 00 	mov    DWORD PTR [esi+ebx*4+0x158],eax
c001d205:	89 d8                	mov    eax,ebx
c001d207:	5a                   	pop    edx
c001d208:	5b                   	pop    ebx
c001d209:	5e                   	pop    esi
c001d20a:	c3                   	ret    
c001d20b:	90                   	nop

c001d20c <SoundCard::removeChannel(int)>:
c001d20c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d210:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d214:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001d21f:	c3                   	ret    

c001d220 <SoundPort::SoundPort(int, int, int, int)>:
c001d220:	83 ec 0c             	sub    esp,0xc
c001d223:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d227:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d22e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d232:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001d236:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d23a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d23e:	89 10                	mov    DWORD PTR [eax],edx
c001d240:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d244:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d248:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001d24b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d24f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d253:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001d256:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001d25b:	75 13                	jne    c001d270 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001d25d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d261:	8b 00                	mov    eax,DWORD PTR [eax]
c001d263:	05 a0 0f 00 00       	add    eax,0xfa0
c001d268:	01 c0                	add    eax,eax
c001d26a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d26e:	66 90                	xchg   ax,ax
c001d270:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d274:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d278:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001d27b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d27f:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001d286:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d28a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d28d:	c1 e0 02             	shl    eax,0x2
c001d290:	83 ec 0c             	sub    esp,0xc
c001d293:	50                   	push   eax
c001d294:	e8 1e ca fe ff       	call   c0009cb7 <malloc>
c001d299:	83 c4 10             	add    esp,0x10
c001d29c:	89 c2                	mov    edx,eax
c001d29e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2a2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d2a5:	90                   	nop
c001d2a6:	83 c4 0c             	add    esp,0xc
c001d2a9:	c3                   	ret    
c001d2aa:	66 90                	xchg   ax,ax

c001d2ac <SoundPort::~SoundPort()>:
c001d2ac:	83 ec 0c             	sub    esp,0xc
c001d2af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2b3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001d2b6:	85 c0                	test   eax,eax
c001d2b8:	74 1e                	je     c001d2d8 <SoundPort::~SoundPort()+0x2c>
c001d2ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2be:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001d2c1:	83 ec 0c             	sub    esp,0xc
c001d2c4:	50                   	push   eax
c001d2c5:	e8 fd c9 fe ff       	call   c0009cc7 <free>
c001d2ca:	83 c4 10             	add    esp,0x10
c001d2cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2d1:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d2d8:	90                   	nop
c001d2d9:	83 c4 0c             	add    esp,0xc
c001d2dc:	c3                   	ret    
c001d2dd:	90                   	nop
c001d2de:	66 90                	xchg   ax,ax

c001d2e0 <SoundPort::unpause()>:
c001d2e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d2e4:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001d2e8:	c3                   	ret    
c001d2e9:	90                   	nop
c001d2ea:	66 90                	xchg   ax,ax

c001d2ec <SoundPort::pause()>:
c001d2ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d2f0:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001d2f4:	c3                   	ret    
c001d2f5:	90                   	nop
c001d2f6:	66 90                	xchg   ax,ax

c001d2f8 <SoundPort::getBufferUsed()>:
c001d2f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d2fc:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001d2ff:	c3                   	ret    

c001d300 <SoundPort::getBufferSize()>:
c001d300:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d304:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d307:	c3                   	ret    

c001d308 <SoundPort::buffer16(short*, int)>:
c001d308:	55                   	push   ebp
c001d309:	57                   	push   edi
c001d30a:	56                   	push   esi
c001d30b:	53                   	push   ebx
c001d30c:	83 ec 1c             	sub    esp,0x1c
c001d30f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d313:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d317:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001d31a:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001d31d:	0f 84 85 00 00 00    	je     c001d3a8 <SoundPort::buffer16(short*, int)+0xa0>
c001d323:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001d327:	85 c9                	test   ecx,ecx
c001d329:	7e 7d                	jle    c001d3a8 <SoundPort::buffer16(short*, int)+0xa0>
c001d32b:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001d32f:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001d332:	c1 e1 0f             	shl    ecx,0xf
c001d335:	8d 70 01             	lea    esi,[eax+0x1]
c001d338:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001d33b:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001d33e:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d341:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d344:	74 6e                	je     c001d3b4 <SoundPort::buffer16(short*, int)+0xac>
c001d346:	31 f6                	xor    esi,esi
c001d348:	eb 22                	jmp    c001d36c <SoundPort::buffer16(short*, int)+0x64>
c001d34a:	66 90                	xchg   ax,ax
c001d34c:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001d351:	8d 79 01             	lea    edi,[ecx+0x1]
c001d354:	c1 e3 0f             	shl    ebx,0xf
c001d357:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001d35a:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001d35d:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001d360:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d363:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d366:	74 1c                	je     c001d384 <SoundPort::buffer16(short*, int)+0x7c>
c001d368:	89 c6                	mov    esi,eax
c001d36a:	66 90                	xchg   ax,ax
c001d36c:	8d 46 01             	lea    eax,[esi+0x1]
c001d36f:	39 44 24 38          	cmp    DWORD PTR [esp+0x38],eax
c001d373:	75 d7                	jne    c001d34c <SoundPort::buffer16(short*, int)+0x44>
c001d375:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d379:	83 c4 1c             	add    esp,0x1c
c001d37c:	5b                   	pop    ebx
c001d37d:	5e                   	pop    esi
c001d37e:	5f                   	pop    edi
c001d37f:	5d                   	pop    ebp
c001d380:	c3                   	ret    
c001d381:	8d 76 00             	lea    esi,[esi+0x0]
c001d384:	8d 46 02             	lea    eax,[esi+0x2]
c001d387:	90                   	nop
c001d388:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d38c:	83 ec 0c             	sub    esp,0xc
c001d38f:	68 f0 65 02 c0       	push   0xc00265f0
c001d394:	e8 2c fc fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001d399:	83 c4 10             	add    esp,0x10
c001d39c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d3a0:	83 c4 1c             	add    esp,0x1c
c001d3a3:	5b                   	pop    ebx
c001d3a4:	5e                   	pop    esi
c001d3a5:	5f                   	pop    edi
c001d3a6:	5d                   	pop    ebp
c001d3a7:	c3                   	ret    
c001d3a8:	83 c4 1c             	add    esp,0x1c
c001d3ab:	31 c0                	xor    eax,eax
c001d3ad:	5b                   	pop    ebx
c001d3ae:	5e                   	pop    esi
c001d3af:	5f                   	pop    edi
c001d3b0:	5d                   	pop    ebp
c001d3b1:	c3                   	ret    
c001d3b2:	66 90                	xchg   ax,ax
c001d3b4:	b8 01 00 00 00       	mov    eax,0x1
c001d3b9:	eb cd                	jmp    c001d388 <SoundPort::buffer16(short*, int)+0x80>
c001d3bb:	90                   	nop

c001d3bc <SoundPort::buffer32(int*, int)>:
c001d3bc:	55                   	push   ebp
c001d3bd:	57                   	push   edi
c001d3be:	56                   	push   esi
c001d3bf:	53                   	push   ebx
c001d3c0:	83 ec 1c             	sub    esp,0x1c
c001d3c3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d3c7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d3cb:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d3ce:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d3d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d3d6:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d3d9:	74 79                	je     c001d454 <SoundPort::buffer32(int*, int)+0x98>
c001d3db:	85 c0                	test   eax,eax
c001d3dd:	7e 75                	jle    c001d454 <SoundPort::buffer32(int*, int)+0x98>
c001d3df:	8d 71 01             	lea    esi,[ecx+0x1]
c001d3e2:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001d3e5:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001d3e8:	8b 37                	mov    esi,DWORD PTR [edi]
c001d3ea:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001d3ed:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d3f0:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d3f3:	74 6b                	je     c001d460 <SoundPort::buffer32(int*, int)+0xa4>
c001d3f5:	31 f6                	xor    esi,esi
c001d3f7:	eb 1f                	jmp    c001d418 <SoundPort::buffer32(int*, int)+0x5c>
c001d3f9:	8d 76 00             	lea    esi,[esi+0x0]
c001d3fc:	8d 69 01             	lea    ebp,[ecx+0x1]
c001d3ff:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001d402:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001d405:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d408:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001d40c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d40f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d412:	74 1c                	je     c001d430 <SoundPort::buffer32(int*, int)+0x74>
c001d414:	89 de                	mov    esi,ebx
c001d416:	66 90                	xchg   ax,ax
c001d418:	8d 5e 01             	lea    ebx,[esi+0x1]
c001d41b:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001d41f:	75 db                	jne    c001d3fc <SoundPort::buffer32(int*, int)+0x40>
c001d421:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d425:	83 c4 1c             	add    esp,0x1c
c001d428:	5b                   	pop    ebx
c001d429:	5e                   	pop    esi
c001d42a:	5f                   	pop    edi
c001d42b:	5d                   	pop    ebp
c001d42c:	c3                   	ret    
c001d42d:	8d 76 00             	lea    esi,[esi+0x0]
c001d430:	8d 46 02             	lea    eax,[esi+0x2]
c001d433:	90                   	nop
c001d434:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d438:	83 ec 0c             	sub    esp,0xc
c001d43b:	68 0b 66 02 c0       	push   0xc002660b
c001d440:	e8 80 fb fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001d445:	83 c4 10             	add    esp,0x10
c001d448:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d44c:	83 c4 1c             	add    esp,0x1c
c001d44f:	5b                   	pop    ebx
c001d450:	5e                   	pop    esi
c001d451:	5f                   	pop    edi
c001d452:	5d                   	pop    ebp
c001d453:	c3                   	ret    
c001d454:	83 c4 1c             	add    esp,0x1c
c001d457:	31 c0                	xor    eax,eax
c001d459:	5b                   	pop    ebx
c001d45a:	5e                   	pop    esi
c001d45b:	5f                   	pop    edi
c001d45c:	5d                   	pop    ebp
c001d45d:	c3                   	ret    
c001d45e:	66 90                	xchg   ax,ax
c001d460:	b8 01 00 00 00       	mov    eax,0x1
c001d465:	eb cd                	jmp    c001d434 <SoundPort::buffer32(int*, int)+0x78>
c001d467:	90                   	nop

c001d468 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001d468:	57                   	push   edi
c001d469:	56                   	push   esi
c001d46a:	53                   	push   ebx
c001d46b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d46f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001d473:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001d479:	39 03                	cmp    DWORD PTR [ebx],eax
c001d47b:	74 13                	je     c001d490 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001d47d:	83 ec 0c             	sub    esp,0xc
c001d480:	68 60 66 02 c0       	push   0xc0026660
c001d485:	e8 51 6b ff ff       	call   c0013fdb <Krnl::panic(char const*)>
c001d48a:	83 c4 10             	add    esp,0x10
c001d48d:	8d 76 00             	lea    esi,[esi+0x0]
c001d490:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001d496:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001d499:	74 11                	je     c001d4ac <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001d49b:	83 ec 0c             	sub    esp,0xc
c001d49e:	68 26 66 02 c0       	push   0xc0026626
c001d4a3:	e8 33 6b ff ff       	call   c0013fdb <Krnl::panic(char const*)>
c001d4a8:	83 c4 10             	add    esp,0x10
c001d4ab:	90                   	nop
c001d4ac:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001d4b2:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001d4b5:	74 11                	je     c001d4c8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001d4b7:	83 ec 0c             	sub    esp,0xc
c001d4ba:	68 26 66 02 c0       	push   0xc0026626
c001d4bf:	e8 17 6b ff ff       	call   c0013fdb <Krnl::panic(char const*)>
c001d4c4:	83 c4 10             	add    esp,0x10
c001d4c7:	90                   	nop
c001d4c8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d4cb:	89 c6                	mov    esi,eax
c001d4cd:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c001d4d1:	7e 05                	jle    c001d4d8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001d4d3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d4d7:	90                   	nop
c001d4d8:	85 f6                	test   esi,esi
c001d4da:	7e 30                	jle    c001d50c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001d4dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d4e0:	8d 3c 36             	lea    edi,[esi+esi*1]
c001d4e3:	31 c9                	xor    ecx,ecx
c001d4e5:	01 d7                	add    edi,edx
c001d4e7:	90                   	nop
c001d4e8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001d4eb:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001d4ee:	85 c0                	test   eax,eax
c001d4f0:	79 06                	jns    c001d4f8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001d4f2:	05 ff 7f 00 00       	add    eax,0x7fff
c001d4f7:	90                   	nop
c001d4f8:	c1 f8 0f             	sar    eax,0xf
c001d4fb:	83 c1 04             	add    ecx,0x4
c001d4fe:	66 01 02             	add    WORD PTR [edx],ax
c001d501:	83 c2 02             	add    edx,0x2
c001d504:	39 d7                	cmp    edi,edx
c001d506:	75 e0                	jne    c001d4e8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001d508:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d50b:	90                   	nop
c001d50c:	56                   	push   esi
c001d50d:	89 c2                	mov    edx,eax
c001d50f:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
c001d516:	29 f2                	sub    edx,esi
c001d518:	52                   	push   edx
c001d519:	50                   	push   eax
c001d51a:	68 80 66 02 c0       	push   0xc0026680
c001d51f:	e8 a1 fa fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001d524:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001d527:	50                   	push   eax
c001d528:	01 f8                	add    eax,edi
c001d52a:	50                   	push   eax
c001d52b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d52e:	29 f0                	sub    eax,esi
c001d530:	c1 e0 02             	shl    eax,0x2
c001d533:	50                   	push   eax
c001d534:	68 b0 66 02 c0       	push   0xc00266b0
c001d539:	e8 87 fa fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001d53e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001d541:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d544:	83 c4 1c             	add    esp,0x1c
c001d547:	01 d7                	add    edi,edx
c001d549:	29 f0                	sub    eax,esi
c001d54b:	c1 e0 02             	shl    eax,0x2
c001d54e:	50                   	push   eax
c001d54f:	57                   	push   edi
c001d550:	52                   	push   edx
c001d551:	e8 5e 30 fe ff       	call   c00005b4 <memmove>
c001d556:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c001d559:	83 c4 10             	add    esp,0x10
c001d55c:	89 f0                	mov    eax,esi
c001d55e:	5b                   	pop    ebx
c001d55f:	5e                   	pop    esi
c001d560:	5f                   	pop    edi
c001d561:	c3                   	ret    
c001d562:	66 90                	xchg   ax,ax

c001d564 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001d564:	57                   	push   edi
c001d565:	56                   	push   esi
c001d566:	53                   	push   ebx
c001d567:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d56b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001d56f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001d573:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001d579:	39 06                	cmp    DWORD PTR [esi],eax
c001d57b:	74 13                	je     c001d590 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001d57d:	83 ec 0c             	sub    esp,0xc
c001d580:	68 d4 66 02 c0       	push   0xc00266d4
c001d585:	e8 51 6a ff ff       	call   c0013fdb <Krnl::panic(char const*)>
c001d58a:	83 c4 10             	add    esp,0x10
c001d58d:	8d 76 00             	lea    esi,[esi+0x0]
c001d590:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001d596:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001d599:	74 11                	je     c001d5ac <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001d59b:	83 ec 0c             	sub    esp,0xc
c001d59e:	68 42 66 02 c0       	push   0xc0026642
c001d5a3:	e8 33 6a ff ff       	call   c0013fdb <Krnl::panic(char const*)>
c001d5a8:	83 c4 10             	add    esp,0x10
c001d5ab:	90                   	nop
c001d5ac:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001d5b2:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001d5b5:	74 11                	je     c001d5c8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001d5b7:	83 ec 0c             	sub    esp,0xc
c001d5ba:	68 42 66 02 c0       	push   0xc0026642
c001d5bf:	e8 17 6a ff ff       	call   c0013fdb <Krnl::panic(char const*)>
c001d5c4:	83 c4 10             	add    esp,0x10
c001d5c7:	90                   	nop
c001d5c8:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001d5cb:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001d5cf:	7e 07                	jle    c001d5d8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001d5d1:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d5d5:	8d 76 00             	lea    esi,[esi+0x0]
c001d5d8:	85 ff                	test   edi,edi
c001d5da:	7e 1c                	jle    c001d5f8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001d5dc:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001d5e3:	31 c0                	xor    eax,eax
c001d5e5:	8d 76 00             	lea    esi,[esi+0x0]
c001d5e8:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001d5eb:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001d5ee:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001d5f1:	83 c0 04             	add    eax,0x4
c001d5f4:	39 c1                	cmp    ecx,eax
c001d5f6:	75 f0                	jne    c001d5e8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001d5f8:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001d5fb:	50                   	push   eax
c001d5fc:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d5ff:	29 f8                	sub    eax,edi
c001d601:	c1 e0 02             	shl    eax,0x2
c001d604:	50                   	push   eax
c001d605:	8d 04 ba             	lea    eax,[edx+edi*4]
c001d608:	50                   	push   eax
c001d609:	52                   	push   edx
c001d60a:	e8 a5 2f fe ff       	call   c00005b4 <memmove>
c001d60f:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c001d612:	83 c4 10             	add    esp,0x10
c001d615:	89 f8                	mov    eax,edi
c001d617:	5b                   	pop    ebx
c001d618:	5e                   	pop    esi
c001d619:	5f                   	pop    edi
c001d61a:	c3                   	ret    
c001d61b:	90                   	nop

c001d61c <PCI::open(int, int, void*)>:
c001d61c:	83 ec 18             	sub    esp,0x18
c001d61f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d623:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d627:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d62d:	8b 10                	mov    edx,DWORD PTR [eax]
c001d62f:	50                   	push   eax
c001d630:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001d633:	31 c0                	xor    eax,eax
c001d635:	83 c4 1c             	add    esp,0x1c
c001d638:	c3                   	ret    
c001d639:	90                   	nop

c001d63a <PCI::close(int, int, void*)>:
c001d63a:	31 c0                	xor    eax,eax
c001d63c:	c3                   	ret    
c001d63d:	90                   	nop

c001d63e <PCI::PCI()>:
c001d63e:	83 ec 0c             	sub    esp,0xc
c001d641:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d645:	83 ec 08             	sub    esp,0x8
c001d648:	68 f3 66 02 c0       	push   0xc00266f3
c001d64d:	50                   	push   eax
c001d64e:	e8 49 07 ff ff       	call   c000dd9c <Bus::Bus(char const*)>
c001d653:	83 c4 10             	add    esp,0x10
c001d656:	ba c8 68 02 c0       	mov    edx,0xc00268c8
c001d65b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d65f:	89 10                	mov    DWORD PTR [eax],edx
c001d661:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d665:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001d66f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d673:	a3 40 9e 02 c0       	mov    ds:0xc0029e40,eax
c001d678:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d67c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d682:	0f b6 d0             	movzx  edx,al
c001d685:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d689:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001d690:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d694:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d69a:	0f b6 d0             	movzx  edx,al
c001d69d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6a1:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001d6a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6aa:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d6b0:	8d 50 01             	lea    edx,[eax+0x1]
c001d6b3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d6b7:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001d6bd:	0f b6 d0             	movzx  edx,al
c001d6c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6c4:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001d6c8:	83 c9 c0             	or     ecx,0xffffffc0
c001d6cb:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001d6cf:	90                   	nop
c001d6d0:	83 c4 0c             	add    esp,0xc
c001d6d3:	c3                   	ret    

c001d6d4 <PCI::readBAR8(unsigned int, int)>:
c001d6d4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d6d8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d6dc:	f6 c2 01             	test   dl,0x1
c001d6df:	74 07                	je     c001d6e8 <PCI::readBAR8(unsigned int, int)+0x14>
c001d6e1:	83 e2 fc             	and    edx,0xfffffffc
c001d6e4:	01 c2                	add    edx,eax
c001d6e6:	ec                   	in     al,dx
c001d6e7:	c3                   	ret    
c001d6e8:	83 e2 f0             	and    edx,0xfffffff0
c001d6eb:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001d6ee:	c3                   	ret    
c001d6ef:	90                   	nop

c001d6f0 <PCI::readBAR16(unsigned int, int)>:
c001d6f0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d6f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d6f8:	f6 c2 01             	test   dl,0x1
c001d6fb:	74 08                	je     c001d705 <PCI::readBAR16(unsigned int, int)+0x15>
c001d6fd:	83 e2 fc             	and    edx,0xfffffffc
c001d700:	01 c2                	add    edx,eax
c001d702:	66 ed                	in     ax,dx
c001d704:	c3                   	ret    
c001d705:	83 e2 f0             	and    edx,0xfffffff0
c001d708:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001d70c:	c3                   	ret    
c001d70d:	90                   	nop

c001d70e <PCI::readBAR32(unsigned int, int)>:
c001d70e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d712:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d716:	f6 c2 01             	test   dl,0x1
c001d719:	74 07                	je     c001d722 <PCI::readBAR32(unsigned int, int)+0x14>
c001d71b:	83 e2 fc             	and    edx,0xfffffffc
c001d71e:	01 c2                	add    edx,eax
c001d720:	ed                   	in     eax,dx
c001d721:	c3                   	ret    
c001d722:	83 e2 f0             	and    edx,0xfffffff0
c001d725:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001d728:	c3                   	ret    
c001d729:	90                   	nop

c001d72a <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001d72a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d72e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d732:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d736:	f6 c2 01             	test   dl,0x1
c001d739:	74 07                	je     c001d742 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001d73b:	83 e2 fc             	and    edx,0xfffffffc
c001d73e:	01 ca                	add    edx,ecx
c001d740:	ee                   	out    dx,al
c001d741:	c3                   	ret    
c001d742:	83 e2 f0             	and    edx,0xfffffff0
c001d745:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001d748:	c3                   	ret    
c001d749:	90                   	nop

c001d74a <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001d74a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d74e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d752:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d756:	f6 c2 01             	test   dl,0x1
c001d759:	74 08                	je     c001d763 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001d75b:	83 e2 fc             	and    edx,0xfffffffc
c001d75e:	01 ca                	add    edx,ecx
c001d760:	66 ef                	out    dx,ax
c001d762:	c3                   	ret    
c001d763:	83 e2 f0             	and    edx,0xfffffff0
c001d766:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001d76a:	c3                   	ret    
c001d76b:	90                   	nop

c001d76c <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001d76c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d770:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d774:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d778:	f6 c2 01             	test   dl,0x1
c001d77b:	74 07                	je     c001d784 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001d77d:	83 e2 fc             	and    edx,0xfffffffc
c001d780:	01 ca                	add    edx,ecx
c001d782:	ef                   	out    dx,eax
c001d783:	c3                   	ret    
c001d784:	83 e2 f0             	and    edx,0xfffffff0
c001d787:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001d78a:	c3                   	ret    
c001d78b:	90                   	nop

c001d78c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d78c:	55                   	push   ebp
c001d78d:	57                   	push   edi
c001d78e:	56                   	push   esi
c001d78f:	53                   	push   ebx
c001d790:	83 ec 0c             	sub    esp,0xc
c001d793:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d797:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001d79b:	89 f0                	mov    eax,esi
c001d79d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001d7a1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d7a5:	3c 07                	cmp    al,0x7
c001d7a7:	76 10                	jbe    c001d7b9 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001d7a9:	83 ec 0c             	sub    esp,0xc
c001d7ac:	68 fb 66 02 c0       	push   0xc00266fb
c001d7b1:	e8 25 68 ff ff       	call   c0013fdb <Krnl::panic(char const*)>
c001d7b6:	83 c4 10             	add    esp,0x10
c001d7b9:	80 fb 0f             	cmp    bl,0xf
c001d7bc:	76 10                	jbe    c001d7ce <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c001d7be:	83 ec 0c             	sub    esp,0xc
c001d7c1:	68 2b 67 02 c0       	push   0xc002672b
c001d7c6:	e8 10 68 ff ff       	call   c0013fdb <Krnl::panic(char const*)>
c001d7cb:	83 c4 10             	add    esp,0x10
c001d7ce:	8d 04 36             	lea    eax,[esi+esi*1]
c001d7d1:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d7d6:	83 c8 f0             	or     eax,0xfffffff0
c001d7d9:	ee                   	out    dx,al
c001d7da:	ba fa 0c 00 00       	mov    edx,0xcfa
c001d7df:	89 e8                	mov    eax,ebp
c001d7e1:	ee                   	out    dx,al
c001d7e2:	83 c4 0c             	add    esp,0xc
c001d7e5:	89 d8                	mov    eax,ebx
c001d7e7:	66 81 e7 fc 00       	and    di,0xfc
c001d7ec:	5b                   	pop    ebx
c001d7ed:	c1 e0 08             	shl    eax,0x8
c001d7f0:	5e                   	pop    esi
c001d7f1:	09 f8                	or     eax,edi
c001d7f3:	5f                   	pop    edi
c001d7f4:	66 0d 00 c0          	or     ax,0xc000
c001d7f8:	5d                   	pop    ebp
c001d7f9:	c3                   	ret    

c001d7fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d7fa:	57                   	push   edi
c001d7fb:	56                   	push   esi
c001d7fc:	53                   	push   ebx
c001d7fd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d801:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d805:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001d80b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d80f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d813:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d817:	83 ff 01             	cmp    edi,0x1
c001d81a:	75 3e                	jne    c001d85a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c001d81c:	89 de                	mov    esi,ebx
c001d81e:	0f b6 c0             	movzx  eax,al
c001d821:	81 e6 fc 00 00 00    	and    esi,0xfc
c001d827:	c1 e0 10             	shl    eax,0x10
c001d82a:	0f b6 c9             	movzx  ecx,cl
c001d82d:	09 f0                	or     eax,esi
c001d82f:	c1 e1 08             	shl    ecx,0x8
c001d832:	0f b6 d2             	movzx  edx,dl
c001d835:	09 c8                	or     eax,ecx
c001d837:	c1 e2 0b             	shl    edx,0xb
c001d83a:	09 d0                	or     eax,edx
c001d83c:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d841:	0d 00 00 00 80       	or     eax,0x80000000
c001d846:	ef                   	out    dx,eax
c001d847:	ba fc 0c 00 00       	mov    edx,0xcfc
c001d84c:	ed                   	in     eax,dx
c001d84d:	83 e3 02             	and    ebx,0x2
c001d850:	0f b6 cb             	movzx  ecx,bl
c001d853:	c1 e1 03             	shl    ecx,0x3
c001d856:	d3 e8                	shr    eax,cl
c001d858:	eb 43                	jmp    c001d89d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001d85a:	83 ff 02             	cmp    edi,0x2
c001d85d:	75 2c                	jne    c001d88b <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c001d85f:	83 ec 0c             	sub    esp,0xc
c001d862:	0f b6 c9             	movzx  ecx,cl
c001d865:	0f b6 d2             	movzx  edx,dl
c001d868:	0f b6 fb             	movzx  edi,bl
c001d86b:	0f b6 c0             	movzx  eax,al
c001d86e:	57                   	push   edi
c001d86f:	51                   	push   ecx
c001d870:	52                   	push   edx
c001d871:	50                   	push   eax
c001d872:	56                   	push   esi
c001d873:	e8 14 ff ff ff       	call   c001d78c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d878:	89 c2                	mov    edx,eax
c001d87a:	ed                   	in     eax,dx
c001d87b:	83 e3 02             	and    ebx,0x2
c001d87e:	83 c4 20             	add    esp,0x20
c001d881:	0f b6 cb             	movzx  ecx,bl
c001d884:	c1 e1 03             	shl    ecx,0x3
c001d887:	d3 e8                	shr    eax,cl
c001d889:	eb 12                	jmp    c001d89d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001d88b:	83 ec 0c             	sub    esp,0xc
c001d88e:	68 5b 67 02 c0       	push   0xc002675b
c001d893:	e8 43 67 ff ff       	call   c0013fdb <Krnl::panic(char const*)>
c001d898:	83 c4 10             	add    esp,0x10
c001d89b:	31 c0                	xor    eax,eax
c001d89d:	5b                   	pop    ebx
c001d89e:	5e                   	pop    esi
c001d89f:	5f                   	pop    edi
c001d8a0:	c3                   	ret    
c001d8a1:	90                   	nop

c001d8a2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001d8a2:	83 ec 18             	sub    esp,0x18
c001d8a5:	6a 00                	push   0x0
c001d8a7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d8ac:	50                   	push   eax
c001d8ad:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d8b2:	50                   	push   eax
c001d8b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d8b8:	50                   	push   eax
c001d8b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d8bd:	e8 38 ff ff ff       	call   c001d7fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d8c2:	83 c4 2c             	add    esp,0x2c
c001d8c5:	c3                   	ret    

c001d8c6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001d8c6:	83 ec 18             	sub    esp,0x18
c001d8c9:	6a 0e                	push   0xe
c001d8cb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d8d0:	50                   	push   eax
c001d8d1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d8d6:	50                   	push   eax
c001d8d7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d8dc:	50                   	push   eax
c001d8dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d8e1:	e8 14 ff ff ff       	call   c001d7fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d8e6:	83 c4 2c             	add    esp,0x2c
c001d8e9:	0f b6 c0             	movzx  eax,al
c001d8ec:	c3                   	ret    
c001d8ed:	90                   	nop

c001d8ee <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001d8ee:	55                   	push   ebp
c001d8ef:	57                   	push   edi
c001d8f0:	56                   	push   esi
c001d8f1:	53                   	push   ebx
c001d8f2:	83 ec 18             	sub    esp,0x18
c001d8f5:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001d8fa:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001d8ff:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001d904:	6a 0a                	push   0xa
c001d906:	56                   	push   esi
c001d907:	55                   	push   ebp
c001d908:	57                   	push   edi
c001d909:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d90d:	e8 e8 fe ff ff       	call   c001d7fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d912:	83 c4 14             	add    esp,0x14
c001d915:	89 c3                	mov    ebx,eax
c001d917:	6a 0a                	push   0xa
c001d919:	0f b6 db             	movzx  ebx,bl
c001d91c:	56                   	push   esi
c001d91d:	55                   	push   ebp
c001d91e:	57                   	push   edi
c001d91f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d923:	e8 d2 fe ff ff       	call   c001d7fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d928:	83 c4 2c             	add    esp,0x2c
c001d92b:	25 00 ff 00 00       	and    eax,0xff00
c001d930:	09 d8                	or     eax,ebx
c001d932:	5b                   	pop    ebx
c001d933:	5e                   	pop    esi
c001d934:	5f                   	pop    edi
c001d935:	5d                   	pop    ebp
c001d936:	c3                   	ret    
c001d937:	90                   	nop

c001d938 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001d938:	83 ec 18             	sub    esp,0x18
c001d93b:	6a 08                	push   0x8
c001d93d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d942:	50                   	push   eax
c001d943:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d948:	50                   	push   eax
c001d949:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d94e:	50                   	push   eax
c001d94f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d953:	e8 a2 fe ff ff       	call   c001d7fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d958:	83 c4 2c             	add    esp,0x2c
c001d95b:	0f b6 c4             	movzx  eax,ah
c001d95e:	c3                   	ret    
c001d95f:	90                   	nop

c001d960 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001d960:	83 ec 18             	sub    esp,0x18
c001d963:	6a 08                	push   0x8
c001d965:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d96a:	50                   	push   eax
c001d96b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d970:	50                   	push   eax
c001d971:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d976:	50                   	push   eax
c001d977:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d97b:	e8 7a fe ff ff       	call   c001d7fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d980:	83 c4 2c             	add    esp,0x2c
c001d983:	c3                   	ret    

c001d984 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001d984:	83 ec 18             	sub    esp,0x18
c001d987:	6a 3c                	push   0x3c
c001d989:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d98e:	50                   	push   eax
c001d98f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d994:	50                   	push   eax
c001d995:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d99a:	50                   	push   eax
c001d99b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d99f:	e8 56 fe ff ff       	call   c001d7fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d9a4:	83 c4 2c             	add    esp,0x2c
c001d9a7:	c3                   	ret    

c001d9a8 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001d9a8:	83 ec 18             	sub    esp,0x18
c001d9ab:	6a 18                	push   0x18
c001d9ad:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d9b2:	50                   	push   eax
c001d9b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d9b8:	50                   	push   eax
c001d9b9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d9be:	50                   	push   eax
c001d9bf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d9c3:	e8 32 fe ff ff       	call   c001d7fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d9c8:	83 c4 2c             	add    esp,0x2c
c001d9cb:	0f b6 c4             	movzx  eax,ah
c001d9ce:	c3                   	ret    
c001d9cf:	90                   	nop

c001d9d0 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d9d0:	55                   	push   ebp
c001d9d1:	57                   	push   edi
c001d9d2:	56                   	push   esi
c001d9d3:	53                   	push   ebx
c001d9d4:	83 ec 28             	sub    esp,0x28
c001d9d7:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001d9db:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001d9e0:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001d9e5:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001d9ea:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001d9f1:	8d 43 12             	lea    eax,[ebx+0x12]
c001d9f4:	83 c3 10             	add    ebx,0x10
c001d9f7:	0f b6 c0             	movzx  eax,al
c001d9fa:	0f b6 db             	movzx  ebx,bl
c001d9fd:	50                   	push   eax
c001d9fe:	51                   	push   ecx
c001d9ff:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001da03:	57                   	push   edi
c001da04:	55                   	push   ebp
c001da05:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001da09:	e8 ec fd ff ff       	call   c001d7fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001da0e:	83 c4 14             	add    esp,0x14
c001da11:	89 c6                	mov    esi,eax
c001da13:	53                   	push   ebx
c001da14:	c1 e6 10             	shl    esi,0x10
c001da17:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001da1b:	51                   	push   ecx
c001da1c:	57                   	push   edi
c001da1d:	55                   	push   ebp
c001da1e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001da22:	e8 d3 fd ff ff       	call   c001d7fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001da27:	83 c4 3c             	add    esp,0x3c
c001da2a:	0f b7 c0             	movzx  eax,ax
c001da2d:	5b                   	pop    ebx
c001da2e:	09 f0                	or     eax,esi
c001da30:	5e                   	pop    esi
c001da31:	5f                   	pop    edi
c001da32:	5d                   	pop    ebp
c001da33:	c3                   	ret    

c001da34 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001da34:	55                   	push   ebp
c001da35:	57                   	push   edi
c001da36:	56                   	push   esi
c001da37:	53                   	push   ebx
c001da38:	83 ec 0c             	sub    esp,0xc
c001da3b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001da3f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001da43:	89 f5                	mov    ebp,esi
c001da45:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001da4b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001da4f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001da53:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001da57:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001da5b:	83 f9 01             	cmp    ecx,0x1
c001da5e:	75 5d                	jne    c001dabd <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001da60:	0f b6 c8             	movzx  ecx,al
c001da63:	0f b6 d2             	movzx  edx,dl
c001da66:	c1 e1 10             	shl    ecx,0x10
c001da69:	c1 e2 0b             	shl    edx,0xb
c001da6c:	89 f0                	mov    eax,esi
c001da6e:	25 fc 00 00 00       	and    eax,0xfc
c001da73:	09 c1                	or     ecx,eax
c001da75:	89 e8                	mov    eax,ebp
c001da77:	0f b6 c0             	movzx  eax,al
c001da7a:	c1 e0 08             	shl    eax,0x8
c001da7d:	09 c1                	or     ecx,eax
c001da7f:	09 d1                	or     ecx,edx
c001da81:	ba f8 0c 00 00       	mov    edx,0xcf8
c001da86:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001da8c:	89 c8                	mov    eax,ecx
c001da8e:	ef                   	out    dx,eax
c001da8f:	ba fc 0c 00 00       	mov    edx,0xcfc
c001da94:	ed                   	in     eax,dx
c001da95:	0f b7 db             	movzx  ebx,bx
c001da98:	83 e6 02             	and    esi,0x2
c001da9b:	74 0a                	je     c001daa7 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001da9d:	0f b7 d0             	movzx  edx,ax
c001daa0:	c1 e3 10             	shl    ebx,0x10
c001daa3:	09 d3                	or     ebx,edx
c001daa5:	eb 05                	jmp    c001daac <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001daa7:	66 31 c0             	xor    ax,ax
c001daaa:	09 c3                	or     ebx,eax
c001daac:	ba f8 0c 00 00       	mov    edx,0xcf8
c001dab1:	89 c8                	mov    eax,ecx
c001dab3:	ef                   	out    dx,eax
c001dab4:	ba fc 0c 00 00       	mov    edx,0xcfc
c001dab9:	89 d8                	mov    eax,ebx
c001dabb:	eb 41                	jmp    c001dafe <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001dabd:	83 f9 02             	cmp    ecx,0x2
c001dac0:	75 45                	jne    c001db07 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001dac2:	83 ec 0c             	sub    esp,0xc
c001dac5:	0f b6 d2             	movzx  edx,dl
c001dac8:	89 f1                	mov    ecx,esi
c001daca:	0f b6 c0             	movzx  eax,al
c001dacd:	0f b6 f1             	movzx  esi,cl
c001dad0:	89 e9                	mov    ecx,ebp
c001dad2:	56                   	push   esi
c001dad3:	0f b6 c9             	movzx  ecx,cl
c001dad6:	51                   	push   ecx
c001dad7:	52                   	push   edx
c001dad8:	50                   	push   eax
c001dad9:	57                   	push   edi
c001dada:	e8 ad fc ff ff       	call   c001d78c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dadf:	89 c2                	mov    edx,eax
c001dae1:	ed                   	in     eax,dx
c001dae2:	83 c4 20             	add    esp,0x20
c001dae5:	0f b7 db             	movzx  ebx,bx
c001dae8:	f6 c2 02             	test   dl,0x2
c001daeb:	74 0c                	je     c001daf9 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001daed:	0f b7 c8             	movzx  ecx,ax
c001daf0:	89 d8                	mov    eax,ebx
c001daf2:	c1 e0 10             	shl    eax,0x10
c001daf5:	09 c8                	or     eax,ecx
c001daf7:	eb 05                	jmp    c001dafe <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001daf9:	66 31 c0             	xor    ax,ax
c001dafc:	09 d8                	or     eax,ebx
c001dafe:	ef                   	out    dx,eax
c001daff:	83 c4 0c             	add    esp,0xc
c001db02:	5b                   	pop    ebx
c001db03:	5e                   	pop    esi
c001db04:	5f                   	pop    edi
c001db05:	5d                   	pop    ebp
c001db06:	c3                   	ret    
c001db07:	c7 44 24 20 5b 67 02 c0 	mov    DWORD PTR [esp+0x20],0xc002675b
c001db0f:	83 c4 0c             	add    esp,0xc
c001db12:	5b                   	pop    ebx
c001db13:	5e                   	pop    esi
c001db14:	5f                   	pop    edi
c001db15:	5d                   	pop    ebp
c001db16:	e9 c0 64 ff ff       	jmp    c0013fdb <Krnl::panic(char const*)>
c001db1b:	90                   	nop

c001db1c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001db1c:	55                   	push   ebp
c001db1d:	57                   	push   edi
c001db1e:	56                   	push   esi
c001db1f:	53                   	push   ebx
c001db20:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001db26:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c001db2d:	75 0f                	jne    c001db3e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x22>
c001db2f:	80 3d 4c 9e 02 c0 00 	cmp    BYTE PTR ds:0xc0029e4c,0x0
c001db36:	0f 85 fa 00 00 00    	jne    c001dc36 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x11a>
c001db3c:	eb 2f                	jmp    c001db6d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x51>
c001db3e:	83 ec 0c             	sub    esp,0xc
c001db41:	68 61 67 02 c0       	push   0xc0026761
c001db46:	e8 c6 c1 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001db4b:	83 c4 10             	add    esp,0x10
c001db4e:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c001db55:	75 d8                	jne    c001db2f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x13>
c001db57:	e4 60                	in     al,0x60
c001db59:	3c 1c                	cmp    al,0x1c
c001db5b:	74 04                	je     c001db61 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001db5d:	3c 5a                	cmp    al,0x5a
c001db5f:	75 f6                	jne    c001db57 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3b>
c001db61:	e4 60                	in     al,0x60
c001db63:	3c 5a                	cmp    al,0x5a
c001db65:	74 fa                	je     c001db61 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001db67:	3c 1c                	cmp    al,0x1c
c001db69:	74 f6                	je     c001db61 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001db6b:	eb c2                	jmp    c001db2f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x13>
c001db6d:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c001db74:	0f 85 86 00 00 00    	jne    c001dc00 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xe4>
c001db7a:	83 ec 0c             	sub    esp,0xc
c001db7d:	68 14 01 00 00       	push   0x114
c001db82:	e8 30 c1 fe ff       	call   c0009cb7 <malloc>
c001db87:	83 c4 0c             	add    esp,0xc
c001db8a:	89 c3                	mov    ebx,eax
c001db8c:	ff 35 50 94 02 c0    	push   DWORD PTR ds:0xc0029450
c001db92:	68 7b 67 02 c0       	push   0xc002677b
c001db97:	50                   	push   eax
c001db98:	e8 93 f9 fe ff       	call   c000d530 <File::File(char const*, Process*)>
c001db9d:	5a                   	pop    edx
c001db9e:	59                   	pop    ecx
c001db9f:	6a 01                	push   0x1
c001dba1:	53                   	push   ebx
c001dba2:	e8 63 fa fe ff       	call   c000d60a <File::open(FileOpenMode)>
c001dba7:	83 c4 0c             	add    esp,0xc
c001dbaa:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c001dbae:	50                   	push   eax
c001dbaf:	8d 44 24 28          	lea    eax,[esp+0x28]
c001dbb3:	50                   	push   eax
c001dbb4:	53                   	push   ebx
c001dbb5:	e8 fc fc fe ff       	call   c000d8b6 <File::stat(unsigned long long*, bool*)>
c001dbba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbbe:	40                   	inc    eax
c001dbbf:	89 04 24             	mov    DWORD PTR [esp],eax
c001dbc2:	e8 f0 c0 fe ff       	call   c0009cb7 <malloc>
c001dbc7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001dbcb:	a3 48 9e 02 c0       	mov    ds:0xc0029e48,eax
c001dbd0:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001dbd4:	5e                   	pop    esi
c001dbd5:	8b 13                	mov    edx,DWORD PTR [ebx]
c001dbd7:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c001dbdb:	51                   	push   ecx
c001dbdc:	50                   	push   eax
c001dbdd:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001dbe1:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001dbe5:	53                   	push   ebx
c001dbe6:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001dbe9:	83 c4 14             	add    esp,0x14
c001dbec:	53                   	push   ebx
c001dbed:	e8 76 fa fe ff       	call   c000d668 <File::close()>
c001dbf2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbf6:	83 c4 10             	add    esp,0x10
c001dbf9:	a3 44 9e 02 c0       	mov    ds:0xc0029e44,eax
c001dbfe:	eb 36                	jmp    c001dc36 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x11a>
c001dc00:	83 ec 0c             	sub    esp,0xc
c001dc03:	68 94 67 02 c0       	push   0xc0026794
c001dc08:	e8 04 c1 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001dc0d:	83 c4 10             	add    esp,0x10
c001dc10:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c001dc17:	0f 85 5d ff ff ff    	jne    c001db7a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x5e>
c001dc1d:	e4 60                	in     al,0x60
c001dc1f:	3c 1c                	cmp    al,0x1c
c001dc21:	74 04                	je     c001dc27 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001dc23:	3c 5a                	cmp    al,0x5a
c001dc25:	75 f6                	jne    c001dc1d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x101>
c001dc27:	e4 60                	in     al,0x60
c001dc29:	3c 5a                	cmp    al,0x5a
c001dc2b:	74 fa                	je     c001dc27 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001dc2d:	3c 1c                	cmp    al,0x1c
c001dc2f:	74 f6                	je     c001dc27 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001dc31:	e9 44 ff ff ff       	jmp    c001db7a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x5e>
c001dc36:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c001dc3d:	75 0b                	jne    c001dc4a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x12e>
c001dc3f:	31 f6                	xor    esi,esi
c001dc41:	31 db                	xor    ebx,ebx
c001dc43:	31 ed                	xor    ebp,ebp
c001dc45:	e9 a3 01 00 00       	jmp    c001dded <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001dc4a:	83 ec 0c             	sub    esp,0xc
c001dc4d:	68 a6 67 02 c0       	push   0xc00267a6
c001dc52:	e8 ba c0 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001dc57:	8b 15 20 7f 02 c0    	mov    edx,DWORD PTR ds:0xc0027f20
c001dc5d:	83 c4 10             	add    esp,0x10
c001dc60:	f6 c2 80             	test   dl,0x80
c001dc63:	74 0c                	je     c001dc71 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x155>
c001dc65:	0f ba e2 0b          	bt     edx,0xb
c001dc69:	72 1a                	jb     c001dc85 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x169>
c001dc6b:	eb d2                	jmp    c001dc3f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001dc6d:	3c 5a                	cmp    al,0x5a
c001dc6f:	74 0c                	je     c001dc7d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001dc71:	e4 60                	in     al,0x60
c001dc73:	3c 1c                	cmp    al,0x1c
c001dc75:	75 f6                	jne    c001dc6d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x151>
c001dc77:	eb 04                	jmp    c001dc7d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001dc79:	3c 1c                	cmp    al,0x1c
c001dc7b:	75 e8                	jne    c001dc65 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x149>
c001dc7d:	e4 60                	in     al,0x60
c001dc7f:	3c 5a                	cmp    al,0x5a
c001dc81:	74 fa                	je     c001dc7d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001dc83:	eb f4                	jmp    c001dc79 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x15d>
c001dc85:	83 ec 0c             	sub    esp,0xc
c001dc88:	68 ab 67 02 c0       	push   0xc00267ab
c001dc8d:	e8 7f c0 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001dc92:	83 c4 10             	add    esp,0x10
c001dc95:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c001dc9c:	75 a1                	jne    c001dc3f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001dc9e:	e4 60                	in     al,0x60
c001dca0:	3c 5a                	cmp    al,0x5a
c001dca2:	74 04                	je     c001dca8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001dca4:	3c 1c                	cmp    al,0x1c
c001dca6:	75 f6                	jne    c001dc9e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x182>
c001dca8:	e4 60                	in     al,0x60
c001dcaa:	3c 5a                	cmp    al,0x5a
c001dcac:	74 fa                	je     c001dca8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001dcae:	3c 1c                	cmp    al,0x1c
c001dcb0:	74 f6                	je     c001dca8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001dcb2:	eb 8b                	jmp    c001dc3f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001dcb4:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c001dcbb:	0f 85 3d 01 00 00    	jne    c001ddfe <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2e2>
c001dcc1:	a1 48 9e 02 c0       	mov    eax,ds:0xc0029e48
c001dcc6:	8d 7e 01             	lea    edi,[esi+0x1]
c001dcc9:	8a 04 30             	mov    al,BYTE PTR [eax+esi*1]
c001dccc:	d4 40                	aam    0x40
c001dcce:	d5 39                	aad    0x39
c001dcd0:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c001dcd7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001dcdb:	0f 85 53 01 00 00    	jne    c001de34 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x318>
c001dce1:	8b 15 48 9e 02 c0    	mov    edx,DWORD PTR ds:0xc0029e48
c001dce7:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c001dcea:	d4 40                	aam    0x40
c001dcec:	d5 39                	aad    0x39
c001dcee:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001dcf2:	8a 44 32 03          	mov    al,BYTE PTR [edx+esi*1+0x3]
c001dcf6:	d4 40                	aam    0x40
c001dcf8:	d5 39                	aad    0x39
c001dcfa:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001dcfe:	8a 44 32 04          	mov    al,BYTE PTR [edx+esi*1+0x4]
c001dd02:	d4 40                	aam    0x40
c001dd04:	d5 39                	aad    0x39
c001dd06:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dd0a:	8a 44 32 06          	mov    al,BYTE PTR [edx+esi*1+0x6]
c001dd0e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001dd12:	3c 56                	cmp    al,0x56
c001dd14:	74 49                	je     c001dd5f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x243>
c001dd16:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001dd1a:	d4 40                	aam    0x40
c001dd1c:	d5 39                	aad    0x39
c001dd1e:	8d 48 d0             	lea    ecx,[eax-0x30]
c001dd21:	8a 44 32 07          	mov    al,BYTE PTR [edx+esi*1+0x7]
c001dd25:	0f b6 c9             	movzx  ecx,cl
c001dd28:	c1 e1 04             	shl    ecx,0x4
c001dd2b:	d4 40                	aam    0x40
c001dd2d:	d5 39                	aad    0x39
c001dd2f:	83 e8 30             	sub    eax,0x30
c001dd32:	0f b6 c0             	movzx  eax,al
c001dd35:	09 c1                	or     ecx,eax
c001dd37:	8a 44 32 08          	mov    al,BYTE PTR [edx+esi*1+0x8]
c001dd3b:	c1 e1 04             	shl    ecx,0x4
c001dd3e:	d4 40                	aam    0x40
c001dd40:	d5 39                	aad    0x39
c001dd42:	83 e8 30             	sub    eax,0x30
c001dd45:	0f b6 c0             	movzx  eax,al
c001dd48:	09 c1                	or     ecx,eax
c001dd4a:	8a 44 32 09          	mov    al,BYTE PTR [edx+esi*1+0x9]
c001dd4e:	c1 e1 04             	shl    ecx,0x4
c001dd51:	d4 40                	aam    0x40
c001dd53:	d5 39                	aad    0x39
c001dd55:	83 e8 30             	sub    eax,0x30
c001dd58:	0f b6 c0             	movzx  eax,al
c001dd5b:	09 c8                	or     eax,ecx
c001dd5d:	89 c5                	mov    ebp,eax
c001dd5f:	8a 4c 32 0b          	mov    cl,BYTE PTR [edx+esi*1+0xb]
c001dd63:	80 f9 44             	cmp    cl,0x44
c001dd66:	74 47                	je     c001ddaf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x293>
c001dd68:	88 c8                	mov    al,cl
c001dd6a:	d4 40                	aam    0x40
c001dd6c:	d5 39                	aad    0x39
c001dd6e:	83 e8 30             	sub    eax,0x30
c001dd71:	0f b6 f8             	movzx  edi,al
c001dd74:	8a 44 32 0c          	mov    al,BYTE PTR [edx+esi*1+0xc]
c001dd78:	c1 e7 04             	shl    edi,0x4
c001dd7b:	d4 40                	aam    0x40
c001dd7d:	d5 39                	aad    0x39
c001dd7f:	8d 58 d0             	lea    ebx,[eax-0x30]
c001dd82:	8a 44 32 0d          	mov    al,BYTE PTR [edx+esi*1+0xd]
c001dd86:	0f b6 db             	movzx  ebx,bl
c001dd89:	09 fb                	or     ebx,edi
c001dd8b:	c1 e3 04             	shl    ebx,0x4
c001dd8e:	d4 40                	aam    0x40
c001dd90:	d5 39                	aad    0x39
c001dd92:	83 e8 30             	sub    eax,0x30
c001dd95:	0f b6 f8             	movzx  edi,al
c001dd98:	8a 44 32 0e          	mov    al,BYTE PTR [edx+esi*1+0xe]
c001dd9c:	09 fb                	or     ebx,edi
c001dd9e:	89 df                	mov    edi,ebx
c001dda0:	c1 e7 04             	shl    edi,0x4
c001dda3:	d4 40                	aam    0x40
c001dda5:	d5 39                	aad    0x39
c001dda7:	8d 58 d0             	lea    ebx,[eax-0x30]
c001ddaa:	0f b6 db             	movzx  ebx,bl
c001ddad:	09 fb                	or     ebx,edi
c001ddaf:	a1 44 9e 02 c0       	mov    eax,ds:0xc0029e44
c001ddb4:	83 c6 10             	add    esi,0x10
c001ddb7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ddbb:	8d 7c 24 20          	lea    edi,[esp+0x20]
c001ddbf:	8a 04 32             	mov    al,BYTE PTR [edx+esi*1]
c001ddc2:	3c 0a                	cmp    al,0xa
c001ddc4:	0f 85 a0 00 00 00    	jne    c001de6a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x34e>
c001ddca:	3c 0a                	cmp    al,0xa
c001ddcc:	0f 94 c0             	sete   al
c001ddcf:	0f b6 c0             	movzx  eax,al
c001ddd2:	01 c6                	add    esi,eax
c001ddd4:	80 7c 24 07 56       	cmp    BYTE PTR [esp+0x7],0x56
c001ddd9:	0f 84 a2 00 00 00    	je     c001de81 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x365>
c001dddf:	66 39 ac 24 42 01 00 00 	cmp    WORD PTR [esp+0x142],bp
c001dde7:	0f 84 94 00 00 00    	je     c001de81 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x365>
c001dded:	39 35 44 9e 02 c0    	cmp    DWORD PTR ds:0xc0029e44,esi
c001ddf3:	0f 8f bb fe ff ff    	jg     c001dcb4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x198>
c001ddf9:	e9 e8 00 00 00       	jmp    c001dee6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3ca>
c001ddfe:	83 ec 0c             	sub    esp,0xc
c001de01:	68 b2 67 02 c0       	push   0xc00267b2
c001de06:	e8 06 bf fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001de0b:	83 c4 10             	add    esp,0x10
c001de0e:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c001de15:	0f 85 a6 fe ff ff    	jne    c001dcc1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1a5>
c001de1b:	e4 60                	in     al,0x60
c001de1d:	3c 5a                	cmp    al,0x5a
c001de1f:	74 04                	je     c001de25 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001de21:	3c 1c                	cmp    al,0x1c
c001de23:	75 f6                	jne    c001de1b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2ff>
c001de25:	e4 60                	in     al,0x60
c001de27:	3c 5a                	cmp    al,0x5a
c001de29:	74 fa                	je     c001de25 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001de2b:	3c 1c                	cmp    al,0x1c
c001de2d:	74 f6                	je     c001de25 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001de2f:	e9 8d fe ff ff       	jmp    c001dcc1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1a5>
c001de34:	83 ec 0c             	sub    esp,0xc
c001de37:	68 ba 67 02 c0       	push   0xc00267ba
c001de3c:	e8 d0 be fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001de41:	83 c4 10             	add    esp,0x10
c001de44:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c001de4b:	0f 85 90 fe ff ff    	jne    c001dce1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1c5>
c001de51:	e4 60                	in     al,0x60
c001de53:	3c 5a                	cmp    al,0x5a
c001de55:	74 04                	je     c001de5b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001de57:	3c 1c                	cmp    al,0x1c
c001de59:	75 f6                	jne    c001de51 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x335>
c001de5b:	e4 60                	in     al,0x60
c001de5d:	3c 5a                	cmp    al,0x5a
c001de5f:	74 fa                	je     c001de5b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001de61:	3c 1c                	cmp    al,0x1c
c001de63:	74 f6                	je     c001de5b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001de65:	e9 77 fe ff ff       	jmp    c001dce1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1c5>
c001de6a:	47                   	inc    edi
c001de6b:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c001de6f:	0f 84 55 ff ff ff    	je     c001ddca <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2ae>
c001de75:	46                   	inc    esi
c001de76:	88 47 ff             	mov    BYTE PTR [edi-0x1],al
c001de79:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001de7c:	e9 3e ff ff ff       	jmp    c001ddbf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2a3>
c001de81:	80 f9 44             	cmp    cl,0x44
c001de84:	74 0e                	je     c001de94 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x378>
c001de86:	66 39 9c 24 62 01 00 00 	cmp    WORD PTR [esp+0x162],bx
c001de8e:	0f 85 59 ff ff ff    	jne    c001dded <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001de94:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001de98:	8a 54 24 0d          	mov    dl,BYTE PTR [esp+0xd]
c001de9c:	c1 e0 04             	shl    eax,0x4
c001de9f:	83 ea 30             	sub    edx,0x30
c001dea2:	09 d0                	or     eax,edx
c001dea4:	38 84 24 40 01 00 00 	cmp    BYTE PTR [esp+0x140],al
c001deab:	0f 85 3c ff ff ff    	jne    c001dded <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001deb1:	8a 54 24 0e          	mov    dl,BYTE PTR [esp+0xe]
c001deb5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001deb9:	c1 e2 04             	shl    edx,0x4
c001debc:	83 e8 30             	sub    eax,0x30
c001debf:	09 d0                	or     eax,edx
c001dec1:	38 84 24 41 01 00 00 	cmp    BYTE PTR [esp+0x141],al
c001dec8:	0f 85 1f ff ff ff    	jne    c001dded <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001dece:	50                   	push   eax
c001decf:	50                   	push   eax
c001ded0:	8d 44 24 28          	lea    eax,[esp+0x28]
c001ded4:	50                   	push   eax
c001ded5:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c001dedc:	e8 57 28 fe ff       	call   c0000738 <strcpy>
c001dee1:	83 c4 10             	add    esp,0x10
c001dee4:	eb 15                	jmp    c001defb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3df>
c001dee6:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001deed:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c001def8:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001defb:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001df02:	81 c4 2c 01 00 00    	add    esp,0x12c
c001df08:	5b                   	pop    ebx
c001df09:	5e                   	pop    esi
c001df0a:	5f                   	pop    edi
c001df0b:	5d                   	pop    ebp
c001df0c:	c3                   	ret    
c001df0d:	90                   	nop

c001df0e <PCI::checkBus(unsigned char)>:
c001df0e:	56                   	push   esi
c001df0f:	53                   	push   ebx
c001df10:	31 db                	xor    ebx,ebx
c001df12:	51                   	push   ecx
c001df13:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001df18:	52                   	push   edx
c001df19:	53                   	push   ebx
c001df1a:	43                   	inc    ebx
c001df1b:	56                   	push   esi
c001df1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001df20:	e8 bf 07 00 00       	call   c001e6e4 <PCI::checkDevice(unsigned char, unsigned char)>
c001df25:	83 c4 10             	add    esp,0x10
c001df28:	83 fb 20             	cmp    ebx,0x20
c001df2b:	75 eb                	jne    c001df18 <PCI::checkBus(unsigned char)+0xa>
c001df2d:	58                   	pop    eax
c001df2e:	5b                   	pop    ebx
c001df2f:	5e                   	pop    esi
c001df30:	c3                   	ret    
c001df31:	90                   	nop

c001df32 <PCI::foundDevice(PCIDeviceInfo)>:
c001df32:	55                   	push   ebp
c001df33:	57                   	push   edi
c001df34:	56                   	push   esi
c001df35:	53                   	push   ebx
c001df36:	83 ec 1c             	sub    esp,0x1c
c001df39:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001df3d:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001df43:	0f 84 20 04 00 00    	je     c001e369 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001df49:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c001df50:	75 37                	jne    c001df89 <PCI::foundDevice(PCIDeviceInfo)+0x57>
c001df52:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001df56:	66 81 f9 06 04       	cmp    cx,0x406
c001df5b:	75 5b                	jne    c001dfb8 <PCI::foundDevice(PCIDeviceInfo)+0x86>
c001df5d:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001df62:	50                   	push   eax
c001df63:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001df68:	50                   	push   eax
c001df69:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001df6e:	50                   	push   eax
c001df6f:	53                   	push   ebx
c001df70:	e8 33 fa ff ff       	call   c001d9a8 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001df75:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001df79:	0f b6 c0             	movzx  eax,al
c001df7c:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001df80:	83 c4 2c             	add    esp,0x2c
c001df83:	5b                   	pop    ebx
c001df84:	5e                   	pop    esi
c001df85:	5f                   	pop    edi
c001df86:	5d                   	pop    ebp
c001df87:	eb 85                	jmp    c001df0e <PCI::checkBus(unsigned char)>
c001df89:	83 ec 0c             	sub    esp,0xc
c001df8c:	68 c3 67 02 c0       	push   0xc00267c3
c001df91:	e8 7b bd fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001df96:	83 c4 10             	add    esp,0x10
c001df99:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c001dfa0:	75 b0                	jne    c001df52 <PCI::foundDevice(PCIDeviceInfo)+0x20>
c001dfa2:	e4 60                	in     al,0x60
c001dfa4:	3c 5a                	cmp    al,0x5a
c001dfa6:	74 04                	je     c001dfac <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001dfa8:	3c 1c                	cmp    al,0x1c
c001dfaa:	75 f6                	jne    c001dfa2 <PCI::foundDevice(PCIDeviceInfo)+0x70>
c001dfac:	e4 60                	in     al,0x60
c001dfae:	3c 5a                	cmp    al,0x5a
c001dfb0:	74 fa                	je     c001dfac <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001dfb2:	3c 1c                	cmp    al,0x1c
c001dfb4:	74 f6                	je     c001dfac <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001dfb6:	eb 9a                	jmp    c001df52 <PCI::foundDevice(PCIDeviceInfo)+0x20>
c001dfb8:	8b 83 cc 00 00 00    	mov    eax,DWORD PTR [ebx+0xcc]
c001dfbe:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001dfc2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001dfc6:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001dfca:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001dfce:	88 d0                	mov    al,dl
c001dfd0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001dfd5:	74 3b                	je     c001e012 <PCI::foundDevice(PCIDeviceInfo)+0xe0>
c001dfd7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001dfdb:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001dfde:	85 d2                	test   edx,edx
c001dfe0:	74 24                	je     c001e006 <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001dfe2:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001dfe8:	31 ef                	xor    edi,ebp
c001dfea:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001dff0:	75 14                	jne    c001e006 <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001dff2:	39 b2 20 01 00 00    	cmp    DWORD PTR [edx+0x120],esi
c001dff8:	75 0c                	jne    c001e006 <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001dffa:	38 82 38 01 00 00    	cmp    BYTE PTR [edx+0x138],al
c001e000:	0f 84 63 03 00 00    	je     c001e369 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e006:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e00a:	8b 12                	mov    edx,DWORD PTR [edx]
c001e00c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e010:	eb be                	jmp    c001dfd0 <PCI::foundDevice(PCIDeviceInfo)+0x9e>
c001e012:	66 81 f9 01 06       	cmp    cx,0x601
c001e017:	0f 85 81 01 00 00    	jne    c001e19e <PCI::foundDevice(PCIDeviceInfo)+0x26c>
c001e01d:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c001e024:	75 25                	jne    c001e04b <PCI::foundDevice(PCIDeviceInfo)+0x119>
c001e026:	83 ec 0c             	sub    esp,0xc
c001e029:	68 64 01 00 00       	push   0x164
c001e02e:	e8 84 bc fe ff       	call   c0009cb7 <malloc>
c001e033:	89 04 24             	mov    DWORD PTR [esp],eax
c001e036:	89 c5                	mov    ebp,eax
c001e038:	e8 d3 12 00 00       	call   c001f310 <SATABus::SATABus()>
c001e03d:	83 c4 10             	add    esp,0x10
c001e040:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c001e047:	74 4a                	je     c001e093 <PCI::foundDevice(PCIDeviceInfo)+0x161>
c001e049:	eb 2f                	jmp    c001e07a <PCI::foundDevice(PCIDeviceInfo)+0x148>
c001e04b:	83 ec 0c             	sub    esp,0xc
c001e04e:	68 d3 67 02 c0       	push   0xc00267d3
c001e053:	e8 b9 bc fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001e058:	83 c4 10             	add    esp,0x10
c001e05b:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c001e062:	75 c2                	jne    c001e026 <PCI::foundDevice(PCIDeviceInfo)+0xf4>
c001e064:	e4 60                	in     al,0x60
c001e066:	3c 1c                	cmp    al,0x1c
c001e068:	74 04                	je     c001e06e <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001e06a:	3c 5a                	cmp    al,0x5a
c001e06c:	75 f6                	jne    c001e064 <PCI::foundDevice(PCIDeviceInfo)+0x132>
c001e06e:	e4 60                	in     al,0x60
c001e070:	3c 5a                	cmp    al,0x5a
c001e072:	74 fa                	je     c001e06e <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001e074:	3c 1c                	cmp    al,0x1c
c001e076:	74 f6                	je     c001e06e <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001e078:	eb ac                	jmp    c001e026 <PCI::foundDevice(PCIDeviceInfo)+0xf4>
c001e07a:	83 ec 0c             	sub    esp,0xc
c001e07d:	68 d9 67 02 c0       	push   0xc00267d9
c001e082:	e8 8a bc fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001e087:	83 c4 10             	add    esp,0x10
c001e08a:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c001e091:	74 1b                	je     c001e0ae <PCI::foundDevice(PCIDeviceInfo)+0x17c>
c001e093:	50                   	push   eax
c001e094:	50                   	push   eax
c001e095:	55                   	push   ebp
c001e096:	53                   	push   ebx
c001e097:	e8 da 03 ff ff       	call   c000e476 <Device::addChild(Device*)>
c001e09c:	83 c4 10             	add    esp,0x10
c001e09f:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c001e0a6:	74 33                	je     c001e0db <PCI::foundDevice(PCIDeviceInfo)+0x1a9>
c001e0a8:	eb 18                	jmp    c001e0c2 <PCI::foundDevice(PCIDeviceInfo)+0x190>
c001e0aa:	3c 1c                	cmp    al,0x1c
c001e0ac:	74 0c                	je     c001e0ba <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001e0ae:	e4 60                	in     al,0x60
c001e0b0:	3c 5a                	cmp    al,0x5a
c001e0b2:	75 f6                	jne    c001e0aa <PCI::foundDevice(PCIDeviceInfo)+0x178>
c001e0b4:	eb 04                	jmp    c001e0ba <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001e0b6:	3c 1c                	cmp    al,0x1c
c001e0b8:	75 d9                	jne    c001e093 <PCI::foundDevice(PCIDeviceInfo)+0x161>
c001e0ba:	e4 60                	in     al,0x60
c001e0bc:	3c 5a                	cmp    al,0x5a
c001e0be:	74 fa                	je     c001e0ba <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001e0c0:	eb f4                	jmp    c001e0b6 <PCI::foundDevice(PCIDeviceInfo)+0x184>
c001e0c2:	83 ec 0c             	sub    esp,0xc
c001e0c5:	68 e1 67 02 c0       	push   0xc00267e1
c001e0ca:	e8 42 bc fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001e0cf:	83 c4 10             	add    esp,0x10
c001e0d2:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c001e0d9:	74 29                	je     c001e104 <PCI::foundDevice(PCIDeviceInfo)+0x1d2>
c001e0db:	83 ec 2c             	sub    esp,0x2c
c001e0de:	b9 09 00 00 00       	mov    ecx,0x9
c001e0e3:	8d 74 24 60          	lea    esi,[esp+0x60]
c001e0e7:	fc                   	cld    
c001e0e8:	89 e7                	mov    edi,esp
c001e0ea:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e0ec:	55                   	push   ebp
c001e0ed:	e8 96 02 ff ff       	call   c000e388 <Device::preOpenPCI(PCIDeviceInfo)>
c001e0f2:	83 c4 30             	add    esp,0x30
c001e0f5:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c001e0fc:	74 33                	je     c001e131 <PCI::foundDevice(PCIDeviceInfo)+0x1ff>
c001e0fe:	eb 18                	jmp    c001e118 <PCI::foundDevice(PCIDeviceInfo)+0x1e6>
c001e100:	3c 1c                	cmp    al,0x1c
c001e102:	74 0c                	je     c001e110 <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001e104:	e4 60                	in     al,0x60
c001e106:	3c 5a                	cmp    al,0x5a
c001e108:	75 f6                	jne    c001e100 <PCI::foundDevice(PCIDeviceInfo)+0x1ce>
c001e10a:	eb 04                	jmp    c001e110 <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001e10c:	3c 1c                	cmp    al,0x1c
c001e10e:	75 cb                	jne    c001e0db <PCI::foundDevice(PCIDeviceInfo)+0x1a9>
c001e110:	e4 60                	in     al,0x60
c001e112:	3c 5a                	cmp    al,0x5a
c001e114:	74 fa                	je     c001e110 <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001e116:	eb f4                	jmp    c001e10c <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001e118:	83 ec 0c             	sub    esp,0xc
c001e11b:	68 e9 67 02 c0       	push   0xc00267e9
c001e120:	e8 ec bb fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001e125:	83 c4 10             	add    esp,0x10
c001e128:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c001e12f:	74 23                	je     c001e154 <PCI::foundDevice(PCIDeviceInfo)+0x222>
c001e131:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001e134:	6a 00                	push   0x0
c001e136:	6a 00                	push   0x0
c001e138:	6a 00                	push   0x0
c001e13a:	55                   	push   ebp
c001e13b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e13e:	83 c4 10             	add    esp,0x10
c001e141:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c001e148:	0f 84 1b 02 00 00    	je     c001e369 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e14e:	eb 18                	jmp    c001e168 <PCI::foundDevice(PCIDeviceInfo)+0x236>
c001e150:	3c 1c                	cmp    al,0x1c
c001e152:	74 0c                	je     c001e160 <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001e154:	e4 60                	in     al,0x60
c001e156:	3c 5a                	cmp    al,0x5a
c001e158:	75 f6                	jne    c001e150 <PCI::foundDevice(PCIDeviceInfo)+0x21e>
c001e15a:	eb 04                	jmp    c001e160 <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001e15c:	3c 1c                	cmp    al,0x1c
c001e15e:	75 d1                	jne    c001e131 <PCI::foundDevice(PCIDeviceInfo)+0x1ff>
c001e160:	e4 60                	in     al,0x60
c001e162:	3c 5a                	cmp    al,0x5a
c001e164:	74 fa                	je     c001e160 <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001e166:	eb f4                	jmp    c001e15c <PCI::foundDevice(PCIDeviceInfo)+0x22a>
c001e168:	83 ec 0c             	sub    esp,0xc
c001e16b:	68 f1 67 02 c0       	push   0xc00267f1
c001e170:	e8 9c bb fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001e175:	83 c4 10             	add    esp,0x10
c001e178:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c001e17f:	0f 85 e4 01 00 00    	jne    c001e369 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e185:	e4 60                	in     al,0x60
c001e187:	3c 5a                	cmp    al,0x5a
c001e189:	74 04                	je     c001e18f <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001e18b:	3c 1c                	cmp    al,0x1c
c001e18d:	75 f6                	jne    c001e185 <PCI::foundDevice(PCIDeviceInfo)+0x253>
c001e18f:	e4 60                	in     al,0x60
c001e191:	3c 5a                	cmp    al,0x5a
c001e193:	74 fa                	je     c001e18f <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001e195:	3c 1c                	cmp    al,0x1c
c001e197:	74 f6                	je     c001e18f <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001e199:	e9 cb 01 00 00       	jmp    c001e369 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e19e:	66 81 f9 01 01       	cmp    cx,0x101
c001e1a3:	0f 85 7a 01 00 00    	jne    c001e323 <PCI::foundDevice(PCIDeviceInfo)+0x3f1>
c001e1a9:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c001e1b0:	75 25                	jne    c001e1d7 <PCI::foundDevice(PCIDeviceInfo)+0x2a5>
c001e1b2:	83 ec 0c             	sub    esp,0xc
c001e1b5:	68 70 02 00 00       	push   0x270
c001e1ba:	e8 f8 ba fe ff       	call   c0009cb7 <malloc>
c001e1bf:	89 04 24             	mov    DWORD PTR [esp],eax
c001e1c2:	89 c5                	mov    ebp,eax
c001e1c4:	e8 df 05 00 00       	call   c001e7a8 <IDE::IDE()>
c001e1c9:	83 c4 10             	add    esp,0x10
c001e1cc:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c001e1d3:	74 4a                	je     c001e21f <PCI::foundDevice(PCIDeviceInfo)+0x2ed>
c001e1d5:	eb 2f                	jmp    c001e206 <PCI::foundDevice(PCIDeviceInfo)+0x2d4>
c001e1d7:	83 ec 0c             	sub    esp,0xc
c001e1da:	68 f9 67 02 c0       	push   0xc00267f9
c001e1df:	e8 2d bb fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001e1e4:	83 c4 10             	add    esp,0x10
c001e1e7:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c001e1ee:	75 c2                	jne    c001e1b2 <PCI::foundDevice(PCIDeviceInfo)+0x280>
c001e1f0:	e4 60                	in     al,0x60
c001e1f2:	3c 5a                	cmp    al,0x5a
c001e1f4:	74 04                	je     c001e1fa <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001e1f6:	3c 1c                	cmp    al,0x1c
c001e1f8:	75 f6                	jne    c001e1f0 <PCI::foundDevice(PCIDeviceInfo)+0x2be>
c001e1fa:	e4 60                	in     al,0x60
c001e1fc:	3c 5a                	cmp    al,0x5a
c001e1fe:	74 fa                	je     c001e1fa <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001e200:	3c 1c                	cmp    al,0x1c
c001e202:	74 f6                	je     c001e1fa <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001e204:	eb ac                	jmp    c001e1b2 <PCI::foundDevice(PCIDeviceInfo)+0x280>
c001e206:	83 ec 0c             	sub    esp,0xc
c001e209:	68 00 68 02 c0       	push   0xc0026800
c001e20e:	e8 fe ba fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001e213:	83 c4 10             	add    esp,0x10
c001e216:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c001e21d:	74 1b                	je     c001e23a <PCI::foundDevice(PCIDeviceInfo)+0x308>
c001e21f:	57                   	push   edi
c001e220:	57                   	push   edi
c001e221:	55                   	push   ebp
c001e222:	53                   	push   ebx
c001e223:	e8 4e 02 ff ff       	call   c000e476 <Device::addChild(Device*)>
c001e228:	83 c4 10             	add    esp,0x10
c001e22b:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c001e232:	74 33                	je     c001e267 <PCI::foundDevice(PCIDeviceInfo)+0x335>
c001e234:	eb 18                	jmp    c001e24e <PCI::foundDevice(PCIDeviceInfo)+0x31c>
c001e236:	3c 1c                	cmp    al,0x1c
c001e238:	74 0c                	je     c001e246 <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001e23a:	e4 60                	in     al,0x60
c001e23c:	3c 5a                	cmp    al,0x5a
c001e23e:	75 f6                	jne    c001e236 <PCI::foundDevice(PCIDeviceInfo)+0x304>
c001e240:	eb 04                	jmp    c001e246 <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001e242:	3c 1c                	cmp    al,0x1c
c001e244:	75 d9                	jne    c001e21f <PCI::foundDevice(PCIDeviceInfo)+0x2ed>
c001e246:	e4 60                	in     al,0x60
c001e248:	3c 5a                	cmp    al,0x5a
c001e24a:	74 fa                	je     c001e246 <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001e24c:	eb f4                	jmp    c001e242 <PCI::foundDevice(PCIDeviceInfo)+0x310>
c001e24e:	83 ec 0c             	sub    esp,0xc
c001e251:	68 07 68 02 c0       	push   0xc0026807
c001e256:	e8 b6 ba fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001e25b:	83 c4 10             	add    esp,0x10
c001e25e:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c001e265:	74 29                	je     c001e290 <PCI::foundDevice(PCIDeviceInfo)+0x35e>
c001e267:	83 ec 2c             	sub    esp,0x2c
c001e26a:	b9 09 00 00 00       	mov    ecx,0x9
c001e26f:	8d 74 24 60          	lea    esi,[esp+0x60]
c001e273:	fc                   	cld    
c001e274:	89 e7                	mov    edi,esp
c001e276:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e278:	55                   	push   ebp
c001e279:	e8 0a 01 ff ff       	call   c000e388 <Device::preOpenPCI(PCIDeviceInfo)>
c001e27e:	83 c4 30             	add    esp,0x30
c001e281:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c001e288:	74 33                	je     c001e2bd <PCI::foundDevice(PCIDeviceInfo)+0x38b>
c001e28a:	eb 18                	jmp    c001e2a4 <PCI::foundDevice(PCIDeviceInfo)+0x372>
c001e28c:	3c 1c                	cmp    al,0x1c
c001e28e:	74 0c                	je     c001e29c <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001e290:	e4 60                	in     al,0x60
c001e292:	3c 5a                	cmp    al,0x5a
c001e294:	75 f6                	jne    c001e28c <PCI::foundDevice(PCIDeviceInfo)+0x35a>
c001e296:	eb 04                	jmp    c001e29c <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001e298:	3c 1c                	cmp    al,0x1c
c001e29a:	75 cb                	jne    c001e267 <PCI::foundDevice(PCIDeviceInfo)+0x335>
c001e29c:	e4 60                	in     al,0x60
c001e29e:	3c 5a                	cmp    al,0x5a
c001e2a0:	74 fa                	je     c001e29c <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001e2a2:	eb f4                	jmp    c001e298 <PCI::foundDevice(PCIDeviceInfo)+0x366>
c001e2a4:	83 ec 0c             	sub    esp,0xc
c001e2a7:	68 0e 68 02 c0       	push   0xc002680e
c001e2ac:	e8 60 ba fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001e2b1:	83 c4 10             	add    esp,0x10
c001e2b4:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c001e2bb:	74 23                	je     c001e2e0 <PCI::foundDevice(PCIDeviceInfo)+0x3ae>
c001e2bd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001e2c0:	6a 00                	push   0x0
c001e2c2:	6a 00                	push   0x0
c001e2c4:	6a 00                	push   0x0
c001e2c6:	55                   	push   ebp
c001e2c7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e2ca:	83 c4 10             	add    esp,0x10
c001e2cd:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c001e2d4:	0f 84 8f 00 00 00    	je     c001e369 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e2da:	eb 18                	jmp    c001e2f4 <PCI::foundDevice(PCIDeviceInfo)+0x3c2>
c001e2dc:	3c 1c                	cmp    al,0x1c
c001e2de:	74 0c                	je     c001e2ec <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001e2e0:	e4 60                	in     al,0x60
c001e2e2:	3c 5a                	cmp    al,0x5a
c001e2e4:	75 f6                	jne    c001e2dc <PCI::foundDevice(PCIDeviceInfo)+0x3aa>
c001e2e6:	eb 04                	jmp    c001e2ec <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001e2e8:	3c 1c                	cmp    al,0x1c
c001e2ea:	75 d1                	jne    c001e2bd <PCI::foundDevice(PCIDeviceInfo)+0x38b>
c001e2ec:	e4 60                	in     al,0x60
c001e2ee:	3c 5a                	cmp    al,0x5a
c001e2f0:	74 fa                	je     c001e2ec <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001e2f2:	eb f4                	jmp    c001e2e8 <PCI::foundDevice(PCIDeviceInfo)+0x3b6>
c001e2f4:	83 ec 0c             	sub    esp,0xc
c001e2f7:	68 15 68 02 c0       	push   0xc0026815
c001e2fc:	e8 10 ba fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001e301:	83 c4 10             	add    esp,0x10
c001e304:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c001e30b:	75 5c                	jne    c001e369 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e30d:	e4 60                	in     al,0x60
c001e30f:	3c 5a                	cmp    al,0x5a
c001e311:	74 04                	je     c001e317 <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001e313:	3c 1c                	cmp    al,0x1c
c001e315:	75 f6                	jne    c001e30d <PCI::foundDevice(PCIDeviceInfo)+0x3db>
c001e317:	e4 60                	in     al,0x60
c001e319:	3c 5a                	cmp    al,0x5a
c001e31b:	74 fa                	je     c001e317 <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001e31d:	3c 1c                	cmp    al,0x1c
c001e31f:	74 f6                	je     c001e317 <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001e321:	eb 46                	jmp    c001e369 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e323:	83 ec 0c             	sub    esp,0xc
c001e326:	68 58 01 00 00       	push   0x158
c001e32b:	e8 87 b9 fe ff       	call   c0009cb7 <malloc>
c001e330:	89 c5                	mov    ebp,eax
c001e332:	58                   	pop    eax
c001e333:	5a                   	pop    edx
c001e334:	68 1c 68 02 c0       	push   0xc002681c
c001e339:	55                   	push   ebp
c001e33a:	e8 41 04 ff ff       	call   c000e780 <DriverlessDevice::DriverlessDevice(char const*)>
c001e33f:	59                   	pop    ecx
c001e340:	5e                   	pop    esi
c001e341:	55                   	push   ebp
c001e342:	53                   	push   ebx
c001e343:	e8 2e 01 ff ff       	call   c000e476 <Device::addChild(Device*)>
c001e348:	83 c4 10             	add    esp,0x10
c001e34b:	b9 09 00 00 00       	mov    ecx,0x9
c001e350:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001e354:	fc                   	cld    
c001e355:	89 fe                	mov    esi,edi
c001e357:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e359:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c001e35d:	83 c4 1c             	add    esp,0x1c
c001e360:	5b                   	pop    ebx
c001e361:	5e                   	pop    esi
c001e362:	5f                   	pop    edi
c001e363:	5d                   	pop    ebp
c001e364:	e9 1f 00 ff ff       	jmp    c000e388 <Device::preOpenPCI(PCIDeviceInfo)>
c001e369:	83 c4 1c             	add    esp,0x1c
c001e36c:	5b                   	pop    ebx
c001e36d:	5e                   	pop    esi
c001e36e:	5f                   	pop    edi
c001e36f:	5d                   	pop    ebp
c001e370:	c3                   	ret    
c001e371:	90                   	nop

c001e372 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001e372:	55                   	push   ebp
c001e373:	57                   	push   edi
c001e374:	56                   	push   esi
c001e375:	53                   	push   ebx
c001e376:	81 ec b4 00 00 00    	sub    esp,0xb4
c001e37c:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
c001e383:	8b ac 24 c8 00 00 00 	mov    ebp,DWORD PTR [esp+0xc8]
c001e38a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e38e:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c001e395:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e399:	8b 84 24 d4 00 00 00 	mov    eax,DWORD PTR [esp+0xd4]
c001e3a0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e3a4:	68 36 68 02 c0       	push   0xc0026836
c001e3a9:	8d 5c 24 48          	lea    ebx,[esp+0x48]
c001e3ad:	53                   	push   ebx
c001e3ae:	e8 85 23 fe ff       	call   c0000738 <strcpy>
c001e3b3:	0f b6 4c 24 24       	movzx  ecx,BYTE PTR [esp+0x24]
c001e3b8:	b2 64                	mov    dl,0x64
c001e3ba:	89 c8                	mov    eax,ecx
c001e3bc:	f6 f2                	div    dl
c001e3be:	b2 0a                	mov    dl,0xa
c001e3c0:	83 c0 30             	add    eax,0x30
c001e3c3:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001e3c7:	88 44 24 4c          	mov    BYTE PTR [esp+0x4c],al
c001e3cb:	83 c4 10             	add    esp,0x10
c001e3ce:	89 c8                	mov    eax,ecx
c001e3d0:	f6 f2                	div    dl
c001e3d2:	89 c1                	mov    ecx,eax
c001e3d4:	0f b6 c0             	movzx  eax,al
c001e3d7:	88 e9                	mov    cl,ch
c001e3d9:	f6 f2                	div    dl
c001e3db:	88 e0                	mov    al,ah
c001e3dd:	83 c0 30             	add    eax,0x30
c001e3e0:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001e3e4:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001e3e8:	8d 41 30             	lea    eax,[ecx+0x30]
c001e3eb:	88 44 24 25          	mov    BYTE PTR [esp+0x25],al
c001e3ef:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c001e3f3:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c001e3f8:	f6 f2                	div    dl
c001e3fa:	89 c1                	mov    ecx,eax
c001e3fc:	0f b6 c0             	movzx  eax,al
c001e3ff:	88 e9                	mov    cl,ch
c001e401:	f6 f2                	div    dl
c001e403:	88 e0                	mov    al,ah
c001e405:	83 c0 30             	add    eax,0x30
c001e408:	88 44 24 26          	mov    BYTE PTR [esp+0x26],al
c001e40c:	88 44 24 40          	mov    BYTE PTR [esp+0x40],al
c001e410:	8d 41 30             	lea    eax,[ecx+0x30]
c001e413:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001e417:	88 44 24 41          	mov    BYTE PTR [esp+0x41],al
c001e41b:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001e420:	f6 f2                	div    dl
c001e422:	89 c1                	mov    ecx,eax
c001e424:	0f b6 c0             	movzx  eax,al
c001e427:	88 e9                	mov    cl,ch
c001e429:	f6 f2                	div    dl
c001e42b:	88 e0                	mov    al,ah
c001e42d:	83 c0 30             	add    eax,0x30
c001e430:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c001e437:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001e43b:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001e43f:	8d 41 30             	lea    eax,[ecx+0x30]
c001e442:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c001e446:	88 44 24 44          	mov    BYTE PTR [esp+0x44],al
c001e44a:	74 29                	je     c001e475 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x103>
c001e44c:	83 ec 0c             	sub    esp,0xc
c001e44f:	53                   	push   ebx
c001e450:	e8 bc b8 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001e455:	83 c4 10             	add    esp,0x10
c001e458:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c001e45f:	75 14                	jne    c001e475 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x103>
c001e461:	e4 60                	in     al,0x60
c001e463:	3c 1c                	cmp    al,0x1c
c001e465:	74 04                	je     c001e46b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001e467:	3c 5a                	cmp    al,0x5a
c001e469:	75 f6                	jne    c001e461 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xef>
c001e46b:	e4 60                	in     al,0x60
c001e46d:	3c 5a                	cmp    al,0x5a
c001e46f:	74 fa                	je     c001e46b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001e471:	3c 1c                	cmp    al,0x1c
c001e473:	74 f6                	je     c001e46b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001e475:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c001e47a:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c001e47f:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001e484:	83 ec 0c             	sub    esp,0xc
c001e487:	6a 0c                	push   0xc
c001e489:	56                   	push   esi
c001e48a:	53                   	push   ebx
c001e48b:	57                   	push   edi
c001e48c:	55                   	push   ebp
c001e48d:	e8 68 f3 ff ff       	call   c001d7fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e492:	83 c4 20             	add    esp,0x20
c001e495:	56                   	push   esi
c001e496:	53                   	push   ebx
c001e497:	57                   	push   edi
c001e498:	55                   	push   ebp
c001e499:	e8 50 f4 ff ff       	call   c001d8ee <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001e49e:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c001e4a3:	56                   	push   esi
c001e4a4:	53                   	push   ebx
c001e4a5:	57                   	push   edi
c001e4a6:	55                   	push   ebp
c001e4a7:	e8 d8 f4 ff ff       	call   c001d984 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001e4ac:	88 44 24 42          	mov    BYTE PTR [esp+0x42],al
c001e4b0:	83 c4 14             	add    esp,0x14
c001e4b3:	6a 3c                	push   0x3c
c001e4b5:	56                   	push   esi
c001e4b6:	53                   	push   ebx
c001e4b7:	57                   	push   edi
c001e4b8:	55                   	push   ebp
c001e4b9:	e8 3c f3 ff ff       	call   c001d7fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e4be:	0f b6 c4             	movzx  eax,ah
c001e4c1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001e4c5:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001e4c9:	88 84 24 bd 00 00 00 	mov    BYTE PTR [esp+0xbd],al
c001e4d0:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c001e4d5:	83 c4 20             	add    esp,0x20
c001e4d8:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e4de:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c001e4e5:	0f 84 38 01 00 00    	je     c001e623 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b1>
c001e4eb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001e4f3:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c001e4f8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e4fc:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e502:	39 88 5c 11 00 00    	cmp    DWORD PTR [eax+0x115c],ecx
c001e508:	0f 8e 15 01 00 00    	jle    c001e623 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b1>
c001e50e:	50                   	push   eax
c001e50f:	50                   	push   eax
c001e510:	68 51 68 02 c0       	push   0xc0026851
c001e515:	8d 44 24 68          	lea    eax,[esp+0x68]
c001e519:	50                   	push   eax
c001e51a:	e8 19 22 fe ff       	call   c0000738 <strcpy>
c001e51f:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001e523:	b9 0a 00 00 00       	mov    ecx,0xa
c001e528:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001e52c:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001e530:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001e534:	8a 44 24 35          	mov    al,BYTE PTR [esp+0x35]
c001e538:	88 44 24 6e          	mov    BYTE PTR [esp+0x6e],al
c001e53c:	8a 44 24 36          	mov    al,BYTE PTR [esp+0x36]
c001e540:	88 44 24 70          	mov    BYTE PTR [esp+0x70],al
c001e544:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001e548:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c001e54c:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001e550:	88 44 24 73          	mov    BYTE PTR [esp+0x73],al
c001e554:	8a 44 24 39          	mov    al,BYTE PTR [esp+0x39]
c001e558:	88 44 24 74          	mov    BYTE PTR [esp+0x74],al
c001e55c:	83 c4 10             	add    esp,0x10
c001e55f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e563:	99                   	cdq    
c001e564:	f7 f9                	idiv   ecx
c001e566:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e56a:	99                   	cdq    
c001e56b:	f7 f9                	idiv   ecx
c001e56d:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c001e571:	83 c2 30             	add    edx,0x30
c001e574:	83 c0 30             	add    eax,0x30
c001e577:	88 54 24 66          	mov    BYTE PTR [esp+0x66],dl
c001e57b:	88 44 24 67          	mov    BYTE PTR [esp+0x67],al
c001e57f:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c001e586:	74 2d                	je     c001e5b5 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x243>
c001e588:	83 ec 0c             	sub    esp,0xc
c001e58b:	8d 44 24 68          	lea    eax,[esp+0x68]
c001e58f:	50                   	push   eax
c001e590:	e8 7c b7 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001e595:	83 c4 10             	add    esp,0x10
c001e598:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c001e59f:	75 14                	jne    c001e5b5 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x243>
c001e5a1:	e4 60                	in     al,0x60
c001e5a3:	3c 5a                	cmp    al,0x5a
c001e5a5:	74 04                	je     c001e5ab <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001e5a7:	3c 1c                	cmp    al,0x1c
c001e5a9:	75 f6                	jne    c001e5a1 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x22f>
c001e5ab:	e4 60                	in     al,0x60
c001e5ad:	3c 5a                	cmp    al,0x5a
c001e5af:	74 fa                	je     c001e5ab <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001e5b1:	3c 1c                	cmp    al,0x1c
c001e5b3:	74 f6                	je     c001e5ab <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001e5b5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e5b9:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c001e5be:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e5c4:	8d 04 d0             	lea    eax,[eax+edx*8]
c001e5c7:	0f b7 90 5c 01 00 00 	movzx  edx,WORD PTR [eax+0x15c]
c001e5ce:	39 d3                	cmp    ebx,edx
c001e5d0:	75 48                	jne    c001e61a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2a8>
c001e5d2:	0f b6 80 5e 01 00 00 	movzx  eax,BYTE PTR [eax+0x15e]
c001e5d9:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c001e5dd:	75 3b                	jne    c001e61a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2a8>
c001e5df:	83 ec 0c             	sub    esp,0xc
c001e5e2:	68 80 68 02 c0       	push   0xc0026880
c001e5e7:	e8 d9 e9 fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001e5ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e5f0:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c001e5f5:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e5fb:	0f b6 84 d0 5f 01 00 00 	movzx  eax,BYTE PTR [eax+edx*8+0x15f]
c001e603:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001e607:	50                   	push   eax
c001e608:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001e60c:	53                   	push   ebx
c001e60d:	68 a5 68 02 c0       	push   0xc00268a5
c001e612:	e8 ae e9 fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001e617:	83 c4 20             	add    esp,0x20
c001e61a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001e61e:	e9 d0 fe ff ff       	jmp    c001e4f3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x181>
c001e623:	31 d2                	xor    edx,edx
c001e625:	83 ec 0c             	sub    esp,0xc
c001e628:	56                   	push   esi
c001e629:	53                   	push   ebx
c001e62a:	57                   	push   edi
c001e62b:	52                   	push   edx
c001e62c:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001e630:	55                   	push   ebp
c001e631:	e8 9a f3 ff ff       	call   c001d9d0 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e636:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001e63a:	89 84 94 a4 00 00 00 	mov    DWORD PTR [esp+edx*4+0xa4],eax
c001e641:	42                   	inc    edx
c001e642:	83 c4 20             	add    esp,0x20
c001e645:	83 fa 06             	cmp    edx,0x6
c001e648:	75 db                	jne    c001e625 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b3>
c001e64a:	66 8b 44 24 2a       	mov    ax,WORD PTR [esp+0x2a]
c001e64f:	83 ec 0c             	sub    esp,0xc
c001e652:	86 e0                	xchg   al,ah
c001e654:	66 89 84 24 88 00 00 00 	mov    WORD PTR [esp+0x88],ax
c001e65c:	6a 02                	push   0x2
c001e65e:	56                   	push   esi
c001e65f:	53                   	push   ebx
c001e660:	57                   	push   edi
c001e661:	55                   	push   ebp
c001e662:	e8 93 f1 ff ff       	call   c001d7fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e667:	66 89 84 24 be 00 00 00 	mov    WORD PTR [esp+0xbe],ax
c001e66f:	83 c4 20             	add    esp,0x20
c001e672:	56                   	push   esi
c001e673:	53                   	push   ebx
c001e674:	57                   	push   edi
c001e675:	55                   	push   ebp
c001e676:	e8 bd f2 ff ff       	call   c001d938 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001e67b:	88 84 24 93 00 00 00 	mov    BYTE PTR [esp+0x93],al
c001e682:	56                   	push   esi
c001e683:	53                   	push   ebx
c001e684:	57                   	push   edi
c001e685:	55                   	push   ebp
c001e686:	e8 17 f2 ff ff       	call   c001d8a2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e68b:	b9 09 00 00 00       	mov    ecx,0x9
c001e690:	66 89 84 24 9e 00 00 00 	mov    WORD PTR [esp+0x9e],ax
c001e698:	8a 44 24 42          	mov    al,BYTE PTR [esp+0x42]
c001e69c:	88 84 24 bc 00 00 00 	mov    BYTE PTR [esp+0xbc],al
c001e6a3:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001e6a7:	88 84 24 a0 00 00 00 	mov    BYTE PTR [esp+0xa0],al
c001e6ae:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001e6b2:	88 84 24 a1 00 00 00 	mov    BYTE PTR [esp+0xa1],al
c001e6b9:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001e6bd:	88 84 24 a2 00 00 00 	mov    BYTE PTR [esp+0xa2],al
c001e6c4:	83 ec 0c             	sub    esp,0xc
c001e6c7:	fc                   	cld    
c001e6c8:	89 e7                	mov    edi,esp
c001e6ca:	8d b4 24 a8 00 00 00 	lea    esi,[esp+0xa8]
c001e6d1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e6d3:	55                   	push   ebp
c001e6d4:	e8 59 f8 ff ff       	call   c001df32 <PCI::foundDevice(PCIDeviceInfo)>
c001e6d9:	81 c4 dc 00 00 00    	add    esp,0xdc
c001e6df:	5b                   	pop    ebx
c001e6e0:	5e                   	pop    esi
c001e6e1:	5f                   	pop    edi
c001e6e2:	5d                   	pop    ebp
c001e6e3:	c3                   	ret    

c001e6e4 <PCI::checkDevice(unsigned char, unsigned char)>:
c001e6e4:	55                   	push   ebp
c001e6e5:	57                   	push   edi
c001e6e6:	56                   	push   esi
c001e6e7:	53                   	push   ebx
c001e6e8:	83 ec 0c             	sub    esp,0xc
c001e6eb:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001e6ef:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001e6f4:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001e6f9:	6a 00                	push   0x0
c001e6fb:	56                   	push   esi
c001e6fc:	57                   	push   edi
c001e6fd:	55                   	push   ebp
c001e6fe:	e8 9f f1 ff ff       	call   c001d8a2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e703:	6a 00                	push   0x0
c001e705:	56                   	push   esi
c001e706:	57                   	push   edi
c001e707:	55                   	push   ebp
c001e708:	e8 65 fc ff ff       	call   c001e372 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001e70d:	83 c4 20             	add    esp,0x20
c001e710:	6a 00                	push   0x0
c001e712:	56                   	push   esi
c001e713:	57                   	push   edi
c001e714:	55                   	push   ebp
c001e715:	e8 ac f1 ff ff       	call   c001d8c6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001e71a:	83 c4 10             	add    esp,0x10
c001e71d:	84 c0                	test   al,al
c001e71f:	79 27                	jns    c001e748 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001e721:	bb 01 00 00 00       	mov    ebx,0x1
c001e726:	53                   	push   ebx
c001e727:	56                   	push   esi
c001e728:	57                   	push   edi
c001e729:	55                   	push   ebp
c001e72a:	e8 73 f1 ff ff       	call   c001d8a2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e72f:	83 c4 10             	add    esp,0x10
c001e732:	66 40                	inc    ax
c001e734:	74 0c                	je     c001e742 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001e736:	53                   	push   ebx
c001e737:	56                   	push   esi
c001e738:	57                   	push   edi
c001e739:	55                   	push   ebp
c001e73a:	e8 33 fc ff ff       	call   c001e372 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001e73f:	83 c4 10             	add    esp,0x10
c001e742:	43                   	inc    ebx
c001e743:	83 fb 08             	cmp    ebx,0x8
c001e746:	75 de                	jne    c001e726 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001e748:	83 c4 0c             	add    esp,0xc
c001e74b:	5b                   	pop    ebx
c001e74c:	5e                   	pop    esi
c001e74d:	5f                   	pop    edi
c001e74e:	5d                   	pop    ebp
c001e74f:	c3                   	ret    

c001e750 <PCI::detect()>:
c001e750:	56                   	push   esi
c001e751:	53                   	push   ebx
c001e752:	53                   	push   ebx
c001e753:	31 db                	xor    ebx,ebx
c001e755:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e759:	6a 00                	push   0x0
c001e75b:	6a 00                	push   0x0
c001e75d:	6a 00                	push   0x0
c001e75f:	56                   	push   esi
c001e760:	e8 61 f1 ff ff       	call   c001d8c6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001e765:	83 c4 10             	add    esp,0x10
c001e768:	a8 80                	test   al,0x80
c001e76a:	75 21                	jne    c001e78d <PCI::detect()+0x3d>
c001e76c:	51                   	push   ecx
c001e76d:	51                   	push   ecx
c001e76e:	6a 00                	push   0x0
c001e770:	56                   	push   esi
c001e771:	e8 98 f7 ff ff       	call   c001df0e <PCI::checkBus(unsigned char)>
c001e776:	83 c4 10             	add    esp,0x10
c001e779:	eb 24                	jmp    c001e79f <PCI::detect()+0x4f>
c001e77b:	52                   	push   edx
c001e77c:	52                   	push   edx
c001e77d:	53                   	push   ebx
c001e77e:	43                   	inc    ebx
c001e77f:	56                   	push   esi
c001e780:	e8 89 f7 ff ff       	call   c001df0e <PCI::checkBus(unsigned char)>
c001e785:	83 c4 10             	add    esp,0x10
c001e788:	83 fb 08             	cmp    ebx,0x8
c001e78b:	74 12                	je     c001e79f <PCI::detect()+0x4f>
c001e78d:	53                   	push   ebx
c001e78e:	6a 00                	push   0x0
c001e790:	6a 00                	push   0x0
c001e792:	56                   	push   esi
c001e793:	e8 0a f1 ff ff       	call   c001d8a2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e798:	83 c4 10             	add    esp,0x10
c001e79b:	66 40                	inc    ax
c001e79d:	74 dc                	je     c001e77b <PCI::detect()+0x2b>
c001e79f:	58                   	pop    eax
c001e7a0:	5b                   	pop    ebx
c001e7a1:	5e                   	pop    esi
c001e7a2:	c3                   	ret    
c001e7a3:	90                   	nop

c001e7a4 <IDE::close(int, int, void*)>:
c001e7a4:	83 c8 ff             	or     eax,0xffffffff
c001e7a7:	c3                   	ret    

c001e7a8 <IDE::IDE()>:
c001e7a8:	83 ec 0c             	sub    esp,0xc
c001e7ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7af:	83 ec 08             	sub    esp,0x8
c001e7b2:	68 ec 68 02 c0       	push   0xc00268ec
c001e7b7:	50                   	push   eax
c001e7b8:	e8 67 00 ff ff       	call   c000e824 <HardDiskController::HardDiskController(char const*)>
c001e7bd:	83 c4 10             	add    esp,0x10
c001e7c0:	ba 98 69 02 c0       	mov    edx,0xc0026998
c001e7c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7c9:	89 10                	mov    DWORD PTR [eax],edx
c001e7cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7cf:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001e7d6:	90                   	nop
c001e7d7:	83 c4 0c             	add    esp,0xc
c001e7da:	c3                   	ret    
c001e7db:	90                   	nop

c001e7dc <IDE::prepareInterrupt(unsigned char)>:
c001e7dc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001e7e1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e7e5:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001e7ed:	c3                   	ret    

c001e7ee <selectDrive(unsigned char, unsigned char)>:
c001e7ee:	c3                   	ret    
c001e7ef:	90                   	nop

c001e7f0 <IDE::getBase(unsigned char)>:
c001e7f0:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001e7f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e7f9:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001e801:	c3                   	ret    

c001e802 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001e802:	55                   	push   ebp
c001e803:	57                   	push   edi
c001e804:	56                   	push   esi
c001e805:	53                   	push   ebx
c001e806:	83 ec 1c             	sub    esp,0x1c
c001e809:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001e80d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e811:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001e814:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001e818:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e81c:	80 f9 03             	cmp    cl,0x3
c001e81f:	77 51                	ja     c001e872 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001e821:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e825:	0f b6 f2             	movzx  esi,dl
c001e828:	0f b6 db             	movzx  ebx,bl
c001e82b:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001e82e:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001e832:	83 ca 80             	or     edx,0xffffff80
c001e835:	0f b6 d2             	movzx  edx,dl
c001e838:	52                   	push   edx
c001e839:	6a 0c                	push   0xc
c001e83b:	56                   	push   esi
c001e83c:	57                   	push   edi
c001e83d:	e8 c0 ff ff ff       	call   c001e802 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e842:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001e847:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e84b:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001e84f:	ee                   	out    dx,al
c001e850:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001e855:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001e859:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001e85d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001e861:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001e869:	83 c4 2c             	add    esp,0x2c
c001e86c:	5b                   	pop    ebx
c001e86d:	5e                   	pop    esi
c001e86e:	5f                   	pop    edi
c001e86f:	5d                   	pop    ebp
c001e870:	eb 90                	jmp    c001e802 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e872:	80 fb 07             	cmp    bl,0x7
c001e875:	77 12                	ja     c001e889 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001e877:	0f b6 d2             	movzx  edx,dl
c001e87a:	0f b6 db             	movzx  ebx,bl
c001e87d:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001e885:	89 da                	mov    edx,ebx
c001e887:	eb 2f                	jmp    c001e8b8 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001e889:	80 fb 0d             	cmp    bl,0xd
c001e88c:	77 13                	ja     c001e8a1 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001e88e:	0f b6 d2             	movzx  edx,dl
c001e891:	0f b6 db             	movzx  ebx,bl
c001e894:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001e89b:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001e89f:	eb 17                	jmp    c001e8b8 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001e8a1:	80 fb 15             	cmp    bl,0x15
c001e8a4:	77 13                	ja     c001e8b9 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001e8a6:	0f b6 d2             	movzx  edx,dl
c001e8a9:	0f b6 db             	movzx  ebx,bl
c001e8ac:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001e8b4:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001e8b8:	ee                   	out    dx,al
c001e8b9:	83 c4 1c             	add    esp,0x1c
c001e8bc:	5b                   	pop    ebx
c001e8bd:	5e                   	pop    esi
c001e8be:	5f                   	pop    edi
c001e8bf:	5d                   	pop    ebp
c001e8c0:	c3                   	ret    
c001e8c1:	90                   	nop

c001e8c2 <IDE::read(unsigned char, unsigned char)>:
c001e8c2:	55                   	push   ebp
c001e8c3:	57                   	push   edi
c001e8c4:	56                   	push   esi
c001e8c5:	53                   	push   ebx
c001e8c6:	83 ec 1c             	sub    esp,0x1c
c001e8c9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001e8cd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e8d1:	8d 43 f8             	lea    eax,[ebx-0x8]
c001e8d4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001e8d8:	3c 03                	cmp    al,0x3
c001e8da:	77 43                	ja     c001e91f <IDE::read(unsigned char, unsigned char)+0x5d>
c001e8dc:	0f b6 f2             	movzx  esi,dl
c001e8df:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001e8e2:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001e8e6:	83 c8 80             	or     eax,0xffffff80
c001e8e9:	0f b6 c0             	movzx  eax,al
c001e8ec:	50                   	push   eax
c001e8ed:	6a 0c                	push   0xc
c001e8ef:	56                   	push   esi
c001e8f0:	57                   	push   edi
c001e8f1:	e8 0c ff ff ff       	call   c001e802 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e8f6:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001e8fb:	0f b6 c3             	movzx  eax,bl
c001e8fe:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001e902:	ec                   	in     al,dx
c001e903:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001e907:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001e90c:	52                   	push   edx
c001e90d:	6a 0c                	push   0xc
c001e90f:	56                   	push   esi
c001e910:	57                   	push   edi
c001e911:	e8 ec fe ff ff       	call   c001e802 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e916:	83 c4 20             	add    esp,0x20
c001e919:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e91d:	eb 49                	jmp    c001e968 <IDE::read(unsigned char, unsigned char)+0xa6>
c001e91f:	80 fb 07             	cmp    bl,0x7
c001e922:	77 12                	ja     c001e936 <IDE::read(unsigned char, unsigned char)+0x74>
c001e924:	0f b6 d2             	movzx  edx,dl
c001e927:	0f b6 c3             	movzx  eax,bl
c001e92a:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001e932:	89 c2                	mov    edx,eax
c001e934:	eb 31                	jmp    c001e967 <IDE::read(unsigned char, unsigned char)+0xa5>
c001e936:	80 fb 0d             	cmp    bl,0xd
c001e939:	77 13                	ja     c001e94e <IDE::read(unsigned char, unsigned char)+0x8c>
c001e93b:	0f b6 d2             	movzx  edx,dl
c001e93e:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001e945:	0f b6 d3             	movzx  edx,bl
c001e948:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001e94c:	eb 19                	jmp    c001e967 <IDE::read(unsigned char, unsigned char)+0xa5>
c001e94e:	31 c0                	xor    eax,eax
c001e950:	80 fb 15             	cmp    bl,0x15
c001e953:	77 13                	ja     c001e968 <IDE::read(unsigned char, unsigned char)+0xa6>
c001e955:	0f b6 d2             	movzx  edx,dl
c001e958:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001e960:	0f b6 d3             	movzx  edx,bl
c001e963:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001e967:	ec                   	in     al,dx
c001e968:	83 c4 1c             	add    esp,0x1c
c001e96b:	5b                   	pop    ebx
c001e96c:	5e                   	pop    esi
c001e96d:	5f                   	pop    edi
c001e96e:	5d                   	pop    ebp
c001e96f:	c3                   	ret    

c001e970 <IDE::waitInterrupt(unsigned char)>:
c001e970:	55                   	push   ebp
c001e971:	57                   	push   edi
c001e972:	56                   	push   esi
c001e973:	53                   	push   ebx
c001e974:	31 db                	xor    ebx,ebx
c001e976:	83 ec 0c             	sub    esp,0xc
c001e979:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001e97d:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001e982:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001e98a:	89 e8                	mov    eax,ebp
c001e98c:	84 c0                	test   al,al
c001e98e:	75 30                	jne    c001e9c0 <IDE::waitInterrupt(unsigned char)+0x50>
c001e990:	50                   	push   eax
c001e991:	6a 0c                	push   0xc
c001e993:	56                   	push   esi
c001e994:	57                   	push   edi
c001e995:	e8 28 ff ff ff       	call   c001e8c2 <IDE::read(unsigned char, unsigned char)>
c001e99a:	83 c4 10             	add    esp,0x10
c001e99d:	a8 01                	test   al,0x1
c001e99f:	75 27                	jne    c001e9c8 <IDE::waitInterrupt(unsigned char)+0x58>
c001e9a1:	f6 c3 04             	test   bl,0x4
c001e9a4:	75 12                	jne    c001e9b8 <IDE::waitInterrupt(unsigned char)+0x48>
c001e9a6:	83 fb 32             	cmp    ebx,0x32
c001e9a9:	7e 0d                	jle    c001e9b8 <IDE::waitInterrupt(unsigned char)+0x48>
c001e9ab:	83 ec 0c             	sub    esp,0xc
c001e9ae:	6a 64                	push   0x64
c001e9b0:	e8 83 8f ff ff       	call   c0017938 <milliTenthSleep(unsigned int)>
c001e9b5:	83 c4 10             	add    esp,0x10
c001e9b8:	83 fb 3c             	cmp    ebx,0x3c
c001e9bb:	74 0b                	je     c001e9c8 <IDE::waitInterrupt(unsigned char)+0x58>
c001e9bd:	43                   	inc    ebx
c001e9be:	eb c2                	jmp    c001e982 <IDE::waitInterrupt(unsigned char)+0x12>
c001e9c0:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001e9c8:	83 c4 0c             	add    esp,0xc
c001e9cb:	89 e8                	mov    eax,ebp
c001e9cd:	5b                   	pop    ebx
c001e9ce:	5e                   	pop    esi
c001e9cf:	5f                   	pop    edi
c001e9d0:	5d                   	pop    ebp
c001e9d1:	c3                   	ret    

c001e9d2 <ideChannel0IRQHandler(regs*, void*)>:
c001e9d2:	83 ec 10             	sub    esp,0x10
c001e9d5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e9d9:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001e9e0:	6a 07                	push   0x7
c001e9e2:	6a 00                	push   0x0
c001e9e4:	50                   	push   eax
c001e9e5:	e8 d8 fe ff ff       	call   c001e8c2 <IDE::read(unsigned char, unsigned char)>
c001e9ea:	83 c4 1c             	add    esp,0x1c
c001e9ed:	c3                   	ret    

c001e9ee <ideChannel1IRQHandler(regs*, void*)>:
c001e9ee:	83 ec 10             	sub    esp,0x10
c001e9f1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e9f5:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001e9fc:	6a 07                	push   0x7
c001e9fe:	6a 01                	push   0x1
c001ea00:	50                   	push   eax
c001ea01:	e8 bc fe ff ff       	call   c001e8c2 <IDE::read(unsigned char, unsigned char)>
c001ea06:	83 c4 1c             	add    esp,0x1c
c001ea09:	c3                   	ret    

c001ea0a <IDE::enableIRQs(unsigned char, bool)>:
c001ea0a:	57                   	push   edi
c001ea0b:	56                   	push   esi
c001ea0c:	be 04 00 00 00       	mov    esi,0x4
c001ea11:	53                   	push   ebx
c001ea12:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001ea17:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ea1b:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001ea20:	0f 94 c0             	sete   al
c001ea23:	d1 e0                	shl    eax,1
c001ea25:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001ea2c:	0f b6 c0             	movzx  eax,al
c001ea2f:	50                   	push   eax
c001ea30:	6a 0c                	push   0xc
c001ea32:	57                   	push   edi
c001ea33:	53                   	push   ebx
c001ea34:	e8 c9 fd ff ff       	call   c001e802 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ea39:	83 c4 10             	add    esp,0x10
c001ea3c:	50                   	push   eax
c001ea3d:	6a 0c                	push   0xc
c001ea3f:	57                   	push   edi
c001ea40:	53                   	push   ebx
c001ea41:	e8 7c fe ff ff       	call   c001e8c2 <IDE::read(unsigned char, unsigned char)>
c001ea46:	83 c4 10             	add    esp,0x10
c001ea49:	4e                   	dec    esi
c001ea4a:	75 f0                	jne    c001ea3c <IDE::enableIRQs(unsigned char, bool)+0x32>
c001ea4c:	5b                   	pop    ebx
c001ea4d:	5e                   	pop    esi
c001ea4e:	5f                   	pop    edi
c001ea4f:	c3                   	ret    

c001ea50 <IDE::open(int, int, void*)>:
c001ea50:	55                   	push   ebp
c001ea51:	57                   	push   edi
c001ea52:	56                   	push   esi
c001ea53:	53                   	push   ebx
c001ea54:	83 ec 1c             	sub    esp,0x1c
c001ea57:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ea5b:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001ea64:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001ea6d:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001ea74:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001ea7b:	0f 85 cb 02 00 00    	jne    c001ed4c <IDE::open(int, int, void*)+0x2fc>
c001ea81:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001ea87:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001ea8b:	83 e0 7f             	and    eax,0x7f
c001ea8e:	3c 05                	cmp    al,0x5
c001ea90:	74 04                	je     c001ea96 <IDE::open(int, int, void*)+0x46>
c001ea92:	3c 0f                	cmp    al,0xf
c001ea94:	75 32                	jne    c001eac8 <IDE::open(int, int, void*)+0x78>
c001ea96:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001ea9c:	83 e0 fc             	and    eax,0xfffffffc
c001ea9f:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001eaa6:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001eaac:	83 e0 fc             	and    eax,0xfffffffc
c001eaaf:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001eab6:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001eabc:	83 e0 fc             	and    eax,0xfffffffc
c001eabf:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001eac6:	eb 14                	jmp    c001eadc <IDE::open(int, int, void*)+0x8c>
c001eac8:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001ead2:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001eadc:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001eae3:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001eaea:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001eaee:	89 c6                	mov    esi,eax
c001eaf0:	bf f8 0c 00 00       	mov    edi,0xcf8
c001eaf5:	c1 e6 10             	shl    esi,0x10
c001eaf8:	89 e8                	mov    eax,ebp
c001eafa:	89 fa                	mov    edx,edi
c001eafc:	c1 e0 0b             	shl    eax,0xb
c001eaff:	09 f0                	or     eax,esi
c001eb01:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001eb08:	c1 e6 08             	shl    esi,0x8
c001eb0b:	09 c6                	or     esi,eax
c001eb0d:	89 f0                	mov    eax,esi
c001eb0f:	0d 08 00 00 80       	or     eax,0x80000008
c001eb14:	ef                   	out    dx,eax
c001eb15:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001eb1a:	89 ca                	mov    edx,ecx
c001eb1c:	ed                   	in     eax,dx
c001eb1d:	c1 e8 10             	shr    eax,0x10
c001eb20:	3d ff ff 00 00       	cmp    eax,0xffff
c001eb25:	0f 84 f5 00 00 00    	je     c001ec20 <IDE::open(int, int, void*)+0x1d0>
c001eb2b:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001eb31:	89 fa                	mov    edx,edi
c001eb33:	89 f0                	mov    eax,esi
c001eb35:	ef                   	out    dx,eax
c001eb36:	b0 fe                	mov    al,0xfe
c001eb38:	89 ca                	mov    edx,ecx
c001eb3a:	ee                   	out    dx,al
c001eb3b:	89 f0                	mov    eax,esi
c001eb3d:	89 fa                	mov    edx,edi
c001eb3f:	ef                   	out    dx,eax
c001eb40:	89 ca                	mov    edx,ecx
c001eb42:	ed                   	in     eax,dx
c001eb43:	3c fe                	cmp    al,0xfe
c001eb45:	0f 85 a9 00 00 00    	jne    c001ebf4 <IDE::open(int, int, void*)+0x1a4>
c001eb4b:	8b 15 08 7f 02 c0    	mov    edx,DWORD PTR ds:0xc0027f08
c001eb51:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001eb58:	74 33                	je     c001eb8d <IDE::open(int, int, void*)+0x13d>
c001eb5a:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001eb60:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001eb64:	40                   	inc    eax
c001eb65:	83 ec 0c             	sub    esp,0xc
c001eb68:	0f b6 c0             	movzx  eax,al
c001eb6b:	50                   	push   eax
c001eb6c:	55                   	push   ebp
c001eb6d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001eb71:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001eb77:	51                   	push   ecx
c001eb78:	e8 73 29 ff ff       	call   c00114f0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001eb7d:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001eb82:	83 c4 1c             	add    esp,0x1c
c001eb85:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001eb8b:	eb 0a                	jmp    c001eb97 <IDE::open(int, int, void*)+0x147>
c001eb8d:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001eb97:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001eb9e:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001eba5:	c1 e1 10             	shl    ecx,0x10
c001eba8:	c1 e0 08             	shl    eax,0x8
c001ebab:	bf f8 0c 00 00       	mov    edi,0xcf8
c001ebb0:	09 c1                	or     ecx,eax
c001ebb2:	89 fa                	mov    edx,edi
c001ebb4:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001ebbb:	c1 e0 0b             	shl    eax,0xb
c001ebbe:	09 c1                	or     ecx,eax
c001ebc0:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001ebc6:	89 c8                	mov    eax,ecx
c001ebc8:	ef                   	out    dx,eax
c001ebc9:	be fc 0c 00 00       	mov    esi,0xcfc
c001ebce:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001ebd4:	89 f2                	mov    edx,esi
c001ebd6:	ee                   	out    dx,al
c001ebd7:	89 c8                	mov    eax,ecx
c001ebd9:	89 fa                	mov    edx,edi
c001ebdb:	ef                   	out    dx,eax
c001ebdc:	89 f2                	mov    edx,esi
c001ebde:	ed                   	in     eax,dx
c001ebdf:	0f b6 c0             	movzx  eax,al
c001ebe2:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001ebe8:	74 46                	je     c001ec30 <IDE::open(int, int, void*)+0x1e0>
c001ebea:	83 ec 0c             	sub    esp,0xc
c001ebed:	68 04 69 02 c0       	push   0xc0026904
c001ebf2:	eb 34                	jmp    c001ec28 <IDE::open(int, int, void*)+0x1d8>
c001ebf4:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001ebfd:	75 17                	jne    c001ec16 <IDE::open(int, int, void*)+0x1c6>
c001ebff:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001ec04:	74 07                	je     c001ec0d <IDE::open(int, int, void*)+0x1bd>
c001ec06:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001ec0b:	75 09                	jne    c001ec16 <IDE::open(int, int, void*)+0x1c6>
c001ec0d:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001ec14:	eb 1a                	jmp    c001ec30 <IDE::open(int, int, void*)+0x1e0>
c001ec16:	83 ec 0c             	sub    esp,0xc
c001ec19:	68 0c 69 02 c0       	push   0xc002690c
c001ec1e:	eb 08                	jmp    c001ec28 <IDE::open(int, int, void*)+0x1d8>
c001ec20:	83 ec 0c             	sub    esp,0xc
c001ec23:	68 3d 69 02 c0       	push   0xc002693d
c001ec28:	e8 ae 53 ff ff       	call   c0013fdb <Krnl::panic(char const*)>
c001ec2d:	83 c4 10             	add    esp,0x10
c001ec30:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001ec37:	79 1a                	jns    c001ec53 <IDE::open(int, int, void*)+0x203>
c001ec39:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001ec3f:	83 e0 fc             	and    eax,0xfffffffc
c001ec42:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001ec49:	83 c0 08             	add    eax,0x8
c001ec4c:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001ec53:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001ec59:	89 c2                	mov    edx,eax
c001ec5b:	83 e2 0f             	and    edx,0xf
c001ec5e:	66 83 fa 08          	cmp    dx,0x8
c001ec62:	75 0a                	jne    c001ec6e <IDE::open(int, int, void*)+0x21e>
c001ec64:	83 e8 02             	sub    eax,0x2
c001ec67:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001ec6e:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001ec74:	89 c2                	mov    edx,eax
c001ec76:	83 e2 0f             	and    edx,0xf
c001ec79:	66 83 fa 08          	cmp    dx,0x8
c001ec7d:	75 0a                	jne    c001ec89 <IDE::open(int, int, void*)+0x239>
c001ec7f:	83 e8 02             	sub    eax,0x2
c001ec82:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001ec89:	0f b6 8b c4 00 00 00 	movzx  ecx,BYTE PTR [ebx+0xc4]
c001ec90:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001ec97:	89 c8                	mov    eax,ecx
c001ec99:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001ec9c:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001eca0:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001eca4:	8d 51 01             	lea    edx,[ecx+0x1]
c001eca7:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001ecac:	0f b6 d2             	movzx  edx,dl
c001ecaf:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001ecb6:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001ecb9:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001ecbd:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001ecc1:	8d 48 02             	lea    ecx,[eax+0x2]
c001ecc4:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001ecc9:	0f b6 c9             	movzx  ecx,cl
c001eccc:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001ecd2:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001ecd5:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001ecd9:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001ecdd:	8d 50 03             	lea    edx,[eax+0x3]
c001ece0:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001ece5:	0f b6 d2             	movzx  edx,dl
c001ece8:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001ecee:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001ecf1:	83 c0 04             	add    eax,0x4
c001ecf4:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001ecf8:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001ecfc:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001ed02:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001ed07:	56                   	push   esi
c001ed08:	56                   	push   esi
c001ed09:	0f b7 83 5e 01 00 00 	movzx  eax,WORD PTR [ebx+0x15e]
c001ed10:	50                   	push   eax
c001ed11:	68 67 69 02 c0       	push   0xc0026967
c001ed16:	e8 aa e2 fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001ed1b:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001ed22:	83 c4 10             	add    esp,0x10
c001ed25:	66 85 f6             	test   si,si
c001ed28:	74 5f                	je     c001ed89 <IDE::open(int, int, void*)+0x339>
c001ed2a:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001ed31:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001ed34:	89 d0                	mov    eax,edx
c001ed36:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001ed3a:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001ed3e:	40                   	inc    eax
c001ed3f:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001ed45:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001ed4a:	eb 3d                	jmp    c001ed89 <IDE::open(int, int, void*)+0x339>
c001ed4c:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001ed52:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001ed59:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001ed60:	66 05 06 02          	add    ax,0x206
c001ed64:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001ed6b:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001ed72:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001ed79:	66 05 06 02          	add    ax,0x206
c001ed7d:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001ed84:	e9 ca fe ff ff       	jmp    c001ec53 <IDE::open(int, int, void*)+0x203>
c001ed89:	50                   	push   eax
c001ed8a:	50                   	push   eax
c001ed8b:	6a 00                	push   0x0
c001ed8d:	53                   	push   ebx
c001ed8e:	e8 49 fa ff ff       	call   c001e7dc <IDE::prepareInterrupt(unsigned char)>
c001ed93:	5a                   	pop    edx
c001ed94:	59                   	pop    ecx
c001ed95:	6a 01                	push   0x1
c001ed97:	53                   	push   ebx
c001ed98:	e8 3f fa ff ff       	call   c001e7dc <IDE::prepareInterrupt(unsigned char)>
c001ed9d:	83 c4 0c             	add    esp,0xc
c001eda0:	6a 00                	push   0x0
c001eda2:	6a 00                	push   0x0
c001eda4:	53                   	push   ebx
c001eda5:	e8 60 fc ff ff       	call   c001ea0a <IDE::enableIRQs(unsigned char, bool)>
c001edaa:	83 c4 0c             	add    esp,0xc
c001edad:	6a 00                	push   0x0
c001edaf:	6a 01                	push   0x1
c001edb1:	53                   	push   ebx
c001edb2:	e8 53 fc ff ff       	call   c001ea0a <IDE::enableIRQs(unsigned char, bool)>
c001edb7:	83 c4 10             	add    esp,0x10
c001edba:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001edc1:	74 34                	je     c001edf7 <IDE::open(int, int, void*)+0x3a7>
c001edc3:	83 ec 0c             	sub    esp,0xc
c001edc6:	53                   	push   ebx
c001edc7:	6a 01                	push   0x1
c001edc9:	68 d2 e9 01 c0       	push   0xc001e9d2
c001edce:	6a 0e                	push   0xe
c001edd0:	53                   	push   ebx
c001edd1:	e8 18 f6 fe ff       	call   c000e3ee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001edd6:	83 c4 14             	add    esp,0x14
c001edd9:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001eddf:	53                   	push   ebx
c001ede0:	6a 01                	push   0x1
c001ede2:	68 ee e9 01 c0       	push   0xc001e9ee
c001ede7:	6a 0f                	push   0xf
c001ede9:	53                   	push   ebx
c001edea:	e8 ff f5 fe ff       	call   c000e3ee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001edef:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001edf5:	eb 38                	jmp    c001ee2f <IDE::open(int, int, void*)+0x3df>
c001edf7:	83 ec 0c             	sub    esp,0xc
c001edfa:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001ee04:	53                   	push   ebx
c001ee05:	6a 00                	push   0x0
c001ee07:	68 d2 e9 01 c0       	push   0xc001e9d2
c001ee0c:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001ee12:	53                   	push   ebx
c001ee13:	e8 d6 f5 fe ff       	call   c000e3ee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ee18:	83 c4 14             	add    esp,0x14
c001ee1b:	53                   	push   ebx
c001ee1c:	6a 00                	push   0x0
c001ee1e:	68 ee e9 01 c0       	push   0xc001e9ee
c001ee23:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001ee29:	53                   	push   ebx
c001ee2a:	e8 bf f5 fe ff       	call   c000e3ee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ee2f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ee31:	83 c4 20             	add    esp,0x20
c001ee34:	83 ec 0c             	sub    esp,0xc
c001ee37:	53                   	push   ebx
c001ee38:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001ee3b:	83 c4 0c             	add    esp,0xc
c001ee3e:	6a 07                	push   0x7
c001ee40:	6a 00                	push   0x0
c001ee42:	53                   	push   ebx
c001ee43:	e8 7a fa ff ff       	call   c001e8c2 <IDE::read(unsigned char, unsigned char)>
c001ee48:	83 c4 0c             	add    esp,0xc
c001ee4b:	6a 07                	push   0x7
c001ee4d:	6a 01                	push   0x1
c001ee4f:	53                   	push   ebx
c001ee50:	e8 6d fa ff ff       	call   c001e8c2 <IDE::read(unsigned char, unsigned char)>
c001ee55:	83 c4 0c             	add    esp,0xc
c001ee58:	6a 01                	push   0x1
c001ee5a:	6a 00                	push   0x0
c001ee5c:	53                   	push   ebx
c001ee5d:	e8 a8 fb ff ff       	call   c001ea0a <IDE::enableIRQs(unsigned char, bool)>
c001ee62:	83 c4 0c             	add    esp,0xc
c001ee65:	6a 01                	push   0x1
c001ee67:	6a 01                	push   0x1
c001ee69:	53                   	push   ebx
c001ee6a:	e8 9b fb ff ff       	call   c001ea0a <IDE::enableIRQs(unsigned char, bool)>
c001ee6f:	83 c4 2c             	add    esp,0x2c
c001ee72:	31 c0                	xor    eax,eax
c001ee74:	5b                   	pop    ebx
c001ee75:	5e                   	pop    esi
c001ee76:	5f                   	pop    edi
c001ee77:	5d                   	pop    ebp
c001ee78:	c3                   	ret    
c001ee79:	90                   	nop

c001ee7a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001ee7a:	55                   	push   ebp
c001ee7b:	57                   	push   edi
c001ee7c:	56                   	push   esi
c001ee7d:	53                   	push   ebx
c001ee7e:	83 ec 1c             	sub    esp,0x1c
c001ee81:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ee85:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ee89:	8d 50 f8             	lea    edx,[eax-0x8]
c001ee8c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ee90:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001ee94:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001ee98:	80 fa 03             	cmp    dl,0x3
c001ee9b:	77 5d                	ja     c001eefa <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001ee9d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001eea1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001eea5:	0f b6 db             	movzx  ebx,bl
c001eea8:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001eeab:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001eeaf:	83 ca 80             	or     edx,0xffffff80
c001eeb2:	0f b6 d2             	movzx  edx,dl
c001eeb5:	52                   	push   edx
c001eeb6:	6a 0c                	push   0xc
c001eeb8:	53                   	push   ebx
c001eeb9:	56                   	push   esi
c001eeba:	e8 43 f9 ff ff       	call   c001e802 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eebf:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001eec4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001eec8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001eecc:	0f b6 c0             	movzx  eax,al
c001eecf:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001eed3:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001eed5:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001eeda:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001eede:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001eee2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001eee6:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001eeee:	83 c4 2c             	add    esp,0x2c
c001eef1:	5b                   	pop    ebx
c001eef2:	5e                   	pop    esi
c001eef3:	5f                   	pop    edi
c001eef4:	5d                   	pop    ebp
c001eef5:	e9 08 f9 ff ff       	jmp    c001e802 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eefa:	3c 07                	cmp    al,0x7
c001eefc:	77 10                	ja     c001ef0e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001eefe:	0f b6 db             	movzx  ebx,bl
c001ef01:	0f b6 d0             	movzx  edx,al
c001ef04:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001ef0c:	eb 2d                	jmp    c001ef3b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001ef0e:	3c 0d                	cmp    al,0xd
c001ef10:	77 13                	ja     c001ef25 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001ef12:	0f b6 db             	movzx  ebx,bl
c001ef15:	0f b6 c0             	movzx  eax,al
c001ef18:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001ef1f:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001ef23:	eb 16                	jmp    c001ef3b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001ef25:	3c 15                	cmp    al,0x15
c001ef27:	77 14                	ja     c001ef3d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001ef29:	0f b6 db             	movzx  ebx,bl
c001ef2c:	0f b6 c0             	movzx  eax,al
c001ef2f:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001ef37:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001ef3b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001ef3d:	83 c4 1c             	add    esp,0x1c
c001ef40:	5b                   	pop    ebx
c001ef41:	5e                   	pop    esi
c001ef42:	5f                   	pop    edi
c001ef43:	5d                   	pop    ebp
c001ef44:	c3                   	ret    
c001ef45:	90                   	nop

c001ef46 <IDE::detect()>:
c001ef46:	55                   	push   ebp
c001ef47:	57                   	push   edi
c001ef48:	56                   	push   esi
c001ef49:	53                   	push   ebx
c001ef4a:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001ef50:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001ef57:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001ef5e:	0f 85 97 02 00 00    	jne    c001f1fb <IDE::detect()+0x2b5>
c001ef64:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001ef6b:	31 f6                	xor    esi,esi
c001ef6d:	31 ed                	xor    ebp,ebp
c001ef6f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ef77:	89 e8                	mov    eax,ebp
c001ef79:	c1 e0 06             	shl    eax,0x6
c001ef7c:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001ef84:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001ef88:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001ef8c:	c1 e0 04             	shl    eax,0x4
c001ef8f:	83 c8 a0             	or     eax,0xffffffa0
c001ef92:	0f b6 c0             	movzx  eax,al
c001ef95:	50                   	push   eax
c001ef96:	6a 06                	push   0x6
c001ef98:	56                   	push   esi
c001ef99:	53                   	push   ebx
c001ef9a:	e8 63 f8 ff ff       	call   c001e802 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ef9f:	83 c4 0c             	add    esp,0xc
c001efa2:	6a 0c                	push   0xc
c001efa4:	56                   	push   esi
c001efa5:	53                   	push   ebx
c001efa6:	e8 17 f9 ff ff       	call   c001e8c2 <IDE::read(unsigned char, unsigned char)>
c001efab:	83 c4 0c             	add    esp,0xc
c001efae:	6a 0c                	push   0xc
c001efb0:	56                   	push   esi
c001efb1:	53                   	push   ebx
c001efb2:	e8 0b f9 ff ff       	call   c001e8c2 <IDE::read(unsigned char, unsigned char)>
c001efb7:	83 c4 0c             	add    esp,0xc
c001efba:	6a 0c                	push   0xc
c001efbc:	56                   	push   esi
c001efbd:	53                   	push   ebx
c001efbe:	e8 ff f8 ff ff       	call   c001e8c2 <IDE::read(unsigned char, unsigned char)>
c001efc3:	83 c4 0c             	add    esp,0xc
c001efc6:	6a 0c                	push   0xc
c001efc8:	56                   	push   esi
c001efc9:	53                   	push   ebx
c001efca:	e8 f3 f8 ff ff       	call   c001e8c2 <IDE::read(unsigned char, unsigned char)>
c001efcf:	68 ec 00 00 00       	push   0xec
c001efd4:	6a 07                	push   0x7
c001efd6:	56                   	push   esi
c001efd7:	53                   	push   ebx
c001efd8:	e8 25 f8 ff ff       	call   c001e802 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001efdd:	83 c4 1c             	add    esp,0x1c
c001efe0:	6a 0c                	push   0xc
c001efe2:	56                   	push   esi
c001efe3:	53                   	push   ebx
c001efe4:	e8 d9 f8 ff ff       	call   c001e8c2 <IDE::read(unsigned char, unsigned char)>
c001efe9:	83 c4 0c             	add    esp,0xc
c001efec:	6a 0c                	push   0xc
c001efee:	56                   	push   esi
c001efef:	53                   	push   ebx
c001eff0:	e8 cd f8 ff ff       	call   c001e8c2 <IDE::read(unsigned char, unsigned char)>
c001eff5:	83 c4 0c             	add    esp,0xc
c001eff8:	6a 0c                	push   0xc
c001effa:	56                   	push   esi
c001effb:	53                   	push   ebx
c001effc:	e8 c1 f8 ff ff       	call   c001e8c2 <IDE::read(unsigned char, unsigned char)>
c001f001:	83 c4 0c             	add    esp,0xc
c001f004:	6a 0c                	push   0xc
c001f006:	56                   	push   esi
c001f007:	53                   	push   ebx
c001f008:	e8 b5 f8 ff ff       	call   c001e8c2 <IDE::read(unsigned char, unsigned char)>
c001f00d:	83 c4 0c             	add    esp,0xc
c001f010:	6a 0c                	push   0xc
c001f012:	56                   	push   esi
c001f013:	53                   	push   ebx
c001f014:	e8 a9 f8 ff ff       	call   c001e8c2 <IDE::read(unsigned char, unsigned char)>
c001f019:	83 c4 10             	add    esp,0x10
c001f01c:	84 c0                	test   al,al
c001f01e:	0f 84 5f 01 00 00    	je     c001f183 <IDE::detect()+0x23d>
c001f024:	31 ff                	xor    edi,edi
c001f026:	50                   	push   eax
c001f027:	6a 0c                	push   0xc
c001f029:	56                   	push   esi
c001f02a:	53                   	push   ebx
c001f02b:	e8 92 f8 ff ff       	call   c001e8c2 <IDE::read(unsigned char, unsigned char)>
c001f030:	83 c4 10             	add    esp,0x10
c001f033:	a8 01                	test   al,0x1
c001f035:	0f 85 69 01 00 00    	jne    c001f1a4 <IDE::detect()+0x25e>
c001f03b:	84 c0                	test   al,al
c001f03d:	78 04                	js     c001f043 <IDE::detect()+0xfd>
c001f03f:	a8 08                	test   al,0x8
c001f041:	75 23                	jne    c001f066 <IDE::detect()+0x120>
c001f043:	47                   	inc    edi
c001f044:	81 ff 17 01 00 00    	cmp    edi,0x117
c001f04a:	7e da                	jle    c001f026 <IDE::detect()+0xe0>
c001f04c:	83 ec 0c             	sub    esp,0xc
c001f04f:	6a 32                	push   0x32
c001f051:	e8 e2 88 ff ff       	call   c0017938 <milliTenthSleep(unsigned int)>
c001f056:	83 c4 10             	add    esp,0x10
c001f059:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001f05f:	75 c5                	jne    c001f026 <IDE::detect()+0xe0>
c001f061:	e9 3e 01 00 00       	jmp    c001f1a4 <IDE::detect()+0x25e>
c001f066:	31 c9                	xor    ecx,ecx
c001f068:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001f06c:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001f070:	83 ec 0c             	sub    esp,0xc
c001f073:	68 80 00 00 00       	push   0x80
c001f078:	57                   	push   edi
c001f079:	6a 00                	push   0x0
c001f07b:	56                   	push   esi
c001f07c:	53                   	push   ebx
c001f07d:	e8 f8 fd ff ff       	call   c001ee7a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001f082:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001f087:	89 e8                	mov    eax,ebp
c001f089:	89 d1                	mov    ecx,edx
c001f08b:	c1 e0 06             	shl    eax,0x6
c001f08e:	01 d8                	add    eax,ebx
c001f090:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001f097:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001f09e:	89 f2                	mov    edx,esi
c001f0a0:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001f0a6:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001f0aa:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001f0b0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001f0b4:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001f0bb:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001f0c3:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001f0ca:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001f0d2:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001f0d8:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001f0df:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001f0e5:	8d 54 24 58          	lea    edx,[esp+0x58]
c001f0e9:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001f0ed:	83 c4 20             	add    esp,0x20
c001f0f0:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001f0f3:	83 c0 02             	add    eax,0x2
c001f0f6:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001f0fc:	83 c7 02             	add    edi,0x2
c001f0ff:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001f102:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001f108:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001f10c:	75 e2                	jne    c001f0f0 <IDE::detect()+0x1aa>
c001f10e:	89 e8                	mov    eax,ebp
c001f110:	c1 e0 06             	shl    eax,0x6
c001f113:	01 d8                	add    eax,ebx
c001f115:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001f11b:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001f122:	66 c1 ea 09          	shr    dx,0x9
c001f126:	83 e2 01             	and    edx,0x1
c001f129:	84 c9                	test   cl,cl
c001f12b:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001f131:	75 22                	jne    c001f155 <IDE::detect()+0x20f>
c001f133:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001f13a:	74 46                	je     c001f182 <IDE::detect()+0x23c>
c001f13c:	83 ec 0c             	sub    esp,0xc
c001f13f:	68 7c 01 00 00       	push   0x17c
c001f144:	e8 6e ab fe ff       	call   c0009cb7 <malloc>
c001f149:	89 c7                	mov    edi,eax
c001f14b:	89 04 24             	mov    DWORD PTR [esp],eax
c001f14e:	e8 49 06 00 00       	call   c001f79c <ATA::ATA()>
c001f153:	eb 17                	jmp    c001f16c <IDE::detect()+0x226>
c001f155:	83 ec 0c             	sub    esp,0xc
c001f158:	68 84 01 00 00       	push   0x184
c001f15d:	e8 55 ab fe ff       	call   c0009cb7 <malloc>
c001f162:	89 c7                	mov    edi,eax
c001f164:	89 04 24             	mov    DWORD PTR [esp],eax
c001f167:	e8 b8 0c 00 00       	call   c001fe24 <ATAPI::ATAPI()>
c001f16c:	5a                   	pop    edx
c001f16d:	59                   	pop    ecx
c001f16e:	57                   	push   edi
c001f16f:	53                   	push   ebx
c001f170:	e8 01 f3 fe ff       	call   c000e476 <Device::addChild(Device*)>
c001f175:	8b 07                	mov    eax,DWORD PTR [edi]
c001f177:	53                   	push   ebx
c001f178:	55                   	push   ebp
c001f179:	6a 00                	push   0x0
c001f17b:	57                   	push   edi
c001f17c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001f17f:	83 c4 20             	add    esp,0x20
c001f182:	45                   	inc    ebp
c001f183:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001f188:	74 0d                	je     c001f197 <IDE::detect()+0x251>
c001f18a:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001f192:	e9 e0 fd ff ff       	jmp    c001ef77 <IDE::detect()+0x31>
c001f197:	4e                   	dec    esi
c001f198:	74 61                	je     c001f1fb <IDE::detect()+0x2b5>
c001f19a:	be 01 00 00 00       	mov    esi,0x1
c001f19f:	e9 cb fd ff ff       	jmp    c001ef6f <IDE::detect()+0x29>
c001f1a4:	50                   	push   eax
c001f1a5:	6a 04                	push   0x4
c001f1a7:	56                   	push   esi
c001f1a8:	53                   	push   ebx
c001f1a9:	e8 14 f7 ff ff       	call   c001e8c2 <IDE::read(unsigned char, unsigned char)>
c001f1ae:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001f1b2:	83 c4 0c             	add    esp,0xc
c001f1b5:	6a 05                	push   0x5
c001f1b7:	56                   	push   esi
c001f1b8:	53                   	push   ebx
c001f1b9:	e8 04 f7 ff ff       	call   c001e8c2 <IDE::read(unsigned char, unsigned char)>
c001f1be:	83 c4 10             	add    esp,0x10
c001f1c1:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001f1c5:	80 fa 14             	cmp    dl,0x14
c001f1c8:	75 04                	jne    c001f1ce <IDE::detect()+0x288>
c001f1ca:	3c eb                	cmp    al,0xeb
c001f1cc:	eb 07                	jmp    c001f1d5 <IDE::detect()+0x28f>
c001f1ce:	3c 96                	cmp    al,0x96
c001f1d0:	75 b1                	jne    c001f183 <IDE::detect()+0x23d>
c001f1d2:	80 fa 69             	cmp    dl,0x69
c001f1d5:	75 ac                	jne    c001f183 <IDE::detect()+0x23d>
c001f1d7:	68 a1 00 00 00       	push   0xa1
c001f1dc:	6a 07                	push   0x7
c001f1de:	56                   	push   esi
c001f1df:	53                   	push   ebx
c001f1e0:	e8 1d f6 ff ff       	call   c001e802 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f1e5:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001f1ec:	e8 47 87 ff ff       	call   c0017938 <milliTenthSleep(unsigned int)>
c001f1f1:	83 c4 10             	add    esp,0x10
c001f1f4:	b1 01                	mov    cl,0x1
c001f1f6:	e9 6d fe ff ff       	jmp    c001f068 <IDE::detect()+0x122>
c001f1fb:	81 c4 1c 02 00 00    	add    esp,0x21c
c001f201:	5b                   	pop    ebx
c001f202:	5e                   	pop    esi
c001f203:	5f                   	pop    edi
c001f204:	5d                   	pop    ebp
c001f205:	c3                   	ret    

c001f206 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001f206:	55                   	push   ebp
c001f207:	57                   	push   edi
c001f208:	56                   	push   esi
c001f209:	53                   	push   ebx
c001f20a:	83 ec 1c             	sub    esp,0x1c
c001f20d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f211:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001f215:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f219:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001f21d:	88 c3                	mov    bl,al
c001f21f:	84 c0                	test   al,al
c001f221:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f225:	0f 84 81 00 00 00    	je     c001f2ac <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f22b:	83 ec 0c             	sub    esp,0xc
c001f22e:	68 83 69 02 c0       	push   0xc0026983
c001f233:	e8 8d dd fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001f238:	83 c4 10             	add    esp,0x10
c001f23b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f23f:	3c 01                	cmp    al,0x1
c001f241:	74 63                	je     c001f2a6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c001f243:	3c 02                	cmp    al,0x2
c001f245:	75 53                	jne    c001f29a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001f247:	d1 e6                	shl    esi,1
c001f249:	09 ee                	or     esi,ebp
c001f24b:	50                   	push   eax
c001f24c:	89 f0                	mov    eax,esi
c001f24e:	6a 01                	push   0x1
c001f250:	0f b6 f0             	movzx  esi,al
c001f253:	c1 e6 06             	shl    esi,0x6
c001f256:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001f25e:	50                   	push   eax
c001f25f:	57                   	push   edi
c001f260:	e8 5d f6 ff ff       	call   c001e8c2 <IDE::read(unsigned char, unsigned char)>
c001f265:	83 c4 10             	add    esp,0x10
c001f268:	a8 01                	test   al,0x1
c001f26a:	74 02                	je     c001f26e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c001f26c:	b3 07                	mov    bl,0x7
c001f26e:	a8 02                	test   al,0x2
c001f270:	74 02                	je     c001f274 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c001f272:	b3 03                	mov    bl,0x3
c001f274:	a8 04                	test   al,0x4
c001f276:	74 02                	je     c001f27a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c001f278:	b3 14                	mov    bl,0x14
c001f27a:	a8 08                	test   al,0x8
c001f27c:	74 02                	je     c001f280 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c001f27e:	b3 03                	mov    bl,0x3
c001f280:	a8 10                	test   al,0x10
c001f282:	74 02                	je     c001f286 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c001f284:	b3 15                	mov    bl,0x15
c001f286:	a8 20                	test   al,0x20
c001f288:	74 02                	je     c001f28c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c001f28a:	b3 03                	mov    bl,0x3
c001f28c:	a8 40                	test   al,0x40
c001f28e:	74 02                	je     c001f292 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c001f290:	b3 16                	mov    bl,0x16
c001f292:	84 c0                	test   al,al
c001f294:	79 16                	jns    c001f2ac <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f296:	b3 0d                	mov    bl,0xd
c001f298:	eb 12                	jmp    c001f2ac <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f29a:	3c 03                	cmp    al,0x3
c001f29c:	74 0c                	je     c001f2aa <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c001f29e:	3c 04                	cmp    al,0x4
c001f2a0:	75 0a                	jne    c001f2ac <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f2a2:	b3 08                	mov    bl,0x8
c001f2a4:	eb 06                	jmp    c001f2ac <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f2a6:	b3 13                	mov    bl,0x13
c001f2a8:	eb 02                	jmp    c001f2ac <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f2aa:	b3 17                	mov    bl,0x17
c001f2ac:	83 c4 1c             	add    esp,0x1c
c001f2af:	88 d8                	mov    al,bl
c001f2b1:	5b                   	pop    ebx
c001f2b2:	5e                   	pop    esi
c001f2b3:	5f                   	pop    edi
c001f2b4:	5d                   	pop    ebp
c001f2b5:	c3                   	ret    

c001f2b6 <IDE::polling(unsigned char, unsigned int)>:
c001f2b6:	57                   	push   edi
c001f2b7:	56                   	push   esi
c001f2b8:	53                   	push   ebx
c001f2b9:	bb 04 00 00 00       	mov    ebx,0x4
c001f2be:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001f2c2:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001f2c7:	52                   	push   edx
c001f2c8:	6a 0c                	push   0xc
c001f2ca:	56                   	push   esi
c001f2cb:	57                   	push   edi
c001f2cc:	e8 f1 f5 ff ff       	call   c001e8c2 <IDE::read(unsigned char, unsigned char)>
c001f2d1:	83 c4 10             	add    esp,0x10
c001f2d4:	4b                   	dec    ebx
c001f2d5:	75 f0                	jne    c001f2c7 <IDE::polling(unsigned char, unsigned int)+0x11>
c001f2d7:	bb a0 86 01 00       	mov    ebx,0x186a0
c001f2dc:	50                   	push   eax
c001f2dd:	6a 0c                	push   0xc
c001f2df:	56                   	push   esi
c001f2e0:	57                   	push   edi
c001f2e1:	e8 dc f5 ff ff       	call   c001e8c2 <IDE::read(unsigned char, unsigned char)>
c001f2e6:	83 c4 10             	add    esp,0x10
c001f2e9:	a8 01                	test   al,0x1
c001f2eb:	75 17                	jne    c001f304 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001f2ed:	a8 20                	test   al,0x20
c001f2ef:	75 0f                	jne    c001f300 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001f2f1:	4b                   	dec    ebx
c001f2f2:	74 10                	je     c001f304 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001f2f4:	84 c0                	test   al,al
c001f2f6:	78 e4                	js     c001f2dc <IDE::polling(unsigned char, unsigned int)+0x26>
c001f2f8:	a8 08                	test   al,0x8
c001f2fa:	74 e0                	je     c001f2dc <IDE::polling(unsigned char, unsigned int)+0x26>
c001f2fc:	31 c0                	xor    eax,eax
c001f2fe:	eb 06                	jmp    c001f306 <IDE::polling(unsigned char, unsigned int)+0x50>
c001f300:	b0 01                	mov    al,0x1
c001f302:	eb 02                	jmp    c001f306 <IDE::polling(unsigned char, unsigned int)+0x50>
c001f304:	b0 02                	mov    al,0x2
c001f306:	5b                   	pop    ebx
c001f307:	5e                   	pop    esi
c001f308:	5f                   	pop    edi
c001f309:	c3                   	ret    

c001f30a <SATABus::close(int, int, void*)>:
c001f30a:	31 c0                	xor    eax,eax
c001f30c:	c3                   	ret    
c001f30d:	90                   	nop

c001f30e <SATABus::detect()>:
c001f30e:	c3                   	ret    
c001f30f:	90                   	nop

c001f310 <SATABus::SATABus()>:
c001f310:	83 ec 0c             	sub    esp,0xc
c001f313:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f317:	83 ec 08             	sub    esp,0x8
c001f31a:	68 bc 69 02 c0       	push   0xc00269bc
c001f31f:	50                   	push   eax
c001f320:	e8 ff f4 fe ff       	call   c000e824 <HardDiskController::HardDiskController(char const*)>
c001f325:	83 c4 10             	add    esp,0x10
c001f328:	ba 64 6a 02 c0       	mov    edx,0xc0026a64
c001f32d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f331:	89 10                	mov    DWORD PTR [eax],edx
c001f333:	83 ec 0c             	sub    esp,0xc
c001f336:	6a 50                	push   0x50
c001f338:	e8 1c b1 fe ff       	call   c000a459 <Phys::allocateContiguousPages(int)>
c001f33d:	83 c4 10             	add    esp,0x10
c001f340:	89 c2                	mov    edx,eax
c001f342:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f346:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001f34c:	83 ec 0c             	sub    esp,0xc
c001f34f:	6a 50                	push   0x50
c001f351:	e8 13 c9 fe ff       	call   c000bc69 <Virt::allocateKernelVirtualPages(int)>
c001f356:	83 c4 10             	add    esp,0x10
c001f359:	89 c2                	mov    edx,eax
c001f35b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f35f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001f365:	a1 34 80 02 c0       	mov    eax,ds:0xc0028034
c001f36a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f36e:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001f374:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f378:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001f37e:	83 ec 0c             	sub    esp,0xc
c001f381:	6a 03                	push   0x3
c001f383:	6a 50                	push   0x50
c001f385:	51                   	push   ecx
c001f386:	52                   	push   edx
c001f387:	50                   	push   eax
c001f388:	e8 3f d2 fe ff       	call   c000c5cc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001f38d:	83 c4 20             	add    esp,0x20
c001f390:	90                   	nop
c001f391:	83 c4 0c             	add    esp,0xc
c001f394:	c3                   	ret    
c001f395:	90                   	nop

c001f396 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001f396:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f39a:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001f39d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001f3a0:	09 c2                	or     edx,eax
c001f3a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f3a6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f3ac:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f3ae:	31 c0                	xor    eax,eax
c001f3b0:	c1 e9 08             	shr    ecx,0x8
c001f3b3:	83 e1 0f             	and    ecx,0xf
c001f3b6:	39 c8                	cmp    eax,ecx
c001f3b8:	74 0a                	je     c001f3c4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001f3ba:	f6 c2 01             	test   dl,0x1
c001f3bd:	74 08                	je     c001f3c7 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001f3bf:	d1 ea                	shr    edx,1
c001f3c1:	40                   	inc    eax
c001f3c2:	eb f2                	jmp    c001f3b6 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001f3c4:	83 c8 ff             	or     eax,0xffffffff
c001f3c7:	c3                   	ret    

c001f3c8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001f3c8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f3cc:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001f3cf:	89 c2                	mov    edx,eax
c001f3d1:	c1 ea 08             	shr    edx,0x8
c001f3d4:	83 e2 0f             	and    edx,0xf
c001f3d7:	fe ca                	dec    dl
c001f3d9:	75 31                	jne    c001f40c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001f3db:	83 e0 0f             	and    eax,0xf
c001f3de:	3c 03                	cmp    al,0x3
c001f3e0:	75 2a                	jne    c001f40c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001f3e2:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001f3e5:	b8 02 00 00 00       	mov    eax,0x2
c001f3ea:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001f3f0:	74 1c                	je     c001f40e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001f3f2:	b8 04 00 00 00       	mov    eax,0x4
c001f3f7:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001f3fd:	74 0f                	je     c001f40e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001f3ff:	31 c0                	xor    eax,eax
c001f401:	83 fa 03             	cmp    edx,0x3
c001f404:	0f 94 c0             	sete   al
c001f407:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001f40b:	c3                   	ret    
c001f40c:	31 c0                	xor    eax,eax
c001f40e:	c3                   	ret    
c001f40f:	90                   	nop

c001f410 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001f410:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f414:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f417:	0f ba e2 0f          	bt     edx,0xf
c001f41b:	72 f7                	jb     c001f414 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001f41d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f420:	83 ca 10             	or     edx,0x10
c001f423:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f426:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f429:	83 ca 01             	or     edx,0x1
c001f42c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f42f:	c3                   	ret    

c001f430 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001f430:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f434:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f437:	83 e2 fe             	and    edx,0xfffffffe
c001f43a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f43d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f440:	83 e2 ef             	and    edx,0xffffffef
c001f443:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f446:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f449:	0f ba e2 0e          	bt     edx,0xe
c001f44d:	72 f7                	jb     c001f446 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001f44f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f452:	0f ba e2 0f          	bt     edx,0xf
c001f456:	72 ee                	jb     c001f446 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001f458:	c3                   	ret    
c001f459:	90                   	nop

c001f45a <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001f45a:	55                   	push   ebp
c001f45b:	57                   	push   edi
c001f45c:	56                   	push   esi
c001f45d:	53                   	push   ebx
c001f45e:	83 ec 1c             	sub    esp,0x1c
c001f461:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f465:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f469:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f46d:	53                   	push   ebx
c001f46e:	89 fd                	mov    ebp,edi
c001f470:	56                   	push   esi
c001f471:	c1 e5 0a             	shl    ebp,0xa
c001f474:	e8 b7 ff ff ff       	call   c001f430 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001f479:	83 ec 0c             	sub    esp,0xc
c001f47c:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001f482:	01 e8                	add    eax,ebp
c001f484:	89 03                	mov    DWORD PTR [ebx],eax
c001f486:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f488:	68 00 04 00 00       	push   0x400
c001f48d:	6a 00                	push   0x0
c001f48f:	50                   	push   eax
c001f490:	e8 e7 11 fe ff       	call   c000067c <memset>
c001f495:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001f49b:	89 fa                	mov    edx,edi
c001f49d:	01 e8                	add    eax,ebp
c001f49f:	c1 e7 0d             	shl    edi,0xd
c001f4a2:	89 03                	mov    DWORD PTR [ebx],eax
c001f4a4:	c1 e2 08             	shl    edx,0x8
c001f4a7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f4ae:	81 c2 00 80 00 00    	add    edx,0x8000
c001f4b4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001f4b8:	89 d0                	mov    eax,edx
c001f4ba:	83 c4 1c             	add    esp,0x1c
c001f4bd:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001f4c3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001f4c6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001f4c9:	68 00 01 00 00       	push   0x100
c001f4ce:	6a 00                	push   0x0
c001f4d0:	50                   	push   eax
c001f4d1:	e8 a6 11 fe ff       	call   c000067c <memset>
c001f4d6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f4da:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001f4e0:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c001f4e6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001f4ea:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001f4ed:	83 c4 10             	add    esp,0x10
c001f4f0:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001f4f7:	31 ff                	xor    edi,edi
c001f4f9:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001f4ff:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001f505:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f509:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001f50f:	83 c5 20             	add    ebp,0x20
c001f512:	01 f8                	add    eax,edi
c001f514:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f517:	52                   	push   edx
c001f518:	68 00 01 00 00       	push   0x100
c001f51d:	6a 00                	push   0x0
c001f51f:	50                   	push   eax
c001f520:	e8 57 11 fe ff       	call   c000067c <memset>
c001f525:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f529:	83 c4 10             	add    esp,0x10
c001f52c:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001f532:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001f539:	01 f8                	add    eax,edi
c001f53b:	81 c7 00 01 00 00    	add    edi,0x100
c001f541:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f544:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001f54a:	75 b3                	jne    c001f4ff <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c001f54c:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c001f550:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c001f554:	83 c4 1c             	add    esp,0x1c
c001f557:	5b                   	pop    ebx
c001f558:	5e                   	pop    esi
c001f559:	5f                   	pop    edi
c001f55a:	5d                   	pop    ebp
c001f55b:	e9 b0 fe ff ff       	jmp    c001f410 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c001f560 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001f560:	55                   	push   ebp
c001f561:	57                   	push   edi
c001f562:	56                   	push   esi
c001f563:	53                   	push   ebx
c001f564:	83 ec 0c             	sub    esp,0xc
c001f567:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001f56b:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c001f572:	74 2d                	je     c001f5a1 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x41>
c001f574:	83 ec 0c             	sub    esp,0xc
c001f577:	68 e0 69 02 c0       	push   0xc00269e0
c001f57c:	e8 90 a7 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001f581:	83 c4 10             	add    esp,0x10
c001f584:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c001f58b:	75 14                	jne    c001f5a1 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x41>
c001f58d:	e4 60                	in     al,0x60
c001f58f:	3c 1c                	cmp    al,0x1c
c001f591:	74 04                	je     c001f597 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001f593:	3c 5a                	cmp    al,0x5a
c001f595:	75 f6                	jne    c001f58d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x2d>
c001f597:	e4 60                	in     al,0x60
c001f599:	3c 5a                	cmp    al,0x5a
c001f59b:	74 fa                	je     c001f597 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001f59d:	3c 1c                	cmp    al,0x1c
c001f59f:	74 f6                	je     c001f597 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001f5a1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001f5a5:	31 db                	xor    ebx,ebx
c001f5a7:	8b 68 0c             	mov    ebp,DWORD PTR [eax+0xc]
c001f5aa:	f7 c5 01 00 00 00    	test   ebp,0x1
c001f5b0:	0f 84 78 01 00 00    	je     c001f72e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f5b6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001f5ba:	89 d8                	mov    eax,ebx
c001f5bc:	c1 e0 07             	shl    eax,0x7
c001f5bf:	8d bc 02 00 01 00 00 	lea    edi,[edx+eax*1+0x100]
c001f5c6:	50                   	push   eax
c001f5c7:	50                   	push   eax
c001f5c8:	57                   	push   edi
c001f5c9:	56                   	push   esi
c001f5ca:	e8 f9 fd ff ff       	call   c001f3c8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001f5cf:	83 c4 10             	add    esp,0x10
c001f5d2:	83 f8 01             	cmp    eax,0x1
c001f5d5:	0f 85 19 01 00 00    	jne    c001f6f4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x194>
c001f5db:	50                   	push   eax
c001f5dc:	53                   	push   ebx
c001f5dd:	57                   	push   edi
c001f5de:	56                   	push   esi
c001f5df:	e8 76 fe ff ff       	call   c001f45a <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001f5e4:	83 c4 10             	add    esp,0x10
c001f5e7:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c001f5ee:	74 2d                	je     c001f61d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xbd>
c001f5f0:	83 ec 0c             	sub    esp,0xc
c001f5f3:	68 f5 69 02 c0       	push   0xc00269f5
c001f5f8:	e8 14 a7 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001f5fd:	83 c4 10             	add    esp,0x10
c001f600:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c001f607:	75 14                	jne    c001f61d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xbd>
c001f609:	e4 60                	in     al,0x60
c001f60b:	3c 1c                	cmp    al,0x1c
c001f60d:	74 04                	je     c001f613 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001f60f:	3c 5a                	cmp    al,0x5a
c001f611:	75 f6                	jne    c001f609 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa9>
c001f613:	e4 60                	in     al,0x60
c001f615:	3c 5a                	cmp    al,0x5a
c001f617:	74 fa                	je     c001f613 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001f619:	3c 1c                	cmp    al,0x1c
c001f61b:	74 f6                	je     c001f613 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001f61d:	83 ec 0c             	sub    esp,0xc
c001f620:	68 7c 01 00 00       	push   0x17c
c001f625:	e8 8d a6 fe ff       	call   c0009cb7 <malloc>
c001f62a:	89 04 24             	mov    DWORD PTR [esp],eax
c001f62d:	89 c7                	mov    edi,eax
c001f62f:	e8 28 10 00 00       	call   c002065c <SATA::SATA()>
c001f634:	83 c4 10             	add    esp,0x10
c001f637:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c001f63e:	74 2d                	je     c001f66d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x10d>
c001f640:	83 ec 0c             	sub    esp,0xc
c001f643:	68 0a 6a 02 c0       	push   0xc0026a0a
c001f648:	e8 c4 a6 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001f64d:	83 c4 10             	add    esp,0x10
c001f650:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c001f657:	75 14                	jne    c001f66d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x10d>
c001f659:	e4 60                	in     al,0x60
c001f65b:	3c 5a                	cmp    al,0x5a
c001f65d:	74 04                	je     c001f663 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001f65f:	3c 1c                	cmp    al,0x1c
c001f661:	75 f6                	jne    c001f659 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xf9>
c001f663:	e4 60                	in     al,0x60
c001f665:	3c 5a                	cmp    al,0x5a
c001f667:	74 fa                	je     c001f663 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001f669:	3c 1c                	cmp    al,0x1c
c001f66b:	74 f6                	je     c001f663 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001f66d:	50                   	push   eax
c001f66e:	50                   	push   eax
c001f66f:	57                   	push   edi
c001f670:	56                   	push   esi
c001f671:	e8 00 ee fe ff       	call   c000e476 <Device::addChild(Device*)>
c001f676:	83 c4 10             	add    esp,0x10
c001f679:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c001f680:	74 2d                	je     c001f6af <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14f>
c001f682:	83 ec 0c             	sub    esp,0xc
c001f685:	68 1f 6a 02 c0       	push   0xc0026a1f
c001f68a:	e8 82 a6 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001f68f:	83 c4 10             	add    esp,0x10
c001f692:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c001f699:	75 14                	jne    c001f6af <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14f>
c001f69b:	e4 60                	in     al,0x60
c001f69d:	3c 1c                	cmp    al,0x1c
c001f69f:	74 04                	je     c001f6a5 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001f6a1:	3c 5a                	cmp    al,0x5a
c001f6a3:	75 f6                	jne    c001f69b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x13b>
c001f6a5:	e4 60                	in     al,0x60
c001f6a7:	3c 5a                	cmp    al,0x5a
c001f6a9:	74 fa                	je     c001f6a5 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001f6ab:	3c 1c                	cmp    al,0x1c
c001f6ad:	74 f6                	je     c001f6a5 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001f6af:	8b 07                	mov    eax,DWORD PTR [edi]
c001f6b1:	56                   	push   esi
c001f6b2:	6a 00                	push   0x0
c001f6b4:	53                   	push   ebx
c001f6b5:	57                   	push   edi
c001f6b6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001f6b9:	83 c4 10             	add    esp,0x10
c001f6bc:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c001f6c3:	74 69                	je     c001f72e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f6c5:	83 ec 0c             	sub    esp,0xc
c001f6c8:	68 34 6a 02 c0       	push   0xc0026a34
c001f6cd:	e8 3f a6 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001f6d2:	83 c4 10             	add    esp,0x10
c001f6d5:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c001f6dc:	75 50                	jne    c001f72e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f6de:	e4 60                	in     al,0x60
c001f6e0:	3c 1c                	cmp    al,0x1c
c001f6e2:	74 04                	je     c001f6e8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001f6e4:	3c 5a                	cmp    al,0x5a
c001f6e6:	75 f6                	jne    c001f6de <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x17e>
c001f6e8:	e4 60                	in     al,0x60
c001f6ea:	3c 5a                	cmp    al,0x5a
c001f6ec:	74 fa                	je     c001f6e8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001f6ee:	3c 1c                	cmp    al,0x1c
c001f6f0:	74 f6                	je     c001f6e8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001f6f2:	eb 3a                	jmp    c001f72e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f6f4:	83 f8 04             	cmp    eax,0x4
c001f6f7:	75 35                	jne    c001f72e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f6f9:	50                   	push   eax
c001f6fa:	53                   	push   ebx
c001f6fb:	57                   	push   edi
c001f6fc:	56                   	push   esi
c001f6fd:	e8 58 fd ff ff       	call   c001f45a <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001f702:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001f709:	e8 a9 a5 fe ff       	call   c0009cb7 <malloc>
c001f70e:	89 04 24             	mov    DWORD PTR [esp],eax
c001f711:	89 c7                	mov    edi,eax
c001f713:	e8 ba 17 00 00       	call   c0020ed2 <SATAPI::SATAPI()>
c001f718:	5a                   	pop    edx
c001f719:	59                   	pop    ecx
c001f71a:	57                   	push   edi
c001f71b:	56                   	push   esi
c001f71c:	e8 55 ed fe ff       	call   c000e476 <Device::addChild(Device*)>
c001f721:	8b 07                	mov    eax,DWORD PTR [edi]
c001f723:	56                   	push   esi
c001f724:	6a 00                	push   0x0
c001f726:	53                   	push   ebx
c001f727:	57                   	push   edi
c001f728:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001f72b:	83 c4 20             	add    esp,0x20
c001f72e:	d1 ed                	shr    ebp,1
c001f730:	43                   	inc    ebx
c001f731:	83 fb 20             	cmp    ebx,0x20
c001f734:	0f 85 70 fe ff ff    	jne    c001f5aa <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x4a>
c001f73a:	83 c4 0c             	add    esp,0xc
c001f73d:	5b                   	pop    ebx
c001f73e:	5e                   	pop    esi
c001f73f:	5f                   	pop    edi
c001f740:	5d                   	pop    ebp
c001f741:	c3                   	ret    

c001f742 <SATABus::open(int, int, void*)>:
c001f742:	53                   	push   ebx
c001f743:	83 ec 10             	sub    esp,0x10
c001f746:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f74a:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c001f750:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001f756:	50                   	push   eax
c001f757:	68 49 6a 02 c0       	push   0xc0026a49
c001f75c:	e8 64 d8 fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001f761:	58                   	pop    eax
c001f762:	5a                   	pop    edx
c001f763:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c001f769:	53                   	push   ebx
c001f76a:	e8 f1 fd ff ff       	call   c001f560 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001f76f:	31 c0                	xor    eax,eax
c001f771:	83 c4 18             	add    esp,0x18
c001f774:	5b                   	pop    ebx
c001f775:	c3                   	ret    

c001f776 <ATA::close(int, int, void*)>:
c001f776:	83 ec 0c             	sub    esp,0xc
c001f779:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f77d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f783:	85 c0                	test   eax,eax
c001f785:	74 0c                	je     c001f793 <ATA::close(int, int, void*)+0x1d>
c001f787:	83 ec 0c             	sub    esp,0xc
c001f78a:	8b 10                	mov    edx,DWORD PTR [eax]
c001f78c:	50                   	push   eax
c001f78d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001f790:	83 c4 10             	add    esp,0x10
c001f793:	31 c0                	xor    eax,eax
c001f795:	83 c4 0c             	add    esp,0xc
c001f798:	c3                   	ret    
c001f799:	90                   	nop

c001f79a <ATA::powerSaving(PowerSavingLevel)>:
c001f79a:	c3                   	ret    
c001f79b:	90                   	nop

c001f79c <ATA::ATA()>:
c001f79c:	83 ec 0c             	sub    esp,0xc
c001f79f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7a3:	83 ec 04             	sub    esp,0x4
c001f7a6:	68 00 02 00 00       	push   0x200
c001f7ab:	68 e7 6b 02 c0       	push   0xc0026be7
c001f7b0:	50                   	push   eax
c001f7b1:	e8 f8 f0 fe ff       	call   c000e8ae <PhysicalDisk::PhysicalDisk(char const*, int)>
c001f7b6:	83 c4 10             	add    esp,0x10
c001f7b9:	ba dc 6a 02 c0       	mov    edx,0xc0026adc
c001f7be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7c2:	89 10                	mov    DWORD PTR [eax],edx
c001f7c4:	90                   	nop
c001f7c5:	83 c4 0c             	add    esp,0xc
c001f7c8:	c3                   	ret    
c001f7c9:	90                   	nop

c001f7ca <ATA::flush(bool)>:
c001f7ca:	53                   	push   ebx
c001f7cb:	83 ec 08             	sub    esp,0x8
c001f7ce:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001f7d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f7d7:	19 c0                	sbb    eax,eax
c001f7d9:	83 e0 fd             	and    eax,0xfffffffd
c001f7dc:	05 ea 00 00 00       	add    eax,0xea
c001f7e1:	50                   	push   eax
c001f7e2:	6a 07                	push   0x7
c001f7e4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f7eb:	50                   	push   eax
c001f7ec:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f7f2:	e8 0b f0 ff ff       	call   c001e802 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f7f7:	83 c4 0c             	add    esp,0xc
c001f7fa:	6a 00                	push   0x0
c001f7fc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f803:	50                   	push   eax
c001f804:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f80a:	e8 a7 fa ff ff       	call   c001f2b6 <IDE::polling(unsigned char, unsigned int)>
c001f80f:	83 c4 18             	add    esp,0x18
c001f812:	5b                   	pop    ebx
c001f813:	c3                   	ret    

c001f814 <ATA::readyForCommand()>:
c001f814:	56                   	push   esi
c001f815:	53                   	push   ebx
c001f816:	53                   	push   ebx
c001f817:	31 db                	xor    ebx,ebx
c001f819:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f81d:	51                   	push   ecx
c001f81e:	6a 0c                	push   0xc
c001f820:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001f827:	50                   	push   eax
c001f828:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001f82e:	e8 8f f0 ff ff       	call   c001e8c2 <IDE::read(unsigned char, unsigned char)>
c001f833:	83 c4 10             	add    esp,0x10
c001f836:	a8 88                	test   al,0x88
c001f838:	74 1f                	je     c001f859 <ATA::readyForCommand()+0x45>
c001f83a:	43                   	inc    ebx
c001f83b:	83 fb 63             	cmp    ebx,0x63
c001f83e:	7e dd                	jle    c001f81d <ATA::readyForCommand()+0x9>
c001f840:	83 ec 0c             	sub    esp,0xc
c001f843:	6a 0a                	push   0xa
c001f845:	e8 ee 80 ff ff       	call   c0017938 <milliTenthSleep(unsigned int)>
c001f84a:	83 c4 10             	add    esp,0x10
c001f84d:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001f853:	75 c8                	jne    c001f81d <ATA::readyForCommand()+0x9>
c001f855:	31 c0                	xor    eax,eax
c001f857:	eb 02                	jmp    c001f85b <ATA::readyForCommand()+0x47>
c001f859:	b0 01                	mov    al,0x1
c001f85b:	5a                   	pop    edx
c001f85c:	5b                   	pop    ebx
c001f85d:	5e                   	pop    esi
c001f85e:	c3                   	ret    
c001f85f:	90                   	nop

c001f860 <ATA::access(unsigned long long, int, void*, bool)>:
c001f860:	55                   	push   ebp
c001f861:	57                   	push   edi
c001f862:	56                   	push   esi
c001f863:	53                   	push   ebx
c001f864:	83 ec 38             	sub    esp,0x38
c001f867:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001f86b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001f86f:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001f873:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001f877:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001f87b:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001f87f:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001f883:	68 88 6a 02 c0       	push   0xc0026a88
c001f888:	e8 38 d7 fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001f88d:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001f893:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f897:	83 c4 10             	add    esp,0x10
c001f89a:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001f8a0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f8a4:	c1 e0 06             	shl    eax,0x6
c001f8a7:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001f8af:	74 5d                	je     c001f90e <ATA::access(unsigned long long, int, void*, bool)+0xae>
c001f8b1:	89 fa                	mov    edx,edi
c001f8b3:	89 f0                	mov    eax,esi
c001f8b5:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001f8b9:	c1 ea 1c             	shr    edx,0x1c
c001f8bc:	89 d1                	mov    ecx,edx
c001f8be:	09 c1                	or     ecx,eax
c001f8c0:	74 25                	je     c001f8e7 <ATA::access(unsigned long long, int, void*, bool)+0x87>
c001f8c2:	31 ed                	xor    ebp,ebp
c001f8c4:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001f8cb:	89 fa                	mov    edx,edi
c001f8cd:	89 f0                	mov    eax,esi
c001f8cf:	0f ad d0             	shrd   eax,edx,cl
c001f8d2:	d3 ea                	shr    edx,cl
c001f8d4:	f6 c1 20             	test   cl,0x20
c001f8d7:	74 02                	je     c001f8db <ATA::access(unsigned long long, int, void*, bool)+0x7b>
c001f8d9:	89 d0                	mov    eax,edx
c001f8db:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001f8df:	45                   	inc    ebp
c001f8e0:	83 fd 06             	cmp    ebp,0x6
c001f8e3:	75 df                	jne    c001f8c4 <ATA::access(unsigned long long, int, void*, bool)+0x64>
c001f8e5:	eb 76                	jmp    c001f95d <ATA::access(unsigned long long, int, void*, bool)+0xfd>
c001f8e7:	89 f0                	mov    eax,esi
c001f8e9:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001f8ee:	89 fa                	mov    edx,edi
c001f8f0:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001f8f7:	0f ac d0 10          	shrd   eax,edx,0x10
c001f8fb:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001f900:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001f904:	c1 ee 18             	shr    esi,0x18
c001f907:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001f90c:	eb 56                	jmp    c001f964 <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001f90e:	6a 00                	push   0x0
c001f910:	6a 3f                	push   0x3f
c001f912:	57                   	push   edi
c001f913:	56                   	push   esi
c001f914:	e8 07 2f 00 00       	call   c0022820 <__umoddi3>
c001f919:	83 c4 10             	add    esp,0x10
c001f91c:	40                   	inc    eax
c001f91d:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001f921:	6a 00                	push   0x0
c001f923:	68 f0 03 00 00       	push   0x3f0
c001f928:	57                   	push   edi
c001f929:	56                   	push   esi
c001f92a:	e8 f1 2d 00 00       	call   c0022720 <__udivdi3>
c001f92f:	83 c4 10             	add    esp,0x10
c001f932:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001f937:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001f93e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001f943:	6a 00                	push   0x0
c001f945:	6a 3f                	push   0x3f
c001f947:	57                   	push   edi
c001f948:	56                   	push   esi
c001f949:	e8 d2 2d 00 00       	call   c0022720 <__udivdi3>
c001f94e:	83 c4 10             	add    esp,0x10
c001f951:	89 c6                	mov    esi,eax
c001f953:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001f958:	83 e6 0f             	and    esi,0xf
c001f95b:	eb 07                	jmp    c001f964 <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001f95d:	31 f6                	xor    esi,esi
c001f95f:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001f964:	bf 01 00 00 00       	mov    edi,0x1
c001f969:	50                   	push   eax
c001f96a:	6a 00                	push   0x0
c001f96c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f973:	50                   	push   eax
c001f974:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001f978:	e8 8d f0 ff ff       	call   c001ea0a <IDE::enableIRQs(unsigned char, bool)>
c001f97d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f980:	e8 8f fe ff ff       	call   c001f814 <ATA::readyForCommand()>
c001f985:	83 c4 10             	add    esp,0x10
c001f988:	84 c0                	test   al,al
c001f98a:	0f 84 bc 02 00 00    	je     c001fc4c <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001f990:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001f996:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001f99c:	c1 e0 04             	shl    eax,0x4
c001f99f:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001f9a6:	09 c6                	or     esi,eax
c001f9a8:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f9ad:	75 05                	jne    c001f9b4 <ATA::access(unsigned long long, int, void*, bool)+0x154>
c001f9af:	83 ce a0             	or     esi,0xffffffa0
c001f9b2:	eb 03                	jmp    c001f9b7 <ATA::access(unsigned long long, int, void*, bool)+0x157>
c001f9b4:	83 ce e0             	or     esi,0xffffffe0
c001f9b7:	89 f0                	mov    eax,esi
c001f9b9:	0f b6 f0             	movzx  esi,al
c001f9bc:	56                   	push   esi
c001f9bd:	6a 06                	push   0x6
c001f9bf:	51                   	push   ecx
c001f9c0:	52                   	push   edx
c001f9c1:	e8 3c ee ff ff       	call   c001e802 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f9c6:	83 c4 10             	add    esp,0x10
c001f9c9:	6a 00                	push   0x0
c001f9cb:	6a 01                	push   0x1
c001f9cd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f9d4:	50                   	push   eax
c001f9d5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f9db:	e8 22 ee ff ff       	call   c001e802 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f9e0:	83 c4 10             	add    esp,0x10
c001f9e3:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001f9e8:	75 6e                	jne    c001fa58 <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c001f9ea:	6a 00                	push   0x0
c001f9ec:	6a 08                	push   0x8
c001f9ee:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f9f5:	50                   	push   eax
c001f9f6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f9fc:	e8 01 ee ff ff       	call   c001e802 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fa01:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001fa06:	50                   	push   eax
c001fa07:	6a 09                	push   0x9
c001fa09:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fa10:	50                   	push   eax
c001fa11:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fa17:	e8 e6 ed ff ff       	call   c001e802 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fa1c:	83 c4 20             	add    esp,0x20
c001fa1f:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001fa24:	50                   	push   eax
c001fa25:	6a 0a                	push   0xa
c001fa27:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fa2e:	50                   	push   eax
c001fa2f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fa35:	e8 c8 ed ff ff       	call   c001e802 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fa3a:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001fa3f:	50                   	push   eax
c001fa40:	6a 0b                	push   0xb
c001fa42:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fa49:	50                   	push   eax
c001fa4a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fa50:	e8 ad ed ff ff       	call   c001e802 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fa55:	83 c4 20             	add    esp,0x20
c001fa58:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001fa5d:	50                   	push   eax
c001fa5e:	6a 02                	push   0x2
c001fa60:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fa67:	50                   	push   eax
c001fa68:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fa6e:	e8 8f ed ff ff       	call   c001e802 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fa73:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001fa78:	50                   	push   eax
c001fa79:	6a 03                	push   0x3
c001fa7b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fa82:	50                   	push   eax
c001fa83:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fa89:	e8 74 ed ff ff       	call   c001e802 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fa8e:	83 c4 20             	add    esp,0x20
c001fa91:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001fa96:	50                   	push   eax
c001fa97:	6a 04                	push   0x4
c001fa99:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001faa0:	50                   	push   eax
c001faa1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001faa7:	e8 56 ed ff ff       	call   c001e802 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001faac:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001fab1:	50                   	push   eax
c001fab2:	6a 05                	push   0x5
c001fab4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fabb:	50                   	push   eax
c001fabc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fac2:	e8 3b ed ff ff       	call   c001e802 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fac7:	83 c4 20             	add    esp,0x20
c001faca:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001facf:	0f 94 c0             	sete   al
c001fad2:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001fad7:	74 09                	je     c001fae2 <ATA::access(unsigned long long, int, void*, bool)+0x282>
c001fad9:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001fae0:	eb 07                	jmp    c001fae9 <ATA::access(unsigned long long, int, void*, bool)+0x289>
c001fae2:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001fae9:	0f b6 c0             	movzx  eax,al
c001faec:	50                   	push   eax
c001faed:	6a 07                	push   0x7
c001faef:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001faf6:	50                   	push   eax
c001faf7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fafd:	e8 00 ed ff ff       	call   c001e802 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fb02:	c7 04 24 95 6a 02 c0 	mov    DWORD PTR [esp],0xc0026a95
c001fb09:	e8 b7 d4 fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001fb0e:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001fb12:	83 c4 10             	add    esp,0x10
c001fb15:	85 f6                	test   esi,esi
c001fb17:	0f 84 f7 00 00 00    	je     c001fc14 <ATA::access(unsigned long long, int, void*, bool)+0x3b4>
c001fb1d:	83 ec 0c             	sub    esp,0xc
c001fb20:	68 98 6a 02 c0       	push   0xc0026a98
c001fb25:	e8 9b d4 fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001fb2a:	83 c4 0c             	add    esp,0xc
c001fb2d:	6a 01                	push   0x1
c001fb2f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fb36:	50                   	push   eax
c001fb37:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fb3d:	e8 74 f7 ff ff       	call   c001f2b6 <IDE::polling(unsigned char, unsigned int)>
c001fb42:	c7 04 24 9b 6a 02 c0 	mov    DWORD PTR [esp],0xc0026a9b
c001fb49:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001fb4d:	e8 73 d4 fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001fb52:	83 c4 10             	add    esp,0x10
c001fb55:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001fb59:	84 c0                	test   al,al
c001fb5b:	74 2b                	je     c001fb88 <ATA::access(unsigned long long, int, void*, bool)+0x328>
c001fb5d:	0f b6 f8             	movzx  edi,al
c001fb60:	57                   	push   edi
c001fb61:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001fb68:	50                   	push   eax
c001fb69:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fb70:	50                   	push   eax
c001fb71:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fb77:	e8 8a f6 ff ff       	call   c001f206 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001fb7c:	c7 04 24 9e 6a 02 c0 	mov    DWORD PTR [esp],0xc0026a9e
c001fb83:	e9 bc 00 00 00       	jmp    c001fc44 <ATA::access(unsigned long long, int, void*, bool)+0x3e4>
c001fb88:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001fb8d:	74 50                	je     c001fbdf <ATA::access(unsigned long long, int, void*, bool)+0x37f>
c001fb8f:	83 ec 0c             	sub    esp,0xc
c001fb92:	31 ed                	xor    ebp,ebp
c001fb94:	68 a9 6a 02 c0       	push   0xc0026aa9
c001fb99:	e8 27 d4 fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001fb9e:	83 c4 10             	add    esp,0x10
c001fba1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001fba5:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001fba9:	50                   	push   eax
c001fbaa:	50                   	push   eax
c001fbab:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fbb2:	50                   	push   eax
c001fbb3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fbb9:	e8 32 ec ff ff       	call   c001e7f0 <IDE::getBase(unsigned char)>
c001fbbe:	89 c2                	mov    edx,eax
c001fbc0:	89 f8                	mov    eax,edi
c001fbc2:	66 ef                	out    dx,ax
c001fbc4:	45                   	inc    ebp
c001fbc5:	83 c4 10             	add    esp,0x10
c001fbc8:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001fbce:	75 d1                	jne    c001fba1 <ATA::access(unsigned long long, int, void*, bool)+0x341>
c001fbd0:	83 ec 0c             	sub    esp,0xc
c001fbd3:	68 ac 6a 02 c0       	push   0xc0026aac
c001fbd8:	e8 e8 d3 fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001fbdd:	eb 24                	jmp    c001fc03 <ATA::access(unsigned long long, int, void*, bool)+0x3a3>
c001fbdf:	51                   	push   ecx
c001fbe0:	51                   	push   ecx
c001fbe1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fbe8:	50                   	push   eax
c001fbe9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fbef:	e8 fc eb ff ff       	call   c001e7f0 <IDE::getBase(unsigned char)>
c001fbf4:	b9 00 01 00 00       	mov    ecx,0x100
c001fbf9:	89 c2                	mov    edx,eax
c001fbfb:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001fbff:	fc                   	cld    
c001fc00:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001fc03:	83 c4 10             	add    esp,0x10
c001fc06:	4e                   	dec    esi
c001fc07:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001fc0f:	e9 01 ff ff ff       	jmp    c001fb15 <ATA::access(unsigned long long, int, void*, bool)+0x2b5>
c001fc14:	31 ff                	xor    edi,edi
c001fc16:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001fc1b:	74 2f                	je     c001fc4c <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001fc1d:	83 ec 0c             	sub    esp,0xc
c001fc20:	68 af 6a 02 c0       	push   0xc0026aaf
c001fc25:	e8 9b d3 fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001fc2a:	58                   	pop    eax
c001fc2b:	31 c0                	xor    eax,eax
c001fc2d:	5a                   	pop    edx
c001fc2e:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001fc33:	0f 94 c0             	sete   al
c001fc36:	50                   	push   eax
c001fc37:	53                   	push   ebx
c001fc38:	e8 8d fb ff ff       	call   c001f7ca <ATA::flush(bool)>
c001fc3d:	c7 04 24 b2 6a 02 c0 	mov    DWORD PTR [esp],0xc0026ab2
c001fc44:	e8 7c d3 fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001fc49:	83 c4 10             	add    esp,0x10
c001fc4c:	83 c4 2c             	add    esp,0x2c
c001fc4f:	89 f8                	mov    eax,edi
c001fc51:	5b                   	pop    ebx
c001fc52:	5e                   	pop    esi
c001fc53:	5f                   	pop    edi
c001fc54:	5d                   	pop    ebp
c001fc55:	c3                   	ret    

c001fc56 <ATA::read(unsigned long long, int, void*)>:
c001fc56:	57                   	push   edi
c001fc57:	b8 04 00 00 00       	mov    eax,0x4
c001fc5c:	56                   	push   esi
c001fc5d:	53                   	push   ebx
c001fc5e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001fc62:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001fc66:	8d 7a ff             	lea    edi,[edx-0x1]
c001fc69:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001fc6d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001fc71:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001fc77:	77 25                	ja     c001fc9e <ATA::read(unsigned long long, int, void*)+0x48>
c001fc79:	b8 06 00 00 00       	mov    eax,0x6
c001fc7e:	85 f6                	test   esi,esi
c001fc80:	74 1c                	je     c001fc9e <ATA::read(unsigned long long, int, void*)+0x48>
c001fc82:	50                   	push   eax
c001fc83:	50                   	push   eax
c001fc84:	6a 00                	push   0x0
c001fc86:	56                   	push   esi
c001fc87:	52                   	push   edx
c001fc88:	53                   	push   ebx
c001fc89:	51                   	push   ecx
c001fc8a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001fc8e:	e8 cd fb ff ff       	call   c001f860 <ATA::access(unsigned long long, int, void*, bool)>
c001fc93:	83 c4 20             	add    esp,0x20
c001fc96:	85 c0                	test   eax,eax
c001fc98:	0f 95 c0             	setne  al
c001fc9b:	0f b6 c0             	movzx  eax,al
c001fc9e:	5b                   	pop    ebx
c001fc9f:	5e                   	pop    esi
c001fca0:	5f                   	pop    edi
c001fca1:	c3                   	ret    

c001fca2 <ATA::write(unsigned long long, int, void*)>:
c001fca2:	55                   	push   ebp
c001fca3:	57                   	push   edi
c001fca4:	56                   	push   esi
c001fca5:	53                   	push   ebx
c001fca6:	83 ec 18             	sub    esp,0x18
c001fca9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001fcad:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001fcb1:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001fcb5:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001fcb9:	68 b5 6a 02 c0       	push   0xc0026ab5
c001fcbe:	e8 02 d3 fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001fcc3:	8d 53 ff             	lea    edx,[ebx-0x1]
c001fcc6:	83 c4 10             	add    esp,0x10
c001fcc9:	b8 04 00 00 00       	mov    eax,0x4
c001fcce:	81 fa fe 00 00 00    	cmp    edx,0xfe
c001fcd4:	77 25                	ja     c001fcfb <ATA::write(unsigned long long, int, void*)+0x59>
c001fcd6:	b8 06 00 00 00       	mov    eax,0x6
c001fcdb:	85 f6                	test   esi,esi
c001fcdd:	74 1c                	je     c001fcfb <ATA::write(unsigned long long, int, void*)+0x59>
c001fcdf:	50                   	push   eax
c001fce0:	50                   	push   eax
c001fce1:	6a 01                	push   0x1
c001fce3:	56                   	push   esi
c001fce4:	53                   	push   ebx
c001fce5:	55                   	push   ebp
c001fce6:	57                   	push   edi
c001fce7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001fceb:	e8 70 fb ff ff       	call   c001f860 <ATA::access(unsigned long long, int, void*, bool)>
c001fcf0:	83 c4 20             	add    esp,0x20
c001fcf3:	85 c0                	test   eax,eax
c001fcf5:	0f 95 c0             	setne  al
c001fcf8:	0f b6 c0             	movzx  eax,al
c001fcfb:	83 c4 0c             	add    esp,0xc
c001fcfe:	5b                   	pop    ebx
c001fcff:	5e                   	pop    esi
c001fd00:	5f                   	pop    edi
c001fd01:	5d                   	pop    ebp
c001fd02:	c3                   	ret    
c001fd03:	90                   	nop

c001fd04 <ATA::detectCHS()>:
c001fd04:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fd08:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001fd0e:	c1 e0 06             	shl    eax,0x6
c001fd11:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001fd17:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001fd21:	c7 44 24 04 c1 6a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0026ac1
c001fd29:	e9 ad 42 ff ff       	jmp    c0013fdb <Krnl::panic(char const*)>

c001fd2e <ATA::open(int, int, void*)>:
c001fd2e:	53                   	push   ebx
c001fd2f:	83 ec 08             	sub    esp,0x8
c001fd32:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fd36:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001fd3a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001fd3e:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001fd44:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001fd4a:	c1 e0 06             	shl    eax,0x6
c001fd4d:	01 d0                	add    eax,edx
c001fd4f:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001fd56:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001fd5c:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001fd63:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001fd6d:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001fd73:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001fd7a:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001fd81:	75 0c                	jne    c001fd8f <ATA::open(int, int, void*)+0x61>
c001fd83:	83 ec 0c             	sub    esp,0xc
c001fd86:	53                   	push   ebx
c001fd87:	e8 78 ff ff ff       	call   c001fd04 <ATA::detectCHS()>
c001fd8c:	83 c4 10             	add    esp,0x10
c001fd8f:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001fd95:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001fd9b:	c1 e0 06             	shl    eax,0x6
c001fd9e:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001fda5:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001fdaf:	d1 e8                	shr    eax,1
c001fdb1:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001fdb7:	6a 04                	push   0x4
c001fdb9:	6a 0c                	push   0xc
c001fdbb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fdc2:	50                   	push   eax
c001fdc3:	52                   	push   edx
c001fdc4:	e8 39 ea ff ff       	call   c001e802 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fdc9:	90                   	nop
c001fdca:	90                   	nop
c001fdcb:	6a 00                	push   0x0
c001fdcd:	6a 0c                	push   0xc
c001fdcf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fdd6:	50                   	push   eax
c001fdd7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fddd:	e8 20 ea ff ff       	call   c001e802 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fde2:	83 c4 14             	add    esp,0x14
c001fde5:	53                   	push   ebx
c001fde6:	e8 2b eb fe ff       	call   c000e916 <PhysicalDisk::startCache()>
c001fdeb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fdee:	e8 97 fc fe ff       	call   c000fa8a <createPartitionsForDisk(PhysicalDisk*)>
c001fdf3:	31 c0                	xor    eax,eax
c001fdf5:	83 c4 18             	add    esp,0x18
c001fdf8:	5b                   	pop    ebx
c001fdf9:	c3                   	ret    

c001fdfa <ATAPI::write(unsigned long long, int, void*)>:
c001fdfa:	b8 03 00 00 00       	mov    eax,0x3
c001fdff:	c3                   	ret    

c001fe00 <ATAPI::close(int, int, void*)>:
c001fe00:	83 ec 0c             	sub    esp,0xc
c001fe03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe07:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001fe0d:	85 c0                	test   eax,eax
c001fe0f:	74 0c                	je     c001fe1d <ATAPI::close(int, int, void*)+0x1d>
c001fe11:	83 ec 0c             	sub    esp,0xc
c001fe14:	8b 10                	mov    edx,DWORD PTR [eax]
c001fe16:	50                   	push   eax
c001fe17:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001fe1a:	83 c4 10             	add    esp,0x10
c001fe1d:	31 c0                	xor    eax,eax
c001fe1f:	83 c4 0c             	add    esp,0xc
c001fe22:	c3                   	ret    
c001fe23:	90                   	nop

c001fe24 <ATAPI::ATAPI()>:
c001fe24:	83 ec 0c             	sub    esp,0xc
c001fe27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe2b:	83 ec 04             	sub    esp,0x4
c001fe2e:	68 00 08 00 00       	push   0x800
c001fe33:	68 c1 6d 02 c0       	push   0xc0026dc1
c001fe38:	50                   	push   eax
c001fe39:	e8 70 ea fe ff       	call   c000e8ae <PhysicalDisk::PhysicalDisk(char const*, int)>
c001fe3e:	83 c4 10             	add    esp,0x10
c001fe41:	ba 54 6b 02 c0       	mov    edx,0xc0026b54
c001fe46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe4a:	89 10                	mov    DWORD PTR [eax],edx
c001fe4c:	90                   	nop
c001fe4d:	83 c4 0c             	add    esp,0xc
c001fe50:	c3                   	ret    
c001fe51:	90                   	nop

c001fe52 <ATAPI::readyForCommand()>:
c001fe52:	56                   	push   esi
c001fe53:	53                   	push   ebx
c001fe54:	53                   	push   ebx
c001fe55:	31 db                	xor    ebx,ebx
c001fe57:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fe5b:	51                   	push   ecx
c001fe5c:	6a 0c                	push   0xc
c001fe5e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001fe65:	50                   	push   eax
c001fe66:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001fe6c:	e8 51 ea ff ff       	call   c001e8c2 <IDE::read(unsigned char, unsigned char)>
c001fe71:	83 c4 10             	add    esp,0x10
c001fe74:	a8 88                	test   al,0x88
c001fe76:	74 25                	je     c001fe9d <ATAPI::readyForCommand()+0x4b>
c001fe78:	43                   	inc    ebx
c001fe79:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001fe7f:	7e da                	jle    c001fe5b <ATAPI::readyForCommand()+0x9>
c001fe81:	83 ec 0c             	sub    esp,0xc
c001fe84:	68 5e 01 00 00       	push   0x15e
c001fe89:	e8 aa 7a ff ff       	call   c0017938 <milliTenthSleep(unsigned int)>
c001fe8e:	83 c4 10             	add    esp,0x10
c001fe91:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001fe97:	75 c2                	jne    c001fe5b <ATAPI::readyForCommand()+0x9>
c001fe99:	31 c0                	xor    eax,eax
c001fe9b:	eb 02                	jmp    c001fe9f <ATAPI::readyForCommand()+0x4d>
c001fe9d:	b0 01                	mov    al,0x1
c001fe9f:	5a                   	pop    edx
c001fea0:	5b                   	pop    ebx
c001fea1:	5e                   	pop    esi
c001fea2:	c3                   	ret    
c001fea3:	90                   	nop

c001fea4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001fea4:	55                   	push   ebp
c001fea5:	57                   	push   edi
c001fea6:	56                   	push   esi
c001fea7:	53                   	push   ebx
c001fea8:	83 ec 20             	sub    esp,0x20
c001feab:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001feaf:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001feb3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001feb7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001febb:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001febf:	6a 01                	push   0x1
c001fec1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fec8:	50                   	push   eax
c001fec9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fecf:	e8 36 eb ff ff       	call   c001ea0a <IDE::enableIRQs(unsigned char, bool)>
c001fed4:	5e                   	pop    esi
c001fed5:	58                   	pop    eax
c001fed6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fedd:	50                   	push   eax
c001fede:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fee4:	e8 f3 e8 ff ff       	call   c001e7dc <IDE::prepareInterrupt(unsigned char)>
c001fee9:	89 3c 24             	mov    DWORD PTR [esp],edi
c001feec:	e8 61 ff ff ff       	call   c001fe52 <ATAPI::readyForCommand()>
c001fef1:	83 c4 10             	add    esp,0x10
c001fef4:	84 c0                	test   al,al
c001fef6:	75 0a                	jne    c001ff02 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001fef8:	bb 01 00 00 00       	mov    ebx,0x1
c001fefd:	e9 57 02 00 00       	jmp    c0020159 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001ff02:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001ff08:	c1 e0 04             	shl    eax,0x4
c001ff0b:	0f b6 c0             	movzx  eax,al
c001ff0e:	50                   	push   eax
c001ff0f:	6a 06                	push   0x6
c001ff11:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ff18:	50                   	push   eax
c001ff19:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ff1f:	e8 de e8 ff ff       	call   c001e802 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ff24:	6a 00                	push   0x0
c001ff26:	6a 01                	push   0x1
c001ff28:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ff2f:	50                   	push   eax
c001ff30:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ff36:	e8 c7 e8 ff ff       	call   c001e802 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ff3b:	83 c4 20             	add    esp,0x20
c001ff3e:	0f b6 c3             	movzx  eax,bl
c001ff41:	0f b6 df             	movzx  ebx,bh
c001ff44:	50                   	push   eax
c001ff45:	6a 04                	push   0x4
c001ff47:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ff4e:	50                   	push   eax
c001ff4f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ff55:	e8 a8 e8 ff ff       	call   c001e802 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ff5a:	53                   	push   ebx
c001ff5b:	6a 05                	push   0x5
c001ff5d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ff64:	50                   	push   eax
c001ff65:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ff6b:	e8 92 e8 ff ff       	call   c001e802 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ff70:	83 c4 20             	add    esp,0x20
c001ff73:	68 a0 00 00 00       	push   0xa0
c001ff78:	6a 07                	push   0x7
c001ff7a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ff81:	50                   	push   eax
c001ff82:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ff88:	e8 75 e8 ff ff       	call   c001e802 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ff8d:	83 c4 0c             	add    esp,0xc
c001ff90:	6a 01                	push   0x1
c001ff92:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ff99:	50                   	push   eax
c001ff9a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ffa0:	e8 11 f3 ff ff       	call   c001f2b6 <IDE::polling(unsigned char, unsigned int)>
c001ffa5:	83 c4 10             	add    esp,0x10
c001ffa8:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001ffae:	84 c0                	test   al,al
c001ffb0:	74 23                	je     c001ffd5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001ffb2:	0f b6 d8             	movzx  ebx,al
c001ffb5:	0f b6 d2             	movzx  edx,dl
c001ffb8:	53                   	push   ebx
c001ffb9:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001ffc0:	50                   	push   eax
c001ffc1:	52                   	push   edx
c001ffc2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ffc8:	e8 39 f2 ff ff       	call   c001f206 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001ffcd:	83 c4 10             	add    esp,0x10
c001ffd0:	e9 84 01 00 00       	jmp    c0020159 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001ffd5:	0f b6 d2             	movzx  edx,dl
c001ffd8:	53                   	push   ebx
c001ffd9:	53                   	push   ebx
c001ffda:	52                   	push   edx
c001ffdb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ffe1:	e8 0a e8 ff ff       	call   c001e7f0 <IDE::getBase(unsigned char)>
c001ffe6:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001ffea:	b9 06 00 00 00       	mov    ecx,0x6
c001ffef:	89 c2                	mov    edx,eax
c001fff1:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001fff4:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001fff8:	83 c4 10             	add    esp,0x10
c001fffb:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0020001:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0020008:	85 db                	test   ebx,ebx
c002000a:	0f 84 ec 00 00 00    	je     c00200fc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0020010:	51                   	push   ecx
c0020011:	51                   	push   ecx
c0020012:	52                   	push   edx
c0020013:	50                   	push   eax
c0020014:	e8 57 e9 ff ff       	call   c001e970 <IDE::waitInterrupt(unsigned char)>
c0020019:	83 c4 10             	add    esp,0x10
c002001c:	84 c0                	test   al,al
c002001e:	0f 84 d4 fe ff ff    	je     c001fef8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0020024:	56                   	push   esi
c0020025:	56                   	push   esi
c0020026:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002002d:	50                   	push   eax
c002002e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020034:	e8 a3 e7 ff ff       	call   c001e7dc <IDE::prepareInterrupt(unsigned char)>
c0020039:	83 c4 0c             	add    esp,0xc
c002003c:	6a 04                	push   0x4
c002003e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020045:	50                   	push   eax
c0020046:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002004c:	e8 71 e8 ff ff       	call   c001e8c2 <IDE::read(unsigned char, unsigned char)>
c0020051:	83 c4 0c             	add    esp,0xc
c0020054:	89 c6                	mov    esi,eax
c0020056:	6a 05                	push   0x5
c0020058:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002005f:	50                   	push   eax
c0020060:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020066:	e8 57 e8 ff ff       	call   c001e8c2 <IDE::read(unsigned char, unsigned char)>
c002006b:	89 f1                	mov    ecx,esi
c002006d:	0f b6 c0             	movzx  eax,al
c0020070:	0f b6 f1             	movzx  esi,cl
c0020073:	c1 e0 08             	shl    eax,0x8
c0020076:	09 c6                	or     esi,eax
c0020078:	d1 fe                	sar    esi,1
c002007a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c002007e:	83 c4 10             	add    esp,0x10
c0020081:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0020086:	74 41                	je     c00200c9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0020088:	31 c9                	xor    ecx,ecx
c002008a:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0020090:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0020097:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c002009b:	75 0a                	jne    c00200a7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c002009d:	01 c9                	add    ecx,ecx
c002009f:	01 cd                	add    ebp,ecx
c00200a1:	4b                   	dec    ebx
c00200a2:	e9 54 ff ff ff       	jmp    c001fffb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c00200a7:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c00200ac:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00200b0:	51                   	push   ecx
c00200b1:	51                   	push   ecx
c00200b2:	52                   	push   edx
c00200b3:	50                   	push   eax
c00200b4:	e8 37 e7 ff ff       	call   c001e7f0 <IDE::getBase(unsigned char)>
c00200b9:	89 c2                	mov    edx,eax
c00200bb:	89 f0                	mov    eax,esi
c00200bd:	66 ef                	out    dx,ax
c00200bf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00200c3:	83 c4 10             	add    esp,0x10
c00200c6:	41                   	inc    ecx
c00200c7:	eb c1                	jmp    c002008a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c00200c9:	31 f6                	xor    esi,esi
c00200cb:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00200d1:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00200d8:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c00200dc:	75 06                	jne    c00200e4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c00200de:	01 f6                	add    esi,esi
c00200e0:	01 f5                	add    ebp,esi
c00200e2:	eb bd                	jmp    c00200a1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c00200e4:	51                   	push   ecx
c00200e5:	51                   	push   ecx
c00200e6:	52                   	push   edx
c00200e7:	50                   	push   eax
c00200e8:	e8 03 e7 ff ff       	call   c001e7f0 <IDE::getBase(unsigned char)>
c00200ed:	89 c2                	mov    edx,eax
c00200ef:	66 ed                	in     ax,dx
c00200f1:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c00200f6:	83 c4 10             	add    esp,0x10
c00200f9:	46                   	inc    esi
c00200fa:	eb cf                	jmp    c00200cb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c00200fc:	51                   	push   ecx
c00200fd:	51                   	push   ecx
c00200fe:	52                   	push   edx
c00200ff:	50                   	push   eax
c0020100:	e8 6b e8 ff ff       	call   c001e970 <IDE::waitInterrupt(unsigned char)>
c0020105:	83 c4 10             	add    esp,0x10
c0020108:	84 c0                	test   al,al
c002010a:	0f 84 e8 fd ff ff    	je     c001fef8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0020110:	bb a0 86 01 00       	mov    ebx,0x186a0
c0020115:	52                   	push   edx
c0020116:	52                   	push   edx
c0020117:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002011e:	50                   	push   eax
c002011f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020125:	e8 b2 e6 ff ff       	call   c001e7dc <IDE::prepareInterrupt(unsigned char)>
c002012a:	83 c4 10             	add    esp,0x10
c002012d:	50                   	push   eax
c002012e:	50                   	push   eax
c002012f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020136:	50                   	push   eax
c0020137:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002013d:	e8 ae e6 ff ff       	call   c001e7f0 <IDE::getBase(unsigned char)>
c0020142:	8d 50 07             	lea    edx,[eax+0x7]
c0020145:	ec                   	in     al,dx
c0020146:	83 c4 10             	add    esp,0x10
c0020149:	a8 88                	test   al,0x88
c002014b:	74 0a                	je     c0020157 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c002014d:	4b                   	dec    ebx
c002014e:	75 dd                	jne    c002012d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0020150:	bb 02 00 00 00       	mov    ebx,0x2
c0020155:	eb 02                	jmp    c0020159 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0020157:	31 db                	xor    ebx,ebx
c0020159:	83 c4 1c             	add    esp,0x1c
c002015c:	89 d8                	mov    eax,ebx
c002015e:	5b                   	pop    ebx
c002015f:	5e                   	pop    esi
c0020160:	5f                   	pop    edi
c0020161:	5d                   	pop    ebp
c0020162:	c3                   	ret    
c0020163:	90                   	nop

c0020164 <ATAPI::diskRemoved()>:
c0020164:	53                   	push   ebx
c0020165:	83 ec 14             	sub    esp,0x14
c0020168:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002016c:	68 0c 6b 02 c0       	push   0xc0026b0c
c0020171:	e8 4f ce fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0020176:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c002017d:	c7 04 24 22 6b 02 c0 	mov    DWORD PTR [esp],0xc0026b22
c0020184:	e8 3c ce fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0020189:	58                   	pop    eax
c002018a:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c0020190:	e8 75 f6 fe ff       	call   c000f80a <LogicalDisk::unmount()>
c0020195:	c7 04 24 31 6b 02 c0 	mov    DWORD PTR [esp],0xc0026b31
c002019c:	e8 24 ce fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00201a1:	5a                   	pop    edx
c00201a2:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c00201a8:	e8 63 00 ff ff       	call   c0010210 <VCache::writeWriteBuffer()>
c00201ad:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00201b3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00201b7:	83 c4 18             	add    esp,0x18
c00201ba:	5b                   	pop    ebx
c00201bb:	e9 40 00 ff ff       	jmp    c0010200 <VCache::invalidateReadBuffer()>

c00201c0 <ATAPI::eject()>:
c00201c0:	57                   	push   edi
c00201c1:	b9 03 00 00 00       	mov    ecx,0x3
c00201c6:	53                   	push   ebx
c00201c7:	83 ec 14             	sub    esp,0x14
c00201ca:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00201ce:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00201d2:	fc                   	cld    
c00201d3:	31 c0                	xor    eax,eax
c00201d5:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00201d7:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00201dc:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00201e1:	50                   	push   eax
c00201e2:	50                   	push   eax
c00201e3:	6a 00                	push   0x0
c00201e5:	6a 00                	push   0x0
c00201e7:	6a 00                	push   0x0
c00201e9:	6a 02                	push   0x2
c00201eb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00201ef:	50                   	push   eax
c00201f0:	53                   	push   ebx
c00201f1:	e8 ae fc ff ff       	call   c001fea4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00201f6:	83 c4 14             	add    esp,0x14
c00201f9:	53                   	push   ebx
c00201fa:	e8 65 ff ff ff       	call   c0020164 <ATAPI::diskRemoved()>
c00201ff:	83 c4 24             	add    esp,0x24
c0020202:	31 c0                	xor    eax,eax
c0020204:	5b                   	pop    ebx
c0020205:	5f                   	pop    edi
c0020206:	c3                   	ret    
c0020207:	90                   	nop

c0020208 <ATAPI::diskInserted()>:
c0020208:	83 ec 18             	sub    esp,0x18
c002020b:	68 cd 6d 02 c0       	push   0xc0026dcd
c0020210:	e8 b0 cd fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0020215:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020219:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c0020220:	83 c4 1c             	add    esp,0x1c
c0020223:	c3                   	ret    

c0020224 <ATAPI::detectMedia()>:
c0020224:	56                   	push   esi
c0020225:	53                   	push   ebx
c0020226:	83 ec 28             	sub    esp,0x28
c0020229:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002022d:	6a 0c                	push   0xc
c002022f:	6a 00                	push   0x0
c0020231:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0020235:	56                   	push   esi
c0020236:	e8 41 04 fe ff       	call   c000067c <memset>
c002023b:	58                   	pop    eax
c002023c:	5a                   	pop    edx
c002023d:	6a 00                	push   0x0
c002023f:	6a 00                	push   0x0
c0020241:	6a 00                	push   0x0
c0020243:	6a 00                	push   0x0
c0020245:	56                   	push   esi
c0020246:	53                   	push   ebx
c0020247:	e8 58 fc ff ff       	call   c001fea4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002024c:	83 c4 1c             	add    esp,0x1c
c002024f:	6a 0c                	push   0xc
c0020251:	6a 00                	push   0x0
c0020253:	56                   	push   esi
c0020254:	e8 23 04 fe ff       	call   c000067c <memset>
c0020259:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002025e:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0020263:	59                   	pop    ecx
c0020264:	58                   	pop    eax
c0020265:	6a 01                	push   0x1
c0020267:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c002026b:	50                   	push   eax
c002026c:	6a 00                	push   0x0
c002026e:	6a 12                	push   0x12
c0020270:	56                   	push   esi
c0020271:	53                   	push   ebx
c0020272:	e8 2d fc ff ff       	call   c001fea4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0020277:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c002027b:	83 c4 20             	add    esp,0x20
c002027e:	83 e0 7f             	and    eax,0x7f
c0020281:	3c 70                	cmp    al,0x70
c0020283:	74 15                	je     c002029a <ATAPI::detectMedia()+0x76>
c0020285:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002028c:	75 0c                	jne    c002029a <ATAPI::detectMedia()+0x76>
c002028e:	83 ec 0c             	sub    esp,0xc
c0020291:	53                   	push   ebx
c0020292:	e8 71 ff ff ff       	call   c0020208 <ATAPI::diskInserted()>
c0020297:	83 c4 10             	add    esp,0x10
c002029a:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002029e:	83 e0 0f             	and    eax,0xf
c00202a1:	3c 02                	cmp    al,0x2
c00202a3:	75 1b                	jne    c00202c0 <ATAPI::detectMedia()+0x9c>
c00202a5:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00202aa:	75 2d                	jne    c00202d9 <ATAPI::detectMedia()+0xb5>
c00202ac:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00202b3:	74 24                	je     c00202d9 <ATAPI::detectMedia()+0xb5>
c00202b5:	83 ec 0c             	sub    esp,0xc
c00202b8:	53                   	push   ebx
c00202b9:	e8 a6 fe ff ff       	call   c0020164 <ATAPI::diskRemoved()>
c00202be:	eb 16                	jmp    c00202d6 <ATAPI::detectMedia()+0xb2>
c00202c0:	84 c0                	test   al,al
c00202c2:	75 15                	jne    c00202d9 <ATAPI::detectMedia()+0xb5>
c00202c4:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00202cb:	75 0c                	jne    c00202d9 <ATAPI::detectMedia()+0xb5>
c00202cd:	83 ec 0c             	sub    esp,0xc
c00202d0:	53                   	push   ebx
c00202d1:	e8 32 ff ff ff       	call   c0020208 <ATAPI::diskInserted()>
c00202d6:	83 c4 10             	add    esp,0x10
c00202d9:	83 c4 24             	add    esp,0x24
c00202dc:	5b                   	pop    ebx
c00202dd:	5e                   	pop    esi
c00202de:	c3                   	ret    
c00202df:	90                   	nop

c00202e0 <ATAPI::open(int, int, void*)>:
c00202e0:	56                   	push   esi
c00202e1:	53                   	push   ebx
c00202e2:	50                   	push   eax
c00202e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00202e7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00202eb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00202ef:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00202f5:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00202fb:	c1 e0 06             	shl    eax,0x6
c00202fe:	01 d0                	add    eax,edx
c0020300:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0020307:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c002030d:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0020314:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002031e:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0020324:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002032b:	6a 04                	push   0x4
c002032d:	6a 0c                	push   0xc
c002032f:	51                   	push   ecx
c0020330:	52                   	push   edx
c0020331:	e8 cc e4 ff ff       	call   c001e802 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020336:	90                   	nop
c0020337:	90                   	nop
c0020338:	6a 00                	push   0x0
c002033a:	6a 0c                	push   0xc
c002033c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020343:	50                   	push   eax
c0020344:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002034a:	e8 b3 e4 ff ff       	call   c001e802 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002034f:	83 c4 14             	add    esp,0x14
c0020352:	68 74 01 00 00       	push   0x174
c0020357:	e8 5b 99 fe ff       	call   c0009cb7 <malloc>
c002035c:	83 c4 0c             	add    esp,0xc
c002035f:	89 c6                	mov    esi,eax
c0020361:	6a 00                	push   0x0
c0020363:	68 ff ff ff 7f       	push   0x7fffffff
c0020368:	6a 00                	push   0x0
c002036a:	6a 00                	push   0x0
c002036c:	53                   	push   ebx
c002036d:	68 aa 6e 02 c0       	push   0xc0026eaa
c0020372:	50                   	push   eax
c0020373:	e8 9e f2 fe ff       	call   c000f616 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0020378:	83 c4 14             	add    esp,0x14
c002037b:	56                   	push   esi
c002037c:	e8 4b f3 fe ff       	call   c000f6cc <LogicalDisk::assignDriveLetter()>
c0020381:	5a                   	pop    edx
c0020382:	0f be c0             	movsx  eax,al
c0020385:	59                   	pop    ecx
c0020386:	50                   	push   eax
c0020387:	68 3f 6b 02 c0       	push   0xc0026b3f
c002038c:	e8 34 cc fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0020391:	58                   	pop    eax
c0020392:	5a                   	pop    edx
c0020393:	56                   	push   esi
c0020394:	53                   	push   ebx
c0020395:	e8 dc e0 fe ff       	call   c000e476 <Device::addChild(Device*)>
c002039a:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c00203a0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00203a3:	e8 6e e5 fe ff       	call   c000e916 <PhysicalDisk::startCache()>
c00203a8:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c00203af:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00203b2:	e8 6d fe ff ff       	call   c0020224 <ATAPI::detectMedia()>
c00203b7:	83 c4 14             	add    esp,0x14
c00203ba:	31 c0                	xor    eax,eax
c00203bc:	5b                   	pop    ebx
c00203bd:	5e                   	pop    esi
c00203be:	c3                   	ret    
c00203bf:	90                   	nop

c00203c0 <ATAPI::read(unsigned long long, int, void*)>:
c00203c0:	55                   	push   ebp
c00203c1:	57                   	push   edi
c00203c2:	56                   	push   esi
c00203c3:	53                   	push   ebx
c00203c4:	83 ec 1c             	sub    esp,0x1c
c00203c7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00203cb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00203cf:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00203d3:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00203da:	74 41                	je     c002041d <ATAPI::read(unsigned long long, int, void*)+0x5d>
c00203dc:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00203e0:	b9 03 00 00 00       	mov    ecx,0x3
c00203e5:	fc                   	cld    
c00203e6:	31 c0                	xor    eax,eax
c00203e8:	86 fb                	xchg   bl,bh
c00203ea:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00203ec:	c1 c3 10             	rol    ebx,0x10
c00203ef:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00203f4:	89 e8                	mov    eax,ebp
c00203f6:	86 fb                	xchg   bl,bh
c00203f8:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00203fc:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0020400:	50                   	push   eax
c0020401:	50                   	push   eax
c0020402:	55                   	push   ebp
c0020403:	c1 e5 0b             	shl    ebp,0xb
c0020406:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002040a:	6a 00                	push   0x0
c002040c:	55                   	push   ebp
c002040d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020411:	50                   	push   eax
c0020412:	56                   	push   esi
c0020413:	e8 8c fa ff ff       	call   c001fea4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0020418:	83 c4 20             	add    esp,0x20
c002041b:	eb 1a                	jmp    c0020437 <ATAPI::read(unsigned long long, int, void*)+0x77>
c002041d:	83 ec 0c             	sub    esp,0xc
c0020420:	56                   	push   esi
c0020421:	e8 fe fd ff ff       	call   c0020224 <ATAPI::detectMedia()>
c0020426:	83 c4 10             	add    esp,0x10
c0020429:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0020430:	75 aa                	jne    c00203dc <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0020432:	b8 02 00 00 00       	mov    eax,0x2
c0020437:	83 c4 1c             	add    esp,0x1c
c002043a:	5b                   	pop    ebx
c002043b:	5e                   	pop    esi
c002043c:	5f                   	pop    edi
c002043d:	5d                   	pop    ebp
c002043e:	c3                   	ret    
c002043f:	90                   	nop

c0020440 <SATA::close(int, int, void*)>:
c0020440:	83 ec 0c             	sub    esp,0xc
c0020443:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020447:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002044d:	85 c0                	test   eax,eax
c002044f:	74 0c                	je     c002045d <SATA::close(int, int, void*)+0x1d>
c0020451:	83 ec 0c             	sub    esp,0xc
c0020454:	8b 10                	mov    edx,DWORD PTR [eax]
c0020456:	50                   	push   eax
c0020457:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002045a:	83 c4 10             	add    esp,0x10
c002045d:	31 c0                	xor    eax,eax
c002045f:	83 c4 0c             	add    esp,0xc
c0020462:	c3                   	ret    
c0020463:	90                   	nop

c0020464 <SATA::powerSaving(PowerSavingLevel)>:
c0020464:	c3                   	ret    
c0020465:	90                   	nop

c0020466 <SATA::open(int, int, void*)>:
c0020466:	56                   	push   esi
c0020467:	53                   	push   ebx
c0020468:	51                   	push   ecx
c0020469:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002046d:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c0020474:	74 2d                	je     c00204a3 <SATA::open(int, int, void*)+0x3d>
c0020476:	83 ec 0c             	sub    esp,0xc
c0020479:	68 84 6b 02 c0       	push   0xc0026b84
c002047e:	e8 8e 98 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0020483:	83 c4 10             	add    esp,0x10
c0020486:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c002048d:	75 14                	jne    c00204a3 <SATA::open(int, int, void*)+0x3d>
c002048f:	e4 60                	in     al,0x60
c0020491:	3c 5a                	cmp    al,0x5a
c0020493:	74 04                	je     c0020499 <SATA::open(int, int, void*)+0x33>
c0020495:	3c 1c                	cmp    al,0x1c
c0020497:	75 f6                	jne    c002048f <SATA::open(int, int, void*)+0x29>
c0020499:	e4 60                	in     al,0x60
c002049b:	3c 5a                	cmp    al,0x5a
c002049d:	74 fa                	je     c0020499 <SATA::open(int, int, void*)+0x33>
c002049f:	3c 1c                	cmp    al,0x1c
c00204a1:	74 f6                	je     c0020499 <SATA::open(int, int, void*)+0x33>
c00204a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00204a7:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00204b1:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00204b7:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00204c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00204c5:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00204cf:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00204d5:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00204dc:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c00204e3:	74 2d                	je     c0020512 <SATA::open(int, int, void*)+0xac>
c00204e5:	83 ec 0c             	sub    esp,0xc
c00204e8:	68 91 6b 02 c0       	push   0xc0026b91
c00204ed:	e8 1f 98 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c00204f2:	83 c4 10             	add    esp,0x10
c00204f5:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c00204fc:	75 14                	jne    c0020512 <SATA::open(int, int, void*)+0xac>
c00204fe:	e4 60                	in     al,0x60
c0020500:	3c 1c                	cmp    al,0x1c
c0020502:	74 04                	je     c0020508 <SATA::open(int, int, void*)+0xa2>
c0020504:	3c 5a                	cmp    al,0x5a
c0020506:	75 f6                	jne    c00204fe <SATA::open(int, int, void*)+0x98>
c0020508:	e4 60                	in     al,0x60
c002050a:	3c 5a                	cmp    al,0x5a
c002050c:	74 fa                	je     c0020508 <SATA::open(int, int, void*)+0xa2>
c002050e:	3c 1c                	cmp    al,0x1c
c0020510:	74 f6                	je     c0020508 <SATA::open(int, int, void*)+0xa2>
c0020512:	e8 57 9e fe ff       	call   c000a36e <Phys::allocatePage()>
c0020517:	89 c6                	mov    esi,eax
c0020519:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002051f:	81 c6 00 10 00 00    	add    esi,0x1000
c0020525:	e8 44 9e fe ff       	call   c000a36e <Phys::allocatePage()>
c002052a:	39 c6                	cmp    esi,eax
c002052c:	74 10                	je     c002053e <SATA::open(int, int, void*)+0xd8>
c002052e:	83 ec 0c             	sub    esp,0xc
c0020531:	68 9e 6b 02 c0       	push   0xc0026b9e
c0020536:	e8 a0 3a ff ff       	call   c0013fdb <Krnl::panic(char const*)>
c002053b:	83 c4 10             	add    esp,0x10
c002053e:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c0020545:	74 2d                	je     c0020574 <SATA::open(int, int, void*)+0x10e>
c0020547:	83 ec 0c             	sub    esp,0xc
c002054a:	68 b2 6b 02 c0       	push   0xc0026bb2
c002054f:	e8 bd 97 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0020554:	83 c4 10             	add    esp,0x10
c0020557:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c002055e:	75 14                	jne    c0020574 <SATA::open(int, int, void*)+0x10e>
c0020560:	e4 60                	in     al,0x60
c0020562:	3c 1c                	cmp    al,0x1c
c0020564:	74 04                	je     c002056a <SATA::open(int, int, void*)+0x104>
c0020566:	3c 5a                	cmp    al,0x5a
c0020568:	75 f6                	jne    c0020560 <SATA::open(int, int, void*)+0xfa>
c002056a:	e4 60                	in     al,0x60
c002056c:	3c 5a                	cmp    al,0x5a
c002056e:	74 fa                	je     c002056a <SATA::open(int, int, void*)+0x104>
c0020570:	3c 1c                	cmp    al,0x1c
c0020572:	74 f6                	je     c002056a <SATA::open(int, int, void*)+0x104>
c0020574:	83 ec 0c             	sub    esp,0xc
c0020577:	6a 02                	push   0x2
c0020579:	e8 eb b6 fe ff       	call   c000bc69 <Virt::allocateKernelVirtualPages(int)>
c002057e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0020584:	6a 03                	push   0x3
c0020586:	50                   	push   eax
c0020587:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c002058d:	ff 35 34 80 02 c0    	push   DWORD PTR ds:0xc0028034
c0020593:	e8 3c bd fe ff       	call   c000c2d4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0020598:	83 c4 20             	add    esp,0x20
c002059b:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c00205a2:	74 2d                	je     c00205d1 <SATA::open(int, int, void*)+0x16b>
c00205a4:	83 ec 0c             	sub    esp,0xc
c00205a7:	68 bf 6b 02 c0       	push   0xc0026bbf
c00205ac:	e8 60 97 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c00205b1:	83 c4 10             	add    esp,0x10
c00205b4:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c00205bb:	75 14                	jne    c00205d1 <SATA::open(int, int, void*)+0x16b>
c00205bd:	e4 60                	in     al,0x60
c00205bf:	3c 1c                	cmp    al,0x1c
c00205c1:	74 04                	je     c00205c7 <SATA::open(int, int, void*)+0x161>
c00205c3:	3c 5a                	cmp    al,0x5a
c00205c5:	75 f6                	jne    c00205bd <SATA::open(int, int, void*)+0x157>
c00205c7:	e4 60                	in     al,0x60
c00205c9:	3c 5a                	cmp    al,0x5a
c00205cb:	74 fa                	je     c00205c7 <SATA::open(int, int, void*)+0x161>
c00205cd:	3c 1c                	cmp    al,0x1c
c00205cf:	74 f6                	je     c00205c7 <SATA::open(int, int, void*)+0x161>
c00205d1:	83 ec 0c             	sub    esp,0xc
c00205d4:	53                   	push   ebx
c00205d5:	e8 3c e3 fe ff       	call   c000e916 <PhysicalDisk::startCache()>
c00205da:	83 c4 10             	add    esp,0x10
c00205dd:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c00205e4:	74 2d                	je     c0020613 <SATA::open(int, int, void*)+0x1ad>
c00205e6:	83 ec 0c             	sub    esp,0xc
c00205e9:	68 cc 6b 02 c0       	push   0xc0026bcc
c00205ee:	e8 1e 97 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c00205f3:	83 c4 10             	add    esp,0x10
c00205f6:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c00205fd:	75 14                	jne    c0020613 <SATA::open(int, int, void*)+0x1ad>
c00205ff:	e4 60                	in     al,0x60
c0020601:	3c 1c                	cmp    al,0x1c
c0020603:	74 04                	je     c0020609 <SATA::open(int, int, void*)+0x1a3>
c0020605:	3c 5a                	cmp    al,0x5a
c0020607:	75 f6                	jne    c00205ff <SATA::open(int, int, void*)+0x199>
c0020609:	e4 60                	in     al,0x60
c002060b:	3c 5a                	cmp    al,0x5a
c002060d:	74 fa                	je     c0020609 <SATA::open(int, int, void*)+0x1a3>
c002060f:	3c 1c                	cmp    al,0x1c
c0020611:	74 f6                	je     c0020609 <SATA::open(int, int, void*)+0x1a3>
c0020613:	83 ec 0c             	sub    esp,0xc
c0020616:	53                   	push   ebx
c0020617:	e8 6e f4 fe ff       	call   c000fa8a <createPartitionsForDisk(PhysicalDisk*)>
c002061c:	83 c4 10             	add    esp,0x10
c002061f:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c0020626:	74 2d                	je     c0020655 <SATA::open(int, int, void*)+0x1ef>
c0020628:	83 ec 0c             	sub    esp,0xc
c002062b:	68 d9 6b 02 c0       	push   0xc0026bd9
c0020630:	e8 dc 96 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0020635:	83 c4 10             	add    esp,0x10
c0020638:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c002063f:	75 14                	jne    c0020655 <SATA::open(int, int, void*)+0x1ef>
c0020641:	e4 60                	in     al,0x60
c0020643:	3c 1c                	cmp    al,0x1c
c0020645:	74 04                	je     c002064b <SATA::open(int, int, void*)+0x1e5>
c0020647:	3c 5a                	cmp    al,0x5a
c0020649:	75 f6                	jne    c0020641 <SATA::open(int, int, void*)+0x1db>
c002064b:	e4 60                	in     al,0x60
c002064d:	3c 5a                	cmp    al,0x5a
c002064f:	74 fa                	je     c002064b <SATA::open(int, int, void*)+0x1e5>
c0020651:	3c 1c                	cmp    al,0x1c
c0020653:	74 f6                	je     c002064b <SATA::open(int, int, void*)+0x1e5>
c0020655:	5a                   	pop    edx
c0020656:	31 c0                	xor    eax,eax
c0020658:	5b                   	pop    ebx
c0020659:	5e                   	pop    esi
c002065a:	c3                   	ret    
c002065b:	90                   	nop

c002065c <SATA::SATA()>:
c002065c:	83 ec 0c             	sub    esp,0xc
c002065f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020663:	83 ec 04             	sub    esp,0x4
c0020666:	68 00 02 00 00       	push   0x200
c002066b:	68 e6 6b 02 c0       	push   0xc0026be6
c0020670:	50                   	push   eax
c0020671:	e8 38 e2 fe ff       	call   c000e8ae <PhysicalDisk::PhysicalDisk(char const*, int)>
c0020676:	83 c4 10             	add    esp,0x10
c0020679:	ba 90 6d 02 c0       	mov    edx,0xc0026d90
c002067e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020682:	89 10                	mov    DWORD PTR [eax],edx
c0020684:	90                   	nop
c0020685:	83 c4 0c             	add    esp,0xc
c0020688:	c3                   	ret    
c0020689:	90                   	nop

c002068a <SATA::access(unsigned long long, int, void*, bool)>:
c002068a:	55                   	push   ebp
c002068b:	57                   	push   edi
c002068c:	56                   	push   esi
c002068d:	53                   	push   ebx
c002068e:	83 ec 2c             	sub    esp,0x2c
c0020691:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0020695:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0020699:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002069d:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c00206a4:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00206a8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00206ac:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00206b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00206b4:	75 19                	jne    c00206cf <SATA::access(unsigned long long, int, void*, bool)+0x45>
c00206b6:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c00206bb:	7e 41                	jle    c00206fe <SATA::access(unsigned long long, int, void*, bool)+0x74>
c00206bd:	83 ec 0c             	sub    esp,0xc
c00206c0:	68 05 6c 02 c0       	push   0xc0026c05
c00206c5:	e8 11 39 ff ff       	call   c0013fdb <Krnl::panic(char const*)>
c00206ca:	83 c4 10             	add    esp,0x10
c00206cd:	eb 2f                	jmp    c00206fe <SATA::access(unsigned long long, int, void*, bool)+0x74>
c00206cf:	83 ec 0c             	sub    esp,0xc
c00206d2:	68 f6 6b 02 c0       	push   0xc0026bf6
c00206d7:	e8 35 96 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c00206dc:	83 c4 10             	add    esp,0x10
c00206df:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c00206e6:	75 ce                	jne    c00206b6 <SATA::access(unsigned long long, int, void*, bool)+0x2c>
c00206e8:	e4 60                	in     al,0x60
c00206ea:	3c 1c                	cmp    al,0x1c
c00206ec:	74 04                	je     c00206f2 <SATA::access(unsigned long long, int, void*, bool)+0x68>
c00206ee:	3c 5a                	cmp    al,0x5a
c00206f0:	75 f6                	jne    c00206e8 <SATA::access(unsigned long long, int, void*, bool)+0x5e>
c00206f2:	e4 60                	in     al,0x60
c00206f4:	3c 5a                	cmp    al,0x5a
c00206f6:	74 fa                	je     c00206f2 <SATA::access(unsigned long long, int, void*, bool)+0x68>
c00206f8:	3c 1c                	cmp    al,0x1c
c00206fa:	74 f6                	je     c00206f2 <SATA::access(unsigned long long, int, void*, bool)+0x68>
c00206fc:	eb b8                	jmp    c00206b6 <SATA::access(unsigned long long, int, void*, bool)+0x2c>
c00206fe:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c0020705:	75 29                	jne    c0020730 <SATA::access(unsigned long long, int, void*, bool)+0xa6>
c0020707:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c002070d:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c0020713:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020719:	8d 75 02             	lea    esi,[ebp+0x2]
c002071c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020720:	c1 e6 07             	shl    esi,0x7
c0020723:	01 c6                	add    esi,eax
c0020725:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c002072c:	74 4a                	je     c0020778 <SATA::access(unsigned long long, int, void*, bool)+0xee>
c002072e:	eb 2f                	jmp    c002075f <SATA::access(unsigned long long, int, void*, bool)+0xd5>
c0020730:	83 ec 0c             	sub    esp,0xc
c0020733:	68 3e 6c 02 c0       	push   0xc0026c3e
c0020738:	e8 d4 95 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c002073d:	83 c4 10             	add    esp,0x10
c0020740:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c0020747:	75 be                	jne    c0020707 <SATA::access(unsigned long long, int, void*, bool)+0x7d>
c0020749:	e4 60                	in     al,0x60
c002074b:	3c 1c                	cmp    al,0x1c
c002074d:	74 04                	je     c0020753 <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c002074f:	3c 5a                	cmp    al,0x5a
c0020751:	75 f6                	jne    c0020749 <SATA::access(unsigned long long, int, void*, bool)+0xbf>
c0020753:	e4 60                	in     al,0x60
c0020755:	3c 5a                	cmp    al,0x5a
c0020757:	74 fa                	je     c0020753 <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c0020759:	3c 1c                	cmp    al,0x1c
c002075b:	74 f6                	je     c0020753 <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c002075d:	eb a8                	jmp    c0020707 <SATA::access(unsigned long long, int, void*, bool)+0x7d>
c002075f:	83 ec 0c             	sub    esp,0xc
c0020762:	68 4d 6c 02 c0       	push   0xc0026c4d
c0020767:	e8 a5 95 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c002076c:	83 c4 10             	add    esp,0x10
c002076f:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c0020776:	74 3d                	je     c00207b5 <SATA::access(unsigned long long, int, void*, bool)+0x12b>
c0020778:	89 e8                	mov    eax,ebp
c002077a:	c1 e0 07             	shl    eax,0x7
c002077d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020781:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002078b:	52                   	push   edx
c002078c:	52                   	push   edx
c002078d:	56                   	push   esi
c002078e:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0020794:	e8 fd eb ff ff       	call   c001f396 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0020799:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002079d:	83 c4 10             	add    esp,0x10
c00207a0:	b8 01 00 00 00       	mov    eax,0x1
c00207a5:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c00207aa:	75 1d                	jne    c00207c9 <SATA::access(unsigned long long, int, void*, bool)+0x13f>
c00207ac:	e9 c8 04 00 00       	jmp    c0020c79 <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c00207b1:	3c 5a                	cmp    al,0x5a
c00207b3:	74 0c                	je     c00207c1 <SATA::access(unsigned long long, int, void*, bool)+0x137>
c00207b5:	e4 60                	in     al,0x60
c00207b7:	3c 1c                	cmp    al,0x1c
c00207b9:	75 f6                	jne    c00207b1 <SATA::access(unsigned long long, int, void*, bool)+0x127>
c00207bb:	eb 04                	jmp    c00207c1 <SATA::access(unsigned long long, int, void*, bool)+0x137>
c00207bd:	3c 1c                	cmp    al,0x1c
c00207bf:	75 b7                	jne    c0020778 <SATA::access(unsigned long long, int, void*, bool)+0xee>
c00207c1:	e4 60                	in     al,0x60
c00207c3:	3c 5a                	cmp    al,0x5a
c00207c5:	74 fa                	je     c00207c1 <SATA::access(unsigned long long, int, void*, bool)+0x137>
c00207c7:	eb f4                	jmp    c00207bd <SATA::access(unsigned long long, int, void*, bool)+0x133>
c00207c9:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c00207d0:	74 3a                	je     c002080c <SATA::access(unsigned long long, int, void*, bool)+0x182>
c00207d2:	83 ec 0c             	sub    esp,0xc
c00207d5:	68 5c 6c 02 c0       	push   0xc0026c5c
c00207da:	e8 32 95 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c00207df:	83 c4 10             	add    esp,0x10
c00207e2:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c00207e9:	74 0d                	je     c00207f8 <SATA::access(unsigned long long, int, void*, bool)+0x16e>
c00207eb:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00207f0:	74 34                	je     c0020826 <SATA::access(unsigned long long, int, void*, bool)+0x19c>
c00207f2:	eb 1f                	jmp    c0020813 <SATA::access(unsigned long long, int, void*, bool)+0x189>
c00207f4:	3c 1c                	cmp    al,0x1c
c00207f6:	74 0c                	je     c0020804 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c00207f8:	e4 60                	in     al,0x60
c00207fa:	3c 5a                	cmp    al,0x5a
c00207fc:	75 f6                	jne    c00207f4 <SATA::access(unsigned long long, int, void*, bool)+0x16a>
c00207fe:	eb 04                	jmp    c0020804 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c0020800:	3c 1c                	cmp    al,0x1c
c0020802:	75 e7                	jne    c00207eb <SATA::access(unsigned long long, int, void*, bool)+0x161>
c0020804:	e4 60                	in     al,0x60
c0020806:	3c 5a                	cmp    al,0x5a
c0020808:	74 fa                	je     c0020804 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c002080a:	eb f4                	jmp    c0020800 <SATA::access(unsigned long long, int, void*, bool)+0x176>
c002080c:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020811:	74 1c                	je     c002082f <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c0020813:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0020817:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c002081d:	c1 e1 09             	shl    ecx,0x9
c0020820:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0020824:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020826:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c002082d:	75 55                	jne    c0020884 <SATA::access(unsigned long long, int, void*, bool)+0x1fa>
c002082f:	8d 45 02             	lea    eax,[ebp+0x2]
c0020832:	c1 e0 07             	shl    eax,0x7
c0020835:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020839:	8b 38                	mov    edi,DWORD PTR [eax]
c002083b:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0020841:	2b b8 5c 01 00 00    	sub    edi,DWORD PTR [eax+0x15c]
c0020847:	03 b8 58 01 00 00    	add    edi,DWORD PTR [eax+0x158]
c002084d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020851:	c1 e0 05             	shl    eax,0x5
c0020854:	01 c7                	add    edi,eax
c0020856:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002085a:	83 e0 01             	and    eax,0x1
c002085d:	c1 e0 06             	shl    eax,0x6
c0020860:	88 c2                	mov    dl,al
c0020862:	8a 07                	mov    al,BYTE PTR [edi]
c0020864:	83 e0 bf             	and    eax,0xffffffbf
c0020867:	09 d0                	or     eax,edx
c0020869:	88 07                	mov    BYTE PTR [edi],al
c002086b:	8b 07                	mov    eax,DWORD PTR [edi]
c002086d:	25 e0 ff 00 00       	and    eax,0xffe0
c0020872:	0d 05 00 01 00       	or     eax,0x10005
c0020877:	89 07                	mov    DWORD PTR [edi],eax
c0020879:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c0020880:	74 4d                	je     c00208cf <SATA::access(unsigned long long, int, void*, bool)+0x245>
c0020882:	eb 32                	jmp    c00208b6 <SATA::access(unsigned long long, int, void*, bool)+0x22c>
c0020884:	83 ec 0c             	sub    esp,0xc
c0020887:	68 6b 6c 02 c0       	push   0xc0026c6b
c002088c:	e8 80 94 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0020891:	83 c4 10             	add    esp,0x10
c0020894:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c002089b:	75 92                	jne    c002082f <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c002089d:	e4 60                	in     al,0x60
c002089f:	3c 1c                	cmp    al,0x1c
c00208a1:	74 04                	je     c00208a7 <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c00208a3:	3c 5a                	cmp    al,0x5a
c00208a5:	75 f6                	jne    c002089d <SATA::access(unsigned long long, int, void*, bool)+0x213>
c00208a7:	e4 60                	in     al,0x60
c00208a9:	3c 5a                	cmp    al,0x5a
c00208ab:	74 fa                	je     c00208a7 <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c00208ad:	3c 1c                	cmp    al,0x1c
c00208af:	74 f6                	je     c00208a7 <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c00208b1:	e9 79 ff ff ff       	jmp    c002082f <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c00208b6:	83 ec 0c             	sub    esp,0xc
c00208b9:	68 7a 6c 02 c0       	push   0xc0026c7a
c00208be:	e8 4e 94 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c00208c3:	83 c4 10             	add    esp,0x10
c00208c6:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c00208cd:	74 3b                	je     c002090a <SATA::access(unsigned long long, int, void*, bool)+0x280>
c00208cf:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c00208d5:	8b b0 58 01 00 00    	mov    esi,DWORD PTR [eax+0x158]
c00208db:	2b b0 5c 01 00 00    	sub    esi,DWORD PTR [eax+0x15c]
c00208e1:	03 77 08             	add    esi,DWORD PTR [edi+0x8]
c00208e4:	50                   	push   eax
c00208e5:	0f b7 47 02          	movzx  eax,WORD PTR [edi+0x2]
c00208e9:	83 c0 08             	add    eax,0x8
c00208ec:	c1 e0 04             	shl    eax,0x4
c00208ef:	50                   	push   eax
c00208f0:	6a 00                	push   0x0
c00208f2:	56                   	push   esi
c00208f3:	e8 84 fd fd ff       	call   c000067c <memset>
c00208f8:	83 c4 10             	add    esp,0x10
c00208fb:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c0020902:	74 33                	je     c0020937 <SATA::access(unsigned long long, int, void*, bool)+0x2ad>
c0020904:	eb 18                	jmp    c002091e <SATA::access(unsigned long long, int, void*, bool)+0x294>
c0020906:	3c 1c                	cmp    al,0x1c
c0020908:	74 0c                	je     c0020916 <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c002090a:	e4 60                	in     al,0x60
c002090c:	3c 5a                	cmp    al,0x5a
c002090e:	75 f6                	jne    c0020906 <SATA::access(unsigned long long, int, void*, bool)+0x27c>
c0020910:	eb 04                	jmp    c0020916 <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c0020912:	3c 1c                	cmp    al,0x1c
c0020914:	75 b9                	jne    c00208cf <SATA::access(unsigned long long, int, void*, bool)+0x245>
c0020916:	e4 60                	in     al,0x60
c0020918:	3c 5a                	cmp    al,0x5a
c002091a:	74 fa                	je     c0020916 <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c002091c:	eb f4                	jmp    c0020912 <SATA::access(unsigned long long, int, void*, bool)+0x288>
c002091e:	83 ec 0c             	sub    esp,0xc
c0020921:	68 89 6c 02 c0       	push   0xc0026c89
c0020926:	e8 e6 93 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c002092b:	83 c4 10             	add    esp,0x10
c002092e:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c0020935:	74 48                	je     c002097f <SATA::access(unsigned long long, int, void*, bool)+0x2f5>
c0020937:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c002093d:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c0020943:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0020947:	c1 e0 09             	shl    eax,0x9
c002094a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002094e:	48                   	dec    eax
c002094f:	25 ff ff 3f 00       	and    eax,0x3fffff
c0020954:	89 c2                	mov    edx,eax
c0020956:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c002095c:	25 00 00 c0 ff       	and    eax,0xffc00000
c0020961:	09 d0                	or     eax,edx
c0020963:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0020969:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c0020970:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c0020977:	74 33                	je     c00209ac <SATA::access(unsigned long long, int, void*, bool)+0x322>
c0020979:	eb 18                	jmp    c0020993 <SATA::access(unsigned long long, int, void*, bool)+0x309>
c002097b:	3c 1c                	cmp    al,0x1c
c002097d:	74 0c                	je     c002098b <SATA::access(unsigned long long, int, void*, bool)+0x301>
c002097f:	e4 60                	in     al,0x60
c0020981:	3c 5a                	cmp    al,0x5a
c0020983:	75 f6                	jne    c002097b <SATA::access(unsigned long long, int, void*, bool)+0x2f1>
c0020985:	eb 04                	jmp    c002098b <SATA::access(unsigned long long, int, void*, bool)+0x301>
c0020987:	3c 1c                	cmp    al,0x1c
c0020989:	75 ac                	jne    c0020937 <SATA::access(unsigned long long, int, void*, bool)+0x2ad>
c002098b:	e4 60                	in     al,0x60
c002098d:	3c 5a                	cmp    al,0x5a
c002098f:	74 fa                	je     c002098b <SATA::access(unsigned long long, int, void*, bool)+0x301>
c0020991:	eb f4                	jmp    c0020987 <SATA::access(unsigned long long, int, void*, bool)+0x2fd>
c0020993:	83 ec 0c             	sub    esp,0xc
c0020996:	68 98 6c 02 c0       	push   0xc0026c98
c002099b:	e8 71 93 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c00209a0:	83 c4 10             	add    esp,0x10
c00209a3:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c00209aa:	74 63                	je     c0020a0f <SATA::access(unsigned long long, int, void*, bool)+0x385>
c00209ac:	66 8b 06             	mov    ax,WORD PTR [esi]
c00209af:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c00209b3:	66 25 00 7f          	and    ax,0x7f00
c00209b7:	66 0d 27 80          	or     ax,0x8027
c00209bb:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c00209c0:	66 89 06             	mov    WORD PTR [esi],ax
c00209c3:	19 c0                	sbb    eax,eax
c00209c5:	83 e0 f0             	and    eax,0xfffffff0
c00209c8:	83 c0 35             	add    eax,0x35
c00209cb:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00209ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00209d2:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c00209d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00209da:	c1 e8 10             	shr    eax,0x10
c00209dd:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c00209e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00209e4:	c1 e8 18             	shr    eax,0x18
c00209e7:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c00209ee:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c00209f1:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c00209f5:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c00209f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00209fc:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c00209ff:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0020a03:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c0020a07:	74 33                	je     c0020a3c <SATA::access(unsigned long long, int, void*, bool)+0x3b2>
c0020a09:	eb 18                	jmp    c0020a23 <SATA::access(unsigned long long, int, void*, bool)+0x399>
c0020a0b:	3c 1c                	cmp    al,0x1c
c0020a0d:	74 0c                	je     c0020a1b <SATA::access(unsigned long long, int, void*, bool)+0x391>
c0020a0f:	e4 60                	in     al,0x60
c0020a11:	3c 5a                	cmp    al,0x5a
c0020a13:	75 f6                	jne    c0020a0b <SATA::access(unsigned long long, int, void*, bool)+0x381>
c0020a15:	eb 04                	jmp    c0020a1b <SATA::access(unsigned long long, int, void*, bool)+0x391>
c0020a17:	3c 1c                	cmp    al,0x1c
c0020a19:	75 91                	jne    c00209ac <SATA::access(unsigned long long, int, void*, bool)+0x322>
c0020a1b:	e4 60                	in     al,0x60
c0020a1d:	3c 5a                	cmp    al,0x5a
c0020a1f:	74 fa                	je     c0020a1b <SATA::access(unsigned long long, int, void*, bool)+0x391>
c0020a21:	eb f4                	jmp    c0020a17 <SATA::access(unsigned long long, int, void*, bool)+0x38d>
c0020a23:	83 ec 0c             	sub    esp,0xc
c0020a26:	68 a7 6c 02 c0       	push   0xc0026ca7
c0020a2b:	e8 e1 92 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0020a30:	83 c4 10             	add    esp,0x10
c0020a33:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c0020a3a:	74 11                	je     c0020a4d <SATA::access(unsigned long long, int, void*, bool)+0x3c3>
c0020a3c:	89 e8                	mov    eax,ebp
c0020a3e:	31 f6                	xor    esi,esi
c0020a40:	c1 e0 07             	shl    eax,0x7
c0020a43:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020a47:	eb 21                	jmp    c0020a6a <SATA::access(unsigned long long, int, void*, bool)+0x3e0>
c0020a49:	3c 1c                	cmp    al,0x1c
c0020a4b:	74 0c                	je     c0020a59 <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c0020a4d:	e4 60                	in     al,0x60
c0020a4f:	3c 5a                	cmp    al,0x5a
c0020a51:	75 f6                	jne    c0020a49 <SATA::access(unsigned long long, int, void*, bool)+0x3bf>
c0020a53:	eb 04                	jmp    c0020a59 <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c0020a55:	3c 1c                	cmp    al,0x1c
c0020a57:	75 e3                	jne    c0020a3c <SATA::access(unsigned long long, int, void*, bool)+0x3b2>
c0020a59:	e4 60                	in     al,0x60
c0020a5b:	3c 5a                	cmp    al,0x5a
c0020a5d:	74 fa                	je     c0020a59 <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c0020a5f:	eb f4                	jmp    c0020a55 <SATA::access(unsigned long long, int, void*, bool)+0x3cb>
c0020a61:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c0020a67:	74 0c                	je     c0020a75 <SATA::access(unsigned long long, int, void*, bool)+0x3eb>
c0020a69:	46                   	inc    esi
c0020a6a:	8b 90 20 01 00 00    	mov    edx,DWORD PTR [eax+0x120]
c0020a70:	80 e2 88             	and    dl,0x88
c0020a73:	75 ec                	jne    c0020a61 <SATA::access(unsigned long long, int, void*, bool)+0x3d7>
c0020a75:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c0020a7c:	74 3d                	je     c0020abb <SATA::access(unsigned long long, int, void*, bool)+0x431>
c0020a7e:	83 ec 0c             	sub    esp,0xc
c0020a81:	68 b6 6c 02 c0       	push   0xc0026cb6
c0020a86:	e8 86 92 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0020a8b:	8b 15 20 7f 02 c0    	mov    edx,DWORD PTR ds:0xc0027f20
c0020a91:	83 c4 10             	add    esp,0x10
c0020a94:	f6 c2 80             	test   dl,0x80
c0020a97:	74 0e                	je     c0020aa7 <SATA::access(unsigned long long, int, void*, bool)+0x41d>
c0020a99:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c0020a9f:	75 2f                	jne    c0020ad0 <SATA::access(unsigned long long, int, void*, bool)+0x446>
c0020aa1:	eb 20                	jmp    c0020ac3 <SATA::access(unsigned long long, int, void*, bool)+0x439>
c0020aa3:	3c 1c                	cmp    al,0x1c
c0020aa5:	74 0c                	je     c0020ab3 <SATA::access(unsigned long long, int, void*, bool)+0x429>
c0020aa7:	e4 60                	in     al,0x60
c0020aa9:	3c 5a                	cmp    al,0x5a
c0020aab:	75 f6                	jne    c0020aa3 <SATA::access(unsigned long long, int, void*, bool)+0x419>
c0020aad:	eb 04                	jmp    c0020ab3 <SATA::access(unsigned long long, int, void*, bool)+0x429>
c0020aaf:	3c 1c                	cmp    al,0x1c
c0020ab1:	75 e6                	jne    c0020a99 <SATA::access(unsigned long long, int, void*, bool)+0x40f>
c0020ab3:	e4 60                	in     al,0x60
c0020ab5:	3c 5a                	cmp    al,0x5a
c0020ab7:	74 fa                	je     c0020ab3 <SATA::access(unsigned long long, int, void*, bool)+0x429>
c0020ab9:	eb f4                	jmp    c0020aaf <SATA::access(unsigned long long, int, void*, bool)+0x425>
c0020abb:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c0020ac1:	75 13                	jne    c0020ad6 <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c0020ac3:	83 ec 0c             	sub    esp,0xc
c0020ac6:	68 c6 6c 02 c0       	push   0xc0026cc6
c0020acb:	e9 d2 00 00 00       	jmp    c0020ba2 <SATA::access(unsigned long long, int, void*, bool)+0x518>
c0020ad0:	0f ba e2 0b          	bt     edx,0xb
c0020ad4:	72 25                	jb     c0020afb <SATA::access(unsigned long long, int, void*, bool)+0x471>
c0020ad6:	be 01 00 00 00       	mov    esi,0x1
c0020adb:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0020adf:	89 e8                	mov    eax,ebp
c0020ae1:	d3 e6                	shl    esi,cl
c0020ae3:	c1 e0 07             	shl    eax,0x7
c0020ae6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020aea:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c0020af1:	89 b0 38 01 00 00    	mov    DWORD PTR [eax+0x138],esi
c0020af7:	74 4a                	je     c0020b43 <SATA::access(unsigned long long, int, void*, bool)+0x4b9>
c0020af9:	eb 2f                	jmp    c0020b2a <SATA::access(unsigned long long, int, void*, bool)+0x4a0>
c0020afb:	83 ec 0c             	sub    esp,0xc
c0020afe:	68 d4 6c 02 c0       	push   0xc0026cd4
c0020b03:	e8 09 92 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0020b08:	83 c4 10             	add    esp,0x10
c0020b0b:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c0020b12:	75 c2                	jne    c0020ad6 <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c0020b14:	e4 60                	in     al,0x60
c0020b16:	3c 5a                	cmp    al,0x5a
c0020b18:	74 04                	je     c0020b1e <SATA::access(unsigned long long, int, void*, bool)+0x494>
c0020b1a:	3c 1c                	cmp    al,0x1c
c0020b1c:	75 f6                	jne    c0020b14 <SATA::access(unsigned long long, int, void*, bool)+0x48a>
c0020b1e:	e4 60                	in     al,0x60
c0020b20:	3c 5a                	cmp    al,0x5a
c0020b22:	74 fa                	je     c0020b1e <SATA::access(unsigned long long, int, void*, bool)+0x494>
c0020b24:	3c 1c                	cmp    al,0x1c
c0020b26:	74 f6                	je     c0020b1e <SATA::access(unsigned long long, int, void*, bool)+0x494>
c0020b28:	eb ac                	jmp    c0020ad6 <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c0020b2a:	83 ec 0c             	sub    esp,0xc
c0020b2d:	68 e4 6c 02 c0       	push   0xc0026ce4
c0020b32:	e8 da 91 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0020b37:	83 c4 10             	add    esp,0x10
c0020b3a:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c0020b41:	74 0f                	je     c0020b52 <SATA::access(unsigned long long, int, void*, bool)+0x4c8>
c0020b43:	89 e8                	mov    eax,ebp
c0020b45:	c1 e0 07             	shl    eax,0x7
c0020b48:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020b4c:	eb 24                	jmp    c0020b72 <SATA::access(unsigned long long, int, void*, bool)+0x4e8>
c0020b4e:	3c 1c                	cmp    al,0x1c
c0020b50:	74 0c                	je     c0020b5e <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c0020b52:	e4 60                	in     al,0x60
c0020b54:	3c 5a                	cmp    al,0x5a
c0020b56:	75 f6                	jne    c0020b4e <SATA::access(unsigned long long, int, void*, bool)+0x4c4>
c0020b58:	eb 04                	jmp    c0020b5e <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c0020b5a:	3c 1c                	cmp    al,0x1c
c0020b5c:	75 e5                	jne    c0020b43 <SATA::access(unsigned long long, int, void*, bool)+0x4b9>
c0020b5e:	e4 60                	in     al,0x60
c0020b60:	3c 5a                	cmp    al,0x5a
c0020b62:	74 fa                	je     c0020b5e <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c0020b64:	eb f4                	jmp    c0020b5a <SATA::access(unsigned long long, int, void*, bool)+0x4d0>
c0020b66:	8b 90 10 01 00 00    	mov    edx,DWORD PTR [eax+0x110]
c0020b6c:	0f ba e2 1e          	bt     edx,0x1e
c0020b70:	72 28                	jb     c0020b9a <SATA::access(unsigned long long, int, void*, bool)+0x510>
c0020b72:	8b 90 38 01 00 00    	mov    edx,DWORD PTR [eax+0x138]
c0020b78:	85 d6                	test   esi,edx
c0020b7a:	75 ea                	jne    c0020b66 <SATA::access(unsigned long long, int, void*, bool)+0x4dc>
c0020b7c:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c0020b83:	75 2f                	jne    c0020bb4 <SATA::access(unsigned long long, int, void*, bool)+0x52a>
c0020b85:	89 e8                	mov    eax,ebp
c0020b87:	c1 e0 07             	shl    eax,0x7
c0020b8a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020b8e:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0020b94:	0f ba e0 1e          	bt     eax,0x1e
c0020b98:	73 49                	jae    c0020be3 <SATA::access(unsigned long long, int, void*, bool)+0x559>
c0020b9a:	83 ec 0c             	sub    esp,0xc
c0020b9d:	68 f4 6c 02 c0       	push   0xc0026cf4
c0020ba2:	e8 1e c4 fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0020ba7:	83 c4 10             	add    esp,0x10
c0020baa:	b8 01 00 00 00       	mov    eax,0x1
c0020baf:	e9 c5 00 00 00       	jmp    c0020c79 <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c0020bb4:	83 ec 0c             	sub    esp,0xc
c0020bb7:	68 05 6d 02 c0       	push   0xc0026d05
c0020bbc:	e8 50 91 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0020bc1:	83 c4 10             	add    esp,0x10
c0020bc4:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c0020bcb:	75 b8                	jne    c0020b85 <SATA::access(unsigned long long, int, void*, bool)+0x4fb>
c0020bcd:	e4 60                	in     al,0x60
c0020bcf:	3c 5a                	cmp    al,0x5a
c0020bd1:	74 04                	je     c0020bd7 <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c0020bd3:	3c 1c                	cmp    al,0x1c
c0020bd5:	75 f6                	jne    c0020bcd <SATA::access(unsigned long long, int, void*, bool)+0x543>
c0020bd7:	e4 60                	in     al,0x60
c0020bd9:	3c 5a                	cmp    al,0x5a
c0020bdb:	74 fa                	je     c0020bd7 <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c0020bdd:	3c 1c                	cmp    al,0x1c
c0020bdf:	74 f6                	je     c0020bd7 <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c0020be1:	eb a2                	jmp    c0020b85 <SATA::access(unsigned long long, int, void*, bool)+0x4fb>
c0020be3:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c0020bea:	74 3a                	je     c0020c26 <SATA::access(unsigned long long, int, void*, bool)+0x59c>
c0020bec:	83 ec 0c             	sub    esp,0xc
c0020bef:	68 15 6d 02 c0       	push   0xc0026d15
c0020bf4:	e8 18 91 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0020bf9:	83 c4 10             	add    esp,0x10
c0020bfc:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c0020c03:	74 0d                	je     c0020c12 <SATA::access(unsigned long long, int, void*, bool)+0x588>
c0020c05:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020c0a:	75 31                	jne    c0020c3d <SATA::access(unsigned long long, int, void*, bool)+0x5b3>
c0020c0c:	eb 1f                	jmp    c0020c2d <SATA::access(unsigned long long, int, void*, bool)+0x5a3>
c0020c0e:	3c 1c                	cmp    al,0x1c
c0020c10:	74 0c                	je     c0020c1e <SATA::access(unsigned long long, int, void*, bool)+0x594>
c0020c12:	e4 60                	in     al,0x60
c0020c14:	3c 5a                	cmp    al,0x5a
c0020c16:	75 f6                	jne    c0020c0e <SATA::access(unsigned long long, int, void*, bool)+0x584>
c0020c18:	eb 04                	jmp    c0020c1e <SATA::access(unsigned long long, int, void*, bool)+0x594>
c0020c1a:	3c 1c                	cmp    al,0x1c
c0020c1c:	75 e7                	jne    c0020c05 <SATA::access(unsigned long long, int, void*, bool)+0x57b>
c0020c1e:	e4 60                	in     al,0x60
c0020c20:	3c 5a                	cmp    al,0x5a
c0020c22:	74 fa                	je     c0020c1e <SATA::access(unsigned long long, int, void*, bool)+0x594>
c0020c24:	eb f4                	jmp    c0020c1a <SATA::access(unsigned long long, int, void*, bool)+0x590>
c0020c26:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020c2b:	75 19                	jne    c0020c46 <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c0020c2d:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c0020c33:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0020c37:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020c3b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020c3d:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c0020c44:	75 04                	jne    c0020c4a <SATA::access(unsigned long long, int, void*, bool)+0x5c0>
c0020c46:	31 c0                	xor    eax,eax
c0020c48:	eb 2f                	jmp    c0020c79 <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c0020c4a:	83 ec 0c             	sub    esp,0xc
c0020c4d:	68 25 6d 02 c0       	push   0xc0026d25
c0020c52:	e8 ba 90 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0020c57:	83 c4 10             	add    esp,0x10
c0020c5a:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c0020c61:	75 e3                	jne    c0020c46 <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c0020c63:	e4 60                	in     al,0x60
c0020c65:	3c 1c                	cmp    al,0x1c
c0020c67:	74 04                	je     c0020c6d <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c0020c69:	3c 5a                	cmp    al,0x5a
c0020c6b:	75 f6                	jne    c0020c63 <SATA::access(unsigned long long, int, void*, bool)+0x5d9>
c0020c6d:	e4 60                	in     al,0x60
c0020c6f:	3c 5a                	cmp    al,0x5a
c0020c71:	74 fa                	je     c0020c6d <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c0020c73:	3c 1c                	cmp    al,0x1c
c0020c75:	74 f6                	je     c0020c6d <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c0020c77:	eb cd                	jmp    c0020c46 <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c0020c79:	83 c4 2c             	add    esp,0x2c
c0020c7c:	5b                   	pop    ebx
c0020c7d:	5e                   	pop    esi
c0020c7e:	5f                   	pop    edi
c0020c7f:	5d                   	pop    ebp
c0020c80:	c3                   	ret    
c0020c81:	90                   	nop

c0020c82 <SATA::read(unsigned long long, int, void*)>:
c0020c82:	55                   	push   ebp
c0020c83:	57                   	push   edi
c0020c84:	56                   	push   esi
c0020c85:	53                   	push   ebx
c0020c86:	83 ec 0c             	sub    esp,0xc
c0020c89:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0020c8d:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0020c91:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0020c95:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0020c99:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c0020ca0:	74 2d                	je     c0020ccf <SATA::read(unsigned long long, int, void*)+0x4d>
c0020ca2:	83 ec 0c             	sub    esp,0xc
c0020ca5:	68 35 6d 02 c0       	push   0xc0026d35
c0020caa:	e8 62 90 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0020caf:	83 c4 10             	add    esp,0x10
c0020cb2:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c0020cb9:	75 14                	jne    c0020ccf <SATA::read(unsigned long long, int, void*)+0x4d>
c0020cbb:	e4 60                	in     al,0x60
c0020cbd:	3c 1c                	cmp    al,0x1c
c0020cbf:	74 04                	je     c0020cc5 <SATA::read(unsigned long long, int, void*)+0x43>
c0020cc1:	3c 5a                	cmp    al,0x5a
c0020cc3:	75 f6                	jne    c0020cbb <SATA::read(unsigned long long, int, void*)+0x39>
c0020cc5:	e4 60                	in     al,0x60
c0020cc7:	3c 5a                	cmp    al,0x5a
c0020cc9:	74 fa                	je     c0020cc5 <SATA::read(unsigned long long, int, void*)+0x43>
c0020ccb:	3c 1c                	cmp    al,0x1c
c0020ccd:	74 f6                	je     c0020cc5 <SATA::read(unsigned long long, int, void*)+0x43>
c0020ccf:	8d 53 ff             	lea    edx,[ebx-0x1]
c0020cd2:	b8 04 00 00 00       	mov    eax,0x4
c0020cd7:	81 fa fe 00 00 00    	cmp    edx,0xfe
c0020cdd:	0f 87 96 00 00 00    	ja     c0020d79 <SATA::read(unsigned long long, int, void*)+0xf7>
c0020ce3:	b8 06 00 00 00       	mov    eax,0x6
c0020ce8:	85 ed                	test   ebp,ebp
c0020cea:	0f 84 89 00 00 00    	je     c0020d79 <SATA::read(unsigned long long, int, void*)+0xf7>
c0020cf0:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c0020cf7:	74 2d                	je     c0020d26 <SATA::read(unsigned long long, int, void*)+0xa4>
c0020cf9:	83 ec 0c             	sub    esp,0xc
c0020cfc:	68 42 6d 02 c0       	push   0xc0026d42
c0020d01:	e8 0b 90 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0020d06:	83 c4 10             	add    esp,0x10
c0020d09:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c0020d10:	75 14                	jne    c0020d26 <SATA::read(unsigned long long, int, void*)+0xa4>
c0020d12:	e4 60                	in     al,0x60
c0020d14:	3c 5a                	cmp    al,0x5a
c0020d16:	74 04                	je     c0020d1c <SATA::read(unsigned long long, int, void*)+0x9a>
c0020d18:	3c 1c                	cmp    al,0x1c
c0020d1a:	75 f6                	jne    c0020d12 <SATA::read(unsigned long long, int, void*)+0x90>
c0020d1c:	e4 60                	in     al,0x60
c0020d1e:	3c 5a                	cmp    al,0x5a
c0020d20:	74 fa                	je     c0020d1c <SATA::read(unsigned long long, int, void*)+0x9a>
c0020d22:	3c 1c                	cmp    al,0x1c
c0020d24:	74 f6                	je     c0020d1c <SATA::read(unsigned long long, int, void*)+0x9a>
c0020d26:	50                   	push   eax
c0020d27:	50                   	push   eax
c0020d28:	6a 00                	push   0x0
c0020d2a:	55                   	push   ebp
c0020d2b:	53                   	push   ebx
c0020d2c:	57                   	push   edi
c0020d2d:	56                   	push   esi
c0020d2e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020d32:	e8 53 f9 ff ff       	call   c002068a <SATA::access(unsigned long long, int, void*, bool)>
c0020d37:	83 c4 20             	add    esp,0x20
c0020d3a:	89 c3                	mov    ebx,eax
c0020d3c:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c0020d43:	74 2d                	je     c0020d72 <SATA::read(unsigned long long, int, void*)+0xf0>
c0020d45:	83 ec 0c             	sub    esp,0xc
c0020d48:	68 4f 6d 02 c0       	push   0xc0026d4f
c0020d4d:	e8 bf 8f fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0020d52:	83 c4 10             	add    esp,0x10
c0020d55:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c0020d5c:	75 14                	jne    c0020d72 <SATA::read(unsigned long long, int, void*)+0xf0>
c0020d5e:	e4 60                	in     al,0x60
c0020d60:	3c 5a                	cmp    al,0x5a
c0020d62:	74 04                	je     c0020d68 <SATA::read(unsigned long long, int, void*)+0xe6>
c0020d64:	3c 1c                	cmp    al,0x1c
c0020d66:	75 f6                	jne    c0020d5e <SATA::read(unsigned long long, int, void*)+0xdc>
c0020d68:	e4 60                	in     al,0x60
c0020d6a:	3c 5a                	cmp    al,0x5a
c0020d6c:	74 fa                	je     c0020d68 <SATA::read(unsigned long long, int, void*)+0xe6>
c0020d6e:	3c 1c                	cmp    al,0x1c
c0020d70:	74 f6                	je     c0020d68 <SATA::read(unsigned long long, int, void*)+0xe6>
c0020d72:	31 c0                	xor    eax,eax
c0020d74:	85 db                	test   ebx,ebx
c0020d76:	0f 95 c0             	setne  al
c0020d79:	83 c4 0c             	add    esp,0xc
c0020d7c:	5b                   	pop    ebx
c0020d7d:	5e                   	pop    esi
c0020d7e:	5f                   	pop    edi
c0020d7f:	5d                   	pop    ebp
c0020d80:	c3                   	ret    
c0020d81:	90                   	nop

c0020d82 <SATA::write(unsigned long long, int, void*)>:
c0020d82:	55                   	push   ebp
c0020d83:	57                   	push   edi
c0020d84:	56                   	push   esi
c0020d85:	53                   	push   ebx
c0020d86:	83 ec 1c             	sub    esp,0x1c
c0020d89:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0020d8d:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0020d91:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0020d95:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0020d99:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c0020da0:	74 2d                	je     c0020dcf <SATA::write(unsigned long long, int, void*)+0x4d>
c0020da2:	83 ec 0c             	sub    esp,0xc
c0020da5:	68 5c 6d 02 c0       	push   0xc0026d5c
c0020daa:	e8 62 8f fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0020daf:	83 c4 10             	add    esp,0x10
c0020db2:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c0020db9:	75 14                	jne    c0020dcf <SATA::write(unsigned long long, int, void*)+0x4d>
c0020dbb:	e4 60                	in     al,0x60
c0020dbd:	3c 1c                	cmp    al,0x1c
c0020dbf:	74 04                	je     c0020dc5 <SATA::write(unsigned long long, int, void*)+0x43>
c0020dc1:	3c 5a                	cmp    al,0x5a
c0020dc3:	75 f6                	jne    c0020dbb <SATA::write(unsigned long long, int, void*)+0x39>
c0020dc5:	e4 60                	in     al,0x60
c0020dc7:	3c 5a                	cmp    al,0x5a
c0020dc9:	74 fa                	je     c0020dc5 <SATA::write(unsigned long long, int, void*)+0x43>
c0020dcb:	3c 1c                	cmp    al,0x1c
c0020dcd:	74 f6                	je     c0020dc5 <SATA::write(unsigned long long, int, void*)+0x43>
c0020dcf:	8d 55 ff             	lea    edx,[ebp-0x1]
c0020dd2:	b8 04 00 00 00       	mov    eax,0x4
c0020dd7:	81 fa fe 00 00 00    	cmp    edx,0xfe
c0020ddd:	0f 87 bd 00 00 00    	ja     c0020ea0 <SATA::write(unsigned long long, int, void*)+0x11e>
c0020de3:	b8 06 00 00 00       	mov    eax,0x6
c0020de8:	85 db                	test   ebx,ebx
c0020dea:	0f 84 b0 00 00 00    	je     c0020ea0 <SATA::write(unsigned long long, int, void*)+0x11e>
c0020df0:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c0020df7:	74 2d                	je     c0020e26 <SATA::write(unsigned long long, int, void*)+0xa4>
c0020df9:	83 ec 0c             	sub    esp,0xc
c0020dfc:	68 6a 6d 02 c0       	push   0xc0026d6a
c0020e01:	e8 0b 8f fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0020e06:	83 c4 10             	add    esp,0x10
c0020e09:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c0020e10:	75 14                	jne    c0020e26 <SATA::write(unsigned long long, int, void*)+0xa4>
c0020e12:	e4 60                	in     al,0x60
c0020e14:	3c 1c                	cmp    al,0x1c
c0020e16:	74 04                	je     c0020e1c <SATA::write(unsigned long long, int, void*)+0x9a>
c0020e18:	3c 5a                	cmp    al,0x5a
c0020e1a:	75 f6                	jne    c0020e12 <SATA::write(unsigned long long, int, void*)+0x90>
c0020e1c:	e4 60                	in     al,0x60
c0020e1e:	3c 5a                	cmp    al,0x5a
c0020e20:	74 fa                	je     c0020e1c <SATA::write(unsigned long long, int, void*)+0x9a>
c0020e22:	3c 1c                	cmp    al,0x1c
c0020e24:	74 f6                	je     c0020e1c <SATA::write(unsigned long long, int, void*)+0x9a>
c0020e26:	c1 e5 09             	shl    ebp,0x9
c0020e29:	01 dd                	add    ebp,ebx
c0020e2b:	89 f0                	mov    eax,esi
c0020e2d:	89 fa                	mov    edx,edi
c0020e2f:	83 c0 01             	add    eax,0x1
c0020e32:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020e36:	83 d2 00             	adc    edx,0x0
c0020e39:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020e3d:	50                   	push   eax
c0020e3e:	50                   	push   eax
c0020e3f:	6a 01                	push   0x1
c0020e41:	53                   	push   ebx
c0020e42:	81 c3 00 02 00 00    	add    ebx,0x200
c0020e48:	6a 01                	push   0x1
c0020e4a:	57                   	push   edi
c0020e4b:	56                   	push   esi
c0020e4c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0020e50:	e8 35 f8 ff ff       	call   c002068a <SATA::access(unsigned long long, int, void*, bool)>
c0020e55:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0020e59:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0020e5d:	83 c4 20             	add    esp,0x20
c0020e60:	39 dd                	cmp    ebp,ebx
c0020e62:	75 c7                	jne    c0020e2b <SATA::write(unsigned long long, int, void*)+0xa9>
c0020e64:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c0020e6b:	75 04                	jne    c0020e71 <SATA::write(unsigned long long, int, void*)+0xef>
c0020e6d:	31 c0                	xor    eax,eax
c0020e6f:	eb 2f                	jmp    c0020ea0 <SATA::write(unsigned long long, int, void*)+0x11e>
c0020e71:	83 ec 0c             	sub    esp,0xc
c0020e74:	68 78 6d 02 c0       	push   0xc0026d78
c0020e79:	e8 93 8e fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0020e7e:	83 c4 10             	add    esp,0x10
c0020e81:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c0020e88:	75 e3                	jne    c0020e6d <SATA::write(unsigned long long, int, void*)+0xeb>
c0020e8a:	e4 60                	in     al,0x60
c0020e8c:	3c 5a                	cmp    al,0x5a
c0020e8e:	74 04                	je     c0020e94 <SATA::write(unsigned long long, int, void*)+0x112>
c0020e90:	3c 1c                	cmp    al,0x1c
c0020e92:	75 f6                	jne    c0020e8a <SATA::write(unsigned long long, int, void*)+0x108>
c0020e94:	e4 60                	in     al,0x60
c0020e96:	3c 5a                	cmp    al,0x5a
c0020e98:	74 fa                	je     c0020e94 <SATA::write(unsigned long long, int, void*)+0x112>
c0020e9a:	3c 1c                	cmp    al,0x1c
c0020e9c:	74 f6                	je     c0020e94 <SATA::write(unsigned long long, int, void*)+0x112>
c0020e9e:	eb cd                	jmp    c0020e6d <SATA::write(unsigned long long, int, void*)+0xeb>
c0020ea0:	83 c4 1c             	add    esp,0x1c
c0020ea3:	5b                   	pop    ebx
c0020ea4:	5e                   	pop    esi
c0020ea5:	5f                   	pop    edi
c0020ea6:	5d                   	pop    ebp
c0020ea7:	c3                   	ret    

c0020ea8 <SATAPI::write(unsigned long long, int, void*)>:
c0020ea8:	b8 03 00 00 00       	mov    eax,0x3
c0020ead:	c3                   	ret    

c0020eae <SATAPI::close(int, int, void*)>:
c0020eae:	83 ec 0c             	sub    esp,0xc
c0020eb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020eb5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020ebb:	85 c0                	test   eax,eax
c0020ebd:	74 0c                	je     c0020ecb <SATAPI::close(int, int, void*)+0x1d>
c0020ebf:	83 ec 0c             	sub    esp,0xc
c0020ec2:	8b 10                	mov    edx,DWORD PTR [eax]
c0020ec4:	50                   	push   eax
c0020ec5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0020ec8:	83 c4 10             	add    esp,0x10
c0020ecb:	31 c0                	xor    eax,eax
c0020ecd:	83 c4 0c             	add    esp,0xc
c0020ed0:	c3                   	ret    
c0020ed1:	90                   	nop

c0020ed2 <SATAPI::SATAPI()>:
c0020ed2:	83 ec 0c             	sub    esp,0xc
c0020ed5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ed9:	83 ec 04             	sub    esp,0x4
c0020edc:	68 00 08 00 00       	push   0x800
c0020ee1:	68 c0 6d 02 c0       	push   0xc0026dc0
c0020ee6:	50                   	push   eax
c0020ee7:	e8 c2 d9 fe ff       	call   c000e8ae <PhysicalDisk::PhysicalDisk(char const*, int)>
c0020eec:	83 c4 10             	add    esp,0x10
c0020eef:	ba fc 6e 02 c0       	mov    edx,0xc0026efc
c0020ef4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ef8:	89 10                	mov    DWORD PTR [eax],edx
c0020efa:	90                   	nop
c0020efb:	83 c4 0c             	add    esp,0xc
c0020efe:	c3                   	ret    
c0020eff:	90                   	nop

c0020f00 <SATAPI::diskRemoved()>:
c0020f00:	c3                   	ret    
c0020f01:	90                   	nop

c0020f02 <SATAPI::diskInserted()>:
c0020f02:	83 ec 18             	sub    esp,0x18
c0020f05:	68 cc 6d 02 c0       	push   0xc0026dcc
c0020f0a:	e8 b6 c0 fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0020f0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020f13:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c0020f1a:	83 c4 1c             	add    esp,0x1c
c0020f1d:	c3                   	ret    

c0020f1e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0020f1e:	55                   	push   ebp
c0020f1f:	57                   	push   edi
c0020f20:	56                   	push   esi
c0020f21:	53                   	push   ebx
c0020f22:	83 ec 38             	sub    esp,0x38
c0020f25:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0020f29:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0020f2d:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0020f31:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0020f35:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0020f39:	68 e4 6d 02 c0       	push   0xc0026de4
c0020f3e:	e8 82 c0 fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0020f43:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0020f49:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020f4f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020f53:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0020f59:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020f5d:	c1 e0 07             	shl    eax,0x7
c0020f60:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0020f64:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0020f68:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0020f72:	5a                   	pop    edx
c0020f73:	59                   	pop    ecx
c0020f74:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020f78:	8d 58 02             	lea    ebx,[eax+0x2]
c0020f7b:	c1 e3 07             	shl    ebx,0x7
c0020f7e:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0020f82:	53                   	push   ebx
c0020f83:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0020f89:	e8 08 e4 ff ff       	call   c001f396 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0020f8e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020f92:	83 c4 10             	add    esp,0x10
c0020f95:	b8 01 00 00 00       	mov    eax,0x1
c0020f9a:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0020f9f:	0f 84 ff 01 00 00    	je     c00211a4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x286>
c0020fa5:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0020fab:	8b 03                	mov    eax,DWORD PTR [ebx]
c0020fad:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0020fb3:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0020fb9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020fbd:	c1 e1 05             	shl    ecx,0x5
c0020fc0:	01 c8                	add    eax,ecx
c0020fc2:	8b 08                	mov    ecx,DWORD PTR [eax]
c0020fc4:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0020fca:	81 c9 25 00 01 00    	or     ecx,0x10025
c0020fd0:	89 08                	mov    DWORD PTR [eax],ecx
c0020fd2:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0020fd8:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0020fde:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0020fe4:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0020fe7:	8d 7b 40             	lea    edi,[ebx+0x40]
c0020fea:	50                   	push   eax
c0020feb:	68 90 00 00 00       	push   0x90
c0020ff0:	6a 00                	push   0x0
c0020ff2:	53                   	push   ebx
c0020ff3:	e8 84 f6 fd ff       	call   c000067c <memset>
c0020ff8:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0020ffc:	b9 0c 00 00 00       	mov    ecx,0xc
c0021001:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021003:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c0021009:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c002100d:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0021013:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0021017:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002101b:	48                   	dec    eax
c002101c:	25 ff ff 3f 00       	and    eax,0x3fffff
c0021021:	89 c1                	mov    ecx,eax
c0021023:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0021029:	25 00 00 c0 ff       	and    eax,0xffc00000
c002102e:	09 c8                	or     eax,ecx
c0021030:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0021036:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0021039:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0021040:	66 25 00 7f          	and    ax,0x7f00
c0021044:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021048:	66 0d 27 80          	or     ax,0x8027
c002104c:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c0021050:	66 89 03             	mov    WORD PTR [ebx],ax
c0021053:	89 d0                	mov    eax,edx
c0021055:	c1 ea 18             	shr    edx,0x18
c0021058:	c1 e8 10             	shr    eax,0x10
c002105b:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c002105e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0021061:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0021065:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0021068:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002106c:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c002106f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0021073:	83 c4 10             	add    esp,0x10
c0021076:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c002107a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002107e:	31 c0                	xor    eax,eax
c0021080:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c0021086:	80 e1 88             	and    cl,0x88
c0021089:	74 0a                	je     c0021095 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x177>
c002108b:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0021090:	74 0a                	je     c002109c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17e>
c0021092:	40                   	inc    eax
c0021093:	eb eb                	jmp    c0021080 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x162>
c0021095:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002109a:	75 0a                	jne    c00210a6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c002109c:	83 ec 0c             	sub    esp,0xc
c002109f:	68 fe 6d 02 c0       	push   0xc0026dfe
c00210a4:	eb 43                	jmp    c00210e9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cb>
c00210a6:	be 01 00 00 00       	mov    esi,0x1
c00210ab:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00210af:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00210b3:	d3 e6                	shl    esi,cl
c00210b5:	c1 e7 07             	shl    edi,0x7
c00210b8:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c00210be:	bb 18 fc ff ff       	mov    ebx,0xfffffc18
c00210c3:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c00210c7:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c00210cd:	85 c6                	test   esi,eax
c00210cf:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c00210d5:	0f 84 96 00 00 00    	je     c0021171 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x253>
c00210db:	0f ba e0 1e          	bt     eax,0x1e
c00210df:	73 1a                	jae    c00210fb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1dd>
c00210e1:	83 ec 0c             	sub    esp,0xc
c00210e4:	68 13 6e 02 c0       	push   0xc0026e13
c00210e9:	e8 d7 be fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00210ee:	83 c4 10             	add    esp,0x10
c00210f1:	b8 01 00 00 00       	mov    eax,0x1
c00210f6:	e9 a9 00 00 00       	jmp    c00211a4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x286>
c00210fb:	83 fb 0d             	cmp    ebx,0xd
c00210fe:	77 12                	ja     c0021112 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f4>
c0021100:	83 ec 0c             	sub    esp,0xc
c0021103:	68 c8 00 00 00       	push   0xc8
c0021108:	e8 2b 68 ff ff       	call   c0017938 <milliTenthSleep(unsigned int)>
c002110d:	83 c4 10             	add    esp,0x10
c0021110:	eb 2a                	jmp    c002113c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21e>
c0021112:	8d 83 18 fc ff ff    	lea    eax,[ebx-0x3e8]
c0021118:	83 f8 0d             	cmp    eax,0xd
c002111b:	77 0a                	ja     c0021127 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x209>
c002111d:	83 ec 0c             	sub    esp,0xc
c0021120:	68 58 02 00 00       	push   0x258
c0021125:	eb 28                	jmp    c002114f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x231>
c0021127:	8d 83 30 f8 ff ff    	lea    eax,[ebx-0x7d0]
c002112d:	83 f8 0d             	cmp    eax,0xd
c0021130:	77 0a                	ja     c002113c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21e>
c0021132:	83 ec 0c             	sub    esp,0xc
c0021135:	68 dc 05 00 00       	push   0x5dc
c002113a:	eb 13                	jmp    c002114f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x231>
c002113c:	8d 83 90 e8 ff ff    	lea    eax,[ebx-0x1770]
c0021142:	83 f8 0d             	cmp    eax,0xd
c0021145:	77 10                	ja     c0021157 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x239>
c0021147:	83 ec 0c             	sub    esp,0xc
c002114a:	68 c4 09 00 00       	push   0x9c4
c002114f:	e8 e4 67 ff ff       	call   c0017938 <milliTenthSleep(unsigned int)>
c0021154:	83 c4 10             	add    esp,0x10
c0021157:	43                   	inc    ebx
c0021158:	81 fb 29 23 00 00    	cmp    ebx,0x2329
c002115e:	0f 85 63 ff ff ff    	jne    c00210c7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1a9>
c0021164:	83 ec 0c             	sub    esp,0xc
c0021167:	68 26 6e 02 c0       	push   0xc0026e26
c002116c:	e9 78 ff ff ff       	jmp    c00210e9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cb>
c0021171:	0f ba e0 1e          	bt     eax,0x1e
c0021175:	73 0d                	jae    c0021184 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x266>
c0021177:	83 ec 0c             	sub    esp,0xc
c002117a:	68 3a 6e 02 c0       	push   0xc0026e3a
c002117f:	e9 65 ff ff ff       	jmp    c00210e9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cb>
c0021184:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0021189:	74 17                	je     c00211a2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x284>
c002118b:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0021190:	74 10                	je     c00211a2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x284>
c0021192:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c0021198:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c002119c:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00211a0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00211a2:	31 c0                	xor    eax,eax
c00211a4:	83 c4 2c             	add    esp,0x2c
c00211a7:	5b                   	pop    ebx
c00211a8:	5e                   	pop    esi
c00211a9:	5f                   	pop    edi
c00211aa:	5d                   	pop    ebp
c00211ab:	c3                   	ret    

c00211ac <SATAPI::eject()>:
c00211ac:	57                   	push   edi
c00211ad:	b9 03 00 00 00       	mov    ecx,0x3
c00211b2:	83 ec 18             	sub    esp,0x18
c00211b5:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00211b9:	fc                   	cld    
c00211ba:	31 c0                	xor    eax,eax
c00211bc:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00211be:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00211c3:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00211c8:	50                   	push   eax
c00211c9:	6a 00                	push   0x0
c00211cb:	6a 00                	push   0x0
c00211cd:	6a 00                	push   0x0
c00211cf:	6a 00                	push   0x0
c00211d1:	6a 02                	push   0x2
c00211d3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00211d7:	50                   	push   eax
c00211d8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00211dc:	e8 3d fd ff ff       	call   c0020f1e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00211e1:	31 c0                	xor    eax,eax
c00211e3:	83 c4 38             	add    esp,0x38
c00211e6:	5f                   	pop    edi
c00211e7:	c3                   	ret    

c00211e8 <SATAPI::detectMedia()>:
c00211e8:	56                   	push   esi
c00211e9:	53                   	push   ebx
c00211ea:	83 ec 30             	sub    esp,0x30
c00211ed:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00211f1:	68 4f 6e 02 c0       	push   0xc0026e4f
c00211f6:	e8 ca bd fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00211fb:	83 c4 0c             	add    esp,0xc
c00211fe:	6a 0c                	push   0xc
c0021200:	6a 00                	push   0x0
c0021202:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0021206:	56                   	push   esi
c0021207:	e8 70 f4 fd ff       	call   c000067c <memset>
c002120c:	83 c4 0c             	add    esp,0xc
c002120f:	6a 00                	push   0x0
c0021211:	6a 00                	push   0x0
c0021213:	6a 00                	push   0x0
c0021215:	6a 00                	push   0x0
c0021217:	6a 00                	push   0x0
c0021219:	56                   	push   esi
c002121a:	53                   	push   ebx
c002121b:	e8 fe fc ff ff       	call   c0020f1e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0021220:	83 c4 20             	add    esp,0x20
c0021223:	48                   	dec    eax
c0021224:	74 34                	je     c002125a <SATAPI::detectMedia()+0x72>
c0021226:	50                   	push   eax
c0021227:	6a 0c                	push   0xc
c0021229:	6a 00                	push   0x0
c002122b:	56                   	push   esi
c002122c:	e8 4b f4 fd ff       	call   c000067c <memset>
c0021231:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0021236:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c002123b:	83 c4 0c             	add    esp,0xc
c002123e:	6a 01                	push   0x1
c0021240:	8d 44 24 16          	lea    eax,[esp+0x16]
c0021244:	50                   	push   eax
c0021245:	6a 00                	push   0x0
c0021247:	6a 00                	push   0x0
c0021249:	6a 12                	push   0x12
c002124b:	56                   	push   esi
c002124c:	53                   	push   ebx
c002124d:	e8 cc fc ff ff       	call   c0020f1e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0021252:	83 c4 20             	add    esp,0x20
c0021255:	48                   	dec    eax
c0021256:	75 39                	jne    c0021291 <SATAPI::detectMedia()+0xa9>
c0021258:	eb 1e                	jmp    c0021278 <SATAPI::detectMedia()+0x90>
c002125a:	83 ec 0c             	sub    esp,0xc
c002125d:	68 63 6e 02 c0       	push   0xc0026e63
c0021262:	e8 5e bd fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0021267:	83 c4 10             	add    esp,0x10
c002126a:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0021271:	74 b3                	je     c0021226 <SATAPI::detectMedia()+0x3e>
c0021273:	e9 93 00 00 00       	jmp    c002130b <SATAPI::detectMedia()+0x123>
c0021278:	83 ec 0c             	sub    esp,0xc
c002127b:	68 6d 6e 02 c0       	push   0xc0026e6d
c0021280:	e8 40 bd fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0021285:	83 c4 10             	add    esp,0x10
c0021288:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002128f:	75 7a                	jne    c002130b <SATAPI::detectMedia()+0x123>
c0021291:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c0021295:	83 e0 7f             	and    eax,0x7f
c0021298:	3c 70                	cmp    al,0x70
c002129a:	74 25                	je     c00212c1 <SATAPI::detectMedia()+0xd9>
c002129c:	83 ec 0c             	sub    esp,0xc
c002129f:	68 77 6e 02 c0       	push   0xc0026e77
c00212a4:	e8 1c bd fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00212a9:	83 c4 10             	add    esp,0x10
c00212ac:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00212b3:	75 0c                	jne    c00212c1 <SATAPI::detectMedia()+0xd9>
c00212b5:	83 ec 0c             	sub    esp,0xc
c00212b8:	53                   	push   ebx
c00212b9:	e8 44 fc ff ff       	call   c0020f02 <SATAPI::diskInserted()>
c00212be:	83 c4 10             	add    esp,0x10
c00212c1:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00212c5:	83 e0 0f             	and    eax,0xf
c00212c8:	3c 02                	cmp    al,0x2
c00212ca:	75 16                	jne    c00212e2 <SATAPI::detectMedia()+0xfa>
c00212cc:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00212d1:	75 38                	jne    c002130b <SATAPI::detectMedia()+0x123>
c00212d3:	83 ec 0c             	sub    esp,0xc
c00212d6:	68 80 6e 02 c0       	push   0xc0026e80
c00212db:	e8 e5 bc fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00212e0:	eb 26                	jmp    c0021308 <SATAPI::detectMedia()+0x120>
c00212e2:	84 c0                	test   al,al
c00212e4:	75 25                	jne    c002130b <SATAPI::detectMedia()+0x123>
c00212e6:	83 ec 0c             	sub    esp,0xc
c00212e9:	68 89 6e 02 c0       	push   0xc0026e89
c00212ee:	e8 d2 bc fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00212f3:	83 c4 10             	add    esp,0x10
c00212f6:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00212fd:	75 0c                	jne    c002130b <SATAPI::detectMedia()+0x123>
c00212ff:	83 ec 0c             	sub    esp,0xc
c0021302:	53                   	push   ebx
c0021303:	e8 fa fb ff ff       	call   c0020f02 <SATAPI::diskInserted()>
c0021308:	83 c4 10             	add    esp,0x10
c002130b:	83 c4 24             	add    esp,0x24
c002130e:	5b                   	pop    ebx
c002130f:	5e                   	pop    esi
c0021310:	c3                   	ret    
c0021311:	90                   	nop

c0021312 <SATAPI::open(int, int, void*)>:
c0021312:	56                   	push   esi
c0021313:	53                   	push   ebx
c0021314:	51                   	push   ecx
c0021315:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021319:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002131d:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0021327:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002132d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0021337:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002133b:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0021345:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002134b:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0021352:	e8 17 90 fe ff       	call   c000a36e <Phys::allocatePage()>
c0021357:	89 c6                	mov    esi,eax
c0021359:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c002135f:	81 c6 00 10 00 00    	add    esi,0x1000
c0021365:	e8 04 90 fe ff       	call   c000a36e <Phys::allocatePage()>
c002136a:	39 c6                	cmp    esi,eax
c002136c:	74 10                	je     c002137e <SATAPI::open(int, int, void*)+0x6c>
c002136e:	83 ec 0c             	sub    esp,0xc
c0021371:	68 93 6e 02 c0       	push   0xc0026e93
c0021376:	e8 60 2c ff ff       	call   c0013fdb <Krnl::panic(char const*)>
c002137b:	83 c4 10             	add    esp,0x10
c002137e:	83 ec 0c             	sub    esp,0xc
c0021381:	6a 02                	push   0x2
c0021383:	e8 e1 a8 fe ff       	call   c000bc69 <Virt::allocateKernelVirtualPages(int)>
c0021388:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c002138e:	6a 03                	push   0x3
c0021390:	50                   	push   eax
c0021391:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c0021397:	ff 35 34 80 02 c0    	push   DWORD PTR ds:0xc0028034
c002139d:	e8 32 af fe ff       	call   c000c2d4 <VAS::mapPage(unsigned long, unsigned long, int)>
c00213a2:	83 c4 14             	add    esp,0x14
c00213a5:	68 74 01 00 00       	push   0x174
c00213aa:	e8 08 89 fe ff       	call   c0009cb7 <malloc>
c00213af:	83 c4 0c             	add    esp,0xc
c00213b2:	89 c6                	mov    esi,eax
c00213b4:	6a 00                	push   0x0
c00213b6:	68 ff ff ff 7f       	push   0x7fffffff
c00213bb:	6a 00                	push   0x0
c00213bd:	6a 00                	push   0x0
c00213bf:	53                   	push   ebx
c00213c0:	68 a9 6e 02 c0       	push   0xc0026ea9
c00213c5:	50                   	push   eax
c00213c6:	e8 4b e2 fe ff       	call   c000f616 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00213cb:	83 c4 14             	add    esp,0x14
c00213ce:	56                   	push   esi
c00213cf:	e8 f8 e2 fe ff       	call   c000f6cc <LogicalDisk::assignDriveLetter()>
c00213d4:	5a                   	pop    edx
c00213d5:	0f be c0             	movsx  eax,al
c00213d8:	59                   	pop    ecx
c00213d9:	50                   	push   eax
c00213da:	68 3f 6b 02 c0       	push   0xc0026b3f
c00213df:	e8 e1 bb fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00213e4:	58                   	pop    eax
c00213e5:	5a                   	pop    edx
c00213e6:	56                   	push   esi
c00213e7:	53                   	push   ebx
c00213e8:	e8 89 d0 fe ff       	call   c000e476 <Device::addChild(Device*)>
c00213ed:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c00213f3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00213f6:	e8 1b d5 fe ff       	call   c000e916 <PhysicalDisk::startCache()>
c00213fb:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0021402:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021405:	e8 de fd ff ff       	call   c00211e8 <SATAPI::detectMedia()>
c002140a:	83 c4 14             	add    esp,0x14
c002140d:	31 c0                	xor    eax,eax
c002140f:	5b                   	pop    ebx
c0021410:	5e                   	pop    esi
c0021411:	c3                   	ret    

c0021412 <SATAPI::read(unsigned long long, int, void*)>:
c0021412:	55                   	push   ebp
c0021413:	57                   	push   edi
c0021414:	56                   	push   esi
c0021415:	53                   	push   ebx
c0021416:	83 ec 48             	sub    esp,0x48
c0021419:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c002141d:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0021421:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0021425:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0021429:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002142d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0021431:	68 b7 6e 02 c0       	push   0xc0026eb7
c0021436:	e8 8a bb fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c002143b:	83 c4 10             	add    esp,0x10
c002143e:	83 fb 04             	cmp    ebx,0x4
c0021441:	7e 10                	jle    c0021453 <SATAPI::read(unsigned long long, int, void*)+0x41>
c0021443:	83 ec 0c             	sub    esp,0xc
c0021446:	68 c8 6e 02 c0       	push   0xc0026ec8
c002144b:	e8 8b 2b ff ff       	call   c0013fdb <Krnl::panic(char const*)>
c0021450:	83 c4 10             	add    esp,0x10
c0021453:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0021457:	31 ed                	xor    ebp,ebp
c0021459:	b9 03 00 00 00       	mov    ecx,0x3
c002145e:	fc                   	cld    
c002145f:	89 e8                	mov    eax,ebp
c0021461:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0021463:	c6 44 24 18 1b       	mov    BYTE PTR [esp+0x18],0x1b
c0021468:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c002146d:	50                   	push   eax
c002146e:	6a 00                	push   0x0
c0021470:	6a 00                	push   0x0
c0021472:	6a 00                	push   0x0
c0021474:	6a 00                	push   0x0
c0021476:	6a 02                	push   0x2
c0021478:	8d 44 24 30          	lea    eax,[esp+0x30]
c002147c:	50                   	push   eax
c002147d:	56                   	push   esi
c002147e:	e8 9b fa ff ff       	call   c0020f1e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0021483:	8d 7c 24 44          	lea    edi,[esp+0x44]
c0021487:	89 e8                	mov    eax,ebp
c0021489:	b9 03 00 00 00       	mov    ecx,0x3
c002148e:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0021490:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0021494:	88 5c 24 4d          	mov    BYTE PTR [esp+0x4d],bl
c0021498:	c6 44 24 44 a8       	mov    BYTE PTR [esp+0x44],0xa8
c002149d:	86 e0                	xchg   al,ah
c002149f:	c1 c0 10             	rol    eax,0x10
c00214a2:	86 e0                	xchg   al,ah
c00214a4:	89 44 24 46          	mov    DWORD PTR [esp+0x46],eax
c00214a8:	83 c4 1c             	add    esp,0x1c
c00214ab:	53                   	push   ebx
c00214ac:	c1 e3 0b             	shl    ebx,0xb
c00214af:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c00214b3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00214b7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00214bb:	53                   	push   ebx
c00214bc:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00214c0:	50                   	push   eax
c00214c1:	56                   	push   esi
c00214c2:	e8 57 fa ff ff       	call   c0020f1e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00214c7:	83 c4 20             	add    esp,0x20
c00214ca:	85 c0                	test   eax,eax
c00214cc:	74 14                	je     c00214e2 <SATAPI::read(unsigned long long, int, void*)+0xd0>
c00214ce:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00214d2:	83 ec 0c             	sub    esp,0xc
c00214d5:	56                   	push   esi
c00214d6:	e8 0d fd ff ff       	call   c00211e8 <SATAPI::detectMedia()>
c00214db:	83 c4 10             	add    esp,0x10
c00214de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00214e2:	83 c4 3c             	add    esp,0x3c
c00214e5:	5b                   	pop    ebx
c00214e6:	5e                   	pop    esi
c00214e7:	5f                   	pop    edi
c00214e8:	5d                   	pop    ebp
c00214e9:	c3                   	ret    

c00214ea <APIC::disable()>:
c00214ea:	90                   	nop
c00214eb:	c3                   	ret    

c00214ec <APIC::close(int, int, void*)>:
c00214ec:	55                   	push   ebp
c00214ed:	89 e5                	mov    ebp,esp
c00214ef:	83 ec 08             	sub    esp,0x8
c00214f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00214f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00214f7:	83 c0 38             	add    eax,0x38
c00214fa:	8b 00                	mov    eax,DWORD PTR [eax]
c00214fc:	83 ec 0c             	sub    esp,0xc
c00214ff:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021502:	ff d0                	call   eax
c0021504:	83 c4 10             	add    esp,0x10
c0021507:	b8 00 00 00 00       	mov    eax,0x0
c002150c:	c9                   	leave  
c002150d:	c3                   	ret    

c002150e <IOAPIC::close(int, int, void*)>:
c002150e:	b8 00 00 00 00       	mov    eax,0x0
c0021513:	c3                   	ret    

c0021514 <APIC::io_wait()>:
c0021514:	eb 00                	jmp    c0021516 <APIC::io_wait()+0x2>
c0021516:	eb 00                	jmp    c0021518 <APIC::io_wait()+0x4>
c0021518:	90                   	nop
c0021519:	c3                   	ret    

c002151a <APIC::getBase()>:
c002151a:	55                   	push   ebp
c002151b:	89 e5                	mov    ebp,esp
c002151d:	83 ec 18             	sub    esp,0x18
c0021520:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c0021525:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c002152b:	83 e0 08             	and    eax,0x8
c002152e:	84 c0                	test   al,al
c0021530:	75 07                	jne    c0021539 <APIC::getBase()+0x1f>
c0021532:	b8 00 00 00 00       	mov    eax,0x0
c0021537:	eb 21                	jmp    c002155a <APIC::getBase()+0x40>
c0021539:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c002153e:	83 ec 08             	sub    esp,0x8
c0021541:	6a 1b                	push   0x1b
c0021543:	50                   	push   eax
c0021544:	e8 1d 7d fe ff       	call   c0009266 <Computer::rdmsr(unsigned int)>
c0021549:	83 c4 10             	add    esp,0x10
c002154c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002154f:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0021552:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0021555:	25 00 f0 ff ff       	and    eax,0xfffff000
c002155a:	c9                   	leave  
c002155b:	c3                   	ret    

c002155c <APIC::open(int, int, void*)>:
c002155c:	55                   	push   ebp
c002155d:	89 e5                	mov    ebp,esp
c002155f:	57                   	push   edi
c0021560:	56                   	push   esi
c0021561:	53                   	push   ebx
c0021562:	83 ec 2c             	sub    esp,0x2c
c0021565:	83 ec 0c             	sub    esp,0xc
c0021568:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002156b:	e8 aa ff ff ff       	call   c002151a <APIC::getBase()>
c0021570:	83 c4 10             	add    esp,0x10
c0021573:	89 c2                	mov    edx,eax
c0021575:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021578:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002157e:	0f b6 f8             	movzx  edi,al
c0021581:	89 d0                	mov    eax,edx
c0021583:	ba 00 00 00 00       	mov    edx,0x0
c0021588:	89 c1                	mov    ecx,eax
c002158a:	80 e5 ff             	and    ch,0xff
c002158d:	89 cb                	mov    ebx,ecx
c002158f:	0f b6 f2             	movzx  esi,dl
c0021592:	89 d8                	mov    eax,ebx
c0021594:	89 f2                	mov    edx,esi
c0021596:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021599:	8d 5f 08             	lea    ebx,[edi+0x8]
c002159c:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00215a0:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00215a4:	83 e0 00             	and    eax,0x0
c00215a7:	09 d0                	or     eax,edx
c00215a9:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00215ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00215b0:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00215b6:	8d 50 01             	lea    edx,[eax+0x1]
c00215b9:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00215bc:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00215c2:	0f b6 d0             	movzx  edx,al
c00215c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00215c8:	83 c2 08             	add    edx,0x8
c00215cb:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00215cf:	0f b6 c9             	movzx  ecx,cl
c00215d2:	81 c9 00 00 01 00    	or     ecx,0x10000
c00215d8:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00215dc:	83 ec 0c             	sub    esp,0xc
c00215df:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00215e2:	e8 33 ff ff ff       	call   c002151a <APIC::getBase()>
c00215e7:	83 c4 10             	add    esp,0x10
c00215ea:	05 f0 00 00 00       	add    eax,0xf0
c00215ef:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00215f2:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00215f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00215f7:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00215fa:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0021601:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0021608:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002160b:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002160e:	89 10                	mov    DWORD PTR [eax],edx
c0021610:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0021617:	a1 70 87 02 c0       	mov    eax,ds:0xc0028770
c002161c:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c002161f:	7d 7c                	jge    c002169d <APIC::open(int, int, void*)+0x141>
c0021621:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0021624:	8b 04 85 80 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7880]
c002162b:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c002162e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0021631:	8b 04 85 80 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7880]
c0021638:	c1 e8 08             	shr    eax,0x8
c002163b:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c002163f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0021642:	8b 04 85 80 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7880]
c0021649:	c1 e8 18             	shr    eax,0x18
c002164c:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c002164f:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c0021653:	75 40                	jne    c0021695 <APIC::open(int, int, void*)+0x139>
c0021655:	83 ec 0c             	sub    esp,0xc
c0021658:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002165b:	e8 ba fe ff ff       	call   c002151a <APIC::getBase()>
c0021660:	83 c4 10             	add    esp,0x10
c0021663:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0021667:	75 07                	jne    c0021670 <APIC::open(int, int, void*)+0x114>
c0021669:	ba 60 03 00 00       	mov    edx,0x360
c002166e:	eb 05                	jmp    c0021675 <APIC::open(int, int, void*)+0x119>
c0021670:	ba 50 03 00 00       	mov    edx,0x350
c0021675:	01 d0                	add    eax,edx
c0021677:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002167a:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002167d:	8b 00                	mov    eax,DWORD PTR [eax]
c002167f:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0021682:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0021689:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c002168d:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0021690:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0021693:	89 10                	mov    DWORD PTR [eax],edx
c0021695:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0021698:	e9 7a ff ff ff       	jmp    c0021617 <APIC::open(int, int, void*)+0xbb>
c002169d:	b8 00 00 00 00       	mov    eax,0x0
c00216a2:	8d 65 f4             	lea    esp,[ebp-0xc]
c00216a5:	5b                   	pop    ebx
c00216a6:	5e                   	pop    esi
c00216a7:	5f                   	pop    edi
c00216a8:	5d                   	pop    ebp
c00216a9:	c3                   	ret    

c00216aa <IOAPIC::IOAPIC()>:
c00216aa:	83 ec 0c             	sub    esp,0xc
c00216ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216b1:	83 ec 08             	sub    esp,0x8
c00216b4:	68 2c 6f 02 c0       	push   0xc0026f2c
c00216b9:	50                   	push   eax
c00216ba:	e8 bb cf fe ff       	call   c000e67a <Device::Device(char const*)>
c00216bf:	83 c4 10             	add    esp,0x10
c00216c2:	ba 50 70 02 c0       	mov    edx,0xc0027050
c00216c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216cb:	89 10                	mov    DWORD PTR [eax],edx
c00216cd:	90                   	nop
c00216ce:	83 c4 0c             	add    esp,0xc
c00216d1:	c3                   	ret    

c00216d2 <APIC::APIC()>:
c00216d2:	53                   	push   ebx
c00216d3:	83 ec 18             	sub    esp,0x18
c00216d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00216da:	83 ec 08             	sub    esp,0x8
c00216dd:	68 34 6f 02 c0       	push   0xc0026f34
c00216e2:	50                   	push   eax
c00216e3:	e8 94 d5 fe ff       	call   c000ec7c <InterruptController::InterruptController(char const*)>
c00216e8:	83 c4 10             	add    esp,0x10
c00216eb:	ba 0c 70 02 c0       	mov    edx,0xc002700c
c00216f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00216f4:	89 10                	mov    DWORD PTR [eax],edx
c00216f6:	a0 a0 9e 02 c0       	mov    al,ds:0xc0029ea0
c00216fb:	83 f0 01             	xor    eax,0x1
c00216fe:	84 c0                	test   al,al
c0021700:	0f 84 a1 00 00 00    	je     c00217a7 <APIC::APIC()+0xd5>
c0021706:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c002170b:	a0 20 88 02 c0       	mov    al,ds:0xc0028820
c0021710:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0021714:	0f 83 86 00 00 00    	jae    c00217a0 <APIC::APIC()+0xce>
c002171a:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0021722:	83 ec 0c             	sub    esp,0xc
c0021725:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021729:	e8 89 85 fe ff       	call   c0009cb7 <malloc>
c002172e:	83 c4 10             	add    esp,0x10
c0021731:	89 c3                	mov    ebx,eax
c0021733:	83 ec 0c             	sub    esp,0xc
c0021736:	53                   	push   ebx
c0021737:	e8 6e ff ff ff       	call   c00216aa <IOAPIC::IOAPIC()>
c002173c:	83 c4 10             	add    esp,0x10
c002173f:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0021743:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0021748:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002174c:	89 14 85 80 9e 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6180],edx
c0021753:	a1 60 9e 02 c0       	mov    eax,ds:0xc0029e60
c0021758:	40                   	inc    eax
c0021759:	a3 60 9e 02 c0       	mov    ds:0xc0029e60,eax
c002175e:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c0021763:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0021769:	83 ec 08             	sub    esp,0x8
c002176c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021770:	50                   	push   eax
c0021771:	e8 00 cd fe ff       	call   c000e476 <Device::addChild(Device*)>
c0021776:	83 c4 10             	add    esp,0x10
c0021779:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002177d:	8b 00                	mov    eax,DWORD PTR [eax]
c002177f:	83 c0 08             	add    eax,0x8
c0021782:	8b 00                	mov    eax,DWORD PTR [eax]
c0021784:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0021789:	6a 00                	push   0x0
c002178b:	6a 00                	push   0x0
c002178d:	52                   	push   edx
c002178e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021792:	ff d0                	call   eax
c0021794:	83 c4 10             	add    esp,0x10
c0021797:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c002179b:	e9 6b ff ff ff       	jmp    c002170b <APIC::APIC()+0x39>
c00217a0:	c6 05 a0 9e 02 c0 01 	mov    BYTE PTR ds:0xc0029ea0,0x1
c00217a7:	90                   	nop
c00217a8:	83 c4 18             	add    esp,0x18
c00217ab:	5b                   	pop    ebx
c00217ac:	c3                   	ret    
c00217ad:	90                   	nop

c00217ae <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c00217ae:	55                   	push   ebp
c00217af:	89 e5                	mov    ebp,esp
c00217b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00217b4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00217ba:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00217bd:	72 1d                	jb     c00217dc <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00217bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00217c2:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c00217c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00217cb:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c00217d1:	01 d0                	add    eax,edx
c00217d3:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00217d6:	73 04                	jae    c00217dc <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00217d8:	b0 01                	mov    al,0x1
c00217da:	eb 02                	jmp    c00217de <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c00217dc:	b0 00                	mov    al,0x0
c00217de:	5d                   	pop    ebp
c00217df:	c3                   	ret    

c00217e0 <IOAPIC::read(int)>:
c00217e0:	55                   	push   ebp
c00217e1:	89 e5                	mov    ebp,esp
c00217e3:	83 ec 10             	sub    esp,0x10
c00217e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00217e9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00217ef:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00217f2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00217f5:	0f b6 d0             	movzx  edx,al
c00217f8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00217fb:	89 10                	mov    DWORD PTR [eax],edx
c00217fd:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0021800:	83 c0 10             	add    eax,0x10
c0021803:	8b 00                	mov    eax,DWORD PTR [eax]
c0021805:	c9                   	leave  
c0021806:	c3                   	ret    
c0021807:	90                   	nop

c0021808 <IOAPIC::open(int, int, void*)>:
c0021808:	55                   	push   ebp
c0021809:	89 e5                	mov    ebp,esp
c002180b:	57                   	push   edi
c002180c:	56                   	push   esi
c002180d:	53                   	push   ebx
c002180e:	83 ec 0c             	sub    esp,0xc
c0021811:	83 ec 0c             	sub    esp,0xc
c0021814:	68 5f 6f 02 c0       	push   0xc0026f5f
c0021819:	e8 a7 b7 fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c002181e:	83 c4 10             	add    esp,0x10
c0021821:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021824:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021827:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002182d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021830:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0021836:	8b 14 85 60 88 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd77a0]
c002183d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021840:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0021846:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021849:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002184f:	8b 14 85 e0 88 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7720]
c0021856:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021859:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c002185f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021862:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0021868:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002186b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0021871:	0f b6 f8             	movzx  edi,al
c0021874:	89 d0                	mov    eax,edx
c0021876:	ba 00 00 00 00       	mov    edx,0x0
c002187b:	89 c1                	mov    ecx,eax
c002187d:	80 e5 ff             	and    ch,0xff
c0021880:	89 cb                	mov    ebx,ecx
c0021882:	0f b6 f2             	movzx  esi,dl
c0021885:	89 d8                	mov    eax,ebx
c0021887:	89 f2                	mov    edx,esi
c0021889:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002188c:	8d 5f 08             	lea    ebx,[edi+0x8]
c002188f:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0021893:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0021897:	83 e0 00             	and    eax,0x0
c002189a:	09 d0                	or     eax,edx
c002189c:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00218a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00218a3:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00218a9:	8d 50 01             	lea    edx,[eax+0x1]
c00218ac:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00218af:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00218b5:	0f b6 d0             	movzx  edx,al
c00218b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00218bb:	83 c2 08             	add    edx,0x8
c00218be:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00218c2:	0f b6 c9             	movzx  ecx,cl
c00218c5:	81 c9 00 ad de 00    	or     ecx,0xdead00
c00218cb:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00218cf:	83 ec 08             	sub    esp,0x8
c00218d2:	6a 01                	push   0x1
c00218d4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00218d7:	e8 04 ff ff ff       	call   c00217e0 <IOAPIC::read(int)>
c00218dc:	83 c4 10             	add    esp,0x10
c00218df:	c1 f8 10             	sar    eax,0x10
c00218e2:	0f b6 c0             	movzx  eax,al
c00218e5:	8d 50 01             	lea    edx,[eax+0x1]
c00218e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00218eb:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c00218f1:	b8 00 00 00 00       	mov    eax,0x0
c00218f6:	8d 65 f4             	lea    esp,[ebp-0xc]
c00218f9:	5b                   	pop    ebx
c00218fa:	5e                   	pop    esi
c00218fb:	5f                   	pop    edi
c00218fc:	5d                   	pop    ebp
c00218fd:	c3                   	ret    

c00218fe <IOAPIC::write(int, int)>:
c00218fe:	55                   	push   ebp
c00218ff:	89 e5                	mov    ebp,esp
c0021901:	83 ec 10             	sub    esp,0x10
c0021904:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021907:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002190d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0021910:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021913:	0f b6 d0             	movzx  edx,al
c0021916:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0021919:	89 10                	mov    DWORD PTR [eax],edx
c002191b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002191e:	8d 50 10             	lea    edx,[eax+0x10]
c0021921:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021924:	89 02                	mov    DWORD PTR [edx],eax
c0021926:	90                   	nop
c0021927:	c9                   	leave  
c0021928:	c3                   	ret    
c0021929:	90                   	nop

c002192a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c002192a:	55                   	push   ebp
c002192b:	89 e5                	mov    ebp,esp
c002192d:	53                   	push   ebx
c002192e:	83 ec 2c             	sub    esp,0x2c
c0021931:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021934:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0021937:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c002193a:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c002193d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0021940:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021943:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0021946:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0021949:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002194c:	88 d8                	mov    al,bl
c002194e:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0021951:	88 c8                	mov    al,cl
c0021953:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0021956:	88 d0                	mov    al,dl
c0021958:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c002195b:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002195f:	83 c0 08             	add    eax,0x8
c0021962:	01 c0                	add    eax,eax
c0021964:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0021967:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002196b:	83 c0 08             	add    eax,0x8
c002196e:	01 c0                	add    eax,eax
c0021970:	40                   	inc    eax
c0021971:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0021974:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0021977:	50                   	push   eax
c0021978:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002197b:	e8 60 fe ff ff       	call   c00217e0 <IOAPIC::read(int)>
c0021980:	83 c4 08             	add    esp,0x8
c0021983:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0021986:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c002198d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0021990:	c1 e0 18             	shl    eax,0x18
c0021993:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0021996:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0021999:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002199c:	52                   	push   edx
c002199d:	50                   	push   eax
c002199e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00219a1:	e8 58 ff ff ff       	call   c00218fe <IOAPIC::write(int, int)>
c00219a6:	83 c4 0c             	add    esp,0xc
c00219a9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00219ac:	50                   	push   eax
c00219ad:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00219b0:	e8 2b fe ff ff       	call   c00217e0 <IOAPIC::read(int)>
c00219b5:	83 c4 08             	add    esp,0x8
c00219b8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00219bb:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c00219c2:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c00219c9:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c00219d0:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00219d4:	74 09                	je     c00219df <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c00219d6:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c00219dd:	eb 07                	jmp    c00219e6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c00219df:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c00219e6:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c00219ea:	74 09                	je     c00219f5 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c00219ec:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c00219f3:	eb 07                	jmp    c00219fc <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c00219f5:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c00219fc:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0021a03:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0021a07:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0021a0a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0021a0d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0021a10:	52                   	push   edx
c0021a11:	50                   	push   eax
c0021a12:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021a15:	e8 e4 fe ff ff       	call   c00218fe <IOAPIC::write(int, int)>
c0021a1a:	83 c4 0c             	add    esp,0xc
c0021a1d:	90                   	nop
c0021a1e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0021a21:	c9                   	leave  
c0021a22:	c3                   	ret    
c0021a23:	90                   	nop

c0021a24 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0021a24:	55                   	push   ebp
c0021a25:	89 e5                	mov    ebp,esp
c0021a27:	57                   	push   edi
c0021a28:	56                   	push   esi
c0021a29:	53                   	push   ebx
c0021a2a:	83 ec 2c             	sub    esp,0x2c
c0021a2d:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0021a30:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0021a33:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0021a37:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0021a3b:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0021a3f:	74 5a                	je     c0021a9b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0021a41:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0021a45:	7f 44                	jg     c0021a8b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0021a47:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021a4a:	05 60 73 02 c0       	add    eax,0xc0027360
c0021a4f:	8a 00                	mov    al,BYTE PTR [eax]
c0021a51:	0f b6 c0             	movzx  eax,al
c0021a54:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0021a57:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021a5a:	66 8b 84 00 00 88 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd7800]
c0021a62:	0f b7 c0             	movzx  eax,ax
c0021a65:	83 e0 02             	and    eax,0x2
c0021a68:	85 c0                	test   eax,eax
c0021a6a:	74 04                	je     c0021a70 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0021a6c:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0021a70:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021a73:	66 8b 84 00 00 88 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd7800]
c0021a7b:	0f b7 c0             	movzx  eax,ax
c0021a7e:	83 e0 08             	and    eax,0x8
c0021a81:	85 c0                	test   eax,eax
c0021a83:	74 16                	je     c0021a9b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0021a85:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0021a89:	eb 10                	jmp    c0021a9b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0021a8b:	83 ec 0c             	sub    esp,0xc
c0021a8e:	68 70 6f 02 c0       	push   0xc0026f70
c0021a93:	e8 43 25 ff ff       	call   c0013fdb <Krnl::panic(char const*)>
c0021a98:	83 c4 10             	add    esp,0x10
c0021a9b:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0021a9f:	a1 60 9e 02 c0       	mov    eax,ds:0xc0029e60
c0021aa4:	83 ec 08             	sub    esp,0x8
c0021aa7:	50                   	push   eax
c0021aa8:	68 a8 6f 02 c0       	push   0xc0026fa8
c0021aad:	e8 13 b5 fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0021ab2:	83 c4 10             	add    esp,0x10
c0021ab5:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0021abc:	a1 60 9e 02 c0       	mov    eax,ds:0xc0029e60
c0021ac1:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0021ac4:	7d 67                	jge    c0021b2d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0021ac6:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0021ac9:	8b 04 85 80 9e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6180]
c0021ad0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021ad3:	83 ec 08             	sub    esp,0x8
c0021ad6:	52                   	push   edx
c0021ad7:	50                   	push   eax
c0021ad8:	e8 d1 fc ff ff       	call   c00217ae <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0021add:	83 c4 10             	add    esp,0x10
c0021ae0:	84 c0                	test   al,al
c0021ae2:	74 44                	je     c0021b28 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0021ae4:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0021ae7:	8b 1c 85 80 9e 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd6180]
c0021aee:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0021af2:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0021af5:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0021af9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021afc:	83 c0 20             	add    eax,0x20
c0021aff:	0f b6 f0             	movzx  esi,al
c0021b02:	b8 00 00 00 00       	mov    eax,0x0
c0021b07:	99                   	cdq    
c0021b08:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0021b0b:	0f b6 c9             	movzx  ecx,cl
c0021b0e:	83 ec 04             	sub    esp,0x4
c0021b11:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0021b14:	57                   	push   edi
c0021b15:	56                   	push   esi
c0021b16:	52                   	push   edx
c0021b17:	50                   	push   eax
c0021b18:	51                   	push   ecx
c0021b19:	53                   	push   ebx
c0021b1a:	e8 0b fe ff ff       	call   c002192a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0021b1f:	83 c4 20             	add    esp,0x20
c0021b22:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0021b26:	eb 05                	jmp    c0021b2d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0021b28:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0021b2b:	eb 8f                	jmp    c0021abc <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0021b2d:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0021b30:	83 f0 01             	xor    eax,0x1
c0021b33:	84 c0                	test   al,al
c0021b35:	74 10                	je     c0021b47 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0021b37:	83 ec 0c             	sub    esp,0xc
c0021b3a:	68 bf 6f 02 c0       	push   0xc0026fbf
c0021b3f:	e8 97 24 ff ff       	call   c0013fdb <Krnl::panic(char const*)>
c0021b44:	83 c4 10             	add    esp,0x10
c0021b47:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0021b4b:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0021b52:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0021b56:	7f 65                	jg     c0021bbd <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0021b58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021b5b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021b5e:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0021b65:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0021b68:	01 ca                	add    edx,ecx
c0021b6a:	83 c2 54             	add    edx,0x54
c0021b6d:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0021b71:	85 c0                	test   eax,eax
c0021b73:	75 43                	jne    c0021bb8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0021b75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021b78:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021b7b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0021b82:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0021b85:	01 ca                	add    edx,ecx
c0021b87:	8d 4a 54             	lea    ecx,[edx+0x54]
c0021b8a:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0021b8d:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0021b91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021b94:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021b97:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0021b9e:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0021ba1:	01 ca                	add    edx,ecx
c0021ba3:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0021ba9:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0021bac:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0021bb0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021bb3:	83 e8 20             	sub    eax,0x20
c0021bb6:	eb 1a                	jmp    c0021bd2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0021bb8:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0021bbb:	eb 95                	jmp    c0021b52 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0021bbd:	83 ec 0c             	sub    esp,0xc
c0021bc0:	68 cc 6f 02 c0       	push   0xc0026fcc
c0021bc5:	e8 11 24 ff ff       	call   c0013fdb <Krnl::panic(char const*)>
c0021bca:	83 c4 10             	add    esp,0x10
c0021bcd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021bd2:	8d 65 f4             	lea    esp,[ebp-0xc]
c0021bd5:	5b                   	pop    ebx
c0021bd6:	5e                   	pop    esi
c0021bd7:	5f                   	pop    edi
c0021bd8:	5d                   	pop    ebp
c0021bd9:	c3                   	ret    

c0021bda <PIC::disable()>:
c0021bda:	55                   	push   ebp
c0021bdb:	89 e5                	mov    ebp,esp
c0021bdd:	83 ec 10             	sub    esp,0x10
c0021be0:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0021be6:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0021bea:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0021bed:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0021bf1:	ee                   	out    dx,al
c0021bf2:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0021bf8:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0021bfc:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0021bff:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0021c03:	ee                   	out    dx,al
c0021c04:	90                   	nop
c0021c05:	c9                   	leave  
c0021c06:	c3                   	ret    
c0021c07:	90                   	nop

c0021c08 <PIC::close(int, int, void*)>:
c0021c08:	55                   	push   ebp
c0021c09:	89 e5                	mov    ebp,esp
c0021c0b:	83 ec 08             	sub    esp,0x8
c0021c0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021c11:	8b 00                	mov    eax,DWORD PTR [eax]
c0021c13:	83 c0 38             	add    eax,0x38
c0021c16:	8b 00                	mov    eax,DWORD PTR [eax]
c0021c18:	83 ec 0c             	sub    esp,0xc
c0021c1b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021c1e:	ff d0                	call   eax
c0021c20:	83 c4 10             	add    esp,0x10
c0021c23:	b8 00 00 00 00       	mov    eax,0x0
c0021c28:	c9                   	leave  
c0021c29:	c3                   	ret    

c0021c2a <PIC::PIC()>:
c0021c2a:	83 ec 0c             	sub    esp,0xc
c0021c2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c31:	83 ec 08             	sub    esp,0x8
c0021c34:	68 74 70 02 c0       	push   0xc0027074
c0021c39:	50                   	push   eax
c0021c3a:	e8 3d d0 fe ff       	call   c000ec7c <InterruptController::InterruptController(char const*)>
c0021c3f:	83 c4 10             	add    esp,0x10
c0021c42:	ba a0 70 02 c0       	mov    edx,0xc00270a0
c0021c47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c4b:	89 10                	mov    DWORD PTR [eax],edx
c0021c4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c51:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021c57:	0f b6 d0             	movzx  edx,al
c0021c5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c5e:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0021c65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c69:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021c6f:	0f b6 d0             	movzx  edx,al
c0021c72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c76:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0021c7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c7f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021c85:	8d 50 01             	lea    edx,[eax+0x1]
c0021c88:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021c8c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0021c92:	0f b6 d0             	movzx  edx,al
c0021c95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c99:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0021c9d:	83 e1 3f             	and    ecx,0x3f
c0021ca0:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0021ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ca8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021cae:	0f b6 d0             	movzx  edx,al
c0021cb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cb5:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0021cbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cc0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021cc6:	0f b6 d0             	movzx  edx,al
c0021cc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ccd:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0021cd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cd6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021cdc:	8d 50 01             	lea    edx,[eax+0x1]
c0021cdf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021ce3:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0021ce9:	0f b6 d0             	movzx  edx,al
c0021cec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cf0:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0021cf4:	83 e1 3f             	and    ecx,0x3f
c0021cf7:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0021cfb:	90                   	nop
c0021cfc:	83 c4 0c             	add    esp,0xc
c0021cff:	c3                   	ret    

c0021d00 <PIC::ioWait()>:
c0021d00:	eb 00                	jmp    c0021d02 <PIC::ioWait()+0x2>
c0021d02:	eb 00                	jmp    c0021d04 <PIC::ioWait()+0x4>
c0021d04:	90                   	nop
c0021d05:	c3                   	ret    

c0021d06 <PIC::getIRQReg(int)>:
c0021d06:	55                   	push   ebp
c0021d07:	89 e5                	mov    ebp,esp
c0021d09:	83 ec 10             	sub    esp,0x10
c0021d0c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021d0f:	0f b6 c0             	movzx  eax,al
c0021d12:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0021d18:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0021d1b:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0021d1e:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0021d22:	ee                   	out    dx,al
c0021d23:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021d26:	0f b6 c0             	movzx  eax,al
c0021d29:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0021d2f:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0021d32:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0021d35:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0021d39:	ee                   	out    dx,al
c0021d3a:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0021d40:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0021d44:	89 c2                	mov    edx,eax
c0021d46:	ec                   	in     al,dx
c0021d47:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0021d4a:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0021d4d:	0f b6 c0             	movzx  eax,al
c0021d50:	c1 e0 08             	shl    eax,0x8
c0021d53:	89 c1                	mov    ecx,eax
c0021d55:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0021d5b:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0021d5f:	89 c2                	mov    edx,eax
c0021d61:	ec                   	in     al,dx
c0021d62:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0021d65:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0021d68:	0f b6 c0             	movzx  eax,al
c0021d6b:	09 c8                	or     eax,ecx
c0021d6d:	c9                   	leave  
c0021d6e:	c3                   	ret    
c0021d6f:	90                   	nop

c0021d70 <PIC::remap()>:
c0021d70:	55                   	push   ebp
c0021d71:	89 e5                	mov    ebp,esp
c0021d73:	83 ec 48             	sub    esp,0x48
c0021d76:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0021d7d:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0021d84:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0021d8a:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0021d8d:	89 c2                	mov    edx,eax
c0021d8f:	ec                   	in     al,dx
c0021d90:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0021d93:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0021d96:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0021d99:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0021d9f:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0021da2:	89 c2                	mov    edx,eax
c0021da4:	ec                   	in     al,dx
c0021da5:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0021da8:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0021dab:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0021dae:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0021db4:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0021db8:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0021dbb:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0021dbe:	ee                   	out    dx,al
c0021dbf:	83 ec 0c             	sub    esp,0xc
c0021dc2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021dc5:	e8 36 ff ff ff       	call   c0021d00 <PIC::ioWait()>
c0021dca:	83 c4 10             	add    esp,0x10
c0021dcd:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0021dd3:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0021dd7:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0021dda:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0021ddd:	ee                   	out    dx,al
c0021dde:	83 ec 0c             	sub    esp,0xc
c0021de1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021de4:	e8 17 ff ff ff       	call   c0021d00 <PIC::ioWait()>
c0021de9:	83 c4 10             	add    esp,0x10
c0021dec:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0021def:	0f b6 c0             	movzx  eax,al
c0021df2:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0021df8:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0021dfb:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0021dfe:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0021e01:	ee                   	out    dx,al
c0021e02:	83 ec 0c             	sub    esp,0xc
c0021e05:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021e08:	e8 f3 fe ff ff       	call   c0021d00 <PIC::ioWait()>
c0021e0d:	83 c4 10             	add    esp,0x10
c0021e10:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0021e13:	0f b6 c0             	movzx  eax,al
c0021e16:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0021e1c:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0021e1f:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0021e22:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0021e25:	ee                   	out    dx,al
c0021e26:	83 ec 0c             	sub    esp,0xc
c0021e29:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021e2c:	e8 cf fe ff ff       	call   c0021d00 <PIC::ioWait()>
c0021e31:	83 c4 10             	add    esp,0x10
c0021e34:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0021e3a:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0021e3e:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0021e41:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0021e44:	ee                   	out    dx,al
c0021e45:	83 ec 0c             	sub    esp,0xc
c0021e48:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021e4b:	e8 b0 fe ff ff       	call   c0021d00 <PIC::ioWait()>
c0021e50:	83 c4 10             	add    esp,0x10
c0021e53:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0021e59:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0021e5d:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0021e60:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0021e63:	ee                   	out    dx,al
c0021e64:	83 ec 0c             	sub    esp,0xc
c0021e67:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021e6a:	e8 91 fe ff ff       	call   c0021d00 <PIC::ioWait()>
c0021e6f:	83 c4 10             	add    esp,0x10
c0021e72:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0021e78:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0021e7c:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0021e7f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0021e82:	ee                   	out    dx,al
c0021e83:	83 ec 0c             	sub    esp,0xc
c0021e86:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021e89:	e8 72 fe ff ff       	call   c0021d00 <PIC::ioWait()>
c0021e8e:	83 c4 10             	add    esp,0x10
c0021e91:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0021e97:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0021e9b:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0021e9e:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0021ea1:	ee                   	out    dx,al
c0021ea2:	83 ec 0c             	sub    esp,0xc
c0021ea5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021ea8:	e8 53 fe ff ff       	call   c0021d00 <PIC::ioWait()>
c0021ead:	83 c4 10             	add    esp,0x10
c0021eb0:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0021eb4:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0021eba:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0021ebd:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0021ec0:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0021ec3:	ee                   	out    dx,al
c0021ec4:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0021ec8:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0021ece:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0021ed1:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0021ed4:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0021ed7:	ee                   	out    dx,al
c0021ed8:	90                   	nop
c0021ed9:	c9                   	leave  
c0021eda:	c3                   	ret    
c0021edb:	90                   	nop

c0021edc <PIC::open(int, int, void*)>:
c0021edc:	55                   	push   ebp
c0021edd:	89 e5                	mov    ebp,esp
c0021edf:	83 ec 18             	sub    esp,0x18
c0021ee2:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0021ee8:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0021eec:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0021eef:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0021ef3:	ee                   	out    dx,al
c0021ef4:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0021efa:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0021efe:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0021f01:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0021f05:	ee                   	out    dx,al
c0021f06:	83 ec 0c             	sub    esp,0xc
c0021f09:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021f0c:	e8 5f fe ff ff       	call   c0021d70 <PIC::remap()>
c0021f11:	83 c4 10             	add    esp,0x10
c0021f14:	b8 00 00 00 00       	mov    eax,0x0
c0021f19:	c9                   	leave  
c0021f1a:	c3                   	ret    
c0021f1b:	90                   	nop

c0021f1c <APICTimer::close(int, int, void*)>:
c0021f1c:	b8 00 00 00 00       	mov    eax,0x0
c0021f21:	c3                   	ret    
c0021f22:	66 90                	xchg   ax,ax

c0021f24 <apicTimerHandler(regs*, void*)>:
c0021f24:	83 ec 0c             	sub    esp,0xc
c0021f27:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021f2b:	8b 08                	mov    ecx,DWORD PTR [eax]
c0021f2d:	b8 10 27 00 00       	mov    eax,0x2710
c0021f32:	ba 00 00 00 00       	mov    edx,0x0
c0021f37:	f7 f1                	div    ecx
c0021f39:	83 ec 0c             	sub    esp,0xc
c0021f3c:	50                   	push   eax
c0021f3d:	e8 f3 de fe ff       	call   c000fe35 <timerHandler(unsigned int)>
c0021f42:	83 c4 10             	add    esp,0x10
c0021f45:	90                   	nop
c0021f46:	83 c4 0c             	add    esp,0xc
c0021f49:	c3                   	ret    
c0021f4a:	66 90                	xchg   ax,ax

c0021f4c <APICTimer::write(int)>:
c0021f4c:	83 ec 1c             	sub    esp,0x1c
c0021f4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f53:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0021f57:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0021f5d:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c0021f62:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0021f68:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0021f6e:	83 ec 0c             	sub    esp,0xc
c0021f71:	50                   	push   eax
c0021f72:	e8 a3 f5 ff ff       	call   c002151a <APIC::getBase()>
c0021f77:	83 c4 10             	add    esp,0x10
c0021f7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021f7e:	a1 2c 85 02 c0       	mov    eax,ds:0xc002852c
c0021f83:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021f87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021f8b:	05 e0 03 00 00       	add    eax,0x3e0
c0021f90:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0021f96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021f9a:	05 80 03 00 00       	add    eax,0x380
c0021f9f:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0021fa5:	fb                   	sti    
c0021fa6:	66 90                	xchg   ax,ax
c0021fa8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021fac:	8d 90 10 27 00 00    	lea    edx,[eax+0x2710]
c0021fb2:	a1 2c 85 02 c0       	mov    eax,ds:0xc002852c
c0021fb7:	39 c2                	cmp    edx,eax
c0021fb9:	76 05                	jbe    c0021fc0 <APICTimer::write(int)+0x74>
c0021fbb:	eb eb                	jmp    c0021fa8 <APICTimer::write(int)+0x5c>
c0021fbd:	8d 76 00             	lea    esi,[esi+0x0]
c0021fc0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021fc4:	05 20 03 00 00       	add    eax,0x320
c0021fc9:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0021fcf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021fd3:	05 90 03 00 00       	add    eax,0x390
c0021fd8:	8b 00                	mov    eax,DWORD PTR [eax]
c0021fda:	f7 d0                	not    eax
c0021fdc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021fe0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0021fe4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021fe8:	ba 00 00 00 00       	mov    edx,0x0
c0021fed:	f7 f1                	div    ecx
c0021fef:	89 04 24             	mov    DWORD PTR [esp],eax
c0021ff2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021ff6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0021ffc:	0d 00 00 02 00       	or     eax,0x20000
c0022001:	89 c2                	mov    edx,eax
c0022003:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022007:	05 20 03 00 00       	add    eax,0x320
c002200c:	89 10                	mov    DWORD PTR [eax],edx
c002200e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022012:	05 e0 03 00 00       	add    eax,0x3e0
c0022017:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c002201d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022021:	05 80 03 00 00       	add    eax,0x380
c0022026:	89 c2                	mov    edx,eax
c0022028:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002202b:	89 02                	mov    DWORD PTR [edx],eax
c002202d:	90                   	nop
c002202e:	83 c4 1c             	add    esp,0x1c
c0022031:	c3                   	ret    
c0022032:	66 90                	xchg   ax,ax

c0022034 <APICTimer::open(int, int, void*)>:
c0022034:	57                   	push   edi
c0022035:	56                   	push   esi
c0022036:	53                   	push   ebx
c0022037:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002203b:	8b 00                	mov    eax,DWORD PTR [eax]
c002203d:	83 c0 24             	add    eax,0x24
c0022040:	8b 00                	mov    eax,DWORD PTR [eax]
c0022042:	83 ec 08             	sub    esp,0x8
c0022045:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022049:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002204d:	ff d0                	call   eax
c002204f:	83 c4 10             	add    esp,0x10
c0022052:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c0022057:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002205d:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0022063:	83 ec 0c             	sub    esp,0xc
c0022066:	50                   	push   eax
c0022067:	e8 ae f4 ff ff       	call   c002151a <APIC::getBase()>
c002206c:	83 c4 10             	add    esp,0x10
c002206f:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0022075:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022079:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002207f:	0f b6 f8             	movzx  edi,al
c0022082:	89 d0                	mov    eax,edx
c0022084:	ba 00 00 00 00       	mov    edx,0x0
c0022089:	89 c1                	mov    ecx,eax
c002208b:	80 e5 ff             	and    ch,0xff
c002208e:	89 cb                	mov    ebx,ecx
c0022090:	0f b6 f2             	movzx  esi,dl
c0022093:	89 d8                	mov    eax,ebx
c0022095:	89 f2                	mov    edx,esi
c0022097:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002209b:	8d 5f 08             	lea    ebx,[edi+0x8]
c002209e:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00220a2:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00220a6:	83 e0 00             	and    eax,0x0
c00220a9:	09 d0                	or     eax,edx
c00220ab:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00220af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220b3:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00220b9:	8d 50 01             	lea    edx,[eax+0x1]
c00220bc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00220c0:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00220c6:	0f b6 d0             	movzx  edx,al
c00220c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220cd:	83 c2 08             	add    edx,0x8
c00220d0:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00220d4:	0f b6 c9             	movzx  ecx,cl
c00220d7:	81 c9 00 00 01 00    	or     ecx,0x10000
c00220dd:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00220e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220e5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00220e9:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00220ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220f3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00220f7:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c00220fd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022101:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0022107:	83 ec 0c             	sub    esp,0xc
c002210a:	51                   	push   ecx
c002210b:	6a 01                	push   0x1
c002210d:	68 24 1f 02 c0       	push   0xc0021f24
c0022112:	52                   	push   edx
c0022113:	50                   	push   eax
c0022114:	e8 d5 c2 fe ff       	call   c000e3ee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022119:	83 c4 20             	add    esp,0x20
c002211c:	89 c2                	mov    edx,eax
c002211e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022122:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0022128:	b8 00 00 00 00       	mov    eax,0x0
c002212d:	5b                   	pop    ebx
c002212e:	5e                   	pop    esi
c002212f:	5f                   	pop    edi
c0022130:	c3                   	ret    
c0022131:	90                   	nop
c0022132:	66 90                	xchg   ax,ax

c0022134 <APICTimer::APICTimer()>:
c0022134:	83 ec 0c             	sub    esp,0xc
c0022137:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002213b:	83 ec 08             	sub    esp,0x8
c002213e:	68 dc 70 02 c0       	push   0xc00270dc
c0022143:	50                   	push   eax
c0022144:	e8 5b dc fe ff       	call   c000fda4 <Timer::Timer(char const*)>
c0022149:	83 c4 10             	add    esp,0x10
c002214c:	ba f0 70 02 c0       	mov    edx,0xc00270f0
c0022151:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022155:	89 10                	mov    DWORD PTR [eax],edx
c0022157:	90                   	nop
c0022158:	83 c4 0c             	add    esp,0xc
c002215b:	c3                   	ret    

c002215c <PIT::write(int)>:
c002215c:	83 ec 10             	sub    esp,0x10
c002215f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022163:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0022167:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002216d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022171:	a3 a4 9e 02 c0       	mov    ds:0xc0029ea4,eax
c0022176:	b8 dc 34 12 00       	mov    eax,0x1234dc
c002217b:	99                   	cdq    
c002217c:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0022180:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022184:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c002218b:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0022190:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0022194:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0022199:	ee                   	out    dx,al
c002219a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002219e:	0f b6 c0             	movzx  eax,al
c00221a1:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c00221a8:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00221ac:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00221b0:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00221b5:	ee                   	out    dx,al
c00221b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00221ba:	c1 f8 08             	sar    eax,0x8
c00221bd:	0f b6 c0             	movzx  eax,al
c00221c0:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c00221c7:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00221cb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00221cf:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00221d4:	ee                   	out    dx,al
c00221d5:	90                   	nop
c00221d6:	83 c4 10             	add    esp,0x10
c00221d9:	c3                   	ret    
c00221da:	66 90                	xchg   ax,ax

c00221dc <pitHandler(regs*, void*)>:
c00221dc:	83 ec 0c             	sub    esp,0xc
c00221df:	8b 0d a4 9e 02 c0    	mov    ecx,DWORD PTR ds:0xc0029ea4
c00221e5:	b8 10 27 00 00       	mov    eax,0x2710
c00221ea:	99                   	cdq    
c00221eb:	f7 f9                	idiv   ecx
c00221ed:	83 ec 0c             	sub    esp,0xc
c00221f0:	50                   	push   eax
c00221f1:	e8 3f dc fe ff       	call   c000fe35 <timerHandler(unsigned int)>
c00221f6:	83 c4 10             	add    esp,0x10
c00221f9:	90                   	nop
c00221fa:	83 c4 0c             	add    esp,0xc
c00221fd:	c3                   	ret    
c00221fe:	66 90                	xchg   ax,ax

c0022200 <PIT::open(int, int, void*)>:
c0022200:	83 ec 0c             	sub    esp,0xc
c0022203:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022207:	8b 00                	mov    eax,DWORD PTR [eax]
c0022209:	83 c0 24             	add    eax,0x24
c002220c:	8b 00                	mov    eax,DWORD PTR [eax]
c002220e:	83 ec 08             	sub    esp,0x8
c0022211:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022215:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022219:	ff d0                	call   eax
c002221b:	83 c4 10             	add    esp,0x10
c002221e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022222:	83 ec 0c             	sub    esp,0xc
c0022225:	6a 00                	push   0x0
c0022227:	6a 01                	push   0x1
c0022229:	68 dc 21 02 c0       	push   0xc00221dc
c002222e:	6a 00                	push   0x0
c0022230:	50                   	push   eax
c0022231:	e8 b8 c1 fe ff       	call   c000e3ee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022236:	83 c4 20             	add    esp,0x20
c0022239:	89 c2                	mov    edx,eax
c002223b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002223f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0022245:	b8 00 00 00 00       	mov    eax,0x0
c002224a:	83 c4 0c             	add    esp,0xc
c002224d:	c3                   	ret    
c002224e:	66 90                	xchg   ax,ax

c0022250 <PIT::close(int, int, void*)>:
c0022250:	83 ec 0c             	sub    esp,0xc
c0022253:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022257:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0022261:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022265:	6a 01                	push   0x1
c0022267:	68 dc 21 02 c0       	push   0xc00221dc
c002226c:	6a 00                	push   0x0
c002226e:	50                   	push   eax
c002226f:	e8 c4 c1 fe ff       	call   c000e438 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0022274:	83 c4 10             	add    esp,0x10
c0022277:	b8 00 00 00 00       	mov    eax,0x0
c002227c:	83 c4 0c             	add    esp,0xc
c002227f:	c3                   	ret    

c0022280 <PIT::PIT()>:
c0022280:	83 ec 0c             	sub    esp,0xc
c0022283:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022287:	83 ec 08             	sub    esp,0x8
c002228a:	68 18 71 02 c0       	push   0xc0027118
c002228f:	50                   	push   eax
c0022290:	e8 0f db fe ff       	call   c000fda4 <Timer::Timer(char const*)>
c0022295:	83 c4 10             	add    esp,0x10
c0022298:	ba 40 71 02 c0       	mov    edx,0xc0027140
c002229d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222a1:	89 10                	mov    DWORD PTR [eax],edx
c00222a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222a7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00222ad:	0f b6 d0             	movzx  edx,al
c00222b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222b4:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c00222bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222bf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00222c5:	0f b6 d0             	movzx  edx,al
c00222c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222cc:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c00222d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222d5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00222db:	8d 50 01             	lea    edx,[eax+0x1]
c00222de:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00222e2:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00222e8:	0f b6 d0             	movzx  edx,al
c00222eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222ef:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00222f3:	83 e1 3f             	and    ecx,0x3f
c00222f6:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00222fa:	90                   	nop
c00222fb:	83 c4 0c             	add    esp,0xc
c00222fe:	c3                   	ret    
c00222ff:	90                   	nop

c0022300 <avxDetect>:
c0022300:	b8 01 00 00 00       	mov    eax,0x1
c0022305:	0f a2                	cpuid  
c0022307:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c002230d:	74 15                	je     c0022324 <avxDetect.noAVX>
c002230f:	b8 01 00 00 00       	mov    eax,0x1
c0022314:	0f a2                	cpuid  
c0022316:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c002231c:	74 06                	je     c0022324 <avxDetect.noAVX>
c002231e:	b8 01 00 00 00       	mov    eax,0x1
c0022323:	c3                   	ret    

c0022324 <avxDetect.noAVX>:
c0022324:	b8 00 00 00 00       	mov    eax,0x0
c0022329:	c3                   	ret    

c002232a <avxSave>:
c002232a:	53                   	push   ebx
c002232b:	52                   	push   edx
c002232c:	31 c0                	xor    eax,eax
c002232e:	48                   	dec    eax
c002232f:	89 c2                	mov    edx,eax
c0022331:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0022335:	0f ae 23             	xsave  [ebx]
c0022338:	5a                   	pop    edx
c0022339:	5b                   	pop    ebx
c002233a:	c3                   	ret    

c002233b <avxLoad>:
c002233b:	53                   	push   ebx
c002233c:	52                   	push   edx
c002233d:	31 c0                	xor    eax,eax
c002233f:	48                   	dec    eax
c0022340:	89 c2                	mov    edx,eax
c0022342:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0022346:	0f ae 2b             	xrstor [ebx]
c0022349:	5a                   	pop    edx
c002234a:	5b                   	pop    ebx
c002234b:	c3                   	ret    

c002234c <avxInit>:
c002234c:	e8 77 00 00 00       	call   c00223c8 <sseInit>
c0022351:	50                   	push   eax
c0022352:	51                   	push   ecx
c0022353:	0f 20 e0             	mov    eax,cr4
c0022356:	0d 00 00 04 00       	or     eax,0x40000
c002235b:	0f 22 e0             	mov    cr4,eax
c002235e:	31 c9                	xor    ecx,ecx
c0022360:	0f 01 d0             	xgetbv 
c0022363:	0d 07 00 00 00       	or     eax,0x7
c0022368:	0f 01 d1             	xsetbv 
c002236b:	59                   	pop    ecx
c002236c:	58                   	pop    eax
c002236d:	c3                   	ret    

c002236e <avxClose>:
c002236e:	c3                   	ret    

c002236f <wouldSheSayYes>:
c002236f:	c3                   	ret    
c0022370:	49                   	dec    ecx
c0022371:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0022375:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0022379:	75 20                	jne    c002239b <retry+0x6>
c002237b:	4e                   	dec    esi
c002237c:	79 61                	jns    c00223df <sseClose+0x7>
c002237e:	68 2e 2e 2e 00       	push   0x2e2e2e
c0022383:	66 90                	xchg   ax,ax
c0022385:	66 90                	xchg   ax,ax
c0022387:	66 90                	xchg   ax,ax
c0022389:	66 90                	xchg   ax,ax
c002238b:	66 90                	xchg   ax,ax
c002238d:	66 90                	xchg   ax,ax
c002238f:	90                   	nop

c0022390 <i386GetRDRAND>:
c0022390:	b9 64 00 00 00       	mov    ecx,0x64

c0022395 <retry>:
c0022395:	0f c7 f0             	rdrand eax
c0022398:	72 05                	jb     c002239f <retry.done>
c002239a:	e2 f9                	loop   c0022395 <retry>

c002239c <retry.fail>:
c002239c:	31 c0                	xor    eax,eax
c002239e:	c3                   	ret    

c002239f <retry.done>:
c002239f:	c3                   	ret    

c00223a0 <absolutelyNoChanceInHell>:
c00223a0:	b8 01 00 00 00       	mov    eax,0x1
c00223a5:	0f a2                	cpuid  
c00223a7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c00223ad:	74 06                	je     c00223b5 <sseDetect.noSSE>
c00223af:	b8 01 00 00 00       	mov    eax,0x1
c00223b4:	c3                   	ret    

c00223b5 <sseDetect.noSSE>:
c00223b5:	31 c0                	xor    eax,eax
c00223b7:	c3                   	ret    

c00223b8 <sseSave>:
c00223b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223bc:	0f ae 00             	fxsave [eax]
c00223bf:	c3                   	ret    

c00223c0 <sseLoad>:
c00223c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223c4:	0f ae 08             	fxrstor [eax]
c00223c7:	c3                   	ret    

c00223c8 <sseInit>:
c00223c8:	e8 42 00 00 00       	call   c002240f <x87Init>
c00223cd:	0f 20 e0             	mov    eax,cr4
c00223d0:	66 0d 00 06          	or     ax,0x600
c00223d4:	0f 22 e0             	mov    cr4,eax
c00223d7:	c3                   	ret    

c00223d8 <sseClose>:
c00223d8:	c3                   	ret    
c00223d9:	66 90                	xchg   ax,ax
c00223db:	66 90                	xchg   ax,ax
c00223dd:	66 90                	xchg   ax,ax
c00223df:	90                   	nop

c00223e0 <value_37F>:
c00223e0:	7f 03                	jg     c00223e5 <value_37A+0x1>

c00223e2 <value_37E>:
c00223e2:	7e 03                	jle    c00223e7 <x87Detect+0x1>

c00223e4 <value_37A>:
c00223e4:	7a 03                	jp     c00223e9 <x87Detect+0x3>

c00223e6 <x87Detect>:
c00223e6:	b8 01 00 00 00       	mov    eax,0x1
c00223eb:	0f a2                	cpuid  
c00223ed:	f7 c2 01 00 00 00    	test   edx,0x1
c00223f3:	74 06                	je     c00223fb <x87Detect.nox87>
c00223f5:	b8 01 00 00 00       	mov    eax,0x1
c00223fa:	c3                   	ret    

c00223fb <x87Detect.nox87>:
c00223fb:	b8 00 00 00 00       	mov    eax,0x0
c0022400:	c3                   	ret    

c0022401 <x87Save>:
c0022401:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022405:	dd 30                	fnsave [eax]
c0022407:	c3                   	ret    

c0022408 <x87Load>:
c0022408:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002240c:	dd 20                	frstor [eax]
c002240e:	c3                   	ret    

c002240f <x87Init>:
c002240f:	0f 20 c0             	mov    eax,cr0
c0022412:	66 25 fb ff          	and    ax,0xfffb
c0022416:	66 0d 22 00          	or     ax,0x22
c002241a:	0f 22 c0             	mov    cr0,eax
c002241d:	db e3                	fninit 
c002241f:	0f 06                	clts   
c0022421:	d9 2d e4 23 02 c0    	fldcw  WORD PTR ds:0xc00223e4
c0022427:	c3                   	ret    

c0022428 <x87Close>:
c0022428:	c3                   	ret    
c0022429:	66 90                	xchg   ax,ax
c002242b:	90                   	nop

c002242c <__do_global_ctors_aux>:
c002242c:	a1 8c 34 02 c0       	mov    eax,ds:0xc002348c
c0022431:	83 f8 ff             	cmp    eax,0xffffffff
c0022434:	74 1a                	je     c0022450 <__do_global_ctors_aux+0x24>
c0022436:	55                   	push   ebp
c0022437:	89 e5                	mov    ebp,esp
c0022439:	53                   	push   ebx
c002243a:	52                   	push   edx
c002243b:	bb 8c 34 02 c0       	mov    ebx,0xc002348c
c0022440:	ff d0                	call   eax
c0022442:	83 eb 04             	sub    ebx,0x4
c0022445:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022447:	83 f8 ff             	cmp    eax,0xffffffff
c002244a:	75 f4                	jne    c0022440 <__do_global_ctors_aux+0x14>
c002244c:	58                   	pop    eax
c002244d:	5b                   	pop    ebx
c002244e:	5d                   	pop    ebp
c002244f:	c3                   	ret    
c0022450:	c3                   	ret    
c0022451:	66 90                	xchg   ax,ax
c0022453:	90                   	nop

c0022454 <__divdi3>:
c0022454:	55                   	push   ebp
c0022455:	57                   	push   edi
c0022456:	56                   	push   esi
c0022457:	53                   	push   ebx
c0022458:	83 ec 1c             	sub    esp,0x1c
c002245b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002245f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022463:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0022466:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002246a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002246e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022472:	85 db                	test   ebx,ebx
c0022474:	0f 88 8e 00 00 00    	js     c0022508 <__divdi3+0xb4>
c002247a:	89 dd                	mov    ebp,ebx
c002247c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0022484:	89 d3                	mov    ebx,edx
c0022486:	85 d2                	test   edx,edx
c0022488:	79 0d                	jns    c0022497 <__divdi3+0x43>
c002248a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c002248e:	f7 d8                	neg    eax
c0022490:	83 d2 00             	adc    edx,0x0
c0022493:	f7 da                	neg    edx
c0022495:	89 d3                	mov    ebx,edx
c0022497:	89 c7                	mov    edi,eax
c0022499:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002249c:	85 db                	test   ebx,ebx
c002249e:	75 48                	jne    c00224e8 <__divdi3+0x94>
c00224a0:	39 ef                	cmp    edi,ebp
c00224a2:	76 24                	jbe    c00224c8 <__divdi3+0x74>
c00224a4:	89 ea                	mov    edx,ebp
c00224a6:	f7 f7                	div    edi
c00224a8:	89 c1                	mov    ecx,eax
c00224aa:	31 f6                	xor    esi,esi
c00224ac:	89 c8                	mov    eax,ecx
c00224ae:	89 f2                	mov    edx,esi
c00224b0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00224b4:	85 c9                	test   ecx,ecx
c00224b6:	74 07                	je     c00224bf <__divdi3+0x6b>
c00224b8:	f7 d8                	neg    eax
c00224ba:	83 d2 00             	adc    edx,0x0
c00224bd:	f7 da                	neg    edx
c00224bf:	83 c4 1c             	add    esp,0x1c
c00224c2:	5b                   	pop    ebx
c00224c3:	5e                   	pop    esi
c00224c4:	5f                   	pop    edi
c00224c5:	5d                   	pop    ebp
c00224c6:	c3                   	ret    
c00224c7:	90                   	nop
c00224c8:	85 ff                	test   edi,edi
c00224ca:	75 0b                	jne    c00224d7 <__divdi3+0x83>
c00224cc:	b8 01 00 00 00       	mov    eax,0x1
c00224d1:	31 d2                	xor    edx,edx
c00224d3:	f7 f3                	div    ebx
c00224d5:	89 c7                	mov    edi,eax
c00224d7:	31 d2                	xor    edx,edx
c00224d9:	89 e8                	mov    eax,ebp
c00224db:	f7 f7                	div    edi
c00224dd:	89 c6                	mov    esi,eax
c00224df:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00224e2:	f7 f7                	div    edi
c00224e4:	89 c1                	mov    ecx,eax
c00224e6:	eb c4                	jmp    c00224ac <__divdi3+0x58>
c00224e8:	39 eb                	cmp    ebx,ebp
c00224ea:	77 3c                	ja     c0022528 <__divdi3+0xd4>
c00224ec:	0f bd f3             	bsr    esi,ebx
c00224ef:	83 f6 1f             	xor    esi,0x1f
c00224f2:	75 40                	jne    c0022534 <__divdi3+0xe0>
c00224f4:	39 eb                	cmp    ebx,ebp
c00224f6:	72 09                	jb     c0022501 <__divdi3+0xad>
c00224f8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c00224fb:	0f 87 97 00 00 00    	ja     c0022598 <__divdi3+0x144>
c0022501:	b9 01 00 00 00       	mov    ecx,0x1
c0022506:	eb a4                	jmp    c00224ac <__divdi3+0x58>
c0022508:	f7 d9                	neg    ecx
c002250a:	83 d3 00             	adc    ebx,0x0
c002250d:	f7 db                	neg    ebx
c002250f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0022512:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0022516:	89 dd                	mov    ebp,ebx
c0022518:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0022520:	e9 5f ff ff ff       	jmp    c0022484 <__divdi3+0x30>
c0022525:	8d 76 00             	lea    esi,[esi+0x0]
c0022528:	31 f6                	xor    esi,esi
c002252a:	31 c9                	xor    ecx,ecx
c002252c:	e9 7b ff ff ff       	jmp    c00224ac <__divdi3+0x58>
c0022531:	8d 76 00             	lea    esi,[esi+0x0]
c0022534:	b8 20 00 00 00       	mov    eax,0x20
c0022539:	29 f0                	sub    eax,esi
c002253b:	89 f1                	mov    ecx,esi
c002253d:	d3 e3                	shl    ebx,cl
c002253f:	89 fa                	mov    edx,edi
c0022541:	88 c1                	mov    cl,al
c0022543:	d3 ea                	shr    edx,cl
c0022545:	09 da                	or     edx,ebx
c0022547:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002254b:	89 f1                	mov    ecx,esi
c002254d:	d3 e7                	shl    edi,cl
c002254f:	89 eb                	mov    ebx,ebp
c0022551:	88 c1                	mov    cl,al
c0022553:	d3 eb                	shr    ebx,cl
c0022555:	89 f1                	mov    ecx,esi
c0022557:	d3 e5                	shl    ebp,cl
c0022559:	8b 14 24             	mov    edx,DWORD PTR [esp]
c002255c:	88 c1                	mov    cl,al
c002255e:	d3 ea                	shr    edx,cl
c0022560:	09 d5                	or     ebp,edx
c0022562:	89 e8                	mov    eax,ebp
c0022564:	89 da                	mov    edx,ebx
c0022566:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002256a:	89 d3                	mov    ebx,edx
c002256c:	89 c5                	mov    ebp,eax
c002256e:	f7 e7                	mul    edi
c0022570:	39 d3                	cmp    ebx,edx
c0022572:	72 18                	jb     c002258c <__divdi3+0x138>
c0022574:	74 0a                	je     c0022580 <__divdi3+0x12c>
c0022576:	89 e9                	mov    ecx,ebp
c0022578:	31 f6                	xor    esi,esi
c002257a:	e9 2d ff ff ff       	jmp    c00224ac <__divdi3+0x58>
c002257f:	90                   	nop
c0022580:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0022583:	89 f1                	mov    ecx,esi
c0022585:	d3 e7                	shl    edi,cl
c0022587:	39 c7                	cmp    edi,eax
c0022589:	73 eb                	jae    c0022576 <__divdi3+0x122>
c002258b:	90                   	nop
c002258c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c002258f:	31 f6                	xor    esi,esi
c0022591:	e9 16 ff ff ff       	jmp    c00224ac <__divdi3+0x58>
c0022596:	66 90                	xchg   ax,ax
c0022598:	31 c9                	xor    ecx,ecx
c002259a:	e9 0d ff ff ff       	jmp    c00224ac <__divdi3+0x58>
c002259f:	90                   	nop

c00225a0 <__moddi3>:
c00225a0:	55                   	push   ebp
c00225a1:	57                   	push   edi
c00225a2:	56                   	push   esi
c00225a3:	53                   	push   ebx
c00225a4:	83 ec 2c             	sub    esp,0x2c
c00225a7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00225ab:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00225af:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00225b3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00225b7:	85 db                	test   ebx,ebx
c00225b9:	0f 88 85 00 00 00    	js     c0022644 <__moddi3+0xa4>
c00225bf:	89 de                	mov    esi,ebx
c00225c1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00225c9:	89 d7                	mov    edi,edx
c00225cb:	85 d2                	test   edx,edx
c00225cd:	79 09                	jns    c00225d8 <__moddi3+0x38>
c00225cf:	f7 d8                	neg    eax
c00225d1:	83 d2 00             	adc    edx,0x0
c00225d4:	f7 da                	neg    edx
c00225d6:	89 d7                	mov    edi,edx
c00225d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00225dc:	89 cd                	mov    ebp,ecx
c00225de:	85 ff                	test   edi,edi
c00225e0:	75 52                	jne    c0022634 <__moddi3+0x94>
c00225e2:	89 c3                	mov    ebx,eax
c00225e4:	39 f0                	cmp    eax,esi
c00225e6:	76 24                	jbe    c002260c <__moddi3+0x6c>
c00225e8:	89 c8                	mov    eax,ecx
c00225ea:	89 f2                	mov    edx,esi
c00225ec:	f7 f3                	div    ebx
c00225ee:	89 d6                	mov    esi,edx
c00225f0:	89 f0                	mov    eax,esi
c00225f2:	31 d2                	xor    edx,edx
c00225f4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00225f8:	85 c9                	test   ecx,ecx
c00225fa:	74 07                	je     c0022603 <__moddi3+0x63>
c00225fc:	f7 d8                	neg    eax
c00225fe:	83 d2 00             	adc    edx,0x0
c0022601:	f7 da                	neg    edx
c0022603:	83 c4 2c             	add    esp,0x2c
c0022606:	5b                   	pop    ebx
c0022607:	5e                   	pop    esi
c0022608:	5f                   	pop    edi
c0022609:	5d                   	pop    ebp
c002260a:	c3                   	ret    
c002260b:	90                   	nop
c002260c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0022610:	85 db                	test   ebx,ebx
c0022612:	75 0d                	jne    c0022621 <__moddi3+0x81>
c0022614:	b8 01 00 00 00       	mov    eax,0x1
c0022619:	31 d2                	xor    edx,edx
c002261b:	f7 f7                	div    edi
c002261d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022621:	89 f0                	mov    eax,esi
c0022623:	31 d2                	xor    edx,edx
c0022625:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022629:	f7 f7                	div    edi
c002262b:	89 e8                	mov    eax,ebp
c002262d:	f7 f7                	div    edi
c002262f:	89 d6                	mov    esi,edx
c0022631:	eb bd                	jmp    c00225f0 <__moddi3+0x50>
c0022633:	90                   	nop
c0022634:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0022638:	39 f7                	cmp    edi,esi
c002263a:	76 20                	jbe    c002265c <__moddi3+0xbc>
c002263c:	89 c8                	mov    eax,ecx
c002263e:	89 f2                	mov    edx,esi
c0022640:	eb b2                	jmp    c00225f4 <__moddi3+0x54>
c0022642:	66 90                	xchg   ax,ax
c0022644:	f7 d9                	neg    ecx
c0022646:	83 d3 00             	adc    ebx,0x0
c0022649:	f7 db                	neg    ebx
c002264b:	89 de                	mov    esi,ebx
c002264d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0022655:	e9 6f ff ff ff       	jmp    c00225c9 <__moddi3+0x29>
c002265a:	66 90                	xchg   ax,ax
c002265c:	0f bd c7             	bsr    eax,edi
c002265f:	83 f0 1f             	xor    eax,0x1f
c0022662:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022666:	75 24                	jne    c002268c <__moddi3+0xec>
c0022668:	39 f7                	cmp    edi,esi
c002266a:	72 06                	jb     c0022672 <__moddi3+0xd2>
c002266c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0022670:	77 0c                	ja     c002267e <__moddi3+0xde>
c0022672:	89 e9                	mov    ecx,ebp
c0022674:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0022678:	19 fe                	sbb    esi,edi
c002267a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002267e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022682:	89 f2                	mov    edx,esi
c0022684:	e9 6b ff ff ff       	jmp    c00225f4 <__moddi3+0x54>
c0022689:	8d 76 00             	lea    esi,[esi+0x0]
c002268c:	b8 20 00 00 00       	mov    eax,0x20
c0022691:	89 c2                	mov    edx,eax
c0022693:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0022697:	29 da                	sub    edx,ebx
c0022699:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002269d:	88 d9                	mov    cl,bl
c002269f:	d3 e7                	shl    edi,cl
c00226a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00226a5:	88 d1                	mov    cl,dl
c00226a7:	d3 e8                	shr    eax,cl
c00226a9:	09 c7                	or     edi,eax
c00226ab:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00226af:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00226b3:	89 d8                	mov    eax,ebx
c00226b5:	88 d9                	mov    cl,bl
c00226b7:	d3 e7                	shl    edi,cl
c00226b9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00226bd:	89 f3                	mov    ebx,esi
c00226bf:	88 d1                	mov    cl,dl
c00226c1:	d3 eb                	shr    ebx,cl
c00226c3:	89 c7                	mov    edi,eax
c00226c5:	88 c1                	mov    cl,al
c00226c7:	d3 e6                	shl    esi,cl
c00226c9:	89 e8                	mov    eax,ebp
c00226cb:	88 d1                	mov    cl,dl
c00226cd:	d3 e8                	shr    eax,cl
c00226cf:	09 f0                	or     eax,esi
c00226d1:	89 f9                	mov    ecx,edi
c00226d3:	d3 e5                	shl    ebp,cl
c00226d5:	89 da                	mov    edx,ebx
c00226d7:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c00226db:	89 d3                	mov    ebx,edx
c00226dd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00226e1:	89 c6                	mov    esi,eax
c00226e3:	89 d1                	mov    ecx,edx
c00226e5:	39 d3                	cmp    ebx,edx
c00226e7:	72 27                	jb     c0022710 <__moddi3+0x170>
c00226e9:	74 21                	je     c002270c <__moddi3+0x16c>
c00226eb:	29 f5                	sub    ebp,esi
c00226ed:	19 cb                	sbb    ebx,ecx
c00226ef:	89 de                	mov    esi,ebx
c00226f1:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c00226f5:	d3 e6                	shl    esi,cl
c00226f7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00226fb:	89 f9                	mov    ecx,edi
c00226fd:	d3 ed                	shr    ebp,cl
c00226ff:	09 ee                	or     esi,ebp
c0022701:	89 f0                	mov    eax,esi
c0022703:	d3 eb                	shr    ebx,cl
c0022705:	89 da                	mov    edx,ebx
c0022707:	e9 e8 fe ff ff       	jmp    c00225f4 <__moddi3+0x54>
c002270c:	39 c5                	cmp    ebp,eax
c002270e:	73 db                	jae    c00226eb <__moddi3+0x14b>
c0022710:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0022714:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0022718:	89 d1                	mov    ecx,edx
c002271a:	89 c6                	mov    esi,eax
c002271c:	eb cd                	jmp    c00226eb <__moddi3+0x14b>
c002271e:	66 90                	xchg   ax,ax

c0022720 <__udivdi3>:
c0022720:	55                   	push   ebp
c0022721:	57                   	push   edi
c0022722:	56                   	push   esi
c0022723:	53                   	push   ebx
c0022724:	83 ec 1c             	sub    esp,0x1c
c0022727:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002272b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002272f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0022733:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022737:	85 d2                	test   edx,edx
c0022739:	75 41                	jne    c002277c <__udivdi3+0x5c>
c002273b:	39 f7                	cmp    edi,esi
c002273d:	76 15                	jbe    c0022754 <__udivdi3+0x34>
c002273f:	89 e8                	mov    eax,ebp
c0022741:	89 f2                	mov    edx,esi
c0022743:	f7 f7                	div    edi
c0022745:	31 db                	xor    ebx,ebx
c0022747:	89 da                	mov    edx,ebx
c0022749:	83 c4 1c             	add    esp,0x1c
c002274c:	5b                   	pop    ebx
c002274d:	5e                   	pop    esi
c002274e:	5f                   	pop    edi
c002274f:	5d                   	pop    ebp
c0022750:	c3                   	ret    
c0022751:	8d 76 00             	lea    esi,[esi+0x0]
c0022754:	89 f9                	mov    ecx,edi
c0022756:	85 ff                	test   edi,edi
c0022758:	75 0b                	jne    c0022765 <__udivdi3+0x45>
c002275a:	b8 01 00 00 00       	mov    eax,0x1
c002275f:	31 d2                	xor    edx,edx
c0022761:	f7 f7                	div    edi
c0022763:	89 c1                	mov    ecx,eax
c0022765:	31 d2                	xor    edx,edx
c0022767:	89 f0                	mov    eax,esi
c0022769:	f7 f1                	div    ecx
c002276b:	89 c3                	mov    ebx,eax
c002276d:	89 e8                	mov    eax,ebp
c002276f:	f7 f1                	div    ecx
c0022771:	89 da                	mov    edx,ebx
c0022773:	83 c4 1c             	add    esp,0x1c
c0022776:	5b                   	pop    ebx
c0022777:	5e                   	pop    esi
c0022778:	5f                   	pop    edi
c0022779:	5d                   	pop    ebp
c002277a:	c3                   	ret    
c002277b:	90                   	nop
c002277c:	39 f2                	cmp    edx,esi
c002277e:	77 1c                	ja     c002279c <__udivdi3+0x7c>
c0022780:	0f bd da             	bsr    ebx,edx
c0022783:	83 f3 1f             	xor    ebx,0x1f
c0022786:	75 24                	jne    c00227ac <__udivdi3+0x8c>
c0022788:	39 f2                	cmp    edx,esi
c002278a:	72 08                	jb     c0022794 <__udivdi3+0x74>
c002278c:	39 ef                	cmp    edi,ebp
c002278e:	0f 87 84 00 00 00    	ja     c0022818 <__udivdi3+0xf8>
c0022794:	b8 01 00 00 00       	mov    eax,0x1
c0022799:	eb ac                	jmp    c0022747 <__udivdi3+0x27>
c002279b:	90                   	nop
c002279c:	31 db                	xor    ebx,ebx
c002279e:	31 c0                	xor    eax,eax
c00227a0:	89 da                	mov    edx,ebx
c00227a2:	83 c4 1c             	add    esp,0x1c
c00227a5:	5b                   	pop    ebx
c00227a6:	5e                   	pop    esi
c00227a7:	5f                   	pop    edi
c00227a8:	5d                   	pop    ebp
c00227a9:	c3                   	ret    
c00227aa:	66 90                	xchg   ax,ax
c00227ac:	b8 20 00 00 00       	mov    eax,0x20
c00227b1:	29 d8                	sub    eax,ebx
c00227b3:	88 d9                	mov    cl,bl
c00227b5:	d3 e2                	shl    edx,cl
c00227b7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00227bb:	89 fa                	mov    edx,edi
c00227bd:	88 c1                	mov    cl,al
c00227bf:	d3 ea                	shr    edx,cl
c00227c1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00227c5:	09 d1                	or     ecx,edx
c00227c7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00227cb:	88 d9                	mov    cl,bl
c00227cd:	d3 e7                	shl    edi,cl
c00227cf:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00227d3:	89 f7                	mov    edi,esi
c00227d5:	88 c1                	mov    cl,al
c00227d7:	d3 ef                	shr    edi,cl
c00227d9:	88 d9                	mov    cl,bl
c00227db:	d3 e6                	shl    esi,cl
c00227dd:	89 ea                	mov    edx,ebp
c00227df:	88 c1                	mov    cl,al
c00227e1:	d3 ea                	shr    edx,cl
c00227e3:	09 d6                	or     esi,edx
c00227e5:	89 f0                	mov    eax,esi
c00227e7:	89 fa                	mov    edx,edi
c00227e9:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00227ed:	89 d7                	mov    edi,edx
c00227ef:	89 c6                	mov    esi,eax
c00227f1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00227f5:	39 d7                	cmp    edi,edx
c00227f7:	72 13                	jb     c002280c <__udivdi3+0xec>
c00227f9:	74 09                	je     c0022804 <__udivdi3+0xe4>
c00227fb:	89 f0                	mov    eax,esi
c00227fd:	31 db                	xor    ebx,ebx
c00227ff:	e9 43 ff ff ff       	jmp    c0022747 <__udivdi3+0x27>
c0022804:	88 d9                	mov    cl,bl
c0022806:	d3 e5                	shl    ebp,cl
c0022808:	39 c5                	cmp    ebp,eax
c002280a:	73 ef                	jae    c00227fb <__udivdi3+0xdb>
c002280c:	8d 46 ff             	lea    eax,[esi-0x1]
c002280f:	31 db                	xor    ebx,ebx
c0022811:	e9 31 ff ff ff       	jmp    c0022747 <__udivdi3+0x27>
c0022816:	66 90                	xchg   ax,ax
c0022818:	31 c0                	xor    eax,eax
c002281a:	e9 28 ff ff ff       	jmp    c0022747 <__udivdi3+0x27>
c002281f:	90                   	nop

c0022820 <__umoddi3>:
c0022820:	55                   	push   ebp
c0022821:	57                   	push   edi
c0022822:	56                   	push   esi
c0022823:	53                   	push   ebx
c0022824:	83 ec 1c             	sub    esp,0x1c
c0022827:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002282b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002282f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0022833:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022837:	89 da                	mov    edx,ebx
c0022839:	85 c0                	test   eax,eax
c002283b:	75 37                	jne    c0022874 <__umoddi3+0x54>
c002283d:	39 df                	cmp    edi,ebx
c002283f:	76 13                	jbe    c0022854 <__umoddi3+0x34>
c0022841:	89 f0                	mov    eax,esi
c0022843:	f7 f7                	div    edi
c0022845:	89 d0                	mov    eax,edx
c0022847:	31 d2                	xor    edx,edx
c0022849:	83 c4 1c             	add    esp,0x1c
c002284c:	5b                   	pop    ebx
c002284d:	5e                   	pop    esi
c002284e:	5f                   	pop    edi
c002284f:	5d                   	pop    ebp
c0022850:	c3                   	ret    
c0022851:	8d 76 00             	lea    esi,[esi+0x0]
c0022854:	89 fd                	mov    ebp,edi
c0022856:	85 ff                	test   edi,edi
c0022858:	75 0b                	jne    c0022865 <__umoddi3+0x45>
c002285a:	b8 01 00 00 00       	mov    eax,0x1
c002285f:	31 d2                	xor    edx,edx
c0022861:	f7 f7                	div    edi
c0022863:	89 c5                	mov    ebp,eax
c0022865:	89 d8                	mov    eax,ebx
c0022867:	31 d2                	xor    edx,edx
c0022869:	f7 f5                	div    ebp
c002286b:	89 f0                	mov    eax,esi
c002286d:	f7 f5                	div    ebp
c002286f:	89 d0                	mov    eax,edx
c0022871:	eb d4                	jmp    c0022847 <__umoddi3+0x27>
c0022873:	90                   	nop
c0022874:	89 f1                	mov    ecx,esi
c0022876:	39 d8                	cmp    eax,ebx
c0022878:	76 0a                	jbe    c0022884 <__umoddi3+0x64>
c002287a:	89 f0                	mov    eax,esi
c002287c:	83 c4 1c             	add    esp,0x1c
c002287f:	5b                   	pop    ebx
c0022880:	5e                   	pop    esi
c0022881:	5f                   	pop    edi
c0022882:	5d                   	pop    ebp
c0022883:	c3                   	ret    
c0022884:	0f bd e8             	bsr    ebp,eax
c0022887:	83 f5 1f             	xor    ebp,0x1f
c002288a:	75 1c                	jne    c00228a8 <__umoddi3+0x88>
c002288c:	39 d8                	cmp    eax,ebx
c002288e:	72 04                	jb     c0022894 <__umoddi3+0x74>
c0022890:	39 f7                	cmp    edi,esi
c0022892:	77 08                	ja     c002289c <__umoddi3+0x7c>
c0022894:	89 da                	mov    edx,ebx
c0022896:	29 fe                	sub    esi,edi
c0022898:	19 c2                	sbb    edx,eax
c002289a:	89 f1                	mov    ecx,esi
c002289c:	89 c8                	mov    eax,ecx
c002289e:	83 c4 1c             	add    esp,0x1c
c00228a1:	5b                   	pop    ebx
c00228a2:	5e                   	pop    esi
c00228a3:	5f                   	pop    edi
c00228a4:	5d                   	pop    ebp
c00228a5:	c3                   	ret    
c00228a6:	66 90                	xchg   ax,ax
c00228a8:	ba 20 00 00 00       	mov    edx,0x20
c00228ad:	29 ea                	sub    edx,ebp
c00228af:	89 e9                	mov    ecx,ebp
c00228b1:	d3 e0                	shl    eax,cl
c00228b3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00228b7:	89 f8                	mov    eax,edi
c00228b9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00228bd:	88 d1                	mov    cl,dl
c00228bf:	d3 e8                	shr    eax,cl
c00228c1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00228c5:	09 c1                	or     ecx,eax
c00228c7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00228cb:	89 e9                	mov    ecx,ebp
c00228cd:	d3 e7                	shl    edi,cl
c00228cf:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00228d3:	89 d8                	mov    eax,ebx
c00228d5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00228d9:	88 d1                	mov    cl,dl
c00228db:	d3 e8                	shr    eax,cl
c00228dd:	89 c7                	mov    edi,eax
c00228df:	89 e9                	mov    ecx,ebp
c00228e1:	d3 e3                	shl    ebx,cl
c00228e3:	89 f0                	mov    eax,esi
c00228e5:	88 d1                	mov    cl,dl
c00228e7:	d3 e8                	shr    eax,cl
c00228e9:	09 d8                	or     eax,ebx
c00228eb:	89 e9                	mov    ecx,ebp
c00228ed:	d3 e6                	shl    esi,cl
c00228ef:	89 f3                	mov    ebx,esi
c00228f1:	89 fa                	mov    edx,edi
c00228f3:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00228f7:	89 d1                	mov    ecx,edx
c00228f9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00228fd:	89 c6                	mov    esi,eax
c00228ff:	89 d7                	mov    edi,edx
c0022901:	39 d1                	cmp    ecx,edx
c0022903:	72 27                	jb     c002292c <__umoddi3+0x10c>
c0022905:	74 21                	je     c0022928 <__umoddi3+0x108>
c0022907:	89 ca                	mov    edx,ecx
c0022909:	29 f3                	sub    ebx,esi
c002290b:	19 fa                	sbb    edx,edi
c002290d:	89 d0                	mov    eax,edx
c002290f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0022913:	d3 e0                	shl    eax,cl
c0022915:	89 e9                	mov    ecx,ebp
c0022917:	d3 eb                	shr    ebx,cl
c0022919:	09 d8                	or     eax,ebx
c002291b:	d3 ea                	shr    edx,cl
c002291d:	83 c4 1c             	add    esp,0x1c
c0022920:	5b                   	pop    ebx
c0022921:	5e                   	pop    esi
c0022922:	5f                   	pop    edi
c0022923:	5d                   	pop    ebp
c0022924:	c3                   	ret    
c0022925:	8d 76 00             	lea    esi,[esi+0x0]
c0022928:	39 c3                	cmp    ebx,eax
c002292a:	73 db                	jae    c0022907 <__umoddi3+0xe7>
c002292c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0022930:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0022934:	89 d7                	mov    edi,edx
c0022936:	89 c6                	mov    esi,eax
c0022938:	eb cd                	jmp    c0022907 <__umoddi3+0xe7>

Disassembly of section .init:

c002293a <_init>:
c002293a:	55                   	push   ebp
c002293b:	89 e5                	mov    ebp,esp
c002293d:	e8 d6 d7 fd ff       	call   c0000118 <frame_dummy>
c0022942:	e8 e5 fa ff ff       	call   c002242c <__do_global_ctors_aux>
c0022947:	5d                   	pop    ebp
c0022948:	c3                   	ret    

Disassembly of section .fini:

c0022949 <_fini>:
c0022949:	55                   	push   ebp
c002294a:	89 e5                	mov    ebp,esp
c002294c:	e8 57 d7 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c0022951:	5d                   	pop    ebp
c0022952:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0022954 <Computer::~Computer()>:
c0022954:	83 ec 0c             	sub    esp,0xc
c0022957:	ba 98 3e 02 c0       	mov    edx,0xc0023e98
c002295c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022960:	89 10                	mov    DWORD PTR [eax],edx
c0022962:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022966:	83 ec 0c             	sub    esp,0xc
c0022969:	50                   	push   eax
c002296a:	e8 d5 b9 fe ff       	call   c000e344 <Device::~Device()>
c002296f:	83 c4 10             	add    esp,0x10
c0022972:	90                   	nop
c0022973:	83 c4 0c             	add    esp,0xc
c0022976:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0022978 <Computer::~Computer()>:
c0022978:	83 ec 0c             	sub    esp,0xc
c002297b:	83 ec 0c             	sub    esp,0xc
c002297e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022982:	e8 cd ff ff ff       	call   c0022954 <Computer::~Computer()>
c0022987:	83 c4 10             	add    esp,0x10
c002298a:	83 ec 08             	sub    esp,0x8
c002298d:	68 ec 01 00 00       	push   0x1ec
c0022992:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022996:	e8 49 a5 fe ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c002299b:	83 c4 10             	add    esp,0x10
c002299e:	83 c4 0c             	add    esp,0xc
c00229a1:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c00229a2 <idleCommon()>:
c00229a2:	83 ec 0c             	sub    esp,0xc
c00229a5:	fa                   	cli    
c00229a6:	ff 05 28 94 02 c0    	inc    DWORD PTR ds:0xc0029428
c00229ac:	e8 8f 4c ff ff       	call   c0017640 <schedule()>
c00229b1:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c00229b6:	48                   	dec    eax
c00229b7:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c00229bc:	75 01                	jne    c00229bf <idleCommon()+0x1d>
c00229be:	fb                   	sti    
c00229bf:	83 c4 0c             	add    esp,0xc
c00229c2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c00229c4 <LinkedList<UnixFile>::~LinkedList()>:
c00229c4:	90                   	nop
c00229c5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c00229c6 <LinkedList<UnixFile>::LinkedList()>:
c00229c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00229ca:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00229d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00229d4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00229db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00229df:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00229e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00229ea:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00229f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00229f4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00229fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00229ff:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022a06:	90                   	nop
c0022a07:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0022a08 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0022a08:	83 ec 0c             	sub    esp,0xc
c0022a0b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0022a10:	75 10                	jne    c0022a22 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0022a12:	83 ec 0c             	sub    esp,0xc
c0022a15:	68 68 42 02 c0       	push   0xc0024268
c0022a1a:	e8 bc 15 ff ff       	call   c0013fdb <Krnl::panic(char const*)>
c0022a1f:	83 c4 10             	add    esp,0x10
c0022a22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a26:	8b 00                	mov    eax,DWORD PTR [eax]
c0022a28:	85 c0                	test   eax,eax
c0022a2a:	74 34                	je     c0022a60 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0022a2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a30:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022a33:	85 c0                	test   eax,eax
c0022a35:	74 29                	je     c0022a60 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0022a37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a3b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022a3e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022a42:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022a45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a49:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022a4d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022a50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a54:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022a57:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022a5e:	eb 65                	jmp    c0022ac5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0022a60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a64:	8b 00                	mov    eax,DWORD PTR [eax]
c0022a66:	85 c0                	test   eax,eax
c0022a68:	75 4b                	jne    c0022ab5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0022a6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a6e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022a71:	85 c0                	test   eax,eax
c0022a73:	75 40                	jne    c0022ab5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0022a75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a79:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022a7d:	89 10                	mov    DWORD PTR [eax],edx
c0022a7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a83:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022a87:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022a8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022a91:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022a98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a9c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022a9f:	85 c0                	test   eax,eax
c0022aa1:	74 22                	je     c0022ac5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0022aa3:	83 ec 0c             	sub    esp,0xc
c0022aa6:	68 8a 42 02 c0       	push   0xc002428a
c0022aab:	e8 2b 15 ff ff       	call   c0013fdb <Krnl::panic(char const*)>
c0022ab0:	83 c4 10             	add    esp,0x10
c0022ab3:	eb 10                	jmp    c0022ac5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0022ab5:	83 ec 0c             	sub    esp,0xc
c0022ab8:	68 94 42 02 c0       	push   0xc0024294
c0022abd:	e8 19 15 ff ff       	call   c0013fdb <Krnl::panic(char const*)>
c0022ac2:	83 c4 10             	add    esp,0x10
c0022ac5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ac9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022acc:	8d 50 01             	lea    edx,[eax+0x1]
c0022acf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ad3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022ad6:	90                   	nop
c0022ad7:	83 c4 0c             	add    esp,0xc
c0022ada:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0022adc <LinkedList<UnixFile>::getFirstElement()>:
c0022adc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022ae0:	8b 00                	mov    eax,DWORD PTR [eax]
c0022ae2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0022ae4 <LinkedList<UnixFile>::removeFirst()>:
c0022ae4:	83 ec 0c             	sub    esp,0xc
c0022ae7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022aeb:	8b 00                	mov    eax,DWORD PTR [eax]
c0022aed:	85 c0                	test   eax,eax
c0022aef:	75 12                	jne    c0022b03 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0022af1:	83 ec 0c             	sub    esp,0xc
c0022af4:	68 a0 42 02 c0       	push   0xc00242a0
c0022af9:	e8 dd 14 ff ff       	call   c0013fdb <Krnl::panic(char const*)>
c0022afe:	83 c4 10             	add    esp,0x10
c0022b01:	eb 7e                	jmp    c0022b81 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0022b03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b07:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022b0a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022b0d:	85 c0                	test   eax,eax
c0022b0f:	74 10                	je     c0022b21 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0022b11:	83 ec 0c             	sub    esp,0xc
c0022b14:	68 eb 42 02 c0       	push   0xc00242eb
c0022b19:	e8 bd 14 ff ff       	call   c0013fdb <Krnl::panic(char const*)>
c0022b1e:	83 c4 10             	add    esp,0x10
c0022b21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b25:	8b 00                	mov    eax,DWORD PTR [eax]
c0022b27:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022b2a:	85 c0                	test   eax,eax
c0022b2c:	75 33                	jne    c0022b61 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0022b2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b32:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022b38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b3c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022b43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b47:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022b4a:	83 f8 01             	cmp    eax,0x1
c0022b4d:	74 21                	je     c0022b70 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0022b4f:	83 ec 0c             	sub    esp,0xc
c0022b52:	68 c4 42 02 c0       	push   0xc00242c4
c0022b57:	e8 7f 14 ff ff       	call   c0013fdb <Krnl::panic(char const*)>
c0022b5c:	83 c4 10             	add    esp,0x10
c0022b5f:	eb 0f                	jmp    c0022b70 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0022b61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b65:	8b 00                	mov    eax,DWORD PTR [eax]
c0022b67:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0022b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b6e:	89 10                	mov    DWORD PTR [eax],edx
c0022b70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b74:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022b77:	8d 50 ff             	lea    edx,[eax-0x1]
c0022b7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b7e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022b81:	83 c4 0c             	add    esp,0xc
c0022b84:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c0022b86 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c0022b86:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022b8a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022b8d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0022b8e <DriverlessDevice::~DriverlessDevice()>:
c0022b8e:	ba dc 4a 02 c0       	mov    edx,0xc0024adc
c0022b93:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022b97:	89 10                	mov    DWORD PTR [eax],edx
c0022b99:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022b9d:	50                   	push   eax
c0022b9e:	e8 a1 b7 fe ff       	call   c000e344 <Device::~Device()>
c0022ba3:	83 c4 04             	add    esp,0x4
c0022ba6:	90                   	nop
c0022ba7:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0022ba8 <DriverlessDevice::~DriverlessDevice()>:
c0022ba8:	83 ec 0c             	sub    esp,0xc
c0022bab:	83 ec 0c             	sub    esp,0xc
c0022bae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022bb2:	e8 d7 ff ff ff       	call   c0022b8e <DriverlessDevice::~DriverlessDevice()>
c0022bb7:	83 c4 10             	add    esp,0x10
c0022bba:	83 ec 08             	sub    esp,0x8
c0022bbd:	68 58 01 00 00       	push   0x158
c0022bc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022bc6:	e8 19 a3 fe ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c0022bcb:	83 c4 10             	add    esp,0x10
c0022bce:	83 c4 0c             	add    esp,0xc
c0022bd1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0022bd2 <LinkedList<Device>::addElement(Device*)>:
c0022bd2:	83 ec 0c             	sub    esp,0xc
c0022bd5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0022bda:	75 10                	jne    c0022bec <LinkedList<Device>::addElement(Device*)+0x1a>
c0022bdc:	83 ec 0c             	sub    esp,0xc
c0022bdf:	68 68 42 02 c0       	push   0xc0024268
c0022be4:	e8 f2 13 ff ff       	call   c0013fdb <Krnl::panic(char const*)>
c0022be9:	83 c4 10             	add    esp,0x10
c0022bec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022bf0:	8b 00                	mov    eax,DWORD PTR [eax]
c0022bf2:	85 c0                	test   eax,eax
c0022bf4:	74 3a                	je     c0022c30 <LinkedList<Device>::addElement(Device*)+0x5e>
c0022bf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022bfa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022bfd:	85 c0                	test   eax,eax
c0022bff:	74 2f                	je     c0022c30 <LinkedList<Device>::addElement(Device*)+0x5e>
c0022c01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c05:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022c08:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022c0c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0022c12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c16:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022c1a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022c1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c21:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022c24:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0022c2e:	eb 68                	jmp    c0022c98 <LinkedList<Device>::addElement(Device*)+0xc6>
c0022c30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c34:	8b 00                	mov    eax,DWORD PTR [eax]
c0022c36:	85 c0                	test   eax,eax
c0022c38:	75 4e                	jne    c0022c88 <LinkedList<Device>::addElement(Device*)+0xb6>
c0022c3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022c41:	85 c0                	test   eax,eax
c0022c43:	75 43                	jne    c0022c88 <LinkedList<Device>::addElement(Device*)+0xb6>
c0022c45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c49:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022c4d:	89 10                	mov    DWORD PTR [eax],edx
c0022c4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c53:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022c57:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022c5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c5e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022c61:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0022c6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c6f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022c72:	85 c0                	test   eax,eax
c0022c74:	74 22                	je     c0022c98 <LinkedList<Device>::addElement(Device*)+0xc6>
c0022c76:	83 ec 0c             	sub    esp,0xc
c0022c79:	68 8a 42 02 c0       	push   0xc002428a
c0022c7e:	e8 58 13 ff ff       	call   c0013fdb <Krnl::panic(char const*)>
c0022c83:	83 c4 10             	add    esp,0x10
c0022c86:	eb 10                	jmp    c0022c98 <LinkedList<Device>::addElement(Device*)+0xc6>
c0022c88:	83 ec 0c             	sub    esp,0xc
c0022c8b:	68 94 42 02 c0       	push   0xc0024294
c0022c90:	e8 46 13 ff ff       	call   c0013fdb <Krnl::panic(char const*)>
c0022c95:	83 c4 10             	add    esp,0x10
c0022c98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c9c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022c9f:	8d 50 01             	lea    edx,[eax+0x1]
c0022ca2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ca6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022ca9:	90                   	nop
c0022caa:	83 c4 0c             	add    esp,0xc
c0022cad:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0022cae <LinkedList<Device>::LinkedList()>:
c0022cae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022cb2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022cb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022cbc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022cc3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022cc7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022cce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022cd2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022cd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022cdc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022ce3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022ce7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022cee:	90                   	nop
c0022cef:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0022cf0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0022cf0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022cf4:	8b 00                	mov    eax,DWORD PTR [eax]
c0022cf6:	85 c0                	test   eax,eax
c0022cf8:	75 0e                	jne    c0022d08 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0022cfa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022cfe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022d01:	85 c0                	test   eax,eax
c0022d03:	75 03                	jne    c0022d08 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0022d05:	b0 01                	mov    al,0x1
c0022d07:	c3                   	ret    
c0022d08:	b0 00                	mov    al,0x0
c0022d0a:	90                   	nop
c0022d0b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0022d0c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0022d0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d10:	8b 00                	mov    eax,DWORD PTR [eax]
c0022d12:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0022d14 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0022d14:	83 ec 0c             	sub    esp,0xc
c0022d17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d1b:	8b 00                	mov    eax,DWORD PTR [eax]
c0022d1d:	85 c0                	test   eax,eax
c0022d1f:	75 17                	jne    c0022d38 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c0022d21:	83 ec 0c             	sub    esp,0xc
c0022d24:	68 a0 42 02 c0       	push   0xc00242a0
c0022d29:	e8 ad 12 ff ff       	call   c0013fdb <Krnl::panic(char const*)>
c0022d2e:	83 c4 10             	add    esp,0x10
c0022d31:	e9 92 00 00 00       	jmp    c0022dc8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c0022d36:	66 90                	xchg   ax,ax
c0022d38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d3c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022d3f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0022d42:	85 c0                	test   eax,eax
c0022d44:	0f 95 c0             	setne  al
c0022d47:	84 c0                	test   al,al
c0022d49:	74 11                	je     c0022d5c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c0022d4b:	83 ec 0c             	sub    esp,0xc
c0022d4e:	68 eb 42 02 c0       	push   0xc00242eb
c0022d53:	e8 83 12 ff ff       	call   c0013fdb <Krnl::panic(char const*)>
c0022d58:	83 c4 10             	add    esp,0x10
c0022d5b:	90                   	nop
c0022d5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d60:	8b 00                	mov    eax,DWORD PTR [eax]
c0022d62:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0022d65:	85 c0                	test   eax,eax
c0022d67:	0f 94 c0             	sete   al
c0022d6a:	84 c0                	test   al,al
c0022d6c:	74 36                	je     c0022da4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c0022d6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d72:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022d78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d7c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022d83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d87:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022d8a:	83 f8 01             	cmp    eax,0x1
c0022d8d:	74 25                	je     c0022db4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c0022d8f:	83 ec 0c             	sub    esp,0xc
c0022d92:	68 c4 42 02 c0       	push   0xc00242c4
c0022d97:	e8 3f 12 ff ff       	call   c0013fdb <Krnl::panic(char const*)>
c0022d9c:	83 c4 10             	add    esp,0x10
c0022d9f:	eb 13                	jmp    c0022db4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c0022da1:	8d 76 00             	lea    esi,[esi+0x0]
c0022da4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022da8:	8b 00                	mov    eax,DWORD PTR [eax]
c0022daa:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0022dad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022db1:	89 10                	mov    DWORD PTR [eax],edx
c0022db3:	90                   	nop
c0022db4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022db8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022dbb:	8d 50 ff             	lea    edx,[eax-0x1]
c0022dbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022dc2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022dc5:	8d 76 00             	lea    esi,[esi+0x0]
c0022dc8:	83 c4 0c             	add    esp,0xc
c0022dcb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0022dcc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0022dcc:	83 ec 0c             	sub    esp,0xc
c0022dcf:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0022dd4:	75 12                	jne    c0022de8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c0022dd6:	83 ec 0c             	sub    esp,0xc
c0022dd9:	68 68 42 02 c0       	push   0xc0024268
c0022dde:	e8 f8 11 ff ff       	call   c0013fdb <Krnl::panic(char const*)>
c0022de3:	83 c4 10             	add    esp,0x10
c0022de6:	66 90                	xchg   ax,ax
c0022de8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022dec:	8b 00                	mov    eax,DWORD PTR [eax]
c0022dee:	85 c0                	test   eax,eax
c0022df0:	74 36                	je     c0022e28 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0022df2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022df6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022df9:	85 c0                	test   eax,eax
c0022dfb:	74 2b                	je     c0022e28 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0022dfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e01:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022e04:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022e08:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0022e0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e0f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022e13:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022e16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e1a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022e1d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0022e24:	eb 6a                	jmp    c0022e90 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0022e26:	66 90                	xchg   ax,ax
c0022e28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e2c:	8b 00                	mov    eax,DWORD PTR [eax]
c0022e2e:	85 c0                	test   eax,eax
c0022e30:	75 4e                	jne    c0022e80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0022e32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e36:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022e39:	85 c0                	test   eax,eax
c0022e3b:	75 43                	jne    c0022e80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0022e3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e41:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022e45:	89 10                	mov    DWORD PTR [eax],edx
c0022e47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e4b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022e4f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022e52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e56:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022e59:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0022e60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e64:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022e67:	85 c0                	test   eax,eax
c0022e69:	74 25                	je     c0022e90 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0022e6b:	83 ec 0c             	sub    esp,0xc
c0022e6e:	68 8a 42 02 c0       	push   0xc002428a
c0022e73:	e8 63 11 ff ff       	call   c0013fdb <Krnl::panic(char const*)>
c0022e78:	83 c4 10             	add    esp,0x10
c0022e7b:	eb 13                	jmp    c0022e90 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0022e7d:	8d 76 00             	lea    esi,[esi+0x0]
c0022e80:	83 ec 0c             	sub    esp,0xc
c0022e83:	68 94 42 02 c0       	push   0xc0024294
c0022e88:	e8 4e 11 ff ff       	call   c0013fdb <Krnl::panic(char const*)>
c0022e8d:	83 c4 10             	add    esp,0x10
c0022e90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e94:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022e97:	8d 50 01             	lea    edx,[eax+0x1]
c0022e9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e9e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022ea1:	90                   	nop
c0022ea2:	83 c4 0c             	add    esp,0xc
c0022ea5:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0022ea8 <ACPI::~ACPI()>:
c0022ea8:	83 ec 0c             	sub    esp,0xc
c0022eab:	ba ac 52 02 c0       	mov    edx,0xc00252ac
c0022eb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022eb4:	89 10                	mov    DWORD PTR [eax],edx
c0022eb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022eba:	83 ec 0c             	sub    esp,0xc
c0022ebd:	50                   	push   eax
c0022ebe:	e8 81 b4 fe ff       	call   c000e344 <Device::~Device()>
c0022ec3:	83 c4 10             	add    esp,0x10
c0022ec6:	90                   	nop
c0022ec7:	83 c4 0c             	add    esp,0xc
c0022eca:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0022ecc <ACPI::~ACPI()>:
c0022ecc:	83 ec 0c             	sub    esp,0xc
c0022ecf:	83 ec 0c             	sub    esp,0xc
c0022ed2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022ed6:	e8 cd ff ff ff       	call   c0022ea8 <ACPI::~ACPI()>
c0022edb:	83 c4 10             	add    esp,0x10
c0022ede:	83 ec 08             	sub    esp,0x8
c0022ee1:	68 64 12 00 00       	push   0x1264
c0022ee6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022eea:	e8 f5 9f fe ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c0022eef:	83 c4 10             	add    esp,0x10
c0022ef2:	83 c4 0c             	add    esp,0xc
c0022ef5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0022ef8 <LinkedList<Device>::~LinkedList()>:
c0022ef8:	90                   	nop
c0022ef9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0022efc <LinkedList<Device>::isEmpty()>:
c0022efc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022f00:	8b 00                	mov    eax,DWORD PTR [eax]
c0022f02:	85 c0                	test   eax,eax
c0022f04:	75 0e                	jne    c0022f14 <LinkedList<Device>::isEmpty()+0x18>
c0022f06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022f0a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022f0d:	85 c0                	test   eax,eax
c0022f0f:	75 03                	jne    c0022f14 <LinkedList<Device>::isEmpty()+0x18>
c0022f11:	b0 01                	mov    al,0x1
c0022f13:	c3                   	ret    
c0022f14:	b0 00                	mov    al,0x0
c0022f16:	90                   	nop
c0022f17:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0022f18 <LinkedList<Device>::getFirstElement()>:
c0022f18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022f1c:	8b 00                	mov    eax,DWORD PTR [eax]
c0022f1e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0022f20 <LinkedList<Device>::removeFirst()>:
c0022f20:	83 ec 0c             	sub    esp,0xc
c0022f23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f27:	8b 00                	mov    eax,DWORD PTR [eax]
c0022f29:	85 c0                	test   eax,eax
c0022f2b:	75 17                	jne    c0022f44 <LinkedList<Device>::removeFirst()+0x24>
c0022f2d:	83 ec 0c             	sub    esp,0xc
c0022f30:	68 a0 42 02 c0       	push   0xc00242a0
c0022f35:	e8 a1 10 ff ff       	call   c0013fdb <Krnl::panic(char const*)>
c0022f3a:	83 c4 10             	add    esp,0x10
c0022f3d:	e9 92 00 00 00       	jmp    c0022fd4 <LinkedList<Device>::removeFirst()+0xb4>
c0022f42:	66 90                	xchg   ax,ax
c0022f44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f48:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022f4b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0022f51:	85 c0                	test   eax,eax
c0022f53:	74 13                	je     c0022f68 <LinkedList<Device>::removeFirst()+0x48>
c0022f55:	83 ec 0c             	sub    esp,0xc
c0022f58:	68 eb 42 02 c0       	push   0xc00242eb
c0022f5d:	e8 79 10 ff ff       	call   c0013fdb <Krnl::panic(char const*)>
c0022f62:	83 c4 10             	add    esp,0x10
c0022f65:	8d 76 00             	lea    esi,[esi+0x0]
c0022f68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f6c:	8b 00                	mov    eax,DWORD PTR [eax]
c0022f6e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0022f74:	85 c0                	test   eax,eax
c0022f76:	75 34                	jne    c0022fac <LinkedList<Device>::removeFirst()+0x8c>
c0022f78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f7c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022f82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f86:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022f8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f91:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022f94:	83 f8 01             	cmp    eax,0x1
c0022f97:	74 27                	je     c0022fc0 <LinkedList<Device>::removeFirst()+0xa0>
c0022f99:	83 ec 0c             	sub    esp,0xc
c0022f9c:	68 c4 42 02 c0       	push   0xc00242c4
c0022fa1:	e8 35 10 ff ff       	call   c0013fdb <Krnl::panic(char const*)>
c0022fa6:	83 c4 10             	add    esp,0x10
c0022fa9:	eb 15                	jmp    c0022fc0 <LinkedList<Device>::removeFirst()+0xa0>
c0022fab:	90                   	nop
c0022fac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fb0:	8b 00                	mov    eax,DWORD PTR [eax]
c0022fb2:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0022fb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fbc:	89 10                	mov    DWORD PTR [eax],edx
c0022fbe:	66 90                	xchg   ax,ax
c0022fc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fc4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022fc7:	8d 50 ff             	lea    edx,[eax-0x1]
c0022fca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fce:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022fd1:	8d 76 00             	lea    esi,[esi+0x0]
c0022fd4:	83 c4 0c             	add    esp,0xc
c0022fd7:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0022fd8 <CPU::~CPU()>:
c0022fd8:	83 ec 0c             	sub    esp,0xc
c0022fdb:	ba 2c 58 02 c0       	mov    edx,0xc002582c
c0022fe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fe4:	89 10                	mov    DWORD PTR [eax],edx
c0022fe6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fea:	83 ec 0c             	sub    esp,0xc
c0022fed:	50                   	push   eax
c0022fee:	e8 51 b3 fe ff       	call   c000e344 <Device::~Device()>
c0022ff3:	83 c4 10             	add    esp,0x10
c0022ff6:	90                   	nop
c0022ff7:	83 c4 0c             	add    esp,0xc
c0022ffa:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0022ffc <CPU::~CPU()>:
c0022ffc:	83 ec 0c             	sub    esp,0xc
c0022fff:	83 ec 0c             	sub    esp,0xc
c0023002:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023006:	e8 cd ff ff ff       	call   c0022fd8 <CPU::~CPU()>
c002300b:	83 c4 10             	add    esp,0x10
c002300e:	83 ec 08             	sub    esp,0x8
c0023011:	68 98 11 00 00       	push   0x1198
c0023016:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002301a:	e8 c5 9e fe ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c002301f:	83 c4 10             	add    esp,0x10
c0023022:	83 c4 0c             	add    esp,0xc
c0023025:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0023028 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0023028:	90                   	nop
c0023029:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c002302c <ThreadControlBlock::ThreadControlBlock()>:
c002302c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023030:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0023037:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002303b:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0023042:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023046:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c002304d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023051:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c0023058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002305c:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c0023063:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023067:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c002306b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002306f:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c0023073:	90                   	nop
c0023074:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0023078 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0023078:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002307c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0023082:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023086:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002308d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023091:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0023098:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002309c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00230a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00230a6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00230ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00230b1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00230b8:	90                   	nop
c00230b9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c00230bc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c00230bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00230c0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00230c3:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c00230c4 <Vm::_FPUState::_FPUState()>:
c00230c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00230c8:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c00230cf:	90                   	nop
c00230d0:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c00230d2 <PCI::~PCI()>:
c00230d2:	83 ec 0c             	sub    esp,0xc
c00230d5:	ba c8 68 02 c0       	mov    edx,0xc00268c8
c00230da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230de:	89 10                	mov    DWORD PTR [eax],edx
c00230e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230e4:	83 ec 0c             	sub    esp,0xc
c00230e7:	50                   	push   eax
c00230e8:	e8 e7 ac fe ff       	call   c000ddd4 <Bus::~Bus()>
c00230ed:	83 c4 10             	add    esp,0x10
c00230f0:	90                   	nop
c00230f1:	83 c4 0c             	add    esp,0xc
c00230f4:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c00230f6 <PCI::~PCI()>:
c00230f6:	83 ec 0c             	sub    esp,0xc
c00230f9:	83 ec 0c             	sub    esp,0xc
c00230fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023100:	e8 cd ff ff ff       	call   c00230d2 <PCI::~PCI()>
c0023105:	83 c4 10             	add    esp,0x10
c0023108:	83 ec 08             	sub    esp,0x8
c002310b:	68 5c 01 00 00       	push   0x15c
c0023110:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023114:	e8 cb 9d fe ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c0023119:	83 c4 10             	add    esp,0x10
c002311c:	83 c4 0c             	add    esp,0xc
c002311f:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0023120 <IDE::~IDE()>:
c0023120:	83 ec 0c             	sub    esp,0xc
c0023123:	ba 98 69 02 c0       	mov    edx,0xc0026998
c0023128:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002312c:	89 10                	mov    DWORD PTR [eax],edx
c002312e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023132:	83 ec 0c             	sub    esp,0xc
c0023135:	50                   	push   eax
c0023136:	e8 21 b7 fe ff       	call   c000e85c <HardDiskController::~HardDiskController()>
c002313b:	83 c4 10             	add    esp,0x10
c002313e:	90                   	nop
c002313f:	83 c4 0c             	add    esp,0xc
c0023142:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0023144 <IDE::~IDE()>:
c0023144:	83 ec 0c             	sub    esp,0xc
c0023147:	83 ec 0c             	sub    esp,0xc
c002314a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002314e:	e8 cd ff ff ff       	call   c0023120 <IDE::~IDE()>
c0023153:	83 c4 10             	add    esp,0x10
c0023156:	83 ec 08             	sub    esp,0x8
c0023159:	68 70 02 00 00       	push   0x270
c002315e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023162:	e8 7d 9d fe ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c0023167:	83 c4 10             	add    esp,0x10
c002316a:	83 c4 0c             	add    esp,0xc
c002316d:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c002316e <SATABus::~SATABus()>:
c002316e:	83 ec 0c             	sub    esp,0xc
c0023171:	ba 64 6a 02 c0       	mov    edx,0xc0026a64
c0023176:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002317a:	89 10                	mov    DWORD PTR [eax],edx
c002317c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023180:	83 ec 0c             	sub    esp,0xc
c0023183:	50                   	push   eax
c0023184:	e8 d3 b6 fe ff       	call   c000e85c <HardDiskController::~HardDiskController()>
c0023189:	83 c4 10             	add    esp,0x10
c002318c:	90                   	nop
c002318d:	83 c4 0c             	add    esp,0xc
c0023190:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0023192 <SATABus::~SATABus()>:
c0023192:	83 ec 0c             	sub    esp,0xc
c0023195:	83 ec 0c             	sub    esp,0xc
c0023198:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002319c:	e8 cd ff ff ff       	call   c002316e <SATABus::~SATABus()>
c00231a1:	83 c4 10             	add    esp,0x10
c00231a4:	83 ec 08             	sub    esp,0x8
c00231a7:	68 64 01 00 00       	push   0x164
c00231ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00231b0:	e8 2f 9d fe ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c00231b5:	83 c4 10             	add    esp,0x10
c00231b8:	83 c4 0c             	add    esp,0xc
c00231bb:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c00231bc <ATA::~ATA()>:
c00231bc:	83 ec 0c             	sub    esp,0xc
c00231bf:	ba dc 6a 02 c0       	mov    edx,0xc0026adc
c00231c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00231c8:	89 10                	mov    DWORD PTR [eax],edx
c00231ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00231ce:	83 ec 0c             	sub    esp,0xc
c00231d1:	50                   	push   eax
c00231d2:	e8 67 b7 fe ff       	call   c000e93e <PhysicalDisk::~PhysicalDisk()>
c00231d7:	83 c4 10             	add    esp,0x10
c00231da:	90                   	nop
c00231db:	83 c4 0c             	add    esp,0xc
c00231de:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c00231e0 <ATA::~ATA()>:
c00231e0:	83 ec 0c             	sub    esp,0xc
c00231e3:	83 ec 0c             	sub    esp,0xc
c00231e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00231ea:	e8 cd ff ff ff       	call   c00231bc <ATA::~ATA()>
c00231ef:	83 c4 10             	add    esp,0x10
c00231f2:	83 ec 08             	sub    esp,0x8
c00231f5:	68 7c 01 00 00       	push   0x17c
c00231fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00231fe:	e8 e1 9c fe ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c0023203:	83 c4 10             	add    esp,0x10
c0023206:	83 c4 0c             	add    esp,0xc
c0023209:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c002320a <ATAPI::~ATAPI()>:
c002320a:	83 ec 0c             	sub    esp,0xc
c002320d:	ba 54 6b 02 c0       	mov    edx,0xc0026b54
c0023212:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023216:	89 10                	mov    DWORD PTR [eax],edx
c0023218:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002321c:	83 ec 0c             	sub    esp,0xc
c002321f:	50                   	push   eax
c0023220:	e8 19 b7 fe ff       	call   c000e93e <PhysicalDisk::~PhysicalDisk()>
c0023225:	83 c4 10             	add    esp,0x10
c0023228:	90                   	nop
c0023229:	83 c4 0c             	add    esp,0xc
c002322c:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c002322e <ATAPI::~ATAPI()>:
c002322e:	83 ec 0c             	sub    esp,0xc
c0023231:	83 ec 0c             	sub    esp,0xc
c0023234:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023238:	e8 cd ff ff ff       	call   c002320a <ATAPI::~ATAPI()>
c002323d:	83 c4 10             	add    esp,0x10
c0023240:	83 ec 08             	sub    esp,0x8
c0023243:	68 84 01 00 00       	push   0x184
c0023248:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002324c:	e8 93 9c fe ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c0023251:	83 c4 10             	add    esp,0x10
c0023254:	83 c4 0c             	add    esp,0xc
c0023257:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0023258 <SATA::~SATA()>:
c0023258:	83 ec 0c             	sub    esp,0xc
c002325b:	ba 90 6d 02 c0       	mov    edx,0xc0026d90
c0023260:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023264:	89 10                	mov    DWORD PTR [eax],edx
c0023266:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002326a:	83 ec 0c             	sub    esp,0xc
c002326d:	50                   	push   eax
c002326e:	e8 cb b6 fe ff       	call   c000e93e <PhysicalDisk::~PhysicalDisk()>
c0023273:	83 c4 10             	add    esp,0x10
c0023276:	90                   	nop
c0023277:	83 c4 0c             	add    esp,0xc
c002327a:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c002327c <SATA::~SATA()>:
c002327c:	83 ec 0c             	sub    esp,0xc
c002327f:	83 ec 0c             	sub    esp,0xc
c0023282:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023286:	e8 cd ff ff ff       	call   c0023258 <SATA::~SATA()>
c002328b:	83 c4 10             	add    esp,0x10
c002328e:	83 ec 08             	sub    esp,0x8
c0023291:	68 7c 01 00 00       	push   0x17c
c0023296:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002329a:	e8 45 9c fe ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c002329f:	83 c4 10             	add    esp,0x10
c00232a2:	83 c4 0c             	add    esp,0xc
c00232a5:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c00232a6 <SATAPI::~SATAPI()>:
c00232a6:	83 ec 0c             	sub    esp,0xc
c00232a9:	ba fc 6e 02 c0       	mov    edx,0xc0026efc
c00232ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232b2:	89 10                	mov    DWORD PTR [eax],edx
c00232b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232b8:	83 ec 0c             	sub    esp,0xc
c00232bb:	50                   	push   eax
c00232bc:	e8 7d b6 fe ff       	call   c000e93e <PhysicalDisk::~PhysicalDisk()>
c00232c1:	83 c4 10             	add    esp,0x10
c00232c4:	90                   	nop
c00232c5:	83 c4 0c             	add    esp,0xc
c00232c8:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c00232ca <SATAPI::~SATAPI()>:
c00232ca:	83 ec 0c             	sub    esp,0xc
c00232cd:	83 ec 0c             	sub    esp,0xc
c00232d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00232d4:	e8 cd ff ff ff       	call   c00232a6 <SATAPI::~SATAPI()>
c00232d9:	83 c4 10             	add    esp,0x10
c00232dc:	83 ec 08             	sub    esp,0x8
c00232df:	68 84 01 00 00       	push   0x184
c00232e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00232e8:	e8 f7 9b fe ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c00232ed:	83 c4 10             	add    esp,0x10
c00232f0:	83 c4 0c             	add    esp,0xc
c00232f3:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c00232f4 <IOAPIC::~IOAPIC()>:
c00232f4:	83 ec 0c             	sub    esp,0xc
c00232f7:	ba 50 70 02 c0       	mov    edx,0xc0027050
c00232fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023300:	89 10                	mov    DWORD PTR [eax],edx
c0023302:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023306:	83 ec 0c             	sub    esp,0xc
c0023309:	50                   	push   eax
c002330a:	e8 35 b0 fe ff       	call   c000e344 <Device::~Device()>
c002330f:	83 c4 10             	add    esp,0x10
c0023312:	90                   	nop
c0023313:	83 c4 0c             	add    esp,0xc
c0023316:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0023318 <IOAPIC::~IOAPIC()>:
c0023318:	83 ec 0c             	sub    esp,0xc
c002331b:	83 ec 0c             	sub    esp,0xc
c002331e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023322:	e8 cd ff ff ff       	call   c00232f4 <IOAPIC::~IOAPIC()>
c0023327:	83 c4 10             	add    esp,0x10
c002332a:	83 ec 08             	sub    esp,0x8
c002332d:	68 68 01 00 00       	push   0x168
c0023332:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023336:	e8 a9 9b fe ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c002333b:	83 c4 10             	add    esp,0x10
c002333e:	83 c4 0c             	add    esp,0xc
c0023341:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0023342 <APIC::~APIC()>:
c0023342:	83 ec 0c             	sub    esp,0xc
c0023345:	ba 0c 70 02 c0       	mov    edx,0xc002700c
c002334a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002334e:	89 10                	mov    DWORD PTR [eax],edx
c0023350:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023354:	83 ec 0c             	sub    esp,0xc
c0023357:	50                   	push   eax
c0023358:	e8 c5 b9 fe ff       	call   c000ed22 <InterruptController::~InterruptController()>
c002335d:	83 c4 10             	add    esp,0x10
c0023360:	90                   	nop
c0023361:	83 c4 0c             	add    esp,0xc
c0023364:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0023366 <APIC::~APIC()>:
c0023366:	83 ec 0c             	sub    esp,0xc
c0023369:	83 ec 0c             	sub    esp,0xc
c002336c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023370:	e8 cd ff ff ff       	call   c0023342 <APIC::~APIC()>
c0023375:	83 c4 10             	add    esp,0x10
c0023378:	83 ec 08             	sub    esp,0x8
c002337b:	68 58 21 00 00       	push   0x2158
c0023380:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023384:	e8 5b 9b fe ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c0023389:	83 c4 10             	add    esp,0x10
c002338c:	83 c4 0c             	add    esp,0xc
c002338f:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0023390 <PIC::~PIC()>:
c0023390:	83 ec 0c             	sub    esp,0xc
c0023393:	ba a0 70 02 c0       	mov    edx,0xc00270a0
c0023398:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002339c:	89 10                	mov    DWORD PTR [eax],edx
c002339e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233a2:	83 ec 0c             	sub    esp,0xc
c00233a5:	50                   	push   eax
c00233a6:	e8 77 b9 fe ff       	call   c000ed22 <InterruptController::~InterruptController()>
c00233ab:	83 c4 10             	add    esp,0x10
c00233ae:	90                   	nop
c00233af:	83 c4 0c             	add    esp,0xc
c00233b2:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c00233b4 <PIC::~PIC()>:
c00233b4:	83 ec 0c             	sub    esp,0xc
c00233b7:	83 ec 0c             	sub    esp,0xc
c00233ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00233be:	e8 cd ff ff ff       	call   c0023390 <PIC::~PIC()>
c00233c3:	83 c4 10             	add    esp,0x10
c00233c6:	83 ec 08             	sub    esp,0x8
c00233c9:	68 58 21 00 00       	push   0x2158
c00233ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00233d2:	e8 0d 9b fe ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c00233d7:	83 c4 10             	add    esp,0x10
c00233da:	83 c4 0c             	add    esp,0xc
c00233dd:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c00233e0 <APICTimer::~APICTimer()>:
c00233e0:	83 ec 0c             	sub    esp,0xc
c00233e3:	ba f0 70 02 c0       	mov    edx,0xc00270f0
c00233e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233ec:	89 10                	mov    DWORD PTR [eax],edx
c00233ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233f2:	83 ec 0c             	sub    esp,0xc
c00233f5:	50                   	push   eax
c00233f6:	e8 e1 c9 fe ff       	call   c000fddc <Timer::~Timer()>
c00233fb:	83 c4 10             	add    esp,0x10
c00233fe:	90                   	nop
c00233ff:	83 c4 0c             	add    esp,0xc
c0023402:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0023404 <APICTimer::~APICTimer()>:
c0023404:	83 ec 0c             	sub    esp,0xc
c0023407:	83 ec 0c             	sub    esp,0xc
c002340a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002340e:	e8 cd ff ff ff       	call   c00233e0 <APICTimer::~APICTimer()>
c0023413:	83 c4 10             	add    esp,0x10
c0023416:	83 ec 08             	sub    esp,0x8
c0023419:	68 60 01 00 00       	push   0x160
c002341e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023422:	e8 bd 9a fe ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c0023427:	83 c4 10             	add    esp,0x10
c002342a:	83 c4 0c             	add    esp,0xc
c002342d:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0023430 <PIT::~PIT()>:
c0023430:	83 ec 0c             	sub    esp,0xc
c0023433:	ba 40 71 02 c0       	mov    edx,0xc0027140
c0023438:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002343c:	89 10                	mov    DWORD PTR [eax],edx
c002343e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023442:	83 ec 0c             	sub    esp,0xc
c0023445:	50                   	push   eax
c0023446:	e8 91 c9 fe ff       	call   c000fddc <Timer::~Timer()>
c002344b:	83 c4 10             	add    esp,0x10
c002344e:	90                   	nop
c002344f:	83 c4 0c             	add    esp,0xc
c0023452:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0023454 <PIT::~PIT()>:
c0023454:	83 ec 0c             	sub    esp,0xc
c0023457:	83 ec 0c             	sub    esp,0xc
c002345a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002345e:	e8 cd ff ff ff       	call   c0023430 <PIT::~PIT()>
c0023463:	83 c4 10             	add    esp,0x10
c0023466:	83 ec 08             	sub    esp,0x8
c0023469:	68 5c 01 00 00       	push   0x15c
c002346e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023472:	e8 6d 9a fe ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c0023477:	83 c4 10             	add    esp,0x10
c002347a:	83 c4 0c             	add    esp,0xc
c002347d:	c3                   	ret    
