
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 d8 fb 00 00       	call   c000fbf8 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 23 86 02 00       	call   c0028648 <_init>
c0000025:	c3                   	ret    
c0000026:	bb f2 91 02 c0       	mov    ebx,0xc00291f2
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 00 92 02 c0    	cmp    ebx,0xc0029200
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 98 d9 02 c0       	mov    eax,0xc002d998
c0000049:	3d 98 d9 02 c0       	cmp    eax,0xc002d998
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 98 d9 02 c0       	push   0xc002d998
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 98 d9 02 c0       	mov    eax,0xc002d998
c0000075:	2d 98 d9 02 c0       	sub    eax,0xc002d998
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 98 d9 02 c0       	push   0xc002d998
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d c8 df 02 c0 00 	cmp    BYTE PTR ds:0xc002dfc8,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 08 92 02 c0       	mov    ebx,0xc0029208
c00000bb:	81 eb 04 92 02 c0    	sub    ebx,0xc0029204
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 04 92 02 c0       	mov    esi,0xc0029204
c00000ca:	a1 cc df 02 c0       	mov    eax,ds:0xc002dfcc
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 cc df 02 c0       	mov    ds:0xc002dfcc,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 cc df 02 c0       	mov    eax,ds:0xc002dfcc
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 98 d9 02 c0       	push   0xc002d998
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 c8 df 02 c0 01 	mov    BYTE PTR ds:0xc002dfc8,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 d0 df 02 c0       	push   0xc002dfd0
c000012c:	68 98 d9 02 c0       	push   0xc002d998
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	85 d2                	test   edx,edx
c0000391:	75 11                	jne    c00003a4 <commonThreadSwitch.firstTime>
c0000393:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c0000396:	e8 01 d6 01 00       	call   c001d99c <changeTSS>
c000039b:	5d                   	pop    ebp
c000039c:	5f                   	pop    edi
c000039d:	5e                   	pop    esi
c000039e:	5a                   	pop    edx
c000039f:	59                   	pop    ecx
c00003a0:	5b                   	pop    ebx
c00003a1:	58                   	pop    eax
c00003a2:	9d                   	popf   
c00003a3:	c3                   	ret    

c00003a4 <commonThreadSwitch.firstTime>:
c00003a4:	fa                   	cli    
c00003a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003a8:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003ad:	60                   	pusha  
c00003ae:	e8 75 29 01 00       	call   c0012d28 <mapVASFirstTime>
c00003b3:	61                   	popa   
c00003b4:	89 c4                	mov    esp,eax
c00003b6:	56                   	push   esi
c00003b7:	52                   	push   edx
c00003b8:	e8 df d5 01 00       	call   c001d99c <changeTSS>
c00003bd:	5a                   	pop    edx
c00003be:	5e                   	pop    esi
c00003bf:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003c6:	5d                   	pop    ebp
c00003c7:	5f                   	pop    edi
c00003c8:	5e                   	pop    esi
c00003c9:	59                   	pop    ecx
c00003ca:	59                   	pop    ecx
c00003cb:	5b                   	pop    ebx
c00003cc:	58                   	pop    eax
c00003cd:	81 c4 04 00 00 00    	add    esp,0x4
c00003d3:	6a 02                	push   0x2
c00003d5:	9d                   	popf   
c00003d6:	52                   	push   edx
c00003d7:	e8 2d da 01 00       	call   c001de09 <taskStartupFunction>
c00003dc:	5a                   	pop    edx
c00003dd:	50                   	push   eax
c00003de:	ff d2                	call   edx
c00003e0:	e8 db df 01 00       	call   c001e3c0 <taskReturned>
c00003e5:	e9 fb ff ff ff       	jmp    c00003e5 <commonThreadSwitch.firstTime+0x41>

c00003ea <asmQuickAcquireLock>:
c00003ea:	55                   	push   ebp
c00003eb:	89 e5                	mov    ebp,esp
c00003ed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f0 <asmQuickAcquireLock.retry>:
c00003f0:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003f5:	72 02                	jb     c00003f9 <asmQuickAcquireLock.spin_with_pause>
c00003f7:	fa                   	cli    
c00003f8:	c3                   	ret    

c00003f9 <asmQuickAcquireLock.spin_with_pause>:
c00003f9:	f3 90                	pause  
c00003fb:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000401:	75 f6                	jne    c00003f9 <asmQuickAcquireLock.spin_with_pause>
c0000403:	e9 e8 ff ff ff       	jmp    c00003f0 <asmQuickAcquireLock.retry>

c0000408 <asmQuickReleaseLock>:
c0000408:	55                   	push   ebp
c0000409:	89 e5                	mov    ebp,esp
c000040b:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000412:	5d                   	pop    ebp
c0000413:	c3                   	ret    

c0000414 <asmAcquireLock>:
c0000414:	55                   	push   ebp
c0000415:	89 e5                	mov    ebp,esp
c0000417:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000041a <asmAcquireLock.retry>:
c000041a:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000041f:	72 05                	jb     c0000426 <asmAcquireLock.spin_with_pause>
c0000421:	9c                   	pushf  
c0000422:	58                   	pop    eax
c0000423:	fa                   	cli    
c0000424:	5d                   	pop    ebp
c0000425:	c3                   	ret    

c0000426 <asmAcquireLock.spin_with_pause>:
c0000426:	f3 90                	pause  
c0000428:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000042e:	75 f6                	jne    c0000426 <asmAcquireLock.spin_with_pause>
c0000430:	e9 e5 ff ff ff       	jmp    c000041a <asmAcquireLock.retry>

c0000435 <asmReleaseLock>:
c0000435:	55                   	push   ebp
c0000436:	89 e5                	mov    ebp,esp
c0000438:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000043b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000043e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000444:	52                   	push   edx
c0000445:	9d                   	popf   
c0000446:	5d                   	pop    ebp
c0000447:	c3                   	ret    

c0000448 <loadGDT>:
c0000448:	0f 01 15 10 e4 02 c0 	lgdtd  ds:0xc002e410
c000044f:	66 b8 10 00          	mov    ax,0x10
c0000453:	66 8e d8             	mov    ds,ax
c0000456:	66 8e c0             	mov    es,ax
c0000459:	66 8e e0             	mov    fs,ax
c000045c:	66 8e e8             	mov    gs,ax
c000045f:	66 8e d0             	mov    ss,ax
c0000462:	e9 00 00 00 00       	jmp    c0000467 <flush2>

c0000467 <flush2>:
c0000467:	c3                   	ret    

c0000468 <isr0>:
c0000468:	fa                   	cli    
c0000469:	68 00 00 00 00       	push   0x0
c000046e:	68 00 00 00 00       	push   0x0
c0000473:	e9 44 01 00 00       	jmp    c00005bc <int_common_stub>

c0000478 <isr1>:
c0000478:	fa                   	cli    
c0000479:	6a 00                	push   0x0
c000047b:	6a 01                	push   0x1
c000047d:	e9 3a 01 00 00       	jmp    c00005bc <int_common_stub>

c0000482 <isr2>:
c0000482:	fa                   	cli    
c0000483:	6a 00                	push   0x0
c0000485:	6a 02                	push   0x2
c0000487:	e9 30 01 00 00       	jmp    c00005bc <int_common_stub>

c000048c <isr3>:
c000048c:	fa                   	cli    
c000048d:	6a 00                	push   0x0
c000048f:	6a 03                	push   0x3
c0000491:	e9 26 01 00 00       	jmp    c00005bc <int_common_stub>

c0000496 <isr4>:
c0000496:	fa                   	cli    
c0000497:	6a 00                	push   0x0
c0000499:	6a 04                	push   0x4
c000049b:	e9 1c 01 00 00       	jmp    c00005bc <int_common_stub>

c00004a0 <isr5>:
c00004a0:	fa                   	cli    
c00004a1:	6a 00                	push   0x0
c00004a3:	6a 05                	push   0x5
c00004a5:	e9 12 01 00 00       	jmp    c00005bc <int_common_stub>

c00004aa <isr6>:
c00004aa:	fa                   	cli    
c00004ab:	6a 00                	push   0x0
c00004ad:	6a 06                	push   0x6
c00004af:	e9 08 01 00 00       	jmp    c00005bc <int_common_stub>

c00004b4 <isr7>:
c00004b4:	fa                   	cli    
c00004b5:	6a 00                	push   0x0
c00004b7:	6a 07                	push   0x7
c00004b9:	e9 fe 00 00 00       	jmp    c00005bc <int_common_stub>

c00004be <isr8>:
c00004be:	fa                   	cli    
c00004bf:	6a 08                	push   0x8
c00004c1:	e9 f6 00 00 00       	jmp    c00005bc <int_common_stub>

c00004c6 <isr9>:
c00004c6:	fa                   	cli    
c00004c7:	6a 00                	push   0x0
c00004c9:	6a 09                	push   0x9
c00004cb:	e9 ec 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d0 <isr10>:
c00004d0:	fa                   	cli    
c00004d1:	6a 0a                	push   0xa
c00004d3:	e9 e4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d8 <isr11>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0b                	push   0xb
c00004db:	e9 dc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e0 <isr12>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0c                	push   0xc
c00004e3:	e9 d4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e8 <isr13>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0d                	push   0xd
c00004eb:	e9 cc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f0 <isr14>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0e                	push   0xe
c00004f3:	e9 c4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f8 <isr15>:
c00004f8:	fa                   	cli    
c00004f9:	6a 00                	push   0x0
c00004fb:	6a 0f                	push   0xf
c00004fd:	e9 ba 00 00 00       	jmp    c00005bc <int_common_stub>

c0000502 <isr16>:
c0000502:	fa                   	cli    
c0000503:	6a 00                	push   0x0
c0000505:	6a 10                	push   0x10
c0000507:	e9 b0 00 00 00       	jmp    c00005bc <int_common_stub>

c000050c <isr17>:
c000050c:	fa                   	cli    
c000050d:	6a 00                	push   0x0
c000050f:	6a 11                	push   0x11
c0000511:	e9 a6 00 00 00       	jmp    c00005bc <int_common_stub>

c0000516 <isr18>:
c0000516:	fa                   	cli    
c0000517:	6a 00                	push   0x0
c0000519:	6a 12                	push   0x12
c000051b:	e9 9c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000520 <irq3>:
c0000520:	fa                   	cli    
c0000521:	6a 00                	push   0x0
c0000523:	6a 23                	push   0x23
c0000525:	e9 92 00 00 00       	jmp    c00005bc <int_common_stub>

c000052a <irq4>:
c000052a:	fa                   	cli    
c000052b:	6a 00                	push   0x0
c000052d:	6a 24                	push   0x24
c000052f:	e9 88 00 00 00       	jmp    c00005bc <int_common_stub>

c0000534 <irq5>:
c0000534:	fa                   	cli    
c0000535:	6a 00                	push   0x0
c0000537:	6a 25                	push   0x25
c0000539:	e9 7e 00 00 00       	jmp    c00005bc <int_common_stub>

c000053e <irq6>:
c000053e:	fa                   	cli    
c000053f:	6a 00                	push   0x0
c0000541:	6a 26                	push   0x26
c0000543:	e9 74 00 00 00       	jmp    c00005bc <int_common_stub>

c0000548 <irq7>:
c0000548:	fa                   	cli    
c0000549:	6a 00                	push   0x0
c000054b:	6a 27                	push   0x27
c000054d:	e9 6a 00 00 00       	jmp    c00005bc <int_common_stub>

c0000552 <irq8>:
c0000552:	fa                   	cli    
c0000553:	6a 00                	push   0x0
c0000555:	6a 28                	push   0x28
c0000557:	e9 60 00 00 00       	jmp    c00005bc <int_common_stub>

c000055c <irq9>:
c000055c:	fa                   	cli    
c000055d:	6a 00                	push   0x0
c000055f:	6a 29                	push   0x29
c0000561:	e9 56 00 00 00       	jmp    c00005bc <int_common_stub>

c0000566 <irq10>:
c0000566:	fa                   	cli    
c0000567:	6a 00                	push   0x0
c0000569:	6a 2a                	push   0x2a
c000056b:	e9 4c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000570 <irq11>:
c0000570:	fa                   	cli    
c0000571:	6a 00                	push   0x0
c0000573:	6a 2b                	push   0x2b
c0000575:	e9 42 00 00 00       	jmp    c00005bc <int_common_stub>

c000057a <irq12>:
c000057a:	fa                   	cli    
c000057b:	6a 00                	push   0x0
c000057d:	6a 2c                	push   0x2c
c000057f:	e9 38 00 00 00       	jmp    c00005bc <int_common_stub>

c0000584 <irq13>:
c0000584:	fa                   	cli    
c0000585:	6a 00                	push   0x0
c0000587:	6a 2d                	push   0x2d
c0000589:	e9 2e 00 00 00       	jmp    c00005bc <int_common_stub>

c000058e <irq14>:
c000058e:	fa                   	cli    
c000058f:	6a 00                	push   0x0
c0000591:	6a 2e                	push   0x2e
c0000593:	e9 24 00 00 00       	jmp    c00005bc <int_common_stub>

c0000598 <irq15>:
c0000598:	fa                   	cli    
c0000599:	6a 00                	push   0x0
c000059b:	6a 2f                	push   0x2f
c000059d:	e9 1a 00 00 00       	jmp    c00005bc <int_common_stub>

c00005a2 <irq1>:
c00005a2:	fa                   	cli    
c00005a3:	6a 00                	push   0x0
c00005a5:	6a 21                	push   0x21
c00005a7:	eb 13                	jmp    c00005bc <int_common_stub>

c00005a9 <irq2>:
c00005a9:	fa                   	cli    
c00005aa:	6a 00                	push   0x0
c00005ac:	6a 22                	push   0x22
c00005ae:	eb 0c                	jmp    c00005bc <int_common_stub>

c00005b0 <isr96>:
c00005b0:	6a 00                	push   0x0
c00005b2:	6a 60                	push   0x60
c00005b4:	fb                   	sti    
c00005b5:	eb 05                	jmp    c00005bc <int_common_stub>

c00005b7 <irq0>:
c00005b7:	fa                   	cli    
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 20                	push   0x20

c00005bc <int_common_stub>:
c00005bc:	60                   	pusha  
c00005bd:	1e                   	push   ds
c00005be:	06                   	push   es
c00005bf:	0f a0                	push   fs
c00005c1:	0f a8                	push   gs
c00005c3:	66 b8 10 00          	mov    ax,0x10
c00005c7:	66 8e d8             	mov    ds,ax
c00005ca:	66 8e c0             	mov    es,ax
c00005cd:	66 8e e0             	mov    fs,ax
c00005d0:	66 8e e8             	mov    gs,ax
c00005d3:	54                   	push   esp
c00005d4:	e8 52 46 01 00       	call   c0014c2b <int_handler>
c00005d9:	81 c4 04 00 00 00    	add    esp,0x4
c00005df:	0f a9                	pop    gs
c00005e1:	0f a1                	pop    fs
c00005e3:	07                   	pop    es
c00005e4:	1f                   	pop    ds
c00005e5:	61                   	popa   
c00005e6:	81 c4 08 00 00 00    	add    esp,0x8
c00005ec:	cf                   	iret   

c00005ed <irq16>:
c00005ed:	fa                   	cli    
c00005ee:	6a 00                	push   0x0
c00005f0:	6a 30                	push   0x30
c00005f2:	e9 c5 ff ff ff       	jmp    c00005bc <int_common_stub>

c00005f7 <irq17>:
c00005f7:	fa                   	cli    
c00005f8:	6a 00                	push   0x0
c00005fa:	6a 31                	push   0x31
c00005fc:	e9 bb ff ff ff       	jmp    c00005bc <int_common_stub>

c0000601 <irq18>:
c0000601:	fa                   	cli    
c0000602:	6a 00                	push   0x0
c0000604:	6a 32                	push   0x32
c0000606:	e9 b1 ff ff ff       	jmp    c00005bc <int_common_stub>

c000060b <irq19>:
c000060b:	fa                   	cli    
c000060c:	6a 00                	push   0x0
c000060e:	6a 33                	push   0x33
c0000610:	e9 a7 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000615 <irq20>:
c0000615:	fa                   	cli    
c0000616:	6a 00                	push   0x0
c0000618:	6a 34                	push   0x34
c000061a:	e9 9d ff ff ff       	jmp    c00005bc <int_common_stub>

c000061f <irq21>:
c000061f:	fa                   	cli    
c0000620:	6a 00                	push   0x0
c0000622:	6a 35                	push   0x35
c0000624:	e9 93 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000629 <irq22>:
c0000629:	fa                   	cli    
c000062a:	6a 00                	push   0x0
c000062c:	6a 36                	push   0x36
c000062e:	e9 89 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000633 <irq23>:
c0000633:	fa                   	cli    
c0000634:	6a 00                	push   0x0
c0000636:	6a 37                	push   0x37
c0000638:	e9 7f ff ff ff       	jmp    c00005bc <int_common_stub>
c000063d:	66 90                	xchg   ax,ax
c000063f:	90                   	nop

c0000640 <memcmp>:
c0000640:	56                   	push   esi
c0000641:	53                   	push   ebx
c0000642:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000646:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000064a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000064e:	85 f6                	test   esi,esi
c0000650:	74 1d                	je     c000066f <memcmp+0x2f>
c0000652:	8a 08                	mov    cl,BYTE PTR [eax]
c0000654:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000657:	38 cb                	cmp    bl,cl
c0000659:	75 19                	jne    c0000674 <memcmp+0x34>
c000065b:	01 c6                	add    esi,eax
c000065d:	eb 0a                	jmp    c0000669 <memcmp+0x29>
c000065f:	90                   	nop
c0000660:	8a 08                	mov    cl,BYTE PTR [eax]
c0000662:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000665:	38 d9                	cmp    cl,bl
c0000667:	75 0b                	jne    c0000674 <memcmp+0x34>
c0000669:	40                   	inc    eax
c000066a:	42                   	inc    edx
c000066b:	39 f0                	cmp    eax,esi
c000066d:	75 f1                	jne    c0000660 <memcmp+0x20>
c000066f:	31 c0                	xor    eax,eax
c0000671:	5b                   	pop    ebx
c0000672:	5e                   	pop    esi
c0000673:	c3                   	ret    
c0000674:	0f b6 c1             	movzx  eax,cl
c0000677:	29 d8                	sub    eax,ebx
c0000679:	5b                   	pop    ebx
c000067a:	5e                   	pop    esi
c000067b:	c3                   	ret    

c000067c <memmove>:
c000067c:	55                   	push   ebp
c000067d:	57                   	push   edi
c000067e:	56                   	push   esi
c000067f:	53                   	push   ebx
c0000680:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000684:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000688:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000068c:	39 dd                	cmp    ebp,ebx
c000068e:	0f 83 80 00 00 00    	jae    c0000714 <memmove+0x98>
c0000694:	85 d2                	test   edx,edx
c0000696:	74 74                	je     c000070c <memmove+0x90>
c0000698:	8d 4b 04             	lea    ecx,[ebx+0x4]
c000069b:	8d 75 04             	lea    esi,[ebp+0x4]
c000069e:	39 cd                	cmp    ebp,ecx
c00006a0:	0f 93 c1             	setae  cl
c00006a3:	39 f3                	cmp    ebx,esi
c00006a5:	0f 93 c0             	setae  al
c00006a8:	89 c6                	mov    esi,eax
c00006aa:	09 ce                	or     esi,ecx
c00006ac:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006af:	89 f0                	mov    eax,esi
c00006b1:	83 f9 0c             	cmp    ecx,0xc
c00006b4:	0f 97 c1             	seta   cl
c00006b7:	84 c8                	test   al,cl
c00006b9:	74 75                	je     c0000730 <memmove+0xb4>
c00006bb:	89 e9                	mov    ecx,ebp
c00006bd:	09 d9                	or     ecx,ebx
c00006bf:	83 e1 03             	and    ecx,0x3
c00006c2:	75 6c                	jne    c0000730 <memmove+0xb4>
c00006c4:	89 d7                	mov    edi,edx
c00006c6:	89 d9                	mov    ecx,ebx
c00006c8:	83 e7 fc             	and    edi,0xfffffffc
c00006cb:	89 ee                	mov    esi,ebp
c00006cd:	01 df                	add    edi,ebx
c00006cf:	90                   	nop
c00006d0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006d2:	83 c6 04             	add    esi,0x4
c00006d5:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006d8:	83 c1 04             	add    ecx,0x4
c00006db:	39 f9                	cmp    ecx,edi
c00006dd:	75 f1                	jne    c00006d0 <memmove+0x54>
c00006df:	89 d1                	mov    ecx,edx
c00006e1:	89 d7                	mov    edi,edx
c00006e3:	83 e1 fc             	and    ecx,0xfffffffc
c00006e6:	29 cf                	sub    edi,ecx
c00006e8:	01 cb                	add    ebx,ecx
c00006ea:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006ee:	39 ca                	cmp    edx,ecx
c00006f0:	74 1a                	je     c000070c <memmove+0x90>
c00006f2:	8a 03                	mov    al,BYTE PTR [ebx]
c00006f4:	83 ff 01             	cmp    edi,0x1
c00006f7:	88 06                	mov    BYTE PTR [esi],al
c00006f9:	74 11                	je     c000070c <memmove+0x90>
c00006fb:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00006fe:	83 ff 02             	cmp    edi,0x2
c0000701:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000704:	74 06                	je     c000070c <memmove+0x90>
c0000706:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000709:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000070c:	5b                   	pop    ebx
c000070d:	89 e8                	mov    eax,ebp
c000070f:	5e                   	pop    esi
c0000710:	5f                   	pop    edi
c0000711:	5d                   	pop    ebp
c0000712:	c3                   	ret    
c0000713:	90                   	nop
c0000714:	76 f6                	jbe    c000070c <memmove+0x90>
c0000716:	85 d2                	test   edx,edx
c0000718:	74 f2                	je     c000070c <memmove+0x90>
c000071a:	4b                   	dec    ebx
c000071b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000071e:	66 90                	xchg   ax,ax
c0000720:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000723:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000726:	4a                   	dec    edx
c0000727:	75 f7                	jne    c0000720 <memmove+0xa4>
c0000729:	5b                   	pop    ebx
c000072a:	89 e8                	mov    eax,ebp
c000072c:	5e                   	pop    esi
c000072d:	5f                   	pop    edi
c000072e:	5d                   	pop    ebp
c000072f:	c3                   	ret    
c0000730:	01 ea                	add    edx,ebp
c0000732:	89 e9                	mov    ecx,ebp
c0000734:	8a 03                	mov    al,BYTE PTR [ebx]
c0000736:	41                   	inc    ecx
c0000737:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000073a:	43                   	inc    ebx
c000073b:	39 d1                	cmp    ecx,edx
c000073d:	75 f5                	jne    c0000734 <memmove+0xb8>
c000073f:	eb cb                	jmp    c000070c <memmove+0x90>
c0000741:	8d 76 00             	lea    esi,[esi+0x0]

c0000744 <memcpy>:
c0000744:	57                   	push   edi
c0000745:	56                   	push   esi
c0000746:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000074a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000074e:	a8 03                	test   al,0x3
c0000750:	74 12                	je     c0000764 <memcpy+0x20>
c0000752:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000756:	89 c1                	mov    ecx,eax
c0000758:	fc                   	cld    
c0000759:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000075b:	29 c7                	sub    edi,eax
c000075d:	5e                   	pop    esi
c000075e:	89 f8                	mov    eax,edi
c0000760:	5f                   	pop    edi
c0000761:	c3                   	ret    
c0000762:	66 90                	xchg   ax,ax
c0000764:	89 c1                	mov    ecx,eax
c0000766:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076a:	c1 e9 02             	shr    ecx,0x2
c000076d:	fc                   	cld    
c000076e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000770:	29 c7                	sub    edi,eax
c0000772:	5e                   	pop    esi
c0000773:	89 f8                	mov    eax,edi
c0000775:	5f                   	pop    edi
c0000776:	c3                   	ret    
c0000777:	90                   	nop

c0000778 <memset>:
c0000778:	57                   	push   edi
c0000779:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000077d:	85 c9                	test   ecx,ecx
c000077f:	74 0b                	je     c000078c <memset+0x14>
c0000781:	fc                   	cld    
c0000782:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000786:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000078a:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000078c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000790:	5f                   	pop    edi
c0000791:	c3                   	ret    
c0000792:	66 90                	xchg   ax,ax

c0000794 <strlen>:
c0000794:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000798:	31 c0                	xor    eax,eax
c000079a:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c000079d:	74 09                	je     c00007a8 <strlen+0x14>
c000079f:	90                   	nop
c00007a0:	40                   	inc    eax
c00007a1:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00007a5:	75 f9                	jne    c00007a0 <strlen+0xc>
c00007a7:	c3                   	ret    
c00007a8:	c3                   	ret    
c00007a9:	8d 76 00             	lea    esi,[esi+0x0]

c00007ac <strpbrk>:
c00007ac:	57                   	push   edi
c00007ad:	56                   	push   esi
c00007ae:	53                   	push   ebx
c00007af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007b3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007b7:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b9:	84 db                	test   bl,bl
c00007bb:	74 21                	je     c00007de <strpbrk+0x32>
c00007bd:	8a 07                	mov    al,BYTE PTR [edi]
c00007bf:	84 c0                	test   al,al
c00007c1:	74 14                	je     c00007d7 <strpbrk+0x2b>
c00007c3:	38 d8                	cmp    al,bl
c00007c5:	74 19                	je     c00007e0 <strpbrk+0x34>
c00007c7:	89 fa                	mov    edx,edi
c00007c9:	eb 05                	jmp    c00007d0 <strpbrk+0x24>
c00007cb:	90                   	nop
c00007cc:	38 d9                	cmp    cl,bl
c00007ce:	74 10                	je     c00007e0 <strpbrk+0x34>
c00007d0:	42                   	inc    edx
c00007d1:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007d3:	84 c9                	test   cl,cl
c00007d5:	75 f5                	jne    c00007cc <strpbrk+0x20>
c00007d7:	46                   	inc    esi
c00007d8:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007da:	84 db                	test   bl,bl
c00007dc:	75 e1                	jne    c00007bf <strpbrk+0x13>
c00007de:	31 f6                	xor    esi,esi
c00007e0:	89 f0                	mov    eax,esi
c00007e2:	5b                   	pop    ebx
c00007e3:	5e                   	pop    esi
c00007e4:	5f                   	pop    edi
c00007e5:	c3                   	ret    
c00007e6:	66 90                	xchg   ax,ax

c00007e8 <strtok>:
c00007e8:	56                   	push   esi
c00007e9:	53                   	push   ebx
c00007ea:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007ee:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007f2:	85 db                	test   ebx,ebx
c00007f4:	75 07                	jne    c00007fd <strtok+0x15>
c00007f6:	eb 2c                	jmp    c0000824 <strtok+0x3c>
c00007f8:	43                   	inc    ebx
c00007f9:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007fd:	56                   	push   esi
c00007fe:	53                   	push   ebx
c00007ff:	e8 a8 ff ff ff       	call   c00007ac <strpbrk>
c0000804:	5a                   	pop    edx
c0000805:	a3 e8 df 02 c0       	mov    ds:0xc002dfe8,eax
c000080a:	59                   	pop    ecx
c000080b:	39 d8                	cmp    eax,ebx
c000080d:	74 e9                	je     c00007f8 <strtok+0x10>
c000080f:	85 c0                	test   eax,eax
c0000811:	74 1b                	je     c000082e <strtok+0x46>
c0000813:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000816:	8d 50 01             	lea    edx,[eax+0x1]
c0000819:	89 d8                	mov    eax,ebx
c000081b:	89 15 e8 df 02 c0    	mov    DWORD PTR ds:0xc002dfe8,edx
c0000821:	5b                   	pop    ebx
c0000822:	5e                   	pop    esi
c0000823:	c3                   	ret    
c0000824:	8b 1d e8 df 02 c0    	mov    ebx,DWORD PTR ds:0xc002dfe8
c000082a:	85 db                	test   ebx,ebx
c000082c:	75 cf                	jne    c00007fd <strtok+0x15>
c000082e:	31 c0                	xor    eax,eax
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	90                   	nop

c0000834 <strcpy>:
c0000834:	53                   	push   ebx
c0000835:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000839:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000083d:	89 c3                	mov    ebx,eax
c000083f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000841:	84 d2                	test   dl,dl
c0000843:	74 0d                	je     c0000852 <strcpy+0x1e>
c0000845:	8d 76 00             	lea    esi,[esi+0x0]
c0000848:	88 13                	mov    BYTE PTR [ebx],dl
c000084a:	41                   	inc    ecx
c000084b:	43                   	inc    ebx
c000084c:	8a 11                	mov    dl,BYTE PTR [ecx]
c000084e:	84 d2                	test   dl,dl
c0000850:	75 f6                	jne    c0000848 <strcpy+0x14>
c0000852:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000855:	5b                   	pop    ebx
c0000856:	c3                   	ret    
c0000857:	90                   	nop

c0000858 <strncpy>:
c0000858:	55                   	push   ebp
c0000859:	57                   	push   edi
c000085a:	56                   	push   esi
c000085b:	53                   	push   ebx
c000085c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000860:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000864:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000868:	85 c0                	test   eax,eax
c000086a:	74 39                	je     c00008a5 <strncpy+0x4d>
c000086c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000086e:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000871:	8d 55 01             	lea    edx,[ebp+0x1]
c0000874:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000877:	84 db                	test   bl,bl
c0000879:	74 31                	je     c00008ac <strncpy+0x54>
c000087b:	85 c9                	test   ecx,ecx
c000087d:	74 26                	je     c00008a5 <strncpy+0x4d>
c000087f:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000882:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000885:	8d 55 02             	lea    edx,[ebp+0x2]
c0000888:	8d 46 02             	lea    eax,[esi+0x2]
c000088b:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c000088e:	84 db                	test   bl,bl
c0000890:	75 0f                	jne    c00008a1 <strncpy+0x49>
c0000892:	eb 18                	jmp    c00008ac <strncpy+0x54>
c0000894:	40                   	inc    eax
c0000895:	42                   	inc    edx
c0000896:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000899:	49                   	dec    ecx
c000089a:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000089d:	84 db                	test   bl,bl
c000089f:	74 0b                	je     c00008ac <strncpy+0x54>
c00008a1:	85 c9                	test   ecx,ecx
c00008a3:	75 ef                	jne    c0000894 <strncpy+0x3c>
c00008a5:	5b                   	pop    ebx
c00008a6:	89 e8                	mov    eax,ebp
c00008a8:	5e                   	pop    esi
c00008a9:	5f                   	pop    edi
c00008aa:	5d                   	pop    ebp
c00008ab:	c3                   	ret    
c00008ac:	85 c9                	test   ecx,ecx
c00008ae:	74 f5                	je     c00008a5 <strncpy+0x4d>
c00008b0:	fc                   	cld    
c00008b1:	31 c0                	xor    eax,eax
c00008b3:	89 d7                	mov    edi,edx
c00008b5:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00008b7:	89 e8                	mov    eax,ebp
c00008b9:	5b                   	pop    ebx
c00008ba:	5e                   	pop    esi
c00008bb:	5f                   	pop    edi
c00008bc:	5d                   	pop    ebp
c00008bd:	c3                   	ret    
c00008be:	66 90                	xchg   ax,ax

c00008c0 <strcmp>:
c00008c0:	56                   	push   esi
c00008c1:	53                   	push   ebx
c00008c2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00008c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008ca:	8a 16                	mov    dl,BYTE PTR [esi]
c00008cc:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008cf:	38 d1                	cmp    cl,dl
c00008d1:	75 1d                	jne    c00008f0 <strcmp+0x30>
c00008d3:	84 c9                	test   cl,cl
c00008d5:	74 21                	je     c00008f8 <strcmp+0x38>
c00008d7:	b8 01 00 00 00       	mov    eax,0x1
c00008dc:	eb 07                	jmp    c00008e5 <strcmp+0x25>
c00008de:	66 90                	xchg   ax,ax
c00008e0:	40                   	inc    eax
c00008e1:	84 d2                	test   dl,dl
c00008e3:	74 13                	je     c00008f8 <strcmp+0x38>
c00008e5:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008e8:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 f0                	je     c00008e0 <strcmp+0x20>
c00008f0:	0f b6 c2             	movzx  eax,dl
c00008f3:	5b                   	pop    ebx
c00008f4:	29 c8                	sub    eax,ecx
c00008f6:	5e                   	pop    esi
c00008f7:	c3                   	ret    
c00008f8:	31 c0                	xor    eax,eax
c00008fa:	5b                   	pop    ebx
c00008fb:	5e                   	pop    esi
c00008fc:	c3                   	ret    
c00008fd:	8d 76 00             	lea    esi,[esi+0x0]

c0000900 <strchr>:
c0000900:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000904:	8a 10                	mov    dl,BYTE PTR [eax]
c0000906:	84 d2                	test   dl,dl
c0000908:	74 15                	je     c000091f <strchr+0x1f>
c000090a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000090e:	38 ca                	cmp    dl,cl
c0000910:	75 06                	jne    c0000918 <strchr+0x18>
c0000912:	eb 0e                	jmp    c0000922 <strchr+0x22>
c0000914:	38 ca                	cmp    dl,cl
c0000916:	74 09                	je     c0000921 <strchr+0x21>
c0000918:	40                   	inc    eax
c0000919:	8a 10                	mov    dl,BYTE PTR [eax]
c000091b:	84 d2                	test   dl,dl
c000091d:	75 f5                	jne    c0000914 <strchr+0x14>
c000091f:	31 c0                	xor    eax,eax
c0000921:	c3                   	ret    
c0000922:	c3                   	ret    
c0000923:	90                   	nop

c0000924 <strncmp>:
c0000924:	57                   	push   edi
c0000925:	56                   	push   esi
c0000926:	53                   	push   ebx
c0000927:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000092b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000092f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000933:	85 ff                	test   edi,edi
c0000935:	74 28                	je     c000095f <strncmp+0x3b>
c0000937:	8a 16                	mov    dl,BYTE PTR [esi]
c0000939:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000093c:	38 d1                	cmp    cl,dl
c000093e:	75 28                	jne    c0000968 <strncmp+0x44>
c0000940:	8d 46 01             	lea    eax,[esi+0x1]
c0000943:	84 c9                	test   cl,cl
c0000945:	74 18                	je     c000095f <strncmp+0x3b>
c0000947:	01 fe                	add    esi,edi
c0000949:	eb 0f                	jmp    c000095a <strncmp+0x36>
c000094b:	90                   	nop
c000094c:	8a 10                	mov    dl,BYTE PTR [eax]
c000094e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000951:	38 ca                	cmp    dl,cl
c0000953:	75 13                	jne    c0000968 <strncmp+0x44>
c0000955:	40                   	inc    eax
c0000956:	84 d2                	test   dl,dl
c0000958:	74 05                	je     c000095f <strncmp+0x3b>
c000095a:	43                   	inc    ebx
c000095b:	39 c6                	cmp    esi,eax
c000095d:	75 ed                	jne    c000094c <strncmp+0x28>
c000095f:	5b                   	pop    ebx
c0000960:	31 c0                	xor    eax,eax
c0000962:	5e                   	pop    esi
c0000963:	5f                   	pop    edi
c0000964:	c3                   	ret    
c0000965:	8d 76 00             	lea    esi,[esi+0x0]
c0000968:	5b                   	pop    ebx
c0000969:	0f b6 c2             	movzx  eax,dl
c000096c:	5e                   	pop    esi
c000096d:	29 c8                	sub    eax,ecx
c000096f:	5f                   	pop    edi
c0000970:	c3                   	ret    
c0000971:	8d 76 00             	lea    esi,[esi+0x0]

c0000974 <strcat>:
c0000974:	56                   	push   esi
c0000975:	53                   	push   ebx
c0000976:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000097a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000097e:	89 c3                	mov    ebx,eax
c0000980:	eb 04                	jmp    c0000986 <strcat+0x12>
c0000982:	66 90                	xchg   ax,ax
c0000984:	89 d3                	mov    ebx,edx
c0000986:	8d 53 01             	lea    edx,[ebx+0x1]
c0000989:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000098d:	75 f5                	jne    c0000984 <strcat+0x10>
c000098f:	31 d2                	xor    edx,edx
c0000991:	8d 76 00             	lea    esi,[esi+0x0]
c0000994:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000997:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c000099a:	42                   	inc    edx
c000099b:	84 c9                	test   cl,cl
c000099d:	75 f5                	jne    c0000994 <strcat+0x20>
c000099f:	5b                   	pop    ebx
c00009a0:	5e                   	pop    esi
c00009a1:	c3                   	ret    
c00009a2:	66 90                	xchg   ax,ax

c00009a4 <strncat>:
c00009a4:	56                   	push   esi
c00009a5:	53                   	push   ebx
c00009a6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00009aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00009ae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00009b2:	85 f6                	test   esi,esi
c00009b4:	74 1e                	je     c00009d4 <strncat+0x30>
c00009b6:	89 c2                	mov    edx,eax
c00009b8:	42                   	inc    edx
c00009b9:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00009bd:	75 f9                	jne    c00009b8 <strncat+0x14>
c00009bf:	01 ce                	add    esi,ecx
c00009c1:	eb 06                	jmp    c00009c9 <strncat+0x25>
c00009c3:	90                   	nop
c00009c4:	39 f1                	cmp    ecx,esi
c00009c6:	74 10                	je     c00009d8 <strncat+0x34>
c00009c8:	42                   	inc    edx
c00009c9:	41                   	inc    ecx
c00009ca:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009cd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009d0:	84 db                	test   bl,bl
c00009d2:	75 f0                	jne    c00009c4 <strncat+0x20>
c00009d4:	5b                   	pop    ebx
c00009d5:	5e                   	pop    esi
c00009d6:	c3                   	ret    
c00009d7:	90                   	nop
c00009d8:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009db:	5b                   	pop    ebx
c00009dc:	5e                   	pop    esi
c00009dd:	c3                   	ret    
c00009de:	66 90                	xchg   ax,ax

c00009e0 <strstr>:
c00009e0:	57                   	push   edi
c00009e1:	56                   	push   esi
c00009e2:	53                   	push   ebx
c00009e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009e7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009eb:	57                   	push   edi
c00009ec:	e8 a3 fd ff ff       	call   c0000794 <strlen>
c00009f1:	59                   	pop    ecx
c00009f2:	85 c0                	test   eax,eax
c00009f4:	74 2a                	je     c0000a20 <strstr+0x40>
c00009f6:	89 c6                	mov    esi,eax
c00009f8:	eb 12                	jmp    c0000a0c <strstr+0x2c>
c00009fa:	66 90                	xchg   ax,ax
c00009fc:	56                   	push   esi
c00009fd:	57                   	push   edi
c00009fe:	53                   	push   ebx
c00009ff:	e8 3c fc ff ff       	call   c0000640 <memcmp>
c0000a04:	83 c4 0c             	add    esp,0xc
c0000a07:	85 c0                	test   eax,eax
c0000a09:	74 15                	je     c0000a20 <strstr+0x40>
c0000a0b:	43                   	inc    ebx
c0000a0c:	53                   	push   ebx
c0000a0d:	e8 82 fd ff ff       	call   c0000794 <strlen>
c0000a12:	5a                   	pop    edx
c0000a13:	39 f0                	cmp    eax,esi
c0000a15:	73 e5                	jae    c00009fc <strstr+0x1c>
c0000a17:	5b                   	pop    ebx
c0000a18:	31 c0                	xor    eax,eax
c0000a1a:	5e                   	pop    esi
c0000a1b:	5f                   	pop    edi
c0000a1c:	c3                   	ret    
c0000a1d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a20:	89 d8                	mov    eax,ebx
c0000a22:	5b                   	pop    ebx
c0000a23:	5e                   	pop    esi
c0000a24:	5f                   	pop    edi
c0000a25:	c3                   	ret    
c0000a26:	66 90                	xchg   ax,ax

c0000a28 <toupper>:
c0000a28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a2c:	0f b6 d0             	movzx  edx,al
c0000a2f:	f6 82 20 92 02 c0 02 	test   BYTE PTR [edx-0x3ffd6de0],0x2
c0000a36:	74 03                	je     c0000a3b <toupper+0x13>
c0000a38:	83 e8 20             	sub    eax,0x20
c0000a3b:	c3                   	ret    

c0000a3c <tolower>:
c0000a3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a40:	0f b6 d0             	movzx  edx,al
c0000a43:	f6 82 20 92 02 c0 01 	test   BYTE PTR [edx-0x3ffd6de0],0x1
c0000a4a:	74 03                	je     c0000a4f <tolower+0x13>
c0000a4c:	83 c0 20             	add    eax,0x20
c0000a4f:	c3                   	ret    

c0000a50 <simple_strtoul>:
c0000a50:	55                   	push   ebp
c0000a51:	57                   	push   edi
c0000a52:	56                   	push   esi
c0000a53:	53                   	push   ebx
c0000a54:	83 ec 08             	sub    esp,0x8
c0000a57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a5b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a5f:	90                   	nop
c0000a60:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a63:	f6 82 20 92 02 c0 08 	test   BYTE PTR [edx-0x3ffd6de0],0x8
c0000a6a:	75 05                	jne    c0000a71 <simple_strtoul+0x21>
c0000a6c:	80 fa 09             	cmp    dl,0x9
c0000a6f:	75 03                	jne    c0000a74 <simple_strtoul+0x24>
c0000a71:	41                   	inc    ecx
c0000a72:	eb ec                	jmp    c0000a60 <simple_strtoul+0x10>
c0000a74:	80 fa 2d             	cmp    dl,0x2d
c0000a77:	0f 84 1b 01 00 00    	je     c0000b98 <simple_strtoul+0x148>
c0000a7d:	80 fa 2b             	cmp    dl,0x2b
c0000a80:	0f 84 c2 00 00 00    	je     c0000b48 <simple_strtoul+0xf8>
c0000a86:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a8e:	85 f6                	test   esi,esi
c0000a90:	0f 85 c3 00 00 00    	jne    c0000b59 <simple_strtoul+0x109>
c0000a96:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a98:	80 fa 30             	cmp    dl,0x30
c0000a9b:	0f 84 47 01 00 00    	je     c0000be8 <simple_strtoul+0x198>
c0000aa1:	be 0a 00 00 00       	mov    esi,0xa
c0000aa6:	84 d2                	test   dl,dl
c0000aa8:	0f 84 6f 01 00 00    	je     c0000c1d <simple_strtoul+0x1cd>
c0000aae:	31 ed                	xor    ebp,ebp
c0000ab0:	31 ff                	xor    edi,edi
c0000ab2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000ab9:	eb 2b                	jmp    c0000ae6 <simple_strtoul+0x96>
c0000abb:	90                   	nop
c0000abc:	83 eb 30             	sub    ebx,0x30
c0000abf:	39 f3                	cmp    ebx,esi
c0000ac1:	73 4d                	jae    c0000b10 <simple_strtoul+0xc0>
c0000ac3:	31 d2                	xor    edx,edx
c0000ac5:	89 d8                	mov    eax,ebx
c0000ac7:	f7 d0                	not    eax
c0000ac9:	f7 f6                	div    esi
c0000acb:	39 f8                	cmp    eax,edi
c0000acd:	0f 82 b1 00 00 00    	jb     c0000b84 <simple_strtoul+0x134>
c0000ad3:	0f af fe             	imul   edi,esi
c0000ad6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000add:	01 df                	add    edi,ebx
c0000adf:	41                   	inc    ecx
c0000ae0:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000ae2:	84 d2                	test   dl,dl
c0000ae4:	74 2a                	je     c0000b10 <simple_strtoul+0xc0>
c0000ae6:	0f b6 da             	movzx  ebx,dl
c0000ae9:	f6 83 20 92 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6de0],0x4
c0000af0:	75 ca                	jne    c0000abc <simple_strtoul+0x6c>
c0000af2:	0f be d2             	movsx  edx,dl
c0000af5:	52                   	push   edx
c0000af6:	e8 2d ff ff ff       	call   c0000a28 <toupper>
c0000afb:	5b                   	pop    ebx
c0000afc:	0f b6 d0             	movzx  edx,al
c0000aff:	f6 82 20 92 02 c0 01 	test   BYTE PTR [edx-0x3ffd6de0],0x1
c0000b06:	74 08                	je     c0000b10 <simple_strtoul+0xc0>
c0000b08:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000b0b:	39 f3                	cmp    ebx,esi
c0000b0d:	72 b4                	jb     c0000ac3 <simple_strtoul+0x73>
c0000b0f:	90                   	nop
c0000b10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b14:	85 c0                	test   eax,eax
c0000b16:	74 14                	je     c0000b2c <simple_strtoul+0xdc>
c0000b18:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000b1b:	09 f8                	or     eax,edi
c0000b1d:	75 71                	jne    c0000b90 <simple_strtoul+0x140>
c0000b1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b23:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b27:	31 ff                	xor    edi,edi
c0000b29:	89 30                	mov    DWORD PTR [eax],esi
c0000b2b:	90                   	nop
c0000b2c:	4d                   	dec    ebp
c0000b2d:	75 05                	jne    c0000b34 <simple_strtoul+0xe4>
c0000b2f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b34:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b39:	75 02                	jne    c0000b3d <simple_strtoul+0xed>
c0000b3b:	f7 df                	neg    edi
c0000b3d:	83 c4 08             	add    esp,0x8
c0000b40:	89 f8                	mov    eax,edi
c0000b42:	5b                   	pop    ebx
c0000b43:	5e                   	pop    esi
c0000b44:	5f                   	pop    edi
c0000b45:	5d                   	pop    ebp
c0000b46:	c3                   	ret    
c0000b47:	90                   	nop
c0000b48:	41                   	inc    ecx
c0000b49:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b51:	85 f6                	test   esi,esi
c0000b53:	0f 84 3d ff ff ff    	je     c0000a96 <simple_strtoul+0x46>
c0000b59:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b5c:	83 f8 22             	cmp    eax,0x22
c0000b5f:	77 6a                	ja     c0000bcb <simple_strtoul+0x17b>
c0000b61:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b63:	83 fe 08             	cmp    esi,0x8
c0000b66:	0f 84 a2 00 00 00    	je     c0000c0e <simple_strtoul+0x1be>
c0000b6c:	83 fe 10             	cmp    esi,0x10
c0000b6f:	0f 85 31 ff ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000b75:	80 fa 30             	cmp    dl,0x30
c0000b78:	74 2c                	je     c0000ba6 <simple_strtoul+0x156>
c0000b7a:	be 10 00 00 00       	mov    esi,0x10
c0000b7f:	e9 22 ff ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000b84:	bd 01 00 00 00       	mov    ebp,0x1
c0000b89:	31 ff                	xor    edi,edi
c0000b8b:	e9 4f ff ff ff       	jmp    c0000adf <simple_strtoul+0x8f>
c0000b90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b94:	89 08                	mov    DWORD PTR [eax],ecx
c0000b96:	eb 94                	jmp    c0000b2c <simple_strtoul+0xdc>
c0000b98:	41                   	inc    ecx
c0000b99:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000ba1:	e9 e8 fe ff ff       	jmp    c0000a8e <simple_strtoul+0x3e>
c0000ba6:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000baa:	88 04 24             	mov    BYTE PTR [esp],al
c0000bad:	50                   	push   eax
c0000bae:	e8 89 fe ff ff       	call   c0000a3c <tolower>
c0000bb3:	5e                   	pop    esi
c0000bb4:	83 f8 78             	cmp    eax,0x78
c0000bb7:	0f 84 84 00 00 00    	je     c0000c41 <simple_strtoul+0x1f1>
c0000bbd:	41                   	inc    ecx
c0000bbe:	be 10 00 00 00       	mov    esi,0x10
c0000bc3:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bc6:	e9 db fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000bcb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000bcf:	85 ff                	test   edi,edi
c0000bd1:	74 5c                	je     c0000c2f <simple_strtoul+0x1df>
c0000bd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bd7:	85 c9                	test   ecx,ecx
c0000bd9:	75 4e                	jne    c0000c29 <simple_strtoul+0x1d9>
c0000bdb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000be1:	31 ff                	xor    edi,edi
c0000be3:	e9 4c ff ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000be8:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bec:	88 04 24             	mov    BYTE PTR [esp],al
c0000bef:	50                   	push   eax
c0000bf0:	e8 47 fe ff ff       	call   c0000a3c <tolower>
c0000bf5:	5d                   	pop    ebp
c0000bf6:	83 f8 78             	cmp    eax,0x78
c0000bf9:	74 3b                	je     c0000c36 <simple_strtoul+0x1e6>
c0000bfb:	41                   	inc    ecx
c0000bfc:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bff:	80 fa 30             	cmp    dl,0x30
c0000c02:	74 13                	je     c0000c17 <simple_strtoul+0x1c7>
c0000c04:	be 08 00 00 00       	mov    esi,0x8
c0000c09:	e9 98 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000c0e:	80 fa 30             	cmp    dl,0x30
c0000c11:	0f 85 8f fe ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000c17:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000c1a:	41                   	inc    ecx
c0000c1b:	eb e7                	jmp    c0000c04 <simple_strtoul+0x1b4>
c0000c1d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000c21:	85 d2                	test   edx,edx
c0000c23:	74 0a                	je     c0000c2f <simple_strtoul+0x1df>
c0000c25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c29:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c2d:	89 30                	mov    DWORD PTR [eax],esi
c0000c2f:	31 ff                	xor    edi,edi
c0000c31:	e9 fe fe ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000c36:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c39:	83 c1 02             	add    ecx,0x2
c0000c3c:	e9 34 ff ff ff       	jmp    c0000b75 <simple_strtoul+0x125>
c0000c41:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c44:	be 10 00 00 00       	mov    esi,0x10
c0000c49:	83 c1 02             	add    ecx,0x2
c0000c4c:	e9 55 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>

c0000c51 <largebin_index>:
c0000c51:	89 c2                	mov    edx,eax
c0000c53:	c1 ea 08             	shr    edx,0x8
c0000c56:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c5c:	77 10                	ja     c0000c6e <largebin_index+0x1d>
c0000c5e:	0f bd d2             	bsr    edx,edx
c0000c61:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c64:	d3 e8                	shr    eax,cl
c0000c66:	83 e0 03             	and    eax,0x3
c0000c69:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c6d:	c3                   	ret    
c0000c6e:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c73:	c3                   	ret    

c0000c74 <malloc_init_state>:
c0000c74:	53                   	push   ebx
c0000c75:	8d 50 34             	lea    edx,[eax+0x34]
c0000c78:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c7e:	89 d1                	mov    ecx,edx
c0000c80:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c83:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c86:	83 c2 08             	add    edx,0x8
c0000c89:	39 da                	cmp    edx,ebx
c0000c8b:	75 f3                	jne    c0000c80 <malloc_init_state+0xc>
c0000c8d:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c8f:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c99:	83 e2 03             	and    edx,0x3
c0000c9c:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000ca6:	83 ca 48             	or     edx,0x48
c0000ca9:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000cb3:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000cbd:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000cc4:	89 10                	mov    DWORD PTR [eax],edx
c0000cc6:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000cc9:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cd3:	5b                   	pop    ebx
c0000cd4:	c3                   	ret    

c0000cd5 <malloc_consolidate>:
c0000cd5:	8b 10                	mov    edx,DWORD PTR [eax]
c0000cd7:	85 d2                	test   edx,edx
c0000cd9:	0f 84 d8 00 00 00    	je     c0000db7 <malloc_consolidate+0xe2>
c0000cdf:	55                   	push   ebp
c0000ce0:	83 e2 fd             	and    edx,0xfffffffd
c0000ce3:	57                   	push   edi
c0000ce4:	89 c5                	mov    ebp,eax
c0000ce6:	56                   	push   esi
c0000ce7:	8d 78 34             	lea    edi,[eax+0x34]
c0000cea:	53                   	push   ebx
c0000ceb:	83 ec 10             	sub    esp,0x10
c0000cee:	89 10                	mov    DWORD PTR [eax],edx
c0000cf0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cf4:	c1 ea 03             	shr    edx,0x3
c0000cf7:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cfb:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cff:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000d02:	85 d2                	test   edx,edx
c0000d04:	0f 84 98 00 00 00    	je     c0000da2 <malloc_consolidate+0xcd>
c0000d0a:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d11:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d14:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d17:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d1b:	89 f9                	mov    ecx,edi
c0000d1d:	83 e1 fe             	and    ecx,0xfffffffe
c0000d20:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d23:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d26:	83 e3 fc             	and    ebx,0xfffffffc
c0000d29:	83 e7 01             	and    edi,0x1
c0000d2c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d2f:	75 14                	jne    c0000d45 <malloc_consolidate+0x70>
c0000d31:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d33:	29 fa                	sub    edx,edi
c0000d35:	01 f9                	add    ecx,edi
c0000d37:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d3a:	89 fb                	mov    ebx,edi
c0000d3c:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d3f:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d42:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d45:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d48:	74 40                	je     c0000d8a <malloc_consolidate+0xb5>
c0000d4a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d4d:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d50:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d54:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d57:	83 e7 01             	and    edi,0x1
c0000d5a:	75 0e                	jne    c0000d6a <malloc_consolidate+0x95>
c0000d5c:	01 d9                	add    ecx,ebx
c0000d5e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d61:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d64:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d67:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d6a:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d6d:	89 ce                	mov    esi,ecx
c0000d6f:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d72:	83 ce 01             	or     esi,0x1
c0000d75:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d78:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d7b:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d7e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d82:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d85:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d88:	eb 0c                	jmp    c0000d96 <malloc_consolidate+0xc1>
c0000d8a:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d8d:	83 c9 01             	or     ecx,0x1
c0000d90:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d93:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d9a:	85 d2                	test   edx,edx
c0000d9c:	0f 85 6f ff ff ff    	jne    c0000d11 <malloc_consolidate+0x3c>
c0000da2:	83 c5 04             	add    ebp,0x4
c0000da5:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000da9:	0f 85 50 ff ff ff    	jne    c0000cff <malloc_consolidate+0x2a>
c0000daf:	83 c4 10             	add    esp,0x10
c0000db2:	5b                   	pop    ebx
c0000db3:	5e                   	pop    esi
c0000db4:	5f                   	pop    edi
c0000db5:	5d                   	pop    ebp
c0000db6:	c3                   	ret    
c0000db7:	e9 b8 fe ff ff       	jmp    c0000c74 <malloc_init_state>

c0000dbc <dlfree>:
c0000dbc:	57                   	push   edi
c0000dbd:	56                   	push   esi
c0000dbe:	53                   	push   ebx
c0000dbf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000dc3:	85 db                	test   ebx,ebx
c0000dc5:	0f 84 e2 00 00 00    	je     c0000ead <dlfree+0xf1>
c0000dcb:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000dce:	8b 0d 00 e0 02 c0    	mov    ecx,DWORD PTR ds:0xc002e000
c0000dd4:	89 f0                	mov    eax,esi
c0000dd6:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000dd9:	83 e0 fc             	and    eax,0xfffffffc
c0000ddc:	39 c1                	cmp    ecx,eax
c0000dde:	72 24                	jb     c0000e04 <dlfree+0x48>
c0000de0:	83 c9 03             	or     ecx,0x3
c0000de3:	c1 e8 03             	shr    eax,0x3
c0000de6:	89 0d 00 e0 02 c0    	mov    DWORD PTR ds:0xc002e000,ecx
c0000dec:	83 e8 02             	sub    eax,0x2
c0000def:	8b 0c 85 04 e0 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1ffc]
c0000df6:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000df8:	89 14 85 04 e0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1ffc],edx
c0000dff:	e9 a9 00 00 00       	jmp    c0000ead <dlfree+0xf1>
c0000e04:	83 e6 02             	and    esi,0x2
c0000e07:	0f 85 a0 00 00 00    	jne    c0000ead <dlfree+0xf1>
c0000e0d:	83 c9 01             	or     ecx,0x1
c0000e10:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e13:	89 0d 00 e0 02 c0    	mov    DWORD PTR ds:0xc002e000,ecx
c0000e19:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e1c:	83 e1 fc             	and    ecx,0xfffffffc
c0000e1f:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e23:	75 13                	jne    c0000e38 <dlfree+0x7c>
c0000e25:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e28:	29 da                	sub    edx,ebx
c0000e2a:	01 d8                	add    eax,ebx
c0000e2c:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e2f:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e32:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e35:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e38:	39 35 2c e0 02 c0    	cmp    DWORD PTR ds:0xc002e02c,esi
c0000e3e:	74 40                	je     c0000e80 <dlfree+0xc4>
c0000e40:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e44:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e47:	80 e3 01             	and    bl,0x1
c0000e4a:	75 0e                	jne    c0000e5a <dlfree+0x9e>
c0000e4c:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e4f:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e52:	01 c8                	add    eax,ecx
c0000e54:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e57:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e5a:	8b 0d 3c e0 02 c0    	mov    ecx,DWORD PTR ds:0xc002e03c
c0000e60:	c7 42 0c 34 e0 02 c0 	mov    DWORD PTR [edx+0xc],0xc002e034
c0000e67:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e6a:	89 15 3c e0 02 c0    	mov    DWORD PTR ds:0xc002e03c,edx
c0000e70:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e73:	89 c1                	mov    ecx,eax
c0000e75:	83 c9 01             	or     ecx,0x1
c0000e78:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e7b:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e7e:	eb 10                	jmp    c0000e90 <dlfree+0xd4>
c0000e80:	01 c8                	add    eax,ecx
c0000e82:	89 c1                	mov    ecx,eax
c0000e84:	83 c9 01             	or     ecx,0x1
c0000e87:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e8a:	89 15 2c e0 02 c0    	mov    DWORD PTR ds:0xc002e02c,edx
c0000e90:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e95:	76 16                	jbe    c0000ead <dlfree+0xf1>
c0000e97:	f6 05 00 e0 02 c0 02 	test   BYTE PTR ds:0xc002e000,0x2
c0000e9e:	74 0d                	je     c0000ead <dlfree+0xf1>
c0000ea0:	5b                   	pop    ebx
c0000ea1:	b8 00 e0 02 c0       	mov    eax,0xc002e000
c0000ea6:	5e                   	pop    esi
c0000ea7:	5f                   	pop    edi
c0000ea8:	e9 28 fe ff ff       	jmp    c0000cd5 <malloc_consolidate>
c0000ead:	5b                   	pop    ebx
c0000eae:	5e                   	pop    esi
c0000eaf:	5f                   	pop    edi
c0000eb0:	c3                   	ret    

c0000eb1 <sYSMALLOc>:
c0000eb1:	55                   	push   ebp
c0000eb2:	57                   	push   edi
c0000eb3:	56                   	push   esi
c0000eb4:	53                   	push   ebx
c0000eb5:	89 d3                	mov    ebx,edx
c0000eb7:	83 ec 2c             	sub    esp,0x2c
c0000eba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000ebe:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000ec4:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000ec7:	8d 42 ff             	lea    eax,[edx-0x1]
c0000eca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ece:	74 1f                	je     c0000eef <sYSMALLOc+0x3e>
c0000ed0:	89 d8                	mov    eax,ebx
c0000ed2:	e8 fe fd ff ff       	call   c0000cd5 <malloc_consolidate>
c0000ed7:	83 ec 0c             	sub    esp,0xc
c0000eda:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ede:	83 e8 07             	sub    eax,0x7
c0000ee1:	50                   	push   eax
c0000ee2:	e8 30 02 00 00       	call   c0001117 <dlmalloc>
c0000ee7:	83 c4 10             	add    esp,0x10
c0000eea:	e9 20 02 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000eef:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000ef2:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ef8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000efb:	83 e0 fc             	and    eax,0xfffffffc
c0000efe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000f06:	83 c0 10             	add    eax,0x10
c0000f09:	01 c1                	add    ecx,eax
c0000f0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f0f:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f16:	74 04                	je     c0000f1c <sYSMALLOc+0x6b>
c0000f18:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000f1c:	f7 da                	neg    edx
c0000f1e:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000f22:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000f26:	21 d1                	and    ecx,edx
c0000f28:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f2c:	7f 07                	jg     c0000f35 <sYSMALLOc+0x84>
c0000f2e:	31 c0                	xor    eax,eax
c0000f30:	e9 da 01 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000f35:	83 ec 0c             	sub    esp,0xc
c0000f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f3c:	e8 56 e7 00 00       	call   c000f697 <sbrk>
c0000f41:	83 c4 10             	add    esp,0x10
c0000f44:	89 c6                	mov    esi,eax
c0000f46:	83 f8 ff             	cmp    eax,0xffffffff
c0000f49:	74 e3                	je     c0000f2e <sYSMALLOc+0x7d>
c0000f4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4f:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f53:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f56:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f5c:	39 f1                	cmp    ecx,esi
c0000f5e:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f64:	75 13                	jne    c0000f79 <sYSMALLOc+0xc8>
c0000f66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f6a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f6e:	83 c8 01             	or     eax,0x1
c0000f71:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f74:	e9 3e 01 00 00       	jmp    c00010b7 <sYSMALLOc+0x206>
c0000f79:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f7f:	88 d0                	mov    al,dl
c0000f81:	83 e0 01             	and    eax,0x1
c0000f84:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f89:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f8d:	0f 95 c0             	setne  al
c0000f90:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f94:	39 f1                	cmp    ecx,esi
c0000f96:	76 12                	jbe    c0000faa <sYSMALLOc+0xf9>
c0000f98:	84 c0                	test   al,al
c0000f9a:	74 0e                	je     c0000faa <sYSMALLOc+0xf9>
c0000f9c:	83 e2 fe             	and    edx,0xfffffffe
c0000f9f:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000fa5:	e9 83 00 00 00       	jmp    c000102d <sYSMALLOc+0x17c>
c0000faa:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000faf:	74 7c                	je     c000102d <sYSMALLOc+0x17c>
c0000fb1:	84 c0                	test   al,al
c0000fb3:	74 0c                	je     c0000fc1 <sYSMALLOc+0x110>
c0000fb5:	89 f0                	mov    eax,esi
c0000fb7:	29 c8                	sub    eax,ecx
c0000fb9:	01 e8                	add    eax,ebp
c0000fbb:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000fc1:	89 f2                	mov    edx,esi
c0000fc3:	83 e2 07             	and    edx,0x7
c0000fc6:	74 0c                	je     c0000fd4 <sYSMALLOc+0x123>
c0000fc8:	b8 08 00 00 00       	mov    eax,0x8
c0000fcd:	29 d0                	sub    eax,edx
c0000fcf:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000fd2:	eb 04                	jmp    c0000fd8 <sYSMALLOc+0x127>
c0000fd4:	89 f5                	mov    ebp,esi
c0000fd6:	31 c0                	xor    eax,eax
c0000fd8:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fdc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fe0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe4:	01 c1                	add    ecx,eax
c0000fe6:	83 ec 0c             	sub    esp,0xc
c0000fe9:	01 f1                	add    ecx,esi
c0000feb:	01 ca                	add    edx,ecx
c0000fed:	29 c8                	sub    eax,ecx
c0000fef:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ff3:	01 c2                	add    edx,eax
c0000ff5:	52                   	push   edx
c0000ff6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ffa:	e8 98 e6 00 00       	call   c000f697 <sbrk>
c0000fff:	83 c4 10             	add    esp,0x10
c0001002:	83 f8 ff             	cmp    eax,0xffffffff
c0001005:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001009:	75 0f                	jne    c000101a <sYSMALLOc+0x169>
c000100b:	83 ec 0c             	sub    esp,0xc
c000100e:	6a 00                	push   0x0
c0001010:	e8 82 e6 00 00       	call   c000f697 <sbrk>
c0001015:	83 c4 10             	add    esp,0x10
c0001018:	eb 30                	jmp    c000104a <sYSMALLOc+0x199>
c000101a:	39 c6                	cmp    esi,eax
c000101c:	76 33                	jbe    c0001051 <sYSMALLOc+0x1a0>
c000101e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001022:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001029:	01 f0                	add    eax,esi
c000102b:	eb 1d                	jmp    c000104a <sYSMALLOc+0x199>
c000102d:	83 ec 0c             	sub    esp,0xc
c0001030:	89 f5                	mov    ebp,esi
c0001032:	6a 00                	push   0x0
c0001034:	e8 5e e6 00 00       	call   c000f697 <sbrk>
c0001039:	89 c2                	mov    edx,eax
c000103b:	29 f2                	sub    edx,esi
c000103d:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001041:	83 c4 10             	add    esp,0x10
c0001044:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000104a:	31 d2                	xor    edx,edx
c000104c:	83 f8 ff             	cmp    eax,0xffffffff
c000104f:	74 66                	je     c00010b7 <sYSMALLOc+0x206>
c0001051:	29 e8                	sub    eax,ebp
c0001053:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0001056:	01 d0                	add    eax,edx
c0001058:	83 c8 01             	or     eax,0x1
c000105b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000105e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001064:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001069:	74 4c                	je     c00010b7 <sYSMALLOc+0x206>
c000106b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000106f:	83 e8 0c             	sub    eax,0xc
c0001072:	83 e0 f8             	and    eax,0xfffffff8
c0001075:	89 c2                	mov    edx,eax
c0001077:	83 ca 01             	or     edx,0x1
c000107a:	83 f8 0f             	cmp    eax,0xf
c000107d:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001080:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001088:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001090:	76 25                	jbe    c00010b7 <sYSMALLOc+0x206>
c0001092:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001098:	83 ec 0c             	sub    esp,0xc
c000109b:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a5:	83 c7 08             	add    edi,0x8
c00010a8:	57                   	push   edi
c00010a9:	e8 0e fd ff ff       	call   c0000dbc <dlfree>
c00010ae:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b4:	83 c4 10             	add    esp,0x10
c00010b7:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c00010bd:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c00010c3:	73 06                	jae    c00010cb <sYSMALLOc+0x21a>
c00010c5:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010cb:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010d1:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010d7:	73 06                	jae    c00010df <sYSMALLOc+0x22e>
c00010d9:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010df:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010e2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010e5:	83 e2 fc             	and    edx,0xfffffffc
c00010e8:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010ec:	0f 82 3c fe ff ff    	jb     c0000f2e <sYSMALLOc+0x7d>
c00010f2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010f6:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010f9:	29 fa                	sub    edx,edi
c00010fb:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010fe:	83 ca 01             	or     edx,0x1
c0001101:	89 fb                	mov    ebx,edi
c0001103:	83 c0 08             	add    eax,0x8
c0001106:	83 cb 01             	or     ebx,0x1
c0001109:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000110c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000110f:	83 c4 2c             	add    esp,0x2c
c0001112:	5b                   	pop    ebx
c0001113:	5e                   	pop    esi
c0001114:	5f                   	pop    edi
c0001115:	5d                   	pop    ebp
c0001116:	c3                   	ret    

c0001117 <dlmalloc>:
c0001117:	55                   	push   ebp
c0001118:	57                   	push   edi
c0001119:	56                   	push   esi
c000111a:	53                   	push   ebx
c000111b:	83 ec 1c             	sub    esp,0x1c
c000111e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001122:	83 f8 df             	cmp    eax,0xffffffdf
c0001125:	0f 87 70 03 00 00    	ja     c000149b <dlmalloc+0x384>
c000112b:	83 c0 0b             	add    eax,0xb
c000112e:	be 10 00 00 00       	mov    esi,0x10
c0001133:	83 f8 0f             	cmp    eax,0xf
c0001136:	76 05                	jbe    c000113d <dlmalloc+0x26>
c0001138:	83 e0 f8             	and    eax,0xfffffff8
c000113b:	89 c6                	mov    esi,eax
c000113d:	8b 3d 00 e0 02 c0    	mov    edi,DWORD PTR ds:0xc002e000
c0001143:	f7 c7 01 00 00 00    	test   edi,0x1
c0001149:	75 17                	jne    c0001162 <dlmalloc+0x4b>
c000114b:	85 ff                	test   edi,edi
c000114d:	0f 85 05 03 00 00    	jne    c0001458 <dlmalloc+0x341>
c0001153:	b8 00 e0 02 c0       	mov    eax,0xc002e000
c0001158:	e8 78 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c000115d:	e9 f6 02 00 00       	jmp    c0001458 <dlmalloc+0x341>
c0001162:	39 f7                	cmp    edi,esi
c0001164:	72 1f                	jb     c0001185 <dlmalloc+0x6e>
c0001166:	89 f2                	mov    edx,esi
c0001168:	c1 ea 03             	shr    edx,0x3
c000116b:	83 ea 02             	sub    edx,0x2
c000116e:	8b 04 95 04 e0 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1ffc]
c0001175:	85 c0                	test   eax,eax
c0001177:	74 0c                	je     c0001185 <dlmalloc+0x6e>
c0001179:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000117c:	89 0c 95 04 e0 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1ffc],ecx
c0001183:	eb 30                	jmp    c00011b5 <dlmalloc+0x9e>
c0001185:	89 f0                	mov    eax,esi
c0001187:	81 fe ff 00 00 00    	cmp    esi,0xff
c000118d:	77 2e                	ja     c00011bd <dlmalloc+0xa6>
c000118f:	c1 e8 03             	shr    eax,0x3
c0001192:	8d 14 c5 34 e0 02 c0 	lea    edx,[eax*8-0x3ffd1fcc]
c0001199:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000119d:	8d 5a f8             	lea    ebx,[edx-0x8]
c00011a0:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00011a3:	39 c3                	cmp    ebx,eax
c00011a5:	74 2e                	je     c00011d5 <dlmalloc+0xbe>
c00011a7:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00011aa:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00011af:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00011b2:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00011b5:	83 c0 08             	add    eax,0x8
c00011b8:	e9 e0 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c00011bd:	e8 8f fa ff ff       	call   c0000c51 <largebin_index>
c00011c2:	83 e7 02             	and    edi,0x2
c00011c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011c9:	74 0a                	je     c00011d5 <dlmalloc+0xbe>
c00011cb:	b8 00 e0 02 c0       	mov    eax,0xc002e000
c00011d0:	e8 00 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c00011d5:	8d 46 10             	lea    eax,[esi+0x10]
c00011d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011dc:	8b 1d 40 e0 02 c0    	mov    ebx,DWORD PTR ds:0xc002e040
c00011e2:	81 fb 34 e0 02 c0    	cmp    ebx,0xc002e034
c00011e8:	0f 84 13 01 00 00    	je     c0001301 <dlmalloc+0x1ea>
c00011ee:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011f1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011f4:	83 e7 fc             	and    edi,0xfffffffc
c00011f7:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011fd:	77 4c                	ja     c000124b <dlmalloc+0x134>
c00011ff:	3d 34 e0 02 c0       	cmp    eax,0xc002e034
c0001204:	75 45                	jne    c000124b <dlmalloc+0x134>
c0001206:	39 1d 30 e0 02 c0    	cmp    DWORD PTR ds:0xc002e030,ebx
c000120c:	75 3d                	jne    c000124b <dlmalloc+0x134>
c000120e:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001212:	73 37                	jae    c000124b <dlmalloc+0x134>
c0001214:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001217:	89 fa                	mov    edx,edi
c0001219:	a3 3c e0 02 c0       	mov    ds:0xc002e03c,eax
c000121e:	a3 40 e0 02 c0       	mov    ds:0xc002e040,eax
c0001223:	a3 30 e0 02 c0       	mov    ds:0xc002e030,eax
c0001228:	29 f2                	sub    edx,esi
c000122a:	c7 40 08 34 e0 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e034
c0001231:	c7 40 0c 34 e0 02 c0 	mov    DWORD PTR [eax+0xc],0xc002e034
c0001238:	83 ce 01             	or     esi,0x1
c000123b:	89 d1                	mov    ecx,edx
c000123d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001240:	83 c9 01             	or     ecx,0x1
c0001243:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001246:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001249:	eb 15                	jmp    c0001260 <dlmalloc+0x149>
c000124b:	a3 40 e0 02 c0       	mov    ds:0xc002e040,eax
c0001250:	39 fe                	cmp    esi,edi
c0001252:	c7 40 08 34 e0 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e034
c0001259:	75 0d                	jne    c0001268 <dlmalloc+0x151>
c000125b:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001260:	8d 43 08             	lea    eax,[ebx+0x8]
c0001263:	e9 35 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c0001268:	89 f8                	mov    eax,edi
c000126a:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001270:	77 19                	ja     c000128b <dlmalloc+0x174>
c0001272:	c1 e8 03             	shr    eax,0x3
c0001275:	8d 14 00             	lea    edx,[eax+eax*1]
c0001278:	83 c2 0d             	add    edx,0xd
c000127b:	8d 2c 95 f8 df 02 c0 	lea    ebp,[edx*4-0x3ffd2008]
c0001282:	8b 14 95 00 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2000]
c0001289:	eb 46                	jmp    c00012d1 <dlmalloc+0x1ba>
c000128b:	e8 c1 f9 ff ff       	call   c0000c51 <largebin_index>
c0001290:	8d 14 00             	lea    edx,[eax+eax*1]
c0001293:	83 c2 0d             	add    edx,0xd
c0001296:	8d 0c 95 00 e0 02 c0 	lea    ecx,[edx*4-0x3ffd2000]
c000129d:	8b 14 95 00 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2000]
c00012a4:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00012a7:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00012ab:	89 d5                	mov    ebp,edx
c00012ad:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00012b1:	74 1e                	je     c00012d1 <dlmalloc+0x1ba>
c00012b3:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00012b6:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00012b9:	77 12                	ja     c00012cd <dlmalloc+0x1b6>
c00012bb:	83 cf 01             	or     edi,0x1
c00012be:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00012c1:	76 05                	jbe    c00012c8 <dlmalloc+0x1b1>
c00012c3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00012c6:	eb f6                	jmp    c00012be <dlmalloc+0x1a7>
c00012c8:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012cb:	eb 04                	jmp    c00012d1 <dlmalloc+0x1ba>
c00012cd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012d1:	89 c7                	mov    edi,eax
c00012d3:	88 c1                	mov    cl,al
c00012d5:	c1 ff 05             	sar    edi,0x5
c00012d8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012dc:	bf 01 00 00 00       	mov    edi,0x1
c00012e1:	d3 e7                	shl    edi,cl
c00012e3:	89 f8                	mov    eax,edi
c00012e5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012e9:	09 04 bd 34 e3 02 c0 	or     DWORD PTR [edi*4-0x3ffd1ccc],eax
c00012f0:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012f3:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012f6:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012f9:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012fc:	e9 db fe ff ff       	jmp    c00011dc <dlmalloc+0xc5>
c0001301:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001307:	76 78                	jbe    c0001381 <dlmalloc+0x26a>
c0001309:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000130d:	8d 04 c5 34 e0 02 c0 	lea    eax,[eax*8-0x3ffd1fcc]
c0001314:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001317:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000131a:	39 ca                	cmp    edx,ecx
c000131c:	74 63                	je     c0001381 <dlmalloc+0x26a>
c000131e:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001321:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001324:	83 e3 fc             	and    ebx,0xfffffffc
c0001327:	39 de                	cmp    esi,ebx
c0001329:	77 52                	ja     c000137d <dlmalloc+0x266>
c000132b:	89 df                	mov    edi,ebx
c000132d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001330:	29 f7                	sub    edi,esi
c0001332:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001335:	01 d3                	add    ebx,edx
c0001337:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000133a:	83 ff 0f             	cmp    edi,0xf
c000133d:	8d 42 08             	lea    eax,[edx+0x8]
c0001340:	77 09                	ja     c000134b <dlmalloc+0x234>
c0001342:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001346:	e9 52 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000134b:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000134e:	83 ce 01             	or     esi,0x1
c0001351:	89 0d 3c e0 02 c0    	mov    DWORD PTR ds:0xc002e03c,ecx
c0001357:	89 0d 40 e0 02 c0    	mov    DWORD PTR ds:0xc002e040,ecx
c000135d:	c7 41 08 34 e0 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002e034
c0001364:	c7 41 0c 34 e0 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002e034
c000136b:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000136e:	89 fa                	mov    edx,edi
c0001370:	83 ca 01             	or     edx,0x1
c0001373:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001376:	89 3b                	mov    DWORD PTR [ebx],edi
c0001378:	e9 20 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000137d:	89 c2                	mov    edx,eax
c000137f:	eb 99                	jmp    c000131a <dlmalloc+0x203>
c0001381:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001385:	b8 01 00 00 00       	mov    eax,0x1
c000138a:	41                   	inc    ecx
c000138b:	89 cb                	mov    ebx,ecx
c000138d:	8d 14 cd 2c e0 02 c0 	lea    edx,[ecx*8-0x3ffd1fd4]
c0001394:	c1 eb 05             	shr    ebx,0x5
c0001397:	d3 e0                	shl    eax,cl
c0001399:	8b 3c 9d 34 e3 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1ccc]
c00013a0:	39 f8                	cmp    eax,edi
c00013a2:	77 04                	ja     c00013a8 <dlmalloc+0x291>
c00013a4:	85 c0                	test   eax,eax
c00013a6:	75 26                	jne    c00013ce <dlmalloc+0x2b7>
c00013a8:	43                   	inc    ebx
c00013a9:	83 fb 02             	cmp    ebx,0x2
c00013ac:	0f 87 a6 00 00 00    	ja     c0001458 <dlmalloc+0x341>
c00013b2:	8b 3c 9d 34 e3 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1ccc]
c00013b9:	85 ff                	test   edi,edi
c00013bb:	74 eb                	je     c00013a8 <dlmalloc+0x291>
c00013bd:	89 d8                	mov    eax,ebx
c00013bf:	c1 e0 06             	shl    eax,0x6
c00013c2:	8d 14 85 2c e0 02 c0 	lea    edx,[eax*4-0x3ffd1fd4]
c00013c9:	b8 01 00 00 00       	mov    eax,0x1
c00013ce:	85 f8                	test   eax,edi
c00013d0:	75 07                	jne    c00013d9 <dlmalloc+0x2c2>
c00013d2:	83 c2 08             	add    edx,0x8
c00013d5:	01 c0                	add    eax,eax
c00013d7:	eb f5                	jmp    c00013ce <dlmalloc+0x2b7>
c00013d9:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013dc:	39 ca                	cmp    edx,ecx
c00013de:	75 14                	jne    c00013f4 <dlmalloc+0x2dd>
c00013e0:	89 c1                	mov    ecx,eax
c00013e2:	83 c2 08             	add    edx,0x8
c00013e5:	f7 d1                	not    ecx
c00013e7:	01 c0                	add    eax,eax
c00013e9:	21 cf                	and    edi,ecx
c00013eb:	89 3c 9d 34 e3 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd1ccc],edi
c00013f2:	eb ac                	jmp    c00013a0 <dlmalloc+0x289>
c00013f4:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013f7:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013fa:	83 e0 fc             	and    eax,0xfffffffc
c00013fd:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001400:	89 c3                	mov    ebx,eax
c0001402:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001405:	29 f3                	sub    ebx,esi
c0001407:	8d 14 01             	lea    edx,[ecx+eax*1]
c000140a:	83 fb 0f             	cmp    ebx,0xf
c000140d:	8d 41 08             	lea    eax,[ecx+0x8]
c0001410:	77 09                	ja     c000141b <dlmalloc+0x304>
c0001412:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001416:	e9 82 00 00 00       	jmp    c000149d <dlmalloc+0x386>
c000141b:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000141e:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001424:	89 3d 3c e0 02 c0    	mov    DWORD PTR ds:0xc002e03c,edi
c000142a:	89 3d 40 e0 02 c0    	mov    DWORD PTR ds:0xc002e040,edi
c0001430:	c7 47 08 34 e0 02 c0 	mov    DWORD PTR [edi+0x8],0xc002e034
c0001437:	c7 47 0c 34 e0 02 c0 	mov    DWORD PTR [edi+0xc],0xc002e034
c000143e:	77 06                	ja     c0001446 <dlmalloc+0x32f>
c0001440:	89 3d 30 e0 02 c0    	mov    DWORD PTR ds:0xc002e030,edi
c0001446:	83 ce 01             	or     esi,0x1
c0001449:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000144c:	89 d9                	mov    ecx,ebx
c000144e:	83 c9 01             	or     ecx,0x1
c0001451:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001454:	89 1a                	mov    DWORD PTR [edx],ebx
c0001456:	eb 45                	jmp    c000149d <dlmalloc+0x386>
c0001458:	a1 2c e0 02 c0       	mov    eax,ds:0xc002e02c
c000145d:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001460:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001463:	83 e2 fc             	and    edx,0xfffffffc
c0001466:	39 d1                	cmp    ecx,edx
c0001468:	77 1e                	ja     c0001488 <dlmalloc+0x371>
c000146a:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000146d:	89 f3                	mov    ebx,esi
c000146f:	89 0d 2c e0 02 c0    	mov    DWORD PTR ds:0xc002e02c,ecx
c0001475:	83 cb 01             	or     ebx,0x1
c0001478:	29 f2                	sub    edx,esi
c000147a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000147d:	83 ca 01             	or     edx,0x1
c0001480:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001483:	e9 2d fd ff ff       	jmp    c00011b5 <dlmalloc+0x9e>
c0001488:	83 c4 1c             	add    esp,0x1c
c000148b:	89 f0                	mov    eax,esi
c000148d:	5b                   	pop    ebx
c000148e:	ba 00 e0 02 c0       	mov    edx,0xc002e000
c0001493:	5e                   	pop    esi
c0001494:	5f                   	pop    edi
c0001495:	5d                   	pop    ebp
c0001496:	e9 16 fa ff ff       	jmp    c0000eb1 <sYSMALLOc>
c000149b:	31 c0                	xor    eax,eax
c000149d:	83 c4 1c             	add    esp,0x1c
c00014a0:	5b                   	pop    ebx
c00014a1:	5e                   	pop    esi
c00014a2:	5f                   	pop    edi
c00014a3:	5d                   	pop    ebp
c00014a4:	c3                   	ret    

c00014a5 <iALLOc>:
c00014a5:	55                   	push   ebp
c00014a6:	89 c5                	mov    ebp,eax
c00014a8:	57                   	push   edi
c00014a9:	56                   	push   esi
c00014aa:	53                   	push   ebx
c00014ab:	83 ec 2c             	sub    esp,0x2c
c00014ae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00014b2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00014b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014ba:	83 3d 00 e0 02 c0 00 	cmp    DWORD PTR ds:0xc002e000,0x0
c00014c1:	75 12                	jne    c00014d5 <iALLOc+0x30>
c00014c3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00014c7:	b8 00 e0 02 c0       	mov    eax,0xc002e000
c00014cc:	e8 04 f8 ff ff       	call   c0000cd5 <malloc_consolidate>
c00014d1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014d5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014da:	74 12                	je     c00014ee <iALLOc+0x49>
c00014dc:	85 ed                	test   ebp,ebp
c00014de:	0f 84 64 01 00 00    	je     c0001648 <iALLOc+0x1a3>
c00014e4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014ec:	eb 33                	jmp    c0001521 <iALLOc+0x7c>
c00014ee:	85 ed                	test   ebp,ebp
c00014f0:	75 14                	jne    c0001506 <iALLOc+0x61>
c00014f2:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014fa:	83 c4 2c             	add    esp,0x2c
c00014fd:	5b                   	pop    ebx
c00014fe:	5e                   	pop    esi
c00014ff:	5f                   	pop    edi
c0001500:	5d                   	pop    ebp
c0001501:	e9 11 fc ff ff       	jmp    c0001117 <dlmalloc>
c0001506:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000150d:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001515:	83 f8 0f             	cmp    eax,0xf
c0001518:	76 07                	jbe    c0001521 <iALLOc+0x7c>
c000151a:	83 e0 f8             	and    eax,0xfffffff8
c000151d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001521:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001526:	75 09                	jne    c0001531 <iALLOc+0x8c>
c0001528:	89 d0                	mov    eax,edx
c000152a:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000152d:	31 f6                	xor    esi,esi
c000152f:	eb 3b                	jmp    c000156c <iALLOc+0xc7>
c0001531:	8b 02                	mov    eax,DWORD PTR [edx]
c0001533:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000153b:	83 c0 0b             	add    eax,0xb
c000153e:	83 f8 0f             	cmp    eax,0xf
c0001541:	76 07                	jbe    c000154a <iALLOc+0xa5>
c0001543:	83 e0 f8             	and    eax,0xfffffff8
c0001546:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000154a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000154e:	0f af f5             	imul   esi,ebp
c0001551:	eb 25                	jmp    c0001578 <iALLOc+0xd3>
c0001553:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001555:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001558:	bb 10 00 00 00       	mov    ebx,0x10
c000155d:	83 f9 0f             	cmp    ecx,0xf
c0001560:	76 05                	jbe    c0001567 <iALLOc+0xc2>
c0001562:	83 e1 f8             	and    ecx,0xfffffff8
c0001565:	89 cb                	mov    ebx,ecx
c0001567:	01 de                	add    esi,ebx
c0001569:	83 c0 04             	add    eax,0x4
c000156c:	39 c7                	cmp    edi,eax
c000156e:	75 e3                	jne    c0001553 <iALLOc+0xae>
c0001570:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001578:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000157c:	8b 1d 54 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e354
c0001582:	83 ec 0c             	sub    esp,0xc
c0001585:	c7 05 54 e3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e354,0x0
c000158f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001593:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001597:	50                   	push   eax
c0001598:	e8 7a fb ff ff       	call   c0001117 <dlmalloc>
c000159d:	83 c4 10             	add    esp,0x10
c00015a0:	89 1d 54 e3 02 c0    	mov    DWORD PTR ds:0xc002e354,ebx
c00015a6:	85 c0                	test   eax,eax
c00015a8:	0f 84 92 00 00 00    	je     c0001640 <iALLOc+0x19b>
c00015ae:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00015b1:	8d 78 f8             	lea    edi,[eax-0x8]
c00015b4:	83 e3 fc             	and    ebx,0xfffffffc
c00015b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00015bb:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00015c0:	74 1e                	je     c00015e0 <iALLOc+0x13b>
c00015c2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00015c6:	89 d9                	mov    ecx,ebx
c00015c8:	52                   	push   edx
c00015c9:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015cd:	83 e9 04             	sub    ecx,0x4
c00015d0:	51                   	push   ecx
c00015d1:	6a 00                	push   0x0
c00015d3:	50                   	push   eax
c00015d4:	e8 9f f1 ff ff       	call   c0000778 <memset>
c00015d9:	83 c4 10             	add    esp,0x10
c00015dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015e5:	75 14                	jne    c00015fb <iALLOc+0x156>
c00015e7:	8d 04 37             	lea    eax,[edi+esi*1]
c00015ea:	29 f3                	sub    ebx,esi
c00015ec:	8d 48 08             	lea    ecx,[eax+0x8]
c00015ef:	83 cb 01             	or     ebx,0x1
c00015f2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015f6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015f9:	89 f3                	mov    ebx,esi
c00015fb:	31 c0                	xor    eax,eax
c00015fd:	4d                   	dec    ebp
c00015fe:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001601:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001605:	39 c5                	cmp    ebp,eax
c0001607:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000160a:	74 2c                	je     c0001638 <iALLOc+0x193>
c000160c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001610:	85 c9                	test   ecx,ecx
c0001612:	75 15                	jne    c0001629 <iALLOc+0x184>
c0001614:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001617:	8d 71 0b             	lea    esi,[ecx+0xb]
c000161a:	b9 10 00 00 00       	mov    ecx,0x10
c000161f:	83 fe 0f             	cmp    esi,0xf
c0001622:	76 05                	jbe    c0001629 <iALLOc+0x184>
c0001624:	83 e6 f8             	and    esi,0xfffffff8
c0001627:	89 f1                	mov    ecx,esi
c0001629:	89 ce                	mov    esi,ecx
c000162b:	29 cb                	sub    ebx,ecx
c000162d:	83 ce 01             	or     esi,0x1
c0001630:	40                   	inc    eax
c0001631:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001634:	01 cf                	add    edi,ecx
c0001636:	eb c6                	jmp    c00015fe <iALLOc+0x159>
c0001638:	83 cb 01             	or     ebx,0x1
c000163b:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000163e:	eb 08                	jmp    c0001648 <iALLOc+0x1a3>
c0001640:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001648:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000164c:	83 c4 2c             	add    esp,0x2c
c000164f:	5b                   	pop    ebx
c0001650:	5e                   	pop    esi
c0001651:	5f                   	pop    edi
c0001652:	5d                   	pop    ebp
c0001653:	c3                   	ret    

c0001654 <dlrealloc>:
c0001654:	55                   	push   ebp
c0001655:	57                   	push   edi
c0001656:	56                   	push   esi
c0001657:	53                   	push   ebx
c0001658:	83 ec 1c             	sub    esp,0x1c
c000165b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000165f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001663:	85 db                	test   ebx,ebx
c0001665:	75 10                	jne    c0001677 <dlrealloc+0x23>
c0001667:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000166b:	83 c4 1c             	add    esp,0x1c
c000166e:	5b                   	pop    ebx
c000166f:	5e                   	pop    esi
c0001670:	5f                   	pop    edi
c0001671:	5d                   	pop    ebp
c0001672:	e9 a0 fa ff ff       	jmp    c0001117 <dlmalloc>
c0001677:	83 f8 df             	cmp    eax,0xffffffdf
c000167a:	76 07                	jbe    c0001683 <dlrealloc+0x2f>
c000167c:	31 db                	xor    ebx,ebx
c000167e:	e9 7c 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c0001683:	83 c0 0b             	add    eax,0xb
c0001686:	bf 10 00 00 00       	mov    edi,0x10
c000168b:	83 f8 0f             	cmp    eax,0xf
c000168e:	76 05                	jbe    c0001695 <dlrealloc+0x41>
c0001690:	83 e0 f8             	and    eax,0xfffffff8
c0001693:	89 c7                	mov    edi,eax
c0001695:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001698:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000169b:	89 c6                	mov    esi,eax
c000169d:	83 e6 fc             	and    esi,0xfffffffc
c00016a0:	a8 02                	test   al,0x2
c00016a2:	75 d8                	jne    c000167c <dlrealloc+0x28>
c00016a4:	39 f7                	cmp    edi,esi
c00016a6:	0f 86 15 01 00 00    	jbe    c00017c1 <dlrealloc+0x16d>
c00016ac:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00016b0:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00016b3:	39 15 2c e0 02 c0    	cmp    DWORD PTR ds:0xc002e02c,edx
c00016b9:	75 33                	jne    c00016ee <dlrealloc+0x9a>
c00016bb:	83 e1 fc             	and    ecx,0xfffffffc
c00016be:	01 f1                	add    ecx,esi
c00016c0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016c4:	8d 4f 10             	lea    ecx,[edi+0x10]
c00016c7:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016cb:	77 49                	ja     c0001716 <dlrealloc+0xc2>
c00016cd:	01 fd                	add    ebp,edi
c00016cf:	83 e0 01             	and    eax,0x1
c00016d2:	09 f8                	or     eax,edi
c00016d4:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016d7:	89 2d 2c e0 02 c0    	mov    DWORD PTR ds:0xc002e02c,ebp
c00016dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016e1:	29 f8                	sub    eax,edi
c00016e3:	83 c8 01             	or     eax,0x1
c00016e6:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00016e9:	e9 11 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c00016ee:	89 c8                	mov    eax,ecx
c00016f0:	83 e0 fe             	and    eax,0xfffffffe
c00016f3:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016f8:	75 1c                	jne    c0001716 <dlrealloc+0xc2>
c00016fa:	83 e1 fc             	and    ecx,0xfffffffc
c00016fd:	01 f1                	add    ecx,esi
c00016ff:	39 cf                	cmp    edi,ecx
c0001701:	77 13                	ja     c0001716 <dlrealloc+0xc2>
c0001703:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001706:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001709:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000170c:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000170f:	89 ce                	mov    esi,ecx
c0001711:	e9 ab 00 00 00       	jmp    c00017c1 <dlrealloc+0x16d>
c0001716:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000171a:	8d 47 f9             	lea    eax,[edi-0x7]
c000171d:	83 ec 0c             	sub    esp,0xc
c0001720:	50                   	push   eax
c0001721:	e8 f1 f9 ff ff       	call   c0001117 <dlmalloc>
c0001726:	83 c4 10             	add    esp,0x10
c0001729:	89 c1                	mov    ecx,eax
c000172b:	85 c0                	test   eax,eax
c000172d:	0f 84 49 ff ff ff    	je     c000167c <dlrealloc+0x28>
c0001733:	8d 40 f8             	lea    eax,[eax-0x8]
c0001736:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000173a:	39 c2                	cmp    edx,eax
c000173c:	75 0a                	jne    c0001748 <dlrealloc+0xf4>
c000173e:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001741:	83 e0 fc             	and    eax,0xfffffffc
c0001744:	01 c6                	add    esi,eax
c0001746:	eb 79                	jmp    c00017c1 <dlrealloc+0x16d>
c0001748:	83 ee 04             	sub    esi,0x4
c000174b:	83 fe 27             	cmp    esi,0x27
c000174e:	76 16                	jbe    c0001766 <dlrealloc+0x112>
c0001750:	50                   	push   eax
c0001751:	56                   	push   esi
c0001752:	53                   	push   ebx
c0001753:	51                   	push   ecx
c0001754:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001758:	e8 e7 ef ff ff       	call   c0000744 <memcpy>
c000175d:	83 c4 10             	add    esp,0x10
c0001760:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001764:	eb 43                	jmp    c00017a9 <dlrealloc+0x155>
c0001766:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001768:	83 fe 13             	cmp    esi,0x13
c000176b:	89 01                	mov    DWORD PTR [ecx],eax
c000176d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001770:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001773:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001776:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001779:	76 2e                	jbe    c00017a9 <dlrealloc+0x155>
c000177b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000177e:	83 fe 1b             	cmp    esi,0x1b
c0001781:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001784:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001787:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000178a:	76 1d                	jbe    c00017a9 <dlrealloc+0x155>
c000178c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000178f:	83 fe 23             	cmp    esi,0x23
c0001792:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001795:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001798:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000179b:	76 0c                	jbe    c00017a9 <dlrealloc+0x155>
c000179d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00017a0:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00017a3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00017a6:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00017a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017ad:	83 ec 0c             	sub    esp,0xc
c00017b0:	53                   	push   ebx
c00017b1:	e8 06 f6 ff ff       	call   c0000dbc <dlfree>
c00017b6:	83 c4 10             	add    esp,0x10
c00017b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00017bd:	89 cb                	mov    ebx,ecx
c00017bf:	eb 3e                	jmp    c00017ff <dlrealloc+0x1ab>
c00017c1:	89 f2                	mov    edx,esi
c00017c3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017c6:	29 fa                	sub    edx,edi
c00017c8:	83 e1 01             	and    ecx,0x1
c00017cb:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00017cf:	83 fa 0f             	cmp    edx,0xf
c00017d2:	77 0b                	ja     c00017df <dlrealloc+0x18b>
c00017d4:	09 ce                	or     esi,ecx
c00017d6:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00017d9:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017dd:	eb 20                	jmp    c00017ff <dlrealloc+0x1ab>
c00017df:	01 fd                	add    ebp,edi
c00017e1:	83 ec 0c             	sub    esp,0xc
c00017e4:	09 cf                	or     edi,ecx
c00017e6:	83 ca 01             	or     edx,0x1
c00017e9:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00017ec:	83 c5 08             	add    ebp,0x8
c00017ef:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00017f2:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017f6:	55                   	push   ebp
c00017f7:	e8 c0 f5 ff ff       	call   c0000dbc <dlfree>
c00017fc:	83 c4 10             	add    esp,0x10
c00017ff:	83 c4 1c             	add    esp,0x1c
c0001802:	89 d8                	mov    eax,ebx
c0001804:	5b                   	pop    ebx
c0001805:	5e                   	pop    esi
c0001806:	5f                   	pop    edi
c0001807:	5d                   	pop    ebp
c0001808:	c3                   	ret    

c0001809 <dlmemalign>:
c0001809:	55                   	push   ebp
c000180a:	57                   	push   edi
c000180b:	56                   	push   esi
c000180c:	53                   	push   ebx
c000180d:	83 ec 0c             	sub    esp,0xc
c0001810:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001814:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001818:	83 fa 08             	cmp    edx,0x8
c000181b:	77 10                	ja     c000182d <dlmemalign+0x24>
c000181d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001821:	83 c4 0c             	add    esp,0xc
c0001824:	5b                   	pop    ebx
c0001825:	5e                   	pop    esi
c0001826:	5f                   	pop    edi
c0001827:	5d                   	pop    ebp
c0001828:	e9 ea f8 ff ff       	jmp    c0001117 <dlmalloc>
c000182d:	bf 10 00 00 00       	mov    edi,0x10
c0001832:	83 fa 0f             	cmp    edx,0xf
c0001835:	76 13                	jbe    c000184a <dlmemalign+0x41>
c0001837:	8d 4a ff             	lea    ecx,[edx-0x1]
c000183a:	85 d1                	test   ecx,edx
c000183c:	75 04                	jne    c0001842 <dlmemalign+0x39>
c000183e:	89 d7                	mov    edi,edx
c0001840:	eb 08                	jmp    c000184a <dlmemalign+0x41>
c0001842:	39 d7                	cmp    edi,edx
c0001844:	73 04                	jae    c000184a <dlmemalign+0x41>
c0001846:	01 ff                	add    edi,edi
c0001848:	eb f8                	jmp    c0001842 <dlmemalign+0x39>
c000184a:	83 f8 df             	cmp    eax,0xffffffdf
c000184d:	76 07                	jbe    c0001856 <dlmemalign+0x4d>
c000184f:	31 c0                	xor    eax,eax
c0001851:	e9 ce 00 00 00       	jmp    c0001924 <dlmemalign+0x11b>
c0001856:	83 c0 0b             	add    eax,0xb
c0001859:	bd 10 00 00 00       	mov    ebp,0x10
c000185e:	83 f8 0f             	cmp    eax,0xf
c0001861:	76 05                	jbe    c0001868 <dlmemalign+0x5f>
c0001863:	83 e0 f8             	and    eax,0xfffffff8
c0001866:	89 c5                	mov    ebp,eax
c0001868:	83 ec 0c             	sub    esp,0xc
c000186b:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000186f:	50                   	push   eax
c0001870:	e8 a2 f8 ff ff       	call   c0001117 <dlmalloc>
c0001875:	83 c4 10             	add    esp,0x10
c0001878:	89 c1                	mov    ecx,eax
c000187a:	85 c0                	test   eax,eax
c000187c:	74 d1                	je     c000184f <dlmemalign+0x46>
c000187e:	31 d2                	xor    edx,edx
c0001880:	8d 70 f8             	lea    esi,[eax-0x8]
c0001883:	f7 f7                	div    edi
c0001885:	85 d2                	test   edx,edx
c0001887:	74 62                	je     c00018eb <dlmemalign+0xe2>
c0001889:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000188d:	89 f8                	mov    eax,edi
c000188f:	f7 d8                	neg    eax
c0001891:	21 c3                	and    ebx,eax
c0001893:	83 eb 08             	sub    ebx,0x8
c0001896:	89 d8                	mov    eax,ebx
c0001898:	29 f0                	sub    eax,esi
c000189a:	83 f8 0f             	cmp    eax,0xf
c000189d:	77 02                	ja     c00018a1 <dlmemalign+0x98>
c000189f:	01 fb                	add    ebx,edi
c00018a1:	89 d8                	mov    eax,ebx
c00018a3:	29 f0                	sub    eax,esi
c00018a5:	89 c6                	mov    esi,eax
c00018a7:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018aa:	89 c2                	mov    edx,eax
c00018ac:	83 e2 fc             	and    edx,0xfffffffc
c00018af:	29 f2                	sub    edx,esi
c00018b1:	a8 02                	test   al,0x2
c00018b3:	74 10                	je     c00018c5 <dlmemalign+0xbc>
c00018b5:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00018b8:	83 ca 02             	or     edx,0x2
c00018bb:	8d 43 08             	lea    eax,[ebx+0x8]
c00018be:	89 33                	mov    DWORD PTR [ebx],esi
c00018c0:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00018c3:	eb 5f                	jmp    c0001924 <dlmemalign+0x11b>
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	89 d0                	mov    eax,edx
c00018ca:	83 c8 01             	or     eax,0x1
c00018cd:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00018d0:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00018d5:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018d8:	83 e0 01             	and    eax,0x1
c00018db:	09 f0                	or     eax,esi
c00018dd:	89 de                	mov    esi,ebx
c00018df:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018e2:	51                   	push   ecx
c00018e3:	e8 d4 f4 ff ff       	call   c0000dbc <dlfree>
c00018e8:	83 c4 10             	add    esp,0x10
c00018eb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018ee:	a8 02                	test   al,0x2
c00018f0:	75 2f                	jne    c0001921 <dlmemalign+0x118>
c00018f2:	83 e0 fc             	and    eax,0xfffffffc
c00018f5:	8d 55 10             	lea    edx,[ebp+0x10]
c00018f8:	39 c2                	cmp    edx,eax
c00018fa:	73 25                	jae    c0001921 <dlmemalign+0x118>
c00018fc:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018ff:	83 ec 0c             	sub    esp,0xc
c0001902:	29 e8                	sub    eax,ebp
c0001904:	83 c2 08             	add    edx,0x8
c0001907:	83 c8 01             	or     eax,0x1
c000190a:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000190d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001910:	83 e0 01             	and    eax,0x1
c0001913:	09 c5                	or     ebp,eax
c0001915:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001918:	52                   	push   edx
c0001919:	e8 9e f4 ff ff       	call   c0000dbc <dlfree>
c000191e:	83 c4 10             	add    esp,0x10
c0001921:	8d 46 08             	lea    eax,[esi+0x8]
c0001924:	83 c4 0c             	add    esp,0xc
c0001927:	5b                   	pop    ebx
c0001928:	5e                   	pop    esi
c0001929:	5f                   	pop    edi
c000192a:	5d                   	pop    ebp
c000192b:	c3                   	ret    

c000192c <dlcalloc>:
c000192c:	53                   	push   ebx
c000192d:	83 ec 14             	sub    esp,0x14
c0001930:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001934:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001939:	50                   	push   eax
c000193a:	e8 d8 f7 ff ff       	call   c0001117 <dlmalloc>
c000193f:	83 c4 10             	add    esp,0x10
c0001942:	89 c3                	mov    ebx,eax
c0001944:	85 c0                	test   eax,eax
c0001946:	74 77                	je     c00019bf <dlcalloc+0x93>
c0001948:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000194b:	89 d0                	mov    eax,edx
c000194d:	83 e0 fc             	and    eax,0xfffffffc
c0001950:	80 e2 02             	and    dl,0x2
c0001953:	75 5a                	jne    c00019af <dlcalloc+0x83>
c0001955:	83 e8 04             	sub    eax,0x4
c0001958:	83 f8 27             	cmp    eax,0x27
c000195b:	76 03                	jbe    c0001960 <dlcalloc+0x34>
c000195d:	51                   	push   ecx
c000195e:	eb 53                	jmp    c00019b3 <dlcalloc+0x87>
c0001960:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001966:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000196d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001974:	83 f8 13             	cmp    eax,0x13
c0001977:	76 46                	jbe    c00019bf <dlcalloc+0x93>
c0001979:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001980:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001987:	83 f8 1b             	cmp    eax,0x1b
c000198a:	76 33                	jbe    c00019bf <dlcalloc+0x93>
c000198c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001993:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000199a:	83 f8 23             	cmp    eax,0x23
c000199d:	76 20                	jbe    c00019bf <dlcalloc+0x93>
c000199f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00019a6:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00019ad:	eb 10                	jmp    c00019bf <dlcalloc+0x93>
c00019af:	83 e8 08             	sub    eax,0x8
c00019b2:	52                   	push   edx
c00019b3:	50                   	push   eax
c00019b4:	6a 00                	push   0x0
c00019b6:	53                   	push   ebx
c00019b7:	e8 bc ed ff ff       	call   c0000778 <memset>
c00019bc:	83 c4 10             	add    esp,0x10
c00019bf:	89 d8                	mov    eax,ebx
c00019c1:	83 c4 08             	add    esp,0x8
c00019c4:	5b                   	pop    ebx
c00019c5:	c3                   	ret    

c00019c6 <dlcfree>:
c00019c6:	e9 f1 f3 ff ff       	jmp    c0000dbc <dlfree>

c00019cb <dlindependent_calloc>:
c00019cb:	83 ec 28             	sub    esp,0x28
c00019ce:	b9 03 00 00 00       	mov    ecx,0x3
c00019d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019df:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019e7:	e8 b9 fa ff ff       	call   c00014a5 <iALLOc>
c00019ec:	83 c4 2c             	add    esp,0x2c
c00019ef:	c3                   	ret    

c00019f0 <dlindependent_comalloc>:
c00019f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019f8:	31 c9                	xor    ecx,ecx
c00019fa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001a02:	e9 9e fa ff ff       	jmp    c00014a5 <iALLOc>

c0001a07 <dlvalloc>:
c0001a07:	83 ec 0c             	sub    esp,0xc
c0001a0a:	83 3d 00 e0 02 c0 00 	cmp    DWORD PTR ds:0xc002e000,0x0
c0001a11:	75 0a                	jne    c0001a1d <dlvalloc+0x16>
c0001a13:	b8 00 e0 02 c0       	mov    eax,0xc002e000
c0001a18:	e8 b8 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a1d:	50                   	push   eax
c0001a1e:	50                   	push   eax
c0001a1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a23:	ff 35 5c e3 02 c0    	push   DWORD PTR ds:0xc002e35c
c0001a29:	e8 db fd ff ff       	call   c0001809 <dlmemalign>
c0001a2e:	83 c4 1c             	add    esp,0x1c
c0001a31:	c3                   	ret    

c0001a32 <dlpvalloc>:
c0001a32:	83 ec 0c             	sub    esp,0xc
c0001a35:	83 3d 00 e0 02 c0 00 	cmp    DWORD PTR ds:0xc002e000,0x0
c0001a3c:	75 0a                	jne    c0001a48 <dlpvalloc+0x16>
c0001a3e:	b8 00 e0 02 c0       	mov    eax,0xc002e000
c0001a43:	e8 8d f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a48:	a1 5c e3 02 c0       	mov    eax,ds:0xc002e35c
c0001a4d:	89 c1                	mov    ecx,eax
c0001a4f:	52                   	push   edx
c0001a50:	f7 d9                	neg    ecx
c0001a52:	52                   	push   edx
c0001a53:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a57:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a5b:	21 ca                	and    edx,ecx
c0001a5d:	52                   	push   edx
c0001a5e:	50                   	push   eax
c0001a5f:	e8 a5 fd ff ff       	call   c0001809 <dlmemalign>
c0001a64:	83 c4 1c             	add    esp,0x1c
c0001a67:	c3                   	ret    

c0001a68 <dlmalloc_trim>:
c0001a68:	b8 00 e0 02 c0       	mov    eax,0xc002e000
c0001a6d:	e8 63 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a72:	31 c0                	xor    eax,eax
c0001a74:	c3                   	ret    

c0001a75 <dlmalloc_usable_size>:
c0001a75:	53                   	push   ebx
c0001a76:	31 c0                	xor    eax,eax
c0001a78:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a7c:	85 c9                	test   ecx,ecx
c0001a7e:	74 24                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a80:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a83:	f6 c2 02             	test   dl,0x2
c0001a86:	74 08                	je     c0001a90 <dlmalloc_usable_size+0x1b>
c0001a88:	83 e2 fc             	and    edx,0xfffffffc
c0001a8b:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a8e:	eb 14                	jmp    c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a90:	89 d3                	mov    ebx,edx
c0001a92:	31 c0                	xor    eax,eax
c0001a94:	83 e3 fe             	and    ebx,0xfffffffe
c0001a97:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a9c:	74 06                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a9e:	83 e2 fc             	and    edx,0xfffffffc
c0001aa1:	8d 42 fc             	lea    eax,[edx-0x4]
c0001aa4:	5b                   	pop    ebx
c0001aa5:	c3                   	ret    

c0001aa6 <dlmallinfo>:
c0001aa6:	55                   	push   ebp
c0001aa7:	57                   	push   edi
c0001aa8:	56                   	push   esi
c0001aa9:	53                   	push   ebx
c0001aaa:	83 ec 08             	sub    esp,0x8
c0001aad:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001ab1:	83 3d 2c e0 02 c0 00 	cmp    DWORD PTR ds:0xc002e02c,0x0
c0001ab8:	75 0a                	jne    c0001ac4 <dlmallinfo+0x1e>
c0001aba:	b8 00 e0 02 c0       	mov    eax,0xc002e000
c0001abf:	e8 11 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001ac4:	a1 2c e0 02 c0       	mov    eax,ds:0xc002e02c
c0001ac9:	31 ed                	xor    ebp,ebp
c0001acb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001ace:	31 c9                	xor    ecx,ecx
c0001ad0:	83 e0 fc             	and    eax,0xfffffffc
c0001ad3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ad7:	31 c0                	xor    eax,eax
c0001ad9:	8b 14 85 04 e0 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1ffc]
c0001ae0:	85 d2                	test   edx,edx
c0001ae2:	74 0e                	je     c0001af2 <dlmallinfo+0x4c>
c0001ae4:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001ae7:	45                   	inc    ebp
c0001ae8:	83 e6 fc             	and    esi,0xfffffffc
c0001aeb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aee:	01 f1                	add    ecx,esi
c0001af0:	eb ee                	jmp    c0001ae0 <dlmallinfo+0x3a>
c0001af2:	40                   	inc    eax
c0001af3:	83 f8 0a             	cmp    eax,0xa
c0001af6:	75 e1                	jne    c0001ad9 <dlmallinfo+0x33>
c0001af8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001afc:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001b03:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001b06:	b8 34 e0 02 c0       	mov    eax,0xc002e034
c0001b0b:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001b0e:	39 f0                	cmp    eax,esi
c0001b10:	74 10                	je     c0001b22 <dlmallinfo+0x7c>
c0001b12:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001b15:	ff 04 24             	inc    DWORD PTR [esp]
c0001b18:	83 e7 fc             	and    edi,0xfffffffc
c0001b1b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b1e:	01 fa                	add    edx,edi
c0001b20:	eb ec                	jmp    c0001b0e <dlmallinfo+0x68>
c0001b22:	83 c0 08             	add    eax,0x8
c0001b25:	3d 2c e3 02 c0       	cmp    eax,0xc002e32c
c0001b2a:	75 df                	jne    c0001b0b <dlmallinfo+0x65>
c0001b2c:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b2f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b32:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b35:	a1 68 e3 02 c0       	mov    eax,ds:0xc002e368
c0001b3a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b3d:	89 03                	mov    DWORD PTR [ebx],eax
c0001b3f:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b42:	8b 35 50 e3 02 c0    	mov    esi,DWORD PTR ds:0xc002e350
c0001b48:	29 d0                	sub    eax,edx
c0001b4a:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b4d:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b50:	8b 35 64 e3 02 c0    	mov    esi,DWORD PTR ds:0xc002e364
c0001b56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b5a:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b5d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b60:	8b 35 74 e3 02 c0    	mov    esi,DWORD PTR ds:0xc002e374
c0001b66:	89 d8                	mov    eax,ebx
c0001b68:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b6b:	83 c4 08             	add    esp,0x8
c0001b6e:	5b                   	pop    ebx
c0001b6f:	5e                   	pop    esi
c0001b70:	5f                   	pop    edi
c0001b71:	5d                   	pop    ebp
c0001b72:	c2 04 00             	ret    0x4

c0001b75 <dlmalloc_stats>:
c0001b75:	83 ec 30             	sub    esp,0x30
c0001b78:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b7c:	50                   	push   eax
c0001b7d:	e8 24 ff ff ff       	call   c0001aa6 <dlmallinfo>
c0001b82:	83 c4 30             	add    esp,0x30
c0001b85:	c3                   	ret    

c0001b86 <dlmallopt>:
c0001b86:	56                   	push   esi
c0001b87:	b8 00 e0 02 c0       	mov    eax,0xc002e000
c0001b8c:	53                   	push   ebx
c0001b8d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b95:	e8 3b f1 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001b9a:	8d 46 04             	lea    eax,[esi+0x4]
c0001b9d:	83 f8 05             	cmp    eax,0x5
c0001ba0:	77 67                	ja     c0001c09 <dlmallopt+0x83>
c0001ba2:	ff 24 85 24 93 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6cdc]
c0001ba9:	83 fb 50             	cmp    ebx,0x50
c0001bac:	77 5b                	ja     c0001c09 <dlmallopt+0x83>
c0001bae:	ba 08 00 00 00       	mov    edx,0x8
c0001bb3:	85 db                	test   ebx,ebx
c0001bb5:	74 12                	je     c0001bc9 <dlmallopt+0x43>
c0001bb7:	83 c3 0b             	add    ebx,0xb
c0001bba:	ba 10 00 00 00       	mov    edx,0x10
c0001bbf:	83 fb 0f             	cmp    ebx,0xf
c0001bc2:	76 05                	jbe    c0001bc9 <dlmallopt+0x43>
c0001bc4:	89 da                	mov    edx,ebx
c0001bc6:	83 e2 f8             	and    edx,0xfffffff8
c0001bc9:	a1 00 e0 02 c0       	mov    eax,ds:0xc002e000
c0001bce:	83 e0 03             	and    eax,0x3
c0001bd1:	09 d0                	or     eax,edx
c0001bd3:	a3 00 e0 02 c0       	mov    ds:0xc002e000,eax
c0001bd8:	eb 31                	jmp    c0001c0b <dlmallopt+0x85>
c0001bda:	89 1d 44 e3 02 c0    	mov    DWORD PTR ds:0xc002e344,ebx
c0001be0:	eb 06                	jmp    c0001be8 <dlmallopt+0x62>
c0001be2:	89 1d 48 e3 02 c0    	mov    DWORD PTR ds:0xc002e348,ebx
c0001be8:	be 01 00 00 00       	mov    esi,0x1
c0001bed:	eb 1c                	jmp    c0001c0b <dlmallopt+0x85>
c0001bef:	89 1d 4c e3 02 c0    	mov    DWORD PTR ds:0xc002e34c,ebx
c0001bf5:	eb f1                	jmp    c0001be8 <dlmallopt+0x62>
c0001bf7:	31 f6                	xor    esi,esi
c0001bf9:	85 db                	test   ebx,ebx
c0001bfb:	75 0e                	jne    c0001c0b <dlmallopt+0x85>
c0001bfd:	c7 05 54 e3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e354,0x0
c0001c07:	eb df                	jmp    c0001be8 <dlmallopt+0x62>
c0001c09:	31 f6                	xor    esi,esi
c0001c0b:	89 f0                	mov    eax,esi
c0001c0d:	5b                   	pop    ebx
c0001c0e:	5e                   	pop    esi
c0001c0f:	c3                   	ret    

c0001c10 <disk_status>:
c0001c10:	31 c0                	xor    eax,eax
c0001c12:	c3                   	ret    

c0001c13 <disk_initialize>:
c0001c13:	31 c0                	xor    eax,eax
c0001c15:	c3                   	ret    

c0001c16 <disk_read>:
c0001c16:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c1b:	0f b6 04 85 e0 1a 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce520]
c0001c23:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c27:	e9 8c f1 01 00       	jmp    c0020db8 <fatWrapperReadDisk>

c0001c2c <disk_write>:
c0001c2c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c31:	0f b6 04 85 e0 1a 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce520]
c0001c39:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c3d:	e9 bd f1 01 00       	jmp    c0020dff <fatWrapperWriteDisk>

c0001c42 <disk_ioctl>:
c0001c42:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c4b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c50:	0f b6 04 85 e0 1a 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce520]
c0001c58:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c5c:	e9 e5 f1 01 00       	jmp    c0020e46 <fatWrapperIoctl>

c0001c61 <ld_word>:
c0001c61:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c65:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c68:	c1 e2 08             	shl    edx,0x8
c0001c6b:	09 d0                	or     eax,edx
c0001c6d:	c3                   	ret    

c0001c6e <ld_dword>:
c0001c6e:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c72:	89 d1                	mov    ecx,edx
c0001c74:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c78:	c1 e1 08             	shl    ecx,0x8
c0001c7b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c7e:	09 ca                	or     edx,ecx
c0001c80:	c1 e2 08             	shl    edx,0x8
c0001c83:	09 d0                	or     eax,edx
c0001c85:	c3                   	ret    

c0001c86 <ld_qword>:
c0001c86:	57                   	push   edi
c0001c87:	56                   	push   esi
c0001c88:	53                   	push   ebx
c0001c89:	31 db                	xor    ebx,ebx
c0001c8b:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c8e:	89 df                	mov    edi,ebx
c0001c90:	89 ce                	mov    esi,ecx
c0001c92:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c96:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c9a:	c1 e6 08             	shl    esi,0x8
c0001c9d:	09 f2                	or     edx,esi
c0001c9f:	89 d6                	mov    esi,edx
c0001ca1:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001ca5:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ca9:	c1 e6 08             	shl    esi,0x8
c0001cac:	09 f2                	or     edx,esi
c0001cae:	89 d6                	mov    esi,edx
c0001cb0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001cb4:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cb8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001cbb:	c1 e6 08             	shl    esi,0x8
c0001cbe:	89 fb                	mov    ebx,edi
c0001cc0:	09 f2                	or     edx,esi
c0001cc2:	89 d1                	mov    ecx,edx
c0001cc4:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001cc8:	c1 e1 08             	shl    ecx,0x8
c0001ccb:	89 da                	mov    edx,ebx
c0001ccd:	09 c8                	or     eax,ecx
c0001ccf:	5b                   	pop    ebx
c0001cd0:	5e                   	pop    esi
c0001cd1:	5f                   	pop    edi
c0001cd2:	c3                   	ret    

c0001cd3 <st_word>:
c0001cd3:	66 89 10             	mov    WORD PTR [eax],dx
c0001cd6:	c3                   	ret    

c0001cd7 <st_dword>:
c0001cd7:	89 10                	mov    DWORD PTR [eax],edx
c0001cd9:	c3                   	ret    

c0001cda <st_qword>:
c0001cda:	89 10                	mov    DWORD PTR [eax],edx
c0001cdc:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001cdf:	c3                   	ret    

c0001ce0 <mem_cpy>:
c0001ce0:	85 c9                	test   ecx,ecx
c0001ce2:	74 10                	je     c0001cf4 <mem_cpy+0x14>
c0001ce4:	57                   	push   edi
c0001ce5:	01 c1                	add    ecx,eax
c0001ce7:	56                   	push   esi
c0001ce8:	89 c7                	mov    edi,eax
c0001cea:	89 d6                	mov    esi,edx
c0001cec:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ced:	39 f9                	cmp    ecx,edi
c0001cef:	75 fb                	jne    c0001cec <mem_cpy+0xc>
c0001cf1:	5e                   	pop    esi
c0001cf2:	5f                   	pop    edi
c0001cf3:	c3                   	ret    
c0001cf4:	c3                   	ret    

c0001cf5 <mem_set>:
c0001cf5:	01 c1                	add    ecx,eax
c0001cf7:	40                   	inc    eax
c0001cf8:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cfb:	39 c8                	cmp    eax,ecx
c0001cfd:	75 f8                	jne    c0001cf7 <mem_set+0x2>
c0001cff:	c3                   	ret    

c0001d00 <mem_cmp>:
c0001d00:	57                   	push   edi
c0001d01:	56                   	push   esi
c0001d02:	89 c6                	mov    esi,eax
c0001d04:	53                   	push   ebx
c0001d05:	46                   	inc    esi
c0001d06:	42                   	inc    edx
c0001d07:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d0b:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d0f:	29 fb                	sub    ebx,edi
c0001d11:	89 cf                	mov    edi,ecx
c0001d13:	29 f7                	sub    edi,esi
c0001d15:	01 c7                	add    edi,eax
c0001d17:	74 04                	je     c0001d1d <mem_cmp+0x1d>
c0001d19:	85 db                	test   ebx,ebx
c0001d1b:	74 e8                	je     c0001d05 <mem_cmp+0x5>
c0001d1d:	89 d8                	mov    eax,ebx
c0001d1f:	5b                   	pop    ebx
c0001d20:	5e                   	pop    esi
c0001d21:	5f                   	pop    edi
c0001d22:	c3                   	ret    

c0001d23 <chk_chr>:
c0001d23:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d26:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d29:	74 07                	je     c0001d32 <chk_chr+0xf>
c0001d2b:	39 d1                	cmp    ecx,edx
c0001d2d:	74 03                	je     c0001d32 <chk_chr+0xf>
c0001d2f:	40                   	inc    eax
c0001d30:	eb f1                	jmp    c0001d23 <chk_chr>
c0001d32:	89 c8                	mov    eax,ecx
c0001d34:	c3                   	ret    

c0001d35 <dbc_1st>:
c0001d35:	31 c0                	xor    eax,eax
c0001d37:	c3                   	ret    

c0001d38 <dbc_2nd>:
c0001d38:	31 c0                	xor    eax,eax
c0001d3a:	c3                   	ret    

c0001d3b <tchar2uni>:
c0001d3b:	57                   	push   edi
c0001d3c:	89 c7                	mov    edi,eax
c0001d3e:	56                   	push   esi
c0001d3f:	53                   	push   ebx
c0001d40:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d42:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d44:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d47:	84 c9                	test   cl,cl
c0001d49:	78 0a                	js     c0001d55 <tchar2uni+0x1a>
c0001d4b:	0f b6 d1             	movzx  edx,cl
c0001d4e:	89 f3                	mov    ebx,esi
c0001d50:	e9 9f 00 00 00       	jmp    c0001df4 <tchar2uni+0xb9>
c0001d55:	88 ca                	mov    dl,cl
c0001d57:	83 e2 e0             	and    edx,0xffffffe0
c0001d5a:	80 fa c0             	cmp    dl,0xc0
c0001d5d:	75 0c                	jne    c0001d6b <tchar2uni+0x30>
c0001d5f:	89 ca                	mov    edx,ecx
c0001d61:	b9 01 00 00 00       	mov    ecx,0x1
c0001d66:	83 e2 1f             	and    edx,0x1f
c0001d69:	eb 2e                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d6b:	88 ca                	mov    dl,cl
c0001d6d:	83 e2 f0             	and    edx,0xfffffff0
c0001d70:	80 fa e0             	cmp    dl,0xe0
c0001d73:	75 0c                	jne    c0001d81 <tchar2uni+0x46>
c0001d75:	89 ca                	mov    edx,ecx
c0001d77:	b9 02 00 00 00       	mov    ecx,0x2
c0001d7c:	83 e2 0f             	and    edx,0xf
c0001d7f:	eb 18                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d81:	88 ca                	mov    dl,cl
c0001d83:	83 e2 f8             	and    edx,0xfffffff8
c0001d86:	88 d0                	mov    al,dl
c0001d88:	83 ca ff             	or     edx,0xffffffff
c0001d8b:	3c f0                	cmp    al,0xf0
c0001d8d:	75 6c                	jne    c0001dfb <tchar2uni+0xc0>
c0001d8f:	89 ca                	mov    edx,ecx
c0001d91:	b9 03 00 00 00       	mov    ecx,0x3
c0001d96:	83 e2 07             	and    edx,0x7
c0001d99:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d9d:	46                   	inc    esi
c0001d9e:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001da1:	88 c8                	mov    al,cl
c0001da3:	83 e0 c0             	and    eax,0xffffffc0
c0001da6:	3c 80                	cmp    al,0x80
c0001da8:	75 4e                	jne    c0001df8 <tchar2uni+0xbd>
c0001daa:	c1 e2 06             	shl    edx,0x6
c0001dad:	83 e1 3f             	and    ecx,0x3f
c0001db0:	09 ca                	or     edx,ecx
c0001db2:	39 de                	cmp    esi,ebx
c0001db4:	75 e7                	jne    c0001d9d <tchar2uni+0x62>
c0001db6:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001db9:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001dbf:	77 37                	ja     c0001df8 <tchar2uni+0xbd>
c0001dc1:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001dc7:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001dcd:	76 29                	jbe    c0001df8 <tchar2uni+0xbd>
c0001dcf:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001dd5:	76 1d                	jbe    c0001df4 <tchar2uni+0xb9>
c0001dd7:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001ddd:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001de3:	c1 e1 06             	shl    ecx,0x6
c0001de6:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001dec:	09 ca                	or     edx,ecx
c0001dee:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001df4:	89 1f                	mov    DWORD PTR [edi],ebx
c0001df6:	eb 03                	jmp    c0001dfb <tchar2uni+0xc0>
c0001df8:	83 ca ff             	or     edx,0xffffffff
c0001dfb:	5b                   	pop    ebx
c0001dfc:	89 d0                	mov    eax,edx
c0001dfe:	5e                   	pop    esi
c0001dff:	5f                   	pop    edi
c0001e00:	c3                   	ret    

c0001e01 <put_utf>:
c0001e01:	53                   	push   ebx
c0001e02:	83 f8 7f             	cmp    eax,0x7f
c0001e05:	89 c3                	mov    ebx,eax
c0001e07:	b0 00                	mov    al,0x0
c0001e09:	77 11                	ja     c0001e1c <put_utf+0x1b>
c0001e0b:	85 c9                	test   ecx,ecx
c0001e0d:	0f 84 e5 00 00 00    	je     c0001ef8 <put_utf+0xf7>
c0001e13:	88 1a                	mov    BYTE PTR [edx],bl
c0001e15:	b0 01                	mov    al,0x1
c0001e17:	e9 dc 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e1c:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e22:	77 23                	ja     c0001e47 <put_utf+0x46>
c0001e24:	83 f9 01             	cmp    ecx,0x1
c0001e27:	0f 86 cb 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e2d:	89 d8                	mov    eax,ebx
c0001e2f:	83 e3 3f             	and    ebx,0x3f
c0001e32:	c1 e8 06             	shr    eax,0x6
c0001e35:	83 cb 80             	or     ebx,0xffffff80
c0001e38:	83 c8 c0             	or     eax,0xffffffc0
c0001e3b:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e3e:	88 02                	mov    BYTE PTR [edx],al
c0001e40:	b0 02                	mov    al,0x2
c0001e42:	e9 b1 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e47:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e4d:	77 40                	ja     c0001e8f <put_utf+0x8e>
c0001e4f:	83 f9 02             	cmp    ecx,0x2
c0001e52:	0f 86 a0 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e58:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e5e:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e64:	0f 86 8e 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e6a:	89 d8                	mov    eax,ebx
c0001e6c:	c1 e8 0c             	shr    eax,0xc
c0001e6f:	83 c8 e0             	or     eax,0xffffffe0
c0001e72:	88 02                	mov    BYTE PTR [edx],al
c0001e74:	89 d8                	mov    eax,ebx
c0001e76:	83 e3 3f             	and    ebx,0x3f
c0001e79:	c1 e8 06             	shr    eax,0x6
c0001e7c:	83 cb 80             	or     ebx,0xffffff80
c0001e7f:	83 e0 3f             	and    eax,0x3f
c0001e82:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e85:	83 c8 80             	or     eax,0xffffff80
c0001e88:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e8b:	b0 03                	mov    al,0x3
c0001e8d:	eb 69                	jmp    c0001ef8 <put_utf+0xf7>
c0001e8f:	83 f9 03             	cmp    ecx,0x3
c0001e92:	76 64                	jbe    c0001ef8 <put_utf+0xf7>
c0001e94:	89 d9                	mov    ecx,ebx
c0001e96:	0f b7 c3             	movzx  eax,bx
c0001e99:	66 31 c9             	xor    cx,cx
c0001e9c:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001ea2:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001ea8:	c1 e9 06             	shr    ecx,0x6
c0001eab:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001eb1:	77 43                	ja     c0001ef6 <put_utf+0xf5>
c0001eb3:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001eb9:	77 3b                	ja     c0001ef6 <put_utf+0xf5>
c0001ebb:	09 cb                	or     ebx,ecx
c0001ebd:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ec3:	89 d8                	mov    eax,ebx
c0001ec5:	c1 e8 12             	shr    eax,0x12
c0001ec8:	83 c8 f0             	or     eax,0xfffffff0
c0001ecb:	88 02                	mov    BYTE PTR [edx],al
c0001ecd:	89 d8                	mov    eax,ebx
c0001ecf:	c1 e8 0c             	shr    eax,0xc
c0001ed2:	83 e0 3f             	and    eax,0x3f
c0001ed5:	83 c8 80             	or     eax,0xffffff80
c0001ed8:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001edb:	89 d8                	mov    eax,ebx
c0001edd:	83 e3 3f             	and    ebx,0x3f
c0001ee0:	c1 e8 06             	shr    eax,0x6
c0001ee3:	83 cb 80             	or     ebx,0xffffff80
c0001ee6:	83 e0 3f             	and    eax,0x3f
c0001ee9:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eec:	83 c8 80             	or     eax,0xffffff80
c0001eef:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001ef2:	b0 04                	mov    al,0x4
c0001ef4:	eb 02                	jmp    c0001ef8 <put_utf+0xf7>
c0001ef6:	31 c0                	xor    eax,eax
c0001ef8:	5b                   	pop    ebx
c0001ef9:	c3                   	ret    

c0001efa <clst2sect>:
c0001efa:	89 c1                	mov    ecx,eax
c0001efc:	83 ea 02             	sub    edx,0x2
c0001eff:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001f02:	83 e8 02             	sub    eax,0x2
c0001f05:	39 d0                	cmp    eax,edx
c0001f07:	76 0d                	jbe    c0001f16 <clst2sect+0x1c>
c0001f09:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001f0d:	f7 e2                	mul    edx
c0001f0f:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001f12:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001f15:	c3                   	ret    
c0001f16:	31 c0                	xor    eax,eax
c0001f18:	31 d2                	xor    edx,edx
c0001f1a:	c3                   	ret    

c0001f1b <clmt_clust>:
c0001f1b:	57                   	push   edi
c0001f1c:	89 cf                	mov    edi,ecx
c0001f1e:	56                   	push   esi
c0001f1f:	89 d6                	mov    esi,edx
c0001f21:	53                   	push   ebx
c0001f22:	0f ac fe 09          	shrd   esi,edi,0x9
c0001f26:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001f29:	89 f2                	mov    edx,esi
c0001f2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0001f2d:	c1 ef 09             	shr    edi,0x9
c0001f30:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001f34:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001f37:	89 f9                	mov    ecx,edi
c0001f39:	31 ff                	xor    edi,edi
c0001f3b:	57                   	push   edi
c0001f3c:	56                   	push   esi
c0001f3d:	51                   	push   ecx
c0001f3e:	52                   	push   edx
c0001f3f:	e8 68 4a 02 00       	call   c00269ac <__udivdi3>
c0001f44:	83 c4 10             	add    esp,0x10
c0001f47:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f49:	85 d2                	test   edx,edx
c0001f4b:	74 10                	je     c0001f5d <clmt_clust+0x42>
c0001f4d:	39 d0                	cmp    eax,edx
c0001f4f:	72 07                	jb     c0001f58 <clmt_clust+0x3d>
c0001f51:	29 d0                	sub    eax,edx
c0001f53:	83 c3 08             	add    ebx,0x8
c0001f56:	eb ef                	jmp    c0001f47 <clmt_clust+0x2c>
c0001f58:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f5b:	89 c2                	mov    edx,eax
c0001f5d:	5b                   	pop    ebx
c0001f5e:	89 d0                	mov    eax,edx
c0001f60:	5e                   	pop    esi
c0001f61:	5f                   	pop    edi
c0001f62:	c3                   	ret    

c0001f63 <pick_lfn>:
c0001f63:	55                   	push   ebp
c0001f64:	57                   	push   edi
c0001f65:	56                   	push   esi
c0001f66:	89 d6                	mov    esi,edx
c0001f68:	53                   	push   ebx
c0001f69:	89 c3                	mov    ebx,eax
c0001f6b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f6e:	e8 ee fc ff ff       	call   c0001c61 <ld_word>
c0001f73:	66 85 c0             	test   ax,ax
c0001f76:	74 04                	je     c0001f7c <pick_lfn+0x19>
c0001f78:	31 c0                	xor    eax,eax
c0001f7a:	eb 5c                	jmp    c0001fd8 <pick_lfn+0x75>
c0001f7c:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f7f:	bd 01 00 00 00       	mov    ebp,0x1
c0001f84:	83 e1 bf             	and    ecx,0xffffffbf
c0001f87:	31 ff                	xor    edi,edi
c0001f89:	49                   	dec    ecx
c0001f8a:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f8d:	0f b6 87 40 94 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6bc0]
c0001f94:	01 f0                	add    eax,esi
c0001f96:	e8 c6 fc ff ff       	call   c0001c61 <ld_word>
c0001f9b:	66 85 ed             	test   bp,bp
c0001f9e:	74 11                	je     c0001fb1 <pick_lfn+0x4e>
c0001fa0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fa6:	77 d0                	ja     c0001f78 <pick_lfn+0x15>
c0001fa8:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fac:	89 c5                	mov    ebp,eax
c0001fae:	41                   	inc    ecx
c0001faf:	eb 04                	jmp    c0001fb5 <pick_lfn+0x52>
c0001fb1:	66 40                	inc    ax
c0001fb3:	75 c3                	jne    c0001f78 <pick_lfn+0x15>
c0001fb5:	47                   	inc    edi
c0001fb6:	83 ff 0d             	cmp    edi,0xd
c0001fb9:	75 d2                	jne    c0001f8d <pick_lfn+0x2a>
c0001fbb:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fbe:	74 13                	je     c0001fd3 <pick_lfn+0x70>
c0001fc0:	66 85 ed             	test   bp,bp
c0001fc3:	74 0e                	je     c0001fd3 <pick_lfn+0x70>
c0001fc5:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fcb:	77 ab                	ja     c0001f78 <pick_lfn+0x15>
c0001fcd:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001fd3:	b8 01 00 00 00       	mov    eax,0x1
c0001fd8:	5b                   	pop    ebx
c0001fd9:	5e                   	pop    esi
c0001fda:	5f                   	pop    edi
c0001fdb:	5d                   	pop    ebp
c0001fdc:	c3                   	ret    

c0001fdd <put_lfn>:
c0001fdd:	55                   	push   ebp
c0001fde:	31 ed                	xor    ebp,ebp
c0001fe0:	57                   	push   edi
c0001fe1:	89 d7                	mov    edi,edx
c0001fe3:	56                   	push   esi
c0001fe4:	31 f6                	xor    esi,esi
c0001fe6:	53                   	push   ebx
c0001fe7:	83 ec 08             	sub    esp,0x8
c0001fea:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fed:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001ff1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001ff5:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001ffb:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ffe:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002001:	31 d2                	xor    edx,edx
c0002003:	e8 cb fc ff ff       	call   c0001cd3 <st_word>
c0002008:	0f b6 d9             	movzx  ebx,cl
c000200b:	4b                   	dec    ebx
c000200c:	6b db 0d             	imul   ebx,ebx,0xd
c000200f:	66 83 fe ff          	cmp    si,0xffff
c0002013:	74 08                	je     c000201d <put_lfn+0x40>
c0002015:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002018:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000201c:	43                   	inc    ebx
c000201d:	0f b6 85 40 94 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6bc0]
c0002024:	0f b7 d6             	movzx  edx,si
c0002027:	01 f8                	add    eax,edi
c0002029:	e8 a5 fc ff ff       	call   c0001cd3 <st_word>
c000202e:	66 85 f6             	test   si,si
c0002031:	75 03                	jne    c0002036 <put_lfn+0x59>
c0002033:	83 ce ff             	or     esi,0xffffffff
c0002036:	45                   	inc    ebp
c0002037:	83 fd 0d             	cmp    ebp,0xd
c000203a:	75 d3                	jne    c000200f <put_lfn+0x32>
c000203c:	66 46                	inc    si
c000203e:	74 0a                	je     c000204a <put_lfn+0x6d>
c0002040:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002043:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002048:	75 09                	jne    c0002053 <put_lfn+0x76>
c000204a:	88 c8                	mov    al,cl
c000204c:	83 c8 40             	or     eax,0x40
c000204f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002053:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002057:	88 07                	mov    BYTE PTR [edi],al
c0002059:	83 c4 08             	add    esp,0x8
c000205c:	5b                   	pop    ebx
c000205d:	5e                   	pop    esi
c000205e:	5f                   	pop    edi
c000205f:	5d                   	pop    ebp
c0002060:	c3                   	ret    

c0002061 <gen_numname>:
c0002061:	57                   	push   edi
c0002062:	89 cf                	mov    edi,ecx
c0002064:	56                   	push   esi
c0002065:	b9 0b 00 00 00       	mov    ecx,0xb
c000206a:	53                   	push   ebx
c000206b:	89 c6                	mov    esi,eax
c000206d:	83 ec 10             	sub    esp,0x10
c0002070:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002074:	e8 67 fc ff ff       	call   c0001ce0 <mem_cpy>
c0002079:	83 fb 05             	cmp    ebx,0x5
c000207c:	76 2d                	jbe    c00020ab <gen_numname+0x4a>
c000207e:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002081:	66 85 c0             	test   ax,ax
c0002084:	74 25                	je     c00020ab <gen_numname+0x4a>
c0002086:	83 c7 02             	add    edi,0x2
c0002089:	ba 10 00 00 00       	mov    edx,0x10
c000208e:	01 db                	add    ebx,ebx
c0002090:	89 c1                	mov    ecx,eax
c0002092:	66 d1 e8             	shr    ax,1
c0002095:	83 e1 01             	and    ecx,0x1
c0002098:	01 cb                	add    ebx,ecx
c000209a:	0f ba e3 10          	bt     ebx,0x10
c000209e:	73 06                	jae    c00020a6 <gen_numname+0x45>
c00020a0:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020a6:	4a                   	dec    edx
c00020a7:	75 e5                	jne    c000208e <gen_numname+0x2d>
c00020a9:	eb d3                	jmp    c000207e <gen_numname+0x1d>
c00020ab:	b8 07 00 00 00       	mov    eax,0x7
c00020b0:	88 d9                	mov    cl,bl
c00020b2:	83 e1 0f             	and    ecx,0xf
c00020b5:	8d 51 30             	lea    edx,[ecx+0x30]
c00020b8:	80 fa 39             	cmp    dl,0x39
c00020bb:	76 03                	jbe    c00020c0 <gen_numname+0x5f>
c00020bd:	8d 51 37             	lea    edx,[ecx+0x37]
c00020c0:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020c3:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020c7:	89 da                	mov    edx,ebx
c00020c9:	c1 ea 04             	shr    edx,0x4
c00020cc:	83 fb 0f             	cmp    ebx,0xf
c00020cf:	76 06                	jbe    c00020d7 <gen_numname+0x76>
c00020d1:	89 c8                	mov    eax,ecx
c00020d3:	89 d3                	mov    ebx,edx
c00020d5:	eb d9                	jmp    c00020b0 <gen_numname+0x4f>
c00020d7:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020dc:	31 d2                	xor    edx,edx
c00020de:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020e1:	8d 04 16             	lea    eax,[esi+edx*1]
c00020e4:	39 ca                	cmp    edx,ecx
c00020e6:	73 18                	jae    c0002100 <gen_numname+0x9f>
c00020e8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020eb:	3c 20                	cmp    al,0x20
c00020ed:	74 11                	je     c0002100 <gen_numname+0x9f>
c00020ef:	e8 41 fc ff ff       	call   c0001d35 <dbc_1st>
c00020f4:	85 c0                	test   eax,eax
c00020f6:	74 05                	je     c00020fd <gen_numname+0x9c>
c00020f8:	39 d3                	cmp    ebx,edx
c00020fa:	74 04                	je     c0002100 <gen_numname+0x9f>
c00020fc:	42                   	inc    edx
c00020fd:	42                   	inc    edx
c00020fe:	eb e1                	jmp    c00020e1 <gen_numname+0x80>
c0002100:	b0 20                	mov    al,0x20
c0002102:	83 f9 07             	cmp    ecx,0x7
c0002105:	77 05                	ja     c000210c <gen_numname+0xab>
c0002107:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000210b:	41                   	inc    ecx
c000210c:	42                   	inc    edx
c000210d:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002111:	83 fa 07             	cmp    edx,0x7
c0002114:	76 ea                	jbe    c0002100 <gen_numname+0x9f>
c0002116:	83 c4 10             	add    esp,0x10
c0002119:	5b                   	pop    ebx
c000211a:	5e                   	pop    esi
c000211b:	5f                   	pop    edi
c000211c:	c3                   	ret    

c000211d <sum_sfn>:
c000211d:	31 c9                	xor    ecx,ecx
c000211f:	31 d2                	xor    edx,edx
c0002121:	d0 ca                	ror    dl,1
c0002123:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002126:	41                   	inc    ecx
c0002127:	83 f9 0b             	cmp    ecx,0xb
c000212a:	75 f5                	jne    c0002121 <sum_sfn+0x4>
c000212c:	88 d0                	mov    al,dl
c000212e:	c3                   	ret    

c000212f <xdir_sum>:
c000212f:	56                   	push   esi
c0002130:	31 c9                	xor    ecx,ecx
c0002132:	53                   	push   ebx
c0002133:	31 d2                	xor    edx,edx
c0002135:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002139:	43                   	inc    ebx
c000213a:	c1 e3 05             	shl    ebx,0x5
c000213d:	83 fa 02             	cmp    edx,0x2
c0002140:	74 0b                	je     c000214d <xdir_sum+0x1e>
c0002142:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002146:	66 d1 c9             	ror    cx,1
c0002149:	01 f1                	add    ecx,esi
c000214b:	eb 05                	jmp    c0002152 <xdir_sum+0x23>
c000214d:	ba 03 00 00 00       	mov    edx,0x3
c0002152:	42                   	inc    edx
c0002153:	39 d3                	cmp    ebx,edx
c0002155:	77 e6                	ja     c000213d <xdir_sum+0xe>
c0002157:	89 c8                	mov    eax,ecx
c0002159:	5b                   	pop    ebx
c000215a:	5e                   	pop    esi
c000215b:	c3                   	ret    

c000215c <xsum32>:
c000215c:	d1 ca                	ror    edx,1
c000215e:	0f b6 c0             	movzx  eax,al
c0002161:	01 d0                	add    eax,edx
c0002163:	c3                   	ret    

c0002164 <get_xfileinfo>:
c0002164:	55                   	push   ebp
c0002165:	31 c9                	xor    ecx,ecx
c0002167:	57                   	push   edi
c0002168:	bd 40 00 00 00       	mov    ebp,0x40
c000216d:	56                   	push   esi
c000216e:	31 ff                	xor    edi,edi
c0002170:	53                   	push   ebx
c0002171:	89 c6                	mov    esi,eax
c0002173:	83 ec 0c             	sub    esp,0xc
c0002176:	89 d3                	mov    ebx,edx
c0002178:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000217f:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002183:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002186:	76 6d                	jbe    c00021f5 <get_xfileinfo+0x91>
c0002188:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000218e:	76 0b                	jbe    c000219b <get_xfileinfo+0x37>
c0002190:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0002194:	bf 01 00 00 00       	mov    edi,0x1
c0002199:	eb 63                	jmp    c00021fe <get_xfileinfo+0x9a>
c000219b:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c00021a1:	75 03                	jne    c00021a6 <get_xfileinfo+0x42>
c00021a3:	83 c5 02             	add    ebp,0x2
c00021a6:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00021a9:	83 c5 02             	add    ebp,0x2
c00021ac:	e8 b0 fa ff ff       	call   c0001c61 <ld_word>
c00021b1:	ff 04 24             	inc    DWORD PTR [esp]
c00021b4:	66 85 c9             	test   cx,cx
c00021b7:	75 0d                	jne    c00021c6 <get_xfileinfo+0x62>
c00021b9:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00021bf:	66 81 fa ff 07       	cmp    dx,0x7ff
c00021c4:	76 2b                	jbe    c00021f1 <get_xfileinfo+0x8d>
c00021c6:	c1 e1 10             	shl    ecx,0x10
c00021c9:	ba ff 00 00 00       	mov    edx,0xff
c00021ce:	0f b7 c0             	movzx  eax,ax
c00021d1:	29 fa                	sub    edx,edi
c00021d3:	09 c8                	or     eax,ecx
c00021d5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00021d9:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021dd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021e1:	e8 1b fc ff ff       	call   c0001e01 <put_utf>
c00021e6:	84 c0                	test   al,al
c00021e8:	74 a6                	je     c0002190 <get_xfileinfo+0x2c>
c00021ea:	0f b6 c0             	movzx  eax,al
c00021ed:	01 c7                	add    edi,eax
c00021ef:	31 c0                	xor    eax,eax
c00021f1:	89 c1                	mov    ecx,eax
c00021f3:	eb 8a                	jmp    c000217f <get_xfileinfo+0x1b>
c00021f5:	85 ff                	test   edi,edi
c00021f7:	74 97                	je     c0002190 <get_xfileinfo+0x2c>
c00021f9:	66 85 c9             	test   cx,cx
c00021fc:	75 92                	jne    c0002190 <get_xfileinfo+0x2c>
c00021fe:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0002203:	31 c0                	xor    eax,eax
c0002205:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002209:	31 d2                	xor    edx,edx
c000220b:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c000220e:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0002211:	80 e1 10             	and    cl,0x10
c0002214:	75 08                	jne    c000221e <get_xfileinfo+0xba>
c0002216:	8d 46 38             	lea    eax,[esi+0x38]
c0002219:	e8 68 fa ff ff       	call   c0001c86 <ld_qword>
c000221e:	89 03                	mov    DWORD PTR [ebx],eax
c0002220:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002223:	8d 46 0c             	lea    eax,[esi+0xc]
c0002226:	e8 36 fa ff ff       	call   c0001c61 <ld_word>
c000222b:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c000222f:	8d 46 0e             	lea    eax,[esi+0xe]
c0002232:	e8 2a fa ff ff       	call   c0001c61 <ld_word>
c0002237:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000223b:	83 c4 0c             	add    esp,0xc
c000223e:	5b                   	pop    ebx
c000223f:	5e                   	pop    esi
c0002240:	5f                   	pop    edi
c0002241:	5d                   	pop    ebp
c0002242:	c3                   	ret    

c0002243 <get_ldnumber>:
c0002243:	8b 10                	mov    edx,DWORD PTR [eax]
c0002245:	85 d2                	test   edx,edx
c0002247:	74 14                	je     c000225d <get_ldnumber+0x1a>
c0002249:	56                   	push   esi
c000224a:	53                   	push   ebx
c000224b:	89 d3                	mov    ebx,edx
c000224d:	43                   	inc    ebx
c000224e:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002251:	80 f9 1f             	cmp    cl,0x1f
c0002254:	76 0d                	jbe    c0002263 <get_ldnumber+0x20>
c0002256:	80 f9 3a             	cmp    cl,0x3a
c0002259:	75 f2                	jne    c000224d <get_ldnumber+0xa>
c000225b:	eb 0a                	jmp    c0002267 <get_ldnumber+0x24>
c000225d:	83 c9 ff             	or     ecx,0xffffffff
c0002260:	89 c8                	mov    eax,ecx
c0002262:	c3                   	ret    
c0002263:	31 c9                	xor    ecx,ecx
c0002265:	eb 24                	jmp    c000228b <get_ldnumber+0x48>
c0002267:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226a:	8d 4e d0             	lea    ecx,[esi-0x30]
c000226d:	80 f9 09             	cmp    cl,0x9
c0002270:	77 16                	ja     c0002288 <get_ldnumber+0x45>
c0002272:	83 c2 02             	add    edx,0x2
c0002275:	83 c9 ff             	or     ecx,0xffffffff
c0002278:	39 d3                	cmp    ebx,edx
c000227a:	75 0f                	jne    c000228b <get_ldnumber+0x48>
c000227c:	89 f2                	mov    edx,esi
c000227e:	89 18                	mov    DWORD PTR [eax],ebx
c0002280:	0f be ca             	movsx  ecx,dl
c0002283:	83 e9 30             	sub    ecx,0x30
c0002286:	eb 03                	jmp    c000228b <get_ldnumber+0x48>
c0002288:	83 c9 ff             	or     ecx,0xffffffff
c000228b:	89 c8                	mov    eax,ecx
c000228d:	5b                   	pop    ebx
c000228e:	5e                   	pop    esi
c000228f:	c3                   	ret    

c0002290 <crc32>:
c0002290:	56                   	push   esi
c0002291:	89 d6                	mov    esi,edx
c0002293:	53                   	push   ebx
c0002294:	b2 01                	mov    dl,0x1
c0002296:	bb 08 00 00 00       	mov    ebx,0x8
c000229b:	89 f1                	mov    ecx,esi
c000229d:	84 d1                	test   cl,dl
c000229f:	0f 95 c1             	setne  cl
c00022a2:	0f b6 c9             	movzx  ecx,cl
c00022a5:	31 c1                	xor    ecx,eax
c00022a7:	89 c8                	mov    eax,ecx
c00022a9:	d1 e8                	shr    eax,1
c00022ab:	80 e1 01             	and    cl,0x1
c00022ae:	74 05                	je     c00022b5 <crc32+0x25>
c00022b0:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00022b5:	d1 e2                	shl    edx,1
c00022b7:	4b                   	dec    ebx
c00022b8:	75 e1                	jne    c000229b <crc32+0xb>
c00022ba:	5b                   	pop    ebx
c00022bb:	5e                   	pop    esi
c00022bc:	c3                   	ret    

c00022bd <test_gpt_header>:
c00022bd:	55                   	push   ebp
c00022be:	b9 10 00 00 00       	mov    ecx,0x10
c00022c3:	57                   	push   edi
c00022c4:	ba 40 93 02 c0       	mov    edx,0xc0029340
c00022c9:	56                   	push   esi
c00022ca:	31 ff                	xor    edi,edi
c00022cc:	53                   	push   ebx
c00022cd:	89 c3                	mov    ebx,eax
c00022cf:	e8 2c fa ff ff       	call   c0001d00 <mem_cmp>
c00022d4:	85 c0                	test   eax,eax
c00022d6:	75 55                	jne    c000232d <test_gpt_header+0x70>
c00022d8:	89 c7                	mov    edi,eax
c00022da:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022df:	83 ce ff             	or     esi,0xffffffff
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	83 fd 03             	cmp    ebp,0x3
c00022e7:	76 05                	jbe    c00022ee <test_gpt_header+0x31>
c00022e9:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022ee:	89 f0                	mov    eax,esi
c00022f0:	45                   	inc    ebp
c00022f1:	e8 9a ff ff ff       	call   c0002290 <crc32>
c00022f6:	83 fd 4c             	cmp    ebp,0x4c
c00022f9:	89 c6                	mov    esi,eax
c00022fb:	75 e5                	jne    c00022e2 <test_gpt_header+0x25>
c00022fd:	8d 43 10             	lea    eax,[ebx+0x10]
c0002300:	f7 d6                	not    esi
c0002302:	e8 67 f9 ff ff       	call   c0001c6e <ld_dword>
c0002307:	39 c6                	cmp    esi,eax
c0002309:	75 22                	jne    c000232d <test_gpt_header+0x70>
c000230b:	8d 43 54             	lea    eax,[ebx+0x54]
c000230e:	e8 5b f9 ff ff       	call   c0001c6e <ld_dword>
c0002313:	83 c0 80             	add    eax,0xffffff80
c0002316:	75 15                	jne    c000232d <test_gpt_header+0x70>
c0002318:	8d 43 50             	lea    eax,[ebx+0x50]
c000231b:	e8 4e f9 ff ff       	call   c0001c6e <ld_dword>
c0002320:	3d 80 00 00 00       	cmp    eax,0x80
c0002325:	0f 96 c0             	setbe  al
c0002328:	0f b6 c0             	movzx  eax,al
c000232b:	89 c7                	mov    edi,eax
c000232d:	5b                   	pop    ebx
c000232e:	89 f8                	mov    eax,edi
c0002330:	5e                   	pop    esi
c0002331:	5f                   	pop    edi
c0002332:	5d                   	pop    ebp
c0002333:	c3                   	ret    

c0002334 <make_rand>:
c0002334:	56                   	push   esi
c0002335:	85 c0                	test   eax,eax
c0002337:	53                   	push   ebx
c0002338:	75 05                	jne    c000233f <make_rand+0xb>
c000233a:	b8 01 00 00 00       	mov    eax,0x1
c000233f:	01 d1                	add    ecx,edx
c0002341:	bb 08 00 00 00       	mov    ebx,0x8
c0002346:	89 c6                	mov    esi,eax
c0002348:	d1 e8                	shr    eax,1
c000234a:	83 e6 01             	and    esi,0x1
c000234d:	85 f6                	test   esi,esi
c000234f:	74 05                	je     c0002356 <make_rand+0x22>
c0002351:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002356:	4b                   	dec    ebx
c0002357:	75 ed                	jne    c0002346 <make_rand+0x12>
c0002359:	42                   	inc    edx
c000235a:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000235d:	39 ca                	cmp    edx,ecx
c000235f:	75 e0                	jne    c0002341 <make_rand+0xd>
c0002361:	5b                   	pop    ebx
c0002362:	5e                   	pop    esi
c0002363:	c3                   	ret    

c0002364 <validate>:
c0002364:	56                   	push   esi
c0002365:	53                   	push   ebx
c0002366:	89 d6                	mov    esi,edx
c0002368:	51                   	push   ecx
c0002369:	85 c0                	test   eax,eax
c000236b:	75 09                	jne    c0002376 <validate+0x12>
c000236d:	b8 09 00 00 00       	mov    eax,0x9
c0002372:	31 c9                	xor    ecx,ecx
c0002374:	eb 2f                	jmp    c00023a5 <validate+0x41>
c0002376:	89 c3                	mov    ebx,eax
c0002378:	8b 00                	mov    eax,DWORD PTR [eax]
c000237a:	85 c0                	test   eax,eax
c000237c:	74 ef                	je     c000236d <validate+0x9>
c000237e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002381:	74 ea                	je     c000236d <validate+0x9>
c0002383:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002387:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000238b:	75 e0                	jne    c000236d <validate+0x9>
c000238d:	83 ec 0c             	sub    esp,0xc
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 76 f8 ff ff       	call   c0001c10 <disk_status>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	a8 01                	test   al,0x1
c000239f:	75 cc                	jne    c000236d <validate+0x9>
c00023a1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00023a3:	31 c0                	xor    eax,eax
c00023a5:	89 0e                	mov    DWORD PTR [esi],ecx
c00023a7:	5a                   	pop    edx
c00023a8:	5b                   	pop    ebx
c00023a9:	5e                   	pop    esi
c00023aa:	c3                   	ret    

c00023ab <sync_window>:
c00023ab:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00023af:	0f 84 85 00 00 00    	je     c000243a <sync_window+0x8f>
c00023b5:	55                   	push   ebp
c00023b6:	8d 68 54             	lea    ebp,[eax+0x54]
c00023b9:	57                   	push   edi
c00023ba:	56                   	push   esi
c00023bb:	53                   	push   ebx
c00023bc:	89 c3                	mov    ebx,eax
c00023be:	83 ec 28             	sub    esp,0x28
c00023c1:	6a 01                	push   0x1
c00023c3:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00023c6:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00023c9:	55                   	push   ebp
c00023ca:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023ce:	50                   	push   eax
c00023cf:	e8 58 f8 ff ff       	call   c0001c2c <disk_write>
c00023d4:	83 c4 20             	add    esp,0x20
c00023d7:	ba 01 00 00 00       	mov    edx,0x1
c00023dc:	85 c0                	test   eax,eax
c00023de:	75 50                	jne    c0002430 <sync_window+0x85>
c00023e0:	31 ff                	xor    edi,edi
c00023e2:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023e5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023e9:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023ed:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023f0:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023f3:	89 c6                	mov    esi,eax
c00023f5:	89 d7                	mov    edi,edx
c00023f7:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023fa:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023fe:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c0002401:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002405:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002409:	73 23                	jae    c000242e <sync_window+0x83>
c000240b:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000240f:	75 1d                	jne    c000242e <sync_window+0x83>
c0002411:	83 ec 0c             	sub    esp,0xc
c0002414:	6a 01                	push   0x1
c0002416:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000241a:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000241e:	52                   	push   edx
c000241f:	50                   	push   eax
c0002420:	55                   	push   ebp
c0002421:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002425:	50                   	push   eax
c0002426:	e8 01 f8 ff ff       	call   c0001c2c <disk_write>
c000242b:	83 c4 20             	add    esp,0x20
c000242e:	31 d2                	xor    edx,edx
c0002430:	83 c4 1c             	add    esp,0x1c
c0002433:	89 d0                	mov    eax,edx
c0002435:	5b                   	pop    ebx
c0002436:	5e                   	pop    esi
c0002437:	5f                   	pop    edi
c0002438:	5d                   	pop    ebp
c0002439:	c3                   	ret    
c000243a:	31 d2                	xor    edx,edx
c000243c:	89 d0                	mov    eax,edx
c000243e:	c3                   	ret    

c000243f <move_window>:
c000243f:	56                   	push   esi
c0002440:	53                   	push   ebx
c0002441:	89 c3                	mov    ebx,eax
c0002443:	83 ec 14             	sub    esp,0x14
c0002446:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002449:	75 07                	jne    c0002452 <move_window+0x13>
c000244b:	31 f6                	xor    esi,esi
c000244d:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002450:	74 59                	je     c00024ab <move_window+0x6c>
c0002452:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002456:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000245a:	89 d8                	mov    eax,ebx
c000245c:	e8 4a ff ff ff       	call   c00023ab <sync_window>
c0002461:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002465:	89 c6                	mov    esi,eax
c0002467:	85 c0                	test   eax,eax
c0002469:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000246d:	75 3c                	jne    c00024ab <move_window+0x6c>
c000246f:	83 ec 0c             	sub    esp,0xc
c0002472:	8d 43 54             	lea    eax,[ebx+0x54]
c0002475:	6a 01                	push   0x1
c0002477:	51                   	push   ecx
c0002478:	52                   	push   edx
c0002479:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000247d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002481:	50                   	push   eax
c0002482:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002486:	50                   	push   eax
c0002487:	e8 8a f7 ff ff       	call   c0001c16 <disk_read>
c000248c:	83 c4 20             	add    esp,0x20
c000248f:	85 c0                	test   eax,eax
c0002491:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002495:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002499:	74 0a                	je     c00024a5 <move_window+0x66>
c000249b:	83 ca ff             	or     edx,0xffffffff
c000249e:	be 01 00 00 00       	mov    esi,0x1
c00024a3:	89 d1                	mov    ecx,edx
c00024a5:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00024a8:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00024ab:	89 f0                	mov    eax,esi
c00024ad:	83 c4 14             	add    esp,0x14
c00024b0:	5b                   	pop    ebx
c00024b1:	5e                   	pop    esi
c00024b2:	c3                   	ret    

c00024b3 <check_fs>:
c00024b3:	53                   	push   ebx
c00024b4:	89 c3                	mov    ebx,eax
c00024b6:	83 ec 08             	sub    esp,0x8
c00024b9:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00024bd:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00024c4:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00024cb:	e8 6f ff ff ff       	call   c000243f <move_window>
c00024d0:	ba 04 00 00 00       	mov    edx,0x4
c00024d5:	85 c0                	test   eax,eax
c00024d7:	0f 85 89 00 00 00    	jne    c0002566 <check_fs+0xb3>
c00024dd:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024e3:	e8 79 f7 ff ff       	call   c0001c61 <ld_word>
c00024e8:	ba 03 00 00 00       	mov    edx,0x3
c00024ed:	66 3d 55 aa          	cmp    ax,0xaa55
c00024f1:	75 73                	jne    c0002566 <check_fs+0xb3>
c00024f3:	ba 60 94 02 c0       	mov    edx,0xc0029460
c00024f8:	8d 43 54             	lea    eax,[ebx+0x54]
c00024fb:	b9 0b 00 00 00       	mov    ecx,0xb
c0002500:	e8 fb f7 ff ff       	call   c0001d00 <mem_cmp>
c0002505:	ba 01 00 00 00       	mov    edx,0x1
c000250a:	85 c0                	test   eax,eax
c000250c:	74 58                	je     c0002566 <check_fs+0xb3>
c000250e:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c0002511:	8d 50 18             	lea    edx,[eax+0x18]
c0002514:	80 fa 01             	cmp    dl,0x1
c0002517:	76 09                	jbe    c0002522 <check_fs+0x6f>
c0002519:	ba 02 00 00 00       	mov    edx,0x2
c000251e:	3c eb                	cmp    al,0xeb
c0002520:	75 44                	jne    c0002566 <check_fs+0xb3>
c0002522:	ba 18 c8 02 c0       	mov    edx,0xc002c818
c0002527:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000252d:	b9 03 00 00 00       	mov    ecx,0x3
c0002532:	e8 c9 f7 ff ff       	call   c0001d00 <mem_cmp>
c0002537:	31 d2                	xor    edx,edx
c0002539:	85 c0                	test   eax,eax
c000253b:	74 29                	je     c0002566 <check_fs+0xb3>
c000253d:	ba 6c 94 02 c0       	mov    edx,0xc002946c
c0002542:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002548:	b9 05 00 00 00       	mov    ecx,0x5
c000254d:	e8 ae f7 ff ff       	call   c0001d00 <mem_cmp>
c0002552:	31 d2                	xor    edx,edx
c0002554:	85 c0                	test   eax,eax
c0002556:	74 0e                	je     c0002566 <check_fs+0xb3>
c0002558:	31 d2                	xor    edx,edx
c000255a:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002561:	0f 95 c2             	setne  dl
c0002564:	01 d2                	add    edx,edx
c0002566:	89 d0                	mov    eax,edx
c0002568:	83 c4 08             	add    esp,0x8
c000256b:	5b                   	pop    ebx
c000256c:	c3                   	ret    

c000256d <find_volume>:
c000256d:	55                   	push   ebp
c000256e:	31 c9                	xor    ecx,ecx
c0002570:	57                   	push   edi
c0002571:	56                   	push   esi
c0002572:	89 d6                	mov    esi,edx
c0002574:	53                   	push   ebx
c0002575:	31 d2                	xor    edx,edx
c0002577:	83 ec 3c             	sub    esp,0x3c
c000257a:	89 c3                	mov    ebx,eax
c000257c:	e8 32 ff ff ff       	call   c00024b3 <check_fs>
c0002581:	83 f8 02             	cmp    eax,0x2
c0002584:	74 0e                	je     c0002594 <find_volume+0x27>
c0002586:	0f 87 5d 01 00 00    	ja     c00026e9 <find_volume+0x17c>
c000258c:	85 f6                	test   esi,esi
c000258e:	0f 84 55 01 00 00    	je     c00026e9 <find_volume+0x17c>
c0002594:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000259b:	0f 85 dd 00 00 00    	jne    c000267e <find_volume+0x111>
c00025a1:	31 c9                	xor    ecx,ecx
c00025a3:	ba 01 00 00 00       	mov    edx,0x1
c00025a8:	89 d8                	mov    eax,ebx
c00025aa:	e8 90 fe ff ff       	call   c000243f <move_window>
c00025af:	85 c0                	test   eax,eax
c00025b1:	74 0a                	je     c00025bd <find_volume+0x50>
c00025b3:	b8 04 00 00 00       	mov    eax,0x4
c00025b8:	e9 2c 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025bd:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00025c0:	89 e8                	mov    eax,ebp
c00025c2:	e8 f6 fc ff ff       	call   c00022bd <test_gpt_header>
c00025c7:	85 c0                	test   eax,eax
c00025c9:	75 0a                	jne    c00025d5 <find_volume+0x68>
c00025cb:	b8 03 00 00 00       	mov    eax,0x3
c00025d0:	e9 14 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025d5:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025db:	e8 8e f6 ff ff       	call   c0001c6e <ld_dword>
c00025e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025e4:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025ea:	e8 97 f6 ff ff       	call   c0001c86 <ld_qword>
c00025ef:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025fb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025ff:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002607:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000260b:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000260f:	74 ba                	je     c00025cb <find_volume+0x5e>
c0002611:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002615:	31 c9                	xor    ecx,ecx
c0002617:	c1 e7 07             	shl    edi,0x7
c000261a:	89 d8                	mov    eax,ebx
c000261c:	89 fa                	mov    edx,edi
c000261e:	c1 ea 09             	shr    edx,0x9
c0002621:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002625:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002629:	e8 11 fe ff ff       	call   c000243f <move_window>
c000262e:	85 c0                	test   eax,eax
c0002630:	75 81                	jne    c00025b3 <find_volume+0x46>
c0002632:	81 e7 80 01 00 00    	and    edi,0x180
c0002638:	b9 10 00 00 00       	mov    ecx,0x10
c000263d:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002641:	ba 50 94 02 c0       	mov    edx,0xc0029450
c0002646:	e8 b5 f6 ff ff       	call   c0001d00 <mem_cmp>
c000264b:	85 c0                	test   eax,eax
c000264d:	75 29                	jne    c0002678 <find_volume+0x10b>
c000264f:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002653:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002657:	e8 2a f6 ff ff       	call   c0001c86 <ld_qword>
c000265c:	89 d1                	mov    ecx,edx
c000265e:	89 c2                	mov    edx,eax
c0002660:	89 d8                	mov    eax,ebx
c0002662:	e8 4c fe ff ff       	call   c00024b3 <check_fs>
c0002667:	85 f6                	test   esi,esi
c0002669:	75 07                	jne    c0002672 <find_volume+0x105>
c000266b:	83 f8 01             	cmp    eax,0x1
c000266e:	77 08                	ja     c0002678 <find_volume+0x10b>
c0002670:	eb 77                	jmp    c00026e9 <find_volume+0x17c>
c0002672:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002676:	74 71                	je     c00026e9 <find_volume+0x17c>
c0002678:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000267c:	eb 89                	jmp    c0002607 <find_volume+0x9a>
c000267e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002682:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002688:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000268e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002692:	89 cd                	mov    ebp,ecx
c0002694:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002698:	89 f8                	mov    eax,edi
c000269a:	83 c7 10             	add    edi,0x10
c000269d:	e8 cc f5 ff ff       	call   c0001c6e <ld_dword>
c00026a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00026a6:	89 01                	mov    DWORD PTR [ecx],eax
c00026a8:	83 c1 04             	add    ecx,0x4
c00026ab:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00026af:	75 e3                	jne    c0002694 <find_volume+0x127>
c00026b1:	31 ff                	xor    edi,edi
c00026b3:	85 f6                	test   esi,esi
c00026b5:	74 03                	je     c00026ba <find_volume+0x14d>
c00026b7:	8d 7e ff             	lea    edi,[esi-0x1]
c00026ba:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00026be:	85 d2                	test   edx,edx
c00026c0:	74 14                	je     c00026d6 <find_volume+0x169>
c00026c2:	31 c9                	xor    ecx,ecx
c00026c4:	89 d8                	mov    eax,ebx
c00026c6:	e8 e8 fd ff ff       	call   c00024b3 <check_fs>
c00026cb:	83 f8 01             	cmp    eax,0x1
c00026ce:	76 19                	jbe    c00026e9 <find_volume+0x17c>
c00026d0:	85 f6                	test   esi,esi
c00026d2:	74 0f                	je     c00026e3 <find_volume+0x176>
c00026d4:	eb 13                	jmp    c00026e9 <find_volume+0x17c>
c00026d6:	85 f6                	test   esi,esi
c00026d8:	0f 85 ed fe ff ff    	jne    c00025cb <find_volume+0x5e>
c00026de:	b8 03 00 00 00       	mov    eax,0x3
c00026e3:	47                   	inc    edi
c00026e4:	83 ff 03             	cmp    edi,0x3
c00026e7:	76 d1                	jbe    c00026ba <find_volume+0x14d>
c00026e9:	83 c4 3c             	add    esp,0x3c
c00026ec:	5b                   	pop    ebx
c00026ed:	5e                   	pop    esi
c00026ee:	5f                   	pop    edi
c00026ef:	5d                   	pop    ebp
c00026f0:	c3                   	ret    

c00026f1 <mount_volume>:
c00026f1:	55                   	push   ebp
c00026f2:	57                   	push   edi
c00026f3:	89 cf                	mov    edi,ecx
c00026f5:	56                   	push   esi
c00026f6:	53                   	push   ebx
c00026f7:	bb 0b 00 00 00       	mov    ebx,0xb
c00026fc:	83 ec 3c             	sub    esp,0x3c
c00026ff:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002705:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002709:	e8 35 fb ff ff       	call   c0002243 <get_ldnumber>
c000270e:	85 c0                	test   eax,eax
c0002710:	0f 88 3a 05 00 00    	js     c0002c50 <mount_volume+0x55f>
c0002716:	8b 2c 85 a0 e3 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd1c60]
c000271d:	89 c6                	mov    esi,eax
c000271f:	bb 0c 00 00 00       	mov    ebx,0xc
c0002724:	85 ed                	test   ebp,ebp
c0002726:	0f 84 24 05 00 00    	je     c0002c50 <mount_volume+0x55f>
c000272c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002730:	83 e7 fe             	and    edi,0xfffffffe
c0002733:	89 2a                	mov    DWORD PTR [edx],ebp
c0002735:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002739:	74 32                	je     c000276d <mount_volume+0x7c>
c000273b:	83 ec 0c             	sub    esp,0xc
c000273e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002742:	50                   	push   eax
c0002743:	e8 c8 f4 ff ff       	call   c0001c10 <disk_status>
c0002748:	83 c4 10             	add    esp,0x10
c000274b:	a8 01                	test   al,0x1
c000274d:	75 1e                	jne    c000276d <mount_volume+0x7c>
c000274f:	31 db                	xor    ebx,ebx
c0002751:	89 f9                	mov    ecx,edi
c0002753:	84 c9                	test   cl,cl
c0002755:	0f 84 f5 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c000275b:	a8 04                	test   al,0x4
c000275d:	0f 84 ed 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c0002763:	bb 0a 00 00 00       	mov    ebx,0xa
c0002768:	e9 e3 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c000276d:	83 ec 0c             	sub    esp,0xc
c0002770:	89 f0                	mov    eax,esi
c0002772:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002776:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002779:	0f b6 f0             	movzx  esi,al
c000277c:	bb 03 00 00 00       	mov    ebx,0x3
c0002781:	56                   	push   esi
c0002782:	e8 8c f4 ff ff       	call   c0001c13 <disk_initialize>
c0002787:	83 c4 10             	add    esp,0x10
c000278a:	a8 01                	test   al,0x1
c000278c:	0f 85 be 04 00 00    	jne    c0002c50 <mount_volume+0x55f>
c0002792:	89 f9                	mov    ecx,edi
c0002794:	84 c9                	test   cl,cl
c0002796:	74 04                	je     c000279c <mount_volume+0xab>
c0002798:	a8 04                	test   al,0x4
c000279a:	75 c7                	jne    c0002763 <mount_volume+0x72>
c000279c:	31 d2                	xor    edx,edx
c000279e:	89 e8                	mov    eax,ebp
c00027a0:	e8 c8 fd ff ff       	call   c000256d <find_volume>
c00027a5:	83 f8 04             	cmp    eax,0x4
c00027a8:	75 0a                	jne    c00027b4 <mount_volume+0xc3>
c00027aa:	bb 01 00 00 00       	mov    ebx,0x1
c00027af:	e9 9c 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027b4:	83 f8 01             	cmp    eax,0x1
c00027b7:	76 0a                	jbe    c00027c3 <mount_volume+0xd2>
c00027b9:	bb 0d 00 00 00       	mov    ebx,0xd
c00027be:	e9 8d 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027c3:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00027c6:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00027c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027cd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027d1:	75 17                	jne    c00027ea <mount_volume+0xf9>
c00027d3:	b8 0b 00 00 00       	mov    eax,0xb
c00027d8:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027dd:	75 da                	jne    c00027b9 <mount_volume+0xc8>
c00027df:	40                   	inc    eax
c00027e0:	83 f8 40             	cmp    eax,0x40
c00027e3:	75 f3                	jne    c00027d8 <mount_volume+0xe7>
c00027e5:	e9 5a 02 00 00       	jmp    c0002a44 <mount_volume+0x353>
c00027ea:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027ed:	e8 6f f4 ff ff       	call   c0001c61 <ld_word>
c00027f2:	66 3d 00 02          	cmp    ax,0x200
c00027f6:	75 c1                	jne    c00027b9 <mount_volume+0xc8>
c00027f8:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027fb:	e8 61 f4 ff ff       	call   c0001c61 <ld_word>
c0002800:	0f b7 c0             	movzx  eax,ax
c0002803:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002807:	85 c0                	test   eax,eax
c0002809:	75 0c                	jne    c0002817 <mount_volume+0x126>
c000280b:	8d 45 78             	lea    eax,[ebp+0x78]
c000280e:	e8 5b f4 ff ff       	call   c0001c6e <ld_dword>
c0002813:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000281b:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000281e:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002821:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002825:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002828:	48                   	dec    eax
c0002829:	3c 01                	cmp    al,0x1
c000282b:	77 8c                	ja     c00027b9 <mount_volume+0xc8>
c000282d:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002831:	89 c3                	mov    ebx,eax
c0002833:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002837:	66 85 c0             	test   ax,ax
c000283a:	0f 84 79 ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002840:	8d 40 ff             	lea    eax,[eax-0x1]
c0002843:	85 d8                	test   eax,ebx
c0002845:	0f 85 6e ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000284b:	8d 45 65             	lea    eax,[ebp+0x65]
c000284e:	e8 0e f4 ff ff       	call   c0001c61 <ld_word>
c0002853:	89 c7                	mov    edi,eax
c0002855:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002859:	a8 0f                	test   al,0xf
c000285b:	0f 85 58 ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002861:	8d 45 67             	lea    eax,[ebp+0x67]
c0002864:	e8 f8 f3 ff ff       	call   c0001c61 <ld_word>
c0002869:	0f b7 f0             	movzx  esi,ax
c000286c:	85 f6                	test   esi,esi
c000286e:	75 0a                	jne    c000287a <mount_volume+0x189>
c0002870:	8d 45 74             	lea    eax,[ebp+0x74]
c0002873:	e8 f6 f3 ff ff       	call   c0001c6e <ld_dword>
c0002878:	89 c6                	mov    esi,eax
c000287a:	8d 45 62             	lea    eax,[ebp+0x62]
c000287d:	e8 df f3 ff ff       	call   c0001c61 <ld_word>
c0002882:	66 85 c0             	test   ax,ax
c0002885:	0f 84 2e ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c000288b:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002890:	0f b7 c8             	movzx  ecx,ax
c0002893:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002898:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000289c:	89 fa                	mov    edx,edi
c000289e:	66 c1 ea 04          	shr    dx,0x4
c00028a2:	0f b7 d2             	movzx  edx,dx
c00028a5:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00028a9:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00028ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00028b0:	39 c6                	cmp    esi,eax
c00028b2:	0f 82 01 ff ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028b8:	29 c6                	sub    esi,eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 f0                	mov    eax,esi
c00028be:	f7 f3                	div    ebx
c00028c0:	39 de                	cmp    esi,ebx
c00028c2:	0f 82 f1 fe ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028c8:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00028cd:	0f 87 e6 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c00028d3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00028d8:	0f 86 63 03 00 00    	jbe    c0002c41 <mount_volume+0x550>
c00028de:	bb 03 00 00 00       	mov    ebx,0x3
c00028e3:	8d 70 02             	lea    esi,[eax+0x2]
c00028e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028ee:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028f1:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028f4:	31 d2                	xor    edx,edx
c00028f6:	89 c8                	mov    eax,ecx
c00028f8:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028fb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028ff:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002903:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002907:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000290b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000290e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002911:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002915:	31 d2                	xor    edx,edx
c0002917:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000291b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000291f:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002922:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002925:	83 fb 03             	cmp    ebx,0x3
c0002928:	75 2b                	jne    c0002955 <mount_volume+0x264>
c000292a:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000292d:	e8 2f f3 ff ff       	call   c0001c61 <ld_word>
c0002932:	66 09 c7             	or     di,ax
c0002935:	0f 85 7e fe ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000293b:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002941:	c1 e6 02             	shl    esi,0x2
c0002944:	e8 25 f3 ff ff       	call   c0001c6e <ld_dword>
c0002949:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002950:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002953:	eb 30                	jmp    c0002985 <mount_volume+0x294>
c0002955:	66 85 ff             	test   di,di
c0002958:	0f 84 5b fe ff ff    	je     c00027b9 <mount_volume+0xc8>
c000295e:	31 d2                	xor    edx,edx
c0002960:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002964:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002968:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000296c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000296f:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002972:	83 fb 02             	cmp    ebx,0x2
c0002975:	75 04                	jne    c000297b <mount_volume+0x28a>
c0002977:	01 f6                	add    esi,esi
c0002979:	eb 0a                	jmp    c0002985 <mount_volume+0x294>
c000297b:	8d 04 76             	lea    eax,[esi+esi*2]
c000297e:	83 e6 01             	and    esi,0x1
c0002981:	d1 e8                	shr    eax,1
c0002983:	01 c6                	add    esi,eax
c0002985:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000298b:	c1 ee 09             	shr    esi,0x9
c000298e:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002992:	0f 87 21 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002998:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000299f:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029a6:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00029aa:	83 fb 03             	cmp    ebx,0x3
c00029ad:	75 7a                	jne    c0002a29 <mount_volume+0x338>
c00029af:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00029b5:	e8 a7 f2 ff ff       	call   c0001c61 <ld_word>
c00029ba:	66 48                	dec    ax
c00029bc:	75 6b                	jne    c0002a29 <mount_volume+0x338>
c00029be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00029c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029c6:	83 c2 01             	add    edx,0x1
c00029c9:	89 e8                	mov    eax,ebp
c00029cb:	83 d1 00             	adc    ecx,0x0
c00029ce:	e8 6c fa ff ff       	call   c000243f <move_window>
c00029d3:	85 c0                	test   eax,eax
c00029d5:	75 52                	jne    c0002a29 <mount_volume+0x338>
c00029d7:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029db:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029e1:	e8 7b f2 ff ff       	call   c0001c61 <ld_word>
c00029e6:	66 3d 55 aa          	cmp    ax,0xaa55
c00029ea:	75 3d                	jne    c0002a29 <mount_volume+0x338>
c00029ec:	8d 45 54             	lea    eax,[ebp+0x54]
c00029ef:	e8 7a f2 ff ff       	call   c0001c6e <ld_dword>
c00029f4:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029f9:	75 2e                	jne    c0002a29 <mount_volume+0x338>
c00029fb:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c0002a01:	e8 68 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a06:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002a0b:	75 1c                	jne    c0002a29 <mount_volume+0x338>
c0002a0d:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002a13:	e8 56 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a18:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002a1b:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002a21:	e8 48 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a26:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002a29:	66 a1 80 e3 02 c0    	mov    ax,ds:0xc002e380
c0002a2f:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002a32:	40                   	inc    eax
c0002a33:	31 db                	xor    ebx,ebx
c0002a35:	66 a3 80 e3 02 c0    	mov    ds:0xc002e380,ax
c0002a3b:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a3f:	e9 0c 02 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c0002a44:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a4a:	e8 12 f2 ff ff       	call   c0001c61 <ld_word>
c0002a4f:	66 3d 00 01          	cmp    ax,0x100
c0002a53:	0f 85 60 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a59:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a60:	0f 85 53 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a66:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a6c:	e8 15 f2 ff ff       	call   c0001c86 <ld_qword>
c0002a71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a79:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a7f:	e8 ea f1 ff ff       	call   c0001c6e <ld_dword>
c0002a84:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a87:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a8d:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a90:	fe c8                	dec    al
c0002a92:	0f 85 21 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a98:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a9f:	bb 01 00 00 00       	mov    ebx,0x1
c0002aa4:	d3 e3                	shl    ebx,cl
c0002aa6:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002aaa:	66 85 db             	test   bx,bx
c0002aad:	0f 84 06 fd ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002ab3:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002ab9:	e8 b0 f1 ff ff       	call   c0001c6e <ld_dword>
c0002abe:	89 c6                	mov    esi,eax
c0002ac0:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002ac5:	0f 87 ee fc ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002acb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002acf:	8d 40 02             	lea    eax,[eax+0x2]
c0002ad2:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002ad5:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002ad8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002adc:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002adf:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002ae5:	e8 84 f1 ff ff       	call   c0001c6e <ld_dword>
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002af0:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002af4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002af8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002afc:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002aff:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002b02:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002b08:	e8 61 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b0d:	31 d2                	xor    edx,edx
c0002b0f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b13:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b17:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b1b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002b1e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002b21:	0f b7 c3             	movzx  eax,bx
c0002b24:	31 d2                	xor    edx,edx
c0002b26:	0f af f0             	imul   esi,eax
c0002b29:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002b2d:	89 f0                	mov    eax,esi
c0002b2f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002b33:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002b37:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b3b:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b3f:	39 c1                	cmp    ecx,eax
c0002b41:	89 df                	mov    edi,ebx
c0002b43:	19 d7                	sbb    edi,edx
c0002b45:	0f 82 6e fc ff ff    	jb     c00027b9 <mount_volume+0xc8>
c0002b4b:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b51:	31 db                	xor    ebx,ebx
c0002b53:	e8 16 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b58:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b5f:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b62:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b6a:	85 db                	test   ebx,ebx
c0002b6c:	75 39                	jne    c0002ba7 <mount_volume+0x4b6>
c0002b6e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b72:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b76:	0f 86 3d fc ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002b7c:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b7f:	31 ff                	xor    edi,edi
c0002b81:	89 e8                	mov    eax,ebp
c0002b83:	e8 72 f3 ff ff       	call   c0001efa <clst2sect>
c0002b88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b8c:	01 c6                	add    esi,eax
c0002b8e:	89 e8                	mov    eax,ebp
c0002b90:	11 d7                	adc    edi,edx
c0002b92:	89 f2                	mov    edx,esi
c0002b94:	89 f9                	mov    ecx,edi
c0002b96:	e8 a4 f8 ff ff       	call   c000243f <move_window>
c0002b9b:	85 c0                	test   eax,eax
c0002b9d:	0f 85 07 fc ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002ba3:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002ba7:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002bac:	74 0b                	je     c0002bb9 <mount_volume+0x4c8>
c0002bae:	83 c3 20             	add    ebx,0x20
c0002bb1:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002bb7:	eb b1                	jmp    c0002b6a <mount_volume+0x479>
c0002bb9:	8d 75 54             	lea    esi,[ebp+0x54]
c0002bbc:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002bc0:	e8 a9 f0 ff ff       	call   c0001c6e <ld_dword>
c0002bc5:	89 c3                	mov    ebx,eax
c0002bc7:	83 f8 01             	cmp    eax,0x1
c0002bca:	0f 86 e9 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd0:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002bd3:	0f 86 e0 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd9:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002bdc:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002be0:	0f af c2             	imul   eax,edx
c0002be3:	31 d2                	xor    edx,edx
c0002be5:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002be8:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002beb:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bee:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bf1:	31 c9                	xor    ecx,ecx
c0002bf3:	89 da                	mov    edx,ebx
c0002bf5:	89 e8                	mov    eax,ebp
c0002bf7:	c1 ea 07             	shr    edx,0x7
c0002bfa:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bfd:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002c00:	e8 3a f8 ff ff       	call   c000243f <move_window>
c0002c05:	85 c0                	test   eax,eax
c0002c07:	0f 85 9d fb ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002c0d:	89 d8                	mov    eax,ebx
c0002c0f:	83 e0 7f             	and    eax,0x7f
c0002c12:	8d 04 86             	lea    eax,[esi+eax*4]
c0002c15:	e8 54 f0 ff ff       	call   c0001c6e <ld_dword>
c0002c1a:	83 f8 ff             	cmp    eax,0xffffffff
c0002c1d:	74 0a                	je     c0002c29 <mount_volume+0x538>
c0002c1f:	43                   	inc    ebx
c0002c20:	39 d8                	cmp    eax,ebx
c0002c22:	74 cd                	je     c0002bf1 <mount_volume+0x500>
c0002c24:	e9 90 fb ff ff       	jmp    c00027b9 <mount_volume+0xc8>
c0002c29:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002c30:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002c37:	bb 04 00 00 00       	mov    ebx,0x4
c0002c3c:	e9 e8 fd ff ff       	jmp    c0002a29 <mount_volume+0x338>
c0002c41:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c46:	19 db                	sbb    ebx,ebx
c0002c48:	83 c3 02             	add    ebx,0x2
c0002c4b:	e9 93 fc ff ff       	jmp    c00028e3 <mount_volume+0x1f2>
c0002c50:	83 c4 3c             	add    esp,0x3c
c0002c53:	89 d8                	mov    eax,ebx
c0002c55:	5b                   	pop    ebx
c0002c56:	5e                   	pop    esi
c0002c57:	5f                   	pop    edi
c0002c58:	5d                   	pop    ebp
c0002c59:	c3                   	ret    

c0002c5a <find_bitmap>:
c0002c5a:	55                   	push   ebp
c0002c5b:	57                   	push   edi
c0002c5c:	89 c7                	mov    edi,eax
c0002c5e:	56                   	push   esi
c0002c5f:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c62:	53                   	push   ebx
c0002c63:	83 ec 1c             	sub    esp,0x1c
c0002c66:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c69:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c6d:	83 e8 02             	sub    eax,0x2
c0002c70:	39 f0                	cmp    eax,esi
c0002c72:	77 02                	ja     c0002c76 <find_bitmap+0x1c>
c0002c74:	31 f6                	xor    esi,esi
c0002c76:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c7a:	89 f3                	mov    ebx,esi
c0002c7c:	31 ed                	xor    ebp,ebp
c0002c7e:	31 c9                	xor    ecx,ecx
c0002c80:	89 da                	mov    edx,ebx
c0002c82:	89 f8                	mov    eax,edi
c0002c84:	c1 ea 0c             	shr    edx,0xc
c0002c87:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c8a:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c8d:	e8 ad f7 ff ff       	call   c000243f <move_window>
c0002c92:	85 c0                	test   eax,eax
c0002c94:	75 68                	jne    c0002cfe <find_bitmap+0xa4>
c0002c96:	89 da                	mov    edx,ebx
c0002c98:	89 d9                	mov    ecx,ebx
c0002c9a:	c1 ea 03             	shr    edx,0x3
c0002c9d:	83 e1 07             	and    ecx,0x7
c0002ca0:	b8 01 00 00 00       	mov    eax,0x1
c0002ca5:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002cab:	d3 e0                	shl    eax,cl
c0002cad:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002cb0:	83 e9 02             	sub    ecx,0x2
c0002cb3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002cb7:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002cbb:	43                   	inc    ebx
c0002cbc:	21 c1                	and    ecx,eax
c0002cbe:	d1 e0                	shl    eax,1
c0002cc0:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002cc4:	77 09                	ja     c0002ccf <find_bitmap+0x75>
c0002cc6:	31 db                	xor    ebx,ebx
c0002cc8:	ba 00 02 00 00       	mov    edx,0x200
c0002ccd:	31 c0                	xor    eax,eax
c0002ccf:	84 c9                	test   cl,cl
c0002cd1:	75 10                	jne    c0002ce3 <find_bitmap+0x89>
c0002cd3:	45                   	inc    ebp
c0002cd4:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002cd8:	75 0f                	jne    c0002ce9 <find_bitmap+0x8f>
c0002cda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002cde:	83 c0 02             	add    eax,0x2
c0002ce1:	eb 22                	jmp    c0002d05 <find_bitmap+0xab>
c0002ce3:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002ce7:	31 ed                	xor    ebp,ebp
c0002ce9:	39 de                	cmp    esi,ebx
c0002ceb:	74 16                	je     c0002d03 <find_bitmap+0xa9>
c0002ced:	84 c0                	test   al,al
c0002cef:	75 c6                	jne    c0002cb7 <find_bitmap+0x5d>
c0002cf1:	42                   	inc    edx
c0002cf2:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cf8:	77 84                	ja     c0002c7e <find_bitmap+0x24>
c0002cfa:	b0 01                	mov    al,0x1
c0002cfc:	eb b9                	jmp    c0002cb7 <find_bitmap+0x5d>
c0002cfe:	83 c8 ff             	or     eax,0xffffffff
c0002d01:	eb 02                	jmp    c0002d05 <find_bitmap+0xab>
c0002d03:	31 c0                	xor    eax,eax
c0002d05:	83 c4 1c             	add    esp,0x1c
c0002d08:	5b                   	pop    ebx
c0002d09:	5e                   	pop    esi
c0002d0a:	5f                   	pop    edi
c0002d0b:	5d                   	pop    ebp
c0002d0c:	c3                   	ret    

c0002d0d <change_bitmap>:
c0002d0d:	55                   	push   ebp
c0002d0e:	89 cd                	mov    ebp,ecx
c0002d10:	57                   	push   edi
c0002d11:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002d14:	56                   	push   esi
c0002d15:	89 c7                	mov    edi,eax
c0002d17:	53                   	push   ebx
c0002d18:	89 c8                	mov    eax,ecx
c0002d1a:	83 ec 1c             	sub    esp,0x1c
c0002d1d:	31 d2                	xor    edx,edx
c0002d1f:	89 ce                	mov    esi,ecx
c0002d21:	c1 e8 0c             	shr    eax,0xc
c0002d24:	bb 01 00 00 00       	mov    ebx,0x1
c0002d29:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002d2c:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002d2f:	c1 ee 03             	shr    esi,0x3
c0002d32:	83 e1 07             	and    ecx,0x7
c0002d35:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d3b:	d3 e3                	shl    ebx,cl
c0002d3d:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d41:	89 c1                	mov    ecx,eax
c0002d43:	89 d3                	mov    ebx,edx
c0002d45:	83 c1 01             	add    ecx,0x1
c0002d48:	83 d3 00             	adc    ebx,0x0
c0002d4b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d4f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d53:	89 d1                	mov    ecx,edx
c0002d55:	89 c2                	mov    edx,eax
c0002d57:	89 f8                	mov    eax,edi
c0002d59:	e8 e1 f6 ff ff       	call   c000243f <move_window>
c0002d5e:	89 c1                	mov    ecx,eax
c0002d60:	85 c0                	test   eax,eax
c0002d62:	75 48                	jne    c0002dac <change_bitmap+0x9f>
c0002d64:	31 d2                	xor    edx,edx
c0002d66:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d6a:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d6e:	0f 95 c2             	setne  dl
c0002d71:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d75:	74 3c                	je     c0002db3 <change_bitmap+0xa6>
c0002d77:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d7b:	4d                   	dec    ebp
c0002d7c:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d80:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d84:	74 32                	je     c0002db8 <change_bitmap+0xab>
c0002d86:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d8a:	75 d8                	jne    c0002d64 <change_bitmap+0x57>
c0002d8c:	8d 46 01             	lea    eax,[esi+0x1]
c0002d8f:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d94:	89 c3                	mov    ebx,eax
c0002d96:	31 f6                	xor    esi,esi
c0002d98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d9c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002da0:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002da6:	74 99                	je     c0002d41 <change_bitmap+0x34>
c0002da8:	89 de                	mov    esi,ebx
c0002daa:	eb b8                	jmp    c0002d64 <change_bitmap+0x57>
c0002dac:	b9 01 00 00 00       	mov    ecx,0x1
c0002db1:	eb 05                	jmp    c0002db8 <change_bitmap+0xab>
c0002db3:	b9 02 00 00 00       	mov    ecx,0x2
c0002db8:	83 c4 1c             	add    esp,0x1c
c0002dbb:	89 c8                	mov    eax,ecx
c0002dbd:	5b                   	pop    ebx
c0002dbe:	5e                   	pop    esi
c0002dbf:	5f                   	pop    edi
c0002dc0:	5d                   	pop    ebp
c0002dc1:	c3                   	ret    

c0002dc2 <put_fat>:
c0002dc2:	83 fa 01             	cmp    edx,0x1
c0002dc5:	0f 86 7b 01 00 00    	jbe    c0002f46 <put_fat+0x184>
c0002dcb:	55                   	push   ebp
c0002dcc:	57                   	push   edi
c0002dcd:	89 cf                	mov    edi,ecx
c0002dcf:	56                   	push   esi
c0002dd0:	b9 02 00 00 00       	mov    ecx,0x2
c0002dd5:	53                   	push   ebx
c0002dd6:	89 c6                	mov    esi,eax
c0002dd8:	83 ec 1c             	sub    esp,0x1c
c0002ddb:	89 d3                	mov    ebx,edx
c0002ddd:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002de0:	0f 86 68 01 00 00    	jbe    c0002f4e <put_fat+0x18c>
c0002de6:	8a 00                	mov    al,BYTE PTR [eax]
c0002de8:	3c 02                	cmp    al,0x2
c0002dea:	0f 84 c7 00 00 00    	je     c0002eb7 <put_fat+0xf5>
c0002df0:	77 09                	ja     c0002dfb <put_fat+0x39>
c0002df2:	fe c8                	dec    al
c0002df4:	74 17                	je     c0002e0d <put_fat+0x4b>
c0002df6:	e9 53 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002dfb:	b9 02 00 00 00       	mov    ecx,0x2
c0002e00:	3c 04                	cmp    al,0x4
c0002e02:	0f 86 e1 00 00 00    	jbe    c0002ee9 <put_fat+0x127>
c0002e08:	e9 41 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002e0d:	89 d5                	mov    ebp,edx
c0002e0f:	31 c9                	xor    ecx,ecx
c0002e11:	d1 ed                	shr    ebp,1
c0002e13:	89 f0                	mov    eax,esi
c0002e15:	01 d5                	add    ebp,edx
c0002e17:	89 ea                	mov    edx,ebp
c0002e19:	c1 ea 09             	shr    edx,0x9
c0002e1c:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e1f:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e22:	e8 18 f6 ff ff       	call   c000243f <move_window>
c0002e27:	89 c1                	mov    ecx,eax
c0002e29:	85 c0                	test   eax,eax
c0002e2b:	0f 85 1d 01 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e31:	8d 46 54             	lea    eax,[esi+0x54]
c0002e34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e38:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e3b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e45:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e49:	89 f8                	mov    eax,edi
c0002e4b:	83 e3 01             	and    ebx,0x1
c0002e4e:	74 0d                	je     c0002e5d <put_fat+0x9b>
c0002e50:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e53:	89 fa                	mov    edx,edi
c0002e55:	83 e0 0f             	and    eax,0xf
c0002e58:	c1 e2 04             	shl    edx,0x4
c0002e5b:	09 d0                	or     eax,edx
c0002e5d:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e64:	31 c9                	xor    ecx,ecx
c0002e66:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e6a:	c1 ea 09             	shr    edx,0x9
c0002e6d:	89 f0                	mov    eax,esi
c0002e6f:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e72:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e75:	e8 c5 f5 ff ff       	call   c000243f <move_window>
c0002e7a:	89 c1                	mov    ecx,eax
c0002e7c:	85 c0                	test   eax,eax
c0002e7e:	0f 85 ca 00 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e84:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e88:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e8e:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e92:	85 db                	test   ebx,ebx
c0002e94:	74 07                	je     c0002e9d <put_fat+0xdb>
c0002e96:	c1 ef 04             	shr    edi,0x4
c0002e99:	89 fa                	mov    edx,edi
c0002e9b:	eb 0e                	jmp    c0002eab <put_fat+0xe9>
c0002e9d:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002ea0:	c1 ef 08             	shr    edi,0x8
c0002ea3:	83 e2 f0             	and    edx,0xfffffff0
c0002ea6:	83 e7 0f             	and    edi,0xf
c0002ea9:	09 fa                	or     edx,edi
c0002eab:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002eae:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002eb2:	e9 97 00 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002eb7:	31 c9                	xor    ecx,ecx
c0002eb9:	c1 ea 08             	shr    edx,0x8
c0002ebc:	89 f0                	mov    eax,esi
c0002ebe:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ec1:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ec4:	e8 76 f5 ff ff       	call   c000243f <move_window>
c0002ec9:	89 c1                	mov    ecx,eax
c0002ecb:	85 c0                	test   eax,eax
c0002ecd:	75 7f                	jne    c0002f4e <put_fat+0x18c>
c0002ecf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ed3:	01 db                	add    ebx,ebx
c0002ed5:	0f b7 d7             	movzx  edx,di
c0002ed8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ede:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ee2:	e8 ec ed ff ff       	call   c0001cd3 <st_word>
c0002ee7:	eb 53                	jmp    c0002f3c <put_fat+0x17a>
c0002ee9:	31 c9                	xor    ecx,ecx
c0002eeb:	c1 ea 07             	shr    edx,0x7
c0002eee:	89 f0                	mov    eax,esi
c0002ef0:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ef3:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ef6:	e8 44 f5 ff ff       	call   c000243f <move_window>
c0002efb:	89 c1                	mov    ecx,eax
c0002efd:	85 c0                	test   eax,eax
c0002eff:	75 4d                	jne    c0002f4e <put_fat+0x18c>
c0002f01:	c1 e3 02             	shl    ebx,0x2
c0002f04:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002f0a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002f0d:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002f11:	74 1c                	je     c0002f2f <put_fat+0x16d>
c0002f13:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002f17:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002f1d:	89 d8                	mov    eax,ebx
c0002f1f:	e8 4a ed ff ff       	call   c0001c6e <ld_dword>
c0002f24:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f28:	25 00 00 00 f0       	and    eax,0xf0000000
c0002f2d:	09 c7                	or     edi,eax
c0002f2f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f33:	89 fa                	mov    edx,edi
c0002f35:	89 d8                	mov    eax,ebx
c0002f37:	e8 9b ed ff ff       	call   c0001cd7 <st_dword>
c0002f3c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f40:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f44:	eb 08                	jmp    c0002f4e <put_fat+0x18c>
c0002f46:	b9 02 00 00 00       	mov    ecx,0x2
c0002f4b:	89 c8                	mov    eax,ecx
c0002f4d:	c3                   	ret    
c0002f4e:	83 c4 1c             	add    esp,0x1c
c0002f51:	89 c8                	mov    eax,ecx
c0002f53:	5b                   	pop    ebx
c0002f54:	5e                   	pop    esi
c0002f55:	5f                   	pop    edi
c0002f56:	5d                   	pop    ebp
c0002f57:	c3                   	ret    

c0002f58 <fill_last_frag>:
c0002f58:	57                   	push   edi
c0002f59:	89 cf                	mov    edi,ecx
c0002f5b:	56                   	push   esi
c0002f5c:	89 d6                	mov    esi,edx
c0002f5e:	53                   	push   ebx
c0002f5f:	89 c3                	mov    ebx,eax
c0002f61:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f64:	85 c0                	test   eax,eax
c0002f66:	74 21                	je     c0002f89 <fill_last_frag+0x31>
c0002f68:	89 f9                	mov    ecx,edi
c0002f6a:	83 f8 01             	cmp    eax,0x1
c0002f6d:	76 05                	jbe    c0002f74 <fill_last_frag+0x1c>
c0002f6f:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f72:	29 c1                	sub    ecx,eax
c0002f74:	8d 56 01             	lea    edx,[esi+0x1]
c0002f77:	29 c2                	sub    edx,eax
c0002f79:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f7b:	e8 42 fe ff ff       	call   c0002dc2 <put_fat>
c0002f80:	85 c0                	test   eax,eax
c0002f82:	75 05                	jne    c0002f89 <fill_last_frag+0x31>
c0002f84:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f87:	eb d8                	jmp    c0002f61 <fill_last_frag+0x9>
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <fill_first_frag>:
c0002f8d:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f91:	75 2d                	jne    c0002fc0 <fill_first_frag+0x33>
c0002f93:	57                   	push   edi
c0002f94:	56                   	push   esi
c0002f95:	53                   	push   ebx
c0002f96:	89 c3                	mov    ebx,eax
c0002f98:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f9b:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f9e:	01 d7                	add    edi,edx
c0002fa0:	39 fa                	cmp    edx,edi
c0002fa2:	74 14                	je     c0002fb8 <fill_first_frag+0x2b>
c0002fa4:	8d 72 01             	lea    esi,[edx+0x1]
c0002fa7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002fa9:	89 f1                	mov    ecx,esi
c0002fab:	e8 12 fe ff ff       	call   c0002dc2 <put_fat>
c0002fb0:	89 f2                	mov    edx,esi
c0002fb2:	85 c0                	test   eax,eax
c0002fb4:	74 ea                	je     c0002fa0 <fill_first_frag+0x13>
c0002fb6:	eb 0b                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fb8:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fbc:	31 c0                	xor    eax,eax
c0002fbe:	eb 03                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fc0:	31 c0                	xor    eax,eax
c0002fc2:	c3                   	ret    
c0002fc3:	5b                   	pop    ebx
c0002fc4:	5e                   	pop    esi
c0002fc5:	5f                   	pop    edi
c0002fc6:	c3                   	ret    

c0002fc7 <get_fat>:
c0002fc7:	83 fa 01             	cmp    edx,0x1
c0002fca:	0f 86 db 01 00 00    	jbe    c00031ab <get_fat+0x1e4>
c0002fd0:	55                   	push   ebp
c0002fd1:	b9 01 00 00 00       	mov    ecx,0x1
c0002fd6:	57                   	push   edi
c0002fd7:	56                   	push   esi
c0002fd8:	53                   	push   ebx
c0002fd9:	83 ec 1c             	sub    esp,0x1c
c0002fdc:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fde:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fe1:	0f 86 cc 01 00 00    	jbe    c00031b3 <get_fat+0x1ec>
c0002fe7:	89 c3                	mov    ebx,eax
c0002fe9:	89 d6                	mov    esi,edx
c0002feb:	8a 07                	mov    al,BYTE PTR [edi]
c0002fed:	3c 02                	cmp    al,0x2
c0002fef:	0f 84 99 00 00 00    	je     c000308e <get_fat+0xc7>
c0002ff5:	77 09                	ja     c0003000 <get_fat+0x39>
c0002ff7:	fe c8                	dec    al
c0002ff9:	74 1a                	je     c0003015 <get_fat+0x4e>
c0002ffb:	e9 b3 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003000:	3c 03                	cmp    al,0x3
c0003002:	0f 84 b5 00 00 00    	je     c00030bd <get_fat+0xf6>
c0003008:	3c 04                	cmp    al,0x4
c000300a:	0f 84 e3 00 00 00    	je     c00030f3 <get_fat+0x12c>
c0003010:	e9 9e 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003015:	89 d3                	mov    ebx,edx
c0003017:	31 c9                	xor    ecx,ecx
c0003019:	d1 eb                	shr    ebx,1
c000301b:	89 f8                	mov    eax,edi
c000301d:	01 d3                	add    ebx,edx
c000301f:	89 da                	mov    edx,ebx
c0003021:	c1 ea 09             	shr    edx,0x9
c0003024:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003027:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000302a:	e8 10 f4 ff ff       	call   c000243f <move_window>
c000302f:	85 c0                	test   eax,eax
c0003031:	74 08                	je     c000303b <get_fat+0x74>
c0003033:	83 c9 ff             	or     ecx,0xffffffff
c0003036:	e9 78 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000303b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000303e:	31 c9                	xor    ecx,ecx
c0003040:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003046:	89 ea                	mov    edx,ebp
c0003048:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c000304c:	c1 ea 09             	shr    edx,0x9
c000304f:	89 f8                	mov    eax,edi
c0003051:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003054:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003057:	e8 e3 f3 ff ff       	call   c000243f <move_window>
c000305c:	85 c0                	test   eax,eax
c000305e:	75 d3                	jne    c0003033 <get_fat+0x6c>
c0003060:	0f b6 c3             	movzx  eax,bl
c0003063:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003069:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c000306e:	c1 e3 08             	shl    ebx,0x8
c0003071:	09 c3                	or     ebx,eax
c0003073:	89 d9                	mov    ecx,ebx
c0003075:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000307b:	83 e6 01             	and    esi,0x1
c000307e:	0f 84 2f 01 00 00    	je     c00031b3 <get_fat+0x1ec>
c0003084:	89 d9                	mov    ecx,ebx
c0003086:	c1 e9 04             	shr    ecx,0x4
c0003089:	e9 25 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000308e:	31 c9                	xor    ecx,ecx
c0003090:	c1 ea 08             	shr    edx,0x8
c0003093:	89 f8                	mov    eax,edi
c0003095:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003098:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000309b:	e8 9f f3 ff ff       	call   c000243f <move_window>
c00030a0:	85 c0                	test   eax,eax
c00030a2:	75 8f                	jne    c0003033 <get_fat+0x6c>
c00030a4:	01 f6                	add    esi,esi
c00030a6:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00030ac:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030b0:	e8 ac eb ff ff       	call   c0001c61 <ld_word>
c00030b5:	0f b7 c8             	movzx  ecx,ax
c00030b8:	e9 f6 00 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c00030bd:	31 c9                	xor    ecx,ecx
c00030bf:	c1 ea 07             	shr    edx,0x7
c00030c2:	89 f8                	mov    eax,edi
c00030c4:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030c7:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030ca:	e8 70 f3 ff ff       	call   c000243f <move_window>
c00030cf:	85 c0                	test   eax,eax
c00030d1:	0f 85 5c ff ff ff    	jne    c0003033 <get_fat+0x6c>
c00030d7:	c1 e6 02             	shl    esi,0x2
c00030da:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030e0:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030e4:	e8 85 eb ff ff       	call   c0001c6e <ld_dword>
c00030e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030ee:	e9 b4 00 00 00       	jmp    c00031a7 <get_fat+0x1e0>
c00030f3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030f6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030f9:	89 d1                	mov    ecx,edx
c00030fb:	09 c1                	or     ecx,eax
c00030fd:	74 06                	je     c0003105 <get_fat+0x13e>
c00030ff:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0003103:	75 0f                	jne    c0003114 <get_fat+0x14d>
c0003105:	b9 01 00 00 00       	mov    ecx,0x1
c000310a:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c000310e:	0f 85 9f 00 00 00    	jne    c00031b3 <get_fat+0x1ec>
c0003114:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003118:	89 f5                	mov    ebp,esi
c000311a:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c000311f:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0003122:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0003125:	80 f9 02             	cmp    cl,0x2
c0003128:	75 35                	jne    c000315f <get_fat+0x198>
c000312a:	83 c0 ff             	add    eax,0xffffffff
c000312d:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0003132:	83 d2 ff             	adc    edx,0xffffffff
c0003135:	31 db                	xor    ebx,ebx
c0003137:	0f ac d0 09          	shrd   eax,edx,0x9
c000313b:	53                   	push   ebx
c000313c:	c1 ea 09             	shr    edx,0x9
c000313f:	51                   	push   ecx
c0003140:	52                   	push   edx
c0003141:	50                   	push   eax
c0003142:	e8 65 38 02 00       	call   c00269ac <__udivdi3>
c0003147:	83 c4 10             	add    esp,0x10
c000314a:	b9 01 00 00 00       	mov    ecx,0x1
c000314f:	39 c5                	cmp    ebp,eax
c0003151:	77 60                	ja     c00031b3 <get_fat+0x1ec>
c0003153:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003158:	74 59                	je     c00031b3 <get_fat+0x1ec>
c000315a:	8d 4e 01             	lea    ecx,[esi+0x1]
c000315d:	eb 54                	jmp    c00031b3 <get_fat+0x1ec>
c000315f:	80 f9 03             	cmp    cl,0x3
c0003162:	75 05                	jne    c0003169 <get_fat+0x1a2>
c0003164:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003167:	77 f1                	ja     c000315a <get_fat+0x193>
c0003169:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000316e:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003172:	75 3f                	jne    c00031b3 <get_fat+0x1ec>
c0003174:	31 c9                	xor    ecx,ecx
c0003176:	89 f2                	mov    edx,esi
c0003178:	89 f8                	mov    eax,edi
c000317a:	c1 ea 07             	shr    edx,0x7
c000317d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003180:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003183:	e8 b7 f2 ff ff       	call   c000243f <move_window>
c0003188:	85 c0                	test   eax,eax
c000318a:	0f 85 a3 fe ff ff    	jne    c0003033 <get_fat+0x6c>
c0003190:	c1 e6 02             	shl    esi,0x2
c0003193:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003199:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000319d:	e8 cc ea ff ff       	call   c0001c6e <ld_dword>
c00031a2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00031a7:	89 c1                	mov    ecx,eax
c00031a9:	eb 08                	jmp    c00031b3 <get_fat+0x1ec>
c00031ab:	b9 01 00 00 00       	mov    ecx,0x1
c00031b0:	89 c8                	mov    eax,ecx
c00031b2:	c3                   	ret    
c00031b3:	83 c4 1c             	add    esp,0x1c
c00031b6:	89 c8                	mov    eax,ecx
c00031b8:	5b                   	pop    ebx
c00031b9:	5e                   	pop    esi
c00031ba:	5f                   	pop    edi
c00031bb:	5d                   	pop    ebp
c00031bc:	c3                   	ret    

c00031bd <dir_sdi>:
c00031bd:	55                   	push   ebp
c00031be:	57                   	push   edi
c00031bf:	56                   	push   esi
c00031c0:	53                   	push   ebx
c00031c1:	89 c3                	mov    ebx,eax
c00031c3:	83 ec 1c             	sub    esp,0x1c
c00031c6:	8b 38                	mov    edi,DWORD PTR [eax]
c00031c8:	31 c0                	xor    eax,eax
c00031ca:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00031cd:	0f 94 c0             	sete   al
c00031d0:	48                   	dec    eax
c00031d1:	25 00 00 20 f0       	and    eax,0xf0200000
c00031d6:	05 00 00 00 10       	add    eax,0x10000000
c00031db:	39 d0                	cmp    eax,edx
c00031dd:	77 0a                	ja     c00031e9 <dir_sdi+0x2c>
c00031df:	b8 02 00 00 00       	mov    eax,0x2
c00031e4:	e9 c4 00 00 00       	jmp    c00032ad <dir_sdi+0xf0>
c00031e9:	89 d6                	mov    esi,edx
c00031eb:	f6 c2 1f             	test   dl,0x1f
c00031ee:	75 ef                	jne    c00031df <dir_sdi+0x22>
c00031f0:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031f3:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031f6:	85 c9                	test   ecx,ecx
c00031f8:	75 2d                	jne    c0003227 <dir_sdi+0x6a>
c00031fa:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031fd:	77 1b                	ja     c000321a <dir_sdi+0x5d>
c00031ff:	89 f2                	mov    edx,esi
c0003201:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003205:	c1 ea 05             	shr    edx,0x5
c0003208:	39 c2                	cmp    edx,eax
c000320a:	73 d3                	jae    c00031df <dir_sdi+0x22>
c000320c:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000320f:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0003212:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003215:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003218:	eb 4b                	jmp    c0003265 <dir_sdi+0xa8>
c000321a:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000321d:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003221:	85 c0                	test   eax,eax
c0003223:	74 da                	je     c00031ff <dir_sdi+0x42>
c0003225:	89 c1                	mov    ecx,eax
c0003227:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000322b:	c1 e5 09             	shl    ebp,0x9
c000322e:	89 ca                	mov    edx,ecx
c0003230:	39 ee                	cmp    esi,ebp
c0003232:	72 1c                	jb     c0003250 <dir_sdi+0x93>
c0003234:	89 d8                	mov    eax,ebx
c0003236:	e8 8c fd ff ff       	call   c0002fc7 <get_fat>
c000323b:	89 c1                	mov    ecx,eax
c000323d:	83 f8 ff             	cmp    eax,0xffffffff
c0003240:	74 66                	je     c00032a8 <dir_sdi+0xeb>
c0003242:	83 f8 01             	cmp    eax,0x1
c0003245:	76 98                	jbe    c00031df <dir_sdi+0x22>
c0003247:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c000324a:	76 93                	jbe    c00031df <dir_sdi+0x22>
c000324c:	29 ee                	sub    esi,ebp
c000324e:	eb de                	jmp    c000322e <dir_sdi+0x71>
c0003250:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003254:	89 f8                	mov    eax,edi
c0003256:	e8 9f ec ff ff       	call   c0001efa <clst2sect>
c000325b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000325f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003262:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003265:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003268:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000326b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000326e:	89 d1                	mov    ecx,edx
c0003270:	09 c1                	or     ecx,eax
c0003272:	0f 84 67 ff ff ff    	je     c00031df <dir_sdi+0x22>
c0003278:	89 f1                	mov    ecx,esi
c000327a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003282:	c1 e9 09             	shr    ecx,0x9
c0003285:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003289:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000328d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003291:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003294:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000329a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000329d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00032a1:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00032a4:	31 c0                	xor    eax,eax
c00032a6:	eb 05                	jmp    c00032ad <dir_sdi+0xf0>
c00032a8:	b8 01 00 00 00       	mov    eax,0x1
c00032ad:	83 c4 1c             	add    esp,0x1c
c00032b0:	5b                   	pop    ebx
c00032b1:	5e                   	pop    esi
c00032b2:	5f                   	pop    edi
c00032b3:	5d                   	pop    ebp
c00032b4:	c3                   	ret    

c00032b5 <create_chain>:
c00032b5:	55                   	push   ebp
c00032b6:	89 c5                	mov    ebp,eax
c00032b8:	57                   	push   edi
c00032b9:	56                   	push   esi
c00032ba:	53                   	push   ebx
c00032bb:	83 ec 1c             	sub    esp,0x1c
c00032be:	85 d2                	test   edx,edx
c00032c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00032c4:	8b 30                	mov    esi,DWORD PTR [eax]
c00032c6:	75 0e                	jne    c00032d6 <create_chain+0x21>
c00032c8:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00032cb:	85 ff                	test   edi,edi
c00032cd:	74 39                	je     c0003308 <create_chain+0x53>
c00032cf:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00032d2:	77 39                	ja     c000330d <create_chain+0x58>
c00032d4:	eb 32                	jmp    c0003308 <create_chain+0x53>
c00032d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032da:	e8 e8 fc ff ff       	call   c0002fc7 <get_fat>
c00032df:	89 c3                	mov    ebx,eax
c00032e1:	83 f8 01             	cmp    eax,0x1
c00032e4:	77 0a                	ja     c00032f0 <create_chain+0x3b>
c00032e6:	bb 01 00 00 00       	mov    ebx,0x1
c00032eb:	e9 ba 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c00032f0:	83 f8 ff             	cmp    eax,0xffffffff
c00032f3:	0f 84 62 01 00 00    	je     c000345b <create_chain+0x1a6>
c00032f9:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032fc:	0f 87 a8 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c0003302:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003306:	eb 05                	jmp    c000330d <create_chain+0x58>
c0003308:	bf 01 00 00 00       	mov    edi,0x1
c000330d:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003311:	75 07                	jne    c000331a <create_chain+0x65>
c0003313:	31 db                	xor    ebx,ebx
c0003315:	e9 90 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c000331a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000331d:	75 74                	jne    c0003393 <create_chain+0xde>
c000331f:	b9 01 00 00 00       	mov    ecx,0x1
c0003324:	89 fa                	mov    edx,edi
c0003326:	89 f0                	mov    eax,esi
c0003328:	e8 2d f9 ff ff       	call   c0002c5a <find_bitmap>
c000332d:	89 c3                	mov    ebx,eax
c000332f:	8d 40 ff             	lea    eax,[eax-0x1]
c0003332:	83 f8 fd             	cmp    eax,0xfffffffd
c0003335:	0f 87 6f 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c000333b:	83 ec 0c             	sub    esp,0xc
c000333e:	b9 01 00 00 00       	mov    ecx,0x1
c0003343:	6a 01                	push   0x1
c0003345:	89 da                	mov    edx,ebx
c0003347:	89 f0                	mov    eax,esi
c0003349:	e8 bf f9 ff ff       	call   c0002d0d <change_bitmap>
c000334e:	83 c4 10             	add    esp,0x10
c0003351:	83 f8 02             	cmp    eax,0x2
c0003354:	74 90                	je     c00032e6 <create_chain+0x31>
c0003356:	83 f8 01             	cmp    eax,0x1
c0003359:	0f 84 fc 00 00 00    	je     c000345b <create_chain+0x1a6>
c000335f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003364:	75 09                	jne    c000336f <create_chain+0xba>
c0003366:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000336a:	e9 0c 01 00 00       	jmp    c000347b <create_chain+0x1c6>
c000336f:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003373:	0f 85 e7 00 00 00    	jne    c0003460 <create_chain+0x1ab>
c0003379:	8d 57 01             	lea    edx,[edi+0x1]
c000337c:	39 da                	cmp    edx,ebx
c000337e:	0f 84 f7 00 00 00    	je     c000347b <create_chain+0x1c6>
c0003384:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003387:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000338b:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000338e:	e9 cd 00 00 00       	jmp    c0003460 <create_chain+0x1ab>
c0003393:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003397:	75 41                	jne    c00033da <create_chain+0x125>
c0003399:	8d 5f 01             	lea    ebx,[edi+0x1]
c000339c:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000339f:	77 05                	ja     c00033a6 <create_chain+0xf1>
c00033a1:	bb 02 00 00 00       	mov    ebx,0x2
c00033a6:	89 da                	mov    edx,ebx
c00033a8:	89 e8                	mov    eax,ebp
c00033aa:	e8 18 fc ff ff       	call   c0002fc7 <get_fat>
c00033af:	83 f8 01             	cmp    eax,0x1
c00033b2:	0f 84 2e ff ff ff    	je     c00032e6 <create_chain+0x31>
c00033b8:	83 f8 ff             	cmp    eax,0xffffffff
c00033bb:	0f 84 9a 00 00 00    	je     c000345b <create_chain+0x1a6>
c00033c1:	85 c0                	test   eax,eax
c00033c3:	74 11                	je     c00033d6 <create_chain+0x121>
c00033c5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 0d                	jbe    c00033da <create_chain+0x125>
c00033cd:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00033d0:	76 08                	jbe    c00033da <create_chain+0x125>
c00033d2:	89 c7                	mov    edi,eax
c00033d4:	eb 04                	jmp    c00033da <create_chain+0x125>
c00033d6:	85 db                	test   ebx,ebx
c00033d8:	75 38                	jne    c0003412 <create_chain+0x15d>
c00033da:	89 fb                	mov    ebx,edi
c00033dc:	43                   	inc    ebx
c00033dd:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033e0:	77 0e                	ja     c00033f0 <create_chain+0x13b>
c00033e2:	83 ff 01             	cmp    edi,0x1
c00033e5:	0f 86 28 ff ff ff    	jbe    c0003313 <create_chain+0x5e>
c00033eb:	bb 02 00 00 00       	mov    ebx,0x2
c00033f0:	89 da                	mov    edx,ebx
c00033f2:	89 e8                	mov    eax,ebp
c00033f4:	e8 ce fb ff ff       	call   c0002fc7 <get_fat>
c00033f9:	85 c0                	test   eax,eax
c00033fb:	74 15                	je     c0003412 <create_chain+0x15d>
c00033fd:	83 f8 01             	cmp    eax,0x1
c0003400:	0f 84 e0 fe ff ff    	je     c00032e6 <create_chain+0x31>
c0003406:	40                   	inc    eax
c0003407:	74 52                	je     c000345b <create_chain+0x1a6>
c0003409:	39 fb                	cmp    ebx,edi
c000340b:	75 cf                	jne    c00033dc <create_chain+0x127>
c000340d:	e9 01 ff ff ff       	jmp    c0003313 <create_chain+0x5e>
c0003412:	83 c9 ff             	or     ecx,0xffffffff
c0003415:	89 da                	mov    edx,ebx
c0003417:	89 f0                	mov    eax,esi
c0003419:	e8 a4 f9 ff ff       	call   c0002dc2 <put_fat>
c000341e:	85 c0                	test   eax,eax
c0003420:	75 32                	jne    c0003454 <create_chain+0x19f>
c0003422:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003427:	74 11                	je     c000343a <create_chain+0x185>
c0003429:	89 d9                	mov    ecx,ebx
c000342b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000342f:	89 f0                	mov    eax,esi
c0003431:	e8 8c f9 ff ff       	call   c0002dc2 <put_fat>
c0003436:	85 c0                	test   eax,eax
c0003438:	75 1a                	jne    c0003454 <create_chain+0x19f>
c000343a:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000343d:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003440:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003443:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003446:	39 d0                	cmp    eax,edx
c0003448:	77 04                	ja     c000344e <create_chain+0x199>
c000344a:	48                   	dec    eax
c000344b:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000344e:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003452:	eb 56                	jmp    c00034aa <create_chain+0x1f5>
c0003454:	48                   	dec    eax
c0003455:	0f 85 8b fe ff ff    	jne    c00032e6 <create_chain+0x31>
c000345b:	83 cb ff             	or     ebx,0xffffffff
c000345e:	eb 4a                	jmp    c00034aa <create_chain+0x1f5>
c0003460:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003464:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003467:	41                   	inc    ecx
c0003468:	39 d9                	cmp    ecx,ebx
c000346a:	75 19                	jne    c0003485 <create_chain+0x1d0>
c000346c:	b9 02 00 00 00       	mov    ecx,0x2
c0003471:	85 d2                	test   edx,edx
c0003473:	74 03                	je     c0003478 <create_chain+0x1c3>
c0003475:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003478:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000347b:	85 c0                	test   eax,eax
c000347d:	0f 85 63 fe ff ff    	jne    c00032e6 <create_chain+0x31>
c0003483:	eb b5                	jmp    c000343a <create_chain+0x185>
c0003485:	85 d2                	test   edx,edx
c0003487:	75 07                	jne    c0003490 <create_chain+0x1db>
c0003489:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003490:	89 d9                	mov    ecx,ebx
c0003492:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003496:	89 e8                	mov    eax,ebp
c0003498:	e8 bb fa ff ff       	call   c0002f58 <fill_last_frag>
c000349d:	85 c0                	test   eax,eax
c000349f:	75 b3                	jne    c0003454 <create_chain+0x19f>
c00034a1:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00034a8:	eb 90                	jmp    c000343a <create_chain+0x185>
c00034aa:	83 c4 1c             	add    esp,0x1c
c00034ad:	89 d8                	mov    eax,ebx
c00034af:	5b                   	pop    ebx
c00034b0:	5e                   	pop    esi
c00034b1:	5f                   	pop    edi
c00034b2:	5d                   	pop    ebp
c00034b3:	c3                   	ret    

c00034b4 <remove_chain>:
c00034b4:	55                   	push   ebp
c00034b5:	57                   	push   edi
c00034b6:	56                   	push   esi
c00034b7:	53                   	push   ebx
c00034b8:	83 ec 1c             	sub    esp,0x1c
c00034bb:	83 fa 01             	cmp    edx,0x1
c00034be:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00034c2:	8b 18                	mov    ebx,DWORD PTR [eax]
c00034c4:	77 0a                	ja     c00034d0 <remove_chain+0x1c>
c00034c6:	b8 02 00 00 00       	mov    eax,0x2
c00034cb:	e9 24 01 00 00       	jmp    c00035f4 <remove_chain+0x140>
c00034d0:	89 d6                	mov    esi,edx
c00034d2:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00034d5:	76 ef                	jbe    c00034c6 <remove_chain+0x12>
c00034d7:	89 c7                	mov    edi,eax
c00034d9:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034de:	75 06                	jne    c00034e6 <remove_chain+0x32>
c00034e0:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034e4:	eb 54                	jmp    c000353a <remove_chain+0x86>
c00034e6:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034e9:	75 06                	jne    c00034f1 <remove_chain+0x3d>
c00034eb:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034ef:	74 ef                	je     c00034e0 <remove_chain+0x2c>
c00034f1:	83 c9 ff             	or     ecx,0xffffffff
c00034f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034f8:	89 d8                	mov    eax,ebx
c00034fa:	e8 c3 f8 ff ff       	call   c0002dc2 <put_fat>
c00034ff:	85 c0                	test   eax,eax
c0003501:	74 dd                	je     c00034e0 <remove_chain+0x2c>
c0003503:	e9 ec 00 00 00       	jmp    c00035f4 <remove_chain+0x140>
c0003508:	83 f8 01             	cmp    eax,0x1
c000350b:	74 b9                	je     c00034c6 <remove_chain+0x12>
c000350d:	83 f8 ff             	cmp    eax,0xffffffff
c0003510:	74 6d                	je     c000357f <remove_chain+0xcb>
c0003512:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003515:	75 6f                	jne    c0003586 <remove_chain+0xd2>
c0003517:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000351a:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000351d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003520:	39 d0                	cmp    eax,edx
c0003522:	73 08                	jae    c000352c <remove_chain+0x78>
c0003524:	40                   	inc    eax
c0003525:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003529:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000352c:	8d 4e 01             	lea    ecx,[esi+0x1]
c000352f:	39 e9                	cmp    ecx,ebp
c0003531:	75 64                	jne    c0003597 <remove_chain+0xe3>
c0003533:	89 ee                	mov    esi,ebp
c0003535:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003538:	76 0f                	jbe    c0003549 <remove_chain+0x95>
c000353a:	89 f2                	mov    edx,esi
c000353c:	89 f8                	mov    eax,edi
c000353e:	e8 84 fa ff ff       	call   c0002fc7 <get_fat>
c0003543:	89 c5                	mov    ebp,eax
c0003545:	85 c0                	test   eax,eax
c0003547:	75 bf                	jne    c0003508 <remove_chain+0x54>
c0003549:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000354c:	0f 85 a0 00 00 00    	jne    c00035f2 <remove_chain+0x13e>
c0003552:	eb 6c                	jmp    c00035c0 <remove_chain+0x10c>
c0003554:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003557:	84 c0                	test   al,al
c0003559:	75 7d                	jne    c00035d8 <remove_chain+0x124>
c000355b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000355e:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003562:	0f 84 86 00 00 00    	je     c00035ee <remove_chain+0x13a>
c0003568:	89 da                	mov    edx,ebx
c000356a:	89 f8                	mov    eax,edi
c000356c:	e8 56 fa ff ff       	call   c0002fc7 <get_fat>
c0003571:	83 f8 01             	cmp    eax,0x1
c0003574:	0f 86 4c ff ff ff    	jbe    c00034c6 <remove_chain+0x12>
c000357a:	83 f8 ff             	cmp    eax,0xffffffff
c000357d:	75 4e                	jne    c00035cd <remove_chain+0x119>
c000357f:	b8 01 00 00 00       	mov    eax,0x1
c0003584:	eb 6e                	jmp    c00035f4 <remove_chain+0x140>
c0003586:	31 c9                	xor    ecx,ecx
c0003588:	89 f2                	mov    edx,esi
c000358a:	89 d8                	mov    eax,ebx
c000358c:	e8 31 f8 ff ff       	call   c0002dc2 <put_fat>
c0003591:	85 c0                	test   eax,eax
c0003593:	74 82                	je     c0003517 <remove_chain+0x63>
c0003595:	eb 5d                	jmp    c00035f4 <remove_chain+0x140>
c0003597:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000359a:	75 1b                	jne    c00035b7 <remove_chain+0x103>
c000359c:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00035a0:	89 d8                	mov    eax,ebx
c00035a2:	83 ec 0c             	sub    esp,0xc
c00035a5:	6a 00                	push   0x0
c00035a7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00035ab:	e8 5d f7 ff ff       	call   c0002d0d <change_bitmap>
c00035b0:	83 c4 10             	add    esp,0x10
c00035b3:	85 c0                	test   eax,eax
c00035b5:	75 3d                	jne    c00035f4 <remove_chain+0x140>
c00035b7:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00035bb:	e9 73 ff ff ff       	jmp    c0003533 <remove_chain+0x7f>
c00035c0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00035c5:	75 8d                	jne    c0003554 <remove_chain+0xa0>
c00035c7:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00035cb:	eb 25                	jmp    c00035f2 <remove_chain+0x13e>
c00035cd:	8d 53 01             	lea    edx,[ebx+0x1]
c00035d0:	89 c3                	mov    ebx,eax
c00035d2:	39 c2                	cmp    edx,eax
c00035d4:	74 88                	je     c000355e <remove_chain+0xaa>
c00035d6:	eb 1a                	jmp    c00035f2 <remove_chain+0x13e>
c00035d8:	3c 03                	cmp    al,0x3
c00035da:	75 16                	jne    c00035f2 <remove_chain+0x13e>
c00035dc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035df:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035e3:	77 0d                	ja     c00035f2 <remove_chain+0x13e>
c00035e5:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035e8:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035ec:	72 04                	jb     c00035f2 <remove_chain+0x13e>
c00035ee:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035f2:	31 c0                	xor    eax,eax
c00035f4:	83 c4 1c             	add    esp,0x1c
c00035f7:	5b                   	pop    ebx
c00035f8:	5e                   	pop    esi
c00035f9:	5f                   	pop    edi
c00035fa:	5d                   	pop    ebp
c00035fb:	c3                   	ret    

c00035fc <dir_clear>:
c00035fc:	55                   	push   ebp
c00035fd:	57                   	push   edi
c00035fe:	56                   	push   esi
c00035ff:	89 c6                	mov    esi,eax
c0003601:	53                   	push   ebx
c0003602:	83 ec 1c             	sub    esp,0x1c
c0003605:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003609:	e8 9d ed ff ff       	call   c00023ab <sync_window>
c000360e:	85 c0                	test   eax,eax
c0003610:	0f 85 de 00 00 00    	jne    c00036f4 <dir_clear+0xf8>
c0003616:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000361a:	89 f0                	mov    eax,esi
c000361c:	8d 6e 54             	lea    ebp,[esi+0x54]
c000361f:	e8 d6 e8 ff ff       	call   c0001efa <clst2sect>
c0003624:	b9 00 02 00 00       	mov    ecx,0x200
c0003629:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000362d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003631:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003634:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003637:	89 e8                	mov    eax,ebp
c0003639:	31 d2                	xor    edx,edx
c000363b:	e8 b5 e6 ff ff       	call   c0001cf5 <mem_set>
c0003640:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003644:	c1 e3 09             	shl    ebx,0x9
c0003647:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000364d:	76 1f                	jbe    c000366e <dir_clear+0x72>
c000364f:	bb 00 80 00 00       	mov    ebx,0x8000
c0003654:	eb 18                	jmp    c000366e <dir_clear+0x72>
c0003656:	83 ec 0c             	sub    esp,0xc
c0003659:	53                   	push   ebx
c000365a:	e8 35 4e 00 00       	call   c0008494 <ff_memalloc>
c000365f:	83 c4 10             	add    esp,0x10
c0003662:	89 c7                	mov    edi,eax
c0003664:	85 c0                	test   eax,eax
c0003666:	0f 85 8f 00 00 00    	jne    c00036fb <dir_clear+0xff>
c000366c:	d1 eb                	shr    ebx,1
c000366e:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003674:	77 e0                	ja     c0003656 <dir_clear+0x5a>
c0003676:	31 db                	xor    ebx,ebx
c0003678:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000367c:	39 d8                	cmp    eax,ebx
c000367e:	76 66                	jbe    c00036e6 <dir_clear+0xea>
c0003680:	83 ec 0c             	sub    esp,0xc
c0003683:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003687:	6a 01                	push   0x1
c0003689:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000368d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003691:	55                   	push   ebp
c0003692:	50                   	push   eax
c0003693:	e8 94 e5 ff ff       	call   c0001c2c <disk_write>
c0003698:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000369d:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00036a2:	83 c4 20             	add    esp,0x20
c00036a5:	85 c0                	test   eax,eax
c00036a7:	75 3d                	jne    c00036e6 <dir_clear+0xea>
c00036a9:	43                   	inc    ebx
c00036aa:	eb cc                	jmp    c0003678 <dir_clear+0x7c>
c00036ac:	83 ec 0c             	sub    esp,0xc
c00036af:	31 d2                	xor    edx,edx
c00036b1:	55                   	push   ebp
c00036b2:	89 d8                	mov    eax,ebx
c00036b4:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00036b8:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00036bc:	52                   	push   edx
c00036bd:	50                   	push   eax
c00036be:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036c2:	57                   	push   edi
c00036c3:	50                   	push   eax
c00036c4:	e8 63 e5 ff ff       	call   c0001c2c <disk_write>
c00036c9:	83 c4 20             	add    esp,0x20
c00036cc:	85 c0                	test   eax,eax
c00036ce:	75 0a                	jne    c00036da <dir_clear+0xde>
c00036d0:	01 eb                	add    ebx,ebp
c00036d2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036d6:	39 d8                	cmp    eax,ebx
c00036d8:	77 d2                	ja     c00036ac <dir_clear+0xb0>
c00036da:	83 ec 0c             	sub    esp,0xc
c00036dd:	57                   	push   edi
c00036de:	e8 c7 4d 00 00       	call   c00084aa <ff_memfree>
c00036e3:	83 c4 10             	add    esp,0x10
c00036e6:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036ea:	39 d8                	cmp    eax,ebx
c00036ec:	0f 95 c0             	setne  al
c00036ef:	0f b6 c0             	movzx  eax,al
c00036f2:	eb 19                	jmp    c000370d <dir_clear+0x111>
c00036f4:	b8 01 00 00 00       	mov    eax,0x1
c00036f9:	eb 12                	jmp    c000370d <dir_clear+0x111>
c00036fb:	89 d9                	mov    ecx,ebx
c00036fd:	31 d2                	xor    edx,edx
c00036ff:	c1 eb 09             	shr    ebx,0x9
c0003702:	e8 ee e5 ff ff       	call   c0001cf5 <mem_set>
c0003707:	89 dd                	mov    ebp,ebx
c0003709:	31 db                	xor    ebx,ebx
c000370b:	eb c5                	jmp    c00036d2 <dir_clear+0xd6>
c000370d:	83 c4 1c             	add    esp,0x1c
c0003710:	5b                   	pop    ebx
c0003711:	5e                   	pop    esi
c0003712:	5f                   	pop    edi
c0003713:	5d                   	pop    ebp
c0003714:	c3                   	ret    

c0003715 <dir_next>:
c0003715:	55                   	push   ebp
c0003716:	57                   	push   edi
c0003717:	56                   	push   esi
c0003718:	53                   	push   ebx
c0003719:	89 c3                	mov    ebx,eax
c000371b:	83 ec 1c             	sub    esp,0x1c
c000371e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003720:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003724:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003727:	8d 78 20             	lea    edi,[eax+0x20]
c000372a:	31 c0                	xor    eax,eax
c000372c:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003730:	0f 94 c0             	sete   al
c0003733:	48                   	dec    eax
c0003734:	25 00 00 20 f0       	and    eax,0xf0200000
c0003739:	05 00 00 00 10       	add    eax,0x10000000
c000373e:	39 f8                	cmp    eax,edi
c0003740:	77 0e                	ja     c0003750 <dir_next+0x3b>
c0003742:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003749:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003750:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003753:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003756:	b8 04 00 00 00       	mov    eax,0x4
c000375b:	89 ce                	mov    esi,ecx
c000375d:	09 d6                	or     esi,edx
c000375f:	0f 84 da 00 00 00    	je     c000383f <dir_next+0x12a>
c0003765:	89 f8                	mov    eax,edi
c0003767:	25 ff 01 00 00       	and    eax,0x1ff
c000376c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003770:	0f 85 b9 00 00 00    	jne    c000382f <dir_next+0x11a>
c0003776:	83 c2 01             	add    edx,0x1
c0003779:	83 d1 00             	adc    ecx,0x0
c000377c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000377f:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003782:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003785:	85 d2                	test   edx,edx
c0003787:	75 29                	jne    c00037b2 <dir_next+0x9d>
c0003789:	89 fa                	mov    edx,edi
c000378b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000378f:	c1 ea 05             	shr    edx,0x5
c0003792:	39 c2                	cmp    edx,eax
c0003794:	0f 82 95 00 00 00    	jb     c000382f <dir_next+0x11a>
c000379a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00037a1:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00037a8:	b8 04 00 00 00       	mov    eax,0x4
c00037ad:	e9 8d 00 00 00       	jmp    c000383f <dir_next+0x12a>
c00037b2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00037b6:	89 f9                	mov    ecx,edi
c00037b8:	48                   	dec    eax
c00037b9:	c1 e9 09             	shr    ecx,0x9
c00037bc:	85 c8                	test   eax,ecx
c00037be:	75 6f                	jne    c000382f <dir_next+0x11a>
c00037c0:	89 d8                	mov    eax,ebx
c00037c2:	e8 00 f8 ff ff       	call   c0002fc7 <get_fat>
c00037c7:	89 c6                	mov    esi,eax
c00037c9:	83 f8 01             	cmp    eax,0x1
c00037cc:	77 07                	ja     c00037d5 <dir_next+0xc0>
c00037ce:	b8 02 00 00 00       	mov    eax,0x2
c00037d3:	eb 6a                	jmp    c000383f <dir_next+0x12a>
c00037d5:	83 f8 ff             	cmp    eax,0xffffffff
c00037d8:	75 07                	jne    c00037e1 <dir_next+0xcc>
c00037da:	b8 01 00 00 00       	mov    eax,0x1
c00037df:	eb 5e                	jmp    c000383f <dir_next+0x12a>
c00037e1:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037e4:	77 37                	ja     c000381d <dir_next+0x108>
c00037e6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037eb:	74 ad                	je     c000379a <dir_next+0x85>
c00037ed:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037f0:	89 d8                	mov    eax,ebx
c00037f2:	e8 be fa ff ff       	call   c00032b5 <create_chain>
c00037f7:	89 c6                	mov    esi,eax
c00037f9:	b8 07 00 00 00       	mov    eax,0x7
c00037fe:	85 f6                	test   esi,esi
c0003800:	74 3d                	je     c000383f <dir_next+0x12a>
c0003802:	83 fe 01             	cmp    esi,0x1
c0003805:	74 c7                	je     c00037ce <dir_next+0xb9>
c0003807:	83 fe ff             	cmp    esi,0xffffffff
c000380a:	74 ce                	je     c00037da <dir_next+0xc5>
c000380c:	89 f2                	mov    edx,esi
c000380e:	89 e8                	mov    eax,ebp
c0003810:	e8 e7 fd ff ff       	call   c00035fc <dir_clear>
c0003815:	85 c0                	test   eax,eax
c0003817:	75 c1                	jne    c00037da <dir_next+0xc5>
c0003819:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000381d:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003820:	89 f2                	mov    edx,esi
c0003822:	89 e8                	mov    eax,ebp
c0003824:	e8 d1 e6 ff ff       	call   c0001efa <clst2sect>
c0003829:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000382c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000382f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003833:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003836:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c000383a:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000383d:	31 c0                	xor    eax,eax
c000383f:	83 c4 1c             	add    esp,0x1c
c0003842:	5b                   	pop    ebx
c0003843:	5e                   	pop    esi
c0003844:	5f                   	pop    edi
c0003845:	5d                   	pop    ebp
c0003846:	c3                   	ret    

c0003847 <load_xdir>:
c0003847:	55                   	push   ebp
c0003848:	57                   	push   edi
c0003849:	56                   	push   esi
c000384a:	89 c6                	mov    esi,eax
c000384c:	53                   	push   ebx
c000384d:	83 ec 1c             	sub    esp,0x1c
c0003850:	8b 00                	mov    eax,DWORD PTR [eax]
c0003852:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003855:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003858:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000385b:	e8 df eb ff ff       	call   c000243f <move_window>
c0003860:	89 c3                	mov    ebx,eax
c0003862:	85 c0                	test   eax,eax
c0003864:	0f 85 0c 01 00 00    	jne    c0003976 <load_xdir+0x12f>
c000386a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000386d:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003870:	0f 85 fb 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c0003876:	89 f8                	mov    eax,edi
c0003878:	b9 20 00 00 00       	mov    ecx,0x20
c000387d:	e8 5e e4 ff ff       	call   c0001ce0 <mem_cpy>
c0003882:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003886:	40                   	inc    eax
c0003887:	c1 e0 05             	shl    eax,0x5
c000388a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000388e:	83 e8 60             	sub    eax,0x60
c0003891:	3d 00 02 00 00       	cmp    eax,0x200
c0003896:	0f 87 d5 00 00 00    	ja     c0003971 <load_xdir+0x12a>
c000389c:	31 d2                	xor    edx,edx
c000389e:	89 f0                	mov    eax,esi
c00038a0:	e8 70 fe ff ff       	call   c0003715 <dir_next>
c00038a5:	89 c3                	mov    ebx,eax
c00038a7:	83 f8 04             	cmp    eax,0x4
c00038aa:	0f 84 c1 00 00 00    	je     c0003971 <load_xdir+0x12a>
c00038b0:	85 c0                	test   eax,eax
c00038b2:	0f 85 be 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038b8:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038bb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038be:	8b 06                	mov    eax,DWORD PTR [esi]
c00038c0:	e8 7a eb ff ff       	call   c000243f <move_window>
c00038c5:	89 c3                	mov    ebx,eax
c00038c7:	85 c0                	test   eax,eax
c00038c9:	0f 85 a7 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038cf:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038d2:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00038d5:	0f 85 96 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c00038db:	8d 47 20             	lea    eax,[edi+0x20]
c00038de:	b9 20 00 00 00       	mov    ecx,0x20
c00038e3:	e8 f8 e3 ff ff       	call   c0001ce0 <mem_cpy>
c00038e8:	31 d2                	xor    edx,edx
c00038ea:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038ee:	b9 0f 00 00 00       	mov    ecx,0xf
c00038f3:	83 c0 2c             	add    eax,0x2c
c00038f6:	f7 f1                	div    ecx
c00038f8:	c1 e0 05             	shl    eax,0x5
c00038fb:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038ff:	77 70                	ja     c0003971 <load_xdir+0x12a>
c0003901:	bd 40 00 00 00       	mov    ebp,0x40
c0003906:	31 d2                	xor    edx,edx
c0003908:	89 f0                	mov    eax,esi
c000390a:	e8 06 fe ff ff       	call   c0003715 <dir_next>
c000390f:	89 c3                	mov    ebx,eax
c0003911:	83 f8 04             	cmp    eax,0x4
c0003914:	74 5b                	je     c0003971 <load_xdir+0x12a>
c0003916:	85 c0                	test   eax,eax
c0003918:	75 5c                	jne    c0003976 <load_xdir+0x12f>
c000391a:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000391d:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003920:	8b 06                	mov    eax,DWORD PTR [esi]
c0003922:	e8 18 eb ff ff       	call   c000243f <move_window>
c0003927:	89 c3                	mov    ebx,eax
c0003929:	85 c0                	test   eax,eax
c000392b:	75 49                	jne    c0003976 <load_xdir+0x12f>
c000392d:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003930:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003933:	75 3c                	jne    c0003971 <load_xdir+0x12a>
c0003935:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000393b:	77 0d                	ja     c000394a <load_xdir+0x103>
c000393d:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003940:	b9 20 00 00 00       	mov    ecx,0x20
c0003945:	e8 96 e3 ff ff       	call   c0001ce0 <mem_cpy>
c000394a:	83 c5 20             	add    ebp,0x20
c000394d:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003951:	77 b3                	ja     c0003906 <load_xdir+0xbf>
c0003953:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003959:	77 1b                	ja     c0003976 <load_xdir+0x12f>
c000395b:	89 f8                	mov    eax,edi
c000395d:	e8 cd e7 ff ff       	call   c000212f <xdir_sum>
c0003962:	89 c1                	mov    ecx,eax
c0003964:	8d 47 02             	lea    eax,[edi+0x2]
c0003967:	e8 f5 e2 ff ff       	call   c0001c61 <ld_word>
c000396c:	66 39 c1             	cmp    cx,ax
c000396f:	74 05                	je     c0003976 <load_xdir+0x12f>
c0003971:	bb 02 00 00 00       	mov    ebx,0x2
c0003976:	83 c4 1c             	add    esp,0x1c
c0003979:	89 d8                	mov    eax,ebx
c000397b:	5b                   	pop    ebx
c000397c:	5e                   	pop    esi
c000397d:	5f                   	pop    edi
c000397e:	5d                   	pop    ebp
c000397f:	c3                   	ret    

c0003980 <load_obj_xdir>:
c0003980:	53                   	push   ebx
c0003981:	89 c3                	mov    ebx,eax
c0003983:	83 ec 08             	sub    esp,0x8
c0003986:	8b 02                	mov    eax,DWORD PTR [edx]
c0003988:	89 03                	mov    DWORD PTR [ebx],eax
c000398a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000398d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003990:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003993:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003996:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003999:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00039a0:	30 c0                	xor    al,al
c00039a2:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00039a9:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00039ac:	89 d8                	mov    eax,ebx
c00039ae:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00039b1:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00039b4:	e8 04 f8 ff ff       	call   c00031bd <dir_sdi>
c00039b9:	85 c0                	test   eax,eax
c00039bb:	75 0b                	jne    c00039c8 <load_obj_xdir+0x48>
c00039bd:	89 d8                	mov    eax,ebx
c00039bf:	83 c4 08             	add    esp,0x8
c00039c2:	5b                   	pop    ebx
c00039c3:	e9 7f fe ff ff       	jmp    c0003847 <load_xdir>
c00039c8:	83 c4 08             	add    esp,0x8
c00039cb:	5b                   	pop    ebx
c00039cc:	c3                   	ret    

c00039cd <dir_read>:
c00039cd:	55                   	push   ebp
c00039ce:	bd 04 00 00 00       	mov    ebp,0x4
c00039d3:	57                   	push   edi
c00039d4:	56                   	push   esi
c00039d5:	be ff ff ff ff       	mov    esi,0xffffffff
c00039da:	53                   	push   ebx
c00039db:	89 c3                	mov    ebx,eax
c00039dd:	83 ec 1c             	sub    esp,0x1c
c00039e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e4:	8b 38                	mov    edi,DWORD PTR [eax]
c00039e6:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039eb:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039ee:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039f1:	89 c8                	mov    eax,ecx
c00039f3:	09 d0                	or     eax,edx
c00039f5:	0f 84 25 01 00 00    	je     c0003b20 <dir_read+0x153>
c00039fb:	89 f8                	mov    eax,edi
c00039fd:	e8 3d ea ff ff       	call   c000243f <move_window>
c0003a02:	89 c5                	mov    ebp,eax
c0003a04:	85 c0                	test   eax,eax
c0003a06:	0f 85 23 01 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a0c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a0f:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003a11:	84 c9                	test   cl,cl
c0003a13:	0f 84 11 01 00 00    	je     c0003b2a <dir_read+0x15d>
c0003a19:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a1c:	75 48                	jne    c0003a66 <dir_read+0x99>
c0003a1e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003a23:	74 10                	je     c0003a35 <dir_read+0x68>
c0003a25:	80 f9 83             	cmp    cl,0x83
c0003a28:	0f 85 dd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a2e:	31 ed                	xor    ebp,ebp
c0003a30:	e9 08 01 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a35:	80 f9 85             	cmp    cl,0x85
c0003a38:	0f 85 cd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a3e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a41:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a44:	89 d8                	mov    eax,ebx
c0003a46:	e8 fc fd ff ff       	call   c0003847 <load_xdir>
c0003a4b:	89 c5                	mov    ebp,eax
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	0f 85 da 00 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a55:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a58:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a5b:	83 e0 3f             	and    eax,0x3f
c0003a5e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a61:	e9 d7 00 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a66:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a69:	83 e0 3f             	and    eax,0x3f
c0003a6c:	80 f9 2e             	cmp    cl,0x2e
c0003a6f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a73:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a76:	0f 84 8a 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a7c:	80 f9 e5             	cmp    cl,0xe5
c0003a7f:	0f 84 81 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a89:	83 e0 1f             	and    eax,0x1f
c0003a8c:	83 f8 08             	cmp    eax,0x8
c0003a8f:	0f 94 c0             	sete   al
c0003a92:	0f b6 c0             	movzx  eax,al
c0003a95:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a99:	75 6b                	jne    c0003b06 <dir_read+0x139>
c0003a9b:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003aa0:	75 44                	jne    c0003ae6 <dir_read+0x119>
c0003aa2:	f6 c1 40             	test   cl,0x40
c0003aa5:	74 12                	je     c0003ab9 <dir_read+0xec>
c0003aa7:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003aaa:	83 e1 bf             	and    ecx,0xffffffbf
c0003aad:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003ab1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003ab4:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003ab7:	eb 06                	jmp    c0003abf <dir_read+0xf2>
c0003ab9:	89 f0                	mov    eax,esi
c0003abb:	38 c8                	cmp    al,cl
c0003abd:	75 47                	jne    c0003b06 <dir_read+0x139>
c0003abf:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003ac3:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ac8:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003acb:	75 3e                	jne    c0003b0b <dir_read+0x13e>
c0003acd:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003ad1:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003ad4:	e8 8a e4 ff ff       	call   c0001f63 <pick_lfn>
c0003ad9:	85 c0                	test   eax,eax
c0003adb:	74 2e                	je     c0003b0b <dir_read+0x13e>
c0003add:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003ae1:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003ae4:	eb 25                	jmp    c0003b0b <dir_read+0x13e>
c0003ae6:	89 f0                	mov    eax,esi
c0003ae8:	84 c0                	test   al,al
c0003aea:	75 11                	jne    c0003afd <dir_read+0x130>
c0003aec:	89 d0                	mov    eax,edx
c0003aee:	e8 2a e6 ff ff       	call   c000211d <sum_sfn>
c0003af3:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003af7:	0f 84 31 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003afd:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003b04:	eb 37                	jmp    c0003b3d <dir_read+0x170>
c0003b06:	be ff ff ff ff       	mov    esi,0xffffffff
c0003b0b:	31 d2                	xor    edx,edx
c0003b0d:	89 d8                	mov    eax,ebx
c0003b0f:	e8 01 fc ff ff       	call   c0003715 <dir_next>
c0003b14:	89 c5                	mov    ebp,eax
c0003b16:	85 c0                	test   eax,eax
c0003b18:	0f 84 cd fe ff ff    	je     c00039eb <dir_read+0x1e>
c0003b1e:	eb 0f                	jmp    c0003b2f <dir_read+0x162>
c0003b20:	85 ed                	test   ebp,ebp
c0003b22:	0f 84 06 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003b28:	eb 05                	jmp    c0003b2f <dir_read+0x162>
c0003b2a:	bd 04 00 00 00       	mov    ebp,0x4
c0003b2f:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003b36:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b3d:	83 c4 1c             	add    esp,0x1c
c0003b40:	89 e8                	mov    eax,ebp
c0003b42:	5b                   	pop    ebx
c0003b43:	5e                   	pop    esi
c0003b44:	5f                   	pop    edi
c0003b45:	5d                   	pop    ebp
c0003b46:	c3                   	ret    

c0003b47 <dir_alloc>:
c0003b47:	55                   	push   ebp
c0003b48:	89 d5                	mov    ebp,edx
c0003b4a:	57                   	push   edi
c0003b4b:	31 d2                	xor    edx,edx
c0003b4d:	56                   	push   esi
c0003b4e:	53                   	push   ebx
c0003b4f:	89 c3                	mov    ebx,eax
c0003b51:	83 ec 0c             	sub    esp,0xc
c0003b54:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b56:	e8 62 f6 ff ff       	call   c00031bd <dir_sdi>
c0003b5b:	85 c0                	test   eax,eax
c0003b5d:	75 4e                	jne    c0003bad <dir_alloc+0x66>
c0003b5f:	31 f6                	xor    esi,esi
c0003b61:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b64:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b67:	89 f8                	mov    eax,edi
c0003b69:	e8 d1 e8 ff ff       	call   c000243f <move_window>
c0003b6e:	85 c0                	test   eax,eax
c0003b70:	75 3b                	jne    c0003bad <dir_alloc+0x66>
c0003b72:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b75:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b78:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b7a:	75 07                	jne    c0003b83 <dir_alloc+0x3c>
c0003b7c:	f7 d2                	not    edx
c0003b7e:	c0 ea 07             	shr    dl,0x7
c0003b81:	eb 0d                	jmp    c0003b90 <dir_alloc+0x49>
c0003b83:	84 d2                	test   dl,dl
c0003b85:	0f 94 c1             	sete   cl
c0003b88:	80 fa e5             	cmp    dl,0xe5
c0003b8b:	0f 94 c2             	sete   dl
c0003b8e:	09 ca                	or     edx,ecx
c0003b90:	84 d2                	test   dl,dl
c0003b92:	74 07                	je     c0003b9b <dir_alloc+0x54>
c0003b94:	46                   	inc    esi
c0003b95:	39 ee                	cmp    esi,ebp
c0003b97:	75 04                	jne    c0003b9d <dir_alloc+0x56>
c0003b99:	eb 1c                	jmp    c0003bb7 <dir_alloc+0x70>
c0003b9b:	31 f6                	xor    esi,esi
c0003b9d:	ba 01 00 00 00       	mov    edx,0x1
c0003ba2:	89 d8                	mov    eax,ebx
c0003ba4:	e8 6c fb ff ff       	call   c0003715 <dir_next>
c0003ba9:	85 c0                	test   eax,eax
c0003bab:	74 b4                	je     c0003b61 <dir_alloc+0x1a>
c0003bad:	83 f8 04             	cmp    eax,0x4
c0003bb0:	75 05                	jne    c0003bb7 <dir_alloc+0x70>
c0003bb2:	b8 07 00 00 00       	mov    eax,0x7
c0003bb7:	83 c4 0c             	add    esp,0xc
c0003bba:	5b                   	pop    ebx
c0003bbb:	5e                   	pop    esi
c0003bbc:	5f                   	pop    edi
c0003bbd:	5d                   	pop    ebp
c0003bbe:	c3                   	ret    

c0003bbf <store_xdir>:
c0003bbf:	55                   	push   ebp
c0003bc0:	57                   	push   edi
c0003bc1:	89 c7                	mov    edi,eax
c0003bc3:	56                   	push   esi
c0003bc4:	53                   	push   ebx
c0003bc5:	83 ec 0c             	sub    esp,0xc
c0003bc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0003bca:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003bcd:	89 e8                	mov    eax,ebp
c0003bcf:	e8 5b e5 ff ff       	call   c000212f <xdir_sum>
c0003bd4:	0f b7 d0             	movzx  edx,ax
c0003bd7:	8d 45 02             	lea    eax,[ebp+0x2]
c0003bda:	e8 f4 e0 ff ff       	call   c0001cd3 <st_word>
c0003bdf:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003be3:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003be6:	89 f8                	mov    eax,edi
c0003be8:	e8 d0 f5 ff ff       	call   c00031bd <dir_sdi>
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	85 f6                	test   esi,esi
c0003bf1:	75 3d                	jne    c0003c30 <store_xdir+0x71>
c0003bf3:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bf6:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bf9:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bfb:	e8 3f e8 ff ff       	call   c000243f <move_window>
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	85 c0                	test   eax,eax
c0003c04:	75 2a                	jne    c0003c30 <store_xdir+0x71>
c0003c06:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003c09:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0e:	89 ea                	mov    edx,ebp
c0003c10:	e8 cb e0 ff ff       	call   c0001ce0 <mem_cpy>
c0003c15:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c17:	85 db                	test   ebx,ebx
c0003c19:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c1d:	74 11                	je     c0003c30 <store_xdir+0x71>
c0003c1f:	31 d2                	xor    edx,edx
c0003c21:	89 f8                	mov    eax,edi
c0003c23:	83 c5 20             	add    ebp,0x20
c0003c26:	e8 ea fa ff ff       	call   c0003715 <dir_next>
c0003c2b:	4b                   	dec    ebx
c0003c2c:	89 c6                	mov    esi,eax
c0003c2e:	eb bf                	jmp    c0003bef <store_xdir+0x30>
c0003c30:	89 f0                	mov    eax,esi
c0003c32:	83 fe 02             	cmp    esi,0x2
c0003c35:	76 05                	jbe    c0003c3c <store_xdir+0x7d>
c0003c37:	b8 02 00 00 00       	mov    eax,0x2
c0003c3c:	83 c4 0c             	add    esp,0xc
c0003c3f:	5b                   	pop    ebx
c0003c40:	5e                   	pop    esi
c0003c41:	5f                   	pop    edi
c0003c42:	5d                   	pop    ebp
c0003c43:	c3                   	ret    

c0003c44 <dir_remove>:
c0003c44:	57                   	push   edi
c0003c45:	56                   	push   esi
c0003c46:	53                   	push   ebx
c0003c47:	89 c3                	mov    ebx,eax
c0003c49:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c4c:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c4e:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c51:	83 fa ff             	cmp    edx,0xffffffff
c0003c54:	74 09                	je     c0003c5f <dir_remove+0x1b>
c0003c56:	e8 62 f5 ff ff       	call   c00031bd <dir_sdi>
c0003c5b:	85 c0                	test   eax,eax
c0003c5d:	75 41                	jne    c0003ca0 <dir_remove+0x5c>
c0003c5f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c62:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c65:	89 f0                	mov    eax,esi
c0003c67:	e8 d3 e7 ff ff       	call   c000243f <move_window>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	75 26                	jne    c0003c96 <dir_remove+0x52>
c0003c70:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c73:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c76:	75 05                	jne    c0003c7d <dir_remove+0x39>
c0003c78:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c7b:	eb 03                	jmp    c0003c80 <dir_remove+0x3c>
c0003c7d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c80:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c84:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c87:	73 17                	jae    c0003ca0 <dir_remove+0x5c>
c0003c89:	31 d2                	xor    edx,edx
c0003c8b:	89 d8                	mov    eax,ebx
c0003c8d:	e8 83 fa ff ff       	call   c0003715 <dir_next>
c0003c92:	85 c0                	test   eax,eax
c0003c94:	74 c9                	je     c0003c5f <dir_remove+0x1b>
c0003c96:	83 f8 04             	cmp    eax,0x4
c0003c99:	75 05                	jne    c0003ca0 <dir_remove+0x5c>
c0003c9b:	b8 02 00 00 00       	mov    eax,0x2
c0003ca0:	5b                   	pop    ebx
c0003ca1:	5e                   	pop    esi
c0003ca2:	5f                   	pop    edi
c0003ca3:	c3                   	ret    

c0003ca4 <create_name>:
c0003ca4:	55                   	push   ebp
c0003ca5:	89 d5                	mov    ebp,edx
c0003ca7:	57                   	push   edi
c0003ca8:	89 c7                	mov    edi,eax
c0003caa:	56                   	push   esi
c0003cab:	31 f6                	xor    esi,esi
c0003cad:	53                   	push   ebx
c0003cae:	83 ec 3c             	sub    esp,0x3c
c0003cb1:	8b 02                	mov    eax,DWORD PTR [edx]
c0003cb3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cb7:	8b 07                	mov    eax,DWORD PTR [edi]
c0003cb9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003cbc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003cc0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003cc4:	e8 72 e0 ff ff       	call   c0001d3b <tchar2uni>
c0003cc9:	89 c3                	mov    ebx,eax
c0003ccb:	83 f8 ff             	cmp    eax,0xffffffff
c0003cce:	75 0a                	jne    c0003cda <create_name+0x36>
c0003cd0:	b8 06 00 00 00       	mov    eax,0x6
c0003cd5:	e9 9e 02 00 00       	jmp    c0003f78 <create_name+0x2d4>
c0003cda:	3d ff ff 00 00       	cmp    eax,0xffff
c0003cdf:	76 0c                	jbe    c0003ced <create_name+0x49>
c0003ce1:	c1 e8 10             	shr    eax,0x10
c0003ce4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003ce8:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cec:	46                   	inc    esi
c0003ced:	66 83 fb 1f          	cmp    bx,0x1f
c0003cf1:	76 4f                	jbe    c0003d42 <create_name+0x9e>
c0003cf3:	66 83 fb 5c          	cmp    bx,0x5c
c0003cf7:	74 35                	je     c0003d2e <create_name+0x8a>
c0003cf9:	66 83 fb 2f          	cmp    bx,0x2f
c0003cfd:	74 2f                	je     c0003d2e <create_name+0x8a>
c0003cff:	66 83 fb 7f          	cmp    bx,0x7f
c0003d03:	77 11                	ja     c0003d16 <create_name+0x72>
c0003d05:	0f b7 d3             	movzx  edx,bx
c0003d08:	b8 72 94 02 c0       	mov    eax,0xc0029472
c0003d0d:	e8 11 e0 ff ff       	call   c0001d23 <chk_chr>
c0003d12:	85 c0                	test   eax,eax
c0003d14:	75 ba                	jne    c0003cd0 <create_name+0x2c>
c0003d16:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003d1c:	77 b2                	ja     c0003cd0 <create_name+0x2c>
c0003d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d22:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003d26:	46                   	inc    esi
c0003d27:	eb 97                	jmp    c0003cc0 <create_name+0x1c>
c0003d29:	40                   	inc    eax
c0003d2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d2e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d32:	8a 10                	mov    dl,BYTE PTR [eax]
c0003d34:	80 fa 2f             	cmp    dl,0x2f
c0003d37:	74 f0                	je     c0003d29 <create_name+0x85>
c0003d39:	80 fa 5c             	cmp    dl,0x5c
c0003d3c:	74 eb                	je     c0003d29 <create_name+0x85>
c0003d3e:	31 db                	xor    ebx,ebx
c0003d40:	eb 02                	jmp    c0003d44 <create_name+0xa0>
c0003d42:	b3 04                	mov    bl,0x4
c0003d44:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d48:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d4b:	85 f6                	test   esi,esi
c0003d4d:	74 18                	je     c0003d67 <create_name+0xc3>
c0003d4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d53:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d58:	66 83 f8 20          	cmp    ax,0x20
c0003d5c:	74 06                	je     c0003d64 <create_name+0xc0>
c0003d5e:	66 83 f8 2e          	cmp    ax,0x2e
c0003d62:	75 03                	jne    c0003d67 <create_name+0xc3>
c0003d64:	4e                   	dec    esi
c0003d65:	eb e4                	jmp    c0003d4b <create_name+0xa7>
c0003d67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6b:	31 ed                	xor    ebp,ebp
c0003d6d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d73:	85 f6                	test   esi,esi
c0003d75:	0f 84 55 ff ff ff    	je     c0003cd0 <create_name+0x2c>
c0003d7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d7f:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d82:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d86:	66 83 f8 20          	cmp    ax,0x20
c0003d8a:	75 04                	jne    c0003d90 <create_name+0xec>
c0003d8c:	89 d5                	mov    ebp,edx
c0003d8e:	eb eb                	jmp    c0003d7b <create_name+0xd7>
c0003d90:	85 ed                	test   ebp,ebp
c0003d92:	75 06                	jne    c0003d9a <create_name+0xf6>
c0003d94:	66 83 f8 2e          	cmp    ax,0x2e
c0003d98:	75 08                	jne    c0003da2 <create_name+0xfe>
c0003d9a:	83 cb 03             	or     ebx,0x3
c0003d9d:	eb 03                	jmp    c0003da2 <create_name+0xfe>
c0003d9f:	4e                   	dec    esi
c0003da0:	74 0c                	je     c0003dae <create_name+0x10a>
c0003da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da6:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003dac:	75 f1                	jne    c0003d9f <create_name+0xfb>
c0003dae:	b9 0b 00 00 00       	mov    ecx,0xb
c0003db3:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003db6:	ba 20 00 00 00       	mov    edx,0x20
c0003dbb:	e8 35 df ff ff       	call   c0001cf5 <mem_set>
c0003dc0:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003dc8:	31 c9                	xor    ecx,ecx
c0003dca:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003dcf:	8d 45 01             	lea    eax,[ebp+0x1]
c0003dd2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003dd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003dda:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003dde:	66 85 ed             	test   bp,bp
c0003de1:	0f 84 30 01 00 00    	je     c0003f17 <create_name+0x273>
c0003de7:	66 83 fd 20          	cmp    bp,0x20
c0003deb:	74 10                	je     c0003dfd <create_name+0x159>
c0003ded:	66 83 fd 2e          	cmp    bp,0x2e
c0003df1:	75 13                	jne    c0003e06 <create_name+0x162>
c0003df3:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df7:	0f 84 6b 01 00 00    	je     c0003f68 <create_name+0x2c4>
c0003dfd:	83 cb 03             	or     ebx,0x3
c0003e00:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003e04:	eb c9                	jmp    c0003dcf <create_name+0x12b>
c0003e06:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003e0a:	73 0b                	jae    c0003e17 <create_name+0x173>
c0003e0c:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e10:	75 47                	jne    c0003e59 <create_name+0x1b5>
c0003e12:	e9 51 01 00 00       	jmp    c0003f68 <create_name+0x2c4>
c0003e17:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e1c:	75 10                	jne    c0003e2e <create_name+0x18a>
c0003e1e:	83 cb 03             	or     ebx,0x3
c0003e21:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e29:	e9 e9 00 00 00       	jmp    c0003f17 <create_name+0x273>
c0003e2e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e32:	74 0d                	je     c0003e41 <create_name+0x19d>
c0003e34:	83 cb 03             	or     ebx,0x3
c0003e37:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e3b:	0f 87 d6 00 00 00    	ja     c0003f17 <create_name+0x273>
c0003e41:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e46:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e4a:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e52:	b9 08 00 00 00       	mov    ecx,0x8
c0003e57:	eb a7                	jmp    c0003e00 <create_name+0x15c>
c0003e59:	66 83 fd 7f          	cmp    bp,0x7f
c0003e5d:	76 68                	jbe    c0003ec7 <create_name+0x223>
c0003e5f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e63:	88 da                	mov    dl,bl
c0003e65:	83 ca 02             	or     edx,0x2
c0003e68:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e6c:	50                   	push   eax
c0003e6d:	50                   	push   eax
c0003e6e:	68 b5 01 00 00       	push   0x1b5
c0003e73:	55                   	push   ebp
c0003e74:	e8 48 46 00 00       	call   c00084c1 <ff_uni2oem>
c0003e79:	83 c4 10             	add    esp,0x10
c0003e7c:	89 c5                	mov    ebp,eax
c0003e7e:	a8 80                	test   al,0x80
c0003e80:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e84:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e88:	74 0c                	je     c0003e96 <create_name+0x1f2>
c0003e8a:	83 e5 7f             	and    ebp,0x7f
c0003e8d:	0f b6 ad c0 93 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6c40]
c0003e94:	eb 2a                	jmp    c0003ec0 <create_name+0x21c>
c0003e96:	66 3d ff 00          	cmp    ax,0xff
c0003e9a:	76 24                	jbe    c0003ec0 <create_name+0x21c>
c0003e9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ea0:	48                   	dec    eax
c0003ea1:	39 c8                	cmp    eax,ecx
c0003ea3:	77 0c                	ja     c0003eb1 <create_name+0x20d>
c0003ea5:	83 cb 03             	or     ebx,0x3
c0003ea8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eac:	e9 4f ff ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003eb1:	89 e8                	mov    eax,ebp
c0003eb3:	88 d3                	mov    bl,dl
c0003eb5:	66 c1 e8 08          	shr    ax,0x8
c0003eb9:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ebd:	41                   	inc    ecx
c0003ebe:	eb 4b                	jmp    c0003f0b <create_name+0x267>
c0003ec0:	88 d3                	mov    bl,dl
c0003ec2:	66 85 ed             	test   bp,bp
c0003ec5:	74 19                	je     c0003ee0 <create_name+0x23c>
c0003ec7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003ecb:	0f b7 d5             	movzx  edx,bp
c0003ece:	b8 7b 94 02 c0       	mov    eax,0xc002947b
c0003ed3:	e8 4b de ff ff       	call   c0001d23 <chk_chr>
c0003ed8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003edc:	85 c0                	test   eax,eax
c0003ede:	74 0a                	je     c0003eea <create_name+0x246>
c0003ee0:	83 cb 03             	or     ebx,0x3
c0003ee3:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003ee8:	eb 21                	jmp    c0003f0b <create_name+0x267>
c0003eea:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eed:	66 83 f8 19          	cmp    ax,0x19
c0003ef1:	77 07                	ja     c0003efa <create_name+0x256>
c0003ef3:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ef8:	eb 11                	jmp    c0003f0b <create_name+0x267>
c0003efa:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003efd:	66 83 f8 19          	cmp    ax,0x19
c0003f01:	77 08                	ja     c0003f0b <create_name+0x267>
c0003f03:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003f08:	83 ed 20             	sub    ebp,0x20
c0003f0b:	89 e8                	mov    eax,ebp
c0003f0d:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003f11:	41                   	inc    ecx
c0003f12:	e9 e9 fe ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003f17:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003f1b:	75 04                	jne    c0003f21 <create_name+0x27d>
c0003f1d:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003f21:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003f26:	75 05                	jne    c0003f2d <create_name+0x289>
c0003f28:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003f2d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f31:	83 e0 0c             	and    eax,0xc
c0003f34:	3c 0c                	cmp    al,0xc
c0003f36:	74 0b                	je     c0003f43 <create_name+0x29f>
c0003f38:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f3c:	83 e0 03             	and    eax,0x3
c0003f3f:	3c 03                	cmp    al,0x3
c0003f41:	75 05                	jne    c0003f48 <create_name+0x2a4>
c0003f43:	83 cb 02             	or     ebx,0x2
c0003f46:	eb 19                	jmp    c0003f61 <create_name+0x2bd>
c0003f48:	f6 c3 02             	test   bl,0x2
c0003f4b:	75 14                	jne    c0003f61 <create_name+0x2bd>
c0003f4d:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f52:	74 03                	je     c0003f57 <create_name+0x2b3>
c0003f54:	83 cb 10             	or     ebx,0x10
c0003f57:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f5c:	74 03                	je     c0003f61 <create_name+0x2bd>
c0003f5e:	83 cb 08             	or     ebx,0x8
c0003f61:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f64:	31 c0                	xor    eax,eax
c0003f66:	eb 10                	jmp    c0003f78 <create_name+0x2d4>
c0003f68:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f6d:	0f 85 ce fe ff ff    	jne    c0003e41 <create_name+0x19d>
c0003f73:	e9 a6 fe ff ff       	jmp    c0003e1e <create_name+0x17a>
c0003f78:	83 c4 3c             	add    esp,0x3c
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	5f                   	pop    edi
c0003f7e:	5d                   	pop    ebp
c0003f7f:	c3                   	ret    

c0003f80 <xname_sum>:
c0003f80:	56                   	push   esi
c0003f81:	53                   	push   ebx
c0003f82:	89 c6                	mov    esi,eax
c0003f84:	51                   	push   ecx
c0003f85:	31 db                	xor    ebx,ebx
c0003f87:	83 c6 02             	add    esi,0x2
c0003f8a:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f8e:	66 85 c0             	test   ax,ax
c0003f91:	74 1f                	je     c0003fb2 <xname_sum+0x32>
c0003f93:	83 ec 0c             	sub    esp,0xc
c0003f96:	66 d1 cb             	ror    bx,1
c0003f99:	50                   	push   eax
c0003f9a:	e8 1e 46 00 00       	call   c00085bd <ff_wtoupper>
c0003f9f:	83 c4 10             	add    esp,0x10
c0003fa2:	0f b6 d0             	movzx  edx,al
c0003fa5:	66 c1 e8 08          	shr    ax,0x8
c0003fa9:	01 d3                	add    ebx,edx
c0003fab:	66 d1 cb             	ror    bx,1
c0003fae:	01 c3                	add    ebx,eax
c0003fb0:	eb d5                	jmp    c0003f87 <xname_sum+0x7>
c0003fb2:	89 d8                	mov    eax,ebx
c0003fb4:	5a                   	pop    edx
c0003fb5:	5b                   	pop    ebx
c0003fb6:	5e                   	pop    esi
c0003fb7:	c3                   	ret    

c0003fb8 <create_xdir>:
c0003fb8:	55                   	push   ebp
c0003fb9:	b9 40 00 00 00       	mov    ecx,0x40
c0003fbe:	57                   	push   edi
c0003fbf:	bd 01 00 00 00       	mov    ebp,0x1
c0003fc4:	56                   	push   esi
c0003fc5:	31 ff                	xor    edi,edi
c0003fc7:	53                   	push   ebx
c0003fc8:	be 40 00 00 00       	mov    esi,0x40
c0003fcd:	89 c3                	mov    ebx,eax
c0003fcf:	83 ec 1c             	sub    esp,0x1c
c0003fd2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003fd6:	31 d2                	xor    edx,edx
c0003fd8:	e8 18 dd ff ff       	call   c0001cf5 <mem_set>
c0003fdd:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fe0:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003fe4:	31 c9                	xor    ecx,ecx
c0003fe6:	8d 46 01             	lea    eax,[esi+0x1]
c0003fe9:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fed:	83 c6 02             	add    esi,0x2
c0003ff0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003ff4:	66 85 ed             	test   bp,bp
c0003ff7:	74 12                	je     c000400b <create_xdir+0x53>
c0003ff9:	0f b6 c1             	movzx  eax,cl
c0003ffc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004000:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0004004:	66 83 fd 01          	cmp    bp,0x1
c0004008:	80 d9 ff             	sbb    cl,0xff
c000400b:	8d 04 33             	lea    eax,[ebx+esi*1]
c000400e:	0f b7 d5             	movzx  edx,bp
c0004011:	83 c6 02             	add    esi,0x2
c0004014:	e8 ba dc ff ff       	call   c0001cd3 <st_word>
c0004019:	f7 c6 1f 00 00 00    	test   esi,0x1f
c000401f:	75 d3                	jne    c0003ff4 <create_xdir+0x3c>
c0004021:	8d 47 01             	lea    eax,[edi+0x1]
c0004024:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004028:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000402c:	0f b6 c1             	movzx  eax,cl
c000402f:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0004034:	74 07                	je     c000403d <create_xdir+0x85>
c0004036:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c000403b:	eb a9                	jmp    c0003fe6 <create_xdir+0x2e>
c000403d:	8d 47 02             	lea    eax,[edi+0x2]
c0004040:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004043:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0004046:	89 d0                	mov    eax,edx
c0004048:	e8 33 ff ff ff       	call   c0003f80 <xname_sum>
c000404d:	83 c4 1c             	add    esp,0x1c
c0004050:	0f b7 d0             	movzx  edx,ax
c0004053:	8d 43 24             	lea    eax,[ebx+0x24]
c0004056:	5b                   	pop    ebx
c0004057:	5e                   	pop    esi
c0004058:	5f                   	pop    edi
c0004059:	5d                   	pop    ebp
c000405a:	e9 74 dc ff ff       	jmp    c0001cd3 <st_word>

c000405f <cmp_lfn>:
c000405f:	55                   	push   ebp
c0004060:	57                   	push   edi
c0004061:	89 d7                	mov    edi,edx
c0004063:	56                   	push   esi
c0004064:	53                   	push   ebx
c0004065:	83 ec 1c             	sub    esp,0x1c
c0004068:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000406c:	8d 42 1a             	lea    eax,[edx+0x1a]
c000406f:	e8 ed db ff ff       	call   c0001c61 <ld_word>
c0004074:	66 85 c0             	test   ax,ax
c0004077:	74 07                	je     c0004080 <cmp_lfn+0x21>
c0004079:	31 c0                	xor    eax,eax
c000407b:	e9 9a 00 00 00       	jmp    c000411a <cmp_lfn+0xbb>
c0004080:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004082:	bd 01 00 00 00       	mov    ebp,0x1
c0004087:	83 e3 3f             	and    ebx,0x3f
c000408a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004092:	4b                   	dec    ebx
c0004093:	6b db 0d             	imul   ebx,ebx,0xd
c0004096:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000409a:	0f b6 80 40 94 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6bc0]
c00040a1:	01 f8                	add    eax,edi
c00040a3:	e8 b9 db ff ff       	call   c0001c61 <ld_word>
c00040a8:	66 85 ed             	test   bp,bp
c00040ab:	89 c6                	mov    esi,eax
c00040ad:	74 3c                	je     c00040eb <cmp_lfn+0x8c>
c00040af:	81 fb ff 00 00 00    	cmp    ebx,0xff
c00040b5:	77 c2                	ja     c0004079 <cmp_lfn+0x1a>
c00040b7:	83 ec 0c             	sub    esp,0xc
c00040ba:	0f b7 c0             	movzx  eax,ax
c00040bd:	50                   	push   eax
c00040be:	e8 fa 44 00 00       	call   c00085bd <ff_wtoupper>
c00040c3:	89 c5                	mov    ebp,eax
c00040c5:	8d 43 01             	lea    eax,[ebx+0x1]
c00040c8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00040cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00040d0:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c00040d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040d7:	e8 e1 44 00 00       	call   c00085bd <ff_wtoupper>
c00040dc:	83 c4 10             	add    esp,0x10
c00040df:	39 c5                	cmp    ebp,eax
c00040e1:	75 96                	jne    c0004079 <cmp_lfn+0x1a>
c00040e3:	89 f5                	mov    ebp,esi
c00040e5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040e9:	eb 04                	jmp    c00040ef <cmp_lfn+0x90>
c00040eb:	66 46                	inc    si
c00040ed:	75 8a                	jne    c0004079 <cmp_lfn+0x1a>
c00040ef:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040f3:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040f8:	75 9c                	jne    c0004096 <cmp_lfn+0x37>
c00040fa:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040fd:	74 16                	je     c0004115 <cmp_lfn+0xb6>
c00040ff:	66 85 ed             	test   bp,bp
c0004102:	74 11                	je     c0004115 <cmp_lfn+0xb6>
c0004104:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004108:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000410d:	0f 94 c0             	sete   al
c0004110:	0f b6 c0             	movzx  eax,al
c0004113:	eb 05                	jmp    c000411a <cmp_lfn+0xbb>
c0004115:	b8 01 00 00 00       	mov    eax,0x1
c000411a:	83 c4 1c             	add    esp,0x1c
c000411d:	5b                   	pop    ebx
c000411e:	5e                   	pop    esi
c000411f:	5f                   	pop    edi
c0004120:	5d                   	pop    ebp
c0004121:	c3                   	ret    

c0004122 <dir_find>:
c0004122:	55                   	push   ebp
c0004123:	31 d2                	xor    edx,edx
c0004125:	57                   	push   edi
c0004126:	56                   	push   esi
c0004127:	53                   	push   ebx
c0004128:	89 c3                	mov    ebx,eax
c000412a:	83 ec 1c             	sub    esp,0x1c
c000412d:	8b 30                	mov    esi,DWORD PTR [eax]
c000412f:	e8 89 f0 ff ff       	call   c00031bd <dir_sdi>
c0004134:	89 04 24             	mov    DWORD PTR [esp],eax
c0004137:	85 c0                	test   eax,eax
c0004139:	0f 85 9e 01 00 00    	jne    c00042dd <dir_find+0x1bb>
c000413f:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004142:	0f 85 8d 00 00 00    	jne    c00041d5 <dir_find+0xb3>
c0004148:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000414b:	e8 30 fe ff ff       	call   c0003f80 <xname_sum>
c0004150:	89 c7                	mov    edi,eax
c0004152:	31 d2                	xor    edx,edx
c0004154:	89 d8                	mov    eax,ebx
c0004156:	e8 72 f8 ff ff       	call   c00039cd <dir_read>
c000415b:	85 c0                	test   eax,eax
c000415d:	0f 85 5e 01 00 00    	jne    c00042c1 <dir_find+0x19f>
c0004163:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004166:	8d 41 24             	lea    eax,[ecx+0x24]
c0004169:	e8 f3 da ff ff       	call   c0001c61 <ld_word>
c000416e:	66 39 f8             	cmp    ax,di
c0004171:	75 df                	jne    c0004152 <dir_find+0x30>
c0004173:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004176:	31 ed                	xor    ebp,ebp
c0004178:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000417c:	ba 40 00 00 00       	mov    edx,0x40
c0004181:	89 e9                	mov    ecx,ebp
c0004183:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004187:	0f 84 42 01 00 00    	je     c00042cf <dir_find+0x1ad>
c000418d:	f6 c2 1f             	test   dl,0x1f
c0004190:	75 03                	jne    c0004195 <dir_find+0x73>
c0004192:	83 c2 02             	add    edx,0x2
c0004195:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004199:	89 d0                	mov    eax,edx
c000419b:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c000419e:	e8 be da ff ff       	call   c0001c61 <ld_word>
c00041a3:	83 ec 0c             	sub    esp,0xc
c00041a6:	0f b7 c0             	movzx  eax,ax
c00041a9:	50                   	push   eax
c00041aa:	e8 0e 44 00 00       	call   c00085bd <ff_wtoupper>
c00041af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00041b3:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041b6:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00041ba:	89 04 24             	mov    DWORD PTR [esp],eax
c00041bd:	e8 fb 43 00 00       	call   c00085bd <ff_wtoupper>
c00041c2:	83 c4 10             	add    esp,0x10
c00041c5:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00041c9:	75 87                	jne    c0004152 <dir_find+0x30>
c00041cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00041cf:	45                   	inc    ebp
c00041d0:	83 c2 02             	add    edx,0x2
c00041d3:	eb ac                	jmp    c0004181 <dir_find+0x5f>
c00041d5:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041dc:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041e1:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041e6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041e9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041ec:	89 f0                	mov    eax,esi
c00041ee:	e8 4c e2 ff ff       	call   c000243f <move_window>
c00041f3:	85 c0                	test   eax,eax
c00041f5:	0f 85 c6 00 00 00    	jne    c00042c1 <dir_find+0x19f>
c00041fb:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041fe:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0004201:	84 c9                	test   cl,cl
c0004203:	0f 84 bd 00 00 00    	je     c00042c6 <dir_find+0x1a4>
c0004209:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c000420c:	88 d0                	mov    al,dl
c000420e:	83 e0 3f             	and    eax,0x3f
c0004211:	80 f9 e5             	cmp    cl,0xe5
c0004214:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004217:	0f 84 87 00 00 00    	je     c00042a4 <dir_find+0x182>
c000421d:	80 e2 08             	and    dl,0x8
c0004220:	74 06                	je     c0004228 <dir_find+0x106>
c0004222:	3c 0f                	cmp    al,0xf
c0004224:	75 7e                	jne    c00042a4 <dir_find+0x182>
c0004226:	eb 04                	jmp    c000422c <dir_find+0x10a>
c0004228:	3c 0f                	cmp    al,0xf
c000422a:	75 4c                	jne    c0004278 <dir_find+0x156>
c000422c:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004230:	75 7e                	jne    c00042b0 <dir_find+0x18e>
c0004232:	f6 c1 40             	test   cl,0x40
c0004235:	74 12                	je     c0004249 <dir_find+0x127>
c0004237:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000423a:	83 e1 bf             	and    ecx,0xffffffbf
c000423d:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004241:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004244:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004247:	eb 06                	jmp    c000424f <dir_find+0x12d>
c0004249:	89 f8                	mov    eax,edi
c000424b:	38 c8                	cmp    al,cl
c000424d:	75 5c                	jne    c00042ab <dir_find+0x189>
c000424f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004253:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004258:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000425b:	75 53                	jne    c00042b0 <dir_find+0x18e>
c000425d:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004261:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004264:	89 ea                	mov    edx,ebp
c0004266:	e8 f4 fd ff ff       	call   c000405f <cmp_lfn>
c000426b:	85 c0                	test   eax,eax
c000426d:	74 41                	je     c00042b0 <dir_find+0x18e>
c000426f:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004273:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004276:	eb 38                	jmp    c00042b0 <dir_find+0x18e>
c0004278:	89 f8                	mov    eax,edi
c000427a:	84 c0                	test   al,al
c000427c:	75 0d                	jne    c000428b <dir_find+0x169>
c000427e:	89 e8                	mov    eax,ebp
c0004280:	e8 98 de ff ff       	call   c000211d <sum_sfn>
c0004285:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004289:	74 52                	je     c00042dd <dir_find+0x1bb>
c000428b:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000428f:	75 13                	jne    c00042a4 <dir_find+0x182>
c0004291:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004294:	b9 0b 00 00 00       	mov    ecx,0xb
c0004299:	89 e8                	mov    eax,ebp
c000429b:	e8 60 da ff ff       	call   c0001d00 <mem_cmp>
c00042a0:	85 c0                	test   eax,eax
c00042a2:	74 39                	je     c00042dd <dir_find+0x1bb>
c00042a4:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00042ab:	bf ff ff ff ff       	mov    edi,0xffffffff
c00042b0:	31 d2                	xor    edx,edx
c00042b2:	89 d8                	mov    eax,ebx
c00042b4:	e8 5c f4 ff ff       	call   c0003715 <dir_next>
c00042b9:	85 c0                	test   eax,eax
c00042bb:	0f 84 25 ff ff ff    	je     c00041e6 <dir_find+0xc4>
c00042c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00042c4:	eb 17                	jmp    c00042dd <dir_find+0x1bb>
c00042c6:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00042cd:	eb 0e                	jmp    c00042dd <dir_find+0x1bb>
c00042cf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00042d2:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00042d7:	0f 85 75 fe ff ff    	jne    c0004152 <dir_find+0x30>
c00042dd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042e0:	83 c4 1c             	add    esp,0x1c
c00042e3:	5b                   	pop    ebx
c00042e4:	5e                   	pop    esi
c00042e5:	5f                   	pop    edi
c00042e6:	5d                   	pop    ebp
c00042e7:	c3                   	ret    

c00042e8 <dir_register>:
c00042e8:	55                   	push   ebp
c00042e9:	57                   	push   edi
c00042ea:	56                   	push   esi
c00042eb:	be 06 00 00 00       	mov    esi,0x6
c00042f0:	53                   	push   ebx
c00042f1:	83 ec 6c             	sub    esp,0x6c
c00042f4:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042f8:	0f 85 62 02 00 00    	jne    c0004560 <dir_register+0x278>
c00042fe:	8b 28                	mov    ebp,DWORD PTR [eax]
c0004300:	31 ff                	xor    edi,edi
c0004302:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004305:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c000430a:	74 03                	je     c000430f <dir_register+0x27>
c000430c:	47                   	inc    edi
c000430d:	eb f6                	jmp    c0004305 <dir_register+0x1d>
c000430f:	89 c3                	mov    ebx,eax
c0004311:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004315:	0f 85 e1 00 00 00    	jne    c00043fc <dir_register+0x114>
c000431b:	83 c7 0e             	add    edi,0xe
c000431e:	b9 0f 00 00 00       	mov    ecx,0xf
c0004323:	89 f8                	mov    eax,edi
c0004325:	31 d2                	xor    edx,edx
c0004327:	f7 f1                	div    ecx
c0004329:	8d 50 02             	lea    edx,[eax+0x2]
c000432c:	89 c7                	mov    edi,eax
c000432e:	89 d8                	mov    eax,ebx
c0004330:	e8 12 f8 ff ff       	call   c0003b47 <dir_alloc>
c0004335:	89 c6                	mov    esi,eax
c0004337:	85 c0                	test   eax,eax
c0004339:	0f 85 21 02 00 00    	jne    c0004560 <dir_register+0x278>
c000433f:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004345:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004348:	c1 e7 05             	shl    edi,0x5
c000434b:	29 f8                	sub    eax,edi
c000434d:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004350:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004353:	a8 04                	test   al,0x4
c0004355:	0f 84 91 00 00 00    	je     c00043ec <dir_register+0x104>
c000435b:	83 e0 fb             	and    eax,0xfffffffb
c000435e:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004361:	89 d8                	mov    eax,ebx
c0004363:	e8 25 ec ff ff       	call   c0002f8d <fill_first_frag>
c0004368:	85 c0                	test   eax,eax
c000436a:	0f 85 ee 01 00 00    	jne    c000455e <dir_register+0x276>
c0004370:	83 c9 ff             	or     ecx,0xffffffff
c0004373:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004376:	89 d8                	mov    eax,ebx
c0004378:	e8 db eb ff ff       	call   c0002f58 <fill_last_frag>
c000437d:	85 c0                	test   eax,eax
c000437f:	0f 85 d9 01 00 00    	jne    c000455e <dir_register+0x276>
c0004385:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004389:	74 61                	je     c00043ec <dir_register+0x104>
c000438b:	89 da                	mov    edx,ebx
c000438d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004391:	e8 ea f5 ff ff       	call   c0003980 <load_obj_xdir>
c0004396:	85 c0                	test   eax,eax
c0004398:	0f 85 c0 01 00 00    	jne    c000455e <dir_register+0x276>
c000439e:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00043a2:	31 c9                	xor    ecx,ecx
c00043a4:	c1 e2 09             	shl    edx,0x9
c00043a7:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00043aa:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00043ad:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00043b0:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00043b3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b6:	83 c0 38             	add    eax,0x38
c00043b9:	e8 1c d9 ff ff       	call   c0001cda <st_qword>
c00043be:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043c1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043c4:	83 c0 28             	add    eax,0x28
c00043c7:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00043ca:	e8 0b d9 ff ff       	call   c0001cda <st_qword>
c00043cf:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00043d2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00043d5:	83 c8 01             	or     eax,0x1
c00043d8:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043db:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043df:	e8 db f7 ff ff       	call   c0003bbf <store_xdir>
c00043e4:	85 c0                	test   eax,eax
c00043e6:	0f 85 72 01 00 00    	jne    c000455e <dir_register+0x276>
c00043ec:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043ef:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043f2:	e8 c1 fb ff ff       	call   c0003fb8 <create_xdir>
c00043f7:	e9 64 01 00 00       	jmp    c0004560 <dir_register+0x278>
c00043fc:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043ff:	b9 0c 00 00 00       	mov    ecx,0xc
c0004404:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004408:	89 c2                	mov    edx,eax
c000440a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000440e:	e8 cd d8 ff ff       	call   c0001ce0 <mem_cpy>
c0004413:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004418:	74 58                	je     c0004472 <dir_register+0x18a>
c000441a:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c000441e:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004426:	83 ec 0c             	sub    esp,0xc
c0004429:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000442c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004430:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004434:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004438:	e8 24 dc ff ff       	call   c0002061 <gen_numname>
c000443d:	89 d8                	mov    eax,ebx
c000443f:	e8 de fc ff ff       	call   c0004122 <dir_find>
c0004444:	83 c4 10             	add    esp,0x10
c0004447:	89 c6                	mov    esi,eax
c0004449:	85 c0                	test   eax,eax
c000444b:	75 15                	jne    c0004462 <dir_register+0x17a>
c000444d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004451:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004456:	75 ce                	jne    c0004426 <dir_register+0x13e>
c0004458:	be 07 00 00 00       	mov    esi,0x7
c000445d:	e9 fe 00 00 00       	jmp    c0004560 <dir_register+0x278>
c0004462:	83 f8 04             	cmp    eax,0x4
c0004465:	0f 85 f5 00 00 00    	jne    c0004560 <dir_register+0x278>
c000446b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000446f:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004472:	b9 01 00 00 00       	mov    ecx,0x1
c0004477:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000447c:	74 0f                	je     c000448d <dir_register+0x1a5>
c000447e:	b9 0d 00 00 00       	mov    ecx,0xd
c0004483:	8d 47 0c             	lea    eax,[edi+0xc]
c0004486:	31 d2                	xor    edx,edx
c0004488:	f7 f1                	div    ecx
c000448a:	8d 48 01             	lea    ecx,[eax+0x1]
c000448d:	89 ca                	mov    edx,ecx
c000448f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004493:	89 d8                	mov    eax,ebx
c0004495:	e8 ad f6 ff ff       	call   c0003b47 <dir_alloc>
c000449a:	89 c6                	mov    esi,eax
c000449c:	85 c0                	test   eax,eax
c000449e:	0f 85 bc 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044a4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00044a8:	49                   	dec    ecx
c00044a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00044ad:	74 6a                	je     c0004519 <dir_register+0x231>
c00044af:	89 c8                	mov    eax,ecx
c00044b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044b4:	c1 e0 05             	shl    eax,0x5
c00044b7:	29 c2                	sub    edx,eax
c00044b9:	89 d8                	mov    eax,ebx
c00044bb:	e8 fd ec ff ff       	call   c00031bd <dir_sdi>
c00044c0:	89 c6                	mov    esi,eax
c00044c2:	85 c0                	test   eax,eax
c00044c4:	0f 85 96 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00044ce:	e8 4a dc ff ff       	call   c000211d <sum_sfn>
c00044d3:	0f b6 f8             	movzx  edi,al
c00044d6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044d9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044dc:	89 e8                	mov    eax,ebp
c00044de:	e8 5c df ff ff       	call   c000243f <move_window>
c00044e3:	89 c6                	mov    esi,eax
c00044e5:	85 c0                	test   eax,eax
c00044e7:	75 77                	jne    c0004560 <dir_register+0x278>
c00044e9:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044ee:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044f1:	83 ec 0c             	sub    esp,0xc
c00044f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044f7:	57                   	push   edi
c00044f8:	e8 e0 da ff ff       	call   c0001fdd <put_lfn>
c00044fd:	31 d2                	xor    edx,edx
c00044ff:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004503:	89 d8                	mov    eax,ebx
c0004505:	e8 0b f2 ff ff       	call   c0003715 <dir_next>
c000450a:	83 c4 10             	add    esp,0x10
c000450d:	89 c6                	mov    esi,eax
c000450f:	85 c0                	test   eax,eax
c0004511:	75 4d                	jne    c0004560 <dir_register+0x278>
c0004513:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004517:	75 bd                	jne    c00044d6 <dir_register+0x1ee>
c0004519:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000451c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000451f:	89 e8                	mov    eax,ebp
c0004521:	e8 19 df ff ff       	call   c000243f <move_window>
c0004526:	89 c6                	mov    esi,eax
c0004528:	85 c0                	test   eax,eax
c000452a:	75 34                	jne    c0004560 <dir_register+0x278>
c000452c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000452f:	b9 20 00 00 00       	mov    ecx,0x20
c0004534:	31 d2                	xor    edx,edx
c0004536:	e8 ba d7 ff ff       	call   c0001cf5 <mem_set>
c000453b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000453e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004542:	b9 0b 00 00 00       	mov    ecx,0xb
c0004547:	e8 94 d7 ff ff       	call   c0001ce0 <mem_cpy>
c000454c:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000454f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004552:	83 e0 18             	and    eax,0x18
c0004555:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004558:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000455c:	eb 02                	jmp    c0004560 <dir_register+0x278>
c000455e:	89 c6                	mov    esi,eax
c0004560:	83 c4 6c             	add    esp,0x6c
c0004563:	89 f0                	mov    eax,esi
c0004565:	5b                   	pop    ebx
c0004566:	5e                   	pop    esi
c0004567:	5f                   	pop    edi
c0004568:	5d                   	pop    ebp
c0004569:	c3                   	ret    

c000456a <sync_fs>:
c000456a:	56                   	push   esi
c000456b:	53                   	push   ebx
c000456c:	53                   	push   ebx
c000456d:	89 c3                	mov    ebx,eax
c000456f:	e8 37 de ff ff       	call   c00023ab <sync_window>
c0004574:	85 c0                	test   eax,eax
c0004576:	0f 85 b1 00 00 00    	jne    c000462d <sync_fs+0xc3>
c000457c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000457f:	0f 85 8e 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c0004585:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004589:	0f 85 84 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c000458f:	b9 00 02 00 00       	mov    ecx,0x200
c0004594:	8d 73 54             	lea    esi,[ebx+0x54]
c0004597:	31 d2                	xor    edx,edx
c0004599:	89 f0                	mov    eax,esi
c000459b:	e8 55 d7 ff ff       	call   c0001cf5 <mem_set>
c00045a0:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00045a6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00045ab:	e8 23 d7 ff ff       	call   c0001cd3 <st_word>
c00045b0:	ba 52 52 61 41       	mov    edx,0x41615252
c00045b5:	89 f0                	mov    eax,esi
c00045b7:	e8 1b d7 ff ff       	call   c0001cd7 <st_dword>
c00045bc:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00045c2:	ba 72 72 41 61       	mov    edx,0x61417272
c00045c7:	e8 0b d7 ff ff       	call   c0001cd7 <st_dword>
c00045cc:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045cf:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00045d5:	e8 fd d6 ff ff       	call   c0001cd7 <st_dword>
c00045da:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045dd:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045e3:	e8 ef d6 ff ff       	call   c0001cd7 <st_dword>
c00045e8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045eb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045ee:	83 c0 01             	add    eax,0x1
c00045f1:	83 d2 00             	adc    edx,0x0
c00045f4:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045f7:	83 ec 0c             	sub    esp,0xc
c00045fa:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045fd:	6a 01                	push   0x1
c00045ff:	52                   	push   edx
c0004600:	50                   	push   eax
c0004601:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004605:	56                   	push   esi
c0004606:	50                   	push   eax
c0004607:	e8 20 d6 ff ff       	call   c0001c2c <disk_write>
c000460c:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0004610:	83 c4 20             	add    esp,0x20
c0004613:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004617:	51                   	push   ecx
c0004618:	6a 00                	push   0x0
c000461a:	6a 00                	push   0x0
c000461c:	50                   	push   eax
c000461d:	e8 20 d6 ff ff       	call   c0001c42 <disk_ioctl>
c0004622:	83 c4 10             	add    esp,0x10
c0004625:	85 c0                	test   eax,eax
c0004627:	0f 95 c0             	setne  al
c000462a:	0f b6 c0             	movzx  eax,al
c000462d:	5a                   	pop    edx
c000462e:	5b                   	pop    ebx
c000462f:	5e                   	pop    esi
c0004630:	c3                   	ret    

c0004631 <create_partition>:
c0004631:	55                   	push   ebp
c0004632:	0f b6 c0             	movzx  eax,al
c0004635:	57                   	push   edi
c0004636:	56                   	push   esi
c0004637:	53                   	push   ebx
c0004638:	83 ec 60             	sub    esp,0x60
c000463b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000463f:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004643:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004647:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000464b:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000464f:	50                   	push   eax
c0004650:	6a 01                	push   0x1
c0004652:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004656:	e8 e7 d5 ff ff       	call   c0001c42 <disk_ioctl>
c000465b:	83 c4 10             	add    esp,0x10
c000465e:	85 c0                	test   eax,eax
c0004660:	74 0a                	je     c000466c <create_partition+0x3b>
c0004662:	b8 01 00 00 00       	mov    eax,0x1
c0004667:	e9 67 05 00 00       	jmp    c0004bd3 <create_partition+0x5a2>
c000466c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004670:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004674:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004678:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000467c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004681:	0f 86 ed 03 00 00    	jbe    c0004a74 <create_partition+0x443>
c0004687:	83 c0 df             	add    eax,0xffffffdf
c000468a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004692:	83 d2 ff             	adc    edx,0xffffffff
c0004695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000469d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00046a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00046a5:	83 c0 bd             	add    eax,0xffffffbd
c00046a8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00046af:	83 d2 ff             	adc    edx,0xffffffff
c00046b2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00046b6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00046ba:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046c2:	be 22 00 00 00       	mov    esi,0x22
c00046c7:	31 ff                	xor    edi,edi
c00046c9:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00046d1:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00046d9:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046e1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046e5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046eb:	75 0e                	jne    c00046fb <create_partition+0xca>
c00046ed:	b9 00 02 00 00       	mov    ecx,0x200
c00046f2:	31 d2                	xor    edx,edx
c00046f4:	89 d8                	mov    eax,ebx
c00046f6:	e8 fa d5 ff ff       	call   c0001cf5 <mem_set>
c00046fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046ff:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0004703:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004707:	0b 04 24             	or     eax,DWORD PTR [esp]
c000470a:	0f 84 23 01 00 00    	je     c0004833 <create_partition+0x202>
c0004710:	89 f0                	mov    eax,esi
c0004712:	89 fa                	mov    edx,edi
c0004714:	05 ff 07 00 00       	add    eax,0x7ff
c0004719:	83 d2 00             	adc    edx,0x0
c000471c:	89 c1                	mov    ecx,eax
c000471e:	89 d7                	mov    edi,edx
c0004720:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004726:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000472a:	89 ce                	mov    esi,ecx
c000472c:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004730:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004734:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004738:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000473b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000473f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004742:	b8 64 00 00 00       	mov    eax,0x64
c0004747:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000474a:	b8 00 00 00 00       	mov    eax,0x0
c000474f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004753:	72 41                	jb     c0004796 <create_partition+0x165>
c0004755:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004759:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000475d:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004761:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004766:	01 c1                	add    ecx,eax
c0004768:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000476c:	f7 24 24             	mul    DWORD PTR [esp]
c000476f:	6a 00                	push   0x0
c0004771:	01 ca                	add    edx,ecx
c0004773:	6a 64                	push   0x64
c0004775:	52                   	push   edx
c0004776:	50                   	push   eax
c0004777:	e8 30 22 02 00       	call   c00269ac <__udivdi3>
c000477c:	83 c4 10             	add    esp,0x10
c000477f:	05 ff 07 00 00       	add    eax,0x7ff
c0004784:	83 d2 00             	adc    edx,0x0
c0004787:	89 c1                	mov    ecx,eax
c0004789:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000478d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004793:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004796:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004799:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000479d:	01 f0                	add    eax,esi
c000479f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047a3:	11 fa                	adc    edx,edi
c00047a5:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00047a9:	19 d1                	sbb    ecx,edx
c00047ab:	73 2e                	jae    c00047db <create_partition+0x1aa>
c00047ad:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00047b1:	89 f8                	mov    eax,edi
c00047b3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00047ba:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00047be:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00047c6:	73 6b                	jae    c0004833 <create_partition+0x202>
c00047c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00047cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00047d0:	29 f0                	sub    eax,esi
c00047d2:	19 fa                	sbb    edx,edi
c00047d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00047d7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047df:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047e2:	74 4f                	je     c0004833 <create_partition+0x202>
c00047e4:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047e7:	b9 10 00 00 00       	mov    ecx,0x10
c00047ec:	ba 50 94 02 c0       	mov    edx,0xc0029450
c00047f1:	e8 ea d4 ff ff       	call   c0001ce0 <mem_cpy>
c00047f6:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047fa:	b9 10 00 00 00       	mov    ecx,0x10
c00047ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004803:	e8 2c db ff ff       	call   c0002334 <make_rand>
c0004808:	89 f2                	mov    edx,esi
c000480a:	89 f9                	mov    ecx,edi
c000480c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004810:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004814:	e8 c1 d4 ff ff       	call   c0001cda <st_qword>
c0004819:	03 34 24             	add    esi,DWORD PTR [esp]
c000481c:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004820:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004824:	89 f2                	mov    edx,esi
c0004826:	89 f9                	mov    ecx,edi
c0004828:	83 c2 ff             	add    edx,0xffffffff
c000482b:	83 d1 ff             	adc    ecx,0xffffffff
c000482e:	e8 a7 d4 ff ff       	call   c0001cda <st_qword>
c0004833:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004837:	83 e8 80             	sub    eax,0xffffff80
c000483a:	89 c5                	mov    ebp,eax
c000483c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004840:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004846:	75 6b                	jne    c00048b3 <create_partition+0x282>
c0004848:	45                   	inc    ebp
c0004849:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000484d:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004852:	e8 39 da ff ff       	call   c0002290 <crc32>
c0004857:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000485d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004861:	75 e5                	jne    c0004848 <create_partition+0x217>
c0004863:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004867:	31 d2                	xor    edx,edx
c0004869:	83 ec 0c             	sub    esp,0xc
c000486c:	c1 ed 09             	shr    ebp,0x9
c000486f:	6a 01                	push   0x1
c0004871:	8d 45 02             	lea    eax,[ebp+0x2]
c0004874:	52                   	push   edx
c0004875:	50                   	push   eax
c0004876:	53                   	push   ebx
c0004877:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000487b:	e8 ac d3 ff ff       	call   c0001c2c <disk_write>
c0004880:	83 c4 20             	add    esp,0x20
c0004883:	85 c0                	test   eax,eax
c0004885:	0f 85 d7 fd ff ff    	jne    c0004662 <create_partition+0x31>
c000488b:	83 ec 0c             	sub    esp,0xc
c000488e:	31 d2                	xor    edx,edx
c0004890:	6a 01                	push   0x1
c0004892:	89 e8                	mov    eax,ebp
c0004894:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004898:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000489c:	52                   	push   edx
c000489d:	50                   	push   eax
c000489e:	53                   	push   ebx
c000489f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048a3:	e8 84 d3 ff ff       	call   c0001c2c <disk_write>
c00048a8:	83 c4 20             	add    esp,0x20
c00048ab:	85 c0                	test   eax,eax
c00048ad:	0f 85 af fd ff ff    	jne    c0004662 <create_partition+0x31>
c00048b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00048b7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00048bb:	3d 00 40 00 00       	cmp    eax,0x4000
c00048c0:	74 0d                	je     c00048cf <create_partition+0x29e>
c00048c2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00048c6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048ca:	e9 12 fe ff ff       	jmp    c00046e1 <create_partition+0xb0>
c00048cf:	31 d2                	xor    edx,edx
c00048d1:	b9 00 02 00 00       	mov    ecx,0x200
c00048d6:	89 d8                	mov    eax,ebx
c00048d8:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048db:	e8 15 d4 ff ff       	call   c0001cf5 <mem_set>
c00048e0:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048e3:	b9 10 00 00 00       	mov    ecx,0x10
c00048e8:	ba 40 93 02 c0       	mov    edx,0xc0029340
c00048ed:	89 d8                	mov    eax,ebx
c00048ef:	e8 ec d3 ff ff       	call   c0001ce0 <mem_cpy>
c00048f4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048f8:	8d 43 58             	lea    eax,[ebx+0x58]
c00048fb:	f7 d2                	not    edx
c00048fd:	e8 d5 d3 ff ff       	call   c0001cd7 <st_dword>
c0004902:	8d 43 18             	lea    eax,[ebx+0x18]
c0004905:	31 c9                	xor    ecx,ecx
c0004907:	89 04 24             	mov    DWORD PTR [esp],eax
c000490a:	ba 01 00 00 00       	mov    edx,0x1
c000490f:	e8 c6 d3 ff ff       	call   c0001cda <st_qword>
c0004914:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004918:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000491c:	83 c2 ff             	add    edx,0xffffffff
c000491f:	89 e8                	mov    eax,ebp
c0004921:	83 d1 ff             	adc    ecx,0xffffffff
c0004924:	e8 b1 d3 ff ff       	call   c0001cda <st_qword>
c0004929:	31 c9                	xor    ecx,ecx
c000492b:	8d 43 28             	lea    eax,[ebx+0x28]
c000492e:	ba 22 00 00 00       	mov    edx,0x22
c0004933:	e8 a2 d3 ff ff       	call   c0001cda <st_qword>
c0004938:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000493c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004940:	83 c2 de             	add    edx,0xffffffde
c0004943:	8d 43 30             	lea    eax,[ebx+0x30]
c0004946:	83 d1 ff             	adc    ecx,0xffffffff
c0004949:	31 f6                	xor    esi,esi
c000494b:	e8 8a d3 ff ff       	call   c0001cda <st_qword>
c0004950:	8d 43 54             	lea    eax,[ebx+0x54]
c0004953:	ba 80 00 00 00       	mov    edx,0x80
c0004958:	e8 7a d3 ff ff       	call   c0001cd7 <st_dword>
c000495d:	8d 43 50             	lea    eax,[ebx+0x50]
c0004960:	ba 80 00 00 00       	mov    edx,0x80
c0004965:	e8 6d d3 ff ff       	call   c0001cd7 <st_dword>
c000496a:	ba 02 00 00 00       	mov    edx,0x2
c000496f:	89 f8                	mov    eax,edi
c0004971:	e8 61 d3 ff ff       	call   c0001cd7 <st_dword>
c0004976:	8d 53 38             	lea    edx,[ebx+0x38]
c0004979:	b9 10 00 00 00       	mov    ecx,0x10
c000497e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004982:	e8 ad d9 ff ff       	call   c0002334 <make_rand>
c0004987:	83 c8 ff             	or     eax,0xffffffff
c000498a:	46                   	inc    esi
c000498b:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004990:	e8 fb d8 ff ff       	call   c0002290 <crc32>
c0004995:	83 fe 5c             	cmp    esi,0x5c
c0004998:	75 f0                	jne    c000498a <create_partition+0x359>
c000499a:	f7 d0                	not    eax
c000499c:	8d 73 10             	lea    esi,[ebx+0x10]
c000499f:	89 c2                	mov    edx,eax
c00049a1:	89 f0                	mov    eax,esi
c00049a3:	e8 2f d3 ff ff       	call   c0001cd7 <st_dword>
c00049a8:	83 ec 0c             	sub    esp,0xc
c00049ab:	6a 01                	push   0x1
c00049ad:	6a 00                	push   0x0
c00049af:	6a 01                	push   0x1
c00049b1:	53                   	push   ebx
c00049b2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00049b6:	e8 71 d2 ff ff       	call   c0001c2c <disk_write>
c00049bb:	83 c4 20             	add    esp,0x20
c00049be:	85 c0                	test   eax,eax
c00049c0:	0f 85 9c fc ff ff    	jne    c0004662 <create_partition+0x31>
c00049c6:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00049ca:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00049ce:	83 c2 ff             	add    edx,0xffffffff
c00049d1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049d4:	83 d1 ff             	adc    ecx,0xffffffff
c00049d7:	e8 fe d2 ff ff       	call   c0001cda <st_qword>
c00049dc:	ba 01 00 00 00       	mov    edx,0x1
c00049e1:	31 c9                	xor    ecx,ecx
c00049e3:	89 e8                	mov    eax,ebp
c00049e5:	e8 f0 d2 ff ff       	call   c0001cda <st_qword>
c00049ea:	89 f8                	mov    eax,edi
c00049ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049f0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049f4:	31 ff                	xor    edi,edi
c00049f6:	e8 df d2 ff ff       	call   c0001cda <st_qword>
c00049fb:	89 f0                	mov    eax,esi
c00049fd:	31 d2                	xor    edx,edx
c00049ff:	e8 d3 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a04:	83 c8 ff             	or     eax,0xffffffff
c0004a07:	47                   	inc    edi
c0004a08:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004a0d:	e8 7e d8 ff ff       	call   c0002290 <crc32>
c0004a12:	83 ff 5c             	cmp    edi,0x5c
c0004a15:	75 f0                	jne    c0004a07 <create_partition+0x3d6>
c0004a17:	f7 d0                	not    eax
c0004a19:	89 c2                	mov    edx,eax
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	e8 b5 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a22:	83 ec 0c             	sub    esp,0xc
c0004a25:	6a 01                	push   0x1
c0004a27:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004a2b:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a2f:	83 c0 ff             	add    eax,0xffffffff
c0004a32:	83 d2 ff             	adc    edx,0xffffffff
c0004a35:	52                   	push   edx
c0004a36:	50                   	push   eax
c0004a37:	53                   	push   ebx
c0004a38:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a3c:	e8 eb d1 ff ff       	call   c0001c2c <disk_write>
c0004a41:	83 c4 20             	add    esp,0x20
c0004a44:	85 c0                	test   eax,eax
c0004a46:	0f 85 16 fc ff ff    	jne    c0004662 <create_partition+0x31>
c0004a4c:	31 d2                	xor    edx,edx
c0004a4e:	89 d8                	mov    eax,ebx
c0004a50:	b9 00 02 00 00       	mov    ecx,0x200
c0004a55:	e8 9b d2 ff ff       	call   c0001cf5 <mem_set>
c0004a5a:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a60:	b9 10 00 00 00       	mov    ecx,0x10
c0004a65:	ba 50 93 02 c0       	mov    edx,0xc0029350
c0004a6a:	e8 71 d2 ff ff       	call   c0001ce0 <mem_cpy>
c0004a6f:	e9 21 01 00 00       	jmp    c0004b95 <create_partition+0x564>
c0004a74:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a78:	b9 05 00 00 00       	mov    ecx,0x5
c0004a7d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a80:	bf 08 00 00 00       	mov    edi,0x8
c0004a85:	89 f8                	mov    eax,edi
c0004a87:	31 d2                	xor    edx,edx
c0004a89:	0f b6 f0             	movzx  esi,al
c0004a8c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a8f:	f7 f6                	div    esi
c0004a91:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a96:	76 0a                	jbe    c0004aa2 <create_partition+0x471>
c0004a98:	d1 e7                	shl    edi,1
c0004a9a:	49                   	dec    ecx
c0004a9b:	75 e8                	jne    c0004a85 <create_partition+0x454>
c0004a9d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004aa2:	b9 00 02 00 00       	mov    ecx,0x200
c0004aa7:	31 d2                	xor    edx,edx
c0004aa9:	89 d8                	mov    eax,ebx
c0004aab:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004ab1:	e8 3f d2 ff ff       	call   c0001cf5 <mem_set>
c0004ab6:	b9 64 00 00 00       	mov    ecx,0x64
c0004abb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004abe:	31 d2                	xor    edx,edx
c0004ac0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004ac8:	f7 f1                	div    ecx
c0004aca:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004acf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ad3:	89 f8                	mov    eax,edi
c0004ad5:	0f b6 c0             	movzx  eax,al
c0004ad8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004adc:	e9 80 00 00 00       	jmp    c0004b61 <create_partition+0x530>
c0004ae1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004ae4:	29 cf                	sub    edi,ecx
c0004ae6:	89 ca                	mov    edx,ecx
c0004ae8:	89 f0                	mov    eax,esi
c0004aea:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004aef:	e8 e3 d1 ff ff       	call   c0001cd7 <st_dword>
c0004af4:	8d 46 04             	lea    eax,[esi+0x4]
c0004af7:	89 fa                	mov    edx,edi
c0004af9:	83 c6 10             	add    esi,0x10
c0004afc:	e8 d6 d1 ff ff       	call   c0001cd7 <st_dword>
c0004b01:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004b05:	31 d2                	xor    edx,edx
c0004b07:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004b0a:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004b0e:	89 c8                	mov    eax,ecx
c0004b10:	01 f9                	add    ecx,edi
c0004b12:	f7 f5                	div    ebp
c0004b14:	89 d5                	mov    ebp,edx
c0004b16:	31 d2                	xor    edx,edx
c0004b18:	45                   	inc    ebp
c0004b19:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b1d:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004b20:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004b23:	89 c2                	mov    edx,eax
c0004b25:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004b28:	c1 ea 02             	shr    edx,0x2
c0004b2b:	83 e2 c0             	and    edx,0xffffffc0
c0004b2e:	09 ea                	or     edx,ebp
c0004b30:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b35:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004b38:	31 d2                	xor    edx,edx
c0004b3a:	f7 f5                	div    ebp
c0004b3c:	89 d7                	mov    edi,edx
c0004b3e:	31 d2                	xor    edx,edx
c0004b40:	47                   	inc    edi
c0004b41:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b45:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b48:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b4b:	89 c5                	mov    ebp,eax
c0004b4d:	c1 ed 02             	shr    ebp,0x2
c0004b50:	83 e5 c0             	and    ebp,0xffffffc0
c0004b53:	09 ef                	or     edi,ebp
c0004b55:	89 fa                	mov    edx,edi
c0004b57:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b5a:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b5f:	74 34                	je     c0004b95 <create_partition+0x564>
c0004b61:	85 c9                	test   ecx,ecx
c0004b63:	74 30                	je     c0004b95 <create_partition+0x564>
c0004b65:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b68:	76 2b                	jbe    c0004b95 <create_partition+0x564>
c0004b6a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b6e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b72:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b75:	83 ff 64             	cmp    edi,0x64
c0004b78:	76 4b                	jbe    c0004bc5 <create_partition+0x594>
c0004b7a:	89 f8                	mov    eax,edi
c0004b7c:	01 c8                	add    eax,ecx
c0004b7e:	0f 82 5d ff ff ff    	jb     c0004ae1 <create_partition+0x4b0>
c0004b84:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b87:	0f 87 54 ff ff ff    	ja     c0004ae1 <create_partition+0x4b0>
c0004b8d:	85 ff                	test   edi,edi
c0004b8f:	0f 85 51 ff ff ff    	jne    c0004ae6 <create_partition+0x4b5>
c0004b95:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b9b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004ba0:	e8 2e d1 ff ff       	call   c0001cd3 <st_word>
c0004ba5:	83 ec 0c             	sub    esp,0xc
c0004ba8:	6a 01                	push   0x1
c0004baa:	6a 00                	push   0x0
c0004bac:	6a 00                	push   0x0
c0004bae:	53                   	push   ebx
c0004baf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004bb3:	e8 74 d0 ff ff       	call   c0001c2c <disk_write>
c0004bb8:	83 c4 20             	add    esp,0x20
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	0f 95 c0             	setne  al
c0004bc0:	0f b6 c0             	movzx  eax,al
c0004bc3:	eb 0e                	jmp    c0004bd3 <create_partition+0x5a2>
c0004bc5:	74 07                	je     c0004bce <create_partition+0x59d>
c0004bc7:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004bcc:	eb ac                	jmp    c0004b7a <create_partition+0x549>
c0004bce:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004bd1:	eb a7                	jmp    c0004b7a <create_partition+0x549>
c0004bd3:	83 c4 5c             	add    esp,0x5c
c0004bd6:	5b                   	pop    ebx
c0004bd7:	5e                   	pop    esi
c0004bd8:	5f                   	pop    edi
c0004bd9:	5d                   	pop    ebp
c0004bda:	c3                   	ret    

c0004bdb <get_fileinfo>:
c0004bdb:	55                   	push   ebp
c0004bdc:	57                   	push   edi
c0004bdd:	56                   	push   esi
c0004bde:	53                   	push   ebx
c0004bdf:	83 ec 1c             	sub    esp,0x1c
c0004be2:	8b 30                	mov    esi,DWORD PTR [eax]
c0004be4:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004be8:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bec:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bef:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bf2:	0f 84 dc 01 00 00    	je     c0004dd4 <get_fileinfo+0x1f9>
c0004bf8:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bfb:	75 0f                	jne    c0004c0c <get_fileinfo+0x31>
c0004bfd:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004c00:	83 c4 1c             	add    esp,0x1c
c0004c03:	5b                   	pop    ebx
c0004c04:	5e                   	pop    esi
c0004c05:	5f                   	pop    edi
c0004c06:	5d                   	pop    ebp
c0004c07:	e9 58 d5 ff ff       	jmp    c0002164 <get_xfileinfo>
c0004c0c:	89 d3                	mov    ebx,edx
c0004c0e:	89 c6                	mov    esi,eax
c0004c10:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004c14:	74 6a                	je     c0004c80 <get_fileinfo+0xa5>
c0004c16:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004c1e:	31 ed                	xor    ebp,ebp
c0004c20:	31 ff                	xor    edi,edi
c0004c22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004c26:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004c2a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004c2d:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004c31:	66 85 d2             	test   dx,dx
c0004c34:	74 3e                	je     c0004c74 <get_fileinfo+0x99>
c0004c36:	66 85 ed             	test   bp,bp
c0004c39:	75 0c                	jne    c0004c47 <get_fileinfo+0x6c>
c0004c3b:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c41:	66 3d ff 07          	cmp    ax,0x7ff
c0004c45:	76 22                	jbe    c0004c69 <get_fileinfo+0x8e>
c0004c47:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c4c:	89 e8                	mov    eax,ebp
c0004c4e:	29 f9                	sub    ecx,edi
c0004c50:	c1 e0 10             	shl    eax,0x10
c0004c53:	09 d0                	or     eax,edx
c0004c55:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c59:	e8 a3 d1 ff ff       	call   c0001e01 <put_utf>
c0004c5e:	84 c0                	test   al,al
c0004c60:	74 10                	je     c0004c72 <get_fileinfo+0x97>
c0004c62:	0f b6 c0             	movzx  eax,al
c0004c65:	31 d2                	xor    edx,edx
c0004c67:	01 c7                	add    edi,eax
c0004c69:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c6e:	89 d5                	mov    ebp,edx
c0004c70:	eb b0                	jmp    c0004c22 <get_fileinfo+0x47>
c0004c72:	31 ff                	xor    edi,edi
c0004c74:	66 85 ed             	test   bp,bp
c0004c77:	74 02                	je     c0004c7b <get_fileinfo+0xa0>
c0004c79:	31 ff                	xor    edi,edi
c0004c7b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c80:	31 ff                	xor    edi,edi
c0004c82:	31 c9                	xor    ecx,ecx
c0004c84:	83 f9 0a             	cmp    ecx,0xa
c0004c87:	0f 87 ad 00 00 00    	ja     c0004d3a <get_fileinfo+0x15f>
c0004c8d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c90:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c93:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c97:	66 83 fa 20          	cmp    dx,0x20
c0004c9b:	0f 84 92 00 00 00    	je     c0004d33 <get_fileinfo+0x158>
c0004ca1:	66 83 fa 05          	cmp    dx,0x5
c0004ca5:	75 05                	jne    c0004cac <get_fileinfo+0xd1>
c0004ca7:	ba e5 00 00 00       	mov    edx,0xe5
c0004cac:	83 ff 0b             	cmp    edi,0xb
c0004caf:	77 0b                	ja     c0004cbc <get_fileinfo+0xe1>
c0004cb1:	83 fd 09             	cmp    ebp,0x9
c0004cb4:	75 06                	jne    c0004cbc <get_fileinfo+0xe1>
c0004cb6:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004cbb:	47                   	inc    edi
c0004cbc:	0f b7 c2             	movzx  eax,dx
c0004cbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cc3:	e8 6d d0 ff ff       	call   c0001d35 <dbc_1st>
c0004cc8:	85 c0                	test   eax,eax
c0004cca:	74 2f                	je     c0004cfb <get_fileinfo+0x120>
c0004ccc:	83 fd 08             	cmp    ebp,0x8
c0004ccf:	74 2a                	je     c0004cfb <get_fileinfo+0x120>
c0004cd1:	83 fd 0b             	cmp    ebp,0xb
c0004cd4:	74 25                	je     c0004cfb <get_fileinfo+0x120>
c0004cd6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cd9:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004cdd:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ce1:	e8 52 d0 ff ff       	call   c0001d38 <dbc_2nd>
c0004ce6:	85 c0                	test   eax,eax
c0004ce8:	74 11                	je     c0004cfb <get_fileinfo+0x120>
c0004cea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cee:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cf3:	c1 e2 08             	shl    edx,0x8
c0004cf6:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cf9:	09 c2                	or     edx,eax
c0004cfb:	0f b7 d2             	movzx  edx,dx
c0004cfe:	50                   	push   eax
c0004cff:	50                   	push   eax
c0004d00:	68 b5 01 00 00       	push   0x1b5
c0004d05:	52                   	push   edx
c0004d06:	e8 46 38 00 00       	call   c0008551 <ff_oem2uni>
c0004d0b:	83 c4 10             	add    esp,0x10
c0004d0e:	66 85 c0             	test   ax,ax
c0004d11:	75 04                	jne    c0004d17 <get_fileinfo+0x13c>
c0004d13:	31 ff                	xor    edi,edi
c0004d15:	eb 23                	jmp    c0004d3a <get_fileinfo+0x15f>
c0004d17:	b9 0c 00 00 00       	mov    ecx,0xc
c0004d1c:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004d20:	29 f9                	sub    ecx,edi
c0004d22:	0f b7 c0             	movzx  eax,ax
c0004d25:	e8 d7 d0 ff ff       	call   c0001e01 <put_utf>
c0004d2a:	84 c0                	test   al,al
c0004d2c:	74 e5                	je     c0004d13 <get_fileinfo+0x138>
c0004d2e:	0f b6 c0             	movzx  eax,al
c0004d31:	01 c7                	add    edi,eax
c0004d33:	89 e9                	mov    ecx,ebp
c0004d35:	e9 4a ff ff ff       	jmp    c0004c84 <get_fileinfo+0xa9>
c0004d3a:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d3f:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d43:	75 54                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d45:	85 ff                	test   edi,edi
c0004d47:	75 0b                	jne    c0004d54 <get_fileinfo+0x179>
c0004d49:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d4d:	ba 01 00 00 00       	mov    edx,0x1
c0004d52:	eb 33                	jmp    c0004d87 <get_fileinfo+0x1ac>
c0004d54:	b1 08                	mov    cl,0x8
c0004d56:	31 d2                	xor    edx,edx
c0004d58:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d5e:	84 c0                	test   al,al
c0004d60:	74 25                	je     c0004d87 <get_fileinfo+0x1ac>
c0004d62:	66 83 f8 2e          	cmp    ax,0x2e
c0004d66:	74 16                	je     c0004d7e <get_fileinfo+0x1a3>
c0004d68:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d6b:	66 83 ff 19          	cmp    di,0x19
c0004d6f:	77 0f                	ja     c0004d80 <get_fileinfo+0x1a5>
c0004d71:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d74:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d77:	74 07                	je     c0004d80 <get_fileinfo+0x1a5>
c0004d79:	83 c0 20             	add    eax,0x20
c0004d7c:	eb 02                	jmp    c0004d80 <get_fileinfo+0x1a5>
c0004d7e:	b1 10                	mov    cl,0x10
c0004d80:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d84:	42                   	inc    edx
c0004d85:	eb d1                	jmp    c0004d58 <get_fileinfo+0x17d>
c0004d87:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d8c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8f:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d93:	75 04                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d95:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d99:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d9c:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d9f:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004da2:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004da5:	83 c0 1c             	add    eax,0x1c
c0004da8:	e8 c1 ce ff ff       	call   c0001c6e <ld_dword>
c0004dad:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004db4:	89 03                	mov    DWORD PTR [ebx],eax
c0004db6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004db9:	83 c0 16             	add    eax,0x16
c0004dbc:	e8 a0 ce ff ff       	call   c0001c61 <ld_word>
c0004dc1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004dc5:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dc8:	83 c0 18             	add    eax,0x18
c0004dcb:	e8 91 ce ff ff       	call   c0001c61 <ld_word>
c0004dd0:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004dd4:	83 c4 1c             	add    esp,0x1c
c0004dd7:	5b                   	pop    ebx
c0004dd8:	5e                   	pop    esi
c0004dd9:	5f                   	pop    edi
c0004dda:	5d                   	pop    ebp
c0004ddb:	c3                   	ret    

c0004ddc <ld_clust.isra.0>:
c0004ddc:	56                   	push   esi
c0004ddd:	89 c6                	mov    esi,eax
c0004ddf:	53                   	push   ebx
c0004de0:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004de3:	89 d3                	mov    ebx,edx
c0004de5:	e8 77 ce ff ff       	call   c0001c61 <ld_word>
c0004dea:	0f b7 c8             	movzx  ecx,ax
c0004ded:	89 f0                	mov    eax,esi
c0004def:	3c 03                	cmp    al,0x3
c0004df1:	75 0d                	jne    c0004e00 <ld_clust.isra.0+0x24>
c0004df3:	8d 43 14             	lea    eax,[ebx+0x14]
c0004df6:	e8 66 ce ff ff       	call   c0001c61 <ld_word>
c0004dfb:	c1 e0 10             	shl    eax,0x10
c0004dfe:	09 c1                	or     ecx,eax
c0004e00:	89 c8                	mov    eax,ecx
c0004e02:	5b                   	pop    ebx
c0004e03:	5e                   	pop    esi
c0004e04:	c3                   	ret    

c0004e05 <st_clust.isra.1>:
c0004e05:	56                   	push   esi
c0004e06:	89 c6                	mov    esi,eax
c0004e08:	53                   	push   ebx
c0004e09:	89 d3                	mov    ebx,edx
c0004e0b:	0f b7 d1             	movzx  edx,cx
c0004e0e:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004e11:	e8 bd ce ff ff       	call   c0001cd3 <st_word>
c0004e16:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004e19:	75 0f                	jne    c0004e2a <st_clust.isra.1+0x25>
c0004e1b:	c1 e9 10             	shr    ecx,0x10
c0004e1e:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e21:	89 ca                	mov    edx,ecx
c0004e23:	5b                   	pop    ebx
c0004e24:	5e                   	pop    esi
c0004e25:	e9 a9 ce ff ff       	jmp    c0001cd3 <st_word>
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <init_alloc_info.isra.2>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c6                	mov    esi,eax
c0004e31:	89 d3                	mov    ebx,edx
c0004e33:	51                   	push   ecx
c0004e34:	8b 00                	mov    eax,DWORD PTR [eax]
c0004e36:	83 c0 34             	add    eax,0x34
c0004e39:	e8 30 ce ff ff       	call   c0001c6e <ld_dword>
c0004e3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e41:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e43:	83 c0 38             	add    eax,0x38
c0004e46:	e8 3b ce ff ff       	call   c0001c86 <ld_qword>
c0004e4b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e4e:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e51:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e53:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e56:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5d:	83 e0 02             	and    eax,0x2
c0004e60:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e63:	5b                   	pop    ebx
c0004e64:	5b                   	pop    ebx
c0004e65:	5e                   	pop    esi
c0004e66:	c3                   	ret    

c0004e67 <follow_path>:
c0004e67:	56                   	push   esi
c0004e68:	53                   	push   ebx
c0004e69:	89 c3                	mov    ebx,eax
c0004e6b:	83 ec 14             	sub    esp,0x14
c0004e6e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e72:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e78:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e7a:	80 fa 5c             	cmp    dl,0x5c
c0004e7d:	75 07                	jne    c0004e86 <follow_path+0x1f>
c0004e7f:	40                   	inc    eax
c0004e80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e84:	eb ee                	jmp    c0004e74 <follow_path+0xd>
c0004e86:	80 fa 2f             	cmp    dl,0x2f
c0004e89:	74 f4                	je     c0004e7f <follow_path+0x18>
c0004e8b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e92:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e99:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e9c:	77 52                	ja     c0004ef0 <follow_path+0x89>
c0004e9e:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004ea2:	31 d2                	xor    edx,edx
c0004ea4:	89 d8                	mov    eax,ebx
c0004ea6:	e8 12 e3 ff ff       	call   c00031bd <dir_sdi>
c0004eab:	eb 7c                	jmp    c0004f29 <follow_path+0xc2>
c0004ead:	89 d8                	mov    eax,ebx
c0004eaf:	e8 6e f2 ff ff       	call   c0004122 <dir_find>
c0004eb4:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004eb7:	85 c0                	test   eax,eax
c0004eb9:	75 46                	jne    c0004f01 <follow_path+0x9a>
c0004ebb:	80 e2 04             	and    dl,0x4
c0004ebe:	75 69                	jne    c0004f29 <follow_path+0xc2>
c0004ec0:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004ec4:	74 5e                	je     c0004f24 <follow_path+0xbd>
c0004ec6:	8a 06                	mov    al,BYTE PTR [esi]
c0004ec8:	3c 04                	cmp    al,0x4
c0004eca:	75 41                	jne    c0004f0d <follow_path+0xa6>
c0004ecc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004ecf:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004ed3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ed6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004ed9:	30 c0                	xor    al,al
c0004edb:	09 d0                	or     eax,edx
c0004edd:	89 da                	mov    edx,ebx
c0004edf:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ee2:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ee5:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004ee8:	8d 46 10             	lea    eax,[esi+0x10]
c0004eeb:	e8 3d ff ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0004ef0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004ef4:	89 d8                	mov    eax,ebx
c0004ef6:	e8 a9 ed ff ff       	call   c0003ca4 <create_name>
c0004efb:	85 c0                	test   eax,eax
c0004efd:	74 ae                	je     c0004ead <follow_path+0x46>
c0004eff:	eb 28                	jmp    c0004f29 <follow_path+0xc2>
c0004f01:	83 f8 04             	cmp    eax,0x4
c0004f04:	75 23                	jne    c0004f29 <follow_path+0xc2>
c0004f06:	80 e2 04             	and    dl,0x4
c0004f09:	74 19                	je     c0004f24 <follow_path+0xbd>
c0004f0b:	eb 1c                	jmp    c0004f29 <follow_path+0xc2>
c0004f0d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004f10:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004f16:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004f1a:	e8 bd fe ff ff       	call   c0004ddc <ld_clust.isra.0>
c0004f1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f22:	eb cc                	jmp    c0004ef0 <follow_path+0x89>
c0004f24:	b8 05 00 00 00       	mov    eax,0x5
c0004f29:	83 c4 14             	add    esp,0x14
c0004f2c:	5b                   	pop    ebx
c0004f2d:	5e                   	pop    esi
c0004f2e:	c3                   	ret    

c0004f2f <f_mount>:
c0004f2f:	53                   	push   ebx
c0004f30:	83 ec 18             	sub    esp,0x18
c0004f33:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004f37:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f3f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f43:	e8 fb d2 ff ff       	call   c0002243 <get_ldnumber>
c0004f48:	89 c2                	mov    edx,eax
c0004f4a:	b8 0b 00 00 00       	mov    eax,0xb
c0004f4f:	85 d2                	test   edx,edx
c0004f51:	78 39                	js     c0004f8c <f_mount+0x5d>
c0004f53:	8b 04 95 a0 e3 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1c60]
c0004f5a:	85 c0                	test   eax,eax
c0004f5c:	74 03                	je     c0004f61 <f_mount+0x32>
c0004f5e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f65:	85 c0                	test   eax,eax
c0004f67:	74 03                	je     c0004f6c <f_mount+0x3d>
c0004f69:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f70:	89 04 95 a0 e3 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1c60],eax
c0004f77:	31 c0                	xor    eax,eax
c0004f79:	84 db                	test   bl,bl
c0004f7b:	74 0f                	je     c0004f8c <f_mount+0x5d>
c0004f7d:	31 c9                	xor    ecx,ecx
c0004f7f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f83:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f87:	e8 65 d7 ff ff       	call   c00026f1 <mount_volume>
c0004f8c:	83 c4 18             	add    esp,0x18
c0004f8f:	5b                   	pop    ebx
c0004f90:	c3                   	ret    

c0004f91 <f_open>:
c0004f91:	55                   	push   ebp
c0004f92:	bd 09 00 00 00       	mov    ebp,0x9
c0004f97:	57                   	push   edi
c0004f98:	56                   	push   esi
c0004f99:	53                   	push   ebx
c0004f9a:	83 ec 7c             	sub    esp,0x7c
c0004f9d:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004fa4:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004fab:	85 db                	test   ebx,ebx
c0004fad:	0f 84 10 04 00 00    	je     c00053c3 <f_open+0x432>
c0004fb3:	89 fe                	mov    esi,edi
c0004fb5:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004fb9:	83 e6 3f             	and    esi,0x3f
c0004fbc:	89 f0                	mov    eax,esi
c0004fbe:	0f b6 c8             	movzx  ecx,al
c0004fc1:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004fc8:	e8 24 d7 ff ff       	call   c00026f1 <mount_volume>
c0004fcd:	89 c5                	mov    ebp,eax
c0004fcf:	85 c0                	test   eax,eax
c0004fd1:	0f 85 e6 03 00 00    	jne    c00053bd <f_open+0x42c>
c0004fd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fdb:	bd 11 00 00 00       	mov    ebp,0x11
c0004fe0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fe4:	83 ec 0c             	sub    esp,0xc
c0004fe7:	68 60 04 00 00       	push   0x460
c0004fec:	e8 a3 34 00 00       	call   c0008494 <ff_memalloc>
c0004ff1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ff5:	83 c4 10             	add    esp,0x10
c0004ff8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004ffd:	0f 84 c0 03 00 00    	je     c00053c3 <f_open+0x432>
c0005003:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005007:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000500b:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0005011:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0005014:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005017:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c000501e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005022:	e8 40 fe ff ff       	call   c0004e67 <follow_path>
c0005027:	89 c5                	mov    ebp,eax
c0005029:	85 c0                	test   eax,eax
c000502b:	75 0c                	jne    c0005039 <f_open+0xa8>
c000502d:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0005032:	79 05                	jns    c0005039 <f_open+0xa8>
c0005034:	bd 06 00 00 00       	mov    ebp,0x6
c0005039:	f7 c7 1c 00 00 00    	test   edi,0x1c
c000503f:	0f 84 84 01 00 00    	je     c00051c9 <f_open+0x238>
c0005045:	85 ed                	test   ebp,ebp
c0005047:	74 20                	je     c0005069 <f_open+0xd8>
c0005049:	83 fd 04             	cmp    ebp,0x4
c000504c:	0f 85 58 03 00 00    	jne    c00053aa <f_open+0x419>
c0005052:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005056:	83 ce 08             	or     esi,0x8
c0005059:	e8 8a f2 ff ff       	call   c00042e8 <dir_register>
c000505e:	89 c5                	mov    ebp,eax
c0005060:	85 c0                	test   eax,eax
c0005062:	74 2f                	je     c0005093 <f_open+0x102>
c0005064:	e9 41 03 00 00       	jmp    c00053aa <f_open+0x419>
c0005069:	bd 07 00 00 00       	mov    ebp,0x7
c000506e:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005073:	0f 85 31 03 00 00    	jne    c00053aa <f_open+0x419>
c0005079:	bd 08 00 00 00       	mov    ebp,0x8
c000507e:	f7 c7 04 00 00 00    	test   edi,0x4
c0005084:	0f 85 20 03 00 00    	jne    c00053aa <f_open+0x419>
c000508a:	83 e7 08             	and    edi,0x8
c000508d:	0f 84 65 01 00 00    	je     c00051f8 <f_open+0x267>
c0005093:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005097:	8a 02                	mov    al,BYTE PTR [edx]
c0005099:	3c 04                	cmp    al,0x4
c000509b:	0f 85 97 00 00 00    	jne    c0005138 <f_open+0x1a7>
c00050a1:	8d 42 10             	lea    eax,[edx+0x10]
c00050a4:	89 13                	mov    DWORD PTR [ebx],edx
c00050a6:	89 da                	mov    edx,ebx
c00050a8:	e8 80 fd ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c00050ad:	31 d2                	xor    edx,edx
c00050af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b3:	b9 1e 00 00 00       	mov    ecx,0x1e
c00050b8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050bb:	83 c0 02             	add    eax,0x2
c00050be:	e8 32 cc ff ff       	call   c0001cf5 <mem_set>
c00050c3:	b9 1a 00 00 00       	mov    ecx,0x1a
c00050c8:	31 d2                	xor    edx,edx
c00050ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050ce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050d1:	83 c0 26             	add    eax,0x26
c00050d4:	e8 1c cc ff ff       	call   c0001cf5 <mem_set>
c00050d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050e0:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050e4:	ba 00 00 21 50       	mov    edx,0x50210000
c00050e9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050ec:	83 c0 08             	add    eax,0x8
c00050ef:	e8 e3 cb ff ff       	call   c0001cd7 <st_dword>
c00050f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050fb:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050ff:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005103:	e8 b7 ea ff ff       	call   c0003bbf <store_xdir>
c0005108:	89 c5                	mov    ebp,eax
c000510a:	85 c0                	test   eax,eax
c000510c:	0f 85 98 02 00 00    	jne    c00053aa <f_open+0x419>
c0005112:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005115:	85 d2                	test   edx,edx
c0005117:	0f 84 db 00 00 00    	je     c00051f8 <f_open+0x267>
c000511d:	31 c9                	xor    ecx,ecx
c000511f:	89 d8                	mov    eax,ebx
c0005121:	e8 8e e3 ff ff       	call   c00034b4 <remove_chain>
c0005126:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000512a:	89 c5                	mov    ebp,eax
c000512c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000512f:	48                   	dec    eax
c0005130:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005133:	e9 b8 00 00 00       	jmp    c00051f0 <f_open+0x25f>
c0005138:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000513c:	89 ea                	mov    edx,ebp
c000513e:	e8 99 fc ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005143:	ba 00 00 21 50       	mov    edx,0x50210000
c0005148:	89 c7                	mov    edi,eax
c000514a:	8d 45 0e             	lea    eax,[ebp+0xe]
c000514d:	e8 85 cb ff ff       	call   c0001cd7 <st_dword>
c0005152:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005156:	31 c9                	xor    ecx,ecx
c0005158:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c000515c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005160:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0005164:	e8 9c fc ff ff       	call   c0004e05 <st_clust.isra.1>
c0005169:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000516d:	31 d2                	xor    edx,edx
c000516f:	83 c0 1c             	add    eax,0x1c
c0005172:	e8 60 cb ff ff       	call   c0001cd7 <st_dword>
c0005177:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517b:	85 ff                	test   edi,edi
c000517d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005181:	74 75                	je     c00051f8 <f_open+0x267>
c0005183:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005187:	31 c9                	xor    ecx,ecx
c0005189:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000518c:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000518f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005193:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005197:	89 fa                	mov    edx,edi
c0005199:	8d 44 24 24          	lea    eax,[esp+0x24]
c000519d:	e8 12 e3 ff ff       	call   c00034b4 <remove_chain>
c00051a2:	89 c5                	mov    ebp,eax
c00051a4:	85 c0                	test   eax,eax
c00051a6:	0f 85 fe 01 00 00    	jne    c00053aa <f_open+0x419>
c00051ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00051b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051b8:	4f                   	dec    edi
c00051b9:	e8 81 d2 ff ff       	call   c000243f <move_window>
c00051be:	89 c5                	mov    ebp,eax
c00051c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051c4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00051c7:	eb 27                	jmp    c00051f0 <f_open+0x25f>
c00051c9:	85 ed                	test   ebp,ebp
c00051cb:	0f 85 d9 01 00 00    	jne    c00053aa <f_open+0x419>
c00051d1:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00051d5:	bd 04 00 00 00       	mov    ebp,0x4
c00051da:	a8 10                	test   al,0x10
c00051dc:	0f 85 c8 01 00 00    	jne    c00053aa <f_open+0x419>
c00051e2:	83 e7 02             	and    edi,0x2
c00051e5:	74 11                	je     c00051f8 <f_open+0x267>
c00051e7:	bd 07 00 00 00       	mov    ebp,0x7
c00051ec:	a8 01                	test   al,0x1
c00051ee:	eb 02                	jmp    c00051f2 <f_open+0x261>
c00051f0:	85 ed                	test   ebp,ebp
c00051f2:	0f 85 b2 01 00 00    	jne    c00053aa <f_open+0x419>
c00051f8:	f7 c6 08 00 00 00    	test   esi,0x8
c00051fe:	74 03                	je     c0005203 <f_open+0x272>
c0005200:	83 ce 40             	or     esi,0x40
c0005203:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005207:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c000520a:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c000520d:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0005210:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0005213:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005217:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c000521a:	8a 02                	mov    al,BYTE PTR [edx]
c000521c:	3c 04                	cmp    al,0x4
c000521e:	75 2a                	jne    c000524a <f_open+0x2b9>
c0005220:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005224:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005229:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000522c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005230:	30 c0                	xor    al,al
c0005232:	09 c8                	or     eax,ecx
c0005234:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005237:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000523b:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000523e:	8d 42 10             	lea    eax,[edx+0x10]
c0005241:	89 da                	mov    edx,ebx
c0005243:	e8 e5 fb ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0005248:	eb 1c                	jmp    c0005266 <f_open+0x2d5>
c000524a:	89 fa                	mov    edx,edi
c000524c:	e8 8b fb ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005251:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005254:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005257:	e8 12 ca ff ff       	call   c0001c6e <ld_dword>
c000525c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005263:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005266:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000526a:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005271:	89 03                	mov    DWORD PTR [ebx],eax
c0005273:	31 d2                	xor    edx,edx
c0005275:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005279:	b9 00 02 00 00       	mov    ecx,0x200
c000527e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005282:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005286:	89 f0                	mov    eax,esi
c0005288:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000528f:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005292:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005299:	8d 43 50             	lea    eax,[ebx+0x50]
c000529c:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c00052a3:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00052aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00052ae:	e8 42 ca ff ff       	call   c0001cf5 <mem_set>
c00052b3:	83 e6 20             	and    esi,0x20
c00052b6:	75 07                	jne    c00052bf <f_open+0x32e>
c00052b8:	31 ed                	xor    ebp,ebp
c00052ba:	e9 eb 00 00 00       	jmp    c00053aa <f_open+0x419>
c00052bf:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00052c2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00052c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00052cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00052d1:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00052d5:	74 e1                	je     c00052b8 <f_open+0x327>
c00052d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052df:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052e2:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052e9:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052ec:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052f0:	31 ff                	xor    edi,edi
c00052f2:	c1 e5 09             	shl    ebp,0x9
c00052f5:	89 ee                	mov    esi,ebp
c00052f7:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052fb:	89 f8                	mov    eax,edi
c00052fd:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005301:	73 22                	jae    c0005325 <f_open+0x394>
c0005303:	89 d8                	mov    eax,ebx
c0005305:	e8 bd dc ff ff       	call   c0002fc7 <get_fat>
c000530a:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000530e:	89 c2                	mov    edx,eax
c0005310:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005314:	83 f8 01             	cmp    eax,0x1
c0005317:	76 10                	jbe    c0005329 <f_open+0x398>
c0005319:	83 f8 ff             	cmp    eax,0xffffffff
c000531c:	75 d9                	jne    c00052f7 <f_open+0x366>
c000531e:	bd 01 00 00 00       	mov    ebp,0x1
c0005323:	eb 09                	jmp    c000532e <f_open+0x39d>
c0005325:	31 ed                	xor    ebp,ebp
c0005327:	eb 05                	jmp    c000532e <f_open+0x39d>
c0005329:	bd 02 00 00 00       	mov    ebp,0x2
c000532e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005331:	85 ed                	test   ebp,ebp
c0005333:	75 75                	jne    c00053aa <f_open+0x419>
c0005335:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005339:	25 ff 01 00 00       	and    eax,0x1ff
c000533e:	0f 84 74 ff ff ff    	je     c00052b8 <f_open+0x327>
c0005344:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005348:	bd 02 00 00 00       	mov    ebp,0x2
c000534d:	89 c8                	mov    eax,ecx
c000534f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005353:	e8 a2 cb ff ff       	call   c0001efa <clst2sect>
c0005358:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000535c:	89 d7                	mov    edi,edx
c000535e:	09 c7                	or     edi,eax
c0005360:	74 48                	je     c00053aa <f_open+0x419>
c0005362:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005366:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000536a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005372:	0f ac fe 09          	shrd   esi,edi,0x9
c0005376:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000537a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000537e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005381:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005385:	83 ec 0c             	sub    esp,0xc
c0005388:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000538b:	6a 01                	push   0x1
c000538d:	52                   	push   edx
c000538e:	50                   	push   eax
c000538f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005393:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005397:	50                   	push   eax
c0005398:	e8 79 c8 ff ff       	call   c0001c16 <disk_read>
c000539d:	83 c4 20             	add    esp,0x20
c00053a0:	85 c0                	test   eax,eax
c00053a2:	0f 95 c0             	setne  al
c00053a5:	0f b6 c0             	movzx  eax,al
c00053a8:	89 c5                	mov    ebp,eax
c00053aa:	83 ec 0c             	sub    esp,0xc
c00053ad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00053b1:	e8 f4 30 00 00       	call   c00084aa <ff_memfree>
c00053b6:	83 c4 10             	add    esp,0x10
c00053b9:	85 ed                	test   ebp,ebp
c00053bb:	74 06                	je     c00053c3 <f_open+0x432>
c00053bd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00053c3:	83 c4 7c             	add    esp,0x7c
c00053c6:	89 e8                	mov    eax,ebp
c00053c8:	5b                   	pop    ebx
c00053c9:	5e                   	pop    esi
c00053ca:	5f                   	pop    edi
c00053cb:	5d                   	pop    ebp
c00053cc:	c3                   	ret    

c00053cd <f_read>:
c00053cd:	55                   	push   ebp
c00053ce:	57                   	push   edi
c00053cf:	56                   	push   esi
c00053d0:	53                   	push   ebx
c00053d1:	83 ec 2c             	sub    esp,0x2c
c00053d4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053d8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053dc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053e6:	89 d8                	mov    eax,ebx
c00053e8:	e8 77 cf ff ff       	call   c0002364 <validate>
c00053ed:	89 c5                	mov    ebp,eax
c00053ef:	85 c0                	test   eax,eax
c00053f1:	0f 85 4c 02 00 00    	jne    c0005643 <f_read+0x276>
c00053f7:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053fb:	85 ed                	test   ebp,ebp
c00053fd:	0f 85 40 02 00 00    	jne    c0005643 <f_read+0x276>
c0005403:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005407:	0f 84 31 02 00 00    	je     c000563e <f_read+0x271>
c000540d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005410:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005413:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005416:	bf 00 00 00 00       	mov    edi,0x0
c000541b:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000541e:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005422:	89 d1                	mov    ecx,edx
c0005424:	19 f9                	sbb    ecx,edi
c0005426:	0f 83 cf 00 00 00    	jae    c00054fb <f_read+0x12e>
c000542c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005430:	e9 c6 00 00 00       	jmp    c00054fb <f_read+0x12e>
c0005435:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005438:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000543b:	89 d0                	mov    eax,edx
c000543d:	25 ff 01 00 00       	and    eax,0x1ff
c0005442:	0f 85 c9 01 00 00    	jne    c0005611 <f_read+0x244>
c0005448:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000544c:	89 d6                	mov    esi,edx
c000544e:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005452:	89 cf                	mov    edi,ecx
c0005454:	48                   	dec    eax
c0005455:	0f ac fe 09          	shrd   esi,edi,0x9
c0005459:	21 f0                	and    eax,esi
c000545b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000545f:	0f 84 a6 00 00 00    	je     c000550b <f_read+0x13e>
c0005465:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005469:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000546c:	89 c8                	mov    eax,ecx
c000546e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005471:	e8 84 ca ff ff       	call   c0001efa <clst2sect>
c0005476:	89 d7                	mov    edi,edx
c0005478:	09 c7                	or     edi,eax
c000547a:	0f 84 b4 00 00 00    	je     c0005534 <f_read+0x167>
c0005480:	31 ff                	xor    edi,edi
c0005482:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005486:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005489:	01 c6                	add    esi,eax
c000548b:	11 d7                	adc    edi,edx
c000548d:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005495:	0f 86 fd 00 00 00    	jbe    c0005598 <f_read+0x1cb>
c000549b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000549f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054a3:	c1 e8 09             	shr    eax,0x9
c00054a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00054a9:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054ad:	03 14 24             	add    edx,DWORD PTR [esp]
c00054b0:	39 c2                	cmp    edx,eax
c00054b2:	76 07                	jbe    c00054bb <f_read+0xee>
c00054b4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00054bb:	83 ec 0c             	sub    esp,0xc
c00054be:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00054c2:	57                   	push   edi
c00054c3:	56                   	push   esi
c00054c4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054cc:	50                   	push   eax
c00054cd:	e8 44 c7 ff ff       	call   c0001c16 <disk_read>
c00054d2:	83 c4 20             	add    esp,0x20
c00054d5:	85 c0                	test   eax,eax
c00054d7:	75 6e                	jne    c0005547 <f_read+0x17a>
c00054d9:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054dd:	78 7e                	js     c000555d <f_read+0x190>
c00054df:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054e2:	c1 e6 09             	shl    esi,0x9
c00054e5:	31 ff                	xor    edi,edi
c00054e7:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054eb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054ef:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054f3:	01 30                	add    DWORD PTR [eax],esi
c00054f5:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054f8:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054fb:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005500:	0f 85 2f ff ff ff    	jne    c0005435 <f_read+0x68>
c0005506:	e9 38 01 00 00       	jmp    c0005643 <f_read+0x276>
c000550b:	89 c8                	mov    eax,ecx
c000550d:	09 d0                	or     eax,edx
c000550f:	75 05                	jne    c0005516 <f_read+0x149>
c0005511:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005514:	eb 19                	jmp    c000552f <f_read+0x162>
c0005516:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000551a:	74 09                	je     c0005525 <f_read+0x158>
c000551c:	89 d8                	mov    eax,ebx
c000551e:	e8 f8 c9 ff ff       	call   c0001f1b <clmt_clust>
c0005523:	eb 0a                	jmp    c000552f <f_read+0x162>
c0005525:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005528:	89 d8                	mov    eax,ebx
c000552a:	e8 98 da ff ff       	call   c0002fc7 <get_fat>
c000552f:	83 f8 01             	cmp    eax,0x1
c0005532:	77 0e                	ja     c0005542 <f_read+0x175>
c0005534:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005538:	bd 02 00 00 00       	mov    ebp,0x2
c000553d:	e9 01 01 00 00       	jmp    c0005643 <f_read+0x276>
c0005542:	83 f8 ff             	cmp    eax,0xffffffff
c0005545:	75 0e                	jne    c0005555 <f_read+0x188>
c0005547:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000554b:	bd 01 00 00 00       	mov    ebp,0x1
c0005550:	e9 ee 00 00 00       	jmp    c0005643 <f_read+0x276>
c0005555:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005558:	e9 08 ff ff ff       	jmp    c0005465 <f_read+0x98>
c000555d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005560:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005563:	29 f0                	sub    eax,esi
c0005565:	19 fa                	sbb    edx,edi
c0005567:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000556a:	89 d7                	mov    edi,edx
c000556c:	ba 00 00 00 00       	mov    edx,0x0
c0005571:	89 f9                	mov    ecx,edi
c0005573:	19 d1                	sbb    ecx,edx
c0005575:	0f 83 64 ff ff ff    	jae    c00054df <f_read+0x112>
c000557b:	89 c7                	mov    edi,eax
c000557d:	8d 53 50             	lea    edx,[ebx+0x50]
c0005580:	c1 e7 09             	shl    edi,0x9
c0005583:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005587:	b9 00 02 00 00       	mov    ecx,0x200
c000558c:	01 f8                	add    eax,edi
c000558e:	e8 4d c7 ff ff       	call   c0001ce0 <mem_cpy>
c0005593:	e9 47 ff ff ff       	jmp    c00054df <f_read+0x112>
c0005598:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000559b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000559e:	89 04 24             	mov    DWORD PTR [esp],eax
c00055a1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00055a5:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00055a9:	75 05                	jne    c00055b0 <f_read+0x1e3>
c00055ab:	39 34 24             	cmp    DWORD PTR [esp],esi
c00055ae:	74 5b                	je     c000560b <f_read+0x23e>
c00055b0:	8d 43 50             	lea    eax,[ebx+0x50]
c00055b3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055bb:	79 2a                	jns    c00055e7 <f_read+0x21a>
c00055bd:	83 ec 0c             	sub    esp,0xc
c00055c0:	6a 01                	push   0x1
c00055c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055ce:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055d2:	50                   	push   eax
c00055d3:	e8 54 c6 ff ff       	call   c0001c2c <disk_write>
c00055d8:	83 c4 20             	add    esp,0x20
c00055db:	85 c0                	test   eax,eax
c00055dd:	0f 85 64 ff ff ff    	jne    c0005547 <f_read+0x17a>
c00055e3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055e7:	83 ec 0c             	sub    esp,0xc
c00055ea:	6a 01                	push   0x1
c00055ec:	57                   	push   edi
c00055ed:	56                   	push   esi
c00055ee:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055f2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055fa:	50                   	push   eax
c00055fb:	e8 16 c6 ff ff       	call   c0001c16 <disk_read>
c0005600:	83 c4 20             	add    esp,0x20
c0005603:	85 c0                	test   eax,eax
c0005605:	0f 85 3c ff ff ff    	jne    c0005547 <f_read+0x17a>
c000560b:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000560e:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005611:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005614:	ba 00 02 00 00       	mov    edx,0x200
c0005619:	25 ff 01 00 00       	and    eax,0x1ff
c000561e:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005622:	29 c2                	sub    edx,eax
c0005624:	39 d6                	cmp    esi,edx
c0005626:	76 02                	jbe    c000562a <f_read+0x25d>
c0005628:	89 d6                	mov    esi,edx
c000562a:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000562e:	89 f1                	mov    ecx,esi
c0005630:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005634:	e8 a7 c6 ff ff       	call   c0001ce0 <mem_cpy>
c0005639:	e9 a7 fe ff ff       	jmp    c00054e5 <f_read+0x118>
c000563e:	bd 07 00 00 00       	mov    ebp,0x7
c0005643:	83 c4 2c             	add    esp,0x2c
c0005646:	89 e8                	mov    eax,ebp
c0005648:	5b                   	pop    ebx
c0005649:	5e                   	pop    esi
c000564a:	5f                   	pop    edi
c000564b:	5d                   	pop    ebp
c000564c:	c3                   	ret    

c000564d <f_write>:
c000564d:	55                   	push   ebp
c000564e:	57                   	push   edi
c000564f:	56                   	push   esi
c0005650:	53                   	push   ebx
c0005651:	83 ec 2c             	sub    esp,0x2c
c0005654:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005658:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000565c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005662:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005666:	89 d8                	mov    eax,ebx
c0005668:	e8 f7 cc ff ff       	call   c0002364 <validate>
c000566d:	89 c5                	mov    ebp,eax
c000566f:	85 c0                	test   eax,eax
c0005671:	0f 85 86 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005677:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000567b:	85 ed                	test   ebp,ebp
c000567d:	0f 85 7a 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005683:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005687:	0f 84 6b 02 00 00    	je     c00058f8 <f_write+0x2ab>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005694:	0f 84 43 01 00 00    	je     c00057dd <f_write+0x190>
c000569a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000569d:	89 c1                	mov    ecx,eax
c000569f:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00056a3:	0f 83 34 01 00 00    	jae    c00057dd <f_write+0x190>
c00056a9:	f7 d0                	not    eax
c00056ab:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00056af:	e9 29 01 00 00       	jmp    c00057dd <f_write+0x190>
c00056b4:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00056b7:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00056ba:	89 d0                	mov    eax,edx
c00056bc:	25 ff 01 00 00       	and    eax,0x1ff
c00056c1:	0f 85 00 02 00 00    	jne    c00058c7 <f_write+0x27a>
c00056c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056cb:	89 d6                	mov    esi,edx
c00056cd:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00056d1:	89 cf                	mov    edi,ecx
c00056d3:	48                   	dec    eax
c00056d4:	0f ac fe 09          	shrd   esi,edi,0x9
c00056d8:	21 f0                	and    eax,esi
c00056da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056de:	0f 84 06 01 00 00    	je     c00057ea <f_write+0x19d>
c00056e4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056e8:	0f 88 6e 01 00 00    	js     c000585c <f_write+0x20f>
c00056ee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056f2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056f5:	89 c8                	mov    eax,ecx
c00056f7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056fb:	e8 fa c7 ff ff       	call   c0001efa <clst2sect>
c0005700:	89 d1                	mov    ecx,edx
c0005702:	09 c1                	or     ecx,eax
c0005704:	0f 84 1c 01 00 00    	je     c0005826 <f_write+0x1d9>
c000570a:	31 ff                	xor    edi,edi
c000570c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005710:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005714:	01 c6                	add    esi,eax
c0005716:	11 d7                	adc    edi,edx
c0005718:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005720:	0f 86 63 01 00 00    	jbe    c0005889 <f_write+0x23c>
c0005726:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000572a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000572e:	c1 e8 09             	shr    eax,0x9
c0005731:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005735:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005739:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000573d:	39 c2                	cmp    edx,eax
c000573f:	76 08                	jbe    c0005749 <f_write+0xfc>
c0005741:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005745:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005749:	83 ec 0c             	sub    esp,0xc
c000574c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005750:	57                   	push   edi
c0005751:	56                   	push   esi
c0005752:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005756:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000575a:	50                   	push   eax
c000575b:	e8 cc c4 ff ff       	call   c0001c2c <disk_write>
c0005760:	83 c4 20             	add    esp,0x20
c0005763:	85 c0                	test   eax,eax
c0005765:	0f 85 ce 00 00 00    	jne    c0005839 <f_write+0x1ec>
c000576b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000576e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005771:	29 f0                	sub    eax,esi
c0005773:	19 fa                	sbb    edx,edi
c0005775:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005779:	89 d7                	mov    edi,edx
c000577b:	ba 00 00 00 00       	mov    edx,0x0
c0005780:	89 f9                	mov    ecx,edi
c0005782:	19 d1                	sbb    ecx,edx
c0005784:	73 1c                	jae    c00057a2 <f_write+0x155>
c0005786:	89 c7                	mov    edi,eax
c0005788:	b9 00 02 00 00       	mov    ecx,0x200
c000578d:	c1 e7 09             	shl    edi,0x9
c0005790:	8d 43 50             	lea    eax,[ebx+0x50]
c0005793:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005797:	89 fa                	mov    edx,edi
c0005799:	e8 42 c5 ff ff       	call   c0001ce0 <mem_cpy>
c000579e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00057a2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00057a6:	c1 e6 09             	shl    esi,0x9
c00057a9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00057ad:	31 ff                	xor    edi,edi
c00057af:	01 30                	add    DWORD PTR [eax],esi
c00057b1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00057b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00057b9:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057bc:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00057bf:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00057c2:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00057c5:	89 c1                	mov    ecx,eax
c00057c7:	39 f2                	cmp    edx,esi
c00057c9:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00057cc:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00057cf:	19 f9                	sbb    ecx,edi
c00057d1:	73 04                	jae    c00057d7 <f_write+0x18a>
c00057d3:	89 f2                	mov    edx,esi
c00057d5:	89 f8                	mov    eax,edi
c00057d7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057da:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057dd:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057e2:	0f 85 cc fe ff ff    	jne    c00056b4 <f_write+0x67>
c00057e8:	eb 2e                	jmp    c0005818 <f_write+0x1cb>
c00057ea:	89 c8                	mov    eax,ecx
c00057ec:	09 d0                	or     eax,edx
c00057ee:	75 0b                	jne    c00057fb <f_write+0x1ae>
c00057f0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057f3:	31 d2                	xor    edx,edx
c00057f5:	85 c0                	test   eax,eax
c00057f7:	75 28                	jne    c0005821 <f_write+0x1d4>
c00057f9:	eb 12                	jmp    c000580d <f_write+0x1c0>
c00057fb:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057ff:	74 09                	je     c000580a <f_write+0x1bd>
c0005801:	89 d8                	mov    eax,ebx
c0005803:	e8 13 c7 ff ff       	call   c0001f1b <clmt_clust>
c0005808:	eb 0a                	jmp    c0005814 <f_write+0x1c7>
c000580a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000580d:	89 d8                	mov    eax,ebx
c000580f:	e8 a1 da ff ff       	call   c00032b5 <create_chain>
c0005814:	85 c0                	test   eax,eax
c0005816:	75 09                	jne    c0005821 <f_write+0x1d4>
c0005818:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000581c:	e9 dc 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005821:	83 f8 01             	cmp    eax,0x1
c0005824:	75 0e                	jne    c0005834 <f_write+0x1e7>
c0005826:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000582a:	bd 02 00 00 00       	mov    ebp,0x2
c000582f:	e9 c9 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005834:	83 f8 ff             	cmp    eax,0xffffffff
c0005837:	75 0e                	jne    c0005847 <f_write+0x1fa>
c0005839:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000583d:	bd 01 00 00 00       	mov    ebp,0x1
c0005842:	e9 b6 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005847:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000584a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000584e:	0f 85 90 fe ff ff    	jne    c00056e4 <f_write+0x97>
c0005854:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005857:	e9 88 fe ff ff       	jmp    c00056e4 <f_write+0x97>
c000585c:	83 ec 0c             	sub    esp,0xc
c000585f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005862:	6a 01                	push   0x1
c0005864:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005867:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000586a:	50                   	push   eax
c000586b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000586f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005873:	50                   	push   eax
c0005874:	e8 b3 c3 ff ff       	call   c0001c2c <disk_write>
c0005879:	83 c4 20             	add    esp,0x20
c000587c:	85 c0                	test   eax,eax
c000587e:	75 b9                	jne    c0005839 <f_write+0x1ec>
c0005880:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005884:	e9 65 fe ff ff       	jmp    c00056ee <f_write+0xa1>
c0005889:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000588c:	75 05                	jne    c0005893 <f_write+0x246>
c000588e:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005891:	74 2e                	je     c00058c1 <f_write+0x274>
c0005893:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005896:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005899:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000589c:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c000589f:	73 20                	jae    c00058c1 <f_write+0x274>
c00058a1:	83 ec 0c             	sub    esp,0xc
c00058a4:	8d 43 50             	lea    eax,[ebx+0x50]
c00058a7:	6a 01                	push   0x1
c00058a9:	57                   	push   edi
c00058aa:	56                   	push   esi
c00058ab:	50                   	push   eax
c00058ac:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00058b0:	50                   	push   eax
c00058b1:	e8 60 c3 ff ff       	call   c0001c16 <disk_read>
c00058b6:	83 c4 20             	add    esp,0x20
c00058b9:	85 c0                	test   eax,eax
c00058bb:	0f 85 78 ff ff ff    	jne    c0005839 <f_write+0x1ec>
c00058c1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00058c4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00058c7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00058ca:	ba 00 02 00 00       	mov    edx,0x200
c00058cf:	25 ff 01 00 00       	and    eax,0x1ff
c00058d4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00058d8:	29 c2                	sub    edx,eax
c00058da:	39 d6                	cmp    esi,edx
c00058dc:	76 02                	jbe    c00058e0 <f_write+0x293>
c00058de:	89 d6                	mov    esi,edx
c00058e0:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058e4:	89 f1                	mov    ecx,esi
c00058e6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058ea:	e8 f1 c3 ff ff       	call   c0001ce0 <mem_cpy>
c00058ef:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058f3:	e9 b1 fe ff ff       	jmp    c00057a9 <f_write+0x15c>
c00058f8:	bd 07 00 00 00       	mov    ebp,0x7
c00058fd:	83 c4 2c             	add    esp,0x2c
c0005900:	89 e8                	mov    eax,ebp
c0005902:	5b                   	pop    ebx
c0005903:	5e                   	pop    esi
c0005904:	5f                   	pop    edi
c0005905:	5d                   	pop    ebp
c0005906:	c3                   	ret    

c0005907 <f_sync>:
c0005907:	56                   	push   esi
c0005908:	53                   	push   ebx
c0005909:	83 ec 64             	sub    esp,0x64
c000590c:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0005910:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005914:	89 d8                	mov    eax,ebx
c0005916:	e8 49 ca ff ff       	call   c0002364 <validate>
c000591b:	85 c0                	test   eax,eax
c000591d:	0f 85 ba 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005923:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005926:	f6 c2 40             	test   dl,0x40
c0005929:	0f 84 ae 01 00 00    	je     c0005add <f_sync+0x1d6>
c000592f:	84 d2                	test   dl,dl
c0005931:	79 33                	jns    c0005966 <f_sync+0x5f>
c0005933:	83 ec 0c             	sub    esp,0xc
c0005936:	8d 43 50             	lea    eax,[ebx+0x50]
c0005939:	6a 01                	push   0x1
c000593b:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000593e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005941:	50                   	push   eax
c0005942:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005946:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000594a:	50                   	push   eax
c000594b:	e8 dc c2 ff ff       	call   c0001c2c <disk_write>
c0005950:	83 c4 20             	add    esp,0x20
c0005953:	89 c2                	mov    edx,eax
c0005955:	b8 01 00 00 00       	mov    eax,0x1
c000595a:	85 d2                	test   edx,edx
c000595c:	0f 85 7b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005962:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000596a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000596d:	0f 85 11 01 00 00    	jne    c0005a84 <f_sync+0x17d>
c0005973:	89 d8                	mov    eax,ebx
c0005975:	e8 13 d6 ff ff       	call   c0002f8d <fill_first_frag>
c000597a:	85 c0                	test   eax,eax
c000597c:	0f 85 5b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005982:	83 c9 ff             	or     ecx,0xffffffff
c0005985:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005988:	89 d8                	mov    eax,ebx
c000598a:	e8 c9 d5 ff ff       	call   c0002f58 <fill_last_frag>
c000598f:	85 c0                	test   eax,eax
c0005991:	0f 85 46 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005997:	83 ec 0c             	sub    esp,0xc
c000599a:	68 60 04 00 00       	push   0x460
c000599f:	e8 f0 2a 00 00       	call   c0008494 <ff_memalloc>
c00059a4:	83 c4 10             	add    esp,0x10
c00059a7:	89 c6                	mov    esi,eax
c00059a9:	b8 11 00 00 00       	mov    eax,0x11
c00059ae:	85 f6                	test   esi,esi
c00059b0:	0f 84 27 01 00 00    	je     c0005add <f_sync+0x1d6>
c00059b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ba:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00059c0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00059c3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00059c6:	89 da                	mov    edx,ebx
c00059c8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00059cc:	e8 af df ff ff       	call   c0003980 <load_obj_xdir>
c00059d1:	85 c0                	test   eax,eax
c00059d3:	0f 85 95 00 00 00    	jne    c0005a6e <f_sync+0x167>
c00059d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059e0:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059e4:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059e7:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059ea:	83 ca 01             	or     edx,0x1
c00059ed:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059f0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059f3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059f6:	83 c0 34             	add    eax,0x34
c00059f9:	e8 d9 c2 ff ff       	call   c0001cd7 <st_dword>
c00059fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a05:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a08:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a0b:	83 c0 38             	add    eax,0x38
c0005a0e:	e8 c7 c2 ff ff       	call   c0001cda <st_qword>
c0005a13:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a1a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a1d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a20:	83 c0 28             	add    eax,0x28
c0005a23:	e8 b2 c2 ff ff       	call   c0001cda <st_qword>
c0005a28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a31:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a34:	83 c0 0c             	add    eax,0xc
c0005a37:	e8 9b c2 ff ff       	call   c0001cd7 <st_dword>
c0005a3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a40:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a43:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a47:	31 d2                	xor    edx,edx
c0005a49:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a4c:	83 c0 10             	add    eax,0x10
c0005a4f:	e8 83 c2 ff ff       	call   c0001cd7 <st_dword>
c0005a54:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a58:	e8 62 e1 ff ff       	call   c0003bbf <store_xdir>
c0005a5d:	85 c0                	test   eax,eax
c0005a5f:	75 0d                	jne    c0005a6e <f_sync+0x167>
c0005a61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a65:	e8 00 eb ff ff       	call   c000456a <sync_fs>
c0005a6a:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a72:	83 ec 0c             	sub    esp,0xc
c0005a75:	56                   	push   esi
c0005a76:	e8 2f 2a 00 00       	call   c00084aa <ff_memfree>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a82:	eb 59                	jmp    c0005add <f_sync+0x1d6>
c0005a84:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a87:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a8a:	e8 b0 c9 ff ff       	call   c000243f <move_window>
c0005a8f:	85 c0                	test   eax,eax
c0005a91:	75 4a                	jne    c0005add <f_sync+0x1d6>
c0005a93:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a96:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a9a:	89 f2                	mov    edx,esi
c0005a9c:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005aa1:	e8 5f f3 ff ff       	call   c0004e05 <st_clust.isra.1>
c0005aa6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005aa9:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005aac:	e8 26 c2 ff ff       	call   c0001cd7 <st_dword>
c0005ab1:	8d 46 16             	lea    eax,[esi+0x16]
c0005ab4:	ba 00 00 21 50       	mov    edx,0x50210000
c0005ab9:	e8 19 c2 ff ff       	call   c0001cd7 <st_dword>
c0005abe:	8d 46 12             	lea    eax,[esi+0x12]
c0005ac1:	31 d2                	xor    edx,edx
c0005ac3:	e8 0b c2 ff ff       	call   c0001cd3 <st_word>
c0005ac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005acc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ad4:	e8 91 ea ff ff       	call   c000456a <sync_fs>
c0005ad9:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005add:	83 c4 64             	add    esp,0x64
c0005ae0:	5b                   	pop    ebx
c0005ae1:	5e                   	pop    esi
c0005ae2:	c3                   	ret    

c0005ae3 <f_close>:
c0005ae3:	53                   	push   ebx
c0005ae4:	83 ec 24             	sub    esp,0x24
c0005ae7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005aeb:	53                   	push   ebx
c0005aec:	e8 16 fe ff ff       	call   c0005907 <f_sync>
c0005af1:	83 c4 10             	add    esp,0x10
c0005af4:	85 c0                	test   eax,eax
c0005af6:	75 15                	jne    c0005b0d <f_close+0x2a>
c0005af8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005afc:	89 d8                	mov    eax,ebx
c0005afe:	e8 61 c8 ff ff       	call   c0002364 <validate>
c0005b03:	85 c0                	test   eax,eax
c0005b05:	75 06                	jne    c0005b0d <f_close+0x2a>
c0005b07:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005b0d:	83 c4 18             	add    esp,0x18
c0005b10:	5b                   	pop    ebx
c0005b11:	c3                   	ret    

c0005b12 <f_lseek>:
c0005b12:	55                   	push   ebp
c0005b13:	57                   	push   edi
c0005b14:	56                   	push   esi
c0005b15:	53                   	push   ebx
c0005b16:	83 ec 3c             	sub    esp,0x3c
c0005b19:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005b1d:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005b21:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005b25:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b28:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005b2c:	89 d8                	mov    eax,ebx
c0005b2e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005b32:	e8 2d c8 ff ff       	call   c0002364 <validate>
c0005b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	0f 85 7a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b43:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b47:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b4b:	85 c0                	test   eax,eax
c0005b4d:	0f 85 6a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b53:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b57:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b5a:	74 0c                	je     c0005b68 <f_lseek+0x56>
c0005b5c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b5f:	85 c0                	test   eax,eax
c0005b61:	75 1f                	jne    c0005b82 <f_lseek+0x70>
c0005b63:	e9 b5 01 00 00       	jmp    c0005d1d <f_lseek+0x20b>
c0005b68:	83 c9 ff             	or     ecx,0xffffffff
c0005b6b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b6e:	89 d8                	mov    eax,ebx
c0005b70:	e8 e3 d3 ff ff       	call   c0002f58 <fill_last_frag>
c0005b75:	85 c0                	test   eax,eax
c0005b77:	74 e3                	je     c0005b5c <f_lseek+0x4a>
c0005b79:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b7d:	e9 3b 04 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005b82:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b87:	0f 85 ac 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b8d:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b91:	0f 85 a2 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b97:	8d 78 04             	lea    edi,[eax+0x4]
c0005b9a:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b9f:	be 02 00 00 00       	mov    esi,0x2
c0005ba4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ba8:	85 ed                	test   ebp,ebp
c0005baa:	74 73                	je     c0005c1f <f_lseek+0x10d>
c0005bac:	89 e9                	mov    ecx,ebp
c0005bae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005bb5:	ff 04 24             	inc    DWORD PTR [esp]
c0005bb8:	89 ca                	mov    edx,ecx
c0005bba:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005bbe:	89 d8                	mov    eax,ebx
c0005bc0:	e8 02 d4 ff ff       	call   c0002fc7 <get_fat>
c0005bc5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bc9:	83 f8 01             	cmp    eax,0x1
c0005bcc:	77 11                	ja     c0005bdf <f_lseek+0xcd>
c0005bce:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005bd2:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005bda:	e9 de 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bdf:	83 f8 ff             	cmp    eax,0xffffffff
c0005be2:	75 11                	jne    c0005bf5 <f_lseek+0xe3>
c0005be4:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005be8:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bf0:	e9 c8 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bf5:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bf8:	89 c1                	mov    ecx,eax
c0005bfa:	39 c2                	cmp    edx,eax
c0005bfc:	74 b7                	je     c0005bb5 <f_lseek+0xa3>
c0005bfe:	83 c6 02             	add    esi,0x2
c0005c01:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005c05:	72 0b                	jb     c0005c12 <f_lseek+0x100>
c0005c07:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005c0a:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005c0d:	89 0f                	mov    DWORD PTR [edi],ecx
c0005c0f:	83 c7 08             	add    edi,0x8
c0005c12:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c16:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c19:	76 04                	jbe    c0005c1f <f_lseek+0x10d>
c0005c1b:	89 c5                	mov    ebp,eax
c0005c1d:	eb 8d                	jmp    c0005bac <f_lseek+0x9a>
c0005c1f:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005c22:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005c26:	89 30                	mov    DWORD PTR [eax],esi
c0005c28:	0f 87 87 03 00 00    	ja     c0005fb5 <f_lseek+0x4a3>
c0005c2e:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005c34:	e9 84 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005c39:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c3c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c47:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c4b:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c52:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c56:	73 0f                	jae    c0005c67 <f_lseek+0x155>
c0005c58:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c5b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c6f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c72:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c79:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c7d:	0f 84 3a 03 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005c83:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c87:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c8b:	83 c6 ff             	add    esi,0xffffffff
c0005c8e:	89 d8                	mov    eax,ebx
c0005c90:	83 d7 ff             	adc    edi,0xffffffff
c0005c93:	89 f2                	mov    edx,esi
c0005c95:	89 f9                	mov    ecx,edi
c0005c97:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c9b:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c9e:	e8 78 c2 ff ff       	call   c0001f1b <clmt_clust>
c0005ca3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ca7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005caa:	89 c2                	mov    edx,eax
c0005cac:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005cb0:	89 c8                	mov    eax,ecx
c0005cb2:	e8 43 c2 ff ff       	call   c0001efa <clst2sect>
c0005cb7:	89 d7                	mov    edi,edx
c0005cb9:	09 c7                	or     edi,eax
c0005cbb:	0f 84 0d ff ff ff    	je     c0005bce <f_lseek+0xbc>
c0005cc1:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005cc5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005ccb:	0f 84 ec 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cd1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cd5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005cd9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cdc:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ce0:	0f ac fe 09          	shrd   esi,edi,0x9
c0005ce4:	4d                   	dec    ebp
c0005ce5:	31 ff                	xor    edi,edi
c0005ce7:	21 ee                	and    esi,ebp
c0005ce9:	01 c6                	add    esi,eax
c0005ceb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cee:	11 d7                	adc    edi,edx
c0005cf0:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cf3:	39 fa                	cmp    edx,edi
c0005cf5:	75 08                	jne    c0005cff <f_lseek+0x1ed>
c0005cf7:	39 f0                	cmp    eax,esi
c0005cf9:	0f 84 be 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cff:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d02:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d06:	0f 89 80 02 00 00    	jns    c0005f8c <f_lseek+0x47a>
c0005d0c:	83 ec 0c             	sub    esp,0xc
c0005d0f:	6a 01                	push   0x1
c0005d11:	52                   	push   edx
c0005d12:	50                   	push   eax
c0005d13:	55                   	push   ebp
c0005d14:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005d18:	e9 5a 02 00 00       	jmp    c0005f77 <f_lseek+0x465>
c0005d1d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005d21:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005d24:	74 16                	je     c0005d3c <f_lseek+0x22a>
c0005d26:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005d2b:	76 0f                	jbe    c0005d3c <f_lseek+0x22a>
c0005d2d:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005d34:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d3c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d3f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d42:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d45:	89 c7                	mov    edi,eax
c0005d47:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d4b:	73 0d                	jae    c0005d5a <f_lseek+0x248>
c0005d4d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d51:	75 07                	jne    c0005d5a <f_lseek+0x248>
c0005d53:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d56:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d5a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d5d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d60:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d64:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d6b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d72:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d75:	75 09                	jne    c0005d80 <f_lseek+0x26e>
c0005d77:	31 f6                	xor    esi,esi
c0005d79:	31 ff                	xor    edi,edi
c0005d7b:	e9 af 01 00 00       	jmp    c0005f2f <f_lseek+0x41d>
c0005d80:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d84:	89 d7                	mov    edi,edx
c0005d86:	c1 e1 09             	shl    ecx,0x9
c0005d89:	09 c7                	or     edi,eax
c0005d8b:	89 cd                	mov    ebp,ecx
c0005d8d:	74 6d                	je     c0005dfc <f_lseek+0x2ea>
c0005d8f:	83 c0 ff             	add    eax,0xffffffff
c0005d92:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d96:	83 d2 ff             	adc    edx,0xffffffff
c0005d99:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d9c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005da0:	83 c0 ff             	add    eax,0xffffffff
c0005da3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005da7:	83 d2 ff             	adc    edx,0xffffffff
c0005daa:	31 ff                	xor    edi,edi
c0005dac:	57                   	push   edi
c0005dad:	51                   	push   ecx
c0005dae:	52                   	push   edx
c0005daf:	50                   	push   eax
c0005db0:	e8 f7 0b 02 00       	call   c00269ac <__udivdi3>
c0005db5:	83 c4 10             	add    esp,0x10
c0005db8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005dbc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005dc0:	57                   	push   edi
c0005dc1:	55                   	push   ebp
c0005dc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dca:	e8 dd 0b 02 00       	call   c00269ac <__udivdi3>
c0005dcf:	83 c4 10             	add    esp,0x10
c0005dd2:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005dd6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dda:	19 d1                	sbb    ecx,edx
c0005ddc:	72 1e                	jb     c0005dfc <f_lseek+0x2ea>
c0005dde:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005de2:	89 e9                	mov    ecx,ebp
c0005de4:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005de7:	f7 d9                	neg    ecx
c0005de9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005dec:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005df0:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005df3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005df6:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dfa:	eb 28                	jmp    c0005e24 <f_lseek+0x312>
c0005dfc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dff:	85 c0                	test   eax,eax
c0005e01:	75 1e                	jne    c0005e21 <f_lseek+0x30f>
c0005e03:	31 d2                	xor    edx,edx
c0005e05:	89 d8                	mov    eax,ebx
c0005e07:	e8 a9 d4 ff ff       	call   c00032b5 <create_chain>
c0005e0c:	83 f8 01             	cmp    eax,0x1
c0005e0f:	0f 84 b9 fd ff ff    	je     c0005bce <f_lseek+0xbc>
c0005e15:	83 f8 ff             	cmp    eax,0xffffffff
c0005e18:	0f 84 c6 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005e1e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e21:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e24:	85 c0                	test   eax,eax
c0005e26:	0f 84 4b ff ff ff    	je     c0005d77 <f_lseek+0x265>
c0005e2c:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005e30:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005e38:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e3b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e3f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e42:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e45:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e49:	0f 83 9d 00 00 00    	jae    c0005eec <f_lseek+0x3da>
c0005e4f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e53:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e57:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e5a:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e5e:	01 f2                	add    edx,esi
c0005e60:	11 f9                	adc    ecx,edi
c0005e62:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e66:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e6a:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e6d:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e70:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e73:	f6 c1 02             	test   cl,0x2
c0005e76:	74 35                	je     c0005ead <f_lseek+0x39b>
c0005e78:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e7c:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e7f:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e82:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e86:	73 16                	jae    c0005e9e <f_lseek+0x38c>
c0005e88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e8c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e90:	88 ca                	mov    dl,cl
c0005e92:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e95:	83 ca 40             	or     edx,0x40
c0005e98:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e9b:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e9e:	89 c2                	mov    edx,eax
c0005ea0:	89 d8                	mov    eax,ebx
c0005ea2:	e8 0e d4 ff ff       	call   c00032b5 <create_chain>
c0005ea7:	85 c0                	test   eax,eax
c0005ea9:	75 0b                	jne    c0005eb6 <f_lseek+0x3a4>
c0005eab:	eb 30                	jmp    c0005edd <f_lseek+0x3cb>
c0005ead:	89 c2                	mov    edx,eax
c0005eaf:	89 d8                	mov    eax,ebx
c0005eb1:	e8 11 d1 ff ff       	call   c0002fc7 <get_fat>
c0005eb6:	83 f8 ff             	cmp    eax,0xffffffff
c0005eb9:	0f 84 25 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005ebf:	83 f8 01             	cmp    eax,0x1
c0005ec2:	0f 86 06 fd ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ec8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005ecc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005ecf:	0f 86 f9 fc ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ed5:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ed8:	e9 5b ff ff ff       	jmp    c0005e38 <f_lseek+0x326>
c0005edd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005ee4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eec:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eef:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ef3:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ef6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ef9:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005efc:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005f02:	0f 84 6f fe ff ff    	je     c0005d77 <f_lseek+0x265>
c0005f08:	89 c2                	mov    edx,eax
c0005f0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005f0e:	e8 e7 bf ff ff       	call   c0001efa <clst2sect>
c0005f13:	89 d7                	mov    edi,edx
c0005f15:	09 c7                	or     edi,eax
c0005f17:	0f 84 b1 fc ff ff    	je     c0005bce <f_lseek+0xbc>
c0005f1d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005f21:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005f24:	0f ac fe 09          	shrd   esi,edi,0x9
c0005f28:	c1 ef 09             	shr    edi,0x9
c0005f2b:	01 c6                	add    esi,eax
c0005f2d:	11 d7                	adc    edi,edx
c0005f2f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005f32:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005f35:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005f38:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f3b:	19 d1                	sbb    ecx,edx
c0005f3d:	73 0a                	jae    c0005f49 <f_lseek+0x437>
c0005f3f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f42:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f45:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f49:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f4e:	74 6d                	je     c0005fbd <f_lseek+0x4ab>
c0005f50:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f53:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f56:	39 fa                	cmp    edx,edi
c0005f58:	75 04                	jne    c0005f5e <f_lseek+0x44c>
c0005f5a:	39 f0                	cmp    eax,esi
c0005f5c:	74 5f                	je     c0005fbd <f_lseek+0x4ab>
c0005f5e:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f61:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f65:	79 25                	jns    c0005f8c <f_lseek+0x47a>
c0005f67:	83 ec 0c             	sub    esp,0xc
c0005f6a:	6a 01                	push   0x1
c0005f6c:	52                   	push   edx
c0005f6d:	50                   	push   eax
c0005f6e:	55                   	push   ebp
c0005f6f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f73:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f77:	50                   	push   eax
c0005f78:	e8 af bc ff ff       	call   c0001c2c <disk_write>
c0005f7d:	83 c4 20             	add    esp,0x20
c0005f80:	85 c0                	test   eax,eax
c0005f82:	0f 85 5c fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005f88:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f8c:	83 ec 0c             	sub    esp,0xc
c0005f8f:	6a 01                	push   0x1
c0005f91:	57                   	push   edi
c0005f92:	56                   	push   esi
c0005f93:	55                   	push   ebp
c0005f94:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f98:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f9c:	50                   	push   eax
c0005f9d:	e8 74 bc ff ff       	call   c0001c16 <disk_read>
c0005fa2:	83 c4 20             	add    esp,0x20
c0005fa5:	85 c0                	test   eax,eax
c0005fa7:	0f 85 37 fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005fad:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005fb0:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005fb3:	eb 08                	jmp    c0005fbd <f_lseek+0x4ab>
c0005fb5:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005fbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005fc1:	83 c4 3c             	add    esp,0x3c
c0005fc4:	5b                   	pop    ebx
c0005fc5:	5e                   	pop    esi
c0005fc6:	5f                   	pop    edi
c0005fc7:	5d                   	pop    ebp
c0005fc8:	c3                   	ret    

c0005fc9 <f_opendir>:
c0005fc9:	56                   	push   esi
c0005fca:	b8 09 00 00 00       	mov    eax,0x9
c0005fcf:	53                   	push   ebx
c0005fd0:	83 ec 24             	sub    esp,0x24
c0005fd3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005fd7:	85 db                	test   ebx,ebx
c0005fd9:	0f 84 e6 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c0005fdf:	31 c9                	xor    ecx,ecx
c0005fe1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fe5:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005fe9:	e8 03 c7 ff ff       	call   c00026f1 <mount_volume>
c0005fee:	85 c0                	test   eax,eax
c0005ff0:	0f 85 c9 00 00 00    	jne    c00060bf <f_opendir+0xf6>
c0005ff6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ffa:	83 ec 0c             	sub    esp,0xc
c0005ffd:	89 03                	mov    DWORD PTR [ebx],eax
c0005fff:	68 60 04 00 00       	push   0x460
c0006004:	e8 8b 24 00 00       	call   c0008494 <ff_memalloc>
c0006009:	83 c4 10             	add    esp,0x10
c000600c:	89 c6                	mov    esi,eax
c000600e:	b8 11 00 00 00       	mov    eax,0x11
c0006013:	85 f6                	test   esi,esi
c0006015:	0f 84 aa 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c000601b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000601f:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006025:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006028:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000602b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000602f:	89 d8                	mov    eax,ebx
c0006031:	e8 31 ee ff ff       	call   c0004e67 <follow_path>
c0006036:	85 c0                	test   eax,eax
c0006038:	75 61                	jne    c000609b <f_opendir+0xd2>
c000603a:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c000603e:	78 46                	js     c0006086 <f_opendir+0xbd>
c0006040:	b8 05 00 00 00       	mov    eax,0x5
c0006045:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0006049:	74 50                	je     c000609b <f_opendir+0xd2>
c000604b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000604f:	8a 01                	mov    al,BYTE PTR [ecx]
c0006051:	3c 04                	cmp    al,0x4
c0006053:	75 26                	jne    c000607b <f_opendir+0xb2>
c0006055:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0006058:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000605b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000605e:	30 d2                	xor    dl,dl
c0006060:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0006064:	09 c2                	or     edx,eax
c0006066:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0006069:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000606c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000606f:	89 da                	mov    edx,ebx
c0006071:	8d 41 10             	lea    eax,[ecx+0x10]
c0006074:	e8 b4 ed ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0006079:	eb 0b                	jmp    c0006086 <f_opendir+0xbd>
c000607b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000607e:	e8 59 ed ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006083:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0006086:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000608a:	31 d2                	xor    edx,edx
c000608c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006090:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0006094:	89 d8                	mov    eax,ebx
c0006096:	e8 22 d1 ff ff       	call   c00031bd <dir_sdi>
c000609b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000609f:	83 ec 0c             	sub    esp,0xc
c00060a2:	56                   	push   esi
c00060a3:	e8 02 24 00 00       	call   c00084aa <ff_memfree>
c00060a8:	83 c4 10             	add    esp,0x10
c00060ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060af:	83 f8 04             	cmp    eax,0x4
c00060b2:	74 06                	je     c00060ba <f_opendir+0xf1>
c00060b4:	85 c0                	test   eax,eax
c00060b6:	74 0d                	je     c00060c5 <f_opendir+0xfc>
c00060b8:	eb 05                	jmp    c00060bf <f_opendir+0xf6>
c00060ba:	b8 05 00 00 00       	mov    eax,0x5
c00060bf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060c5:	83 c4 24             	add    esp,0x24
c00060c8:	5b                   	pop    ebx
c00060c9:	5e                   	pop    esi
c00060ca:	c3                   	ret    

c00060cb <f_closedir>:
c00060cb:	53                   	push   ebx
c00060cc:	83 ec 18             	sub    esp,0x18
c00060cf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00060d3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00060d7:	89 d8                	mov    eax,ebx
c00060d9:	e8 86 c2 ff ff       	call   c0002364 <validate>
c00060de:	85 c0                	test   eax,eax
c00060e0:	75 06                	jne    c00060e8 <f_closedir+0x1d>
c00060e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060e8:	83 c4 18             	add    esp,0x18
c00060eb:	5b                   	pop    ebx
c00060ec:	c3                   	ret    

c00060ed <f_readdir>:
c00060ed:	57                   	push   edi
c00060ee:	56                   	push   esi
c00060ef:	53                   	push   ebx
c00060f0:	83 ec 20             	sub    esp,0x20
c00060f3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060f7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060fb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060ff:	89 d8                	mov    eax,ebx
c0006101:	e8 5e c2 ff ff       	call   c0002364 <validate>
c0006106:	85 c0                	test   eax,eax
c0006108:	75 77                	jne    c0006181 <f_readdir+0x94>
c000610a:	85 ff                	test   edi,edi
c000610c:	75 0b                	jne    c0006119 <f_readdir+0x2c>
c000610e:	31 d2                	xor    edx,edx
c0006110:	89 d8                	mov    eax,ebx
c0006112:	e8 a6 d0 ff ff       	call   c00031bd <dir_sdi>
c0006117:	eb 68                	jmp    c0006181 <f_readdir+0x94>
c0006119:	83 ec 0c             	sub    esp,0xc
c000611c:	68 60 04 00 00       	push   0x460
c0006121:	e8 6e 23 00 00       	call   c0008494 <ff_memalloc>
c0006126:	83 c4 10             	add    esp,0x10
c0006129:	89 c6                	mov    esi,eax
c000612b:	b8 11 00 00 00       	mov    eax,0x11
c0006130:	85 f6                	test   esi,esi
c0006132:	74 4d                	je     c0006181 <f_readdir+0x94>
c0006134:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006138:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000613e:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006141:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006144:	31 d2                	xor    edx,edx
c0006146:	89 d8                	mov    eax,ebx
c0006148:	e8 80 d8 ff ff       	call   c00039cd <dir_read>
c000614d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006152:	75 19                	jne    c000616d <f_readdir+0x80>
c0006154:	89 fa                	mov    edx,edi
c0006156:	89 d8                	mov    eax,ebx
c0006158:	e8 7e ea ff ff       	call   c0004bdb <get_fileinfo>
c000615d:	31 d2                	xor    edx,edx
c000615f:	89 d8                	mov    eax,ebx
c0006161:	e8 af d5 ff ff       	call   c0003715 <dir_next>
c0006166:	83 f8 04             	cmp    eax,0x4
c0006169:	75 02                	jne    c000616d <f_readdir+0x80>
c000616b:	31 c0                	xor    eax,eax
c000616d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006171:	83 ec 0c             	sub    esp,0xc
c0006174:	56                   	push   esi
c0006175:	e8 30 23 00 00       	call   c00084aa <ff_memfree>
c000617a:	83 c4 10             	add    esp,0x10
c000617d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006181:	83 c4 20             	add    esp,0x20
c0006184:	5b                   	pop    ebx
c0006185:	5e                   	pop    esi
c0006186:	5f                   	pop    edi
c0006187:	c3                   	ret    

c0006188 <f_stat>:
c0006188:	57                   	push   edi
c0006189:	31 c9                	xor    ecx,ecx
c000618b:	56                   	push   esi
c000618c:	53                   	push   ebx
c000618d:	83 ec 50             	sub    esp,0x50
c0006190:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0006194:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006198:	8d 44 24 60          	lea    eax,[esp+0x60]
c000619c:	e8 50 c5 ff ff       	call   c00026f1 <mount_volume>
c00061a1:	89 c3                	mov    ebx,eax
c00061a3:	85 c0                	test   eax,eax
c00061a5:	75 67                	jne    c000620e <f_stat+0x86>
c00061a7:	83 ec 0c             	sub    esp,0xc
c00061aa:	bb 11 00 00 00       	mov    ebx,0x11
c00061af:	68 60 04 00 00       	push   0x460
c00061b4:	e8 db 22 00 00       	call   c0008494 <ff_memalloc>
c00061b9:	83 c4 10             	add    esp,0x10
c00061bc:	89 c6                	mov    esi,eax
c00061be:	85 c0                	test   eax,eax
c00061c0:	74 4c                	je     c000620e <f_stat+0x86>
c00061c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061c6:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00061cc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00061cf:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00061d2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00061d6:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061da:	e8 88 ec ff ff       	call   c0004e67 <follow_path>
c00061df:	89 c3                	mov    ebx,eax
c00061e1:	85 c0                	test   eax,eax
c00061e3:	75 1d                	jne    c0006202 <f_stat+0x7a>
c00061e5:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061ea:	78 11                	js     c00061fd <f_stat+0x75>
c00061ec:	85 ff                	test   edi,edi
c00061ee:	74 12                	je     c0006202 <f_stat+0x7a>
c00061f0:	89 fa                	mov    edx,edi
c00061f2:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061f6:	e8 e0 e9 ff ff       	call   c0004bdb <get_fileinfo>
c00061fb:	eb 05                	jmp    c0006202 <f_stat+0x7a>
c00061fd:	bb 06 00 00 00       	mov    ebx,0x6
c0006202:	83 ec 0c             	sub    esp,0xc
c0006205:	56                   	push   esi
c0006206:	e8 9f 22 00 00       	call   c00084aa <ff_memfree>
c000620b:	83 c4 10             	add    esp,0x10
c000620e:	83 c4 50             	add    esp,0x50
c0006211:	89 d8                	mov    eax,ebx
c0006213:	5b                   	pop    ebx
c0006214:	5e                   	pop    esi
c0006215:	5f                   	pop    edi
c0006216:	c3                   	ret    

c0006217 <f_getfree>:
c0006217:	55                   	push   ebp
c0006218:	31 c9                	xor    ecx,ecx
c000621a:	57                   	push   edi
c000621b:	56                   	push   esi
c000621c:	53                   	push   ebx
c000621d:	83 ec 5c             	sub    esp,0x5c
c0006220:	8d 54 24 24          	lea    edx,[esp+0x24]
c0006224:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006228:	e8 c4 c4 ff ff       	call   c00026f1 <mount_volume>
c000622d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006231:	85 c0                	test   eax,eax
c0006233:	0f 85 9d 01 00 00    	jne    c00063d6 <f_getfree+0x1bf>
c0006239:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000623d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006241:	89 02                	mov    DWORD PTR [edx],eax
c0006243:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006246:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006249:	8d 71 fe             	lea    esi,[ecx-0x2]
c000624c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006250:	39 f2                	cmp    edx,esi
c0006252:	77 0b                	ja     c000625f <f_getfree+0x48>
c0006254:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006258:	89 10                	mov    DWORD PTR [eax],edx
c000625a:	e9 77 01 00 00       	jmp    c00063d6 <f_getfree+0x1bf>
c000625f:	8a 10                	mov    dl,BYTE PTR [eax]
c0006261:	80 fa 01             	cmp    dl,0x1
c0006264:	75 3a                	jne    c00062a0 <f_getfree+0x89>
c0006266:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000626a:	be 02 00 00 00       	mov    esi,0x2
c000626f:	31 db                	xor    ebx,ebx
c0006271:	89 f2                	mov    edx,esi
c0006273:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006277:	e8 4b cd ff ff       	call   c0002fc7 <get_fat>
c000627c:	83 f8 ff             	cmp    eax,0xffffffff
c000627f:	0f 84 28 01 00 00    	je     c00063ad <f_getfree+0x196>
c0006285:	83 f8 01             	cmp    eax,0x1
c0006288:	0f 84 29 01 00 00    	je     c00063b7 <f_getfree+0x1a0>
c000628e:	83 d3 00             	adc    ebx,0x0
c0006291:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006295:	46                   	inc    esi
c0006296:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006299:	77 d6                	ja     c0006271 <f_getfree+0x5a>
c000629b:	e9 25 01 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c00062a0:	80 fa 04             	cmp    dl,0x4
c00062a3:	0f 85 88 00 00 00    	jne    c0006331 <f_getfree+0x11a>
c00062a9:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00062ac:	31 ed                	xor    ebp,ebp
c00062ae:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00062b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062b5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062b9:	31 db                	xor    ebx,ebx
c00062bb:	85 ed                	test   ebp,ebp
c00062bd:	75 3f                	jne    c00062fe <f_getfree+0xe7>
c00062bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00062c7:	83 c0 01             	add    eax,0x1
c00062ca:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00062ce:	83 d2 00             	adc    edx,0x0
c00062d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00062d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00062d9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062e1:	e8 59 c1 ff ff       	call   c000243f <move_window>
c00062e6:	85 c0                	test   eax,eax
c00062e8:	0f 85 d3 00 00 00    	jne    c00063c1 <f_getfree+0x1aa>
c00062ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062fa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062fe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006302:	8d 4e f8             	lea    ecx,[esi-0x8]
c0006305:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006309:	89 cf                	mov    edi,ecx
c000630b:	85 f6                	test   esi,esi
c000630d:	74 12                	je     c0006321 <f_getfree+0x10a>
c000630f:	88 c1                	mov    cl,al
c0006311:	83 e1 01             	and    ecx,0x1
c0006314:	80 f9 01             	cmp    cl,0x1
c0006317:	83 d3 00             	adc    ebx,0x0
c000631a:	d0 e8                	shr    al,1
c000631c:	4e                   	dec    esi
c000631d:	39 fe                	cmp    esi,edi
c000631f:	75 ea                	jne    c000630b <f_getfree+0xf4>
c0006321:	45                   	inc    ebp
c0006322:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006328:	85 f6                	test   esi,esi
c000632a:	75 8f                	jne    c00062bb <f_getfree+0xa4>
c000632c:	e9 94 00 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c0006331:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006334:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006337:	31 f6                	xor    esi,esi
c0006339:	31 db                	xor    ebx,ebx
c000633b:	85 f6                	test   esi,esi
c000633d:	75 1b                	jne    c000635a <f_getfree+0x143>
c000633f:	89 d7                	mov    edi,edx
c0006341:	89 cd                	mov    ebp,ecx
c0006343:	83 c7 01             	add    edi,0x1
c0006346:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000634a:	83 d5 00             	adc    ebp,0x0
c000634d:	e8 ed c0 ff ff       	call   c000243f <move_window>
c0006352:	85 c0                	test   eax,eax
c0006354:	75 6b                	jne    c00063c1 <f_getfree+0x1aa>
c0006356:	89 fa                	mov    edx,edi
c0006358:	89 e9                	mov    ecx,ebp
c000635a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000635e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006362:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006366:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006369:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000636d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006371:	75 11                	jne    c0006384 <f_getfree+0x16d>
c0006373:	e8 e9 b8 ff ff       	call   c0001c61 <ld_word>
c0006378:	66 83 f8 01          	cmp    ax,0x1
c000637c:	83 d3 00             	adc    ebx,0x0
c000637f:	83 c6 02             	add    esi,0x2
c0006382:	eb 13                	jmp    c0006397 <f_getfree+0x180>
c0006384:	e8 e5 b8 ff ff       	call   c0001c6e <ld_dword>
c0006389:	25 ff ff ff 0f       	and    eax,0xfffffff
c000638e:	83 f8 01             	cmp    eax,0x1
c0006391:	83 d3 00             	adc    ebx,0x0
c0006394:	83 c6 04             	add    esi,0x4
c0006397:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000639d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063a1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00063a5:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00063a9:	75 90                	jne    c000633b <f_getfree+0x124>
c00063ab:	eb 18                	jmp    c00063c5 <f_getfree+0x1ae>
c00063ad:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00063b5:	eb 0e                	jmp    c00063c5 <f_getfree+0x1ae>
c00063b7:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00063bf:	eb 04                	jmp    c00063c5 <f_getfree+0x1ae>
c00063c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063c5:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00063c9:	89 18                	mov    DWORD PTR [eax],ebx
c00063cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00063cf:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00063d2:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00063d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063da:	83 c4 5c             	add    esp,0x5c
c00063dd:	5b                   	pop    ebx
c00063de:	5e                   	pop    esi
c00063df:	5f                   	pop    edi
c00063e0:	5d                   	pop    ebp
c00063e1:	c3                   	ret    

c00063e2 <f_truncate>:
c00063e2:	56                   	push   esi
c00063e3:	53                   	push   ebx
c00063e4:	83 ec 14             	sub    esp,0x14
c00063e7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063eb:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063ef:	89 d8                	mov    eax,ebx
c00063f1:	e8 6e bf ff ff       	call   c0002364 <validate>
c00063f6:	89 c6                	mov    esi,eax
c00063f8:	85 c0                	test   eax,eax
c00063fa:	0f 85 d2 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c0006400:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c0006404:	85 f6                	test   esi,esi
c0006406:	0f 85 c6 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c000640c:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006410:	0f 84 b7 00 00 00    	je     c00064cd <f_truncate+0xeb>
c0006416:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006419:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000641c:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000641f:	89 d1                	mov    ecx,edx
c0006421:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006424:	0f 83 a8 00 00 00    	jae    c00064d2 <f_truncate+0xf0>
c000642a:	09 c2                	or     edx,eax
c000642c:	75 15                	jne    c0006443 <f_truncate+0x61>
c000642e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006431:	31 c9                	xor    ecx,ecx
c0006433:	89 d8                	mov    eax,ebx
c0006435:	e8 7a d0 ff ff       	call   c00034b4 <remove_chain>
c000643a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006441:	eb 35                	jmp    c0006478 <f_truncate+0x96>
c0006443:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006446:	89 d8                	mov    eax,ebx
c0006448:	e8 7a cb ff ff       	call   c0002fc7 <get_fat>
c000644d:	89 c2                	mov    edx,eax
c000644f:	b8 01 00 00 00       	mov    eax,0x1
c0006454:	83 fa ff             	cmp    edx,0xffffffff
c0006457:	74 1f                	je     c0006478 <f_truncate+0x96>
c0006459:	b8 02 00 00 00       	mov    eax,0x2
c000645e:	83 fa 01             	cmp    edx,0x1
c0006461:	74 15                	je     c0006478 <f_truncate+0x96>
c0006463:	31 c0                	xor    eax,eax
c0006465:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006469:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000646c:	76 0a                	jbe    c0006478 <f_truncate+0x96>
c000646e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006471:	89 d8                	mov    eax,ebx
c0006473:	e8 3c d0 ff ff       	call   c00034b4 <remove_chain>
c0006478:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000647b:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000647e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006481:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006484:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006487:	83 ca 40             	or     edx,0x40
c000648a:	85 c0                	test   eax,eax
c000648c:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000648f:	75 35                	jne    c00064c6 <f_truncate+0xe4>
c0006491:	84 d2                	test   dl,dl
c0006493:	79 3d                	jns    c00064d2 <f_truncate+0xf0>
c0006495:	83 ec 0c             	sub    esp,0xc
c0006498:	8d 43 50             	lea    eax,[ebx+0x50]
c000649b:	6a 01                	push   0x1
c000649d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00064a0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00064a3:	50                   	push   eax
c00064a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00064a8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00064ac:	50                   	push   eax
c00064ad:	e8 7a b7 ff ff       	call   c0001c2c <disk_write>
c00064b2:	83 c4 20             	add    esp,0x20
c00064b5:	85 c0                	test   eax,eax
c00064b7:	75 08                	jne    c00064c1 <f_truncate+0xdf>
c00064b9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00064bd:	31 f6                	xor    esi,esi
c00064bf:	eb 11                	jmp    c00064d2 <f_truncate+0xf0>
c00064c1:	b8 01 00 00 00       	mov    eax,0x1
c00064c6:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00064c9:	89 c6                	mov    esi,eax
c00064cb:	eb 05                	jmp    c00064d2 <f_truncate+0xf0>
c00064cd:	be 07 00 00 00       	mov    esi,0x7
c00064d2:	89 f0                	mov    eax,esi
c00064d4:	83 c4 14             	add    esp,0x14
c00064d7:	5b                   	pop    ebx
c00064d8:	5e                   	pop    esi
c00064d9:	c3                   	ret    

c00064da <f_unlink>:
c00064da:	56                   	push   esi
c00064db:	b9 02 00 00 00       	mov    ecx,0x2
c00064e0:	53                   	push   ebx
c00064e1:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064e7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064eb:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064f2:	e8 fa c1 ff ff       	call   c00026f1 <mount_volume>
c00064f7:	85 c0                	test   eax,eax
c00064f9:	0f 85 55 01 00 00    	jne    c0006654 <f_unlink+0x17a>
c00064ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006503:	83 ec 0c             	sub    esp,0xc
c0006506:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000650a:	68 60 04 00 00       	push   0x460
c000650f:	e8 80 1f 00 00       	call   c0008494 <ff_memalloc>
c0006514:	83 c4 10             	add    esp,0x10
c0006517:	89 c3                	mov    ebx,eax
c0006519:	b8 11 00 00 00       	mov    eax,0x11
c000651e:	85 db                	test   ebx,ebx
c0006520:	0f 84 2e 01 00 00    	je     c0006654 <f_unlink+0x17a>
c0006526:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000652a:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006530:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006533:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006536:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000653d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006541:	e8 21 e9 ff ff       	call   c0004e67 <follow_path>
c0006546:	85 c0                	test   eax,eax
c0006548:	0f 85 f2 00 00 00    	jne    c0006640 <f_unlink+0x166>
c000654e:	b8 06 00 00 00       	mov    eax,0x6
c0006553:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000655b:	0f 88 df 00 00 00    	js     c0006640 <f_unlink+0x166>
c0006561:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006566:	74 0a                	je     c0006572 <f_unlink+0x98>
c0006568:	b8 07 00 00 00       	mov    eax,0x7
c000656d:	e9 ce 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c0006572:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006576:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000657a:	8a 02                	mov    al,BYTE PTR [edx]
c000657c:	3c 04                	cmp    al,0x4
c000657e:	75 12                	jne    c0006592 <f_unlink+0xb8>
c0006580:	8d 42 10             	lea    eax,[edx+0x10]
c0006583:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006587:	e8 a1 e8 ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c000658c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006590:	eb 0e                	jmp    c00065a0 <f_unlink+0xc6>
c0006592:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006599:	e8 3e e8 ff ff       	call   c0004ddc <ld_clust.isra.0>
c000659e:	89 c6                	mov    esi,eax
c00065a0:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00065a5:	75 12                	jne    c00065b9 <f_unlink+0xdf>
c00065a7:	8d 44 24 48          	lea    eax,[esp+0x48]
c00065ab:	e8 94 d6 ff ff       	call   c0003c44 <dir_remove>
c00065b0:	85 c0                	test   eax,eax
c00065b2:	74 6c                	je     c0006620 <f_unlink+0x146>
c00065b4:	e9 87 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c00065b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065bd:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00065c4:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00065cb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065ce:	75 21                	jne    c00065f1 <f_unlink+0x117>
c00065d0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00065d4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00065d8:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065df:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065e6:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065ea:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065f1:	31 d2                	xor    edx,edx
c00065f3:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065fa:	e8 be cb ff ff       	call   c00031bd <dir_sdi>
c00065ff:	85 c0                	test   eax,eax
c0006601:	75 3d                	jne    c0006640 <f_unlink+0x166>
c0006603:	31 d2                	xor    edx,edx
c0006605:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c000660c:	e8 bc d3 ff ff       	call   c00039cd <dir_read>
c0006611:	85 c0                	test   eax,eax
c0006613:	0f 84 4f ff ff ff    	je     c0006568 <f_unlink+0x8e>
c0006619:	83 f8 04             	cmp    eax,0x4
c000661c:	75 22                	jne    c0006640 <f_unlink+0x166>
c000661e:	eb 87                	jmp    c00065a7 <f_unlink+0xcd>
c0006620:	85 f6                	test   esi,esi
c0006622:	75 0b                	jne    c000662f <f_unlink+0x155>
c0006624:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006628:	e8 3d df ff ff       	call   c000456a <sync_fs>
c000662d:	eb 11                	jmp    c0006640 <f_unlink+0x166>
c000662f:	31 c9                	xor    ecx,ecx
c0006631:	89 f2                	mov    edx,esi
c0006633:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006637:	e8 78 ce ff ff       	call   c00034b4 <remove_chain>
c000663c:	85 c0                	test   eax,eax
c000663e:	74 e4                	je     c0006624 <f_unlink+0x14a>
c0006640:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006644:	83 ec 0c             	sub    esp,0xc
c0006647:	53                   	push   ebx
c0006648:	e8 5d 1e 00 00       	call   c00084aa <ff_memfree>
c000664d:	83 c4 10             	add    esp,0x10
c0006650:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006654:	81 c4 e4 00 00 00    	add    esp,0xe4
c000665a:	5b                   	pop    ebx
c000665b:	5e                   	pop    esi
c000665c:	c3                   	ret    

c000665d <f_mkdir>:
c000665d:	57                   	push   edi
c000665e:	b9 02 00 00 00       	mov    ecx,0x2
c0006663:	56                   	push   esi
c0006664:	53                   	push   ebx
c0006665:	83 c4 80             	add    esp,0xffffff80
c0006668:	8d 54 24 08          	lea    edx,[esp+0x8]
c000666c:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006673:	e8 79 c0 ff ff       	call   c00026f1 <mount_volume>
c0006678:	89 c3                	mov    ebx,eax
c000667a:	85 c0                	test   eax,eax
c000667c:	0f 85 fe 01 00 00    	jne    c0006880 <f_mkdir+0x223>
c0006682:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006686:	bb 11 00 00 00       	mov    ebx,0x11
c000668b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000668f:	83 ec 0c             	sub    esp,0xc
c0006692:	68 60 04 00 00       	push   0x460
c0006697:	e8 f8 1d 00 00       	call   c0008494 <ff_memalloc>
c000669c:	83 c4 10             	add    esp,0x10
c000669f:	89 c7                	mov    edi,eax
c00066a1:	85 c0                	test   eax,eax
c00066a3:	0f 84 d7 01 00 00    	je     c0006880 <f_mkdir+0x223>
c00066a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066ad:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00066b3:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00066b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066b9:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00066c0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066c4:	e8 9e e7 ff ff       	call   c0004e67 <follow_path>
c00066c9:	89 c3                	mov    ebx,eax
c00066cb:	85 c0                	test   eax,eax
c00066cd:	74 3e                	je     c000670d <f_mkdir+0xb0>
c00066cf:	83 f8 04             	cmp    eax,0x4
c00066d2:	75 3e                	jne    c0006712 <f_mkdir+0xb5>
c00066d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066d8:	31 d2                	xor    edx,edx
c00066da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066de:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066e2:	e8 ce cb ff ff       	call   c00032b5 <create_chain>
c00066e7:	89 c6                	mov    esi,eax
c00066e9:	85 c0                	test   eax,eax
c00066eb:	74 0c                	je     c00066f9 <f_mkdir+0x9c>
c00066ed:	bb 02 00 00 00       	mov    ebx,0x2
c00066f2:	83 f8 01             	cmp    eax,0x1
c00066f5:	74 07                	je     c00066fe <f_mkdir+0xa1>
c00066f7:	eb 2a                	jmp    c0006723 <f_mkdir+0xc6>
c00066f9:	bb 07 00 00 00       	mov    ebx,0x7
c00066fe:	31 c9                	xor    ecx,ecx
c0006700:	89 f2                	mov    edx,esi
c0006702:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006706:	e8 a9 cd ff ff       	call   c00034b4 <remove_chain>
c000670b:	eb 05                	jmp    c0006712 <f_mkdir+0xb5>
c000670d:	bb 08 00 00 00       	mov    ebx,0x8
c0006712:	83 ec 0c             	sub    esp,0xc
c0006715:	57                   	push   edi
c0006716:	e8 8f 1d 00 00       	call   c00084aa <ff_memfree>
c000671b:	83 c4 10             	add    esp,0x10
c000671e:	e9 5d 01 00 00       	jmp    c0006880 <f_mkdir+0x223>
c0006723:	bb 01 00 00 00       	mov    ebx,0x1
c0006728:	83 f8 ff             	cmp    eax,0xffffffff
c000672b:	74 d1                	je     c00066fe <f_mkdir+0xa1>
c000672d:	89 f2                	mov    edx,esi
c000672f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006733:	e8 c4 ce ff ff       	call   c00035fc <dir_clear>
c0006738:	89 c3                	mov    ebx,eax
c000673a:	85 c0                	test   eax,eax
c000673c:	75 c0                	jne    c00066fe <f_mkdir+0xa1>
c000673e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006742:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006745:	74 69                	je     c00067b0 <f_mkdir+0x153>
c0006747:	b9 0b 00 00 00       	mov    ecx,0xb
c000674c:	83 c0 54             	add    eax,0x54
c000674f:	ba 20 00 00 00       	mov    edx,0x20
c0006754:	e8 9c b5 ff ff       	call   c0001cf5 <mem_set>
c0006759:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675d:	ba 00 00 21 50       	mov    edx,0x50210000
c0006762:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006766:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000676a:	83 c0 6a             	add    eax,0x6a
c000676d:	e8 65 b5 ff ff       	call   c0001cd7 <st_dword>
c0006772:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006776:	89 f1                	mov    ecx,esi
c0006778:	8d 50 54             	lea    edx,[eax+0x54]
c000677b:	e8 85 e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006780:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006784:	b9 20 00 00 00       	mov    ecx,0x20
c0006789:	8d 50 54             	lea    edx,[eax+0x54]
c000678c:	83 c0 74             	add    eax,0x74
c000678f:	e8 4c b5 ff ff       	call   c0001ce0 <mem_cpy>
c0006794:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006798:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000679c:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00067a0:	8d 50 74             	lea    edx,[eax+0x74]
c00067a3:	e8 5d e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c00067a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067ac:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00067b0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067b4:	e8 2f db ff ff       	call   c00042e8 <dir_register>
c00067b9:	89 c3                	mov    ebx,eax
c00067bb:	85 c0                	test   eax,eax
c00067bd:	0f 85 3b ff ff ff    	jne    c00066fe <f_mkdir+0xa1>
c00067c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067c7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00067ca:	75 74                	jne    c0006840 <f_mkdir+0x1e3>
c00067cc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067cf:	ba 00 00 21 50       	mov    edx,0x50210000
c00067d4:	83 c0 0c             	add    eax,0xc
c00067d7:	e8 fb b4 ff ff       	call   c0001cd7 <st_dword>
c00067dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e0:	89 f2                	mov    edx,esi
c00067e2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067e5:	83 c0 34             	add    eax,0x34
c00067e8:	e8 ea b4 ff ff       	call   c0001cd7 <st_dword>
c00067ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067f1:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067f5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067f8:	c1 e2 09             	shl    edx,0x9
c00067fb:	83 c0 38             	add    eax,0x38
c00067fe:	e8 d4 b4 ff ff       	call   c0001cd7 <st_dword>
c0006803:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006807:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000680b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000680e:	c1 e2 09             	shl    edx,0x9
c0006811:	83 c0 28             	add    eax,0x28
c0006814:	e8 be b4 ff ff       	call   c0001cd7 <st_dword>
c0006819:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006820:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006824:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006827:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c000682b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000682f:	e8 8b d3 ff ff       	call   c0003bbf <store_xdir>
c0006834:	89 c3                	mov    ebx,eax
c0006836:	85 c0                	test   eax,eax
c0006838:	0f 85 d4 fe ff ff    	jne    c0006712 <f_mkdir+0xb5>
c000683e:	eb 30                	jmp    c0006870 <f_mkdir+0x213>
c0006840:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006844:	ba 00 00 21 50       	mov    edx,0x50210000
c0006849:	83 c0 16             	add    eax,0x16
c000684c:	e8 86 b4 ff ff       	call   c0001cd7 <st_dword>
c0006851:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006855:	89 f1                	mov    ecx,esi
c0006857:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000685b:	e8 a5 e5 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006860:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006864:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006868:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000686c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006870:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006874:	e8 f1 dc ff ff       	call   c000456a <sync_fs>
c0006879:	89 c3                	mov    ebx,eax
c000687b:	e9 92 fe ff ff       	jmp    c0006712 <f_mkdir+0xb5>
c0006880:	83 ec 80             	sub    esp,0xffffff80
c0006883:	89 d8                	mov    eax,ebx
c0006885:	5b                   	pop    ebx
c0006886:	5e                   	pop    esi
c0006887:	5f                   	pop    edi
c0006888:	c3                   	ret    

c0006889 <f_rename>:
c0006889:	55                   	push   ebp
c000688a:	57                   	push   edi
c000688b:	56                   	push   esi
c000688c:	53                   	push   ebx
c000688d:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006893:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000689a:	e8 a4 b9 ff ff       	call   c0002243 <get_ldnumber>
c000689f:	b9 02 00 00 00       	mov    ecx,0x2
c00068a4:	8d 54 24 14          	lea    edx,[esp+0x14]
c00068a8:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00068af:	e8 3d be ff ff       	call   c00026f1 <mount_volume>
c00068b4:	85 c0                	test   eax,eax
c00068b6:	0f 85 b5 02 00 00    	jne    c0006b71 <f_rename+0x2e8>
c00068bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068c0:	83 ec 0c             	sub    esp,0xc
c00068c3:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00068c7:	68 60 04 00 00       	push   0x460
c00068cc:	e8 c3 1b 00 00       	call   c0008494 <ff_memalloc>
c00068d1:	83 c4 10             	add    esp,0x10
c00068d4:	89 c3                	mov    ebx,eax
c00068d6:	b8 11 00 00 00       	mov    eax,0x11
c00068db:	85 db                	test   ebx,ebx
c00068dd:	0f 84 8e 02 00 00    	je     c0006b71 <f_rename+0x2e8>
c00068e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e7:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068ed:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068f0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068f3:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068fa:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068fe:	e8 64 e5 ff ff       	call   c0004e67 <follow_path>
c0006903:	85 c0                	test   eax,eax
c0006905:	0f 85 52 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000690b:	b8 06 00 00 00       	mov    eax,0x6
c0006910:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006918:	0f 85 3f 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000691e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006922:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006925:	0f 85 05 01 00 00    	jne    c0006a30 <f_rename+0x1a7>
c000692b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000692e:	b9 40 00 00 00       	mov    ecx,0x40
c0006933:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006937:	e8 a4 b3 ff ff       	call   c0001ce0 <mem_cpy>
c000693c:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006941:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006945:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000694c:	e8 8f b3 ff ff       	call   c0001ce0 <mem_cpy>
c0006951:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006958:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000695f:	e8 03 e5 ff ff       	call   c0004e67 <follow_path>
c0006964:	85 c0                	test   eax,eax
c0006966:	75 29                	jne    c0006991 <f_rename+0x108>
c0006968:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000696c:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006973:	74 0a                	je     c000697f <f_rename+0xf6>
c0006975:	b8 08 00 00 00       	mov    eax,0x8
c000697a:	e9 de 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c000697f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006986:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000698d:	75 e6                	jne    c0006975 <f_rename+0xec>
c000698f:	eb 09                	jmp    c000699a <f_rename+0x111>
c0006991:	83 f8 04             	cmp    eax,0x4
c0006994:	0f 85 c3 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000699a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a1:	e8 42 d9 ff ff       	call   c00042e8 <dir_register>
c00069a6:	85 c0                	test   eax,eax
c00069a8:	0f 85 af 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c00069ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b2:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00069b5:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00069b8:	89 c5                	mov    ebp,eax
c00069ba:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00069bd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00069c1:	8d 46 24             	lea    eax,[esi+0x24]
c00069c4:	e8 98 b2 ff ff       	call   c0001c61 <ld_word>
c00069c9:	b9 40 00 00 00       	mov    ecx,0x40
c00069ce:	89 c7                	mov    edi,eax
c00069d0:	8d 54 24 18          	lea    edx,[esp+0x18]
c00069d4:	89 f0                	mov    eax,esi
c00069d6:	e8 05 b3 ff ff       	call   c0001ce0 <mem_cpy>
c00069db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069df:	89 e9                	mov    ecx,ebp
c00069e1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069e4:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069e7:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069ef:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069f2:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069f5:	0f b7 d7             	movzx  edx,di
c00069f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069fb:	83 c0 24             	add    eax,0x24
c00069fe:	e8 d0 b2 ff ff       	call   c0001cd3 <st_word>
c0006a03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a07:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006a0a:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006a0d:	a8 10                	test   al,0x10
c0006a0f:	75 06                	jne    c0006a17 <f_rename+0x18e>
c0006a11:	83 c8 20             	or     eax,0x20
c0006a14:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006a17:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1e:	e8 9c d1 ff ff       	call   c0003bbf <store_xdir>
c0006a23:	85 c0                	test   eax,eax
c0006a25:	0f 84 1c 01 00 00    	je     c0006b47 <f_rename+0x2be>
c0006a2b:	e9 2d 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c0006a30:	b9 20 00 00 00       	mov    ecx,0x20
c0006a35:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a3c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a40:	e8 9b b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a45:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a4a:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a4e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a55:	e8 86 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a5a:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a61:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a68:	e8 fa e3 ff ff       	call   c0004e67 <follow_path>
c0006a6d:	85 c0                	test   eax,eax
c0006a6f:	75 27                	jne    c0006a98 <f_rename+0x20f>
c0006a71:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a75:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a7c:	0f 85 f3 fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a82:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a89:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a90:	0f 85 df fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a96:	eb 09                	jmp    c0006aa1 <f_rename+0x218>
c0006a98:	83 f8 04             	cmp    eax,0x4
c0006a9b:	0f 85 bc 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006aa1:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006aa8:	e8 3b d8 ff ff       	call   c00042e8 <dir_register>
c0006aad:	85 c0                	test   eax,eax
c0006aaf:	0f 85 a8 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006ab5:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006abc:	b9 13 00 00 00       	mov    ecx,0x13
c0006ac1:	8d 46 0d             	lea    eax,[esi+0xd]
c0006ac4:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006ac8:	e8 13 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006acd:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006ad1:	a8 10                	test   al,0x10
c0006ad3:	75 03                	jne    c0006ad8 <f_rename+0x24f>
c0006ad5:	83 c8 20             	or     eax,0x20
c0006ad8:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006adb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006adf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ae3:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006ae7:	74 5e                	je     c0006b47 <f_rename+0x2be>
c0006ae9:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006af0:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006af4:	74 51                	je     c0006b47 <f_rename+0x2be>
c0006af6:	89 f2                	mov    edx,esi
c0006af8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006afc:	8a 07                	mov    al,BYTE PTR [edi]
c0006afe:	e8 d9 e2 ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006b03:	89 c2                	mov    edx,eax
c0006b05:	89 f8                	mov    eax,edi
c0006b07:	e8 ee b3 ff ff       	call   c0001efa <clst2sect>
c0006b0c:	89 c6                	mov    esi,eax
c0006b0e:	89 d1                	mov    ecx,edx
c0006b10:	b8 02 00 00 00       	mov    eax,0x2
c0006b15:	09 f2                	or     edx,esi
c0006b17:	74 44                	je     c0006b5d <f_rename+0x2d4>
c0006b19:	89 f2                	mov    edx,esi
c0006b1b:	89 f8                	mov    eax,edi
c0006b1d:	e8 1d b9 ff ff       	call   c000243f <move_window>
c0006b22:	85 c0                	test   eax,eax
c0006b24:	75 37                	jne    c0006b5d <f_rename+0x2d4>
c0006b26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b2a:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006b2e:	75 17                	jne    c0006b47 <f_rename+0x2be>
c0006b30:	8d 50 74             	lea    edx,[eax+0x74]
c0006b33:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b3a:	e8 c6 e2 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006b3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b43:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b47:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b4b:	e8 f4 d0 ff ff       	call   c0003c44 <dir_remove>
c0006b50:	85 c0                	test   eax,eax
c0006b52:	75 09                	jne    c0006b5d <f_rename+0x2d4>
c0006b54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b58:	e8 0d da ff ff       	call   c000456a <sync_fs>
c0006b5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b61:	83 ec 0c             	sub    esp,0xc
c0006b64:	53                   	push   ebx
c0006b65:	e8 40 19 00 00       	call   c00084aa <ff_memfree>
c0006b6a:	83 c4 10             	add    esp,0x10
c0006b6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b71:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b77:	5b                   	pop    ebx
c0006b78:	5e                   	pop    esi
c0006b79:	5f                   	pop    edi
c0006b7a:	5d                   	pop    ebp
c0006b7b:	c3                   	ret    

c0006b7c <f_chmod>:
c0006b7c:	57                   	push   edi
c0006b7d:	b9 02 00 00 00       	mov    ecx,0x2
c0006b82:	56                   	push   esi
c0006b83:	53                   	push   ebx
c0006b84:	83 ec 60             	sub    esp,0x60
c0006b87:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b8b:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b8f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b93:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b97:	e8 55 bb ff ff       	call   c00026f1 <mount_volume>
c0006b9c:	85 c0                	test   eax,eax
c0006b9e:	0f 85 af 00 00 00    	jne    c0006c53 <f_chmod+0xd7>
c0006ba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba8:	83 ec 0c             	sub    esp,0xc
c0006bab:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006baf:	68 60 04 00 00       	push   0x460
c0006bb4:	e8 db 18 00 00       	call   c0008494 <ff_memalloc>
c0006bb9:	83 c4 10             	add    esp,0x10
c0006bbc:	89 c6                	mov    esi,eax
c0006bbe:	b8 11 00 00 00       	mov    eax,0x11
c0006bc3:	85 f6                	test   esi,esi
c0006bc5:	0f 84 88 00 00 00    	je     c0006c53 <f_chmod+0xd7>
c0006bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bcf:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006bd5:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006bd8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bdb:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bdf:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006be3:	e8 7f e2 ff ff       	call   c0004e67 <follow_path>
c0006be8:	85 c0                	test   eax,eax
c0006bea:	75 53                	jne    c0006c3f <f_chmod+0xc3>
c0006bec:	b8 06 00 00 00       	mov    eax,0x6
c0006bf1:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bf6:	75 47                	jne    c0006c3f <f_chmod+0xc3>
c0006bf8:	89 f9                	mov    ecx,edi
c0006bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bfe:	83 e1 27             	and    ecx,0x27
c0006c01:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c04:	75 1d                	jne    c0006c23 <f_chmod+0xa7>
c0006c06:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006c09:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c0c:	21 cb                	and    ebx,ecx
c0006c0e:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c11:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006c14:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c18:	e8 a2 cf ff ff       	call   c0003bbf <store_xdir>
c0006c1d:	85 c0                	test   eax,eax
c0006c1f:	75 1e                	jne    c0006c3f <f_chmod+0xc3>
c0006c21:	eb 13                	jmp    c0006c36 <f_chmod+0xba>
c0006c23:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006c27:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2a:	21 cb                	and    ebx,ecx
c0006c2c:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2f:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006c32:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c3a:	e8 2b d9 ff ff       	call   c000456a <sync_fs>
c0006c3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	56                   	push   esi
c0006c47:	e8 5e 18 00 00       	call   c00084aa <ff_memfree>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c53:	83 c4 60             	add    esp,0x60
c0006c56:	5b                   	pop    ebx
c0006c57:	5e                   	pop    esi
c0006c58:	5f                   	pop    edi
c0006c59:	c3                   	ret    

c0006c5a <f_utime>:
c0006c5a:	56                   	push   esi
c0006c5b:	b9 02 00 00 00       	mov    ecx,0x2
c0006c60:	53                   	push   ebx
c0006c61:	83 ec 64             	sub    esp,0x64
c0006c64:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c68:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c70:	e8 7c ba ff ff       	call   c00026f1 <mount_volume>
c0006c75:	85 c0                	test   eax,eax
c0006c77:	0f 85 b5 00 00 00    	jne    c0006d32 <f_utime+0xd8>
c0006c7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c81:	83 ec 0c             	sub    esp,0xc
c0006c84:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c88:	68 60 04 00 00       	push   0x460
c0006c8d:	e8 02 18 00 00       	call   c0008494 <ff_memalloc>
c0006c92:	83 c4 10             	add    esp,0x10
c0006c95:	89 c3                	mov    ebx,eax
c0006c97:	b8 11 00 00 00       	mov    eax,0x11
c0006c9c:	85 db                	test   ebx,ebx
c0006c9e:	0f 84 8e 00 00 00    	je     c0006d32 <f_utime+0xd8>
c0006ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ca8:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006cae:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006cb1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006cb4:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 a6 e1 ff ff       	call   c0004e67 <follow_path>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 59                	jne    c0006d1e <f_utime+0xc4>
c0006cc5:	b8 06 00 00 00       	mov    eax,0x6
c0006cca:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006ccf:	75 4d                	jne    c0006d1e <f_utime+0xc4>
c0006cd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd5:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006cd9:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006cdd:	c1 e2 10             	shl    edx,0x10
c0006ce0:	09 ca                	or     edx,ecx
c0006ce2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ce5:	75 1a                	jne    c0006d01 <f_utime+0xa7>
c0006ce7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cea:	83 c0 0c             	add    eax,0xc
c0006ced:	e8 e5 af ff ff       	call   c0001cd7 <st_dword>
c0006cf2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cf6:	e8 c4 ce ff ff       	call   c0003bbf <store_xdir>
c0006cfb:	85 c0                	test   eax,eax
c0006cfd:	75 1f                	jne    c0006d1e <f_utime+0xc4>
c0006cff:	eb 14                	jmp    c0006d15 <f_utime+0xbb>
c0006d01:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d05:	83 c0 16             	add    eax,0x16
c0006d08:	e8 ca af ff ff       	call   c0001cd7 <st_dword>
c0006d0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d11:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d19:	e8 4c d8 ff ff       	call   c000456a <sync_fs>
c0006d1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d22:	83 ec 0c             	sub    esp,0xc
c0006d25:	53                   	push   ebx
c0006d26:	e8 7f 17 00 00       	call   c00084aa <ff_memfree>
c0006d2b:	83 c4 10             	add    esp,0x10
c0006d2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d32:	83 c4 64             	add    esp,0x64
c0006d35:	5b                   	pop    ebx
c0006d36:	5e                   	pop    esi
c0006d37:	c3                   	ret    

c0006d38 <f_getlabel>:
c0006d38:	55                   	push   ebp
c0006d39:	31 c9                	xor    ecx,ecx
c0006d3b:	57                   	push   edi
c0006d3c:	56                   	push   esi
c0006d3d:	53                   	push   ebx
c0006d3e:	83 ec 6c             	sub    esp,0x6c
c0006d41:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d45:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d4c:	e8 a0 b9 ff ff       	call   c00026f1 <mount_volume>
c0006d51:	89 c6                	mov    esi,eax
c0006d53:	85 c0                	test   eax,eax
c0006d55:	0f 85 c1 01 00 00    	jne    c0006f1c <f_getlabel+0x1e4>
c0006d5b:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d63:	0f 84 5f 01 00 00    	je     c0006ec8 <f_getlabel+0x190>
c0006d69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6d:	31 d2                	xor    edx,edx
c0006d6f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d73:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d7b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d7f:	e8 39 c4 ff ff       	call   c00031bd <dir_sdi>
c0006d84:	85 c0                	test   eax,eax
c0006d86:	0f 85 2d 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006d8c:	ba 01 00 00 00       	mov    edx,0x1
c0006d91:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d95:	e8 33 cc ff ff       	call   c00039cd <dir_read>
c0006d9a:	85 c0                	test   eax,eax
c0006d9c:	0f 85 17 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006da6:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006da9:	74 09                	je     c0006db4 <f_getlabel+0x7c>
c0006dab:	31 db                	xor    ebx,ebx
c0006dad:	31 c9                	xor    ecx,ecx
c0006daf:	e9 c8 00 00 00       	jmp    c0006e7c <f_getlabel+0x144>
c0006db4:	31 ed                	xor    ebp,ebp
c0006db6:	31 db                	xor    ebx,ebx
c0006db8:	31 ff                	xor    edi,edi
c0006dba:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006dbe:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006dc2:	39 fa                	cmp    edx,edi
c0006dc4:	76 4b                	jbe    c0006e11 <f_getlabel+0xd9>
c0006dc6:	47                   	inc    edi
c0006dc7:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006dca:	01 d0                	add    eax,edx
c0006dcc:	e8 90 ae ff ff       	call   c0001c61 <ld_word>
c0006dd1:	66 85 ed             	test   bp,bp
c0006dd4:	75 0d                	jne    c0006de3 <f_getlabel+0xab>
c0006dd6:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006ddc:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006de1:	76 28                	jbe    c0006e0b <f_getlabel+0xd3>
c0006de3:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006dea:	89 e9                	mov    ecx,ebp
c0006dec:	01 da                	add    edx,ebx
c0006dee:	c1 e1 10             	shl    ecx,0x10
c0006df1:	0f b7 c0             	movzx  eax,ax
c0006df4:	09 c8                	or     eax,ecx
c0006df6:	b9 04 00 00 00       	mov    ecx,0x4
c0006dfb:	e8 01 b0 ff ff       	call   c0001e01 <put_utf>
c0006e00:	84 c0                	test   al,al
c0006e02:	74 0b                	je     c0006e0f <f_getlabel+0xd7>
c0006e04:	0f b6 c0             	movzx  eax,al
c0006e07:	01 c3                	add    ebx,eax
c0006e09:	31 c0                	xor    eax,eax
c0006e0b:	89 c5                	mov    ebp,eax
c0006e0d:	eb ab                	jmp    c0006dba <f_getlabel+0x82>
c0006e0f:	31 db                	xor    ebx,ebx
c0006e11:	66 85 ed             	test   bp,bp
c0006e14:	74 02                	je     c0006e18 <f_getlabel+0xe0>
c0006e16:	31 db                	xor    ebx,ebx
c0006e18:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e1f:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006e23:	e9 a0 00 00 00       	jmp    c0006ec8 <f_getlabel+0x190>
c0006e28:	83 ff 0b             	cmp    edi,0xb
c0006e2b:	74 11                	je     c0006e3e <f_getlabel+0x106>
c0006e2d:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006e32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e36:	8d 79 02             	lea    edi,[ecx+0x2]
c0006e39:	c1 e0 08             	shl    eax,0x8
c0006e3c:	09 c2                	or     edx,eax
c0006e3e:	0f b7 d2             	movzx  edx,dx
c0006e41:	50                   	push   eax
c0006e42:	50                   	push   eax
c0006e43:	68 b5 01 00 00       	push   0x1b5
c0006e48:	52                   	push   edx
c0006e49:	e8 03 17 00 00       	call   c0008551 <ff_oem2uni>
c0006e4e:	83 c4 10             	add    esp,0x10
c0006e51:	66 85 c0             	test   ax,ax
c0006e54:	74 46                	je     c0006e9c <f_getlabel+0x164>
c0006e56:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e5d:	0f b7 c0             	movzx  eax,ax
c0006e60:	01 da                	add    edx,ebx
c0006e62:	b9 04 00 00 00       	mov    ecx,0x4
c0006e67:	e8 95 af ff ff       	call   c0001e01 <put_utf>
c0006e6c:	84 c0                	test   al,al
c0006e6e:	74 2c                	je     c0006e9c <f_getlabel+0x164>
c0006e70:	0f b6 c0             	movzx  eax,al
c0006e73:	01 c3                	add    ebx,eax
c0006e75:	83 ff 0b             	cmp    edi,0xb
c0006e78:	74 24                	je     c0006e9e <f_getlabel+0x166>
c0006e7a:	89 f9                	mov    ecx,edi
c0006e7c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e80:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e83:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e88:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e91:	e8 9f ae ff ff       	call   c0001d35 <dbc_1st>
c0006e96:	85 c0                	test   eax,eax
c0006e98:	74 a4                	je     c0006e3e <f_getlabel+0x106>
c0006e9a:	eb 8c                	jmp    c0006e28 <f_getlabel+0xf0>
c0006e9c:	31 db                	xor    ebx,ebx
c0006e9e:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006ea5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006ea8:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006eaf:	74 17                	je     c0006ec8 <f_getlabel+0x190>
c0006eb1:	4b                   	dec    ebx
c0006eb2:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006eb5:	74 ee                	je     c0006ea5 <f_getlabel+0x16d>
c0006eb7:	eb 0f                	jmp    c0006ec8 <f_getlabel+0x190>
c0006eb9:	83 f8 04             	cmp    eax,0x4
c0006ebc:	75 5c                	jne    c0006f1a <f_getlabel+0x1e2>
c0006ebe:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006ec5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006ec8:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006ed0:	74 4a                	je     c0006f1c <f_getlabel+0x1e4>
c0006ed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ed6:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006ed9:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006edc:	e8 5e b5 ff ff       	call   c000243f <move_window>
c0006ee1:	89 c6                	mov    esi,eax
c0006ee3:	85 c0                	test   eax,eax
c0006ee5:	75 35                	jne    c0006f1c <f_getlabel+0x1e4>
c0006ee7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eeb:	b8 43 00 00 00       	mov    eax,0x43
c0006ef0:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006ef2:	80 f9 03             	cmp    cl,0x3
c0006ef5:	74 0f                	je     c0006f06 <f_getlabel+0x1ce>
c0006ef7:	31 c0                	xor    eax,eax
c0006ef9:	80 f9 04             	cmp    cl,0x4
c0006efc:	0f 94 c0             	sete   al
c0006eff:	48                   	dec    eax
c0006f00:	83 e0 c3             	and    eax,0xffffffc3
c0006f03:	83 c0 64             	add    eax,0x64
c0006f06:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006f0a:	e8 5f ad ff ff       	call   c0001c6e <ld_dword>
c0006f0f:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006f16:	89 07                	mov    DWORD PTR [edi],eax
c0006f18:	eb 02                	jmp    c0006f1c <f_getlabel+0x1e4>
c0006f1a:	89 c6                	mov    esi,eax
c0006f1c:	83 c4 6c             	add    esp,0x6c
c0006f1f:	89 f0                	mov    eax,esi
c0006f21:	5b                   	pop    ebx
c0006f22:	5e                   	pop    esi
c0006f23:	5f                   	pop    edi
c0006f24:	5d                   	pop    ebp
c0006f25:	c3                   	ret    

c0006f26 <f_setlabel>:
c0006f26:	56                   	push   esi
c0006f27:	b9 02 00 00 00       	mov    ecx,0x2
c0006f2c:	53                   	push   ebx
c0006f2d:	83 ec 74             	sub    esp,0x74
c0006f30:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006f34:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f3b:	e8 b1 b7 ff ff       	call   c00026f1 <mount_volume>
c0006f40:	89 c6                	mov    esi,eax
c0006f42:	85 c0                	test   eax,eax
c0006f44:	0f 85 41 02 00 00    	jne    c000718b <f_setlabel+0x265>
c0006f4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f4e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f51:	0f 85 8e 00 00 00    	jne    c0006fe5 <f_setlabel+0xbf>
c0006f57:	b9 16 00 00 00       	mov    ecx,0x16
c0006f5c:	31 d2                	xor    edx,edx
c0006f5e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f62:	31 db                	xor    ebx,ebx
c0006f64:	e8 8c ad ff ff       	call   c0001cf5 <mem_set>
c0006f69:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f70:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f73:	0f 86 0a 01 00 00    	jbe    c0007083 <f_setlabel+0x15d>
c0006f79:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f80:	e8 b6 ad ff ff       	call   c0001d3b <tchar2uni>
c0006f85:	89 c6                	mov    esi,eax
c0006f87:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f8c:	76 2a                	jbe    c0006fb8 <f_setlabel+0x92>
c0006f8e:	83 f8 ff             	cmp    eax,0xffffffff
c0006f91:	74 05                	je     c0006f98 <f_setlabel+0x72>
c0006f93:	83 fb 09             	cmp    ebx,0x9
c0006f96:	76 0a                	jbe    c0006fa2 <f_setlabel+0x7c>
c0006f98:	be 06 00 00 00       	mov    esi,0x6
c0006f9d:	e9 e9 01 00 00       	jmp    c000718b <f_setlabel+0x265>
c0006fa2:	89 c2                	mov    edx,eax
c0006fa4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fa8:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fab:	c1 ea 10             	shr    edx,0x10
c0006fae:	01 c8                	add    eax,ecx
c0006fb0:	43                   	inc    ebx
c0006fb1:	e8 1d ad ff ff       	call   c0001cd3 <st_word>
c0006fb6:	eb 04                	jmp    c0006fbc <f_setlabel+0x96>
c0006fb8:	85 c0                	test   eax,eax
c0006fba:	74 dc                	je     c0006f98 <f_setlabel+0x72>
c0006fbc:	89 f2                	mov    edx,esi
c0006fbe:	b8 97 93 02 c0       	mov    eax,0xc0029397
c0006fc3:	e8 5b ad ff ff       	call   c0001d23 <chk_chr>
c0006fc8:	85 c0                	test   eax,eax
c0006fca:	75 cc                	jne    c0006f98 <f_setlabel+0x72>
c0006fcc:	83 fb 0a             	cmp    ebx,0xa
c0006fcf:	77 c7                	ja     c0006f98 <f_setlabel+0x72>
c0006fd1:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fd4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fd8:	0f b7 d6             	movzx  edx,si
c0006fdb:	01 c8                	add    eax,ecx
c0006fdd:	43                   	inc    ebx
c0006fde:	e8 f0 ac ff ff       	call   c0001cd3 <st_word>
c0006fe3:	eb 84                	jmp    c0006f69 <f_setlabel+0x43>
c0006fe5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fea:	ba 20 00 00 00       	mov    edx,0x20
c0006fef:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006ff3:	31 db                	xor    ebx,ebx
c0006ff5:	e8 fb ac ff ff       	call   c0001cf5 <mem_set>
c0006ffa:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0007001:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0007004:	76 60                	jbe    c0007066 <f_setlabel+0x140>
c0007006:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c000700d:	e8 29 ad ff ff       	call   c0001d3b <tchar2uni>
c0007012:	3d ff ff 00 00       	cmp    eax,0xffff
c0007017:	0f 87 7b ff ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000701d:	83 ec 0c             	sub    esp,0xc
c0007020:	50                   	push   eax
c0007021:	e8 97 15 00 00       	call   c00085bd <ff_wtoupper>
c0007026:	5a                   	pop    edx
c0007027:	59                   	pop    ecx
c0007028:	68 b5 01 00 00       	push   0x1b5
c000702d:	50                   	push   eax
c000702e:	e8 8e 14 00 00       	call   c00084c1 <ff_uni2oem>
c0007033:	83 c4 10             	add    esp,0x10
c0007036:	89 c6                	mov    esi,eax
c0007038:	66 85 c0             	test   ax,ax
c000703b:	0f 84 57 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007041:	0f b7 d0             	movzx  edx,ax
c0007044:	b8 90 93 02 c0       	mov    eax,0xc0029390
c0007049:	e8 d5 ac ff ff       	call   c0001d23 <chk_chr>
c000704e:	85 c0                	test   eax,eax
c0007050:	0f 85 42 ff ff ff    	jne    c0006f98 <f_setlabel+0x72>
c0007056:	66 81 fe ff 00       	cmp    si,0xff
c000705b:	0f 87 14 01 00 00    	ja     c0007175 <f_setlabel+0x24f>
c0007061:	e9 fa 00 00 00       	jmp    c0007160 <f_setlabel+0x23a>
c0007066:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c000706b:	0f 84 27 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007071:	85 db                	test   ebx,ebx
c0007073:	74 0e                	je     c0007083 <f_setlabel+0x15d>
c0007075:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007078:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c000707d:	75 04                	jne    c0007083 <f_setlabel+0x15d>
c000707f:	89 c3                	mov    ebx,eax
c0007081:	eb ee                	jmp    c0007071 <f_setlabel+0x14b>
c0007083:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007087:	31 d2                	xor    edx,edx
c0007089:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000708d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007095:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007099:	e8 1f c1 ff ff       	call   c00031bd <dir_sdi>
c000709e:	89 c6                	mov    esi,eax
c00070a0:	85 c0                	test   eax,eax
c00070a2:	0f 85 e3 00 00 00    	jne    c000718b <f_setlabel+0x265>
c00070a8:	ba 01 00 00 00       	mov    edx,0x1
c00070ad:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b1:	e8 17 c9 ff ff       	call   c00039cd <dir_read>
c00070b6:	85 c0                	test   eax,eax
c00070b8:	75 21                	jne    c00070db <f_setlabel+0x1b5>
c00070ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00070be:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070c2:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c00070c5:	74 5d                	je     c0007124 <f_setlabel+0x1fe>
c00070c7:	85 db                	test   ebx,ebx
c00070c9:	74 0b                	je     c00070d6 <f_setlabel+0x1b0>
c00070cb:	b9 0b 00 00 00       	mov    ecx,0xb
c00070d0:	8d 54 24 0e          	lea    edx,[esp+0xe]
c00070d4:	eb 70                	jmp    c0007146 <f_setlabel+0x220>
c00070d6:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00070d9:	eb 70                	jmp    c000714b <f_setlabel+0x225>
c00070db:	83 f8 04             	cmp    eax,0x4
c00070de:	75 7c                	jne    c000715c <f_setlabel+0x236>
c00070e0:	85 db                	test   ebx,ebx
c00070e2:	0f 84 a3 00 00 00    	je     c000718b <f_setlabel+0x265>
c00070e8:	ba 01 00 00 00       	mov    edx,0x1
c00070ed:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070f1:	e8 51 ca ff ff       	call   c0003b47 <dir_alloc>
c00070f6:	89 c6                	mov    esi,eax
c00070f8:	85 c0                	test   eax,eax
c00070fa:	0f 85 8b 00 00 00    	jne    c000718b <f_setlabel+0x265>
c0007100:	31 d2                	xor    edx,edx
c0007102:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007106:	b9 20 00 00 00       	mov    ecx,0x20
c000710b:	e8 e5 ab ff ff       	call   c0001cf5 <mem_set>
c0007110:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007114:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007117:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000711b:	75 18                	jne    c0007135 <f_setlabel+0x20f>
c000711d:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0007120:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007124:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007127:	b9 16 00 00 00       	mov    ecx,0x16
c000712c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007130:	83 c0 02             	add    eax,0x2
c0007133:	eb 9b                	jmp    c00070d0 <f_setlabel+0x1aa>
c0007135:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007139:	b9 0b 00 00 00       	mov    ecx,0xb
c000713e:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007142:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007146:	e8 95 ab ff ff       	call   c0001ce0 <mem_cpy>
c000714b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000714f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007153:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007157:	e8 0e d4 ff ff       	call   c000456a <sync_fs>
c000715c:	89 c6                	mov    esi,eax
c000715e:	eb 2b                	jmp    c000718b <f_setlabel+0x265>
c0007160:	83 fb 0a             	cmp    ebx,0xa
c0007163:	0f 87 2f fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c0007169:	89 f0                	mov    eax,esi
c000716b:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000716f:	43                   	inc    ebx
c0007170:	e9 85 fe ff ff       	jmp    c0006ffa <f_setlabel+0xd4>
c0007175:	83 fb 09             	cmp    ebx,0x9
c0007178:	0f 87 1a fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000717e:	89 f0                	mov    eax,esi
c0007180:	66 c1 e8 08          	shr    ax,0x8
c0007184:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007188:	43                   	inc    ebx
c0007189:	eb de                	jmp    c0007169 <f_setlabel+0x243>
c000718b:	89 f0                	mov    eax,esi
c000718d:	83 c4 74             	add    esp,0x74
c0007190:	5b                   	pop    ebx
c0007191:	5e                   	pop    esi
c0007192:	c3                   	ret    

c0007193 <f_forward>:
c0007193:	55                   	push   ebp
c0007194:	57                   	push   edi
c0007195:	56                   	push   esi
c0007196:	53                   	push   ebx
c0007197:	83 ec 2c             	sub    esp,0x2c
c000719a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000719e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00071a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00071a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00071ac:	89 d8                	mov    eax,ebx
c00071ae:	e8 b1 b1 ff ff       	call   c0002364 <validate>
c00071b3:	89 c5                	mov    ebp,eax
c00071b5:	85 c0                	test   eax,eax
c00071b7:	0f 85 aa 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00071c1:	85 ed                	test   ebp,ebp
c00071c3:	0f 85 9e 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00071cd:	0f 84 8f 01 00 00    	je     c0007362 <f_forward+0x1cf>
c00071d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00071d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00071d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071dc:	bf 00 00 00 00       	mov    edi,0x0
c00071e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071e8:	89 d1                	mov    ecx,edx
c00071ea:	19 f9                	sbb    ecx,edi
c00071ec:	0f 83 cf 00 00 00    	jae    c00072c1 <f_forward+0x12e>
c00071f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071f6:	e9 c6 00 00 00       	jmp    c00072c1 <f_forward+0x12e>
c00071fb:	50                   	push   eax
c00071fc:	50                   	push   eax
c00071fd:	6a 00                	push   0x0
c00071ff:	6a 00                	push   0x0
c0007201:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007205:	83 c4 10             	add    esp,0x10
c0007208:	85 c0                	test   eax,eax
c000720a:	0f 84 57 01 00 00    	je     c0007367 <f_forward+0x1d4>
c0007210:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007213:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007217:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000721a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000721e:	89 d7                	mov    edi,edx
c0007220:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007223:	89 c6                	mov    esi,eax
c0007225:	0f ac fe 09          	shrd   esi,edi,0x9
c0007229:	21 ce                	and    esi,ecx
c000722b:	89 c1                	mov    ecx,eax
c000722d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007233:	0f 84 98 00 00 00    	je     c00072d1 <f_forward+0x13e>
c0007239:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000723d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007240:	89 c8                	mov    eax,ecx
c0007242:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007246:	e8 af ac ff ff       	call   c0001efa <clst2sect>
c000724b:	89 d7                	mov    edi,edx
c000724d:	09 c7                	or     edi,eax
c000724f:	0f 84 9e 00 00 00    	je     c00072f3 <f_forward+0x160>
c0007255:	31 ff                	xor    edi,edi
c0007257:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000725a:	01 c6                	add    esi,eax
c000725c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007260:	11 d7                	adc    edi,edx
c0007262:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007265:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007268:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000726c:	39 fa                	cmp    edx,edi
c000726e:	0f 85 a2 00 00 00    	jne    c0007316 <f_forward+0x183>
c0007274:	39 f0                	cmp    eax,esi
c0007276:	0f 85 9a 00 00 00    	jne    c0007316 <f_forward+0x183>
c000727c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000727f:	ba 00 02 00 00       	mov    edx,0x200
c0007284:	25 ff 01 00 00       	and    eax,0x1ff
c0007289:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000728d:	29 c2                	sub    edx,eax
c000728f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007292:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007295:	39 d1                	cmp    ecx,edx
c0007297:	76 02                	jbe    c000729b <f_forward+0x108>
c0007299:	89 d1                	mov    ecx,edx
c000729b:	8d 73 50             	lea    esi,[ebx+0x50]
c000729e:	52                   	push   edx
c000729f:	01 c6                	add    esi,eax
c00072a1:	52                   	push   edx
c00072a2:	51                   	push   ecx
c00072a3:	56                   	push   esi
c00072a4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00072a8:	83 c4 10             	add    esp,0x10
c00072ab:	85 c0                	test   eax,eax
c00072ad:	74 44                	je     c00072f3 <f_forward+0x160>
c00072af:	31 ff                	xor    edi,edi
c00072b1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00072b4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00072b7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00072bb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00072bf:	01 07                	add    DWORD PTR [edi],eax
c00072c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00072c6:	0f 85 2f ff ff ff    	jne    c00071fb <f_forward+0x68>
c00072cc:	e9 96 00 00 00       	jmp    c0007367 <f_forward+0x1d4>
c00072d1:	85 f6                	test   esi,esi
c00072d3:	0f 85 60 ff ff ff    	jne    c0007239 <f_forward+0xa6>
c00072d9:	89 d7                	mov    edi,edx
c00072db:	09 c7                	or     edi,eax
c00072dd:	75 05                	jne    c00072e4 <f_forward+0x151>
c00072df:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072e2:	eb 0a                	jmp    c00072ee <f_forward+0x15b>
c00072e4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072e7:	89 d8                	mov    eax,ebx
c00072e9:	e8 d9 bc ff ff       	call   c0002fc7 <get_fat>
c00072ee:	83 f8 01             	cmp    eax,0x1
c00072f1:	77 0b                	ja     c00072fe <f_forward+0x16b>
c00072f3:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072f7:	bd 02 00 00 00       	mov    ebp,0x2
c00072fc:	eb 69                	jmp    c0007367 <f_forward+0x1d4>
c00072fe:	83 f8 ff             	cmp    eax,0xffffffff
c0007301:	75 0b                	jne    c000730e <f_forward+0x17b>
c0007303:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007307:	bd 01 00 00 00       	mov    ebp,0x1
c000730c:	eb 59                	jmp    c0007367 <f_forward+0x1d4>
c000730e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007311:	e9 23 ff ff ff       	jmp    c0007239 <f_forward+0xa6>
c0007316:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000731a:	79 20                	jns    c000733c <f_forward+0x1a9>
c000731c:	83 ec 0c             	sub    esp,0xc
c000731f:	6a 01                	push   0x1
c0007321:	52                   	push   edx
c0007322:	50                   	push   eax
c0007323:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007327:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000732b:	50                   	push   eax
c000732c:	e8 fb a8 ff ff       	call   c0001c2c <disk_write>
c0007331:	83 c4 20             	add    esp,0x20
c0007334:	85 c0                	test   eax,eax
c0007336:	75 cb                	jne    c0007303 <f_forward+0x170>
c0007338:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000733c:	83 ec 0c             	sub    esp,0xc
c000733f:	6a 01                	push   0x1
c0007341:	57                   	push   edi
c0007342:	56                   	push   esi
c0007343:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007347:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000734b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000734f:	50                   	push   eax
c0007350:	e8 c1 a8 ff ff       	call   c0001c16 <disk_read>
c0007355:	83 c4 20             	add    esp,0x20
c0007358:	85 c0                	test   eax,eax
c000735a:	0f 84 1c ff ff ff    	je     c000727c <f_forward+0xe9>
c0007360:	eb a1                	jmp    c0007303 <f_forward+0x170>
c0007362:	bd 07 00 00 00       	mov    ebp,0x7
c0007367:	83 c4 2c             	add    esp,0x2c
c000736a:	89 e8                	mov    eax,ebp
c000736c:	5b                   	pop    ebx
c000736d:	5e                   	pop    esi
c000736e:	5f                   	pop    edi
c000736f:	5d                   	pop    ebp
c0007370:	c3                   	ret    

c0007371 <f_mkfs>:
c0007371:	55                   	push   ebp
c0007372:	57                   	push   edi
c0007373:	56                   	push   esi
c0007374:	53                   	push   ebx
c0007375:	bb 0b 00 00 00       	mov    ebx,0xb
c000737a:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007380:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007387:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000738e:	e8 b0 ae ff ff       	call   c0002243 <get_ldnumber>
c0007393:	85 c0                	test   eax,eax
c0007395:	0f 88 ec 10 00 00    	js     c0008487 <f_mkfs+0x1116>
c000739b:	8b 14 85 a0 e3 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1c60]
c00073a2:	85 d2                	test   edx,edx
c00073a4:	74 03                	je     c00073a9 <f_mkfs+0x38>
c00073a6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00073a9:	85 f6                	test   esi,esi
c00073ab:	75 05                	jne    c00073b2 <f_mkfs+0x41>
c00073ad:	be 80 93 02 c0       	mov    esi,0xc0029380
c00073b2:	83 ec 0c             	sub    esp,0xc
c00073b5:	0f b6 c0             	movzx  eax,al
c00073b8:	bb 03 00 00 00       	mov    ebx,0x3
c00073bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00073c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073c5:	e8 49 a8 ff ff       	call   c0001c13 <disk_initialize>
c00073ca:	83 c4 10             	add    esp,0x10
c00073cd:	a8 01                	test   al,0x1
c00073cf:	0f 85 b2 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073d5:	bb 0a 00 00 00       	mov    ebx,0xa
c00073da:	a8 04                	test   al,0x4
c00073dc:	0f 85 a5 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073e5:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073e9:	85 c0                	test   eax,eax
c00073eb:	75 20                	jne    c000740d <f_mkfs+0x9c>
c00073ed:	51                   	push   ecx
c00073ee:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073f2:	50                   	push   eax
c00073f3:	6a 03                	push   0x3
c00073f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073f9:	e8 44 a8 ff ff       	call   c0001c42 <disk_ioctl>
c00073fe:	83 c4 10             	add    esp,0x10
c0007401:	85 c0                	test   eax,eax
c0007403:	74 08                	je     c000740d <f_mkfs+0x9c>
c0007405:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000740d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007411:	8d 42 ff             	lea    eax,[edx-0x1]
c0007414:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007419:	77 04                	ja     c000741f <f_mkfs+0xae>
c000741b:	85 c2                	test   edx,eax
c000741d:	74 08                	je     c0007427 <f_mkfs+0xb6>
c000741f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007427:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000742a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000742e:	48                   	dec    eax
c000742f:	3c 01                	cmp    al,0x1
c0007431:	76 05                	jbe    c0007438 <f_mkfs+0xc7>
c0007433:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007438:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000743b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000743f:	48                   	dec    eax
c0007440:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007445:	77 07                	ja     c000744e <f_mkfs+0xdd>
c0007447:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000744c:	74 08                	je     c0007456 <f_mkfs+0xe5>
c000744e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007456:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007459:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000745f:	77 07                	ja     c0007468 <f_mkfs+0xf7>
c0007461:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007464:	85 d8                	test   eax,ebx
c0007466:	74 02                	je     c000746a <f_mkfs+0xf9>
c0007468:	31 db                	xor    ebx,ebx
c000746a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007475:	77 0a                	ja     c0007481 <f_mkfs+0x110>
c0007477:	bb 11 00 00 00       	mov    ebx,0x11
c000747c:	e9 06 10 00 00       	jmp    c0008487 <f_mkfs+0x1116>
c0007481:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007488:	8b 36                	mov    esi,DWORD PTR [esi]
c000748a:	85 ed                	test   ebp,ebp
c000748c:	75 1e                	jne    c00074ac <f_mkfs+0x13b>
c000748e:	83 ec 0c             	sub    esp,0xc
c0007491:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007498:	25 00 fe ff ff       	and    eax,0xfffffe00
c000749d:	50                   	push   eax
c000749e:	e8 f1 0f 00 00       	call   c0008494 <ff_memalloc>
c00074a3:	83 c4 10             	add    esp,0x10
c00074a6:	89 c5                	mov    ebp,eax
c00074a8:	85 c0                	test   eax,eax
c00074aa:	74 cb                	je     c0007477 <f_mkfs+0x106>
c00074ac:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00074b4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00074bc:	52                   	push   edx
c00074bd:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00074c1:	50                   	push   eax
c00074c2:	6a 01                	push   0x1
c00074c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074c8:	e8 75 a7 ff ff       	call   c0001c42 <disk_ioctl>
c00074cd:	83 c4 10             	add    esp,0x10
c00074d0:	85 c0                	test   eax,eax
c00074d2:	0f 85 4a 0f 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00074d8:	89 f1                	mov    ecx,esi
c00074da:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074e2:	83 e1 0f             	and    ecx,0xf
c00074e5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074ed:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074f1:	83 e6 08             	and    esi,0x8
c00074f4:	75 56                	jne    c000754c <f_mkfs+0x1db>
c00074f6:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074fa:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074fe:	83 ff 00             	cmp    edi,0x0
c0007501:	76 20                	jbe    c0007523 <f_mkfs+0x1b2>
c0007503:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007508:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007510:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007516:	83 d7 ff             	adc    edi,0xffffffff
c0007519:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000751d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007521:	eb 21                	jmp    c0007544 <f_mkfs+0x1d3>
c0007523:	ba 3f 00 00 00       	mov    edx,0x3f
c0007528:	39 f2                	cmp    edx,esi
c000752a:	19 f8                	sbb    eax,edi
c000752c:	73 1e                	jae    c000754c <f_mkfs+0x1db>
c000752e:	83 c6 c1             	add    esi,0xffffffc1
c0007531:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007539:	83 d7 ff             	adc    edi,0xffffffff
c000753c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007540:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007544:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000754c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007550:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007554:	89 04 24             	mov    DWORD PTR [esp],eax
c0007557:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000755b:	31 c0                	xor    eax,eax
c000755d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007562:	89 c7                	mov    edi,eax
c0007564:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007567:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000756b:	0f 83 c5 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c0007571:	89 df                	mov    edi,ebx
c0007573:	c1 ef 09             	shr    edi,0x9
c0007576:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000757a:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007581:	c1 ef 09             	shr    edi,0x9
c0007584:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007589:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000758d:	74 29                	je     c00075b8 <f_mkfs+0x247>
c000758f:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007595:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000759a:	0f 97 c2             	seta   dl
c000759d:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00075a0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075a4:	0f 92 c0             	setb   al
c00075a7:	08 c2                	or     dl,al
c00075a9:	75 5b                	jne    c0007606 <f_mkfs+0x295>
c00075ab:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075af:	83 e0 07             	and    eax,0x7
c00075b2:	3c 04                	cmp    al,0x4
c00075b4:	74 50                	je     c0007606 <f_mkfs+0x295>
c00075b6:	eb 1b                	jmp    c00075d3 <f_mkfs+0x262>
c00075b8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00075bd:	0f 87 73 0a 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c00075c3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075c9:	76 08                	jbe    c00075d3 <f_mkfs+0x262>
c00075cb:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00075d3:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075d7:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075db:	83 e0 01             	and    eax,0x1
c00075de:	80 e1 02             	and    cl,0x2
c00075e1:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075e5:	74 0d                	je     c00075f4 <f_mkfs+0x283>
c00075e7:	84 c0                	test   al,al
c00075e9:	0f 84 53 09 00 00    	je     c0007f42 <f_mkfs+0xbd1>
c00075ef:	e9 12 08 00 00       	jmp    c0007e06 <f_mkfs+0xa95>
c00075f4:	bb 13 00 00 00       	mov    ebx,0x13
c00075f9:	84 c0                	test   al,al
c00075fb:	0f 85 05 08 00 00    	jne    c0007e06 <f_mkfs+0xa95>
c0007601:	e9 39 0e 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0007606:	31 c0                	xor    eax,eax
c0007608:	ba ff 0f 00 00       	mov    edx,0xfff
c000760d:	89 c7                	mov    edi,eax
c000760f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007612:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007616:	0f 83 1a 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c000761c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007622:	77 39                	ja     c000765d <f_mkfs+0x2ec>
c0007624:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007629:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007631:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007634:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007638:	73 08                	jae    c0007642 <f_mkfs+0x2d1>
c000763a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007642:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007647:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000764a:	b8 00 00 00 00       	mov    eax,0x0
c000764f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007653:	73 08                	jae    c000765d <f_mkfs+0x2ec>
c0007655:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000765d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007661:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007665:	83 c0 20             	add    eax,0x20
c0007668:	83 d2 00             	adc    edx,0x0
c000766b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000766f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007673:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007677:	31 d2                	xor    edx,edx
c0007679:	31 ff                	xor    edi,edi
c000767b:	52                   	push   edx
c000767c:	89 fb                	mov    ebx,edi
c000767e:	50                   	push   eax
c000767f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007683:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007687:	e8 20 f3 01 00       	call   c00269ac <__udivdi3>
c000768c:	83 c4 10             	add    esp,0x10
c000768f:	c1 e0 02             	shl    eax,0x2
c0007692:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007696:	05 07 02 00 00       	add    eax,0x207
c000769b:	89 f1                	mov    ecx,esi
c000769d:	c1 e8 09             	shr    eax,0x9
c00076a0:	83 c1 ff             	add    ecx,0xffffffff
c00076a3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00076a7:	83 d3 ff             	adc    ebx,0xffffffff
c00076aa:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00076ae:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00076b2:	31 d2                	xor    edx,edx
c00076b4:	01 c8                	add    eax,ecx
c00076b6:	11 da                	adc    edx,ebx
c00076b8:	89 c1                	mov    ecx,eax
c00076ba:	f7 de                	neg    esi
c00076bc:	89 d0                	mov    eax,edx
c00076be:	83 d7 00             	adc    edi,0x0
c00076c1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076c5:	f7 df                	neg    edi
c00076c7:	21 f1                	and    ecx,esi
c00076c9:	21 f8                	and    eax,edi
c00076cb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00076cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00076d3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00076d7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076db:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076df:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076e2:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076e6:	0f ac d0 01          	shrd   eax,edx,0x1
c00076ea:	89 df                	mov    edi,ebx
c00076ec:	d1 ea                	shr    edx,1
c00076ee:	39 c1                	cmp    ecx,eax
c00076f0:	19 d7                	sbb    edi,edx
c00076f2:	0f 83 3e 09 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c00076f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076fc:	31 d2                	xor    edx,edx
c00076fe:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007702:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007706:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000770a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000770d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007711:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007715:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007719:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000771d:	83 f8 0f             	cmp    eax,0xf
c0007720:	0f 86 10 09 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007726:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000772e:	0f 87 02 09 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007734:	31 d2                	xor    edx,edx
c0007736:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000773a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007742:	83 c0 07             	add    eax,0x7
c0007745:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000774d:	c1 e8 03             	shr    eax,0x3
c0007750:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007757:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000775b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000775f:	c1 e0 09             	shl    eax,0x9
c0007762:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007766:	48                   	dec    eax
c0007767:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000776b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000776f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007773:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007777:	31 d2                	xor    edx,edx
c0007779:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000777d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007784:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007788:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000778d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007791:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007795:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007799:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000779d:	31 ff                	xor    edi,edi
c000779f:	31 f6                	xor    esi,esi
c00077a1:	31 db                	xor    ebx,ebx
c00077a3:	85 ff                	test   edi,edi
c00077a5:	74 05                	je     c00077ac <f_mkfs+0x43b>
c00077a7:	4f                   	dec    edi
c00077a8:	74 44                	je     c00077ee <f_mkfs+0x47d>
c00077aa:	eb 4f                	jmp    c00077fb <f_mkfs+0x48a>
c00077ac:	83 ec 0c             	sub    esp,0xc
c00077af:	0f b7 c3             	movzx  eax,bx
c00077b2:	50                   	push   eax
c00077b3:	e8 05 0e 00 00       	call   c00085bd <ff_wtoupper>
c00077b8:	83 c4 10             	add    esp,0x10
c00077bb:	89 c1                	mov    ecx,eax
c00077bd:	8d 53 01             	lea    edx,[ebx+0x1]
c00077c0:	66 39 c3             	cmp    bx,ax
c00077c3:	75 3e                	jne    c0007803 <f_mkfs+0x492>
c00077c5:	be 01 00 00 00       	mov    esi,0x1
c00077ca:	89 df                	mov    edi,ebx
c00077cc:	66 01 f7             	add    di,si
c00077cf:	75 07                	jne    c00077d8 <f_mkfs+0x467>
c00077d1:	83 fe 7f             	cmp    esi,0x7f
c00077d4:	77 31                	ja     c0007807 <f_mkfs+0x496>
c00077d6:	eb 16                	jmp    c00077ee <f_mkfs+0x47d>
c00077d8:	83 ec 0c             	sub    esp,0xc
c00077db:	0f b7 ff             	movzx  edi,di
c00077de:	57                   	push   edi
c00077df:	e8 d9 0d 00 00       	call   c00085bd <ff_wtoupper>
c00077e4:	83 c4 10             	add    esp,0x10
c00077e7:	39 c7                	cmp    edi,eax
c00077e9:	75 e6                	jne    c00077d1 <f_mkfs+0x460>
c00077eb:	46                   	inc    esi
c00077ec:	eb dc                	jmp    c00077ca <f_mkfs+0x459>
c00077ee:	31 c0                	xor    eax,eax
c00077f0:	89 d9                	mov    ecx,ebx
c00077f2:	4e                   	dec    esi
c00077f3:	0f 95 c0             	setne  al
c00077f6:	43                   	inc    ebx
c00077f7:	89 c7                	mov    edi,eax
c00077f9:	eb 14                	jmp    c000780f <f_mkfs+0x49e>
c00077fb:	89 f1                	mov    ecx,esi
c00077fd:	01 f3                	add    ebx,esi
c00077ff:	31 ff                	xor    edi,edi
c0007801:	eb 0c                	jmp    c000780f <f_mkfs+0x49e>
c0007803:	89 d3                	mov    ebx,edx
c0007805:	eb 08                	jmp    c000780f <f_mkfs+0x49e>
c0007807:	bf 02 00 00 00       	mov    edi,0x2
c000780c:	83 c9 ff             	or     ecx,0xffffffff
c000780f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007813:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007816:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000781a:	0f b6 c1             	movzx  eax,cl
c000781d:	e8 3a a9 ff ff       	call   c000215c <xsum32>
c0007822:	66 c1 e9 08          	shr    cx,0x8
c0007826:	89 c2                	mov    edx,eax
c0007828:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000782f:	0f b7 c1             	movzx  eax,cx
c0007832:	e8 25 a9 ff ff       	call   c000215c <xsum32>
c0007837:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000783c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007840:	66 85 db             	test   bx,bx
c0007843:	74 1f                	je     c0007864 <f_mkfs+0x4f3>
c0007845:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007848:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000784f:	83 c0 02             	add    eax,0x2
c0007852:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007858:	39 c2                	cmp    edx,eax
c000785a:	74 08                	je     c0007864 <f_mkfs+0x4f3>
c000785c:	89 04 24             	mov    DWORD PTR [esp],eax
c000785f:	e9 3f ff ff ff       	jmp    c00077a3 <f_mkfs+0x432>
c0007864:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007867:	83 ec 0c             	sub    esp,0xc
c000786a:	05 01 02 00 00       	add    eax,0x201
c000786f:	c1 e8 09             	shr    eax,0x9
c0007872:	50                   	push   eax
c0007873:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007877:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787f:	55                   	push   ebp
c0007880:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007884:	e8 a3 a3 ff ff       	call   c0001c2c <disk_write>
c0007889:	83 c4 20             	add    esp,0x20
c000788c:	85 c0                	test   eax,eax
c000788e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007891:	0f 85 8b 0b 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007897:	89 d0                	mov    eax,edx
c0007899:	31 d2                	xor    edx,edx
c000789b:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c000789f:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00078a3:	66 85 db             	test   bx,bx
c00078a6:	74 04                	je     c00078ac <f_mkfs+0x53b>
c00078a8:	31 c0                	xor    eax,eax
c00078aa:	eb b0                	jmp    c000785c <f_mkfs+0x4eb>
c00078ac:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078b0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00078b4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00078b8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00078be:	31 d2                	xor    edx,edx
c00078c0:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00078cb:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078cf:	c1 eb 09             	shr    ebx,0x9
c00078d2:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00078d9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078dd:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078e5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078e9:	8d 70 01             	lea    esi,[eax+0x1]
c00078ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078f0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078f4:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078fb:	31 d2                	xor    edx,edx
c00078fd:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007902:	89 04 24             	mov    DWORD PTR [esp],eax
c0007905:	89 c1                	mov    ecx,eax
c0007907:	89 e8                	mov    eax,ebp
c0007909:	e8 e7 a3 ff ff       	call   c0001cf5 <mem_set>
c000790e:	31 c0                	xor    eax,eax
c0007910:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007913:	76 10                	jbe    c0007925 <f_mkfs+0x5b4>
c0007915:	83 fe 07             	cmp    esi,0x7
c0007918:	76 0b                	jbe    c0007925 <f_mkfs+0x5b4>
c000791a:	40                   	inc    eax
c000791b:	83 ee 08             	sub    esi,0x8
c000791e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007923:	eb eb                	jmp    c0007910 <f_mkfs+0x59f>
c0007925:	b2 01                	mov    dl,0x1
c0007927:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c000792b:	85 f6                	test   esi,esi
c000792d:	74 0c                	je     c000793b <f_mkfs+0x5ca>
c000792f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007932:	76 07                	jbe    c000793b <f_mkfs+0x5ca>
c0007934:	08 11                	or     BYTE PTR [ecx],dl
c0007936:	4e                   	dec    esi
c0007937:	d1 e2                	shl    edx,1
c0007939:	eb f0                	jmp    c000792b <f_mkfs+0x5ba>
c000793b:	89 df                	mov    edi,ebx
c000793d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007941:	76 04                	jbe    c0007947 <f_mkfs+0x5d6>
c0007943:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007947:	83 ec 0c             	sub    esp,0xc
c000794a:	57                   	push   edi
c000794b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000794f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007953:	55                   	push   ebp
c0007954:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007958:	e8 cf a2 ff ff       	call   c0001c2c <disk_write>
c000795d:	83 c4 20             	add    esp,0x20
c0007960:	85 c0                	test   eax,eax
c0007962:	0f 85 ba 0a 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007968:	31 d2                	xor    edx,edx
c000796a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000796e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007972:	29 fb                	sub    ebx,edi
c0007974:	0f 85 7a ff ff ff    	jne    c00078f4 <f_mkfs+0x583>
c000797a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000797e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007986:	31 f6                	xor    esi,esi
c0007988:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000798c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000798f:	31 d2                	xor    edx,edx
c0007991:	89 e8                	mov    eax,ebp
c0007993:	e8 5d a3 ff ff       	call   c0001cf5 <mem_set>
c0007998:	31 c9                	xor    ecx,ecx
c000799a:	85 db                	test   ebx,ebx
c000799c:	75 40                	jne    c00079de <f_mkfs+0x66d>
c000799e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00079a3:	89 e8                	mov    eax,ebp
c00079a5:	bb 02 00 00 00       	mov    ebx,0x2
c00079aa:	e8 28 a3 ff ff       	call   c0001cd7 <st_dword>
c00079af:	8d 45 04             	lea    eax,[ebp+0x4]
c00079b2:	83 ca ff             	or     edx,0xffffffff
c00079b5:	e8 1d a3 ff ff       	call   c0001cd7 <st_dword>
c00079ba:	b9 08 00 00 00       	mov    ecx,0x8
c00079bf:	eb 1d                	jmp    c00079de <f_mkfs+0x66d>
c00079c1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c4:	76 3b                	jbe    c0007a01 <f_mkfs+0x690>
c00079c6:	43                   	inc    ebx
c00079c7:	83 fe 01             	cmp    esi,0x1
c00079ca:	89 da                	mov    edx,ebx
c00079cc:	77 03                	ja     c00079d1 <f_mkfs+0x660>
c00079ce:	83 ca ff             	or     edx,0xffffffff
c00079d1:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00079d5:	4e                   	dec    esi
c00079d6:	e8 fc a2 ff ff       	call   c0001cd7 <st_dword>
c00079db:	83 c1 04             	add    ecx,0x4
c00079de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079e2:	85 f6                	test   esi,esi
c00079e4:	75 db                	jne    c00079c1 <f_mkfs+0x650>
c00079e6:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079eb:	77 14                	ja     c0007a01 <f_mkfs+0x690>
c00079ed:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079f1:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079f8:	85 f6                	test   esi,esi
c00079fa:	74 05                	je     c0007a01 <f_mkfs+0x690>
c00079fc:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079ff:	77 dd                	ja     c00079de <f_mkfs+0x66d>
c0007a01:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007a05:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a09:	39 cf                	cmp    edi,ecx
c0007a0b:	76 02                	jbe    c0007a0f <f_mkfs+0x69e>
c0007a0d:	89 cf                	mov    edi,ecx
c0007a0f:	83 ec 0c             	sub    esp,0xc
c0007a12:	57                   	push   edi
c0007a13:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a17:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a1b:	55                   	push   ebp
c0007a1c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a20:	e8 07 a2 ff ff       	call   c0001c2c <disk_write>
c0007a25:	83 c4 20             	add    esp,0x20
c0007a28:	85 c0                	test   eax,eax
c0007a2a:	0f 85 f2 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007a30:	31 d2                	xor    edx,edx
c0007a32:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007a36:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a3a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a3e:	0f 85 48 ff ff ff    	jne    c000798c <f_mkfs+0x61b>
c0007a44:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a47:	31 d2                	xor    edx,edx
c0007a49:	89 e8                	mov    eax,ebp
c0007a4b:	31 ff                	xor    edi,edi
c0007a4d:	e8 a3 a2 ff ff       	call   c0001cf5 <mem_set>
c0007a52:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a55:	ba 02 00 00 00       	mov    edx,0x2
c0007a5a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a5e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a62:	e8 70 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a67:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a6a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a6e:	e8 64 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a73:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a76:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a7a:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a7e:	e8 54 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a83:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a86:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a8a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a8e:	83 c2 02             	add    edx,0x2
c0007a91:	e8 41 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a96:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a99:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a9d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007aa1:	e8 31 a2 ff ff       	call   c0001cd7 <st_dword>
c0007aa6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007aaa:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007aaf:	89 c6                	mov    esi,eax
c0007ab1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ab5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007ab9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007abc:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007ac0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007ac3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007ac7:	39 cb                	cmp    ebx,ecx
c0007ac9:	76 02                	jbe    c0007acd <f_mkfs+0x75c>
c0007acb:	89 cb                	mov    ebx,ecx
c0007acd:	83 ec 0c             	sub    esp,0xc
c0007ad0:	53                   	push   ebx
c0007ad1:	57                   	push   edi
c0007ad2:	56                   	push   esi
c0007ad3:	55                   	push   ebp
c0007ad4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ad8:	e8 4f a1 ff ff       	call   c0001c2c <disk_write>
c0007add:	83 c4 20             	add    esp,0x20
c0007ae0:	85 c0                	test   eax,eax
c0007ae2:	0f 85 3a 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007ae8:	31 d2                	xor    edx,edx
c0007aea:	b9 00 02 00 00       	mov    ecx,0x200
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 ff a1 ff ff       	call   c0001cf5 <mem_set>
c0007af6:	31 d2                	xor    edx,edx
c0007af8:	01 de                	add    esi,ebx
c0007afa:	11 d7                	adc    edi,edx
c0007afc:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007aff:	75 bf                	jne    c0007ac0 <f_mkfs+0x74f>
c0007b01:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b05:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007b09:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007b11:	b9 00 02 00 00       	mov    ecx,0x200
c0007b16:	31 d2                	xor    edx,edx
c0007b18:	89 e8                	mov    eax,ebp
c0007b1a:	e8 d6 a1 ff ff       	call   c0001cf5 <mem_set>
c0007b1f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007b24:	ba 60 94 02 c0       	mov    edx,0xc0029460
c0007b29:	89 e8                	mov    eax,ebp
c0007b2b:	e8 b0 a1 ff ff       	call   c0001ce0 <mem_cpy>
c0007b30:	8d 45 40             	lea    eax,[ebp+0x40]
c0007b33:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007b37:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b3b:	e8 9a a1 ff ff       	call   c0001cda <st_qword>
c0007b40:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b44:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b47:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b4b:	e8 8a a1 ff ff       	call   c0001cda <st_qword>
c0007b50:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b53:	ba 20 00 00 00       	mov    edx,0x20
c0007b58:	e8 7a a1 ff ff       	call   c0001cd7 <st_dword>
c0007b5d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b61:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b65:	e8 6d a1 ff ff       	call   c0001cd7 <st_dword>
c0007b6a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b6e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b72:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b76:	e8 5c a1 ff ff       	call   c0001cd7 <st_dword>
c0007b7b:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b7e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b82:	e8 50 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b87:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b8b:	8d 50 02             	lea    edx,[eax+0x2]
c0007b8e:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b91:	e8 41 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b96:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b99:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b9e:	e8 34 a1 ff ff       	call   c0001cd7 <st_dword>
c0007ba3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007ba6:	ba 00 01 00 00       	mov    edx,0x100
c0007bab:	e8 23 a1 ff ff       	call   c0001cd3 <st_word>
c0007bb0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007bb4:	b8 0a 00 00 00       	mov    eax,0xa
c0007bb9:	48                   	dec    eax
c0007bba:	74 05                	je     c0007bc1 <f_mkfs+0x850>
c0007bbc:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007bbf:	eb f8                	jmp    c0007bb9 <f_mkfs+0x848>
c0007bc1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bc5:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007bc9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007bcd:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007bd1:	74 05                	je     c0007bd8 <f_mkfs+0x867>
c0007bd3:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007bd6:	eb f5                	jmp    c0007bcd <f_mkfs+0x85c>
c0007bd8:	8d 45 78             	lea    eax,[ebp+0x78]
c0007bdb:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007be0:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007be6:	31 db                	xor    ebx,ebx
c0007be8:	e8 e6 a0 ff ff       	call   c0001cd3 <st_word>
c0007bed:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bf3:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bf8:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bfb:	e8 d3 a0 ff ff       	call   c0001cd3 <st_word>
c0007c00:	31 c9                	xor    ecx,ecx
c0007c02:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007c05:	83 f8 01             	cmp    eax,0x1
c0007c08:	76 13                	jbe    c0007c1d <f_mkfs+0x8ac>
c0007c0a:	83 f9 70             	cmp    ecx,0x70
c0007c0d:	74 0e                	je     c0007c1d <f_mkfs+0x8ac>
c0007c0f:	89 da                	mov    edx,ebx
c0007c11:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007c16:	e8 41 a5 ff ff       	call   c000215c <xsum32>
c0007c1b:	89 c3                	mov    ebx,eax
c0007c1d:	41                   	inc    ecx
c0007c1e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c24:	75 dc                	jne    c0007c02 <f_mkfs+0x891>
c0007c26:	89 f0                	mov    eax,esi
c0007c28:	89 fa                	mov    edx,edi
c0007c2a:	83 c0 01             	add    eax,0x1
c0007c2d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c31:	83 d2 00             	adc    edx,0x0
c0007c34:	83 ec 0c             	sub    esp,0xc
c0007c37:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c3b:	6a 01                	push   0x1
c0007c3d:	57                   	push   edi
c0007c3e:	56                   	push   esi
c0007c3f:	55                   	push   ebp
c0007c40:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c44:	e8 e3 9f ff ff       	call   c0001c2c <disk_write>
c0007c49:	83 c4 20             	add    esp,0x20
c0007c4c:	85 c0                	test   eax,eax
c0007c4e:	0f 85 ce 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007c54:	31 d2                	xor    edx,edx
c0007c56:	b9 00 02 00 00       	mov    ecx,0x200
c0007c5b:	89 e8                	mov    eax,ebp
c0007c5d:	e8 93 a0 ff ff       	call   c0001cf5 <mem_set>
c0007c62:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c67:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c6a:	e8 64 a0 ff ff       	call   c0001cd3 <st_word>
c0007c6f:	89 f0                	mov    eax,esi
c0007c71:	89 fa                	mov    edx,edi
c0007c73:	83 c0 09             	add    eax,0x9
c0007c76:	83 d2 00             	adc    edx,0x0
c0007c79:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c7c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c80:	31 c9                	xor    ecx,ecx
c0007c82:	41                   	inc    ecx
c0007c83:	89 da                	mov    edx,ebx
c0007c85:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c8a:	e8 cd a4 ff ff       	call   c000215c <xsum32>
c0007c8f:	89 c3                	mov    ebx,eax
c0007c91:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c97:	75 e9                	jne    c0007c82 <f_mkfs+0x911>
c0007c99:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c9d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007ca1:	83 c0 01             	add    eax,0x1
c0007ca4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007ca8:	83 d2 00             	adc    edx,0x0
c0007cab:	83 ec 0c             	sub    esp,0xc
c0007cae:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007cb2:	6a 01                	push   0x1
c0007cb4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cb8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cbc:	55                   	push   ebp
c0007cbd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007cc1:	e8 66 9f ff ff       	call   c0001c2c <disk_write>
c0007cc6:	83 c4 20             	add    esp,0x20
c0007cc9:	85 c0                	test   eax,eax
c0007ccb:	0f 85 51 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007cd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cd5:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007cd9:	75 09                	jne    c0007ce4 <f_mkfs+0x973>
c0007cdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007cde:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ce2:	74 12                	je     c0007cf6 <f_mkfs+0x985>
c0007ce4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ce8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cf0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cf4:	eb 8a                	jmp    c0007c80 <f_mkfs+0x90f>
c0007cf6:	31 d2                	xor    edx,edx
c0007cf8:	b9 00 02 00 00       	mov    ecx,0x200
c0007cfd:	89 e8                	mov    eax,ebp
c0007cff:	e8 f1 9f ff ff       	call   c0001cf5 <mem_set>
c0007d04:	83 c6 0b             	add    esi,0xb
c0007d07:	83 d7 00             	adc    edi,0x0
c0007d0a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007d0e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007d12:	31 c9                	xor    ecx,ecx
c0007d14:	41                   	inc    ecx
c0007d15:	89 da                	mov    edx,ebx
c0007d17:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007d1c:	e8 3b a4 ff ff       	call   c000215c <xsum32>
c0007d21:	89 c3                	mov    ebx,eax
c0007d23:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d29:	75 e9                	jne    c0007d14 <f_mkfs+0x9a3>
c0007d2b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d2e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d32:	83 c6 01             	add    esi,0x1
c0007d35:	83 d7 00             	adc    edi,0x0
c0007d38:	83 ec 0c             	sub    esp,0xc
c0007d3b:	6a 01                	push   0x1
c0007d3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d45:	55                   	push   ebp
c0007d46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d4a:	e8 dd 9e ff ff       	call   c0001c2c <disk_write>
c0007d4f:	83 c4 20             	add    esp,0x20
c0007d52:	85 c0                	test   eax,eax
c0007d54:	0f 85 c8 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007d5a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d5e:	75 06                	jne    c0007d66 <f_mkfs+0x9f5>
c0007d60:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d64:	74 09                	je     c0007d6f <f_mkfs+0x9fe>
c0007d66:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d69:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d6d:	eb a3                	jmp    c0007d12 <f_mkfs+0x9a1>
c0007d6f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d73:	89 da                	mov    edx,ebx
c0007d75:	01 e8                	add    eax,ebp
c0007d77:	e8 5b 9f ff ff       	call   c0001cd7 <st_dword>
c0007d7c:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d81:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d89:	75 e4                	jne    c0007d6f <f_mkfs+0x9fe>
c0007d8b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d8e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d92:	83 c6 02             	add    esi,0x2
c0007d95:	83 d7 00             	adc    edi,0x0
c0007d98:	83 ec 0c             	sub    esp,0xc
c0007d9b:	6a 01                	push   0x1
c0007d9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da5:	55                   	push   ebp
c0007da6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007daa:	e8 7d 9e ff ff       	call   c0001c2c <disk_write>
c0007daf:	83 c4 20             	add    esp,0x20
c0007db2:	85 c0                	test   eax,eax
c0007db4:	0f 85 68 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007dba:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007dbf:	74 0d                	je     c0007dce <f_mkfs+0xa5d>
c0007dc1:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007dc9:	e9 43 fd ff ff       	jmp    c0007b11 <f_mkfs+0x7a0>
c0007dce:	b1 07                	mov    cl,0x7
c0007dd0:	e9 e3 05 00 00       	jmp    c00083b8 <f_mkfs+0x1047>
c0007dd5:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007dda:	0f 85 4f 02 00 00    	jne    c000802f <f_mkfs+0xcbe>
c0007de0:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007de5:	0f 86 22 02 00 00    	jbe    c000800d <f_mkfs+0xc9c>
c0007deb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007df0:	0f 85 81 06 00 00    	jne    c0008477 <f_mkfs+0x1106>
c0007df6:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007df9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dfd:	83 f8 40             	cmp    eax,0x40
c0007e00:	0f 87 51 06 00 00    	ja     c0008457 <f_mkfs+0x10e6>
c0007e06:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007e0a:	85 ff                	test   edi,edi
c0007e0c:	75 1c                	jne    c0007e2a <f_mkfs+0xab9>
c0007e0e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007e11:	ba 60 93 02 c0       	mov    edx,0xc0029360
c0007e16:	c1 e9 0c             	shr    ecx,0xc
c0007e19:	bf 01 00 00 00       	mov    edi,0x1
c0007e1e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007e21:	66 85 c0             	test   ax,ax
c0007e24:	0f 85 95 01 00 00    	jne    c0007fbf <f_mkfs+0xc4e>
c0007e2a:	31 d2                	xor    edx,edx
c0007e2c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e2f:	f7 f7                	div    edi
c0007e31:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e36:	0f 86 95 01 00 00    	jbe    c0007fd1 <f_mkfs+0xc60>
c0007e3c:	83 c0 02             	add    eax,0x2
c0007e3f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e44:	01 c0                	add    eax,eax
c0007e46:	05 ff 01 00 00       	add    eax,0x1ff
c0007e4b:	be 01 00 00 00       	mov    esi,0x1
c0007e50:	c1 e8 09             	shr    eax,0x9
c0007e53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e57:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e5b:	c1 e0 05             	shl    eax,0x5
c0007e5e:	c1 e8 09             	shr    eax,0x9
c0007e61:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e65:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e6a:	31 d2                	xor    edx,edx
c0007e6c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e70:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e74:	89 f0                	mov    eax,esi
c0007e76:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e7a:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e7e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e82:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e86:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e8a:	31 d2                	xor    edx,edx
c0007e8c:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e91:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e95:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e99:	31 db                	xor    ebx,ebx
c0007e9b:	01 c8                	add    eax,ecx
c0007e9d:	11 da                	adc    edx,ebx
c0007e9f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007ea3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007ea7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007eab:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007eaf:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007eb3:	f7 da                	neg    edx
c0007eb5:	21 d1                	and    ecx,edx
c0007eb7:	29 d9                	sub    ecx,ebx
c0007eb9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ebe:	0f 85 20 01 00 00    	jne    c0007fe4 <f_mkfs+0xc73>
c0007ec4:	31 db                	xor    ebx,ebx
c0007ec6:	01 ce                	add    esi,ecx
c0007ec8:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ecc:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007ed0:	31 d2                	xor    edx,edx
c0007ed2:	89 f8                	mov    eax,edi
c0007ed4:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007ed8:	c1 e0 04             	shl    eax,0x4
c0007edb:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007edf:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ee3:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ee7:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eeb:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eee:	19 d3                	sbb    ebx,edx
c0007ef0:	0f 82 40 01 00 00    	jb     c0008036 <f_mkfs+0xcc5>
c0007ef6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ef9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007efd:	89 c8                	mov    eax,ecx
c0007eff:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007f04:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007f08:	29 f0                	sub    eax,esi
c0007f0a:	29 d0                	sub    eax,edx
c0007f0c:	31 d2                	xor    edx,edx
c0007f0e:	f7 f7                	div    edi
c0007f10:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f15:	89 c3                	mov    ebx,eax
c0007f17:	0f 85 b8 fe ff ff    	jne    c0007dd5 <f_mkfs+0xa64>
c0007f1d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f22:	0f 87 1d 01 00 00    	ja     c0008045 <f_mkfs+0xcd4>
c0007f28:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f2d:	0f 85 03 01 00 00    	jne    c0008036 <f_mkfs+0xcc5>
c0007f33:	83 ff 01             	cmp    edi,0x1
c0007f36:	0f 86 fa 00 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007f3c:	d1 ef                	shr    edi,1
c0007f3e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f42:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f46:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f49:	85 db                	test   ebx,ebx
c0007f4b:	75 2d                	jne    c0007f7a <f_mkfs+0xc09>
c0007f4d:	89 cb                	mov    ebx,ecx
c0007f4f:	ba 70 93 02 c0       	mov    edx,0xc0029370
c0007f54:	c1 eb 11             	shr    ebx,0x11
c0007f57:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f5f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f62:	66 85 c0             	test   ax,ax
c0007f65:	74 11                	je     c0007f78 <f_mkfs+0xc07>
c0007f67:	83 c2 02             	add    edx,0x2
c0007f6a:	39 d8                	cmp    eax,ebx
c0007f6c:	77 0a                	ja     c0007f78 <f_mkfs+0xc07>
c0007f6e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f72:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f76:	eb e7                	jmp    c0007f5f <f_mkfs+0xbee>
c0007f78:	31 db                	xor    ebx,ebx
c0007f7a:	31 d2                	xor    edx,edx
c0007f7c:	89 c8                	mov    eax,ecx
c0007f7e:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f82:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f89:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f8e:	c1 ea 09             	shr    edx,0x9
c0007f91:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f96:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f9a:	0f 87 96 00 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007fa0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007fa4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007fac:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007fb0:	be 20 00 00 00       	mov    esi,0x20
c0007fb5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007fba:	e9 a6 fe ff ff       	jmp    c0007e65 <f_mkfs+0xaf4>
c0007fbf:	83 c2 02             	add    edx,0x2
c0007fc2:	39 c8                	cmp    eax,ecx
c0007fc4:	0f 87 60 fe ff ff    	ja     c0007e2a <f_mkfs+0xab9>
c0007fca:	01 ff                	add    edi,edi
c0007fcc:	e9 4d fe ff ff       	jmp    c0007e1e <f_mkfs+0xaad>
c0007fd1:	8d 04 40             	lea    eax,[eax+eax*2]
c0007fd4:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007fd9:	40                   	inc    eax
c0007fda:	d1 e8                	shr    eax,1
c0007fdc:	83 c0 03             	add    eax,0x3
c0007fdf:	e9 62 fe ff ff       	jmp    c0007e46 <f_mkfs+0xad5>
c0007fe4:	31 d2                	xor    edx,edx
c0007fe6:	89 c8                	mov    eax,ecx
c0007fe8:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fec:	85 d2                	test   edx,edx
c0007fee:	74 0c                	je     c0007ffc <f_mkfs+0xc8b>
c0007ff0:	49                   	dec    ecx
c0007ff1:	46                   	inc    esi
c0007ff2:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007ff7:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007ffc:	89 c8                	mov    eax,ecx
c0007ffe:	31 d2                	xor    edx,edx
c0008000:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008004:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008008:	e9 c3 fe ff ff       	jmp    c0007ed0 <f_mkfs+0xb5f>
c000800d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008012:	77 31                	ja     c0008045 <f_mkfs+0xcd4>
c0008014:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008019:	75 1b                	jne    c0008036 <f_mkfs+0xcc5>
c000801b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000801e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008022:	3d 80 00 00 00       	cmp    eax,0x80
c0008027:	0f 86 d9 fd ff ff    	jbe    c0007e06 <f_mkfs+0xa95>
c000802d:	eb 07                	jmp    c0008036 <f_mkfs+0xcc5>
c000802f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008034:	76 0a                	jbe    c0008040 <f_mkfs+0xccf>
c0008036:	bb 0e 00 00 00       	mov    ebx,0xe
c000803b:	e9 ff 03 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0008040:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008045:	31 d2                	xor    edx,edx
c0008047:	b9 00 02 00 00       	mov    ecx,0x200
c000804c:	89 e8                	mov    eax,ebp
c000804e:	e8 a2 9c ff ff       	call   c0001cf5 <mem_set>
c0008053:	b9 0b 00 00 00       	mov    ecx,0xb
c0008058:	ba 82 94 02 c0       	mov    edx,0xc0029482
c000805d:	89 e8                	mov    eax,ebp
c000805f:	e8 7c 9c ff ff       	call   c0001ce0 <mem_cpy>
c0008064:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008067:	ba 00 02 00 00       	mov    edx,0x200
c000806c:	e8 62 9c ff ff       	call   c0001cd3 <st_word>
c0008071:	89 f8                	mov    eax,edi
c0008073:	0f b7 d6             	movzx  edx,si
c0008076:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0008079:	8d 45 0e             	lea    eax,[ebp+0xe]
c000807c:	e8 52 9c ff ff       	call   c0001cd3 <st_word>
c0008081:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0008085:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000808a:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c000808d:	75 08                	jne    c0008097 <f_mkfs+0xd26>
c000808f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0008097:	8d 45 11             	lea    eax,[ebp+0x11]
c000809a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000809e:	e8 30 9c ff ff       	call   c0001cd3 <st_word>
c00080a3:	b8 ff ff 00 00       	mov    eax,0xffff
c00080a8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00080ac:	39 d0                	cmp    eax,edx
c00080ae:	b8 00 00 00 00       	mov    eax,0x0
c00080b3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00080b7:	72 0a                	jb     c00080c3 <f_mkfs+0xd52>
c00080b9:	8d 45 13             	lea    eax,[ebp+0x13]
c00080bc:	e8 12 9c ff ff       	call   c0001cd3 <st_word>
c00080c1:	eb 08                	jmp    c00080cb <f_mkfs+0xd5a>
c00080c3:	8d 45 20             	lea    eax,[ebp+0x20]
c00080c6:	e8 0c 9c ff ff       	call   c0001cd7 <st_dword>
c00080cb:	8d 45 18             	lea    eax,[ebp+0x18]
c00080ce:	ba 3f 00 00 00       	mov    edx,0x3f
c00080d3:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00080d7:	e8 f7 9b ff ff       	call   c0001cd3 <st_word>
c00080dc:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080df:	ba ff 00 00 00       	mov    edx,0xff
c00080e4:	e8 ea 9b ff ff       	call   c0001cd3 <st_word>
c00080e9:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080f0:	e8 e2 9b ff ff       	call   c0001cd7 <st_dword>
c00080f5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080fa:	75 57                	jne    c0008153 <f_mkfs+0xde2>
c00080fc:	8d 45 43             	lea    eax,[ebp+0x43]
c00080ff:	ba 00 00 21 50       	mov    edx,0x50210000
c0008104:	e8 ce 9b ff ff       	call   c0001cd7 <st_dword>
c0008109:	8d 45 24             	lea    eax,[ebp+0x24]
c000810c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008110:	e8 c2 9b ff ff       	call   c0001cd7 <st_dword>
c0008115:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008118:	ba 02 00 00 00       	mov    edx,0x2
c000811d:	e8 b5 9b ff ff       	call   c0001cd7 <st_dword>
c0008122:	8d 45 30             	lea    eax,[ebp+0x30]
c0008125:	ba 01 00 00 00       	mov    edx,0x1
c000812a:	e8 a4 9b ff ff       	call   c0001cd3 <st_word>
c000812f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008132:	ba 06 00 00 00       	mov    edx,0x6
c0008137:	e8 97 9b ff ff       	call   c0001cd3 <st_word>
c000813c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008140:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008144:	8d 45 47             	lea    eax,[ebp+0x47]
c0008147:	b9 13 00 00 00       	mov    ecx,0x13
c000814c:	ba 8e 94 02 c0       	mov    edx,0xc002948e
c0008151:	eb 2f                	jmp    c0008182 <f_mkfs+0xe11>
c0008153:	8d 45 27             	lea    eax,[ebp+0x27]
c0008156:	ba 00 00 21 50       	mov    edx,0x50210000
c000815b:	e8 77 9b ff ff       	call   c0001cd7 <st_dword>
c0008160:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008165:	8d 45 16             	lea    eax,[ebp+0x16]
c0008168:	e8 66 9b ff ff       	call   c0001cd3 <st_word>
c000816d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008171:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0008175:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0008178:	b9 13 00 00 00       	mov    ecx,0x13
c000817d:	ba a2 94 02 c0       	mov    edx,0xc00294a2
c0008182:	e8 59 9b ff ff       	call   c0001ce0 <mem_cpy>
c0008187:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c000818d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008192:	89 f0                	mov    eax,esi
c0008194:	e8 3a 9b ff ff       	call   c0001cd3 <st_word>
c0008199:	83 ec 0c             	sub    esp,0xc
c000819c:	6a 01                	push   0x1
c000819e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a6:	55                   	push   ebp
c00081a7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081ab:	e8 7c 9a ff ff       	call   c0001c2c <disk_write>
c00081b0:	83 c4 20             	add    esp,0x20
c00081b3:	85 c0                	test   eax,eax
c00081b5:	0f 85 67 02 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00081bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081c0:	0f 85 b7 00 00 00    	jne    c000827d <f_mkfs+0xf0c>
c00081c6:	83 ec 0c             	sub    esp,0xc
c00081c9:	6a 01                	push   0x1
c00081cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081cf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00081d3:	83 c0 06             	add    eax,0x6
c00081d6:	83 d2 00             	adc    edx,0x0
c00081d9:	52                   	push   edx
c00081da:	50                   	push   eax
c00081db:	55                   	push   ebp
c00081dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081e0:	e8 47 9a ff ff       	call   c0001c2c <disk_write>
c00081e5:	83 c4 20             	add    esp,0x20
c00081e8:	b9 00 02 00 00       	mov    ecx,0x200
c00081ed:	31 d2                	xor    edx,edx
c00081ef:	89 e8                	mov    eax,ebp
c00081f1:	e8 ff 9a ff ff       	call   c0001cf5 <mem_set>
c00081f6:	ba 52 52 61 41       	mov    edx,0x41615252
c00081fb:	89 e8                	mov    eax,ebp
c00081fd:	e8 d5 9a ff ff       	call   c0001cd7 <st_dword>
c0008202:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008208:	ba 72 72 41 61       	mov    edx,0x61417272
c000820d:	e8 c5 9a ff ff       	call   c0001cd7 <st_dword>
c0008212:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008215:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000821b:	e8 b7 9a ff ff       	call   c0001cd7 <st_dword>
c0008220:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008226:	ba 02 00 00 00       	mov    edx,0x2
c000822b:	e8 a7 9a ff ff       	call   c0001cd7 <st_dword>
c0008230:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008235:	89 f0                	mov    eax,esi
c0008237:	e8 97 9a ff ff       	call   c0001cd3 <st_word>
c000823c:	83 ec 0c             	sub    esp,0xc
c000823f:	6a 01                	push   0x1
c0008241:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008245:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008249:	83 c0 07             	add    eax,0x7
c000824c:	83 d2 00             	adc    edx,0x0
c000824f:	52                   	push   edx
c0008250:	50                   	push   eax
c0008251:	55                   	push   ebp
c0008252:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008256:	e8 d1 99 ff ff       	call   c0001c2c <disk_write>
c000825b:	83 c4 14             	add    esp,0x14
c000825e:	6a 01                	push   0x1
c0008260:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008264:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008268:	83 c0 01             	add    eax,0x1
c000826b:	83 d2 00             	adc    edx,0x0
c000826e:	52                   	push   edx
c000826f:	50                   	push   eax
c0008270:	55                   	push   ebp
c0008271:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008275:	e8 b2 99 ff ff       	call   c0001c2c <disk_write>
c000827a:	83 c4 20             	add    esp,0x20
c000827d:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008284:	31 d2                	xor    edx,edx
c0008286:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000828c:	31 db                	xor    ebx,ebx
c000828e:	89 e8                	mov    eax,ebp
c0008290:	e8 60 9a ff ff       	call   c0001cf5 <mem_set>
c0008295:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000829a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00082a1:	0f 94 c3             	sete   bl
c00082a4:	4b                   	dec    ebx
c00082a5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00082ab:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00082b1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082b6:	75 21                	jne    c00082d9 <f_mkfs+0xf68>
c00082b8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00082bd:	89 e8                	mov    eax,ebp
c00082bf:	e8 13 9a ff ff       	call   c0001cd7 <st_dword>
c00082c4:	8d 45 04             	lea    eax,[ebp+0x4]
c00082c7:	83 ca ff             	or     edx,0xffffffff
c00082ca:	e8 08 9a ff ff       	call   c0001cd7 <st_dword>
c00082cf:	8d 45 08             	lea    eax,[ebp+0x8]
c00082d2:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00082d7:	eb 04                	jmp    c00082dd <f_mkfs+0xf6c>
c00082d9:	89 da                	mov    edx,ebx
c00082db:	89 e8                	mov    eax,ebp
c00082dd:	e8 f5 99 ff ff       	call   c0001cd7 <st_dword>
c00082e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082ea:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082ee:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082f2:	39 ce                	cmp    esi,ecx
c00082f4:	76 02                	jbe    c00082f8 <f_mkfs+0xf87>
c00082f6:	89 ce                	mov    esi,ecx
c00082f8:	83 ec 0c             	sub    esp,0xc
c00082fb:	56                   	push   esi
c00082fc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008300:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008304:	55                   	push   ebp
c0008305:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008309:	e8 1e 99 ff ff       	call   c0001c2c <disk_write>
c000830e:	83 c4 20             	add    esp,0x20
c0008311:	85 c0                	test   eax,eax
c0008313:	0f 85 09 01 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008319:	31 d2                	xor    edx,edx
c000831b:	b9 00 02 00 00       	mov    ecx,0x200
c0008320:	89 e8                	mov    eax,ebp
c0008322:	e8 ce 99 ff ff       	call   c0001cf5 <mem_set>
c0008327:	31 d2                	xor    edx,edx
c0008329:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000832d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008331:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008335:	75 b3                	jne    c00082ea <f_mkfs+0xf79>
c0008337:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000833a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008341:	40                   	inc    eax
c0008342:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008346:	0f 87 65 ff ff ff    	ja     c00082b1 <f_mkfs+0xf40>
c000834c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008351:	74 04                	je     c0008357 <f_mkfs+0xfe6>
c0008353:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008357:	89 fb                	mov    ebx,edi
c0008359:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000835d:	76 04                	jbe    c0008363 <f_mkfs+0xff2>
c000835f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008363:	83 ec 0c             	sub    esp,0xc
c0008366:	53                   	push   ebx
c0008367:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836f:	55                   	push   ebp
c0008370:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008374:	e8 b3 98 ff ff       	call   c0001c2c <disk_write>
c0008379:	83 c4 20             	add    esp,0x20
c000837c:	85 c0                	test   eax,eax
c000837e:	0f 85 9e 00 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008384:	31 d2                	xor    edx,edx
c0008386:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000838a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000838e:	29 df                	sub    edi,ebx
c0008390:	75 c5                	jne    c0008357 <f_mkfs+0xfe6>
c0008392:	b1 0c                	mov    cl,0xc
c0008394:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008399:	74 1d                	je     c00083b8 <f_mkfs+0x1047>
c000839b:	b8 ff ff 00 00       	mov    eax,0xffff
c00083a0:	b1 06                	mov    cl,0x6
c00083a2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00083a6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00083aa:	72 0c                	jb     c00083b8 <f_mkfs+0x1047>
c00083ac:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00083b1:	0f 94 c1             	sete   cl
c00083b4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00083b8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00083bd:	75 4c                	jne    c000840b <f_mkfs+0x109a>
c00083bf:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00083c3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00083c7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00083ce:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00083d5:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083e0:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083eb:	0f b6 c9             	movzx  ecx,cl
c00083ee:	83 ec 0c             	sub    esp,0xc
c00083f1:	55                   	push   ebp
c00083f2:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083fd:	e8 2f c2 ff ff       	call   c0004631 <create_partition>
c0008402:	83 c4 10             	add    esp,0x10
c0008405:	89 c3                	mov    ebx,eax
c0008407:	85 c0                	test   eax,eax
c0008409:	75 34                	jne    c000843f <f_mkfs+0x10ce>
c000840b:	31 db                	xor    ebx,ebx
c000840d:	50                   	push   eax
c000840e:	6a 00                	push   0x0
c0008410:	6a 00                	push   0x0
c0008412:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008416:	e8 27 98 ff ff       	call   c0001c42 <disk_ioctl>
c000841b:	83 c4 10             	add    esp,0x10
c000841e:	85 c0                	test   eax,eax
c0008420:	74 1d                	je     c000843f <f_mkfs+0x10ce>
c0008422:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000842a:	75 0c                	jne    c0008438 <f_mkfs+0x10c7>
c000842c:	83 ec 0c             	sub    esp,0xc
c000842f:	55                   	push   ebp
c0008430:	e8 75 00 00 00       	call   c00084aa <ff_memfree>
c0008435:	83 c4 10             	add    esp,0x10
c0008438:	bb 01 00 00 00       	mov    ebx,0x1
c000843d:	eb 48                	jmp    c0008487 <f_mkfs+0x1116>
c000843f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008447:	75 3e                	jne    c0008487 <f_mkfs+0x1116>
c0008449:	83 ec 0c             	sub    esp,0xc
c000844c:	55                   	push   ebp
c000844d:	e8 58 00 00 00       	call   c00084aa <ff_memfree>
c0008452:	83 c4 10             	add    esp,0x10
c0008455:	eb 30                	jmp    c0008487 <f_mkfs+0x1116>
c0008457:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000845c:	0f 85 eb fa ff ff    	jne    c0007f4d <f_mkfs+0xbdc>
c0008462:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008466:	81 ff 80 00 00 00    	cmp    edi,0x80
c000846c:	0f 86 b8 f9 ff ff    	jbe    c0007e2a <f_mkfs+0xab9>
c0008472:	e9 bf fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008477:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000847c:	0f 85 c0 fa ff ff    	jne    c0007f42 <f_mkfs+0xbd1>
c0008482:	e9 af fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008487:	81 c4 9c 00 00 00    	add    esp,0x9c
c000848d:	89 d8                	mov    eax,ebx
c000848f:	5b                   	pop    ebx
c0008490:	5e                   	pop    esi
c0008491:	5f                   	pop    edi
c0008492:	5d                   	pop    ebp
c0008493:	c3                   	ret    

c0008494 <ff_memalloc>:
c0008494:	83 ec 0c             	sub    esp,0xc
c0008497:	83 ec 0c             	sub    esp,0xc
c000849a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000849e:	e8 9d 73 00 00       	call   c000f840 <malloc>
c00084a3:	83 c4 10             	add    esp,0x10
c00084a6:	83 c4 0c             	add    esp,0xc
c00084a9:	c3                   	ret    

c00084aa <ff_memfree>:
c00084aa:	83 ec 0c             	sub    esp,0xc
c00084ad:	83 ec 0c             	sub    esp,0xc
c00084b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084b4:	e8 97 73 00 00       	call   c000f850 <free>
c00084b9:	83 c4 10             	add    esp,0x10
c00084bc:	90                   	nop
c00084bd:	83 c4 0c             	add    esp,0xc
c00084c0:	c3                   	ret    

c00084c1 <ff_uni2oem>:
c00084c1:	83 ec 14             	sub    esp,0x14
c00084c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00084c8:	66 89 04 24          	mov    WORD PTR [esp],ax
c00084cc:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084d3:	c7 44 24 0c c0 97 02 c0 	mov    DWORD PTR [esp+0xc],0xc00297c0
c00084db:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084e0:	77 0b                	ja     c00084ed <ff_uni2oem+0x2c>
c00084e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084e6:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084eb:	eb 5b                	jmp    c0008548 <ff_uni2oem+0x87>
c00084ed:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084f5:	77 51                	ja     c0008548 <ff_uni2oem+0x87>
c00084f7:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084fd:	75 49                	jne    c0008548 <ff_uni2oem+0x87>
c00084ff:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008506:	eb 0b                	jmp    c0008513 <ff_uni2oem+0x52>
c0008508:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000850d:	40                   	inc    eax
c000850e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008513:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008519:	77 1b                	ja     c0008536 <ff_uni2oem+0x75>
c000851b:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008520:	01 c0                	add    eax,eax
c0008522:	89 c2                	mov    edx,eax
c0008524:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008528:	01 d0                	add    eax,edx
c000852a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000852d:	0f b7 c0             	movzx  eax,ax
c0008530:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008534:	75 d2                	jne    c0008508 <ff_uni2oem+0x47>
c0008536:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000853b:	83 e8 80             	sub    eax,0xffffff80
c000853e:	25 ff 00 00 00       	and    eax,0xff
c0008543:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008548:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000854d:	83 c4 14             	add    esp,0x14
c0008550:	c3                   	ret    

c0008551 <ff_oem2uni>:
c0008551:	83 ec 18             	sub    esp,0x18
c0008554:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008558:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000855c:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008561:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008565:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000856c:	c7 44 24 10 c0 97 02 c0 	mov    DWORD PTR [esp+0x10],0xc00297c0
c0008574:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000857a:	77 0b                	ja     c0008587 <ff_oem2uni+0x36>
c000857c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008580:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008585:	eb 2d                	jmp    c00085b4 <ff_oem2uni+0x63>
c0008587:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000858d:	75 25                	jne    c00085b4 <ff_oem2uni+0x63>
c000858f:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008596:	77 1c                	ja     c00085b4 <ff_oem2uni+0x63>
c0008598:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000859d:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00085a2:	01 c0                	add    eax,eax
c00085a4:	89 c2                	mov    edx,eax
c00085a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085aa:	01 d0                	add    eax,edx
c00085ac:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085af:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00085b4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00085b9:	83 c4 18             	add    esp,0x18
c00085bc:	c3                   	ret    

c00085bd <ff_wtoupper>:
c00085bd:	83 ec 10             	sub    esp,0x10
c00085c0:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00085c8:	0f 87 3e 01 00 00    	ja     c000870c <ff_wtoupper+0x14f>
c00085ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085d2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00085d7:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085de:	77 07                	ja     c00085e7 <ff_wtoupper+0x2a>
c00085e0:	b8 c0 95 02 c0       	mov    eax,0xc00295c0
c00085e5:	eb 05                	jmp    c00085ec <ff_wtoupper+0x2f>
c00085e7:	b8 00 95 02 c0       	mov    eax,0xc0029500
c00085ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085f4:	8d 50 02             	lea    edx,[eax+0x2]
c00085f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085fb:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085fe:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008603:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008609:	0f 84 f4 00 00 00    	je     c0008703 <ff_wtoupper+0x146>
c000860f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008614:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008619:	0f 82 e4 00 00 00    	jb     c0008703 <ff_wtoupper+0x146>
c000861f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008623:	8d 50 02             	lea    edx,[eax+0x2]
c0008626:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000862a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000862d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008632:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008637:	66 c1 e8 08          	shr    ax,0x8
c000863b:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008640:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008647:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000864c:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008651:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008656:	01 ca                	add    edx,ecx
c0008658:	39 d0                	cmp    eax,edx
c000865a:	0f 8d 86 00 00 00    	jge    c00086e6 <ff_wtoupper+0x129>
c0008660:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008665:	83 f8 08             	cmp    eax,0x8
c0008668:	0f 87 94 00 00 00    	ja     c0008702 <ff_wtoupper+0x145>
c000866e:	8b 04 85 c0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b40]
c0008675:	ff e0                	jmp    eax
c0008677:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000867c:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008681:	29 c2                	sub    edx,eax
c0008683:	89 d0                	mov    eax,edx
c0008685:	01 c0                	add    eax,eax
c0008687:	89 c2                	mov    edx,eax
c0008689:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000868d:	01 d0                	add    eax,edx
c000868f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008692:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008697:	eb 4b                	jmp    c00086e4 <ff_wtoupper+0x127>
c0008699:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000869e:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00086a2:	83 e0 01             	and    eax,0x1
c00086a5:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00086aa:	eb 38                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086ac:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00086b2:	eb 30                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086b4:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00086ba:	eb 28                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086bc:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00086c2:	eb 20                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086c4:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00086ca:	eb 18                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086cc:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00086d2:	eb 10                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086d4:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086da:	eb 08                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086dc:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086e3:	90                   	nop
c00086e4:	eb 1c                	jmp    c0008702 <ff_wtoupper+0x145>
c00086e6:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086ec:	0f 85 fe fe ff ff    	jne    c00085f0 <ff_wtoupper+0x33>
c00086f2:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086f7:	01 c0                	add    eax,eax
c00086f9:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086fd:	e9 ee fe ff ff       	jmp    c00085f0 <ff_wtoupper+0x33>
c0008702:	90                   	nop
c0008703:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008708:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000870c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008710:	83 c4 10             	add    esp,0x10
c0008713:	c3                   	ret    

c0008714 <psrc_set_converter>:
c0008714:	56                   	push   esi
c0008715:	89 d6                	mov    esi,edx
c0008717:	53                   	push   ebx
c0008718:	89 c3                	mov    ebx,eax
c000871a:	83 ec 0c             	sub    esp,0xc
c000871d:	52                   	push   edx
c000871e:	50                   	push   eax
c000871f:	e8 6f 55 00 00       	call   c000dc93 <sinc_set_converter>
c0008724:	83 c4 10             	add    esp,0x10
c0008727:	85 c0                	test   eax,eax
c0008729:	74 25                	je     c0008750 <psrc_set_converter+0x3c>
c000872b:	50                   	push   eax
c000872c:	50                   	push   eax
c000872d:	56                   	push   esi
c000872e:	53                   	push   ebx
c000872f:	e8 17 5d 00 00       	call   c000e44b <zoh_set_converter>
c0008734:	83 c4 10             	add    esp,0x10
c0008737:	85 c0                	test   eax,eax
c0008739:	74 15                	je     c0008750 <psrc_set_converter+0x3c>
c000873b:	51                   	push   ecx
c000873c:	51                   	push   ecx
c000873d:	56                   	push   esi
c000873e:	53                   	push   ebx
c000873f:	e8 0f 11 00 00       	call   c0009853 <linear_set_converter>
c0008744:	83 c4 10             	add    esp,0x10
c0008747:	ba 0a 00 00 00       	mov    edx,0xa
c000874c:	85 c0                	test   eax,eax
c000874e:	75 02                	jne    c0008752 <psrc_set_converter+0x3e>
c0008750:	31 d2                	xor    edx,edx
c0008752:	89 d0                	mov    eax,edx
c0008754:	5a                   	pop    edx
c0008755:	5b                   	pop    ebx
c0008756:	5e                   	pop    esi
c0008757:	c3                   	ret    

c0008758 <src_delete>:
c0008758:	53                   	push   ebx
c0008759:	83 ec 08             	sub    esp,0x8
c000875c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008760:	85 db                	test   ebx,ebx
c0008762:	74 29                	je     c000878d <src_delete+0x35>
c0008764:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008767:	85 c0                	test   eax,eax
c0008769:	74 0c                	je     c0008777 <src_delete+0x1f>
c000876b:	83 ec 0c             	sub    esp,0xc
c000876e:	50                   	push   eax
c000876f:	e8 dc 70 00 00       	call   c000f850 <free>
c0008774:	83 c4 10             	add    esp,0x10
c0008777:	50                   	push   eax
c0008778:	6a 3c                	push   0x3c
c000877a:	6a 00                	push   0x0
c000877c:	53                   	push   ebx
c000877d:	e8 f6 7f ff ff       	call   c0000778 <memset>
c0008782:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008785:	e8 c6 70 00 00       	call   c000f850 <free>
c000878a:	83 c4 10             	add    esp,0x10
c000878d:	31 c0                	xor    eax,eax
c000878f:	83 c4 08             	add    esp,0x8
c0008792:	5b                   	pop    ebx
c0008793:	c3                   	ret    

c0008794 <src_process>:
c0008794:	55                   	push   ebp
c0008795:	57                   	push   edi
c0008796:	56                   	push   esi
c0008797:	53                   	push   ebx
c0008798:	83 ec 1c             	sub    esp,0x1c
c000879b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000879f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00087a3:	85 ed                	test   ebp,ebp
c00087a5:	0f 84 6f 01 00 00    	je     c000891a <src_process+0x186>
c00087ab:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c00087af:	0f 84 6c 01 00 00    	je     c0008921 <src_process+0x18d>
c00087b5:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00087b9:	0f 84 62 01 00 00    	je     c0008921 <src_process+0x18d>
c00087bf:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00087c6:	0f 85 5c 01 00 00    	jne    c0008928 <src_process+0x194>
c00087cc:	85 db                	test   ebx,ebx
c00087ce:	0f 84 5b 01 00 00    	je     c000892f <src_process+0x19b>
c00087d4:	8b 33                	mov    esi,DWORD PTR [ebx]
c00087d6:	85 f6                	test   esi,esi
c00087d8:	0f 84 58 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087de:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087e1:	85 ff                	test   edi,edi
c00087e3:	0f 84 4d 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087e9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087ec:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087f7:	68 00 00 70 3f       	push   0x3f700000
c00087fc:	6a 00                	push   0x0
c00087fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008802:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008806:	e8 74 fc 01 00       	call   c002847f <__ltdf2>
c000880b:	83 c4 10             	add    esp,0x10
c000880e:	85 c0                	test   eax,eax
c0008810:	0f 88 27 01 00 00    	js     c000893d <src_process+0x1a9>
c0008816:	68 00 00 70 40       	push   0x40700000
c000881b:	6a 00                	push   0x0
c000881d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008821:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008825:	e8 37 fc 01 00       	call   c0028461 <__gtdf2>
c000882a:	83 c4 10             	add    esp,0x10
c000882d:	85 c0                	test   eax,eax
c000882f:	0f 8f 08 01 00 00    	jg     c000893d <src_process+0x1a9>
c0008835:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008839:	79 07                	jns    c0008842 <src_process+0xae>
c000883b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008842:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008845:	85 c0                	test   eax,eax
c0008847:	79 50                	jns    c0008899 <src_process+0x105>
c0008849:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008850:	39 fe                	cmp    esi,edi
c0008852:	72 37                	jb     c000888b <src_process+0xf7>
c0008854:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000885b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008862:	68 00 00 70 3f       	push   0x3f700000
c0008867:	6a 00                	push   0x0
c0008869:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000886c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000886f:	e8 0b fc 01 00       	call   c002847f <__ltdf2>
c0008874:	83 c4 10             	add    esp,0x10
c0008877:	85 c0                	test   eax,eax
c0008879:	79 37                	jns    c00088b2 <src_process+0x11e>
c000887b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000887f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008883:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008886:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008889:	eb 27                	jmp    c00088b2 <src_process+0x11e>
c000888b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000888e:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008892:	8d 04 86             	lea    eax,[esi+eax*4]
c0008895:	39 c7                	cmp    edi,eax
c0008897:	eb 0d                	jmp    c00088a6 <src_process+0x112>
c0008899:	39 fe                	cmp    esi,edi
c000889b:	72 ee                	jb     c000888b <src_process+0xf7>
c000889d:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c00088a1:	8d 04 87             	lea    eax,[edi+eax*4]
c00088a4:	39 c6                	cmp    esi,eax
c00088a6:	73 ac                	jae    c0008854 <src_process+0xc0>
c00088a8:	b8 10 00 00 00       	mov    eax,0x10
c00088ad:	e9 90 00 00 00       	jmp    c0008942 <src_process+0x1ae>
c00088b2:	83 ec 10             	sub    esp,0x10
c00088b5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00088b8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00088bb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00088be:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00088c1:	e8 be f2 01 00       	call   c0027b84 <__subdf3>
c00088c6:	83 c4 18             	add    esp,0x18
c00088c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00088cd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00088d1:	52                   	push   edx
c00088d2:	50                   	push   eax
c00088d3:	e8 38 fd 01 00       	call   c0028610 <fabs>
c00088d8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088dc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088e0:	83 c4 10             	add    esp,0x10
c00088e3:	68 af 03 d2 3c       	push   0x3cd203af
c00088e8:	68 16 56 e7 9e       	push   0x9ee75616
c00088ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f5:	e8 85 fb 01 00       	call   c002847f <__ltdf2>
c00088fa:	83 c4 10             	add    esp,0x10
c00088fd:	85 c0                	test   eax,eax
c00088ff:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0008903:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c0008907:	79 05                	jns    c000890e <src_process+0x17a>
c0008909:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000890c:	eb 03                	jmp    c0008911 <src_process+0x17d>
c000890e:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0008911:	83 c4 1c             	add    esp,0x1c
c0008914:	5b                   	pop    ebx
c0008915:	5e                   	pop    esi
c0008916:	5f                   	pop    edi
c0008917:	5d                   	pop    ebp
c0008918:	ff e0                	jmp    eax
c000891a:	b8 02 00 00 00       	mov    eax,0x2
c000891f:	eb 21                	jmp    c0008942 <src_process+0x1ae>
c0008921:	b8 07 00 00 00       	mov    eax,0x7
c0008926:	eb 1a                	jmp    c0008942 <src_process+0x1ae>
c0008928:	b8 12 00 00 00       	mov    eax,0x12
c000892d:	eb 13                	jmp    c0008942 <src_process+0x1ae>
c000892f:	b8 03 00 00 00       	mov    eax,0x3
c0008934:	eb 0c                	jmp    c0008942 <src_process+0x1ae>
c0008936:	b8 04 00 00 00       	mov    eax,0x4
c000893b:	eb 05                	jmp    c0008942 <src_process+0x1ae>
c000893d:	b8 06 00 00 00       	mov    eax,0x6
c0008942:	83 c4 1c             	add    esp,0x1c
c0008945:	5b                   	pop    ebx
c0008946:	5e                   	pop    esi
c0008947:	5f                   	pop    edi
c0008948:	5d                   	pop    ebp
c0008949:	c3                   	ret    

c000894a <src_callback_read>:
c000894a:	55                   	push   ebp
c000894b:	57                   	push   edi
c000894c:	56                   	push   esi
c000894d:	53                   	push   ebx
c000894e:	83 ec 3c             	sub    esp,0x3c
c0008951:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008955:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008959:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000895d:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008961:	85 ed                	test   ebp,ebp
c0008963:	0f 8e 52 01 00 00    	jle    c0008abb <src_callback_read+0x171>
c0008969:	85 db                	test   ebx,ebx
c000896b:	0f 84 4a 01 00 00    	je     c0008abb <src_callback_read+0x171>
c0008971:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008978:	74 0c                	je     c0008986 <src_callback_read+0x3c>
c000897a:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008981:	e9 35 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008986:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000898a:	75 0c                	jne    c0008998 <src_callback_read+0x4e>
c000898c:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008993:	e9 23 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008998:	51                   	push   ecx
c0008999:	6a 24                	push   0x24
c000899b:	6a 00                	push   0x0
c000899d:	8d 44 24 18          	lea    eax,[esp+0x18]
c00089a1:	50                   	push   eax
c00089a2:	e8 d1 7d ff ff       	call   c0000778 <memset>
c00089a7:	83 c4 10             	add    esp,0x10
c00089aa:	68 00 00 70 3f       	push   0x3f700000
c00089af:	6a 00                	push   0x0
c00089b1:	57                   	push   edi
c00089b2:	56                   	push   esi
c00089b3:	e8 c7 fa 01 00       	call   c002847f <__ltdf2>
c00089b8:	83 c4 10             	add    esp,0x10
c00089bb:	85 c0                	test   eax,eax
c00089bd:	78 3e                	js     c00089fd <src_callback_read+0xb3>
c00089bf:	68 00 00 70 40       	push   0x40700000
c00089c4:	6a 00                	push   0x0
c00089c6:	57                   	push   edi
c00089c7:	56                   	push   esi
c00089c8:	e8 94 fa 01 00       	call   c0028461 <__gtdf2>
c00089cd:	83 c4 10             	add    esp,0x10
c00089d0:	85 c0                	test   eax,eax
c00089d2:	7f 29                	jg     c00089fd <src_callback_read+0xb3>
c00089d4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00089d8:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089e0:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089e4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089e7:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089ef:	31 f6                	xor    esi,esi
c00089f1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089f4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089f8:	e9 97 00 00 00       	jmp    c0008a94 <src_callback_read+0x14a>
c00089fd:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008a04:	e9 b2 00 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008a09:	8d 44 24 04          	lea    eax,[esp+0x4]
c0008a0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008a11:	52                   	push   edx
c0008a12:	52                   	push   edx
c0008a13:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008a17:	50                   	push   eax
c0008a18:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a1b:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008a1e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008a22:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008a26:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008a2a:	83 c4 10             	add    esp,0x10
c0008a2d:	85 c0                	test   eax,eax
c0008a2f:	75 08                	jne    c0008a39 <src_callback_read+0xef>
c0008a31:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008a39:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a40:	50                   	push   eax
c0008a41:	50                   	push   eax
c0008a42:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a46:	50                   	push   eax
c0008a47:	53                   	push   ebx
c0008a48:	e8 47 fd ff ff       	call   c0008794 <src_process>
c0008a4d:	83 c4 10             	add    esp,0x10
c0008a50:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a57:	85 c0                	test   eax,eax
c0008a59:	75 49                	jne    c0008aa4 <src_callback_read+0x15a>
c0008a5b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a5f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a62:	89 f9                	mov    ecx,edi
c0008a64:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a68:	0f af ca             	imul   ecx,edx
c0008a6b:	c1 e1 02             	shl    ecx,0x2
c0008a6e:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a72:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a76:	0f af d1             	imul   edx,ecx
c0008a79:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a7d:	c1 e2 02             	shl    edx,0x2
c0008a80:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a84:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a87:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a8c:	74 12                	je     c0008aa0 <src_callback_read+0x156>
c0008a8e:	39 d5                	cmp    ebp,edx
c0008a90:	7e 14                	jle    c0008aa6 <src_callback_read+0x15c>
c0008a92:	89 d6                	mov    esi,edx
c0008a94:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a99:	75 9e                	jne    c0008a39 <src_callback_read+0xef>
c0008a9b:	e9 69 ff ff ff       	jmp    c0008a09 <src_callback_read+0xbf>
c0008aa0:	85 c9                	test   ecx,ecx
c0008aa2:	75 ea                	jne    c0008a8e <src_callback_read+0x144>
c0008aa4:	89 f2                	mov    edx,esi
c0008aa6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008aaa:	85 c0                	test   eax,eax
c0008aac:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008aaf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008ab3:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008ab6:	74 05                	je     c0008abd <src_callback_read+0x173>
c0008ab8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008abb:	31 d2                	xor    edx,edx
c0008abd:	83 c4 3c             	add    esp,0x3c
c0008ac0:	89 d0                	mov    eax,edx
c0008ac2:	5b                   	pop    ebx
c0008ac3:	5e                   	pop    esi
c0008ac4:	5f                   	pop    edi
c0008ac5:	5d                   	pop    ebp
c0008ac6:	c3                   	ret    

c0008ac7 <src_set_ratio>:
c0008ac7:	57                   	push   edi
c0008ac8:	ba 02 00 00 00       	mov    edx,0x2
c0008acd:	56                   	push   esi
c0008ace:	53                   	push   ebx
c0008acf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ad3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008ad7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008adb:	85 db                	test   ebx,ebx
c0008add:	74 4c                	je     c0008b2b <src_set_ratio+0x64>
c0008adf:	ba 07 00 00 00       	mov    edx,0x7
c0008ae4:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008ae8:	74 41                	je     c0008b2b <src_set_ratio+0x64>
c0008aea:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008aee:	74 3b                	je     c0008b2b <src_set_ratio+0x64>
c0008af0:	68 00 00 70 3f       	push   0x3f700000
c0008af5:	6a 00                	push   0x0
c0008af7:	57                   	push   edi
c0008af8:	56                   	push   esi
c0008af9:	e8 81 f9 01 00       	call   c002847f <__ltdf2>
c0008afe:	83 c4 10             	add    esp,0x10
c0008b01:	ba 06 00 00 00       	mov    edx,0x6
c0008b06:	85 c0                	test   eax,eax
c0008b08:	78 21                	js     c0008b2b <src_set_ratio+0x64>
c0008b0a:	68 00 00 70 40       	push   0x40700000
c0008b0f:	6a 00                	push   0x0
c0008b11:	57                   	push   edi
c0008b12:	56                   	push   esi
c0008b13:	e8 49 f9 01 00       	call   c0028461 <__gtdf2>
c0008b18:	83 c4 10             	add    esp,0x10
c0008b1b:	ba 06 00 00 00       	mov    edx,0x6
c0008b20:	85 c0                	test   eax,eax
c0008b22:	7f 07                	jg     c0008b2b <src_set_ratio+0x64>
c0008b24:	89 33                	mov    DWORD PTR [ebx],esi
c0008b26:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008b29:	31 d2                	xor    edx,edx
c0008b2b:	5b                   	pop    ebx
c0008b2c:	89 d0                	mov    eax,edx
c0008b2e:	5e                   	pop    esi
c0008b2f:	5f                   	pop    edi
c0008b30:	c3                   	ret    

c0008b31 <src_get_channels>:
c0008b31:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b35:	b8 02 00 00 00       	mov    eax,0x2
c0008b3a:	85 d2                	test   edx,edx
c0008b3c:	74 14                	je     c0008b52 <src_get_channels+0x21>
c0008b3e:	b8 07 00 00 00       	mov    eax,0x7
c0008b43:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b47:	74 09                	je     c0008b52 <src_get_channels+0x21>
c0008b49:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b4d:	74 03                	je     c0008b52 <src_get_channels+0x21>
c0008b4f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b52:	c3                   	ret    

c0008b53 <src_reset>:
c0008b53:	53                   	push   ebx
c0008b54:	b8 02 00 00 00       	mov    eax,0x2
c0008b59:	83 ec 08             	sub    esp,0x8
c0008b5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b60:	85 db                	test   ebx,ebx
c0008b62:	74 36                	je     c0008b9a <src_reset+0x47>
c0008b64:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b67:	85 c0                	test   eax,eax
c0008b69:	74 09                	je     c0008b74 <src_reset+0x21>
c0008b6b:	83 ec 0c             	sub    esp,0xc
c0008b6e:	53                   	push   ebx
c0008b6f:	ff d0                	call   eax
c0008b71:	83 c4 10             	add    esp,0x10
c0008b74:	31 c0                	xor    eax,eax
c0008b76:	31 d2                	xor    edx,edx
c0008b78:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b7b:	89 03                	mov    DWORD PTR [ebx],eax
c0008b7d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b80:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b83:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b8a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b91:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b98:	31 c0                	xor    eax,eax
c0008b9a:	83 c4 08             	add    esp,0x8
c0008b9d:	5b                   	pop    ebx
c0008b9e:	c3                   	ret    

c0008b9f <src_new>:
c0008b9f:	57                   	push   edi
c0008ba0:	56                   	push   esi
c0008ba1:	53                   	push   ebx
c0008ba2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008ba6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008baa:	85 f6                	test   esi,esi
c0008bac:	74 73                	je     c0008c21 <src_new+0x82>
c0008bae:	85 ff                	test   edi,edi
c0008bb0:	7f 08                	jg     c0008bba <src_new+0x1b>
c0008bb2:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008bb8:	eb 1e                	jmp    c0008bd8 <src_new+0x39>
c0008bba:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008bc0:	50                   	push   eax
c0008bc1:	50                   	push   eax
c0008bc2:	6a 3c                	push   0x3c
c0008bc4:	6a 01                	push   0x1
c0008bc6:	e8 a5 6c 00 00       	call   c000f870 <calloc>
c0008bcb:	83 c4 10             	add    esp,0x10
c0008bce:	89 c3                	mov    ebx,eax
c0008bd0:	85 c0                	test   eax,eax
c0008bd2:	75 10                	jne    c0008be4 <src_new+0x45>
c0008bd4:	85 f6                	test   esi,esi
c0008bd6:	75 04                	jne    c0008bdc <src_new+0x3d>
c0008bd8:	31 db                	xor    ebx,ebx
c0008bda:	eb 4b                	jmp    c0008c27 <src_new+0x88>
c0008bdc:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008be2:	eb 43                	jmp    c0008c27 <src_new+0x88>
c0008be4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008be7:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bf2:	e8 1d fb ff ff       	call   c0008714 <psrc_set_converter>
c0008bf7:	85 c0                	test   eax,eax
c0008bf9:	74 18                	je     c0008c13 <src_new+0x74>
c0008bfb:	85 f6                	test   esi,esi
c0008bfd:	74 06                	je     c0008c05 <src_new+0x66>
c0008bff:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008c05:	83 ec 0c             	sub    esp,0xc
c0008c08:	53                   	push   ebx
c0008c09:	31 db                	xor    ebx,ebx
c0008c0b:	e8 40 6c 00 00       	call   c000f850 <free>
c0008c10:	83 c4 10             	add    esp,0x10
c0008c13:	83 ec 0c             	sub    esp,0xc
c0008c16:	53                   	push   ebx
c0008c17:	e8 37 ff ff ff       	call   c0008b53 <src_reset>
c0008c1c:	83 c4 10             	add    esp,0x10
c0008c1f:	eb 06                	jmp    c0008c27 <src_new+0x88>
c0008c21:	85 ff                	test   edi,edi
c0008c23:	7f 9b                	jg     c0008bc0 <src_new+0x21>
c0008c25:	eb b1                	jmp    c0008bd8 <src_new+0x39>
c0008c27:	89 d8                	mov    eax,ebx
c0008c29:	5b                   	pop    ebx
c0008c2a:	5e                   	pop    esi
c0008c2b:	5f                   	pop    edi
c0008c2c:	c3                   	ret    

c0008c2d <src_callback_new>:
c0008c2d:	56                   	push   esi
c0008c2e:	53                   	push   ebx
c0008c2f:	53                   	push   ebx
c0008c30:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008c34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c38:	85 f6                	test   esi,esi
c0008c3a:	75 0e                	jne    c0008c4a <src_callback_new+0x1d>
c0008c3c:	31 db                	xor    ebx,ebx
c0008c3e:	85 c0                	test   eax,eax
c0008c40:	74 47                	je     c0008c89 <src_callback_new+0x5c>
c0008c42:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c48:	eb 3f                	jmp    c0008c89 <src_callback_new+0x5c>
c0008c4a:	85 c0                	test   eax,eax
c0008c4c:	74 06                	je     c0008c54 <src_callback_new+0x27>
c0008c4e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c54:	51                   	push   ecx
c0008c55:	50                   	push   eax
c0008c56:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5e:	e8 3c ff ff ff       	call   c0008b9f <src_new>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	89 c3                	mov    ebx,eax
c0008c68:	85 c0                	test   eax,eax
c0008c6a:	74 1d                	je     c0008c89 <src_callback_new+0x5c>
c0008c6c:	83 ec 0c             	sub    esp,0xc
c0008c6f:	50                   	push   eax
c0008c70:	e8 de fe ff ff       	call   c0008b53 <src_reset>
c0008c75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c79:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c80:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c83:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c86:	83 c4 10             	add    esp,0x10
c0008c89:	89 d8                	mov    eax,ebx
c0008c8b:	5a                   	pop    edx
c0008c8c:	5b                   	pop    ebx
c0008c8d:	5e                   	pop    esi
c0008c8e:	c3                   	ret    

c0008c8f <src_get_name>:
c0008c8f:	53                   	push   ebx
c0008c90:	83 ec 14             	sub    esp,0x14
c0008c93:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c97:	53                   	push   ebx
c0008c98:	e8 d0 4f 00 00       	call   c000dc6d <sinc_get_name>
c0008c9d:	83 c4 10             	add    esp,0x10
c0008ca0:	85 c0                	test   eax,eax
c0008ca2:	75 1d                	jne    c0008cc1 <src_get_name+0x32>
c0008ca4:	83 ec 0c             	sub    esp,0xc
c0008ca7:	53                   	push   ebx
c0008ca8:	e8 80 57 00 00       	call   c000e42d <zoh_get_name>
c0008cad:	83 c4 10             	add    esp,0x10
c0008cb0:	85 c0                	test   eax,eax
c0008cb2:	75 0d                	jne    c0008cc1 <src_get_name+0x32>
c0008cb4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb8:	83 c4 08             	add    esp,0x8
c0008cbb:	5b                   	pop    ebx
c0008cbc:	e9 74 0b 00 00       	jmp    c0009835 <linear_get_name>
c0008cc1:	83 c4 08             	add    esp,0x8
c0008cc4:	5b                   	pop    ebx
c0008cc5:	c3                   	ret    

c0008cc6 <src_get_description>:
c0008cc6:	53                   	push   ebx
c0008cc7:	83 ec 14             	sub    esp,0x14
c0008cca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008cce:	53                   	push   ebx
c0008ccf:	e8 ac 4f 00 00       	call   c000dc80 <sinc_get_description>
c0008cd4:	83 c4 10             	add    esp,0x10
c0008cd7:	85 c0                	test   eax,eax
c0008cd9:	75 1d                	jne    c0008cf8 <src_get_description+0x32>
c0008cdb:	83 ec 0c             	sub    esp,0xc
c0008cde:	53                   	push   ebx
c0008cdf:	e8 58 57 00 00       	call   c000e43c <zoh_get_description>
c0008ce4:	83 c4 10             	add    esp,0x10
c0008ce7:	85 c0                	test   eax,eax
c0008ce9:	75 0d                	jne    c0008cf8 <src_get_description+0x32>
c0008ceb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cef:	83 c4 08             	add    esp,0x8
c0008cf2:	5b                   	pop    ebx
c0008cf3:	e9 4c 0b 00 00       	jmp    c0009844 <linear_get_description>
c0008cf8:	83 c4 08             	add    esp,0x8
c0008cfb:	5b                   	pop    ebx
c0008cfc:	c3                   	ret    

c0008cfd <src_get_version>:
c0008cfd:	b8 c0 98 02 c0       	mov    eax,0xc00298c0
c0008d02:	c3                   	ret    

c0008d03 <src_is_valid_ratio>:
c0008d03:	83 ec 1c             	sub    esp,0x1c
c0008d06:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008d0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d16:	68 00 00 70 3f       	push   0x3f700000
c0008d1b:	6a 00                	push   0x0
c0008d1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d25:	e8 55 f7 01 00       	call   c002847f <__ltdf2>
c0008d2a:	83 c4 10             	add    esp,0x10
c0008d2d:	31 d2                	xor    edx,edx
c0008d2f:	85 c0                	test   eax,eax
c0008d31:	78 1e                	js     c0008d51 <src_is_valid_ratio+0x4e>
c0008d33:	68 00 00 70 40       	push   0x40700000
c0008d38:	6a 00                	push   0x0
c0008d3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d3e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d42:	e8 1a f7 01 00       	call   c0028461 <__gtdf2>
c0008d47:	31 d2                	xor    edx,edx
c0008d49:	83 c4 10             	add    esp,0x10
c0008d4c:	85 c0                	test   eax,eax
c0008d4e:	0f 9e c2             	setle  dl
c0008d51:	89 d0                	mov    eax,edx
c0008d53:	83 c4 1c             	add    esp,0x1c
c0008d56:	c3                   	ret    

c0008d57 <src_error>:
c0008d57:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d5b:	31 c0                	xor    eax,eax
c0008d5d:	85 d2                	test   edx,edx
c0008d5f:	74 03                	je     c0008d64 <src_error+0xd>
c0008d61:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d64:	c3                   	ret    

c0008d65 <src_strerror>:
c0008d65:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d69:	31 c0                	xor    eax,eax
c0008d6b:	83 fa 17             	cmp    edx,0x17
c0008d6e:	77 07                	ja     c0008d77 <src_strerror+0x12>
c0008d70:	8b 04 95 20 9d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd62e0]
c0008d77:	c3                   	ret    

c0008d78 <src_simple>:
c0008d78:	56                   	push   esi
c0008d79:	53                   	push   ebx
c0008d7a:	83 ec 18             	sub    esp,0x18
c0008d7d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d81:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d85:	50                   	push   eax
c0008d86:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8e:	e8 0c fe ff ff       	call   c0008b9f <src_new>
c0008d93:	83 c4 10             	add    esp,0x10
c0008d96:	85 c0                	test   eax,eax
c0008d98:	75 06                	jne    c0008da0 <src_simple+0x28>
c0008d9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d9e:	eb 25                	jmp    c0008dc5 <src_simple+0x4d>
c0008da0:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008da7:	89 c3                	mov    ebx,eax
c0008da9:	50                   	push   eax
c0008daa:	50                   	push   eax
c0008dab:	56                   	push   esi
c0008dac:	53                   	push   ebx
c0008dad:	e8 e2 f9 ff ff       	call   c0008794 <src_process>
c0008db2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008db5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008db9:	e8 9a f9 ff ff       	call   c0008758 <src_delete>
c0008dbe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008dc2:	83 c4 10             	add    esp,0x10
c0008dc5:	83 c4 14             	add    esp,0x14
c0008dc8:	5b                   	pop    ebx
c0008dc9:	5e                   	pop    esi
c0008dca:	c3                   	ret    

c0008dcb <src_short_to_float_array>:
c0008dcb:	53                   	push   ebx
c0008dcc:	83 ec 18             	sub    esp,0x18
c0008dcf:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008dd3:	85 db                	test   ebx,ebx
c0008dd5:	74 54                	je     c0008e2b <src_short_to_float_array+0x60>
c0008dd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ddb:	4b                   	dec    ebx
c0008ddc:	83 ec 0c             	sub    esp,0xc
c0008ddf:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008de3:	50                   	push   eax
c0008de4:	e8 2a f4 01 00       	call   c0028213 <__floatsidf>
c0008de9:	83 c4 10             	add    esp,0x10
c0008dec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008df0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008df4:	68 00 00 00 3f       	push   0x3f000000
c0008df9:	6a 00                	push   0x0
c0008dfb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e03:	e8 a8 ed 01 00       	call   c0027bb0 <__muldf3>
c0008e08:	59                   	pop    ecx
c0008e09:	59                   	pop    ecx
c0008e0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e0e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e1a:	e8 64 f6 01 00       	call   c0028483 <__truncdfsf2>
c0008e1f:	83 c4 10             	add    esp,0x10
c0008e22:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e26:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008e29:	eb a8                	jmp    c0008dd3 <src_short_to_float_array+0x8>
c0008e2b:	83 c4 18             	add    esp,0x18
c0008e2e:	5b                   	pop    ebx
c0008e2f:	c3                   	ret    

c0008e30 <src_float_to_short_array>:
c0008e30:	56                   	push   esi
c0008e31:	53                   	push   ebx
c0008e32:	83 ec 14             	sub    esp,0x14
c0008e35:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008e39:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e3d:	85 db                	test   ebx,ebx
c0008e3f:	0f 84 a4 00 00 00    	je     c0008ee9 <src_float_to_short_array+0xb9>
c0008e45:	83 ec 0c             	sub    esp,0xc
c0008e48:	4b                   	dec    ebx
c0008e49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e4d:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e50:	e8 52 f7 01 00       	call   c00285a7 <__extendsfdf2>
c0008e55:	83 c4 10             	add    esp,0x10
c0008e58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e5c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e60:	68 00 00 e0 41       	push   0x41e00000
c0008e65:	6a 00                	push   0x0
c0008e67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6f:	e8 3c ed 01 00       	call   c0027bb0 <__muldf3>
c0008e74:	83 c4 10             	add    esp,0x10
c0008e77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e7b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e7f:	68 ff ff df 41       	push   0x41dfffff
c0008e84:	68 00 00 c0 ff       	push   0xffc00000
c0008e89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e91:	e8 e7 f5 01 00       	call   c002847d <__gedf2>
c0008e96:	83 c4 10             	add    esp,0x10
c0008e99:	85 c0                	test   eax,eax
c0008e9b:	78 08                	js     c0008ea5 <src_float_to_short_array+0x75>
c0008e9d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008ea3:	eb 98                	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ea5:	68 00 00 e0 c1       	push   0xc1e00000
c0008eaa:	6a 00                	push   0x0
c0008eac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb4:	e8 c8 f5 01 00       	call   c0028481 <__ledf2>
c0008eb9:	83 c4 10             	add    esp,0x10
c0008ebc:	85 c0                	test   eax,eax
c0008ebe:	7f 0b                	jg     c0008ecb <src_float_to_short_array+0x9b>
c0008ec0:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008ec6:	e9 72 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ecb:	50                   	push   eax
c0008ecc:	50                   	push   eax
c0008ecd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed5:	e8 56 f7 01 00       	call   c0028630 <lrint>
c0008eda:	83 c4 10             	add    esp,0x10
c0008edd:	c1 f8 10             	sar    eax,0x10
c0008ee0:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ee4:	e9 54 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ee9:	83 c4 14             	add    esp,0x14
c0008eec:	5b                   	pop    ebx
c0008eed:	5e                   	pop    esi
c0008eee:	c3                   	ret    

c0008eef <src_int_to_float_array>:
c0008eef:	53                   	push   ebx
c0008ef0:	83 ec 18             	sub    esp,0x18
c0008ef3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ef7:	85 db                	test   ebx,ebx
c0008ef9:	74 52                	je     c0008f4d <src_int_to_float_array+0x5e>
c0008efb:	83 ec 0c             	sub    esp,0xc
c0008efe:	4b                   	dec    ebx
c0008eff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f03:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f06:	e8 08 f3 01 00       	call   c0028213 <__floatsidf>
c0008f0b:	83 c4 10             	add    esp,0x10
c0008f0e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f12:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f16:	68 00 00 00 3e       	push   0x3e000000
c0008f1b:	6a 00                	push   0x0
c0008f1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f25:	e8 86 ec 01 00       	call   c0027bb0 <__muldf3>
c0008f2a:	59                   	pop    ecx
c0008f2b:	59                   	pop    ecx
c0008f2c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f30:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f3c:	e8 42 f5 01 00       	call   c0028483 <__truncdfsf2>
c0008f41:	83 c4 10             	add    esp,0x10
c0008f44:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f48:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f4b:	eb aa                	jmp    c0008ef7 <src_int_to_float_array+0x8>
c0008f4d:	83 c4 18             	add    esp,0x18
c0008f50:	5b                   	pop    ebx
c0008f51:	c3                   	ret    

c0008f52 <src_float_to_int_array>:
c0008f52:	56                   	push   esi
c0008f53:	53                   	push   ebx
c0008f54:	83 ec 14             	sub    esp,0x14
c0008f57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f5b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f5f:	85 db                	test   ebx,ebx
c0008f61:	0f 84 a2 00 00 00    	je     c0009009 <src_float_to_int_array+0xb7>
c0008f67:	83 ec 0c             	sub    esp,0xc
c0008f6a:	4b                   	dec    ebx
c0008f6b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f6f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f72:	e8 30 f6 01 00       	call   c00285a7 <__extendsfdf2>
c0008f77:	83 c4 10             	add    esp,0x10
c0008f7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f82:	68 00 00 e0 41       	push   0x41e00000
c0008f87:	6a 00                	push   0x0
c0008f89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f91:	e8 1a ec 01 00       	call   c0027bb0 <__muldf3>
c0008f96:	83 c4 10             	add    esp,0x10
c0008f99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f9d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008fa1:	68 ff ff df 41       	push   0x41dfffff
c0008fa6:	68 00 00 c0 ff       	push   0xffc00000
c0008fab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008faf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb3:	e8 c5 f4 01 00       	call   c002847d <__gedf2>
c0008fb8:	83 c4 10             	add    esp,0x10
c0008fbb:	85 c0                	test   eax,eax
c0008fbd:	78 09                	js     c0008fc8 <src_float_to_int_array+0x76>
c0008fbf:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008fc6:	eb 97                	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fc8:	68 00 00 e0 c1       	push   0xc1e00000
c0008fcd:	6a 00                	push   0x0
c0008fcf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd7:	e8 a5 f4 01 00       	call   c0028481 <__ledf2>
c0008fdc:	83 c4 10             	add    esp,0x10
c0008fdf:	85 c0                	test   eax,eax
c0008fe1:	7f 0c                	jg     c0008fef <src_float_to_int_array+0x9d>
c0008fe3:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fea:	e9 70 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fef:	50                   	push   eax
c0008ff0:	50                   	push   eax
c0008ff1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff9:	e8 32 f6 01 00       	call   c0028630 <lrint>
c0008ffe:	83 c4 10             	add    esp,0x10
c0009001:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0009004:	e9 56 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0009009:	83 c4 14             	add    esp,0x14
c000900c:	5b                   	pop    ebx
c000900d:	5e                   	pop    esi
c000900e:	c3                   	ret    

c000900f <linear_vari_process>:
c000900f:	55                   	push   ebp
c0009010:	31 d2                	xor    edx,edx
c0009012:	57                   	push   edi
c0009013:	56                   	push   esi
c0009014:	53                   	push   ebx
c0009015:	83 ec 3c             	sub    esp,0x3c
c0009018:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000901c:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0009020:	0f 8e d3 07 00 00    	jle    c00097f9 <linear_vari_process+0x7ea>
c0009026:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000902a:	ba 05 00 00 00       	mov    edx,0x5
c000902f:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0009032:	85 db                	test   ebx,ebx
c0009034:	0f 84 bf 07 00 00    	je     c00097f9 <linear_vari_process+0x7ea>
c000903a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000903d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009041:	74 19                	je     c000905c <linear_vari_process+0x4d>
c0009043:	31 d2                	xor    edx,edx
c0009045:	39 c2                	cmp    edx,eax
c0009047:	7d 0c                	jge    c0009055 <linear_vari_process+0x46>
c0009049:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000904b:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000904e:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009052:	42                   	inc    edx
c0009053:	eb f0                	jmp    c0009045 <linear_vari_process+0x36>
c0009055:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000905c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000905f:	0f af d0             	imul   edx,eax
c0009062:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0009065:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0009069:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009070:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009073:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000907a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000907e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009081:	8b 00                	mov    eax,DWORD PTR [eax]
c0009083:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009087:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000908b:	68 00 00 70 3f       	push   0x3f700000
c0009090:	6a 00                	push   0x0
c0009092:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009096:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000909a:	e8 e0 f3 01 00       	call   c002847f <__ltdf2>
c000909f:	83 c4 10             	add    esp,0x10
c00090a2:	ba 16 00 00 00       	mov    edx,0x16
c00090a7:	85 c0                	test   eax,eax
c00090a9:	0f 88 4a 07 00 00    	js     c00097f9 <linear_vari_process+0x7ea>
c00090af:	68 00 00 70 40       	push   0x40700000
c00090b4:	6a 00                	push   0x0
c00090b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090be:	e8 9e f3 01 00       	call   c0028461 <__gtdf2>
c00090c3:	83 c4 10             	add    esp,0x10
c00090c6:	ba 16 00 00 00       	mov    edx,0x16
c00090cb:	85 c0                	test   eax,eax
c00090cd:	0f 8f 26 07 00 00    	jg     c00097f9 <linear_vari_process+0x7ea>
c00090d3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00090d7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090da:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090e5:	68 00 00 f0 3f       	push   0x3ff00000
c00090ea:	6a 00                	push   0x0
c00090ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f4:	e8 86 f3 01 00       	call   c002847f <__ltdf2>
c00090f9:	83 c4 10             	add    esp,0x10
c00090fc:	85 c0                	test   eax,eax
c00090fe:	0f 89 89 02 00 00    	jns    c000938d <linear_vari_process+0x37e>
c0009104:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0009107:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c000910a:	0f 8d 7d 02 00 00    	jge    c000938d <linear_vari_process+0x37e>
c0009110:	83 ec 0c             	sub    esp,0xc
c0009113:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009116:	e8 f8 f0 01 00       	call   c0028213 <__floatsidf>
c000911b:	83 c4 10             	add    esp,0x10
c000911e:	89 04 24             	mov    DWORD PTR [esp],eax
c0009121:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009125:	68 00 00 f0 3f       	push   0x3ff00000
c000912a:	6a 00                	push   0x0
c000912c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009130:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009134:	e8 fa e3 01 00       	call   c0027533 <__adddf3>
c0009139:	83 c4 10             	add    esp,0x10
c000913c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009140:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009144:	52                   	push   edx
c0009145:	50                   	push   eax
c0009146:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914e:	e8 5d ea 01 00       	call   c0027bb0 <__muldf3>
c0009153:	5d                   	pop    ebp
c0009154:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009158:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000915c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000915f:	e8 af f0 01 00       	call   c0028213 <__floatsidf>
c0009164:	83 c4 10             	add    esp,0x10
c0009167:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000916b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000916f:	52                   	push   edx
c0009170:	50                   	push   eax
c0009171:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009175:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009179:	e8 b5 e3 01 00       	call   c0027533 <__adddf3>
c000917e:	59                   	pop    ecx
c000917f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009183:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009187:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000918a:	e8 84 f0 01 00       	call   c0028213 <__floatsidf>
c000918f:	83 c4 10             	add    esp,0x10
c0009192:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009196:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000919a:	52                   	push   edx
c000919b:	50                   	push   eax
c000919c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a4:	e8 d4 f2 01 00       	call   c002847d <__gedf2>
c00091a9:	83 c4 10             	add    esp,0x10
c00091ac:	85 c0                	test   eax,eax
c00091ae:	0f 89 d9 01 00 00    	jns    c000938d <linear_vari_process+0x37e>
c00091b4:	85 ff                	test   edi,edi
c00091b6:	0f 8e f4 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c00091bc:	83 ec 10             	sub    esp,0x10
c00091bf:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091c2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091c5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00091c9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00091cc:	ff 30                	push   DWORD PTR [eax]
c00091ce:	e8 b1 e9 01 00       	call   c0027b84 <__subdf3>
c00091d3:	83 c4 18             	add    esp,0x18
c00091d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091de:	52                   	push   edx
c00091df:	50                   	push   eax
c00091e0:	e8 2b f4 01 00       	call   c0028610 <fabs>
c00091e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091e9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091ed:	83 c4 10             	add    esp,0x10
c00091f0:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091f5:	68 23 42 92 0c       	push   0xc924223
c00091fa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091fe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009202:	e8 5a f2 01 00       	call   c0028461 <__gtdf2>
c0009207:	83 c4 10             	add    esp,0x10
c000920a:	85 c0                	test   eax,eax
c000920c:	0f 8e 9e 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c0009212:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009216:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009219:	8b 00                	mov    eax,DWORD PTR [eax]
c000921b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000921f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009222:	52                   	push   edx
c0009223:	50                   	push   eax
c0009224:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009227:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000922a:	e8 55 e9 01 00       	call   c0027b84 <__subdf3>
c000922f:	59                   	pop    ecx
c0009230:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009234:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009238:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000923b:	e8 d3 ef 01 00       	call   c0028213 <__floatsidf>
c0009240:	83 c4 10             	add    esp,0x10
c0009243:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009247:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000924b:	52                   	push   edx
c000924c:	50                   	push   eax
c000924d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009255:	e8 56 e9 01 00       	call   c0027bb0 <__muldf3>
c000925a:	5f                   	pop    edi
c000925b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000925f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009263:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009266:	e8 a8 ef 01 00       	call   c0028213 <__floatsidf>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009272:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009276:	52                   	push   edx
c0009277:	50                   	push   eax
c0009278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000927c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009280:	e8 0f ec 01 00       	call   c0027e94 <__divdf3>
c0009285:	83 c4 10             	add    esp,0x10
c0009288:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000928c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009290:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009294:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009298:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000929c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092a0:	e8 8e e2 01 00       	call   c0027533 <__adddf3>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092b0:	31 ff                	xor    edi,edi
c00092b2:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c00092b5:	0f 8e 9d 00 00 00    	jle    c0009358 <linear_vari_process+0x349>
c00092bb:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00092be:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00092c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00092c5:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00092c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00092cc:	8b 06                	mov    eax,DWORD PTR [esi]
c00092ce:	52                   	push   edx
c00092cf:	52                   	push   edx
c00092d0:	55                   	push   ebp
c00092d1:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00092d4:	47                   	inc    edi
c00092d5:	e8 ee db 01 00       	call   c0026ec8 <__subsf3>
c00092da:	89 04 24             	mov    DWORD PTR [esp],eax
c00092dd:	e8 c5 f2 01 00       	call   c00285a7 <__extendsfdf2>
c00092e2:	83 c4 10             	add    esp,0x10
c00092e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092e9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092fd:	e8 ae e8 01 00       	call   c0027bb0 <__muldf3>
c0009302:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009305:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009309:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000930d:	e8 95 f2 01 00       	call   c00285a7 <__extendsfdf2>
c0009312:	83 c4 10             	add    esp,0x10
c0009315:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009319:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000931d:	52                   	push   edx
c000931e:	50                   	push   eax
c000931f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009323:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009327:	e8 07 e2 01 00       	call   c0027533 <__adddf3>
c000932c:	59                   	pop    ecx
c000932d:	5d                   	pop    ebp
c000932e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009332:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009336:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933e:	e8 40 f1 01 00       	call   c0028483 <__truncdfsf2>
c0009343:	83 c4 10             	add    esp,0x10
c0009346:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009349:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000934d:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009350:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009353:	e9 5a ff ff ff       	jmp    c00092b2 <linear_vari_process+0x2a3>
c0009358:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009360:	68 00 00 f0 3f       	push   0x3ff00000
c0009365:	6a 00                	push   0x0
c0009367:	e8 28 eb 01 00       	call   c0027e94 <__divdf3>
c000936c:	83 c4 10             	add    esp,0x10
c000936f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009372:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000937c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009380:	e8 ae e1 01 00       	call   c0027533 <__adddf3>
c0009385:	83 c4 10             	add    esp,0x10
c0009388:	e9 50 fd ff ff       	jmp    c00090dd <linear_vari_process+0xce>
c000938d:	50                   	push   eax
c000938e:	50                   	push   eax
c000938f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009393:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009397:	e8 94 f2 01 00       	call   c0028630 <lrint>
c000939c:	83 ec 0c             	sub    esp,0xc
c000939f:	50                   	push   eax
c00093a0:	e8 6e ee 01 00       	call   c0028213 <__floatsidf>
c00093a5:	83 c4 10             	add    esp,0x10
c00093a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093b0:	52                   	push   edx
c00093b1:	50                   	push   eax
c00093b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093ba:	e8 c5 e7 01 00       	call   c0027b84 <__subdf3>
c00093bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00093c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00093c7:	83 c4 20             	add    esp,0x20
c00093ca:	6a 00                	push   0x0
c00093cc:	6a 00                	push   0x0
c00093ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d6:	e8 a4 f0 01 00       	call   c002847f <__ltdf2>
c00093db:	83 c4 10             	add    esp,0x10
c00093de:	85 c0                	test   eax,eax
c00093e0:	79 1e                	jns    c0009400 <linear_vari_process+0x3f1>
c00093e2:	68 00 00 f0 3f       	push   0x3ff00000
c00093e7:	6a 00                	push   0x0
c00093e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093f1:	e8 3d e1 01 00       	call   c0027533 <__adddf3>
c00093f6:	83 c4 10             	add    esp,0x10
c00093f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00093fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009400:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009403:	83 ec 10             	sub    esp,0x10
c0009406:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009412:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009416:	e8 69 e7 01 00       	call   c0027b84 <__subdf3>
c000941b:	83 c4 18             	add    esp,0x18
c000941e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009422:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009426:	52                   	push   edx
c0009427:	50                   	push   eax
c0009428:	e8 03 f2 01 00       	call   c0028630 <lrint>
c000942d:	83 c4 10             	add    esp,0x10
c0009430:	0f af f8             	imul   edi,eax
c0009433:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009436:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009439:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000943c:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c000943f:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009442:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009446:	0f 8d 13 03 00 00    	jge    c000975f <linear_vari_process+0x750>
c000944c:	83 ec 0c             	sub    esp,0xc
c000944f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009452:	e8 bc ed 01 00       	call   c0028213 <__floatsidf>
c0009457:	83 c4 10             	add    esp,0x10
c000945a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000945e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009462:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009466:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000946a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000946e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009472:	e8 39 e7 01 00       	call   c0027bb0 <__muldf3>
c0009477:	89 3c 24             	mov    DWORD PTR [esp],edi
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	e8 8c ed 01 00       	call   c0028213 <__floatsidf>
c0009487:	83 c4 10             	add    esp,0x10
c000948a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000948e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009492:	52                   	push   edx
c0009493:	50                   	push   eax
c0009494:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009498:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000949c:	e8 92 e0 01 00       	call   c0027533 <__adddf3>
c00094a1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00094a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094a8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094ac:	e8 62 ed 01 00       	call   c0028213 <__floatsidf>
c00094b1:	83 c4 10             	add    esp,0x10
c00094b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094bc:	52                   	push   edx
c00094bd:	50                   	push   eax
c00094be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c6:	e8 b4 ef 01 00       	call   c002847f <__ltdf2>
c00094cb:	83 c4 10             	add    esp,0x10
c00094ce:	85 c0                	test   eax,eax
c00094d0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00094d4:	0f 89 85 02 00 00    	jns    c000975f <linear_vari_process+0x750>
c00094da:	85 c9                	test   ecx,ecx
c00094dc:	0f 8e f5 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c00094e2:	83 ec 10             	sub    esp,0x10
c00094e5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094e8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094eb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094ef:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094f2:	ff 30                	push   DWORD PTR [eax]
c00094f4:	e8 8b e6 01 00       	call   c0027b84 <__subdf3>
c00094f9:	83 c4 18             	add    esp,0x18
c00094fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009500:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009504:	52                   	push   edx
c0009505:	50                   	push   eax
c0009506:	e8 05 f1 01 00       	call   c0028610 <fabs>
c000950b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000950f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009513:	83 c4 10             	add    esp,0x10
c0009516:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000951b:	68 23 42 92 0c       	push   0xc924223
c0009520:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009524:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009528:	e8 34 ef 01 00       	call   c0028461 <__gtdf2>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	85 c0                	test   eax,eax
c0009532:	0f 8e 9f 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c0009538:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000953c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000953f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009541:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009545:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009549:	52                   	push   edx
c000954a:	50                   	push   eax
c000954b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000954e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009551:	e8 2e e6 01 00       	call   c0027b84 <__subdf3>
c0009556:	5f                   	pop    edi
c0009557:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000955b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000955f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009562:	e8 ac ec 01 00       	call   c0028213 <__floatsidf>
c0009567:	83 c4 10             	add    esp,0x10
c000956a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000956e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009572:	52                   	push   edx
c0009573:	50                   	push   eax
c0009574:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009578:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000957c:	e8 2f e6 01 00       	call   c0027bb0 <__muldf3>
c0009581:	5d                   	pop    ebp
c0009582:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009586:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000958a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000958d:	e8 81 ec 01 00       	call   c0028213 <__floatsidf>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009599:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000959d:	52                   	push   edx
c000959e:	50                   	push   eax
c000959f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a7:	e8 e8 e8 01 00       	call   c0027e94 <__divdf3>
c00095ac:	83 c4 10             	add    esp,0x10
c00095af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095b3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c7:	e8 67 df 01 00       	call   c0027533 <__adddf3>
c00095cc:	83 c4 10             	add    esp,0x10
c00095cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095d7:	31 ff                	xor    edi,edi
c00095d9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095dc:	39 f8                	cmp    eax,edi
c00095de:	0f 8e ac 00 00 00    	jle    c0009690 <linear_vari_process+0x681>
c00095e4:	8b 16                	mov    edx,DWORD PTR [esi]
c00095e6:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095e9:	29 c1                	sub    ecx,eax
c00095eb:	89 c8                	mov    eax,ecx
c00095ed:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095f0:	01 f8                	add    eax,edi
c00095f2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095f6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095f9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009600:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009603:	51                   	push   ecx
c0009604:	01 f8                	add    eax,edi
c0009606:	51                   	push   ecx
c0009607:	47                   	inc    edi
c0009608:	55                   	push   ebp
c0009609:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c000960c:	e8 b7 d8 01 00       	call   c0026ec8 <__subsf3>
c0009611:	89 04 24             	mov    DWORD PTR [esp],eax
c0009614:	e8 8e ef 01 00       	call   c00285a7 <__extendsfdf2>
c0009619:	83 c4 10             	add    esp,0x10
c000961c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009620:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009624:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009628:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000962c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009630:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009634:	e8 77 e5 01 00       	call   c0027bb0 <__muldf3>
c0009639:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000963c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009640:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009644:	e8 5e ef 01 00       	call   c00285a7 <__extendsfdf2>
c0009649:	83 c4 10             	add    esp,0x10
c000964c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009650:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009654:	52                   	push   edx
c0009655:	50                   	push   eax
c0009656:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965e:	e8 d0 de 01 00       	call   c0027533 <__adddf3>
c0009663:	5d                   	pop    ebp
c0009664:	59                   	pop    ecx
c0009665:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009669:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000966d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009671:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009675:	e8 09 ee 01 00       	call   c0028483 <__truncdfsf2>
c000967a:	83 c4 10             	add    esp,0x10
c000967d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009681:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009685:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009688:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000968b:	e9 49 ff ff ff       	jmp    c00095d9 <linear_vari_process+0x5ca>
c0009690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	68 00 00 f0 3f       	push   0x3ff00000
c000969d:	6a 00                	push   0x0
c000969f:	e8 f0 e7 01 00       	call   c0027e94 <__divdf3>
c00096a4:	83 c4 10             	add    esp,0x10
c00096a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096af:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b3:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bf:	e8 6f de 01 00       	call   c0027533 <__adddf3>
c00096c4:	59                   	pop    ecx
c00096c5:	5f                   	pop    edi
c00096c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d6:	e8 55 ef 01 00       	call   c0028630 <lrint>
c00096db:	83 ec 0c             	sub    esp,0xc
c00096de:	50                   	push   eax
c00096df:	e8 2f eb 01 00       	call   c0028213 <__floatsidf>
c00096e4:	83 c4 10             	add    esp,0x10
c00096e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096eb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ef:	52                   	push   edx
c00096f0:	50                   	push   eax
c00096f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f9:	e8 86 e4 01 00       	call   c0027b84 <__subdf3>
c00096fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009702:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009706:	83 c4 20             	add    esp,0x20
c0009709:	6a 00                	push   0x0
c000970b:	6a 00                	push   0x0
c000970d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009711:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009715:	e8 65 ed 01 00       	call   c002847f <__ltdf2>
c000971a:	83 c4 10             	add    esp,0x10
c000971d:	85 c0                	test   eax,eax
c000971f:	79 1e                	jns    c000973f <linear_vari_process+0x730>
c0009721:	68 00 00 f0 3f       	push   0x3ff00000
c0009726:	6a 00                	push   0x0
c0009728:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000972c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009730:	e8 fe dd 01 00       	call   c0027533 <__adddf3>
c0009735:	83 c4 10             	add    esp,0x10
c0009738:	89 04 24             	mov    DWORD PTR [esp],eax
c000973b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000973f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009742:	83 ec 10             	sub    esp,0x10
c0009745:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009749:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000974d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009751:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009755:	e8 2a e4 01 00       	call   c0027b84 <__subdf3>
c000975a:	e9 bc fc ff ff       	jmp    c000941b <linear_vari_process+0x40c>
c000975f:	39 fd                	cmp    ebp,edi
c0009761:	7d 38                	jge    c000979b <linear_vari_process+0x78c>
c0009763:	83 ec 0c             	sub    esp,0xc
c0009766:	89 f8                	mov    eax,edi
c0009768:	29 e8                	sub    eax,ebp
c000976a:	99                   	cdq    
c000976b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000976e:	50                   	push   eax
c000976f:	e8 9f ea 01 00       	call   c0028213 <__floatsidf>
c0009774:	83 c4 10             	add    esp,0x10
c0009777:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000977b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000977f:	52                   	push   edx
c0009780:	50                   	push   eax
c0009781:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009785:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009789:	e8 a5 dd 01 00       	call   c0027533 <__adddf3>
c000978e:	83 c4 10             	add    esp,0x10
c0009791:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009794:	89 04 24             	mov    DWORD PTR [esp],eax
c0009797:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000979b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000979f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00097a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00097a6:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00097a9:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00097ac:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097af:	85 c0                	test   eax,eax
c00097b1:	7f 29                	jg     c00097dc <linear_vari_process+0x7cd>
c00097b3:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00097b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00097bf:	89 01                	mov    DWORD PTR [ecx],eax
c00097c1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00097c4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097c7:	99                   	cdq    
c00097c8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097cb:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00097ce:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097d1:	99                   	cdq    
c00097d2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097d5:	31 d2                	xor    edx,edx
c00097d7:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097da:	eb 1d                	jmp    c00097f9 <linear_vari_process+0x7ea>
c00097dc:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097df:	31 d2                	xor    edx,edx
c00097e1:	29 c8                	sub    eax,ecx
c00097e3:	c1 e0 02             	shl    eax,0x2
c00097e6:	39 d1                	cmp    ecx,edx
c00097e8:	7e c9                	jle    c00097b3 <linear_vari_process+0x7a4>
c00097ea:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097ec:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097ef:	83 c0 04             	add    eax,0x4
c00097f2:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097f6:	42                   	inc    edx
c00097f7:	eb ed                	jmp    c00097e6 <linear_vari_process+0x7d7>
c00097f9:	83 c4 3c             	add    esp,0x3c
c00097fc:	89 d0                	mov    eax,edx
c00097fe:	5b                   	pop    ebx
c00097ff:	5e                   	pop    esi
c0009800:	5f                   	pop    edi
c0009801:	5d                   	pop    ebp
c0009802:	c3                   	ret    

c0009803 <linear_reset>:
c0009803:	83 ec 0c             	sub    esp,0xc
c0009806:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000980a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000980d:	85 c0                	test   eax,eax
c000980f:	74 20                	je     c0009831 <linear_reset+0x2e>
c0009811:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0009814:	83 c0 1c             	add    eax,0x1c
c0009817:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000981a:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009821:	c1 e2 02             	shl    edx,0x2
c0009824:	51                   	push   ecx
c0009825:	52                   	push   edx
c0009826:	6a 00                	push   0x0
c0009828:	50                   	push   eax
c0009829:	e8 4a 6f ff ff       	call   c0000778 <memset>
c000982e:	83 c4 10             	add    esp,0x10
c0009831:	83 c4 0c             	add    esp,0xc
c0009834:	c3                   	ret    

c0009835 <linear_get_name>:
c0009835:	31 c0                	xor    eax,eax
c0009837:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000983c:	75 05                	jne    c0009843 <linear_get_name+0xe>
c000983e:	b8 80 9d 02 c0       	mov    eax,0xc0029d80
c0009843:	c3                   	ret    

c0009844 <linear_get_description>:
c0009844:	31 c0                	xor    eax,eax
c0009846:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000984b:	75 05                	jne    c0009852 <linear_get_description+0xe>
c000984d:	b8 94 9d 02 c0       	mov    eax,0xc0029d94
c0009852:	c3                   	ret    

c0009853 <linear_set_converter>:
c0009853:	53                   	push   ebx
c0009854:	b8 0a 00 00 00       	mov    eax,0xa
c0009859:	83 ec 08             	sub    esp,0x8
c000985c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009860:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009865:	75 6e                	jne    c00098d5 <linear_set_converter+0x82>
c0009867:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000986a:	85 c0                	test   eax,eax
c000986c:	74 13                	je     c0009881 <linear_set_converter+0x2e>
c000986e:	83 ec 0c             	sub    esp,0xc
c0009871:	50                   	push   eax
c0009872:	e8 d9 5f 00 00       	call   c000f850 <free>
c0009877:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000987e:	83 c4 10             	add    esp,0x10
c0009881:	50                   	push   eax
c0009882:	50                   	push   eax
c0009883:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009886:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000988d:	50                   	push   eax
c000988e:	6a 01                	push   0x1
c0009890:	e8 db 5f 00 00       	call   c000f870 <calloc>
c0009895:	83 c4 10             	add    esp,0x10
c0009898:	89 c2                	mov    edx,eax
c000989a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000989d:	85 d2                	test   edx,edx
c000989f:	b8 01 00 00 00       	mov    eax,0x1
c00098a4:	74 2f                	je     c00098d5 <linear_set_converter+0x82>
c00098a6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00098a9:	83 ec 0c             	sub    esp,0xc
c00098ac:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00098af:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c00098b5:	c7 43 24 0f 90 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000900f
c00098bc:	c7 43 20 0f 90 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000900f
c00098c3:	c7 43 28 03 98 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009803
c00098ca:	53                   	push   ebx
c00098cb:	e8 33 ff ff ff       	call   c0009803 <linear_reset>
c00098d0:	83 c4 10             	add    esp,0x10
c00098d3:	31 c0                	xor    eax,eax
c00098d5:	83 c4 08             	add    esp,0x8
c00098d8:	5b                   	pop    ebx
c00098d9:	c3                   	ret    

c00098da <int_to_fp>:
c00098da:	c1 e0 0c             	shl    eax,0xc
c00098dd:	c3                   	ret    

c00098de <fp_to_int>:
c00098de:	c1 f8 0c             	sar    eax,0xc
c00098e1:	c3                   	ret    

c00098e2 <fp_fraction_part>:
c00098e2:	25 ff 0f 00 00       	and    eax,0xfff
c00098e7:	c3                   	ret    

c00098e8 <fp_to_double>:
c00098e8:	83 ec 1c             	sub    esp,0x1c
c00098eb:	e8 f2 ff ff ff       	call   c00098e2 <fp_fraction_part>
c00098f0:	83 ec 0c             	sub    esp,0xc
c00098f3:	50                   	push   eax
c00098f4:	e8 1a e9 01 00       	call   c0028213 <__floatsidf>
c00098f9:	83 c4 10             	add    esp,0x10
c00098fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009900:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009904:	68 00 00 30 3f       	push   0x3f300000
c0009909:	6a 00                	push   0x0
c000990b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000990f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009913:	e8 98 e2 01 00       	call   c0027bb0 <__muldf3>
c0009918:	83 c4 2c             	add    esp,0x2c
c000991b:	c3                   	ret    

c000991c <calc_output_single>:
c000991c:	55                   	push   ebp
c000991d:	57                   	push   edi
c000991e:	56                   	push   esi
c000991f:	89 c6                	mov    esi,eax
c0009921:	53                   	push   ebx
c0009922:	89 d3                	mov    ebx,edx
c0009924:	83 ec 4c             	sub    esp,0x4c
c0009927:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000992b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000992e:	e8 a7 ff ff ff       	call   c00098da <int_to_fp>
c0009933:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c0009936:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000993a:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000993e:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009942:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009945:	99                   	cdq    
c0009946:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000994e:	f7 fb                	idiv   ebx
c0009950:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009958:	89 da                	mov    edx,ebx
c000995a:	0f af d0             	imul   edx,eax
c000995d:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009961:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009965:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009969:	29 c2                	sub    edx,eax
c000996b:	8d 2c 96             	lea    ebp,[esi+edx*4]
c000996e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009972:	83 c5 04             	add    ebp,0x4
c0009975:	e8 6e ff ff ff       	call   c00098e8 <fp_to_double>
c000997a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000997e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009986:	e8 53 ff ff ff       	call   c00098de <fp_to_int>
c000998b:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c000998e:	52                   	push   edx
c000998f:	52                   	push   edx
c0009990:	51                   	push   ecx
c0009991:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009995:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009999:	e8 2a d5 01 00       	call   c0026ec8 <__subsf3>
c000999e:	89 04 24             	mov    DWORD PTR [esp],eax
c00099a1:	e8 01 ec 01 00       	call   c00285a7 <__extendsfdf2>
c00099a6:	83 c4 10             	add    esp,0x10
c00099a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099ad:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099c1:	e8 ea e1 01 00       	call   c0027bb0 <__muldf3>
c00099c6:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00099ca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099ce:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099d1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00099d5:	e8 cd eb 01 00       	call   c00285a7 <__extendsfdf2>
c00099da:	83 c4 10             	add    esp,0x10
c00099dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099e5:	52                   	push   edx
c00099e6:	50                   	push   eax
c00099e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099ef:	e8 3f db 01 00       	call   c0027533 <__adddf3>
c00099f4:	59                   	pop    ecx
c00099f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099fd:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c0009a03:	e8 9f eb 01 00       	call   c00285a7 <__extendsfdf2>
c0009a08:	83 c4 10             	add    esp,0x10
c0009a0b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009a0f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009a13:	52                   	push   edx
c0009a14:	50                   	push   eax
c0009a15:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a19:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a1d:	e8 8e e1 01 00       	call   c0027bb0 <__muldf3>
c0009a22:	83 c4 10             	add    esp,0x10
c0009a25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009a29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009a2d:	52                   	push   edx
c0009a2e:	50                   	push   eax
c0009a2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a33:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a37:	e8 f7 da 01 00       	call   c0027533 <__adddf3>
c0009a3c:	83 c4 10             	add    esp,0x10
c0009a3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a47:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a4b:	0f 89 1d ff ff ff    	jns    c000996e <calc_output_single+0x52>
c0009a51:	89 d9                	mov    ecx,ebx
c0009a53:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a57:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a5b:	89 dd                	mov    ebp,ebx
c0009a5d:	29 c8                	sub    eax,ecx
c0009a5f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a67:	99                   	cdq    
c0009a68:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a70:	f7 fb                	idiv   ebx
c0009a72:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a76:	0f af e8             	imul   ebp,eax
c0009a79:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a7d:	01 cd                	add    ebp,ecx
c0009a7f:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a82:	89 e8                	mov    eax,ebp
c0009a84:	83 ee 04             	sub    esi,0x4
c0009a87:	e8 5c fe ff ff       	call   c00098e8 <fp_to_double>
c0009a8c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a90:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a94:	89 e8                	mov    eax,ebp
c0009a96:	29 dd                	sub    ebp,ebx
c0009a98:	e8 41 fe ff ff       	call   c00098de <fp_to_int>
c0009a9d:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009aa0:	52                   	push   edx
c0009aa1:	52                   	push   edx
c0009aa2:	51                   	push   ecx
c0009aa3:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009aa7:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009aab:	e8 18 d4 01 00       	call   c0026ec8 <__subsf3>
c0009ab0:	89 04 24             	mov    DWORD PTR [esp],eax
c0009ab3:	e8 ef ea 01 00       	call   c00285a7 <__extendsfdf2>
c0009ab8:	83 c4 10             	add    esp,0x10
c0009abb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009abf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009ac3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ac7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009acb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009acf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ad3:	e8 d8 e0 01 00       	call   c0027bb0 <__muldf3>
c0009ad8:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009adc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ae0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009ae3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ae7:	e8 bb ea 01 00       	call   c00285a7 <__extendsfdf2>
c0009aec:	83 c4 10             	add    esp,0x10
c0009aef:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009af3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009af7:	52                   	push   edx
c0009af8:	50                   	push   eax
c0009af9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b01:	e8 2d da 01 00       	call   c0027533 <__adddf3>
c0009b06:	59                   	pop    ecx
c0009b07:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009b0b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009b0f:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009b15:	e8 8d ea 01 00       	call   c00285a7 <__extendsfdf2>
c0009b1a:	83 c4 10             	add    esp,0x10
c0009b1d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b21:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b25:	52                   	push   edx
c0009b26:	50                   	push   eax
c0009b27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2f:	e8 7c e0 01 00       	call   c0027bb0 <__muldf3>
c0009b34:	83 c4 10             	add    esp,0x10
c0009b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b3f:	52                   	push   edx
c0009b40:	50                   	push   eax
c0009b41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b49:	e8 e5 d9 01 00       	call   c0027533 <__adddf3>
c0009b4e:	83 c4 10             	add    esp,0x10
c0009b51:	85 ed                	test   ebp,ebp
c0009b53:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b57:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b5b:	0f 8f 21 ff ff ff    	jg     c0009a82 <calc_output_single+0x166>
c0009b61:	52                   	push   edx
c0009b62:	50                   	push   eax
c0009b63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b6b:	e8 c3 d9 01 00       	call   c0027533 <__adddf3>
c0009b70:	83 c4 5c             	add    esp,0x5c
c0009b73:	5b                   	pop    ebx
c0009b74:	5e                   	pop    esi
c0009b75:	5f                   	pop    edi
c0009b76:	5d                   	pop    ebp
c0009b77:	c3                   	ret    

c0009b78 <calc_output_stereo>:
c0009b78:	55                   	push   ebp
c0009b79:	89 cd                	mov    ebp,ecx
c0009b7b:	57                   	push   edi
c0009b7c:	56                   	push   esi
c0009b7d:	53                   	push   ebx
c0009b7e:	89 c3                	mov    ebx,eax
c0009b80:	83 ec 6c             	sub    esp,0x6c
c0009b83:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b87:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b8e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b95:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b99:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b9d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009ba0:	e8 35 fd ff ff       	call   c00098da <int_to_fp>
c0009ba5:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009bad:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bb1:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009bb9:	29 c8                	sub    eax,ecx
c0009bbb:	99                   	cdq    
c0009bbc:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009bc0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009bc4:	0f af d0             	imul   edx,eax
c0009bc7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009bca:	31 d2                	xor    edx,edx
c0009bcc:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009bd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009bd4:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009bd7:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009bdb:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009bde:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009be2:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009be6:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009be9:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bee:	29 c1                	sub    ecx,eax
c0009bf0:	31 c0                	xor    eax,eax
c0009bf2:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bf5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bf9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bfd:	83 c7 08             	add    edi,0x8
c0009c00:	e8 e3 fc ff ff       	call   c00098e8 <fp_to_double>
c0009c05:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009c09:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009c0d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c11:	e8 c8 fc ff ff       	call   c00098de <fp_to_int>
c0009c16:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009c19:	52                   	push   edx
c0009c1a:	52                   	push   edx
c0009c1b:	51                   	push   ecx
c0009c1c:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009c20:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009c24:	e8 9f d2 01 00       	call   c0026ec8 <__subsf3>
c0009c29:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c2c:	e8 76 e9 01 00       	call   c00285a7 <__extendsfdf2>
c0009c31:	83 c4 10             	add    esp,0x10
c0009c34:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c38:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c3c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c44:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c48:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c4c:	e8 5f df 01 00       	call   c0027bb0 <__muldf3>
c0009c51:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c55:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c59:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c5c:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c60:	e8 42 e9 01 00       	call   c00285a7 <__extendsfdf2>
c0009c65:	83 c4 10             	add    esp,0x10
c0009c68:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c6c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c70:	52                   	push   edx
c0009c71:	50                   	push   eax
c0009c72:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c76:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c7a:	e8 b4 d8 01 00       	call   c0027533 <__adddf3>
c0009c7f:	59                   	pop    ecx
c0009c80:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c84:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c88:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c8e:	e8 14 e9 01 00       	call   c00285a7 <__extendsfdf2>
c0009c93:	83 c4 10             	add    esp,0x10
c0009c96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c9e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009caa:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cae:	e8 fd de 01 00       	call   c0027bb0 <__muldf3>
c0009cb3:	83 c4 10             	add    esp,0x10
c0009cb6:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cba:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cbe:	52                   	push   edx
c0009cbf:	50                   	push   eax
c0009cc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc8:	e8 66 d8 01 00       	call   c0027533 <__adddf3>
c0009ccd:	59                   	pop    ecx
c0009cce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009cd2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009cd6:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009cdc:	e8 c6 e8 01 00       	call   c00285a7 <__extendsfdf2>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ce8:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cf8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cfc:	e8 af de 01 00       	call   c0027bb0 <__muldf3>
c0009d01:	83 c4 10             	add    esp,0x10
c0009d04:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009d08:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009d0c:	52                   	push   edx
c0009d0d:	50                   	push   eax
c0009d0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d12:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d16:	e8 18 d8 01 00       	call   c0027533 <__adddf3>
c0009d1b:	83 c4 10             	add    esp,0x10
c0009d1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009d22:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d26:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d2a:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009d2e:	0f 89 c5 fe ff ff    	jns    c0009bf9 <calc_output_stereo+0x81>
c0009d34:	29 e9                	sub    ecx,ebp
c0009d36:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d3a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d3e:	29 c8                	sub    eax,ecx
c0009d40:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d48:	99                   	cdq    
c0009d49:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d4d:	31 d2                	xor    edx,edx
c0009d4f:	0f af f8             	imul   edi,eax
c0009d52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d56:	40                   	inc    eax
c0009d57:	01 cf                	add    edi,ecx
c0009d59:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d5e:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d62:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d6a:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d6d:	31 c0                	xor    eax,eax
c0009d6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d73:	89 f8                	mov    eax,edi
c0009d75:	83 eb 08             	sub    ebx,0x8
c0009d78:	e8 6b fb ff ff       	call   c00098e8 <fp_to_double>
c0009d7d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d81:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d85:	89 f8                	mov    eax,edi
c0009d87:	e8 52 fb ff ff       	call   c00098de <fp_to_int>
c0009d8c:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d8f:	52                   	push   edx
c0009d90:	52                   	push   edx
c0009d91:	55                   	push   ebp
c0009d92:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d96:	e8 2d d1 01 00       	call   c0026ec8 <__subsf3>
c0009d9b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d9e:	e8 04 e8 01 00       	call   c00285a7 <__extendsfdf2>
c0009da3:	83 c4 10             	add    esp,0x10
c0009da6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009daa:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dbe:	e8 ed dd 01 00       	call   c0027bb0 <__muldf3>
c0009dc3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009dc6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009dca:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009dce:	e8 d4 e7 01 00       	call   c00285a7 <__extendsfdf2>
c0009dd3:	83 c4 10             	add    esp,0x10
c0009dd6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dda:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dde:	52                   	push   edx
c0009ddf:	50                   	push   eax
c0009de0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de8:	e8 46 d7 01 00       	call   c0027533 <__adddf3>
c0009ded:	59                   	pop    ecx
c0009dee:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009df2:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009df6:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dfc:	e8 a6 e7 01 00       	call   c00285a7 <__extendsfdf2>
c0009e01:	83 c4 10             	add    esp,0x10
c0009e04:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e08:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e0c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e10:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e14:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e1c:	e8 8f dd 01 00       	call   c0027bb0 <__muldf3>
c0009e21:	83 c4 10             	add    esp,0x10
c0009e24:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e28:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e2c:	52                   	push   edx
c0009e2d:	50                   	push   eax
c0009e2e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e32:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e36:	e8 f8 d6 01 00       	call   c0027533 <__adddf3>
c0009e3b:	5d                   	pop    ebp
c0009e3c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e40:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e44:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e4a:	e8 58 e7 01 00       	call   c00285a7 <__extendsfdf2>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e56:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e5a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e5e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e62:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e6a:	e8 41 dd 01 00       	call   c0027bb0 <__muldf3>
c0009e6f:	83 c4 10             	add    esp,0x10
c0009e72:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e76:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e7a:	52                   	push   edx
c0009e7b:	50                   	push   eax
c0009e7c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e80:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e84:	e8 aa d6 01 00       	call   c0027533 <__adddf3>
c0009e89:	83 c4 10             	add    esp,0x10
c0009e8c:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e90:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e94:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e98:	85 ff                	test   edi,edi
c0009e9a:	0f 8f d3 fe ff ff    	jg     c0009d73 <calc_output_stereo+0x1fb>
c0009ea0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb0:	e8 7e d6 01 00       	call   c0027533 <__adddf3>
c0009eb5:	83 c4 10             	add    esp,0x10
c0009eb8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ebc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ec0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ecc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ed0:	e8 db dc 01 00       	call   c0027bb0 <__muldf3>
c0009ed5:	59                   	pop    ecx
c0009ed6:	5b                   	pop    ebx
c0009ed7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009edb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009edf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee7:	e8 97 e5 01 00       	call   c0028483 <__truncdfsf2>
c0009eec:	83 c4 10             	add    esp,0x10
c0009eef:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ef6:	89 03                	mov    DWORD PTR [ebx],eax
c0009ef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009efc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f08:	e8 26 d6 01 00       	call   c0027533 <__adddf3>
c0009f0d:	83 c4 10             	add    esp,0x10
c0009f10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009f14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009f18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f1c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f28:	e8 83 dc 01 00       	call   c0027bb0 <__muldf3>
c0009f2d:	5e                   	pop    esi
c0009f2e:	5f                   	pop    edi
c0009f2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f33:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3f:	e8 3f e5 01 00       	call   c0028483 <__truncdfsf2>
c0009f44:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f4b:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f4e:	83 c4 7c             	add    esp,0x7c
c0009f51:	5b                   	pop    ebx
c0009f52:	5e                   	pop    esi
c0009f53:	5f                   	pop    edi
c0009f54:	5d                   	pop    ebp
c0009f55:	c3                   	ret    

c0009f56 <calc_output_quad>:
c0009f56:	55                   	push   ebp
c0009f57:	57                   	push   edi
c0009f58:	56                   	push   esi
c0009f59:	89 c6                	mov    esi,eax
c0009f5b:	53                   	push   ebx
c0009f5c:	83 ec 7c             	sub    esp,0x7c
c0009f5f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f63:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f67:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f6e:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f75:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f79:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f7d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f80:	e8 55 f9 ff ff       	call   c00098da <int_to_fp>
c0009f85:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f88:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f8b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f8f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f93:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f97:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f9b:	99                   	cdq    
c0009f9c:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009fa0:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009fa4:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009fa7:	31 d2                	xor    edx,edx
c0009fa9:	0f af d8             	imul   ebx,eax
c0009fac:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009fb4:	0f af c7             	imul   eax,edi
c0009fb7:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009fbb:	29 c1                	sub    ecx,eax
c0009fbd:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009fc5:	31 c0                	xor    eax,eax
c0009fc7:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009fca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009fce:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009fd2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fd6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fda:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fde:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fe2:	89 d8                	mov    eax,ebx
c0009fe4:	83 c7 10             	add    edi,0x10
c0009fe7:	e8 fc f8 ff ff       	call   c00098e8 <fp_to_double>
c0009fec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009ff0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ff4:	89 d8                	mov    eax,ebx
c0009ff6:	e8 e3 f8 ff ff       	call   c00098de <fp_to_int>
c0009ffb:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fff:	52                   	push   edx
c000a000:	52                   	push   edx
c000a001:	51                   	push   ecx
c000a002:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c000a006:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a00a:	e8 b9 ce 01 00       	call   c0026ec8 <__subsf3>
c000a00f:	89 04 24             	mov    DWORD PTR [esp],eax
c000a012:	e8 90 e5 01 00       	call   c00285a7 <__extendsfdf2>
c000a017:	83 c4 10             	add    esp,0x10
c000a01a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a01e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a02a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a02e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a032:	e8 79 db 01 00       	call   c0027bb0 <__muldf3>
c000a037:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a03b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a03f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a042:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a046:	e8 5c e5 01 00       	call   c00285a7 <__extendsfdf2>
c000a04b:	83 c4 10             	add    esp,0x10
c000a04e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a052:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a056:	52                   	push   edx
c000a057:	50                   	push   eax
c000a058:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a05c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a060:	e8 ce d4 01 00       	call   c0027533 <__adddf3>
c000a065:	59                   	pop    ecx
c000a066:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a06a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a06e:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a074:	e8 2e e5 01 00       	call   c00285a7 <__extendsfdf2>
c000a079:	83 c4 10             	add    esp,0x10
c000a07c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a080:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a08c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a090:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a094:	e8 17 db 01 00       	call   c0027bb0 <__muldf3>
c000a099:	83 c4 10             	add    esp,0x10
c000a09c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0a4:	52                   	push   edx
c000a0a5:	50                   	push   eax
c000a0a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0ae:	e8 80 d4 01 00       	call   c0027533 <__adddf3>
c000a0b3:	59                   	pop    ecx
c000a0b4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a0b8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a0bc:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a0c2:	e8 e0 e4 01 00       	call   c00285a7 <__extendsfdf2>
c000a0c7:	83 c4 10             	add    esp,0x10
c000a0ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0e2:	e8 c9 da 01 00       	call   c0027bb0 <__muldf3>
c000a0e7:	83 c4 10             	add    esp,0x10
c000a0ea:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ee:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0f2:	52                   	push   edx
c000a0f3:	50                   	push   eax
c000a0f4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0f8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0fc:	e8 32 d4 01 00       	call   c0027533 <__adddf3>
c000a101:	59                   	pop    ecx
c000a102:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a106:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a10a:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a110:	e8 92 e4 01 00       	call   c00285a7 <__extendsfdf2>
c000a115:	83 c4 10             	add    esp,0x10
c000a118:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a11c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a120:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a124:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a128:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a12c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a130:	e8 7b da 01 00       	call   c0027bb0 <__muldf3>
c000a135:	83 c4 10             	add    esp,0x10
c000a138:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a13c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a140:	52                   	push   edx
c000a141:	50                   	push   eax
c000a142:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a146:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a14a:	e8 e4 d3 01 00       	call   c0027533 <__adddf3>
c000a14f:	59                   	pop    ecx
c000a150:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a154:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a158:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a15e:	e8 44 e4 01 00       	call   c00285a7 <__extendsfdf2>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a16a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a16e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a172:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a176:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17e:	e8 2d da 01 00       	call   c0027bb0 <__muldf3>
c000a183:	83 c4 10             	add    esp,0x10
c000a186:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a18a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a18e:	52                   	push   edx
c000a18f:	50                   	push   eax
c000a190:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a194:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a198:	e8 96 d3 01 00       	call   c0027533 <__adddf3>
c000a19d:	83 c4 10             	add    esp,0x10
c000a1a0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a1a4:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a1a8:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a1ac:	0f 89 30 fe ff ff    	jns    c0009fe2 <calc_output_quad+0x8c>
c000a1b2:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a1b6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a1ba:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a1be:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a1c2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a1ca:	29 c8                	sub    eax,ecx
c000a1cc:	99                   	cdq    
c000a1cd:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1d1:	31 d2                	xor    edx,edx
c000a1d3:	0f af d8             	imul   ebx,eax
c000a1d6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1da:	40                   	inc    eax
c000a1db:	01 cb                	add    ebx,ecx
c000a1dd:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1e2:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1e6:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1ee:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1f1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1f9:	31 c0                	xor    eax,eax
c000a1fb:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1ff:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a203:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a207:	89 d8                	mov    eax,ebx
c000a209:	83 ee 10             	sub    esi,0x10
c000a20c:	e8 d7 f6 ff ff       	call   c00098e8 <fp_to_double>
c000a211:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a215:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a219:	89 d8                	mov    eax,ebx
c000a21b:	e8 be f6 ff ff       	call   c00098de <fp_to_int>
c000a220:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a224:	52                   	push   edx
c000a225:	52                   	push   edx
c000a226:	57                   	push   edi
c000a227:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a22b:	e8 98 cc 01 00       	call   c0026ec8 <__subsf3>
c000a230:	89 04 24             	mov    DWORD PTR [esp],eax
c000a233:	e8 6f e3 01 00       	call   c00285a7 <__extendsfdf2>
c000a238:	83 c4 10             	add    esp,0x10
c000a23b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a23f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a243:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a247:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a24b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a24f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a253:	e8 58 d9 01 00       	call   c0027bb0 <__muldf3>
c000a258:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a25b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a25f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a263:	e8 3f e3 01 00       	call   c00285a7 <__extendsfdf2>
c000a268:	83 c4 10             	add    esp,0x10
c000a26b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a26f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a273:	52                   	push   edx
c000a274:	50                   	push   eax
c000a275:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a279:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a27d:	e8 b1 d2 01 00       	call   c0027533 <__adddf3>
c000a282:	59                   	pop    ecx
c000a283:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a287:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a28b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a291:	e8 11 e3 01 00       	call   c00285a7 <__extendsfdf2>
c000a296:	83 c4 10             	add    esp,0x10
c000a299:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a29d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ad:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2b1:	e8 fa d8 01 00       	call   c0027bb0 <__muldf3>
c000a2b6:	83 c4 10             	add    esp,0x10
c000a2b9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2bd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2c1:	52                   	push   edx
c000a2c2:	50                   	push   eax
c000a2c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2cb:	e8 63 d2 01 00       	call   c0027533 <__adddf3>
c000a2d0:	5f                   	pop    edi
c000a2d1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a2d5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a2d9:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2df:	e8 c3 e2 01 00       	call   c00285a7 <__extendsfdf2>
c000a2e4:	83 c4 10             	add    esp,0x10
c000a2e7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2eb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2fb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ff:	e8 ac d8 01 00       	call   c0027bb0 <__muldf3>
c000a304:	83 c4 10             	add    esp,0x10
c000a307:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a30b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a30f:	52                   	push   edx
c000a310:	50                   	push   eax
c000a311:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a315:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a319:	e8 15 d2 01 00       	call   c0027533 <__adddf3>
c000a31e:	59                   	pop    ecx
c000a31f:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a323:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a327:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a32d:	e8 75 e2 01 00       	call   c00285a7 <__extendsfdf2>
c000a332:	83 c4 10             	add    esp,0x10
c000a335:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a339:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a33d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a341:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a345:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a349:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a34d:	e8 5e d8 01 00       	call   c0027bb0 <__muldf3>
c000a352:	83 c4 10             	add    esp,0x10
c000a355:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a359:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a35d:	52                   	push   edx
c000a35e:	50                   	push   eax
c000a35f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a363:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a367:	e8 c7 d1 01 00       	call   c0027533 <__adddf3>
c000a36c:	5f                   	pop    edi
c000a36d:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a371:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a375:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a37b:	e8 27 e2 01 00       	call   c00285a7 <__extendsfdf2>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a387:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a38b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a38f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a393:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a397:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a39b:	e8 10 d8 01 00       	call   c0027bb0 <__muldf3>
c000a3a0:	83 c4 10             	add    esp,0x10
c000a3a3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3a7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3ab:	52                   	push   edx
c000a3ac:	50                   	push   eax
c000a3ad:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b5:	e8 79 d1 01 00       	call   c0027533 <__adddf3>
c000a3ba:	83 c4 10             	add    esp,0x10
c000a3bd:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3c1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a3c5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a3c9:	85 db                	test   ebx,ebx
c000a3cb:	0f 8f 36 fe ff ff    	jg     c000a207 <calc_output_quad+0x2b1>
c000a3d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3e1:	e8 4d d1 01 00       	call   c0027533 <__adddf3>
c000a3e6:	83 c4 10             	add    esp,0x10
c000a3e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a401:	e8 aa d7 01 00       	call   c0027bb0 <__muldf3>
c000a406:	59                   	pop    ecx
c000a407:	5b                   	pop    ebx
c000a408:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a40c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a410:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a414:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a418:	e8 66 e0 01 00       	call   c0028483 <__truncdfsf2>
c000a41d:	83 c4 10             	add    esp,0x10
c000a420:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a427:	89 06                	mov    DWORD PTR [esi],eax
c000a429:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a42d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a431:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a435:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a439:	e8 f5 d0 01 00       	call   c0027533 <__adddf3>
c000a43e:	83 c4 10             	add    esp,0x10
c000a441:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a445:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a449:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a44d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a451:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a455:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a459:	e8 52 d7 01 00       	call   c0027bb0 <__muldf3>
c000a45e:	5e                   	pop    esi
c000a45f:	5f                   	pop    edi
c000a460:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a464:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	e8 0e e0 01 00       	call   c0028483 <__truncdfsf2>
c000a475:	83 c4 10             	add    esp,0x10
c000a478:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a47f:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a482:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a486:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a48a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a48e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a492:	e8 9c d0 01 00       	call   c0027533 <__adddf3>
c000a497:	83 c4 10             	add    esp,0x10
c000a49a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a49e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4b2:	e8 f9 d6 01 00       	call   c0027bb0 <__muldf3>
c000a4b7:	5d                   	pop    ebp
c000a4b8:	59                   	pop    ecx
c000a4b9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	e8 b5 df 01 00       	call   c0028483 <__truncdfsf2>
c000a4ce:	83 c4 10             	add    esp,0x10
c000a4d1:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a4d8:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4db:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4df:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4eb:	e8 43 d0 01 00       	call   c0027533 <__adddf3>
c000a4f0:	83 c4 10             	add    esp,0x10
c000a4f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a503:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a507:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a50b:	e8 a0 d6 01 00       	call   c0027bb0 <__muldf3>
c000a510:	5b                   	pop    ebx
c000a511:	5e                   	pop    esi
c000a512:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a516:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a51a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a51e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a522:	e8 5c df 01 00       	call   c0028483 <__truncdfsf2>
c000a527:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a52e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a531:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a537:	5b                   	pop    ebx
c000a538:	5e                   	pop    esi
c000a539:	5f                   	pop    edi
c000a53a:	5d                   	pop    ebp
c000a53b:	c3                   	ret    

c000a53c <calc_output_hex>:
c000a53c:	55                   	push   ebp
c000a53d:	89 cd                	mov    ebp,ecx
c000a53f:	57                   	push   edi
c000a540:	56                   	push   esi
c000a541:	53                   	push   ebx
c000a542:	89 c3                	mov    ebx,eax
c000a544:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a54a:	89 14 24             	mov    DWORD PTR [esp],edx
c000a54d:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a554:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a55b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a55f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a563:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a566:	e8 6f f3 ff ff       	call   c00098da <int_to_fp>
c000a56b:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a56e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a572:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a575:	29 c8                	sub    eax,ecx
c000a577:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a57b:	99                   	cdq    
c000a57c:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a584:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a587:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a58f:	0f af f8             	imul   edi,eax
c000a592:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a595:	01 cf                	add    edi,ecx
c000a597:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a59b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a59e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a5a2:	0f af c2             	imul   eax,edx
c000a5a5:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a5a9:	29 c1                	sub    ecx,eax
c000a5ab:	31 d2                	xor    edx,edx
c000a5ad:	31 c0                	xor    eax,eax
c000a5af:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a5ba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a5be:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a5c2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a5c6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a5ca:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a5ce:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a5d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5da:	89 f8                	mov    eax,edi
c000a5dc:	e8 07 f3 ff ff       	call   c00098e8 <fp_to_double>
c000a5e1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5e9:	89 f8                	mov    eax,edi
c000a5eb:	e8 ee f2 ff ff       	call   c00098de <fp_to_int>
c000a5f0:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5f4:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5f7:	52                   	push   edx
c000a5f8:	52                   	push   edx
c000a5f9:	51                   	push   ecx
c000a5fa:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5fe:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a605:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a609:	e8 ba c8 01 00       	call   c0026ec8 <__subsf3>
c000a60e:	89 04 24             	mov    DWORD PTR [esp],eax
c000a611:	e8 91 df 01 00       	call   c00285a7 <__extendsfdf2>
c000a616:	83 c4 10             	add    esp,0x10
c000a619:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a61d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a625:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a629:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a62d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a631:	e8 7a d5 01 00       	call   c0027bb0 <__muldf3>
c000a636:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a63a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a63e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a641:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a645:	e8 5d df 01 00       	call   c00285a7 <__extendsfdf2>
c000a64a:	83 c4 10             	add    esp,0x10
c000a64d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a651:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a655:	52                   	push   edx
c000a656:	50                   	push   eax
c000a657:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65f:	e8 cf ce 01 00       	call   c0027533 <__adddf3>
c000a664:	59                   	pop    ecx
c000a665:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a669:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a66d:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a673:	e8 2f df 01 00       	call   c00285a7 <__extendsfdf2>
c000a678:	83 c4 10             	add    esp,0x10
c000a67b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a67f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a683:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a687:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a68b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a68f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a693:	e8 18 d5 01 00       	call   c0027bb0 <__muldf3>
c000a698:	83 c4 10             	add    esp,0x10
c000a69b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a69f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6a3:	52                   	push   edx
c000a6a4:	50                   	push   eax
c000a6a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6ad:	e8 81 ce 01 00       	call   c0027533 <__adddf3>
c000a6b2:	59                   	pop    ecx
c000a6b3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a6b7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a6bb:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a6c1:	e8 e1 de 01 00       	call   c00285a7 <__extendsfdf2>
c000a6c6:	83 c4 10             	add    esp,0x10
c000a6c9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6cd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6dd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6e1:	e8 ca d4 01 00       	call   c0027bb0 <__muldf3>
c000a6e6:	83 c4 10             	add    esp,0x10
c000a6e9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6ed:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6f1:	52                   	push   edx
c000a6f2:	50                   	push   eax
c000a6f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6f7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6fb:	e8 33 ce 01 00       	call   c0027533 <__adddf3>
c000a700:	59                   	pop    ecx
c000a701:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a705:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a709:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a70f:	e8 93 de 01 00       	call   c00285a7 <__extendsfdf2>
c000a714:	83 c4 10             	add    esp,0x10
c000a717:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a71b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a71f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a723:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a727:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72f:	e8 7c d4 01 00       	call   c0027bb0 <__muldf3>
c000a734:	83 c4 10             	add    esp,0x10
c000a737:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a73b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a73f:	52                   	push   edx
c000a740:	50                   	push   eax
c000a741:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a745:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a749:	e8 e5 cd 01 00       	call   c0027533 <__adddf3>
c000a74e:	59                   	pop    ecx
c000a74f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a753:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a757:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a75d:	e8 45 de 01 00       	call   c00285a7 <__extendsfdf2>
c000a762:	83 c4 10             	add    esp,0x10
c000a765:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a769:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a76d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a771:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a775:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a779:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a77d:	e8 2e d4 01 00       	call   c0027bb0 <__muldf3>
c000a782:	83 c4 10             	add    esp,0x10
c000a785:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a789:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a78d:	52                   	push   edx
c000a78e:	50                   	push   eax
c000a78f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a793:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a797:	e8 97 cd 01 00       	call   c0027533 <__adddf3>
c000a79c:	59                   	pop    ecx
c000a79d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a7a1:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a7a5:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a7ab:	e8 f7 dd 01 00       	call   c00285a7 <__extendsfdf2>
c000a7b0:	83 c4 10             	add    esp,0x10
c000a7b3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7b7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7c3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7c7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7cb:	e8 e0 d3 01 00       	call   c0027bb0 <__muldf3>
c000a7d0:	83 c4 10             	add    esp,0x10
c000a7d3:	83 c6 18             	add    esi,0x18
c000a7d6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7da:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7de:	52                   	push   edx
c000a7df:	50                   	push   eax
c000a7e0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e8:	e8 46 cd 01 00       	call   c0027533 <__adddf3>
c000a7ed:	59                   	pop    ecx
c000a7ee:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7f2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7f6:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7fc:	e8 a6 dd 01 00       	call   c00285a7 <__extendsfdf2>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a808:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a80c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a810:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a814:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a818:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a81c:	e8 8f d3 01 00       	call   c0027bb0 <__muldf3>
c000a821:	83 c4 10             	add    esp,0x10
c000a824:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a828:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a82c:	52                   	push   edx
c000a82d:	50                   	push   eax
c000a82e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a832:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a836:	e8 f8 cc 01 00       	call   c0027533 <__adddf3>
c000a83b:	83 c4 10             	add    esp,0x10
c000a83e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a842:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a846:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a849:	0f 89 8b fd ff ff    	jns    c000a5da <calc_output_hex+0x9e>
c000a84f:	31 f6                	xor    esi,esi
c000a851:	31 ff                	xor    edi,edi
c000a853:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a857:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a85a:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a85e:	29 e9                	sub    ecx,ebp
c000a860:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a864:	29 c8                	sub    eax,ecx
c000a866:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a869:	99                   	cdq    
c000a86a:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a86e:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a871:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a875:	0f af e8             	imul   ebp,eax
c000a878:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a87c:	40                   	inc    eax
c000a87d:	01 cd                	add    ebp,ecx
c000a87f:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a884:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a888:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a88c:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a890:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a893:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a897:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a89b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a89f:	89 e8                	mov    eax,ebp
c000a8a1:	e8 42 f0 ff ff       	call   c00098e8 <fp_to_double>
c000a8a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8ae:	89 e8                	mov    eax,ebp
c000a8b0:	e8 29 f0 ff ff       	call   c00098de <fp_to_int>
c000a8b5:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a8b9:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a8bc:	52                   	push   edx
c000a8bd:	52                   	push   edx
c000a8be:	51                   	push   ecx
c000a8bf:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a8c6:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a8cd:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a8d1:	e8 f2 c5 01 00       	call   c0026ec8 <__subsf3>
c000a8d6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8d9:	e8 c9 dc 01 00       	call   c00285a7 <__extendsfdf2>
c000a8de:	83 c4 10             	add    esp,0x10
c000a8e1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8f1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f9:	e8 b2 d2 01 00       	call   c0027bb0 <__muldf3>
c000a8fe:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a905:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a909:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a90c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a910:	e8 92 dc 01 00       	call   c00285a7 <__extendsfdf2>
c000a915:	83 c4 10             	add    esp,0x10
c000a918:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a91c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a920:	52                   	push   edx
c000a921:	50                   	push   eax
c000a922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a92a:	e8 04 cc 01 00       	call   c0027533 <__adddf3>
c000a92f:	59                   	pop    ecx
c000a930:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a934:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a938:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a93e:	e8 64 dc 01 00       	call   c00285a7 <__extendsfdf2>
c000a943:	83 c4 10             	add    esp,0x10
c000a946:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a94a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a94e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a952:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a956:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95e:	e8 4d d2 01 00       	call   c0027bb0 <__muldf3>
c000a963:	83 c4 10             	add    esp,0x10
c000a966:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a96a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a96e:	52                   	push   edx
c000a96f:	50                   	push   eax
c000a970:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a974:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a978:	e8 b6 cb 01 00       	call   c0027533 <__adddf3>
c000a97d:	59                   	pop    ecx
c000a97e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a982:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a986:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a98c:	e8 16 dc 01 00       	call   c00285a7 <__extendsfdf2>
c000a991:	83 c4 10             	add    esp,0x10
c000a994:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a998:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a99c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9a8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9ac:	e8 ff d1 01 00       	call   c0027bb0 <__muldf3>
c000a9b1:	83 c4 10             	add    esp,0x10
c000a9b4:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9b8:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9bc:	52                   	push   edx
c000a9bd:	50                   	push   eax
c000a9be:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c2:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c6:	e8 68 cb 01 00       	call   c0027533 <__adddf3>
c000a9cb:	59                   	pop    ecx
c000a9cc:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a9d0:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a9d4:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9da:	e8 c8 db 01 00       	call   c00285a7 <__extendsfdf2>
c000a9df:	83 c4 10             	add    esp,0x10
c000a9e2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9e6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9f2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9f6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9fa:	e8 b1 d1 01 00       	call   c0027bb0 <__muldf3>
c000a9ff:	83 c4 10             	add    esp,0x10
c000aa02:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa06:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa0a:	52                   	push   edx
c000aa0b:	50                   	push   eax
c000aa0c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa10:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa14:	e8 1a cb 01 00       	call   c0027533 <__adddf3>
c000aa19:	59                   	pop    ecx
c000aa1a:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000aa1e:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000aa22:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000aa28:	e8 7a db 01 00       	call   c00285a7 <__extendsfdf2>
c000aa2d:	83 c4 10             	add    esp,0x10
c000aa30:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa34:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa40:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa44:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa48:	e8 63 d1 01 00       	call   c0027bb0 <__muldf3>
c000aa4d:	83 c4 10             	add    esp,0x10
c000aa50:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa54:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa58:	52                   	push   edx
c000aa59:	50                   	push   eax
c000aa5a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa5e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa62:	e8 cc ca 01 00       	call   c0027533 <__adddf3>
c000aa67:	59                   	pop    ecx
c000aa68:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa6c:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa70:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa76:	e8 2c db 01 00       	call   c00285a7 <__extendsfdf2>
c000aa7b:	83 c4 10             	add    esp,0x10
c000aa7e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa82:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa92:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa96:	e8 15 d1 01 00       	call   c0027bb0 <__muldf3>
c000aa9b:	83 c4 10             	add    esp,0x10
c000aa9e:	83 eb 18             	sub    ebx,0x18
c000aaa1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aaa5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aaa9:	52                   	push   edx
c000aaaa:	50                   	push   eax
c000aaab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aaaf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aab3:	e8 7b ca 01 00       	call   c0027533 <__adddf3>
c000aab8:	59                   	pop    ecx
c000aab9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aabd:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aac1:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aac7:	e8 db da 01 00       	call   c00285a7 <__extendsfdf2>
c000aacc:	83 c4 10             	add    esp,0x10
c000aacf:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aad3:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aad7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadf:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae3:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae7:	e8 c4 d0 01 00       	call   c0027bb0 <__muldf3>
c000aaec:	83 c4 10             	add    esp,0x10
c000aaef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aaf3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aaf7:	52                   	push   edx
c000aaf8:	50                   	push   eax
c000aaf9:	57                   	push   edi
c000aafa:	56                   	push   esi
c000aafb:	e8 33 ca 01 00       	call   c0027533 <__adddf3>
c000ab00:	83 c4 10             	add    esp,0x10
c000ab03:	89 c6                	mov    esi,eax
c000ab05:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000ab08:	89 d7                	mov    edi,edx
c000ab0a:	85 ed                	test   ebp,ebp
c000ab0c:	0f 8f 8d fd ff ff    	jg     c000a89f <calc_output_hex+0x363>
c000ab12:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab16:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab22:	e8 0c ca 01 00       	call   c0027533 <__adddf3>
c000ab27:	83 c4 10             	add    esp,0x10
c000ab2a:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab2d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab31:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab35:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab3d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab41:	e8 6a d0 01 00       	call   c0027bb0 <__muldf3>
c000ab46:	59                   	pop    ecx
c000ab47:	5b                   	pop    ebx
c000ab48:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab4c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab54:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab58:	e8 26 d9 01 00       	call   c0028483 <__truncdfsf2>
c000ab5d:	83 c4 10             	add    esp,0x10
c000ab60:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab67:	89 03                	mov    DWORD PTR [ebx],eax
c000ab69:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab6d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab79:	e8 b5 c9 01 00       	call   c0027533 <__adddf3>
c000ab7e:	83 c4 10             	add    esp,0x10
c000ab81:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab84:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab98:	e8 13 d0 01 00       	call   c0027bb0 <__muldf3>
c000ab9d:	5d                   	pop    ebp
c000ab9e:	59                   	pop    ecx
c000ab9f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aba3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aba7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaf:	e8 cf d8 01 00       	call   c0028483 <__truncdfsf2>
c000abb4:	83 c4 10             	add    esp,0x10
c000abb7:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abbe:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000abc1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abcd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abd1:	e8 5d c9 01 00       	call   c0027533 <__adddf3>
c000abd6:	83 c4 10             	add    esp,0x10
c000abd9:	89 04 24             	mov    DWORD PTR [esp],eax
c000abdc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abe0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf0:	e8 bb cf 01 00       	call   c0027bb0 <__muldf3>
c000abf5:	5b                   	pop    ebx
c000abf6:	5d                   	pop    ebp
c000abf7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abfb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac07:	e8 77 d8 01 00       	call   c0028483 <__truncdfsf2>
c000ac0c:	83 c4 10             	add    esp,0x10
c000ac0f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac16:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ac19:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac1d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac21:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac25:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac29:	e8 05 c9 01 00       	call   c0027533 <__adddf3>
c000ac2e:	83 c4 10             	add    esp,0x10
c000ac31:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac34:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac38:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac3c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac48:	e8 63 cf 01 00       	call   c0027bb0 <__muldf3>
c000ac4d:	59                   	pop    ecx
c000ac4e:	5b                   	pop    ebx
c000ac4f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac53:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac57:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5f:	e8 1f d8 01 00       	call   c0028483 <__truncdfsf2>
c000ac64:	83 c4 10             	add    esp,0x10
c000ac67:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac6e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac79:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac7d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac81:	e8 ad c8 01 00       	call   c0027533 <__adddf3>
c000ac86:	83 c4 10             	add    esp,0x10
c000ac89:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac8c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca0:	e8 0b cf 01 00       	call   c0027bb0 <__muldf3>
c000aca5:	5d                   	pop    ebp
c000aca6:	59                   	pop    ecx
c000aca7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acaf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb7:	e8 c7 d7 01 00       	call   c0028483 <__truncdfsf2>
c000acbc:	83 c4 10             	add    esp,0x10
c000acbf:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000acc6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000acc9:	57                   	push   edi
c000acca:	56                   	push   esi
c000accb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000accf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acd3:	e8 5b c8 01 00       	call   c0027533 <__adddf3>
c000acd8:	83 c4 10             	add    esp,0x10
c000acdb:	89 04 24             	mov    DWORD PTR [esp],eax
c000acde:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ace2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ace6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acf2:	e8 b9 ce 01 00       	call   c0027bb0 <__muldf3>
c000acf7:	5b                   	pop    ebx
c000acf8:	5e                   	pop    esi
c000acf9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acfd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad01:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad09:	e8 75 d7 01 00       	call   c0028483 <__truncdfsf2>
c000ad0e:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000ad15:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ad18:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ad1e:	5b                   	pop    ebx
c000ad1f:	5e                   	pop    esi
c000ad20:	5f                   	pop    edi
c000ad21:	5d                   	pop    ebp
c000ad22:	c3                   	ret    

c000ad23 <sinc_reset>:
c000ad23:	56                   	push   esi
c000ad24:	53                   	push   ebx
c000ad25:	51                   	push   ecx
c000ad26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad2a:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ad2d:	85 db                	test   ebx,ebx
c000ad2f:	74 59                	je     c000ad8a <sinc_reset+0x67>
c000ad31:	31 d2                	xor    edx,edx
c000ad33:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad3a:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad3d:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad40:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad47:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad4e:	31 c0                	xor    eax,eax
c000ad50:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad56:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad59:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad5c:	52                   	push   edx
c000ad5d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad60:	c1 e0 02             	shl    eax,0x2
c000ad63:	50                   	push   eax
c000ad64:	6a 00                	push   0x0
c000ad66:	56                   	push   esi
c000ad67:	e8 0c 5a ff ff       	call   c0000778 <memset>
c000ad6c:	83 c4 0c             	add    esp,0xc
c000ad6f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad72:	c1 e0 02             	shl    eax,0x2
c000ad75:	50                   	push   eax
c000ad76:	68 aa 00 00 00       	push   0xaa
c000ad7b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad7e:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad81:	50                   	push   eax
c000ad82:	e8 f1 59 ff ff       	call   c0000778 <memset>
c000ad87:	83 c4 10             	add    esp,0x10
c000ad8a:	58                   	pop    eax
c000ad8b:	5b                   	pop    ebx
c000ad8c:	5e                   	pop    esi
c000ad8d:	c3                   	ret    

c000ad8e <calc_output_multi>:
c000ad8e:	55                   	push   ebp
c000ad8f:	57                   	push   edi
c000ad90:	56                   	push   esi
c000ad91:	89 c6                	mov    esi,eax
c000ad93:	53                   	push   ebx
c000ad94:	83 ec 4c             	sub    esp,0x4c
c000ad97:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad9b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad9f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ada3:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ada7:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000adab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000adaf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000adb3:	8d 46 44             	lea    eax,[esi+0x44]
c000adb6:	89 04 24             	mov    DWORD PTR [esp],eax
c000adb9:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000adbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000adc3:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000adc6:	e8 0f eb ff ff       	call   c00098da <int_to_fp>
c000adcb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000adce:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000add2:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000add6:	99                   	cdq    
c000add7:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000addb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000addf:	0f af d0             	imul   edx,eax
c000ade2:	0f af c3             	imul   eax,ebx
c000ade5:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ade9:	29 c1                	sub    ecx,eax
c000adeb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adef:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adf3:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adfa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adfe:	57                   	push   edi
c000adff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae03:	6a 00                	push   0x0
c000ae05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae09:	e8 6a 59 ff ff       	call   c0000778 <memset>
c000ae0e:	83 c4 10             	add    esp,0x10
c000ae11:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae15:	89 df                	mov    edi,ebx
c000ae17:	e8 cc ea ff ff       	call   c00098e8 <fp_to_double>
c000ae1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae24:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae28:	e8 b1 ea ff ff       	call   c00098de <fp_to_int>
c000ae2d:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ae30:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ae33:	51                   	push   ecx
c000ae34:	51                   	push   ecx
c000ae35:	55                   	push   ebp
c000ae36:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae3a:	e8 89 c0 01 00       	call   c0026ec8 <__subsf3>
c000ae3f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae42:	e8 60 d7 01 00       	call   c00285a7 <__extendsfdf2>
c000ae47:	83 c4 10             	add    esp,0x10
c000ae4a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae4e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae56:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae5a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae5e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae62:	e8 49 cd 01 00       	call   c0027bb0 <__muldf3>
c000ae67:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae6e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae72:	e8 30 d7 01 00       	call   c00285a7 <__extendsfdf2>
c000ae77:	83 c4 10             	add    esp,0x10
c000ae7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae82:	52                   	push   edx
c000ae83:	50                   	push   eax
c000ae84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae8c:	e8 a2 c6 01 00       	call   c0027533 <__adddf3>
c000ae91:	83 c4 10             	add    esp,0x10
c000ae94:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae98:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae9c:	89 f8                	mov    eax,edi
c000ae9e:	b9 08 00 00 00       	mov    ecx,0x8
c000aea3:	99                   	cdq    
c000aea4:	f7 f9                	idiv   ecx
c000aea6:	4a                   	dec    edx
c000aea7:	83 fa 06             	cmp    edx,0x6
c000aeaa:	77 07                	ja     c000aeb3 <calc_output_multi+0x125>
c000aeac:	ff 24 95 c4 9d 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd623c]
c000aeb3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aeb6:	4f                   	dec    edi
c000aeb7:	83 ec 0c             	sub    esp,0xc
c000aeba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aebd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aec1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aec8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aecc:	e8 d6 d6 01 00       	call   c00285a7 <__extendsfdf2>
c000aed1:	83 c4 10             	add    esp,0x10
c000aed4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aed8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aedc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aee8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeec:	e8 bf cc 01 00       	call   c0027bb0 <__muldf3>
c000aef1:	83 c4 10             	add    esp,0x10
c000aef4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aef8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aefc:	52                   	push   edx
c000aefd:	50                   	push   eax
c000aefe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af01:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af04:	e8 2a c6 01 00       	call   c0027533 <__adddf3>
c000af09:	83 c4 10             	add    esp,0x10
c000af0c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af0f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af12:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af15:	4f                   	dec    edi
c000af16:	83 ec 0c             	sub    esp,0xc
c000af19:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af20:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af27:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af2b:	e8 77 d6 01 00       	call   c00285a7 <__extendsfdf2>
c000af30:	83 c4 10             	add    esp,0x10
c000af33:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af37:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af43:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af47:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af4b:	e8 60 cc 01 00       	call   c0027bb0 <__muldf3>
c000af50:	83 c4 10             	add    esp,0x10
c000af53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af57:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af5b:	52                   	push   edx
c000af5c:	50                   	push   eax
c000af5d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af60:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af63:	e8 cb c5 01 00       	call   c0027533 <__adddf3>
c000af68:	83 c4 10             	add    esp,0x10
c000af6b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af6e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af71:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af74:	4f                   	dec    edi
c000af75:	83 ec 0c             	sub    esp,0xc
c000af78:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af7f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af86:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af8a:	e8 18 d6 01 00       	call   c00285a7 <__extendsfdf2>
c000af8f:	83 c4 10             	add    esp,0x10
c000af92:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af96:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afa2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afa6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afaa:	e8 01 cc 01 00       	call   c0027bb0 <__muldf3>
c000afaf:	83 c4 10             	add    esp,0x10
c000afb2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afb6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afba:	52                   	push   edx
c000afbb:	50                   	push   eax
c000afbc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afbf:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afc2:	e8 6c c5 01 00       	call   c0027533 <__adddf3>
c000afc7:	83 c4 10             	add    esp,0x10
c000afca:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000afcd:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000afd0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000afd3:	4f                   	dec    edi
c000afd4:	83 ec 0c             	sub    esp,0xc
c000afd7:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afde:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afe5:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afe9:	e8 b9 d5 01 00       	call   c00285a7 <__extendsfdf2>
c000afee:	83 c4 10             	add    esp,0x10
c000aff1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aff5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aff9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000affd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b001:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b005:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b009:	e8 a2 cb 01 00       	call   c0027bb0 <__muldf3>
c000b00e:	83 c4 10             	add    esp,0x10
c000b011:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b015:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b019:	52                   	push   edx
c000b01a:	50                   	push   eax
c000b01b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b01e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b021:	e8 0d c5 01 00       	call   c0027533 <__adddf3>
c000b026:	83 c4 10             	add    esp,0x10
c000b029:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b02c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b02f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b032:	4f                   	dec    edi
c000b033:	83 ec 0c             	sub    esp,0xc
c000b036:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b039:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b03d:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b044:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b048:	e8 5a d5 01 00       	call   c00285a7 <__extendsfdf2>
c000b04d:	83 c4 10             	add    esp,0x10
c000b050:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b054:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b058:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b060:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b064:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b068:	e8 43 cb 01 00       	call   c0027bb0 <__muldf3>
c000b06d:	83 c4 10             	add    esp,0x10
c000b070:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b074:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b078:	52                   	push   edx
c000b079:	50                   	push   eax
c000b07a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b07d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b080:	e8 ae c4 01 00       	call   c0027533 <__adddf3>
c000b085:	83 c4 10             	add    esp,0x10
c000b088:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b08b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b08e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b091:	4f                   	dec    edi
c000b092:	83 ec 0c             	sub    esp,0xc
c000b095:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b098:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b09c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0a3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0a7:	e8 fb d4 01 00       	call   c00285a7 <__extendsfdf2>
c000b0ac:	83 c4 10             	add    esp,0x10
c000b0af:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0b3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c7:	e8 e4 ca 01 00       	call   c0027bb0 <__muldf3>
c000b0cc:	83 c4 10             	add    esp,0x10
c000b0cf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0d7:	52                   	push   edx
c000b0d8:	50                   	push   eax
c000b0d9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0dc:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0df:	e8 4f c4 01 00       	call   c0027533 <__adddf3>
c000b0e4:	83 c4 10             	add    esp,0x10
c000b0e7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0ea:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0ed:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0f0:	4f                   	dec    edi
c000b0f1:	83 ec 0c             	sub    esp,0xc
c000b0f4:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0fb:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b102:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b106:	e8 9c d4 01 00       	call   c00285a7 <__extendsfdf2>
c000b10b:	83 c4 10             	add    esp,0x10
c000b10e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b112:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b116:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b122:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b126:	e8 85 ca 01 00       	call   c0027bb0 <__muldf3>
c000b12b:	83 c4 10             	add    esp,0x10
c000b12e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b132:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b136:	52                   	push   edx
c000b137:	50                   	push   eax
c000b138:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b13b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b13e:	e8 f0 c3 01 00       	call   c0027533 <__adddf3>
c000b143:	83 c4 10             	add    esp,0x10
c000b146:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b149:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b14c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b14f:	4f                   	dec    edi
c000b150:	83 ec 0c             	sub    esp,0xc
c000b153:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b156:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b15a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b161:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b165:	e8 3d d4 01 00       	call   c00285a7 <__extendsfdf2>
c000b16a:	83 c4 10             	add    esp,0x10
c000b16d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b171:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b175:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b179:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b17d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b181:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b185:	e8 26 ca 01 00       	call   c0027bb0 <__muldf3>
c000b18a:	83 c4 10             	add    esp,0x10
c000b18d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b191:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b195:	52                   	push   edx
c000b196:	50                   	push   eax
c000b197:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b19a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b19d:	e8 91 c3 01 00       	call   c0027533 <__adddf3>
c000b1a2:	83 c4 10             	add    esp,0x10
c000b1a5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1a8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1ab:	85 ff                	test   edi,edi
c000b1ad:	0f 8f e9 fc ff ff    	jg     c000ae9c <calc_output_multi+0x10e>
c000b1b3:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b1b7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b1bb:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b1bf:	0f 89 4c fc ff ff    	jns    c000ae11 <calc_output_multi+0x83>
c000b1c5:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b1c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b1cd:	29 c8                	sub    eax,ecx
c000b1cf:	99                   	cdq    
c000b1d0:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b1d4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b1d8:	0f af d0             	imul   edx,eax
c000b1db:	40                   	inc    eax
c000b1dc:	01 d1                	add    ecx,edx
c000b1de:	0f af c3             	imul   eax,ebx
c000b1e1:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1e5:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1ec:	55                   	push   ebp
c000b1ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1f1:	6a 00                	push   0x0
c000b1f3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1f7:	e8 7c 55 ff ff       	call   c0000778 <memset>
c000b1fc:	83 c4 10             	add    esp,0x10
c000b1ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b203:	e8 e0 e6 ff ff       	call   c00098e8 <fp_to_double>
c000b208:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b20c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b210:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b214:	e8 c5 e6 ff ff       	call   c00098de <fp_to_int>
c000b219:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b21c:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b21f:	57                   	push   edi
c000b220:	57                   	push   edi
c000b221:	89 df                	mov    edi,ebx
c000b223:	55                   	push   ebp
c000b224:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b228:	e8 9b bc 01 00       	call   c0026ec8 <__subsf3>
c000b22d:	89 04 24             	mov    DWORD PTR [esp],eax
c000b230:	e8 72 d3 01 00       	call   c00285a7 <__extendsfdf2>
c000b235:	83 c4 10             	add    esp,0x10
c000b238:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b23c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b240:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b244:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b248:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b24c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b250:	e8 5b c9 01 00       	call   c0027bb0 <__muldf3>
c000b255:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b258:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b25c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b260:	e8 42 d3 01 00       	call   c00285a7 <__extendsfdf2>
c000b265:	83 c4 10             	add    esp,0x10
c000b268:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b26c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b270:	52                   	push   edx
c000b271:	50                   	push   eax
c000b272:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b276:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b27a:	e8 b4 c2 01 00       	call   c0027533 <__adddf3>
c000b27f:	83 c4 10             	add    esp,0x10
c000b282:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b286:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b28a:	89 f8                	mov    eax,edi
c000b28c:	b9 08 00 00 00       	mov    ecx,0x8
c000b291:	99                   	cdq    
c000b292:	f7 f9                	idiv   ecx
c000b294:	4a                   	dec    edx
c000b295:	83 fa 06             	cmp    edx,0x6
c000b298:	77 07                	ja     c000b2a1 <calc_output_multi+0x513>
c000b29a:	ff 24 95 e0 9d 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6220]
c000b2a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2a5:	4f                   	dec    edi
c000b2a6:	83 ec 0c             	sub    esp,0xc
c000b2a9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2b0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2b7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2bb:	e8 e7 d2 01 00       	call   c00285a7 <__extendsfdf2>
c000b2c0:	83 c4 10             	add    esp,0x10
c000b2c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2d7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2db:	e8 d0 c8 01 00       	call   c0027bb0 <__muldf3>
c000b2e0:	83 c4 10             	add    esp,0x10
c000b2e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2eb:	52                   	push   edx
c000b2ec:	50                   	push   eax
c000b2ed:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2f0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2f3:	e8 3b c2 01 00       	call   c0027533 <__adddf3>
c000b2f8:	83 c4 10             	add    esp,0x10
c000b2fb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2fe:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b301:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b305:	4f                   	dec    edi
c000b306:	83 ec 0c             	sub    esp,0xc
c000b309:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b30c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b310:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b317:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b31b:	e8 87 d2 01 00       	call   c00285a7 <__extendsfdf2>
c000b320:	83 c4 10             	add    esp,0x10
c000b323:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b327:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b32b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b32f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b333:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b337:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b33b:	e8 70 c8 01 00       	call   c0027bb0 <__muldf3>
c000b340:	83 c4 10             	add    esp,0x10
c000b343:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b347:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b34b:	52                   	push   edx
c000b34c:	50                   	push   eax
c000b34d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b350:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b353:	e8 db c1 01 00       	call   c0027533 <__adddf3>
c000b358:	83 c4 10             	add    esp,0x10
c000b35b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b35e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b361:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b365:	4f                   	dec    edi
c000b366:	83 ec 0c             	sub    esp,0xc
c000b369:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b36c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b370:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b377:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b37b:	e8 27 d2 01 00       	call   c00285a7 <__extendsfdf2>
c000b380:	83 c4 10             	add    esp,0x10
c000b383:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b387:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b38b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b38f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b393:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b397:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b39b:	e8 10 c8 01 00       	call   c0027bb0 <__muldf3>
c000b3a0:	83 c4 10             	add    esp,0x10
c000b3a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3ab:	52                   	push   edx
c000b3ac:	50                   	push   eax
c000b3ad:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3b0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3b3:	e8 7b c1 01 00       	call   c0027533 <__adddf3>
c000b3b8:	83 c4 10             	add    esp,0x10
c000b3bb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3be:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3c5:	4f                   	dec    edi
c000b3c6:	83 ec 0c             	sub    esp,0xc
c000b3c9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3d0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3d7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3db:	e8 c7 d1 01 00       	call   c00285a7 <__extendsfdf2>
c000b3e0:	83 c4 10             	add    esp,0x10
c000b3e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3fb:	e8 b0 c7 01 00       	call   c0027bb0 <__muldf3>
c000b400:	83 c4 10             	add    esp,0x10
c000b403:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b407:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b40b:	52                   	push   edx
c000b40c:	50                   	push   eax
c000b40d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b410:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b413:	e8 1b c1 01 00       	call   c0027533 <__adddf3>
c000b418:	83 c4 10             	add    esp,0x10
c000b41b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b41e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b421:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b425:	4f                   	dec    edi
c000b426:	83 ec 0c             	sub    esp,0xc
c000b429:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b42c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b430:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b437:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b43b:	e8 67 d1 01 00       	call   c00285a7 <__extendsfdf2>
c000b440:	83 c4 10             	add    esp,0x10
c000b443:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b447:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b44b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b44f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b453:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b457:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b45b:	e8 50 c7 01 00       	call   c0027bb0 <__muldf3>
c000b460:	83 c4 10             	add    esp,0x10
c000b463:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b467:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b46b:	52                   	push   edx
c000b46c:	50                   	push   eax
c000b46d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b470:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b473:	e8 bb c0 01 00       	call   c0027533 <__adddf3>
c000b478:	83 c4 10             	add    esp,0x10
c000b47b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b47e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b481:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b485:	4f                   	dec    edi
c000b486:	83 ec 0c             	sub    esp,0xc
c000b489:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b48c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b490:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b497:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b49b:	e8 07 d1 01 00       	call   c00285a7 <__extendsfdf2>
c000b4a0:	83 c4 10             	add    esp,0x10
c000b4a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4bb:	e8 f0 c6 01 00       	call   c0027bb0 <__muldf3>
c000b4c0:	83 c4 10             	add    esp,0x10
c000b4c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4cb:	52                   	push   edx
c000b4cc:	50                   	push   eax
c000b4cd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4d0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4d3:	e8 5b c0 01 00       	call   c0027533 <__adddf3>
c000b4d8:	83 c4 10             	add    esp,0x10
c000b4db:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4de:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4e5:	4f                   	dec    edi
c000b4e6:	83 ec 0c             	sub    esp,0xc
c000b4e9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4f0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4f7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4fb:	e8 a7 d0 01 00       	call   c00285a7 <__extendsfdf2>
c000b500:	83 c4 10             	add    esp,0x10
c000b503:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b507:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b50b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b50f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b513:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b517:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b51b:	e8 90 c6 01 00       	call   c0027bb0 <__muldf3>
c000b520:	83 c4 10             	add    esp,0x10
c000b523:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b527:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b52b:	52                   	push   edx
c000b52c:	50                   	push   eax
c000b52d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b530:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b533:	e8 fb bf 01 00       	call   c0027533 <__adddf3>
c000b538:	83 c4 10             	add    esp,0x10
c000b53b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b53e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b541:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b545:	4f                   	dec    edi
c000b546:	83 ec 0c             	sub    esp,0xc
c000b549:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b54c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b550:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b557:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b55b:	e8 47 d0 01 00       	call   c00285a7 <__extendsfdf2>
c000b560:	83 c4 10             	add    esp,0x10
c000b563:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b567:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b56b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b56f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b573:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b577:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b57b:	e8 30 c6 01 00       	call   c0027bb0 <__muldf3>
c000b580:	83 c4 10             	add    esp,0x10
c000b583:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b587:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b58b:	52                   	push   edx
c000b58c:	50                   	push   eax
c000b58d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b590:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b593:	e8 9b bf 01 00       	call   c0027533 <__adddf3>
c000b598:	83 c4 10             	add    esp,0x10
c000b59b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b59e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b5a1:	85 ff                	test   edi,edi
c000b5a3:	0f 8f e1 fc ff ff    	jg     c000b28a <calc_output_multi+0x4fc>
c000b5a9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b5ad:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b5b1:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b5b5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b5ba:	0f 8f 3f fc ff ff    	jg     c000b1ff <calc_output_multi+0x471>
c000b5c0:	be 08 00 00 00       	mov    esi,0x8
c000b5c5:	89 d8                	mov    eax,ebx
c000b5c7:	99                   	cdq    
c000b5c8:	f7 fe                	idiv   esi
c000b5ca:	4a                   	dec    edx
c000b5cb:	83 fa 06             	cmp    edx,0x6
c000b5ce:	77 07                	ja     c000b5d7 <calc_output_multi+0x849>
c000b5d0:	ff 24 95 fc 9d 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6204]
c000b5d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5db:	4b                   	dec    ebx
c000b5dc:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5e0:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5e7:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5eb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5ee:	e8 40 bf 01 00       	call   c0027533 <__adddf3>
c000b5f3:	83 c4 10             	add    esp,0x10
c000b5f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b602:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b606:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60e:	e8 9d c5 01 00       	call   c0027bb0 <__muldf3>
c000b613:	5d                   	pop    ebp
c000b614:	59                   	pop    ecx
c000b615:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b619:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b61d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b625:	e8 59 ce 01 00       	call   c0028483 <__truncdfsf2>
c000b62a:	83 c4 10             	add    esp,0x10
c000b62d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b631:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b634:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b638:	4b                   	dec    ebx
c000b639:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b63d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b640:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b644:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b648:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b64b:	e8 e3 be 01 00       	call   c0027533 <__adddf3>
c000b650:	83 c4 10             	add    esp,0x10
c000b653:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b657:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b65f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b663:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b667:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b66b:	e8 40 c5 01 00       	call   c0027bb0 <__muldf3>
c000b670:	59                   	pop    ecx
c000b671:	5f                   	pop    edi
c000b672:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b676:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b67a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b67e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b682:	e8 fc cd 01 00       	call   c0028483 <__truncdfsf2>
c000b687:	83 c4 10             	add    esp,0x10
c000b68a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b68e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b691:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b695:	4b                   	dec    ebx
c000b696:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b69a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b69d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6a1:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6a5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6a8:	e8 86 be 01 00       	call   c0027533 <__adddf3>
c000b6ad:	83 c4 10             	add    esp,0x10
c000b6b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c8:	e8 e3 c4 01 00       	call   c0027bb0 <__muldf3>
c000b6cd:	5f                   	pop    edi
c000b6ce:	5d                   	pop    ebp
c000b6cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6df:	e8 9f cd 01 00       	call   c0028483 <__truncdfsf2>
c000b6e4:	83 c4 10             	add    esp,0x10
c000b6e7:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6eb:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6f2:	4b                   	dec    ebx
c000b6f3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6f7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6fe:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b702:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b705:	e8 29 be 01 00       	call   c0027533 <__adddf3>
c000b70a:	83 c4 10             	add    esp,0x10
c000b70d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b711:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b715:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b719:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b71d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b721:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b725:	e8 86 c4 01 00       	call   c0027bb0 <__muldf3>
c000b72a:	5d                   	pop    ebp
c000b72b:	59                   	pop    ecx
c000b72c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b730:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b734:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b738:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b73c:	e8 42 cd 01 00       	call   c0028483 <__truncdfsf2>
c000b741:	83 c4 10             	add    esp,0x10
c000b744:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b748:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b74b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b74f:	4b                   	dec    ebx
c000b750:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b754:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b757:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b75b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b75f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b762:	e8 cc bd 01 00       	call   c0027533 <__adddf3>
c000b767:	83 c4 10             	add    esp,0x10
c000b76a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b76e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b782:	e8 29 c4 01 00       	call   c0027bb0 <__muldf3>
c000b787:	59                   	pop    ecx
c000b788:	5f                   	pop    edi
c000b789:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b78d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b791:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b799:	e8 e5 cc 01 00       	call   c0028483 <__truncdfsf2>
c000b79e:	83 c4 10             	add    esp,0x10
c000b7a1:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7a5:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7ac:	4b                   	dec    ebx
c000b7ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7b8:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7bc:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7bf:	e8 6f bd 01 00       	call   c0027533 <__adddf3>
c000b7c4:	83 c4 10             	add    esp,0x10
c000b7c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7df:	e8 cc c3 01 00       	call   c0027bb0 <__muldf3>
c000b7e4:	5f                   	pop    edi
c000b7e5:	5d                   	pop    ebp
c000b7e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7ea:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f6:	e8 88 cc 01 00       	call   c0028483 <__truncdfsf2>
c000b7fb:	83 c4 10             	add    esp,0x10
c000b7fe:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b802:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b805:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b809:	4b                   	dec    ebx
c000b80a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b80e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b811:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b815:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b819:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b81c:	e8 12 bd 01 00       	call   c0027533 <__adddf3>
c000b821:	83 c4 10             	add    esp,0x10
c000b824:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b828:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b82c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b830:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b834:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b838:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b83c:	e8 6f c3 01 00       	call   c0027bb0 <__muldf3>
c000b841:	5d                   	pop    ebp
c000b842:	59                   	pop    ecx
c000b843:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b847:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b84b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b84f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b853:	e8 2b cc 01 00       	call   c0028483 <__truncdfsf2>
c000b858:	83 c4 10             	add    esp,0x10
c000b85b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b85f:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b862:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b866:	4b                   	dec    ebx
c000b867:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b86b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b86e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b872:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b876:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b879:	e8 b5 bc 01 00       	call   c0027533 <__adddf3>
c000b87e:	83 c4 10             	add    esp,0x10
c000b881:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b885:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b889:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b88d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b891:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b895:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b899:	e8 12 c3 01 00       	call   c0027bb0 <__muldf3>
c000b89e:	59                   	pop    ecx
c000b89f:	5f                   	pop    edi
c000b8a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8a4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b8a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8b0:	e8 ce cb 01 00       	call   c0028483 <__truncdfsf2>
c000b8b5:	83 c4 10             	add    esp,0x10
c000b8b8:	85 db                	test   ebx,ebx
c000b8ba:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b8be:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b8c1:	0f 8f fe fc ff ff    	jg     c000b5c5 <calc_output_multi+0x837>
c000b8c7:	83 c4 4c             	add    esp,0x4c
c000b8ca:	5b                   	pop    ebx
c000b8cb:	5e                   	pop    esi
c000b8cc:	5f                   	pop    edi
c000b8cd:	5d                   	pop    ebp
c000b8ce:	c3                   	ret    

c000b8cf <double_to_fp>:
c000b8cf:	83 ec 0c             	sub    esp,0xc
c000b8d2:	68 00 00 b0 40       	push   0x40b00000
c000b8d7:	6a 00                	push   0x0
c000b8d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8e1:	e8 ca c2 01 00       	call   c0027bb0 <__muldf3>
c000b8e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8ee:	83 c4 1c             	add    esp,0x1c
c000b8f1:	e9 3a cd 01 00       	jmp    c0028630 <lrint>

c000b8f6 <prepare_data>:
c000b8f6:	55                   	push   ebp
c000b8f7:	57                   	push   edi
c000b8f8:	56                   	push   esi
c000b8f9:	53                   	push   ebx
c000b8fa:	83 ec 1c             	sub    esp,0x1c
c000b8fd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b901:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b905:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b909:	0f 89 57 01 00 00    	jns    c000ba66 <prepare_data+0x170>
c000b90f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b912:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b915:	85 d2                	test   edx,edx
c000b917:	75 0d                	jne    c000b926 <prepare_data+0x30>
c000b919:	8d 14 36             	lea    edx,[esi+esi*1]
c000b91c:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b91f:	29 d0                	sub    eax,edx
c000b921:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b924:	eb 44                	jmp    c000b96a <prepare_data+0x74>
c000b926:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b929:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b92c:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b92f:	39 c1                	cmp    ecx,eax
c000b931:	7d 04                	jge    c000b937 <prepare_data+0x41>
c000b933:	29 d0                	sub    eax,edx
c000b935:	eb 2d                	jmp    c000b964 <prepare_data+0x6e>
c000b937:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b93d:	29 d7                	sub    edi,edx
c000b93f:	01 f7                	add    edi,esi
c000b941:	51                   	push   ecx
c000b942:	29 f2                	sub    edx,esi
c000b944:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b94b:	8d 14 90             	lea    edx,[eax+edx*4]
c000b94e:	51                   	push   ecx
c000b94f:	52                   	push   edx
c000b950:	50                   	push   eax
c000b951:	e8 26 4d ff ff       	call   c000067c <memmove>
c000b956:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b959:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b95c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b95f:	29 f0                	sub    eax,esi
c000b961:	83 c4 10             	add    esp,0x10
c000b964:	29 f0                	sub    eax,esi
c000b966:	79 02                	jns    c000b96a <prepare_data+0x74>
c000b968:	31 c0                	xor    eax,eax
c000b96a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b96d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b970:	29 ef                	sub    edi,ebp
c000b972:	39 c7                	cmp    edi,eax
c000b974:	7e 02                	jle    c000b978 <prepare_data+0x82>
c000b976:	89 c7                	mov    edi,eax
c000b978:	89 f8                	mov    eax,edi
c000b97a:	99                   	cdq    
c000b97b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b97e:	b8 15 00 00 00       	mov    eax,0x15
c000b983:	29 d7                	sub    edi,edx
c000b985:	0f 88 dd 00 00 00    	js     c000ba68 <prepare_data+0x172>
c000b98b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b98e:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b991:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b994:	0f 8f ce 00 00 00    	jg     c000ba68 <prepare_data+0x172>
c000b99a:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b9a0:	50                   	push   eax
c000b9a1:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9a8:	50                   	push   eax
c000b9a9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b9ad:	8b 00                	mov    eax,DWORD PTR [eax]
c000b9af:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b9b2:	50                   	push   eax
c000b9b3:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9b6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b9ba:	50                   	push   eax
c000b9bb:	e8 84 4d ff ff       	call   c0000744 <memcpy>
c000b9c0:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b9c3:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b9c6:	01 fd                	add    ebp,edi
c000b9c8:	01 f9                	add    ecx,edi
c000b9ca:	83 c4 10             	add    esp,0x10
c000b9cd:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b9d0:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b9d3:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b9d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9da:	0f 85 86 00 00 00    	jne    c000ba66 <prepare_data+0x170>
c000b9e0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9e3:	89 e8                	mov    eax,ebp
c000b9e5:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9e8:	29 c8                	sub    eax,ecx
c000b9ea:	39 f8                	cmp    eax,edi
c000b9ec:	7d 78                	jge    c000ba66 <prepare_data+0x170>
c000b9ee:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9f2:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9f6:	74 6e                	je     c000ba66 <prepare_data+0x170>
c000b9f8:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9fb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9ff:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000ba02:	29 ef                	sub    edi,ebp
c000ba04:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000ba08:	7c 29                	jl     c000ba33 <prepare_data+0x13d>
c000ba0a:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0d:	29 f1                	sub    ecx,esi
c000ba0f:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000ba16:	55                   	push   ebp
c000ba17:	50                   	push   eax
c000ba18:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000ba1b:	50                   	push   eax
c000ba1c:	52                   	push   edx
c000ba1d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba21:	e8 56 4c ff ff       	call   c000067c <memmove>
c000ba26:	83 c4 10             	add    esp,0x10
c000ba29:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000ba2c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000ba2f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba33:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ba36:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ba39:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba3c:	83 c6 05             	add    esi,0x5
c000ba3f:	78 07                	js     c000ba48 <prepare_data+0x152>
c000ba41:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba44:	39 cf                	cmp    edi,ecx
c000ba46:	7e 04                	jle    c000ba4c <prepare_data+0x156>
c000ba48:	89 ce                	mov    esi,ecx
c000ba4a:	29 c6                	sub    esi,eax
c000ba4c:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba4f:	51                   	push   ecx
c000ba50:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba57:	51                   	push   ecx
c000ba58:	6a 00                	push   0x0
c000ba5a:	50                   	push   eax
c000ba5b:	e8 18 4d ff ff       	call   c0000778 <memset>
c000ba60:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba63:	83 c4 10             	add    esp,0x10
c000ba66:	31 c0                	xor    eax,eax
c000ba68:	83 c4 1c             	add    esp,0x1c
c000ba6b:	5b                   	pop    ebx
c000ba6c:	5e                   	pop    esi
c000ba6d:	5f                   	pop    edi
c000ba6e:	5d                   	pop    ebp
c000ba6f:	c3                   	ret    

c000ba70 <sinc_multichan_vari_process>:
c000ba70:	55                   	push   ebp
c000ba71:	ba 05 00 00 00       	mov    edx,0x5
c000ba76:	57                   	push   edi
c000ba77:	56                   	push   esi
c000ba78:	53                   	push   ebx
c000ba79:	83 ec 4c             	sub    esp,0x4c
c000ba7c:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba80:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba84:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba87:	85 db                	test   ebx,ebx
c000ba89:	0f 84 9b 06 00 00    	je     c000c12a <sinc_multichan_vari_process+0x6ba>
c000ba8f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba92:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba95:	0f af c5             	imul   eax,ebp
c000ba98:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba9b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba9e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000baa5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000baac:	0f af c5             	imul   eax,ebp
c000baaf:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bab2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bab5:	8b 06                	mov    eax,DWORD PTR [esi]
c000bab7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000babb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000babf:	68 00 00 70 3f       	push   0x3f700000
c000bac4:	6a 00                	push   0x0
c000bac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bace:	e8 ac c9 01 00       	call   c002847f <__ltdf2>
c000bad3:	83 c4 10             	add    esp,0x10
c000bad6:	ba 16 00 00 00       	mov    edx,0x16
c000badb:	85 c0                	test   eax,eax
c000badd:	0f 88 47 06 00 00    	js     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bae3:	68 00 00 70 40       	push   0x40700000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baf2:	e8 6a c9 01 00       	call   c0028461 <__gtdf2>
c000baf7:	83 c4 10             	add    esp,0x10
c000bafa:	ba 16 00 00 00       	mov    edx,0x16
c000baff:	85 c0                	test   eax,eax
c000bb01:	0f 8f 23 06 00 00    	jg     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bb07:	83 ec 0c             	sub    esp,0xc
c000bb0a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bb0d:	e8 01 c7 01 00       	call   c0028213 <__floatsidf>
c000bb12:	83 c4 10             	add    esp,0x10
c000bb15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb1d:	68 00 00 00 40       	push   0x40000000
c000bb22:	6a 00                	push   0x0
c000bb24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb2c:	e8 02 ba 01 00       	call   c0027533 <__adddf3>
c000bb31:	59                   	pop    ecx
c000bb32:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb36:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb3a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb3d:	e8 d1 c6 01 00       	call   c0028213 <__floatsidf>
c000bb42:	83 c4 10             	add    esp,0x10
c000bb45:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb49:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb4d:	52                   	push   edx
c000bb4e:	50                   	push   eax
c000bb4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb57:	e8 38 c3 01 00       	call   c0027e94 <__divdf3>
c000bb5c:	83 c4 10             	add    esp,0x10
c000bb5f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb63:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb67:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb6a:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb6d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb71:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb85:	e8 d7 c8 01 00       	call   c0028461 <__gtdf2>
c000bb8a:	83 c4 10             	add    esp,0x10
c000bb8d:	85 c0                	test   eax,eax
c000bb8f:	7e 2d                	jle    c000bbbe <sinc_multichan_vari_process+0x14e>
c000bb91:	68 00 00 f0 3f       	push   0x3ff00000
c000bb96:	6a 00                	push   0x0
c000bb98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bba0:	e8 da c8 01 00       	call   c002847f <__ltdf2>
c000bba5:	83 c4 10             	add    esp,0x10
c000bba8:	85 c0                	test   eax,eax
c000bbaa:	79 4d                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbb0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bbb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bbb8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bbbc:	eb 1b                	jmp    c000bbd9 <sinc_multichan_vari_process+0x169>
c000bbbe:	68 00 00 f0 3f       	push   0x3ff00000
c000bbc3:	6a 00                	push   0x0
c000bbc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbcd:	e8 ad c8 01 00       	call   c002847f <__ltdf2>
c000bbd2:	83 c4 10             	add    esp,0x10
c000bbd5:	85 c0                	test   eax,eax
c000bbd7:	79 20                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbd9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbdd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbe1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe9:	e8 a6 c2 01 00       	call   c0027e94 <__divdf3>
c000bbee:	83 c4 10             	add    esp,0x10
c000bbf1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbf5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbf9:	50                   	push   eax
c000bbfa:	50                   	push   eax
c000bbfb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc03:	e8 28 ca 01 00       	call   c0028630 <lrint>
c000bc08:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bc0b:	40                   	inc    eax
c000bc0c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc10:	0f af c5             	imul   eax,ebp
c000bc13:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bc17:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bc1a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1e:	58                   	pop    eax
c000bc1f:	5a                   	pop    edx
c000bc20:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc24:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc28:	e8 03 ca 01 00       	call   c0028630 <lrint>
c000bc2d:	83 ec 0c             	sub    esp,0xc
c000bc30:	50                   	push   eax
c000bc31:	e8 dd c5 01 00       	call   c0028213 <__floatsidf>
c000bc36:	83 c4 10             	add    esp,0x10
c000bc39:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc3d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc41:	52                   	push   edx
c000bc42:	50                   	push   eax
c000bc43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc47:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc4b:	e8 34 bf 01 00       	call   c0027b84 <__subdf3>
c000bc50:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc54:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc58:	83 c4 20             	add    esp,0x20
c000bc5b:	6a 00                	push   0x0
c000bc5d:	6a 00                	push   0x0
c000bc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc67:	e8 13 c8 01 00       	call   c002847f <__ltdf2>
c000bc6c:	83 c4 10             	add    esp,0x10
c000bc6f:	85 c0                	test   eax,eax
c000bc71:	79 1f                	jns    c000bc92 <sinc_multichan_vari_process+0x222>
c000bc73:	68 00 00 f0 3f       	push   0x3ff00000
c000bc78:	6a 00                	push   0x0
c000bc7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc7e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc82:	e8 ac b8 01 00       	call   c0027533 <__adddf3>
c000bc87:	83 c4 10             	add    esp,0x10
c000bc8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc92:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc95:	83 ec 10             	sub    esp,0x10
c000bc98:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc9c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcaf:	e8 d0 be 01 00       	call   c0027b84 <__subdf3>
c000bcb4:	83 c4 18             	add    esp,0x18
c000bcb7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcbb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcbf:	52                   	push   edx
c000bcc0:	50                   	push   eax
c000bcc1:	e8 6a c9 01 00       	call   c0028630 <lrint>
c000bcc6:	0f af e8             	imul   ebp,eax
c000bcc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bccd:	01 e8                	add    eax,ebp
c000bccf:	99                   	cdq    
c000bcd0:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bcd3:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bcd6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcda:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcde:	68 00 00 f0 3f       	push   0x3ff00000
c000bce3:	6a 00                	push   0x0
c000bce5:	e8 aa c1 01 00       	call   c0027e94 <__divdf3>
c000bcea:	83 c4 10             	add    esp,0x10
c000bced:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcf1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcf5:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcfa:	68 23 42 92 0c       	push   0xc924223
c000bcff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd07:	e8 27 b8 01 00       	call   c0027533 <__adddf3>
c000bd0c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bd10:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bd14:	83 c4 20             	add    esp,0x20
c000bd17:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd1f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bd27:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bd2a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bd2d:	7d 50                	jge    c000bd7f <sinc_multichan_vari_process+0x30f>
c000bd2f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd32:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd35:	01 c8                	add    eax,ecx
c000bd37:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3a:	99                   	cdq    
c000bd3b:	f7 f9                	idiv   ecx
c000bd3d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd41:	7d 0c                	jge    c000bd4f <sinc_multichan_vari_process+0x2df>
c000bd43:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd46:	85 ed                	test   ebp,ebp
c000bd48:	79 6b                	jns    c000bdb5 <sinc_multichan_vari_process+0x345>
c000bd4a:	e9 e6 00 00 00       	jmp    c000be35 <sinc_multichan_vari_process+0x3c5>
c000bd4f:	50                   	push   eax
c000bd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd54:	57                   	push   edi
c000bd55:	53                   	push   ebx
c000bd56:	e8 9b fb ff ff       	call   c000b8f6 <prepare_data>
c000bd5b:	83 c4 10             	add    esp,0x10
c000bd5e:	89 c2                	mov    edx,eax
c000bd60:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd63:	85 c0                	test   eax,eax
c000bd65:	0f 85 bf 03 00 00    	jne    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bd6b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd6e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd71:	01 c8                	add    eax,ecx
c000bd73:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd76:	99                   	cdq    
c000bd77:	f7 f9                	idiv   ecx
c000bd79:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd7d:	7c c4                	jl     c000bd43 <sinc_multichan_vari_process+0x2d3>
c000bd7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd83:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd87:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd8a:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd91:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd95:	89 06                	mov    DWORD PTR [esi],eax
c000bd97:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd9a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd9d:	99                   	cdq    
c000bd9e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bda1:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bda4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bda7:	99                   	cdq    
c000bda8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bdab:	31 d2                	xor    edx,edx
c000bdad:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bdb0:	e9 75 03 00 00       	jmp    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bdb5:	83 ec 0c             	sub    esp,0xc
c000bdb8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bdbb:	e8 53 c4 01 00       	call   c0028213 <__floatsidf>
c000bdc0:	83 c4 10             	add    esp,0x10
c000bdc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdc7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdcf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bddb:	e8 53 b7 01 00       	call   c0027533 <__adddf3>
c000bde0:	83 c4 10             	add    esp,0x10
c000bde3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bde7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdeb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdf3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdf7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdfb:	e8 33 b7 01 00       	call   c0027533 <__adddf3>
c000be00:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000be03:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be07:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be0b:	e8 03 c4 01 00       	call   c0028213 <__floatsidf>
c000be10:	83 c4 10             	add    esp,0x10
c000be13:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be17:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be1b:	52                   	push   edx
c000be1c:	50                   	push   eax
c000be1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be25:	e8 53 c6 01 00       	call   c002847d <__gedf2>
c000be2a:	83 c4 10             	add    esp,0x10
c000be2d:	85 c0                	test   eax,eax
c000be2f:	0f 89 4a ff ff ff    	jns    c000bd7f <sinc_multichan_vari_process+0x30f>
c000be35:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000be39:	0f 8e ed 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be3f:	83 ec 10             	sub    esp,0x10
c000be42:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be45:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be48:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be4b:	ff 36                	push   DWORD PTR [esi]
c000be4d:	e8 32 bd 01 00       	call   c0027b84 <__subdf3>
c000be52:	83 c4 18             	add    esp,0x18
c000be55:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be59:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be5d:	52                   	push   edx
c000be5e:	50                   	push   eax
c000be5f:	e8 ac c7 01 00       	call   c0028610 <fabs>
c000be64:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be68:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be6c:	83 c4 10             	add    esp,0x10
c000be6f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be74:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be81:	e8 db c5 01 00       	call   c0028461 <__gtdf2>
c000be86:	83 c4 10             	add    esp,0x10
c000be89:	85 c0                	test   eax,eax
c000be8b:	0f 8e 9b 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be91:	8b 06                	mov    eax,DWORD PTR [esi]
c000be93:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be96:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be9a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be9e:	52                   	push   edx
c000be9f:	50                   	push   eax
c000bea0:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bea3:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bea6:	e8 d9 bc 01 00       	call   c0027b84 <__subdf3>
c000beab:	59                   	pop    ecx
c000beac:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000beb0:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000beb4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000beb7:	e8 57 c3 01 00       	call   c0028213 <__floatsidf>
c000bebc:	83 c4 10             	add    esp,0x10
c000bebf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bec3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bec7:	52                   	push   edx
c000bec8:	50                   	push   eax
c000bec9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000becd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bed1:	e8 da bc 01 00       	call   c0027bb0 <__muldf3>
c000bed6:	5d                   	pop    ebp
c000bed7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bedb:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bedf:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bee2:	e8 2c c3 01 00       	call   c0028213 <__floatsidf>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bef2:	52                   	push   edx
c000bef3:	50                   	push   eax
c000bef4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000befc:	e8 93 bf 01 00       	call   c0027e94 <__divdf3>
c000bf01:	83 c4 10             	add    esp,0x10
c000bf04:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf08:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf14:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf1c:	e8 12 b6 01 00       	call   c0027533 <__adddf3>
c000bf21:	83 c4 10             	add    esp,0x10
c000bf24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf28:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf2c:	83 ec 0c             	sub    esp,0xc
c000bf2f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bf32:	e8 dc c2 01 00       	call   c0028213 <__floatsidf>
c000bf37:	83 c4 10             	add    esp,0x10
c000bf3a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf3e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf52:	e8 28 c5 01 00       	call   c002847f <__ltdf2>
c000bf57:	83 c4 10             	add    esp,0x10
c000bf5a:	85 c0                	test   eax,eax
c000bf5c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf60:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf64:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf68:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf6c:	78 10                	js     c000bf7e <sinc_multichan_vari_process+0x50e>
c000bf6e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf72:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf76:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf7a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf86:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8e:	e8 1d bc 01 00       	call   c0027bb0 <__muldf3>
c000bf93:	59                   	pop    ecx
c000bf94:	5d                   	pop    ebp
c000bf95:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf99:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa5:	e8 25 f9 ff ff       	call   c000b8cf <double_to_fp>
c000bfaa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfae:	89 c5                	mov    ebp,eax
c000bfb0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfb4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfb8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfbc:	e8 ef bb 01 00       	call   c0027bb0 <__muldf3>
c000bfc1:	83 c4 18             	add    esp,0x18
c000bfc4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bfc8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bfcc:	52                   	push   edx
c000bfcd:	50                   	push   eax
c000bfce:	e8 fc f8 ff ff       	call   c000b8cf <double_to_fp>
c000bfd3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bfd6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfda:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfdd:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfe0:	50                   	push   eax
c000bfe1:	50                   	push   eax
c000bfe2:	50                   	push   eax
c000bfe3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfe6:	e8 28 c2 01 00       	call   c0028213 <__floatsidf>
c000bfeb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfef:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bff3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bff7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bffb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c003:	e8 8c be 01 00       	call   c0027e94 <__divdf3>
c000c008:	83 c4 1c             	add    esp,0x1c
c000c00b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c00f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000c013:	52                   	push   edx
c000c014:	89 ea                	mov    edx,ebp
c000c016:	50                   	push   eax
c000c017:	89 d8                	mov    eax,ebx
c000c019:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c01c:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c020:	e8 69 ed ff ff       	call   c000ad8e <calc_output_multi>
c000c025:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c028:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c02b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c02f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c033:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c037:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c03b:	e8 54 be 01 00       	call   c0027e94 <__divdf3>
c000c040:	83 c4 10             	add    esp,0x10
c000c043:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c047:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c04b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c04f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c053:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c057:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c05b:	e8 d3 b4 01 00       	call   c0027533 <__adddf3>
c000c060:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c064:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c068:	83 c4 28             	add    esp,0x28
c000c06b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c06f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c073:	e8 b8 c5 01 00       	call   c0028630 <lrint>
c000c078:	83 ec 0c             	sub    esp,0xc
c000c07b:	50                   	push   eax
c000c07c:	e8 92 c1 01 00       	call   c0028213 <__floatsidf>
c000c081:	83 c4 10             	add    esp,0x10
c000c084:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c088:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c08c:	52                   	push   edx
c000c08d:	50                   	push   eax
c000c08e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c092:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c096:	e8 e9 ba 01 00       	call   c0027b84 <__subdf3>
c000c09b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c09f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0a3:	83 c4 20             	add    esp,0x20
c000c0a6:	6a 00                	push   0x0
c000c0a8:	6a 00                	push   0x0
c000c0aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0b2:	e8 c8 c3 01 00       	call   c002847f <__ltdf2>
c000c0b7:	83 c4 10             	add    esp,0x10
c000c0ba:	85 c0                	test   eax,eax
c000c0bc:	79 20                	jns    c000c0de <sinc_multichan_vari_process+0x66e>
c000c0be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ce:	e8 60 b4 01 00       	call   c0027533 <__adddf3>
c000c0d3:	83 c4 10             	add    esp,0x10
c000c0d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0de:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0e1:	83 ec 10             	sub    esp,0x10
c000c0e4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0e8:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0fb:	e8 84 ba 01 00       	call   c0027b84 <__subdf3>
c000c100:	83 c4 18             	add    esp,0x18
c000c103:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c107:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c10b:	52                   	push   edx
c000c10c:	50                   	push   eax
c000c10d:	e8 1e c5 01 00       	call   c0028630 <lrint>
c000c112:	0f af e8             	imul   ebp,eax
c000c115:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c119:	83 c4 10             	add    esp,0x10
c000c11c:	01 e8                	add    eax,ebp
c000c11e:	99                   	cdq    
c000c11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c125:	e9 fd fb ff ff       	jmp    c000bd27 <sinc_multichan_vari_process+0x2b7>
c000c12a:	83 c4 4c             	add    esp,0x4c
c000c12d:	89 d0                	mov    eax,edx
c000c12f:	5b                   	pop    ebx
c000c130:	5e                   	pop    esi
c000c131:	5f                   	pop    edi
c000c132:	5d                   	pop    ebp
c000c133:	c3                   	ret    

c000c134 <sinc_hex_vari_process>:
c000c134:	55                   	push   ebp
c000c135:	ba 05 00 00 00       	mov    edx,0x5
c000c13a:	57                   	push   edi
c000c13b:	56                   	push   esi
c000c13c:	53                   	push   ebx
c000c13d:	83 ec 4c             	sub    esp,0x4c
c000c140:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c144:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c148:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c14b:	85 db                	test   ebx,ebx
c000c14d:	0f 84 9c 06 00 00    	je     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c153:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c156:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c159:	0f af c7             	imul   eax,edi
c000c15c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c15f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c162:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c169:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c170:	0f af c7             	imul   eax,edi
c000c173:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c176:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c179:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c17c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c180:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c184:	68 00 00 70 3f       	push   0x3f700000
c000c189:	6a 00                	push   0x0
c000c18b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c18f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c193:	e8 e7 c2 01 00       	call   c002847f <__ltdf2>
c000c198:	83 c4 10             	add    esp,0x10
c000c19b:	ba 16 00 00 00       	mov    edx,0x16
c000c1a0:	85 c0                	test   eax,eax
c000c1a2:	0f 88 47 06 00 00    	js     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1a8:	68 00 00 70 40       	push   0x40700000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b7:	e8 a5 c2 01 00       	call   c0028461 <__gtdf2>
c000c1bc:	83 c4 10             	add    esp,0x10
c000c1bf:	ba 16 00 00 00       	mov    edx,0x16
c000c1c4:	85 c0                	test   eax,eax
c000c1c6:	0f 8f 23 06 00 00    	jg     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1cc:	83 ec 0c             	sub    esp,0xc
c000c1cf:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c1d2:	e8 3c c0 01 00       	call   c0028213 <__floatsidf>
c000c1d7:	83 c4 10             	add    esp,0x10
c000c1da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1e2:	68 00 00 00 40       	push   0x40000000
c000c1e7:	6a 00                	push   0x0
c000c1e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1f1:	e8 3d b3 01 00       	call   c0027533 <__adddf3>
c000c1f6:	59                   	pop    ecx
c000c1f7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1fb:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1ff:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c202:	e8 0c c0 01 00       	call   c0028213 <__floatsidf>
c000c207:	83 c4 10             	add    esp,0x10
c000c20a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c20e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c212:	52                   	push   edx
c000c213:	50                   	push   eax
c000c214:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c218:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c21c:	e8 73 bc 01 00       	call   c0027e94 <__divdf3>
c000c221:	83 c4 10             	add    esp,0x10
c000c224:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c228:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c22c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c22f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c232:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c236:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c23a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c23e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c242:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c246:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c24a:	e8 12 c2 01 00       	call   c0028461 <__gtdf2>
c000c24f:	83 c4 10             	add    esp,0x10
c000c252:	85 c0                	test   eax,eax
c000c254:	7e 2d                	jle    c000c283 <sinc_hex_vari_process+0x14f>
c000c256:	68 00 00 f0 3f       	push   0x3ff00000
c000c25b:	6a 00                	push   0x0
c000c25d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c261:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c265:	e8 15 c2 01 00       	call   c002847f <__ltdf2>
c000c26a:	83 c4 10             	add    esp,0x10
c000c26d:	85 c0                	test   eax,eax
c000c26f:	79 4d                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c271:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c275:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c279:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c27d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c281:	eb 1b                	jmp    c000c29e <sinc_hex_vari_process+0x16a>
c000c283:	68 00 00 f0 3f       	push   0x3ff00000
c000c288:	6a 00                	push   0x0
c000c28a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c28e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c292:	e8 e8 c1 01 00       	call   c002847f <__ltdf2>
c000c297:	83 c4 10             	add    esp,0x10
c000c29a:	85 c0                	test   eax,eax
c000c29c:	79 20                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c29e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ae:	e8 e1 bb 01 00       	call   c0027e94 <__divdf3>
c000c2b3:	83 c4 10             	add    esp,0x10
c000c2b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2ba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2be:	50                   	push   eax
c000c2bf:	50                   	push   eax
c000c2c0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c8:	e8 63 c3 01 00       	call   c0028630 <lrint>
c000c2cd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c2d0:	40                   	inc    eax
c000c2d1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2d5:	0f af c7             	imul   eax,edi
c000c2d8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2df:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2e3:	58                   	pop    eax
c000c2e4:	5a                   	pop    edx
c000c2e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ed:	e8 3e c3 01 00       	call   c0028630 <lrint>
c000c2f2:	83 ec 0c             	sub    esp,0xc
c000c2f5:	50                   	push   eax
c000c2f6:	e8 18 bf 01 00       	call   c0028213 <__floatsidf>
c000c2fb:	83 c4 10             	add    esp,0x10
c000c2fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c302:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c306:	52                   	push   edx
c000c307:	50                   	push   eax
c000c308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c30c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c310:	e8 6f b8 01 00       	call   c0027b84 <__subdf3>
c000c315:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c319:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c31d:	83 c4 20             	add    esp,0x20
c000c320:	6a 00                	push   0x0
c000c322:	6a 00                	push   0x0
c000c324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c32c:	e8 4e c1 01 00       	call   c002847f <__ltdf2>
c000c331:	83 c4 10             	add    esp,0x10
c000c334:	85 c0                	test   eax,eax
c000c336:	79 1f                	jns    c000c357 <sinc_hex_vari_process+0x223>
c000c338:	68 00 00 f0 3f       	push   0x3ff00000
c000c33d:	6a 00                	push   0x0
c000c33f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c343:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c347:	e8 e7 b1 01 00       	call   c0027533 <__adddf3>
c000c34c:	83 c4 10             	add    esp,0x10
c000c34f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c353:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c357:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c35a:	83 ec 10             	sub    esp,0x10
c000c35d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c361:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c368:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c36c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c370:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c374:	e8 0b b8 01 00       	call   c0027b84 <__subdf3>
c000c379:	83 c4 18             	add    esp,0x18
c000c37c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c380:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c384:	52                   	push   edx
c000c385:	50                   	push   eax
c000c386:	e8 a5 c2 01 00       	call   c0028630 <lrint>
c000c38b:	0f af f8             	imul   edi,eax
c000c38e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c392:	01 f8                	add    eax,edi
c000c394:	99                   	cdq    
c000c395:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c398:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c39b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c39f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3a3:	68 00 00 f0 3f       	push   0x3ff00000
c000c3a8:	6a 00                	push   0x0
c000c3aa:	e8 e5 ba 01 00       	call   c0027e94 <__divdf3>
c000c3af:	83 c4 10             	add    esp,0x10
c000c3b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3ba:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c3bf:	68 23 42 92 0c       	push   0xc924223
c000c3c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3cc:	e8 62 b1 01 00       	call   c0027533 <__adddf3>
c000c3d1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c3d5:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c3d9:	83 c4 20             	add    esp,0x20
c000c3dc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3e4:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3ef:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3f2:	7d 50                	jge    c000c444 <sinc_hex_vari_process+0x310>
c000c3f4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fa:	01 c8                	add    eax,ecx
c000c3fc:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3ff:	99                   	cdq    
c000c400:	f7 f9                	idiv   ecx
c000c402:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c406:	7d 0c                	jge    c000c414 <sinc_hex_vari_process+0x2e0>
c000c408:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c40b:	85 ff                	test   edi,edi
c000c40d:	79 6c                	jns    c000c47b <sinc_hex_vari_process+0x347>
c000c40f:	e9 e7 00 00 00       	jmp    c000c4fb <sinc_hex_vari_process+0x3c7>
c000c414:	50                   	push   eax
c000c415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c419:	56                   	push   esi
c000c41a:	53                   	push   ebx
c000c41b:	e8 d6 f4 ff ff       	call   c000b8f6 <prepare_data>
c000c420:	83 c4 10             	add    esp,0x10
c000c423:	89 c2                	mov    edx,eax
c000c425:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c428:	85 c0                	test   eax,eax
c000c42a:	0f 85 bf 03 00 00    	jne    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c430:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c433:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c436:	01 c8                	add    eax,ecx
c000c438:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c43b:	99                   	cdq    
c000c43c:	f7 f9                	idiv   ecx
c000c43e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c442:	7c c4                	jl     c000c408 <sinc_hex_vari_process+0x2d4>
c000c444:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c448:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c44c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c44f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c456:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c45a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c45d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c460:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c463:	99                   	cdq    
c000c464:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c467:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c46a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c46d:	99                   	cdq    
c000c46e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c471:	31 d2                	xor    edx,edx
c000c473:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c476:	e9 74 03 00 00       	jmp    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c47b:	83 ec 0c             	sub    esp,0xc
c000c47e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c481:	e8 8d bd 01 00       	call   c0028213 <__floatsidf>
c000c486:	83 c4 10             	add    esp,0x10
c000c489:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c48d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c491:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c495:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c499:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c49d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4a1:	e8 8d b0 01 00       	call   c0027533 <__adddf3>
c000c4a6:	83 c4 10             	add    esp,0x10
c000c4a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c4ad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c4b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4c1:	e8 6d b0 01 00       	call   c0027533 <__adddf3>
c000c4c6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c4c9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4cd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4d1:	e8 3d bd 01 00       	call   c0028213 <__floatsidf>
c000c4d6:	83 c4 10             	add    esp,0x10
c000c4d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4e1:	52                   	push   edx
c000c4e2:	50                   	push   eax
c000c4e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4eb:	e8 8d bf 01 00       	call   c002847d <__gedf2>
c000c4f0:	83 c4 10             	add    esp,0x10
c000c4f3:	85 c0                	test   eax,eax
c000c4f5:	0f 89 49 ff ff ff    	jns    c000c444 <sinc_hex_vari_process+0x310>
c000c4fb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4ff:	0f 8e ef 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c505:	83 ec 10             	sub    esp,0x10
c000c508:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c50b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c50e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c511:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c514:	e8 6b b6 01 00       	call   c0027b84 <__subdf3>
c000c519:	83 c4 18             	add    esp,0x18
c000c51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c520:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c524:	52                   	push   edx
c000c525:	50                   	push   eax
c000c526:	e8 e5 c0 01 00       	call   c0028610 <fabs>
c000c52b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c52f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c533:	83 c4 10             	add    esp,0x10
c000c536:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c53b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c540:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c544:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c548:	e8 14 bf 01 00       	call   c0028461 <__gtdf2>
c000c54d:	83 c4 10             	add    esp,0x10
c000c550:	85 c0                	test   eax,eax
c000c552:	0f 8e 9c 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c558:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c55b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c55e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c562:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c566:	52                   	push   edx
c000c567:	50                   	push   eax
c000c568:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c56b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c56e:	e8 11 b6 01 00       	call   c0027b84 <__subdf3>
c000c573:	59                   	pop    ecx
c000c574:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c578:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c57c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c57f:	e8 8f bc 01 00       	call   c0028213 <__floatsidf>
c000c584:	83 c4 10             	add    esp,0x10
c000c587:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c58b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c58f:	52                   	push   edx
c000c590:	50                   	push   eax
c000c591:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c595:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c599:	e8 12 b6 01 00       	call   c0027bb0 <__muldf3>
c000c59e:	5f                   	pop    edi
c000c59f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c5a3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c5a7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c5aa:	e8 64 bc 01 00       	call   c0028213 <__floatsidf>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5ba:	52                   	push   edx
c000c5bb:	50                   	push   eax
c000c5bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c4:	e8 cb b8 01 00       	call   c0027e94 <__divdf3>
c000c5c9:	83 c4 10             	add    esp,0x10
c000c5cc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c5d0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c5d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e4:	e8 4a af 01 00       	call   c0027533 <__adddf3>
c000c5e9:	83 c4 10             	add    esp,0x10
c000c5ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5f0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5f4:	83 ec 0c             	sub    esp,0xc
c000c5f7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5fa:	e8 14 bc 01 00       	call   c0028213 <__floatsidf>
c000c5ff:	83 c4 10             	add    esp,0x10
c000c602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c60a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c60e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c61a:	e8 60 be 01 00       	call   c002847f <__ltdf2>
c000c61f:	83 c4 10             	add    esp,0x10
c000c622:	85 c0                	test   eax,eax
c000c624:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c628:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c62c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c630:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c634:	78 10                	js     c000c646 <sinc_hex_vari_process+0x512>
c000c636:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c63a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c63e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c642:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c652:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c656:	e8 55 b5 01 00       	call   c0027bb0 <__muldf3>
c000c65b:	59                   	pop    ecx
c000c65c:	5f                   	pop    edi
c000c65d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c661:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c665:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c669:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c66d:	e8 5d f2 ff ff       	call   c000b8cf <double_to_fp>
c000c672:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c676:	89 c7                	mov    edi,eax
c000c678:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c67c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c680:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c684:	e8 27 b5 01 00       	call   c0027bb0 <__muldf3>
c000c689:	83 c4 18             	add    esp,0x18
c000c68c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c690:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c694:	52                   	push   edx
c000c695:	50                   	push   eax
c000c696:	e8 34 f2 ff ff       	call   c000b8cf <double_to_fp>
c000c69b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c69e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c6a2:	83 c4 0c             	add    esp,0xc
c000c6a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c6a8:	8d 04 90             	lea    eax,[eax+edx*4]
c000c6ab:	50                   	push   eax
c000c6ac:	50                   	push   eax
c000c6ad:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c6b0:	e8 5e bb 01 00       	call   c0028213 <__floatsidf>
c000c6b5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c6b9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c6bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6cd:	e8 c2 b7 01 00       	call   c0027e94 <__divdf3>
c000c6d2:	83 c4 18             	add    esp,0x18
c000c6d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6dd:	52                   	push   edx
c000c6de:	89 fa                	mov    edx,edi
c000c6e0:	50                   	push   eax
c000c6e1:	89 d8                	mov    eax,ebx
c000c6e3:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6e7:	e8 50 de ff ff       	call   c000a53c <calc_output_hex>
c000c6ec:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c700:	e8 8f b7 01 00       	call   c0027e94 <__divdf3>
c000c705:	83 c4 10             	add    esp,0x10
c000c708:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c70c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c710:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c714:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c718:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c720:	e8 0e ae 01 00       	call   c0027533 <__adddf3>
c000c725:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c729:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c72d:	83 c4 18             	add    esp,0x18
c000c730:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c734:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c738:	e8 f3 be 01 00       	call   c0028630 <lrint>
c000c73d:	83 ec 0c             	sub    esp,0xc
c000c740:	50                   	push   eax
c000c741:	e8 cd ba 01 00       	call   c0028213 <__floatsidf>
c000c746:	83 c4 10             	add    esp,0x10
c000c749:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c74d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c751:	52                   	push   edx
c000c752:	50                   	push   eax
c000c753:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c757:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c75b:	e8 24 b4 01 00       	call   c0027b84 <__subdf3>
c000c760:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c764:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c768:	83 c4 20             	add    esp,0x20
c000c76b:	6a 00                	push   0x0
c000c76d:	6a 00                	push   0x0
c000c76f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c773:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c777:	e8 03 bd 01 00       	call   c002847f <__ltdf2>
c000c77c:	83 c4 10             	add    esp,0x10
c000c77f:	85 c0                	test   eax,eax
c000c781:	79 20                	jns    c000c7a3 <sinc_hex_vari_process+0x66f>
c000c783:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c787:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c78b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c78f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c793:	e8 9b ad 01 00       	call   c0027533 <__adddf3>
c000c798:	83 c4 10             	add    esp,0x10
c000c79b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c79f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7a3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7a6:	83 ec 10             	sub    esp,0x10
c000c7a9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c7ad:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7bc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7c0:	e8 bf b3 01 00       	call   c0027b84 <__subdf3>
c000c7c5:	83 c4 18             	add    esp,0x18
c000c7c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7d0:	52                   	push   edx
c000c7d1:	50                   	push   eax
c000c7d2:	e8 59 be 01 00       	call   c0028630 <lrint>
c000c7d7:	0f af f8             	imul   edi,eax
c000c7da:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7de:	83 c4 10             	add    esp,0x10
c000c7e1:	01 f8                	add    eax,edi
c000c7e3:	99                   	cdq    
c000c7e4:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7e7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7ea:	e9 fd fb ff ff       	jmp    c000c3ec <sinc_hex_vari_process+0x2b8>
c000c7ef:	83 c4 4c             	add    esp,0x4c
c000c7f2:	89 d0                	mov    eax,edx
c000c7f4:	5b                   	pop    ebx
c000c7f5:	5e                   	pop    esi
c000c7f6:	5f                   	pop    edi
c000c7f7:	5d                   	pop    ebp
c000c7f8:	c3                   	ret    

c000c7f9 <sinc_quad_vari_process>:
c000c7f9:	55                   	push   ebp
c000c7fa:	ba 05 00 00 00       	mov    edx,0x5
c000c7ff:	57                   	push   edi
c000c800:	56                   	push   esi
c000c801:	53                   	push   ebx
c000c802:	83 ec 4c             	sub    esp,0x4c
c000c805:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c809:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c80d:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c810:	85 db                	test   ebx,ebx
c000c812:	0f 84 9c 06 00 00    	je     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c818:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c81b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c81e:	0f af c7             	imul   eax,edi
c000c821:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c824:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c827:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c82e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c835:	0f af c7             	imul   eax,edi
c000c838:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c83b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c83e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c841:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c845:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c849:	68 00 00 70 3f       	push   0x3f700000
c000c84e:	6a 00                	push   0x0
c000c850:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c854:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c858:	e8 22 bc 01 00       	call   c002847f <__ltdf2>
c000c85d:	83 c4 10             	add    esp,0x10
c000c860:	ba 16 00 00 00       	mov    edx,0x16
c000c865:	85 c0                	test   eax,eax
c000c867:	0f 88 47 06 00 00    	js     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c86d:	68 00 00 70 40       	push   0x40700000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c87c:	e8 e0 bb 01 00       	call   c0028461 <__gtdf2>
c000c881:	83 c4 10             	add    esp,0x10
c000c884:	ba 16 00 00 00       	mov    edx,0x16
c000c889:	85 c0                	test   eax,eax
c000c88b:	0f 8f 23 06 00 00    	jg     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c891:	83 ec 0c             	sub    esp,0xc
c000c894:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c897:	e8 77 b9 01 00       	call   c0028213 <__floatsidf>
c000c89c:	83 c4 10             	add    esp,0x10
c000c89f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8a7:	68 00 00 00 40       	push   0x40000000
c000c8ac:	6a 00                	push   0x0
c000c8ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b6:	e8 78 ac 01 00       	call   c0027533 <__adddf3>
c000c8bb:	59                   	pop    ecx
c000c8bc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c8c0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c8c4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8c7:	e8 47 b9 01 00       	call   c0028213 <__floatsidf>
c000c8cc:	83 c4 10             	add    esp,0x10
c000c8cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8d3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8d7:	52                   	push   edx
c000c8d8:	50                   	push   eax
c000c8d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e1:	e8 ae b5 01 00       	call   c0027e94 <__divdf3>
c000c8e6:	83 c4 10             	add    esp,0x10
c000c8e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8f1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8f4:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c903:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c907:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90f:	e8 4d bb 01 00       	call   c0028461 <__gtdf2>
c000c914:	83 c4 10             	add    esp,0x10
c000c917:	85 c0                	test   eax,eax
c000c919:	7e 2d                	jle    c000c948 <sinc_quad_vari_process+0x14f>
c000c91b:	68 00 00 f0 3f       	push   0x3ff00000
c000c920:	6a 00                	push   0x0
c000c922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c92a:	e8 50 bb 01 00       	call   c002847f <__ltdf2>
c000c92f:	83 c4 10             	add    esp,0x10
c000c932:	85 c0                	test   eax,eax
c000c934:	79 4d                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c93a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c93e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c942:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c946:	eb 1b                	jmp    c000c963 <sinc_quad_vari_process+0x16a>
c000c948:	68 00 00 f0 3f       	push   0x3ff00000
c000c94d:	6a 00                	push   0x0
c000c94f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c953:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c957:	e8 23 bb 01 00       	call   c002847f <__ltdf2>
c000c95c:	83 c4 10             	add    esp,0x10
c000c95f:	85 c0                	test   eax,eax
c000c961:	79 20                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c963:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c967:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c96b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c96f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c973:	e8 1c b5 01 00       	call   c0027e94 <__divdf3>
c000c978:	83 c4 10             	add    esp,0x10
c000c97b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c97f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c983:	50                   	push   eax
c000c984:	50                   	push   eax
c000c985:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c989:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c98d:	e8 9e bc 01 00       	call   c0028630 <lrint>
c000c992:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c995:	40                   	inc    eax
c000c996:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c99a:	0f af c7             	imul   eax,edi
c000c99d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c9a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9a4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a8:	58                   	pop    eax
c000c9a9:	5a                   	pop    edx
c000c9aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9b2:	e8 79 bc 01 00       	call   c0028630 <lrint>
c000c9b7:	83 ec 0c             	sub    esp,0xc
c000c9ba:	50                   	push   eax
c000c9bb:	e8 53 b8 01 00       	call   c0028213 <__floatsidf>
c000c9c0:	83 c4 10             	add    esp,0x10
c000c9c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c9c7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c9cb:	52                   	push   edx
c000c9cc:	50                   	push   eax
c000c9cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d5:	e8 aa b1 01 00       	call   c0027b84 <__subdf3>
c000c9da:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9de:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9e2:	83 c4 20             	add    esp,0x20
c000c9e5:	6a 00                	push   0x0
c000c9e7:	6a 00                	push   0x0
c000c9e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9f1:	e8 89 ba 01 00       	call   c002847f <__ltdf2>
c000c9f6:	83 c4 10             	add    esp,0x10
c000c9f9:	85 c0                	test   eax,eax
c000c9fb:	79 1f                	jns    c000ca1c <sinc_quad_vari_process+0x223>
c000c9fd:	68 00 00 f0 3f       	push   0x3ff00000
c000ca02:	6a 00                	push   0x0
c000ca04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca0c:	e8 22 ab 01 00       	call   c0027533 <__adddf3>
c000ca11:	83 c4 10             	add    esp,0x10
c000ca14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ca1c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca1f:	83 ec 10             	sub    esp,0x10
c000ca22:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ca26:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca31:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca35:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca39:	e8 46 b1 01 00       	call   c0027b84 <__subdf3>
c000ca3e:	83 c4 18             	add    esp,0x18
c000ca41:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca45:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca49:	52                   	push   edx
c000ca4a:	50                   	push   eax
c000ca4b:	e8 e0 bb 01 00       	call   c0028630 <lrint>
c000ca50:	0f af f8             	imul   edi,eax
c000ca53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca57:	01 f8                	add    eax,edi
c000ca59:	99                   	cdq    
c000ca5a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca5d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca64:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca68:	68 00 00 f0 3f       	push   0x3ff00000
c000ca6d:	6a 00                	push   0x0
c000ca6f:	e8 20 b4 01 00       	call   c0027e94 <__divdf3>
c000ca74:	83 c4 10             	add    esp,0x10
c000ca77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca7f:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca84:	68 23 42 92 0c       	push   0xc924223
c000ca89:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca8d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca91:	e8 9d aa 01 00       	call   c0027533 <__adddf3>
c000ca96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca9e:	83 c4 20             	add    esp,0x20
c000caa1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000caa9:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cab1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cab4:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cab7:	7d 50                	jge    c000cb09 <sinc_quad_vari_process+0x310>
c000cab9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cabf:	01 c8                	add    eax,ecx
c000cac1:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac4:	99                   	cdq    
c000cac5:	f7 f9                	idiv   ecx
c000cac7:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacb:	7d 0c                	jge    c000cad9 <sinc_quad_vari_process+0x2e0>
c000cacd:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cad0:	85 ff                	test   edi,edi
c000cad2:	79 6c                	jns    c000cb40 <sinc_quad_vari_process+0x347>
c000cad4:	e9 e7 00 00 00       	jmp    c000cbc0 <sinc_quad_vari_process+0x3c7>
c000cad9:	50                   	push   eax
c000cada:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cade:	56                   	push   esi
c000cadf:	53                   	push   ebx
c000cae0:	e8 11 ee ff ff       	call   c000b8f6 <prepare_data>
c000cae5:	83 c4 10             	add    esp,0x10
c000cae8:	89 c2                	mov    edx,eax
c000caea:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000caed:	85 c0                	test   eax,eax
c000caef:	0f 85 bf 03 00 00    	jne    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000caf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000caf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cafb:	01 c8                	add    eax,ecx
c000cafd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cb00:	99                   	cdq    
c000cb01:	f7 f9                	idiv   ecx
c000cb03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cb07:	7c c4                	jl     c000cacd <sinc_quad_vari_process+0x2d4>
c000cb09:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb0d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb11:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cb14:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cb17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb1b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb1f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cb22:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cb25:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cb28:	99                   	cdq    
c000cb29:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb2c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cb2f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cb32:	99                   	cdq    
c000cb33:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb36:	31 d2                	xor    edx,edx
c000cb38:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb3b:	e9 74 03 00 00       	jmp    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000cb40:	83 ec 0c             	sub    esp,0xc
c000cb43:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb46:	e8 c8 b6 01 00       	call   c0028213 <__floatsidf>
c000cb4b:	83 c4 10             	add    esp,0x10
c000cb4e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb52:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb66:	e8 c8 a9 01 00       	call   c0027533 <__adddf3>
c000cb6b:	83 c4 10             	add    esp,0x10
c000cb6e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb72:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb86:	e8 a8 a9 01 00       	call   c0027533 <__adddf3>
c000cb8b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb92:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb96:	e8 78 b6 01 00       	call   c0028213 <__floatsidf>
c000cb9b:	83 c4 10             	add    esp,0x10
c000cb9e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cba2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cba6:	52                   	push   edx
c000cba7:	50                   	push   eax
c000cba8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbb0:	e8 c8 b8 01 00       	call   c002847d <__gedf2>
c000cbb5:	83 c4 10             	add    esp,0x10
c000cbb8:	85 c0                	test   eax,eax
c000cbba:	0f 89 49 ff ff ff    	jns    c000cb09 <sinc_quad_vari_process+0x310>
c000cbc0:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cbc4:	0f 8e ef 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cbca:	83 ec 10             	sub    esp,0x10
c000cbcd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbd0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbd3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cbd6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cbd9:	e8 a6 af 01 00       	call   c0027b84 <__subdf3>
c000cbde:	83 c4 18             	add    esp,0x18
c000cbe1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbe5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbe9:	52                   	push   edx
c000cbea:	50                   	push   eax
c000cbeb:	e8 20 ba 01 00       	call   c0028610 <fabs>
c000cbf0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbf4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbf8:	83 c4 10             	add    esp,0x10
c000cbfb:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cc00:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cc05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc09:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc0d:	e8 4f b8 01 00       	call   c0028461 <__gtdf2>
c000cc12:	83 c4 10             	add    esp,0x10
c000cc15:	85 c0                	test   eax,eax
c000cc17:	0f 8e 9c 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cc1d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cc20:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cc23:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc27:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc2b:	52                   	push   edx
c000cc2c:	50                   	push   eax
c000cc2d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cc30:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cc33:	e8 4c af 01 00       	call   c0027b84 <__subdf3>
c000cc38:	59                   	pop    ecx
c000cc39:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc3d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc41:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc44:	e8 ca b5 01 00       	call   c0028213 <__floatsidf>
c000cc49:	83 c4 10             	add    esp,0x10
c000cc4c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc50:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc54:	52                   	push   edx
c000cc55:	50                   	push   eax
c000cc56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5e:	e8 4d af 01 00       	call   c0027bb0 <__muldf3>
c000cc63:	5f                   	pop    edi
c000cc64:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc68:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc6c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc6f:	e8 9f b5 01 00       	call   c0028213 <__floatsidf>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc7f:	52                   	push   edx
c000cc80:	50                   	push   eax
c000cc81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc89:	e8 06 b2 01 00       	call   c0027e94 <__divdf3>
c000cc8e:	83 c4 10             	add    esp,0x10
c000cc91:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc95:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cca1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca9:	e8 85 a8 01 00       	call   c0027533 <__adddf3>
c000ccae:	83 c4 10             	add    esp,0x10
c000ccb1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccb5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccb9:	83 ec 0c             	sub    esp,0xc
c000ccbc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ccbf:	e8 4f b5 01 00       	call   c0028213 <__floatsidf>
c000ccc4:	83 c4 10             	add    esp,0x10
c000ccc7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cccb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cccf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdf:	e8 9b b7 01 00       	call   c002847f <__ltdf2>
c000cce4:	83 c4 10             	add    esp,0x10
c000cce7:	85 c0                	test   eax,eax
c000cce9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cced:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccf1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccf5:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccf9:	78 10                	js     c000cd0b <sinc_quad_vari_process+0x512>
c000ccfb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cd03:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd17:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd1b:	e8 90 ae 01 00       	call   c0027bb0 <__muldf3>
c000cd20:	59                   	pop    ecx
c000cd21:	5f                   	pop    edi
c000cd22:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd26:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd2e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd32:	e8 98 eb ff ff       	call   c000b8cf <double_to_fp>
c000cd37:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd3b:	89 c7                	mov    edi,eax
c000cd3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd45:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd49:	e8 62 ae 01 00       	call   c0027bb0 <__muldf3>
c000cd4e:	83 c4 18             	add    esp,0x18
c000cd51:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd55:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd59:	52                   	push   edx
c000cd5a:	50                   	push   eax
c000cd5b:	e8 6f eb ff ff       	call   c000b8cf <double_to_fp>
c000cd60:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd63:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd67:	83 c4 0c             	add    esp,0xc
c000cd6a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd6d:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd70:	50                   	push   eax
c000cd71:	50                   	push   eax
c000cd72:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd75:	e8 99 b4 01 00       	call   c0028213 <__floatsidf>
c000cd7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd82:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd86:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd92:	e8 fd b0 01 00       	call   c0027e94 <__divdf3>
c000cd97:	83 c4 18             	add    esp,0x18
c000cd9a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cda2:	52                   	push   edx
c000cda3:	89 fa                	mov    edx,edi
c000cda5:	50                   	push   eax
c000cda6:	89 d8                	mov    eax,ebx
c000cda8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cdac:	e8 a5 d1 ff ff       	call   c0009f56 <calc_output_quad>
c000cdb1:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cdb5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdb9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdbd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc5:	e8 ca b0 01 00       	call   c0027e94 <__divdf3>
c000cdca:	83 c4 10             	add    esp,0x10
c000cdcd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cdd1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cdd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cddd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde5:	e8 49 a7 01 00       	call   c0027533 <__adddf3>
c000cdea:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdee:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdf2:	83 c4 18             	add    esp,0x18
c000cdf5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdf9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdfd:	e8 2e b8 01 00       	call   c0028630 <lrint>
c000ce02:	83 ec 0c             	sub    esp,0xc
c000ce05:	50                   	push   eax
c000ce06:	e8 08 b4 01 00       	call   c0028213 <__floatsidf>
c000ce0b:	83 c4 10             	add    esp,0x10
c000ce0e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce12:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce16:	52                   	push   edx
c000ce17:	50                   	push   eax
c000ce18:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce1c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce20:	e8 5f ad 01 00       	call   c0027b84 <__subdf3>
c000ce25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce2d:	83 c4 20             	add    esp,0x20
c000ce30:	6a 00                	push   0x0
c000ce32:	6a 00                	push   0x0
c000ce34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce3c:	e8 3e b6 01 00       	call   c002847f <__ltdf2>
c000ce41:	83 c4 10             	add    esp,0x10
c000ce44:	85 c0                	test   eax,eax
c000ce46:	79 20                	jns    c000ce68 <sinc_quad_vari_process+0x66f>
c000ce48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce58:	e8 d6 a6 01 00       	call   c0027533 <__adddf3>
c000ce5d:	83 c4 10             	add    esp,0x10
c000ce60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce68:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce6b:	83 ec 10             	sub    esp,0x10
c000ce6e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce72:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce7d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce81:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce85:	e8 fa ac 01 00       	call   c0027b84 <__subdf3>
c000ce8a:	83 c4 18             	add    esp,0x18
c000ce8d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce91:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce95:	52                   	push   edx
c000ce96:	50                   	push   eax
c000ce97:	e8 94 b7 01 00       	call   c0028630 <lrint>
c000ce9c:	0f af f8             	imul   edi,eax
c000ce9f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cea3:	83 c4 10             	add    esp,0x10
c000cea6:	01 f8                	add    eax,edi
c000cea8:	99                   	cdq    
c000cea9:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ceac:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ceaf:	e9 fd fb ff ff       	jmp    c000cab1 <sinc_quad_vari_process+0x2b8>
c000ceb4:	83 c4 4c             	add    esp,0x4c
c000ceb7:	89 d0                	mov    eax,edx
c000ceb9:	5b                   	pop    ebx
c000ceba:	5e                   	pop    esi
c000cebb:	5f                   	pop    edi
c000cebc:	5d                   	pop    ebp
c000cebd:	c3                   	ret    

c000cebe <sinc_stereo_vari_process>:
c000cebe:	55                   	push   ebp
c000cebf:	ba 05 00 00 00       	mov    edx,0x5
c000cec4:	57                   	push   edi
c000cec5:	56                   	push   esi
c000cec6:	53                   	push   ebx
c000cec7:	83 ec 4c             	sub    esp,0x4c
c000ceca:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cece:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ced2:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ced5:	85 db                	test   ebx,ebx
c000ced7:	0f 84 9c 06 00 00    	je     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cedd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cee0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cee3:	0f af c7             	imul   eax,edi
c000cee6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cee9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceec:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cef3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cefa:	0f af c7             	imul   eax,edi
c000cefd:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cf00:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cf03:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf06:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cf0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf0e:	68 00 00 70 3f       	push   0x3f700000
c000cf13:	6a 00                	push   0x0
c000cf15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf1d:	e8 5d b5 01 00       	call   c002847f <__ltdf2>
c000cf22:	83 c4 10             	add    esp,0x10
c000cf25:	ba 16 00 00 00       	mov    edx,0x16
c000cf2a:	85 c0                	test   eax,eax
c000cf2c:	0f 88 47 06 00 00    	js     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf32:	68 00 00 70 40       	push   0x40700000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf41:	e8 1b b5 01 00       	call   c0028461 <__gtdf2>
c000cf46:	83 c4 10             	add    esp,0x10
c000cf49:	ba 16 00 00 00       	mov    edx,0x16
c000cf4e:	85 c0                	test   eax,eax
c000cf50:	0f 8f 23 06 00 00    	jg     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf56:	83 ec 0c             	sub    esp,0xc
c000cf59:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf5c:	e8 b2 b2 01 00       	call   c0028213 <__floatsidf>
c000cf61:	83 c4 10             	add    esp,0x10
c000cf64:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf6c:	68 00 00 00 40       	push   0x40000000
c000cf71:	6a 00                	push   0x0
c000cf73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf7b:	e8 b3 a5 01 00       	call   c0027533 <__adddf3>
c000cf80:	59                   	pop    ecx
c000cf81:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf85:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf89:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf8c:	e8 82 b2 01 00       	call   c0028213 <__floatsidf>
c000cf91:	83 c4 10             	add    esp,0x10
c000cf94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf98:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf9c:	52                   	push   edx
c000cf9d:	50                   	push   eax
c000cf9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa6:	e8 e9 ae 01 00       	call   c0027e94 <__divdf3>
c000cfab:	83 c4 10             	add    esp,0x10
c000cfae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cfb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cfb6:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cfb9:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cfbc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfc0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd4:	e8 88 b4 01 00       	call   c0028461 <__gtdf2>
c000cfd9:	83 c4 10             	add    esp,0x10
c000cfdc:	85 c0                	test   eax,eax
c000cfde:	7e 2d                	jle    c000d00d <sinc_stereo_vari_process+0x14f>
c000cfe0:	68 00 00 f0 3f       	push   0x3ff00000
c000cfe5:	6a 00                	push   0x0
c000cfe7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfeb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfef:	e8 8b b4 01 00       	call   c002847f <__ltdf2>
c000cff4:	83 c4 10             	add    esp,0x10
c000cff7:	85 c0                	test   eax,eax
c000cff9:	79 4d                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000cffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d003:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d007:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d00b:	eb 1b                	jmp    c000d028 <sinc_stereo_vari_process+0x16a>
c000d00d:	68 00 00 f0 3f       	push   0x3ff00000
c000d012:	6a 00                	push   0x0
c000d014:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d018:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d01c:	e8 5e b4 01 00       	call   c002847f <__ltdf2>
c000d021:	83 c4 10             	add    esp,0x10
c000d024:	85 c0                	test   eax,eax
c000d026:	79 20                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000d028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d02c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d030:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d034:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d038:	e8 57 ae 01 00       	call   c0027e94 <__divdf3>
c000d03d:	83 c4 10             	add    esp,0x10
c000d040:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d044:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d048:	50                   	push   eax
c000d049:	50                   	push   eax
c000d04a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d04e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d052:	e8 d9 b5 01 00       	call   c0028630 <lrint>
c000d057:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d05a:	40                   	inc    eax
c000d05b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d05f:	0f af c7             	imul   eax,edi
c000d062:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d066:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d069:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d06d:	58                   	pop    eax
c000d06e:	5a                   	pop    edx
c000d06f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d073:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d077:	e8 b4 b5 01 00       	call   c0028630 <lrint>
c000d07c:	83 ec 0c             	sub    esp,0xc
c000d07f:	50                   	push   eax
c000d080:	e8 8e b1 01 00       	call   c0028213 <__floatsidf>
c000d085:	83 c4 10             	add    esp,0x10
c000d088:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d08c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d090:	52                   	push   edx
c000d091:	50                   	push   eax
c000d092:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d096:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d09a:	e8 e5 aa 01 00       	call   c0027b84 <__subdf3>
c000d09f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0a7:	83 c4 20             	add    esp,0x20
c000d0aa:	6a 00                	push   0x0
c000d0ac:	6a 00                	push   0x0
c000d0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b6:	e8 c4 b3 01 00       	call   c002847f <__ltdf2>
c000d0bb:	83 c4 10             	add    esp,0x10
c000d0be:	85 c0                	test   eax,eax
c000d0c0:	79 1f                	jns    c000d0e1 <sinc_stereo_vari_process+0x223>
c000d0c2:	68 00 00 f0 3f       	push   0x3ff00000
c000d0c7:	6a 00                	push   0x0
c000d0c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0d1:	e8 5d a4 01 00       	call   c0027533 <__adddf3>
c000d0d6:	83 c4 10             	add    esp,0x10
c000d0d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0e1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0e4:	83 ec 10             	sub    esp,0x10
c000d0e7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0eb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fe:	e8 81 aa 01 00       	call   c0027b84 <__subdf3>
c000d103:	83 c4 18             	add    esp,0x18
c000d106:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d10a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d10e:	52                   	push   edx
c000d10f:	50                   	push   eax
c000d110:	e8 1b b5 01 00       	call   c0028630 <lrint>
c000d115:	0f af f8             	imul   edi,eax
c000d118:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d11c:	01 f8                	add    eax,edi
c000d11e:	99                   	cdq    
c000d11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d125:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d129:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d12d:	68 00 00 f0 3f       	push   0x3ff00000
c000d132:	6a 00                	push   0x0
c000d134:	e8 5b ad 01 00       	call   c0027e94 <__divdf3>
c000d139:	83 c4 10             	add    esp,0x10
c000d13c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d140:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d144:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d149:	68 23 42 92 0c       	push   0xc924223
c000d14e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d152:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d156:	e8 d8 a3 01 00       	call   c0027533 <__adddf3>
c000d15b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d15f:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d163:	83 c4 20             	add    esp,0x20
c000d166:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d16e:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d176:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d179:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d17c:	7d 50                	jge    c000d1ce <sinc_stereo_vari_process+0x310>
c000d17e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d181:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d184:	01 c8                	add    eax,ecx
c000d186:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d189:	99                   	cdq    
c000d18a:	f7 f9                	idiv   ecx
c000d18c:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d190:	7d 0c                	jge    c000d19e <sinc_stereo_vari_process+0x2e0>
c000d192:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d195:	85 ff                	test   edi,edi
c000d197:	79 6c                	jns    c000d205 <sinc_stereo_vari_process+0x347>
c000d199:	e9 e7 00 00 00       	jmp    c000d285 <sinc_stereo_vari_process+0x3c7>
c000d19e:	50                   	push   eax
c000d19f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1a3:	56                   	push   esi
c000d1a4:	53                   	push   ebx
c000d1a5:	e8 4c e7 ff ff       	call   c000b8f6 <prepare_data>
c000d1aa:	83 c4 10             	add    esp,0x10
c000d1ad:	89 c2                	mov    edx,eax
c000d1af:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d1b2:	85 c0                	test   eax,eax
c000d1b4:	0f 85 bf 03 00 00    	jne    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d1ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d1bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d1c0:	01 c8                	add    eax,ecx
c000d1c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d1c5:	99                   	cdq    
c000d1c6:	f7 f9                	idiv   ecx
c000d1c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d1cc:	7c c4                	jl     c000d192 <sinc_stereo_vari_process+0x2d4>
c000d1ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1d2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1d6:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d1d9:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1e4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1e7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1ea:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1ed:	99                   	cdq    
c000d1ee:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1f1:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1f4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1f7:	99                   	cdq    
c000d1f8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1fb:	31 d2                	xor    edx,edx
c000d1fd:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d200:	e9 74 03 00 00       	jmp    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d205:	83 ec 0c             	sub    esp,0xc
c000d208:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d20b:	e8 03 b0 01 00       	call   c0028213 <__floatsidf>
c000d210:	83 c4 10             	add    esp,0x10
c000d213:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d217:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d21b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d21f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d223:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d227:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d22b:	e8 03 a3 01 00       	call   c0027533 <__adddf3>
c000d230:	83 c4 10             	add    esp,0x10
c000d233:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d237:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d23b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d23f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d243:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d247:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d24b:	e8 e3 a2 01 00       	call   c0027533 <__adddf3>
c000d250:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d253:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d257:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d25b:	e8 b3 af 01 00       	call   c0028213 <__floatsidf>
c000d260:	83 c4 10             	add    esp,0x10
c000d263:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d267:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d26b:	52                   	push   edx
c000d26c:	50                   	push   eax
c000d26d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d271:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d275:	e8 03 b2 01 00       	call   c002847d <__gedf2>
c000d27a:	83 c4 10             	add    esp,0x10
c000d27d:	85 c0                	test   eax,eax
c000d27f:	0f 89 49 ff ff ff    	jns    c000d1ce <sinc_stereo_vari_process+0x310>
c000d285:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d289:	0f 8e ef 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d28f:	83 ec 10             	sub    esp,0x10
c000d292:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d295:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d298:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d29b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d29e:	e8 e1 a8 01 00       	call   c0027b84 <__subdf3>
c000d2a3:	83 c4 18             	add    esp,0x18
c000d2a6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2aa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2ae:	52                   	push   edx
c000d2af:	50                   	push   eax
c000d2b0:	e8 5b b3 01 00       	call   c0028610 <fabs>
c000d2b5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d2b9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d2bd:	83 c4 10             	add    esp,0x10
c000d2c0:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d2c5:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d2ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2d2:	e8 8a b1 01 00       	call   c0028461 <__gtdf2>
c000d2d7:	83 c4 10             	add    esp,0x10
c000d2da:	85 c0                	test   eax,eax
c000d2dc:	0f 8e 9c 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d2e2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2e5:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2ec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2f0:	52                   	push   edx
c000d2f1:	50                   	push   eax
c000d2f2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2f5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2f8:	e8 87 a8 01 00       	call   c0027b84 <__subdf3>
c000d2fd:	59                   	pop    ecx
c000d2fe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d302:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d306:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d309:	e8 05 af 01 00       	call   c0028213 <__floatsidf>
c000d30e:	83 c4 10             	add    esp,0x10
c000d311:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d315:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d319:	52                   	push   edx
c000d31a:	50                   	push   eax
c000d31b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d31f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d323:	e8 88 a8 01 00       	call   c0027bb0 <__muldf3>
c000d328:	5f                   	pop    edi
c000d329:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d32d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d331:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d334:	e8 da ae 01 00       	call   c0028213 <__floatsidf>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d340:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d344:	52                   	push   edx
c000d345:	50                   	push   eax
c000d346:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34e:	e8 41 ab 01 00       	call   c0027e94 <__divdf3>
c000d353:	83 c4 10             	add    esp,0x10
c000d356:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d35a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d35e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d362:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d366:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36e:	e8 c0 a1 01 00       	call   c0027533 <__adddf3>
c000d373:	83 c4 10             	add    esp,0x10
c000d376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d37e:	83 ec 0c             	sub    esp,0xc
c000d381:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d384:	e8 8a ae 01 00       	call   c0028213 <__floatsidf>
c000d389:	83 c4 10             	add    esp,0x10
c000d38c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d390:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d394:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d398:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d39c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a4:	e8 d6 b0 01 00       	call   c002847f <__ltdf2>
c000d3a9:	83 c4 10             	add    esp,0x10
c000d3ac:	85 c0                	test   eax,eax
c000d3ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d3b2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d3b6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d3ba:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d3be:	78 10                	js     c000d3d0 <sinc_stereo_vari_process+0x512>
c000d3c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d3c4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d3c8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d3cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e0:	e8 cb a7 01 00       	call   c0027bb0 <__muldf3>
c000d3e5:	59                   	pop    ecx
c000d3e6:	5f                   	pop    edi
c000d3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f7:	e8 d3 e4 ff ff       	call   c000b8cf <double_to_fp>
c000d3fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d400:	89 c7                	mov    edi,eax
c000d402:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d406:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40e:	e8 9d a7 01 00       	call   c0027bb0 <__muldf3>
c000d413:	83 c4 18             	add    esp,0x18
c000d416:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d41a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d41e:	52                   	push   edx
c000d41f:	50                   	push   eax
c000d420:	e8 aa e4 ff ff       	call   c000b8cf <double_to_fp>
c000d425:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d428:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d42c:	83 c4 0c             	add    esp,0xc
c000d42f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d432:	8d 04 90             	lea    eax,[eax+edx*4]
c000d435:	50                   	push   eax
c000d436:	50                   	push   eax
c000d437:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d43a:	e8 d4 ad 01 00       	call   c0028213 <__floatsidf>
c000d43f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d443:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d447:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d453:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d457:	e8 38 aa 01 00       	call   c0027e94 <__divdf3>
c000d45c:	83 c4 18             	add    esp,0x18
c000d45f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d463:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d467:	52                   	push   edx
c000d468:	89 fa                	mov    edx,edi
c000d46a:	50                   	push   eax
c000d46b:	89 d8                	mov    eax,ebx
c000d46d:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d471:	e8 02 c7 ff ff       	call   c0009b78 <calc_output_stereo>
c000d476:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d47a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d47e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d482:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d486:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d48a:	e8 05 aa 01 00       	call   c0027e94 <__divdf3>
c000d48f:	83 c4 10             	add    esp,0x10
c000d492:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d496:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d49a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d49e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4aa:	e8 84 a0 01 00       	call   c0027533 <__adddf3>
c000d4af:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d4b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d4b7:	83 c4 18             	add    esp,0x18
c000d4ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4c2:	e8 69 b1 01 00       	call   c0028630 <lrint>
c000d4c7:	83 ec 0c             	sub    esp,0xc
c000d4ca:	50                   	push   eax
c000d4cb:	e8 43 ad 01 00       	call   c0028213 <__floatsidf>
c000d4d0:	83 c4 10             	add    esp,0x10
c000d4d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4db:	52                   	push   edx
c000d4dc:	50                   	push   eax
c000d4dd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e5:	e8 9a a6 01 00       	call   c0027b84 <__subdf3>
c000d4ea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4ee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4f2:	83 c4 20             	add    esp,0x20
c000d4f5:	6a 00                	push   0x0
c000d4f7:	6a 00                	push   0x0
c000d4f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d501:	e8 79 af 01 00       	call   c002847f <__ltdf2>
c000d506:	83 c4 10             	add    esp,0x10
c000d509:	85 c0                	test   eax,eax
c000d50b:	79 20                	jns    c000d52d <sinc_stereo_vari_process+0x66f>
c000d50d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d511:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d515:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d519:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d51d:	e8 11 a0 01 00       	call   c0027533 <__adddf3>
c000d522:	83 c4 10             	add    esp,0x10
c000d525:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d529:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d52d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d530:	83 ec 10             	sub    esp,0x10
c000d533:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d537:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d53a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d53e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d542:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d546:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d54a:	e8 35 a6 01 00       	call   c0027b84 <__subdf3>
c000d54f:	83 c4 18             	add    esp,0x18
c000d552:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d556:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d55a:	52                   	push   edx
c000d55b:	50                   	push   eax
c000d55c:	e8 cf b0 01 00       	call   c0028630 <lrint>
c000d561:	0f af f8             	imul   edi,eax
c000d564:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d568:	83 c4 10             	add    esp,0x10
c000d56b:	01 f8                	add    eax,edi
c000d56d:	99                   	cdq    
c000d56e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d571:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d574:	e9 fd fb ff ff       	jmp    c000d176 <sinc_stereo_vari_process+0x2b8>
c000d579:	83 c4 4c             	add    esp,0x4c
c000d57c:	89 d0                	mov    eax,edx
c000d57e:	5b                   	pop    ebx
c000d57f:	5e                   	pop    esi
c000d580:	5f                   	pop    edi
c000d581:	5d                   	pop    ebp
c000d582:	c3                   	ret    

c000d583 <sinc_mono_vari_process>:
c000d583:	55                   	push   ebp
c000d584:	ba 05 00 00 00       	mov    edx,0x5
c000d589:	57                   	push   edi
c000d58a:	56                   	push   esi
c000d58b:	53                   	push   ebx
c000d58c:	83 ec 4c             	sub    esp,0x4c
c000d58f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d593:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d597:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d59a:	85 db                	test   ebx,ebx
c000d59c:	0f 84 c1 06 00 00    	je     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5a2:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d5a5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d5a8:	0f af c7             	imul   eax,edi
c000d5ab:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d5ae:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d5b1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d5b8:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d5bf:	0f af c7             	imul   eax,edi
c000d5c2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d5c5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d5c9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d5cc:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d5d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d5d6:	68 00 00 70 3f       	push   0x3f700000
c000d5db:	6a 00                	push   0x0
c000d5dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e5:	e8 95 ae 01 00       	call   c002847f <__ltdf2>
c000d5ea:	83 c4 10             	add    esp,0x10
c000d5ed:	ba 16 00 00 00       	mov    edx,0x16
c000d5f2:	85 c0                	test   eax,eax
c000d5f4:	0f 88 69 06 00 00    	js     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5fa:	68 00 00 70 40       	push   0x40700000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d605:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d609:	e8 53 ae 01 00       	call   c0028461 <__gtdf2>
c000d60e:	83 c4 10             	add    esp,0x10
c000d611:	ba 16 00 00 00       	mov    edx,0x16
c000d616:	85 c0                	test   eax,eax
c000d618:	0f 8f 45 06 00 00    	jg     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d61e:	83 ec 0c             	sub    esp,0xc
c000d621:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d624:	e8 ea ab 01 00       	call   c0028213 <__floatsidf>
c000d629:	83 c4 10             	add    esp,0x10
c000d62c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d630:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d634:	68 00 00 00 40       	push   0x40000000
c000d639:	6a 00                	push   0x0
c000d63b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d63f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d643:	e8 eb 9e 01 00       	call   c0027533 <__adddf3>
c000d648:	59                   	pop    ecx
c000d649:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d64d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d651:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d654:	e8 ba ab 01 00       	call   c0028213 <__floatsidf>
c000d659:	83 c4 10             	add    esp,0x10
c000d65c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d660:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d664:	52                   	push   edx
c000d665:	50                   	push   eax
c000d666:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66e:	e8 21 a8 01 00       	call   c0027e94 <__divdf3>
c000d673:	83 c4 10             	add    esp,0x10
c000d676:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d67a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d67e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d681:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d684:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d688:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d68c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d69c:	e8 c0 ad 01 00       	call   c0028461 <__gtdf2>
c000d6a1:	83 c4 10             	add    esp,0x10
c000d6a4:	85 c0                	test   eax,eax
c000d6a6:	7e 2d                	jle    c000d6d5 <sinc_mono_vari_process+0x152>
c000d6a8:	68 00 00 f0 3f       	push   0x3ff00000
c000d6ad:	6a 00                	push   0x0
c000d6af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b7:	e8 c3 ad 01 00       	call   c002847f <__ltdf2>
c000d6bc:	83 c4 10             	add    esp,0x10
c000d6bf:	85 c0                	test   eax,eax
c000d6c1:	79 4d                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6d3:	eb 1b                	jmp    c000d6f0 <sinc_mono_vari_process+0x16d>
c000d6d5:	68 00 00 f0 3f       	push   0x3ff00000
c000d6da:	6a 00                	push   0x0
c000d6dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e4:	e8 96 ad 01 00       	call   c002847f <__ltdf2>
c000d6e9:	83 c4 10             	add    esp,0x10
c000d6ec:	85 c0                	test   eax,eax
c000d6ee:	79 20                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d700:	e8 8f a7 01 00       	call   c0027e94 <__divdf3>
c000d705:	83 c4 10             	add    esp,0x10
c000d708:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d70c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d710:	50                   	push   eax
c000d711:	50                   	push   eax
c000d712:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d716:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d71a:	e8 11 af 01 00       	call   c0028630 <lrint>
c000d71f:	40                   	inc    eax
c000d720:	0f af c7             	imul   eax,edi
c000d723:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d727:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d72b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d72e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d731:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d735:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d739:	58                   	pop    eax
c000d73a:	5a                   	pop    edx
c000d73b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d73f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d743:	e8 e8 ae 01 00       	call   c0028630 <lrint>
c000d748:	83 ec 0c             	sub    esp,0xc
c000d74b:	50                   	push   eax
c000d74c:	e8 c2 aa 01 00       	call   c0028213 <__floatsidf>
c000d751:	83 c4 10             	add    esp,0x10
c000d754:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d758:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d75c:	52                   	push   edx
c000d75d:	50                   	push   eax
c000d75e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d762:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d766:	e8 19 a4 01 00       	call   c0027b84 <__subdf3>
c000d76b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d76f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d773:	83 c4 20             	add    esp,0x20
c000d776:	6a 00                	push   0x0
c000d778:	6a 00                	push   0x0
c000d77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d782:	e8 f8 ac 01 00       	call   c002847f <__ltdf2>
c000d787:	83 c4 10             	add    esp,0x10
c000d78a:	85 c0                	test   eax,eax
c000d78c:	79 1f                	jns    c000d7ad <sinc_mono_vari_process+0x22a>
c000d78e:	68 00 00 f0 3f       	push   0x3ff00000
c000d793:	6a 00                	push   0x0
c000d795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d799:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d79d:	e8 91 9d 01 00       	call   c0027533 <__adddf3>
c000d7a2:	83 c4 10             	add    esp,0x10
c000d7a5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d7ad:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d7b0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d7b3:	83 ec 10             	sub    esp,0x10
c000d7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c6:	e8 b9 a3 01 00       	call   c0027b84 <__subdf3>
c000d7cb:	83 c4 18             	add    esp,0x18
c000d7ce:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d7d2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d7d6:	52                   	push   edx
c000d7d7:	50                   	push   eax
c000d7d8:	e8 53 ae 01 00       	call   c0028630 <lrint>
c000d7dd:	0f af f8             	imul   edi,eax
c000d7e0:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7e3:	31 ff                	xor    edi,edi
c000d7e5:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7ea:	99                   	cdq    
c000d7eb:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7ee:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f9:	55                   	push   ebp
c000d7fa:	57                   	push   edi
c000d7fb:	e8 94 a6 01 00       	call   c0027e94 <__divdf3>
c000d800:	83 c4 10             	add    esp,0x10
c000d803:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d807:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d80b:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d810:	68 23 42 92 0c       	push   0xc924223
c000d815:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d819:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d81d:	e8 11 9d 01 00       	call   c0027533 <__adddf3>
c000d822:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d826:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d82a:	83 c4 20             	add    esp,0x20
c000d82d:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d831:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d835:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d838:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d83b:	7d 54                	jge    c000d891 <sinc_mono_vari_process+0x30e>
c000d83d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d840:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d843:	01 c8                	add    eax,ecx
c000d845:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d848:	99                   	cdq    
c000d849:	f7 f9                	idiv   ecx
c000d84b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d84f:	7d 0c                	jge    c000d85d <sinc_mono_vari_process+0x2da>
c000d851:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d854:	85 ff                	test   edi,edi
c000d856:	79 73                	jns    c000d8cb <sinc_mono_vari_process+0x348>
c000d858:	e9 ee 00 00 00       	jmp    c000d94b <sinc_mono_vari_process+0x3c8>
c000d85d:	50                   	push   eax
c000d85e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d862:	56                   	push   esi
c000d863:	53                   	push   ebx
c000d864:	e8 8d e0 ff ff       	call   c000b8f6 <prepare_data>
c000d869:	89 c2                	mov    edx,eax
c000d86b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d86f:	83 c4 10             	add    esp,0x10
c000d872:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d875:	85 d2                	test   edx,edx
c000d877:	0f 85 e6 03 00 00    	jne    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d87d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d880:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d883:	01 c8                	add    eax,ecx
c000d885:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d888:	99                   	cdq    
c000d889:	f7 f9                	idiv   ecx
c000d88b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d88f:	7c c0                	jl     c000d851 <sinc_mono_vari_process+0x2ce>
c000d891:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d895:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d899:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d89d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d8a0:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d8a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8a7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d8ab:	89 01                	mov    DWORD PTR [ecx],eax
c000d8ad:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d8b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d8b3:	99                   	cdq    
c000d8b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d8ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d8bd:	99                   	cdq    
c000d8be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8c1:	31 d2                	xor    edx,edx
c000d8c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d8c6:	e9 98 03 00 00       	jmp    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d8cb:	83 ec 0c             	sub    esp,0xc
c000d8ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d8d1:	e8 3d a9 01 00       	call   c0028213 <__floatsidf>
c000d8d6:	83 c4 10             	add    esp,0x10
c000d8d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8f1:	e8 3d 9c 01 00       	call   c0027533 <__adddf3>
c000d8f6:	83 c4 10             	add    esp,0x10
c000d8f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8fd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d901:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d905:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d909:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d90d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d911:	e8 1d 9c 01 00       	call   c0027533 <__adddf3>
c000d916:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d919:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d91d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d921:	e8 ed a8 01 00       	call   c0028213 <__floatsidf>
c000d926:	83 c4 10             	add    esp,0x10
c000d929:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d92d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d931:	52                   	push   edx
c000d932:	50                   	push   eax
c000d933:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d937:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d93b:	e8 21 ab 01 00       	call   c0028461 <__gtdf2>
c000d940:	83 c4 10             	add    esp,0x10
c000d943:	85 c0                	test   eax,eax
c000d945:	0f 8f 46 ff ff ff    	jg     c000d891 <sinc_mono_vari_process+0x30e>
c000d94b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d94f:	0f 8e f5 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d955:	83 ec 10             	sub    esp,0x10
c000d958:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d95b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d95e:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d962:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d965:	ff 30                	push   DWORD PTR [eax]
c000d967:	e8 18 a2 01 00       	call   c0027b84 <__subdf3>
c000d96c:	83 c4 18             	add    esp,0x18
c000d96f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d977:	52                   	push   edx
c000d978:	50                   	push   eax
c000d979:	e8 92 ac 01 00       	call   c0028610 <fabs>
c000d97e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d982:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d986:	83 c4 10             	add    esp,0x10
c000d989:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d98e:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d99b:	e8 c1 aa 01 00       	call   c0028461 <__gtdf2>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	85 c0                	test   eax,eax
c000d9a5:	0f 8e 9f 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d9ab:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d9af:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d9b2:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d9b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d9bc:	52                   	push   edx
c000d9bd:	50                   	push   eax
c000d9be:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d9c1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d9c4:	e8 bb a1 01 00       	call   c0027b84 <__subdf3>
c000d9c9:	5f                   	pop    edi
c000d9ca:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9ce:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9d2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d9d5:	e8 39 a8 01 00       	call   c0028213 <__floatsidf>
c000d9da:	83 c4 10             	add    esp,0x10
c000d9dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9e5:	52                   	push   edx
c000d9e6:	50                   	push   eax
c000d9e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9ef:	e8 bc a1 01 00       	call   c0027bb0 <__muldf3>
c000d9f4:	5d                   	pop    ebp
c000d9f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9fd:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000da00:	e8 0e a8 01 00       	call   c0028213 <__floatsidf>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da0c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da10:	52                   	push   edx
c000da11:	50                   	push   eax
c000da12:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da16:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da1a:	e8 75 a4 01 00       	call   c0027e94 <__divdf3>
c000da1f:	83 c4 10             	add    esp,0x10
c000da22:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da26:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da32:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da36:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da3a:	e8 f4 9a 01 00       	call   c0027533 <__adddf3>
c000da3f:	83 c4 10             	add    esp,0x10
c000da42:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da46:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da4a:	83 ec 0c             	sub    esp,0xc
c000da4d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da50:	e8 be a7 01 00       	call   c0028213 <__floatsidf>
c000da55:	83 c4 10             	add    esp,0x10
c000da58:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da5c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da70:	e8 0a aa 01 00       	call   c002847f <__ltdf2>
c000da75:	83 c4 10             	add    esp,0x10
c000da78:	85 c0                	test   eax,eax
c000da7a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da7e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da82:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da86:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da8a:	78 10                	js     c000da9c <sinc_mono_vari_process+0x519>
c000da8c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da90:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da94:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da98:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da9c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daa8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daac:	e8 ff a0 01 00       	call   c0027bb0 <__muldf3>
c000dab1:	59                   	pop    ecx
c000dab2:	5f                   	pop    edi
c000dab3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dab7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dabb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dabf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dac3:	e8 07 de ff ff       	call   c000b8cf <double_to_fp>
c000dac8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dacc:	89 c7                	mov    edi,eax
c000dace:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dad2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dad6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dada:	e8 d1 a0 01 00       	call   c0027bb0 <__muldf3>
c000dadf:	83 c4 18             	add    esp,0x18
c000dae2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dae6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000daea:	52                   	push   edx
c000daeb:	50                   	push   eax
c000daec:	e8 de dd ff ff       	call   c000b8cf <double_to_fp>
c000daf1:	83 ec 0c             	sub    esp,0xc
c000daf4:	89 c5                	mov    ebp,eax
c000daf6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000daf9:	e8 15 a7 01 00       	call   c0028213 <__floatsidf>
c000dafe:	83 c4 10             	add    esp,0x10
c000db01:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db05:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db09:	52                   	push   edx
c000db0a:	50                   	push   eax
c000db0b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db0f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db13:	e8 7c a3 01 00       	call   c0027e94 <__divdf3>
c000db18:	83 c4 10             	add    esp,0x10
c000db1b:	89 e9                	mov    ecx,ebp
c000db1d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db21:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db25:	89 d8                	mov    eax,ebx
c000db27:	89 fa                	mov    edx,edi
c000db29:	e8 ee bd ff ff       	call   c000991c <calc_output_single>
c000db2e:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000db31:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000db34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db38:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db3c:	52                   	push   edx
c000db3d:	50                   	push   eax
c000db3e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db42:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db46:	e8 65 a0 01 00       	call   c0027bb0 <__muldf3>
c000db4b:	59                   	pop    ecx
c000db4c:	59                   	pop    ecx
c000db4d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db51:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db55:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	e8 21 a9 01 00       	call   c0028483 <__truncdfsf2>
c000db62:	83 c4 10             	add    esp,0x10
c000db65:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db68:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db6f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db73:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db77:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db7b:	e8 14 a3 01 00       	call   c0027e94 <__divdf3>
c000db80:	83 c4 10             	add    esp,0x10
c000db83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db87:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db97:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9b:	e8 93 99 01 00       	call   c0027533 <__adddf3>
c000dba0:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000dba4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dba8:	83 c4 18             	add    esp,0x18
c000dbab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbb3:	e8 78 aa 01 00       	call   c0028630 <lrint>
c000dbb8:	83 ec 0c             	sub    esp,0xc
c000dbbb:	50                   	push   eax
c000dbbc:	e8 52 a6 01 00       	call   c0028213 <__floatsidf>
c000dbc1:	83 c4 10             	add    esp,0x10
c000dbc4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dbc8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbcc:	52                   	push   edx
c000dbcd:	50                   	push   eax
c000dbce:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd6:	e8 a9 9f 01 00       	call   c0027b84 <__subdf3>
c000dbdb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dbdf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dbe3:	83 c4 20             	add    esp,0x20
c000dbe6:	6a 00                	push   0x0
c000dbe8:	6a 00                	push   0x0
c000dbea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbf2:	e8 88 a8 01 00       	call   c002847f <__ltdf2>
c000dbf7:	83 c4 10             	add    esp,0x10
c000dbfa:	85 c0                	test   eax,eax
c000dbfc:	79 20                	jns    c000dc1e <sinc_mono_vari_process+0x69b>
c000dbfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0e:	e8 20 99 01 00       	call   c0027533 <__adddf3>
c000dc13:	83 c4 10             	add    esp,0x10
c000dc16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc1a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dc1e:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dc21:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dc24:	83 ec 10             	sub    esp,0x10
c000dc27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc33:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc37:	e8 48 9f 01 00       	call   c0027b84 <__subdf3>
c000dc3c:	83 c4 18             	add    esp,0x18
c000dc3f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc43:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc47:	52                   	push   edx
c000dc48:	50                   	push   eax
c000dc49:	e8 e2 a9 01 00       	call   c0028630 <lrint>
c000dc4e:	83 c4 10             	add    esp,0x10
c000dc51:	0f af f8             	imul   edi,eax
c000dc54:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc57:	99                   	cdq    
c000dc58:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc5b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc5e:	e9 d2 fb ff ff       	jmp    c000d835 <sinc_mono_vari_process+0x2b2>
c000dc63:	83 c4 4c             	add    esp,0x4c
c000dc66:	89 d0                	mov    eax,edx
c000dc68:	5b                   	pop    ebx
c000dc69:	5e                   	pop    esi
c000dc6a:	5f                   	pop    edi
c000dc6b:	5d                   	pop    ebp
c000dc6c:	c3                   	ret    

c000dc6d <sinc_get_name>:
c000dc6d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc71:	31 c0                	xor    eax,eax
c000dc73:	83 fa 02             	cmp    edx,0x2
c000dc76:	77 07                	ja     c000dc7f <sinc_get_name+0x12>
c000dc78:	8b 04 95 24 9e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd61dc]
c000dc7f:	c3                   	ret    

c000dc80 <sinc_get_description>:
c000dc80:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc84:	31 c0                	xor    eax,eax
c000dc86:	83 fa 02             	cmp    edx,0x2
c000dc89:	77 07                	ja     c000dc92 <sinc_get_description+0x12>
c000dc8b:	8b 04 95 18 9e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd61e8]
c000dc92:	c3                   	ret    

c000dc93 <sinc_set_converter>:
c000dc93:	53                   	push   ebx
c000dc94:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc9a:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dca1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dca4:	85 c0                	test   eax,eax
c000dca6:	74 13                	je     c000dcbb <sinc_set_converter+0x28>
c000dca8:	83 ec 0c             	sub    esp,0xc
c000dcab:	50                   	push   eax
c000dcac:	e8 9f 1b 00 00       	call   c000f850 <free>
c000dcb1:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dcb8:	83 c4 10             	add    esp,0x10
c000dcbb:	50                   	push   eax
c000dcbc:	68 44 08 00 00       	push   0x844
c000dcc1:	6a 00                	push   0x0
c000dcc3:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dcc7:	50                   	push   eax
c000dcc8:	e8 ab 2a ff ff       	call   c0000778 <memset>
c000dccd:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dcd0:	83 c4 10             	add    esp,0x10
c000dcd3:	b8 0b 00 00 00       	mov    eax,0xb
c000dcd8:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dcde:	7f 6e                	jg     c000dd4e <sinc_set_converter+0xbb>
c000dce0:	83 fa 01             	cmp    edx,0x1
c000dce3:	75 10                	jne    c000dcf5 <sinc_set_converter+0x62>
c000dce5:	c7 43 24 83 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d583
c000dcec:	c7 43 20 83 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d583
c000dcf3:	eb 4d                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dcf5:	83 fa 02             	cmp    edx,0x2
c000dcf8:	75 10                	jne    c000dd0a <sinc_set_converter+0x77>
c000dcfa:	c7 43 24 be ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cebe
c000dd01:	c7 43 20 be ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cebe
c000dd08:	eb 38                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd0a:	83 fa 04             	cmp    edx,0x4
c000dd0d:	75 10                	jne    c000dd1f <sinc_set_converter+0x8c>
c000dd0f:	c7 43 24 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7f9
c000dd16:	c7 43 20 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7f9
c000dd1d:	eb 23                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd1f:	83 fa 06             	cmp    edx,0x6
c000dd22:	75 10                	jne    c000dd34 <sinc_set_converter+0xa1>
c000dd24:	c7 43 24 34 c1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c134
c000dd2b:	c7 43 20 34 c1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c134
c000dd32:	eb 0e                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd34:	c7 43 24 70 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba70
c000dd3b:	c7 43 20 70 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba70
c000dd42:	c7 43 28 23 ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad23
c000dd49:	b8 0a 00 00 00       	mov    eax,0xa
c000dd4e:	81 c4 58 08 00 00    	add    esp,0x858
c000dd54:	5b                   	pop    ebx
c000dd55:	c3                   	ret    

c000dd56 <zoh_vari_process>:
c000dd56:	55                   	push   ebp
c000dd57:	31 d2                	xor    edx,edx
c000dd59:	57                   	push   edi
c000dd5a:	56                   	push   esi
c000dd5b:	53                   	push   ebx
c000dd5c:	83 ec 3c             	sub    esp,0x3c
c000dd5f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd63:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd67:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd6b:	0f 8e 80 06 00 00    	jle    c000e3f1 <zoh_vari_process+0x69b>
c000dd71:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd74:	ba 05 00 00 00       	mov    edx,0x5
c000dd79:	85 db                	test   ebx,ebx
c000dd7b:	0f 84 70 06 00 00    	je     c000e3f1 <zoh_vari_process+0x69b>
c000dd81:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd84:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd88:	74 19                	je     c000dda3 <zoh_vari_process+0x4d>
c000dd8a:	31 d2                	xor    edx,edx
c000dd8c:	39 c2                	cmp    edx,eax
c000dd8e:	7d 0c                	jge    c000dd9c <zoh_vari_process+0x46>
c000dd90:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd92:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd95:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd99:	42                   	inc    edx
c000dd9a:	eb f0                	jmp    c000dd8c <zoh_vari_process+0x36>
c000dd9c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dda3:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dda6:	0f af d0             	imul   edx,eax
c000dda9:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ddac:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ddb0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000ddb7:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ddba:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000ddc1:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000ddc4:	8b 07                	mov    eax,DWORD PTR [edi]
c000ddc6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddce:	68 00 00 70 3f       	push   0x3f700000
c000ddd3:	6a 00                	push   0x0
c000ddd5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddd9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dddd:	e8 9d a6 01 00       	call   c002847f <__ltdf2>
c000dde2:	83 c4 10             	add    esp,0x10
c000dde5:	ba 16 00 00 00       	mov    edx,0x16
c000ddea:	85 c0                	test   eax,eax
c000ddec:	0f 88 ff 05 00 00    	js     c000e3f1 <zoh_vari_process+0x69b>
c000ddf2:	68 00 00 70 40       	push   0x40700000
c000ddf7:	6a 00                	push   0x0
c000ddf9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddfd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de01:	e8 5b a6 01 00       	call   c0028461 <__gtdf2>
c000de06:	83 c4 10             	add    esp,0x10
c000de09:	ba 16 00 00 00       	mov    edx,0x16
c000de0e:	85 c0                	test   eax,eax
c000de10:	0f 8f db 05 00 00    	jg     c000e3f1 <zoh_vari_process+0x69b>
c000de16:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000de19:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000de1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de24:	68 00 00 f0 3f       	push   0x3ff00000
c000de29:	6a 00                	push   0x0
c000de2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de33:	e8 47 a6 01 00       	call   c002847f <__ltdf2>
c000de38:	83 c4 10             	add    esp,0x10
c000de3b:	85 c0                	test   eax,eax
c000de3d:	0f 89 da 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000de43:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de46:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de49:	0f 8d ce 01 00 00    	jge    c000e01d <zoh_vari_process+0x2c7>
c000de4f:	83 ec 0c             	sub    esp,0xc
c000de52:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de55:	e8 b9 a3 01 00       	call   c0028213 <__floatsidf>
c000de5a:	83 c4 10             	add    esp,0x10
c000de5d:	89 04 24             	mov    DWORD PTR [esp],eax
c000de60:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de6c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de70:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de74:	e8 37 9d 01 00       	call   c0027bb0 <__muldf3>
c000de79:	59                   	pop    ecx
c000de7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de7e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de82:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de85:	e8 89 a3 01 00       	call   c0028213 <__floatsidf>
c000de8a:	83 c4 10             	add    esp,0x10
c000de8d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de91:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de95:	52                   	push   edx
c000de96:	50                   	push   eax
c000de97:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9f:	e8 8f 96 01 00       	call   c0027533 <__adddf3>
c000dea4:	59                   	pop    ecx
c000dea5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dea9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dead:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000deb0:	e8 5e a3 01 00       	call   c0028213 <__floatsidf>
c000deb5:	83 c4 10             	add    esp,0x10
c000deb8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000debc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dec0:	52                   	push   edx
c000dec1:	50                   	push   eax
c000dec2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dec6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deca:	e8 ae a5 01 00       	call   c002847d <__gedf2>
c000decf:	83 c4 10             	add    esp,0x10
c000ded2:	85 c0                	test   eax,eax
c000ded4:	0f 89 43 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000deda:	85 ed                	test   ebp,ebp
c000dedc:	0f 8e ec 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000dee2:	83 ec 10             	sub    esp,0x10
c000dee5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dee8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deeb:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deee:	ff 37                	push   DWORD PTR [edi]
c000def0:	e8 8f 9c 01 00       	call   c0027b84 <__subdf3>
c000def5:	83 c4 18             	add    esp,0x18
c000def8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000defc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df00:	52                   	push   edx
c000df01:	50                   	push   eax
c000df02:	e8 09 a7 01 00       	call   c0028610 <fabs>
c000df07:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df0b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000df0f:	83 c4 10             	add    esp,0x10
c000df12:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df17:	68 23 42 92 0c       	push   0xc924223
c000df1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df24:	e8 38 a5 01 00       	call   c0028461 <__gtdf2>
c000df29:	83 c4 10             	add    esp,0x10
c000df2c:	85 c0                	test   eax,eax
c000df2e:	0f 8e 9a 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000df34:	8b 07                	mov    eax,DWORD PTR [edi]
c000df36:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df39:	89 04 24             	mov    DWORD PTR [esp],eax
c000df3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df40:	52                   	push   edx
c000df41:	50                   	push   eax
c000df42:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df45:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df48:	e8 37 9c 01 00       	call   c0027b84 <__subdf3>
c000df4d:	59                   	pop    ecx
c000df4e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df52:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df56:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df59:	e8 b5 a2 01 00       	call   c0028213 <__floatsidf>
c000df5e:	83 c4 10             	add    esp,0x10
c000df61:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df65:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df69:	52                   	push   edx
c000df6a:	50                   	push   eax
c000df6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df73:	e8 38 9c 01 00       	call   c0027bb0 <__muldf3>
c000df78:	5d                   	pop    ebp
c000df79:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df7d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df81:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df84:	e8 8a a2 01 00       	call   c0028213 <__floatsidf>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df90:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df94:	52                   	push   edx
c000df95:	50                   	push   eax
c000df96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9e:	e8 f1 9e 01 00       	call   c0027e94 <__divdf3>
c000dfa3:	83 c4 10             	add    esp,0x10
c000dfa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfaa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfbe:	e8 70 95 01 00       	call   c0027533 <__adddf3>
c000dfc3:	83 c4 10             	add    esp,0x10
c000dfc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfce:	31 c0                	xor    eax,eax
c000dfd0:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dfd3:	7e 13                	jle    c000dfe8 <zoh_vari_process+0x292>
c000dfd5:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dfd9:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfdc:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfdf:	40                   	inc    eax
c000dfe0:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfe3:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfe6:	eb e8                	jmp    c000dfd0 <zoh_vari_process+0x27a>
c000dfe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff0:	68 00 00 f0 3f       	push   0x3ff00000
c000dff5:	6a 00                	push   0x0
c000dff7:	e8 98 9e 01 00       	call   c0027e94 <__divdf3>
c000dffc:	83 c4 10             	add    esp,0x10
c000dfff:	89 04 24             	mov    DWORD PTR [esp],eax
c000e002:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e00c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e010:	e8 1e 95 01 00       	call   c0027533 <__adddf3>
c000e015:	83 c4 10             	add    esp,0x10
c000e018:	e9 ff fd ff ff       	jmp    c000de1c <zoh_vari_process+0xc6>
c000e01d:	55                   	push   ebp
c000e01e:	55                   	push   ebp
c000e01f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e023:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e027:	e8 04 a6 01 00       	call   c0028630 <lrint>
c000e02c:	83 ec 0c             	sub    esp,0xc
c000e02f:	50                   	push   eax
c000e030:	e8 de a1 01 00       	call   c0028213 <__floatsidf>
c000e035:	83 c4 10             	add    esp,0x10
c000e038:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e03c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e040:	52                   	push   edx
c000e041:	50                   	push   eax
c000e042:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e046:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e04a:	e8 35 9b 01 00       	call   c0027b84 <__subdf3>
c000e04f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e053:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e057:	83 c4 20             	add    esp,0x20
c000e05a:	6a 00                	push   0x0
c000e05c:	6a 00                	push   0x0
c000e05e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e062:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e066:	e8 14 a4 01 00       	call   c002847f <__ltdf2>
c000e06b:	83 c4 10             	add    esp,0x10
c000e06e:	85 c0                	test   eax,eax
c000e070:	79 1e                	jns    c000e090 <zoh_vari_process+0x33a>
c000e072:	68 00 00 f0 3f       	push   0x3ff00000
c000e077:	6a 00                	push   0x0
c000e079:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e07d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e081:	e8 ad 94 01 00       	call   c0027533 <__adddf3>
c000e086:	83 c4 10             	add    esp,0x10
c000e089:	89 04 24             	mov    DWORD PTR [esp],eax
c000e08c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e090:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e093:	83 ec 10             	sub    esp,0x10
c000e096:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a6:	e8 d9 9a 01 00       	call   c0027b84 <__subdf3>
c000e0ab:	83 c4 18             	add    esp,0x18
c000e0ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0b6:	52                   	push   edx
c000e0b7:	50                   	push   eax
c000e0b8:	e8 73 a5 01 00       	call   c0028630 <lrint>
c000e0bd:	83 c4 10             	add    esp,0x10
c000e0c0:	0f af e8             	imul   ebp,eax
c000e0c3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e0c6:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e0c9:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e0cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e0d0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e0d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0d7:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0da:	0f 8d 7a 02 00 00    	jge    c000e35a <zoh_vari_process+0x604>
c000e0e0:	83 ec 0c             	sub    esp,0xc
c000e0e3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0e6:	e8 28 a1 01 00       	call   c0028213 <__floatsidf>
c000e0eb:	83 c4 10             	add    esp,0x10
c000e0ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0f2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0f6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e102:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e106:	e8 a5 9a 01 00       	call   c0027bb0 <__muldf3>
c000e10b:	59                   	pop    ecx
c000e10c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e110:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e118:	e8 f6 a0 01 00       	call   c0028213 <__floatsidf>
c000e11d:	83 c4 10             	add    esp,0x10
c000e120:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e124:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e128:	52                   	push   edx
c000e129:	50                   	push   eax
c000e12a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e12e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e132:	e8 fc 93 01 00       	call   c0027533 <__adddf3>
c000e137:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e13a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e13e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e142:	e8 cc a0 01 00       	call   c0028213 <__floatsidf>
c000e147:	83 c4 10             	add    esp,0x10
c000e14a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e14e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e152:	52                   	push   edx
c000e153:	50                   	push   eax
c000e154:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e158:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e15c:	e8 20 a3 01 00       	call   c0028481 <__ledf2>
c000e161:	83 c4 10             	add    esp,0x10
c000e164:	85 c0                	test   eax,eax
c000e166:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e16a:	0f 8f ea 01 00 00    	jg     c000e35a <zoh_vari_process+0x604>
c000e170:	85 c9                	test   ecx,ecx
c000e172:	0f 8e ed 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e178:	83 ec 10             	sub    esp,0x10
c000e17b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e17e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e181:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e184:	ff 37                	push   DWORD PTR [edi]
c000e186:	e8 f9 99 01 00       	call   c0027b84 <__subdf3>
c000e18b:	83 c4 18             	add    esp,0x18
c000e18e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e192:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e196:	52                   	push   edx
c000e197:	50                   	push   eax
c000e198:	e8 73 a4 01 00       	call   c0028610 <fabs>
c000e19d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e1a1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e1a5:	83 c4 10             	add    esp,0x10
c000e1a8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e1ad:	68 23 42 92 0c       	push   0xc924223
c000e1b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1ba:	e8 a2 a2 01 00       	call   c0028461 <__gtdf2>
c000e1bf:	83 c4 10             	add    esp,0x10
c000e1c2:	85 c0                	test   eax,eax
c000e1c4:	0f 8e 9b 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e1ca:	8b 07                	mov    eax,DWORD PTR [edi]
c000e1cc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e1cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1d7:	52                   	push   edx
c000e1d8:	50                   	push   eax
c000e1d9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1dc:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1df:	e8 a0 99 01 00       	call   c0027b84 <__subdf3>
c000e1e4:	5d                   	pop    ebp
c000e1e5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1e9:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1ed:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1f0:	e8 1e a0 01 00       	call   c0028213 <__floatsidf>
c000e1f5:	83 c4 10             	add    esp,0x10
c000e1f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1fc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e200:	52                   	push   edx
c000e201:	50                   	push   eax
c000e202:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e206:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e20a:	e8 a1 99 01 00       	call   c0027bb0 <__muldf3>
c000e20f:	59                   	pop    ecx
c000e210:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e214:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e218:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e21b:	e8 f3 9f 01 00       	call   c0028213 <__floatsidf>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e227:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e22b:	52                   	push   edx
c000e22c:	50                   	push   eax
c000e22d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e231:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e235:	e8 5a 9c 01 00       	call   c0027e94 <__divdf3>
c000e23a:	83 c4 10             	add    esp,0x10
c000e23d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e241:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e245:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e249:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e24d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e255:	e8 d9 92 01 00       	call   c0027533 <__adddf3>
c000e25a:	83 c4 10             	add    esp,0x10
c000e25d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e261:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e265:	31 d2                	xor    edx,edx
c000e267:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e26a:	39 d0                	cmp    eax,edx
c000e26c:	7e 1d                	jle    c000e28b <zoh_vari_process+0x535>
c000e26e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e271:	29 c1                	sub    ecx,eax
c000e273:	89 c8                	mov    eax,ecx
c000e275:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e277:	01 d0                	add    eax,edx
c000e279:	42                   	inc    edx
c000e27a:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e27d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e280:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e283:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e286:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e289:	eb dc                	jmp    c000e267 <zoh_vari_process+0x511>
c000e28b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e28f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e293:	68 00 00 f0 3f       	push   0x3ff00000
c000e298:	6a 00                	push   0x0
c000e29a:	e8 f5 9b 01 00       	call   c0027e94 <__divdf3>
c000e29f:	83 c4 10             	add    esp,0x10
c000e2a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2aa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2ae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2ba:	e8 74 92 01 00       	call   c0027533 <__adddf3>
c000e2bf:	5d                   	pop    ebp
c000e2c0:	59                   	pop    ecx
c000e2c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2d1:	e8 5a a3 01 00       	call   c0028630 <lrint>
c000e2d6:	83 ec 0c             	sub    esp,0xc
c000e2d9:	50                   	push   eax
c000e2da:	e8 34 9f 01 00       	call   c0028213 <__floatsidf>
c000e2df:	83 c4 10             	add    esp,0x10
c000e2e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2e6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2ea:	52                   	push   edx
c000e2eb:	50                   	push   eax
c000e2ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f4:	e8 8b 98 01 00       	call   c0027b84 <__subdf3>
c000e2f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e301:	83 c4 20             	add    esp,0x20
c000e304:	6a 00                	push   0x0
c000e306:	6a 00                	push   0x0
c000e308:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e30c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e310:	e8 6a a1 01 00       	call   c002847f <__ltdf2>
c000e315:	83 c4 10             	add    esp,0x10
c000e318:	85 c0                	test   eax,eax
c000e31a:	79 1e                	jns    c000e33a <zoh_vari_process+0x5e4>
c000e31c:	68 00 00 f0 3f       	push   0x3ff00000
c000e321:	6a 00                	push   0x0
c000e323:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e327:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e32b:	e8 03 92 01 00       	call   c0027533 <__adddf3>
c000e330:	83 c4 10             	add    esp,0x10
c000e333:	89 04 24             	mov    DWORD PTR [esp],eax
c000e336:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e33a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e33d:	83 ec 10             	sub    esp,0x10
c000e340:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e344:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e348:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e34c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e350:	e8 2f 98 01 00       	call   c0027b84 <__subdf3>
c000e355:	e9 51 fd ff ff       	jmp    c000e0ab <zoh_vari_process+0x355>
c000e35a:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e35e:	7d 3a                	jge    c000e39a <zoh_vari_process+0x644>
c000e360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e364:	83 ec 0c             	sub    esp,0xc
c000e367:	29 e8                	sub    eax,ebp
c000e369:	99                   	cdq    
c000e36a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e36d:	50                   	push   eax
c000e36e:	e8 a0 9e 01 00       	call   c0028213 <__floatsidf>
c000e373:	83 c4 10             	add    esp,0x10
c000e376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e37e:	52                   	push   edx
c000e37f:	50                   	push   eax
c000e380:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e384:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e388:	e8 a6 91 01 00       	call   c0027533 <__adddf3>
c000e38d:	83 c4 10             	add    esp,0x10
c000e390:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e393:	89 04 24             	mov    DWORD PTR [esp],eax
c000e396:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e39a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e39d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e3a1:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e3a4:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e3a7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3aa:	85 c0                	test   eax,eax
c000e3ac:	7f 25                	jg     c000e3d3 <zoh_vari_process+0x67d>
c000e3ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e3b2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e3b6:	89 07                	mov    DWORD PTR [edi],eax
c000e3b8:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e3bb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3be:	99                   	cdq    
c000e3bf:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3c2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e3c5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e3c8:	99                   	cdq    
c000e3c9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3cc:	31 d2                	xor    edx,edx
c000e3ce:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e3d1:	eb 1e                	jmp    c000e3f1 <zoh_vari_process+0x69b>
c000e3d3:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e3d6:	31 d2                	xor    edx,edx
c000e3d8:	29 c8                	sub    eax,ecx
c000e3da:	c1 e0 02             	shl    eax,0x2
c000e3dd:	39 d1                	cmp    ecx,edx
c000e3df:	7e cd                	jle    c000e3ae <zoh_vari_process+0x658>
c000e3e1:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3e3:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3e7:	83 c0 04             	add    eax,0x4
c000e3ea:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3ee:	42                   	inc    edx
c000e3ef:	eb ec                	jmp    c000e3dd <zoh_vari_process+0x687>
c000e3f1:	83 c4 3c             	add    esp,0x3c
c000e3f4:	89 d0                	mov    eax,edx
c000e3f6:	5b                   	pop    ebx
c000e3f7:	5e                   	pop    esi
c000e3f8:	5f                   	pop    edi
c000e3f9:	5d                   	pop    ebp
c000e3fa:	c3                   	ret    

c000e3fb <zoh_reset>:
c000e3fb:	83 ec 0c             	sub    esp,0xc
c000e3fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e402:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e405:	85 c0                	test   eax,eax
c000e407:	74 20                	je     c000e429 <zoh_reset+0x2e>
c000e409:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e40c:	83 c0 1c             	add    eax,0x1c
c000e40f:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e412:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e419:	c1 e2 02             	shl    edx,0x2
c000e41c:	51                   	push   ecx
c000e41d:	52                   	push   edx
c000e41e:	6a 00                	push   0x0
c000e420:	50                   	push   eax
c000e421:	e8 52 23 ff ff       	call   c0000778 <memset>
c000e426:	83 c4 10             	add    esp,0x10
c000e429:	83 c4 0c             	add    esp,0xc
c000e42c:	c3                   	ret    

c000e42d <zoh_get_name>:
c000e42d:	31 c0                	xor    eax,eax
c000e42f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e434:	75 05                	jne    c000e43b <zoh_get_name+0xe>
c000e436:	b8 3e 9f 02 c0       	mov    eax,0xc0029f3e
c000e43b:	c3                   	ret    

c000e43c <zoh_get_description>:
c000e43c:	31 c0                	xor    eax,eax
c000e43e:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e443:	75 05                	jne    c000e44a <zoh_get_description+0xe>
c000e445:	b8 4f 9f 02 c0       	mov    eax,0xc0029f4f
c000e44a:	c3                   	ret    

c000e44b <zoh_set_converter>:
c000e44b:	53                   	push   ebx
c000e44c:	b8 0a 00 00 00       	mov    eax,0xa
c000e451:	83 ec 08             	sub    esp,0x8
c000e454:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e458:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e45d:	75 6e                	jne    c000e4cd <zoh_set_converter+0x82>
c000e45f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e462:	85 c0                	test   eax,eax
c000e464:	74 13                	je     c000e479 <zoh_set_converter+0x2e>
c000e466:	83 ec 0c             	sub    esp,0xc
c000e469:	50                   	push   eax
c000e46a:	e8 e1 13 00 00       	call   c000f850 <free>
c000e46f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e476:	83 c4 10             	add    esp,0x10
c000e479:	50                   	push   eax
c000e47a:	50                   	push   eax
c000e47b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e47e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e485:	50                   	push   eax
c000e486:	6a 01                	push   0x1
c000e488:	e8 e3 13 00 00       	call   c000f870 <calloc>
c000e48d:	83 c4 10             	add    esp,0x10
c000e490:	89 c2                	mov    edx,eax
c000e492:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e495:	85 d2                	test   edx,edx
c000e497:	b8 01 00 00 00       	mov    eax,0x1
c000e49c:	74 2f                	je     c000e4cd <zoh_set_converter+0x82>
c000e49e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e4a1:	83 ec 0c             	sub    esp,0xc
c000e4a4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e4a7:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e4ad:	c7 43 24 56 dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd56
c000e4b4:	c7 43 20 56 dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd56
c000e4bb:	c7 43 28 fb e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3fb
c000e4c2:	53                   	push   ebx
c000e4c3:	e8 33 ff ff ff       	call   c000e3fb <zoh_reset>
c000e4c8:	83 c4 10             	add    esp,0x10
c000e4cb:	31 c0                	xor    eax,eax
c000e4cd:	83 c4 08             	add    esp,0x8
c000e4d0:	5b                   	pop    ebx
c000e4d1:	c3                   	ret    

c000e4d2 <CPU::current()>:
c000e4d2:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c000e4d7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4dd:	90                   	nop
c000e4de:	c3                   	ret    

c000e4df <operator new(unsigned long)>:
c000e4df:	83 ec 0c             	sub    esp,0xc
c000e4e2:	83 ec 0c             	sub    esp,0xc
c000e4e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4e9:	e8 52 13 00 00       	call   c000f840 <malloc>
c000e4ee:	83 c4 10             	add    esp,0x10
c000e4f1:	83 c4 0c             	add    esp,0xc
c000e4f4:	c3                   	ret    

c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>:
c000e4f5:	83 ec 0c             	sub    esp,0xc
c000e4f8:	83 ec 08             	sub    esp,0x8
c000e4fb:	68 86 9f 02 c0       	push   0xc0029f86
c000e500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e504:	e8 b7 23 ff ff       	call   c00008c0 <strcmp>
c000e509:	83 c4 10             	add    esp,0x10
c000e50c:	85 c0                	test   eax,eax
c000e50e:	0f 94 c0             	sete   al
c000e511:	84 c0                	test   al,al
c000e513:	74 0a                	je     c000e51f <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e515:	b8 08 e4 02 c0       	mov    eax,0xc002e408
c000e51a:	e9 e3 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e51f:	83 ec 08             	sub    esp,0x8
c000e522:	68 8f 9f 02 c0       	push   0xc0029f8f
c000e527:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e52b:	e8 90 23 ff ff       	call   c00008c0 <strcmp>
c000e530:	83 c4 10             	add    esp,0x10
c000e533:	85 c0                	test   eax,eax
c000e535:	0f 94 c0             	sete   al
c000e538:	84 c0                	test   al,al
c000e53a:	74 0a                	je     c000e546 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e53c:	b8 ac 69 02 c0       	mov    eax,0xc00269ac
c000e541:	e9 bc 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e546:	83 ec 08             	sub    esp,0x8
c000e549:	68 99 9f 02 c0       	push   0xc0029f99
c000e54e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e552:	e8 69 23 ff ff       	call   c00008c0 <strcmp>
c000e557:	83 c4 10             	add    esp,0x10
c000e55a:	85 c0                	test   eax,eax
c000e55c:	0f 94 c0             	sete   al
c000e55f:	84 c0                	test   al,al
c000e561:	74 0a                	je     c000e56d <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e563:	b8 e0 66 02 c0       	mov    eax,0xc00266e0
c000e568:	e9 95 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e56d:	83 ec 08             	sub    esp,0x8
c000e570:	68 a2 9f 02 c0       	push   0xc0029fa2
c000e575:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e579:	e8 42 23 ff ff       	call   c00008c0 <strcmp>
c000e57e:	83 c4 10             	add    esp,0x10
c000e581:	85 c0                	test   eax,eax
c000e583:	0f 94 c0             	sete   al
c000e586:	84 c0                	test   al,al
c000e588:	74 07                	je     c000e591 <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e58a:	b8 ac 6a 02 c0       	mov    eax,0xc0026aac
c000e58f:	eb 71                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e591:	83 ec 08             	sub    esp,0x8
c000e594:	68 ac 9f 02 c0       	push   0xc0029fac
c000e599:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59d:	e8 1e 23 ff ff       	call   c00008c0 <strcmp>
c000e5a2:	83 c4 10             	add    esp,0x10
c000e5a5:	85 c0                	test   eax,eax
c000e5a7:	0f 94 c0             	sete   al
c000e5aa:	84 c0                	test   al,al
c000e5ac:	74 07                	je     c000e5b5 <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5ae:	b8 2c 68 02 c0       	mov    eax,0xc002682c
c000e5b3:	eb 4d                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b5:	83 ec 08             	sub    esp,0x8
c000e5b8:	68 b5 9f 02 c0       	push   0xc0029fb5
c000e5bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c1:	e8 fa 22 ff ff       	call   c00008c0 <strcmp>
c000e5c6:	83 c4 10             	add    esp,0x10
c000e5c9:	85 c0                	test   eax,eax
c000e5cb:	0f 94 c0             	sete   al
c000e5ce:	84 c0                	test   al,al
c000e5d0:	74 07                	je     c000e5d9 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e5d2:	b8 0c e4 02 c0       	mov    eax,0xc002e40c
c000e5d7:	eb 29                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5d9:	83 ec 08             	sub    esp,0x8
c000e5dc:	68 c2 9f 02 c0       	push   0xc0029fc2
c000e5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e5:	e8 d6 22 ff ff       	call   c00008c0 <strcmp>
c000e5ea:	83 c4 10             	add    esp,0x10
c000e5ed:	85 c0                	test   eax,eax
c000e5ef:	0f 94 c0             	sete   al
c000e5f2:	84 c0                	test   al,al
c000e5f4:	74 07                	je     c000e5fd <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e5f6:	b8 0d e4 02 c0       	mov    eax,0xc002e40d
c000e5fb:	eb 05                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5fd:	b8 00 00 00 00       	mov    eax,0x0
c000e602:	83 c4 0c             	add    esp,0xc
c000e605:	c3                   	ret    

c000e606 <Computer::close(int, int, void*)>:
c000e606:	57                   	push   edi
c000e607:	56                   	push   esi
c000e608:	53                   	push   ebx
c000e609:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e60d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e611:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e615:	83 ec 0c             	sub    esp,0xc
c000e618:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e61e:	e8 c3 5e 00 00       	call   c00144e6 <Device::closeAll()>
c000e623:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e629:	83 c4 10             	add    esp,0x10
c000e62c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e62e:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e632:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e63a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e63e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e642:	5b                   	pop    ebx
c000e643:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e646:	5e                   	pop    esi
c000e647:	5f                   	pop    edi
c000e648:	ff e0                	jmp    eax

c000e64a <Krnl::firstTask()>:
c000e64a:	53                   	push   ebx
c000e64b:	83 ec 14             	sub    esp,0x14
c000e64e:	fb                   	sti    
c000e64f:	68 3f 07 00 00       	push   0x73f
c000e654:	e8 e7 11 00 00       	call   c000f840 <malloc>
c000e659:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e660:	89 c3                	mov    ebx,eax
c000e662:	ff 35 74 19 03 c0    	push   DWORD PTR ds:0xc0031974
c000e668:	68 cf 9f 02 c0       	push   0xc0029fcf
c000e66d:	6a 01                	push   0x1
c000e66f:	50                   	push   eax
c000e670:	e8 95 f5 00 00       	call   c001dc0a <Process::Process(bool, char const*, Process*, char**)>
c000e675:	83 c4 20             	add    esp,0x20
c000e678:	68 ff 00 00 00       	push   0xff
c000e67d:	6a 00                	push   0x0
c000e67f:	68 d5 f1 00 c0       	push   0xc000f1d5
c000e684:	53                   	push   ebx
c000e685:	e8 7e f8 00 00       	call   c001df08 <Process::createThread(void (*)(void*), void*, int)>
c000e68a:	6a 7a                	push   0x7a
c000e68c:	6a 00                	push   0x0
c000e68e:	68 66 e7 01 c0       	push   0xc001e766
c000e693:	ff 35 74 19 03 c0    	push   DWORD PTR ds:0xc0031974
c000e699:	e8 6a f8 00 00       	call   c001df08 <Process::createThread(void (*)(void*), void*, int)>
c000e69e:	83 c4 20             	add    esp,0x20
c000e6a1:	a3 28 19 03 c0       	mov    ds:0xc0031928,eax
c000e6a6:	c6 05 0d e4 02 c0 01 	mov    BYTE PTR ds:0xc002e40d,0x1
c000e6ad:	e8 35 04 01 00       	call   c001eae7 <Vm::initialise8086()>
c000e6b2:	e8 17 4c 00 00       	call   c00132ce <Fs::initVFS()>
c000e6b7:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c000e6bc:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e6c2:	8b 10                	mov    edx,DWORD PTR [eax]
c000e6c4:	6a 00                	push   0x0
c000e6c6:	6a 00                	push   0x0
c000e6c8:	6a 00                	push   0x0
c000e6ca:	50                   	push   eax
c000e6cb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e6ce:	e8 c7 de 00 00       	call   c001c59a <Sys::loadSyscalls()>
c000e6d3:	e8 ea bd 00 00       	call   c001a4c2 <Krnl::loadSystemEnv()>
c000e6d8:	83 c4 0c             	add    esp,0xc
c000e6db:	6a 3a                	push   0x3a
c000e6dd:	68 dc 9f 02 c0       	push   0xc0029fdc
c000e6e2:	68 e5 9f 02 c0       	push   0xc0029fe5
c000e6e7:	e8 fc ca 00 00       	call   c001b1e8 <Reg::readIntWithDefault(char*, char*, int)>
c000e6ec:	89 04 24             	mov    DWORD PTR [esp],eax
c000e6ef:	e8 c2 56 00 00       	call   c0013db6 <User::loadClockSettings(int)>
c000e6f4:	58                   	pop    eax
c000e6f5:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c000e6fa:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e700:	e8 b5 5d 00 00       	call   c00144ba <Device::loadDriversForAll()>
c000e705:	e8 fe b8 00 00       	call   c001a008 <Krnl::startCPUs()>
c000e70a:	5a                   	pop    edx
c000e70b:	8b 1d 08 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e408
c000e711:	59                   	pop    ecx
c000e712:	6a 01                	push   0x1
c000e714:	68 ed 9f 02 c0       	push   0xc0029fed
c000e719:	e8 10 f0 00 00       	call   c001d72e <Thr::loadDLL(char const*, bool)>
c000e71e:	5a                   	pop    edx
c000e71f:	59                   	pop    ecx
c000e720:	53                   	push   ebx
c000e721:	50                   	push   eax
c000e722:	e8 3b f2 00 00       	call   c001d962 <Thr::executeDLL(unsigned long, void*)>
c000e727:	83 c4 10             	add    esp,0x10
c000e72a:	83 ec 0c             	sub    esp,0xc
c000e72d:	6a 02                	push   0x2
c000e72f:	e8 38 fb 00 00       	call   c001e26c <blockTask(TaskState)>
c000e734:	83 c4 10             	add    esp,0x10
c000e737:	eb f1                	jmp    c000e72a <Krnl::firstTask()+0xe0>
c000e739:	90                   	nop

c000e73a <Computer::Computer()>:
c000e73a:	83 ec 0c             	sub    esp,0xc
c000e73d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e741:	83 ec 08             	sub    esp,0x8
c000e744:	68 09 a0 02 c0       	push   0xc002a009
c000e749:	50                   	push   eax
c000e74a:	e8 11 5e 00 00       	call   c0014560 <Device::Device(char const*)>
c000e74f:	83 c4 10             	add    esp,0x10
c000e752:	ba a8 a1 02 c0       	mov    edx,0xc002a1a8
c000e757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e75b:	89 10                	mov    DWORD PTR [eax],edx
c000e75d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e761:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e76b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e76f:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e779:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e77d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e783:	83 ca 04             	or     edx,0x4
c000e786:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e78c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e790:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e796:	0f b6 d0             	movzx  edx,al
c000e799:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e79d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e7a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ae:	0f b6 d0             	movzx  edx,al
c000e7b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b5:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e7ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7be:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7c4:	8d 50 01             	lea    edx,[eax+0x1]
c000e7c7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e7cb:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e7d1:	0f b6 d0             	movzx  edx,al
c000e7d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7d8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e7dc:	83 e1 3f             	and    ecx,0x3f
c000e7df:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e7e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ed:	0f b6 d0             	movzx  edx,al
c000e7f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f4:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e7fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ff:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e805:	0f b6 d0             	movzx  edx,al
c000e808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80c:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e815:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e81b:	8d 50 01             	lea    edx,[eax+0x1]
c000e81e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e822:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e828:	0f b6 d0             	movzx  edx,al
c000e82b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e833:	83 e1 3f             	and    ecx,0x3f
c000e836:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e83e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e844:	0f b6 d0             	movzx  edx,al
c000e847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e84b:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e856:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e85c:	0f b6 d0             	movzx  edx,al
c000e85f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e863:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e86c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e872:	8d 50 01             	lea    edx,[eax+0x1]
c000e875:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e879:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e87f:	0f b6 d0             	movzx  edx,al
c000e882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e886:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e88a:	83 e1 3f             	and    ecx,0x3f
c000e88d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e891:	90                   	nop
c000e892:	83 c4 0c             	add    esp,0xc
c000e895:	c3                   	ret    

c000e896 <Computer::setBootMessage(char const*)>:
c000e896:	c3                   	ret    
c000e897:	90                   	nop

c000e898 <Computer::detectFeatures()>:
c000e898:	55                   	push   ebp
c000e899:	57                   	push   edi
c000e89a:	56                   	push   esi
c000e89b:	53                   	push   ebx
c000e89c:	83 ec 1c             	sub    esp,0x1c
c000e89f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e8a3:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e8ad:	e8 32 1a ff ff       	call   c00002e4 <detectCPUID>
c000e8b2:	85 c0                	test   eax,eax
c000e8b4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8ba:	0f 95 c2             	setne  dl
c000e8bd:	83 e0 fd             	and    eax,0xfffffffd
c000e8c0:	d1 e2                	shl    edx,1
c000e8c2:	09 d0                	or     eax,edx
c000e8c4:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8ca:	a8 02                	test   al,0x2
c000e8cc:	75 46                	jne    c000e914 <Computer::detectFeatures()+0x7c>
c000e8ce:	f6 05 21 e4 02 c0 04 	test   BYTE PTR ds:0xc002e421,0x4
c000e8d5:	74 07                	je     c000e8de <Computer::detectFeatures()+0x46>
c000e8d7:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e8de:	e8 93 7d 01 00       	call   c0026676 <x87Detect>
c000e8e3:	83 e0 01             	and    eax,0x1
c000e8e6:	c1 e0 04             	shl    eax,0x4
c000e8e9:	88 c2                	mov    dl,al
c000e8eb:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8f1:	83 e0 ef             	and    eax,0xffffffef
c000e8f4:	09 d0                	or     eax,edx
c000e8f6:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8fc:	a8 10                	test   al,0x10
c000e8fe:	0f 85 2a 01 00 00    	jne    c000ea2e <Computer::detectFeatures()+0x196>
c000e904:	84 c0                	test   al,al
c000e906:	0f 88 45 01 00 00    	js     c000ea51 <Computer::detectFeatures()+0x1b9>
c000e90c:	83 c4 1c             	add    esp,0x1c
c000e90f:	5b                   	pop    ebx
c000e910:	5e                   	pop    esi
c000e911:	5f                   	pop    edi
c000e912:	5d                   	pop    ebp
c000e913:	c3                   	ret    
c000e914:	83 ec 0c             	sub    esp,0xc
c000e917:	6a 20                	push   0x20
c000e919:	e8 fc a3 00 00       	call   c0018d1a <CPU::cpuidCheckEDX(unsigned int)>
c000e91e:	83 e0 01             	and    eax,0x1
c000e921:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e928:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e92e:	83 e0 f7             	and    eax,0xfffffff7
c000e931:	09 d0                	or     eax,edx
c000e933:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e939:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e940:	e8 d5 a3 00 00       	call   c0018d1a <CPU::cpuidCheckEDX(unsigned int)>
c000e945:	83 e0 01             	and    eax,0x1
c000e948:	88 c2                	mov    dl,al
c000e94a:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e950:	83 e0 fe             	and    eax,0xfffffffe
c000e953:	09 d0                	or     eax,edx
c000e955:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e95b:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e962:	e8 b3 a3 00 00       	call   c0018d1a <CPU::cpuidCheckEDX(unsigned int)>
c000e967:	c1 e0 07             	shl    eax,0x7
c000e96a:	88 c2                	mov    dl,al
c000e96c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e972:	83 e0 7f             	and    eax,0x7f
c000e975:	09 d0                	or     eax,edx
c000e977:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e97d:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e984:	e8 91 a3 00 00       	call   c0018d1a <CPU::cpuidCheckEDX(unsigned int)>
c000e989:	83 c4 10             	add    esp,0x10
c000e98c:	83 e0 01             	and    eax,0x1
c000e98f:	c1 e0 05             	shl    eax,0x5
c000e992:	88 c2                	mov    dl,al
c000e994:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e99a:	83 e0 df             	and    eax,0xffffffdf
c000e99d:	09 d0                	or     eax,edx
c000e99f:	f7 05 20 e4 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002e420,0x401
c000e9a9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9af:	0f 84 c2 00 00 00    	je     c000ea77 <Computer::detectFeatures()+0x1df>
c000e9b5:	83 e0 fe             	and    eax,0xfffffffe
c000e9b8:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9be:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9c4:	88 c2                	mov    dl,al
c000e9c6:	83 e2 09             	and    edx,0x9
c000e9c9:	fe ca                	dec    dl
c000e9cb:	75 09                	jne    c000e9d6 <Computer::detectFeatures()+0x13e>
c000e9cd:	83 e0 fe             	and    eax,0xfffffffe
c000e9d0:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9d6:	83 ec 0c             	sub    esp,0xc
c000e9d9:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e9dd:	50                   	push   eax
c000e9de:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e9e2:	55                   	push   ebp
c000e9e3:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e9e7:	57                   	push   edi
c000e9e8:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e9ec:	56                   	push   esi
c000e9ed:	68 00 00 00 80       	push   0x80000000
c000e9f2:	e8 9f a2 00 00       	call   c0018c96 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e9f7:	83 c4 20             	add    esp,0x20
c000e9fa:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea01:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ea05:	0f 86 c3 fe ff ff    	jbe    c000e8ce <Computer::detectFeatures()+0x36>
c000ea0b:	83 ec 0c             	sub    esp,0xc
c000ea0e:	50                   	push   eax
c000ea0f:	55                   	push   ebp
c000ea10:	57                   	push   edi
c000ea11:	56                   	push   esi
c000ea12:	68 01 00 00 80       	push   0x80000001
c000ea17:	e8 7a a2 00 00       	call   c0018c96 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea1c:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ea26:	83 c4 20             	add    esp,0x20
c000ea29:	e9 a0 fe ff ff       	jmp    c000e8ce <Computer::detectFeatures()+0x36>
c000ea2e:	e8 fd 7b 01 00       	call   c0026630 <absolutelyNoChanceInHell>
c000ea33:	88 c2                	mov    dl,al
c000ea35:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea3b:	c1 e2 07             	shl    edx,0x7
c000ea3e:	83 e0 7f             	and    eax,0x7f
c000ea41:	09 d0                	or     eax,edx
c000ea43:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea49:	84 c0                	test   al,al
c000ea4b:	0f 89 bb fe ff ff    	jns    c000e90c <Computer::detectFeatures()+0x74>
c000ea51:	e8 ba 7b 01 00       	call   c0026610 <avxDetect>
c000ea56:	83 e0 01             	and    eax,0x1
c000ea59:	c1 e0 05             	shl    eax,0x5
c000ea5c:	88 c2                	mov    dl,al
c000ea5e:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea64:	83 e0 df             	and    eax,0xffffffdf
c000ea67:	09 d0                	or     eax,edx
c000ea69:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea6f:	83 c4 1c             	add    esp,0x1c
c000ea72:	5b                   	pop    ebx
c000ea73:	5e                   	pop    esi
c000ea74:	5f                   	pop    edi
c000ea75:	5d                   	pop    ebp
c000ea76:	c3                   	ret    
c000ea77:	83 ec 0c             	sub    esp,0xc
c000ea7a:	68 00 02 00 00       	push   0x200
c000ea7f:	e8 96 a2 00 00       	call   c0018d1a <CPU::cpuidCheckEDX(unsigned int)>
c000ea84:	83 c4 10             	add    esp,0x10
c000ea87:	83 e0 01             	and    eax,0x1
c000ea8a:	88 c2                	mov    dl,al
c000ea8c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea92:	83 e0 fe             	and    eax,0xfffffffe
c000ea95:	09 d0                	or     eax,edx
c000ea97:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea9d:	e9 1c ff ff ff       	jmp    c000e9be <Computer::detectFeatures()+0x126>

c000eaa2 <Computer::displayFeatures()>:
c000eaa2:	53                   	push   ebx
c000eaa3:	83 ec 14             	sub    esp,0x14
c000eaa6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eaaa:	68 19 a0 02 c0       	push   0xc002a019
c000eaaf:	e8 96 44 00 00       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c000eab4:	83 c4 10             	add    esp,0x10
c000eab7:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eabe:	0f 85 73 02 00 00    	jne    c000ed37 <Computer::displayFeatures()+0x295>
c000eac4:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000eac9:	83 ec 08             	sub    esp,0x8
c000eacc:	50                   	push   eax
c000eacd:	68 2c a0 02 c0       	push   0xc002a02c
c000ead2:	e8 73 44 00 00       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c000ead7:	83 c4 10             	add    esp,0x10
c000eada:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eae1:	0f 85 8c 02 00 00    	jne    c000ed73 <Computer::displayFeatures()+0x2d1>
c000eae7:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000eaec:	83 ec 08             	sub    esp,0x8
c000eaef:	50                   	push   eax
c000eaf0:	68 3d a0 02 c0       	push   0xc002a03d
c000eaf5:	e8 50 44 00 00       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c000eafa:	83 c4 10             	add    esp,0x10
c000eafd:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000eb04:	0f 85 5f 02 00 00    	jne    c000ed69 <Computer::displayFeatures()+0x2c7>
c000eb0a:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000eb0f:	83 ec 08             	sub    esp,0x8
c000eb12:	50                   	push   eax
c000eb13:	68 4e a0 02 c0       	push   0xc002a04e
c000eb18:	e8 2d 44 00 00       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c000eb1d:	83 c4 10             	add    esp,0x10
c000eb20:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000eb27:	0f 85 32 02 00 00    	jne    c000ed5f <Computer::displayFeatures()+0x2bd>
c000eb2d:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000eb32:	83 ec 08             	sub    esp,0x8
c000eb35:	50                   	push   eax
c000eb36:	68 5f a0 02 c0       	push   0xc002a05f
c000eb3b:	e8 0a 44 00 00       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c000eb40:	83 c4 10             	add    esp,0x10
c000eb43:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000eb4a:	0f 85 05 02 00 00    	jne    c000ed55 <Computer::displayFeatures()+0x2b3>
c000eb50:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000eb55:	83 ec 08             	sub    esp,0x8
c000eb58:	50                   	push   eax
c000eb59:	68 70 a0 02 c0       	push   0xc002a070
c000eb5e:	e8 e7 43 00 00       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c000eb63:	83 c4 10             	add    esp,0x10
c000eb66:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000eb6d:	0f 85 d8 01 00 00    	jne    c000ed4b <Computer::displayFeatures()+0x2a9>
c000eb73:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000eb78:	83 ec 08             	sub    esp,0x8
c000eb7b:	50                   	push   eax
c000eb7c:	68 81 a0 02 c0       	push   0xc002a081
c000eb81:	e8 c4 43 00 00       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c000eb86:	83 c4 10             	add    esp,0x10
c000eb89:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000eb90:	0f 85 ab 01 00 00    	jne    c000ed41 <Computer::displayFeatures()+0x29f>
c000eb96:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000eb9b:	83 ec 08             	sub    esp,0x8
c000eb9e:	50                   	push   eax
c000eb9f:	68 92 a0 02 c0       	push   0xc002a092
c000eba4:	e8 a1 43 00 00       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c000eba9:	83 c4 10             	add    esp,0x10
c000ebac:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ebb3:	0f 88 1b 02 00 00    	js     c000edd4 <Computer::displayFeatures()+0x332>
c000ebb9:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000ebbe:	83 ec 08             	sub    esp,0x8
c000ebc1:	50                   	push   eax
c000ebc2:	68 a3 a0 02 c0       	push   0xc002a0a3
c000ebc7:	e8 7e 43 00 00       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c000ebcc:	83 c4 10             	add    esp,0x10
c000ebcf:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ebd6:	0f 85 a1 01 00 00    	jne    c000ed7d <Computer::displayFeatures()+0x2db>
c000ebdc:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000ebe1:	83 ec 08             	sub    esp,0x8
c000ebe4:	50                   	push   eax
c000ebe5:	68 b4 a0 02 c0       	push   0xc002a0b4
c000ebea:	e8 5b 43 00 00       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c000ebef:	83 c4 10             	add    esp,0x10
c000ebf2:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ebf9:	0f 85 cb 01 00 00    	jne    c000edca <Computer::displayFeatures()+0x328>
c000ebff:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000ec04:	83 ec 08             	sub    esp,0x8
c000ec07:	50                   	push   eax
c000ec08:	68 c5 a0 02 c0       	push   0xc002a0c5
c000ec0d:	e8 38 43 00 00       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c000ec12:	83 c4 10             	add    esp,0x10
c000ec15:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ec1c:	0f 85 9e 01 00 00    	jne    c000edc0 <Computer::displayFeatures()+0x31e>
c000ec22:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000ec27:	83 ec 08             	sub    esp,0x8
c000ec2a:	50                   	push   eax
c000ec2b:	68 d6 a0 02 c0       	push   0xc002a0d6
c000ec30:	e8 15 43 00 00       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c000ec35:	83 c4 10             	add    esp,0x10
c000ec38:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ec3f:	0f 85 71 01 00 00    	jne    c000edb6 <Computer::displayFeatures()+0x314>
c000ec45:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000ec4a:	83 ec 08             	sub    esp,0x8
c000ec4d:	50                   	push   eax
c000ec4e:	68 e7 a0 02 c0       	push   0xc002a0e7
c000ec53:	e8 f2 42 00 00       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c000ec58:	83 c4 10             	add    esp,0x10
c000ec5b:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ec62:	0f 85 44 01 00 00    	jne    c000edac <Computer::displayFeatures()+0x30a>
c000ec68:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000ec6d:	83 ec 08             	sub    esp,0x8
c000ec70:	50                   	push   eax
c000ec71:	68 f8 a0 02 c0       	push   0xc002a0f8
c000ec76:	e8 cf 42 00 00       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c000ec7b:	83 c4 10             	add    esp,0x10
c000ec7e:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ec85:	0f 85 17 01 00 00    	jne    c000eda2 <Computer::displayFeatures()+0x300>
c000ec8b:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000ec90:	83 ec 08             	sub    esp,0x8
c000ec93:	50                   	push   eax
c000ec94:	68 09 a1 02 c0       	push   0xc002a109
c000ec99:	e8 ac 42 00 00       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c000ec9e:	83 c4 10             	add    esp,0x10
c000eca1:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000eca8:	0f 85 ea 00 00 00    	jne    c000ed98 <Computer::displayFeatures()+0x2f6>
c000ecae:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000ecb3:	83 ec 08             	sub    esp,0x8
c000ecb6:	50                   	push   eax
c000ecb7:	68 1a a1 02 c0       	push   0xc002a11a
c000ecbc:	e8 89 42 00 00       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c000ecc1:	83 c4 10             	add    esp,0x10
c000ecc4:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000eccb:	0f 88 0d 01 00 00    	js     c000edde <Computer::displayFeatures()+0x33c>
c000ecd1:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000ecd6:	83 ec 08             	sub    esp,0x8
c000ecd9:	50                   	push   eax
c000ecda:	68 2b a1 02 c0       	push   0xc002a12b
c000ecdf:	e8 66 42 00 00       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c000ece4:	83 c4 10             	add    esp,0x10
c000ece7:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ecee:	0f 85 9a 00 00 00    	jne    c000ed8e <Computer::displayFeatures()+0x2ec>
c000ecf4:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000ecf9:	83 ec 08             	sub    esp,0x8
c000ecfc:	50                   	push   eax
c000ecfd:	68 3c a1 02 c0       	push   0xc002a13c
c000ed02:	e8 43 42 00 00       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c000ed07:	83 c4 10             	add    esp,0x10
c000ed0a:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000ed11:	75 74                	jne    c000ed87 <Computer::displayFeatures()+0x2e5>
c000ed13:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c000ed18:	83 ec 08             	sub    esp,0x8
c000ed1b:	50                   	push   eax
c000ed1c:	68 4d a1 02 c0       	push   0xc002a14d
c000ed21:	e8 24 42 00 00       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c000ed26:	c7 44 24 20 fc ba 02 c0 	mov    DWORD PTR [esp+0x20],0xc002bafc
c000ed2e:	83 c4 18             	add    esp,0x18
c000ed31:	5b                   	pop    ebx
c000ed32:	e9 13 42 00 00       	jmp    c0012f4a <Dbg::kprintf(char const*, ...)>
c000ed37:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000ed3c:	e9 88 fd ff ff       	jmp    c000eac9 <Computer::displayFeatures()+0x27>
c000ed41:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000ed46:	e9 50 fe ff ff       	jmp    c000eb9b <Computer::displayFeatures()+0xf9>
c000ed4b:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000ed50:	e9 23 fe ff ff       	jmp    c000eb78 <Computer::displayFeatures()+0xd6>
c000ed55:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000ed5a:	e9 f6 fd ff ff       	jmp    c000eb55 <Computer::displayFeatures()+0xb3>
c000ed5f:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000ed64:	e9 c9 fd ff ff       	jmp    c000eb32 <Computer::displayFeatures()+0x90>
c000ed69:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000ed6e:	e9 9c fd ff ff       	jmp    c000eb0f <Computer::displayFeatures()+0x6d>
c000ed73:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000ed78:	e9 6f fd ff ff       	jmp    c000eaec <Computer::displayFeatures()+0x4a>
c000ed7d:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000ed82:	e9 5a fe ff ff       	jmp    c000ebe1 <Computer::displayFeatures()+0x13f>
c000ed87:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000ed8c:	eb 8a                	jmp    c000ed18 <Computer::displayFeatures()+0x276>
c000ed8e:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000ed93:	e9 61 ff ff ff       	jmp    c000ecf9 <Computer::displayFeatures()+0x257>
c000ed98:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000ed9d:	e9 11 ff ff ff       	jmp    c000ecb3 <Computer::displayFeatures()+0x211>
c000eda2:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000eda7:	e9 e4 fe ff ff       	jmp    c000ec90 <Computer::displayFeatures()+0x1ee>
c000edac:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000edb1:	e9 b7 fe ff ff       	jmp    c000ec6d <Computer::displayFeatures()+0x1cb>
c000edb6:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000edbb:	e9 8a fe ff ff       	jmp    c000ec4a <Computer::displayFeatures()+0x1a8>
c000edc0:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000edc5:	e9 5d fe ff ff       	jmp    c000ec27 <Computer::displayFeatures()+0x185>
c000edca:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000edcf:	e9 30 fe ff ff       	jmp    c000ec04 <Computer::displayFeatures()+0x162>
c000edd4:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000edd9:	e9 e0 fd ff ff       	jmp    c000ebbe <Computer::displayFeatures()+0x11c>
c000edde:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c000ede3:	e9 ee fe ff ff       	jmp    c000ecd6 <Computer::displayFeatures()+0x234>

c000ede8 <Computer::rdmsr(unsigned int)>:
c000ede8:	83 ec 0c             	sub    esp,0xc
c000edeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edef:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000edf6:	74 0a                	je     c000ee02 <Computer::rdmsr(unsigned int)+0x1a>
c000edf8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000edfc:	0f 32                	rdmsr  
c000edfe:	83 c4 0c             	add    esp,0xc
c000ee01:	c3                   	ret    
c000ee02:	83 ec 0c             	sub    esp,0xc
c000ee05:	68 5e a1 02 c0       	push   0xc002a15e
c000ee0a:	e8 ec b7 00 00       	call   c001a5fb <Krnl::panic(char const*)>
c000ee0f:	83 c4 10             	add    esp,0x10
c000ee12:	eb e4                	jmp    c000edf8 <Computer::rdmsr(unsigned int)+0x10>

c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ee14:	57                   	push   edi
c000ee15:	56                   	push   esi
c000ee16:	52                   	push   edx
c000ee17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee1b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ee1f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ee23:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee2a:	74 0e                	je     c000ee3a <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ee2c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee30:	89 f0                	mov    eax,esi
c000ee32:	89 fa                	mov    edx,edi
c000ee34:	0f 30                	wrmsr  
c000ee36:	58                   	pop    eax
c000ee37:	5e                   	pop    esi
c000ee38:	5f                   	pop    edi
c000ee39:	c3                   	ret    
c000ee3a:	83 ec 0c             	sub    esp,0xc
c000ee3d:	68 64 a1 02 c0       	push   0xc002a164
c000ee42:	e8 b4 b7 00 00       	call   c001a5fb <Krnl::panic(char const*)>
c000ee47:	83 c4 10             	add    esp,0x10
c000ee4a:	eb e0                	jmp    c000ee2c <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ee4c <Computer::nmiEnabled()>:
c000ee4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee50:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ee56:	c3                   	ret    
c000ee57:	90                   	nop

c000ee58 <Computer::readCMOS(unsigned char)>:
c000ee58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee5c:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ee63:	19 c0                	sbb    eax,eax
c000ee65:	83 e0 80             	and    eax,0xffffff80
c000ee68:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ee6c:	e6 70                	out    0x70,al
c000ee6e:	e4 71                	in     al,0x71
c000ee70:	c3                   	ret    
c000ee71:	90                   	nop

c000ee72 <Computer::enableNMI(bool)>:
c000ee72:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ee76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee7a:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ee80:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ee88:	eb ce                	jmp    c000ee58 <Computer::readCMOS(unsigned char)>

c000ee8a <Computer::open(int, int, void*)>:
c000ee8a:	56                   	push   esi
c000ee8b:	53                   	push   ebx
c000ee8c:	83 ec 10             	sub    esp,0x10
c000ee8f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ee93:	f6 05 20 e4 02 c0 04 	test   BYTE PTR ds:0xc002e420,0x4
c000ee9a:	68 68 12 00 00       	push   0x1268
c000ee9f:	0f 94 05 44 d3 02 c0 	sete   BYTE PTR ds:0xc002d344
c000eea6:	e8 95 09 00 00       	call   c000f840 <malloc>
c000eeab:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeae:	89 c6                	mov    esi,eax
c000eeb0:	e8 35 93 00 00       	call   c00181ea <ACPI::ACPI()>
c000eeb5:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000eebb:	58                   	pop    eax
c000eebc:	5a                   	pop    edx
c000eebd:	56                   	push   esi
c000eebe:	53                   	push   ebx
c000eebf:	e8 ac 54 00 00       	call   c0014370 <Device::addChild(Device*)>
c000eec4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eec7:	e8 cc f9 ff ff       	call   c000e898 <Computer::detectFeatures()>
c000eecc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eecf:	e8 ce fb ff ff       	call   c000eaa2 <Computer::displayFeatures()>
c000eed4:	59                   	pop    ecx
c000eed5:	5e                   	pop    esi
c000eed6:	6a 01                	push   0x1
c000eed8:	53                   	push   ebx
c000eed9:	e8 94 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000eede:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000eee5:	e8 56 09 00 00       	call   c000f840 <malloc>
c000eeea:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeed:	89 c6                	mov    esi,eax
c000eeef:	e8 de 9e 00 00       	call   c0018dd2 <CPU::CPU()>
c000eef4:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000eefa:	58                   	pop    eax
c000eefb:	5a                   	pop    edx
c000eefc:	56                   	push   esi
c000eefd:	53                   	push   ebx
c000eefe:	e8 6d 54 00 00       	call   c0014370 <Device::addChild(Device*)>
c000ef03:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef09:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef0f:	6a 00                	push   0x0
c000ef11:	6a 00                	push   0x0
c000ef13:	50                   	push   eax
c000ef14:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef17:	83 c4 20             	add    esp,0x20
c000ef1a:	e8 d7 59 00 00       	call   c00148f6 <setupFPU()>
c000ef1f:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef25:	85 c0                	test   eax,eax
c000ef27:	74 1f                	je     c000ef48 <Computer::open(int, int, void*)+0xbe>
c000ef29:	83 ec 08             	sub    esp,0x8
c000ef2c:	50                   	push   eax
c000ef2d:	53                   	push   ebx
c000ef2e:	e8 3d 54 00 00       	call   c0014370 <Device::addChild(Device*)>
c000ef33:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef39:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef3b:	6a 00                	push   0x0
c000ef3d:	6a 00                	push   0x0
c000ef3f:	6a 00                	push   0x0
c000ef41:	50                   	push   eax
c000ef42:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef45:	83 c4 20             	add    esp,0x20
c000ef48:	83 ec 0c             	sub    esp,0xc
c000ef4b:	68 4a e6 00 c0       	push   0xc000e64a
c000ef50:	e8 b3 f0 00 00       	call   c001e008 <setupMultitasking(void (*)())>
c000ef55:	83 c4 14             	add    esp,0x14
c000ef58:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef5d:	5b                   	pop    ebx
c000ef5e:	5e                   	pop    esi
c000ef5f:	c3                   	ret    

c000ef60 <Computer::disableNMI()>:
c000ef60:	6a 00                	push   0x0
c000ef62:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ef66:	e8 07 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000ef6b:	58                   	pop    eax
c000ef6c:	5a                   	pop    edx
c000ef6d:	c3                   	ret    

c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ef6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef72:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ef79:	19 c0                	sbb    eax,eax
c000ef7b:	83 e0 80             	and    eax,0xffffff80
c000ef7e:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ef82:	e6 70                	out    0x70,al
c000ef84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef88:	e6 71                	out    0x71,al
c000ef8a:	c3                   	ret    
c000ef8b:	90                   	nop

c000ef8c <Computer::handleNMI()>:
c000ef8c:	56                   	push   esi
c000ef8d:	53                   	push   ebx
c000ef8e:	83 ec 10             	sub    esp,0x10
c000ef91:	e4 92                	in     al,0x92
c000ef93:	89 c6                	mov    esi,eax
c000ef95:	e4 61                	in     al,0x61
c000ef97:	68 6a a1 02 c0       	push   0xc002a16a
c000ef9c:	88 c3                	mov    bl,al
c000ef9e:	e8 a7 3f 00 00       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c000efa3:	83 c4 10             	add    esp,0x10
c000efa6:	83 e6 10             	and    esi,0x10
c000efa9:	75 0d                	jne    c000efb8 <Computer::handleNMI()+0x2c>
c000efab:	f6 c3 40             	test   bl,0x40
c000efae:	75 1d                	jne    c000efcd <Computer::handleNMI()+0x41>
c000efb0:	84 db                	test   bl,bl
c000efb2:	78 2d                	js     c000efe1 <Computer::handleNMI()+0x55>
c000efb4:	58                   	pop    eax
c000efb5:	5b                   	pop    ebx
c000efb6:	5e                   	pop    esi
c000efb7:	c3                   	ret    
c000efb8:	83 ec 0c             	sub    esp,0xc
c000efbb:	68 7b a1 02 c0       	push   0xc002a17b
c000efc0:	e8 36 b6 00 00       	call   c001a5fb <Krnl::panic(char const*)>
c000efc5:	83 c4 10             	add    esp,0x10
c000efc8:	f6 c3 40             	test   bl,0x40
c000efcb:	74 e3                	je     c000efb0 <Computer::handleNMI()+0x24>
c000efcd:	83 ec 0c             	sub    esp,0xc
c000efd0:	68 88 a1 02 c0       	push   0xc002a188
c000efd5:	e8 21 b6 00 00       	call   c001a5fb <Krnl::panic(char const*)>
c000efda:	83 c4 10             	add    esp,0x10
c000efdd:	84 db                	test   bl,bl
c000efdf:	79 d3                	jns    c000efb4 <Computer::handleNMI()+0x28>
c000efe1:	c7 44 24 10 92 a1 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a192
c000efe9:	5a                   	pop    edx
c000efea:	5b                   	pop    ebx
c000efeb:	5e                   	pop    esi
c000efec:	e9 0a b6 00 00       	jmp    c001a5fb <Krnl::panic(char const*)>
c000eff1:	90                   	nop

c000eff2 <Computer::setDiskActivityLight(int, bool)>:
c000eff2:	56                   	push   esi
c000eff3:	53                   	push   ebx
c000eff4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000eff8:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000effd:	77 1b                	ja     c000f01a <Computer::setDiskActivityLight(int, bool)+0x28>
c000efff:	e4 92                	in     al,0x92
c000f001:	bb 40 00 00 00       	mov    ebx,0x40
c000f006:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f00a:	89 da                	mov    edx,ebx
c000f00c:	d3 e2                	shl    edx,cl
c000f00e:	89 f1                	mov    ecx,esi
c000f010:	f7 d2                	not    edx
c000f012:	d3 e3                	shl    ebx,cl
c000f014:	21 d0                	and    eax,edx
c000f016:	09 d8                	or     eax,ebx
c000f018:	e6 92                	out    0x92,al
c000f01a:	5b                   	pop    ebx
c000f01b:	5e                   	pop    esi
c000f01c:	c3                   	ret    
c000f01d:	90                   	nop

c000f01e <GDTEntry::setBase(unsigned int)>:
c000f01e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f022:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f026:	89 c1                	mov    ecx,eax
c000f028:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f02c:	c1 e9 10             	shr    ecx,0x10
c000f02f:	c1 e8 18             	shr    eax,0x18
c000f032:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f035:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f038:	c3                   	ret    
c000f039:	90                   	nop

c000f03a <GDTEntry::setLimit(unsigned int)>:
c000f03a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f03e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f042:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f045:	66 89 01             	mov    WORD PTR [ecx],ax
c000f048:	83 e2 f0             	and    edx,0xfffffff0
c000f04b:	c1 e8 10             	shr    eax,0x10
c000f04e:	83 e0 0f             	and    eax,0xf
c000f051:	09 d0                	or     eax,edx
c000f053:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f056:	c3                   	ret    
c000f057:	90                   	nop

c000f058 <GDT::GDT()>:
c000f058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f05c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f062:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f066:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f06c:	90                   	nop
c000f06d:	c3                   	ret    

c000f06e <GDT::addEntry(GDTEntry)>:
c000f06e:	53                   	push   ebx
c000f06f:	83 ec 0c             	sub    esp,0xc
c000f072:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f076:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f078:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f07f:	52                   	push   edx
c000f080:	50                   	push   eax
c000f081:	68 cc a1 02 c0       	push   0xc002a1cc
c000f086:	e8 bf 3e 00 00       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c000f08b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f08d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f091:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f095:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f099:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f09d:	8d 50 01             	lea    edx,[eax+0x1]
c000f0a0:	c1 e0 03             	shl    eax,0x3
c000f0a3:	89 13                	mov    DWORD PTR [ebx],edx
c000f0a5:	83 c4 18             	add    esp,0x18
c000f0a8:	5b                   	pop    ebx
c000f0a9:	c3                   	ret    

c000f0aa <GDT::getNumberOfEntries()>:
c000f0aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0ae:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0b0:	c3                   	ret    
c000f0b1:	90                   	nop

c000f0b2 <GDT::flush()>:
c000f0b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0b6:	8b 10                	mov    edx,DWORD PTR [eax]
c000f0b8:	83 c0 04             	add    eax,0x4
c000f0bb:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f0c2:	a3 12 e4 02 c0       	mov    ds:0xc002e412,eax
c000f0c7:	66 89 15 10 e4 02 c0 	mov    WORD PTR ds:0xc002e410,dx
c000f0ce:	e9 75 13 ff ff       	jmp    c0000448 <loadGDT>
c000f0d3:	90                   	nop

c000f0d4 <GDT::setup()>:
c000f0d4:	55                   	push   ebp
c000f0d5:	57                   	push   edi
c000f0d6:	56                   	push   esi
c000f0d7:	53                   	push   ebx
c000f0d8:	83 ec 3c             	sub    esp,0x3c
c000f0db:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f0df:	6a 00                	push   0x0
c000f0e1:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f0e5:	53                   	push   ebx
c000f0e6:	e8 33 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f0eb:	6a 00                	push   0x0
c000f0ed:	53                   	push   ebx
c000f0ee:	e8 47 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f0f3:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f0fb:	6a 00                	push   0x0
c000f0fd:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f101:	53                   	push   ebx
c000f102:	e8 17 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f107:	68 ff ff ff 00       	push   0xffffff
c000f10c:	53                   	push   ebx
c000f10d:	e8 28 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f112:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f116:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f11b:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f120:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f124:	83 c4 20             	add    esp,0x20
c000f127:	6a 00                	push   0x0
c000f129:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f12d:	53                   	push   ebx
c000f12e:	e8 eb fe ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f133:	68 ff ff ff 00       	push   0xffffff
c000f138:	53                   	push   ebx
c000f139:	e8 fc fe ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f13e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f142:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f146:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f14a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f14e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f152:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f157:	0d 00 92 c0 00       	or     eax,0xc09200
c000f15c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f160:	89 d8                	mov    eax,ebx
c000f162:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f166:	80 cc 60             	or     ah,0x60
c000f169:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f16d:	83 c4 0c             	add    esp,0xc
c000f170:	89 f8                	mov    eax,edi
c000f172:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f176:	80 cc 60             	or     ah,0x60
c000f179:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f17d:	89 c7                	mov    edi,eax
c000f17f:	55                   	push   ebp
c000f180:	e8 e9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f185:	83 c4 0c             	add    esp,0xc
c000f188:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f18c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f190:	55                   	push   ebp
c000f191:	e8 d8 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f196:	83 c4 0c             	add    esp,0xc
c000f199:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f19d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1a1:	55                   	push   ebp
c000f1a2:	e8 c7 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1a7:	83 c4 0c             	add    esp,0xc
c000f1aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f1b2:	53                   	push   ebx
c000f1b3:	51                   	push   ecx
c000f1b4:	55                   	push   ebp
c000f1b5:	e8 b4 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1ba:	83 c4 0c             	add    esp,0xc
c000f1bd:	57                   	push   edi
c000f1be:	56                   	push   esi
c000f1bf:	55                   	push   ebp
c000f1c0:	e8 a9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1c5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f1c8:	e8 e5 fe ff ff       	call   c000f0b2 <GDT::flush()>
c000f1cd:	83 c4 4c             	add    esp,0x4c
c000f1d0:	5b                   	pop    ebx
c000f1d1:	5e                   	pop    esi
c000f1d2:	5f                   	pop    edi
c000f1d3:	5d                   	pop    ebp
c000f1d4:	c3                   	ret    

c000f1d5 <idleFunction(void*)>:
c000f1d5:	53                   	push   ebx
c000f1d6:	83 ec 08             	sub    esp,0x8
c000f1d9:	e8 fa eb 00 00       	call   c001ddd8 <unlockScheduler()>
c000f1de:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c000f1e3:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f1e9:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f1f0:	74 3c                	je     c000f22e <idleFunction(void*)+0x59>
c000f1f2:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f1f9:	74 33                	je     c000f22e <idleFunction(void*)+0x59>
c000f1fb:	31 db                	xor    ebx,ebx
c000f1fd:	52                   	push   edx
c000f1fe:	52                   	push   edx
c000f1ff:	68 e1 00 00 00       	push   0xe1
c000f204:	50                   	push   eax
c000f205:	e8 de fb ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c000f20a:	53                   	push   ebx
c000f20b:	83 e0 02             	and    eax,0x2
c000f20e:	50                   	push   eax
c000f20f:	68 e1 00 00 00       	push   0xe1
c000f214:	ff 35 08 e4 02 c0    	push   DWORD PTR ds:0xc002e408
c000f21a:	e8 f5 fb ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c000f21f:	83 c4 20             	add    esp,0x20
c000f222:	e8 58 10 ff ff       	call   c000027f <doTPAUSE>
c000f227:	e8 84 94 01 00       	call   c00286b0 <idleCommon()>
c000f22c:	eb f4                	jmp    c000f222 <idleFunction(void*)+0x4d>
c000f22e:	fb                   	sti    
c000f22f:	f4                   	hlt    
c000f230:	e8 7b 94 01 00       	call   c00286b0 <idleCommon()>
c000f235:	eb f7                	jmp    c000f22e <idleFunction(void*)+0x59>
c000f237:	90                   	nop

c000f238 <IDTEntry::IDTEntry(bool)>:
c000f238:	83 ec 04             	sub    esp,0x4
c000f23b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f23f:	88 04 24             	mov    BYTE PTR [esp],al
c000f242:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f246:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f24c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f250:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f254:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f258:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f25b:	83 e2 f0             	and    edx,0xfffffff0
c000f25e:	83 ca 0e             	or     edx,0xe
c000f261:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f264:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f268:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f26b:	83 e2 ef             	and    edx,0xffffffef
c000f26e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f271:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f275:	74 04                	je     c000f27b <IDTEntry::IDTEntry(bool)+0x43>
c000f277:	b2 03                	mov    dl,0x3
c000f279:	eb 02                	jmp    c000f27d <IDTEntry::IDTEntry(bool)+0x45>
c000f27b:	b2 00                	mov    dl,0x0
c000f27d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f281:	83 e2 03             	and    edx,0x3
c000f284:	88 d1                	mov    cl,dl
c000f286:	c1 e1 05             	shl    ecx,0x5
c000f289:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f28c:	83 e2 9f             	and    edx,0xffffff9f
c000f28f:	09 ca                	or     edx,ecx
c000f291:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f294:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f298:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f29b:	83 ca 80             	or     edx,0xffffff80
c000f29e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2a1:	90                   	nop
c000f2a2:	83 c4 04             	add    esp,0x4
c000f2a5:	c3                   	ret    

c000f2a6 <IDTEntry::setOffset(unsigned int)>:
c000f2a6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ae:	66 89 02             	mov    WORD PTR [edx],ax
c000f2b1:	c1 e8 10             	shr    eax,0x10
c000f2b4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f2b8:	c3                   	ret    
c000f2b9:	90                   	nop

c000f2ba <IDT::IDT()>:
c000f2ba:	90                   	nop
c000f2bb:	c3                   	ret    

c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f2bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2c0:	83 c0 30             	add    eax,0x30
c000f2c3:	c3                   	ret    

c000f2c4 <IDT::addEntry(IDTEntry, int)>:
c000f2c4:	53                   	push   ebx
c000f2c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2c9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f2cd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f2d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f2d5:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f2d8:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f2dc:	5b                   	pop    ebx
c000f2dd:	c3                   	ret    

c000f2de <IDT::addEntry(int, void (*)(), bool)>:
c000f2de:	53                   	push   ebx
c000f2df:	83 ec 10             	sub    esp,0x10
c000f2e2:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f2e7:	50                   	push   eax
c000f2e8:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f2ec:	53                   	push   ebx
c000f2ed:	e8 46 ff ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f2f2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f2f6:	53                   	push   ebx
c000f2f7:	e8 aa ff ff ff       	call   c000f2a6 <IDTEntry::setOffset(unsigned int)>
c000f2fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f300:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f304:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f30c:	e8 b3 ff ff ff       	call   c000f2c4 <IDT::addEntry(IDTEntry, int)>
c000f311:	83 c4 30             	add    esp,0x30
c000f314:	5b                   	pop    ebx
c000f315:	c3                   	ret    

c000f316 <IDT::flush()>:
c000f316:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f31a:	66 c7 05 18 e4 02 c0 ff 07 	mov    WORD PTR ds:0xc002e418,0x7ff
c000f323:	a3 1a e4 02 c0       	mov    ds:0xc002e41a,eax
c000f328:	0f 01 1d 18 e4 02 c0 	lidtd  ds:0xc002e418
c000f32f:	c3                   	ret    

c000f330 <IDT::setup()>:
c000f330:	57                   	push   edi
c000f331:	56                   	push   esi
c000f332:	53                   	push   ebx
c000f333:	83 ec 10             	sub    esp,0x10
c000f336:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f33a:	6a 00                	push   0x0
c000f33c:	68 68 04 00 c0       	push   0xc0000468
c000f341:	6a 00                	push   0x0
c000f343:	53                   	push   ebx
c000f344:	e8 95 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f349:	6a 00                	push   0x0
c000f34b:	68 78 04 00 c0       	push   0xc0000478
c000f350:	6a 01                	push   0x1
c000f352:	53                   	push   ebx
c000f353:	e8 86 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f358:	83 c4 20             	add    esp,0x20
c000f35b:	6a 00                	push   0x0
c000f35d:	68 82 04 00 c0       	push   0xc0000482
c000f362:	6a 02                	push   0x2
c000f364:	53                   	push   ebx
c000f365:	e8 74 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f36a:	6a 00                	push   0x0
c000f36c:	68 8c 04 00 c0       	push   0xc000048c
c000f371:	6a 03                	push   0x3
c000f373:	53                   	push   ebx
c000f374:	e8 65 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f379:	83 c4 20             	add    esp,0x20
c000f37c:	6a 00                	push   0x0
c000f37e:	68 96 04 00 c0       	push   0xc0000496
c000f383:	6a 04                	push   0x4
c000f385:	53                   	push   ebx
c000f386:	e8 53 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f38b:	6a 00                	push   0x0
c000f38d:	68 a0 04 00 c0       	push   0xc00004a0
c000f392:	6a 05                	push   0x5
c000f394:	53                   	push   ebx
c000f395:	e8 44 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f39a:	83 c4 20             	add    esp,0x20
c000f39d:	6a 00                	push   0x0
c000f39f:	68 aa 04 00 c0       	push   0xc00004aa
c000f3a4:	6a 06                	push   0x6
c000f3a6:	53                   	push   ebx
c000f3a7:	e8 32 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ac:	6a 00                	push   0x0
c000f3ae:	68 b4 04 00 c0       	push   0xc00004b4
c000f3b3:	6a 07                	push   0x7
c000f3b5:	53                   	push   ebx
c000f3b6:	e8 23 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3bb:	83 c4 20             	add    esp,0x20
c000f3be:	6a 00                	push   0x0
c000f3c0:	68 be 04 00 c0       	push   0xc00004be
c000f3c5:	6a 08                	push   0x8
c000f3c7:	53                   	push   ebx
c000f3c8:	e8 11 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3cd:	6a 00                	push   0x0
c000f3cf:	68 c6 04 00 c0       	push   0xc00004c6
c000f3d4:	6a 09                	push   0x9
c000f3d6:	53                   	push   ebx
c000f3d7:	e8 02 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3dc:	83 c4 20             	add    esp,0x20
c000f3df:	6a 00                	push   0x0
c000f3e1:	68 d0 04 00 c0       	push   0xc00004d0
c000f3e6:	6a 0a                	push   0xa
c000f3e8:	53                   	push   ebx
c000f3e9:	e8 f0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ee:	6a 00                	push   0x0
c000f3f0:	68 d8 04 00 c0       	push   0xc00004d8
c000f3f5:	6a 0b                	push   0xb
c000f3f7:	53                   	push   ebx
c000f3f8:	e8 e1 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3fd:	83 c4 20             	add    esp,0x20
c000f400:	6a 00                	push   0x0
c000f402:	68 e0 04 00 c0       	push   0xc00004e0
c000f407:	6a 0c                	push   0xc
c000f409:	53                   	push   ebx
c000f40a:	e8 cf fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f40f:	6a 00                	push   0x0
c000f411:	68 e8 04 00 c0       	push   0xc00004e8
c000f416:	6a 0d                	push   0xd
c000f418:	53                   	push   ebx
c000f419:	e8 c0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f41e:	83 c4 20             	add    esp,0x20
c000f421:	6a 00                	push   0x0
c000f423:	68 f0 04 00 c0       	push   0xc00004f0
c000f428:	6a 0e                	push   0xe
c000f42a:	53                   	push   ebx
c000f42b:	e8 ae fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f430:	6a 00                	push   0x0
c000f432:	68 f8 04 00 c0       	push   0xc00004f8
c000f437:	6a 0f                	push   0xf
c000f439:	53                   	push   ebx
c000f43a:	e8 9f fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f43f:	83 c4 20             	add    esp,0x20
c000f442:	6a 00                	push   0x0
c000f444:	68 02 05 00 c0       	push   0xc0000502
c000f449:	6a 10                	push   0x10
c000f44b:	53                   	push   ebx
c000f44c:	e8 8d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f451:	6a 00                	push   0x0
c000f453:	68 0c 05 00 c0       	push   0xc000050c
c000f458:	6a 11                	push   0x11
c000f45a:	53                   	push   ebx
c000f45b:	e8 7e fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f460:	83 c4 20             	add    esp,0x20
c000f463:	6a 00                	push   0x0
c000f465:	68 16 05 00 c0       	push   0xc0000516
c000f46a:	6a 12                	push   0x12
c000f46c:	53                   	push   ebx
c000f46d:	e8 6c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f472:	6a 01                	push   0x1
c000f474:	68 b0 05 00 c0       	push   0xc00005b0
c000f479:	6a 60                	push   0x60
c000f47b:	53                   	push   ebx
c000f47c:	e8 5d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f481:	83 c4 20             	add    esp,0x20
c000f484:	6a 00                	push   0x0
c000f486:	68 b7 05 00 c0       	push   0xc00005b7
c000f48b:	6a 20                	push   0x20
c000f48d:	53                   	push   ebx
c000f48e:	e8 4b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f493:	6a 00                	push   0x0
c000f495:	68 a2 05 00 c0       	push   0xc00005a2
c000f49a:	6a 21                	push   0x21
c000f49c:	53                   	push   ebx
c000f49d:	e8 3c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4a2:	83 c4 20             	add    esp,0x20
c000f4a5:	6a 00                	push   0x0
c000f4a7:	68 a9 05 00 c0       	push   0xc00005a9
c000f4ac:	6a 22                	push   0x22
c000f4ae:	53                   	push   ebx
c000f4af:	e8 2a fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4b4:	6a 00                	push   0x0
c000f4b6:	68 20 05 00 c0       	push   0xc0000520
c000f4bb:	6a 23                	push   0x23
c000f4bd:	53                   	push   ebx
c000f4be:	e8 1b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4c3:	83 c4 20             	add    esp,0x20
c000f4c6:	6a 00                	push   0x0
c000f4c8:	68 2a 05 00 c0       	push   0xc000052a
c000f4cd:	6a 24                	push   0x24
c000f4cf:	53                   	push   ebx
c000f4d0:	e8 09 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4d5:	6a 00                	push   0x0
c000f4d7:	68 34 05 00 c0       	push   0xc0000534
c000f4dc:	6a 25                	push   0x25
c000f4de:	53                   	push   ebx
c000f4df:	e8 fa fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4e4:	83 c4 20             	add    esp,0x20
c000f4e7:	6a 00                	push   0x0
c000f4e9:	68 3e 05 00 c0       	push   0xc000053e
c000f4ee:	6a 26                	push   0x26
c000f4f0:	53                   	push   ebx
c000f4f1:	e8 e8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4f6:	6a 00                	push   0x0
c000f4f8:	68 48 05 00 c0       	push   0xc0000548
c000f4fd:	6a 27                	push   0x27
c000f4ff:	53                   	push   ebx
c000f500:	e8 d9 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f505:	83 c4 20             	add    esp,0x20
c000f508:	6a 00                	push   0x0
c000f50a:	68 52 05 00 c0       	push   0xc0000552
c000f50f:	6a 28                	push   0x28
c000f511:	53                   	push   ebx
c000f512:	e8 c7 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f517:	6a 00                	push   0x0
c000f519:	68 5c 05 00 c0       	push   0xc000055c
c000f51e:	6a 29                	push   0x29
c000f520:	53                   	push   ebx
c000f521:	e8 b8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f526:	83 c4 20             	add    esp,0x20
c000f529:	6a 00                	push   0x0
c000f52b:	68 66 05 00 c0       	push   0xc0000566
c000f530:	6a 2a                	push   0x2a
c000f532:	53                   	push   ebx
c000f533:	e8 a6 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f538:	6a 00                	push   0x0
c000f53a:	68 70 05 00 c0       	push   0xc0000570
c000f53f:	6a 2b                	push   0x2b
c000f541:	53                   	push   ebx
c000f542:	e8 97 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f547:	83 c4 20             	add    esp,0x20
c000f54a:	6a 00                	push   0x0
c000f54c:	68 7a 05 00 c0       	push   0xc000057a
c000f551:	6a 2c                	push   0x2c
c000f553:	53                   	push   ebx
c000f554:	e8 85 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f559:	6a 00                	push   0x0
c000f55b:	68 84 05 00 c0       	push   0xc0000584
c000f560:	6a 2d                	push   0x2d
c000f562:	53                   	push   ebx
c000f563:	e8 76 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f568:	83 c4 20             	add    esp,0x20
c000f56b:	6a 00                	push   0x0
c000f56d:	68 8e 05 00 c0       	push   0xc000058e
c000f572:	6a 2e                	push   0x2e
c000f574:	53                   	push   ebx
c000f575:	e8 64 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f57a:	6a 00                	push   0x0
c000f57c:	68 98 05 00 c0       	push   0xc0000598
c000f581:	6a 2f                	push   0x2f
c000f583:	53                   	push   ebx
c000f584:	e8 55 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f589:	83 c4 20             	add    esp,0x20
c000f58c:	6a 00                	push   0x0
c000f58e:	68 ed 05 00 c0       	push   0xc00005ed
c000f593:	6a 30                	push   0x30
c000f595:	53                   	push   ebx
c000f596:	e8 43 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f59b:	6a 00                	push   0x0
c000f59d:	68 f7 05 00 c0       	push   0xc00005f7
c000f5a2:	6a 31                	push   0x31
c000f5a4:	53                   	push   ebx
c000f5a5:	e8 34 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5aa:	83 c4 20             	add    esp,0x20
c000f5ad:	6a 00                	push   0x0
c000f5af:	68 01 06 00 c0       	push   0xc0000601
c000f5b4:	6a 32                	push   0x32
c000f5b6:	53                   	push   ebx
c000f5b7:	e8 22 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5bc:	6a 00                	push   0x0
c000f5be:	68 0b 06 00 c0       	push   0xc000060b
c000f5c3:	6a 33                	push   0x33
c000f5c5:	53                   	push   ebx
c000f5c6:	e8 13 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5cb:	83 c4 20             	add    esp,0x20
c000f5ce:	6a 00                	push   0x0
c000f5d0:	68 15 06 00 c0       	push   0xc0000615
c000f5d5:	6a 34                	push   0x34
c000f5d7:	53                   	push   ebx
c000f5d8:	e8 01 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5dd:	6a 00                	push   0x0
c000f5df:	68 1f 06 00 c0       	push   0xc000061f
c000f5e4:	6a 35                	push   0x35
c000f5e6:	53                   	push   ebx
c000f5e7:	e8 f2 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5ec:	83 c4 20             	add    esp,0x20
c000f5ef:	6a 00                	push   0x0
c000f5f1:	68 29 06 00 c0       	push   0xc0000629
c000f5f6:	6a 36                	push   0x36
c000f5f8:	53                   	push   ebx
c000f5f9:	e8 e0 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5fe:	6a 00                	push   0x0
c000f600:	68 33 06 00 c0       	push   0xc0000633
c000f605:	6a 37                	push   0x37
c000f607:	53                   	push   ebx
c000f608:	e8 d1 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f60d:	83 c4 20             	add    esp,0x20
c000f610:	e8 25 28 00 00       	call   c0011e3a <Virt::getAKernelVAS()>
c000f615:	52                   	push   edx
c000f616:	6a 03                	push   0x3
c000f618:	6a 02                	push   0x2
c000f61a:	50                   	push   eax
c000f61b:	e8 56 2e 00 00       	call   c0012476 <VAS::allocatePages(int, int)>
c000f620:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f627:	89 c6                	mov    esi,eax
c000f629:	e8 12 02 00 00       	call   c000f840 <malloc>
c000f62e:	81 c6 00 20 00 00    	add    esi,0x2000
c000f634:	89 04 24             	mov    DWORD PTR [esp],eax
c000f637:	89 c7                	mov    edi,eax
c000f639:	e8 92 1e 00 00       	call   c00114d0 <TSS::TSS()>
c000f63e:	83 c4 0c             	add    esp,0xc
c000f641:	68 be 04 00 c0       	push   0xc00004be
c000f646:	56                   	push   esi
c000f647:	57                   	push   edi
c000f648:	e8 c3 1e 00 00       	call   c0011510 <TSS::setup(unsigned long, unsigned long)>
c000f64d:	59                   	pop    ecx
c000f64e:	89 c6                	mov    esi,eax
c000f650:	5f                   	pop    edi
c000f651:	6a 00                	push   0x0
c000f653:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f657:	50                   	push   eax
c000f658:	e8 db fb ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f65d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f661:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f666:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f66d:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f673:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f677:	80 ce 05             	or     dh,0x5
c000f67a:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f67d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f681:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f685:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f688:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f68b:	e8 86 fc ff ff       	call   c000f316 <IDT::flush()>
c000f690:	83 c4 20             	add    esp,0x20
c000f693:	5b                   	pop    ebx
c000f694:	5e                   	pop    esi
c000f695:	5f                   	pop    edi
c000f696:	c3                   	ret    

c000f697 <sbrk>:
c000f697:	55                   	push   ebp
c000f698:	57                   	push   edi
c000f699:	56                   	push   esi
c000f69a:	53                   	push   ebx
c000f69b:	83 ec 1c             	sub    esp,0x1c
c000f69e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6a2:	85 c0                	test   eax,eax
c000f6a4:	74 3e                	je     c000f6e4 <sbrk+0x4d>
c000f6a6:	78 43                	js     c000f6eb <sbrk+0x54>
c000f6a8:	8b 15 08 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e408
c000f6ae:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f6b4:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f6ba:	83 e2 01             	and    edx,0x1
c000f6bd:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f6c1:	8b 0d 2c d3 02 c0    	mov    ecx,DWORD PTR ds:0xc002d32c
c000f6c7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f6cb:	05 ff 0f 00 00       	add    eax,0xfff
c000f6d0:	89 c2                	mov    edx,eax
c000f6d2:	78 2f                	js     c000f703 <sbrk+0x6c>
c000f6d4:	c1 fa 0c             	sar    edx,0xc
c000f6d7:	89 d7                	mov    edi,edx
c000f6d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f6dd:	be 00 00 00 00       	mov    esi,0x0
c000f6e2:	eb 36                	jmp    c000f71a <sbrk+0x83>
c000f6e4:	a1 2c d3 02 c0       	mov    eax,ds:0xc002d32c
c000f6e9:	eb 74                	jmp    c000f75f <sbrk+0xc8>
c000f6eb:	83 ec 08             	sub    esp,0x8
c000f6ee:	50                   	push   eax
c000f6ef:	68 e8 a1 02 c0       	push   0xc002a1e8
c000f6f4:	e8 51 38 00 00       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c000f6f9:	83 c4 10             	add    esp,0x10
c000f6fc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f701:	eb 5c                	jmp    c000f75f <sbrk+0xc8>
c000f703:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f709:	eb c9                	jmp    c000f6d4 <sbrk+0x3d>
c000f70b:	81 05 2c d3 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002d32c,0x1000
c000f715:	46                   	inc    esi
c000f716:	39 f7                	cmp    edi,esi
c000f718:	74 34                	je     c000f74e <sbrk+0xb7>
c000f71a:	e8 1b 27 00 00       	call   c0011e3a <Virt::getAKernelVAS()>
c000f71f:	89 c3                	mov    ebx,eax
c000f721:	8b 2d 2c d3 02 c0    	mov    ebp,DWORD PTR ds:0xc002d32c
c000f727:	e8 b6 07 00 00       	call   c000fee2 <Phys::allocatePage()>
c000f72c:	68 01 04 00 00       	push   0x401
c000f731:	55                   	push   ebp
c000f732:	50                   	push   eax
c000f733:	53                   	push   ebx
c000f734:	e8 3d 2c 00 00       	call   c0012376 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f739:	83 c4 10             	add    esp,0x10
c000f73c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f741:	74 c8                	je     c000f70b <sbrk+0x74>
c000f743:	8b 1d 2c d3 02 c0    	mov    ebx,DWORD PTR ds:0xc002d32c
c000f749:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f74c:	eb bd                	jmp    c000f70b <sbrk+0x74>
c000f74e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f753:	75 12                	jne    c000f767 <sbrk+0xd0>
c000f755:	0f 20 d8             	mov    eax,cr3
c000f758:	0f 22 d8             	mov    cr3,eax
c000f75b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f75f:	83 c4 1c             	add    esp,0x1c
c000f762:	5b                   	pop    ebx
c000f763:	5e                   	pop    esi
c000f764:	5f                   	pop    edi
c000f765:	5d                   	pop    ebp
c000f766:	c3                   	ret    
c000f767:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f76b:	89 cb                	mov    ebx,ecx
c000f76d:	c1 eb 0a             	shr    ebx,0xa
c000f770:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f776:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f77c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f780:	c1 e0 0c             	shl    eax,0xc
c000f783:	01 c8                	add    eax,ecx
c000f785:	c1 e8 0a             	shr    eax,0xa
c000f788:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f78d:	2d 00 00 40 00       	sub    eax,0x400000
c000f792:	39 c3                	cmp    ebx,eax
c000f794:	77 c5                	ja     c000f75b <sbrk+0xc4>
c000f796:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f799:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f79f:	39 d8                	cmp    eax,ebx
c000f7a1:	73 f3                	jae    c000f796 <sbrk+0xff>
c000f7a3:	eb b6                	jmp    c000f75b <sbrk+0xc4>

c000f7a5 <mmap>:
c000f7a5:	83 ec 18             	sub    esp,0x18
c000f7a8:	68 18 a2 02 c0       	push   0xc002a218
c000f7ad:	e8 49 ae 00 00       	call   c001a5fb <Krnl::panic(char const*)>
c000f7b2:	b8 00 00 00 00       	mov    eax,0x0
c000f7b7:	83 c4 1c             	add    esp,0x1c
c000f7ba:	c3                   	ret    

c000f7bb <munmap>:
c000f7bb:	83 ec 18             	sub    esp,0x18
c000f7be:	68 1d a2 02 c0       	push   0xc002a21d
c000f7c3:	e8 33 ae 00 00       	call   c001a5fb <Krnl::panic(char const*)>
c000f7c8:	b8 00 00 00 00       	mov    eax,0x0
c000f7cd:	83 c4 1c             	add    esp,0x1c
c000f7d0:	c3                   	ret    

c000f7d1 <liballoc_lock()>:
c000f7d1:	83 ec 0c             	sub    esp,0xc
c000f7d4:	e8 fd e5 00 00       	call   c001ddd6 <lockScheduler()>
c000f7d9:	b8 00 00 00 00       	mov    eax,0x0
c000f7de:	83 c4 0c             	add    esp,0xc
c000f7e1:	c3                   	ret    

c000f7e2 <liballoc_unlock()>:
c000f7e2:	83 ec 0c             	sub    esp,0xc
c000f7e5:	e8 ee e5 00 00       	call   c001ddd8 <unlockScheduler()>
c000f7ea:	b8 00 00 00 00       	mov    eax,0x0
c000f7ef:	83 c4 0c             	add    esp,0xc
c000f7f2:	c3                   	ret    

c000f7f3 <liballoc_alloc(int)>:
c000f7f3:	83 ec 0c             	sub    esp,0xc
c000f7f6:	e8 3f 26 00 00       	call   c0011e3a <Virt::getAKernelVAS()>
c000f7fb:	83 ec 04             	sub    esp,0x4
c000f7fe:	6a 01                	push   0x1
c000f800:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f804:	50                   	push   eax
c000f805:	e8 6c 2c 00 00       	call   c0012476 <VAS::allocatePages(int, int)>
c000f80a:	83 c4 1c             	add    esp,0x1c
c000f80d:	c3                   	ret    

c000f80e <liballoc_free(void*, int)>:
c000f80e:	83 ec 0c             	sub    esp,0xc
c000f811:	e8 24 26 00 00       	call   c0011e3a <Virt::getAKernelVAS()>
c000f816:	83 ec 08             	sub    esp,0x8
c000f819:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f81d:	50                   	push   eax
c000f81e:	e8 0f 29 00 00       	call   c0012132 <VAS::freeAllocatedPages(unsigned long)>
c000f823:	b8 00 00 00 00       	mov    eax,0x0
c000f828:	83 c4 1c             	add    esp,0x1c
c000f82b:	c3                   	ret    

c000f82c <realloc>:
c000f82c:	83 ec 14             	sub    esp,0x14
c000f82f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f833:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f837:	e8 18 1e ff ff       	call   c0001654 <dlrealloc>
c000f83c:	83 c4 1c             	add    esp,0x1c
c000f83f:	c3                   	ret    

c000f840 <malloc>:
c000f840:	83 ec 18             	sub    esp,0x18
c000f843:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f847:	e8 cb 18 ff ff       	call   c0001117 <dlmalloc>
c000f84c:	83 c4 1c             	add    esp,0x1c
c000f84f:	c3                   	ret    

c000f850 <free>:
c000f850:	83 ec 18             	sub    esp,0x18
c000f853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f857:	e8 60 15 ff ff       	call   c0000dbc <dlfree>
c000f85c:	83 c4 1c             	add    esp,0x1c
c000f85f:	c3                   	ret    

c000f860 <rfree>:
c000f860:	83 ec 18             	sub    esp,0x18
c000f863:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f867:	e8 50 15 ff ff       	call   c0000dbc <dlfree>
c000f86c:	83 c4 1c             	add    esp,0x1c
c000f86f:	c3                   	ret    

c000f870 <calloc>:
c000f870:	56                   	push   esi
c000f871:	53                   	push   ebx
c000f872:	83 ec 10             	sub    esp,0x10
c000f875:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f879:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f87e:	53                   	push   ebx
c000f87f:	e8 bc ff ff ff       	call   c000f840 <malloc>
c000f884:	89 c6                	mov    esi,eax
c000f886:	83 c4 0c             	add    esp,0xc
c000f889:	53                   	push   ebx
c000f88a:	6a 00                	push   0x0
c000f88c:	50                   	push   eax
c000f88d:	e8 e6 0e ff ff       	call   c0000778 <memset>
c000f892:	89 f0                	mov    eax,esi
c000f894:	83 c4 14             	add    esp,0x14
c000f897:	5b                   	pop    ebx
c000f898:	5e                   	pop    esi
c000f899:	c3                   	ret    

c000f89a <hwTextMode_loadInData(VgaText*)>:
c000f89a:	55                   	push   ebp
c000f89b:	a1 40 d3 02 c0       	mov    eax,ds:0xc002d340
c000f8a0:	57                   	push   edi
c000f8a1:	56                   	push   esi
c000f8a2:	53                   	push   ebx
c000f8a3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f8a7:	8b 97 ac 0f 00 00    	mov    edx,DWORD PTR [edi+0xfac]
c000f8ad:	85 d2                	test   edx,edx
c000f8af:	7e 2f                	jle    c000f8e0 <hwTextMode_loadInData(VgaText*)+0x46>
c000f8b1:	8d a8 94 00 00 00    	lea    ebp,[eax+0x94]
c000f8b7:	8d 4f 0c             	lea    ecx,[edi+0xc]
c000f8ba:	31 f6                	xor    esi,esi
c000f8bc:	29 fd                	sub    ebp,edi
c000f8be:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f8c1:	31 c0                	xor    eax,eax
c000f8c3:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f8c7:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f8cb:	40                   	inc    eax
c000f8cc:	83 f8 50             	cmp    eax,0x50
c000f8cf:	75 f2                	jne    c000f8c3 <hwTextMode_loadInData(VgaText*)+0x29>
c000f8d1:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f8d7:	46                   	inc    esi
c000f8d8:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f8de:	7f de                	jg     c000f8be <hwTextMode_loadInData(VgaText*)+0x24>
c000f8e0:	5b                   	pop    ebx
c000f8e1:	5e                   	pop    esi
c000f8e2:	5f                   	pop    edi
c000f8e3:	5d                   	pop    ebp
c000f8e4:	c3                   	ret    

c000f8e5 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f8e5:	55                   	push   ebp
c000f8e6:	80 3d a0 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e4a0,0x0
c000f8ed:	57                   	push   edi
c000f8ee:	56                   	push   esi
c000f8ef:	53                   	push   ebx
c000f8f0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f8f4:	75 50                	jne    c000f946 <hwTextMode_loadInTitle(VgaText*, char*)+0x61>
c000f8f6:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f8fc:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f902:	8b 15 40 d3 02 c0    	mov    edx,DWORD PTR ds:0xc002d340
c000f908:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f90c:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f912:	eb 0e                	jmp    c000f922 <hwTextMode_loadInTitle(VgaText*, char*)+0x3d>
c000f914:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f91a:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f920:	89 da                	mov    edx,ebx
c000f922:	83 e5 0f             	and    ebp,0xf
c000f925:	c1 e0 04             	shl    eax,0x4
c000f928:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f92b:	0f b6 c0             	movzx  eax,al
c000f92e:	41                   	inc    ecx
c000f92f:	09 e8                	or     eax,ebp
c000f931:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f935:	c1 e0 08             	shl    eax,0x8
c000f938:	09 e8                	or     eax,ebp
c000f93a:	39 fb                	cmp    ebx,edi
c000f93c:	66 89 02             	mov    WORD PTR [edx],ax
c000f93f:	75 d3                	jne    c000f914 <hwTextMode_loadInTitle(VgaText*, char*)+0x2f>
c000f941:	5b                   	pop    ebx
c000f942:	5e                   	pop    esi
c000f943:	5f                   	pop    edi
c000f944:	5d                   	pop    ebp
c000f945:	c3                   	ret    
c000f946:	c7 86 d8 0f 00 00 02 00 00 00 	mov    DWORD PTR [esi+0xfd8],0x2
c000f950:	c7 86 d4 0f 00 00 00 00 00 00 	mov    DWORD PTR [esi+0xfd4],0x0
c000f95a:	31 c0                	xor    eax,eax
c000f95c:	bd 02 00 00 00       	mov    ebp,0x2
c000f961:	eb 9f                	jmp    c000f902 <hwTextMode_loadInTitle(VgaText*, char*)+0x1d>

c000f963 <hwTextMode_showCursor(VgaText*, bool)>:
c000f963:	56                   	push   esi
c000f964:	80 3d a0 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e4a0,0x0
c000f96b:	53                   	push   ebx
c000f96c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f970:	75 39                	jne    c000f9ab <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000f972:	84 c0                	test   al,al
c000f974:	74 38                	je     c000f9ae <hwTextMode_showCursor(VgaText*, bool)+0x4b>
c000f976:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f97b:	b0 0a                	mov    al,0xa
c000f97d:	89 da                	mov    edx,ebx
c000f97f:	ee                   	out    dx,al
c000f980:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f985:	89 ca                	mov    edx,ecx
c000f987:	ec                   	in     al,dx
c000f988:	b2 0f                	mov    dl,0xf
c000f98a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f98e:	83 e0 c0             	and    eax,0xffffffc0
c000f991:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f997:	09 d0                	or     eax,edx
c000f999:	89 ca                	mov    edx,ecx
c000f99b:	ee                   	out    dx,al
c000f99c:	b0 0b                	mov    al,0xb
c000f99e:	89 da                	mov    edx,ebx
c000f9a0:	ee                   	out    dx,al
c000f9a1:	89 ca                	mov    edx,ecx
c000f9a3:	ec                   	in     al,dx
c000f9a4:	83 e0 e0             	and    eax,0xffffffe0
c000f9a7:	83 c8 0f             	or     eax,0xf
c000f9aa:	ee                   	out    dx,al
c000f9ab:	5b                   	pop    ebx
c000f9ac:	5e                   	pop    esi
c000f9ad:	c3                   	ret    
c000f9ae:	b0 0a                	mov    al,0xa
c000f9b0:	ba d4 03 00 00       	mov    edx,0x3d4
c000f9b5:	ee                   	out    dx,al
c000f9b6:	b0 20                	mov    al,0x20
c000f9b8:	ba d5 03 00 00       	mov    edx,0x3d5
c000f9bd:	ee                   	out    dx,al
c000f9be:	5b                   	pop    ebx
c000f9bf:	5e                   	pop    esi
c000f9c0:	c3                   	ret    

c000f9c1 <hwTextMode_update(VgaText*)>:
c000f9c1:	c3                   	ret    

c000f9c2 <hwTextMode_updateCursor(VgaText*)>:
c000f9c2:	56                   	push   esi
c000f9c3:	80 3d a0 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e4a0,0x0
c000f9ca:	53                   	push   ebx
c000f9cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f9cf:	75 3f                	jne    c000fa10 <hwTextMode_updateCursor(VgaText*)+0x4e>
c000f9d1:	be d4 03 00 00       	mov    esi,0x3d4
c000f9d6:	b9 19 00 00 00       	mov    ecx,0x19
c000f9db:	89 f2                	mov    edx,esi
c000f9dd:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f9e3:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f9e9:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f9ec:	c1 e1 04             	shl    ecx,0x4
c000f9ef:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f9f5:	b0 0f                	mov    al,0xf
c000f9f7:	ee                   	out    dx,al
c000f9f8:	bb d5 03 00 00       	mov    ebx,0x3d5
c000f9fd:	88 c8                	mov    al,cl
c000f9ff:	89 da                	mov    edx,ebx
c000fa01:	ee                   	out    dx,al
c000fa02:	b0 0e                	mov    al,0xe
c000fa04:	89 f2                	mov    edx,esi
c000fa06:	ee                   	out    dx,al
c000fa07:	89 c8                	mov    eax,ecx
c000fa09:	89 da                	mov    edx,ebx
c000fa0b:	66 c1 e8 08          	shr    ax,0x8
c000fa0f:	ee                   	out    dx,al
c000fa10:	5b                   	pop    ebx
c000fa11:	5e                   	pop    esi
c000fa12:	c3                   	ret    

c000fa13 <hwTextMode_disableBlink(VgaText*, bool)>:
c000fa13:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa17:	80 3d a0 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e4a0,0x0
c000fa1e:	75 38                	jne    c000fa58 <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000fa20:	ba da 03 00 00       	mov    edx,0x3da
c000fa25:	84 c0                	test   al,al
c000fa27:	75 18                	jne    c000fa41 <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000fa29:	ec                   	in     al,dx
c000fa2a:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa2f:	b0 30                	mov    al,0x30
c000fa31:	89 ca                	mov    edx,ecx
c000fa33:	ee                   	out    dx,al
c000fa34:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa39:	ec                   	in     al,dx
c000fa3a:	83 c8 08             	or     eax,0x8
c000fa3d:	89 ca                	mov    edx,ecx
c000fa3f:	ee                   	out    dx,al
c000fa40:	c3                   	ret    
c000fa41:	ec                   	in     al,dx
c000fa42:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa47:	b0 30                	mov    al,0x30
c000fa49:	89 ca                	mov    edx,ecx
c000fa4b:	ee                   	out    dx,al
c000fa4c:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa51:	ec                   	in     al,dx
c000fa52:	83 e0 f7             	and    eax,0xfffffff7
c000fa55:	89 ca                	mov    edx,ecx
c000fa57:	ee                   	out    dx,al
c000fa58:	c3                   	ret    

c000fa59 <hwTextMode_scrollScreen(VgaText*)>:
c000fa59:	55                   	push   ebp
c000fa5a:	57                   	push   edi
c000fa5b:	56                   	push   esi
c000fa5c:	53                   	push   ebx
c000fa5d:	83 ec 1c             	sub    esp,0x1c
c000fa60:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fa64:	80 3d a0 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e4a0,0x0
c000fa6b:	74 14                	je     c000fa81 <hwTextMode_scrollScreen(VgaText*)+0x28>
c000fa6d:	c7 81 d0 0f 00 00 02 00 00 00 	mov    DWORD PTR [ecx+0xfd0],0x2
c000fa77:	c7 81 cc 0f 00 00 00 00 00 00 	mov    DWORD PTR [ecx+0xfcc],0x0
c000fa81:	a1 40 d3 02 c0       	mov    eax,ds:0xc002d340
c000fa86:	bd 02 00 00 00       	mov    ebp,0x2
c000fa8b:	05 a0 00 00 00       	add    eax,0xa0
c000fa90:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fa94:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fa98:	31 c0                	xor    eax,eax
c000fa9a:	eb 0b                	jmp    c000faa7 <hwTextMode_scrollScreen(VgaText*)+0x4e>
c000fa9c:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faa2:	74 57                	je     c000fafb <hwTextMode_scrollScreen(VgaText*)+0xa2>
c000faa4:	43                   	inc    ebx
c000faa5:	89 f0                	mov    eax,esi
c000faa7:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000faad:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000fab3:	88 13                	mov    BYTE PTR [ebx],dl
c000fab5:	8d 70 01             	lea    esi,[eax+0x1]
c000fab8:	83 fd 18             	cmp    ebp,0x18
c000fabb:	75 df                	jne    c000fa9c <hwTextMode_scrollScreen(VgaText*)+0x43>
c000fabd:	a8 01                	test   al,0x1
c000fabf:	75 13                	jne    c000fad4 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000fac1:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000fac4:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faca:	75 d8                	jne    c000faa4 <hwTextMode_scrollScreen(VgaText*)+0x4b>
c000facc:	83 c4 1c             	add    esp,0x1c
c000facf:	5b                   	pop    ebx
c000fad0:	5e                   	pop    esi
c000fad1:	5f                   	pop    edi
c000fad2:	5d                   	pop    ebp
c000fad3:	c3                   	ret    
c000fad4:	83 ec 08             	sub    esp,0x8
c000fad7:	0f b6 81 cc 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfcc]
c000fade:	50                   	push   eax
c000fadf:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000fae3:	0f b6 81 d0 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfd0]
c000faea:	50                   	push   eax
c000faeb:	e8 b2 0c 00 00       	call   c00107a2 <VgaText::combineColours(unsigned char, unsigned char)>
c000faf0:	83 c4 10             	add    esp,0x10
c000faf3:	88 07                	mov    BYTE PTR [edi],al
c000faf5:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000faf9:	eb c9                	jmp    c000fac4 <hwTextMode_scrollScreen(VgaText*)+0x6b>
c000fafb:	45                   	inc    ebp
c000fafc:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000fb04:	eb 8e                	jmp    c000fa94 <hwTextMode_scrollScreen(VgaText*)+0x3b>

c000fb06 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000fb06:	57                   	push   edi
c000fb07:	80 3d a0 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e4a0,0x0
c000fb0e:	56                   	push   esi
c000fb0f:	53                   	push   ebx
c000fb10:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fb14:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000fb18:	75 65                	jne    c000fb7f <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x79>
c000fb1a:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000fb1f:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000fb24:	83 ec 08             	sub    esp,0x8
c000fb27:	52                   	push   edx
c000fb28:	50                   	push   eax
c000fb29:	e8 74 0c 00 00       	call   c00107a2 <VgaText::combineColours(unsigned char, unsigned char)>
c000fb2e:	5a                   	pop    edx
c000fb2f:	0f b6 c0             	movzx  eax,al
c000fb32:	59                   	pop    ecx
c000fb33:	50                   	push   eax
c000fb34:	0f be c3             	movsx  eax,bl
c000fb37:	50                   	push   eax
c000fb38:	e8 0b 0d 00 00       	call   c0010848 <VgaText::combineCharAndColour(char, unsigned char)>
c000fb3d:	83 c4 10             	add    esp,0x10
c000fb40:	8b 35 40 d3 02 c0    	mov    esi,DWORD PTR ds:0xc002d340
c000fb46:	80 3d a0 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e4a0,0x0
c000fb4d:	74 07                	je     c000fb56 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000fb4f:	66 0f be c3          	movsx  ax,bl
c000fb53:	80 cc 02             	or     ah,0x2
c000fb56:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fb5a:	ba 19 00 00 00       	mov    edx,0x19
c000fb5f:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000fb65:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000fb68:	8d 14 92             	lea    edx,[edx+edx*4]
c000fb6b:	c1 e1 04             	shl    ecx,0x4
c000fb6e:	c1 e2 04             	shl    edx,0x4
c000fb71:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000fb75:	01 ca                	add    edx,ecx
c000fb77:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000fb7b:	5b                   	pop    ebx
c000fb7c:	5e                   	pop    esi
c000fb7d:	5f                   	pop    edi
c000fb7e:	c3                   	ret    
c000fb7f:	b8 02 00 00 00       	mov    eax,0x2
c000fb84:	31 d2                	xor    edx,edx
c000fb86:	eb 9c                	jmp    c000fb24 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000fb88 <setupTextMode()>:
c000fb88:	a1 10 04 00 00       	mov    eax,ds:0x410
c000fb8d:	83 e0 30             	and    eax,0x30
c000fb90:	66 83 f8 30          	cmp    ax,0x30
c000fb94:	75 11                	jne    c000fba7 <setupTextMode()+0x1f>
c000fb96:	81 2d 40 d3 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002d340,0x8000
c000fba0:	c6 05 a0 e4 02 c0 01 	mov    BYTE PTR ds:0xc002e4a0,0x1
c000fba7:	c7 05 d8 e4 02 c0 13 fa 00 c0 	mov    DWORD PTR ds:0xc002e4d8,0xc000fa13
c000fbb1:	c7 05 c4 e4 02 c0 9a f8 00 c0 	mov    DWORD PTR ds:0xc002e4c4,0xc000f89a
c000fbbb:	c7 05 c0 e4 02 c0 e5 f8 00 c0 	mov    DWORD PTR ds:0xc002e4c0,0xc000f8e5
c000fbc5:	c7 05 cc e4 02 c0 59 fa 00 c0 	mov    DWORD PTR ds:0xc002e4cc,0xc000fa59
c000fbcf:	c7 05 d4 e4 02 c0 63 f9 00 c0 	mov    DWORD PTR ds:0xc002e4d4,0xc000f963
c000fbd9:	c7 05 c8 e4 02 c0 c1 f9 00 c0 	mov    DWORD PTR ds:0xc002e4c8,0xc000f9c1
c000fbe3:	c7 05 d0 e4 02 c0 c2 f9 00 c0 	mov    DWORD PTR ds:0xc002e4d0,0xc000f9c2
c000fbed:	c7 05 dc e4 02 c0 06 fb 00 c0 	mov    DWORD PTR ds:0xc002e4dc,0xc000fb06
c000fbf7:	c3                   	ret    

c000fbf8 <kernel_main>:
c000fbf8:	57                   	push   edi
c000fbf9:	bf f9 03 00 00       	mov    edi,0x3f9
c000fbfe:	56                   	push   esi
c000fbff:	31 f6                	xor    esi,esi
c000fc01:	53                   	push   ebx
c000fc02:	83 ec 10             	sub    esp,0x10
c000fc05:	e8 f2 09 00 00       	call   c00105fc <installVgaTextImplementation()>
c000fc0a:	e8 79 ff ff ff       	call   c000fb88 <setupTextMode()>
c000fc0f:	89 f0                	mov    eax,esi
c000fc11:	89 fa                	mov    edx,edi
c000fc13:	ee                   	out    dx,al
c000fc14:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fc19:	b0 80                	mov    al,0x80
c000fc1b:	89 da                	mov    edx,ebx
c000fc1d:	ee                   	out    dx,al
c000fc1e:	b1 03                	mov    cl,0x3
c000fc20:	ba f8 03 00 00       	mov    edx,0x3f8
c000fc25:	88 c8                	mov    al,cl
c000fc27:	ee                   	out    dx,al
c000fc28:	89 f0                	mov    eax,esi
c000fc2a:	89 fa                	mov    edx,edi
c000fc2c:	ee                   	out    dx,al
c000fc2d:	88 c8                	mov    al,cl
c000fc2f:	89 da                	mov    edx,ebx
c000fc31:	ee                   	out    dx,al
c000fc32:	b0 c7                	mov    al,0xc7
c000fc34:	ba fa 03 00 00       	mov    edx,0x3fa
c000fc39:	ee                   	out    dx,al
c000fc3a:	b0 0b                	mov    al,0xb
c000fc3c:	ba fc 03 00 00       	mov    edx,0x3fc
c000fc41:	ee                   	out    dx,al
c000fc42:	83 ec 0c             	sub    esp,0xc
c000fc45:	68 24 a2 02 c0       	push   0xc002a224
c000fc4a:	e8 fb 32 00 00       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c000fc4f:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fc54:	05 ff 0f 00 00       	add    eax,0xfff
c000fc59:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fc5e:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc61:	e8 51 04 00 00       	call   c00100b7 <Phys::physicalMemorySetup(unsigned int)>
c000fc66:	e8 f3 20 00 00       	call   c0011d5e <Virt::virtualMemorySetup()>
c000fc6b:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fc71:	83 c4 10             	add    esp,0x10
c000fc74:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fc7a:	75 0e                	jne    c000fc8a <kernel_main+0x92>
c000fc7c:	89 d8                	mov    eax,ebx
c000fc7e:	25 48 03 00 00       	and    eax,0x348
c000fc83:	3d 00 03 00 00       	cmp    eax,0x300
c000fc88:	74 10                	je     c000fc9a <kernel_main+0xa2>
c000fc8a:	83 ec 0c             	sub    esp,0xc
c000fc8d:	68 fd ba 02 c0       	push   0xc002bafd
c000fc92:	e8 64 a9 00 00       	call   c001a5fb <Krnl::panic(char const*)>
c000fc97:	83 c4 10             	add    esp,0x10
c000fc9a:	83 ec 0c             	sub    esp,0xc
c000fc9d:	89 1d 20 e4 02 c0    	mov    DWORD PTR ds:0xc002e420,ebx
c000fca3:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000fca7:	53                   	push   ebx
c000fca8:	e8 c3 22 00 00       	call   c0011f70 <VAS::VAS()>
c000fcad:	89 1d 8c e5 02 c0    	mov    DWORD PTR ds:0xc002e58c,ebx
c000fcb3:	e8 68 03 ff ff       	call   c0000020 <callGlobalConstructors>
c000fcb8:	c7 04 24 3b a2 02 c0 	mov    DWORD PTR [esp],0xc002a23b
c000fcbf:	e8 86 32 00 00       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c000fcc4:	e8 14 21 00 00       	call   c0011ddd <Virt::swappingSetup()>
c000fcc9:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fcd0:	e8 6b fb ff ff       	call   c000f840 <malloc>
c000fcd5:	89 04 24             	mov    DWORD PTR [esp],eax
c000fcd8:	89 c6                	mov    esi,eax
c000fcda:	e8 5b ea ff ff       	call   c000e73a <Computer::Computer()>
c000fcdf:	58                   	pop    eax
c000fce0:	89 35 08 e4 02 c0    	mov    DWORD PTR ds:0xc002e408,esi
c000fce6:	5a                   	pop    edx
c000fce7:	56                   	push   esi
c000fce8:	68 58 a2 02 c0       	push   0xc002a258
c000fced:	e8 58 32 00 00       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c000fcf2:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c000fcf7:	8b 10                	mov    edx,DWORD PTR [eax]
c000fcf9:	6a 00                	push   0x0
c000fcfb:	6a 00                	push   0x0
c000fcfd:	6a 00                	push   0x0
c000fcff:	50                   	push   eax
c000fd00:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fd03:	83 c4 14             	add    esp,0x14
c000fd06:	53                   	push   ebx
c000fd07:	e8 fe 24 00 00       	call   c001220a <VAS::~VAS()>
c000fd0c:	c7 04 24 6b a2 02 c0 	mov    DWORD PTR [esp],0xc002a26b
c000fd13:	e8 e3 a8 00 00       	call   c001a5fb <Krnl::panic(char const*)>
c000fd18:	83 c4 20             	add    esp,0x20
c000fd1b:	5b                   	pop    ebx
c000fd1c:	5e                   	pop    esi
c000fd1d:	5f                   	pop    edi
c000fd1e:	c3                   	ret    

c000fd1f <Phys::allocateDMA(unsigned long)>:
c000fd1f:	55                   	push   ebp
c000fd20:	31 d2                	xor    edx,edx
c000fd22:	57                   	push   edi
c000fd23:	31 ed                	xor    ebp,ebp
c000fd25:	56                   	push   esi
c000fd26:	31 c9                	xor    ecx,ecx
c000fd28:	53                   	push   ebx
c000fd29:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd2d:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fd33:	31 c0                	xor    eax,eax
c000fd35:	c1 ee 0c             	shr    esi,0xc
c000fd38:	eb 17                	jmp    c000fd51 <Phys::allocateDMA(unsigned long)+0x32>
c000fd3a:	85 c9                	test   ecx,ecx
c000fd3c:	75 04                	jne    c000fd42 <Phys::allocateDMA(unsigned long)+0x23>
c000fd3e:	89 d5                	mov    ebp,edx
c000fd40:	89 d0                	mov    eax,edx
c000fd42:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fd45:	39 de                	cmp    esi,ebx
c000fd47:	74 20                	je     c000fd69 <Phys::allocateDMA(unsigned long)+0x4a>
c000fd49:	42                   	inc    edx
c000fd4a:	89 d9                	mov    ecx,ebx
c000fd4c:	83 fa 2f             	cmp    edx,0x2f
c000fd4f:	7f 11                	jg     c000fd62 <Phys::allocateDMA(unsigned long)+0x43>
c000fd51:	80 ba 60 e4 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd1ba0],0x0
c000fd58:	74 e0                	je     c000fd3a <Phys::allocateDMA(unsigned long)+0x1b>
c000fd5a:	31 c9                	xor    ecx,ecx
c000fd5c:	42                   	inc    edx
c000fd5d:	83 fa 2f             	cmp    edx,0x2f
c000fd60:	7e ef                	jle    c000fd51 <Phys::allocateDMA(unsigned long)+0x32>
c000fd62:	5b                   	pop    ebx
c000fd63:	31 c0                	xor    eax,eax
c000fd65:	5e                   	pop    esi
c000fd66:	5f                   	pop    edi
c000fd67:	5d                   	pop    ebp
c000fd68:	c3                   	ret    
c000fd69:	8d 14 30             	lea    edx,[eax+esi*1]
c000fd6c:	89 d7                	mov    edi,edx
c000fd6e:	4f                   	dec    edi
c000fd6f:	79 03                	jns    c000fd74 <Phys::allocateDMA(unsigned long)+0x55>
c000fd71:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fd74:	c1 ff 04             	sar    edi,0x4
c000fd77:	89 c2                	mov    edx,eax
c000fd79:	c1 fa 04             	sar    edx,0x4
c000fd7c:	39 fa                	cmp    edx,edi
c000fd7e:	75 2f                	jne    c000fdaf <Phys::allocateDMA(unsigned long)+0x90>
c000fd80:	85 db                	test   ebx,ebx
c000fd82:	74 1a                	je     c000fd9e <Phys::allocateDMA(unsigned long)+0x7f>
c000fd84:	be 60 e4 02 c0       	mov    esi,0xc002e460
c000fd89:	8d 90 60 e4 02 c0    	lea    edx,[eax-0x3ffd1ba0]
c000fd8f:	f7 d6                	not    esi
c000fd91:	29 c6                	sub    esi,eax
c000fd93:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fd96:	42                   	inc    edx
c000fd97:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fd9a:	39 d9                	cmp    ecx,ebx
c000fd9c:	7f f5                	jg     c000fd93 <Phys::allocateDMA(unsigned long)+0x74>
c000fd9e:	85 ff                	test   edi,edi
c000fda0:	74 13                	je     c000fdb5 <Phys::allocateDMA(unsigned long)+0x96>
c000fda2:	5b                   	pop    ebx
c000fda3:	05 50 20 0c 00       	add    eax,0xc2050
c000fda8:	5e                   	pop    esi
c000fda9:	c1 e0 0c             	shl    eax,0xc
c000fdac:	5f                   	pop    edi
c000fdad:	5d                   	pop    ebp
c000fdae:	c3                   	ret    
c000fdaf:	89 ea                	mov    edx,ebp
c000fdb1:	31 c9                	xor    ecx,ecx
c000fdb3:	eb a7                	jmp    c000fd5c <Phys::allocateDMA(unsigned long)+0x3d>
c000fdb5:	5b                   	pop    ebx
c000fdb6:	c1 e0 0c             	shl    eax,0xc
c000fdb9:	5e                   	pop    esi
c000fdba:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fdbf:	5f                   	pop    edi
c000fdc0:	5d                   	pop    ebp
c000fdc1:	c3                   	ret    

c000fdc2 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fdc2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdc6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fdca:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fdd0:	c1 e9 0c             	shr    ecx,0xc
c000fdd3:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fdd8:	76 25                	jbe    c000fdff <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fdda:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fddf:	c1 e8 0c             	shr    eax,0xc
c000fde2:	8d 50 10             	lea    edx,[eax+0x10]
c000fde5:	85 c9                	test   ecx,ecx
c000fde7:	74 15                	je     c000fdfe <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fde9:	8d 82 60 e4 02 c0    	lea    eax,[edx-0x3ffd1ba0]
c000fdef:	8d 94 11 60 e4 02 c0 	lea    edx,[ecx+edx*1-0x3ffd1ba0]
c000fdf6:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fdf9:	40                   	inc    eax
c000fdfa:	39 d0                	cmp    eax,edx
c000fdfc:	75 f8                	jne    c000fdf6 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fdfe:	c3                   	ret    
c000fdff:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fe05:	c1 ea 0c             	shr    edx,0xc
c000fe08:	eb db                	jmp    c000fde5 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fe0a <Phys::setPageState(unsigned long, bool)>:
c000fe0a:	56                   	push   esi
c000fe0b:	ba 01 00 00 00       	mov    edx,0x1
c000fe10:	53                   	push   ebx
c000fe11:	8b 35 30 d3 02 c0    	mov    esi,DWORD PTR ds:0xc002d330
c000fe17:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe1b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe1f:	89 c8                	mov    eax,ecx
c000fe21:	83 e1 07             	and    ecx,0x7
c000fe24:	c1 e8 03             	shr    eax,0x3
c000fe27:	d3 e3                	shl    ebx,cl
c000fe29:	01 c6                	add    esi,eax
c000fe2b:	d3 e2                	shl    edx,cl
c000fe2d:	f7 d2                	not    edx
c000fe2f:	20 16                	and    BYTE PTR [esi],dl
c000fe31:	03 05 30 d3 02 c0    	add    eax,DWORD PTR ds:0xc002d330
c000fe37:	08 18                	or     BYTE PTR [eax],bl
c000fe39:	5b                   	pop    ebx
c000fe3a:	5e                   	pop    esi
c000fe3b:	c3                   	ret    

c000fe3c <Phys::getPageState(unsigned long)>:
c000fe3c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe40:	8b 15 30 d3 02 c0    	mov    edx,DWORD PTR ds:0xc002d330
c000fe46:	89 c8                	mov    eax,ecx
c000fe48:	83 e1 07             	and    ecx,0x7
c000fe4b:	c1 e8 03             	shr    eax,0x3
c000fe4e:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fe52:	d3 f8                	sar    eax,cl
c000fe54:	83 e0 01             	and    eax,0x1
c000fe57:	c3                   	ret    

c000fe58 <Phys::freePage(unsigned long)>:
c000fe58:	53                   	push   ebx
c000fe59:	83 ec 08             	sub    esp,0x8
c000fe5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe60:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fe66:	76 57                	jbe    c000febf <Phys::freePage(unsigned long)+0x67>
c000fe68:	c1 eb 0c             	shr    ebx,0xc
c000fe6b:	53                   	push   ebx
c000fe6c:	e8 cb ff ff ff       	call   c000fe3c <Phys::getPageState(unsigned long)>
c000fe71:	5a                   	pop    edx
c000fe72:	84 c0                	test   al,al
c000fe74:	74 5b                	je     c000fed1 <Phys::freePage(unsigned long)+0x79>
c000fe76:	a1 50 e4 02 c0       	mov    eax,ds:0xc002e450
c000fe7b:	48                   	dec    eax
c000fe7c:	a3 50 e4 02 c0       	mov    ds:0xc002e450,eax
c000fe81:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe84:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe87:	c1 e0 02             	shl    eax,0x2
c000fe8a:	99                   	cdq    
c000fe8b:	f7 3d 54 e4 02 c0    	idiv   DWORD PTR ds:0xc002e454
c000fe91:	39 05 4c e4 02 c0    	cmp    DWORD PTR ds:0xc002e44c,eax
c000fe97:	75 13                	jne    c000feac <Phys::freePage(unsigned long)+0x54>
c000fe99:	83 ec 08             	sub    esp,0x8
c000fe9c:	6a 00                	push   0x0
c000fe9e:	53                   	push   ebx
c000fe9f:	e8 66 ff ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c000fea4:	83 c4 10             	add    esp,0x10
c000fea7:	83 c4 08             	add    esp,0x8
c000feaa:	5b                   	pop    ebx
c000feab:	c3                   	ret    
c000feac:	83 ec 0c             	sub    esp,0xc
c000feaf:	a3 4c e4 02 c0       	mov    ds:0xc002e44c,eax
c000feb4:	50                   	push   eax
c000feb5:	e8 d6 0a 00 00       	call   c0010990 <VgaText::updateRAMUsageDisplay(int)>
c000feba:	83 c4 10             	add    esp,0x10
c000febd:	eb da                	jmp    c000fe99 <Phys::freePage(unsigned long)+0x41>
c000febf:	68 00 10 00 00       	push   0x1000
c000fec4:	53                   	push   ebx
c000fec5:	e8 f8 fe ff ff       	call   c000fdc2 <Phys::freeDMA(unsigned long, unsigned long)>
c000feca:	59                   	pop    ecx
c000fecb:	5b                   	pop    ebx
c000fecc:	83 c4 08             	add    esp,0x8
c000fecf:	5b                   	pop    ebx
c000fed0:	c3                   	ret    
c000fed1:	c7 44 24 10 86 a2 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a286
c000fed9:	83 c4 08             	add    esp,0x8
c000fedc:	5b                   	pop    ebx
c000fedd:	e9 19 a7 00 00       	jmp    c001a5fb <Krnl::panic(char const*)>

c000fee2 <Phys::allocatePage()>:
c000fee2:	56                   	push   esi
c000fee3:	53                   	push   ebx
c000fee4:	83 ec 14             	sub    esp,0x14
c000fee7:	8b 35 44 e4 02 c0    	mov    esi,DWORD PTR ds:0xc002e444
c000feed:	89 f3                	mov    ebx,esi
c000feef:	eb 0a                	jmp    c000fefb <Phys::allocatePage()+0x19>
c000fef1:	89 1d 44 e4 02 c0    	mov    DWORD PTR ds:0xc002e444,ebx
c000fef7:	39 de                	cmp    esi,ebx
c000fef9:	74 24                	je     c000ff1f <Phys::allocatePage()+0x3d>
c000fefb:	53                   	push   ebx
c000fefc:	e8 3b ff ff ff       	call   c000fe3c <Phys::getPageState(unsigned long)>
c000ff01:	5a                   	pop    edx
c000ff02:	84 c0                	test   al,al
c000ff04:	74 5e                	je     c000ff64 <Phys::allocatePage()+0x82>
c000ff06:	43                   	inc    ebx
c000ff07:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ff0d:	75 e2                	jne    c000fef1 <Phys::allocatePage()+0xf>
c000ff0f:	31 db                	xor    ebx,ebx
c000ff11:	c7 05 44 e4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e444,0x0
c000ff1b:	39 de                	cmp    esi,ebx
c000ff1d:	75 dc                	jne    c000fefb <Phys::allocatePage()+0x19>
c000ff1f:	83 ec 0c             	sub    esp,0xc
c000ff22:	68 9c a2 02 c0       	push   0xc002a29c
c000ff27:	e8 1e 30 00 00       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c000ff2c:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000ff33:	e8 e7 fd ff ff       	call   c000fd1f <Phys::allocateDMA(unsigned long)>
c000ff38:	83 c4 10             	add    esp,0x10
c000ff3b:	85 c0                	test   eax,eax
c000ff3d:	0f 85 a9 00 00 00    	jne    c000ffec <Phys::allocatePage()+0x10a>
c000ff43:	83 ec 0c             	sub    esp,0xc
c000ff46:	68 ad a2 02 c0       	push   0xc002a2ad
c000ff4b:	e8 ab a6 00 00       	call   c001a5fb <Krnl::panic(char const*)>
c000ff50:	83 c4 10             	add    esp,0x10
c000ff53:	8b 1d 44 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e444
c000ff59:	53                   	push   ebx
c000ff5a:	e8 dd fe ff ff       	call   c000fe3c <Phys::getPageState(unsigned long)>
c000ff5f:	5a                   	pop    edx
c000ff60:	84 c0                	test   al,al
c000ff62:	75 a2                	jne    c000ff06 <Phys::allocatePage()+0x24>
c000ff64:	6a 01                	push   0x1
c000ff66:	53                   	push   ebx
c000ff67:	e8 9e fe ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c000ff6c:	a1 50 e4 02 c0       	mov    eax,ds:0xc002e450
c000ff71:	59                   	pop    ecx
c000ff72:	40                   	inc    eax
c000ff73:	5b                   	pop    ebx
c000ff74:	a3 50 e4 02 c0       	mov    ds:0xc002e450,eax
c000ff79:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff7c:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff7f:	c1 e0 02             	shl    eax,0x2
c000ff82:	99                   	cdq    
c000ff83:	f7 3d 54 e4 02 c0    	idiv   DWORD PTR ds:0xc002e454
c000ff89:	39 05 4c e4 02 c0    	cmp    DWORD PTR ds:0xc002e44c,eax
c000ff8f:	75 61                	jne    c000fff2 <Phys::allocatePage()+0x110>
c000ff91:	83 f8 32             	cmp    eax,0x32
c000ff94:	7e 4e                	jle    c000ffe4 <Phys::allocatePage()+0x102>
c000ff96:	80 3d 40 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e440,0x0
c000ff9d:	75 45                	jne    c000ffe4 <Phys::allocatePage()+0x102>
c000ff9f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ffa4:	85 c0                	test   eax,eax
c000ffa6:	74 1f                	je     c000ffc7 <Phys::allocatePage()+0xe5>
c000ffa8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ffab:	85 c0                	test   eax,eax
c000ffad:	74 18                	je     c000ffc7 <Phys::allocatePage()+0xe5>
c000ffaf:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000ffb5:	85 c0                	test   eax,eax
c000ffb7:	74 0e                	je     c000ffc7 <Phys::allocatePage()+0xe5>
c000ffb9:	52                   	push   edx
c000ffba:	6a 04                	push   0x4
c000ffbc:	6a 08                	push   0x8
c000ffbe:	50                   	push   eax
c000ffbf:	e8 ae 2c 00 00       	call   c0012c72 <VAS::scanForEviction(int, int)>
c000ffc4:	83 c4 10             	add    esp,0x10
c000ffc7:	a1 50 e4 02 c0       	mov    eax,ds:0xc002e450
c000ffcc:	8d 04 80             	lea    eax,[eax+eax*4]
c000ffcf:	8d 04 80             	lea    eax,[eax+eax*4]
c000ffd2:	c1 e0 02             	shl    eax,0x2
c000ffd5:	99                   	cdq    
c000ffd6:	f7 3d 54 e4 02 c0    	idiv   DWORD PTR ds:0xc002e454
c000ffdc:	39 05 4c e4 02 c0    	cmp    DWORD PTR ds:0xc002e44c,eax
c000ffe2:	75 2e                	jne    c0010012 <Phys::allocatePage()+0x130>
c000ffe4:	a1 44 e4 02 c0       	mov    eax,ds:0xc002e444
c000ffe9:	c1 e0 0c             	shl    eax,0xc
c000ffec:	83 c4 14             	add    esp,0x14
c000ffef:	5b                   	pop    ebx
c000fff0:	5e                   	pop    esi
c000fff1:	c3                   	ret    
c000fff2:	83 ec 0c             	sub    esp,0xc
c000fff5:	a3 4c e4 02 c0       	mov    ds:0xc002e44c,eax
c000fffa:	50                   	push   eax
c000fffb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ffff:	e8 8c 09 00 00       	call   c0010990 <VgaText::updateRAMUsageDisplay(int)>
c0010004:	83 c4 10             	add    esp,0x10
c0010007:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001000b:	83 f8 32             	cmp    eax,0x32
c001000e:	7e d4                	jle    c000ffe4 <Phys::allocatePage()+0x102>
c0010010:	eb 84                	jmp    c000ff96 <Phys::allocatePage()+0xb4>
c0010012:	83 ec 0c             	sub    esp,0xc
c0010015:	a3 4c e4 02 c0       	mov    ds:0xc002e44c,eax
c001001a:	50                   	push   eax
c001001b:	e8 70 09 00 00       	call   c0010990 <VgaText::updateRAMUsageDisplay(int)>
c0010020:	83 c4 10             	add    esp,0x10
c0010023:	eb bf                	jmp    c000ffe4 <Phys::allocatePage()+0x102>

c0010025 <Phys::allocateContiguousPages(int)>:
c0010025:	57                   	push   edi
c0010026:	56                   	push   esi
c0010027:	53                   	push   ebx
c0010028:	31 db                	xor    ebx,ebx
c001002a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001002e:	e8 a3 dd 00 00       	call   c001ddd6 <lockScheduler()>
c0010033:	85 db                	test   ebx,ebx
c0010035:	75 11                	jne    c0010048 <Phys::allocateContiguousPages(int)+0x23>
c0010037:	e8 a6 fe ff ff       	call   c000fee2 <Phys::allocatePage()>
c001003c:	83 ff 01             	cmp    edi,0x1
c001003f:	89 c6                	mov    esi,eax
c0010041:	74 21                	je     c0010064 <Phys::allocateContiguousPages(int)+0x3f>
c0010043:	bb 01 00 00 00       	mov    ebx,0x1
c0010048:	e8 95 fe ff ff       	call   c000fee2 <Phys::allocatePage()>
c001004d:	89 da                	mov    edx,ebx
c001004f:	c1 e2 0c             	shl    edx,0xc
c0010052:	01 f2                	add    edx,esi
c0010054:	39 c2                	cmp    edx,eax
c0010056:	74 17                	je     c001006f <Phys::allocateContiguousPages(int)+0x4a>
c0010058:	bb 01 00 00 00       	mov    ebx,0x1
c001005d:	89 c6                	mov    esi,eax
c001005f:	83 ff 01             	cmp    edi,0x1
c0010062:	75 e4                	jne    c0010048 <Phys::allocateContiguousPages(int)+0x23>
c0010064:	e8 6f dd 00 00       	call   c001ddd8 <unlockScheduler()>
c0010069:	89 f0                	mov    eax,esi
c001006b:	5b                   	pop    ebx
c001006c:	5e                   	pop    esi
c001006d:	5f                   	pop    edi
c001006e:	c3                   	ret    
c001006f:	43                   	inc    ebx
c0010070:	39 fb                	cmp    ebx,edi
c0010072:	75 bf                	jne    c0010033 <Phys::allocateContiguousPages(int)+0xe>
c0010074:	e8 5f dd 00 00       	call   c001ddd8 <unlockScheduler()>
c0010079:	89 f0                	mov    eax,esi
c001007b:	5b                   	pop    ebx
c001007c:	5e                   	pop    esi
c001007d:	5f                   	pop    edi
c001007e:	c3                   	ret    

c001007f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c001007f:	56                   	push   esi
c0010080:	53                   	push   ebx
c0010081:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010085:	39 1d 48 e4 02 c0    	cmp    DWORD PTR ds:0xc002e448,ebx
c001008b:	73 06                	jae    c0010093 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c001008d:	89 1d 48 e4 02 c0    	mov    DWORD PTR ds:0xc002e448,ebx
c0010093:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010097:	c1 eb 0c             	shr    ebx,0xc
c001009a:	c1 e8 0c             	shr    eax,0xc
c001009d:	39 d8                	cmp    eax,ebx
c001009f:	73 13                	jae    c00100b4 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c00100a1:	6a 00                	push   0x0
c00100a3:	8d 70 01             	lea    esi,[eax+0x1]
c00100a6:	50                   	push   eax
c00100a7:	e8 5e fd ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c00100ac:	5a                   	pop    edx
c00100ad:	89 f0                	mov    eax,esi
c00100af:	59                   	pop    ecx
c00100b0:	39 f3                	cmp    ebx,esi
c00100b2:	75 ed                	jne    c00100a1 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c00100b4:	5b                   	pop    ebx
c00100b5:	5e                   	pop    esi
c00100b6:	c3                   	ret    

c00100b7 <Phys::physicalMemorySetup(unsigned int)>:
c00100b7:	55                   	push   ebp
c00100b8:	57                   	push   edi
c00100b9:	56                   	push   esi
c00100ba:	53                   	push   ebx
c00100bb:	31 db                	xor    ebx,ebx
c00100bd:	83 ec 40             	sub    esp,0x40
c00100c0:	6a 30                	push   0x30
c00100c2:	6a 00                	push   0x0
c00100c4:	68 60 e4 02 c0       	push   0xc002e460
c00100c9:	e8 aa 06 ff ff       	call   c0000778 <memset>
c00100ce:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00100d2:	25 00 f0 ff ff       	and    eax,0xfffff000
c00100d7:	05 00 10 00 00       	add    eax,0x1000
c00100dc:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00100e0:	83 c4 10             	add    esp,0x10
c00100e3:	83 ec 08             	sub    esp,0x8
c00100e6:	6a 01                	push   0x1
c00100e8:	53                   	push   ebx
c00100e9:	43                   	inc    ebx
c00100ea:	e8 1b fd ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c00100ef:	83 c4 10             	add    esp,0x10
c00100f2:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00100f8:	75 e9                	jne    c00100e3 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c00100fa:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c0010101:	66 85 c0             	test   ax,ax
c0010104:	0f 84 8e 01 00 00    	je     c0010298 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c001010a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001010e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010116:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001011a:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c001011f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010123:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001012b:	eb 15                	jmp    c0010142 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c001012d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0010131:	83 c3 18             	add    ebx,0x18
c0010134:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010138:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001013c:	0f 84 66 01 00 00    	je     c00102a8 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c0010142:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0010145:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010148:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001014b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001014f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010153:	8b 33                	mov    esi,DWORD PTR [ebx]
c0010155:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0010158:	01 f0                	add    eax,esi
c001015a:	55                   	push   ebp
c001015b:	11 fa                	adc    edx,edi
c001015d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010161:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0010165:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0010169:	56                   	push   esi
c001016a:	68 e8 a2 02 c0       	push   0xc002a2e8
c001016f:	e8 d6 2d 00 00       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0010174:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010178:	83 c4 10             	add    esp,0x10
c001017b:	09 f8                	or     eax,edi
c001017d:	0f 85 25 01 00 00    	jne    c00102a8 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c0010183:	4d                   	dec    ebp
c0010184:	75 a7                	jne    c001012d <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010186:	ba 00 00 08 00       	mov    edx,0x80000
c001018b:	89 c1                	mov    ecx,eax
c001018d:	39 f2                	cmp    edx,esi
c001018f:	19 f9                	sbb    ecx,edi
c0010191:	0f 82 a7 00 00 00    	jb     c001023e <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010197:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c001019b:	89 c1                	mov    ecx,eax
c001019d:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c00101a1:	0f 83 97 00 00 00    	jae    c001023e <Phys::physicalMemorySetup(unsigned int)+0x187>
c00101a7:	ba 00 00 0a 00       	mov    edx,0xa0000
c00101ac:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00101b0:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00101b4:	39 fa                	cmp    edx,edi
c00101b6:	19 e8                	sbb    eax,ebp
c00101b8:	0f 82 14 01 00 00    	jb     c00102d2 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c00101be:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00101c2:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00101c6:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c00101cc:	ba ff 1f 00 00       	mov    edx,0x1fff
c00101d1:	83 d5 ff             	adc    ebp,0xffffffff
c00101d4:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00101d8:	31 c0                	xor    eax,eax
c00101da:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00101de:	39 fa                	cmp    edx,edi
c00101e0:	89 c1                	mov    ecx,eax
c00101e2:	19 e9                	sbb    ecx,ebp
c00101e4:	0f 83 43 ff ff ff    	jae    c001012d <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101ea:	be 00 00 08 00       	mov    esi,0x80000
c00101ef:	50                   	push   eax
c00101f0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00101f4:	57                   	push   edi
c00101f5:	56                   	push   esi
c00101f6:	68 0c a3 02 c0       	push   0xc002a30c
c00101fb:	e8 4a 2d 00 00       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0010200:	5a                   	pop    edx
c0010201:	59                   	pop    ecx
c0010202:	57                   	push   edi
c0010203:	56                   	push   esi
c0010204:	e8 76 fe ff ff       	call   c001007f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0010209:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001020d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010211:	83 c4 0c             	add    esp,0xc
c0010214:	0f ac d0 0c          	shrd   eax,edx,0xc
c0010218:	03 05 54 e4 02 c0    	add    eax,DWORD PTR ds:0xc002e454
c001021e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010225:	a3 54 e4 02 c0       	mov    ds:0xc002e454,eax
c001022a:	52                   	push   edx
c001022b:	50                   	push   eax
c001022c:	68 c9 a2 02 c0       	push   0xc002a2c9
c0010231:	e8 14 2d 00 00       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0010236:	83 c4 10             	add    esp,0x10
c0010239:	e9 ef fe ff ff       	jmp    c001012d <Phys::physicalMemorySetup(unsigned int)+0x76>
c001023e:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0010242:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010246:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001024a:	39 ea                	cmp    edx,ebp
c001024c:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0010250:	0f 82 d7 fe ff ff    	jb     c001012d <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010256:	ba ff 1f 00 00       	mov    edx,0x1fff
c001025b:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c001025f:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0010263:	0f 83 c4 fe ff ff    	jae    c001012d <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010269:	39 ee                	cmp    esi,ebp
c001026b:	89 f8                	mov    eax,edi
c001026d:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0010271:	0f 83 78 ff ff ff    	jae    c00101ef <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010277:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001027b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001027f:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0010283:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010287:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c001028b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001028f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010293:	e9 57 ff ff ff       	jmp    c00101ef <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010298:	83 ec 0c             	sub    esp,0xc
c001029b:	68 bb a2 02 c0       	push   0xc002a2bb
c00102a0:	e8 56 a3 00 00       	call   c001a5fb <Krnl::panic(char const*)>
c00102a5:	83 c4 10             	add    esp,0x10
c00102a8:	bb 40 01 00 00       	mov    ebx,0x140
c00102ad:	83 ec 08             	sub    esp,0x8
c00102b0:	6a 00                	push   0x0
c00102b2:	53                   	push   ebx
c00102b3:	43                   	inc    ebx
c00102b4:	e8 51 fb ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c00102b9:	ff 05 54 e4 02 c0    	inc    DWORD PTR ds:0xc002e454
c00102bf:	83 c4 10             	add    esp,0x10
c00102c2:	81 fb 80 01 00 00    	cmp    ebx,0x180
c00102c8:	75 e3                	jne    c00102ad <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c00102ca:	83 c4 3c             	add    esp,0x3c
c00102cd:	5b                   	pop    ebx
c00102ce:	5e                   	pop    esi
c00102cf:	5f                   	pop    edi
c00102d0:	5d                   	pop    ebp
c00102d1:	c3                   	ret    
c00102d2:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c00102da:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00102e2:	e9 d7 fe ff ff       	jmp    c00101be <Phys::physicalMemorySetup(unsigned int)+0x107>
c00102e7:	90                   	nop

c00102e8 <Pipe::isAtty()>:
c00102e8:	31 c0                	xor    eax,eax
c00102ea:	c3                   	ret    
c00102eb:	90                   	nop

c00102ec <Pipe::~Pipe()>:
c00102ec:	83 ec 0c             	sub    esp,0xc
c00102ef:	ba 78 a3 02 c0       	mov    edx,0xc002a378
c00102f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102f8:	89 10                	mov    DWORD PTR [eax],edx
c00102fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102fe:	83 ec 0c             	sub    esp,0xc
c0010301:	50                   	push   eax
c0010302:	e8 37 16 00 00       	call   c001193e <UnixFile::~UnixFile()>
c0010307:	83 c4 10             	add    esp,0x10
c001030a:	90                   	nop
c001030b:	83 c4 0c             	add    esp,0xc
c001030e:	c3                   	ret    
c001030f:	90                   	nop

c0010310 <Pipe::~Pipe()>:
c0010310:	83 ec 0c             	sub    esp,0xc
c0010313:	83 ec 0c             	sub    esp,0xc
c0010316:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001031a:	e8 cd ff ff ff       	call   c00102ec <Pipe::~Pipe()>
c001031f:	83 c4 10             	add    esp,0x10
c0010322:	83 ec 08             	sub    esp,0x8
c0010325:	6a 20                	push   0x20
c0010327:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001032b:	e8 3a 2b 00 00       	call   c0012e6a <operator delete(void*, unsigned long)>
c0010330:	83 c4 10             	add    esp,0x10
c0010333:	83 c4 0c             	add    esp,0xc
c0010336:	c3                   	ret    
c0010337:	90                   	nop

c0010338 <Pipe::read(unsigned long long, void*, int*)>:
c0010338:	55                   	push   ebp
c0010339:	57                   	push   edi
c001033a:	56                   	push   esi
c001033b:	53                   	push   ebx
c001033c:	83 ec 1c             	sub    esp,0x1c
c001033f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010343:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010347:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001034b:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c001034e:	89 c8                	mov    eax,ecx
c0010350:	99                   	cdq    
c0010351:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0010355:	74 19                	je     c0010370 <Pipe::read(unsigned long long, void*, int*)+0x38>
c0010357:	39 f9                	cmp    ecx,edi
c0010359:	89 d1                	mov    ecx,edx
c001035b:	19 f1                	sbb    ecx,esi
c001035d:	73 11                	jae    c0010370 <Pipe::read(unsigned long long, void*, int*)+0x38>
c001035f:	e8 72 da 00 00       	call   c001ddd6 <lockScheduler()>
c0010364:	e8 a9 dd 00 00       	call   c001e112 <schedule()>
c0010369:	e8 6a da 00 00       	call   c001ddd8 <unlockScheduler()>
c001036e:	eb db                	jmp    c001034b <Pipe::read(unsigned long long, void*, int*)+0x13>
c0010370:	39 f8                	cmp    eax,edi
c0010372:	89 d1                	mov    ecx,edx
c0010374:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0010378:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001037c:	19 f1                	sbb    ecx,esi
c001037e:	73 08                	jae    c0010388 <Pipe::read(unsigned long long, void*, int*)+0x50>
c0010380:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010384:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010388:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001038b:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c001038e:	29 c6                	sub    esi,eax
c0010390:	89 f1                	mov    ecx,esi
c0010392:	c1 f9 1f             	sar    ecx,0x1f
c0010395:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0010399:	89 ca                	mov    edx,ecx
c001039b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001039f:	19 d1                	sbb    ecx,edx
c00103a1:	73 04                	jae    c00103a7 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c00103a3:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00103a7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00103ab:	89 fd                	mov    ebp,edi
c00103ad:	29 f5                	sub    ebp,esi
c00103af:	85 f6                	test   esi,esi
c00103b1:	74 12                	je     c00103c5 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c00103b3:	52                   	push   edx
c00103b4:	56                   	push   esi
c00103b5:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c00103b8:	50                   	push   eax
c00103b9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00103bd:	e8 82 03 ff ff       	call   c0000744 <memcpy>
c00103c2:	83 c4 10             	add    esp,0x10
c00103c5:	85 ed                	test   ebp,ebp
c00103c7:	74 12                	je     c00103db <Pipe::read(unsigned long long, void*, int*)+0xa3>
c00103c9:	50                   	push   eax
c00103ca:	55                   	push   ebp
c00103cb:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c00103ce:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c00103d2:	56                   	push   esi
c00103d3:	e8 6c 03 ff ff       	call   c0000744 <memcpy>
c00103d8:	83 c4 10             	add    esp,0x10
c00103db:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c00103de:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00103e1:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00103e4:	99                   	cdq    
c00103e5:	89 f7                	mov    edi,esi
c00103e7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00103eb:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00103ef:	c1 ff 1f             	sar    edi,0x1f
c00103f2:	57                   	push   edi
c00103f3:	56                   	push   esi
c00103f4:	52                   	push   edx
c00103f5:	50                   	push   eax
c00103f6:	e8 b1 66 01 00       	call   c0026aac <__umoddi3>
c00103fb:	83 c4 10             	add    esp,0x10
c00103fe:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0010401:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010406:	75 10                	jne    c0010418 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c0010408:	83 ec 0c             	sub    esp,0xc
c001040b:	68 35 a3 02 c0       	push   0xc002a335
c0010410:	e8 e6 a1 00 00       	call   c001a5fb <Krnl::panic(char const*)>
c0010415:	83 c4 10             	add    esp,0x10
c0010418:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001041c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010420:	89 10                	mov    DWORD PTR [eax],edx
c0010422:	83 c4 1c             	add    esp,0x1c
c0010425:	31 c0                	xor    eax,eax
c0010427:	5b                   	pop    ebx
c0010428:	5e                   	pop    esi
c0010429:	5f                   	pop    edi
c001042a:	5d                   	pop    ebp
c001042b:	c3                   	ret    

c001042c <Pipe::write(unsigned long long, void*, int*)>:
c001042c:	55                   	push   ebp
c001042d:	57                   	push   edi
c001042e:	56                   	push   esi
c001042f:	53                   	push   ebx
c0010430:	83 ec 1c             	sub    esp,0x1c
c0010433:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010437:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001043b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001043f:	89 04 24             	mov    DWORD PTR [esp],eax
c0010442:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0010445:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c0010448:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001044c:	89 de                	mov    esi,ebx
c001044e:	89 df                	mov    edi,ebx
c0010450:	c1 ff 1f             	sar    edi,0x1f
c0010453:	01 c6                	add    esi,eax
c0010455:	89 c8                	mov    eax,ecx
c0010457:	11 d7                	adc    edi,edx
c0010459:	99                   	cdq    
c001045a:	39 f1                	cmp    ecx,esi
c001045c:	89 d0                	mov    eax,edx
c001045e:	19 f8                	sbb    eax,edi
c0010460:	b8 01 00 00 00       	mov    eax,0x1
c0010465:	0f 82 80 00 00 00    	jb     c00104eb <Pipe::write(unsigned long long, void*, int*)+0xbf>
c001046b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001046e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0010471:	01 d8                	add    eax,ebx
c0010473:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0010477:	99                   	cdq    
c0010478:	f7 f9                	idiv   ecx
c001047a:	29 d1                	sub    ecx,edx
c001047c:	89 d7                	mov    edi,edx
c001047e:	89 c8                	mov    eax,ecx
c0010480:	99                   	cdq    
c0010481:	39 ce                	cmp    esi,ecx
c0010483:	19 d3                	sbb    ebx,edx
c0010485:	bb 00 00 00 00       	mov    ebx,0x0
c001048a:	72 04                	jb     c0010490 <Pipe::write(unsigned long long, void*, int*)+0x64>
c001048c:	89 f3                	mov    ebx,esi
c001048e:	29 cb                	sub    ebx,ecx
c0010490:	89 f1                	mov    ecx,esi
c0010492:	29 d9                	sub    ecx,ebx
c0010494:	74 1a                	je     c00104b0 <Pipe::write(unsigned long long, void*, int*)+0x84>
c0010496:	52                   	push   edx
c0010497:	51                   	push   ecx
c0010498:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001049c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00104a0:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00104a3:	57                   	push   edi
c00104a4:	e8 9b 02 ff ff       	call   c0000744 <memcpy>
c00104a9:	83 c4 10             	add    esp,0x10
c00104ac:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00104b0:	85 db                	test   ebx,ebx
c00104b2:	74 12                	je     c00104c6 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c00104b4:	50                   	push   eax
c00104b5:	53                   	push   ebx
c00104b6:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c00104ba:	51                   	push   ecx
c00104bb:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00104be:	e8 81 02 ff ff       	call   c0000744 <memcpy>
c00104c3:	83 c4 10             	add    esp,0x10
c00104c6:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c00104c9:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00104ce:	75 10                	jne    c00104e0 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c00104d0:	83 ec 0c             	sub    esp,0xc
c00104d3:	68 51 a3 02 c0       	push   0xc002a351
c00104d8:	e8 1e a1 00 00       	call   c001a5fb <Krnl::panic(char const*)>
c00104dd:	83 c4 10             	add    esp,0x10
c00104e0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00104e4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00104e7:	89 38                	mov    DWORD PTR [eax],edi
c00104e9:	31 c0                	xor    eax,eax
c00104eb:	83 c4 1c             	add    esp,0x1c
c00104ee:	5b                   	pop    ebx
c00104ef:	5e                   	pop    esi
c00104f0:	5f                   	pop    edi
c00104f1:	5d                   	pop    ebp
c00104f2:	c3                   	ret    
c00104f3:	90                   	nop

c00104f4 <Pipe::Pipe(int)>:
c00104f4:	83 ec 0c             	sub    esp,0xc
c00104f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104fb:	83 ec 08             	sub    esp,0x8
c00104fe:	6a 00                	push   0x0
c0010500:	50                   	push   eax
c0010501:	e8 56 12 00 00       	call   c001175c <UnixFile::UnixFile(int)>
c0010506:	83 c4 10             	add    esp,0x10
c0010509:	ba 78 a3 02 c0       	mov    edx,0xc002a378
c001050e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010512:	89 10                	mov    DWORD PTR [eax],edx
c0010514:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010518:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001051c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001051f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010523:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c001052a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001052e:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0010535:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010539:	83 ec 0c             	sub    esp,0xc
c001053c:	50                   	push   eax
c001053d:	e8 fe f2 ff ff       	call   c000f840 <malloc>
c0010542:	83 c4 10             	add    esp,0x10
c0010545:	89 c2                	mov    edx,eax
c0010547:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001054b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001054e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010552:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0010556:	90                   	nop
c0010557:	83 c4 0c             	add    esp,0xc
c001055a:	c3                   	ret    
c001055b:	90                   	nop

c001055c <VgaText::isAtty()>:
c001055c:	b0 01                	mov    al,0x1
c001055e:	c3                   	ret    
c001055f:	90                   	nop

c0010560 <VgaText::~VgaText()>:
c0010560:	83 ec 0c             	sub    esp,0xc
c0010563:	ba 34 a4 02 c0       	mov    edx,0xc002a434
c0010568:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001056c:	89 10                	mov    DWORD PTR [eax],edx
c001056e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010572:	83 ec 0c             	sub    esp,0xc
c0010575:	50                   	push   eax
c0010576:	e8 c3 13 00 00       	call   c001193e <UnixFile::~UnixFile()>
c001057b:	83 c4 10             	add    esp,0x10
c001057e:	90                   	nop
c001057f:	83 c4 0c             	add    esp,0xc
c0010582:	c3                   	ret    
c0010583:	90                   	nop

c0010584 <VgaText::~VgaText()>:
c0010584:	83 ec 0c             	sub    esp,0xc
c0010587:	83 ec 0c             	sub    esp,0xc
c001058a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001058e:	e8 cd ff ff ff       	call   c0010560 <VgaText::~VgaText()>
c0010593:	83 c4 10             	add    esp,0x10
c0010596:	83 ec 08             	sub    esp,0x8
c0010599:	68 60 12 00 00       	push   0x1260
c001059e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105a2:	e8 c3 28 00 00       	call   c0012e6a <operator delete(void*, unsigned long)>
c00105a7:	83 c4 10             	add    esp,0x10
c00105aa:	83 c4 0c             	add    esp,0xc
c00105ad:	c3                   	ret    

c00105ae <VgaText::read(unsigned long long, void*, int*)>:
c00105ae:	83 ec 10             	sub    esp,0x10
c00105b1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00105b5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00105b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105bd:	e8 3a 5d 00 00       	call   c00162fc <readKeyboard(VgaText*, char*, unsigned long)>
c00105c2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00105c6:	89 02                	mov    DWORD PTR [edx],eax
c00105c8:	31 c0                	xor    eax,eax
c00105ca:	83 c4 1c             	add    esp,0x1c
c00105cd:	c3                   	ret    

c00105ce <setTerminalScrollLock(bool)>:
c00105ce:	c3                   	ret    

c00105cf <addToTerminalCycle(VgaText*)>:
c00105cf:	8b 15 e0 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e4e0
c00105d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105d9:	85 d2                	test   edx,edx
c00105db:	75 0c                	jne    c00105e9 <addToTerminalCycle(VgaText*)+0x1a>
c00105dd:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c00105e3:	a3 e0 e4 02 c0       	mov    ds:0xc002e4e0,eax
c00105e8:	c3                   	ret    
c00105e9:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c00105ef:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c00105f5:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c00105fb:	c3                   	ret    

c00105fc <installVgaTextImplementation()>:
c00105fc:	83 ec 10             	sub    esp,0x10
c00105ff:	6a 20                	push   0x20
c0010601:	6a 00                	push   0x0
c0010603:	68 c0 e4 02 c0       	push   0xc002e4c0
c0010608:	e8 6b 01 ff ff       	call   c0000778 <memset>
c001060d:	83 c4 1c             	add    esp,0x1c
c0010610:	c3                   	ret    

c0010611 <scrollTerminalScrollLock(int)>:
c0010611:	c3                   	ret    

c0010612 <VgaText::load()>:
c0010612:	53                   	push   ebx
c0010613:	31 c0                	xor    eax,eax
c0010615:	83 ec 58             	sub    esp,0x58
c0010618:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c001061c:	89 e2                	mov    edx,esp
c001061e:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c0010622:	40                   	inc    eax
c0010623:	83 f8 50             	cmp    eax,0x50
c0010626:	75 f6                	jne    c001061e <VgaText::load()+0xc>
c0010628:	31 c0                	xor    eax,eax
c001062a:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c0010631:	84 c9                	test   cl,cl
c0010633:	74 06                	je     c001063b <VgaText::load()+0x29>
c0010635:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0010638:	40                   	inc    eax
c0010639:	eb ef                	jmp    c001062a <VgaText::load()+0x18>
c001063b:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c0010641:	85 c0                	test   eax,eax
c0010643:	74 09                	je     c001064e <VgaText::load()+0x3c>
c0010645:	51                   	push   ecx
c0010646:	51                   	push   ecx
c0010647:	52                   	push   edx
c0010648:	53                   	push   ebx
c0010649:	ff d0                	call   eax
c001064b:	83 c4 10             	add    esp,0x10
c001064e:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c0010654:	85 c0                	test   eax,eax
c0010656:	74 09                	je     c0010661 <VgaText::load()+0x4f>
c0010658:	83 ec 0c             	sub    esp,0xc
c001065b:	53                   	push   ebx
c001065c:	ff d0                	call   eax
c001065e:	83 c4 10             	add    esp,0x10
c0010661:	83 c4 58             	add    esp,0x58
c0010664:	5b                   	pop    ebx
c0010665:	c3                   	ret    

c0010666 <VgaText::updateCursor()>:
c0010666:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001066a:	39 05 e4 e4 02 c0    	cmp    DWORD PTR ds:0xc002e4e4,eax
c0010670:	75 0c                	jne    c001067e <VgaText::updateCursor()+0x18>
c0010672:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c0010678:	85 c0                	test   eax,eax
c001067a:	74 02                	je     c001067e <VgaText::updateCursor()+0x18>
c001067c:	ff e0                	jmp    eax
c001067e:	c3                   	ret    
c001067f:	90                   	nop

c0010680 <VgaText::showCursor(bool)>:
c0010680:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010684:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010688:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c001068e:	c3                   	ret    
c001068f:	90                   	nop

c0010690 <VgaText::disableBlink(bool)>:
c0010690:	56                   	push   esi
c0010691:	53                   	push   ebx
c0010692:	51                   	push   ecx
c0010693:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010697:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001069b:	39 1d e4 e4 02 c0    	cmp    DWORD PTR ds:0xc002e4e4,ebx
c00106a1:	75 18                	jne    c00106bb <VgaText::disableBlink(bool)+0x2b>
c00106a3:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c00106a9:	85 c0                	test   eax,eax
c00106ab:	74 0e                	je     c00106bb <VgaText::disableBlink(bool)+0x2b>
c00106ad:	89 f1                	mov    ecx,esi
c00106af:	52                   	push   edx
c00106b0:	52                   	push   edx
c00106b1:	0f b6 d1             	movzx  edx,cl
c00106b4:	52                   	push   edx
c00106b5:	53                   	push   ebx
c00106b6:	ff d0                	call   eax
c00106b8:	83 c4 10             	add    esp,0x10
c00106bb:	89 f0                	mov    eax,esi
c00106bd:	83 f0 01             	xor    eax,0x1
c00106c0:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c00106c6:	58                   	pop    eax
c00106c7:	5b                   	pop    ebx
c00106c8:	5e                   	pop    esi
c00106c9:	c3                   	ret    

c00106ca <VgaText::doANSI_SGR(int)>:
c00106ca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106d2:	85 d2                	test   edx,edx
c00106d4:	75 14                	jne    c00106ea <VgaText::doANSI_SGR(int)+0x20>
c00106d6:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c00106dc:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00106e2:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c00106e8:	eb 65                	jmp    c001074f <VgaText::doANSI_SGR(int)+0x85>
c00106ea:	83 fa 07             	cmp    edx,0x7
c00106ed:	75 14                	jne    c0010703 <VgaText::doANSI_SGR(int)+0x39>
c00106ef:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c00106f5:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c00106fb:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c0010701:	eb 4c                	jmp    c001074f <VgaText::doANSI_SGR(int)+0x85>
c0010703:	83 fa 1b             	cmp    edx,0x1b
c0010706:	74 ce                	je     c00106d6 <VgaText::doANSI_SGR(int)+0xc>
c0010708:	8d 4a e2             	lea    ecx,[edx-0x1e]
c001070b:	83 f9 07             	cmp    ecx,0x7
c001070e:	77 09                	ja     c0010719 <VgaText::doANSI_SGR(int)+0x4f>
c0010710:	8b 14 8d 60 d3 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2ca0]
c0010717:	eb 20                	jmp    c0010739 <VgaText::doANSI_SGR(int)+0x6f>
c0010719:	8d 4a d8             	lea    ecx,[edx-0x28]
c001071c:	83 f9 07             	cmp    ecx,0x7
c001071f:	77 09                	ja     c001072a <VgaText::doANSI_SGR(int)+0x60>
c0010721:	8b 14 8d 60 d3 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2ca0]
c0010728:	eb 25                	jmp    c001074f <VgaText::doANSI_SGR(int)+0x85>
c001072a:	8d 4a a6             	lea    ecx,[edx-0x5a]
c001072d:	83 f9 07             	cmp    ecx,0x7
c0010730:	77 0e                	ja     c0010740 <VgaText::doANSI_SGR(int)+0x76>
c0010732:	8b 14 95 18 d2 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2de8]
c0010739:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c001073f:	c3                   	ret    
c0010740:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010743:	83 f9 07             	cmp    ecx,0x7
c0010746:	77 0d                	ja     c0010755 <VgaText::doANSI_SGR(int)+0x8b>
c0010748:	8b 14 95 f0 d1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2e10]
c001074f:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c0010755:	c3                   	ret    

c0010756 <VgaText::setDefaultBgColour(VgaColour)>:
c0010756:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001075a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001075e:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c0010764:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c001076a:	c3                   	ret    
c001076b:	90                   	nop

c001076c <VgaText::setDefaultFgColour(VgaColour)>:
c001076c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010770:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010774:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c001077a:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010780:	c3                   	ret    
c0010781:	90                   	nop

c0010782 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0010782:	53                   	push   ebx
c0010783:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010787:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001078b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001078f:	51                   	push   ecx
c0010790:	e8 c1 ff ff ff       	call   c0010756 <VgaText::setDefaultBgColour(VgaColour)>
c0010795:	58                   	pop    eax
c0010796:	5a                   	pop    edx
c0010797:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001079b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001079f:	5b                   	pop    ebx
c00107a0:	eb ca                	jmp    c001076c <VgaText::setDefaultFgColour(VgaColour)>

c00107a2 <VgaText::combineColours(unsigned char, unsigned char)>:
c00107a2:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00107a6:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00107ab:	83 e0 0f             	and    eax,0xf
c00107ae:	c1 e2 04             	shl    edx,0x4
c00107b1:	09 d0                	or     eax,edx
c00107b3:	c3                   	ret    

c00107b4 <VgaText::scrollScreen()>:
c00107b4:	57                   	push   edi
c00107b5:	56                   	push   esi
c00107b6:	be 01 00 00 00       	mov    esi,0x1
c00107bb:	53                   	push   ebx
c00107bc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00107c0:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c00107c6:	31 ff                	xor    edi,edi
c00107c8:	01 d9                	add    ecx,ebx
c00107ca:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c00107cd:	83 fe 17             	cmp    esi,0x17
c00107d0:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c00107d6:	75 28                	jne    c0010800 <VgaText::scrollScreen()+0x4c>
c00107d8:	f7 c7 01 00 00 00    	test   edi,0x1
c00107de:	74 1c                	je     c00107fc <VgaText::scrollScreen()+0x48>
c00107e0:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c00107e7:	50                   	push   eax
c00107e8:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c00107ef:	50                   	push   eax
c00107f0:	e8 ad ff ff ff       	call   c00107a2 <VgaText::combineColours(unsigned char, unsigned char)>
c00107f5:	5a                   	pop    edx
c00107f6:	5a                   	pop    edx
c00107f7:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c00107fa:	eb 04                	jmp    c0010800 <VgaText::scrollScreen()+0x4c>
c00107fc:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c0010800:	47                   	inc    edi
c0010801:	41                   	inc    ecx
c0010802:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0010808:	75 c0                	jne    c00107ca <VgaText::scrollScreen()+0x16>
c001080a:	46                   	inc    esi
c001080b:	83 fe 18             	cmp    esi,0x18
c001080e:	75 b0                	jne    c00107c0 <VgaText::scrollScreen()+0xc>
c0010810:	39 1d e4 e4 02 c0    	cmp    DWORD PTR ds:0xc002e4e4,ebx
c0010816:	75 24                	jne    c001083c <VgaText::scrollScreen()+0x88>
c0010818:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c001081f:	74 08                	je     c0010829 <VgaText::scrollScreen()+0x75>
c0010821:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c0010827:	eb 13                	jmp    c001083c <VgaText::scrollScreen()+0x88>
c0010829:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c001082f:	85 c0                	test   eax,eax
c0010831:	74 09                	je     c001083c <VgaText::scrollScreen()+0x88>
c0010833:	83 ec 0c             	sub    esp,0xc
c0010836:	53                   	push   ebx
c0010837:	ff d0                	call   eax
c0010839:	83 c4 10             	add    esp,0x10
c001083c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010840:	5b                   	pop    ebx
c0010841:	5e                   	pop    esi
c0010842:	5f                   	pop    edi
c0010843:	e9 1e fe ff ff       	jmp    c0010666 <VgaText::updateCursor()>

c0010848 <VgaText::combineCharAndColour(char, unsigned char)>:
c0010848:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001084d:	c1 e0 08             	shl    eax,0x8
c0010850:	89 c2                	mov    edx,eax
c0010852:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0010857:	09 d0                	or     eax,edx
c0010859:	c3                   	ret    

c001085a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c001085a:	53                   	push   ebx
c001085b:	83 ec 08             	sub    esp,0x8
c001085e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010862:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010867:	50                   	push   eax
c0010868:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001086d:	50                   	push   eax
c001086e:	e8 2f ff ff ff       	call   c00107a2 <VgaText::combineColours(unsigned char, unsigned char)>
c0010873:	5a                   	pop    edx
c0010874:	0f b6 c0             	movzx  eax,al
c0010877:	5b                   	pop    ebx
c0010878:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c001087d:	50                   	push   eax
c001087e:	53                   	push   ebx
c001087f:	e8 c4 ff ff ff       	call   c0010848 <VgaText::combineCharAndColour(char, unsigned char)>
c0010884:	5a                   	pop    edx
c0010885:	5a                   	pop    edx
c0010886:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c001088c:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0010890:	0f b7 d2             	movzx  edx,dx
c0010893:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c0010898:	39 0d e4 e4 02 c0    	cmp    DWORD PTR ds:0xc002e4e4,ecx
c001089e:	75 14                	jne    c00108b4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c00108a0:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c00108a6:	85 c0                	test   eax,eax
c00108a8:	74 0a                	je     c00108b4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c00108aa:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00108ae:	83 c4 08             	add    esp,0x8
c00108b1:	5b                   	pop    ebx
c00108b2:	ff e0                	jmp    eax
c00108b4:	83 c4 08             	add    esp,0x8
c00108b7:	5b                   	pop    ebx
c00108b8:	c3                   	ret    
c00108b9:	90                   	nop

c00108ba <VgaText::getCursorX()>:
c00108ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108be:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c00108c4:	c3                   	ret    
c00108c5:	90                   	nop

c00108c6 <VgaText::getCursorY()>:
c00108c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108ca:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c00108d0:	c3                   	ret    
c00108d1:	90                   	nop

c00108d2 <VgaText::setCursor(int, int)>:
c00108d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108d6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00108da:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c00108e0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00108e4:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c00108ea:	e9 77 fd ff ff       	jmp    c0010666 <VgaText::updateCursor()>
c00108ef:	90                   	nop

c00108f0 <VgaText::setCursorX(int)>:
c00108f0:	83 ec 10             	sub    esp,0x10
c00108f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108f7:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c00108fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010901:	50                   	push   eax
c0010902:	e8 cb ff ff ff       	call   c00108d2 <VgaText::setCursor(int, int)>
c0010907:	83 c4 1c             	add    esp,0x1c
c001090a:	c3                   	ret    
c001090b:	90                   	nop

c001090c <VgaText::setCursorY(int)>:
c001090c:	83 ec 10             	sub    esp,0x10
c001090f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010913:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010917:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c001091d:	50                   	push   eax
c001091e:	e8 af ff ff ff       	call   c00108d2 <VgaText::setCursor(int, int)>
c0010923:	83 c4 1c             	add    esp,0x1c
c0010926:	c3                   	ret    
c0010927:	90                   	nop

c0010928 <VgaText::incrementCursor(bool)>:
c0010928:	56                   	push   esi
c0010929:	53                   	push   ebx
c001092a:	51                   	push   ecx
c001092b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001092f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010933:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c0010939:	40                   	inc    eax
c001093a:	83 f8 50             	cmp    eax,0x50
c001093d:	74 08                	je     c0010947 <VgaText::incrementCursor(bool)+0x1f>
c001093f:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c0010945:	eb 33                	jmp    c001097a <VgaText::incrementCursor(bool)+0x52>
c0010947:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c001094d:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010957:	8d 50 01             	lea    edx,[eax+0x1]
c001095a:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010960:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010966:	75 12                	jne    c001097a <VgaText::incrementCursor(bool)+0x52>
c0010968:	83 ec 0c             	sub    esp,0xc
c001096b:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010971:	53                   	push   ebx
c0010972:	e8 3d fe ff ff       	call   c00107b4 <VgaText::scrollScreen()>
c0010977:	83 c4 10             	add    esp,0x10
c001097a:	89 f0                	mov    eax,esi
c001097c:	84 c0                	test   al,al
c001097e:	74 0c                	je     c001098c <VgaText::incrementCursor(bool)+0x64>
c0010980:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010984:	5a                   	pop    edx
c0010985:	5b                   	pop    ebx
c0010986:	5e                   	pop    esi
c0010987:	e9 da fc ff ff       	jmp    c0010666 <VgaText::updateCursor()>
c001098c:	58                   	pop    eax
c001098d:	5b                   	pop    ebx
c001098e:	5e                   	pop    esi
c001098f:	c3                   	ret    

c0010990 <VgaText::updateRAMUsageDisplay(int)>:
c0010990:	56                   	push   esi
c0010991:	8b 35 40 d3 02 c0    	mov    esi,DWORD PTR ds:0xc002d340
c0010997:	53                   	push   ebx
c0010998:	bb 0a 00 00 00       	mov    ebx,0xa
c001099d:	6a 0f                	push   0xf
c001099f:	6a 00                	push   0x0
c00109a1:	e8 fc fd ff ff       	call   c00107a2 <VgaText::combineColours(unsigned char, unsigned char)>
c00109a6:	5a                   	pop    edx
c00109a7:	59                   	pop    ecx
c00109a8:	0f b6 c8             	movzx  ecx,al
c00109ab:	51                   	push   ecx
c00109ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109b0:	99                   	cdq    
c00109b1:	f7 fb                	idiv   ebx
c00109b3:	89 d3                	mov    ebx,edx
c00109b5:	83 c0 30             	add    eax,0x30
c00109b8:	83 c3 30             	add    ebx,0x30
c00109bb:	0f be c0             	movsx  eax,al
c00109be:	0f b6 db             	movzx  ebx,bl
c00109c1:	50                   	push   eax
c00109c2:	e8 81 fe ff ff       	call   c0010848 <VgaText::combineCharAndColour(char, unsigned char)>
c00109c7:	5a                   	pop    edx
c00109c8:	5a                   	pop    edx
c00109c9:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c00109d0:	51                   	push   ecx
c00109d1:	53                   	push   ebx
c00109d2:	e8 71 fe ff ff       	call   c0010848 <VgaText::combineCharAndColour(char, unsigned char)>
c00109d7:	5b                   	pop    ebx
c00109d8:	5a                   	pop    edx
c00109d9:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c00109e0:	51                   	push   ecx
c00109e1:	6a 25                	push   0x25
c00109e3:	e8 60 fe ff ff       	call   c0010848 <VgaText::combineCharAndColour(char, unsigned char)>
c00109e8:	59                   	pop    ecx
c00109e9:	5b                   	pop    ebx
c00109ea:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c00109f1:	5b                   	pop    ebx
c00109f2:	5e                   	pop    esi
c00109f3:	c3                   	ret    

c00109f4 <VgaText::updateDiskUsage()>:
c00109f4:	55                   	push   ebp
c00109f5:	bd 10 27 00 00       	mov    ebp,0x2710
c00109fa:	57                   	push   edi
c00109fb:	8b 3d 40 d3 02 c0    	mov    edi,DWORD PTR ds:0xc002d340
c0010a01:	56                   	push   esi
c0010a02:	53                   	push   ebx
c0010a03:	6a 0f                	push   0xf
c0010a05:	6a 00                	push   0x0
c0010a07:	e8 96 fd ff ff       	call   c00107a2 <VgaText::combineColours(unsigned char, unsigned char)>
c0010a0c:	5a                   	pop    edx
c0010a0d:	0f b6 d8             	movzx  ebx,al
c0010a10:	59                   	pop    ecx
c0010a11:	8b 35 68 27 03 c0    	mov    esi,DWORD PTR ds:0xc0032768
c0010a17:	53                   	push   ebx
c0010a18:	b9 0a 00 00 00       	mov    ecx,0xa
c0010a1d:	89 f0                	mov    eax,esi
c0010a1f:	99                   	cdq    
c0010a20:	f7 fd                	idiv   ebp
c0010a22:	99                   	cdq    
c0010a23:	f7 f9                	idiv   ecx
c0010a25:	8d 42 30             	lea    eax,[edx+0x30]
c0010a28:	0f b6 c0             	movzx  eax,al
c0010a2b:	50                   	push   eax
c0010a2c:	e8 17 fe ff ff       	call   c0010848 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a31:	5d                   	pop    ebp
c0010a32:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010a37:	5a                   	pop    edx
c0010a38:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c0010a3c:	53                   	push   ebx
c0010a3d:	89 f0                	mov    eax,esi
c0010a3f:	99                   	cdq    
c0010a40:	f7 fd                	idiv   ebp
c0010a42:	99                   	cdq    
c0010a43:	f7 f9                	idiv   ecx
c0010a45:	8d 42 30             	lea    eax,[edx+0x30]
c0010a48:	0f b6 c0             	movzx  eax,al
c0010a4b:	50                   	push   eax
c0010a4c:	e8 f7 fd ff ff       	call   c0010848 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a51:	5d                   	pop    ebp
c0010a52:	bd 64 00 00 00       	mov    ebp,0x64
c0010a57:	5a                   	pop    edx
c0010a58:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c0010a5f:	53                   	push   ebx
c0010a60:	89 f0                	mov    eax,esi
c0010a62:	99                   	cdq    
c0010a63:	f7 fd                	idiv   ebp
c0010a65:	99                   	cdq    
c0010a66:	f7 f9                	idiv   ecx
c0010a68:	8d 42 30             	lea    eax,[edx+0x30]
c0010a6b:	0f b6 c0             	movzx  eax,al
c0010a6e:	50                   	push   eax
c0010a6f:	e8 d4 fd ff ff       	call   c0010848 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a74:	5d                   	pop    ebp
c0010a75:	5a                   	pop    edx
c0010a76:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c0010a7d:	53                   	push   ebx
c0010a7e:	89 f0                	mov    eax,esi
c0010a80:	99                   	cdq    
c0010a81:	f7 f9                	idiv   ecx
c0010a83:	89 d6                	mov    esi,edx
c0010a85:	99                   	cdq    
c0010a86:	f7 f9                	idiv   ecx
c0010a88:	8d 42 30             	lea    eax,[edx+0x30]
c0010a8b:	0f b6 c0             	movzx  eax,al
c0010a8e:	50                   	push   eax
c0010a8f:	e8 b4 fd ff ff       	call   c0010848 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a94:	5d                   	pop    ebp
c0010a95:	5a                   	pop    edx
c0010a96:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c0010a9d:	53                   	push   ebx
c0010a9e:	8d 46 30             	lea    eax,[esi+0x30]
c0010aa1:	0f b6 f0             	movzx  esi,al
c0010aa4:	56                   	push   esi
c0010aa5:	e8 9e fd ff ff       	call   c0010848 <VgaText::combineCharAndColour(char, unsigned char)>
c0010aaa:	5e                   	pop    esi
c0010aab:	8b 35 64 27 03 c0    	mov    esi,DWORD PTR ds:0xc0032764
c0010ab1:	5d                   	pop    ebp
c0010ab2:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c0010ab9:	bd 10 27 00 00       	mov    ebp,0x2710
c0010abe:	53                   	push   ebx
c0010abf:	89 f0                	mov    eax,esi
c0010ac1:	99                   	cdq    
c0010ac2:	f7 fd                	idiv   ebp
c0010ac4:	99                   	cdq    
c0010ac5:	f7 f9                	idiv   ecx
c0010ac7:	8d 42 30             	lea    eax,[edx+0x30]
c0010aca:	0f b6 c0             	movzx  eax,al
c0010acd:	50                   	push   eax
c0010ace:	e8 75 fd ff ff       	call   c0010848 <VgaText::combineCharAndColour(char, unsigned char)>
c0010ad3:	5a                   	pop    edx
c0010ad4:	5d                   	pop    ebp
c0010ad5:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010adc:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010ae1:	53                   	push   ebx
c0010ae2:	89 f0                	mov    eax,esi
c0010ae4:	99                   	cdq    
c0010ae5:	f7 fd                	idiv   ebp
c0010ae7:	99                   	cdq    
c0010ae8:	f7 f9                	idiv   ecx
c0010aea:	8d 42 30             	lea    eax,[edx+0x30]
c0010aed:	0f b6 c0             	movzx  eax,al
c0010af0:	50                   	push   eax
c0010af1:	e8 52 fd ff ff       	call   c0010848 <VgaText::combineCharAndColour(char, unsigned char)>
c0010af6:	5a                   	pop    edx
c0010af7:	5d                   	pop    ebp
c0010af8:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010aff:	bd 64 00 00 00       	mov    ebp,0x64
c0010b04:	53                   	push   ebx
c0010b05:	89 f0                	mov    eax,esi
c0010b07:	99                   	cdq    
c0010b08:	f7 fd                	idiv   ebp
c0010b0a:	99                   	cdq    
c0010b0b:	f7 f9                	idiv   ecx
c0010b0d:	83 c2 30             	add    edx,0x30
c0010b10:	0f b6 d2             	movzx  edx,dl
c0010b13:	52                   	push   edx
c0010b14:	e8 2f fd ff ff       	call   c0010848 <VgaText::combineCharAndColour(char, unsigned char)>
c0010b19:	5a                   	pop    edx
c0010b1a:	5d                   	pop    ebp
c0010b1b:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010b22:	53                   	push   ebx
c0010b23:	89 f0                	mov    eax,esi
c0010b25:	99                   	cdq    
c0010b26:	f7 f9                	idiv   ecx
c0010b28:	89 d6                	mov    esi,edx
c0010b2a:	99                   	cdq    
c0010b2b:	f7 f9                	idiv   ecx
c0010b2d:	8d 42 30             	lea    eax,[edx+0x30]
c0010b30:	0f b6 c0             	movzx  eax,al
c0010b33:	50                   	push   eax
c0010b34:	e8 0f fd ff ff       	call   c0010848 <VgaText::combineCharAndColour(char, unsigned char)>
c0010b39:	5a                   	pop    edx
c0010b3a:	59                   	pop    ecx
c0010b3b:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010b42:	53                   	push   ebx
c0010b43:	8d 46 30             	lea    eax,[esi+0x30]
c0010b46:	0f b6 f0             	movzx  esi,al
c0010b49:	56                   	push   esi
c0010b4a:	e8 f9 fc ff ff       	call   c0010848 <VgaText::combineCharAndColour(char, unsigned char)>
c0010b4f:	5b                   	pop    ebx
c0010b50:	5e                   	pop    esi
c0010b51:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010b58:	5b                   	pop    ebx
c0010b59:	5e                   	pop    esi
c0010b5a:	5f                   	pop    edi
c0010b5b:	5d                   	pop    ebp
c0010b5c:	c3                   	ret    
c0010b5d:	90                   	nop

c0010b5e <VgaText::updateTitle()>:
c0010b5e:	53                   	push   ebx
c0010b5f:	31 c0                	xor    eax,eax
c0010b61:	83 ec 58             	sub    esp,0x58
c0010b64:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010b68:	89 e1                	mov    ecx,esp
c0010b6a:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010b6e:	40                   	inc    eax
c0010b6f:	83 f8 50             	cmp    eax,0x50
c0010b72:	75 f6                	jne    c0010b6a <VgaText::updateTitle()+0xc>
c0010b74:	31 c0                	xor    eax,eax
c0010b76:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c0010b7d:	84 db                	test   bl,bl
c0010b7f:	74 06                	je     c0010b87 <VgaText::updateTitle()+0x29>
c0010b81:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010b84:	40                   	inc    eax
c0010b85:	eb ef                	jmp    c0010b76 <VgaText::updateTitle()+0x18>
c0010b87:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c0010b8d:	85 c0                	test   eax,eax
c0010b8f:	74 09                	je     c0010b9a <VgaText::updateTitle()+0x3c>
c0010b91:	53                   	push   ebx
c0010b92:	53                   	push   ebx
c0010b93:	51                   	push   ecx
c0010b94:	52                   	push   edx
c0010b95:	ff d0                	call   eax
c0010b97:	83 c4 10             	add    esp,0x10
c0010b9a:	e8 55 fe ff ff       	call   c00109f4 <VgaText::updateDiskUsage()>
c0010b9f:	83 c4 58             	add    esp,0x58
c0010ba2:	5b                   	pop    ebx
c0010ba3:	c3                   	ret    

c0010ba4 <VgaText::setTitleTextColour(VgaColour)>:
c0010ba4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ba8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010bac:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c0010bb2:	eb aa                	jmp    c0010b5e <VgaText::updateTitle()>

c0010bb4 <VgaText::setTitleColour(VgaColour)>:
c0010bb4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010bb8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010bbc:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c0010bc2:	eb 9a                	jmp    c0010b5e <VgaText::updateTitle()>

c0010bc4 <VgaText::setTitle(char*)>:
c0010bc4:	53                   	push   ebx
c0010bc5:	83 ec 10             	sub    esp,0x10
c0010bc8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010bcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bd0:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c0010bd6:	50                   	push   eax
c0010bd7:	e8 58 fc fe ff       	call   c0000834 <strcpy>
c0010bdc:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010be0:	83 c4 18             	add    esp,0x18
c0010be3:	5b                   	pop    ebx
c0010be4:	e9 75 ff ff ff       	jmp    c0010b5e <VgaText::updateTitle()>
c0010be9:	90                   	nop

c0010bea <VgaText::decrementCursor(bool)>:
c0010bea:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010bee:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010bf2:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c0010bf8:	85 c0                	test   eax,eax
c0010bfa:	74 07                	je     c0010c03 <VgaText::decrementCursor(bool)+0x19>
c0010bfc:	48                   	dec    eax
c0010bfd:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c0010c03:	84 c9                	test   cl,cl
c0010c05:	74 09                	je     c0010c10 <VgaText::decrementCursor(bool)+0x26>
c0010c07:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010c0b:	e9 56 fa ff ff       	jmp    c0010666 <VgaText::updateCursor()>
c0010c10:	c3                   	ret    
c0010c11:	90                   	nop

c0010c12 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010c12:	53                   	push   ebx
c0010c13:	83 ec 08             	sub    esp,0x8
c0010c16:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010c1a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c1e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010c22:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010c26:	3c 07                	cmp    al,0x7
c0010c28:	75 2a                	jne    c0010c54 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010c2a:	a1 94 e5 02 c0       	mov    eax,ds:0xc002e594
c0010c2f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010c37:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010c3f:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010c47:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010c4b:	83 c4 08             	add    esp,0x8
c0010c4e:	5b                   	pop    ebx
c0010c4f:	e9 f4 30 00 00       	jmp    c0013d48 <Buzzer::beep(int, int, bool)>
c0010c54:	3c 0d                	cmp    al,0xd
c0010c56:	75 0c                	jne    c0010c64 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c0010c58:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010c62:	eb 3b                	jmp    c0010c9f <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c0010c64:	3c 0a                	cmp    al,0xa
c0010c66:	75 40                	jne    c0010ca8 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c0010c68:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010c6e:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010c78:	8d 50 01             	lea    edx,[eax+0x1]
c0010c7b:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010c81:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010c87:	75 12                	jne    c0010c9b <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c0010c89:	83 ec 0c             	sub    esp,0xc
c0010c8c:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010c92:	53                   	push   ebx
c0010c93:	e8 1c fb ff ff       	call   c00107b4 <VgaText::scrollScreen()>
c0010c98:	83 c4 10             	add    esp,0x10
c0010c9b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010c9f:	83 c4 08             	add    esp,0x8
c0010ca2:	5b                   	pop    ebx
c0010ca3:	e9 be f9 ff ff       	jmp    c0010666 <VgaText::updateCursor()>
c0010ca8:	3c 08                	cmp    al,0x8
c0010caa:	75 31                	jne    c0010cdd <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c0010cac:	50                   	push   eax
c0010cad:	50                   	push   eax
c0010cae:	6a 01                	push   0x1
c0010cb0:	53                   	push   ebx
c0010cb1:	e8 34 ff ff ff       	call   c0010bea <VgaText::decrementCursor(bool)>
c0010cb6:	5a                   	pop    edx
c0010cb7:	59                   	pop    ecx
c0010cb8:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010cbe:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010cc4:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010cca:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010cd0:	6a 20                	push   0x20
c0010cd2:	53                   	push   ebx
c0010cd3:	e8 82 fb ff ff       	call   c001085a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010cd8:	83 c4 28             	add    esp,0x28
c0010cdb:	5b                   	pop    ebx
c0010cdc:	c3                   	ret    
c0010cdd:	83 ec 08             	sub    esp,0x8
c0010ce0:	0f be c0             	movsx  eax,al
c0010ce3:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010ce9:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010cef:	51                   	push   ecx
c0010cf0:	52                   	push   edx
c0010cf1:	50                   	push   eax
c0010cf2:	53                   	push   ebx
c0010cf3:	e8 62 fb ff ff       	call   c001085a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010cf8:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010cfc:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010d04:	83 c4 28             	add    esp,0x28
c0010d07:	5b                   	pop    ebx
c0010d08:	e9 1b fc ff ff       	jmp    c0010928 <VgaText::incrementCursor(bool)>
c0010d0d:	90                   	nop

c0010d0e <VgaText::isShowingCursor()>:
c0010d0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d12:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010d18:	c3                   	ret    
c0010d19:	90                   	nop

c0010d1a <VgaText::isBlinkDisabled()>:
c0010d1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d1e:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010d24:	83 f0 01             	xor    eax,0x1
c0010d27:	c3                   	ret    

c0010d28 <VgaText::setCursorHeight(int)>:
c0010d28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d2c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010d30:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010d36:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010d3d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010d41:	e9 3a f9 ff ff       	jmp    c0010680 <VgaText::showCursor(bool)>

c0010d46 <VgaText::getCursorHeight()>:
c0010d46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d4a:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010d50:	c3                   	ret    

c0010d51 <setActiveTerminal(VgaText*)>:
c0010d51:	53                   	push   ebx
c0010d52:	83 ec 08             	sub    esp,0x8
c0010d55:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010d59:	85 db                	test   ebx,ebx
c0010d5b:	75 11                	jne    c0010d6e <setActiveTerminal(VgaText*)+0x1d>
c0010d5d:	c7 44 24 10 8c a3 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a38c
c0010d65:	83 c4 08             	add    esp,0x8
c0010d68:	5b                   	pop    ebx
c0010d69:	e9 8d 98 00 00       	jmp    c001a5fb <Krnl::panic(char const*)>
c0010d6e:	50                   	push   eax
c0010d6f:	50                   	push   eax
c0010d70:	53                   	push   ebx
c0010d71:	68 9a a3 02 c0       	push   0xc002a39a
c0010d76:	e8 cf 21 00 00       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0010d7b:	a1 e4 e4 02 c0       	mov    eax,ds:0xc002e4e4
c0010d80:	83 c4 10             	add    esp,0x10
c0010d83:	85 c0                	test   eax,eax
c0010d85:	74 0c                	je     c0010d93 <setActiveTerminal(VgaText*)+0x42>
c0010d87:	83 ec 0c             	sub    esp,0xc
c0010d8a:	50                   	push   eax
c0010d8b:	e8 d6 f8 ff ff       	call   c0010666 <VgaText::updateCursor()>
c0010d90:	83 c4 10             	add    esp,0x10
c0010d93:	89 1d e4 e4 02 c0    	mov    DWORD PTR ds:0xc002e4e4,ebx
c0010d99:	51                   	push   ecx
c0010d9a:	51                   	push   ecx
c0010d9b:	53                   	push   ebx
c0010d9c:	68 b2 a3 02 c0       	push   0xc002a3b2
c0010da1:	e8 a4 21 00 00       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0010da6:	83 c4 0c             	add    esp,0xc
c0010da9:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010daf:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010db5:	53                   	push   ebx
c0010db6:	e8 17 fb ff ff       	call   c00108d2 <VgaText::setCursor(int, int)>
c0010dbb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010dbe:	e8 57 ff ff ff       	call   c0010d1a <VgaText::isBlinkDisabled()>
c0010dc3:	5a                   	pop    edx
c0010dc4:	0f b6 c0             	movzx  eax,al
c0010dc7:	59                   	pop    ecx
c0010dc8:	50                   	push   eax
c0010dc9:	53                   	push   ebx
c0010dca:	e8 c1 f8 ff ff       	call   c0010690 <VgaText::disableBlink(bool)>
c0010dcf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010dd2:	e8 6f ff ff ff       	call   c0010d46 <VgaText::getCursorHeight()>
c0010dd7:	5a                   	pop    edx
c0010dd8:	59                   	pop    ecx
c0010dd9:	50                   	push   eax
c0010dda:	53                   	push   ebx
c0010ddb:	e8 48 ff ff ff       	call   c0010d28 <VgaText::setCursorHeight(int)>
c0010de0:	83 c4 10             	add    esp,0x10
c0010de3:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010dea:	75 0a                	jne    c0010df6 <setActiveTerminal(VgaText*)+0xa5>
c0010dec:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010df6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010dfa:	83 c4 08             	add    esp,0x8
c0010dfd:	5b                   	pop    ebx
c0010dfe:	e9 0f f8 ff ff       	jmp    c0010612 <VgaText::load()>

c0010e03 <doTerminalCycle()>:
c0010e03:	83 ec 18             	sub    esp,0x18
c0010e06:	a1 e0 e4 02 c0       	mov    eax,ds:0xc002e4e0
c0010e0b:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010e11:	50                   	push   eax
c0010e12:	a3 e0 e4 02 c0       	mov    ds:0xc002e4e0,eax
c0010e17:	e8 35 ff ff ff       	call   c0010d51 <setActiveTerminal(VgaText*)>
c0010e1c:	83 c4 1c             	add    esp,0x1c
c0010e1f:	c3                   	ret    

c0010e20 <VgaText::doUpdate()>:
c0010e20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e24:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010e2a:	85 c0                	test   eax,eax
c0010e2c:	74 02                	je     c0010e30 <VgaText::doUpdate()+0x10>
c0010e2e:	ff e0                	jmp    eax
c0010e30:	c3                   	ret    
c0010e31:	90                   	nop

c0010e32 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010e32:	55                   	push   ebp
c0010e33:	57                   	push   edi
c0010e34:	56                   	push   esi
c0010e35:	53                   	push   ebx
c0010e36:	83 ec 1c             	sub    esp,0x1c
c0010e39:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010e3d:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010e42:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010e49:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010e4c:	50                   	push   eax
c0010e4d:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010e52:	50                   	push   eax
c0010e53:	e8 4a f9 ff ff       	call   c00107a2 <VgaText::combineColours(unsigned char, unsigned char)>
c0010e58:	59                   	pop    ecx
c0010e59:	0f b6 c0             	movzx  eax,al
c0010e5c:	5b                   	pop    ebx
c0010e5d:	31 c9                	xor    ecx,ecx
c0010e5f:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010e67:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010e6b:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010e71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010e75:	0f b7 db             	movzx  ebx,bx
c0010e78:	01 db                	add    ebx,ebx
c0010e7a:	01 fb                	add    ebx,edi
c0010e7c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010e7f:	84 c0                	test   al,al
c0010e81:	0f 84 38 01 00 00    	je     c0010fbf <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010e87:	3c 0d                	cmp    al,0xd
c0010e89:	75 0f                	jne    c0010e9a <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010e8b:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010e95:	e9 1f 01 00 00       	jmp    c0010fb9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010e9a:	3c 0a                	cmp    al,0xa
c0010e9c:	75 5b                	jne    c0010ef9 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010e9e:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c0010ea4:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010eae:	8d 48 01             	lea    ecx,[eax+0x1]
c0010eb1:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c0010eb7:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010ebd:	75 12                	jne    c0010ed1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010ebf:	83 ec 0c             	sub    esp,0xc
c0010ec2:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c0010ec8:	55                   	push   ebp
c0010ec9:	e8 e6 f8 ff ff       	call   c00107b4 <VgaText::scrollScreen()>
c0010ece:	83 c4 10             	add    esp,0x10
c0010ed1:	83 ec 0c             	sub    esp,0xc
c0010ed4:	55                   	push   ebp
c0010ed5:	e8 8c f7 ff ff       	call   c0010666 <VgaText::updateCursor()>
c0010eda:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010ee2:	83 c4 10             	add    esp,0x10
c0010ee5:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010eeb:	31 c9                	xor    ecx,ecx
c0010eed:	0f b7 db             	movzx  ebx,bx
c0010ef0:	01 db                	add    ebx,ebx
c0010ef2:	01 fb                	add    ebx,edi
c0010ef4:	e9 c0 00 00 00       	jmp    c0010fb9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010ef9:	3c 08                	cmp    al,0x8
c0010efb:	75 4e                	jne    c0010f4b <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010efd:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010f01:	53                   	push   ebx
c0010f02:	53                   	push   ebx
c0010f03:	6a 01                	push   0x1
c0010f05:	55                   	push   ebp
c0010f06:	e8 df fc ff ff       	call   c0010bea <VgaText::decrementCursor(bool)>
c0010f0b:	58                   	pop    eax
c0010f0c:	5a                   	pop    edx
c0010f0d:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010f13:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010f19:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010f1f:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010f25:	6a 20                	push   0x20
c0010f27:	55                   	push   ebp
c0010f28:	e8 2d f9 ff ff       	call   c001085a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010f2d:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010f35:	83 c4 20             	add    esp,0x20
c0010f38:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010f3e:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010f42:	0f b7 db             	movzx  ebx,bx
c0010f45:	01 db                	add    ebx,ebx
c0010f47:	01 fb                	add    ebx,edi
c0010f49:	eb 6e                	jmp    c0010fb9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010f4b:	51                   	push   ecx
c0010f4c:	51                   	push   ecx
c0010f4d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010f51:	50                   	push   eax
c0010f52:	e8 f1 f8 ff ff       	call   c0010848 <VgaText::combineCharAndColour(char, unsigned char)>
c0010f57:	83 c4 10             	add    esp,0x10
c0010f5a:	66 89 03             	mov    WORD PTR [ebx],ax
c0010f5d:	39 2d e4 e4 02 c0    	cmp    DWORD PTR ds:0xc002e4e4,ebp
c0010f63:	75 2a                	jne    c0010f8f <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010f65:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010f6b:	85 c0                	test   eax,eax
c0010f6d:	74 20                	je     c0010f8f <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010f6f:	52                   	push   edx
c0010f70:	52                   	push   edx
c0010f71:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010f77:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010f7d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f81:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f85:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010f88:	51                   	push   ecx
c0010f89:	55                   	push   ebp
c0010f8a:	ff d0                	call   eax
c0010f8c:	83 c4 20             	add    esp,0x20
c0010f8f:	83 c3 02             	add    ebx,0x2
c0010f92:	50                   	push   eax
c0010f93:	50                   	push   eax
c0010f94:	6a 00                	push   0x0
c0010f96:	55                   	push   ebp
c0010f97:	e8 8c f9 ff ff       	call   c0010928 <VgaText::incrementCursor(bool)>
c0010f9c:	83 c4 10             	add    esp,0x10
c0010f9f:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010fa6:	75 0f                	jne    c0010fb7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010fa8:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010fb0:	0f b7 db             	movzx  ebx,bx
c0010fb3:	01 db                	add    ebx,ebx
c0010fb5:	01 fb                	add    ebx,edi
c0010fb7:	b1 01                	mov    cl,0x1
c0010fb9:	46                   	inc    esi
c0010fba:	e9 bd fe ff ff       	jmp    c0010e7c <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010fbf:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010fc3:	83 ec 0c             	sub    esp,0xc
c0010fc6:	55                   	push   ebp
c0010fc7:	e8 9a f6 ff ff       	call   c0010666 <VgaText::updateCursor()>
c0010fcc:	83 c4 10             	add    esp,0x10
c0010fcf:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010fd3:	84 c9                	test   cl,cl
c0010fd5:	74 0c                	je     c0010fe3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010fd7:	83 ec 0c             	sub    esp,0xc
c0010fda:	55                   	push   ebp
c0010fdb:	e8 40 fe ff ff       	call   c0010e20 <VgaText::doUpdate()>
c0010fe0:	83 c4 10             	add    esp,0x10
c0010fe3:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010fea:	83 c4 1c             	add    esp,0x1c
c0010fed:	5b                   	pop    ebx
c0010fee:	5e                   	pop    esi
c0010fef:	5f                   	pop    edi
c0010ff0:	5d                   	pop    ebp
c0010ff1:	c3                   	ret    

c0010ff2 <VgaText::clearScreen()>:
c0010ff2:	57                   	push   edi
c0010ff3:	56                   	push   esi
c0010ff4:	31 f6                	xor    esi,esi
c0010ff6:	53                   	push   ebx
c0010ff7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010ffb:	52                   	push   edx
c0010ffc:	6a 00                	push   0x0
c0010ffe:	6a 00                	push   0x0
c0011000:	53                   	push   ebx
c0011001:	e8 cc f8 ff ff       	call   c00108d2 <VgaText::setCursor(int, int)>
c0011006:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c001100d:	83 c4 10             	add    esp,0x10
c0011010:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0011016:	7e 26                	jle    c001103e <VgaText::clearScreen()+0x4c>
c0011018:	31 ff                	xor    edi,edi
c001101a:	50                   	push   eax
c001101b:	50                   	push   eax
c001101c:	56                   	push   esi
c001101d:	57                   	push   edi
c001101e:	47                   	inc    edi
c001101f:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0011025:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c001102b:	6a 20                	push   0x20
c001102d:	53                   	push   ebx
c001102e:	e8 27 f8 ff ff       	call   c001085a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0011033:	83 c4 20             	add    esp,0x20
c0011036:	83 ff 50             	cmp    edi,0x50
c0011039:	75 df                	jne    c001101a <VgaText::clearScreen()+0x28>
c001103b:	46                   	inc    esi
c001103c:	eb d2                	jmp    c0011010 <VgaText::clearScreen()+0x1e>
c001103e:	83 ec 0c             	sub    esp,0xc
c0011041:	53                   	push   ebx
c0011042:	e8 d9 fd ff ff       	call   c0010e20 <VgaText::doUpdate()>
c0011047:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c001104e:	83 c4 10             	add    esp,0x10
c0011051:	5b                   	pop    ebx
c0011052:	5e                   	pop    esi
c0011053:	5f                   	pop    edi
c0011054:	c3                   	ret    
c0011055:	90                   	nop

c0011056 <VgaText::putchar(char)>:
c0011056:	56                   	push   esi
c0011057:	53                   	push   ebx
c0011058:	83 ec 14             	sub    esp,0x14
c001105b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001105f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011063:	3c 5b                	cmp    al,0x5b
c0011065:	75 21                	jne    c0011088 <VgaText::putchar(char)+0x32>
c0011067:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c001106e:	74 28                	je     c0011098 <VgaText::putchar(char)+0x42>
c0011070:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c0011079:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c0011083:	e9 e2 00 00 00       	jmp    c001116a <VgaText::putchar(char)+0x114>
c0011088:	3c 1b                	cmp    al,0x1b
c001108a:	75 0c                	jne    c0011098 <VgaText::putchar(char)+0x42>
c001108c:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c0011093:	e9 d2 00 00 00       	jmp    c001116a <VgaText::putchar(char)+0x114>
c0011098:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c001109e:	84 c9                	test   cl,cl
c00110a0:	0f 84 ab 00 00 00    	je     c0011151 <VgaText::putchar(char)+0xfb>
c00110a6:	8d 50 c0             	lea    edx,[eax-0x40]
c00110a9:	80 fa 3e             	cmp    dl,0x3e
c00110ac:	0f 87 82 00 00 00    	ja     c0011134 <VgaText::putchar(char)+0xde>
c00110b2:	3c 6d                	cmp    al,0x6d
c00110b4:	75 4d                	jne    c0011103 <VgaText::putchar(char)+0xad>
c00110b6:	31 f6                	xor    esi,esi
c00110b8:	31 d2                	xor    edx,edx
c00110ba:	31 c0                	xor    eax,eax
c00110bc:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c00110c2:	7e 30                	jle    c00110f4 <VgaText::putchar(char)+0x9e>
c00110c4:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c00110cc:	80 fa 3b             	cmp    dl,0x3b
c00110cf:	75 17                	jne    c00110e8 <VgaText::putchar(char)+0x92>
c00110d1:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00110d5:	50                   	push   eax
c00110d6:	53                   	push   ebx
c00110d7:	e8 ee f5 ff ff       	call   c00106ca <VgaText::doANSI_SGR(int)>
c00110dc:	59                   	pop    ecx
c00110dd:	31 d2                	xor    edx,edx
c00110df:	58                   	pop    eax
c00110e0:	31 c0                	xor    eax,eax
c00110e2:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00110e6:	eb 09                	jmp    c00110f1 <VgaText::putchar(char)+0x9b>
c00110e8:	6b c0 0a             	imul   eax,eax,0xa
c00110eb:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00110ef:	88 ca                	mov    dl,cl
c00110f1:	46                   	inc    esi
c00110f2:	eb c8                	jmp    c00110bc <VgaText::putchar(char)+0x66>
c00110f4:	84 d2                	test   dl,dl
c00110f6:	74 31                	je     c0011129 <VgaText::putchar(char)+0xd3>
c00110f8:	50                   	push   eax
c00110f9:	53                   	push   ebx
c00110fa:	e8 cb f5 ff ff       	call   c00106ca <VgaText::doANSI_SGR(int)>
c00110ff:	58                   	pop    eax
c0011100:	5a                   	pop    edx
c0011101:	eb 26                	jmp    c0011129 <VgaText::putchar(char)+0xd3>
c0011103:	3c 4a                	cmp    al,0x4a
c0011105:	75 22                	jne    c0011129 <VgaText::putchar(char)+0xd3>
c0011107:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c001110e:	75 19                	jne    c0011129 <VgaText::putchar(char)+0xd3>
c0011110:	83 ec 0c             	sub    esp,0xc
c0011113:	53                   	push   ebx
c0011114:	e8 d9 fe ff ff       	call   c0010ff2 <VgaText::clearScreen()>
c0011119:	83 c4 0c             	add    esp,0xc
c001111c:	6a 00                	push   0x0
c001111e:	6a 00                	push   0x0
c0011120:	53                   	push   ebx
c0011121:	e8 ac f7 ff ff       	call   c00108d2 <VgaText::setCursor(int, int)>
c0011126:	83 c4 10             	add    esp,0x10
c0011129:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c0011132:	eb 36                	jmp    c001116a <VgaText::putchar(char)+0x114>
c0011134:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c001113a:	83 fa 0e             	cmp    edx,0xe
c001113d:	7f 2b                	jg     c001116a <VgaText::putchar(char)+0x114>
c001113f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011142:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c0011148:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c001114f:	eb 19                	jmp    c001116a <VgaText::putchar(char)+0x114>
c0011151:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0011157:	0f be c0             	movsx  eax,al
c001115a:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0011160:	50                   	push   eax
c0011161:	53                   	push   ebx
c0011162:	e8 ab fa ff ff       	call   c0010c12 <VgaText::putchar(char, VgaColour, VgaColour)>
c0011167:	83 c4 10             	add    esp,0x10
c001116a:	83 c4 14             	add    esp,0x14
c001116d:	5b                   	pop    ebx
c001116e:	5e                   	pop    esi
c001116f:	c3                   	ret    

c0011170 <VgaText::puts(char const*)>:
c0011170:	53                   	push   ebx
c0011171:	83 ec 08             	sub    esp,0x8
c0011174:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011178:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001117b:	84 c0                	test   al,al
c001117d:	74 12                	je     c0011191 <VgaText::puts(char const*)+0x21>
c001117f:	43                   	inc    ebx
c0011180:	51                   	push   ecx
c0011181:	51                   	push   ecx
c0011182:	50                   	push   eax
c0011183:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011187:	e8 ca fe ff ff       	call   c0011056 <VgaText::putchar(char)>
c001118c:	83 c4 10             	add    esp,0x10
c001118f:	eb e7                	jmp    c0011178 <VgaText::puts(char const*)+0x8>
c0011191:	83 c4 08             	add    esp,0x8
c0011194:	5b                   	pop    ebx
c0011195:	c3                   	ret    

c0011196 <VgaText::putx(unsigned int)>:
c0011196:	57                   	push   edi
c0011197:	b9 11 00 00 00       	mov    ecx,0x11
c001119c:	56                   	push   esi
c001119d:	be ce a3 02 c0       	mov    esi,0xc002a3ce
c00111a2:	53                   	push   ebx
c00111a3:	83 ec 20             	sub    esp,0x20
c00111a6:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00111aa:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00111ae:	fc                   	cld    
c00111af:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00111b1:	be 08 00 00 00       	mov    esi,0x8
c00111b6:	50                   	push   eax
c00111b7:	50                   	push   eax
c00111b8:	89 d8                	mov    eax,ebx
c00111ba:	c1 e3 04             	shl    ebx,0x4
c00111bd:	c1 e8 1c             	shr    eax,0x1c
c00111c0:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00111c5:	50                   	push   eax
c00111c6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00111ca:	e8 87 fe ff ff       	call   c0011056 <VgaText::putchar(char)>
c00111cf:	83 c4 10             	add    esp,0x10
c00111d2:	4e                   	dec    esi
c00111d3:	75 e1                	jne    c00111b6 <VgaText::putx(unsigned int)+0x20>
c00111d5:	83 c4 20             	add    esp,0x20
c00111d8:	5b                   	pop    ebx
c00111d9:	5e                   	pop    esi
c00111da:	5f                   	pop    edi
c00111db:	c3                   	ret    

c00111dc <VgaText::VgaText(char const*)>:
c00111dc:	57                   	push   edi
c00111dd:	56                   	push   esi
c00111de:	53                   	push   ebx
c00111df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111e3:	83 ec 08             	sub    esp,0x8
c00111e6:	6a 00                	push   0x0
c00111e8:	50                   	push   eax
c00111e9:	e8 6e 05 00 00       	call   c001175c <UnixFile::UnixFile(int)>
c00111ee:	83 c4 10             	add    esp,0x10
c00111f1:	ba 34 a4 02 c0       	mov    edx,0xc002a434
c00111f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111fa:	89 10                	mov    DWORD PTR [eax],edx
c00111fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011200:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c001120a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001120e:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c0011218:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001121c:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c0011223:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011227:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c001122e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011232:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c001123c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011240:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c001124a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001124e:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c0011255:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011259:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c0011260:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011264:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c001126a:	bb c0 e4 02 c0       	mov    ebx,0xc002e4c0
c001126f:	b8 08 00 00 00       	mov    eax,0x8
c0011274:	fc                   	cld    
c0011275:	89 d7                	mov    edi,edx
c0011277:	89 de                	mov    esi,ebx
c0011279:	89 c1                	mov    ecx,eax
c001127b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001127d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011281:	05 1e 10 00 00       	add    eax,0x101e
c0011286:	83 ec 08             	sub    esp,0x8
c0011289:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001128d:	50                   	push   eax
c001128e:	e8 a1 f5 fe ff       	call   c0000834 <strcpy>
c0011293:	83 c4 10             	add    esp,0x10
c0011296:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001129a:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c00112a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112a8:	83 c0 0c             	add    eax,0xc
c00112ab:	83 ec 04             	sub    esp,0x4
c00112ae:	68 00 0f 00 00       	push   0xf00
c00112b3:	6a 00                	push   0x0
c00112b5:	50                   	push   eax
c00112b6:	e8 bd f4 fe ff       	call   c0000778 <memset>
c00112bb:	83 c4 10             	add    esp,0x10
c00112be:	83 ec 04             	sub    esp,0x4
c00112c1:	6a 00                	push   0x0
c00112c3:	6a 07                	push   0x7
c00112c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112c9:	e8 b4 f4 ff ff       	call   c0010782 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00112ce:	83 c4 10             	add    esp,0x10
c00112d1:	83 ec 08             	sub    esp,0x8
c00112d4:	6a 02                	push   0x2
c00112d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112da:	e8 49 fa ff ff       	call   c0010d28 <VgaText::setCursorHeight(int)>
c00112df:	83 c4 10             	add    esp,0x10
c00112e2:	83 ec 04             	sub    esp,0x4
c00112e5:	6a 00                	push   0x0
c00112e7:	6a 00                	push   0x0
c00112e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112ed:	e8 e0 f5 ff ff       	call   c00108d2 <VgaText::setCursor(int, int)>
c00112f2:	83 c4 10             	add    esp,0x10
c00112f5:	83 ec 08             	sub    esp,0x8
c00112f8:	6a 01                	push   0x1
c00112fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112fe:	e8 7d f3 ff ff       	call   c0010680 <VgaText::showCursor(bool)>
c0011303:	83 c4 10             	add    esp,0x10
c0011306:	83 ec 08             	sub    esp,0x8
c0011309:	6a 01                	push   0x1
c001130b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001130f:	e8 7c f3 ff ff       	call   c0010690 <VgaText::disableBlink(bool)>
c0011314:	83 c4 10             	add    esp,0x10
c0011317:	83 ec 0c             	sub    esp,0xc
c001131a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001131e:	e8 cf fc ff ff       	call   c0010ff2 <VgaText::clearScreen()>
c0011323:	83 c4 10             	add    esp,0x10
c0011326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001132a:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c0011331:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011335:	05 9e 10 00 00       	add    eax,0x109e
c001133a:	83 ec 04             	sub    esp,0x4
c001133d:	68 96 00 00 00       	push   0x96
c0011342:	6a 00                	push   0x0
c0011344:	50                   	push   eax
c0011345:	e8 2e f4 fe ff       	call   c0000778 <memset>
c001134a:	83 c4 10             	add    esp,0x10
c001134d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011351:	05 34 11 00 00       	add    eax,0x1134
c0011356:	83 ec 04             	sub    esp,0x4
c0011359:	68 2c 01 00 00       	push   0x12c
c001135e:	6a 00                	push   0x0
c0011360:	50                   	push   eax
c0011361:	e8 12 f4 fe ff       	call   c0000778 <memset>
c0011366:	83 c4 10             	add    esp,0x10
c0011369:	90                   	nop
c001136a:	5b                   	pop    ebx
c001136b:	5e                   	pop    esi
c001136c:	5f                   	pop    edi
c001136d:	c3                   	ret    

c001136e <VgaText::receiveKey(unsigned char)>:
c001136e:	55                   	push   ebp
c001136f:	57                   	push   edi
c0011370:	56                   	push   esi
c0011371:	53                   	push   ebx
c0011372:	83 ec 1c             	sub    esp,0x1c
c0011375:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011379:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001137d:	84 db                	test   bl,bl
c001137f:	0f 84 c9 00 00 00    	je     c001144e <VgaText::receiveKey(unsigned char)+0xe0>
c0011385:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c001138b:	80 fb 08             	cmp    bl,0x8
c001138e:	75 2c                	jne    c00113bc <VgaText::receiveKey(unsigned char)+0x4e>
c0011390:	83 ec 0c             	sub    esp,0xc
c0011393:	57                   	push   edi
c0011394:	e8 fb f3 fe ff       	call   c0000794 <strlen>
c0011399:	83 c4 10             	add    esp,0x10
c001139c:	85 c0                	test   eax,eax
c001139e:	74 41                	je     c00113e1 <VgaText::receiveKey(unsigned char)+0x73>
c00113a0:	50                   	push   eax
c00113a1:	50                   	push   eax
c00113a2:	6a 08                	push   0x8
c00113a4:	56                   	push   esi
c00113a5:	e8 ac fc ff ff       	call   c0011056 <VgaText::putchar(char)>
c00113aa:	89 3c 24             	mov    DWORD PTR [esp],edi
c00113ad:	e8 e2 f3 fe ff       	call   c0000794 <strlen>
c00113b2:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c00113ba:	eb 22                	jmp    c00113de <VgaText::receiveKey(unsigned char)+0x70>
c00113bc:	0f be c3             	movsx  eax,bl
c00113bf:	52                   	push   edx
c00113c0:	52                   	push   edx
c00113c1:	50                   	push   eax
c00113c2:	56                   	push   esi
c00113c3:	e8 8e fc ff ff       	call   c0011056 <VgaText::putchar(char)>
c00113c8:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c00113cc:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00113d1:	59                   	pop    ecx
c00113d2:	5d                   	pop    ebp
c00113d3:	8d 44 24 16          	lea    eax,[esp+0x16]
c00113d7:	50                   	push   eax
c00113d8:	57                   	push   edi
c00113d9:	e8 96 f5 fe ff       	call   c0000974 <strcat>
c00113de:	83 c4 10             	add    esp,0x10
c00113e1:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c00113e8:	75 05                	jne    c00113ef <VgaText::receiveKey(unsigned char)+0x81>
c00113ea:	80 fb 0a             	cmp    bl,0xa
c00113ed:	75 53                	jne    c0011442 <VgaText::receiveKey(unsigned char)+0xd4>
c00113ef:	83 ec 0c             	sub    esp,0xc
c00113f2:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c00113f8:	53                   	push   ebx
c00113f9:	e8 96 f3 fe ff       	call   c0000794 <strlen>
c00113fe:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011401:	89 c5                	mov    ebp,eax
c0011403:	e8 8c f3 fe ff       	call   c0000794 <strlen>
c0011408:	83 c4 10             	add    esp,0x10
c001140b:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c001140f:	3d 2c 01 00 00       	cmp    eax,0x12c
c0011414:	76 10                	jbe    c0011426 <VgaText::receiveKey(unsigned char)+0xb8>
c0011416:	83 ec 0c             	sub    esp,0xc
c0011419:	68 df a3 02 c0       	push   0xc002a3df
c001141e:	e8 d8 91 00 00       	call   c001a5fb <Krnl::panic(char const*)>
c0011423:	83 c4 10             	add    esp,0x10
c0011426:	50                   	push   eax
c0011427:	50                   	push   eax
c0011428:	57                   	push   edi
c0011429:	53                   	push   ebx
c001142a:	e8 45 f5 fe ff       	call   c0000974 <strcat>
c001142f:	83 c4 0c             	add    esp,0xc
c0011432:	68 96 00 00 00       	push   0x96
c0011437:	6a 00                	push   0x0
c0011439:	57                   	push   edi
c001143a:	e8 39 f3 fe ff       	call   c0000778 <memset>
c001143f:	83 c4 10             	add    esp,0x10
c0011442:	83 ec 0c             	sub    esp,0xc
c0011445:	56                   	push   esi
c0011446:	e8 d5 f9 ff ff       	call   c0010e20 <VgaText::doUpdate()>
c001144b:	83 c4 10             	add    esp,0x10
c001144e:	83 c4 1c             	add    esp,0x1c
c0011451:	5b                   	pop    ebx
c0011452:	5e                   	pop    esi
c0011453:	5f                   	pop    edi
c0011454:	5d                   	pop    ebp
c0011455:	c3                   	ret    

c0011456 <VgaText::write(unsigned long long, void*, int*)>:
c0011456:	55                   	push   ebp
c0011457:	57                   	push   edi
c0011458:	56                   	push   esi
c0011459:	53                   	push   ebx
c001145a:	83 ec 0c             	sub    esp,0xc
c001145d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0011461:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0011465:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011469:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c0011470:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0011473:	39 eb                	cmp    ebx,ebp
c0011475:	74 13                	je     c001148a <VgaText::write(unsigned long long, void*, int*)+0x34>
c0011477:	43                   	inc    ebx
c0011478:	50                   	push   eax
c0011479:	50                   	push   eax
c001147a:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c001147e:	50                   	push   eax
c001147f:	56                   	push   esi
c0011480:	e8 d1 fb ff ff       	call   c0011056 <VgaText::putchar(char)>
c0011485:	83 c4 10             	add    esp,0x10
c0011488:	eb e9                	jmp    c0011473 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c001148a:	83 ec 0c             	sub    esp,0xc
c001148d:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c0011494:	56                   	push   esi
c0011495:	e8 86 f9 ff ff       	call   c0010e20 <VgaText::doUpdate()>
c001149a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001149e:	89 38                	mov    DWORD PTR [eax],edi
c00114a0:	83 c4 1c             	add    esp,0x1c
c00114a3:	31 c0                	xor    eax,eax
c00114a5:	5b                   	pop    ebx
c00114a6:	5e                   	pop    esi
c00114a7:	5f                   	pop    edi
c00114a8:	5d                   	pop    ebp
c00114a9:	c3                   	ret    

c00114aa <newTerminal(char*)>:
c00114aa:	83 ec 28             	sub    esp,0x28
c00114ad:	68 60 12 00 00       	push   0x1260
c00114b2:	e8 89 e3 ff ff       	call   c000f840 <malloc>
c00114b7:	5a                   	pop    edx
c00114b8:	59                   	pop    ecx
c00114b9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00114bd:	50                   	push   eax
c00114be:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00114c2:	e8 15 fd ff ff       	call   c00111dc <VgaText::VgaText(char const*)>
c00114c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00114cb:	83 c4 2c             	add    esp,0x2c
c00114ce:	c3                   	ret    
c00114cf:	90                   	nop

c00114d0 <TSS::TSS()>:
c00114d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00114d4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00114db:	90                   	nop
c00114dc:	c3                   	ret    
c00114dd:	90                   	nop

c00114de <TSS::setESP(unsigned long)>:
c00114de:	55                   	push   ebp
c00114df:	89 e5                	mov    ebp,esp
c00114e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114e4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114e7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00114ea:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00114ed:	90                   	nop
c00114ee:	5d                   	pop    ebp
c00114ef:	c3                   	ret    

c00114f0 <TSS::flush()>:
c00114f0:	55                   	push   ebp
c00114f1:	89 e5                	mov    ebp,esp
c00114f3:	83 ec 10             	sub    esp,0x10
c00114f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00114fb:	83 c8 03             	or     eax,0x3
c00114fe:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0011502:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0011506:	66 89 d0             	mov    ax,dx
c0011509:	0f 00 d8             	ltr    ax
c001150c:	90                   	nop
c001150d:	c9                   	leave  
c001150e:	c3                   	ret    
c001150f:	90                   	nop

c0011510 <TSS::setup(unsigned long, unsigned long)>:
c0011510:	55                   	push   ebp
c0011511:	89 e5                	mov    ebp,esp
c0011513:	83 ec 18             	sub    esp,0x18
c0011516:	83 ec 0c             	sub    esp,0xc
c0011519:	6a 68                	push   0x68
c001151b:	e8 20 e3 ff ff       	call   c000f840 <malloc>
c0011520:	83 c4 10             	add    esp,0x10
c0011523:	89 c2                	mov    edx,eax
c0011525:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011528:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001152b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001152e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011531:	83 ec 04             	sub    esp,0x4
c0011534:	6a 68                	push   0x68
c0011536:	6a 00                	push   0x0
c0011538:	50                   	push   eax
c0011539:	e8 3a f2 fe ff       	call   c0000778 <memset>
c001153e:	83 c4 10             	add    esp,0x10
c0011541:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011544:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011547:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c001154d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011550:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011553:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0011559:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001155c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001155f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011562:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011565:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011568:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001156b:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0011571:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011574:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011577:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c001157d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011580:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011583:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0011589:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001158c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001158f:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0011595:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011598:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001159b:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c00115a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115a7:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c00115ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115b0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115b3:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00115b6:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00115b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115bf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00115c2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00115c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115cb:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c00115d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115d5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115d8:	0f 20 da             	mov    edx,cr3
c00115db:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00115de:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00115e1:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00115e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115e7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115ea:	83 ec 08             	sub    esp,0x8
c00115ed:	50                   	push   eax
c00115ee:	8d 45 ec             	lea    eax,[ebp-0x14]
c00115f1:	50                   	push   eax
c00115f2:	e8 27 da ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c00115f7:	83 c4 10             	add    esp,0x10
c00115fa:	83 ec 08             	sub    esp,0x8
c00115fd:	6a 68                	push   0x68
c00115ff:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011602:	50                   	push   eax
c0011603:	e8 32 da ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c0011608:	83 c4 10             	add    esp,0x10
c001160b:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c001160f:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011612:	83 e0 0f             	and    eax,0xf
c0011615:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011618:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c001161b:	83 c8 40             	or     eax,0x40
c001161e:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011621:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0011626:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001162c:	05 78 01 00 00       	add    eax,0x178
c0011631:	83 ec 04             	sub    esp,0x4
c0011634:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011637:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001163a:	50                   	push   eax
c001163b:	e8 2e da ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c0011640:	83 c4 10             	add    esp,0x10
c0011643:	89 c2                	mov    edx,eax
c0011645:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011648:	89 10                	mov    DWORD PTR [eax],edx
c001164a:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c001164f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011655:	05 78 01 00 00       	add    eax,0x178
c001165a:	83 ec 0c             	sub    esp,0xc
c001165d:	50                   	push   eax
c001165e:	e8 4f da ff ff       	call   c000f0b2 <GDT::flush()>
c0011663:	83 c4 10             	add    esp,0x10
c0011666:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011669:	8b 00                	mov    eax,DWORD PTR [eax]
c001166b:	83 ec 08             	sub    esp,0x8
c001166e:	50                   	push   eax
c001166f:	68 48 a4 02 c0       	push   0xc002a448
c0011674:	e8 d1 18 00 00       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0011679:	83 c4 10             	add    esp,0x10
c001167c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001167f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011681:	c9                   	leave  
c0011682:	c3                   	ret    
c0011683:	90                   	nop

c0011684 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0011684:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011688:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001168c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001168f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011694:	75 08                	jne    c001169e <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0011696:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c001169c:	eb 38                	jmp    c00116d6 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c001169e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00116a3:	75 17                	jne    c00116bc <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00116a5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116aa:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00116ad:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00116b3:	8b 10                	mov    edx,DWORD PTR [eax]
c00116b5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00116b9:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c00116bc:	89 c1                	mov    ecx,eax
c00116be:	83 e1 fd             	and    ecx,0xfffffffd
c00116c1:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c00116c7:	74 cd                	je     c0011696 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00116c9:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00116ce:	83 e0 ef             	and    eax,0xffffffef
c00116d1:	83 f8 08             	cmp    eax,0x8
c00116d4:	76 c0                	jbe    c0011696 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00116d6:	31 c0                	xor    eax,eax
c00116d8:	c3                   	ret    
c00116d9:	90                   	nop

c00116da <ReservedFilename::isAtty()>:
c00116da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116de:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00116e1:	31 c0                	xor    eax,eax
c00116e3:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c00116e9:	74 09                	je     c00116f4 <ReservedFilename::isAtty()+0x1a>
c00116eb:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c00116f1:	0f 94 c0             	sete   al
c00116f4:	c3                   	ret    
c00116f5:	90                   	nop

c00116f6 <ReservedFilename::write(unsigned long long, void*, int*)>:
c00116f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116fa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00116fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011701:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011705:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001170a:	75 08                	jne    c0011714 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c001170c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011712:	eb 3d                	jmp    c0011751 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011714:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011719:	75 17                	jne    c0011732 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c001171b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011720:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011723:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011729:	8b 10                	mov    edx,DWORD PTR [eax]
c001172b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001172f:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0011732:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011737:	75 04                	jne    c001173d <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0011739:	89 0a                	mov    DWORD PTR [edx],ecx
c001173b:	eb 14                	jmp    c0011751 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c001173d:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0011742:	74 c8                	je     c001170c <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011744:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011749:	83 e0 ef             	and    eax,0xffffffef
c001174c:	83 f8 08             	cmp    eax,0x8
c001174f:	76 bb                	jbe    c001170c <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011751:	31 c0                	xor    eax,eax
c0011753:	c3                   	ret    

c0011754 <UnixFile::getFileDescriptor()>:
c0011754:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011758:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001175b:	c3                   	ret    

c001175c <UnixFile::UnixFile(int)>:
c001175c:	53                   	push   ebx
c001175d:	83 ec 28             	sub    esp,0x28
c0011760:	ba 34 a5 02 c0       	mov    edx,0xc002a534
c0011765:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011769:	89 10                	mov    DWORD PTR [eax],edx
c001176b:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0011773:	0f 8f 8c 01 00 00    	jg     c0011905 <UnixFile::UnixFile(int)+0x1a9>
c0011779:	a1 a0 d3 02 c0       	mov    eax,ds:0xc002d3a0
c001177e:	8d 50 01             	lea    edx,[eax+0x1]
c0011781:	89 15 a0 d3 02 c0    	mov    DWORD PTR ds:0xc002d3a0,edx
c0011787:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001178b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001178e:	83 ec 08             	sub    esp,0x8
c0011791:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011795:	68 78 e5 02 c0       	push   0xc002e578
c001179a:	e8 81 6f 01 00       	call   c0028720 <LinkedList<UnixFile>::addElement(UnixFile*)>
c001179f:	83 c4 10             	add    esp,0x10
c00117a2:	a0 74 e5 02 c0       	mov    al,ds:0xc002e574
c00117a7:	83 f0 01             	xor    eax,0x1
c00117aa:	84 c0                	test   al,al
c00117ac:	0f 84 54 01 00 00    	je     c0011906 <UnixFile::UnixFile(int)+0x1aa>
c00117b2:	c6 05 74 e5 02 c0 01 	mov    BYTE PTR ds:0xc002e574,0x1
c00117b9:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c00117c1:	83 ec 0c             	sub    esp,0xc
c00117c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00117c8:	e8 73 e0 ff ff       	call   c000f840 <malloc>
c00117cd:	83 c4 10             	add    esp,0x10
c00117d0:	89 c3                	mov    ebx,eax
c00117d2:	83 ec 08             	sub    esp,0x8
c00117d5:	68 03 ff ff 0f       	push   0xfffff03
c00117da:	53                   	push   ebx
c00117db:	e8 2c 01 00 00       	call   c001190c <ReservedFilename::ReservedFilename(int)>
c00117e0:	83 c4 10             	add    esp,0x10
c00117e3:	89 1d 6c e5 02 c0    	mov    DWORD PTR ds:0xc002e56c,ebx
c00117e9:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00117f1:	83 ec 0c             	sub    esp,0xc
c00117f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00117f8:	e8 43 e0 ff ff       	call   c000f840 <malloc>
c00117fd:	83 c4 10             	add    esp,0x10
c0011800:	89 c3                	mov    ebx,eax
c0011802:	83 ec 08             	sub    esp,0x8
c0011805:	68 01 ff ff 0f       	push   0xfffff01
c001180a:	53                   	push   ebx
c001180b:	e8 fc 00 00 00       	call   c001190c <ReservedFilename::ReservedFilename(int)>
c0011810:	83 c4 10             	add    esp,0x10
c0011813:	89 1d 70 e5 02 c0    	mov    DWORD PTR ds:0xc002e570,ebx
c0011819:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0011821:	83 ec 0c             	sub    esp,0xc
c0011824:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011828:	e8 13 e0 ff ff       	call   c000f840 <malloc>
c001182d:	83 c4 10             	add    esp,0x10
c0011830:	89 c3                	mov    ebx,eax
c0011832:	83 ec 08             	sub    esp,0x8
c0011835:	68 00 ff ff 0f       	push   0xfffff00
c001183a:	53                   	push   ebx
c001183b:	e8 cc 00 00 00       	call   c001190c <ReservedFilename::ReservedFilename(int)>
c0011840:	83 c4 10             	add    esp,0x10
c0011843:	89 1d 64 e5 02 c0    	mov    DWORD PTR ds:0xc002e564,ebx
c0011849:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0011851:	83 ec 0c             	sub    esp,0xc
c0011854:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011858:	e8 e3 df ff ff       	call   c000f840 <malloc>
c001185d:	83 c4 10             	add    esp,0x10
c0011860:	89 c3                	mov    ebx,eax
c0011862:	83 ec 08             	sub    esp,0x8
c0011865:	68 02 ff ff 0f       	push   0xfffff02
c001186a:	53                   	push   ebx
c001186b:	e8 9c 00 00 00       	call   c001190c <ReservedFilename::ReservedFilename(int)>
c0011870:	83 c4 10             	add    esp,0x10
c0011873:	89 1d 68 e5 02 c0    	mov    DWORD PTR ds:0xc002e568,ebx
c0011879:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011881:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0011886:	7f 7e                	jg     c0011906 <UnixFile::UnixFile(int)+0x1aa>
c0011888:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0011890:	83 ec 0c             	sub    esp,0xc
c0011893:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011897:	e8 a4 df ff ff       	call   c000f840 <malloc>
c001189c:	83 c4 10             	add    esp,0x10
c001189f:	89 c3                	mov    ebx,eax
c00118a1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118a5:	05 10 ff ff 0f       	add    eax,0xfffff10
c00118aa:	83 ec 08             	sub    esp,0x8
c00118ad:	50                   	push   eax
c00118ae:	53                   	push   ebx
c00118af:	e8 58 00 00 00       	call   c001190c <ReservedFilename::ReservedFilename(int)>
c00118b4:	83 c4 10             	add    esp,0x10
c00118b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118bb:	89 1c 85 40 e5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1ac0],ebx
c00118c2:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00118ca:	83 ec 0c             	sub    esp,0xc
c00118cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00118d1:	e8 6a df ff ff       	call   c000f840 <malloc>
c00118d6:	83 c4 10             	add    esp,0x10
c00118d9:	89 c3                	mov    ebx,eax
c00118db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118df:	05 20 ff ff 0f       	add    eax,0xfffff20
c00118e4:	83 ec 08             	sub    esp,0x8
c00118e7:	50                   	push   eax
c00118e8:	53                   	push   ebx
c00118e9:	e8 1e 00 00 00       	call   c001190c <ReservedFilename::ReservedFilename(int)>
c00118ee:	83 c4 10             	add    esp,0x10
c00118f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118f5:	89 1c 85 00 e5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1b00],ebx
c00118fc:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011900:	e9 7c ff ff ff       	jmp    c0011881 <UnixFile::UnixFile(int)+0x125>
c0011905:	90                   	nop
c0011906:	83 c4 28             	add    esp,0x28
c0011909:	5b                   	pop    ebx
c001190a:	c3                   	ret    
c001190b:	90                   	nop

c001190c <ReservedFilename::ReservedFilename(int)>:
c001190c:	83 ec 0c             	sub    esp,0xc
c001190f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011913:	83 ec 08             	sub    esp,0x8
c0011916:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001191a:	50                   	push   eax
c001191b:	e8 3c fe ff ff       	call   c001175c <UnixFile::UnixFile(int)>
c0011920:	83 c4 10             	add    esp,0x10
c0011923:	ba 50 a5 02 c0       	mov    edx,0xc002a550
c0011928:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001192c:	89 10                	mov    DWORD PTR [eax],edx
c001192e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011932:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011936:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011939:	90                   	nop
c001193a:	83 c4 0c             	add    esp,0xc
c001193d:	c3                   	ret    

c001193e <UnixFile::~UnixFile()>:
c001193e:	83 ec 1c             	sub    esp,0x1c
c0011941:	ba 34 a5 02 c0       	mov    edx,0xc002a534
c0011946:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001194a:	89 10                	mov    DWORD PTR [eax],edx
c001194c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011950:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011953:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0011958:	7f 73                	jg     c00119cd <UnixFile::~UnixFile()+0x8f>
c001195a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011962:	83 ec 0c             	sub    esp,0xc
c0011965:	68 78 e5 02 c0       	push   0xc002e578
c001196a:	e8 85 6e 01 00       	call   c00287f4 <LinkedList<UnixFile>::getFirstElement()>
c001196f:	83 c4 10             	add    esp,0x10
c0011972:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011976:	83 ec 0c             	sub    esp,0xc
c0011979:	68 78 e5 02 c0       	push   0xc002e578
c001197e:	e8 79 6e 01 00       	call   c00287fc <LinkedList<UnixFile>::removeFirst()>
c0011983:	83 c4 10             	add    esp,0x10
c0011986:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001198a:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001198e:	74 40                	je     c00119d0 <UnixFile::~UnixFile()+0x92>
c0011990:	83 ec 08             	sub    esp,0x8
c0011993:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011997:	68 78 e5 02 c0       	push   0xc002e578
c001199c:	e8 7f 6d 01 00       	call   c0028720 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00119a1:	83 c4 10             	add    esp,0x10
c00119a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00119a8:	8d 50 01             	lea    edx,[eax+0x1]
c00119ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00119af:	3d 88 13 00 00       	cmp    eax,0x1388
c00119b4:	0f 94 c0             	sete   al
c00119b7:	84 c0                	test   al,al
c00119b9:	74 a7                	je     c0011962 <UnixFile::~UnixFile()+0x24>
c00119bb:	83 ec 0c             	sub    esp,0xc
c00119be:	68 0c a5 02 c0       	push   0xc002a50c
c00119c3:	e8 33 8c 00 00       	call   c001a5fb <Krnl::panic(char const*)>
c00119c8:	83 c4 10             	add    esp,0x10
c00119cb:	eb 95                	jmp    c0011962 <UnixFile::~UnixFile()+0x24>
c00119cd:	90                   	nop
c00119ce:	eb 01                	jmp    c00119d1 <UnixFile::~UnixFile()+0x93>
c00119d0:	90                   	nop
c00119d1:	90                   	nop
c00119d2:	83 c4 1c             	add    esp,0x1c
c00119d5:	c3                   	ret    

c00119d6 <UnixFile::~UnixFile()>:
c00119d6:	83 ec 0c             	sub    esp,0xc
c00119d9:	83 ec 0c             	sub    esp,0xc
c00119dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119e0:	e8 59 ff ff ff       	call   c001193e <UnixFile::~UnixFile()>
c00119e5:	83 c4 10             	add    esp,0x10
c00119e8:	83 ec 08             	sub    esp,0x8
c00119eb:	6a 0c                	push   0xc
c00119ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119f1:	e8 74 14 00 00       	call   c0012e6a <operator delete(void*, unsigned long)>
c00119f6:	83 c4 10             	add    esp,0x10
c00119f9:	83 c4 0c             	add    esp,0xc
c00119fc:	c3                   	ret    
c00119fd:	90                   	nop

c00119fe <ReservedFilename::~ReservedFilename()>:
c00119fe:	83 ec 0c             	sub    esp,0xc
c0011a01:	ba 50 a5 02 c0       	mov    edx,0xc002a550
c0011a06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a0a:	89 10                	mov    DWORD PTR [eax],edx
c0011a0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a10:	83 ec 0c             	sub    esp,0xc
c0011a13:	50                   	push   eax
c0011a14:	e8 25 ff ff ff       	call   c001193e <UnixFile::~UnixFile()>
c0011a19:	83 c4 10             	add    esp,0x10
c0011a1c:	90                   	nop
c0011a1d:	83 c4 0c             	add    esp,0xc
c0011a20:	c3                   	ret    
c0011a21:	90                   	nop

c0011a22 <ReservedFilename::~ReservedFilename()>:
c0011a22:	83 ec 0c             	sub    esp,0xc
c0011a25:	83 ec 0c             	sub    esp,0xc
c0011a28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a2c:	e8 cd ff ff ff       	call   c00119fe <ReservedFilename::~ReservedFilename()>
c0011a31:	83 c4 10             	add    esp,0x10
c0011a34:	83 ec 08             	sub    esp,0x8
c0011a37:	6a 0c                	push   0xc
c0011a39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a3d:	e8 28 14 00 00       	call   c0012e6a <operator delete(void*, unsigned long)>
c0011a42:	83 c4 10             	add    esp,0x10
c0011a45:	83 c4 0c             	add    esp,0xc
c0011a48:	c3                   	ret    

c0011a49 <getFromFileDescriptor(int)>:
c0011a49:	53                   	push   ebx
c0011a4a:	83 ec 08             	sub    esp,0x8
c0011a4d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011a51:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011a57:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0011a5d:	7f 2c                	jg     c0011a8b <getFromFileDescriptor(int)+0x42>
c0011a5f:	83 ec 0c             	sub    esp,0xc
c0011a62:	68 78 e5 02 c0       	push   0xc002e578
c0011a67:	e8 88 6d 01 00       	call   c00287f4 <LinkedList<UnixFile>::getFirstElement()>
c0011a6c:	83 c4 10             	add    esp,0x10
c0011a6f:	85 c0                	test   eax,eax
c0011a71:	75 04                	jne    c0011a77 <getFromFileDescriptor(int)+0x2e>
c0011a73:	31 c0                	xor    eax,eax
c0011a75:	eb 6e                	jmp    c0011ae5 <getFromFileDescriptor(int)+0x9c>
c0011a77:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011a7a:	74 69                	je     c0011ae5 <getFromFileDescriptor(int)+0x9c>
c0011a7c:	52                   	push   edx
c0011a7d:	52                   	push   edx
c0011a7e:	50                   	push   eax
c0011a7f:	68 78 e5 02 c0       	push   0xc002e578
c0011a84:	e8 15 6e 01 00       	call   c002889e <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011a89:	eb e1                	jmp    c0011a6c <getFromFileDescriptor(int)+0x23>
c0011a8b:	a1 6c e5 02 c0       	mov    eax,ds:0xc002e56c
c0011a90:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011a96:	74 4d                	je     c0011ae5 <getFromFileDescriptor(int)+0x9c>
c0011a98:	a1 70 e5 02 c0       	mov    eax,ds:0xc002e570
c0011a9d:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011aa3:	74 40                	je     c0011ae5 <getFromFileDescriptor(int)+0x9c>
c0011aa5:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c0011aaa:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011ab0:	74 33                	je     c0011ae5 <getFromFileDescriptor(int)+0x9c>
c0011ab2:	a1 64 e5 02 c0       	mov    eax,ds:0xc002e564
c0011ab7:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011abd:	74 26                	je     c0011ae5 <getFromFileDescriptor(int)+0x9c>
c0011abf:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011ac5:	83 f8 08             	cmp    eax,0x8
c0011ac8:	77 09                	ja     c0011ad3 <getFromFileDescriptor(int)+0x8a>
c0011aca:	8b 04 85 40 e5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1ac0]
c0011ad1:	eb 12                	jmp    c0011ae5 <getFromFileDescriptor(int)+0x9c>
c0011ad3:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011ad9:	83 fb 08             	cmp    ebx,0x8
c0011adc:	77 95                	ja     c0011a73 <getFromFileDescriptor(int)+0x2a>
c0011ade:	8b 04 9d 00 e5 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd1b00]
c0011ae5:	83 c4 08             	add    esp,0x8
c0011ae8:	5b                   	pop    ebx
c0011ae9:	c3                   	ret    

c0011aea <__static_initialization_and_destruction_0(int, int)>:
c0011aea:	83 ec 0c             	sub    esp,0xc
c0011aed:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011af2:	75 34                	jne    c0011b28 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011af4:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011afc:	75 2a                	jne    c0011b28 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011afe:	83 ec 0c             	sub    esp,0xc
c0011b01:	68 78 e5 02 c0       	push   0xc002e578
c0011b06:	e8 bd 6b 01 00       	call   c00286c8 <LinkedList<UnixFile>::LinkedList()>
c0011b0b:	83 c4 10             	add    esp,0x10
c0011b0e:	83 ec 04             	sub    esp,0x4
c0011b11:	68 28 d3 02 c0       	push   0xc002d328
c0011b16:	68 78 e5 02 c0       	push   0xc002e578
c0011b1b:	68 c6 86 02 c0       	push   0xc00286c6
c0011b20:	e8 bf 12 00 00       	call   c0012de4 <__cxa_atexit>
c0011b25:	83 c4 10             	add    esp,0x10
c0011b28:	90                   	nop
c0011b29:	83 c4 0c             	add    esp,0xc
c0011b2c:	c3                   	ret    

c0011b2d <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011b2d:	83 ec 0c             	sub    esp,0xc
c0011b30:	83 ec 08             	sub    esp,0x8
c0011b33:	68 ff ff 00 00       	push   0xffff
c0011b38:	6a 01                	push   0x1
c0011b3a:	e8 ab ff ff ff       	call   c0011aea <__static_initialization_and_destruction_0(int, int)>
c0011b3f:	83 c4 10             	add    esp,0x10
c0011b42:	83 c4 0c             	add    esp,0xc
c0011b45:	c3                   	ret    

c0011b46 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011b46:	53                   	push   ebx
c0011b47:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011b4b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b4f:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011b55:	89 c8                	mov    eax,ecx
c0011b57:	d1 e8                	shr    eax,1
c0011b59:	03 05 a8 d3 02 c0    	add    eax,DWORD PTR ds:0xc002d3a8
c0011b5f:	83 e1 01             	and    ecx,0x1
c0011b62:	8a 10                	mov    dl,BYTE PTR [eax]
c0011b64:	75 09                	jne    c0011b6f <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011b66:	83 e2 f0             	and    edx,0xfffffff0
c0011b69:	09 da                	or     edx,ebx
c0011b6b:	88 10                	mov    BYTE PTR [eax],dl
c0011b6d:	5b                   	pop    ebx
c0011b6e:	c3                   	ret    
c0011b6f:	c1 e3 04             	shl    ebx,0x4
c0011b72:	83 e2 0f             	and    edx,0xf
c0011b75:	09 da                	or     edx,ebx
c0011b77:	88 10                	mov    BYTE PTR [eax],dl
c0011b79:	5b                   	pop    ebx
c0011b7a:	c3                   	ret    

c0011b7b <Virt::getPageState(unsigned long)>:
c0011b7b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b7f:	8b 0d a8 d3 02 c0    	mov    ecx,DWORD PTR ds:0xc002d3a8
c0011b85:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011b8b:	89 d0                	mov    eax,edx
c0011b8d:	d1 e8                	shr    eax,1
c0011b8f:	83 e2 01             	and    edx,0x1
c0011b92:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011b95:	75 04                	jne    c0011b9b <Virt::getPageState(unsigned long)+0x20>
c0011b97:	83 e0 0f             	and    eax,0xf
c0011b9a:	c3                   	ret    
c0011b9b:	c0 e8 04             	shr    al,0x4
c0011b9e:	c3                   	ret    

c0011b9f <Virt::allocateKernelVirtualPages(int)>:
c0011b9f:	55                   	push   ebp
c0011ba0:	31 ed                	xor    ebp,ebp
c0011ba2:	57                   	push   edi
c0011ba3:	56                   	push   esi
c0011ba4:	53                   	push   ebx
c0011ba5:	31 db                	xor    ebx,ebx
c0011ba7:	83 ec 1c             	sub    esp,0x1c
c0011baa:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011bae:	8b 3d a4 d3 02 c0    	mov    edi,DWORD PTR ds:0xc002d3a4
c0011bb4:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011bb9:	57                   	push   edi
c0011bba:	e8 bc ff ff ff       	call   c0011b7b <Virt::getPageState(unsigned long)>
c0011bbf:	5a                   	pop    edx
c0011bc0:	84 c0                	test   al,al
c0011bc2:	75 3a                	jne    c0011bfe <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011bc4:	85 db                	test   ebx,ebx
c0011bc6:	75 02                	jne    c0011bca <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011bc8:	89 fd                	mov    ebp,edi
c0011bca:	43                   	inc    ebx
c0011bcb:	39 f3                	cmp    ebx,esi
c0011bcd:	74 5a                	je     c0011c29 <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011bcf:	47                   	inc    edi
c0011bd0:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011bd6:	76 31                	jbe    c0011c09 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011bd8:	c7 05 a4 d3 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002d3a4,0xc8000
c0011be2:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011be7:	75 28                	jne    c0011c11 <Virt::allocateKernelVirtualPages(int)+0x72>
c0011be9:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011bee:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011bf3:	57                   	push   edi
c0011bf4:	e8 82 ff ff ff       	call   c0011b7b <Virt::getPageState(unsigned long)>
c0011bf9:	5a                   	pop    edx
c0011bfa:	84 c0                	test   al,al
c0011bfc:	74 c6                	je     c0011bc4 <Virt::allocateKernelVirtualPages(int)+0x25>
c0011bfe:	31 db                	xor    ebx,ebx
c0011c00:	47                   	inc    edi
c0011c01:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011c07:	77 cf                	ja     c0011bd8 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011c09:	89 3d a4 d3 02 c0    	mov    DWORD PTR ds:0xc002d3a4,edi
c0011c0f:	eb a8                	jmp    c0011bb9 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011c11:	83 ec 0c             	sub    esp,0xc
c0011c14:	68 64 a5 02 c0       	push   0xc002a564
c0011c19:	e8 dd 89 00 00       	call   c001a5fb <Krnl::panic(char const*)>
c0011c1e:	8b 3d a4 d3 02 c0    	mov    edi,DWORD PTR ds:0xc002d3a4
c0011c24:	83 c4 10             	add    esp,0x10
c0011c27:	eb 90                	jmp    c0011bb9 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011c29:	89 2d a4 d3 02 c0    	mov    DWORD PTR ds:0xc002d3a4,ebp
c0011c2f:	4b                   	dec    ebx
c0011c30:	74 5f                	je     c0011c91 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011c32:	85 f6                	test   esi,esi
c0011c34:	74 3d                	je     c0011c73 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011c36:	89 e8                	mov    eax,ebp
c0011c38:	31 db                	xor    ebx,ebx
c0011c3a:	8d 7e ff             	lea    edi,[esi-0x1]
c0011c3d:	eb 14                	jmp    c0011c53 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011c3f:	6a 01                	push   0x1
c0011c41:	43                   	inc    ebx
c0011c42:	50                   	push   eax
c0011c43:	e8 fe fe ff ff       	call   c0011b46 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c48:	58                   	pop    eax
c0011c49:	39 f3                	cmp    ebx,esi
c0011c4b:	5a                   	pop    edx
c0011c4c:	74 25                	je     c0011c73 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011c4e:	a1 a4 d3 02 c0       	mov    eax,ds:0xc002d3a4
c0011c53:	8d 50 01             	lea    edx,[eax+0x1]
c0011c56:	85 db                	test   ebx,ebx
c0011c58:	89 15 a4 d3 02 c0    	mov    DWORD PTR ds:0xc002d3a4,edx
c0011c5e:	74 20                	je     c0011c80 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011c60:	39 df                	cmp    edi,ebx
c0011c62:	75 db                	jne    c0011c3f <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011c64:	6a 03                	push   0x3
c0011c66:	43                   	inc    ebx
c0011c67:	50                   	push   eax
c0011c68:	e8 d9 fe ff ff       	call   c0011b46 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c6d:	59                   	pop    ecx
c0011c6e:	39 f3                	cmp    ebx,esi
c0011c70:	58                   	pop    eax
c0011c71:	75 db                	jne    c0011c4e <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011c73:	83 c4 1c             	add    esp,0x1c
c0011c76:	89 e8                	mov    eax,ebp
c0011c78:	5b                   	pop    ebx
c0011c79:	c1 e0 0c             	shl    eax,0xc
c0011c7c:	5e                   	pop    esi
c0011c7d:	5f                   	pop    edi
c0011c7e:	5d                   	pop    ebp
c0011c7f:	c3                   	ret    
c0011c80:	6a 02                	push   0x2
c0011c82:	bb 01 00 00 00       	mov    ebx,0x1
c0011c87:	50                   	push   eax
c0011c88:	e8 b9 fe ff ff       	call   c0011b46 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c8d:	58                   	pop    eax
c0011c8e:	5a                   	pop    edx
c0011c8f:	eb bd                	jmp    c0011c4e <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011c91:	6a 04                	push   0x4
c0011c93:	8d 45 01             	lea    eax,[ebp+0x1]
c0011c96:	55                   	push   ebp
c0011c97:	a3 a4 d3 02 c0       	mov    ds:0xc002d3a4,eax
c0011c9c:	e8 a5 fe ff ff       	call   c0011b46 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011ca1:	59                   	pop    ecx
c0011ca2:	89 e8                	mov    eax,ebp
c0011ca4:	5b                   	pop    ebx
c0011ca5:	c1 e0 0c             	shl    eax,0xc
c0011ca8:	83 c4 1c             	add    esp,0x1c
c0011cab:	5b                   	pop    ebx
c0011cac:	5e                   	pop    esi
c0011cad:	5f                   	pop    edi
c0011cae:	5d                   	pop    ebp
c0011caf:	c3                   	ret    

c0011cb0 <Virt::freeSwapfilePage(unsigned long)>:
c0011cb0:	53                   	push   ebx
c0011cb1:	8b 15 88 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e588
c0011cb7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011cbb:	b8 01 00 00 00       	mov    eax,0x1
c0011cc0:	89 cb                	mov    ebx,ecx
c0011cc2:	d3 e0                	shl    eax,cl
c0011cc4:	c1 eb 05             	shr    ebx,0x5
c0011cc7:	f7 d0                	not    eax
c0011cc9:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0011ccc:	5b                   	pop    ebx
c0011ccd:	c3                   	ret    

c0011cce <Virt::swapIDToSector(unsigned long)>:
c0011cce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011cd2:	0f af 05 ac d3 02 c0 	imul   eax,DWORD PTR ds:0xc002d3ac
c0011cd9:	03 05 b4 d3 02 c0    	add    eax,DWORD PTR ds:0xc002d3b4
c0011cdf:	c3                   	ret    

c0011ce0 <Virt::allocateSwapfilePage()>:
c0011ce0:	55                   	push   ebp
c0011ce1:	31 d2                	xor    edx,edx
c0011ce3:	57                   	push   edi
c0011ce4:	56                   	push   esi
c0011ce5:	53                   	push   ebx
c0011ce6:	83 ec 0c             	sub    esp,0xc
c0011ce9:	8b 0d ac d3 02 c0    	mov    ecx,DWORD PTR ds:0xc002d3ac
c0011cef:	a1 b0 d3 02 c0       	mov    eax,ds:0xc002d3b0
c0011cf4:	f7 f1                	div    ecx
c0011cf6:	39 0d b0 d3 02 c0    	cmp    DWORD PTR ds:0xc002d3b0,ecx
c0011cfc:	72 2d                	jb     c0011d2b <Virt::allocateSwapfilePage()+0x4b>
c0011cfe:	8b 35 88 e5 02 c0    	mov    esi,DWORD PTR ds:0xc002e588
c0011d04:	8b 16                	mov    edx,DWORD PTR [esi]
c0011d06:	f6 c2 01             	test   dl,0x1
c0011d09:	74 3c                	je     c0011d47 <Virt::allocateSwapfilePage()+0x67>
c0011d0b:	31 c9                	xor    ecx,ecx
c0011d0d:	bf 01 00 00 00       	mov    edi,0x1
c0011d12:	eb 12                	jmp    c0011d26 <Virt::allocateSwapfilePage()+0x46>
c0011d14:	89 fd                	mov    ebp,edi
c0011d16:	89 ca                	mov    edx,ecx
c0011d18:	d3 e5                	shl    ebp,cl
c0011d1a:	c1 ea 05             	shr    edx,0x5
c0011d1d:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011d20:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011d22:	85 ea                	test   edx,ebp
c0011d24:	74 2a                	je     c0011d50 <Virt::allocateSwapfilePage()+0x70>
c0011d26:	41                   	inc    ecx
c0011d27:	39 c8                	cmp    eax,ecx
c0011d29:	77 e9                	ja     c0011d14 <Virt::allocateSwapfilePage()+0x34>
c0011d2b:	83 ec 0c             	sub    esp,0xc
c0011d2e:	68 0b a7 02 c0       	push   0xc002a70b
c0011d33:	e8 c3 88 00 00       	call   c001a5fb <Krnl::panic(char const*)>
c0011d38:	83 c4 10             	add    esp,0x10
c0011d3b:	31 c9                	xor    ecx,ecx
c0011d3d:	83 c4 0c             	add    esp,0xc
c0011d40:	89 c8                	mov    eax,ecx
c0011d42:	5b                   	pop    ebx
c0011d43:	5e                   	pop    esi
c0011d44:	5f                   	pop    edi
c0011d45:	5d                   	pop    ebp
c0011d46:	c3                   	ret    
c0011d47:	89 f3                	mov    ebx,esi
c0011d49:	bd 01 00 00 00       	mov    ebp,0x1
c0011d4e:	31 c9                	xor    ecx,ecx
c0011d50:	09 ea                	or     edx,ebp
c0011d52:	89 c8                	mov    eax,ecx
c0011d54:	89 13                	mov    DWORD PTR [ebx],edx
c0011d56:	83 c4 0c             	add    esp,0xc
c0011d59:	5b                   	pop    ebx
c0011d5a:	5e                   	pop    esi
c0011d5b:	5f                   	pop    edi
c0011d5c:	5d                   	pop    ebp
c0011d5d:	c3                   	ret    

c0011d5e <Virt::virtualMemorySetup()>:
c0011d5e:	53                   	push   ebx
c0011d5f:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011d64:	83 ec 08             	sub    esp,0x8
c0011d67:	6a 0f                	push   0xf
c0011d69:	53                   	push   ebx
c0011d6a:	43                   	inc    ebx
c0011d6b:	e8 d6 fd ff ff       	call   c0011b46 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d70:	59                   	pop    ecx
c0011d71:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011d77:	58                   	pop    eax
c0011d78:	75 ed                	jne    c0011d67 <Virt::virtualMemorySetup()+0x9>
c0011d7a:	83 ec 08             	sub    esp,0x8
c0011d7d:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011d82:	68 00 00 00 c8       	push   0xc8000000
c0011d87:	68 22 a7 02 c0       	push   0xc002a722
c0011d8c:	e8 b9 11 00 00       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0011d91:	58                   	pop    eax
c0011d92:	5a                   	pop    edx
c0011d93:	68 00 f0 ff ef       	push   0xeffff000
c0011d98:	68 36 a7 02 c0       	push   0xc002a736
c0011d9d:	e8 a8 11 00 00       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0011da2:	83 c4 10             	add    esp,0x10
c0011da5:	83 ec 08             	sub    esp,0x8
c0011da8:	6a 00                	push   0x0
c0011daa:	53                   	push   ebx
c0011dab:	43                   	inc    ebx
c0011dac:	e8 95 fd ff ff       	call   c0011b46 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011db1:	83 c4 10             	add    esp,0x10
c0011db4:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011dba:	75 e9                	jne    c0011da5 <Virt::virtualMemorySetup()+0x47>
c0011dbc:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011dc1:	83 ec 08             	sub    esp,0x8
c0011dc4:	6a 0f                	push   0xf
c0011dc6:	53                   	push   ebx
c0011dc7:	43                   	inc    ebx
c0011dc8:	e8 79 fd ff ff       	call   c0011b46 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011dcd:	83 c4 10             	add    esp,0x10
c0011dd0:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011dd6:	75 e9                	jne    c0011dc1 <Virt::virtualMemorySetup()+0x63>
c0011dd8:	83 c4 08             	add    esp,0x8
c0011ddb:	5b                   	pop    ebx
c0011ddc:	c3                   	ret    

c0011ddd <Virt::swappingSetup()>:
c0011ddd:	83 ec 14             	sub    esp,0x14
c0011de0:	31 d2                	xor    edx,edx
c0011de2:	a1 b0 d3 02 c0       	mov    eax,ds:0xc002d3b0
c0011de7:	f7 35 ac d3 02 c0    	div    DWORD PTR ds:0xc002d3ac
c0011ded:	c1 e8 05             	shr    eax,0x5
c0011df0:	50                   	push   eax
c0011df1:	68 4a a7 02 c0       	push   0xc002a74a
c0011df6:	e8 4f 11 00 00       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0011dfb:	a1 b0 d3 02 c0       	mov    eax,ds:0xc002d3b0
c0011e00:	31 d2                	xor    edx,edx
c0011e02:	f7 35 ac d3 02 c0    	div    DWORD PTR ds:0xc002d3ac
c0011e08:	c1 e8 05             	shr    eax,0x5
c0011e0b:	89 04 24             	mov    DWORD PTR [esp],eax
c0011e0e:	e8 2d da ff ff       	call   c000f840 <malloc>
c0011e13:	83 c4 0c             	add    esp,0xc
c0011e16:	89 c1                	mov    ecx,eax
c0011e18:	a3 88 e5 02 c0       	mov    ds:0xc002e588,eax
c0011e1d:	31 d2                	xor    edx,edx
c0011e1f:	a1 b0 d3 02 c0       	mov    eax,ds:0xc002d3b0
c0011e24:	f7 35 ac d3 02 c0    	div    DWORD PTR ds:0xc002d3ac
c0011e2a:	c1 e8 05             	shr    eax,0x5
c0011e2d:	50                   	push   eax
c0011e2e:	6a 00                	push   0x0
c0011e30:	51                   	push   ecx
c0011e31:	e8 42 e9 fe ff       	call   c0000778 <memset>
c0011e36:	83 c4 1c             	add    esp,0x1c
c0011e39:	c3                   	ret    

c0011e3a <Virt::getAKernelVAS()>:
c0011e3a:	a1 8c e5 02 c0       	mov    eax,ds:0xc002e58c
c0011e3f:	c3                   	ret    

c0011e40 <Virt::setupPageSwapping(int)>:
c0011e40:	57                   	push   edi
c0011e41:	56                   	push   esi
c0011e42:	53                   	push   ebx
c0011e43:	83 ec 1c             	sub    esp,0x1c
c0011e46:	68 14 01 00 00       	push   0x114
c0011e4b:	e8 f0 d9 ff ff       	call   c000f840 <malloc>
c0011e50:	83 c4 0c             	add    esp,0xc
c0011e53:	89 c6                	mov    esi,eax
c0011e55:	ff 35 74 19 03 c0    	push   DWORD PTR ds:0xc0031974
c0011e5b:	68 65 a7 02 c0       	push   0xc002a765
c0011e60:	50                   	push   eax
c0011e61:	e8 3c 16 00 00       	call   c00134a2 <File::File(char const*, Process*)>
c0011e66:	89 34 24             	mov    DWORD PTR [esp],esi
c0011e69:	e8 10 18 00 00       	call   c001367e <File::unlink()>
c0011e6e:	58                   	pop    eax
c0011e6f:	5a                   	pop    edx
c0011e70:	6a 12                	push   0x12
c0011e72:	56                   	push   esi
c0011e73:	e8 8e 16 00 00       	call   c0013506 <File::open(FileOpenMode)>
c0011e78:	83 c4 10             	add    esp,0x10
c0011e7b:	85 c0                	test   eax,eax
c0011e7d:	0f 85 ca 00 00 00    	jne    c0011f4d <Virt::setupPageSwapping(int)+0x10d>
c0011e83:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011e87:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011e8f:	c1 e3 08             	shl    ebx,0x8
c0011e92:	83 ec 0c             	sub    esp,0xc
c0011e95:	68 00 00 01 00       	push   0x10000
c0011e9a:	e8 a1 d9 ff ff       	call   c000f840 <malloc>
c0011e9f:	83 c4 0c             	add    esp,0xc
c0011ea2:	89 c7                	mov    edi,eax
c0011ea4:	68 00 00 01 00       	push   0x10000
c0011ea9:	6a 00                	push   0x0
c0011eab:	50                   	push   eax
c0011eac:	e8 c7 e8 fe ff       	call   c0000778 <memset>
c0011eb1:	83 c4 10             	add    esp,0x10
c0011eb4:	85 db                	test   ebx,ebx
c0011eb6:	79 03                	jns    c0011ebb <Virt::setupPageSwapping(int)+0x7b>
c0011eb8:	83 c3 0f             	add    ebx,0xf
c0011ebb:	c1 fb 04             	sar    ebx,0x4
c0011ebe:	4b                   	dec    ebx
c0011ebf:	83 fb ff             	cmp    ebx,0xffffffff
c0011ec2:	74 4b                	je     c0011f0f <Virt::setupPageSwapping(int)+0xcf>
c0011ec4:	83 ec 0c             	sub    esp,0xc
c0011ec7:	8b 06                	mov    eax,DWORD PTR [esi]
c0011ec9:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011ecd:	52                   	push   edx
c0011ece:	57                   	push   edi
c0011ecf:	6a 00                	push   0x0
c0011ed1:	68 00 00 01 00       	push   0x10000
c0011ed6:	56                   	push   esi
c0011ed7:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011eda:	83 c4 20             	add    esp,0x20
c0011edd:	85 c0                	test   eax,eax
c0011edf:	75 59                	jne    c0011f3a <Virt::setupPageSwapping(int)+0xfa>
c0011ee1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ee5:	3d 00 00 01 00       	cmp    eax,0x10000
c0011eea:	74 d2                	je     c0011ebe <Virt::setupPageSwapping(int)+0x7e>
c0011eec:	83 ec 08             	sub    esp,0x8
c0011eef:	4b                   	dec    ebx
c0011ef0:	50                   	push   eax
c0011ef1:	68 b8 a7 02 c0       	push   0xc002a7b8
c0011ef6:	e8 4f 10 00 00       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0011efb:	c7 04 24 c1 a7 02 c0 	mov    DWORD PTR [esp],0xc002a7c1
c0011f02:	e8 f4 86 00 00       	call   c001a5fb <Krnl::panic(char const*)>
c0011f07:	83 c4 10             	add    esp,0x10
c0011f0a:	83 fb ff             	cmp    ebx,0xffffffff
c0011f0d:	75 b5                	jne    c0011ec4 <Virt::setupPageSwapping(int)+0x84>
c0011f0f:	83 ec 0c             	sub    esp,0xc
c0011f12:	56                   	push   esi
c0011f13:	e8 4c 16 00 00       	call   c0013564 <File::close()>
c0011f18:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011f1b:	e8 40 d9 ff ff       	call   c000f860 <rfree>
c0011f20:	83 c4 10             	add    esp,0x10
c0011f23:	85 f6                	test   esi,esi
c0011f25:	74 0c                	je     c0011f33 <Virt::setupPageSwapping(int)+0xf3>
c0011f27:	83 ec 0c             	sub    esp,0xc
c0011f2a:	8b 06                	mov    eax,DWORD PTR [esi]
c0011f2c:	56                   	push   esi
c0011f2d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011f30:	83 c4 10             	add    esp,0x10
c0011f33:	83 c4 10             	add    esp,0x10
c0011f36:	5b                   	pop    ebx
c0011f37:	5e                   	pop    esi
c0011f38:	5f                   	pop    edi
c0011f39:	c3                   	ret    
c0011f3a:	83 ec 08             	sub    esp,0x8
c0011f3d:	50                   	push   eax
c0011f3e:	68 a0 a7 02 c0       	push   0xc002a7a0
c0011f43:	e8 02 10 00 00       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0011f48:	83 c4 10             	add    esp,0x10
c0011f4b:	eb 94                	jmp    c0011ee1 <Virt::setupPageSwapping(int)+0xa1>
c0011f4d:	83 ec 08             	sub    esp,0x8
c0011f50:	50                   	push   eax
c0011f51:	68 7c a7 02 c0       	push   0xc002a77c
c0011f56:	e8 ef 0f 00 00       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0011f5b:	c7 04 24 85 a7 02 c0 	mov    DWORD PTR [esp],0xc002a785
c0011f62:	e8 94 86 00 00       	call   c001a5fb <Krnl::panic(char const*)>
c0011f67:	83 c4 10             	add    esp,0x10
c0011f6a:	e9 14 ff ff ff       	jmp    c0011e83 <Virt::setupPageSwapping(int)+0x43>
c0011f6f:	90                   	nop

c0011f70 <VAS::VAS()>:
c0011f70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f74:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011f7b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f7f:	a3 8c e5 02 c0       	mov    ds:0xc002e58c,eax
c0011f84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f88:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011f8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f90:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011f93:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f97:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0011f9e:	90                   	nop
c0011f9f:	c3                   	ret    

c0011fa0 <VAS::VAS(VAS*)>:
c0011fa0:	83 ec 0c             	sub    esp,0xc
c0011fa3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011fa7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011fae:	83 ec 0c             	sub    esp,0xc
c0011fb1:	68 84 a5 02 c0       	push   0xc002a584
c0011fb6:	e8 40 86 00 00       	call   c001a5fb <Krnl::panic(char const*)>
c0011fbb:	83 c4 10             	add    esp,0x10
c0011fbe:	90                   	nop
c0011fbf:	83 c4 0c             	add    esp,0xc
c0011fc2:	c3                   	ret    
c0011fc3:	90                   	nop

c0011fc4 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011fc4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011fc8:	89 c2                	mov    edx,eax
c0011fca:	c1 e8 0a             	shr    eax,0xa
c0011fcd:	c1 ea 16             	shr    edx,0x16
c0011fd0:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011fd5:	19 c9                	sbb    ecx,ecx
c0011fd7:	c1 e2 0c             	shl    edx,0xc
c0011fda:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011fe0:	25 fc 0f 00 00       	and    eax,0xffc
c0011fe5:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011fec:	01 d0                	add    eax,edx
c0011fee:	c3                   	ret    
c0011fef:	90                   	nop

c0011ff0 <VAS::getPageTableEntry(unsigned long)>:
c0011ff0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011ff4:	89 ca                	mov    edx,ecx
c0011ff6:	c1 e9 0a             	shr    ecx,0xa
c0011ff9:	c1 ea 16             	shr    edx,0x16
c0011ffc:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0012002:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0012008:	c1 e0 0c             	shl    eax,0xc
c001200b:	8d 04 08             	lea    eax,[eax+ecx*1]
c001200e:	c3                   	ret    

c001200f <Virt::freeKernelVirtualPages(unsigned long)>:
c001200f:	57                   	push   edi
c0012010:	56                   	push   esi
c0012011:	be 01 00 00 00       	mov    esi,0x1
c0012016:	53                   	push   ebx
c0012017:	83 ec 10             	sub    esp,0x10
c001201a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001201e:	c1 eb 0c             	shr    ebx,0xc
c0012021:	eb 3f                	jmp    c0012062 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0012023:	e8 12 fe ff ff       	call   c0011e3a <Virt::getAKernelVAS()>
c0012028:	83 ec 08             	sub    esp,0x8
c001202b:	57                   	push   edi
c001202c:	50                   	push   eax
c001202d:	e8 be ff ff ff       	call   c0011ff0 <VAS::getPageTableEntry(unsigned long)>
c0012032:	83 c4 10             	add    esp,0x10
c0012035:	8b 00                	mov    eax,DWORD PTR [eax]
c0012037:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001203b:	f6 c4 04             	test   ah,0x4
c001203e:	75 5f                	jne    c001209f <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0012040:	80 fa 04             	cmp    dl,0x4
c0012043:	74 78                	je     c00120bd <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0012045:	80 fa 02             	cmp    dl,0x2
c0012048:	0f 84 88 00 00 00    	je     c00120d6 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c001204e:	80 fa 03             	cmp    dl,0x3
c0012051:	0f 84 ad 00 00 00    	je     c0012104 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0012057:	fe ca                	dec    dl
c0012059:	0f 84 92 00 00 00    	je     c00120f1 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c001205f:	43                   	inc    ebx
c0012060:	31 f6                	xor    esi,esi
c0012062:	53                   	push   ebx
c0012063:	e8 13 fb ff ff       	call   c0011b7b <Virt::getPageState(unsigned long)>
c0012068:	5f                   	pop    edi
c0012069:	89 df                	mov    edi,ebx
c001206b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001206f:	c1 e7 0c             	shl    edi,0xc
c0012072:	84 c0                	test   al,al
c0012074:	75 ad                	jne    c0012023 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0012076:	83 ec 0c             	sub    esp,0xc
c0012079:	68 c7 a7 02 c0       	push   0xc002a7c7
c001207e:	e8 78 85 00 00       	call   c001a5fb <Krnl::panic(char const*)>
c0012083:	e8 b2 fd ff ff       	call   c0011e3a <Virt::getAKernelVAS()>
c0012088:	5a                   	pop    edx
c0012089:	59                   	pop    ecx
c001208a:	57                   	push   edi
c001208b:	50                   	push   eax
c001208c:	e8 5f ff ff ff       	call   c0011ff0 <VAS::getPageTableEntry(unsigned long)>
c0012091:	83 c4 10             	add    esp,0x10
c0012094:	8b 00                	mov    eax,DWORD PTR [eax]
c0012096:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001209a:	f6 c4 04             	test   ah,0x4
c001209d:	74 c0                	je     c001205f <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c001209f:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c00120a3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00120a8:	83 ec 0c             	sub    esp,0xc
c00120ab:	50                   	push   eax
c00120ac:	e8 a7 dd ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c00120b1:	83 c4 10             	add    esp,0x10
c00120b4:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00120b8:	80 fa 04             	cmp    dl,0x4
c00120bb:	75 88                	jne    c0012045 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c00120bd:	89 f0                	mov    eax,esi
c00120bf:	84 c0                	test   al,al
c00120c1:	75 47                	jne    c001210a <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c00120c3:	c7 44 24 20 a8 a5 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a5a8
c00120cb:	83 c4 10             	add    esp,0x10
c00120ce:	5b                   	pop    ebx
c00120cf:	5e                   	pop    esi
c00120d0:	5f                   	pop    edi
c00120d1:	e9 25 85 00 00       	jmp    c001a5fb <Krnl::panic(char const*)>
c00120d6:	89 f0                	mov    eax,esi
c00120d8:	84 c0                	test   al,al
c00120da:	75 15                	jne    c00120f1 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00120dc:	83 ec 0c             	sub    esp,0xc
c00120df:	68 e3 a7 02 c0       	push   0xc002a7e3
c00120e4:	e8 12 85 00 00       	call   c001a5fb <Krnl::panic(char const*)>
c00120e9:	83 c4 10             	add    esp,0x10
c00120ec:	e9 6e ff ff ff       	jmp    c001205f <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00120f1:	83 ec 08             	sub    esp,0x8
c00120f4:	6a 00                	push   0x0
c00120f6:	53                   	push   ebx
c00120f7:	e8 4a fa ff ff       	call   c0011b46 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00120fc:	83 c4 10             	add    esp,0x10
c00120ff:	e9 5b ff ff ff       	jmp    c001205f <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0012104:	89 f0                	mov    eax,esi
c0012106:	84 c0                	test   al,al
c0012108:	75 15                	jne    c001211f <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c001210a:	83 ec 08             	sub    esp,0x8
c001210d:	6a 00                	push   0x0
c001210f:	53                   	push   ebx
c0012110:	e8 31 fa ff ff       	call   c0011b46 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012115:	83 c4 10             	add    esp,0x10
c0012118:	83 c4 10             	add    esp,0x10
c001211b:	5b                   	pop    ebx
c001211c:	5e                   	pop    esi
c001211d:	5f                   	pop    edi
c001211e:	c3                   	ret    
c001211f:	c7 44 24 20 ff a7 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a7ff
c0012127:	83 c4 10             	add    esp,0x10
c001212a:	5b                   	pop    ebx
c001212b:	5e                   	pop    esi
c001212c:	5f                   	pop    edi
c001212d:	e9 c9 84 00 00       	jmp    c001a5fb <Krnl::panic(char const*)>

c0012132 <VAS::freeAllocatedPages(unsigned long)>:
c0012132:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012136:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001213a:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c001213e:	74 09                	je     c0012149 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0012140:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012144:	e9 c6 fe ff ff       	jmp    c001200f <Virt::freeKernelVirtualPages(unsigned long)>
c0012149:	c7 44 24 04 cc a5 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a5cc
c0012151:	e9 f4 0d 00 00       	jmp    c0012f4a <Dbg::kprintf(char const*, ...)>

c0012156 <VAS::virtualToPhysical(unsigned long)>:
c0012156:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001215a:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001215e:	e8 8d fe ff ff       	call   c0011ff0 <VAS::getPageTableEntry(unsigned long)>
c0012163:	5a                   	pop    edx
c0012164:	8b 00                	mov    eax,DWORD PTR [eax]
c0012166:	59                   	pop    ecx
c0012167:	25 00 f0 ff ff       	and    eax,0xfffff000
c001216c:	c3                   	ret    
c001216d:	90                   	nop

c001216e <VAS::reflagRange(unsigned long, int, int, int)>:
c001216e:	55                   	push   ebp
c001216f:	57                   	push   edi
c0012170:	56                   	push   esi
c0012171:	53                   	push   ebx
c0012172:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012176:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001217a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001217e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012182:	85 db                	test   ebx,ebx
c0012184:	7e 22                	jle    c00121a8 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0012186:	c1 e3 0c             	shl    ebx,0xc
c0012189:	01 f3                	add    ebx,esi
c001218b:	56                   	push   esi
c001218c:	81 c6 00 10 00 00    	add    esi,0x1000
c0012192:	55                   	push   ebp
c0012193:	e8 58 fe ff ff       	call   c0011ff0 <VAS::getPageTableEntry(unsigned long)>
c0012198:	5a                   	pop    edx
c0012199:	59                   	pop    ecx
c001219a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001219c:	21 f9                	and    ecx,edi
c001219e:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c00121a2:	39 f3                	cmp    ebx,esi
c00121a4:	89 08                	mov    DWORD PTR [eax],ecx
c00121a6:	75 e3                	jne    c001218b <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c00121a8:	5b                   	pop    ebx
c00121a9:	5e                   	pop    esi
c00121aa:	5f                   	pop    edi
c00121ab:	5d                   	pop    ebp
c00121ac:	c3                   	ret    
c00121ad:	90                   	nop

c00121ae <VAS::setToWriteCombining(unsigned long, int)>:
c00121ae:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c00121b3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00121b9:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c00121c0:	75 01                	jne    c00121c3 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c00121c2:	c3                   	ret    
c00121c3:	68 80 00 00 00       	push   0x80
c00121c8:	6a ff                	push   0xffffffff
c00121ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121d6:	e8 93 ff ff ff       	call   c001216e <VAS::reflagRange(unsigned long, int, int, int)>
c00121db:	83 c4 14             	add    esp,0x14
c00121de:	c3                   	ret    
c00121df:	90                   	nop

c00121e0 <VAS::mapOtherVASIn(bool, VAS*)>:
c00121e0:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00121e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00121e9:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00121ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121f0:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00121f3:	19 c0                	sbb    eax,eax
c00121f5:	83 ca 03             	or     edx,0x3
c00121f8:	83 e0 fc             	and    eax,0xfffffffc
c00121fb:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0012202:	0f 20 d8             	mov    eax,cr3
c0012205:	0f 22 d8             	mov    cr3,eax
c0012208:	c3                   	ret    
c0012209:	90                   	nop

c001220a <VAS::~VAS()>:
c001220a:	83 ec 2c             	sub    esp,0x2c
c001220d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012215:	e8 bc bb 00 00       	call   c001ddd6 <lockScheduler()>
c001221a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001221f:	8b 00                	mov    eax,DWORD PTR [eax]
c0012221:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012224:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001222a:	83 ec 04             	sub    esp,0x4
c001222d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0012231:	6a 01                	push   0x1
c0012233:	50                   	push   eax
c0012234:	e8 a7 ff ff ff       	call   c00121e0 <VAS::mapOtherVASIn(bool, VAS*)>
c0012239:	83 c4 10             	add    esp,0x10
c001223c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012244:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c001224c:	0f 8f d7 00 00 00    	jg     c0012329 <VAS::~VAS()+0x11f>
c0012252:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012256:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012259:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001225d:	c1 e2 02             	shl    edx,0x2
c0012260:	01 d0                	add    eax,edx
c0012262:	8b 00                	mov    eax,DWORD PTR [eax]
c0012264:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012268:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001226c:	83 e0 01             	and    eax,0x1
c001226f:	0f 84 ab 00 00 00    	je     c0012320 <VAS::~VAS()+0x116>
c0012275:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001227d:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0012285:	7f 75                	jg     c00122fc <VAS::~VAS()+0xf2>
c0012287:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001228b:	c1 e0 0a             	shl    eax,0xa
c001228e:	89 c2                	mov    edx,eax
c0012290:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012294:	01 d0                	add    eax,edx
c0012296:	c1 e0 0c             	shl    eax,0xc
c0012299:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001229d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00122a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00122a4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00122a7:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c00122ad:	83 ec 04             	sub    esp,0x4
c00122b0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00122b4:	6a 01                	push   0x1
c00122b6:	50                   	push   eax
c00122b7:	e8 08 fd ff ff       	call   c0011fc4 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c00122bc:	83 c4 10             	add    esp,0x10
c00122bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00122c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00122c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00122c9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00122cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00122d1:	25 01 04 00 00       	and    eax,0x401
c00122d6:	3d 01 04 00 00       	cmp    eax,0x401
c00122db:	75 19                	jne    c00122f6 <VAS::~VAS()+0xec>
c00122dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00122e1:	25 00 f0 ff ff       	and    eax,0xfffff000
c00122e6:	83 ec 0c             	sub    esp,0xc
c00122e9:	50                   	push   eax
c00122ea:	e8 69 db ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c00122ef:	83 c4 10             	add    esp,0x10
c00122f2:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00122f6:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00122fa:	eb 81                	jmp    c001227d <VAS::~VAS()+0x73>
c00122fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012300:	25 00 04 00 00       	and    eax,0x400
c0012305:	74 19                	je     c0012320 <VAS::~VAS()+0x116>
c0012307:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001230b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012310:	83 ec 0c             	sub    esp,0xc
c0012313:	50                   	push   eax
c0012314:	e8 3f db ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c0012319:	83 c4 10             	add    esp,0x10
c001231c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012320:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012324:	e9 1b ff ff ff       	jmp    c0012244 <VAS::~VAS()+0x3a>
c0012329:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001232d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012330:	83 ec 0c             	sub    esp,0xc
c0012333:	50                   	push   eax
c0012334:	e8 d6 fc ff ff       	call   c001200f <Virt::freeKernelVirtualPages(unsigned long)>
c0012339:	83 c4 10             	add    esp,0x10
c001233c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012340:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012343:	83 ec 0c             	sub    esp,0xc
c0012346:	50                   	push   eax
c0012347:	e8 0c db ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c001234c:	83 c4 10             	add    esp,0x10
c001234f:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012353:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012357:	c1 e0 02             	shl    eax,0x2
c001235a:	83 ec 08             	sub    esp,0x8
c001235d:	50                   	push   eax
c001235e:	68 f0 a5 02 c0       	push   0xc002a5f0
c0012363:	e8 e2 0b 00 00       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0012368:	83 c4 10             	add    esp,0x10
c001236b:	e8 68 ba 00 00       	call   c001ddd8 <unlockScheduler()>
c0012370:	90                   	nop
c0012371:	83 c4 2c             	add    esp,0x2c
c0012374:	c3                   	ret    
c0012375:	90                   	nop

c0012376 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0012376:	55                   	push   ebp
c0012377:	57                   	push   edi
c0012378:	56                   	push   esi
c0012379:	53                   	push   ebx
c001237a:	83 ec 1c             	sub    esp,0x1c
c001237d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0012381:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012385:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c001238b:	77 08                	ja     c0012395 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c001238d:	0f 20 d8             	mov    eax,cr3
c0012390:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c0012393:	75 47                	jne    c00123dc <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0012395:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012399:	09 d8                	or     eax,ebx
c001239b:	a9 ff 0f 00 00       	test   eax,0xfff
c00123a0:	75 57                	jne    c00123f9 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c00123a2:	89 de                	mov    esi,ebx
c00123a4:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00123a7:	c1 ee 16             	shr    esi,0x16
c00123aa:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c00123b1:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c00123b5:	74 54                	je     c001240b <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c00123b7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00123bb:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c00123c1:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00123c5:	c1 e6 0c             	shl    esi,0xc
c00123c8:	c1 eb 0a             	shr    ebx,0xa
c00123cb:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00123d1:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c00123d4:	83 c4 1c             	add    esp,0x1c
c00123d7:	5b                   	pop    ebx
c00123d8:	5e                   	pop    esi
c00123d9:	5f                   	pop    edi
c00123da:	5d                   	pop    ebp
c00123db:	c3                   	ret    
c00123dc:	83 ec 0c             	sub    esp,0xc
c00123df:	68 10 a6 02 c0       	push   0xc002a610
c00123e4:	e8 61 0b 00 00       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c00123e9:	83 c4 10             	add    esp,0x10
c00123ec:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00123f0:	09 d8                	or     eax,ebx
c00123f2:	a9 ff 0f 00 00       	test   eax,0xfff
c00123f7:	74 a9                	je     c00123a2 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00123f9:	83 ec 0c             	sub    esp,0xc
c00123fc:	68 78 a6 02 c0       	push   0xc002a678
c0012401:	e8 f5 81 00 00       	call   c001a5fb <Krnl::panic(char const*)>
c0012406:	83 c4 10             	add    esp,0x10
c0012409:	eb 97                	jmp    c00123a2 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c001240b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001240f:	e8 ce da ff ff       	call   c000fee2 <Phys::allocatePage()>
c0012414:	89 c5                	mov    ebp,eax
c0012416:	e8 1f fa ff ff       	call   c0011e3a <Virt::getAKernelVAS()>
c001241b:	83 ec 0c             	sub    esp,0xc
c001241e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012422:	6a 01                	push   0x1
c0012424:	e8 76 f7 ff ff       	call   c0011b9f <Virt::allocateKernelVirtualPages(int)>
c0012429:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012430:	6a 01                	push   0x1
c0012432:	50                   	push   eax
c0012433:	55                   	push   ebp
c0012434:	81 cd 07 04 00 00    	or     ebp,0x407
c001243a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001243e:	51                   	push   ecx
c001243f:	e8 26 02 00 00       	call   c001266a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012444:	83 c4 1c             	add    esp,0x1c
c0012447:	68 00 10 00 00       	push   0x1000
c001244c:	6a 00                	push   0x0
c001244e:	50                   	push   eax
c001244f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012453:	e8 20 e3 fe ff       	call   c0000778 <memset>
c0012458:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001245c:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001245f:	e8 ab fb ff ff       	call   c001200f <Virt::freeKernelVirtualPages(unsigned long)>
c0012464:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012468:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001246b:	83 c4 10             	add    esp,0x10
c001246e:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0012471:	e9 41 ff ff ff       	jmp    c00123b7 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c0012476 <VAS::allocatePages(int, int)>:
c0012476:	55                   	push   ebp
c0012477:	57                   	push   edi
c0012478:	56                   	push   esi
c0012479:	53                   	push   ebx
c001247a:	83 ec 1c             	sub    esp,0x1c
c001247d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012481:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0012486:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001248c:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012492:	83 e0 01             	and    eax,0x1
c0012495:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0012499:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001249d:	0f 85 cc 00 00 00    	jne    c001256f <VAS::allocatePages(int, int)+0xf9>
c00124a3:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00124a6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00124aa:	85 c0                	test   eax,eax
c00124ac:	0f 84 a1 00 00 00    	je     c0012553 <VAS::allocatePages(int, int)+0xdd>
c00124b2:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00124b6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00124ba:	c1 e6 0c             	shl    esi,0xc
c00124bd:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c00124c1:	85 c0                	test   eax,eax
c00124c3:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00124c6:	7e 33                	jle    c00124fb <VAS::allocatePages(int, int)+0x85>
c00124c8:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00124cc:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00124d0:	81 cd 00 04 00 00    	or     ebp,0x400
c00124d6:	e8 07 da ff ff       	call   c000fee2 <Phys::allocatePage()>
c00124db:	55                   	push   ebp
c00124dc:	53                   	push   ebx
c00124dd:	50                   	push   eax
c00124de:	57                   	push   edi
c00124df:	e8 92 fe ff ff       	call   c0012376 <VAS::mapPage(unsigned long, unsigned long, int)>
c00124e4:	83 c4 10             	add    esp,0x10
c00124e7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00124ec:	74 03                	je     c00124f1 <VAS::allocatePages(int, int)+0x7b>
c00124ee:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00124f1:	81 c3 00 10 00 00    	add    ebx,0x1000
c00124f7:	39 de                	cmp    esi,ebx
c00124f9:	75 db                	jne    c00124d6 <VAS::allocatePages(int, int)+0x60>
c00124fb:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012500:	75 12                	jne    c0012514 <VAS::allocatePages(int, int)+0x9e>
c0012502:	0f 20 d8             	mov    eax,cr3
c0012505:	0f 22 d8             	mov    cr3,eax
c0012508:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001250c:	83 c4 1c             	add    esp,0x1c
c001250f:	5b                   	pop    ebx
c0012510:	5e                   	pop    esi
c0012511:	5f                   	pop    edi
c0012512:	5d                   	pop    ebp
c0012513:	c3                   	ret    
c0012514:	c1 ee 0a             	shr    esi,0xa
c0012517:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001251b:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012521:	c1 eb 0a             	shr    ebx,0xa
c0012524:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c001252a:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012530:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012536:	39 c3                	cmp    ebx,eax
c0012538:	77 ce                	ja     c0012508 <VAS::allocatePages(int, int)+0x92>
c001253a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001253d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012543:	39 d8                	cmp    eax,ebx
c0012545:	73 f3                	jae    c001253a <VAS::allocatePages(int, int)+0xc4>
c0012547:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001254b:	83 c4 1c             	add    esp,0x1c
c001254e:	5b                   	pop    ebx
c001254f:	5e                   	pop    esi
c0012550:	5f                   	pop    edi
c0012551:	5d                   	pop    ebp
c0012552:	c3                   	ret    
c0012553:	83 ec 0c             	sub    esp,0xc
c0012556:	68 9c a6 02 c0       	push   0xc002a69c
c001255b:	e8 9b 80 00 00       	call   c001a5fb <Krnl::panic(char const*)>
c0012560:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012563:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012567:	83 c4 10             	add    esp,0x10
c001256a:	e9 43 ff ff ff       	jmp    c00124b2 <VAS::allocatePages(int, int)+0x3c>
c001256f:	83 ec 0c             	sub    esp,0xc
c0012572:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012576:	e8 24 f6 ff ff       	call   c0011b9f <Virt::allocateKernelVirtualPages(int)>
c001257b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001257f:	83 c4 10             	add    esp,0x10
c0012582:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0012587:	0f 87 9b 00 00 00    	ja     c0012628 <VAS::allocatePages(int, int)+0x1b2>
c001258d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012591:	85 d2                	test   edx,edx
c0012593:	7e 3c                	jle    c00125d1 <VAS::allocatePages(int, int)+0x15b>
c0012595:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012599:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001259d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00125a1:	c1 e5 0c             	shl    ebp,0xc
c00125a4:	81 ce 00 04 00 00    	or     esi,0x400
c00125aa:	01 dd                	add    ebp,ebx
c00125ac:	e8 31 d9 ff ff       	call   c000fee2 <Phys::allocatePage()>
c00125b1:	56                   	push   esi
c00125b2:	53                   	push   ebx
c00125b3:	50                   	push   eax
c00125b4:	57                   	push   edi
c00125b5:	e8 bc fd ff ff       	call   c0012376 <VAS::mapPage(unsigned long, unsigned long, int)>
c00125ba:	83 c4 10             	add    esp,0x10
c00125bd:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00125c2:	74 03                	je     c00125c7 <VAS::allocatePages(int, int)+0x151>
c00125c4:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00125c7:	81 c3 00 10 00 00    	add    ebx,0x1000
c00125cd:	39 dd                	cmp    ebp,ebx
c00125cf:	75 db                	jne    c00125ac <VAS::allocatePages(int, int)+0x136>
c00125d1:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00125d6:	0f 84 26 ff ff ff    	je     c0012502 <VAS::allocatePages(int, int)+0x8c>
c00125dc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00125e0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00125e4:	89 d3                	mov    ebx,edx
c00125e6:	c1 e0 0c             	shl    eax,0xc
c00125e9:	c1 eb 0a             	shr    ebx,0xa
c00125ec:	01 d0                	add    eax,edx
c00125ee:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00125f4:	c1 e8 0a             	shr    eax,0xa
c00125f7:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00125fd:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012602:	2d 00 00 40 00       	sub    eax,0x400000
c0012607:	39 c3                	cmp    ebx,eax
c0012609:	0f 87 f9 fe ff ff    	ja     c0012508 <VAS::allocatePages(int, int)+0x92>
c001260f:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012612:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012618:	39 d8                	cmp    eax,ebx
c001261a:	73 f3                	jae    c001260f <VAS::allocatePages(int, int)+0x199>
c001261c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012620:	83 c4 1c             	add    esp,0x1c
c0012623:	5b                   	pop    ebx
c0012624:	5e                   	pop    esi
c0012625:	5f                   	pop    edi
c0012626:	5d                   	pop    ebp
c0012627:	c3                   	ret    
c0012628:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c001262d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012633:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c001263a:	0f 84 4d ff ff ff    	je     c001258d <VAS::allocatePages(int, int)+0x117>
c0012640:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0012648:	e9 40 ff ff ff       	jmp    c001258d <VAS::allocatePages(int, int)+0x117>
c001264d:	90                   	nop

c001264e <VAS::setCPUSpecific(unsigned long)>:
c001264e:	83 ec 0c             	sub    esp,0xc
c0012651:	6a 05                	push   0x5
c0012653:	68 00 00 40 c2       	push   0xc2400000
c0012658:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001265c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012660:	e8 11 fd ff ff       	call   c0012376 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012665:	83 c4 1c             	add    esp,0x1c
c0012668:	c3                   	ret    
c0012669:	90                   	nop

c001266a <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c001266a:	55                   	push   ebp
c001266b:	57                   	push   edi
c001266c:	56                   	push   esi
c001266d:	53                   	push   ebx
c001266e:	83 ec 1c             	sub    esp,0x1c
c0012671:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0012676:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001267a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012680:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012684:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c001268a:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001268e:	83 e0 01             	and    eax,0x1
c0012691:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012695:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012699:	85 c0                	test   eax,eax
c001269b:	7e 39                	jle    c00126d6 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c001269d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00126a1:	89 f3                	mov    ebx,esi
c00126a3:	c1 e0 0c             	shl    eax,0xc
c00126a6:	01 f0                	add    eax,esi
c00126a8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00126ac:	55                   	push   ebp
c00126ad:	53                   	push   ebx
c00126ae:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00126b2:	29 f0                	sub    eax,esi
c00126b4:	01 d8                	add    eax,ebx
c00126b6:	50                   	push   eax
c00126b7:	57                   	push   edi
c00126b8:	e8 b9 fc ff ff       	call   c0012376 <VAS::mapPage(unsigned long, unsigned long, int)>
c00126bd:	83 c4 10             	add    esp,0x10
c00126c0:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00126c5:	74 03                	je     c00126ca <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c00126c7:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00126ca:	81 c3 00 10 00 00    	add    ebx,0x1000
c00126d0:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c00126d4:	75 d6                	jne    c00126ac <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c00126d6:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00126db:	75 10                	jne    c00126ed <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c00126dd:	0f 20 d8             	mov    eax,cr3
c00126e0:	0f 22 d8             	mov    cr3,eax
c00126e3:	83 c4 1c             	add    esp,0x1c
c00126e6:	89 f0                	mov    eax,esi
c00126e8:	5b                   	pop    ebx
c00126e9:	5e                   	pop    esi
c00126ea:	5f                   	pop    edi
c00126eb:	5d                   	pop    ebp
c00126ec:	c3                   	ret    
c00126ed:	89 f3                	mov    ebx,esi
c00126ef:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00126f3:	c1 eb 0a             	shr    ebx,0xa
c00126f6:	c1 e0 0c             	shl    eax,0xc
c00126f9:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00126ff:	01 f0                	add    eax,esi
c0012701:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012707:	c1 e8 0a             	shr    eax,0xa
c001270a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001270f:	2d 00 00 40 00       	sub    eax,0x400000
c0012714:	39 c3                	cmp    ebx,eax
c0012716:	77 cb                	ja     c00126e3 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0012718:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001271b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012721:	39 d8                	cmp    eax,ebx
c0012723:	73 f3                	jae    c0012718 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0012725:	83 c4 1c             	add    esp,0x1c
c0012728:	89 f0                	mov    eax,esi
c001272a:	5b                   	pop    ebx
c001272b:	5e                   	pop    esi
c001272c:	5f                   	pop    edi
c001272d:	5d                   	pop    ebp
c001272e:	c3                   	ret    
c001272f:	90                   	nop

c0012730 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0012730:	55                   	push   ebp
c0012731:	57                   	push   edi
c0012732:	56                   	push   esi
c0012733:	53                   	push   ebx
c0012734:	83 ec 1c             	sub    esp,0x1c
c0012737:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001273b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001273f:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0012743:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0012747:	a9 ff 0f 00 00       	test   eax,0xfff
c001274c:	75 4a                	jne    c0012798 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c001274e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012752:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012755:	c1 eb 16             	shr    ebx,0x16
c0012758:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c001275f:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0012763:	74 4d                	je     c00127b2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0012765:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012769:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001276d:	c1 e8 0a             	shr    eax,0xa
c0012770:	80 fa 01             	cmp    dl,0x1
c0012773:	19 d2                	sbb    edx,edx
c0012775:	c1 e3 0c             	shl    ebx,0xc
c0012778:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c001277c:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0012782:	25 fc 0f 00 00       	and    eax,0xffc
c0012787:	01 d8                	add    eax,ebx
c0012789:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0012790:	83 c4 1c             	add    esp,0x1c
c0012793:	5b                   	pop    ebx
c0012794:	5e                   	pop    esi
c0012795:	5f                   	pop    edi
c0012796:	5d                   	pop    ebp
c0012797:	c3                   	ret    
c0012798:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001279c:	83 ec 0c             	sub    esp,0xc
c001279f:	68 c8 a6 02 c0       	push   0xc002a6c8
c00127a4:	e8 52 7e 00 00       	call   c001a5fb <Krnl::panic(char const*)>
c00127a9:	83 c4 10             	add    esp,0x10
c00127ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00127b0:	eb 9c                	jmp    c001274e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c00127b2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00127b6:	e8 27 d7 ff ff       	call   c000fee2 <Phys::allocatePage()>
c00127bb:	89 c5                	mov    ebp,eax
c00127bd:	e8 78 f6 ff ff       	call   c0011e3a <Virt::getAKernelVAS()>
c00127c2:	83 ec 0c             	sub    esp,0xc
c00127c5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00127c9:	6a 01                	push   0x1
c00127cb:	e8 cf f3 ff ff       	call   c0011b9f <Virt::allocateKernelVirtualPages(int)>
c00127d0:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00127d7:	6a 01                	push   0x1
c00127d9:	50                   	push   eax
c00127da:	55                   	push   ebp
c00127db:	81 cd 07 04 00 00    	or     ebp,0x407
c00127e1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00127e5:	51                   	push   ecx
c00127e6:	e8 7f fe ff ff       	call   c001266a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00127eb:	83 c4 1c             	add    esp,0x1c
c00127ee:	68 00 10 00 00       	push   0x1000
c00127f3:	6a 00                	push   0x0
c00127f5:	50                   	push   eax
c00127f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00127fa:	e8 79 df fe ff       	call   c0000778 <memset>
c00127ff:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012803:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012806:	e8 04 f8 ff ff       	call   c001200f <Virt::freeKernelVirtualPages(unsigned long)>
c001280b:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001280e:	83 c4 10             	add    esp,0x10
c0012811:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0012814:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012818:	e9 48 ff ff ff       	jmp    c0012765 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c001281d:	90                   	nop

c001281e <VAS::VAS(bool)>:
c001281e:	53                   	push   ebx
c001281f:	83 ec 28             	sub    esp,0x28
c0012822:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012826:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001282a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001282e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012835:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012839:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001283d:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0012840:	e8 9d d6 ff ff       	call   c000fee2 <Phys::allocatePage()>
c0012845:	89 c2                	mov    edx,eax
c0012847:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001284b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001284e:	e8 e7 f5 ff ff       	call   c0011e3a <Virt::getAKernelVAS()>
c0012853:	89 c3                	mov    ebx,eax
c0012855:	83 ec 0c             	sub    esp,0xc
c0012858:	6a 01                	push   0x1
c001285a:	e8 40 f3 ff ff       	call   c0011b9f <Virt::allocateKernelVirtualPages(int)>
c001285f:	83 c4 10             	add    esp,0x10
c0012862:	89 c2                	mov    edx,eax
c0012864:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012868:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001286b:	83 ec 0c             	sub    esp,0xc
c001286e:	6a 03                	push   0x3
c0012870:	6a 01                	push   0x1
c0012872:	52                   	push   edx
c0012873:	50                   	push   eax
c0012874:	53                   	push   ebx
c0012875:	e8 f0 fd ff ff       	call   c001266a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001287a:	83 c4 20             	add    esp,0x20
c001287d:	89 c2                	mov    edx,eax
c001287f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012883:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0012886:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001288e:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0012896:	7f 1c                	jg     c00128b4 <VAS::VAS(bool)+0x96>
c0012898:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001289c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001289f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00128a3:	c1 e2 02             	shl    edx,0x2
c00128a6:	01 d0                	add    eax,edx
c00128a8:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00128ae:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00128b2:	eb da                	jmp    c001288e <VAS::VAS(bool)+0x70>
c00128b4:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c00128bc:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c00128c4:	7f 7a                	jg     c0012940 <VAS::VAS(bool)+0x122>
c00128c6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00128ca:	2d 00 02 00 00       	sub    eax,0x200
c00128cf:	c1 e0 0c             	shl    eax,0xc
c00128d2:	83 c8 03             	or     eax,0x3
c00128d5:	89 c2                	mov    edx,eax
c00128d7:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c00128dc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128e2:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00128e8:	83 e0 10             	and    eax,0x10
c00128eb:	84 c0                	test   al,al
c00128ed:	74 07                	je     c00128f6 <VAS::VAS(bool)+0xd8>
c00128ef:	b8 00 01 00 00       	mov    eax,0x100
c00128f4:	eb 05                	jmp    c00128fb <VAS::VAS(bool)+0xdd>
c00128f6:	b8 00 00 00 00       	mov    eax,0x0
c00128fb:	09 d0                	or     eax,edx
c00128fd:	89 c1                	mov    ecx,eax
c00128ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012903:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012906:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001290a:	c1 e2 02             	shl    edx,0x2
c001290d:	01 d0                	add    eax,edx
c001290f:	89 ca                	mov    edx,ecx
c0012911:	89 10                	mov    DWORD PTR [eax],edx
c0012913:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012917:	2d 40 03 00 00       	sub    eax,0x340
c001291c:	83 f8 7f             	cmp    eax,0x7f
c001291f:	77 16                	ja     c0012937 <VAS::VAS(bool)+0x119>
c0012921:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012925:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012928:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001292c:	c1 e2 02             	shl    edx,0x2
c001292f:	01 d0                	add    eax,edx
c0012931:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012937:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001293b:	e9 7c ff ff ff       	jmp    c00128bc <VAS::VAS(bool)+0x9e>
c0012940:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0012945:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001294b:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012951:	83 e0 10             	and    eax,0x10
c0012954:	84 c0                	test   al,al
c0012956:	74 07                	je     c001295f <VAS::VAS(bool)+0x141>
c0012958:	b8 03 41 00 00       	mov    eax,0x4103
c001295d:	eb 05                	jmp    c0012964 <VAS::VAS(bool)+0x146>
c001295f:	b8 03 40 00 00       	mov    eax,0x4003
c0012964:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012968:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001296b:	81 c2 20 0c 00 00    	add    edx,0xc20
c0012971:	89 02                	mov    DWORD PTR [edx],eax
c0012973:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0012978:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001297e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0012984:	83 ec 08             	sub    esp,0x8
c0012987:	50                   	push   eax
c0012988:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001298c:	e8 bd fc ff ff       	call   c001264e <VAS::setCPUSpecific(unsigned long)>
c0012991:	83 c4 10             	add    esp,0x10
c0012994:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012998:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001299b:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c00129a0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129a6:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00129ac:	83 e0 10             	and    eax,0x10
c00129af:	84 c0                	test   al,al
c00129b1:	74 07                	je     c00129ba <VAS::VAS(bool)+0x19c>
c00129b3:	b8 00 01 00 00       	mov    eax,0x100
c00129b8:	eb 05                	jmp    c00129bf <VAS::VAS(bool)+0x1a1>
c00129ba:	b8 00 00 00 00       	mov    eax,0x0
c00129bf:	09 c2                	or     edx,eax
c00129c1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00129c5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00129c8:	05 fc 0f 00 00       	add    eax,0xffc
c00129cd:	83 ca 03             	or     edx,0x3
c00129d0:	89 10                	mov    DWORD PTR [eax],edx
c00129d2:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c00129d7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129dd:	83 ec 0c             	sub    esp,0xc
c00129e0:	50                   	push   eax
c00129e1:	e8 76 1c 00 00       	call   c001465c <Device::getName()>
c00129e6:	83 c4 10             	add    esp,0x10
c00129e9:	83 ec 08             	sub    esp,0x8
c00129ec:	68 19 a8 02 c0       	push   0xc002a819
c00129f1:	50                   	push   eax
c00129f2:	e8 c9 de fe ff       	call   c00008c0 <strcmp>
c00129f7:	83 c4 10             	add    esp,0x10
c00129fa:	85 c0                	test   eax,eax
c00129fc:	0f 94 c0             	sete   al
c00129ff:	84 c0                	test   al,al
c0012a01:	74 70                	je     c0012a73 <VAS::VAS(bool)+0x255>
c0012a03:	e8 b1 b3 00 00       	call   c001ddb9 <disableIRQs()>
c0012a08:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0012a0d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012a13:	05 7c 09 00 00       	add    eax,0x97c
c0012a18:	83 ec 0c             	sub    esp,0xc
c0012a1b:	50                   	push   eax
c0012a1c:	e8 9b c8 ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012a21:	83 c4 10             	add    esp,0x10
c0012a24:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012a29:	89 c3                	mov    ebx,eax
c0012a2b:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0012a30:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012a36:	05 7c 09 00 00       	add    eax,0x97c
c0012a3b:	83 ec 0c             	sub    esp,0xc
c0012a3e:	50                   	push   eax
c0012a3f:	e8 78 c8 ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012a44:	83 c4 10             	add    esp,0x10
c0012a47:	83 ec 08             	sub    esp,0x8
c0012a4a:	50                   	push   eax
c0012a4b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012a4f:	e8 9c f5 ff ff       	call   c0011ff0 <VAS::getPageTableEntry(unsigned long)>
c0012a54:	83 c4 10             	add    esp,0x10
c0012a57:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a59:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012a5e:	6a 11                	push   0x11
c0012a60:	53                   	push   ebx
c0012a61:	50                   	push   eax
c0012a62:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012a66:	e8 0b f9 ff ff       	call   c0012376 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012a6b:	83 c4 10             	add    esp,0x10
c0012a6e:	e8 54 b3 00 00       	call   c001ddc7 <enableIRQs()>
c0012a73:	90                   	nop
c0012a74:	83 c4 28             	add    esp,0x28
c0012a77:	5b                   	pop    ebx
c0012a78:	c3                   	ret    
c0012a79:	90                   	nop

c0012a7a <VAS::evict(unsigned long)>:
c0012a7a:	55                   	push   ebp
c0012a7b:	57                   	push   edi
c0012a7c:	56                   	push   esi
c0012a7d:	53                   	push   ebx
c0012a7e:	83 ec 1c             	sub    esp,0x1c
c0012a81:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a85:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0012a89:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012a8d:	e8 44 b3 00 00       	call   c001ddd6 <lockScheduler()>
c0012a92:	83 ec 08             	sub    esp,0x8
c0012a95:	56                   	push   esi
c0012a96:	68 ec a6 02 c0       	push   0xc002a6ec
c0012a9b:	e8 aa 04 00 00       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0012aa0:	83 c4 10             	add    esp,0x10
c0012aa3:	81 fe 00 90 00 10    	cmp    esi,0x10009000
c0012aa9:	75 02                	jne    c0012aad <VAS::evict(unsigned long)+0x33>
c0012aab:	eb fe                	jmp    c0012aab <VAS::evict(unsigned long)+0x31>
c0012aad:	e8 2e f2 ff ff       	call   c0011ce0 <Virt::allocateSwapfilePage()>
c0012ab2:	8b 3d ac d3 02 c0    	mov    edi,DWORD PTR ds:0xc002d3ac
c0012ab8:	89 c3                	mov    ebx,eax
c0012aba:	85 ff                	test   edi,edi
c0012abc:	7e 3d                	jle    c0012afb <VAS::evict(unsigned long)+0x81>
c0012abe:	89 f5                	mov    ebp,esi
c0012ac0:	31 ff                	xor    edi,edi
c0012ac2:	83 ec 0c             	sub    esp,0xc
c0012ac5:	53                   	push   ebx
c0012ac6:	e8 03 f2 ff ff       	call   c0011cce <Virt::swapIDToSector(unsigned long)>
c0012acb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012ace:	01 f8                	add    eax,edi
c0012ad0:	6a 01                	push   0x1
c0012ad2:	31 d2                	xor    edx,edx
c0012ad4:	47                   	inc    edi
c0012ad5:	52                   	push   edx
c0012ad6:	81 c5 00 02 00 00    	add    ebp,0x200
c0012adc:	50                   	push   eax
c0012add:	0f be 05 b8 d3 02 c0 	movsx  eax,BYTE PTR ds:0xc002d3b8
c0012ae4:	ff 34 85 1c e9 02 c0 	push   DWORD PTR [eax*4-0x3ffd16e4]
c0012aeb:	e8 e6 3c 00 00       	call   c00167d6 <LogicalDisk::write(unsigned long long, int, void*)>
c0012af0:	83 c4 20             	add    esp,0x20
c0012af3:	39 3d ac d3 02 c0    	cmp    DWORD PTR ds:0xc002d3ac,edi
c0012af9:	7f c7                	jg     c0012ac2 <VAS::evict(unsigned long)+0x48>
c0012afb:	83 ec 08             	sub    esp,0x8
c0012afe:	c1 e3 0b             	shl    ebx,0xb
c0012b01:	56                   	push   esi
c0012b02:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012b06:	e8 e5 f4 ff ff       	call   c0011ff0 <VAS::getPageTableEntry(unsigned long)>
c0012b0b:	5a                   	pop    edx
c0012b0c:	89 c6                	mov    esi,eax
c0012b0e:	59                   	pop    ecx
c0012b0f:	8b 00                	mov    eax,DWORD PTR [eax]
c0012b11:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012b16:	50                   	push   eax
c0012b17:	68 27 a8 02 c0       	push   0xc002a827
c0012b1c:	e8 29 04 00 00       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0012b21:	8b 06                	mov    eax,DWORD PTR [esi]
c0012b23:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012b28:	89 04 24             	mov    DWORD PTR [esp],eax
c0012b2b:	e8 28 d3 ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c0012b30:	8b 16                	mov    edx,DWORD PTR [esi]
c0012b32:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012b38:	09 da                	or     edx,ebx
c0012b3a:	89 16                	mov    DWORD PTR [esi],edx
c0012b3c:	5b                   	pop    ebx
c0012b3d:	a1 84 e5 02 c0       	mov    eax,ds:0xc002e584
c0012b42:	5e                   	pop    esi
c0012b43:	40                   	inc    eax
c0012b44:	50                   	push   eax
c0012b45:	a3 84 e5 02 c0       	mov    ds:0xc002e584,eax
c0012b4a:	68 3f a8 02 c0       	push   0xc002a83f
c0012b4f:	e8 f6 03 00 00       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0012b54:	83 c4 2c             	add    esp,0x2c
c0012b57:	5b                   	pop    ebx
c0012b58:	5e                   	pop    esi
c0012b59:	5f                   	pop    edi
c0012b5a:	5d                   	pop    ebp
c0012b5b:	e9 78 b2 00 00       	jmp    c001ddd8 <unlockScheduler()>

c0012b60 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012b60:	57                   	push   edi
c0012b61:	56                   	push   esi
c0012b62:	53                   	push   ebx
c0012b63:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012b67:	83 ec 08             	sub    esp,0x8
c0012b6a:	53                   	push   ebx
c0012b6b:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012b71:	68 5d a8 02 c0       	push   0xc002a85d
c0012b76:	e8 cf 03 00 00       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0012b7b:	e8 56 b2 00 00       	call   c001ddd6 <lockScheduler()>
c0012b80:	5a                   	pop    edx
c0012b81:	59                   	pop    ecx
c0012b82:	53                   	push   ebx
c0012b83:	68 71 a8 02 c0       	push   0xc002a871
c0012b88:	e8 bd 03 00 00       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0012b8d:	83 c4 10             	add    esp,0x10
c0012b90:	85 db                	test   ebx,ebx
c0012b92:	74 29                	je     c0012bbd <VAS::tryLoadBackOffDisk(unsigned long)+0x5d>
c0012b94:	83 ec 08             	sub    esp,0x8
c0012b97:	53                   	push   ebx
c0012b98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b9c:	e8 4f f4 ff ff       	call   c0011ff0 <VAS::getPageTableEntry(unsigned long)>
c0012ba1:	83 c4 10             	add    esp,0x10
c0012ba4:	89 c6                	mov    esi,eax
c0012ba6:	85 c0                	test   eax,eax
c0012ba8:	74 08                	je     c0012bb2 <VAS::tryLoadBackOffDisk(unsigned long)+0x52>
c0012baa:	f7 00 00 04 00 00    	test   DWORD PTR [eax],0x400
c0012bb0:	75 11                	jne    c0012bc3 <VAS::tryLoadBackOffDisk(unsigned long)+0x63>
c0012bb2:	e8 21 b2 00 00       	call   c001ddd8 <unlockScheduler()>
c0012bb7:	5b                   	pop    ebx
c0012bb8:	31 c0                	xor    eax,eax
c0012bba:	5e                   	pop    esi
c0012bbb:	5f                   	pop    edi
c0012bbc:	c3                   	ret    
c0012bbd:	5b                   	pop    ebx
c0012bbe:	31 c0                	xor    eax,eax
c0012bc0:	5e                   	pop    esi
c0012bc1:	5f                   	pop    edi
c0012bc2:	c3                   	ret    
c0012bc3:	83 ec 08             	sub    esp,0x8
c0012bc6:	53                   	push   ebx
c0012bc7:	68 85 a8 02 c0       	push   0xc002a885
c0012bcc:	e8 79 03 00 00       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0012bd1:	c6 05 40 e4 02 c0 01 	mov    BYTE PTR ds:0xc002e440,0x1
c0012bd8:	8b 3e                	mov    edi,DWORD PTR [esi]
c0012bda:	e8 03 d3 ff ff       	call   c000fee2 <Phys::allocatePage()>
c0012bdf:	c1 ef 0b             	shr    edi,0xb
c0012be2:	c6 05 40 e4 02 c0 00 	mov    BYTE PTR ds:0xc002e440,0x0
c0012be9:	83 c4 10             	add    esp,0x10
c0012bec:	8b 16                	mov    edx,DWORD PTR [esi]
c0012bee:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012bf4:	09 c2                	or     edx,eax
c0012bf6:	81 ca 01 08 00 00    	or     edx,0x801
c0012bfc:	89 16                	mov    DWORD PTR [esi],edx
c0012bfe:	a1 ac d3 02 c0       	mov    eax,ds:0xc002d3ac
c0012c03:	85 c0                	test   eax,eax
c0012c05:	7e 3b                	jle    c0012c42 <VAS::tryLoadBackOffDisk(unsigned long)+0xe2>
c0012c07:	31 f6                	xor    esi,esi
c0012c09:	83 ec 0c             	sub    esp,0xc
c0012c0c:	57                   	push   edi
c0012c0d:	e8 bc f0 ff ff       	call   c0011cce <Virt::swapIDToSector(unsigned long)>
c0012c12:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012c15:	01 f0                	add    eax,esi
c0012c17:	6a 01                	push   0x1
c0012c19:	31 d2                	xor    edx,edx
c0012c1b:	46                   	inc    esi
c0012c1c:	52                   	push   edx
c0012c1d:	81 c3 00 02 00 00    	add    ebx,0x200
c0012c23:	50                   	push   eax
c0012c24:	0f be 05 b8 d3 02 c0 	movsx  eax,BYTE PTR ds:0xc002d3b8
c0012c2b:	ff 34 85 1c e9 02 c0 	push   DWORD PTR [eax*4-0x3ffd16e4]
c0012c32:	e8 33 3b 00 00       	call   c001676a <LogicalDisk::read(unsigned long long, int, void*)>
c0012c37:	83 c4 20             	add    esp,0x20
c0012c3a:	39 35 ac d3 02 c0    	cmp    DWORD PTR ds:0xc002d3ac,esi
c0012c40:	7f c7                	jg     c0012c09 <VAS::tryLoadBackOffDisk(unsigned long)+0xa9>
c0012c42:	83 ec 08             	sub    esp,0x8
c0012c45:	a1 84 e5 02 c0       	mov    eax,ds:0xc002e584
c0012c4a:	48                   	dec    eax
c0012c4b:	50                   	push   eax
c0012c4c:	a3 84 e5 02 c0       	mov    ds:0xc002e584,eax
c0012c51:	68 3f a8 02 c0       	push   0xc002a83f
c0012c56:	e8 ef 02 00 00       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0012c5b:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012c5e:	e8 4d f0 ff ff       	call   c0011cb0 <Virt::freeSwapfilePage(unsigned long)>
c0012c63:	e8 70 b1 00 00       	call   c001ddd8 <unlockScheduler()>
c0012c68:	83 c4 10             	add    esp,0x10
c0012c6b:	b0 01                	mov    al,0x1
c0012c6d:	5b                   	pop    ebx
c0012c6e:	5e                   	pop    esi
c0012c6f:	5f                   	pop    edi
c0012c70:	c3                   	ret    
c0012c71:	90                   	nop

c0012c72 <VAS::scanForEviction(int, int)>:
c0012c72:	55                   	push   ebp
c0012c73:	57                   	push   edi
c0012c74:	56                   	push   esi
c0012c75:	53                   	push   ebx
c0012c76:	83 ec 1c             	sub    esp,0x1c
c0012c79:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0012c7d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012c81:	85 db                	test   ebx,ebx
c0012c83:	75 08                	jne    c0012c8d <VAS::scanForEviction(int, int)+0x1b>
c0012c85:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0012c8d:	bb 00 00 40 00       	mov    ebx,0x400000
c0012c92:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012c9a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0012ca2:	31 ff                	xor    edi,edi
c0012ca4:	eb 13                	jmp    c0012cb9 <VAS::scanForEviction(int, int)+0x47>
c0012ca6:	83 44 24 0c 04       	add    DWORD PTR [esp+0xc],0x4
c0012cab:	81 c3 00 00 40 00    	add    ebx,0x400000
c0012cb1:	81 fb 00 00 40 c0    	cmp    ebx,0xc0400000
c0012cb7:	74 67                	je     c0012d20 <VAS::scanForEviction(int, int)+0xae>
c0012cb9:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0012cbc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012cc0:	f6 04 08 01          	test   BYTE PTR [eax+ecx*1],0x1
c0012cc4:	74 e0                	je     c0012ca6 <VAS::scanForEviction(int, int)+0x34>
c0012cc6:	8d ab 00 00 c0 ff    	lea    ebp,[ebx-0x400000]
c0012ccc:	eb 0a                	jmp    c0012cd8 <VAS::scanForEviction(int, int)+0x66>
c0012cce:	81 c5 00 10 00 00    	add    ebp,0x1000
c0012cd4:	39 eb                	cmp    ebx,ebp
c0012cd6:	74 ce                	je     c0012ca6 <VAS::scanForEviction(int, int)+0x34>
c0012cd8:	55                   	push   ebp
c0012cd9:	56                   	push   esi
c0012cda:	e8 11 f3 ff ff       	call   c0011ff0 <VAS::getPageTableEntry(unsigned long)>
c0012cdf:	5a                   	pop    edx
c0012ce0:	8b 00                	mov    eax,DWORD PTR [eax]
c0012ce2:	59                   	pop    ecx
c0012ce3:	89 c2                	mov    edx,eax
c0012ce5:	81 e2 00 0c 00 00    	and    edx,0xc00
c0012ceb:	81 fa 00 0c 00 00    	cmp    edx,0xc00
c0012cf1:	75 db                	jne    c0012cce <VAS::scanForEviction(int, int)+0x5c>
c0012cf3:	a8 01                	test   al,0x1
c0012cf5:	74 d7                	je     c0012cce <VAS::scanForEviction(int, int)+0x5c>
c0012cf7:	89 f8                	mov    eax,edi
c0012cf9:	99                   	cdq    
c0012cfa:	f7 7c 24 34          	idiv   DWORD PTR [esp+0x34]
c0012cfe:	85 d2                	test   edx,edx
c0012d00:	74 03                	je     c0012d05 <VAS::scanForEviction(int, int)+0x93>
c0012d02:	47                   	inc    edi
c0012d03:	eb c9                	jmp    c0012cce <VAS::scanForEviction(int, int)+0x5c>
c0012d05:	83 ec 08             	sub    esp,0x8
c0012d08:	55                   	push   ebp
c0012d09:	56                   	push   esi
c0012d0a:	e8 6b fd ff ff       	call   c0012a7a <VAS::evict(unsigned long)>
c0012d0f:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012d13:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012d17:	83 c4 10             	add    esp,0x10
c0012d1a:	3b 44 24 38          	cmp    eax,DWORD PTR [esp+0x38]
c0012d1e:	75 e2                	jne    c0012d02 <VAS::scanForEviction(int, int)+0x90>
c0012d20:	83 c4 1c             	add    esp,0x1c
c0012d23:	5b                   	pop    ebx
c0012d24:	5e                   	pop    esi
c0012d25:	5f                   	pop    edi
c0012d26:	5d                   	pop    ebp
c0012d27:	c3                   	ret    

c0012d28 <mapVASFirstTime>:
c0012d28:	55                   	push   ebp
c0012d29:	57                   	push   edi
c0012d2a:	56                   	push   esi
c0012d2b:	53                   	push   ebx
c0012d2c:	83 ec 0c             	sub    esp,0xc
c0012d2f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012d34:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012d37:	4a                   	dec    edx
c0012d38:	0f 84 8e 00 00 00    	je     c0012dcc <mapVASFirstTime+0xa4>
c0012d3e:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012d41:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012d44:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012d49:	c1 e5 15             	shl    ebp,0x15
c0012d4c:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012d51:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012d57:	29 eb                	sub    ebx,ebp
c0012d59:	29 ee                	sub    esi,ebp
c0012d5b:	e8 82 d1 ff ff       	call   c000fee2 <Phys::allocatePage()>
c0012d60:	83 ec 0c             	sub    esp,0xc
c0012d63:	68 03 04 00 00       	push   0x403
c0012d68:	6a 01                	push   0x1
c0012d6a:	53                   	push   ebx
c0012d6b:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012d71:	50                   	push   eax
c0012d72:	57                   	push   edi
c0012d73:	e8 f2 f8 ff ff       	call   c001266a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012d78:	83 c4 20             	add    esp,0x20
c0012d7b:	39 f3                	cmp    ebx,esi
c0012d7d:	75 dc                	jne    c0012d5b <mapVASFirstTime+0x33>
c0012d7f:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012d84:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012d89:	29 ee                	sub    esi,ebp
c0012d8b:	29 e8                	sub    eax,ebp
c0012d8d:	89 c5                	mov    ebp,eax
c0012d8f:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012d93:	19 db                	sbb    ebx,ebx
c0012d95:	e8 48 d1 ff ff       	call   c000fee2 <Phys::allocatePage()>
c0012d9a:	83 e3 04             	and    ebx,0x4
c0012d9d:	83 ec 0c             	sub    esp,0xc
c0012da0:	81 c3 03 04 00 00    	add    ebx,0x403
c0012da6:	53                   	push   ebx
c0012da7:	6a 01                	push   0x1
c0012da9:	56                   	push   esi
c0012daa:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012db0:	50                   	push   eax
c0012db1:	57                   	push   edi
c0012db2:	e8 b3 f8 ff ff       	call   c001266a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012db7:	83 c4 20             	add    esp,0x20
c0012dba:	39 f5                	cmp    ebp,esi
c0012dbc:	75 d1                	jne    c0012d8f <mapVASFirstTime+0x67>
c0012dbe:	0f 20 d8             	mov    eax,cr3
c0012dc1:	0f 22 d8             	mov    cr3,eax
c0012dc4:	83 c4 0c             	add    esp,0xc
c0012dc7:	5b                   	pop    ebx
c0012dc8:	5e                   	pop    esi
c0012dc9:	5f                   	pop    edi
c0012dca:	5d                   	pop    ebp
c0012dcb:	c3                   	ret    
c0012dcc:	83 ec 0c             	sub    esp,0xc
c0012dcf:	68 9b a8 02 c0       	push   0xc002a89b
c0012dd4:	e8 71 01 00 00       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0012dd9:	83 c4 10             	add    esp,0x10
c0012ddc:	83 c4 0c             	add    esp,0xc
c0012ddf:	5b                   	pop    ebx
c0012de0:	5e                   	pop    esi
c0012de1:	5f                   	pop    edi
c0012de2:	5d                   	pop    ebp
c0012de3:	c3                   	ret    

c0012de4 <__cxa_atexit>:
c0012de4:	31 c0                	xor    eax,eax
c0012de6:	c3                   	ret    

c0012de7 <__cxa_finalize>:
c0012de7:	c3                   	ret    

c0012de8 <__stack_chk_fail>:
c0012de8:	55                   	push   ebp
c0012de9:	89 e5                	mov    ebp,esp
c0012deb:	83 ec 14             	sub    esp,0x14
c0012dee:	68 b4 a8 02 c0       	push   0xc002a8b4
c0012df3:	e8 52 01 00 00       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0012df8:	58                   	pop    eax
c0012df9:	5a                   	pop    edx
c0012dfa:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012dfd:	68 04 a9 02 c0       	push   0xc002a904
c0012e02:	e8 43 01 00 00       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0012e07:	59                   	pop    ecx
c0012e08:	58                   	pop    eax
c0012e09:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012e0c:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012e0f:	68 04 a9 02 c0       	push   0xc002a904
c0012e14:	e8 31 01 00 00       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0012e19:	5a                   	pop    edx
c0012e1a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012e1d:	59                   	pop    ecx
c0012e1e:	8b 00                	mov    eax,DWORD PTR [eax]
c0012e20:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012e23:	68 04 a9 02 c0       	push   0xc002a904
c0012e28:	e8 1d 01 00 00       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0012e2d:	5a                   	pop    edx
c0012e2e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012e31:	59                   	pop    ecx
c0012e32:	8b 00                	mov    eax,DWORD PTR [eax]
c0012e34:	8b 00                	mov    eax,DWORD PTR [eax]
c0012e36:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012e39:	68 04 a9 02 c0       	push   0xc002a904
c0012e3e:	e8 07 01 00 00       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0012e43:	c7 04 24 0c a9 02 c0 	mov    DWORD PTR [esp],0xc002a90c
c0012e4a:	e8 ac 77 00 00       	call   c001a5fb <Krnl::panic(char const*)>
c0012e4f:	83 c4 10             	add    esp,0x10
c0012e52:	c9                   	leave  
c0012e53:	c3                   	ret    

c0012e54 <__cxa_pure_virtual>:
c0012e54:	83 ec 18             	sub    esp,0x18
c0012e57:	68 24 a9 02 c0       	push   0xc002a924
c0012e5c:	e8 9a 77 00 00       	call   c001a5fb <Krnl::panic(char const*)>
c0012e61:	83 c4 1c             	add    esp,0x1c
c0012e64:	c3                   	ret    

c0012e65 <operator new[](unsigned long)>:
c0012e65:	e9 d6 c9 ff ff       	jmp    c000f840 <malloc>

c0012e6a <operator delete(void*, unsigned long)>:
c0012e6a:	e9 f1 c9 ff ff       	jmp    c000f860 <rfree>

c0012e6f <operator delete[](void*)>:
c0012e6f:	e9 ec c9 ff ff       	jmp    c000f860 <rfree>

c0012e74 <operator delete[](void*, unsigned long)>:
c0012e74:	e9 e7 c9 ff ff       	jmp    c000f860 <rfree>

c0012e79 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012e79:	57                   	push   edi
c0012e7a:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012e7f:	56                   	push   esi
c0012e80:	be 38 a9 02 c0       	mov    esi,0xc002a938
c0012e85:	53                   	push   ebx
c0012e86:	83 ec 40             	sub    esp,0x40
c0012e89:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012e8d:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012e91:	fc                   	cld    
c0012e92:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012e94:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012e98:	83 f9 3e             	cmp    ecx,0x3e
c0012e9b:	7e 05                	jle    c0012ea2 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012e9d:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012ea2:	89 df                	mov    edi,ebx
c0012ea4:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012ea8:	eb 02                	jmp    c0012eac <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012eaa:	89 c7                	mov    edi,eax
c0012eac:	31 d2                	xor    edx,edx
c0012eae:	46                   	inc    esi
c0012eaf:	89 f8                	mov    eax,edi
c0012eb1:	f7 f1                	div    ecx
c0012eb3:	39 cf                	cmp    edi,ecx
c0012eb5:	73 f3                	jae    c0012eaa <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012eb7:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012eba:	eb 02                	jmp    c0012ebe <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012ebc:	89 c3                	mov    ebx,eax
c0012ebe:	31 d2                	xor    edx,edx
c0012ec0:	4e                   	dec    esi
c0012ec1:	89 d8                	mov    eax,ebx
c0012ec3:	f7 f1                	div    ecx
c0012ec5:	39 cb                	cmp    ebx,ecx
c0012ec7:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012ecb:	88 16                	mov    BYTE PTR [esi],dl
c0012ecd:	73 ed                	jae    c0012ebc <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012ecf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012ed3:	83 c4 40             	add    esp,0x40
c0012ed6:	5b                   	pop    ebx
c0012ed7:	5e                   	pop    esi
c0012ed8:	5f                   	pop    edi
c0012ed9:	c3                   	ret    

c0012eda <Dbg::logc(char)>:
c0012eda:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012ede:	ba fd 03 00 00       	mov    edx,0x3fd
c0012ee3:	ec                   	in     al,dx
c0012ee4:	a8 20                	test   al,0x20
c0012ee6:	74 fb                	je     c0012ee3 <Dbg::logc(char)+0x9>
c0012ee8:	ba f8 03 00 00       	mov    edx,0x3f8
c0012eed:	88 c8                	mov    al,cl
c0012eef:	ee                   	out    dx,al
c0012ef0:	c3                   	ret    

c0012ef1 <Dbg::logs(char*)>:
c0012ef1:	53                   	push   ebx
c0012ef2:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012ef6:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012ef9:	84 c0                	test   al,al
c0012efb:	74 0f                	je     c0012f0c <Dbg::logs(char*)+0x1b>
c0012efd:	50                   	push   eax
c0012efe:	43                   	inc    ebx
c0012eff:	e8 d6 ff ff ff       	call   c0012eda <Dbg::logc(char)>
c0012f04:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012f07:	5a                   	pop    edx
c0012f08:	84 c0                	test   al,al
c0012f0a:	75 f1                	jne    c0012efd <Dbg::logs(char*)+0xc>
c0012f0c:	5b                   	pop    ebx
c0012f0d:	c3                   	ret    

c0012f0e <Dbg::logWriteInt(unsigned int)>:
c0012f0e:	83 ec 10             	sub    esp,0x10
c0012f11:	6a 0a                	push   0xa
c0012f13:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012f17:	50                   	push   eax
c0012f18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f1c:	e8 58 ff ff ff       	call   c0012e79 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012f21:	50                   	push   eax
c0012f22:	e8 ca ff ff ff       	call   c0012ef1 <Dbg::logs(char*)>
c0012f27:	83 c4 20             	add    esp,0x20
c0012f2a:	c3                   	ret    

c0012f2b <Dbg::logWriteIntBase(unsigned int, int)>:
c0012f2b:	83 ec 10             	sub    esp,0x10
c0012f2e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012f32:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012f36:	50                   	push   eax
c0012f37:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f3b:	e8 39 ff ff ff       	call   c0012e79 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012f40:	50                   	push   eax
c0012f41:	e8 ab ff ff ff       	call   c0012ef1 <Dbg::logs(char*)>
c0012f46:	83 c4 20             	add    esp,0x20
c0012f49:	c3                   	ret    

c0012f4a <Dbg::kprintf(char const*, ...)>:
c0012f4a:	55                   	push   ebp
c0012f4b:	57                   	push   edi
c0012f4c:	56                   	push   esi
c0012f4d:	53                   	push   ebx
c0012f4e:	83 ec 0c             	sub    esp,0xc
c0012f51:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012f55:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012f59:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012f5d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012f60:	84 c0                	test   al,al
c0012f62:	74 4a                	je     c0012fae <Dbg::kprintf(char const*, ...)+0x64>
c0012f64:	31 db                	xor    ebx,ebx
c0012f66:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012f69:	3c 25                	cmp    al,0x25
c0012f6b:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012f6e:	0f 85 e4 00 00 00    	jne    c0013058 <Dbg::kprintf(char const*, ...)+0x10e>
c0012f74:	83 c3 02             	add    ebx,0x2
c0012f77:	8a 07                	mov    al,BYTE PTR [edi]
c0012f79:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012f7c:	83 e8 25             	sub    eax,0x25
c0012f7f:	3c 53                	cmp    al,0x53
c0012f81:	0f 87 ba 00 00 00    	ja     c0013041 <Dbg::kprintf(char const*, ...)+0xf7>
c0012f87:	0f b6 c0             	movzx  eax,al
c0012f8a:	ff 24 85 78 a9 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd5688]
c0012f91:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f95:	89 c8                	mov    eax,ecx
c0012f97:	83 c1 04             	add    ecx,0x4
c0012f9a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012f9e:	ff 30                	push   DWORD PTR [eax]
c0012fa0:	e8 4c ff ff ff       	call   c0012ef1 <Dbg::logs(char*)>
c0012fa5:	58                   	pop    eax
c0012fa6:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012faa:	84 c0                	test   al,al
c0012fac:	75 b8                	jne    c0012f66 <Dbg::kprintf(char const*, ...)+0x1c>
c0012fae:	83 c4 0c             	add    esp,0xc
c0012fb1:	5b                   	pop    ebx
c0012fb2:	5e                   	pop    esi
c0012fb3:	5f                   	pop    edi
c0012fb4:	5d                   	pop    ebp
c0012fb5:	c3                   	ret    
c0012fb6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012fba:	89 d0                	mov    eax,edx
c0012fbc:	83 c2 04             	add    edx,0x4
c0012fbf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012fc3:	ff 30                	push   DWORD PTR [eax]
c0012fc5:	e8 44 ff ff ff       	call   c0012f0e <Dbg::logWriteInt(unsigned int)>
c0012fca:	58                   	pop    eax
c0012fcb:	eb d9                	jmp    c0012fa6 <Dbg::kprintf(char const*, ...)+0x5c>
c0012fcd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012fd1:	89 d0                	mov    eax,edx
c0012fd3:	83 c2 04             	add    edx,0x4
c0012fd6:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012fd9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012fdd:	50                   	push   eax
c0012fde:	e8 f7 fe ff ff       	call   c0012eda <Dbg::logc(char)>
c0012fe3:	58                   	pop    eax
c0012fe4:	eb c0                	jmp    c0012fa6 <Dbg::kprintf(char const*, ...)+0x5c>
c0012fe6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012fea:	89 c8                	mov    eax,ecx
c0012fec:	83 c1 04             	add    ecx,0x4
c0012fef:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012ff3:	ff 30                	push   DWORD PTR [eax]
c0012ff5:	e8 14 ff ff ff       	call   c0012f0e <Dbg::logWriteInt(unsigned int)>
c0012ffa:	5f                   	pop    edi
c0012ffb:	eb a9                	jmp    c0012fa6 <Dbg::kprintf(char const*, ...)+0x5c>
c0012ffd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013001:	89 c8                	mov    eax,ecx
c0013003:	83 c1 04             	add    ecx,0x4
c0013006:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001300a:	6a 10                	push   0x10
c001300c:	ff 30                	push   DWORD PTR [eax]
c001300e:	e8 18 ff ff ff       	call   c0012f2b <Dbg::logWriteIntBase(unsigned int, int)>
c0013013:	59                   	pop    ecx
c0013014:	5f                   	pop    edi
c0013015:	eb 8f                	jmp    c0012fa6 <Dbg::kprintf(char const*, ...)+0x5c>
c0013017:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001301b:	89 d0                	mov    eax,edx
c001301d:	83 c2 08             	add    edx,0x8
c0013020:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0013024:	6a 10                	push   0x10
c0013026:	ff 30                	push   DWORD PTR [eax]
c0013028:	e8 fe fe ff ff       	call   c0012f2b <Dbg::logWriteIntBase(unsigned int, int)>
c001302d:	58                   	pop    eax
c001302e:	5a                   	pop    edx
c001302f:	e9 72 ff ff ff       	jmp    c0012fa6 <Dbg::kprintf(char const*, ...)+0x5c>
c0013034:	6a 25                	push   0x25
c0013036:	e8 9f fe ff ff       	call   c0012eda <Dbg::logc(char)>
c001303b:	58                   	pop    eax
c001303c:	e9 65 ff ff ff       	jmp    c0012fa6 <Dbg::kprintf(char const*, ...)+0x5c>
c0013041:	6a 25                	push   0x25
c0013043:	e8 92 fe ff ff       	call   c0012eda <Dbg::logc(char)>
c0013048:	0f be 07             	movsx  eax,BYTE PTR [edi]
c001304b:	50                   	push   eax
c001304c:	e8 89 fe ff ff       	call   c0012eda <Dbg::logc(char)>
c0013051:	5a                   	pop    edx
c0013052:	59                   	pop    ecx
c0013053:	e9 4e ff ff ff       	jmp    c0012fa6 <Dbg::kprintf(char const*, ...)+0x5c>
c0013058:	50                   	push   eax
c0013059:	89 eb                	mov    ebx,ebp
c001305b:	e8 7a fe ff ff       	call   c0012eda <Dbg::logc(char)>
c0013060:	89 fd                	mov    ebp,edi
c0013062:	58                   	pop    eax
c0013063:	e9 3e ff ff ff       	jmp    c0012fa6 <Dbg::kprintf(char const*, ...)+0x5c>

c0013068 <File::read(unsigned long long, void*, int*)>:
c0013068:	53                   	push   ebx
c0013069:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001306d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013071:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0013078:	3c 19                	cmp    al,0x19
c001307a:	77 35                	ja     c00130b1 <File::read(unsigned long long, void*, int*)+0x49>
c001307c:	8b 04 85 20 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd15e0]
c0013083:	85 c0                	test   eax,eax
c0013085:	74 2a                	je     c00130b1 <File::read(unsigned long long, void*, int*)+0x49>
c0013087:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001308d:	85 c0                	test   eax,eax
c001308f:	74 20                	je     c00130b1 <File::read(unsigned long long, void*, int*)+0x49>
c0013091:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013095:	74 21                	je     c00130b8 <File::read(unsigned long long, void*, int*)+0x50>
c0013097:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013099:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001309d:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00130a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00130a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00130ab:	5b                   	pop    ebx
c00130ac:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c00130af:	ff e0                	jmp    eax
c00130b1:	b8 0b 00 00 00       	mov    eax,0xb
c00130b6:	eb 05                	jmp    c00130bd <File::read(unsigned long long, void*, int*)+0x55>
c00130b8:	b8 05 00 00 00       	mov    eax,0x5
c00130bd:	5b                   	pop    ebx
c00130be:	c3                   	ret    
c00130bf:	90                   	nop

c00130c0 <File::write(unsigned long long, void*, int*)>:
c00130c0:	53                   	push   ebx
c00130c1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00130c5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00130c9:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00130d0:	3c 19                	cmp    al,0x19
c00130d2:	77 35                	ja     c0013109 <File::write(unsigned long long, void*, int*)+0x49>
c00130d4:	8b 04 85 20 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd15e0]
c00130db:	85 c0                	test   eax,eax
c00130dd:	74 2a                	je     c0013109 <File::write(unsigned long long, void*, int*)+0x49>
c00130df:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00130e5:	85 c0                	test   eax,eax
c00130e7:	74 20                	je     c0013109 <File::write(unsigned long long, void*, int*)+0x49>
c00130e9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00130ed:	74 21                	je     c0013110 <File::write(unsigned long long, void*, int*)+0x50>
c00130ef:	8b 08                	mov    ecx,DWORD PTR [eax]
c00130f1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00130f5:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00130fb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00130ff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013103:	5b                   	pop    ebx
c0013104:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0013107:	ff e0                	jmp    eax
c0013109:	b8 0b 00 00 00       	mov    eax,0xb
c001310e:	eb 05                	jmp    c0013115 <File::write(unsigned long long, void*, int*)+0x55>
c0013110:	b8 05 00 00 00       	mov    eax,0x5
c0013115:	5b                   	pop    ebx
c0013116:	c3                   	ret    
c0013117:	90                   	nop

c0013118 <Directory::read(unsigned long long, void*, int*)>:
c0013118:	53                   	push   ebx
c0013119:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001311d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013121:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0013128:	3c 19                	cmp    al,0x19
c001312a:	77 35                	ja     c0013161 <Directory::read(unsigned long long, void*, int*)+0x49>
c001312c:	8b 04 85 20 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd15e0]
c0013133:	85 c0                	test   eax,eax
c0013135:	74 2a                	je     c0013161 <Directory::read(unsigned long long, void*, int*)+0x49>
c0013137:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001313d:	85 c0                	test   eax,eax
c001313f:	74 20                	je     c0013161 <Directory::read(unsigned long long, void*, int*)+0x49>
c0013141:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013145:	74 21                	je     c0013168 <Directory::read(unsigned long long, void*, int*)+0x50>
c0013147:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013149:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001314d:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0013153:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013157:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001315b:	5b                   	pop    ebx
c001315c:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c001315f:	ff e0                	jmp    eax
c0013161:	b8 0b 00 00 00       	mov    eax,0xb
c0013166:	eb 05                	jmp    c001316d <Directory::read(unsigned long long, void*, int*)+0x55>
c0013168:	b8 05 00 00 00       	mov    eax,0x5
c001316d:	5b                   	pop    ebx
c001316e:	c3                   	ret    
c001316f:	90                   	nop

c0013170 <Directory::write(unsigned long long, void*, int*)>:
c0013170:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013174:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c001317b:	b8 0b 00 00 00       	mov    eax,0xb
c0013180:	80 fa 19             	cmp    dl,0x19
c0013183:	77 18                	ja     c001319d <Directory::write(unsigned long long, void*, int*)+0x2d>
c0013185:	8b 14 95 20 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd15e0]
c001318c:	85 d2                	test   edx,edx
c001318e:	74 0d                	je     c001319d <Directory::write(unsigned long long, void*, int*)+0x2d>
c0013190:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0013197:	19 c0                	sbb    eax,eax
c0013199:	83 e0 0a             	and    eax,0xa
c001319c:	40                   	inc    eax
c001319d:	c3                   	ret    

c001319e <File::isAtty()>:
c001319e:	31 c0                	xor    eax,eax
c00131a0:	c3                   	ret    
c00131a1:	90                   	nop

c00131a2 <Directory::isAtty()>:
c00131a2:	31 c0                	xor    eax,eax
c00131a4:	c3                   	ret    
c00131a5:	90                   	nop

c00131a6 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00131a6:	b8 0a 00 00 00       	mov    eax,0xa
c00131ab:	c3                   	ret    

c00131ac <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c00131ac:	b8 0a 00 00 00       	mov    eax,0xa
c00131b1:	c3                   	ret    

c00131b2 <File::~File()>:
c00131b2:	83 ec 0c             	sub    esp,0xc
c00131b5:	ba 34 ab 02 c0       	mov    edx,0xc002ab34
c00131ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131be:	89 10                	mov    DWORD PTR [eax],edx
c00131c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131c4:	83 ec 0c             	sub    esp,0xc
c00131c7:	50                   	push   eax
c00131c8:	e8 71 e7 ff ff       	call   c001193e <UnixFile::~UnixFile()>
c00131cd:	83 c4 10             	add    esp,0x10
c00131d0:	90                   	nop
c00131d1:	83 c4 0c             	add    esp,0xc
c00131d4:	c3                   	ret    
c00131d5:	90                   	nop

c00131d6 <File::~File()>:
c00131d6:	83 ec 0c             	sub    esp,0xc
c00131d9:	83 ec 0c             	sub    esp,0xc
c00131dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131e0:	e8 cd ff ff ff       	call   c00131b2 <File::~File()>
c00131e5:	83 c4 10             	add    esp,0x10
c00131e8:	83 ec 08             	sub    esp,0x8
c00131eb:	68 14 01 00 00       	push   0x114
c00131f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131f4:	e8 71 fc ff ff       	call   c0012e6a <operator delete(void*, unsigned long)>
c00131f9:	83 c4 10             	add    esp,0x10
c00131fc:	83 c4 0c             	add    esp,0xc
c00131ff:	c3                   	ret    

c0013200 <Directory::~Directory()>:
c0013200:	83 ec 0c             	sub    esp,0xc
c0013203:	ba 50 ab 02 c0       	mov    edx,0xc002ab50
c0013208:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001320c:	89 10                	mov    DWORD PTR [eax],edx
c001320e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013212:	83 ec 0c             	sub    esp,0xc
c0013215:	50                   	push   eax
c0013216:	e8 23 e7 ff ff       	call   c001193e <UnixFile::~UnixFile()>
c001321b:	83 c4 10             	add    esp,0x10
c001321e:	90                   	nop
c001321f:	83 c4 0c             	add    esp,0xc
c0013222:	c3                   	ret    
c0013223:	90                   	nop

c0013224 <Directory::~Directory()>:
c0013224:	83 ec 0c             	sub    esp,0xc
c0013227:	83 ec 0c             	sub    esp,0xc
c001322a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001322e:	e8 cd ff ff ff       	call   c0013200 <Directory::~Directory()>
c0013233:	83 c4 10             	add    esp,0x10
c0013236:	83 ec 08             	sub    esp,0x8
c0013239:	68 14 01 00 00       	push   0x114
c001323e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013242:	e8 23 fc ff ff       	call   c0012e6a <operator delete(void*, unsigned long)>
c0013247:	83 c4 10             	add    esp,0x10
c001324a:	83 c4 0c             	add    esp,0xc
c001324d:	c3                   	ret    

c001324e <Filesystem::Filesystem()>:
c001324e:	ba d0 aa 02 c0       	mov    edx,0xc002aad0
c0013253:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013257:	89 10                	mov    DWORD PTR [eax],edx
c0013259:	8b 15 90 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e590
c001325f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013263:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0013266:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001326a:	a3 90 e5 02 c0       	mov    ds:0xc002e590,eax
c001326f:	90                   	nop
c0013270:	c3                   	ret    
c0013271:	90                   	nop

c0013272 <Filesystem::~Filesystem()>:
c0013272:	ba d0 aa 02 c0       	mov    edx,0xc002aad0
c0013277:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001327b:	89 10                	mov    DWORD PTR [eax],edx
c001327d:	90                   	nop
c001327e:	c3                   	ret    
c001327f:	90                   	nop

c0013280 <Filesystem::~Filesystem()>:
c0013280:	83 ec 0c             	sub    esp,0xc
c0013283:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013287:	e8 e6 ff ff ff       	call   c0013272 <Filesystem::~Filesystem()>
c001328c:	83 c4 04             	add    esp,0x4
c001328f:	83 ec 08             	sub    esp,0x8
c0013292:	6a 08                	push   0x8
c0013294:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013298:	e8 cd fb ff ff       	call   c0012e6a <operator delete(void*, unsigned long)>
c001329d:	83 c4 10             	add    esp,0x10
c00132a0:	83 c4 0c             	add    esp,0xc
c00132a3:	c3                   	ret    

c00132a4 <Fs::getcwd(Process*, char*, int)>:
c00132a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00132a8:	31 c0                	xor    eax,eax
c00132aa:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00132ad:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00132b1:	7d 15                	jge    c00132c8 <Fs::getcwd(Process*, char*, int)+0x24>
c00132b3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00132b7:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c00132be:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00132c1:	84 c9                	test   cl,cl
c00132c3:	74 06                	je     c00132cb <Fs::getcwd(Process*, char*, int)+0x27>
c00132c5:	40                   	inc    eax
c00132c6:	eb e2                	jmp    c00132aa <Fs::getcwd(Process*, char*, int)+0x6>
c00132c8:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00132cb:	31 c0                	xor    eax,eax
c00132cd:	c3                   	ret    

c00132ce <Fs::initVFS()>:
c00132ce:	83 ec 18             	sub    esp,0x18
c00132d1:	6a 08                	push   0x8
c00132d3:	e8 68 c5 ff ff       	call   c000f840 <malloc>
c00132d8:	89 04 24             	mov    DWORD PTR [esp],eax
c00132db:	e8 6a dc 00 00       	call   c0020f4a <FAT::FAT()>
c00132e0:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00132e7:	e8 54 c5 ff ff       	call   c000f840 <malloc>
c00132ec:	89 04 24             	mov    DWORD PTR [esp],eax
c00132ef:	e8 ae ee 00 00       	call   c00221a2 <ISO9660::ISO9660()>
c00132f4:	83 c4 1c             	add    esp,0x1c
c00132f7:	c3                   	ret    

c00132f8 <Fs::standardiseFiles(char*, char const*, char const*)>:
c00132f8:	55                   	push   ebp
c00132f9:	57                   	push   edi
c00132fa:	56                   	push   esi
c00132fb:	53                   	push   ebx
c00132fc:	81 ec 10 04 00 00    	sub    esp,0x410
c0013302:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0013309:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0013310:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0013317:	68 00 04 00 00       	push   0x400
c001331c:	6a 00                	push   0x0
c001331e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0013322:	56                   	push   esi
c0013323:	e8 50 d4 fe ff       	call   c0000778 <memset>
c0013328:	83 c4 10             	add    esp,0x10
c001332b:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c001332f:	75 0b                	jne    c001333c <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0013331:	50                   	push   eax
c0013332:	50                   	push   eax
c0013333:	57                   	push   edi
c0013334:	56                   	push   esi
c0013335:	e8 fa d4 fe ff       	call   c0000834 <strcpy>
c001333a:	eb 41                	jmp    c001337d <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c001333c:	8a 07                	mov    al,BYTE PTR [edi]
c001333e:	3c 5c                	cmp    al,0x5c
c0013340:	74 04                	je     c0013346 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0013342:	3c 2f                	cmp    al,0x2f
c0013344:	75 18                	jne    c001335e <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0013346:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0013349:	3c 60                	cmp    al,0x60
c001334b:	7e 03                	jle    c0013350 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c001334d:	83 e8 20             	sub    eax,0x20
c0013350:	88 04 24             	mov    BYTE PTR [esp],al
c0013353:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c001335a:	50                   	push   eax
c001335b:	50                   	push   eax
c001335c:	eb 18                	jmp    c0013376 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c001335e:	50                   	push   eax
c001335f:	50                   	push   eax
c0013360:	55                   	push   ebp
c0013361:	56                   	push   esi
c0013362:	e8 cd d4 fe ff       	call   c0000834 <strcpy>
c0013367:	5a                   	pop    edx
c0013368:	59                   	pop    ecx
c0013369:	68 ed c1 02 c0       	push   0xc002c1ed
c001336e:	56                   	push   esi
c001336f:	e8 00 d6 fe ff       	call   c0000974 <strcat>
c0013374:	5d                   	pop    ebp
c0013375:	58                   	pop    eax
c0013376:	57                   	push   edi
c0013377:	56                   	push   esi
c0013378:	e8 f7 d5 fe ff       	call   c0000974 <strcat>
c001337d:	83 c4 10             	add    esp,0x10
c0013380:	8a 04 24             	mov    al,BYTE PTR [esp]
c0013383:	3c 60                	cmp    al,0x60
c0013385:	7e 03                	jle    c001338a <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0013387:	83 e8 20             	sub    eax,0x20
c001338a:	88 04 24             	mov    BYTE PTR [esp],al
c001338d:	88 03                	mov    BYTE PTR [ebx],al
c001338f:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0013396:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c001339c:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00133a0:	bf 03 00 00 00       	mov    edi,0x3
c00133a5:	b8 03 00 00 00       	mov    eax,0x3
c00133aa:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c00133ad:	84 d2                	test   dl,dl
c00133af:	0f 84 91 00 00 00    	je     c0013446 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c00133b5:	8d 4f 01             	lea    ecx,[edi+0x1]
c00133b8:	80 fa 5c             	cmp    dl,0x5c
c00133bb:	74 05                	je     c00133c2 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c00133bd:	80 fa 2f             	cmp    dl,0x2f
c00133c0:	75 12                	jne    c00133d4 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c00133c2:	89 c5                	mov    ebp,eax
c00133c4:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c00133c9:	74 09                	je     c00133d4 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c00133cb:	40                   	inc    eax
c00133cc:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c00133d0:	89 cf                	mov    edi,ecx
c00133d2:	eb d6                	jmp    c00133aa <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c00133d4:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c00133d9:	75 5b                	jne    c0013436 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c00133db:	80 fa 2e             	cmp    dl,0x2e
c00133de:	75 56                	jne    c0013436 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c00133e0:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c00133e4:	74 19                	je     c00133ff <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c00133e6:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00133eb:	74 53                	je     c0013440 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c00133ed:	89 f9                	mov    ecx,edi
c00133ef:	41                   	inc    ecx
c00133f0:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00133f3:	80 fa 2f             	cmp    dl,0x2f
c00133f6:	74 f7                	je     c00133ef <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c00133f8:	80 fa 5c             	cmp    dl,0x5c
c00133fb:	74 f2                	je     c00133ef <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c00133fd:	eb d1                	jmp    c00133d0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00133ff:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0013404:	74 3a                	je     c0013440 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0013406:	83 f8 03             	cmp    eax,0x3
c0013409:	74 c5                	je     c00133d0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001340b:	41                   	inc    ecx
c001340c:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c001340f:	80 fa 2f             	cmp    dl,0x2f
c0013412:	74 f7                	je     c001340b <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0013414:	80 fa 5c             	cmp    dl,0x5c
c0013417:	74 f2                	je     c001340b <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0013419:	48                   	dec    eax
c001341a:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001341e:	75 06                	jne    c0013426 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0013420:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013424:	eb f3                	jmp    c0013419 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0013426:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001342a:	74 07                	je     c0013433 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c001342c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013430:	48                   	dec    eax
c0013431:	eb f3                	jmp    c0013426 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0013433:	40                   	inc    eax
c0013434:	eb 9a                	jmp    c00133d0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013436:	80 fa 2f             	cmp    dl,0x2f
c0013439:	74 95                	je     c00133d0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001343b:	80 fa 5c             	cmp    dl,0x5c
c001343e:	74 90                	je     c00133d0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013440:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0013443:	40                   	inc    eax
c0013444:	eb 8a                	jmp    c00133d0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013446:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001344a:	83 ec 0c             	sub    esp,0xc
c001344d:	53                   	push   ebx
c001344e:	e8 41 d3 fe ff       	call   c0000794 <strlen>
c0013453:	83 c4 10             	add    esp,0x10
c0013456:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c001345b:	75 26                	jne    c0013483 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c001345d:	83 ec 0c             	sub    esp,0xc
c0013460:	53                   	push   ebx
c0013461:	e8 2e d3 fe ff       	call   c0000794 <strlen>
c0013466:	83 c4 10             	add    esp,0x10
c0013469:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c001346e:	74 26                	je     c0013496 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0013470:	83 ec 0c             	sub    esp,0xc
c0013473:	53                   	push   ebx
c0013474:	e8 1b d3 fe ff       	call   c0000794 <strlen>
c0013479:	83 c4 10             	add    esp,0x10
c001347c:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0013481:	eb c7                	jmp    c001344a <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0013483:	83 ec 0c             	sub    esp,0xc
c0013486:	53                   	push   ebx
c0013487:	e8 08 d3 fe ff       	call   c0000794 <strlen>
c001348c:	83 c4 10             	add    esp,0x10
c001348f:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0013494:	74 c7                	je     c001345d <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0013496:	81 c4 0c 04 00 00    	add    esp,0x40c
c001349c:	5b                   	pop    ebx
c001349d:	5e                   	pop    esi
c001349e:	5f                   	pop    edi
c001349f:	5d                   	pop    ebp
c00134a0:	c3                   	ret    
c00134a1:	90                   	nop

c00134a2 <File::File(char const*, Process*)>:
c00134a2:	83 ec 0c             	sub    esp,0xc
c00134a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134a9:	83 ec 08             	sub    esp,0x8
c00134ac:	6a 00                	push   0x0
c00134ae:	50                   	push   eax
c00134af:	e8 a8 e2 ff ff       	call   c001175c <UnixFile::UnixFile(int)>
c00134b4:	83 c4 10             	add    esp,0x10
c00134b7:	ba 34 ab 02 c0       	mov    edx,0xc002ab34
c00134bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134c0:	89 10                	mov    DWORD PTR [eax],edx
c00134c2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00134c6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00134cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134d0:	83 c0 0d             	add    eax,0xd
c00134d3:	83 ec 04             	sub    esp,0x4
c00134d6:	52                   	push   edx
c00134d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134db:	50                   	push   eax
c00134dc:	e8 17 fe ff ff       	call   c00132f8 <Fs::standardiseFiles(char*, char const*, char const*)>
c00134e1:	83 c4 10             	add    esp,0x10
c00134e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134e8:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00134eb:	8d 50 bf             	lea    edx,[eax-0x41]
c00134ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134f2:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00134f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134fc:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013500:	90                   	nop
c0013501:	83 c4 0c             	add    esp,0xc
c0013504:	c3                   	ret    
c0013505:	90                   	nop

c0013506 <File::open(FileOpenMode)>:
c0013506:	53                   	push   ebx
c0013507:	b8 0b 00 00 00       	mov    eax,0xb
c001350c:	83 ec 08             	sub    esp,0x8
c001350f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013513:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001351a:	80 fa 19             	cmp    dl,0x19
c001351d:	77 40                	ja     c001355f <File::open(FileOpenMode)+0x59>
c001351f:	8b 14 95 20 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd15e0]
c0013526:	85 d2                	test   edx,edx
c0013528:	74 35                	je     c001355f <File::open(FileOpenMode)+0x59>
c001352a:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013530:	85 d2                	test   edx,edx
c0013532:	74 2b                	je     c001355f <File::open(FileOpenMode)+0x59>
c0013534:	b8 06 00 00 00       	mov    eax,0x6
c0013539:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001353d:	75 20                	jne    c001355f <File::open(FileOpenMode)+0x59>
c001353f:	8b 02                	mov    eax,DWORD PTR [edx]
c0013541:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013547:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001354b:	51                   	push   ecx
c001354c:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001354f:	51                   	push   ecx
c0013550:	52                   	push   edx
c0013551:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013554:	83 c4 10             	add    esp,0x10
c0013557:	85 c0                	test   eax,eax
c0013559:	75 04                	jne    c001355f <File::open(FileOpenMode)+0x59>
c001355b:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001355f:	83 c4 08             	add    esp,0x8
c0013562:	5b                   	pop    ebx
c0013563:	c3                   	ret    

c0013564 <File::close()>:
c0013564:	53                   	push   ebx
c0013565:	b8 0b 00 00 00       	mov    eax,0xb
c001356a:	83 ec 08             	sub    esp,0x8
c001356d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013571:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013578:	80 fa 19             	cmp    dl,0x19
c001357b:	77 41                	ja     c00135be <File::close()+0x5a>
c001357d:	8b 1c 95 20 ea 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd15e0]
c0013584:	85 db                	test   ebx,ebx
c0013586:	74 36                	je     c00135be <File::close()+0x5a>
c0013588:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c001358f:	74 2d                	je     c00135be <File::close()+0x5a>
c0013591:	b8 05 00 00 00       	mov    eax,0x5
c0013596:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001359a:	74 22                	je     c00135be <File::close()+0x5a>
c001359c:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00135a0:	8b 04 95 20 ea 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd15e0]
c00135a7:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00135ad:	53                   	push   ebx
c00135ae:	53                   	push   ebx
c00135af:	8b 10                	mov    edx,DWORD PTR [eax]
c00135b1:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00135b7:	50                   	push   eax
c00135b8:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c00135bb:	83 c4 10             	add    esp,0x10
c00135be:	83 c4 08             	add    esp,0x8
c00135c1:	5b                   	pop    ebx
c00135c2:	c3                   	ret    
c00135c3:	90                   	nop

c00135c4 <File::seek(unsigned long long)>:
c00135c4:	56                   	push   esi
c00135c5:	53                   	push   ebx
c00135c6:	b8 0b 00 00 00       	mov    eax,0xb
c00135cb:	51                   	push   ecx
c00135cc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00135d0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00135d4:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c00135db:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00135df:	80 fa 19             	cmp    dl,0x19
c00135e2:	77 31                	ja     c0013615 <File::seek(unsigned long long)+0x51>
c00135e4:	8b 14 95 20 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd15e0]
c00135eb:	85 d2                	test   edx,edx
c00135ed:	74 26                	je     c0013615 <File::seek(unsigned long long)+0x51>
c00135ef:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00135f5:	85 d2                	test   edx,edx
c00135f7:	74 1c                	je     c0013615 <File::seek(unsigned long long)+0x51>
c00135f9:	b8 05 00 00 00       	mov    eax,0x5
c00135fe:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0013602:	74 11                	je     c0013615 <File::seek(unsigned long long)+0x51>
c0013604:	8b 02                	mov    eax,DWORD PTR [edx]
c0013606:	53                   	push   ebx
c0013607:	51                   	push   ecx
c0013608:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c001360e:	52                   	push   edx
c001360f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013612:	83 c4 10             	add    esp,0x10
c0013615:	5a                   	pop    edx
c0013616:	5b                   	pop    ebx
c0013617:	5e                   	pop    esi
c0013618:	c3                   	ret    
c0013619:	90                   	nop

c001361a <File::tell(unsigned long long*)>:
c001361a:	83 ec 0c             	sub    esp,0xc
c001361d:	b8 0b 00 00 00       	mov    eax,0xb
c0013622:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013626:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001362d:	80 fa 19             	cmp    dl,0x19
c0013630:	77 34                	ja     c0013666 <File::tell(unsigned long long*)+0x4c>
c0013632:	8b 14 95 20 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd15e0]
c0013639:	85 d2                	test   edx,edx
c001363b:	74 29                	je     c0013666 <File::tell(unsigned long long*)+0x4c>
c001363d:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013643:	85 d2                	test   edx,edx
c0013645:	74 1f                	je     c0013666 <File::tell(unsigned long long*)+0x4c>
c0013647:	b8 05 00 00 00       	mov    eax,0x5
c001364c:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013650:	74 14                	je     c0013666 <File::tell(unsigned long long*)+0x4c>
c0013652:	50                   	push   eax
c0013653:	8b 02                	mov    eax,DWORD PTR [edx]
c0013655:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013659:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001365f:	52                   	push   edx
c0013660:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0013663:	83 c4 10             	add    esp,0x10
c0013666:	83 c4 0c             	add    esp,0xc
c0013669:	c3                   	ret    

c001366a <File::rewind()>:
c001366a:	83 ec 10             	sub    esp,0x10
c001366d:	6a 00                	push   0x0
c001366f:	6a 00                	push   0x0
c0013671:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013675:	e8 4a ff ff ff       	call   c00135c4 <File::seek(unsigned long long)>
c001367a:	83 c4 1c             	add    esp,0x1c
c001367d:	c3                   	ret    

c001367e <File::unlink()>:
c001367e:	83 ec 0c             	sub    esp,0xc
c0013681:	b8 0b 00 00 00       	mov    eax,0xb
c0013686:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001368a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013691:	80 f9 19             	cmp    cl,0x19
c0013694:	77 2f                	ja     c00136c5 <File::unlink()+0x47>
c0013696:	8b 0c 8d 20 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd15e0]
c001369d:	85 c9                	test   ecx,ecx
c001369f:	74 24                	je     c00136c5 <File::unlink()+0x47>
c00136a1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00136a7:	85 c9                	test   ecx,ecx
c00136a9:	74 1a                	je     c00136c5 <File::unlink()+0x47>
c00136ab:	b8 06 00 00 00       	mov    eax,0x6
c00136b0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00136b4:	75 0f                	jne    c00136c5 <File::unlink()+0x47>
c00136b6:	83 c2 0d             	add    edx,0xd
c00136b9:	50                   	push   eax
c00136ba:	50                   	push   eax
c00136bb:	8b 01                	mov    eax,DWORD PTR [ecx]
c00136bd:	52                   	push   edx
c00136be:	51                   	push   ecx
c00136bf:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00136c2:	83 c4 10             	add    esp,0x10
c00136c5:	83 c4 0c             	add    esp,0xc
c00136c8:	c3                   	ret    
c00136c9:	90                   	nop

c00136ca <File::rename(char const*)>:
c00136ca:	83 ec 0c             	sub    esp,0xc
c00136cd:	b8 0b 00 00 00       	mov    eax,0xb
c00136d2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00136d6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00136dd:	80 f9 19             	cmp    cl,0x19
c00136e0:	77 32                	ja     c0013714 <File::rename(char const*)+0x4a>
c00136e2:	8b 0c 8d 20 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd15e0]
c00136e9:	85 c9                	test   ecx,ecx
c00136eb:	74 27                	je     c0013714 <File::rename(char const*)+0x4a>
c00136ed:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00136f3:	85 c9                	test   ecx,ecx
c00136f5:	74 1d                	je     c0013714 <File::rename(char const*)+0x4a>
c00136f7:	b8 06 00 00 00       	mov    eax,0x6
c00136fc:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013700:	75 12                	jne    c0013714 <File::rename(char const*)+0x4a>
c0013702:	83 c2 0d             	add    edx,0xd
c0013705:	50                   	push   eax
c0013706:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013708:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001370c:	52                   	push   edx
c001370d:	51                   	push   ecx
c001370e:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013711:	83 c4 10             	add    esp,0x10
c0013714:	83 c4 0c             	add    esp,0xc
c0013717:	c3                   	ret    

c0013718 <File::chfatattr(unsigned char, unsigned char)>:
c0013718:	57                   	push   edi
c0013719:	b8 0b 00 00 00       	mov    eax,0xb
c001371e:	56                   	push   esi
c001371f:	53                   	push   ebx
c0013720:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013724:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013728:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001372f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013733:	80 f9 19             	cmp    cl,0x19
c0013736:	77 37                	ja     c001376f <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013738:	8b 0c 8d 20 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd15e0]
c001373f:	85 c9                	test   ecx,ecx
c0013741:	74 2c                	je     c001376f <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013743:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013749:	85 c9                	test   ecx,ecx
c001374b:	74 22                	je     c001376f <File::chfatattr(unsigned char, unsigned char)+0x57>
c001374d:	b8 06 00 00 00       	mov    eax,0x6
c0013752:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013756:	75 17                	jne    c001376f <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013758:	8b 39                	mov    edi,DWORD PTR [ecx]
c001375a:	89 f0                	mov    eax,esi
c001375c:	83 c2 0d             	add    edx,0xd
c001375f:	0f b6 f0             	movzx  esi,al
c0013762:	0f b6 db             	movzx  ebx,bl
c0013765:	56                   	push   esi
c0013766:	53                   	push   ebx
c0013767:	52                   	push   edx
c0013768:	51                   	push   ecx
c0013769:	ff 57 34             	call   DWORD PTR [edi+0x34]
c001376c:	83 c4 10             	add    esp,0x10
c001376f:	5b                   	pop    ebx
c0013770:	5e                   	pop    esi
c0013771:	5f                   	pop    edi
c0013772:	c3                   	ret    
c0013773:	90                   	nop

c0013774 <File::exists()>:
c0013774:	83 ec 0c             	sub    esp,0xc
c0013777:	31 c0                	xor    eax,eax
c0013779:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001377d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013784:	80 f9 19             	cmp    cl,0x19
c0013787:	77 24                	ja     c00137ad <File::exists()+0x39>
c0013789:	8b 0c 8d 20 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd15e0]
c0013790:	85 c9                	test   ecx,ecx
c0013792:	74 19                	je     c00137ad <File::exists()+0x39>
c0013794:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001379a:	85 c9                	test   ecx,ecx
c001379c:	74 0f                	je     c00137ad <File::exists()+0x39>
c001379e:	83 c2 0d             	add    edx,0xd
c00137a1:	50                   	push   eax
c00137a2:	50                   	push   eax
c00137a3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00137a5:	52                   	push   edx
c00137a6:	51                   	push   ecx
c00137a7:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00137aa:	83 c4 10             	add    esp,0x10
c00137ad:	83 c4 0c             	add    esp,0xc
c00137b0:	c3                   	ret    
c00137b1:	90                   	nop

c00137b2 <File::stat(unsigned long long*, bool*)>:
c00137b2:	56                   	push   esi
c00137b3:	53                   	push   ebx
c00137b4:	50                   	push   eax
c00137b5:	b8 0b 00 00 00       	mov    eax,0xb
c00137ba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00137be:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00137c2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00137c9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00137cd:	80 f9 19             	cmp    cl,0x19
c00137d0:	77 3d                	ja     c001380f <File::stat(unsigned long long*, bool*)+0x5d>
c00137d2:	8b 0c 8d 20 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd15e0]
c00137d9:	85 c9                	test   ecx,ecx
c00137db:	74 32                	je     c001380f <File::stat(unsigned long long*, bool*)+0x5d>
c00137dd:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00137e3:	85 c9                	test   ecx,ecx
c00137e5:	74 28                	je     c001380f <File::stat(unsigned long long*, bool*)+0x5d>
c00137e7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00137e9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00137ed:	74 13                	je     c0013802 <File::stat(unsigned long long*, bool*)+0x50>
c00137ef:	83 ec 04             	sub    esp,0x4
c00137f2:	56                   	push   esi
c00137f3:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00137f9:	51                   	push   ecx
c00137fa:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c00137fd:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0013800:	eb 0a                	jmp    c001380c <File::stat(unsigned long long*, bool*)+0x5a>
c0013802:	53                   	push   ebx
c0013803:	83 c2 0d             	add    edx,0xd
c0013806:	56                   	push   esi
c0013807:	52                   	push   edx
c0013808:	51                   	push   ecx
c0013809:	ff 50 30             	call   DWORD PTR [eax+0x30]
c001380c:	83 c4 10             	add    esp,0x10
c001380f:	5a                   	pop    edx
c0013810:	5b                   	pop    ebx
c0013811:	5e                   	pop    esi
c0013812:	c3                   	ret    

c0013813 <Fs::setcwd(Process*, char*)>:
c0013813:	55                   	push   ebp
c0013814:	57                   	push   edi
c0013815:	56                   	push   esi
c0013816:	53                   	push   ebx
c0013817:	81 ec 20 02 00 00    	sub    esp,0x220
c001381d:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0013824:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c001382a:	57                   	push   edi
c001382b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0013832:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0013836:	56                   	push   esi
c0013837:	e8 bc fa ff ff       	call   c00132f8 <Fs::standardiseFiles(char*, char const*, char const*)>
c001383c:	89 34 24             	mov    DWORD PTR [esp],esi
c001383f:	e8 50 cf fe ff       	call   c0000794 <strlen>
c0013844:	83 c4 10             	add    esp,0x10
c0013847:	83 f8 02             	cmp    eax,0x2
c001384a:	77 17                	ja     c0013863 <Fs::setcwd(Process*, char*)+0x50>
c001384c:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0013851:	83 e8 41             	sub    eax,0x41
c0013854:	83 f8 19             	cmp    eax,0x19
c0013857:	76 24                	jbe    c001387d <Fs::setcwd(Process*, char*)+0x6a>
c0013859:	b8 03 00 00 00       	mov    eax,0x3
c001385e:	e9 e0 00 00 00       	jmp    c0013943 <Fs::setcwd(Process*, char*)+0x130>
c0013863:	83 ec 0c             	sub    esp,0xc
c0013866:	56                   	push   esi
c0013867:	e8 28 cf fe ff       	call   c0000794 <strlen>
c001386c:	83 c4 10             	add    esp,0x10
c001386f:	83 f8 03             	cmp    eax,0x3
c0013872:	75 34                	jne    c00138a8 <Fs::setcwd(Process*, char*)+0x95>
c0013874:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0013879:	75 2d                	jne    c00138a8 <Fs::setcwd(Process*, char*)+0x95>
c001387b:	eb cf                	jmp    c001384c <Fs::setcwd(Process*, char*)+0x39>
c001387d:	8b 14 85 20 ea 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd15e0]
c0013884:	b8 05 00 00 00       	mov    eax,0x5
c0013889:	85 d2                	test   edx,edx
c001388b:	0f 84 b2 00 00 00    	je     c0013943 <Fs::setcwd(Process*, char*)+0x130>
c0013891:	b8 06 00 00 00       	mov    eax,0x6
c0013896:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c001389d:	0f 85 92 00 00 00    	jne    c0013935 <Fs::setcwd(Process*, char*)+0x122>
c00138a3:	e9 9b 00 00 00       	jmp    c0013943 <Fs::setcwd(Process*, char*)+0x130>
c00138a8:	83 ec 0c             	sub    esp,0xc
c00138ab:	68 14 01 00 00       	push   0x114
c00138b0:	e8 8b bf ff ff       	call   c000f840 <malloc>
c00138b5:	83 c4 0c             	add    esp,0xc
c00138b8:	89 c3                	mov    ebx,eax
c00138ba:	55                   	push   ebp
c00138bb:	56                   	push   esi
c00138bc:	50                   	push   eax
c00138bd:	e8 e0 fb ff ff       	call   c00134a2 <File::File(char const*, Process*)>
c00138c2:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00138c7:	83 c4 0c             	add    esp,0xc
c00138ca:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00138ce:	50                   	push   eax
c00138cf:	8d 44 24 10          	lea    eax,[esp+0x10]
c00138d3:	50                   	push   eax
c00138d4:	53                   	push   ebx
c00138d5:	e8 d8 fe ff ff       	call   c00137b2 <File::stat(unsigned long long*, bool*)>
c00138da:	83 c4 10             	add    esp,0x10
c00138dd:	83 f8 02             	cmp    eax,0x2
c00138e0:	74 04                	je     c00138e6 <Fs::setcwd(Process*, char*)+0xd3>
c00138e2:	85 c0                	test   eax,eax
c00138e4:	74 1c                	je     c0013902 <Fs::setcwd(Process*, char*)+0xef>
c00138e6:	b8 01 00 00 00       	mov    eax,0x1
c00138eb:	85 db                	test   ebx,ebx
c00138ed:	74 54                	je     c0013943 <Fs::setcwd(Process*, char*)+0x130>
c00138ef:	83 ec 0c             	sub    esp,0xc
c00138f2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00138f4:	53                   	push   ebx
c00138f5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00138f8:	83 c4 10             	add    esp,0x10
c00138fb:	b8 01 00 00 00       	mov    eax,0x1
c0013900:	eb 41                	jmp    c0013943 <Fs::setcwd(Process*, char*)+0x130>
c0013902:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0013907:	75 1c                	jne    c0013925 <Fs::setcwd(Process*, char*)+0x112>
c0013909:	b8 02 00 00 00       	mov    eax,0x2
c001390e:	85 db                	test   ebx,ebx
c0013910:	74 31                	je     c0013943 <Fs::setcwd(Process*, char*)+0x130>
c0013912:	83 ec 0c             	sub    esp,0xc
c0013915:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013917:	53                   	push   ebx
c0013918:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001391b:	83 c4 10             	add    esp,0x10
c001391e:	b8 02 00 00 00       	mov    eax,0x2
c0013923:	eb 1e                	jmp    c0013943 <Fs::setcwd(Process*, char*)+0x130>
c0013925:	85 db                	test   ebx,ebx
c0013927:	74 0c                	je     c0013935 <Fs::setcwd(Process*, char*)+0x122>
c0013929:	83 ec 0c             	sub    esp,0xc
c001392c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001392e:	53                   	push   ebx
c001392f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013932:	83 c4 10             	add    esp,0x10
c0013935:	50                   	push   eax
c0013936:	50                   	push   eax
c0013937:	56                   	push   esi
c0013938:	57                   	push   edi
c0013939:	e8 f6 ce fe ff       	call   c0000834 <strcpy>
c001393e:	83 c4 10             	add    esp,0x10
c0013941:	31 c0                	xor    eax,eax
c0013943:	81 c4 1c 02 00 00    	add    esp,0x21c
c0013949:	5b                   	pop    ebx
c001394a:	5e                   	pop    esi
c001394b:	5f                   	pop    edi
c001394c:	5d                   	pop    ebp
c001394d:	c3                   	ret    

c001394e <Directory::Directory(char const*, Process*)>:
c001394e:	83 ec 0c             	sub    esp,0xc
c0013951:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013955:	83 ec 08             	sub    esp,0x8
c0013958:	6a 00                	push   0x0
c001395a:	50                   	push   eax
c001395b:	e8 fc dd ff ff       	call   c001175c <UnixFile::UnixFile(int)>
c0013960:	83 c4 10             	add    esp,0x10
c0013963:	ba 50 ab 02 c0       	mov    edx,0xc002ab50
c0013968:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001396c:	89 10                	mov    DWORD PTR [eax],edx
c001396e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013972:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013978:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001397c:	83 c0 0d             	add    eax,0xd
c001397f:	83 ec 04             	sub    esp,0x4
c0013982:	52                   	push   edx
c0013983:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013987:	50                   	push   eax
c0013988:	e8 6b f9 ff ff       	call   c00132f8 <Fs::standardiseFiles(char*, char const*, char const*)>
c001398d:	83 c4 10             	add    esp,0x10
c0013990:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013994:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013997:	8d 50 bf             	lea    edx,[eax-0x41]
c001399a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001399e:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00139a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139a8:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00139ac:	90                   	nop
c00139ad:	83 c4 0c             	add    esp,0xc
c00139b0:	c3                   	ret    
c00139b1:	90                   	nop

c00139b2 <Directory::open()>:
c00139b2:	53                   	push   ebx
c00139b3:	b8 0b 00 00 00       	mov    eax,0xb
c00139b8:	83 ec 08             	sub    esp,0x8
c00139bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00139bf:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00139c6:	80 fa 19             	cmp    dl,0x19
c00139c9:	77 3d                	ja     c0013a08 <Directory::open()+0x56>
c00139cb:	8b 14 95 20 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd15e0]
c00139d2:	85 d2                	test   edx,edx
c00139d4:	74 32                	je     c0013a08 <Directory::open()+0x56>
c00139d6:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00139dc:	85 d2                	test   edx,edx
c00139de:	74 28                	je     c0013a08 <Directory::open()+0x56>
c00139e0:	b8 06 00 00 00       	mov    eax,0x6
c00139e5:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00139e9:	75 1d                	jne    c0013a08 <Directory::open()+0x56>
c00139eb:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00139f1:	50                   	push   eax
c00139f2:	8b 02                	mov    eax,DWORD PTR [edx]
c00139f4:	51                   	push   ecx
c00139f5:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00139f8:	51                   	push   ecx
c00139f9:	52                   	push   edx
c00139fa:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c00139fd:	83 c4 10             	add    esp,0x10
c0013a00:	85 c0                	test   eax,eax
c0013a02:	75 04                	jne    c0013a08 <Directory::open()+0x56>
c0013a04:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013a08:	83 c4 08             	add    esp,0x8
c0013a0b:	5b                   	pop    ebx
c0013a0c:	c3                   	ret    
c0013a0d:	90                   	nop

c0013a0e <Directory::close()>:
c0013a0e:	53                   	push   ebx
c0013a0f:	b8 0b 00 00 00       	mov    eax,0xb
c0013a14:	83 ec 08             	sub    esp,0x8
c0013a17:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013a1b:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013a22:	80 fa 19             	cmp    dl,0x19
c0013a25:	77 41                	ja     c0013a68 <Directory::close()+0x5a>
c0013a27:	8b 1c 95 20 ea 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd15e0]
c0013a2e:	85 db                	test   ebx,ebx
c0013a30:	74 36                	je     c0013a68 <Directory::close()+0x5a>
c0013a32:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013a39:	74 2d                	je     c0013a68 <Directory::close()+0x5a>
c0013a3b:	b8 05 00 00 00       	mov    eax,0x5
c0013a40:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013a44:	74 22                	je     c0013a68 <Directory::close()+0x5a>
c0013a46:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013a4a:	8b 04 95 20 ea 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd15e0]
c0013a51:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013a57:	53                   	push   ebx
c0013a58:	53                   	push   ebx
c0013a59:	8b 10                	mov    edx,DWORD PTR [eax]
c0013a5b:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013a61:	50                   	push   eax
c0013a62:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0013a65:	83 c4 10             	add    esp,0x10
c0013a68:	83 c4 08             	add    esp,0x8
c0013a6b:	5b                   	pop    ebx
c0013a6c:	c3                   	ret    
c0013a6d:	90                   	nop

c0013a6e <Directory::unlink()>:
c0013a6e:	83 ec 0c             	sub    esp,0xc
c0013a71:	b8 0b 00 00 00       	mov    eax,0xb
c0013a76:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a7a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013a81:	80 f9 19             	cmp    cl,0x19
c0013a84:	77 2f                	ja     c0013ab5 <Directory::unlink()+0x47>
c0013a86:	8b 0c 8d 20 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd15e0]
c0013a8d:	85 c9                	test   ecx,ecx
c0013a8f:	74 24                	je     c0013ab5 <Directory::unlink()+0x47>
c0013a91:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013a97:	85 c9                	test   ecx,ecx
c0013a99:	74 1a                	je     c0013ab5 <Directory::unlink()+0x47>
c0013a9b:	b8 06 00 00 00       	mov    eax,0x6
c0013aa0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013aa4:	75 0f                	jne    c0013ab5 <Directory::unlink()+0x47>
c0013aa6:	83 c2 0d             	add    edx,0xd
c0013aa9:	50                   	push   eax
c0013aaa:	50                   	push   eax
c0013aab:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013aad:	52                   	push   edx
c0013aae:	51                   	push   ecx
c0013aaf:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013ab2:	83 c4 10             	add    esp,0x10
c0013ab5:	83 c4 0c             	add    esp,0xc
c0013ab8:	c3                   	ret    
c0013ab9:	90                   	nop

c0013aba <Directory::rename(char const*)>:
c0013aba:	83 ec 0c             	sub    esp,0xc
c0013abd:	b8 0b 00 00 00       	mov    eax,0xb
c0013ac2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013ac6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013acd:	80 f9 19             	cmp    cl,0x19
c0013ad0:	77 32                	ja     c0013b04 <Directory::rename(char const*)+0x4a>
c0013ad2:	8b 0c 8d 20 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd15e0]
c0013ad9:	85 c9                	test   ecx,ecx
c0013adb:	74 27                	je     c0013b04 <Directory::rename(char const*)+0x4a>
c0013add:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013ae3:	85 c9                	test   ecx,ecx
c0013ae5:	74 1d                	je     c0013b04 <Directory::rename(char const*)+0x4a>
c0013ae7:	b8 06 00 00 00       	mov    eax,0x6
c0013aec:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013af0:	75 12                	jne    c0013b04 <Directory::rename(char const*)+0x4a>
c0013af2:	83 c2 0d             	add    edx,0xd
c0013af5:	50                   	push   eax
c0013af6:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013af8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013afc:	52                   	push   edx
c0013afd:	51                   	push   ecx
c0013afe:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013b01:	83 c4 10             	add    esp,0x10
c0013b04:	83 c4 0c             	add    esp,0xc
c0013b07:	c3                   	ret    

c0013b08 <Directory::exists()>:
c0013b08:	83 ec 0c             	sub    esp,0xc
c0013b0b:	31 c0                	xor    eax,eax
c0013b0d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b11:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013b18:	80 f9 19             	cmp    cl,0x19
c0013b1b:	77 24                	ja     c0013b41 <Directory::exists()+0x39>
c0013b1d:	8b 0c 8d 20 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd15e0]
c0013b24:	85 c9                	test   ecx,ecx
c0013b26:	74 19                	je     c0013b41 <Directory::exists()+0x39>
c0013b28:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013b2e:	85 c9                	test   ecx,ecx
c0013b30:	74 0f                	je     c0013b41 <Directory::exists()+0x39>
c0013b32:	83 c2 0d             	add    edx,0xd
c0013b35:	50                   	push   eax
c0013b36:	50                   	push   eax
c0013b37:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b39:	52                   	push   edx
c0013b3a:	51                   	push   ecx
c0013b3b:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013b3e:	83 c4 10             	add    esp,0x10
c0013b41:	83 c4 0c             	add    esp,0xc
c0013b44:	c3                   	ret    
c0013b45:	90                   	nop

c0013b46 <Directory::read(dirent*)>:
c0013b46:	83 ec 1c             	sub    esp,0x1c
c0013b49:	b8 0b 00 00 00       	mov    eax,0xb
c0013b4e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013b52:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013b59:	80 fa 19             	cmp    dl,0x19
c0013b5c:	77 30                	ja     c0013b8e <Directory::read(dirent*)+0x48>
c0013b5e:	8b 14 95 20 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd15e0]
c0013b65:	85 d2                	test   edx,edx
c0013b67:	74 25                	je     c0013b8e <Directory::read(dirent*)+0x48>
c0013b69:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013b70:	74 1c                	je     c0013b8e <Directory::read(dirent*)+0x48>
c0013b72:	83 ec 0c             	sub    esp,0xc
c0013b75:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b77:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013b7b:	52                   	push   edx
c0013b7c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013b80:	6a 00                	push   0x0
c0013b82:	68 10 01 00 00       	push   0x110
c0013b87:	51                   	push   ecx
c0013b88:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013b8b:	83 c4 20             	add    esp,0x20
c0013b8e:	83 c4 1c             	add    esp,0x1c
c0013b91:	c3                   	ret    

c0013b92 <Directory::create()>:
c0013b92:	83 ec 0c             	sub    esp,0xc
c0013b95:	b8 0b 00 00 00       	mov    eax,0xb
c0013b9a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b9e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013ba5:	80 f9 19             	cmp    cl,0x19
c0013ba8:	77 2f                	ja     c0013bd9 <Directory::create()+0x47>
c0013baa:	8b 0c 8d 20 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd15e0]
c0013bb1:	85 c9                	test   ecx,ecx
c0013bb3:	74 24                	je     c0013bd9 <Directory::create()+0x47>
c0013bb5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013bbb:	85 c9                	test   ecx,ecx
c0013bbd:	74 1a                	je     c0013bd9 <Directory::create()+0x47>
c0013bbf:	b8 06 00 00 00       	mov    eax,0x6
c0013bc4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013bc8:	75 0f                	jne    c0013bd9 <Directory::create()+0x47>
c0013bca:	83 c2 0d             	add    edx,0xd
c0013bcd:	50                   	push   eax
c0013bce:	50                   	push   eax
c0013bcf:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013bd1:	52                   	push   edx
c0013bd2:	51                   	push   ecx
c0013bd3:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013bd6:	83 c4 10             	add    esp,0x10
c0013bd9:	83 c4 0c             	add    esp,0xc
c0013bdc:	c3                   	ret    
c0013bdd:	90                   	nop

c0013bde <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013bde:	b8 0a 00 00 00       	mov    eax,0xa
c0013be3:	c3                   	ret    

c0013be4 <Bus::Bus(char const*)>:
c0013be4:	83 ec 0c             	sub    esp,0xc
c0013be7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013beb:	83 ec 08             	sub    esp,0x8
c0013bee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bf2:	50                   	push   eax
c0013bf3:	e8 68 09 00 00       	call   c0014560 <Device::Device(char const*)>
c0013bf8:	83 c4 10             	add    esp,0x10
c0013bfb:	ba 6c ab 02 c0       	mov    edx,0xc002ab6c
c0013c00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c04:	89 10                	mov    DWORD PTR [eax],edx
c0013c06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c0a:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013c14:	90                   	nop
c0013c15:	83 c4 0c             	add    esp,0xc
c0013c18:	c3                   	ret    
c0013c19:	90                   	nop

c0013c1a <Bus::~Bus()>:
c0013c1a:	83 ec 0c             	sub    esp,0xc
c0013c1d:	ba 6c ab 02 c0       	mov    edx,0xc002ab6c
c0013c22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c26:	89 10                	mov    DWORD PTR [eax],edx
c0013c28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c2c:	83 ec 0c             	sub    esp,0xc
c0013c2f:	50                   	push   eax
c0013c30:	e8 0d 06 00 00       	call   c0014242 <Device::~Device()>
c0013c35:	83 c4 10             	add    esp,0x10
c0013c38:	90                   	nop
c0013c39:	83 c4 0c             	add    esp,0xc
c0013c3c:	c3                   	ret    
c0013c3d:	90                   	nop

c0013c3e <Bus::~Bus()>:
c0013c3e:	83 ec 0c             	sub    esp,0xc
c0013c41:	83 ec 0c             	sub    esp,0xc
c0013c44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c48:	e8 cd ff ff ff       	call   c0013c1a <Bus::~Bus()>
c0013c4d:	83 c4 10             	add    esp,0x10
c0013c50:	83 ec 08             	sub    esp,0x8
c0013c53:	68 58 01 00 00       	push   0x158
c0013c58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c5c:	e8 09 f2 ff ff       	call   c0012e6a <operator delete(void*, unsigned long)>
c0013c61:	83 c4 10             	add    esp,0x10
c0013c64:	83 c4 0c             	add    esp,0xc
c0013c67:	c3                   	ret    

c0013c68 <Buzzer::Buzzer(char const*)>:
c0013c68:	83 ec 0c             	sub    esp,0xc
c0013c6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c6f:	83 ec 08             	sub    esp,0x8
c0013c72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c76:	50                   	push   eax
c0013c77:	e8 e4 08 00 00       	call   c0014560 <Device::Device(char const*)>
c0013c7c:	83 c4 10             	add    esp,0x10
c0013c7f:	ba 98 ab 02 c0       	mov    edx,0xc002ab98
c0013c84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c88:	89 10                	mov    DWORD PTR [eax],edx
c0013c8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c8e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013c98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c9c:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013ca6:	90                   	nop
c0013ca7:	83 c4 0c             	add    esp,0xc
c0013caa:	c3                   	ret    
c0013cab:	90                   	nop

c0013cac <Buzzer::~Buzzer()>:
c0013cac:	83 ec 0c             	sub    esp,0xc
c0013caf:	ba 98 ab 02 c0       	mov    edx,0xc002ab98
c0013cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cb8:	89 10                	mov    DWORD PTR [eax],edx
c0013cba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cbe:	83 ec 0c             	sub    esp,0xc
c0013cc1:	50                   	push   eax
c0013cc2:	e8 7b 05 00 00       	call   c0014242 <Device::~Device()>
c0013cc7:	83 c4 10             	add    esp,0x10
c0013cca:	90                   	nop
c0013ccb:	83 c4 0c             	add    esp,0xc
c0013cce:	c3                   	ret    
c0013ccf:	90                   	nop

c0013cd0 <Buzzer::~Buzzer()>:
c0013cd0:	83 ec 0c             	sub    esp,0xc
c0013cd3:	83 ec 0c             	sub    esp,0xc
c0013cd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013cda:	e8 cd ff ff ff       	call   c0013cac <Buzzer::~Buzzer()>
c0013cdf:	83 c4 10             	add    esp,0x10
c0013ce2:	83 ec 08             	sub    esp,0x8
c0013ce5:	68 5c 01 00 00       	push   0x15c
c0013cea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013cee:	e8 77 f1 ff ff       	call   c0012e6a <operator delete(void*, unsigned long)>
c0013cf3:	83 c4 10             	add    esp,0x10
c0013cf6:	83 c4 0c             	add    esp,0xc
c0013cf9:	c3                   	ret    

c0013cfa <Buzzer::stop()>:
c0013cfa:	83 ec 14             	sub    esp,0x14
c0013cfd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013d01:	8b 10                	mov    edx,DWORD PTR [eax]
c0013d03:	6a 00                	push   0x0
c0013d05:	50                   	push   eax
c0013d06:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013d09:	83 c4 1c             	add    esp,0x1c
c0013d0c:	c3                   	ret    

c0013d0d <beepThread(void*)>:
c0013d0d:	53                   	push   ebx
c0013d0e:	83 ec 08             	sub    esp,0x8
c0013d11:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013d15:	e8 be a0 00 00       	call   c001ddd8 <unlockScheduler()>
c0013d1a:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013d1f:	52                   	push   edx
c0013d20:	52                   	push   edx
c0013d21:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013d27:	52                   	push   edx
c0013d28:	50                   	push   eax
c0013d29:	e8 f8 a5 00 00       	call   c001e326 <nanoSleep(unsigned long long)>
c0013d2e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013d31:	e8 c4 ff ff ff       	call   c0013cfa <Buzzer::stop()>
c0013d36:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013d3e:	83 c4 18             	add    esp,0x18
c0013d41:	5b                   	pop    ebx
c0013d42:	e9 25 a5 00 00       	jmp    c001e26c <blockTask(TaskState)>
c0013d47:	90                   	nop

c0013d48 <Buzzer::beep(int, int, bool)>:
c0013d48:	57                   	push   edi
c0013d49:	56                   	push   esi
c0013d4a:	53                   	push   ebx
c0013d4b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013d4f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013d53:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013d57:	52                   	push   edx
c0013d58:	52                   	push   edx
c0013d59:	8b 06                	mov    eax,DWORD PTR [esi]
c0013d5b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d5f:	56                   	push   esi
c0013d60:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013d63:	83 c4 10             	add    esp,0x10
c0013d66:	89 f8                	mov    eax,edi
c0013d68:	84 c0                	test   al,al
c0013d6a:	74 1f                	je     c0013d8b <Buzzer::beep(int, int, bool)+0x43>
c0013d6c:	50                   	push   eax
c0013d6d:	50                   	push   eax
c0013d6e:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013d74:	99                   	cdq    
c0013d75:	52                   	push   edx
c0013d76:	50                   	push   eax
c0013d77:	e8 aa a5 00 00       	call   c001e326 <nanoSleep(unsigned long long)>
c0013d7c:	83 c4 10             	add    esp,0x10
c0013d7f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013d83:	5b                   	pop    ebx
c0013d84:	5e                   	pop    esi
c0013d85:	5f                   	pop    edi
c0013d86:	e9 6f ff ff ff       	jmp    c0013cfa <Buzzer::stop()>
c0013d8b:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013d91:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c0013d96:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013d9e:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013da2:	c7 44 24 14 0d 3d 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013d0d
c0013daa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013dae:	5b                   	pop    ebx
c0013daf:	5e                   	pop    esi
c0013db0:	5f                   	pop    edi
c0013db1:	e9 52 a1 00 00       	jmp    c001df08 <Process::createThread(void (*)(void*), void*, int)>

c0013db6 <User::loadClockSettings(int)>:
c0013db6:	53                   	push   ebx
c0013db7:	83 ec 14             	sub    esp,0x14
c0013dba:	68 14 01 00 00       	push   0x114
c0013dbf:	e8 7c ba ff ff       	call   c000f840 <malloc>
c0013dc4:	83 c4 0c             	add    esp,0xc
c0013dc7:	89 c3                	mov    ebx,eax
c0013dc9:	ff 35 74 19 03 c0    	push   DWORD PTR ds:0xc0031974
c0013dcf:	68 c0 ab 02 c0       	push   0xc002abc0
c0013dd4:	50                   	push   eax
c0013dd5:	e8 c8 f6 ff ff       	call   c00134a2 <File::File(char const*, Process*)>
c0013dda:	58                   	pop    eax
c0013ddb:	5a                   	pop    edx
c0013ddc:	6a 01                	push   0x1
c0013dde:	53                   	push   ebx
c0013ddf:	e8 22 f7 ff ff       	call   c0013506 <File::open(FileOpenMode)>
c0013de4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013de7:	e8 78 f7 ff ff       	call   c0013564 <File::close()>
c0013dec:	83 c4 10             	add    esp,0x10
c0013def:	85 db                	test   ebx,ebx
c0013df1:	74 0f                	je     c0013e02 <User::loadClockSettings(int)+0x4c>
c0013df3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013df5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013df9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013dfc:	83 c4 08             	add    esp,0x8
c0013dff:	5b                   	pop    ebx
c0013e00:	ff e0                	jmp    eax
c0013e02:	83 c4 08             	add    esp,0x8
c0013e05:	5b                   	pop    ebx
c0013e06:	c3                   	ret    
c0013e07:	90                   	nop

c0013e08 <Clock::Clock(char const*)>:
c0013e08:	83 ec 0c             	sub    esp,0xc
c0013e0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e0f:	83 ec 08             	sub    esp,0x8
c0013e12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e16:	50                   	push   eax
c0013e17:	e8 44 07 00 00       	call   c0014560 <Device::Device(char const*)>
c0013e1c:	83 c4 10             	add    esp,0x10
c0013e1f:	ba e8 ab 02 c0       	mov    edx,0xc002abe8
c0013e24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e28:	89 10                	mov    DWORD PTR [eax],edx
c0013e2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e2e:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013e38:	90                   	nop
c0013e39:	83 c4 0c             	add    esp,0xc
c0013e3c:	c3                   	ret    
c0013e3d:	90                   	nop

c0013e3e <Clock::~Clock()>:
c0013e3e:	83 ec 0c             	sub    esp,0xc
c0013e41:	ba e8 ab 02 c0       	mov    edx,0xc002abe8
c0013e46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e4a:	89 10                	mov    DWORD PTR [eax],edx
c0013e4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e50:	83 ec 0c             	sub    esp,0xc
c0013e53:	50                   	push   eax
c0013e54:	e8 e9 03 00 00       	call   c0014242 <Device::~Device()>
c0013e59:	83 c4 10             	add    esp,0x10
c0013e5c:	90                   	nop
c0013e5d:	83 c4 0c             	add    esp,0xc
c0013e60:	c3                   	ret    
c0013e61:	90                   	nop

c0013e62 <Clock::~Clock()>:
c0013e62:	83 ec 0c             	sub    esp,0xc
c0013e65:	83 ec 0c             	sub    esp,0xc
c0013e68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e6c:	e8 cd ff ff ff       	call   c0013e3e <Clock::~Clock()>
c0013e71:	83 c4 10             	add    esp,0x10
c0013e74:	83 ec 08             	sub    esp,0x8
c0013e77:	68 58 01 00 00       	push   0x158
c0013e7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e80:	e8 e5 ef ff ff       	call   c0012e6a <operator delete(void*, unsigned long)>
c0013e85:	83 c4 10             	add    esp,0x10
c0013e88:	83 c4 0c             	add    esp,0xc
c0013e8b:	c3                   	ret    

c0013e8c <Clock::timeInSecondsLocal()>:
c0013e8c:	53                   	push   ebx
c0013e8d:	83 ec 14             	sub    esp,0x14
c0013e90:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013e94:	8b 10                	mov    edx,DWORD PTR [eax]
c0013e96:	50                   	push   eax
c0013e97:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013e9a:	0f b6 0d 98 e5 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e598
c0013ea1:	03 0d 9c e5 02 c0    	add    ecx,DWORD PTR ds:0xc002e59c
c0013ea7:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013ead:	89 cb                	mov    ebx,ecx
c0013eaf:	c1 fb 1f             	sar    ebx,0x1f
c0013eb2:	01 c8                	add    eax,ecx
c0013eb4:	11 da                	adc    edx,ebx
c0013eb6:	83 c4 10             	add    esp,0x10
c0013eb9:	31 c9                	xor    ecx,ecx
c0013ebb:	80 3d 99 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e599,0x0
c0013ec2:	74 05                	je     c0013ec9 <Clock::timeInSecondsLocal()+0x3d>
c0013ec4:	b9 08 07 00 00       	mov    ecx,0x708
c0013ec9:	31 db                	xor    ebx,ebx
c0013ecb:	01 c8                	add    eax,ecx
c0013ecd:	11 da                	adc    edx,ebx
c0013ecf:	83 c4 08             	add    esp,0x8
c0013ed2:	5b                   	pop    ebx
c0013ed3:	c3                   	ret    

c0013ed4 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013ed4:	57                   	push   edi
c0013ed5:	56                   	push   esi
c0013ed6:	53                   	push   ebx
c0013ed7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013edb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013edf:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013ee1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013ee5:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013ee8:	0f b6 05 98 e5 02 c0 	movzx  eax,BYTE PTR ds:0xc002e598
c0013eef:	03 05 9c e5 02 c0    	add    eax,DWORD PTR ds:0xc002e59c
c0013ef5:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013efb:	99                   	cdq    
c0013efc:	29 c6                	sub    esi,eax
c0013efe:	19 d7                	sbb    edi,edx
c0013f00:	89 f0                	mov    eax,esi
c0013f02:	89 fa                	mov    edx,edi
c0013f04:	31 f6                	xor    esi,esi
c0013f06:	80 3d 99 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e599,0x0
c0013f0d:	74 05                	je     c0013f14 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013f0f:	be 08 07 00 00       	mov    esi,0x708
c0013f14:	31 ff                	xor    edi,edi
c0013f16:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013f1a:	29 f0                	sub    eax,esi
c0013f1c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013f20:	19 fa                	sbb    edx,edi
c0013f22:	89 d8                	mov    eax,ebx
c0013f24:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013f28:	5b                   	pop    ebx
c0013f29:	5e                   	pop    esi
c0013f2a:	5f                   	pop    edi
c0013f2b:	ff e0                	jmp    eax

c0013f2d <datetimeToSeconds(datetime_t)>:
c0013f2d:	55                   	push   ebp
c0013f2e:	57                   	push   edi
c0013f2f:	56                   	push   esi
c0013f30:	53                   	push   ebx
c0013f31:	83 ec 14             	sub    esp,0x14
c0013f34:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013f38:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013f3c:	89 d3                	mov    ebx,edx
c0013f3e:	0f b6 c6             	movzx  eax,dh
c0013f41:	c1 eb 10             	shr    ebx,0x10
c0013f44:	48                   	dec    eax
c0013f45:	66 81 eb 6c 07       	sub    bx,0x76c
c0013f4a:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013f4e:	0f b6 f5             	movzx  esi,ch
c0013f51:	89 cf                	mov    edi,ecx
c0013f53:	6b f6 3c             	imul   esi,esi,0x3c
c0013f56:	c1 ef 10             	shr    edi,0x10
c0013f59:	0f b6 c9             	movzx  ecx,cl
c0013f5c:	89 f8                	mov    eax,edi
c0013f5e:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013f64:	0f b6 f8             	movzx  edi,al
c0013f67:	0f b6 d2             	movzx  edx,dl
c0013f6a:	01 fe                	add    esi,edi
c0013f6c:	01 f1                	add    ecx,esi
c0013f6e:	0f b7 f3             	movzx  esi,bx
c0013f71:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013f75:	c1 f9 1f             	sar    ecx,0x1f
c0013f78:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013f7d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013f81:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013f86:	8b 0c 8d 20 ac 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd53e0]
c0013f8d:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013f91:	76 29                	jbe    c0013fbc <datetimeToSeconds(datetime_t)+0x8f>
c0013f93:	f6 c3 03             	test   bl,0x3
c0013f96:	75 24                	jne    c0013fbc <datetimeToSeconds(datetime_t)+0x8f>
c0013f98:	31 d2                	xor    edx,edx
c0013f9a:	bf 64 00 00 00       	mov    edi,0x64
c0013f9f:	89 d8                	mov    eax,ebx
c0013fa1:	66 f7 f7             	div    di
c0013fa4:	66 85 d2             	test   dx,dx
c0013fa7:	75 12                	jne    c0013fbb <datetimeToSeconds(datetime_t)+0x8e>
c0013fa9:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013faf:	bf 90 01 00 00       	mov    edi,0x190
c0013fb4:	99                   	cdq    
c0013fb5:	f7 ff                	idiv   edi
c0013fb7:	85 d2                	test   edx,edx
c0013fb9:	75 01                	jne    c0013fbc <datetimeToSeconds(datetime_t)+0x8f>
c0013fbb:	41                   	inc    ecx
c0013fbc:	66 83 fb 46          	cmp    bx,0x46
c0013fc0:	76 45                	jbe    c0014007 <datetimeToSeconds(datetime_t)+0xda>
c0013fc2:	bb 46 00 00 00       	mov    ebx,0x46
c0013fc7:	bf 64 00 00 00       	mov    edi,0x64
c0013fcc:	bd 90 01 00 00       	mov    ebp,0x190
c0013fd1:	b8 6d 01 00 00       	mov    eax,0x16d
c0013fd6:	f6 c3 03             	test   bl,0x3
c0013fd9:	75 23                	jne    c0013ffe <datetimeToSeconds(datetime_t)+0xd1>
c0013fdb:	89 d8                	mov    eax,ebx
c0013fdd:	99                   	cdq    
c0013fde:	f7 ff                	idiv   edi
c0013fe0:	b8 6e 01 00 00       	mov    eax,0x16e
c0013fe5:	85 d2                	test   edx,edx
c0013fe7:	75 15                	jne    c0013ffe <datetimeToSeconds(datetime_t)+0xd1>
c0013fe9:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013fef:	99                   	cdq    
c0013ff0:	f7 fd                	idiv   ebp
c0013ff2:	83 fa 01             	cmp    edx,0x1
c0013ff5:	19 c0                	sbb    eax,eax
c0013ff7:	f7 d0                	not    eax
c0013ff9:	05 6e 01 00 00       	add    eax,0x16e
c0013ffe:	01 c1                	add    ecx,eax
c0014000:	43                   	inc    ebx
c0014001:	39 f3                	cmp    ebx,esi
c0014003:	7c cc                	jl     c0013fd1 <datetimeToSeconds(datetime_t)+0xa4>
c0014005:	eb 35                	jmp    c001403c <datetimeToSeconds(datetime_t)+0x10f>
c0014007:	74 33                	je     c001403c <datetimeToSeconds(datetime_t)+0x10f>
c0014009:	b8 45 00 00 00       	mov    eax,0x45
c001400e:	89 c2                	mov    edx,eax
c0014010:	83 e2 03             	and    edx,0x3
c0014013:	39 f0                	cmp    eax,esi
c0014015:	7e 0f                	jle    c0014026 <datetimeToSeconds(datetime_t)+0xf9>
c0014017:	83 fa 01             	cmp    edx,0x1
c001401a:	19 d2                	sbb    edx,edx
c001401c:	48                   	dec    eax
c001401d:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0014024:	eb e8                	jmp    c001400e <datetimeToSeconds(datetime_t)+0xe1>
c0014026:	b8 6d 01 00 00       	mov    eax,0x16d
c001402b:	85 d2                	test   edx,edx
c001402d:	75 0b                	jne    c001403a <datetimeToSeconds(datetime_t)+0x10d>
c001402f:	66 83 fb 01          	cmp    bx,0x1
c0014033:	19 c0                	sbb    eax,eax
c0014035:	05 6e 01 00 00       	add    eax,0x16e
c001403a:	29 c1                	sub    ecx,eax
c001403c:	b8 80 51 01 00       	mov    eax,0x15180
c0014041:	f7 e9                	imul   ecx
c0014043:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0014047:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c001404b:	83 c4 14             	add    esp,0x14
c001404e:	5b                   	pop    ebx
c001404f:	5e                   	pop    esi
c0014050:	5f                   	pop    edi
c0014051:	5d                   	pop    ebp
c0014052:	c3                   	ret    
c0014053:	90                   	nop

c0014054 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0014054:	57                   	push   edi
c0014055:	56                   	push   esi
c0014056:	53                   	push   ebx
c0014057:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001405b:	8b 06                	mov    eax,DWORD PTR [esi]
c001405d:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0014060:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014064:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014068:	e8 c0 fe ff ff       	call   c0013f2d <datetimeToSeconds(datetime_t)>
c001406d:	59                   	pop    ecx
c001406e:	0f b6 0d 98 e5 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e598
c0014075:	5b                   	pop    ebx
c0014076:	03 0d 9c e5 02 c0    	add    ecx,DWORD PTR ds:0xc002e59c
c001407c:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0014082:	89 cb                	mov    ebx,ecx
c0014084:	c1 fb 1f             	sar    ebx,0x1f
c0014087:	29 c8                	sub    eax,ecx
c0014089:	19 da                	sbb    edx,ebx
c001408b:	31 c9                	xor    ecx,ecx
c001408d:	80 3d 99 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e599,0x0
c0014094:	74 05                	je     c001409b <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0014096:	b9 08 07 00 00       	mov    ecx,0x708
c001409b:	31 db                	xor    ebx,ebx
c001409d:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00140a1:	29 c8                	sub    eax,ecx
c00140a3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00140a7:	19 da                	sbb    edx,ebx
c00140a9:	89 f8                	mov    eax,edi
c00140ab:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00140af:	5b                   	pop    ebx
c00140b0:	5e                   	pop    esi
c00140b1:	5f                   	pop    edi
c00140b2:	ff e0                	jmp    eax

c00140b4 <secondsToDatetime(unsigned long long)>:
c00140b4:	55                   	push   ebp
c00140b5:	57                   	push   edi
c00140b6:	56                   	push   esi
c00140b7:	53                   	push   ebx
c00140b8:	83 ec 1c             	sub    esp,0x1c
c00140bb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00140bf:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00140c3:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00140c7:	6a 00                	push   0x0
c00140c9:	68 80 51 01 00       	push   0x15180
c00140ce:	55                   	push   ebp
c00140cf:	57                   	push   edi
c00140d0:	e8 d7 28 01 00       	call   c00269ac <__udivdi3>
c00140d5:	83 c4 10             	add    esp,0x10
c00140d8:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c00140de:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00140e2:	6a 00                	push   0x0
c00140e4:	68 80 51 01 00       	push   0x15180
c00140e9:	55                   	push   ebp
c00140ea:	57                   	push   edi
c00140eb:	bf 10 0e 00 00       	mov    edi,0xe10
c00140f0:	e8 b7 29 01 00       	call   c0026aac <__umoddi3>
c00140f5:	83 c4 10             	add    esp,0x10
c00140f8:	99                   	cdq    
c00140f9:	f7 ff                	idiv   edi
c00140fb:	bf 3c 00 00 00       	mov    edi,0x3c
c0014100:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0014103:	89 d0                	mov    eax,edx
c0014105:	99                   	cdq    
c0014106:	f7 ff                	idiv   edi
c0014108:	85 db                	test   ebx,ebx
c001410a:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c001410d:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0014110:	79 11                	jns    c0014123 <secondsToDatetime(unsigned long long)+0x6f>
c0014112:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014116:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c001411c:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0014121:	eb 07                	jmp    c001412a <secondsToDatetime(unsigned long long)+0x76>
c0014123:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0014128:	89 d8                	mov    eax,ebx
c001412a:	bf b4 05 00 00       	mov    edi,0x5b4
c001412f:	99                   	cdq    
c0014130:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0014135:	f7 f9                	idiv   ecx
c0014137:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c001413c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014140:	31 d2                	xor    edx,edx
c0014142:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c001414a:	01 c3                	add    ebx,eax
c001414c:	89 d8                	mov    eax,ebx
c001414e:	f7 f1                	div    ecx
c0014150:	31 d2                	xor    edx,edx
c0014152:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0014155:	89 d8                	mov    eax,ebx
c0014157:	f7 f7                	div    edi
c0014159:	31 d2                	xor    edx,edx
c001415b:	29 c1                	sub    ecx,eax
c001415d:	89 d8                	mov    eax,ebx
c001415f:	f7 f5                	div    ebp
c0014161:	bd 6d 01 00 00       	mov    ebp,0x16d
c0014166:	29 c1                	sub    ecx,eax
c0014168:	31 d2                	xor    edx,edx
c001416a:	89 c8                	mov    eax,ecx
c001416c:	f7 f5                	div    ebp
c001416e:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0014173:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014177:	31 d2                	xor    edx,edx
c0014179:	89 c8                	mov    eax,ecx
c001417b:	f7 f5                	div    ebp
c001417d:	31 d2                	xor    edx,edx
c001417f:	01 c3                	add    ebx,eax
c0014181:	89 c8                	mov    eax,ecx
c0014183:	f7 f7                	div    edi
c0014185:	bf 99 00 00 00       	mov    edi,0x99
c001418a:	29 c3                	sub    ebx,eax
c001418c:	31 d2                	xor    edx,edx
c001418e:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0014196:	29 c3                	sub    ebx,eax
c0014198:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001419b:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c001419e:	bb 05 00 00 00       	mov    ebx,0x5
c00141a3:	83 c1 02             	add    ecx,0x2
c00141a6:	89 c8                	mov    eax,ecx
c00141a8:	f7 f7                	div    edi
c00141aa:	31 d2                	xor    edx,edx
c00141ac:	89 c7                	mov    edi,eax
c00141ae:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c00141b4:	83 c0 02             	add    eax,0x2
c00141b7:	f7 f3                	div    ebx
c00141b9:	89 eb                	mov    ebx,ebp
c00141bb:	29 c3                	sub    ebx,eax
c00141bd:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c00141c3:	88 1e                	mov    BYTE PTR [esi],bl
c00141c5:	19 c0                	sbb    eax,eax
c00141c7:	31 d2                	xor    edx,edx
c00141c9:	83 e0 0c             	and    eax,0xc
c00141cc:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c00141d0:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c00141d8:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00141dc:	83 f9 01             	cmp    ecx,0x1
c00141df:	0f 96 c2             	setbe  dl
c00141e2:	41                   	inc    ecx
c00141e3:	01 d0                	add    eax,edx
c00141e5:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c00141e8:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c00141ec:	83 c4 1c             	add    esp,0x1c
c00141ef:	89 f0                	mov    eax,esi
c00141f1:	5b                   	pop    ebx
c00141f2:	5e                   	pop    esi
c00141f3:	5f                   	pop    edi
c00141f4:	5d                   	pop    ebp
c00141f5:	c2 04 00             	ret    0x4

c00141f8 <Clock::timeInDatetimeLocal()>:
c00141f8:	53                   	push   ebx
c00141f9:	83 ec 14             	sub    esp,0x14
c00141fc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014200:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014204:	e8 83 fc ff ff       	call   c0013e8c <Clock::timeInSecondsLocal()>
c0014209:	83 c4 0c             	add    esp,0xc
c001420c:	52                   	push   edx
c001420d:	50                   	push   eax
c001420e:	53                   	push   ebx
c001420f:	e8 a0 fe ff ff       	call   c00140b4 <secondsToDatetime(unsigned long long)>
c0014214:	89 d8                	mov    eax,ebx
c0014216:	83 c4 14             	add    esp,0x14
c0014219:	5b                   	pop    ebx
c001421a:	c2 04 00             	ret    0x4
c001421d:	90                   	nop

c001421e <Device::hibernate()>:
c001421e:	c3                   	ret    
c001421f:	90                   	nop

c0014220 <Device::wake()>:
c0014220:	c3                   	ret    
c0014221:	90                   	nop

c0014222 <Device::detect()>:
c0014222:	c3                   	ret    
c0014223:	90                   	nop

c0014224 <Device::disableLegacy()>:
c0014224:	c3                   	ret    
c0014225:	90                   	nop

c0014226 <Device::powerSaving(PowerSavingLevel)>:
c0014226:	c3                   	ret    
c0014227:	90                   	nop

c0014228 <DriverlessDevice::close(int, int, void*)>:
c0014228:	31 c0                	xor    eax,eax
c001422a:	c3                   	ret    
c001422b:	90                   	nop

c001422c <DriverlessDevice::detect()>:
c001422c:	c3                   	ret    
c001422d:	90                   	nop

c001422e <DriverlessDevice::open(int, int, void*)>:
c001422e:	83 ec 18             	sub    esp,0x18
c0014231:	68 50 ac 02 c0       	push   0xc002ac50
c0014236:	e8 c0 63 00 00       	call   c001a5fb <Krnl::panic(char const*)>
c001423b:	83 c8 ff             	or     eax,0xffffffff
c001423e:	83 c4 1c             	add    esp,0x1c
c0014241:	c3                   	ret    

c0014242 <Device::~Device()>:
c0014242:	ba 78 ac 02 c0       	mov    edx,0xc002ac78
c0014247:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001424b:	89 10                	mov    DWORD PTR [eax],edx
c001424d:	90                   	nop
c001424e:	c3                   	ret    
c001424f:	90                   	nop

c0014250 <Device::~Device()>:
c0014250:	83 ec 0c             	sub    esp,0xc
c0014253:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014257:	e8 e6 ff ff ff       	call   c0014242 <Device::~Device()>
c001425c:	83 c4 04             	add    esp,0x4
c001425f:	83 ec 08             	sub    esp,0x8
c0014262:	68 58 01 00 00       	push   0x158
c0014267:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001426b:	e8 fa eb ff ff       	call   c0012e6a <operator delete(void*, unsigned long)>
c0014270:	83 c4 10             	add    esp,0x10
c0014273:	83 c4 0c             	add    esp,0xc
c0014276:	c3                   	ret    
c0014277:	90                   	nop

c0014278 <Device::findAndLoadDriver()>:
c0014278:	c3                   	ret    
c0014279:	90                   	nop

c001427a <Device::preOpenPCI(PCIDeviceInfo)>:
c001427a:	57                   	push   edi
c001427b:	b9 09 00 00 00       	mov    ecx,0x9
c0014280:	56                   	push   esi
c0014281:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0014285:	8d 74 24 10          	lea    esi,[esp+0x10]
c0014289:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0014293:	81 c7 18 01 00 00    	add    edi,0x118
c0014299:	fc                   	cld    
c001429a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001429c:	5e                   	pop    esi
c001429d:	5f                   	pop    edi
c001429e:	c3                   	ret    
c001429f:	90                   	nop

c00142a0 <Device::preOpenACPI(void*, char*, char*)>:
c00142a0:	56                   	push   esi
c00142a1:	53                   	push   ebx
c00142a2:	83 ec 08             	sub    esp,0x8
c00142a5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00142a9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00142ad:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c00142b7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00142bb:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c00142c1:	6a 1e                	push   0x1e
c00142c3:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c00142c9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00142cd:	81 c3 3a 01 00 00    	add    ebx,0x13a
c00142d3:	50                   	push   eax
c00142d4:	e8 6b c4 fe ff       	call   c0000744 <memcpy>
c00142d9:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00142dd:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00142e1:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c00142e9:	83 c4 14             	add    esp,0x14
c00142ec:	5b                   	pop    ebx
c00142ed:	5e                   	pop    esi
c00142ee:	e9 51 c4 fe ff       	jmp    c0000744 <memcpy>
c00142f3:	90                   	nop

c00142f4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00142f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00142f8:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00142fd:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0014304:	75 0b                	jne    c0014311 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0014306:	8b 00                	mov    eax,DWORD PTR [eax]
c0014308:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001430c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001430f:	eb 1e                	jmp    c001432f <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0014311:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0014316:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001431c:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0014322:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014324:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014328:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001432c:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001432f:	ff e0                	jmp    eax
c0014331:	90                   	nop

c0014332 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014332:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014336:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001433b:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0014342:	75 0b                	jne    c001434f <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0014344:	8b 00                	mov    eax,DWORD PTR [eax]
c0014346:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001434a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001434d:	eb 1e                	jmp    c001436d <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c001434f:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0014354:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001435a:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0014360:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014362:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014366:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001436a:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c001436d:	ff e0                	jmp    eax
c001436f:	90                   	nop

c0014370 <Device::addChild(Device*)>:
c0014370:	53                   	push   ebx
c0014371:	83 ec 08             	sub    esp,0x8
c0014374:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014378:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001437c:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0014382:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0014388:	8b 13                	mov    edx,DWORD PTR [ebx]
c001438a:	85 d2                	test   edx,edx
c001438c:	74 04                	je     c0014392 <Device::addChild(Device*)+0x22>
c001438e:	89 d3                	mov    ebx,edx
c0014390:	eb f6                	jmp    c0014388 <Device::addChild(Device*)+0x18>
c0014392:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0014395:	83 ec 0c             	sub    esp,0xc
c0014398:	6a 08                	push   0x8
c001439a:	e8 a1 b4 ff ff       	call   c000f840 <malloc>
c001439f:	89 03                	mov    DWORD PTR [ebx],eax
c00143a1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00143a7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00143ae:	83 c4 18             	add    esp,0x18
c00143b1:	5b                   	pop    ebx
c00143b2:	c3                   	ret    
c00143b3:	90                   	nop

c00143b4 <Device::removeAllChildren()>:
c00143b4:	56                   	push   esi
c00143b5:	53                   	push   ebx
c00143b6:	52                   	push   edx
c00143b7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00143bb:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c00143c1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00143c4:	74 17                	je     c00143dd <Device::removeAllChildren()+0x29>
c00143c6:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00143c9:	85 c0                	test   eax,eax
c00143cb:	74 0c                	je     c00143d9 <Device::removeAllChildren()+0x25>
c00143cd:	83 ec 0c             	sub    esp,0xc
c00143d0:	8b 10                	mov    edx,DWORD PTR [eax]
c00143d2:	50                   	push   eax
c00143d3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00143d6:	83 c4 10             	add    esp,0x10
c00143d9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00143db:	eb e4                	jmp    c00143c1 <Device::removeAllChildren()+0xd>
c00143dd:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00143e3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00143e9:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00143ef:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00143f6:	58                   	pop    eax
c00143f7:	5b                   	pop    ebx
c00143f8:	5e                   	pop    esi
c00143f9:	c3                   	ret    

c00143fa <Device::hibernateAll()>:
c00143fa:	53                   	push   ebx
c00143fb:	83 ec 14             	sub    esp,0x14
c00143fe:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014402:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014404:	53                   	push   ebx
c0014405:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0014408:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001440e:	83 c4 10             	add    esp,0x10
c0014411:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014414:	74 0f                	je     c0014425 <Device::hibernateAll()+0x2b>
c0014416:	83 ec 0c             	sub    esp,0xc
c0014419:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001441c:	e8 d9 ff ff ff       	call   c00143fa <Device::hibernateAll()>
c0014421:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014423:	eb e9                	jmp    c001440e <Device::hibernateAll()+0x14>
c0014425:	83 c4 08             	add    esp,0x8
c0014428:	5b                   	pop    ebx
c0014429:	c3                   	ret    

c001442a <Device::wakeAll()>:
c001442a:	53                   	push   ebx
c001442b:	83 ec 14             	sub    esp,0x14
c001442e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014432:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014434:	53                   	push   ebx
c0014435:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0014438:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001443e:	83 c4 10             	add    esp,0x10
c0014441:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014444:	74 0f                	je     c0014455 <Device::wakeAll()+0x2b>
c0014446:	83 ec 0c             	sub    esp,0xc
c0014449:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001444c:	e8 d9 ff ff ff       	call   c001442a <Device::wakeAll()>
c0014451:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014453:	eb e9                	jmp    c001443e <Device::wakeAll()+0x14>
c0014455:	83 c4 08             	add    esp,0x8
c0014458:	5b                   	pop    ebx
c0014459:	c3                   	ret    

c001445a <Device::detectAll()>:
c001445a:	53                   	push   ebx
c001445b:	83 ec 14             	sub    esp,0x14
c001445e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014462:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014464:	53                   	push   ebx
c0014465:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0014468:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001446e:	83 c4 10             	add    esp,0x10
c0014471:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014474:	74 0f                	je     c0014485 <Device::detectAll()+0x2b>
c0014476:	83 ec 0c             	sub    esp,0xc
c0014479:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001447c:	e8 d9 ff ff ff       	call   c001445a <Device::detectAll()>
c0014481:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014483:	eb e9                	jmp    c001446e <Device::detectAll()+0x14>
c0014485:	83 c4 08             	add    esp,0x8
c0014488:	5b                   	pop    ebx
c0014489:	c3                   	ret    

c001448a <Device::disableLegacyAll()>:
c001448a:	53                   	push   ebx
c001448b:	83 ec 14             	sub    esp,0x14
c001448e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014492:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014494:	53                   	push   ebx
c0014495:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0014498:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001449e:	83 c4 10             	add    esp,0x10
c00144a1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00144a4:	74 0f                	je     c00144b5 <Device::disableLegacyAll()+0x2b>
c00144a6:	83 ec 0c             	sub    esp,0xc
c00144a9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00144ac:	e8 d9 ff ff ff       	call   c001448a <Device::disableLegacyAll()>
c00144b1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00144b3:	eb e9                	jmp    c001449e <Device::disableLegacyAll()+0x14>
c00144b5:	83 c4 08             	add    esp,0x8
c00144b8:	5b                   	pop    ebx
c00144b9:	c3                   	ret    

c00144ba <Device::loadDriversForAll()>:
c00144ba:	53                   	push   ebx
c00144bb:	83 ec 08             	sub    esp,0x8
c00144be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00144c2:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00144c8:	8b 18                	mov    ebx,DWORD PTR [eax]
c00144ca:	85 db                	test   ebx,ebx
c00144cc:	74 12                	je     c00144e0 <Device::loadDriversForAll()+0x26>
c00144ce:	83 ec 0c             	sub    esp,0xc
c00144d1:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00144d4:	e8 e1 ff ff ff       	call   c00144ba <Device::loadDriversForAll()>
c00144d9:	83 c4 10             	add    esp,0x10
c00144dc:	89 d8                	mov    eax,ebx
c00144de:	eb e8                	jmp    c00144c8 <Device::loadDriversForAll()+0xe>
c00144e0:	83 c4 08             	add    esp,0x8
c00144e3:	5b                   	pop    ebx
c00144e4:	c3                   	ret    
c00144e5:	90                   	nop

c00144e6 <Device::closeAll()>:
c00144e6:	53                   	push   ebx
c00144e7:	83 ec 08             	sub    esp,0x8
c00144ea:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00144ee:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144f0:	6a 00                	push   0x0
c00144f2:	6a 00                	push   0x0
c00144f4:	6a 00                	push   0x0
c00144f6:	53                   	push   ebx
c00144f7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00144fa:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014500:	83 c4 10             	add    esp,0x10
c0014503:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014506:	74 0f                	je     c0014517 <Device::closeAll()+0x31>
c0014508:	83 ec 0c             	sub    esp,0xc
c001450b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001450e:	e8 d3 ff ff ff       	call   c00144e6 <Device::closeAll()>
c0014513:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014515:	eb e9                	jmp    c0014500 <Device::closeAll()+0x1a>
c0014517:	83 c4 08             	add    esp,0x8
c001451a:	5b                   	pop    ebx
c001451b:	c3                   	ret    

c001451c <Device::powerSavingAll(PowerSavingLevel)>:
c001451c:	56                   	push   esi
c001451d:	53                   	push   ebx
c001451e:	83 ec 0c             	sub    esp,0xc
c0014521:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014525:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0014529:	8b 03                	mov    eax,DWORD PTR [ebx]
c001452b:	56                   	push   esi
c001452c:	53                   	push   ebx
c001452d:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0014530:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014536:	83 c4 10             	add    esp,0x10
c0014539:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001453c:	74 0f                	je     c001454d <Device::powerSavingAll(PowerSavingLevel)+0x31>
c001453e:	52                   	push   edx
c001453f:	52                   	push   edx
c0014540:	56                   	push   esi
c0014541:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014544:	e8 d3 ff ff ff       	call   c001451c <Device::powerSavingAll(PowerSavingLevel)>
c0014549:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001454b:	eb e9                	jmp    c0014536 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c001454d:	58                   	pop    eax
c001454e:	5b                   	pop    ebx
c001454f:	5e                   	pop    esi
c0014550:	c3                   	ret    
c0014551:	90                   	nop

c0014552 <Device::setName(char const*)>:
c0014552:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c001455a:	e9 d5 c2 fe ff       	jmp    c0000834 <strcpy>
c001455f:	90                   	nop

c0014560 <Device::Device(char const*)>:
c0014560:	83 ec 1c             	sub    esp,0x1c
c0014563:	ba 78 ac 02 c0       	mov    edx,0xc002ac78
c0014568:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001456c:	89 10                	mov    DWORD PTR [eax],edx
c001456e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014572:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c001457c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014580:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001458a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001458e:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0014598:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001459c:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00145a6:	83 ec 08             	sub    esp,0x8
c00145a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00145ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00145b1:	e8 9c ff ff ff       	call   c0014552 <Device::setName(char const*)>
c00145b6:	83 c4 10             	add    esp,0x10
c00145b9:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c00145c1:	83 ec 0c             	sub    esp,0xc
c00145c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00145c8:	e8 73 b2 ff ff       	call   c000f840 <malloc>
c00145cd:	83 c4 10             	add    esp,0x10
c00145d0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00145d6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00145dd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00145e1:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c00145e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145eb:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00145f1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00145f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145fb:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014601:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014608:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001460c:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0014613:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014617:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c001461e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014622:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001462c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014630:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001463a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001463e:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0014648:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001464c:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0014656:	90                   	nop
c0014657:	83 c4 1c             	add    esp,0x1c
c001465a:	c3                   	ret    
c001465b:	90                   	nop

c001465c <Device::getName()>:
c001465c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014660:	05 d0 00 00 00       	add    eax,0xd0
c0014665:	c3                   	ret    

c0014666 <DriverlessDevice::DriverlessDevice(char const*)>:
c0014666:	83 ec 0c             	sub    esp,0xc
c0014669:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001466d:	83 ec 08             	sub    esp,0x8
c0014670:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014674:	50                   	push   eax
c0014675:	e8 e6 fe ff ff       	call   c0014560 <Device::Device(char const*)>
c001467a:	83 c4 10             	add    esp,0x10
c001467d:	ba a4 ac 02 c0       	mov    edx,0xc002aca4
c0014682:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014686:	89 10                	mov    DWORD PTR [eax],edx
c0014688:	90                   	nop
c0014689:	83 c4 0c             	add    esp,0xc
c001468c:	c3                   	ret    
c001468d:	90                   	nop

c001468e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c001468e:	57                   	push   edi
c001468f:	56                   	push   esi
c0014690:	53                   	push   ebx
c0014691:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014695:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014699:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001469d:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c00146a3:	75 0c                	jne    c00146b1 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c00146a5:	52                   	push   edx
c00146a6:	52                   	push   edx
c00146a7:	53                   	push   ebx
c00146a8:	56                   	push   esi
c00146a9:	e8 3c 42 01 00       	call   c00288ea <LinkedList<Device>::addElement(Device*)>
c00146ae:	83 c4 10             	add    esp,0x10
c00146b1:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00146b7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00146ba:	74 12                	je     c00146ce <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c00146bc:	50                   	push   eax
c00146bd:	57                   	push   edi
c00146be:	56                   	push   esi
c00146bf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00146c2:	e8 c7 ff ff ff       	call   c001468e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00146c7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00146c9:	83 c4 10             	add    esp,0x10
c00146cc:	eb e9                	jmp    c00146b7 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c00146ce:	5b                   	pop    ebx
c00146cf:	5e                   	pop    esi
c00146d0:	5f                   	pop    edi
c00146d1:	c3                   	ret    

c00146d2 <getDevicesOfType(DeviceType)>:
c00146d2:	53                   	push   ebx
c00146d3:	83 ec 14             	sub    esp,0x14
c00146d6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00146da:	53                   	push   ebx
c00146db:	e8 e6 42 01 00       	call   c00289c6 <LinkedList<Device>::LinkedList()>
c00146e0:	83 c4 0c             	add    esp,0xc
c00146e3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00146e7:	53                   	push   ebx
c00146e8:	ff 35 08 e4 02 c0    	push   DWORD PTR ds:0xc002e408
c00146ee:	e8 9b ff ff ff       	call   c001468e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00146f3:	89 d8                	mov    eax,ebx
c00146f5:	83 c4 18             	add    esp,0x18
c00146f8:	5b                   	pop    ebx
c00146f9:	c2 04 00             	ret    0x4

c00146fc <HardDiskController::HardDiskController(char const*)>:
c00146fc:	83 ec 0c             	sub    esp,0xc
c00146ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014703:	83 ec 08             	sub    esp,0x8
c0014706:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001470a:	50                   	push   eax
c001470b:	e8 50 fe ff ff       	call   c0014560 <Device::Device(char const*)>
c0014710:	83 c4 10             	add    esp,0x10
c0014713:	ba d0 ac 02 c0       	mov    edx,0xc002acd0
c0014718:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001471c:	89 10                	mov    DWORD PTR [eax],edx
c001471e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014722:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c001472c:	90                   	nop
c001472d:	83 c4 0c             	add    esp,0xc
c0014730:	c3                   	ret    
c0014731:	90                   	nop

c0014732 <HardDiskController::~HardDiskController()>:
c0014732:	83 ec 0c             	sub    esp,0xc
c0014735:	ba d0 ac 02 c0       	mov    edx,0xc002acd0
c001473a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001473e:	89 10                	mov    DWORD PTR [eax],edx
c0014740:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014744:	83 ec 0c             	sub    esp,0xc
c0014747:	50                   	push   eax
c0014748:	e8 f5 fa ff ff       	call   c0014242 <Device::~Device()>
c001474d:	83 c4 10             	add    esp,0x10
c0014750:	90                   	nop
c0014751:	83 c4 0c             	add    esp,0xc
c0014754:	c3                   	ret    
c0014755:	90                   	nop

c0014756 <HardDiskController::~HardDiskController()>:
c0014756:	83 ec 0c             	sub    esp,0xc
c0014759:	83 ec 0c             	sub    esp,0xc
c001475c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014760:	e8 cd ff ff ff       	call   c0014732 <HardDiskController::~HardDiskController()>
c0014765:	83 c4 10             	add    esp,0x10
c0014768:	83 ec 08             	sub    esp,0x8
c001476b:	68 58 01 00 00       	push   0x158
c0014770:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014774:	e8 f1 e6 ff ff       	call   c0012e6a <operator delete(void*, unsigned long)>
c0014779:	83 c4 10             	add    esp,0x10
c001477c:	83 c4 0c             	add    esp,0xc
c001477f:	c3                   	ret    

c0014780 <PhysicalDisk::eject()>:
c0014780:	83 ec 18             	sub    esp,0x18
c0014783:	68 f4 ac 02 c0       	push   0xc002acf4
c0014788:	e8 bd e7 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001478d:	83 c8 ff             	or     eax,0xffffffff
c0014790:	83 c4 1c             	add    esp,0x1c
c0014793:	c3                   	ret    

c0014794 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0014794:	83 ec 0c             	sub    esp,0xc
c0014797:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001479b:	83 ec 08             	sub    esp,0x8
c001479e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147a2:	50                   	push   eax
c00147a3:	e8 b8 fd ff ff       	call   c0014560 <Device::Device(char const*)>
c00147a8:	83 c4 10             	add    esp,0x10
c00147ab:	ba 24 ad 02 c0       	mov    edx,0xc002ad24
c00147b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147b4:	89 10                	mov    DWORD PTR [eax],edx
c00147b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147ba:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00147c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147c5:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c00147cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147d0:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c00147da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147de:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00147e2:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00147e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147ec:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00147f6:	90                   	nop
c00147f7:	83 c4 0c             	add    esp,0xc
c00147fa:	c3                   	ret    
c00147fb:	90                   	nop

c00147fc <PhysicalDisk::startCache()>:
c00147fc:	56                   	push   esi
c00147fd:	53                   	push   ebx
c00147fe:	83 ec 10             	sub    esp,0x10
c0014801:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014805:	6a 44                	push   0x44
c0014807:	e8 34 b0 ff ff       	call   c000f840 <malloc>
c001480c:	89 c6                	mov    esi,eax
c001480e:	58                   	pop    eax
c001480f:	5a                   	pop    edx
c0014810:	53                   	push   ebx
c0014811:	56                   	push   esi
c0014812:	e8 39 27 00 00       	call   c0016f50 <VCache::VCache(PhysicalDisk*)>
c0014817:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c001481d:	83 c4 14             	add    esp,0x14
c0014820:	5b                   	pop    ebx
c0014821:	5e                   	pop    esi
c0014822:	c3                   	ret    
c0014823:	90                   	nop

c0014824 <PhysicalDisk::~PhysicalDisk()>:
c0014824:	83 ec 0c             	sub    esp,0xc
c0014827:	ba 24 ad 02 c0       	mov    edx,0xc002ad24
c001482c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014830:	89 10                	mov    DWORD PTR [eax],edx
c0014832:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014836:	83 ec 0c             	sub    esp,0xc
c0014839:	50                   	push   eax
c001483a:	e8 03 fa ff ff       	call   c0014242 <Device::~Device()>
c001483f:	83 c4 10             	add    esp,0x10
c0014842:	90                   	nop
c0014843:	83 c4 0c             	add    esp,0xc
c0014846:	c3                   	ret    
c0014847:	90                   	nop

c0014848 <PhysicalDisk::~PhysicalDisk()>:
c0014848:	83 ec 0c             	sub    esp,0xc
c001484b:	83 ec 0c             	sub    esp,0xc
c001484e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014852:	e8 cd ff ff ff       	call   c0014824 <PhysicalDisk::~PhysicalDisk()>
c0014857:	83 c4 10             	add    esp,0x10
c001485a:	83 ec 08             	sub    esp,0x8
c001485d:	68 6c 01 00 00       	push   0x16c
c0014862:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014866:	e8 ff e5 ff ff       	call   c0012e6a <operator delete(void*, unsigned long)>
c001486b:	83 c4 10             	add    esp,0x10
c001486e:	83 c4 0c             	add    esp,0xc
c0014871:	c3                   	ret    

c0014872 <FPU::FPU(char const*)>:
c0014872:	83 ec 0c             	sub    esp,0xc
c0014875:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014879:	83 ec 08             	sub    esp,0x8
c001487c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014880:	50                   	push   eax
c0014881:	e8 da fc ff ff       	call   c0014560 <Device::Device(char const*)>
c0014886:	83 c4 10             	add    esp,0x10
c0014889:	ba 68 ad 02 c0       	mov    edx,0xc002ad68
c001488e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014892:	89 10                	mov    DWORD PTR [eax],edx
c0014894:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014898:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c00148a2:	90                   	nop
c00148a3:	83 c4 0c             	add    esp,0xc
c00148a6:	c3                   	ret    
c00148a7:	90                   	nop

c00148a8 <FPU::~FPU()>:
c00148a8:	83 ec 0c             	sub    esp,0xc
c00148ab:	ba 68 ad 02 c0       	mov    edx,0xc002ad68
c00148b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148b4:	89 10                	mov    DWORD PTR [eax],edx
c00148b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148ba:	83 ec 0c             	sub    esp,0xc
c00148bd:	50                   	push   eax
c00148be:	e8 7f f9 ff ff       	call   c0014242 <Device::~Device()>
c00148c3:	83 c4 10             	add    esp,0x10
c00148c6:	90                   	nop
c00148c7:	83 c4 0c             	add    esp,0xc
c00148ca:	c3                   	ret    
c00148cb:	90                   	nop

c00148cc <FPU::~FPU()>:
c00148cc:	83 ec 0c             	sub    esp,0xc
c00148cf:	83 ec 0c             	sub    esp,0xc
c00148d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00148d6:	e8 cd ff ff ff       	call   c00148a8 <FPU::~FPU()>
c00148db:	83 c4 10             	add    esp,0x10
c00148de:	83 ec 08             	sub    esp,0x8
c00148e1:	68 58 01 00 00       	push   0x158
c00148e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00148ea:	e8 7b e5 ff ff       	call   c0012e6a <operator delete(void*, unsigned long)>
c00148ef:	83 c4 10             	add    esp,0x10
c00148f2:	83 c4 0c             	add    esp,0xc
c00148f5:	c3                   	ret    

c00148f6 <setupFPU()>:
c00148f6:	53                   	push   ebx
c00148f7:	83 ec 08             	sub    esp,0x8
c00148fa:	8b 15 08 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e408
c0014900:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c0014907:	74 19                	je     c0014922 <setupFPU()+0x2c>
c0014909:	83 ec 0c             	sub    esp,0xc
c001490c:	68 58 01 00 00       	push   0x158
c0014911:	e8 2a af ff ff       	call   c000f840 <malloc>
c0014916:	89 c3                	mov    ebx,eax
c0014918:	89 04 24             	mov    DWORD PTR [esp],eax
c001491b:	e8 1c 0c 01 00       	call   c002553c <AVX::AVX()>
c0014920:	eb 5b                	jmp    c001497d <setupFPU()+0x87>
c0014922:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0014928:	84 c0                	test   al,al
c001492a:	79 19                	jns    c0014945 <setupFPU()+0x4f>
c001492c:	83 ec 0c             	sub    esp,0xc
c001492f:	68 58 01 00 00       	push   0x158
c0014934:	e8 07 af ff ff       	call   c000f840 <malloc>
c0014939:	89 c3                	mov    ebx,eax
c001493b:	89 04 24             	mov    DWORD PTR [esp],eax
c001493e:	e8 1f 0d 01 00       	call   c0025662 <SSE::SSE()>
c0014943:	eb 38                	jmp    c001497d <setupFPU()+0x87>
c0014945:	a8 20                	test   al,0x20
c0014947:	74 19                	je     c0014962 <setupFPU()+0x6c>
c0014949:	83 ec 0c             	sub    esp,0xc
c001494c:	68 58 01 00 00       	push   0x158
c0014951:	e8 ea ae ff ff       	call   c000f840 <malloc>
c0014956:	89 c3                	mov    ebx,eax
c0014958:	89 04 24             	mov    DWORD PTR [esp],eax
c001495b:	e8 6c 0c 01 00       	call   c00255cc <MMX::MMX()>
c0014960:	eb 1b                	jmp    c001497d <setupFPU()+0x87>
c0014962:	a8 10                	test   al,0x10
c0014964:	74 1c                	je     c0014982 <setupFPU()+0x8c>
c0014966:	83 ec 0c             	sub    esp,0xc
c0014969:	68 58 01 00 00       	push   0x158
c001496e:	e8 cd ae ff ff       	call   c000f840 <malloc>
c0014973:	89 c3                	mov    ebx,eax
c0014975:	89 04 24             	mov    DWORD PTR [esp],eax
c0014978:	e8 73 0d 01 00       	call   c00256f0 <x87::x87()>
c001497d:	83 c4 10             	add    esp,0x10
c0014980:	eb 24                	jmp    c00149a6 <setupFPU()+0xb0>
c0014982:	83 e0 ef             	and    eax,0xffffffef
c0014985:	83 ec 0c             	sub    esp,0xc
c0014988:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c001498e:	68 54 ad 02 c0       	push   0xc002ad54
c0014993:	e8 b2 e5 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0014998:	0f 20 c0             	mov    eax,cr0
c001499b:	83 c8 04             	or     eax,0x4
c001499e:	0f 22 c0             	mov    cr0,eax
c00149a1:	31 db                	xor    ebx,ebx
c00149a3:	83 c4 10             	add    esp,0x10
c00149a6:	89 d8                	mov    eax,ebx
c00149a8:	83 c4 08             	add    esp,0x8
c00149ab:	5b                   	pop    ebx
c00149ac:	c3                   	ret    
c00149ad:	90                   	nop

c00149ae <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c00149ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00149b2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00149b6:	c1 e0 04             	shl    eax,0x4
c00149b9:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00149bd:	8d 50 10             	lea    edx,[eax+0x10]
c00149c0:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c00149c6:	74 08                	je     c00149d0 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c00149c8:	83 c0 04             	add    eax,0x4
c00149cb:	39 d0                	cmp    eax,edx
c00149cd:	75 f1                	jne    c00149c0 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c00149cf:	c3                   	ret    
c00149d0:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00149da:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00149e4:	eb e2                	jmp    c00149c8 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c00149e6 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c00149e6:	57                   	push   edi
c00149e7:	31 c0                	xor    eax,eax
c00149e9:	56                   	push   esi
c00149ea:	53                   	push   ebx
c00149eb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00149ef:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00149f3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00149f7:	89 da                	mov    edx,ebx
c00149f9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00149fd:	c1 e2 04             	shl    edx,0x4
c0014a00:	01 ca                	add    edx,ecx
c0014a02:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0014a0a:	74 16                	je     c0014a22 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0014a0c:	40                   	inc    eax
c0014a0d:	83 f8 04             	cmp    eax,0x4
c0014a10:	75 f0                	jne    c0014a02 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0014a12:	c7 44 24 10 98 ad 02 c0 	mov    DWORD PTR [esp+0x10],0xc002ad98
c0014a1a:	5b                   	pop    ebx
c0014a1b:	5e                   	pop    esi
c0014a1c:	5f                   	pop    edi
c0014a1d:	e9 d9 5b 00 00       	jmp    c001a5fb <Krnl::panic(char const*)>
c0014a22:	8d 04 98             	lea    eax,[eax+ebx*4]
c0014a25:	8d 04 81             	lea    eax,[ecx+eax*4]
c0014a28:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0014a2e:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0014a34:	5b                   	pop    ebx
c0014a35:	5e                   	pop    esi
c0014a36:	5f                   	pop    edi
c0014a37:	c3                   	ret    

c0014a38 <doubleFault(regs*, void*)>:
c0014a38:	55                   	push   ebp
c0014a39:	89 e5                	mov    ebp,esp
c0014a3b:	83 ec 08             	sub    esp,0x8
c0014a3e:	83 ec 0c             	sub    esp,0xc
c0014a41:	68 d3 ad 02 c0       	push   0xc002add3
c0014a46:	e8 b0 5b 00 00       	call   c001a5fb <Krnl::panic(char const*)>
c0014a4b:	83 c4 10             	add    esp,0x10
c0014a4e:	90                   	nop
c0014a4f:	c9                   	leave  
c0014a50:	c3                   	ret    
c0014a51:	90                   	nop

c0014a52 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014a52:	56                   	push   esi
c0014a53:	53                   	push   ebx
c0014a54:	50                   	push   eax
c0014a55:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014a59:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014a5d:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014a62:	75 35                	jne    c0014a99 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014a64:	8d 43 20             	lea    eax,[ebx+0x20]
c0014a67:	31 d2                	xor    edx,edx
c0014a69:	89 c1                	mov    ecx,eax
c0014a6b:	c1 e1 04             	shl    ecx,0x4
c0014a6e:	01 f1                	add    ecx,esi
c0014a70:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014a78:	74 3e                	je     c0014ab8 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014a7a:	42                   	inc    edx
c0014a7b:	83 fa 04             	cmp    edx,0x4
c0014a7e:	75 f0                	jne    c0014a70 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014a80:	83 ec 0c             	sub    esp,0xc
c0014a83:	68 18 ae 02 c0       	push   0xc002ae18
c0014a88:	e8 6e 5b 00 00       	call   c001a5fb <Krnl::panic(char const*)>
c0014a8d:	83 c4 10             	add    esp,0x10
c0014a90:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014a95:	5a                   	pop    edx
c0014a96:	5b                   	pop    ebx
c0014a97:	5e                   	pop    esi
c0014a98:	c3                   	ret    
c0014a99:	83 ec 0c             	sub    esp,0xc
c0014a9c:	56                   	push   esi
c0014a9d:	e8 ba fb ff ff       	call   c001465c <Device::getName()>
c0014aa2:	83 c4 10             	add    esp,0x10
c0014aa5:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014aa8:	75 ba                	jne    c0014a64 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014aaa:	83 fb 0f             	cmp    ebx,0xf
c0014aad:	7f 29                	jg     c0014ad8 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014aaf:	0f b6 9b 60 d6 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd29a0]
c0014ab6:	eb ac                	jmp    c0014a64 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014ab8:	8d 04 82             	lea    eax,[edx+eax*4]
c0014abb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014abf:	8d 04 86             	lea    eax,[esi+eax*4]
c0014ac2:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014ac8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014acc:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014ad2:	89 d8                	mov    eax,ebx
c0014ad4:	5a                   	pop    edx
c0014ad5:	5b                   	pop    ebx
c0014ad6:	5e                   	pop    esi
c0014ad7:	c3                   	ret    
c0014ad8:	83 ec 0c             	sub    esp,0xc
c0014adb:	68 e0 ad 02 c0       	push   0xc002ade0
c0014ae0:	e8 16 5b 00 00       	call   c001a5fb <Krnl::panic(char const*)>
c0014ae5:	83 c4 10             	add    esp,0x10
c0014ae8:	e9 77 ff ff ff       	jmp    c0014a64 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014aed:	90                   	nop

c0014aee <InterruptController::clearAllHandlers(int, bool)>:
c0014aee:	56                   	push   esi
c0014aef:	53                   	push   ebx
c0014af0:	52                   	push   edx
c0014af1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014af5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014af9:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014afe:	75 61                	jne    c0014b61 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014b00:	8d 46 20             	lea    eax,[esi+0x20]
c0014b03:	c1 e6 04             	shl    esi,0x4
c0014b06:	c1 e0 04             	shl    eax,0x4
c0014b09:	01 de                	add    esi,ebx
c0014b0b:	01 d8                	add    eax,ebx
c0014b0d:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014b17:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014b21:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014b2b:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014b35:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014b3f:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014b49:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014b53:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014b5d:	58                   	pop    eax
c0014b5e:	5b                   	pop    ebx
c0014b5f:	5e                   	pop    esi
c0014b60:	c3                   	ret    
c0014b61:	83 ec 0c             	sub    esp,0xc
c0014b64:	53                   	push   ebx
c0014b65:	e8 f2 fa ff ff       	call   c001465c <Device::getName()>
c0014b6a:	83 c4 10             	add    esp,0x10
c0014b6d:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014b70:	75 8e                	jne    c0014b00 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014b72:	83 fe 0f             	cmp    esi,0xf
c0014b75:	7f 09                	jg     c0014b80 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014b77:	0f b6 b6 60 d6 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd29a0]
c0014b7e:	eb 80                	jmp    c0014b00 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014b80:	83 ec 0c             	sub    esp,0xc
c0014b83:	68 54 ae 02 c0       	push   0xc002ae54
c0014b88:	e8 6e 5a 00 00       	call   c001a5fb <Krnl::panic(char const*)>
c0014b8d:	83 c4 10             	add    esp,0x10
c0014b90:	e9 6b ff ff ff       	jmp    c0014b00 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014b95:	90                   	nop

c0014b96 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014b96:	56                   	push   esi
c0014b97:	53                   	push   ebx
c0014b98:	52                   	push   edx
c0014b99:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014b9d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014ba1:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014ba6:	75 3a                	jne    c0014be2 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014ba8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014bac:	8d 50 20             	lea    edx,[eax+0x20]
c0014baf:	c1 e2 04             	shl    edx,0x4
c0014bb2:	8d 04 16             	lea    eax,[esi+edx*1]
c0014bb5:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014bb9:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014bbf:	74 0b                	je     c0014bcc <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014bc1:	83 c0 04             	add    eax,0x4
c0014bc4:	39 d0                	cmp    eax,edx
c0014bc6:	75 f1                	jne    c0014bb9 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014bc8:	58                   	pop    eax
c0014bc9:	5b                   	pop    ebx
c0014bca:	5e                   	pop    esi
c0014bcb:	c3                   	ret    
c0014bcc:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014bd6:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014be0:	eb df                	jmp    c0014bc1 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014be2:	83 ec 0c             	sub    esp,0xc
c0014be5:	56                   	push   esi
c0014be6:	e8 71 fa ff ff       	call   c001465c <Device::getName()>
c0014beb:	83 c4 10             	add    esp,0x10
c0014bee:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014bf1:	75 b5                	jne    c0014ba8 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014bf3:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014bf8:	7f 11                	jg     c0014c0b <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014bfa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014bfe:	0f b6 80 60 d6 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd29a0]
c0014c05:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014c09:	eb 9d                	jmp    c0014ba8 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014c0b:	83 ec 0c             	sub    esp,0xc
c0014c0e:	68 54 ae 02 c0       	push   0xc002ae54
c0014c13:	e8 e3 59 00 00       	call   c001a5fb <Krnl::panic(char const*)>
c0014c18:	83 c4 10             	add    esp,0x10
c0014c1b:	eb 8b                	jmp    c0014ba8 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014c1d <nmiHandler(regs*, void*)>:
c0014c1d:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0014c22:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014c26:	e9 61 a3 ff ff       	jmp    c000ef8c <Computer::handleNMI()>

c0014c2b <int_handler>:
c0014c2b:	55                   	push   ebp
c0014c2c:	57                   	push   edi
c0014c2d:	56                   	push   esi
c0014c2e:	53                   	push   ebx
c0014c2f:	83 ec 0c             	sub    esp,0xc
c0014c32:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014c36:	80 3d 64 0f 03 c0 00 	cmp    BYTE PTR ds:0xc0030f64,0x0
c0014c3d:	74 0b                	je     c0014c4a <int_handler+0x1f>
c0014c3f:	fa                   	cli    
c0014c40:	f4                   	hlt    
c0014c41:	80 3d 64 0f 03 c0 00 	cmp    BYTE PTR ds:0xc0030f64,0x0
c0014c48:	75 f5                	jne    c0014c3f <int_handler+0x14>
c0014c4a:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0014c4f:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014c52:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014c58:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014c5e:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014c61:	83 f8 17             	cmp    eax,0x17
c0014c64:	77 13                	ja     c0014c79 <int_handler+0x4e>
c0014c66:	83 ec 08             	sub    esp,0x8
c0014c69:	8b 17                	mov    edx,DWORD PTR [edi]
c0014c6b:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014c6e:	0f b6 c0             	movzx  eax,al
c0014c71:	50                   	push   eax
c0014c72:	57                   	push   edi
c0014c73:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014c76:	83 c4 10             	add    esp,0x10
c0014c79:	83 c3 15             	add    ebx,0x15
c0014c7c:	c1 e3 04             	shl    ebx,0x4
c0014c7f:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014c83:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014c8a:	31 db                	xor    ebx,ebx
c0014c8c:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014c90:	85 c0                	test   eax,eax
c0014c92:	74 13                	je     c0014ca7 <int_handler+0x7c>
c0014c94:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014c97:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014c9b:	74 1c                	je     c0014cb9 <int_handler+0x8e>
c0014c9d:	83 ec 08             	sub    esp,0x8
c0014ca0:	52                   	push   edx
c0014ca1:	56                   	push   esi
c0014ca2:	ff d0                	call   eax
c0014ca4:	83 c4 10             	add    esp,0x10
c0014ca7:	43                   	inc    ebx
c0014ca8:	83 fb 04             	cmp    ebx,0x4
c0014cab:	75 df                	jne    c0014c8c <int_handler+0x61>
c0014cad:	83 c4 0c             	add    esp,0xc
c0014cb0:	31 c0                	xor    eax,eax
c0014cb2:	5b                   	pop    ebx
c0014cb3:	31 d2                	xor    edx,edx
c0014cb5:	5e                   	pop    esi
c0014cb6:	5f                   	pop    edi
c0014cb7:	5d                   	pop    ebp
c0014cb8:	c3                   	ret    
c0014cb9:	83 ec 08             	sub    esp,0x8
c0014cbc:	52                   	push   edx
c0014cbd:	56                   	push   esi
c0014cbe:	ff d0                	call   eax
c0014cc0:	83 c4 10             	add    esp,0x10
c0014cc3:	83 c4 0c             	add    esp,0xc
c0014cc6:	5b                   	pop    ebx
c0014cc7:	5e                   	pop    esi
c0014cc8:	5f                   	pop    edi
c0014cc9:	5d                   	pop    ebp
c0014cca:	c3                   	ret    
c0014ccb:	90                   	nop

c0014ccc <InterruptController::InterruptController(char const*)>:
c0014ccc:	83 ec 1c             	sub    esp,0x1c
c0014ccf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014cd3:	83 ec 08             	sub    esp,0x8
c0014cd6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014cda:	50                   	push   eax
c0014cdb:	e8 80 f8 ff ff       	call   c0014560 <Device::Device(char const*)>
c0014ce0:	83 c4 10             	add    esp,0x10
c0014ce3:	ba fc b0 02 c0       	mov    edx,0xc002b0fc
c0014ce8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014cec:	89 10                	mov    DWORD PTR [eax],edx
c0014cee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014cf2:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014cfc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014d04:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014d0c:	7f 5e                	jg     c0014d6c <InterruptController::InterruptController(char const*)+0xa0>
c0014d0e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014d16:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014d1b:	7f 49                	jg     c0014d66 <InterruptController::InterruptController(char const*)+0x9a>
c0014d1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d21:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014d25:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014d2c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014d30:	01 ca                	add    edx,ecx
c0014d32:	83 c2 54             	add    edx,0x54
c0014d35:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014d3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d41:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014d45:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014d4c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014d50:	01 ca                	add    edx,ecx
c0014d52:	81 c2 54 04 00 00    	add    edx,0x454
c0014d58:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014d60:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014d64:	eb b0                	jmp    c0014d16 <InterruptController::InterruptController(char const*)+0x4a>
c0014d66:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014d6a:	eb 98                	jmp    c0014d04 <InterruptController::InterruptController(char const*)+0x38>
c0014d6c:	90                   	nop
c0014d6d:	83 c4 1c             	add    esp,0x1c
c0014d70:	c3                   	ret    
c0014d71:	90                   	nop

c0014d72 <InterruptController::~InterruptController()>:
c0014d72:	83 ec 0c             	sub    esp,0xc
c0014d75:	ba fc b0 02 c0       	mov    edx,0xc002b0fc
c0014d7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d7e:	89 10                	mov    DWORD PTR [eax],edx
c0014d80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d84:	83 ec 0c             	sub    esp,0xc
c0014d87:	50                   	push   eax
c0014d88:	e8 b5 f4 ff ff       	call   c0014242 <Device::~Device()>
c0014d8d:	83 c4 10             	add    esp,0x10
c0014d90:	90                   	nop
c0014d91:	83 c4 0c             	add    esp,0xc
c0014d94:	c3                   	ret    
c0014d95:	90                   	nop

c0014d96 <InterruptController::~InterruptController()>:
c0014d96:	83 ec 0c             	sub    esp,0xc
c0014d99:	83 ec 0c             	sub    esp,0xc
c0014d9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014da0:	e8 cd ff ff ff       	call   c0014d72 <InterruptController::~InterruptController()>
c0014da5:	83 c4 10             	add    esp,0x10
c0014da8:	83 ec 08             	sub    esp,0x8
c0014dab:	68 58 21 00 00       	push   0x2158
c0014db0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014db4:	e8 b1 e0 ff ff       	call   c0012e6a <operator delete(void*, unsigned long)>
c0014db9:	83 c4 10             	add    esp,0x10
c0014dbc:	83 c4 0c             	add    esp,0xc
c0014dbf:	c3                   	ret    

c0014dc0 <displayDebugInfo(regs*)>:
c0014dc0:	55                   	push   ebp
c0014dc1:	57                   	push   edi
c0014dc2:	56                   	push   esi
c0014dc3:	53                   	push   ebx
c0014dc4:	83 ec 24             	sub    esp,0x24
c0014dc7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014dcb:	0f 20 c2             	mov    edx,cr0
c0014dce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014dd2:	0f 20 d7             	mov    edi,cr2
c0014dd5:	0f 20 de             	mov    esi,cr3
c0014dd8:	0f 20 e5             	mov    ebp,cr4
c0014ddb:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014dde:	68 8e ae 02 c0       	push   0xc002ae8e
c0014de3:	e8 62 e1 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0014de8:	59                   	pop    ecx
c0014de9:	58                   	pop    eax
c0014dea:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014ded:	68 99 ae 02 c0       	push   0xc002ae99
c0014df2:	e8 53 e1 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0014df7:	58                   	pop    eax
c0014df8:	5a                   	pop    edx
c0014df9:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014dfc:	68 a4 ae 02 c0       	push   0xc002aea4
c0014e01:	e8 44 e1 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0014e06:	59                   	pop    ecx
c0014e07:	58                   	pop    eax
c0014e08:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014e0b:	68 af ae 02 c0       	push   0xc002aeaf
c0014e10:	e8 35 e1 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0014e15:	58                   	pop    eax
c0014e16:	5a                   	pop    edx
c0014e17:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014e1a:	68 ba ae 02 c0       	push   0xc002aeba
c0014e1f:	e8 26 e1 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0014e24:	59                   	pop    ecx
c0014e25:	58                   	pop    eax
c0014e26:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014e29:	68 c5 ae 02 c0       	push   0xc002aec5
c0014e2e:	e8 17 e1 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0014e33:	58                   	pop    eax
c0014e34:	5a                   	pop    edx
c0014e35:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014e38:	68 d0 ae 02 c0       	push   0xc002aed0
c0014e3d:	e8 08 e1 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0014e42:	59                   	pop    ecx
c0014e43:	58                   	pop    eax
c0014e44:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014e47:	68 db ae 02 c0       	push   0xc002aedb
c0014e4c:	e8 f9 e0 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0014e51:	58                   	pop    eax
c0014e52:	5a                   	pop    edx
c0014e53:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014e56:	68 e6 ae 02 c0       	push   0xc002aee6
c0014e5b:	e8 ea e0 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0014e60:	59                   	pop    ecx
c0014e61:	58                   	pop    eax
c0014e62:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014e65:	68 f5 ae 02 c0       	push   0xc002aef5
c0014e6a:	e8 db e0 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0014e6f:	58                   	pop    eax
c0014e70:	5a                   	pop    edx
c0014e71:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014e74:	68 00 af 02 c0       	push   0xc002af00
c0014e79:	e8 cc e0 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0014e7e:	59                   	pop    ecx
c0014e7f:	58                   	pop    eax
c0014e80:	57                   	push   edi
c0014e81:	68 0b af 02 c0       	push   0xc002af0b
c0014e86:	e8 bf e0 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0014e8b:	58                   	pop    eax
c0014e8c:	5a                   	pop    edx
c0014e8d:	56                   	push   esi
c0014e8e:	68 16 af 02 c0       	push   0xc002af16
c0014e93:	e8 b2 e0 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0014e98:	59                   	pop    ecx
c0014e99:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c0014e9e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ea4:	e8 a8 be ff ff       	call   c0010d51 <setActiveTerminal(VgaText*)>
c0014ea9:	58                   	pop    eax
c0014eaa:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014ead:	5a                   	pop    edx
c0014eae:	c1 e0 05             	shl    eax,0x5
c0014eb1:	05 c0 d3 02 c0       	add    eax,0xc002d3c0
c0014eb6:	50                   	push   eax
c0014eb7:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c0014ebc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ec2:	e8 a9 c2 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c0014ec7:	59                   	pop    ecx
c0014ec8:	58                   	pop    eax
c0014ec9:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c0014ece:	68 21 af 02 c0       	push   0xc002af21
c0014ed3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ed9:	e8 92 c2 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c0014ede:	58                   	pop    eax
c0014edf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014ee4:	5a                   	pop    edx
c0014ee5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014ee8:	83 c0 0c             	add    eax,0xc
c0014eeb:	50                   	push   eax
c0014eec:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c0014ef1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ef7:	e8 74 c2 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c0014efc:	59                   	pop    ecx
c0014efd:	58                   	pop    eax
c0014efe:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c0014f03:	68 2a af 02 c0       	push   0xc002af2a
c0014f08:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f0e:	e8 5d c2 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c0014f13:	58                   	pop    eax
c0014f14:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c0014f19:	5a                   	pop    edx
c0014f1a:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014f1d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f23:	e8 6e c2 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c0014f28:	59                   	pop    ecx
c0014f29:	58                   	pop    eax
c0014f2a:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c0014f2f:	68 32 af 02 c0       	push   0xc002af32
c0014f34:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f3a:	e8 31 c2 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c0014f3f:	58                   	pop    eax
c0014f40:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c0014f45:	5a                   	pop    edx
c0014f46:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014f49:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f4f:	e8 42 c2 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c0014f54:	59                   	pop    ecx
c0014f55:	58                   	pop    eax
c0014f56:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c0014f5b:	68 3a af 02 c0       	push   0xc002af3a
c0014f60:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f66:	e8 05 c2 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c0014f6b:	58                   	pop    eax
c0014f6c:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c0014f71:	5a                   	pop    edx
c0014f72:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014f75:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f7b:	e8 16 c2 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c0014f80:	59                   	pop    ecx
c0014f81:	58                   	pop    eax
c0014f82:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c0014f87:	68 42 af 02 c0       	push   0xc002af42
c0014f8c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f92:	e8 d9 c1 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c0014f97:	58                   	pop    eax
c0014f98:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c0014f9d:	5a                   	pop    edx
c0014f9e:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014fa1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fa7:	e8 ea c1 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c0014fac:	59                   	pop    ecx
c0014fad:	58                   	pop    eax
c0014fae:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c0014fb3:	68 4a af 02 c0       	push   0xc002af4a
c0014fb8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fbe:	e8 ad c1 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c0014fc3:	58                   	pop    eax
c0014fc4:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c0014fc9:	5a                   	pop    edx
c0014fca:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014fcd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fd3:	e8 be c1 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c0014fd8:	59                   	pop    ecx
c0014fd9:	58                   	pop    eax
c0014fda:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c0014fdf:	68 52 af 02 c0       	push   0xc002af52
c0014fe4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fea:	e8 81 c1 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c0014fef:	58                   	pop    eax
c0014ff0:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c0014ff5:	5a                   	pop    edx
c0014ff6:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014ff9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fff:	e8 92 c1 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c0015004:	59                   	pop    ecx
c0015005:	58                   	pop    eax
c0015006:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c001500b:	68 5a af 02 c0       	push   0xc002af5a
c0015010:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015016:	e8 55 c1 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001501b:	58                   	pop    eax
c001501c:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c0015021:	5a                   	pop    edx
c0015022:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015026:	52                   	push   edx
c0015027:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001502d:	e8 64 c1 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c0015032:	59                   	pop    ecx
c0015033:	58                   	pop    eax
c0015034:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c0015039:	68 63 af 02 c0       	push   0xc002af63
c001503e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015044:	e8 27 c1 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c0015049:	58                   	pop    eax
c001504a:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c001504f:	5a                   	pop    edx
c0015050:	57                   	push   edi
c0015051:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015057:	e8 3a c1 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c001505c:	59                   	pop    ecx
c001505d:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c0015062:	5f                   	pop    edi
c0015063:	68 6b af 02 c0       	push   0xc002af6b
c0015068:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001506e:	e8 fd c0 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c0015073:	58                   	pop    eax
c0015074:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c0015079:	5a                   	pop    edx
c001507a:	56                   	push   esi
c001507b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015081:	e8 10 c1 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c0015086:	59                   	pop    ecx
c0015087:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c001508c:	5e                   	pop    esi
c001508d:	68 73 af 02 c0       	push   0xc002af73
c0015092:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015098:	e8 d3 c0 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001509d:	5f                   	pop    edi
c001509e:	58                   	pop    eax
c001509f:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c00150a4:	55                   	push   ebp
c00150a5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150ab:	e8 e6 c0 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c00150b0:	58                   	pop    eax
c00150b1:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c00150b6:	5a                   	pop    edx
c00150b7:	68 7b af 02 c0       	push   0xc002af7b
c00150bc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150c2:	e8 a9 c0 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c00150c7:	0f 21 c0             	mov    eax,db0
c00150ca:	59                   	pop    ecx
c00150cb:	5e                   	pop    esi
c00150cc:	50                   	push   eax
c00150cd:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c00150d2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150d8:	e8 b9 c0 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c00150dd:	5f                   	pop    edi
c00150de:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c00150e3:	5d                   	pop    ebp
c00150e4:	68 84 af 02 c0       	push   0xc002af84
c00150e9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150ef:	e8 7c c0 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c00150f4:	0f 21 c8             	mov    eax,db1
c00150f7:	5a                   	pop    edx
c00150f8:	59                   	pop    ecx
c00150f9:	50                   	push   eax
c00150fa:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c00150ff:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015105:	e8 8c c0 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c001510a:	5e                   	pop    esi
c001510b:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c0015110:	5f                   	pop    edi
c0015111:	68 8c af 02 c0       	push   0xc002af8c
c0015116:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001511c:	e8 4f c0 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c0015121:	0f 21 d0             	mov    eax,db2
c0015124:	5d                   	pop    ebp
c0015125:	5a                   	pop    edx
c0015126:	50                   	push   eax
c0015127:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c001512c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015132:	e8 5f c0 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c0015137:	59                   	pop    ecx
c0015138:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c001513d:	5e                   	pop    esi
c001513e:	68 94 af 02 c0       	push   0xc002af94
c0015143:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015149:	e8 22 c0 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001514e:	0f 21 d8             	mov    eax,db3
c0015151:	5f                   	pop    edi
c0015152:	5d                   	pop    ebp
c0015153:	50                   	push   eax
c0015154:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c0015159:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001515f:	e8 32 c0 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c0015164:	58                   	pop    eax
c0015165:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c001516a:	5a                   	pop    edx
c001516b:	68 9c af 02 c0       	push   0xc002af9c
c0015170:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015176:	e8 f5 bf ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001517b:	0f 21 f0             	mov    eax,db6
c001517e:	59                   	pop    ecx
c001517f:	5e                   	pop    esi
c0015180:	50                   	push   eax
c0015181:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c0015186:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001518c:	e8 05 c0 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c0015191:	5f                   	pop    edi
c0015192:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c0015197:	5d                   	pop    ebp
c0015198:	68 a4 af 02 c0       	push   0xc002afa4
c001519d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151a3:	e8 c8 bf ff ff       	call   c0011170 <VgaText::puts(char const*)>
c00151a8:	0f 21 f8             	mov    eax,db7
c00151ab:	5a                   	pop    edx
c00151ac:	59                   	pop    ecx
c00151ad:	50                   	push   eax
c00151ae:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c00151b3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151b9:	e8 d8 bf ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c00151be:	5e                   	pop    esi
c00151bf:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00151c2:	e8 16 85 00 00       	call   c001d6dd <Thr::getDriverNameFromAddress(unsigned long)>
c00151c7:	83 c4 10             	add    esp,0x10
c00151ca:	85 c0                	test   eax,eax
c00151cc:	74 7d                	je     c001524b <displayDebugInfo(regs*)+0x48b>
c00151ce:	89 c6                	mov    esi,eax
c00151d0:	50                   	push   eax
c00151d1:	50                   	push   eax
c00151d2:	56                   	push   esi
c00151d3:	68 ac af 02 c0       	push   0xc002afac
c00151d8:	e8 6d dd ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c00151dd:	5a                   	pop    edx
c00151de:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c00151e3:	59                   	pop    ecx
c00151e4:	68 ba af 02 c0       	push   0xc002afba
c00151e9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151ef:	e8 7c bf ff ff       	call   c0011170 <VgaText::puts(char const*)>
c00151f4:	5f                   	pop    edi
c00151f5:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c00151fa:	5d                   	pop    ebp
c00151fb:	56                   	push   esi
c00151fc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015202:	e8 69 bf ff ff       	call   c0011170 <VgaText::puts(char const*)>
c0015207:	58                   	pop    eax
c0015208:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c001520d:	5a                   	pop    edx
c001520e:	68 c6 af 02 c0       	push   0xc002afc6
c0015213:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015219:	e8 52 bf ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001521e:	59                   	pop    ecx
c001521f:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c0015224:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c001522a:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001522d:	e8 e2 84 00 00       	call   c001d714 <Thr::getDriverOffsetFromAddress(unsigned long)>
c0015232:	5b                   	pop    ebx
c0015233:	5d                   	pop    ebp
c0015234:	50                   	push   eax
c0015235:	57                   	push   edi
c0015236:	e8 5b bf ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c001523b:	58                   	pop    eax
c001523c:	5a                   	pop    edx
c001523d:	56                   	push   esi
c001523e:	68 d2 af 02 c0       	push   0xc002afd2
c0015243:	e8 02 dd ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0015248:	83 c4 10             	add    esp,0x10
c001524b:	fa                   	cli    
c001524c:	f4                   	hlt    
c001524d:	eb fe                	jmp    c001524d <displayDebugInfo(regs*)+0x48d>

c001524f <x87EmulHandler(regs*, void*)>:
c001524f:	53                   	push   ebx
c0015250:	83 ec 14             	sub    esp,0x14
c0015253:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015257:	53                   	push   ebx
c0015258:	e8 0d a8 00 00       	call   c001fa6a <Vm::x87Handler(regs*)>
c001525d:	83 c4 10             	add    esp,0x10
c0015260:	84 c0                	test   al,al
c0015262:	74 05                	je     c0015269 <x87EmulHandler(regs*, void*)+0x1a>
c0015264:	83 c4 08             	add    esp,0x8
c0015267:	5b                   	pop    ebx
c0015268:	c3                   	ret    
c0015269:	83 ec 0c             	sub    esp,0xc
c001526c:	68 e2 af 02 c0       	push   0xc002afe2
c0015271:	e8 d4 dc ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0015276:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015279:	e8 42 fb ff ff       	call   c0014dc0 <displayDebugInfo(regs*)>

c001527e <gpFault(regs*, void*)>:
c001527e:	53                   	push   ebx
c001527f:	83 ec 14             	sub    esp,0x14
c0015282:	c7 05 b8 e5 02 c0 e7 ed 01 c0 	mov    DWORD PTR ds:0xc002e5b8,0xc001ede7
c001528c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015290:	53                   	push   ebx
c0015291:	e8 51 9b 00 00       	call   c001ede7 <Vm::faultHandler(regs*)>
c0015296:	83 c4 10             	add    esp,0x10
c0015299:	84 c0                	test   al,al
c001529b:	74 05                	je     c00152a2 <gpFault(regs*, void*)+0x24>
c001529d:	83 c4 08             	add    esp,0x8
c00152a0:	5b                   	pop    ebx
c00152a1:	c3                   	ret    
c00152a2:	83 ec 0c             	sub    esp,0xc
c00152a5:	68 f8 af 02 c0       	push   0xc002aff8
c00152aa:	e8 9b dc ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c00152af:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00152b2:	e8 09 fb ff ff       	call   c0014dc0 <displayDebugInfo(regs*)>

c00152b7 <pgFault(regs*, void*)>:
c00152b7:	53                   	push   ebx
c00152b8:	83 ec 14             	sub    esp,0x14
c00152bb:	68 13 b0 02 c0       	push   0xc002b013
c00152c0:	e8 85 dc ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c00152c5:	0f 20 d3             	mov    ebx,cr2
c00152c8:	58                   	pop    eax
c00152c9:	5a                   	pop    edx
c00152ca:	53                   	push   ebx
c00152cb:	68 20 b0 02 c0       	push   0xc002b020
c00152d0:	e8 75 dc ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c00152d5:	59                   	pop    ecx
c00152d6:	58                   	pop    eax
c00152d7:	53                   	push   ebx
c00152d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152dd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00152e0:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c00152e6:	e8 75 d8 ff ff       	call   c0012b60 <VAS::tryLoadBackOffDisk(unsigned long)>
c00152eb:	83 c4 10             	add    esp,0x10
c00152ee:	84 c0                	test   al,al
c00152f0:	74 05                	je     c00152f7 <pgFault(regs*, void*)+0x40>
c00152f2:	83 c4 08             	add    esp,0x8
c00152f5:	5b                   	pop    ebx
c00152f6:	c3                   	ret    
c00152f7:	83 ec 0c             	sub    esp,0xc
c00152fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00152fe:	e8 bd fa ff ff       	call   c0014dc0 <displayDebugInfo(regs*)>

c0015303 <otherISRHandler(regs*, void*)>:
c0015303:	53                   	push   ebx
c0015304:	83 ec 0c             	sub    esp,0xc
c0015307:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001530b:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c001530e:	50                   	push   eax
c001530f:	50                   	push   eax
c0015310:	68 2c b0 02 c0       	push   0xc002b02c
c0015315:	e8 30 dc ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001531a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001531d:	e8 9e fa ff ff       	call   c0014dc0 <displayDebugInfo(regs*)>

c0015322 <opcodeFault(regs*, void*)>:
c0015322:	55                   	push   ebp
c0015323:	89 e5                	mov    ebp,esp
c0015325:	56                   	push   esi
c0015326:	53                   	push   ebx
c0015327:	83 ec 40             	sub    esp,0x40
c001532a:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c001532f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015335:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c001533b:	84 c0                	test   al,al
c001533d:	74 24                	je     c0015363 <opcodeFault(regs*, void*)+0x41>
c001533f:	83 ec 0c             	sub    esp,0xc
c0015342:	68 4c b0 02 c0       	push   0xc002b04c
c0015347:	e8 fe db ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001534c:	83 c4 10             	add    esp,0x10
c001534f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015352:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015355:	8d 50 19             	lea    edx,[eax+0x19]
c0015358:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001535b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001535e:	e9 be 05 00 00       	jmp    c0015921 <opcodeFault(regs*, void*)+0x5ff>
c0015363:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015366:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015369:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001536c:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0015370:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0015374:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015377:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001537a:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001537d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015380:	8a 00                	mov    al,BYTE PTR [eax]
c0015382:	3c f0                	cmp    al,0xf0
c0015384:	75 17                	jne    c001539d <opcodeFault(regs*, void*)+0x7b>
c0015386:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015389:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001538c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001538f:	8d 50 01             	lea    edx,[eax+0x1]
c0015392:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015395:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015398:	e9 da 00 00 00       	jmp    c0015477 <opcodeFault(regs*, void*)+0x155>
c001539d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153a0:	8a 00                	mov    al,BYTE PTR [eax]
c00153a2:	3c f2                	cmp    al,0xf2
c00153a4:	74 09                	je     c00153af <opcodeFault(regs*, void*)+0x8d>
c00153a6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153a9:	8a 00                	mov    al,BYTE PTR [eax]
c00153ab:	3c f3                	cmp    al,0xf3
c00153ad:	75 1b                	jne    c00153ca <opcodeFault(regs*, void*)+0xa8>
c00153af:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00153b3:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153b9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153bc:	8d 50 01             	lea    edx,[eax+0x1]
c00153bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153c2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153c5:	e9 ad 00 00 00       	jmp    c0015477 <opcodeFault(regs*, void*)+0x155>
c00153ca:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153cd:	8a 00                	mov    al,BYTE PTR [eax]
c00153cf:	3c 66                	cmp    al,0x66
c00153d1:	75 1f                	jne    c00153f2 <opcodeFault(regs*, void*)+0xd0>
c00153d3:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00153d7:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c00153db:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153e1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153e4:	8d 50 01             	lea    edx,[eax+0x1]
c00153e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153ea:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153ed:	e9 85 00 00 00       	jmp    c0015477 <opcodeFault(regs*, void*)+0x155>
c00153f2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153f5:	8a 00                	mov    al,BYTE PTR [eax]
c00153f7:	3c 67                	cmp    al,0x67
c00153f9:	75 18                	jne    c0015413 <opcodeFault(regs*, void*)+0xf1>
c00153fb:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00153ff:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015402:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015405:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015408:	8d 50 01             	lea    edx,[eax+0x1]
c001540b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001540e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015411:	eb 64                	jmp    c0015477 <opcodeFault(regs*, void*)+0x155>
c0015413:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015416:	8a 00                	mov    al,BYTE PTR [eax]
c0015418:	3c 2e                	cmp    al,0x2e
c001541a:	74 09                	je     c0015425 <opcodeFault(regs*, void*)+0x103>
c001541c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001541f:	8a 00                	mov    al,BYTE PTR [eax]
c0015421:	3c 3e                	cmp    al,0x3e
c0015423:	75 18                	jne    c001543d <opcodeFault(regs*, void*)+0x11b>
c0015425:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015429:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001542c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001542f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015432:	8d 50 01             	lea    edx,[eax+0x1]
c0015435:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015438:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001543b:	eb 3a                	jmp    c0015477 <opcodeFault(regs*, void*)+0x155>
c001543d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015440:	8a 00                	mov    al,BYTE PTR [eax]
c0015442:	3c 36                	cmp    al,0x36
c0015444:	74 1b                	je     c0015461 <opcodeFault(regs*, void*)+0x13f>
c0015446:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015449:	8a 00                	mov    al,BYTE PTR [eax]
c001544b:	3c 26                	cmp    al,0x26
c001544d:	74 12                	je     c0015461 <opcodeFault(regs*, void*)+0x13f>
c001544f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015452:	8a 00                	mov    al,BYTE PTR [eax]
c0015454:	3c 64                	cmp    al,0x64
c0015456:	74 09                	je     c0015461 <opcodeFault(regs*, void*)+0x13f>
c0015458:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001545b:	8a 00                	mov    al,BYTE PTR [eax]
c001545d:	3c 65                	cmp    al,0x65
c001545f:	75 16                	jne    c0015477 <opcodeFault(regs*, void*)+0x155>
c0015461:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015465:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015468:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001546b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001546e:	8d 50 01             	lea    edx,[eax+0x1]
c0015471:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015474:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015477:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001547a:	8a 00                	mov    al,BYTE PTR [eax]
c001547c:	3c 0f                	cmp    al,0xf
c001547e:	0f 85 ad 00 00 00    	jne    c0015531 <opcodeFault(regs*, void*)+0x20f>
c0015484:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015487:	40                   	inc    eax
c0015488:	8a 00                	mov    al,BYTE PTR [eax]
c001548a:	3c c2                	cmp    al,0xc2
c001548c:	74 0e                	je     c001549c <opcodeFault(regs*, void*)+0x17a>
c001548e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015491:	40                   	inc    eax
c0015492:	8a 00                	mov    al,BYTE PTR [eax]
c0015494:	3c c3                	cmp    al,0xc3
c0015496:	0f 85 95 00 00 00    	jne    c0015531 <opcodeFault(regs*, void*)+0x20f>
c001549c:	83 ec 0c             	sub    esp,0xc
c001549f:	68 6f b0 02 c0       	push   0xc002b06f
c00154a4:	e8 a1 da ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c00154a9:	83 c4 10             	add    esp,0x10
c00154ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154af:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154b2:	8d 50 01             	lea    edx,[eax+0x1]
c00154b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154b8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00154bb:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00154be:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154c1:	8a 00                	mov    al,BYTE PTR [eax]
c00154c3:	8d 50 fe             	lea    edx,[eax-0x2]
c00154c6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154c9:	88 10                	mov    BYTE PTR [eax],dl
c00154cb:	8d 45 c2             	lea    eax,[ebp-0x3e]
c00154ce:	50                   	push   eax
c00154cf:	8d 45 c3             	lea    eax,[ebp-0x3d]
c00154d2:	50                   	push   eax
c00154d3:	8d 45 c4             	lea    eax,[ebp-0x3c]
c00154d6:	50                   	push   eax
c00154d7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00154da:	e8 e3 47 00 00       	call   c0019cc2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00154df:	83 c4 10             	add    esp,0x10
c00154e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154e5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154e8:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c00154eb:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c00154ee:	01 d0                	add    eax,edx
c00154f0:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00154f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154f6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154f9:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c00154fc:	48                   	dec    eax
c00154fd:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0015500:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015503:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0015506:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015509:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001550c:	83 ec 04             	sub    esp,0x4
c001550f:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015512:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015515:	50                   	push   eax
c0015516:	e8 99 ac fe ff       	call   c00001b4 <voodooXADD>
c001551b:	83 c4 10             	add    esp,0x10
c001551e:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0015521:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0015524:	01 c2                	add    edx,eax
c0015526:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015529:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001552c:	e9 f0 03 00 00       	jmp    c0015921 <opcodeFault(regs*, void*)+0x5ff>
c0015531:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015534:	8a 00                	mov    al,BYTE PTR [eax]
c0015536:	3c 0f                	cmp    al,0xf
c0015538:	0f 85 8b 01 00 00    	jne    c00156c9 <opcodeFault(regs*, void*)+0x3a7>
c001553e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015541:	40                   	inc    eax
c0015542:	8a 00                	mov    al,BYTE PTR [eax]
c0015544:	3c c7                	cmp    al,0xc7
c0015546:	0f 86 7d 01 00 00    	jbe    c00156c9 <opcodeFault(regs*, void*)+0x3a7>
c001554c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001554f:	40                   	inc    eax
c0015550:	8a 00                	mov    al,BYTE PTR [eax]
c0015552:	3c cf                	cmp    al,0xcf
c0015554:	0f 87 6f 01 00 00    	ja     c00156c9 <opcodeFault(regs*, void*)+0x3a7>
c001555a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001555d:	40                   	inc    eax
c001555e:	8a 00                	mov    al,BYTE PTR [eax]
c0015560:	83 c0 38             	add    eax,0x38
c0015563:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0015566:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c001556a:	75 0b                	jne    c0015577 <opcodeFault(regs*, void*)+0x255>
c001556c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001556f:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015572:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015575:	eb 75                	jmp    c00155ec <opcodeFault(regs*, void*)+0x2ca>
c0015577:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001557b:	75 0b                	jne    c0015588 <opcodeFault(regs*, void*)+0x266>
c001557d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015580:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015583:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015586:	eb 64                	jmp    c00155ec <opcodeFault(regs*, void*)+0x2ca>
c0015588:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c001558c:	75 0b                	jne    c0015599 <opcodeFault(regs*, void*)+0x277>
c001558e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015591:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015594:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015597:	eb 53                	jmp    c00155ec <opcodeFault(regs*, void*)+0x2ca>
c0015599:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c001559d:	75 0b                	jne    c00155aa <opcodeFault(regs*, void*)+0x288>
c001559f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155a2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00155a5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155a8:	eb 42                	jmp    c00155ec <opcodeFault(regs*, void*)+0x2ca>
c00155aa:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00155ae:	75 0b                	jne    c00155bb <opcodeFault(regs*, void*)+0x299>
c00155b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155b3:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00155b6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155b9:	eb 31                	jmp    c00155ec <opcodeFault(regs*, void*)+0x2ca>
c00155bb:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00155bf:	75 0b                	jne    c00155cc <opcodeFault(regs*, void*)+0x2aa>
c00155c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155c4:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00155c7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155ca:	eb 20                	jmp    c00155ec <opcodeFault(regs*, void*)+0x2ca>
c00155cc:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00155d0:	75 0b                	jne    c00155dd <opcodeFault(regs*, void*)+0x2bb>
c00155d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155d5:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00155d8:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155db:	eb 0f                	jmp    c00155ec <opcodeFault(regs*, void*)+0x2ca>
c00155dd:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00155e1:	75 09                	jne    c00155ec <opcodeFault(regs*, void*)+0x2ca>
c00155e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155e6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00155e9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155ec:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c00155f0:	74 10                	je     c0015602 <opcodeFault(regs*, void*)+0x2e0>
c00155f2:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c00155f9:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0015600:	eb 2d                	jmp    c001562f <opcodeFault(regs*, void*)+0x30d>
c0015602:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015605:	c1 e0 18             	shl    eax,0x18
c0015608:	89 c2                	mov    edx,eax
c001560a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001560d:	c1 e0 08             	shl    eax,0x8
c0015610:	25 00 00 ff 00       	and    eax,0xff0000
c0015615:	09 c2                	or     edx,eax
c0015617:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001561a:	c1 e8 08             	shr    eax,0x8
c001561d:	25 00 ff 00 00       	and    eax,0xff00
c0015622:	09 c2                	or     edx,eax
c0015624:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015627:	c1 e8 18             	shr    eax,0x18
c001562a:	09 d0                	or     eax,edx
c001562c:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001562f:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0015633:	75 0b                	jne    c0015640 <opcodeFault(regs*, void*)+0x31e>
c0015635:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015638:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001563b:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001563e:	eb 75                	jmp    c00156b5 <opcodeFault(regs*, void*)+0x393>
c0015640:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0015644:	75 0b                	jne    c0015651 <opcodeFault(regs*, void*)+0x32f>
c0015646:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015649:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001564c:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001564f:	eb 64                	jmp    c00156b5 <opcodeFault(regs*, void*)+0x393>
c0015651:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0015655:	75 0b                	jne    c0015662 <opcodeFault(regs*, void*)+0x340>
c0015657:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001565a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001565d:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015660:	eb 53                	jmp    c00156b5 <opcodeFault(regs*, void*)+0x393>
c0015662:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0015666:	75 0b                	jne    c0015673 <opcodeFault(regs*, void*)+0x351>
c0015668:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001566b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001566e:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0015671:	eb 42                	jmp    c00156b5 <opcodeFault(regs*, void*)+0x393>
c0015673:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0015677:	75 0b                	jne    c0015684 <opcodeFault(regs*, void*)+0x362>
c0015679:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001567c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001567f:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0015682:	eb 31                	jmp    c00156b5 <opcodeFault(regs*, void*)+0x393>
c0015684:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0015688:	75 0b                	jne    c0015695 <opcodeFault(regs*, void*)+0x373>
c001568a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001568d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015690:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015693:	eb 20                	jmp    c00156b5 <opcodeFault(regs*, void*)+0x393>
c0015695:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0015699:	75 0b                	jne    c00156a6 <opcodeFault(regs*, void*)+0x384>
c001569b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001569e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00156a1:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00156a4:	eb 0f                	jmp    c00156b5 <opcodeFault(regs*, void*)+0x393>
c00156a6:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00156aa:	75 09                	jne    c00156b5 <opcodeFault(regs*, void*)+0x393>
c00156ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156af:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00156b2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00156b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156b8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00156bb:	8d 50 02             	lea    edx,[eax+0x2]
c00156be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156c1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00156c4:	e9 58 02 00 00       	jmp    c0015921 <opcodeFault(regs*, void*)+0x5ff>
c00156c9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156cc:	8a 00                	mov    al,BYTE PTR [eax]
c00156ce:	3c 0f                	cmp    al,0xf
c00156d0:	0f 85 76 01 00 00    	jne    c001584c <opcodeFault(regs*, void*)+0x52a>
c00156d6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156d9:	40                   	inc    eax
c00156da:	8a 00                	mov    al,BYTE PTR [eax]
c00156dc:	3c c7                	cmp    al,0xc7
c00156de:	0f 85 68 01 00 00    	jne    c001584c <opcodeFault(regs*, void*)+0x52a>
c00156e4:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00156e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156ea:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00156ed:	8d 50 01             	lea    edx,[eax+0x1]
c00156f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156f3:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00156f6:	8d 45 ba             	lea    eax,[ebp-0x46]
c00156f9:	50                   	push   eax
c00156fa:	8d 45 bb             	lea    eax,[ebp-0x45]
c00156fd:	50                   	push   eax
c00156fe:	8d 45 bc             	lea    eax,[ebp-0x44]
c0015701:	50                   	push   eax
c0015702:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015705:	e8 b8 45 00 00       	call   c0019cc2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001570a:	83 c4 10             	add    esp,0x10
c001570d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0015710:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0015713:	83 f0 01             	xor    eax,0x1
c0015716:	84 c0                	test   al,al
c0015718:	0f 84 2e 01 00 00    	je     c001584c <opcodeFault(regs*, void*)+0x52a>
c001571e:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0015721:	3c 01                	cmp    al,0x1
c0015723:	0f 85 23 01 00 00    	jne    c001584c <opcodeFault(regs*, void*)+0x52a>
c0015729:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c001572c:	83 f0 01             	xor    eax,0x1
c001572f:	84 c0                	test   al,al
c0015731:	0f 84 15 01 00 00    	je     c001584c <opcodeFault(regs*, void*)+0x52a>
c0015737:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001573a:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001573d:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015740:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0015747:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001574a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001574d:	89 c2                	mov    edx,eax
c001574f:	b8 00 00 00 00       	mov    eax,0x0
c0015754:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015757:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c001575a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001575d:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015760:	ba 00 00 00 00       	mov    edx,0x0
c0015765:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0015768:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c001576b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001576e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015771:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015774:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c001577b:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c001577e:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015781:	89 c2                	mov    edx,eax
c0015783:	b8 00 00 00 00       	mov    eax,0x0
c0015788:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c001578b:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c001578e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015791:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015794:	ba 00 00 00 00       	mov    edx,0x0
c0015799:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c001579c:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c001579f:	e8 32 86 00 00       	call   c001ddd6 <lockScheduler()>
c00157a4:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00157a7:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00157aa:	8b 00                	mov    eax,DWORD PTR [eax]
c00157ac:	89 c1                	mov    ecx,eax
c00157ae:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c00157b1:	89 cb                	mov    ebx,ecx
c00157b3:	89 d0                	mov    eax,edx
c00157b5:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c00157b8:	89 c6                	mov    esi,eax
c00157ba:	89 f0                	mov    eax,esi
c00157bc:	09 d8                	or     eax,ebx
c00157be:	85 c0                	test   eax,eax
c00157c0:	75 21                	jne    c00157e3 <opcodeFault(regs*, void*)+0x4c1>
c00157c2:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00157c5:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00157c8:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00157cb:	89 01                	mov    DWORD PTR [ecx],eax
c00157cd:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00157d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157d3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00157d6:	83 c8 40             	or     eax,0x40
c00157d9:	89 c2                	mov    edx,eax
c00157db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157de:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00157e1:	eb 3e                	jmp    c0015821 <opcodeFault(regs*, void*)+0x4ff>
c00157e3:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00157e6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00157e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00157eb:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00157ee:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00157f1:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00157f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157f7:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00157fa:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00157fd:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015800:	89 d0                	mov    eax,edx
c0015802:	31 d2                	xor    edx,edx
c0015804:	89 c3                	mov    ebx,eax
c0015806:	89 d6                	mov    esi,edx
c0015808:	89 da                	mov    edx,ebx
c001580a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001580d:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015810:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015813:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015816:	83 e0 bf             	and    eax,0xffffffbf
c0015819:	89 c2                	mov    edx,eax
c001581b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001581e:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015821:	e8 b2 85 00 00       	call   c001ddd8 <unlockScheduler()>
c0015826:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015829:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001582c:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c001582f:	01 c2                	add    edx,eax
c0015831:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015834:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015837:	83 ec 0c             	sub    esp,0xc
c001583a:	68 7e b0 02 c0       	push   0xc002b07e
c001583f:	e8 06 d7 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0015844:	83 c4 10             	add    esp,0x10
c0015847:	e9 d5 00 00 00       	jmp    c0015921 <opcodeFault(regs*, void*)+0x5ff>
c001584c:	83 ec 0c             	sub    esp,0xc
c001584f:	68 91 b0 02 c0       	push   0xc002b091
c0015854:	e8 f1 d6 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0015859:	83 c4 10             	add    esp,0x10
c001585c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001585f:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015862:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015865:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015868:	c1 e0 04             	shl    eax,0x4
c001586b:	01 d0                	add    eax,edx
c001586d:	83 c0 03             	add    eax,0x3
c0015870:	8a 00                	mov    al,BYTE PTR [eax]
c0015872:	0f b6 d8             	movzx  ebx,al
c0015875:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015878:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001587b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001587e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015881:	c1 e0 04             	shl    eax,0x4
c0015884:	01 d0                	add    eax,edx
c0015886:	83 c0 02             	add    eax,0x2
c0015889:	8a 00                	mov    al,BYTE PTR [eax]
c001588b:	0f b6 c8             	movzx  ecx,al
c001588e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015891:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015894:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015897:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001589a:	c1 e0 04             	shl    eax,0x4
c001589d:	01 d0                	add    eax,edx
c001589f:	40                   	inc    eax
c00158a0:	8a 00                	mov    al,BYTE PTR [eax]
c00158a2:	0f b6 d0             	movzx  edx,al
c00158a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158a8:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c00158ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158ae:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00158b1:	c1 e0 04             	shl    eax,0x4
c00158b4:	01 f0                	add    eax,esi
c00158b6:	8a 00                	mov    al,BYTE PTR [eax]
c00158b8:	0f b6 c0             	movzx  eax,al
c00158bb:	83 ec 0c             	sub    esp,0xc
c00158be:	53                   	push   ebx
c00158bf:	51                   	push   ecx
c00158c0:	52                   	push   edx
c00158c1:	50                   	push   eax
c00158c2:	68 a4 b0 02 c0       	push   0xc002b0a4
c00158c7:	e8 7e d6 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c00158cc:	83 c4 20             	add    esp,0x20
c00158cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158d2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158d5:	83 c0 03             	add    eax,0x3
c00158d8:	8a 00                	mov    al,BYTE PTR [eax]
c00158da:	0f b6 d8             	movzx  ebx,al
c00158dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158e0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158e3:	83 c0 02             	add    eax,0x2
c00158e6:	8a 00                	mov    al,BYTE PTR [eax]
c00158e8:	0f b6 c8             	movzx  ecx,al
c00158eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158ee:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158f1:	40                   	inc    eax
c00158f2:	8a 00                	mov    al,BYTE PTR [eax]
c00158f4:	0f b6 d0             	movzx  edx,al
c00158f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158fa:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158fd:	8a 00                	mov    al,BYTE PTR [eax]
c00158ff:	0f b6 c0             	movzx  eax,al
c0015902:	83 ec 0c             	sub    esp,0xc
c0015905:	53                   	push   ebx
c0015906:	51                   	push   ecx
c0015907:	52                   	push   edx
c0015908:	50                   	push   eax
c0015909:	68 cc b0 02 c0       	push   0xc002b0cc
c001590e:	e8 37 d6 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0015913:	83 c4 20             	add    esp,0x20
c0015916:	83 ec 0c             	sub    esp,0xc
c0015919:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001591c:	e8 9f f4 ff ff       	call   c0014dc0 <displayDebugInfo(regs*)>
c0015921:	8d 65 f8             	lea    esp,[ebp-0x8]
c0015924:	5b                   	pop    ebx
c0015925:	5e                   	pop    esi
c0015926:	5d                   	pop    ebp
c0015927:	c3                   	ret    

c0015928 <displayProgramFault(char const*)>:
c0015928:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001592d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015930:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015936:	85 c0                	test   eax,eax
c0015938:	74 15                	je     c001594f <displayProgramFault(char const*)+0x27>
c001593a:	83 ec 0c             	sub    esp,0xc
c001593d:	6a 04                	push   0x4
c001593f:	6a 0f                	push   0xf
c0015941:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015945:	50                   	push   eax
c0015946:	e8 e7 b4 ff ff       	call   c0010e32 <VgaText::puts(char const*, VgaColour, VgaColour)>
c001594b:	83 c4 1c             	add    esp,0x1c
c001594e:	c3                   	ret    
c001594f:	c3                   	ret    

c0015950 <setupInterruptController()>:
c0015950:	55                   	push   ebp
c0015951:	89 e5                	mov    ebp,esp
c0015953:	53                   	push   ebx
c0015954:	83 ec 24             	sub    esp,0x24
c0015957:	b8 00 00 00 00       	mov    eax,0x0
c001595c:	85 c0                	test   eax,eax
c001595e:	0f 95 c0             	setne  al
c0015961:	84 c0                	test   al,al
c0015963:	74 5b                	je     c00159c0 <setupInterruptController()+0x70>
c0015965:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c001596c:	83 ec 0c             	sub    esp,0xc
c001596f:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0015972:	e8 c9 9e ff ff       	call   c000f840 <malloc>
c0015977:	83 c4 10             	add    esp,0x10
c001597a:	89 c3                	mov    ebx,eax
c001597c:	83 ec 0c             	sub    esp,0xc
c001597f:	53                   	push   ebx
c0015980:	e8 a9 ff 00 00       	call   c002592e <APIC::APIC()>
c0015985:	83 c4 10             	add    esp,0x10
c0015988:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c001598b:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c001598e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015991:	8b 00                	mov    eax,DWORD PTR [eax]
c0015993:	83 c0 08             	add    eax,0x8
c0015996:	8b 00                	mov    eax,DWORD PTR [eax]
c0015998:	6a 00                	push   0x0
c001599a:	6a 00                	push   0x0
c001599c:	6a 00                	push   0x0
c001599e:	52                   	push   edx
c001599f:	ff d0                	call   eax
c00159a1:	83 c4 10             	add    esp,0x10
c00159a4:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c00159a9:	83 ec 08             	sub    esp,0x8
c00159ac:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00159af:	50                   	push   eax
c00159b0:	e8 bb e9 ff ff       	call   c0014370 <Device::addChild(Device*)>
c00159b5:	83 c4 10             	add    esp,0x10
c00159b8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00159bb:	e9 52 03 00 00       	jmp    c0015d12 <setupInterruptController()+0x3c2>
c00159c0:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c00159c5:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00159cb:	83 e0 01             	and    eax,0x1
c00159ce:	84 c0                	test   al,al
c00159d0:	0f 95 c0             	setne  al
c00159d3:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00159d6:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c00159dd:	83 ec 0c             	sub    esp,0xc
c00159e0:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00159e3:	e8 58 9e ff ff       	call   c000f840 <malloc>
c00159e8:	83 c4 10             	add    esp,0x10
c00159eb:	89 c3                	mov    ebx,eax
c00159ed:	83 ec 0c             	sub    esp,0xc
c00159f0:	53                   	push   ebx
c00159f1:	e8 90 04 01 00       	call   c0025e86 <PIC::PIC()>
c00159f6:	83 c4 10             	add    esp,0x10
c00159f9:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00159fc:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00159ff:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a02:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a04:	83 c0 08             	add    eax,0x8
c0015a07:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a09:	6a 00                	push   0x0
c0015a0b:	6a 00                	push   0x0
c0015a0d:	6a 00                	push   0x0
c0015a0f:	52                   	push   edx
c0015a10:	ff d0                	call   eax
c0015a12:	83 c4 10             	add    esp,0x10
c0015a15:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0015a19:	74 73                	je     c0015a8e <setupInterruptController()+0x13e>
c0015a1b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015a1e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a21:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a23:	83 c0 0c             	add    eax,0xc
c0015a26:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a28:	6a 00                	push   0x0
c0015a2a:	6a 00                	push   0x0
c0015a2c:	6a 00                	push   0x0
c0015a2e:	52                   	push   edx
c0015a2f:	ff d0                	call   eax
c0015a31:	83 c4 10             	add    esp,0x10
c0015a34:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015a38:	74 15                	je     c0015a4f <setupInterruptController()+0xff>
c0015a3a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a3d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a3f:	83 c0 04             	add    eax,0x4
c0015a42:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a44:	83 ec 0c             	sub    esp,0xc
c0015a47:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a4a:	ff d0                	call   eax
c0015a4c:	83 c4 10             	add    esp,0x10
c0015a4f:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015a56:	83 ec 0c             	sub    esp,0xc
c0015a59:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015a5c:	e8 df 9d ff ff       	call   c000f840 <malloc>
c0015a61:	83 c4 10             	add    esp,0x10
c0015a64:	89 c3                	mov    ebx,eax
c0015a66:	83 ec 0c             	sub    esp,0xc
c0015a69:	53                   	push   ebx
c0015a6a:	e8 bf fe 00 00       	call   c002592e <APIC::APIC()>
c0015a6f:	83 c4 10             	add    esp,0x10
c0015a72:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015a75:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015a78:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a7b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a7d:	83 c0 08             	add    eax,0x8
c0015a80:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a82:	6a 00                	push   0x0
c0015a84:	6a 00                	push   0x0
c0015a86:	6a 00                	push   0x0
c0015a88:	52                   	push   edx
c0015a89:	ff d0                	call   eax
c0015a8b:	83 c4 10             	add    esp,0x10
c0015a8e:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0015a93:	83 ec 08             	sub    esp,0x8
c0015a96:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a99:	50                   	push   eax
c0015a9a:	e8 d1 e8 ff ff       	call   c0014370 <Device::addChild(Device*)>
c0015a9f:	83 c4 10             	add    esp,0x10
c0015aa2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015aa5:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aa7:	83 c0 24             	add    eax,0x24
c0015aaa:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aac:	6a 00                	push   0x0
c0015aae:	68 03 53 01 c0       	push   0xc0015303
c0015ab3:	6a 00                	push   0x0
c0015ab5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ab8:	ff d0                	call   eax
c0015aba:	83 c4 10             	add    esp,0x10
c0015abd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ac0:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ac2:	83 c0 24             	add    eax,0x24
c0015ac5:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ac7:	6a 00                	push   0x0
c0015ac9:	68 03 53 01 c0       	push   0xc0015303
c0015ace:	6a 01                	push   0x1
c0015ad0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ad3:	ff d0                	call   eax
c0015ad5:	83 c4 10             	add    esp,0x10
c0015ad8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015adb:	8b 00                	mov    eax,DWORD PTR [eax]
c0015add:	83 c0 24             	add    eax,0x24
c0015ae0:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ae2:	6a 00                	push   0x0
c0015ae4:	68 1d 4c 01 c0       	push   0xc0014c1d
c0015ae9:	6a 02                	push   0x2
c0015aeb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015aee:	ff d0                	call   eax
c0015af0:	83 c4 10             	add    esp,0x10
c0015af3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015af6:	8b 00                	mov    eax,DWORD PTR [eax]
c0015af8:	83 c0 24             	add    eax,0x24
c0015afb:	8b 00                	mov    eax,DWORD PTR [eax]
c0015afd:	6a 00                	push   0x0
c0015aff:	68 03 53 01 c0       	push   0xc0015303
c0015b04:	6a 03                	push   0x3
c0015b06:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b09:	ff d0                	call   eax
c0015b0b:	83 c4 10             	add    esp,0x10
c0015b0e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b11:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b13:	83 c0 24             	add    eax,0x24
c0015b16:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b18:	6a 00                	push   0x0
c0015b1a:	68 03 53 01 c0       	push   0xc0015303
c0015b1f:	6a 04                	push   0x4
c0015b21:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b24:	ff d0                	call   eax
c0015b26:	83 c4 10             	add    esp,0x10
c0015b29:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b2c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b2e:	83 c0 24             	add    eax,0x24
c0015b31:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b33:	6a 00                	push   0x0
c0015b35:	68 03 53 01 c0       	push   0xc0015303
c0015b3a:	6a 05                	push   0x5
c0015b3c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b3f:	ff d0                	call   eax
c0015b41:	83 c4 10             	add    esp,0x10
c0015b44:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b47:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b49:	83 c0 24             	add    eax,0x24
c0015b4c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b4e:	6a 00                	push   0x0
c0015b50:	68 22 53 01 c0       	push   0xc0015322
c0015b55:	6a 06                	push   0x6
c0015b57:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b5a:	ff d0                	call   eax
c0015b5c:	83 c4 10             	add    esp,0x10
c0015b5f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b62:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b64:	83 c0 24             	add    eax,0x24
c0015b67:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b69:	6a 00                	push   0x0
c0015b6b:	68 4f 52 01 c0       	push   0xc001524f
c0015b70:	6a 07                	push   0x7
c0015b72:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b75:	ff d0                	call   eax
c0015b77:	83 c4 10             	add    esp,0x10
c0015b7a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b7d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b7f:	83 c0 24             	add    eax,0x24
c0015b82:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b84:	6a 00                	push   0x0
c0015b86:	68 38 4a 01 c0       	push   0xc0014a38
c0015b8b:	6a 08                	push   0x8
c0015b8d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b90:	ff d0                	call   eax
c0015b92:	83 c4 10             	add    esp,0x10
c0015b95:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b98:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b9a:	83 c0 24             	add    eax,0x24
c0015b9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b9f:	6a 00                	push   0x0
c0015ba1:	68 03 53 01 c0       	push   0xc0015303
c0015ba6:	6a 09                	push   0x9
c0015ba8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bab:	ff d0                	call   eax
c0015bad:	83 c4 10             	add    esp,0x10
c0015bb0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bb3:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bb5:	83 c0 24             	add    eax,0x24
c0015bb8:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bba:	6a 00                	push   0x0
c0015bbc:	68 03 53 01 c0       	push   0xc0015303
c0015bc1:	6a 0a                	push   0xa
c0015bc3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bc6:	ff d0                	call   eax
c0015bc8:	83 c4 10             	add    esp,0x10
c0015bcb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bce:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bd0:	83 c0 24             	add    eax,0x24
c0015bd3:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bd5:	6a 00                	push   0x0
c0015bd7:	68 03 53 01 c0       	push   0xc0015303
c0015bdc:	6a 0b                	push   0xb
c0015bde:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015be1:	ff d0                	call   eax
c0015be3:	83 c4 10             	add    esp,0x10
c0015be6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015be9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015beb:	83 c0 24             	add    eax,0x24
c0015bee:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bf0:	6a 00                	push   0x0
c0015bf2:	68 03 53 01 c0       	push   0xc0015303
c0015bf7:	6a 0c                	push   0xc
c0015bf9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bfc:	ff d0                	call   eax
c0015bfe:	83 c4 10             	add    esp,0x10
c0015c01:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c04:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c06:	83 c0 24             	add    eax,0x24
c0015c09:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c0b:	6a 00                	push   0x0
c0015c0d:	68 7e 52 01 c0       	push   0xc001527e
c0015c12:	6a 0d                	push   0xd
c0015c14:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c17:	ff d0                	call   eax
c0015c19:	83 c4 10             	add    esp,0x10
c0015c1c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c1f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c21:	83 c0 24             	add    eax,0x24
c0015c24:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c26:	6a 00                	push   0x0
c0015c28:	68 b7 52 01 c0       	push   0xc00152b7
c0015c2d:	6a 0e                	push   0xe
c0015c2f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c32:	ff d0                	call   eax
c0015c34:	83 c4 10             	add    esp,0x10
c0015c37:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c3a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c3c:	83 c0 24             	add    eax,0x24
c0015c3f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c41:	6a 00                	push   0x0
c0015c43:	68 03 53 01 c0       	push   0xc0015303
c0015c48:	6a 0f                	push   0xf
c0015c4a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c4d:	ff d0                	call   eax
c0015c4f:	83 c4 10             	add    esp,0x10
c0015c52:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c55:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c57:	83 c0 24             	add    eax,0x24
c0015c5a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c5c:	6a 00                	push   0x0
c0015c5e:	68 03 53 01 c0       	push   0xc0015303
c0015c63:	6a 10                	push   0x10
c0015c65:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c68:	ff d0                	call   eax
c0015c6a:	83 c4 10             	add    esp,0x10
c0015c6d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c70:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c72:	83 c0 24             	add    eax,0x24
c0015c75:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c77:	6a 00                	push   0x0
c0015c79:	68 03 53 01 c0       	push   0xc0015303
c0015c7e:	6a 11                	push   0x11
c0015c80:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c83:	ff d0                	call   eax
c0015c85:	83 c4 10             	add    esp,0x10
c0015c88:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c8b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c8d:	83 c0 24             	add    eax,0x24
c0015c90:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c92:	6a 00                	push   0x0
c0015c94:	68 03 53 01 c0       	push   0xc0015303
c0015c99:	6a 12                	push   0x12
c0015c9b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c9e:	ff d0                	call   eax
c0015ca0:	83 c4 10             	add    esp,0x10
c0015ca3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ca6:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ca8:	83 c0 24             	add    eax,0x24
c0015cab:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cad:	6a 00                	push   0x0
c0015caf:	68 03 53 01 c0       	push   0xc0015303
c0015cb4:	6a 13                	push   0x13
c0015cb6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cb9:	ff d0                	call   eax
c0015cbb:	83 c4 10             	add    esp,0x10
c0015cbe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cc1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cc3:	83 c0 24             	add    eax,0x24
c0015cc6:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cc8:	6a 00                	push   0x0
c0015cca:	68 03 53 01 c0       	push   0xc0015303
c0015ccf:	6a 14                	push   0x14
c0015cd1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cd4:	ff d0                	call   eax
c0015cd6:	83 c4 10             	add    esp,0x10
c0015cd9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cdc:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cde:	83 c0 24             	add    eax,0x24
c0015ce1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ce3:	6a 00                	push   0x0
c0015ce5:	68 03 53 01 c0       	push   0xc0015303
c0015cea:	6a 1e                	push   0x1e
c0015cec:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cef:	ff d0                	call   eax
c0015cf1:	83 c4 10             	add    esp,0x10
c0015cf4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cf7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cf9:	83 c0 24             	add    eax,0x24
c0015cfc:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cfe:	6a 00                	push   0x0
c0015d00:	68 85 c7 01 c0       	push   0xc001c785
c0015d05:	6a 60                	push   0x60
c0015d07:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d0a:	ff d0                	call   eax
c0015d0c:	83 c4 10             	add    esp,0x10
c0015d0f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d12:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015d15:	c9                   	leave  
c0015d16:	c3                   	ret    
c0015d17:	90                   	nop

c0015d18 <InterruptController::convertLegacyIRQNumber(int)>:
c0015d18:	55                   	push   ebp
c0015d19:	89 e5                	mov    ebp,esp
c0015d1b:	83 ec 08             	sub    esp,0x8
c0015d1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d21:	83 ec 0c             	sub    esp,0xc
c0015d24:	50                   	push   eax
c0015d25:	e8 32 e9 ff ff       	call   c001465c <Device::getName()>
c0015d2a:	83 c4 10             	add    esp,0x10
c0015d2d:	8a 00                	mov    al,BYTE PTR [eax]
c0015d2f:	3c 41                	cmp    al,0x41
c0015d31:	0f 94 c0             	sete   al
c0015d34:	84 c0                	test   al,al
c0015d36:	74 28                	je     c0015d60 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015d38:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015d3c:	7f 12                	jg     c0015d50 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015d3e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015d41:	05 60 d6 02 c0       	add    eax,0xc002d660
c0015d46:	8a 00                	mov    al,BYTE PTR [eax]
c0015d48:	0f b6 c0             	movzx  eax,al
c0015d4b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015d4e:	eb 10                	jmp    c0015d60 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015d50:	83 ec 0c             	sub    esp,0xc
c0015d53:	68 e0 ad 02 c0       	push   0xc002ade0
c0015d58:	e8 9e 48 00 00       	call   c001a5fb <Krnl::panic(char const*)>
c0015d5d:	83 c4 10             	add    esp,0x10
c0015d60:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015d63:	c9                   	leave  
c0015d64:	c3                   	ret    
c0015d65:	90                   	nop

c0015d66 <startGUI(void*)>:
c0015d66:	55                   	push   ebp
c0015d67:	89 e5                	mov    ebp,esp
c0015d69:	53                   	push   ebx
c0015d6a:	83 ec 04             	sub    esp,0x4
c0015d6d:	e8 66 80 00 00       	call   c001ddd8 <unlockScheduler()>
c0015d72:	8b 1d 08 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e408
c0015d78:	83 ec 08             	sub    esp,0x8
c0015d7b:	6a 01                	push   0x1
c0015d7d:	68 3c b1 02 c0       	push   0xc002b13c
c0015d82:	e8 a7 79 00 00       	call   c001d72e <Thr::loadDLL(char const*, bool)>
c0015d87:	83 c4 10             	add    esp,0x10
c0015d8a:	83 ec 08             	sub    esp,0x8
c0015d8d:	53                   	push   ebx
c0015d8e:	50                   	push   eax
c0015d8f:	e8 ce 7b 00 00       	call   c001d962 <Thr::executeDLL(unsigned long, void*)>
c0015d94:	83 c4 10             	add    esp,0x10
c0015d97:	8b 1d 08 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e408
c0015d9d:	83 ec 08             	sub    esp,0x8
c0015da0:	6a 01                	push   0x1
c0015da2:	68 56 b1 02 c0       	push   0xc002b156
c0015da7:	e8 82 79 00 00       	call   c001d72e <Thr::loadDLL(char const*, bool)>
c0015dac:	83 c4 10             	add    esp,0x10
c0015daf:	83 ec 08             	sub    esp,0x8
c0015db2:	53                   	push   ebx
c0015db3:	50                   	push   eax
c0015db4:	e8 a9 7b 00 00       	call   c001d962 <Thr::executeDLL(unsigned long, void*)>
c0015db9:	83 c4 10             	add    esp,0x10
c0015dbc:	90                   	nop
c0015dbd:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015dc0:	c9                   	leave  
c0015dc1:	c3                   	ret    

c0015dc2 <startGUIVESA(void*)>:
c0015dc2:	55                   	push   ebp
c0015dc3:	89 e5                	mov    ebp,esp
c0015dc5:	53                   	push   ebx
c0015dc6:	83 ec 04             	sub    esp,0x4
c0015dc9:	e8 0a 80 00 00       	call   c001ddd8 <unlockScheduler()>
c0015dce:	8b 1d 08 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e408
c0015dd4:	83 ec 08             	sub    esp,0x8
c0015dd7:	6a 01                	push   0x1
c0015dd9:	68 70 b1 02 c0       	push   0xc002b170
c0015dde:	e8 4b 79 00 00       	call   c001d72e <Thr::loadDLL(char const*, bool)>
c0015de3:	83 c4 10             	add    esp,0x10
c0015de6:	83 ec 08             	sub    esp,0x8
c0015de9:	53                   	push   ebx
c0015dea:	50                   	push   eax
c0015deb:	e8 72 7b 00 00       	call   c001d962 <Thr::executeDLL(unsigned long, void*)>
c0015df0:	83 c4 10             	add    esp,0x10
c0015df3:	8b 1d 08 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e408
c0015df9:	83 ec 08             	sub    esp,0x8
c0015dfc:	6a 01                	push   0x1
c0015dfe:	68 56 b1 02 c0       	push   0xc002b156
c0015e03:	e8 26 79 00 00       	call   c001d72e <Thr::loadDLL(char const*, bool)>
c0015e08:	83 c4 10             	add    esp,0x10
c0015e0b:	83 ec 08             	sub    esp,0x8
c0015e0e:	53                   	push   ebx
c0015e0f:	50                   	push   eax
c0015e10:	e8 4d 7b 00 00       	call   c001d962 <Thr::executeDLL(unsigned long, void*)>
c0015e15:	83 c4 10             	add    esp,0x10
c0015e18:	90                   	nop
c0015e19:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015e1c:	c9                   	leave  
c0015e1d:	c3                   	ret    

c0015e1e <sendKeyToTerminal(unsigned char)>:
c0015e1e:	55                   	push   ebp
c0015e1f:	89 e5                	mov    ebp,esp
c0015e21:	83 ec 28             	sub    esp,0x28
c0015e24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e27:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015e2a:	a1 e4 e4 02 c0       	mov    eax,ds:0xc002e4e4
c0015e2f:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015e33:	83 ec 08             	sub    esp,0x8
c0015e36:	52                   	push   edx
c0015e37:	50                   	push   eax
c0015e38:	e8 31 b5 ff ff       	call   c001136e <VgaText::receiveKey(unsigned char)>
c0015e3d:	83 c4 10             	add    esp,0x10
c0015e40:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015e44:	75 41                	jne    c0015e87 <sendKeyToTerminal(unsigned char)+0x69>
c0015e46:	e8 b2 7f 00 00       	call   c001ddfd <lockStuff()>
c0015e4b:	a1 c0 e5 02 c0       	mov    eax,ds:0xc002e5c0
c0015e50:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015e53:	c7 05 c0 e5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e5c0,0x0
c0015e5d:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015e61:	74 1f                	je     c0015e82 <sendKeyToTerminal(unsigned char)+0x64>
c0015e63:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015e66:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015e69:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015e6c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015e6f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015e72:	83 ec 0c             	sub    esp,0xc
c0015e75:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015e78:	e8 71 85 00 00       	call   c001e3ee <unblockTask(ThreadControlBlock*)>
c0015e7d:	83 c4 10             	add    esp,0x10
c0015e80:	eb db                	jmp    c0015e5d <sendKeyToTerminal(unsigned char)+0x3f>
c0015e82:	e8 10 83 00 00       	call   c001e197 <unlockStuff()>
c0015e87:	90                   	nop
c0015e88:	c9                   	leave  
c0015e89:	c3                   	ret    

c0015e8a <sendKeyboardToken(KeyboardToken)>:
c0015e8a:	55                   	push   ebp
c0015e8b:	89 e5                	mov    ebp,esp
c0015e8d:	83 ec 18             	sub    esp,0x18
c0015e90:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015e93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e96:	0f b7 c0             	movzx  eax,ax
c0015e99:	83 f2 01             	xor    edx,0x1
c0015e9c:	88 90 e0 e5 02 c0    	mov    BYTE PTR [eax-0x3ffd1a20],dl
c0015ea2:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0015ea7:	85 c0                	test   eax,eax
c0015ea9:	74 24                	je     c0015ecf <sendKeyboardToken(KeyboardToken)+0x45>
c0015eab:	8b 0d c8 e5 02 c0    	mov    ecx,DWORD PTR ds:0xc002e5c8
c0015eb1:	83 ec 04             	sub    esp,0x4
c0015eb4:	68 e0 e5 02 c0       	push   0xc002e5e0
c0015eb9:	83 ec 08             	sub    esp,0x8
c0015ebc:	89 e2                	mov    edx,esp
c0015ebe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ec1:	89 02                	mov    DWORD PTR [edx],eax
c0015ec3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015ec6:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015eca:	ff d1                	call   ecx
c0015ecc:	83 c4 10             	add    esp,0x10
c0015ecf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ed2:	66 3d 03 02          	cmp    ax,0x203
c0015ed6:	75 07                	jne    c0015edf <sendKeyboardToken(KeyboardToken)+0x55>
c0015ed8:	a0 e0 e6 02 c0       	mov    al,ds:0xc002e6e0
c0015edd:	84 c0                	test   al,al
c0015edf:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015ee3:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015ee6:	a0 e8 e9 02 c0       	mov    al,ds:0xc002e9e8
c0015eeb:	38 c2                	cmp    dl,al
c0015eed:	74 1c                	je     c0015f0b <sendKeyboardToken(KeyboardToken)+0x81>
c0015eef:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015ef2:	a2 e8 e9 02 c0       	mov    ds:0xc002e9e8,al
c0015ef7:	a0 e8 e9 02 c0       	mov    al,ds:0xc002e9e8
c0015efc:	0f b6 c0             	movzx  eax,al
c0015eff:	83 ec 0c             	sub    esp,0xc
c0015f02:	50                   	push   eax
c0015f03:	e8 c6 a6 ff ff       	call   c00105ce <setTerminalScrollLock(bool)>
c0015f08:	83 c4 10             	add    esp,0x10
c0015f0b:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015f0e:	84 c0                	test   al,al
c0015f10:	0f 84 ae 00 00 00    	je     c0015fc4 <sendKeyboardToken(KeyboardToken)+0x13a>
c0015f16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f19:	66 3d 10 03          	cmp    ax,0x310
c0015f1d:	75 06                	jne    c0015f25 <sendKeyboardToken(KeyboardToken)+0x9b>
c0015f1f:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015f25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f28:	66 3d 11 03          	cmp    ax,0x311
c0015f2c:	75 06                	jne    c0015f34 <sendKeyboardToken(KeyboardToken)+0xaa>
c0015f2e:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015f34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f37:	66 3d 12 03          	cmp    ax,0x312
c0015f3b:	75 06                	jne    c0015f43 <sendKeyboardToken(KeyboardToken)+0xb9>
c0015f3d:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015f43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f46:	66 3d 13 03          	cmp    ax,0x313
c0015f4a:	75 06                	jne    c0015f52 <sendKeyboardToken(KeyboardToken)+0xc8>
c0015f4c:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015f52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f55:	66 3d 14 03          	cmp    ax,0x314
c0015f59:	75 06                	jne    c0015f61 <sendKeyboardToken(KeyboardToken)+0xd7>
c0015f5b:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015f61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f64:	66 3d 15 03          	cmp    ax,0x315
c0015f68:	75 06                	jne    c0015f70 <sendKeyboardToken(KeyboardToken)+0xe6>
c0015f6a:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015f70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f73:	66 3d 16 03          	cmp    ax,0x316
c0015f77:	75 06                	jne    c0015f7f <sendKeyboardToken(KeyboardToken)+0xf5>
c0015f79:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015f7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f82:	66 3d 17 03          	cmp    ax,0x317
c0015f86:	75 06                	jne    c0015f8e <sendKeyboardToken(KeyboardToken)+0x104>
c0015f88:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015f8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f91:	66 3d 18 03          	cmp    ax,0x318
c0015f95:	75 06                	jne    c0015f9d <sendKeyboardToken(KeyboardToken)+0x113>
c0015f97:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015f9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fa0:	66 3d 19 03          	cmp    ax,0x319
c0015fa4:	75 06                	jne    c0015fac <sendKeyboardToken(KeyboardToken)+0x122>
c0015fa6:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015fac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015faf:	66 3d 1a 03          	cmp    ax,0x31a
c0015fb3:	0f 85 c9 00 00 00    	jne    c0016082 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015fb9:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015fbf:	e9 be 00 00 00       	jmp    c0016082 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015fc4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fc7:	66 3d 10 03          	cmp    ax,0x310
c0015fcb:	75 0a                	jne    c0015fd7 <sendKeyboardToken(KeyboardToken)+0x14d>
c0015fcd:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015fd3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015fd7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fda:	66 3d 11 03          	cmp    ax,0x311
c0015fde:	75 0a                	jne    c0015fea <sendKeyboardToken(KeyboardToken)+0x160>
c0015fe0:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015fe6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015fea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fed:	66 3d 12 03          	cmp    ax,0x312
c0015ff1:	75 0a                	jne    c0015ffd <sendKeyboardToken(KeyboardToken)+0x173>
c0015ff3:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015ff9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ffd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016000:	66 3d 13 03          	cmp    ax,0x313
c0016004:	75 0a                	jne    c0016010 <sendKeyboardToken(KeyboardToken)+0x186>
c0016006:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c001600c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016010:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016013:	66 3d 14 03          	cmp    ax,0x314
c0016017:	75 0a                	jne    c0016023 <sendKeyboardToken(KeyboardToken)+0x199>
c0016019:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c001601f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016023:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016026:	66 3d 15 03          	cmp    ax,0x315
c001602a:	75 0a                	jne    c0016036 <sendKeyboardToken(KeyboardToken)+0x1ac>
c001602c:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0016032:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016036:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016039:	66 3d 16 03          	cmp    ax,0x316
c001603d:	75 0a                	jne    c0016049 <sendKeyboardToken(KeyboardToken)+0x1bf>
c001603f:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0016045:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016049:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001604c:	66 3d 17 03          	cmp    ax,0x317
c0016050:	75 0a                	jne    c001605c <sendKeyboardToken(KeyboardToken)+0x1d2>
c0016052:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0016058:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001605c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001605f:	66 3d 18 03          	cmp    ax,0x318
c0016063:	75 0a                	jne    c001606f <sendKeyboardToken(KeyboardToken)+0x1e5>
c0016065:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c001606b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001606f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016072:	66 3d 19 03          	cmp    ax,0x319
c0016076:	75 0a                	jne    c0016082 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0016078:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c001607e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016082:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016085:	66 3d 00 02          	cmp    ax,0x200
c0016089:	75 2c                	jne    c00160b7 <sendKeyboardToken(KeyboardToken)+0x22d>
c001608b:	a0 e0 e9 02 c0       	mov    al,ds:0xc002e9e0
c0016090:	83 f0 01             	xor    eax,0x1
c0016093:	84 c0                	test   al,al
c0016095:	74 20                	je     c00160b7 <sendKeyboardToken(KeyboardToken)+0x22d>
c0016097:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c001609c:	6a 01                	push   0x1
c001609e:	6a 00                	push   0x0
c00160a0:	68 66 5d 01 c0       	push   0xc0015d66
c00160a5:	50                   	push   eax
c00160a6:	e8 5d 7e 00 00       	call   c001df08 <Process::createThread(void (*)(void*), void*, int)>
c00160ab:	83 c4 10             	add    esp,0x10
c00160ae:	c6 05 e0 e9 02 c0 01 	mov    BYTE PTR ds:0xc002e9e0,0x1
c00160b5:	eb 33                	jmp    c00160ea <sendKeyboardToken(KeyboardToken)+0x260>
c00160b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160ba:	66 3d 01 02          	cmp    ax,0x201
c00160be:	75 2a                	jne    c00160ea <sendKeyboardToken(KeyboardToken)+0x260>
c00160c0:	a0 e0 e9 02 c0       	mov    al,ds:0xc002e9e0
c00160c5:	83 f0 01             	xor    eax,0x1
c00160c8:	84 c0                	test   al,al
c00160ca:	74 1e                	je     c00160ea <sendKeyboardToken(KeyboardToken)+0x260>
c00160cc:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c00160d1:	6a 01                	push   0x1
c00160d3:	6a 00                	push   0x0
c00160d5:	68 c2 5d 01 c0       	push   0xc0015dc2
c00160da:	50                   	push   eax
c00160db:	e8 28 7e 00 00       	call   c001df08 <Process::createThread(void (*)(void*), void*, int)>
c00160e0:	83 c4 10             	add    esp,0x10
c00160e3:	c6 05 e0 e9 02 c0 01 	mov    BYTE PTR ds:0xc002e9e0,0x1
c00160ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160ed:	66 3d 1d 03          	cmp    ax,0x31d
c00160f1:	75 06                	jne    c00160f9 <sendKeyboardToken(KeyboardToken)+0x26f>
c00160f3:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c00160f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160fc:	66 3d 1c 03          	cmp    ax,0x31c
c0016100:	75 06                	jne    c0016108 <sendKeyboardToken(KeyboardToken)+0x27e>
c0016102:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0016108:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001610b:	66 3d 1b 03          	cmp    ax,0x31b
c001610f:	75 06                	jne    c0016117 <sendKeyboardToken(KeyboardToken)+0x28d>
c0016111:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0016117:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001611a:	66 3d 1e 03          	cmp    ax,0x31e
c001611e:	75 06                	jne    c0016126 <sendKeyboardToken(KeyboardToken)+0x29c>
c0016120:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0016126:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016129:	66 3d 1f 03          	cmp    ax,0x31f
c001612d:	75 06                	jne    c0016135 <sendKeyboardToken(KeyboardToken)+0x2ab>
c001612f:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0016135:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016138:	66 3d 1a 03          	cmp    ax,0x31a
c001613c:	75 06                	jne    c0016144 <sendKeyboardToken(KeyboardToken)+0x2ba>
c001613e:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0016144:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0016148:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001614b:	83 f0 01             	xor    eax,0x1
c001614e:	84 c0                	test   al,al
c0016150:	74 77                	je     c00161c9 <sendKeyboardToken(KeyboardToken)+0x33f>
c0016152:	a0 e1 e6 02 c0       	mov    al,ds:0xc002e6e1
c0016157:	84 c0                	test   al,al
c0016159:	74 41                	je     c001619c <sendKeyboardToken(KeyboardToken)+0x312>
c001615b:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001615f:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0016163:	74 2b                	je     c0016190 <sendKeyboardToken(KeyboardToken)+0x306>
c0016165:	8b 15 e4 e9 02 c0    	mov    edx,DWORD PTR ds:0xc002e9e4
c001616b:	89 d0                	mov    eax,edx
c001616d:	c1 e0 02             	shl    eax,0x2
c0016170:	01 d0                	add    eax,edx
c0016172:	01 c0                	add    eax,eax
c0016174:	a3 e4 e9 02 c0       	mov    ds:0xc002e9e4,eax
c0016179:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001617c:	0f b7 c0             	movzx  eax,ax
c001617f:	8d 50 d0             	lea    edx,[eax-0x30]
c0016182:	a1 e4 e9 02 c0       	mov    eax,ds:0xc002e9e4
c0016187:	01 d0                	add    eax,edx
c0016189:	a3 e4 e9 02 c0       	mov    ds:0xc002e9e4,eax
c001618e:	eb 6d                	jmp    c00161fd <sendKeyboardToken(KeyboardToken)+0x373>
c0016190:	c7 05 e4 e9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e9e4,0x0
c001619a:	eb 61                	jmp    c00161fd <sendKeyboardToken(KeyboardToken)+0x373>
c001619c:	a1 e4 e9 02 c0       	mov    eax,ds:0xc002e9e4
c00161a1:	85 c0                	test   eax,eax
c00161a3:	74 18                	je     c00161bd <sendKeyboardToken(KeyboardToken)+0x333>
c00161a5:	a1 e4 e9 02 c0       	mov    eax,ds:0xc002e9e4
c00161aa:	0f b6 c0             	movzx  eax,al
c00161ad:	83 ec 0c             	sub    esp,0xc
c00161b0:	50                   	push   eax
c00161b1:	e8 68 fc ff ff       	call   c0015e1e <sendKeyToTerminal(unsigned char)>
c00161b6:	83 c4 10             	add    esp,0x10
c00161b9:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00161bd:	c7 05 e4 e9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e9e4,0x0
c00161c7:	eb 34                	jmp    c00161fd <sendKeyboardToken(KeyboardToken)+0x373>
c00161c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161cc:	66 3d 01 01          	cmp    ax,0x101
c00161d0:	75 2b                	jne    c00161fd <sendKeyboardToken(KeyboardToken)+0x373>
c00161d2:	a1 e4 e9 02 c0       	mov    eax,ds:0xc002e9e4
c00161d7:	85 c0                	test   eax,eax
c00161d9:	74 18                	je     c00161f3 <sendKeyboardToken(KeyboardToken)+0x369>
c00161db:	a1 e4 e9 02 c0       	mov    eax,ds:0xc002e9e4
c00161e0:	0f b6 c0             	movzx  eax,al
c00161e3:	83 ec 0c             	sub    esp,0xc
c00161e6:	50                   	push   eax
c00161e7:	e8 32 fc ff ff       	call   c0015e1e <sendKeyToTerminal(unsigned char)>
c00161ec:	83 c4 10             	add    esp,0x10
c00161ef:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00161f3:	c7 05 e4 e9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e9e4,0x0
c00161fd:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0016200:	83 f0 01             	xor    eax,0x1
c0016203:	84 c0                	test   al,al
c0016205:	74 4c                	je     c0016253 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016207:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001620a:	83 f0 01             	xor    eax,0x1
c001620d:	84 c0                	test   al,al
c001620f:	74 42                	je     c0016253 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016211:	a0 e0 e6 02 c0       	mov    al,ds:0xc002e6e0
c0016216:	83 f0 01             	xor    eax,0x1
c0016219:	84 c0                	test   al,al
c001621b:	74 36                	je     c0016253 <sendKeyboardToken(KeyboardToken)+0x3c9>
c001621d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016220:	66 83 f8 1f          	cmp    ax,0x1f
c0016224:	76 09                	jbe    c001622f <sendKeyboardToken(KeyboardToken)+0x3a5>
c0016226:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016229:	66 83 f8 7e          	cmp    ax,0x7e
c001622d:	76 12                	jbe    c0016241 <sendKeyboardToken(KeyboardToken)+0x3b7>
c001622f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016232:	66 83 f8 0a          	cmp    ax,0xa
c0016236:	74 09                	je     c0016241 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0016238:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001623b:	66 83 f8 08          	cmp    ax,0x8
c001623f:	75 12                	jne    c0016253 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016241:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016244:	0f b6 c0             	movzx  eax,al
c0016247:	83 ec 0c             	sub    esp,0xc
c001624a:	50                   	push   eax
c001624b:	e8 ce fb ff ff       	call   c0015e1e <sendKeyToTerminal(unsigned char)>
c0016250:	83 c4 10             	add    esp,0x10
c0016253:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0016256:	83 f0 01             	xor    eax,0x1
c0016259:	84 c0                	test   al,al
c001625b:	74 4f                	je     c00162ac <sendKeyboardToken(KeyboardToken)+0x422>
c001625d:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016260:	83 f0 01             	xor    eax,0x1
c0016263:	84 c0                	test   al,al
c0016265:	74 45                	je     c00162ac <sendKeyboardToken(KeyboardToken)+0x422>
c0016267:	a0 e0 e6 02 c0       	mov    al,ds:0xc002e6e0
c001626c:	84 c0                	test   al,al
c001626e:	74 3c                	je     c00162ac <sendKeyboardToken(KeyboardToken)+0x422>
c0016270:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016273:	66 83 f8 3f          	cmp    ax,0x3f
c0016277:	76 33                	jbe    c00162ac <sendKeyboardToken(KeyboardToken)+0x422>
c0016279:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001627c:	66 83 f8 7f          	cmp    ax,0x7f
c0016280:	77 2a                	ja     c00162ac <sendKeyboardToken(KeyboardToken)+0x422>
c0016282:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016285:	88 c2                	mov    dl,al
c0016287:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001628a:	66 83 f8 5f          	cmp    ax,0x5f
c001628e:	76 04                	jbe    c0016294 <sendKeyboardToken(KeyboardToken)+0x40a>
c0016290:	b0 20                	mov    al,0x20
c0016292:	eb 02                	jmp    c0016296 <sendKeyboardToken(KeyboardToken)+0x40c>
c0016294:	b0 00                	mov    al,0x0
c0016296:	29 c2                	sub    edx,eax
c0016298:	88 d0                	mov    al,dl
c001629a:	83 e8 40             	sub    eax,0x40
c001629d:	0f b6 c0             	movzx  eax,al
c00162a0:	83 ec 0c             	sub    esp,0xc
c00162a3:	50                   	push   eax
c00162a4:	e8 75 fb ff ff       	call   c0015e1e <sendKeyToTerminal(unsigned char)>
c00162a9:	83 c4 10             	add    esp,0x10
c00162ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162af:	66 3d 00 03          	cmp    ax,0x300
c00162b3:	75 0f                	jne    c00162c4 <sendKeyboardToken(KeyboardToken)+0x43a>
c00162b5:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00162b8:	83 f0 01             	xor    eax,0x1
c00162bb:	84 c0                	test   al,al
c00162bd:	74 05                	je     c00162c4 <sendKeyboardToken(KeyboardToken)+0x43a>
c00162bf:	e8 3f ab ff ff       	call   c0010e03 <doTerminalCycle()>
c00162c4:	90                   	nop
c00162c5:	c9                   	leave  
c00162c6:	c3                   	ret    

c00162c7 <clearInternalKeybuffer(VgaText*)>:
c00162c7:	55                   	push   ebp
c00162c8:	89 e5                	mov    ebp,esp
c00162ca:	83 ec 08             	sub    esp,0x8
c00162cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162d0:	05 34 11 00 00       	add    eax,0x1134
c00162d5:	83 ec 0c             	sub    esp,0xc
c00162d8:	50                   	push   eax
c00162d9:	e8 b6 a4 fe ff       	call   c0000794 <strlen>
c00162de:	83 c4 10             	add    esp,0x10
c00162e1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00162e4:	81 c2 34 11 00 00    	add    edx,0x1134
c00162ea:	83 ec 04             	sub    esp,0x4
c00162ed:	50                   	push   eax
c00162ee:	6a 00                	push   0x0
c00162f0:	52                   	push   edx
c00162f1:	e8 82 a4 fe ff       	call   c0000778 <memset>
c00162f6:	83 c4 10             	add    esp,0x10
c00162f9:	90                   	nop
c00162fa:	c9                   	leave  
c00162fb:	c3                   	ret    

c00162fc <readKeyboard(VgaText*, char*, unsigned long)>:
c00162fc:	55                   	push   ebp
c00162fd:	89 e5                	mov    ebp,esp
c00162ff:	83 ec 18             	sub    esp,0x18
c0016302:	fb                   	sti    
c0016303:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c001630a:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001630e:	0f 84 8a 00 00 00    	je     c001639e <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c0016314:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016317:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c001631d:	84 c0                	test   al,al
c001631f:	75 11                	jne    c0016332 <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c0016321:	e8 b0 7a 00 00       	call   c001ddd6 <lockScheduler()>
c0016326:	e8 e7 7d 00 00       	call   c001e112 <schedule()>
c001632b:	e8 a8 7a 00 00       	call   c001ddd8 <unlockScheduler()>
c0016330:	eb e2                	jmp    c0016314 <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c0016332:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0016335:	8d 50 01             	lea    edx,[eax+0x1]
c0016338:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001633b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001633e:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0016344:	88 10                	mov    BYTE PTR [eax],dl
c0016346:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016349:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c001634f:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0016352:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016355:	05 34 11 00 00       	add    eax,0x1134
c001635a:	83 ec 0c             	sub    esp,0xc
c001635d:	50                   	push   eax
c001635e:	e8 31 a4 fe ff       	call   c0000794 <strlen>
c0016363:	83 c4 10             	add    esp,0x10
c0016366:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016369:	81 c2 34 11 00 00    	add    edx,0x1134
c001636f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0016372:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016375:	81 c2 34 11 00 00    	add    edx,0x1134
c001637b:	83 ec 04             	sub    esp,0x4
c001637e:	50                   	push   eax
c001637f:	51                   	push   ecx
c0016380:	52                   	push   edx
c0016381:	e8 f6 a2 fe ff       	call   c000067c <memmove>
c0016386:	83 c4 10             	add    esp,0x10
c0016389:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c001638c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001638f:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0016393:	0f 85 71 ff ff ff    	jne    c001630a <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0016399:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001639c:	eb 03                	jmp    c00163a1 <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c001639e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00163a1:	c9                   	leave  
c00163a2:	c3                   	ret    
c00163a3:	90                   	nop

c00163a4 <Keyboard::Keyboard(char const*)>:
c00163a4:	83 ec 0c             	sub    esp,0xc
c00163a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163ab:	83 ec 08             	sub    esp,0x8
c00163ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163b2:	50                   	push   eax
c00163b3:	e8 a8 e1 ff ff       	call   c0014560 <Device::Device(char const*)>
c00163b8:	83 c4 10             	add    esp,0x10
c00163bb:	ba 94 b1 02 c0       	mov    edx,0xc002b194
c00163c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163c4:	89 10                	mov    DWORD PTR [eax],edx
c00163c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163ca:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c00163d4:	c6 05 c4 e5 02 c0 01 	mov    BYTE PTR ds:0xc002e5c4,0x1
c00163db:	90                   	nop
c00163dc:	83 c4 0c             	add    esp,0xc
c00163df:	c3                   	ret    

c00163e0 <Keyboard::~Keyboard()>:
c00163e0:	83 ec 0c             	sub    esp,0xc
c00163e3:	ba 94 b1 02 c0       	mov    edx,0xc002b194
c00163e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163ec:	89 10                	mov    DWORD PTR [eax],edx
c00163ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163f2:	83 ec 0c             	sub    esp,0xc
c00163f5:	50                   	push   eax
c00163f6:	e8 47 de ff ff       	call   c0014242 <Device::~Device()>
c00163fb:	83 c4 10             	add    esp,0x10
c00163fe:	90                   	nop
c00163ff:	83 c4 0c             	add    esp,0xc
c0016402:	c3                   	ret    
c0016403:	90                   	nop

c0016404 <Keyboard::~Keyboard()>:
c0016404:	83 ec 0c             	sub    esp,0xc
c0016407:	83 ec 0c             	sub    esp,0xc
c001640a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001640e:	e8 cd ff ff ff       	call   c00163e0 <Keyboard::~Keyboard()>
c0016413:	83 c4 10             	add    esp,0x10
c0016416:	83 ec 08             	sub    esp,0x8
c0016419:	68 5c 01 00 00       	push   0x15c
c001641e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016422:	e8 43 ca ff ff       	call   c0012e6a <operator delete(void*, unsigned long)>
c0016427:	83 c4 10             	add    esp,0x10
c001642a:	83 c4 0c             	add    esp,0xc
c001642d:	c3                   	ret    

c001642e <LogicalDisk::close(int, int, void*)>:
c001642e:	83 c8 ff             	or     eax,0xffffffff
c0016431:	c3                   	ret    

c0016432 <LogicalDisk::~LogicalDisk()>:
c0016432:	83 ec 0c             	sub    esp,0xc
c0016435:	ba 44 b2 02 c0       	mov    edx,0xc002b244
c001643a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001643e:	89 10                	mov    DWORD PTR [eax],edx
c0016440:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016444:	83 ec 0c             	sub    esp,0xc
c0016447:	50                   	push   eax
c0016448:	e8 f5 dd ff ff       	call   c0014242 <Device::~Device()>
c001644d:	83 c4 10             	add    esp,0x10
c0016450:	90                   	nop
c0016451:	83 c4 0c             	add    esp,0xc
c0016454:	c3                   	ret    
c0016455:	90                   	nop

c0016456 <LogicalDisk::~LogicalDisk()>:
c0016456:	83 ec 0c             	sub    esp,0xc
c0016459:	83 ec 0c             	sub    esp,0xc
c001645c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016460:	e8 cd ff ff ff       	call   c0016432 <LogicalDisk::~LogicalDisk()>
c0016465:	83 c4 10             	add    esp,0x10
c0016468:	83 ec 08             	sub    esp,0x8
c001646b:	68 74 01 00 00       	push   0x174
c0016470:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016474:	e8 f1 c9 ff ff       	call   c0012e6a <operator delete(void*, unsigned long)>
c0016479:	83 c4 10             	add    esp,0x10
c001647c:	83 c4 0c             	add    esp,0xc
c001647f:	c3                   	ret    

c0016480 <LogicalDisk::open(int, int, void*)>:
c0016480:	83 ec 18             	sub    esp,0x18
c0016483:	68 c0 b1 02 c0       	push   0xc002b1c0
c0016488:	e8 6e 41 00 00       	call   c001a5fb <Krnl::panic(char const*)>
c001648d:	83 c8 ff             	or     eax,0xffffffff
c0016490:	83 c4 1c             	add    esp,0x1c
c0016493:	c3                   	ret    

c0016494 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0016494:	53                   	push   ebx
c0016495:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0016499:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001649d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00164a1:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c00164a7:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c00164ad:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c00164b3:	77 10                	ja     c00164c5 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c00164b5:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c00164bb:	89 d3                	mov    ebx,edx
c00164bd:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c00164c3:	72 05                	jb     c00164ca <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c00164c5:	83 c8 ff             	or     eax,0xffffffff
c00164c8:	89 c2                	mov    edx,eax
c00164ca:	5b                   	pop    ebx
c00164cb:	c3                   	ret    

c00164cc <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c00164cc:	56                   	push   esi
c00164cd:	83 c8 ff             	or     eax,0xffffffff
c00164d0:	53                   	push   ebx
c00164d1:	89 c2                	mov    edx,eax
c00164d3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00164d7:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00164db:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00164df:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00164e5:	77 27                	ja     c001650e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00164e7:	89 d8                	mov    eax,ebx
c00164e9:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c00164ef:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c00164f5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00164fa:	89 c2                	mov    edx,eax
c00164fc:	73 10                	jae    c001650e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00164fe:	89 c8                	mov    eax,ecx
c0016500:	89 da                	mov    edx,ebx
c0016502:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0016508:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c001650e:	5b                   	pop    ebx
c001650f:	5e                   	pop    esi
c0016510:	c3                   	ret    
c0016511:	90                   	nop

c0016512 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016512:	83 ec 1c             	sub    esp,0x1c
c0016515:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016519:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001651d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016521:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016525:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016529:	89 04 24             	mov    DWORD PTR [esp],eax
c001652c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016530:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016534:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016538:	83 ec 08             	sub    esp,0x8
c001653b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001653f:	50                   	push   eax
c0016540:	e8 1b e0 ff ff       	call   c0014560 <Device::Device(char const*)>
c0016545:	83 c4 10             	add    esp,0x10
c0016548:	ba 44 b2 02 c0       	mov    edx,0xc002b244
c001654d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016551:	89 10                	mov    DWORD PTR [eax],edx
c0016553:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016557:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001655e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016562:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0016569:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001656d:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0016577:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001657b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001657f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016583:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0016589:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c001658f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016593:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016596:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001659a:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c00165a0:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c00165a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165aa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00165ae:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c00165b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165b8:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00165c2:	90                   	nop
c00165c3:	83 c4 1c             	add    esp,0x1c
c00165c6:	c3                   	ret    
c00165c7:	90                   	nop

c00165c8 <LogicalDisk::assignDriveLetter()>:
c00165c8:	55                   	push   ebp
c00165c9:	57                   	push   edi
c00165ca:	56                   	push   esi
c00165cb:	53                   	push   ebx
c00165cc:	83 ec 14             	sub    esp,0x14
c00165cf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00165d3:	8b 3d 00 ea 02 c0    	mov    edi,DWORD PTR ds:0xc002ea00
c00165d9:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c00165df:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00165e3:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c00165e9:	8b 3d 04 ea 02 c0    	mov    edi,DWORD PTR ds:0xc002ea04
c00165ef:	3c 01                	cmp    al,0x1
c00165f1:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00165f5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00165f9:	19 c0                	sbb    eax,eax
c00165fb:	83 e0 02             	and    eax,0x2
c00165fe:	83 c0 41             	add    eax,0x41
c0016601:	0f be e8             	movsx  ebp,al
c0016604:	3c 43                	cmp    al,0x43
c0016606:	75 10                	jne    c0016618 <LogicalDisk::assignDriveLetter()+0x50>
c0016608:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c001660f:	75 5d                	jne    c001666e <LogicalDisk::assignDriveLetter()+0xa6>
c0016611:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0016616:	75 56                	jne    c001666e <LogicalDisk::assignDriveLetter()+0xa6>
c0016618:	8d 75 bf             	lea    esi,[ebp-0x41]
c001661b:	ba 01 00 00 00       	mov    edx,0x1
c0016620:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0016624:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0016628:	d3 e2                	shl    edx,cl
c001662a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001662e:	89 d7                	mov    edi,edx
c0016630:	89 d6                	mov    esi,edx
c0016632:	c1 ff 1f             	sar    edi,0x1f
c0016635:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0016639:	21 f9                	and    ecx,edi
c001663b:	09 d1                	or     ecx,edx
c001663d:	75 2f                	jne    c001666e <LogicalDisk::assignDriveLetter()+0xa6>
c001663f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0016643:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016647:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c001664d:	09 f2                	or     edx,esi
c001664f:	89 15 00 ea 02 c0    	mov    DWORD PTR ds:0xc002ea00,edx
c0016655:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016659:	09 fa                	or     edx,edi
c001665b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001665f:	89 15 04 ea 02 c0    	mov    DWORD PTR ds:0xc002ea04,edx
c0016665:	89 1c bd 20 ea 02 c0 	mov    DWORD PTR [edi*4-0x3ffd15e0],ebx
c001666c:	eb 08                	jmp    c0016676 <LogicalDisk::assignDriveLetter()+0xae>
c001666e:	45                   	inc    ebp
c001666f:	40                   	inc    eax
c0016670:	3c 5b                	cmp    al,0x5b
c0016672:	75 90                	jne    c0016604 <LogicalDisk::assignDriveLetter()+0x3c>
c0016674:	31 c0                	xor    eax,eax
c0016676:	83 c4 14             	add    esp,0x14
c0016679:	5b                   	pop    ebx
c001667a:	5e                   	pop    esi
c001667b:	5f                   	pop    edi
c001667c:	5d                   	pop    ebp
c001667d:	c3                   	ret    

c001667e <LogicalDisk::mount()>:
c001667e:	56                   	push   esi
c001667f:	53                   	push   ebx
c0016680:	51                   	push   ecx
c0016681:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016685:	8b 1d 90 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e590
c001668b:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0016695:	85 db                	test   ebx,ebx
c0016697:	74 50                	je     c00166e9 <LogicalDisk::mount()+0x6b>
c0016699:	e8 23 77 00 00       	call   c001ddc1 <getIRQNestingLevel()>
c001669e:	52                   	push   edx
c001669f:	52                   	push   edx
c00166a0:	50                   	push   eax
c00166a1:	68 e4 b1 02 c0       	push   0xc002b1e4
c00166a6:	e8 9f c8 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c00166ab:	83 c4 0c             	add    esp,0xc
c00166ae:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00166b5:	8b 13                	mov    edx,DWORD PTR [ebx]
c00166b7:	83 e8 41             	sub    eax,0x41
c00166ba:	50                   	push   eax
c00166bb:	56                   	push   esi
c00166bc:	53                   	push   ebx
c00166bd:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00166c0:	83 c4 10             	add    esp,0x10
c00166c3:	84 c0                	test   al,al
c00166c5:	74 08                	je     c00166cf <LogicalDisk::mount()+0x51>
c00166c7:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c00166cd:	eb 1c                	jmp    c00166eb <LogicalDisk::mount()+0x6d>
c00166cf:	e8 ed 76 00 00       	call   c001ddc1 <getIRQNestingLevel()>
c00166d4:	51                   	push   ecx
c00166d5:	51                   	push   ecx
c00166d6:	50                   	push   eax
c00166d7:	68 ff b1 02 c0       	push   0xc002b1ff
c00166dc:	e8 69 c8 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c00166e1:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00166e4:	83 c4 10             	add    esp,0x10
c00166e7:	eb ac                	jmp    c0016695 <LogicalDisk::mount()+0x17>
c00166e9:	31 c0                	xor    eax,eax
c00166eb:	5a                   	pop    edx
c00166ec:	5b                   	pop    ebx
c00166ed:	5e                   	pop    esi
c00166ee:	c3                   	ret    
c00166ef:	90                   	nop

c00166f0 <LogicalDisk::unmount()>:
c00166f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00166f4:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00166fe:	c3                   	ret    
c00166ff:	90                   	nop

c0016700 <LogicalDisk::eject()>:
c0016700:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016704:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001670a:	8b 10                	mov    edx,DWORD PTR [eax]
c001670c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016710:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0016713:	90                   	nop

c0016714 <LogicalDisk::unassignDriveLetter()>:
c0016714:	57                   	push   edi
c0016715:	56                   	push   esi
c0016716:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001671a:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0016721:	84 c9                	test   cl,cl
c0016723:	75 0f                	jne    c0016734 <LogicalDisk::unassignDriveLetter()+0x20>
c0016725:	c7 44 24 0c 1a b2 02 c0 	mov    DWORD PTR [esp+0xc],0xc002b21a
c001672d:	5e                   	pop    esi
c001672e:	5f                   	pop    edi
c001672f:	e9 c7 3e 00 00       	jmp    c001a5fb <Krnl::panic(char const*)>
c0016734:	83 e9 41             	sub    ecx,0x41
c0016737:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c001673e:	b8 01 00 00 00       	mov    eax,0x1
c0016743:	c7 04 8d 20 ea 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd15e0],0x0
c001674e:	d3 e0                	shl    eax,cl
c0016750:	89 c7                	mov    edi,eax
c0016752:	f7 d0                	not    eax
c0016754:	c1 ff 1f             	sar    edi,0x1f
c0016757:	21 05 00 ea 02 c0    	and    DWORD PTR ds:0xc002ea00,eax
c001675d:	89 fe                	mov    esi,edi
c001675f:	f7 d6                	not    esi
c0016761:	21 35 04 ea 02 c0    	and    DWORD PTR ds:0xc002ea04,esi
c0016767:	5e                   	pop    esi
c0016768:	5f                   	pop    edi
c0016769:	c3                   	ret    

c001676a <LogicalDisk::read(unsigned long long, int, void*)>:
c001676a:	57                   	push   edi
c001676b:	56                   	push   esi
c001676c:	53                   	push   ebx
c001676d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016771:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016775:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016779:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001677d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016783:	77 41                	ja     c00167c6 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0016785:	99                   	cdq    
c0016786:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001678c:	01 c8                	add    eax,ecx
c001678e:	11 da                	adc    edx,ebx
c0016790:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016796:	19 d7                	sbb    edi,edx
c0016798:	72 33                	jb     c00167cd <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c001679a:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00167a0:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00167a6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00167aa:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00167ae:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00167b4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00167ba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00167be:	5b                   	pop    ebx
c00167bf:	5e                   	pop    esi
c00167c0:	5f                   	pop    edi
c00167c1:	e9 b0 0a 00 00       	jmp    c0017276 <VCache::read(unsigned long long, int, void*)>
c00167c6:	b8 05 00 00 00       	mov    eax,0x5
c00167cb:	eb 05                	jmp    c00167d2 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00167cd:	b8 07 00 00 00       	mov    eax,0x7
c00167d2:	5b                   	pop    ebx
c00167d3:	5e                   	pop    esi
c00167d4:	5f                   	pop    edi
c00167d5:	c3                   	ret    

c00167d6 <LogicalDisk::write(unsigned long long, int, void*)>:
c00167d6:	57                   	push   edi
c00167d7:	56                   	push   esi
c00167d8:	53                   	push   ebx
c00167d9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00167dd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00167e1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00167e5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00167e9:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00167ef:	77 41                	ja     c0016832 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c00167f1:	99                   	cdq    
c00167f2:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00167f8:	01 c8                	add    eax,ecx
c00167fa:	11 da                	adc    edx,ebx
c00167fc:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016802:	19 d7                	sbb    edi,edx
c0016804:	72 33                	jb     c0016839 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0016806:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001680c:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016812:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016816:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001681a:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016820:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016826:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001682a:	5b                   	pop    ebx
c001682b:	5e                   	pop    esi
c001682c:	5f                   	pop    edi
c001682d:	e9 4e 09 00 00       	jmp    c0017180 <VCache::write(unsigned long long, int, void*)>
c0016832:	b8 05 00 00 00       	mov    eax,0x5
c0016837:	eb 05                	jmp    c001683e <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0016839:	b8 07 00 00 00       	mov    eax,0x7
c001683e:	5b                   	pop    ebx
c001683f:	5e                   	pop    esi
c0016840:	5f                   	pop    edi
c0016841:	c3                   	ret    

c0016842 <Mouse::Mouse(char const*)>:
c0016842:	83 ec 0c             	sub    esp,0xc
c0016845:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016849:	83 ec 08             	sub    esp,0x8
c001684c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016850:	50                   	push   eax
c0016851:	e8 0a dd ff ff       	call   c0014560 <Device::Device(char const*)>
c0016856:	83 c4 10             	add    esp,0x10
c0016859:	ba 70 b2 02 c0       	mov    edx,0xc002b270
c001685e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016862:	89 10                	mov    DWORD PTR [eax],edx
c0016864:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016868:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0016872:	90                   	nop
c0016873:	83 c4 0c             	add    esp,0xc
c0016876:	c3                   	ret    
c0016877:	90                   	nop

c0016878 <Mouse::~Mouse()>:
c0016878:	83 ec 0c             	sub    esp,0xc
c001687b:	ba 70 b2 02 c0       	mov    edx,0xc002b270
c0016880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016884:	89 10                	mov    DWORD PTR [eax],edx
c0016886:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001688a:	83 ec 0c             	sub    esp,0xc
c001688d:	50                   	push   eax
c001688e:	e8 af d9 ff ff       	call   c0014242 <Device::~Device()>
c0016893:	83 c4 10             	add    esp,0x10
c0016896:	90                   	nop
c0016897:	83 c4 0c             	add    esp,0xc
c001689a:	c3                   	ret    
c001689b:	90                   	nop

c001689c <Mouse::~Mouse()>:
c001689c:	83 ec 0c             	sub    esp,0xc
c001689f:	83 ec 0c             	sub    esp,0xc
c00168a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168a6:	e8 cd ff ff ff       	call   c0016878 <Mouse::~Mouse()>
c00168ab:	83 c4 10             	add    esp,0x10
c00168ae:	83 ec 08             	sub    esp,0x8
c00168b1:	68 58 01 00 00       	push   0x158
c00168b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168ba:	e8 ab c5 ff ff       	call   c0012e6a <operator delete(void*, unsigned long)>
c00168bf:	83 c4 10             	add    esp,0x10
c00168c2:	83 c4 0c             	add    esp,0xc
c00168c5:	c3                   	ret    

c00168c6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00168c6:	55                   	push   ebp
c00168c7:	57                   	push   edi
c00168c8:	56                   	push   esi
c00168c9:	53                   	push   ebx
c00168ca:	81 ec 28 01 00 00    	sub    esp,0x128
c00168d0:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00168d7:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00168de:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00168e5:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00168ec:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00168f0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00168f4:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00168fb:	e8 5c dd ff ff       	call   c001465c <Device::getName()>
c0016900:	5a                   	pop    edx
c0016901:	59                   	pop    ecx
c0016902:	50                   	push   eax
c0016903:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0016907:	55                   	push   ebp
c0016908:	e8 27 9f fe ff       	call   c0000834 <strcpy>
c001690d:	5b                   	pop    ebx
c001690e:	58                   	pop    eax
c001690f:	68 94 b2 02 c0       	push   0xc002b294
c0016914:	55                   	push   ebp
c0016915:	e8 5a a0 fe ff       	call   c0000974 <strcat>
c001691a:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0016921:	e8 1a 8f ff ff       	call   c000f840 <malloc>
c0016926:	83 c4 0c             	add    esp,0xc
c0016929:	89 c3                	mov    ebx,eax
c001692b:	57                   	push   edi
c001692c:	56                   	push   esi
c001692d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016931:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016935:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001693c:	55                   	push   ebp
c001693d:	50                   	push   eax
c001693e:	e8 cf fb ff ff       	call   c0016512 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0016943:	83 c4 14             	add    esp,0x14
c0016946:	53                   	push   ebx
c0016947:	e8 7c fc ff ff       	call   c00165c8 <LogicalDisk::assignDriveLetter()>
c001694c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001694f:	89 c6                	mov    esi,eax
c0016951:	e8 28 fd ff ff       	call   c001667e <LogicalDisk::mount()>
c0016956:	58                   	pop    eax
c0016957:	5a                   	pop    edx
c0016958:	53                   	push   ebx
c0016959:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016960:	e8 0b da ff ff       	call   c0014370 <Device::addChild(Device*)>
c0016965:	59                   	pop    ecx
c0016966:	89 f0                	mov    eax,esi
c0016968:	5b                   	pop    ebx
c0016969:	0f be f0             	movsx  esi,al
c001696c:	56                   	push   esi
c001696d:	68 9f b2 02 c0       	push   0xc002b29f
c0016972:	e8 d3 c5 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0016977:	81 c4 2c 01 00 00    	add    esp,0x12c
c001697d:	5b                   	pop    ebx
c001697e:	5e                   	pop    esi
c001697f:	5f                   	pop    edi
c0016980:	5d                   	pop    ebp
c0016981:	c3                   	ret    

c0016982 <createPartitionsForDisk(PhysicalDisk*)>:
c0016982:	55                   	push   ebp
c0016983:	57                   	push   edi
c0016984:	56                   	push   esi
c0016985:	53                   	push   ebx
c0016986:	81 ec 5c 02 00 00    	sub    esp,0x25c
c001698c:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0016993:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016999:	3d 00 02 00 00       	cmp    eax,0x200
c001699e:	74 27                	je     c00169c7 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c00169a0:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c00169a6:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c00169ac:	83 ec 10             	sub    esp,0x10
c00169af:	0f a4 f7 0a          	shld   edi,esi,0xa
c00169b3:	99                   	cdq    
c00169b4:	c1 e6 0a             	shl    esi,0xa
c00169b7:	52                   	push   edx
c00169b8:	89 fd                	mov    ebp,edi
c00169ba:	50                   	push   eax
c00169bb:	55                   	push   ebp
c00169bc:	56                   	push   esi
c00169bd:	e8 ea ff 00 00       	call   c00269ac <__udivdi3>
c00169c2:	e9 b1 00 00 00       	jmp    c0016a78 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00169c7:	83 ec 0c             	sub    esp,0xc
c00169ca:	8b 03                	mov    eax,DWORD PTR [ebx]
c00169cc:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c00169d0:	56                   	push   esi
c00169d1:	6a 01                	push   0x1
c00169d3:	6a 00                	push   0x0
c00169d5:	6a 00                	push   0x0
c00169d7:	53                   	push   ebx
c00169d8:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00169db:	83 c4 20             	add    esp,0x20
c00169de:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c00169e6:	75 0a                	jne    c00169f2 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c00169e8:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c00169f0:	74 2c                	je     c0016a1e <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c00169f2:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00169f8:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00169fe:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016a04:	83 ec 10             	sub    esp,0x10
c0016a07:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016a0b:	89 f7                	mov    edi,esi
c0016a0d:	c1 e0 0a             	shl    eax,0xa
c0016a10:	c1 ff 1f             	sar    edi,0x1f
c0016a13:	57                   	push   edi
c0016a14:	56                   	push   esi
c0016a15:	52                   	push   edx
c0016a16:	50                   	push   eax
c0016a17:	e8 90 ff 00 00       	call   c00269ac <__udivdi3>
c0016a1c:	eb 5a                	jmp    c0016a78 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016a1e:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016a25:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016a2c:	83 e1 7f             	and    ecx,0x7f
c0016a2f:	83 e0 7f             	and    eax,0x7f
c0016a32:	01 c1                	add    ecx,eax
c0016a34:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016a3b:	83 e0 7f             	and    eax,0x7f
c0016a3e:	01 c1                	add    ecx,eax
c0016a40:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016a47:	83 e0 7f             	and    eax,0x7f
c0016a4a:	00 c1                	add    cl,al
c0016a4c:	74 41                	je     c0016a8f <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0016a4e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016a54:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016a5a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016a60:	83 ec 10             	sub    esp,0x10
c0016a63:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016a67:	89 f7                	mov    edi,esi
c0016a69:	c1 e0 0a             	shl    eax,0xa
c0016a6c:	c1 ff 1f             	sar    edi,0x1f
c0016a6f:	57                   	push   edi
c0016a70:	56                   	push   esi
c0016a71:	52                   	push   edx
c0016a72:	50                   	push   eax
c0016a73:	e8 34 ff 00 00       	call   c00269ac <__udivdi3>
c0016a78:	83 c4 14             	add    esp,0x14
c0016a7b:	52                   	push   edx
c0016a7c:	50                   	push   eax
c0016a7d:	6a 00                	push   0x0
c0016a7f:	6a 00                	push   0x0
c0016a81:	53                   	push   ebx
c0016a82:	e8 3f fe ff ff       	call   c00168c6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016a87:	83 c4 20             	add    esp,0x20
c0016a8a:	e9 79 01 00 00       	jmp    c0016c08 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016a8f:	89 f0                	mov    eax,esi
c0016a91:	31 f6                	xor    esi,esi
c0016a93:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016a9a:	75 02                	jne    c0016a9e <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016a9c:	89 f1                	mov    ecx,esi
c0016a9e:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016aa5:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016aac:	c1 e2 08             	shl    edx,0x8
c0016aaf:	c1 e7 10             	shl    edi,0x10
c0016ab2:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016aba:	09 fa                	or     edx,edi
c0016abc:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016ac4:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016acb:	83 c0 10             	add    eax,0x10
c0016ace:	09 fa                	or     edx,edi
c0016ad0:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016ad7:	c1 e7 18             	shl    edi,0x18
c0016ada:	09 fa                	or     edx,edi
c0016adc:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016ae3:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016ae7:	c1 e7 10             	shl    edi,0x10
c0016aea:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016af1:	c1 e2 08             	shl    edx,0x8
c0016af4:	09 fa                	or     edx,edi
c0016af6:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016afd:	09 fa                	or     edx,edi
c0016aff:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016b06:	c1 e7 18             	shl    edi,0x18
c0016b09:	09 fa                	or     edx,edi
c0016b0b:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016b0f:	46                   	inc    esi
c0016b10:	83 fe 04             	cmp    esi,0x4
c0016b13:	0f 85 7a ff ff ff    	jne    c0016a93 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016b19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b1d:	83 f0 01             	xor    eax,0x1
c0016b20:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016b24:	75 57                	jne    c0016b7d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016b26:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016b2a:	83 f0 01             	xor    eax,0x1
c0016b2d:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016b31:	75 4a                	jne    c0016b7d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016b33:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016b37:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016b3f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016b47:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016b4d:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016b53:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016b59:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016b5d:	89 f7                	mov    edi,esi
c0016b5f:	c1 e0 0a             	shl    eax,0xa
c0016b62:	c1 ff 1f             	sar    edi,0x1f
c0016b65:	57                   	push   edi
c0016b66:	56                   	push   esi
c0016b67:	52                   	push   edx
c0016b68:	50                   	push   eax
c0016b69:	e8 3e fe 00 00       	call   c00269ac <__udivdi3>
c0016b6e:	83 c4 10             	add    esp,0x10
c0016b71:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016b75:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016b79:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016b7d:	84 c9                	test   cl,cl
c0016b7f:	74 53                	je     c0016bd4 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016b81:	0f b6 c9             	movzx  ecx,cl
c0016b84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b88:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016b8c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016b90:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016b94:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016b98:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016b9c:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016ba0:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016ba4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016ba8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016bac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016bb0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016bb4:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016bb8:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016bbc:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016bc0:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016bc4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016bc8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016bcc:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016bd0:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016bd4:	31 ed                	xor    ebp,ebp
c0016bd6:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016bda:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016bde:	89 f8                	mov    eax,edi
c0016be0:	09 f0                	or     eax,esi
c0016be2:	74 1e                	je     c0016c02 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016be4:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016be8:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016bec:	89 d1                	mov    ecx,edx
c0016bee:	09 c1                	or     ecx,eax
c0016bf0:	74 10                	je     c0016c02 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016bf2:	83 ec 0c             	sub    esp,0xc
c0016bf5:	57                   	push   edi
c0016bf6:	56                   	push   esi
c0016bf7:	52                   	push   edx
c0016bf8:	50                   	push   eax
c0016bf9:	53                   	push   ebx
c0016bfa:	e8 c7 fc ff ff       	call   c00168c6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016bff:	83 c4 20             	add    esp,0x20
c0016c02:	45                   	inc    ebp
c0016c03:	83 fd 04             	cmp    ebp,0x4
c0016c06:	75 ce                	jne    c0016bd6 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016c08:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016c0e:	5b                   	pop    ebx
c0016c0f:	5e                   	pop    esi
c0016c10:	5f                   	pop    edi
c0016c11:	5d                   	pop    ebp
c0016c12:	c3                   	ret    
c0016c13:	90                   	nop

c0016c14 <Serial::Serial(char const*)>:
c0016c14:	83 ec 0c             	sub    esp,0xc
c0016c17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c1b:	83 ec 08             	sub    esp,0x8
c0016c1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c22:	50                   	push   eax
c0016c23:	e8 38 d9 ff ff       	call   c0014560 <Device::Device(char const*)>
c0016c28:	83 c4 10             	add    esp,0x10
c0016c2b:	ba cc b2 02 c0       	mov    edx,0xc002b2cc
c0016c30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c34:	89 10                	mov    DWORD PTR [eax],edx
c0016c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c3a:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016c44:	90                   	nop
c0016c45:	83 c4 0c             	add    esp,0xc
c0016c48:	c3                   	ret    
c0016c49:	90                   	nop

c0016c4a <Serial::~Serial()>:
c0016c4a:	83 ec 0c             	sub    esp,0xc
c0016c4d:	ba cc b2 02 c0       	mov    edx,0xc002b2cc
c0016c52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c56:	89 10                	mov    DWORD PTR [eax],edx
c0016c58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c5c:	83 ec 0c             	sub    esp,0xc
c0016c5f:	50                   	push   eax
c0016c60:	e8 dd d5 ff ff       	call   c0014242 <Device::~Device()>
c0016c65:	83 c4 10             	add    esp,0x10
c0016c68:	90                   	nop
c0016c69:	83 c4 0c             	add    esp,0xc
c0016c6c:	c3                   	ret    
c0016c6d:	90                   	nop

c0016c6e <Serial::~Serial()>:
c0016c6e:	83 ec 0c             	sub    esp,0xc
c0016c71:	83 ec 0c             	sub    esp,0xc
c0016c74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c78:	e8 cd ff ff ff       	call   c0016c4a <Serial::~Serial()>
c0016c7d:	83 c4 10             	add    esp,0x10
c0016c80:	83 ec 08             	sub    esp,0x8
c0016c83:	68 58 01 00 00       	push   0x158
c0016c88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c8c:	e8 d9 c1 ff ff       	call   c0012e6a <operator delete(void*, unsigned long)>
c0016c91:	83 c4 10             	add    esp,0x10
c0016c94:	83 c4 0c             	add    esp,0xc
c0016c97:	c3                   	ret    

c0016c98 <Timer::Timer(char const*)>:
c0016c98:	83 ec 0c             	sub    esp,0xc
c0016c9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c9f:	83 ec 08             	sub    esp,0x8
c0016ca2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016ca6:	50                   	push   eax
c0016ca7:	e8 b4 d8 ff ff       	call   c0014560 <Device::Device(char const*)>
c0016cac:	83 c4 10             	add    esp,0x10
c0016caf:	ba 10 b3 02 c0       	mov    edx,0xc002b310
c0016cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cb8:	89 10                	mov    DWORD PTR [eax],edx
c0016cba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cbe:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016cc8:	90                   	nop
c0016cc9:	83 c4 0c             	add    esp,0xc
c0016ccc:	c3                   	ret    
c0016ccd:	90                   	nop

c0016cce <Timer::~Timer()>:
c0016cce:	83 ec 0c             	sub    esp,0xc
c0016cd1:	ba 10 b3 02 c0       	mov    edx,0xc002b310
c0016cd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cda:	89 10                	mov    DWORD PTR [eax],edx
c0016cdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ce0:	83 ec 0c             	sub    esp,0xc
c0016ce3:	50                   	push   eax
c0016ce4:	e8 59 d5 ff ff       	call   c0014242 <Device::~Device()>
c0016ce9:	83 c4 10             	add    esp,0x10
c0016cec:	90                   	nop
c0016ced:	83 c4 0c             	add    esp,0xc
c0016cf0:	c3                   	ret    
c0016cf1:	90                   	nop

c0016cf2 <Timer::~Timer()>:
c0016cf2:	83 ec 0c             	sub    esp,0xc
c0016cf5:	83 ec 0c             	sub    esp,0xc
c0016cf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cfc:	e8 cd ff ff ff       	call   c0016cce <Timer::~Timer()>
c0016d01:	83 c4 10             	add    esp,0x10
c0016d04:	83 ec 08             	sub    esp,0x8
c0016d07:	68 5c 01 00 00       	push   0x15c
c0016d0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d10:	e8 55 c1 ff ff       	call   c0012e6a <operator delete(void*, unsigned long)>
c0016d15:	83 c4 10             	add    esp,0x10
c0016d18:	83 c4 0c             	add    esp,0xc
c0016d1b:	c3                   	ret    

c0016d1c <Timer::read()>:
c0016d1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d20:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016d26:	c3                   	ret    

c0016d27 <timerHandler(unsigned long long)>:
c0016d27:	55                   	push   ebp
c0016d28:	57                   	push   edi
c0016d29:	56                   	push   esi
c0016d2a:	53                   	push   ebx
c0016d2b:	83 ec 0c             	sub    esp,0xc
c0016d2e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016d32:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016d36:	01 35 90 ea 02 c0    	add    DWORD PTR ds:0xc002ea90,esi
c0016d3c:	11 3d 94 ea 02 c0    	adc    DWORD PTR ds:0xc002ea94,edi
c0016d42:	80 3d 0d e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e40d,0x0
c0016d49:	0f 84 07 01 00 00    	je     c0016e56 <timerHandler(unsigned long long)+0x12f>
c0016d4f:	e8 a9 70 00 00       	call   c001ddfd <lockStuff()>
c0016d54:	83 ec 0c             	sub    esp,0xc
c0016d57:	68 5c 19 03 c0       	push   0xc003195c
c0016d5c:	e8 bd 1c 01 00       	call   c0028a1e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016d61:	c7 04 24 5c 19 03 c0 	mov    DWORD PTR [esp],0xc003195c
c0016d68:	89 c3                	mov    ebx,eax
c0016d6a:	e8 b7 1c 01 00       	call   c0028a26 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016d6f:	83 c4 10             	add    esp,0x10
c0016d72:	84 c0                	test   al,al
c0016d74:	74 60                	je     c0016dd6 <timerHandler(unsigned long long)+0xaf>
c0016d76:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016d7c:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0016d7f:	85 c0                	test   eax,eax
c0016d81:	0f 85 91 00 00 00    	jne    c0016e18 <timerHandler(unsigned long long)+0xf1>
c0016d87:	e9 be 00 00 00       	jmp    c0016e4a <timerHandler(unsigned long long)+0x123>
c0016d8c:	83 ec 0c             	sub    esp,0xc
c0016d8f:	55                   	push   ebp
c0016d90:	e8 59 76 00 00       	call   c001e3ee <unblockTask(ThreadControlBlock*)>
c0016d95:	83 c4 10             	add    esp,0x10
c0016d98:	39 eb                	cmp    ebx,ebp
c0016d9a:	75 12                	jne    c0016dae <timerHandler(unsigned long long)+0x87>
c0016d9c:	83 ec 0c             	sub    esp,0xc
c0016d9f:	68 5c 19 03 c0       	push   0xc003195c
c0016da4:	e8 75 1c 01 00       	call   c0028a1e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016da9:	89 c3                	mov    ebx,eax
c0016dab:	83 c4 10             	add    esp,0x10
c0016dae:	83 ec 0c             	sub    esp,0xc
c0016db1:	68 5c 19 03 c0       	push   0xc003195c
c0016db6:	e8 6b 1c 01 00       	call   c0028a26 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016dbb:	83 c4 10             	add    esp,0x10
c0016dbe:	84 c0                	test   al,al
c0016dc0:	75 b4                	jne    c0016d76 <timerHandler(unsigned long long)+0x4f>
c0016dc2:	83 ec 0c             	sub    esp,0xc
c0016dc5:	68 5c 19 03 c0       	push   0xc003195c
c0016dca:	e8 4f 1c 01 00       	call   c0028a1e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016dcf:	83 c4 10             	add    esp,0x10
c0016dd2:	39 d8                	cmp    eax,ebx
c0016dd4:	74 a0                	je     c0016d76 <timerHandler(unsigned long long)+0x4f>
c0016dd6:	83 ec 0c             	sub    esp,0xc
c0016dd9:	68 5c 19 03 c0       	push   0xc003195c
c0016dde:	e8 3b 1c 01 00       	call   c0028a1e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016de3:	c7 04 24 5c 19 03 c0 	mov    DWORD PTR [esp],0xc003195c
c0016dea:	89 c5                	mov    ebp,eax
c0016dec:	e8 51 1c 01 00       	call   c0028a42 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016df1:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016df4:	83 c4 10             	add    esp,0x10
c0016df7:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016dfa:	39 15 90 ea 02 c0    	cmp    DWORD PTR ds:0xc002ea90,edx
c0016e00:	a1 94 ea 02 c0       	mov    eax,ds:0xc002ea94
c0016e05:	19 c8                	sbb    eax,ecx
c0016e07:	73 83                	jae    c0016d8c <timerHandler(unsigned long long)+0x65>
c0016e09:	50                   	push   eax
c0016e0a:	50                   	push   eax
c0016e0b:	55                   	push   ebp
c0016e0c:	68 5c 19 03 c0       	push   0xc003195c
c0016e11:	e8 da 1c 01 00       	call   c0028af0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016e16:	eb 93                	jmp    c0016dab <timerHandler(unsigned long long)+0x84>
c0016e18:	80 3d 0c e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e40c,0x0
c0016e1f:	74 29                	je     c0016e4a <timerHandler(unsigned long long)+0x123>
c0016e21:	39 c6                	cmp    esi,eax
c0016e23:	bb 00 00 00 00       	mov    ebx,0x0
c0016e28:	19 df                	sbb    edi,ebx
c0016e2a:	72 19                	jb     c0016e45 <timerHandler(unsigned long long)+0x11e>
c0016e2c:	e8 a5 6f 00 00       	call   c001ddd6 <lockScheduler()>
c0016e31:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e36:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016e39:	e8 d4 72 00 00       	call   c001e112 <schedule()>
c0016e3e:	e8 95 6f 00 00       	call   c001ddd8 <unlockScheduler()>
c0016e43:	eb 05                	jmp    c0016e4a <timerHandler(unsigned long long)+0x123>
c0016e45:	29 f0                	sub    eax,esi
c0016e47:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0016e4a:	83 c4 0c             	add    esp,0xc
c0016e4d:	5b                   	pop    ebx
c0016e4e:	5e                   	pop    esi
c0016e4f:	5f                   	pop    edi
c0016e50:	5d                   	pop    ebp
c0016e51:	e9 41 73 00 00       	jmp    c001e197 <unlockStuff()>
c0016e56:	83 c4 0c             	add    esp,0xc
c0016e59:	5b                   	pop    ebx
c0016e5a:	5e                   	pop    esi
c0016e5b:	5f                   	pop    edi
c0016e5c:	5d                   	pop    ebp
c0016e5d:	c3                   	ret    

c0016e5e <setupTimer(int)>:
c0016e5e:	57                   	push   edi
c0016e5f:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0016e64:	56                   	push   esi
c0016e65:	53                   	push   ebx
c0016e66:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016e6a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016e70:	83 ec 0c             	sub    esp,0xc
c0016e73:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016e79:	e8 de d7 ff ff       	call   c001465c <Device::getName()>
c0016e7e:	83 c4 10             	add    esp,0x10
c0016e81:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016e84:	0f 85 8d 00 00 00    	jne    c0016f17 <setupTimer(int)+0xb9>
c0016e8a:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0016e8f:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016e96:	74 7f                	je     c0016f17 <setupTimer(int)+0xb9>
c0016e98:	83 ec 0c             	sub    esp,0xc
c0016e9b:	68 5c 01 00 00       	push   0x15c
c0016ea0:	e8 9b 89 ff ff       	call   c000f840 <malloc>
c0016ea5:	89 04 24             	mov    DWORD PTR [esp],eax
c0016ea8:	89 c3                	mov    ebx,eax
c0016eaa:	e8 e1 f6 00 00       	call   c0026590 <PIT::PIT()>
c0016eaf:	59                   	pop    ecx
c0016eb0:	5f                   	pop    edi
c0016eb1:	53                   	push   ebx
c0016eb2:	ff 35 08 e4 02 c0    	push   DWORD PTR ds:0xc002e408
c0016eb8:	e8 b3 d4 ff ff       	call   c0014370 <Device::addChild(Device*)>
c0016ebd:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016ebf:	6a 00                	push   0x0
c0016ec1:	6a 00                	push   0x0
c0016ec3:	56                   	push   esi
c0016ec4:	53                   	push   ebx
c0016ec5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016ec8:	83 c4 14             	add    esp,0x14
c0016ecb:	68 60 01 00 00       	push   0x160
c0016ed0:	e8 6b 89 ff ff       	call   c000f840 <malloc>
c0016ed5:	89 04 24             	mov    DWORD PTR [esp],eax
c0016ed8:	89 c7                	mov    edi,eax
c0016eda:	e8 61 f5 00 00       	call   c0026440 <APICTimer::APICTimer()>
c0016edf:	6a 00                	push   0x0
c0016ee1:	6a 00                	push   0x0
c0016ee3:	56                   	push   esi
c0016ee4:	57                   	push   edi
c0016ee5:	e8 58 f4 00 00       	call   c0026342 <APICTimer::open(int, int, void*)>
c0016eea:	83 c4 20             	add    esp,0x20
c0016eed:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016eef:	6a 00                	push   0x0
c0016ef1:	6a 00                	push   0x0
c0016ef3:	6a 00                	push   0x0
c0016ef5:	53                   	push   ebx
c0016ef6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016ef9:	58                   	pop    eax
c0016efa:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0016eff:	5a                   	pop    edx
c0016f00:	57                   	push   edi
c0016f01:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016f07:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016f0d:	e8 5e d4 ff ff       	call   c0014370 <Device::addChild(Device*)>
c0016f12:	83 c4 10             	add    esp,0x10
c0016f15:	eb 33                	jmp    c0016f4a <setupTimer(int)+0xec>
c0016f17:	83 ec 0c             	sub    esp,0xc
c0016f1a:	68 5c 01 00 00       	push   0x15c
c0016f1f:	e8 1c 89 ff ff       	call   c000f840 <malloc>
c0016f24:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f27:	89 c3                	mov    ebx,eax
c0016f29:	e8 62 f6 00 00       	call   c0026590 <PIT::PIT()>
c0016f2e:	58                   	pop    eax
c0016f2f:	5a                   	pop    edx
c0016f30:	53                   	push   ebx
c0016f31:	ff 35 08 e4 02 c0    	push   DWORD PTR ds:0xc002e408
c0016f37:	e8 34 d4 ff ff       	call   c0014370 <Device::addChild(Device*)>
c0016f3c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016f3e:	6a 00                	push   0x0
c0016f40:	6a 00                	push   0x0
c0016f42:	56                   	push   esi
c0016f43:	53                   	push   ebx
c0016f44:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016f47:	83 c4 20             	add    esp,0x20
c0016f4a:	89 d8                	mov    eax,ebx
c0016f4c:	5b                   	pop    ebx
c0016f4d:	5e                   	pop    esi
c0016f4e:	5f                   	pop    edi
c0016f4f:	c3                   	ret    

c0016f50 <VCache::VCache(PhysicalDisk*)>:
c0016f50:	53                   	push   ebx
c0016f51:	83 ec 18             	sub    esp,0x18
c0016f54:	ba 40 b3 02 c0       	mov    edx,0xc002b340
c0016f59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f5d:	89 10                	mov    DWORD PTR [eax],edx
c0016f5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f63:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016f6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f6e:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016f75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f79:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016f80:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016f87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f8b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016f92:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016f99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f9d:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016fa4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fa8:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016fac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fb0:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0016fb7:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0016fbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fc2:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016fc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fca:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0016fce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fd2:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016fd6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fda:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016fe1:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0016fe9:	83 ec 0c             	sub    esp,0xc
c0016fec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016ff0:	e8 4b 88 ff ff       	call   c000f840 <malloc>
c0016ff5:	83 c4 10             	add    esp,0x10
c0016ff8:	89 c3                	mov    ebx,eax
c0016ffa:	83 ec 0c             	sub    esp,0xc
c0016ffd:	53                   	push   ebx
c0016ffe:	e8 f3 6e 00 00       	call   c001def6 <Mutex::Mutex()>
c0017003:	83 c4 10             	add    esp,0x10
c0017006:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001700a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001700d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017011:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017015:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0017018:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001701c:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0017023:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017027:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001702d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017031:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0017034:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017038:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c001703e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017044:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0017048:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c001704b:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c001704e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017052:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0017056:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001705a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017060:	05 00 01 00 00       	add    eax,0x100
c0017065:	c1 e0 04             	shl    eax,0x4
c0017068:	83 ec 0c             	sub    esp,0xc
c001706b:	50                   	push   eax
c001706c:	e8 cf 87 ff ff       	call   c000f840 <malloc>
c0017071:	83 c4 10             	add    esp,0x10
c0017074:	89 c2                	mov    edx,eax
c0017076:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001707a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001707d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017081:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0017088:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001708c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0017090:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017094:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001709a:	c1 e0 07             	shl    eax,0x7
c001709d:	83 ec 0c             	sub    esp,0xc
c00170a0:	50                   	push   eax
c00170a1:	e8 9a 87 ff ff       	call   c000f840 <malloc>
c00170a6:	83 c4 10             	add    esp,0x10
c00170a9:	89 c2                	mov    edx,eax
c00170ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170af:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00170b2:	90                   	nop
c00170b3:	83 c4 18             	add    esp,0x18
c00170b6:	5b                   	pop    ebx
c00170b7:	c3                   	ret    

c00170b8 <VCache::invalidateReadBuffer()>:
c00170b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00170bc:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c00170c2:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c00170c6:	c3                   	ret    
c00170c7:	90                   	nop

c00170c8 <VCache::writeWriteBuffer()>:
c00170c8:	53                   	push   ebx
c00170c9:	83 ec 14             	sub    esp,0x14
c00170cc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00170d0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00170d3:	8b 10                	mov    edx,DWORD PTR [eax]
c00170d5:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00170d8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00170db:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00170de:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00170e1:	50                   	push   eax
c00170e2:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00170e5:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00170ec:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00170f3:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c00170f7:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c00170fe:	83 c4 28             	add    esp,0x28
c0017101:	5b                   	pop    ebx
c0017102:	c3                   	ret    
c0017103:	90                   	nop

c0017104 <VCache::~VCache()>:
c0017104:	83 ec 0c             	sub    esp,0xc
c0017107:	ba 40 b3 02 c0       	mov    edx,0xc002b340
c001710c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017110:	89 10                	mov    DWORD PTR [eax],edx
c0017112:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017116:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0017119:	84 c0                	test   al,al
c001711b:	74 0f                	je     c001712c <VCache::~VCache()+0x28>
c001711d:	83 ec 0c             	sub    esp,0xc
c0017120:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017124:	e8 9f ff ff ff       	call   c00170c8 <VCache::writeWriteBuffer()>
c0017129:	83 c4 10             	add    esp,0x10
c001712c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017130:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0017133:	83 ec 0c             	sub    esp,0xc
c0017136:	50                   	push   eax
c0017137:	e8 14 87 ff ff       	call   c000f850 <free>
c001713c:	83 c4 10             	add    esp,0x10
c001713f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017143:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017146:	83 ec 0c             	sub    esp,0xc
c0017149:	50                   	push   eax
c001714a:	e8 01 87 ff ff       	call   c000f850 <free>
c001714f:	83 c4 10             	add    esp,0x10
c0017152:	90                   	nop
c0017153:	83 c4 0c             	add    esp,0xc
c0017156:	c3                   	ret    
c0017157:	90                   	nop

c0017158 <VCache::~VCache()>:
c0017158:	83 ec 0c             	sub    esp,0xc
c001715b:	83 ec 0c             	sub    esp,0xc
c001715e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017162:	e8 9d ff ff ff       	call   c0017104 <VCache::~VCache()>
c0017167:	83 c4 10             	add    esp,0x10
c001716a:	83 ec 08             	sub    esp,0x8
c001716d:	6a 44                	push   0x44
c001716f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017173:	e8 f2 bc ff ff       	call   c0012e6a <operator delete(void*, unsigned long)>
c0017178:	83 c4 10             	add    esp,0x10
c001717b:	83 c4 0c             	add    esp,0xc
c001717e:	c3                   	ret    
c001717f:	90                   	nop

c0017180 <VCache::write(unsigned long long, int, void*)>:
c0017180:	55                   	push   ebp
c0017181:	57                   	push   edi
c0017182:	56                   	push   esi
c0017183:	53                   	push   ebx
c0017184:	83 ec 28             	sub    esp,0x28
c0017187:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001718b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001718f:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017193:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0017197:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001719a:	e8 b9 71 00 00       	call   c001e358 <Semaphore::acquire()>
c001719f:	83 c4 10             	add    esp,0x10
c00171a2:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c00171a6:	74 0c                	je     c00171b4 <VCache::write(unsigned long long, int, void*)+0x34>
c00171a8:	83 ec 0c             	sub    esp,0xc
c00171ab:	53                   	push   ebx
c00171ac:	e8 07 ff ff ff       	call   c00170b8 <VCache::invalidateReadBuffer()>
c00171b1:	83 c4 10             	add    esp,0x10
c00171b4:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00171b8:	74 66                	je     c0017220 <VCache::write(unsigned long long, int, void*)+0xa0>
c00171ba:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00171bd:	99                   	cdq    
c00171be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00171c2:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c00171c5:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c00171c8:	89 c1                	mov    ecx,eax
c00171ca:	89 d0                	mov    eax,edx
c00171cc:	31 f1                	xor    ecx,esi
c00171ce:	31 f8                	xor    eax,edi
c00171d0:	89 ca                	mov    edx,ecx
c00171d2:	09 c2                	or     edx,eax
c00171d4:	75 3e                	jne    c0017214 <VCache::write(unsigned long long, int, void*)+0x94>
c00171d6:	83 fd 01             	cmp    ebp,0x1
c00171d9:	75 39                	jne    c0017214 <VCache::write(unsigned long long, int, void*)+0x94>
c00171db:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00171de:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00171e4:	51                   	push   ecx
c00171e5:	50                   	push   eax
c00171e6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00171ea:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00171ee:	0f af c8             	imul   ecx,eax
c00171f1:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c00171f4:	51                   	push   ecx
c00171f5:	e8 4a 95 fe ff       	call   c0000744 <memcpy>
c00171fa:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00171fd:	83 c4 10             	add    esp,0x10
c0017200:	40                   	inc    eax
c0017201:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0017204:	83 c0 80             	add    eax,0xffffff80
c0017207:	75 57                	jne    c0017260 <VCache::write(unsigned long long, int, void*)+0xe0>
c0017209:	83 ec 0c             	sub    esp,0xc
c001720c:	53                   	push   ebx
c001720d:	e8 b6 fe ff ff       	call   c00170c8 <VCache::writeWriteBuffer()>
c0017212:	eb 34                	jmp    c0017248 <VCache::write(unsigned long long, int, void*)+0xc8>
c0017214:	83 ec 0c             	sub    esp,0xc
c0017217:	53                   	push   ebx
c0017218:	e8 ab fe ff ff       	call   c00170c8 <VCache::writeWriteBuffer()>
c001721d:	83 c4 10             	add    esp,0x10
c0017220:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017223:	83 fd 7f             	cmp    ebp,0x7f
c0017226:	7f 25                	jg     c001724d <VCache::write(unsigned long long, int, void*)+0xcd>
c0017228:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c001722b:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c001722e:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0017231:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0017235:	52                   	push   edx
c0017236:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001723c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017240:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0017243:	e8 fc 94 fe ff       	call   c0000744 <memcpy>
c0017248:	83 c4 10             	add    esp,0x10
c001724b:	eb 13                	jmp    c0017260 <VCache::write(unsigned long long, int, void*)+0xe0>
c001724d:	83 ec 0c             	sub    esp,0xc
c0017250:	8b 10                	mov    edx,DWORD PTR [eax]
c0017252:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0017256:	55                   	push   ebp
c0017257:	57                   	push   edi
c0017258:	56                   	push   esi
c0017259:	50                   	push   eax
c001725a:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001725d:	83 c4 20             	add    esp,0x20
c0017260:	83 ec 0c             	sub    esp,0xc
c0017263:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017266:	e8 9b 76 00 00       	call   c001e906 <Semaphore::release()>
c001726b:	83 c4 2c             	add    esp,0x2c
c001726e:	31 c0                	xor    eax,eax
c0017270:	5b                   	pop    ebx
c0017271:	5e                   	pop    esi
c0017272:	5f                   	pop    edi
c0017273:	5d                   	pop    ebp
c0017274:	c3                   	ret    
c0017275:	90                   	nop

c0017276 <VCache::read(unsigned long long, int, void*)>:
c0017276:	55                   	push   ebp
c0017277:	57                   	push   edi
c0017278:	56                   	push   esi
c0017279:	53                   	push   ebx
c001727a:	83 ec 28             	sub    esp,0x28
c001727d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0017281:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017285:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017289:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001728d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0017291:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0017295:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0017299:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001729c:	e8 b7 70 00 00       	call   c001e358 <Semaphore::acquire()>
c00172a1:	83 c4 10             	add    esp,0x10
c00172a4:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00172a8:	74 0c                	je     c00172b6 <VCache::read(unsigned long long, int, void*)+0x40>
c00172aa:	83 ec 0c             	sub    esp,0xc
c00172ad:	53                   	push   ebx
c00172ae:	e8 15 fe ff ff       	call   c00170c8 <VCache::writeWriteBuffer()>
c00172b3:	83 c4 10             	add    esp,0x10
c00172b6:	83 fe 01             	cmp    esi,0x1
c00172b9:	0f 85 80 00 00 00    	jne    c001733f <VCache::read(unsigned long long, int, void*)+0xc9>
c00172bf:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00172c2:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c00172c9:	75 74                	jne    c001733f <VCache::read(unsigned long long, int, void*)+0xc9>
c00172cb:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00172ce:	89 d1                	mov    ecx,edx
c00172d0:	f7 d9                	neg    ecx
c00172d2:	89 cf                	mov    edi,ecx
c00172d4:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00172d8:	c1 ff 1f             	sar    edi,0x1f
c00172db:	23 0c 24             	and    ecx,DWORD PTR [esp]
c00172de:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00172e2:	89 ce                	mov    esi,ecx
c00172e4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00172e8:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c00172ec:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c00172f0:	89 cf                	mov    edi,ecx
c00172f2:	74 0a                	je     c00172fe <VCache::read(unsigned long long, int, void*)+0x88>
c00172f4:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c00172f7:	75 05                	jne    c00172fe <VCache::read(unsigned long long, int, void*)+0x88>
c00172f9:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c00172fc:	74 1c                	je     c001731a <VCache::read(unsigned long long, int, void*)+0xa4>
c00172fe:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0017302:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0017305:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c0017308:	83 ec 0c             	sub    esp,0xc
c001730b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001730d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0017310:	52                   	push   edx
c0017311:	57                   	push   edi
c0017312:	56                   	push   esi
c0017313:	50                   	push   eax
c0017314:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0017317:	83 c4 20             	add    esp,0x20
c001731a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001731d:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0017323:	50                   	push   eax
c0017324:	52                   	push   edx
c0017325:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017328:	48                   	dec    eax
c0017329:	23 44 24 08          	and    eax,DWORD PTR [esp+0x8]
c001732d:	0f af c2             	imul   eax,edx
c0017330:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c0017333:	50                   	push   eax
c0017334:	55                   	push   ebp
c0017335:	e8 0a 94 fe ff       	call   c0000744 <memcpy>
c001733a:	83 c4 10             	add    esp,0x10
c001733d:	eb 21                	jmp    c0017360 <VCache::read(unsigned long long, int, void*)+0xea>
c001733f:	83 ec 0c             	sub    esp,0xc
c0017342:	53                   	push   ebx
c0017343:	e8 70 fd ff ff       	call   c00170b8 <VCache::invalidateReadBuffer()>
c0017348:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001734b:	8b 10                	mov    edx,DWORD PTR [eax]
c001734d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017350:	56                   	push   esi
c0017351:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017355:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017359:	50                   	push   eax
c001735a:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001735d:	83 c4 20             	add    esp,0x20
c0017360:	83 ec 0c             	sub    esp,0xc
c0017363:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017366:	e8 9b 75 00 00       	call   c001e906 <Semaphore::release()>
c001736b:	83 c4 2c             	add    esp,0x2c
c001736e:	31 c0                	xor    eax,eax
c0017370:	5b                   	pop    ebx
c0017371:	5e                   	pop    esi
c0017372:	5f                   	pop    edi
c0017373:	5d                   	pop    ebp
c0017374:	c3                   	ret    
c0017375:	90                   	nop

c0017376 <Video::putrect(int, int, int, int, unsigned int)>:
c0017376:	55                   	push   ebp
c0017377:	57                   	push   edi
c0017378:	56                   	push   esi
c0017379:	53                   	push   ebx
c001737a:	83 ec 1c             	sub    esp,0x1c
c001737d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0017381:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017385:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0017389:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c001738d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017391:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017395:	01 df                	add    edi,ebx
c0017397:	39 fb                	cmp    ebx,edi
c0017399:	7d 1f                	jge    c00173ba <Video::putrect(int, int, int, int, unsigned int)+0x44>
c001739b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001739f:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00173a3:	7d 12                	jge    c00173b7 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c00173a5:	8b 16                	mov    edx,DWORD PTR [esi]
c00173a7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00173ab:	53                   	push   ebx
c00173ac:	55                   	push   ebp
c00173ad:	45                   	inc    ebp
c00173ae:	56                   	push   esi
c00173af:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00173b2:	83 c4 10             	add    esp,0x10
c00173b5:	eb e8                	jmp    c001739f <Video::putrect(int, int, int, int, unsigned int)+0x29>
c00173b7:	43                   	inc    ebx
c00173b8:	eb dd                	jmp    c0017397 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c00173ba:	83 c4 1c             	add    esp,0x1c
c00173bd:	5b                   	pop    ebx
c00173be:	5e                   	pop    esi
c00173bf:	5f                   	pop    edi
c00173c0:	5d                   	pop    ebp
c00173c1:	c3                   	ret    

c00173c2 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c00173c2:	55                   	push   ebp
c00173c3:	57                   	push   edi
c00173c4:	31 ff                	xor    edi,edi
c00173c6:	56                   	push   esi
c00173c7:	53                   	push   ebx
c00173c8:	83 ec 1c             	sub    esp,0x1c
c00173cb:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00173cf:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00173d3:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c00173da:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c00173df:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00173e3:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00173e7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00173eb:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c00173ee:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00173f2:	01 f9                	add    ecx,edi
c00173f4:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c00173f8:	7d 2f                	jge    c0017429 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c00173fa:	31 f6                	xor    esi,esi
c00173fc:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017400:	01 f2                	add    edx,esi
c0017402:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0017406:	7d 1a                	jge    c0017422 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0017408:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001740b:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c001740e:	46                   	inc    esi
c001740f:	51                   	push   ecx
c0017410:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0017414:	52                   	push   edx
c0017415:	55                   	push   ebp
c0017416:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017419:	83 c4 10             	add    esp,0x10
c001741c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017420:	eb da                	jmp    c00173fc <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0017422:	47                   	inc    edi
c0017423:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0017427:	eb c5                	jmp    c00173ee <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0017429:	83 c4 1c             	add    esp,0x1c
c001742c:	5b                   	pop    ebx
c001742d:	5e                   	pop    esi
c001742e:	5f                   	pop    edi
c001742f:	5d                   	pop    ebp
c0017430:	c3                   	ret    
c0017431:	90                   	nop

c0017432 <Video::blit(unsigned int*, int, int, int, int)>:
c0017432:	55                   	push   ebp
c0017433:	57                   	push   edi
c0017434:	56                   	push   esi
c0017435:	53                   	push   ebx
c0017436:	83 ec 1c             	sub    esp,0x1c
c0017439:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001743d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017441:	85 c0                	test   eax,eax
c0017443:	79 02                	jns    c0017447 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0017445:	31 c0                	xor    eax,eax
c0017447:	c1 e0 02             	shl    eax,0x2
c001744a:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001744e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017452:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017456:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c001745a:	39 d8                	cmp    eax,ebx
c001745c:	7e 49                	jle    c00174a7 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001745e:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0017464:	7c 41                	jl     c00174a7 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0017466:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001746a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001746e:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017472:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0017476:	39 f9                	cmp    ecx,edi
c0017478:	7e 22                	jle    c001749c <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c001747a:	83 c5 04             	add    ebp,0x4
c001747d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0017483:	7c 14                	jl     c0017499 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0017485:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0017487:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c001748a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001748e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017492:	56                   	push   esi
c0017493:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0017496:	83 c4 10             	add    esp,0x10
c0017499:	47                   	inc    edi
c001749a:	eb d2                	jmp    c001746e <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c001749c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00174a0:	43                   	inc    ebx
c00174a1:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00174a5:	eb ab                	jmp    c0017452 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c00174a7:	83 c4 1c             	add    esp,0x1c
c00174aa:	5b                   	pop    ebx
c00174ab:	5e                   	pop    esi
c00174ac:	5f                   	pop    edi
c00174ad:	5d                   	pop    ebp
c00174ae:	c3                   	ret    
c00174af:	90                   	nop

c00174b0 <Video::clearScreen(unsigned int)>:
c00174b0:	57                   	push   edi
c00174b1:	56                   	push   esi
c00174b2:	53                   	push   ebx
c00174b3:	31 db                	xor    ebx,ebx
c00174b5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00174b9:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00174bf:	7e 1f                	jle    c00174e0 <Video::clearScreen(unsigned int)+0x30>
c00174c1:	31 ff                	xor    edi,edi
c00174c3:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00174c9:	7e 12                	jle    c00174dd <Video::clearScreen(unsigned int)+0x2d>
c00174cb:	8b 06                	mov    eax,DWORD PTR [esi]
c00174cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00174d1:	53                   	push   ebx
c00174d2:	57                   	push   edi
c00174d3:	47                   	inc    edi
c00174d4:	56                   	push   esi
c00174d5:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00174d8:	83 c4 10             	add    esp,0x10
c00174db:	eb e6                	jmp    c00174c3 <Video::clearScreen(unsigned int)+0x13>
c00174dd:	43                   	inc    ebx
c00174de:	eb d9                	jmp    c00174b9 <Video::clearScreen(unsigned int)+0x9>
c00174e0:	5b                   	pop    ebx
c00174e1:	5e                   	pop    esi
c00174e2:	5f                   	pop    edi
c00174e3:	c3                   	ret    

c00174e4 <Video::putpixel(int, int, unsigned int)>:
c00174e4:	c7 44 24 04 48 b3 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b348
c00174ec:	e9 0a 31 00 00       	jmp    c001a5fb <Krnl::panic(char const*)>
c00174f1:	90                   	nop

c00174f2 <Video::Video(char const*)>:
c00174f2:	83 ec 0c             	sub    esp,0xc
c00174f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174f9:	83 ec 08             	sub    esp,0x8
c00174fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017500:	50                   	push   eax
c0017501:	e8 5a d0 ff ff       	call   c0014560 <Device::Device(char const*)>
c0017506:	83 c4 10             	add    esp,0x10
c0017509:	ba cc b3 02 c0       	mov    edx,0xc002b3cc
c001750e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017512:	89 10                	mov    DWORD PTR [eax],edx
c0017514:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017518:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0017522:	90                   	nop
c0017523:	83 c4 0c             	add    esp,0xc
c0017526:	c3                   	ret    
c0017527:	90                   	nop

c0017528 <Video::~Video()>:
c0017528:	83 ec 0c             	sub    esp,0xc
c001752b:	ba cc b3 02 c0       	mov    edx,0xc002b3cc
c0017530:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017534:	89 10                	mov    DWORD PTR [eax],edx
c0017536:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001753a:	83 ec 0c             	sub    esp,0xc
c001753d:	50                   	push   eax
c001753e:	e8 ff cc ff ff       	call   c0014242 <Device::~Device()>
c0017543:	83 c4 10             	add    esp,0x10
c0017546:	90                   	nop
c0017547:	83 c4 0c             	add    esp,0xc
c001754a:	c3                   	ret    
c001754b:	90                   	nop

c001754c <Video::~Video()>:
c001754c:	83 ec 0c             	sub    esp,0xc
c001754f:	83 ec 0c             	sub    esp,0xc
c0017552:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017556:	e8 cd ff ff ff       	call   c0017528 <Video::~Video()>
c001755b:	83 c4 10             	add    esp,0x10
c001755e:	83 ec 08             	sub    esp,0x8
c0017561:	68 64 01 00 00       	push   0x164
c0017566:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001756a:	e8 fb b8 ff ff       	call   c0012e6a <operator delete(void*, unsigned long)>
c001756f:	83 c4 10             	add    esp,0x10
c0017572:	83 c4 0c             	add    esp,0xc
c0017575:	c3                   	ret    

c0017576 <Video::isMonochrome()>:
c0017576:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001757a:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0017580:	c3                   	ret    
c0017581:	90                   	nop

c0017582 <Video::getWidth()>:
c0017582:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017586:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001758c:	c3                   	ret    
c001758d:	90                   	nop

c001758e <Video::getHeight()>:
c001758e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017592:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017598:	c3                   	ret    
c0017599:	90                   	nop

c001759a <Video::drawCursor(int, int, unsigned char*, int)>:
c001759a:	55                   	push   ebp
c001759b:	57                   	push   edi
c001759c:	56                   	push   esi
c001759d:	53                   	push   ebx
c001759e:	83 ec 2c             	sub    esp,0x2c
c00175a1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00175a5:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00175a9:	83 f8 01             	cmp    eax,0x1
c00175ac:	19 c9                	sbb    ecx,ecx
c00175ae:	31 db                	xor    ebx,ebx
c00175b0:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00175b4:	89 cd                	mov    ebp,ecx
c00175b6:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c00175be:	f7 d5                	not    ebp
c00175c0:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c00175c6:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00175ca:	01 d8                	add    eax,ebx
c00175cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00175d0:	56                   	push   esi
c00175d1:	e8 b8 ff ff ff       	call   c001758e <Video::getHeight()>
c00175d6:	59                   	pop    ecx
c00175d7:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00175db:	7e 70                	jle    c001764d <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c00175dd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00175e1:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00175e5:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c00175e8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00175ec:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00175f0:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c00175f7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00175fb:	89 f8                	mov    eax,edi
c00175fd:	83 c0 20             	add    eax,0x20
c0017600:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017604:	56                   	push   esi
c0017605:	e8 78 ff ff ff       	call   c0017582 <Video::getWidth()>
c001760a:	5a                   	pop    edx
c001760b:	39 c7                	cmp    edi,eax
c001760d:	7d 34                	jge    c0017643 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c001760f:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0017614:	74 05                	je     c001761b <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0017616:	8b 06                	mov    eax,DWORD PTR [esi]
c0017618:	55                   	push   ebp
c0017619:	eb 0d                	jmp    c0017628 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c001761b:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0017620:	74 12                	je     c0017634 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0017622:	8b 06                	mov    eax,DWORD PTR [esi]
c0017624:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017628:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001762c:	57                   	push   edi
c001762d:	56                   	push   esi
c001762e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017631:	83 c4 10             	add    esp,0x10
c0017634:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0017638:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c001763c:	47                   	inc    edi
c001763d:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0017641:	75 c1                	jne    c0017604 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0017643:	43                   	inc    ebx
c0017644:	83 fb 20             	cmp    ebx,0x20
c0017647:	0f 85 79 ff ff ff    	jne    c00175c6 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c001764d:	83 c4 2c             	add    esp,0x2c
c0017650:	5b                   	pop    ebx
c0017651:	5e                   	pop    esi
c0017652:	5f                   	pop    edi
c0017653:	5d                   	pop    ebp
c0017654:	c3                   	ret    
c0017655:	90                   	nop

c0017656 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0017656:	55                   	push   ebp
c0017657:	57                   	push   edi
c0017658:	56                   	push   esi
c0017659:	53                   	push   ebx
c001765a:	83 ec 28             	sub    esp,0x28
c001765d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0017661:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0017665:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c0017669:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c001766d:	c1 e7 08             	shl    edi,0x8
c0017670:	01 c7                	add    edi,eax
c0017672:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0017676:	c1 e0 08             	shl    eax,0x8
c0017679:	01 d0                	add    eax,edx
c001767b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001767f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017683:	0f af c7             	imul   eax,edi
c0017686:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c001768d:	50                   	push   eax
c001768e:	e8 ad 81 ff ff       	call   c000f840 <malloc>
c0017693:	83 c4 10             	add    esp,0x10
c0017696:	89 c5                	mov    ebp,eax
c0017698:	85 c0                	test   eax,eax
c001769a:	75 15                	jne    c00176b1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c001769c:	83 ec 0c             	sub    esp,0xc
c001769f:	68 69 b3 02 c0       	push   0xc002b369
c00176a4:	e8 a1 b8 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c00176a9:	83 c4 10             	add    esp,0x10
c00176ac:	e9 1c 01 00 00       	jmp    c00177cd <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c00176b1:	be 12 00 00 00       	mov    esi,0x12
c00176b6:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c00176ba:	74 11                	je     c00176cd <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c00176bc:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c00176c0:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c00176c4:	c1 fe 03             	sar    esi,0x3
c00176c7:	0f af f0             	imul   esi,eax
c00176ca:	83 c6 12             	add    esi,0x12
c00176cd:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00176d1:	74 04                	je     c00176d7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c00176d3:	85 ff                	test   edi,edi
c00176d5:	75 12                	jne    c00176e9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c00176d7:	83 ec 0c             	sub    esp,0xc
c00176da:	68 80 b3 02 c0       	push   0xc002b380
c00176df:	e8 66 b8 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c00176e4:	e9 ce 00 00 00       	jmp    c00177b7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c00176e9:	52                   	push   edx
c00176ea:	52                   	push   edx
c00176eb:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c00176ef:	50                   	push   eax
c00176f0:	68 95 b3 02 c0       	push   0xc002b395
c00176f5:	e8 50 b8 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c00176fa:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c00176fe:	83 c4 10             	add    esp,0x10
c0017701:	80 fa 02             	cmp    dl,0x2
c0017704:	0f 85 98 00 00 00    	jne    c00177a2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c001770a:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001770f:	75 10                	jne    c0017721 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017711:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0017715:	75 0a                	jne    c0017721 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017717:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c001771a:	83 e8 18             	sub    eax,0x18
c001771d:	a8 f7                	test   al,0xf7
c001771f:	74 0a                	je     c001772b <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c0017721:	83 ec 0c             	sub    esp,0xc
c0017724:	68 a2 b3 02 c0       	push   0xc002b3a2
c0017729:	eb 7f                	jmp    c00177aa <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c001772b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017733:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001773b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001773f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017747:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001774b:	75 0c                	jne    c0017759 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c001774d:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c0017752:	c1 e0 18             	shl    eax,0x18
c0017755:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017759:	41                   	inc    ecx
c001775a:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c001775f:	c1 e2 10             	shl    edx,0x10
c0017762:	89 d0                	mov    eax,edx
c0017764:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c0017769:	c1 e2 08             	shl    edx,0x8
c001776c:	09 c2                	or     edx,eax
c001776e:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c0017772:	09 c2                	or     edx,eax
c0017774:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c0017778:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c001777c:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0017780:	c1 f8 03             	sar    eax,0x3
c0017783:	01 c6                	add    esi,eax
c0017785:	89 c8                	mov    eax,ecx
c0017787:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c001778b:	39 c7                	cmp    edi,eax
c001778d:	7f b0                	jg     c001773f <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c001778f:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017793:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017797:	39 14 24             	cmp    DWORD PTR [esp],edx
c001779a:	7e 22                	jle    c00177be <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c001779c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00177a0:	eb 99                	jmp    c001773b <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c00177a2:	50                   	push   eax
c00177a3:	50                   	push   eax
c00177a4:	52                   	push   edx
c00177a5:	68 b0 b3 02 c0       	push   0xc002b3b0
c00177aa:	e8 9b b7 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c00177af:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00177b2:	e8 99 80 ff ff       	call   c000f850 <free>
c00177b7:	83 c4 10             	add    esp,0x10
c00177ba:	31 ed                	xor    ebp,ebp
c00177bc:	eb 0f                	jmp    c00177cd <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c00177be:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00177c2:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00177c5:	89 38                	mov    DWORD PTR [eax],edi
c00177c7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00177cb:	89 08                	mov    DWORD PTR [eax],ecx
c00177cd:	83 c4 1c             	add    esp,0x1c
c00177d0:	89 e8                	mov    eax,ebp
c00177d2:	5b                   	pop    ebx
c00177d3:	5e                   	pop    esi
c00177d4:	5f                   	pop    edi
c00177d5:	5d                   	pop    ebp
c00177d6:	c3                   	ret    
c00177d7:	90                   	nop

c00177d8 <Video::putTGA(int, int, unsigned char*, int)>:
c00177d8:	55                   	push   ebp
c00177d9:	57                   	push   edi
c00177da:	56                   	push   esi
c00177db:	53                   	push   ebx
c00177dc:	83 ec 28             	sub    esp,0x28
c00177df:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00177e3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00177e7:	50                   	push   eax
c00177e8:	8d 44 24 18          	lea    eax,[esp+0x18]
c00177ec:	50                   	push   eax
c00177ed:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00177f1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00177f5:	56                   	push   esi
c00177f6:	e8 5b fe ff ff       	call   c0017656 <Video::tgaParse(unsigned char*, int, int*, int*)>
c00177fb:	83 c4 20             	add    esp,0x20
c00177fe:	85 c0                	test   eax,eax
c0017800:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0017804:	74 35                	je     c001783b <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017806:	89 c7                	mov    edi,eax
c0017808:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001780c:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0017810:	39 d8                	cmp    eax,ebx
c0017812:	7e 27                	jle    c001783b <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017814:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017818:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001781c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0017820:	39 e8                	cmp    eax,ebp
c0017822:	7e 14                	jle    c0017838 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0017824:	8b 06                	mov    eax,DWORD PTR [esi]
c0017826:	83 c7 04             	add    edi,0x4
c0017829:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c001782c:	53                   	push   ebx
c001782d:	55                   	push   ebp
c001782e:	45                   	inc    ebp
c001782f:	56                   	push   esi
c0017830:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017833:	83 c4 10             	add    esp,0x10
c0017836:	eb e0                	jmp    c0017818 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0017838:	43                   	inc    ebx
c0017839:	eb cd                	jmp    c0017808 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c001783b:	83 c4 1c             	add    esp,0x1c
c001783e:	5b                   	pop    ebx
c001783f:	5e                   	pop    esi
c0017840:	5f                   	pop    edi
c0017841:	5d                   	pop    ebp
c0017842:	c3                   	ret    
c0017843:	90                   	nop

c0017844 <ACPI::close(int, int, void*)>:
c0017844:	83 ec 1c             	sub    esp,0x1c
c0017847:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c001784f:	74 0a                	je     c001785b <ACPI::close(int, int, void*)+0x17>
c0017851:	b8 00 00 00 00       	mov    eax,0x0
c0017856:	e9 9a 00 00 00       	jmp    c00178f5 <ACPI::close(int, int, void*)+0xb1>
c001785b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0017860:	75 37                	jne    c0017899 <ACPI::close(int, int, void*)+0x55>
c0017862:	83 ec 0c             	sub    esp,0xc
c0017865:	68 0c b4 02 c0       	push   0xc002b40c
c001786a:	e8 db b6 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001786f:	83 c4 10             	add    esp,0x10
c0017872:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c0017877:	85 c0                	test   eax,eax
c0017879:	74 07                	je     c0017882 <ACPI::close(int, int, void*)+0x3e>
c001787b:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c0017880:	ff d0                	call   eax
c0017882:	83 ec 0c             	sub    esp,0xc
c0017885:	68 30 b5 02 c0       	push   0xc002b530
c001788a:	e8 6c 2d 00 00       	call   c001a5fb <Krnl::panic(char const*)>
c001788f:	83 c4 10             	add    esp,0x10
c0017892:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017897:	eb 5c                	jmp    c00178f5 <ACPI::close(int, int, void*)+0xb1>
c0017899:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c001789e:	75 50                	jne    c00178f0 <ACPI::close(int, int, void*)+0xac>
c00178a0:	a1 c4 0a 03 c0       	mov    eax,ds:0xc0030ac4
c00178a5:	85 c0                	test   eax,eax
c00178a7:	74 07                	je     c00178b0 <ACPI::close(int, int, void*)+0x6c>
c00178a9:	a1 c4 0a 03 c0       	mov    eax,ds:0xc0030ac4
c00178ae:	ff d0                	call   eax
c00178b0:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c00178b5:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00178ba:	83 e0 02             	and    eax,0x2
c00178bd:	74 1c                	je     c00178db <ACPI::close(int, int, void*)+0x97>
c00178bf:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00178c6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00178ca:	89 c2                	mov    edx,eax
c00178cc:	ec                   	in     al,dx
c00178cd:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00178d1:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00178d5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00178d9:	eb da                	jmp    c00178b5 <ACPI::close(int, int, void*)+0x71>
c00178db:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c00178e2:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00178e7:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00178eb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00178ef:	ee                   	out    dx,al
c00178f0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00178f5:	83 c4 1c             	add    esp,0x1c
c00178f8:	c3                   	ret    

c00178f9 <findRSDP()>:
c00178f9:	83 ec 1c             	sub    esp,0x1c
c00178fc:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0017901:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017907:	83 e0 04             	and    eax,0x4
c001790a:	84 c0                	test   al,al
c001790c:	75 07                	jne    c0017915 <findRSDP()+0x1c>
c001790e:	b8 00 00 00 00       	mov    eax,0x0
c0017913:	eb 6a                	jmp    c001797f <findRSDP()+0x86>
c0017915:	a1 54 e4 02 c0       	mov    eax,ds:0xc002e454
c001791a:	3d ff 07 00 00       	cmp    eax,0x7ff
c001791f:	7f 1b                	jg     c001793c <findRSDP()+0x43>
c0017921:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0017926:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001792c:	83 e2 fb             	and    edx,0xfffffffb
c001792f:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017935:	b8 00 00 00 00       	mov    eax,0x0
c001793a:	eb 43                	jmp    c001797f <findRSDP()+0x86>
c001793c:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0017944:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c001794c:	77 2c                	ja     c001797a <findRSDP()+0x81>
c001794e:	83 ec 04             	sub    esp,0x4
c0017951:	6a 08                	push   0x8
c0017953:	68 19 b4 02 c0       	push   0xc002b419
c0017958:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001795c:	e8 df 8c fe ff       	call   c0000640 <memcmp>
c0017961:	83 c4 10             	add    esp,0x10
c0017964:	85 c0                	test   eax,eax
c0017966:	0f 94 c0             	sete   al
c0017969:	84 c0                	test   al,al
c001796b:	74 06                	je     c0017973 <findRSDP()+0x7a>
c001796d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017971:	eb 0c                	jmp    c001797f <findRSDP()+0x86>
c0017973:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0017978:	eb ca                	jmp    c0017944 <findRSDP()+0x4b>
c001797a:	b8 00 00 00 00       	mov    eax,0x0
c001797f:	83 c4 1c             	add    esp,0x1c
c0017982:	c3                   	ret    

c0017983 <loadACPITables(unsigned char*)>:
c0017983:	56                   	push   esi
c0017984:	53                   	push   ebx
c0017985:	83 ec 44             	sub    esp,0x44
c0017988:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c001798d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017993:	83 e0 04             	and    eax,0x4
c0017996:	84 c0                	test   al,al
c0017998:	0f 84 05 02 00 00    	je     c0017ba3 <loadACPITables(unsigned char*)+0x220>
c001799e:	a0 e0 0c 03 c0       	mov    al,ds:0xc0030ce0
c00179a3:	84 c0                	test   al,al
c00179a5:	74 75                	je     c0017a1c <loadACPITables(unsigned char*)+0x99>
c00179a7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00179ab:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00179af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00179b3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00179b6:	83 e8 24             	sub    eax,0x24
c00179b9:	c1 e8 03             	shr    eax,0x3
c00179bc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00179c0:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00179c8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00179cc:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00179d0:	0f 8d b2 00 00 00    	jge    c0017a88 <loadACPITables(unsigned char*)+0x105>
c00179d6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00179da:	83 c0 24             	add    eax,0x24
c00179dd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00179e1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00179e5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00179e9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00179ed:	c1 e0 03             	shl    eax,0x3
c00179f0:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c00179f4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00179f8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00179fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00179fd:	89 c1                	mov    ecx,eax
c00179ff:	a1 cc 0a 03 c0       	mov    eax,ds:0xc0030acc
c0017a04:	8d 50 01             	lea    edx,[eax+0x1]
c0017a07:	89 15 cc 0a 03 c0    	mov    DWORD PTR ds:0xc0030acc,edx
c0017a0d:	89 ca                	mov    edx,ecx
c0017a0f:	89 14 c5 e4 0a 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf51c],edx
c0017a16:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0017a1a:	eb ac                	jmp    c00179c8 <loadACPITables(unsigned char*)+0x45>
c0017a1c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017a20:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017a24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a28:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017a2b:	83 e8 24             	sub    eax,0x24
c0017a2e:	c1 e8 02             	shr    eax,0x2
c0017a31:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017a35:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0017a3d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017a41:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0017a45:	7d 41                	jge    c0017a88 <loadACPITables(unsigned char*)+0x105>
c0017a47:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017a4b:	83 c0 24             	add    eax,0x24
c0017a4e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017a52:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017a56:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017a5a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017a5e:	c1 e0 02             	shl    eax,0x2
c0017a61:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0017a65:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017a69:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017a6b:	a1 cc 0a 03 c0       	mov    eax,ds:0xc0030acc
c0017a70:	8d 50 01             	lea    edx,[eax+0x1]
c0017a73:	89 15 cc 0a 03 c0    	mov    DWORD PTR ds:0xc0030acc,edx
c0017a79:	89 ca                	mov    edx,ecx
c0017a7b:	89 14 c5 e4 0a 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf51c],edx
c0017a82:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0017a86:	eb b5                	jmp    c0017a3d <loadACPITables(unsigned char*)+0xba>
c0017a88:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0017a90:	a1 cc 0a 03 c0       	mov    eax,ds:0xc0030acc
c0017a95:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0017a99:	0f 8d 05 01 00 00    	jge    c0017ba4 <loadACPITables(unsigned char*)+0x221>
c0017a9f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017aa3:	8b 04 c5 e4 0a 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf51c]
c0017aaa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017aae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ab2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017ab6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017aba:	25 ff 0f 00 00       	and    eax,0xfff
c0017abf:	89 c6                	mov    esi,eax
c0017ac1:	e8 74 a3 ff ff       	call   c0011e3a <Virt::getAKernelVAS()>
c0017ac6:	89 c3                	mov    ebx,eax
c0017ac8:	83 ec 0c             	sub    esp,0xc
c0017acb:	6a 01                	push   0x1
c0017acd:	e8 cd a0 ff ff       	call   c0011b9f <Virt::allocateKernelVirtualPages(int)>
c0017ad2:	83 c4 10             	add    esp,0x10
c0017ad5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017ad9:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017adf:	83 ec 0c             	sub    esp,0xc
c0017ae2:	6a 01                	push   0x1
c0017ae4:	6a 01                	push   0x1
c0017ae6:	50                   	push   eax
c0017ae7:	52                   	push   edx
c0017ae8:	53                   	push   ebx
c0017ae9:	e8 7c ab ff ff       	call   c001266a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017aee:	83 c4 20             	add    esp,0x20
c0017af1:	09 f0                	or     eax,esi
c0017af3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017af7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017afb:	c1 e0 03             	shl    eax,0x3
c0017afe:	05 e0 0a 03 c0       	add    eax,0xc0030ae0
c0017b03:	83 ec 04             	sub    esp,0x4
c0017b06:	6a 04                	push   0x4
c0017b08:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017b0c:	50                   	push   eax
c0017b0d:	e8 32 8c fe ff       	call   c0000744 <memcpy>
c0017b12:	83 c4 10             	add    esp,0x10
c0017b15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b19:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b1c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017b20:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017b24:	05 00 10 00 00       	add    eax,0x1000
c0017b29:	c1 e8 0c             	shr    eax,0xc
c0017b2c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017b30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b34:	89 04 24             	mov    DWORD PTR [esp],eax
c0017b37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b3b:	25 ff 0f 00 00       	and    eax,0xfff
c0017b40:	89 c6                	mov    esi,eax
c0017b42:	e8 f3 a2 ff ff       	call   c0011e3a <Virt::getAKernelVAS()>
c0017b47:	89 c3                	mov    ebx,eax
c0017b49:	83 ec 0c             	sub    esp,0xc
c0017b4c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017b50:	e8 4a a0 ff ff       	call   c0011b9f <Virt::allocateKernelVirtualPages(int)>
c0017b55:	83 c4 10             	add    esp,0x10
c0017b58:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017b5c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017b62:	83 ec 0c             	sub    esp,0xc
c0017b65:	6a 01                	push   0x1
c0017b67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017b6b:	50                   	push   eax
c0017b6c:	52                   	push   edx
c0017b6d:	53                   	push   ebx
c0017b6e:	e8 f7 aa ff ff       	call   c001266a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017b73:	83 c4 20             	add    esp,0x20
c0017b76:	09 f0                	or     eax,esi
c0017b78:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017b7c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017b7f:	83 ec 0c             	sub    esp,0xc
c0017b82:	50                   	push   eax
c0017b83:	e8 87 a4 ff ff       	call   c001200f <Virt::freeKernelVirtualPages(unsigned long)>
c0017b88:	83 c4 10             	add    esp,0x10
c0017b8b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b8f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017b93:	89 14 c5 e4 0a 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf51c],edx
c0017b9a:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0017b9e:	e9 ed fe ff ff       	jmp    c0017a90 <loadACPITables(unsigned char*)+0x10d>
c0017ba3:	90                   	nop
c0017ba4:	83 c4 44             	add    esp,0x44
c0017ba7:	5b                   	pop    ebx
c0017ba8:	5e                   	pop    esi
c0017ba9:	c3                   	ret    

c0017baa <findRSDT(unsigned char*)>:
c0017baa:	56                   	push   esi
c0017bab:	53                   	push   ebx
c0017bac:	83 ec 44             	sub    esp,0x44
c0017baf:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0017bb4:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017bba:	83 e0 04             	and    eax,0x4
c0017bbd:	84 c0                	test   al,al
c0017bbf:	75 0a                	jne    c0017bcb <findRSDT(unsigned char*)+0x21>
c0017bc1:	b8 00 00 00 00       	mov    eax,0x0
c0017bc6:	e9 f7 00 00 00       	jmp    c0017cc2 <findRSDT(unsigned char*)+0x118>
c0017bcb:	83 ec 04             	sub    esp,0x4
c0017bce:	6a 24                	push   0x24
c0017bd0:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0017bd4:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017bd8:	50                   	push   eax
c0017bd9:	e8 66 8b fe ff       	call   c0000744 <memcpy>
c0017bde:	83 c4 10             	add    esp,0x10
c0017be1:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017be5:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0017be9:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017bf1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017bf5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017bf9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017bfd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017c01:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017c05:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017c09:	25 ff 0f 00 00       	and    eax,0xfff
c0017c0e:	89 c6                	mov    esi,eax
c0017c10:	e8 25 a2 ff ff       	call   c0011e3a <Virt::getAKernelVAS()>
c0017c15:	89 c3                	mov    ebx,eax
c0017c17:	83 ec 0c             	sub    esp,0xc
c0017c1a:	6a 02                	push   0x2
c0017c1c:	e8 7e 9f ff ff       	call   c0011b9f <Virt::allocateKernelVirtualPages(int)>
c0017c21:	83 c4 10             	add    esp,0x10
c0017c24:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017c28:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017c2e:	83 ec 0c             	sub    esp,0xc
c0017c31:	6a 01                	push   0x1
c0017c33:	6a 02                	push   0x2
c0017c35:	50                   	push   eax
c0017c36:	52                   	push   edx
c0017c37:	53                   	push   ebx
c0017c38:	e8 2d aa ff ff       	call   c001266a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017c3d:	83 c4 20             	add    esp,0x20
c0017c40:	09 f0                	or     eax,esi
c0017c42:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017c46:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c4a:	25 ff 0f 00 00       	and    eax,0xfff
c0017c4f:	89 c6                	mov    esi,eax
c0017c51:	e8 e4 a1 ff ff       	call   c0011e3a <Virt::getAKernelVAS()>
c0017c56:	89 c3                	mov    ebx,eax
c0017c58:	83 ec 0c             	sub    esp,0xc
c0017c5b:	6a 02                	push   0x2
c0017c5d:	e8 3d 9f ff ff       	call   c0011b9f <Virt::allocateKernelVirtualPages(int)>
c0017c62:	83 c4 10             	add    esp,0x10
c0017c65:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017c69:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017c6f:	83 ec 0c             	sub    esp,0xc
c0017c72:	6a 01                	push   0x1
c0017c74:	6a 02                	push   0x2
c0017c76:	50                   	push   eax
c0017c77:	52                   	push   edx
c0017c78:	53                   	push   ebx
c0017c79:	e8 ec a9 ff ff       	call   c001266a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017c7e:	83 c4 20             	add    esp,0x20
c0017c81:	09 f0                	or     eax,esi
c0017c83:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017c87:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0017c8c:	75 11                	jne    c0017c9f <findRSDT(unsigned char*)+0xf5>
c0017c8e:	c6 05 e0 0c 03 c0 00 	mov    BYTE PTR ds:0xc0030ce0,0x0
c0017c95:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c99:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017c9d:	eb 1f                	jmp    c0017cbe <findRSDT(unsigned char*)+0x114>
c0017c9f:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0017ca4:	75 11                	jne    c0017cb7 <findRSDT(unsigned char*)+0x10d>
c0017ca6:	c6 05 e0 0c 03 c0 01 	mov    BYTE PTR ds:0xc0030ce0,0x1
c0017cad:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017cb1:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017cb5:	eb 07                	jmp    c0017cbe <findRSDT(unsigned char*)+0x114>
c0017cb7:	b8 00 00 00 00       	mov    eax,0x0
c0017cbc:	eb 04                	jmp    c0017cc2 <findRSDT(unsigned char*)+0x118>
c0017cbe:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017cc2:	83 c4 44             	add    esp,0x44
c0017cc5:	5b                   	pop    ebx
c0017cc6:	5e                   	pop    esi
c0017cc7:	c3                   	ret    

c0017cc8 <findDataTable(unsigned char*, char*)>:
c0017cc8:	83 ec 1c             	sub    esp,0x1c
c0017ccb:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0017cd0:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017cd6:	83 e0 04             	and    eax,0x4
c0017cd9:	84 c0                	test   al,al
c0017cdb:	75 07                	jne    c0017ce4 <findDataTable(unsigned char*, char*)+0x1c>
c0017cdd:	b8 00 00 00 00       	mov    eax,0x0
c0017ce2:	eb 7c                	jmp    c0017d60 <findDataTable(unsigned char*, char*)+0x98>
c0017ce4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017cec:	a1 cc 0a 03 c0       	mov    eax,ds:0xc0030acc
c0017cf1:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017cf5:	7d 3a                	jge    c0017d31 <findDataTable(unsigned char*, char*)+0x69>
c0017cf7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017cfb:	c1 e0 03             	shl    eax,0x3
c0017cfe:	05 e0 0a 03 c0       	add    eax,0xc0030ae0
c0017d03:	83 ec 04             	sub    esp,0x4
c0017d06:	6a 04                	push   0x4
c0017d08:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017d0c:	50                   	push   eax
c0017d0d:	e8 2e 89 fe ff       	call   c0000640 <memcmp>
c0017d12:	83 c4 10             	add    esp,0x10
c0017d15:	85 c0                	test   eax,eax
c0017d17:	0f 94 c0             	sete   al
c0017d1a:	84 c0                	test   al,al
c0017d1c:	74 0d                	je     c0017d2b <findDataTable(unsigned char*, char*)+0x63>
c0017d1e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d22:	8b 04 c5 e4 0a 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf51c]
c0017d29:	eb 35                	jmp    c0017d60 <findDataTable(unsigned char*, char*)+0x98>
c0017d2b:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017d2f:	eb bb                	jmp    c0017cec <findDataTable(unsigned char*, char*)+0x24>
c0017d31:	a0 e0 0c 03 c0       	mov    al,ds:0xc0030ce0
c0017d36:	84 c0                	test   al,al
c0017d38:	74 07                	je     c0017d41 <findDataTable(unsigned char*, char*)+0x79>
c0017d3a:	b8 58 00 00 00       	mov    eax,0x58
c0017d3f:	eb 05                	jmp    c0017d46 <findDataTable(unsigned char*, char*)+0x7e>
c0017d41:	b8 52 00 00 00       	mov    eax,0x52
c0017d46:	83 ec 04             	sub    esp,0x4
c0017d49:	50                   	push   eax
c0017d4a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017d4e:	68 54 b5 02 c0       	push   0xc002b554
c0017d53:	e8 f2 b1 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0017d58:	83 c4 10             	add    esp,0x10
c0017d5b:	b8 00 00 00 00       	mov    eax,0x0
c0017d60:	83 c4 1c             	add    esp,0x1c
c0017d63:	c3                   	ret    

c0017d64 <scanMADT()>:
c0017d64:	53                   	push   ebx
c0017d65:	83 ec 38             	sub    esp,0x38
c0017d68:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0017d6d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017d73:	83 e0 04             	and    eax,0x4
c0017d76:	84 c0                	test   al,al
c0017d78:	0f 84 63 04 00 00    	je     c00181e1 <scanMADT()+0x47d>
c0017d7e:	e8 76 fb ff ff       	call   c00178f9 <findRSDP()>
c0017d83:	a3 ec 0c 03 c0       	mov    ds:0xc0030cec,eax
c0017d88:	a1 ec 0c 03 c0       	mov    eax,ds:0xc0030cec
c0017d8d:	85 c0                	test   eax,eax
c0017d8f:	75 19                	jne    c0017daa <scanMADT()+0x46>
c0017d91:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0017d96:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017d9c:	83 e2 fb             	and    edx,0xfffffffb
c0017d9f:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017da5:	e9 3b 04 00 00       	jmp    c00181e5 <scanMADT()+0x481>
c0017daa:	a1 ec 0c 03 c0       	mov    eax,ds:0xc0030cec
c0017daf:	83 ec 0c             	sub    esp,0xc
c0017db2:	50                   	push   eax
c0017db3:	e8 f2 fd ff ff       	call   c0017baa <findRSDT(unsigned char*)>
c0017db8:	83 c4 10             	add    esp,0x10
c0017dbb:	a3 e8 0c 03 c0       	mov    ds:0xc0030ce8,eax
c0017dc0:	a1 e8 0c 03 c0       	mov    eax,ds:0xc0030ce8
c0017dc5:	85 c0                	test   eax,eax
c0017dc7:	75 19                	jne    c0017de2 <scanMADT()+0x7e>
c0017dc9:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0017dce:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017dd4:	83 e2 fb             	and    edx,0xfffffffb
c0017dd7:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017ddd:	e9 03 04 00 00       	jmp    c00181e5 <scanMADT()+0x481>
c0017de2:	a1 e8 0c 03 c0       	mov    eax,ds:0xc0030ce8
c0017de7:	83 ec 0c             	sub    esp,0xc
c0017dea:	50                   	push   eax
c0017deb:	e8 93 fb ff ff       	call   c0017983 <loadACPITables(unsigned char*)>
c0017df0:	83 c4 10             	add    esp,0x10
c0017df3:	a1 e8 0c 03 c0       	mov    eax,ds:0xc0030ce8
c0017df8:	83 ec 08             	sub    esp,0x8
c0017dfb:	68 22 b4 02 c0       	push   0xc002b422
c0017e00:	50                   	push   eax
c0017e01:	e8 c2 fe ff ff       	call   c0017cc8 <findDataTable(unsigned char*, char*)>
c0017e06:	83 c4 10             	add    esp,0x10
c0017e09:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017e0d:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017e12:	75 19                	jne    c0017e2d <scanMADT()+0xc9>
c0017e14:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0017e19:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017e1f:	83 e2 fe             	and    edx,0xfffffffe
c0017e22:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017e28:	e9 b8 03 00 00       	jmp    c00181e5 <scanMADT()+0x481>
c0017e2d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017e35:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e39:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017e3c:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017e40:	0f 87 9f 03 00 00    	ja     c00181e5 <scanMADT()+0x481>
c0017e46:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017e4e:	0f 87 91 03 00 00    	ja     c00181e5 <scanMADT()+0x481>
c0017e54:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e58:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017e5c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e60:	8d 50 01             	lea    edx,[eax+0x1]
c0017e63:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017e67:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e6b:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017e6f:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017e73:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e77:	8d 50 01             	lea    edx,[eax+0x1]
c0017e7a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017e7e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e82:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017e86:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017e8a:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017e8f:	0f 86 4f 03 00 00    	jbe    c00181e4 <scanMADT()+0x480>
c0017e95:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017e9a:	75 57                	jne    c0017ef3 <scanMADT()+0x18f>
c0017e9c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ea0:	8d 50 01             	lea    edx,[eax+0x1]
c0017ea3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017ea7:	8a 15 e0 0e 03 c0    	mov    dl,BYTE PTR ds:0xc0030ee0
c0017ead:	0f b6 d2             	movzx  edx,dl
c0017eb0:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017eb4:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017eb8:	88 82 20 0f 03 c0    	mov    BYTE PTR [edx-0x3ffcf0e0],al
c0017ebe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ec2:	8d 50 01             	lea    edx,[eax+0x1]
c0017ec5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017ec9:	8a 15 e0 0e 03 c0    	mov    dl,BYTE PTR ds:0xc0030ee0
c0017ecf:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017ed2:	88 0d e0 0e 03 c0    	mov    BYTE PTR ds:0xc0030ee0,cl
c0017ed8:	0f b6 d2             	movzx  edx,dl
c0017edb:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017edf:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017ee3:	88 82 00 0f 03 c0    	mov    BYTE PTR [edx-0x3ffcf100],al
c0017ee9:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017eee:	e9 da 02 00 00       	jmp    c00181cd <scanMADT()+0x469>
c0017ef3:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017ef8:	0f 85 14 01 00 00    	jne    c0018012 <scanMADT()+0x2ae>
c0017efe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f02:	8d 50 01             	lea    edx,[eax+0x1]
c0017f05:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f09:	8a 15 a0 0d 03 c0    	mov    dl,BYTE PTR ds:0xc0030da0
c0017f0f:	0f b6 d2             	movzx  edx,dl
c0017f12:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017f16:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017f1a:	88 82 c0 0d 03 c0    	mov    BYTE PTR [edx-0x3ffcf240],al
c0017f20:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017f24:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f28:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f2c:	01 d0                	add    eax,edx
c0017f2e:	83 c0 2c             	add    eax,0x2c
c0017f31:	8a 00                	mov    al,BYTE PTR [eax]
c0017f33:	0f b6 d0             	movzx  edx,al
c0017f36:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f3a:	8d 48 01             	lea    ecx,[eax+0x1]
c0017f3d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f41:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017f45:	0f b6 c0             	movzx  eax,al
c0017f48:	c1 e0 08             	shl    eax,0x8
c0017f4b:	89 d1                	mov    ecx,edx
c0017f4d:	09 c1                	or     ecx,eax
c0017f4f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f53:	8d 50 02             	lea    edx,[eax+0x2]
c0017f56:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f5a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017f5e:	0f b6 c0             	movzx  eax,al
c0017f61:	c1 e0 10             	shl    eax,0x10
c0017f64:	09 c1                	or     ecx,eax
c0017f66:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f6a:	8d 50 03             	lea    edx,[eax+0x3]
c0017f6d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f71:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017f75:	0f b6 c0             	movzx  eax,al
c0017f78:	c1 e0 18             	shl    eax,0x18
c0017f7b:	09 c1                	or     ecx,eax
c0017f7d:	89 ca                	mov    edx,ecx
c0017f7f:	a0 a0 0d 03 c0       	mov    al,ds:0xc0030da0
c0017f84:	0f b6 c0             	movzx  eax,al
c0017f87:	89 14 85 e0 0d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf220],edx
c0017f8e:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017f93:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f97:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f9b:	01 d0                	add    eax,edx
c0017f9d:	83 c0 2c             	add    eax,0x2c
c0017fa0:	8a 00                	mov    al,BYTE PTR [eax]
c0017fa2:	0f b6 d0             	movzx  edx,al
c0017fa5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fa9:	8d 48 01             	lea    ecx,[eax+0x1]
c0017fac:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fb0:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017fb4:	0f b6 c0             	movzx  eax,al
c0017fb7:	c1 e0 08             	shl    eax,0x8
c0017fba:	89 d1                	mov    ecx,edx
c0017fbc:	09 c1                	or     ecx,eax
c0017fbe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fc2:	8d 50 02             	lea    edx,[eax+0x2]
c0017fc5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fc9:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017fcd:	0f b6 c0             	movzx  eax,al
c0017fd0:	c1 e0 10             	shl    eax,0x10
c0017fd3:	09 c1                	or     ecx,eax
c0017fd5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fd9:	8d 50 03             	lea    edx,[eax+0x3]
c0017fdc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fe0:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017fe4:	0f b6 c0             	movzx  eax,al
c0017fe7:	c1 e0 18             	shl    eax,0x18
c0017fea:	09 c1                	or     ecx,eax
c0017fec:	89 ca                	mov    edx,ecx
c0017fee:	a0 a0 0d 03 c0       	mov    al,ds:0xc0030da0
c0017ff3:	0f b6 c0             	movzx  eax,al
c0017ff6:	89 14 85 60 0e 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf1a0],edx
c0017ffd:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0018002:	a0 a0 0d 03 c0       	mov    al,ds:0xc0030da0
c0018007:	40                   	inc    eax
c0018008:	a2 a0 0d 03 c0       	mov    ds:0xc0030da0,al
c001800d:	e9 bb 01 00 00       	jmp    c00181cd <scanMADT()+0x469>
c0018012:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0018017:	0f 85 e9 00 00 00    	jne    c0018106 <scanMADT()+0x3a2>
c001801d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018021:	8d 50 01             	lea    edx,[eax+0x1]
c0018024:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018028:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001802c:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018030:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0018034:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018038:	8d 50 01             	lea    edx,[eax+0x1]
c001803b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001803f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018043:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018047:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001804b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001804f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018053:	01 d0                	add    eax,edx
c0018055:	83 c0 2c             	add    eax,0x2c
c0018058:	8a 00                	mov    al,BYTE PTR [eax]
c001805a:	0f b6 d0             	movzx  edx,al
c001805d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018061:	8d 48 01             	lea    ecx,[eax+0x1]
c0018064:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018068:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001806c:	0f b6 c0             	movzx  eax,al
c001806f:	c1 e0 08             	shl    eax,0x8
c0018072:	89 d1                	mov    ecx,edx
c0018074:	09 c1                	or     ecx,eax
c0018076:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001807a:	8d 50 02             	lea    edx,[eax+0x2]
c001807d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018081:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018085:	0f b6 c0             	movzx  eax,al
c0018088:	c1 e0 10             	shl    eax,0x10
c001808b:	09 c1                	or     ecx,eax
c001808d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018091:	8d 50 03             	lea    edx,[eax+0x3]
c0018094:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018098:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001809c:	0f b6 c0             	movzx  eax,al
c001809f:	c1 e0 18             	shl    eax,0x18
c00180a2:	09 c8                	or     eax,ecx
c00180a4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00180a8:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00180ad:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180b1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180b5:	01 d0                	add    eax,edx
c00180b7:	83 c0 2c             	add    eax,0x2c
c00180ba:	8a 00                	mov    al,BYTE PTR [eax]
c00180bc:	0f b6 c0             	movzx  eax,al
c00180bf:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00180c3:	8d 4a 01             	lea    ecx,[edx+0x1]
c00180c6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180ca:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c00180ce:	0f b6 d2             	movzx  edx,dl
c00180d1:	c1 e2 08             	shl    edx,0x8
c00180d4:	09 d0                	or     eax,edx
c00180d6:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00180db:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00180e0:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c00180e5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00180e9:	88 90 60 d6 02 c0    	mov    BYTE PTR [eax-0x3ffd29a0],dl
c00180ef:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c00180f4:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00180f9:	66 89 84 12 80 0d 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcf280],ax
c0018101:	e9 c7 00 00 00       	jmp    c00181cd <scanMADT()+0x469>
c0018106:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c001810b:	0f 85 b0 00 00 00    	jne    c00181c1 <scanMADT()+0x45d>
c0018111:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018115:	8d 50 01             	lea    edx,[eax+0x1]
c0018118:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001811c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018120:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018124:	0f b6 c0             	movzx  eax,al
c0018127:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001812b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001812f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018133:	01 d0                	add    eax,edx
c0018135:	83 c0 2c             	add    eax,0x2c
c0018138:	8a 00                	mov    al,BYTE PTR [eax]
c001813a:	0f b6 d0             	movzx  edx,al
c001813d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018141:	8d 48 01             	lea    ecx,[eax+0x1]
c0018144:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018148:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001814c:	0f b6 c0             	movzx  eax,al
c001814f:	c1 e0 08             	shl    eax,0x8
c0018152:	09 d0                	or     eax,edx
c0018154:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018158:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001815d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018161:	8d 50 01             	lea    edx,[eax+0x1]
c0018164:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018168:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001816c:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018170:	0f b6 c0             	movzx  eax,al
c0018173:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018177:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001817b:	c1 e0 08             	shl    eax,0x8
c001817e:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0018182:	89 c1                	mov    ecx,eax
c0018184:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018188:	c1 e0 18             	shl    eax,0x18
c001818b:	89 c3                	mov    ebx,eax
c001818d:	a1 f0 0c 03 c0       	mov    eax,ds:0xc0030cf0
c0018192:	8d 50 01             	lea    edx,[eax+0x1]
c0018195:	89 15 f0 0c 03 c0    	mov    DWORD PTR ds:0xc0030cf0,edx
c001819b:	09 d9                	or     ecx,ebx
c001819d:	89 ca                	mov    edx,ecx
c001819f:	89 14 85 00 0d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf300],edx
c00181a6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00181aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00181ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00181b2:	68 84 b5 02 c0       	push   0xc002b584
c00181b7:	e8 8e ad ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c00181bc:	83 c4 10             	add    esp,0x10
c00181bf:	eb 0c                	jmp    c00181cd <scanMADT()+0x469>
c00181c1:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c00181c6:	75 05                	jne    c00181cd <scanMADT()+0x469>
c00181c8:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c00181cd:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c00181d2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00181d6:	01 d0                	add    eax,edx
c00181d8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00181dc:	e9 54 fc ff ff       	jmp    c0017e35 <scanMADT()+0xd1>
c00181e1:	90                   	nop
c00181e2:	eb 01                	jmp    c00181e5 <scanMADT()+0x481>
c00181e4:	90                   	nop
c00181e5:	83 c4 38             	add    esp,0x38
c00181e8:	5b                   	pop    ebx
c00181e9:	c3                   	ret    

c00181ea <ACPI::ACPI()>:
c00181ea:	83 ec 0c             	sub    esp,0xc
c00181ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181f1:	83 ec 08             	sub    esp,0x8
c00181f4:	68 27 b4 02 c0       	push   0xc002b427
c00181f9:	50                   	push   eax
c00181fa:	e8 61 c3 ff ff       	call   c0014560 <Device::Device(char const*)>
c00181ff:	83 c4 10             	add    esp,0x10
c0018202:	ba f8 b5 02 c0       	mov    edx,0xc002b5f8
c0018207:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001820b:	89 10                	mov    DWORD PTR [eax],edx
c001820d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018211:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0018218:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001821c:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0018226:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001822a:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0018234:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018238:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c001823f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018243:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c001824a:	e8 15 fb ff ff       	call   c0017d64 <scanMADT()>
c001824f:	90                   	nop
c0018250:	83 c4 0c             	add    esp,0xc
c0018253:	c3                   	ret    

c0018254 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0018254:	83 ec 2c             	sub    esp,0x2c
c0018257:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001825b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001825f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0018263:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0018267:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001826c:	88 d0                	mov    al,dl
c001826e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0018272:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0018277:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001827f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018283:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018289:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001828d:	0f 8d 97 00 00 00    	jge    c001832a <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0018293:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018297:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001829b:	83 c2 2a             	add    edx,0x2a
c001829e:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c00182a2:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c00182a7:	75 78                	jne    c0018321 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00182a9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00182ad:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00182b1:	83 c2 2a             	add    edx,0x2a
c00182b4:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c00182b8:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c00182bc:	75 63                	jne    c0018321 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00182be:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00182c3:	74 3a                	je     c00182ff <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c00182c5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00182c9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00182cd:	83 c2 2a             	add    edx,0x2a
c00182d0:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c00182d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00182d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00182db:	39 c2                	cmp    edx,eax
c00182dd:	74 10                	je     c00182ef <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c00182df:	83 ec 0c             	sub    esp,0xc
c00182e2:	68 c0 b5 02 c0       	push   0xc002b5c0
c00182e7:	e8 0f 23 00 00       	call   c001a5fb <Krnl::panic(char const*)>
c00182ec:	83 c4 10             	add    esp,0x10
c00182ef:	83 ec 0c             	sub    esp,0xc
c00182f2:	68 2c b4 02 c0       	push   0xc002b42c
c00182f7:	e8 ff 22 00 00       	call   c001a5fb <Krnl::panic(char const*)>
c00182fc:	83 c4 10             	add    esp,0x10
c00182ff:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018303:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018307:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001830b:	83 c2 2a             	add    edx,0x2a
c001830e:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0018312:	8b 02                	mov    eax,DWORD PTR [edx]
c0018314:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0018317:	89 01                	mov    DWORD PTR [ecx],eax
c0018319:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001831c:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0018321:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0018325:	e9 55 ff ff ff       	jmp    c001827f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c001832a:	90                   	nop
c001832b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001832f:	83 c4 2c             	add    esp,0x2c
c0018332:	c2 04 00             	ret    0x4
c0018335:	90                   	nop

c0018336 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0018336:	83 ec 1c             	sub    esp,0x1c
c0018339:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001833d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0018341:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018345:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001834a:	88 c8                	mov    al,cl
c001834c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018350:	88 d0                	mov    al,dl
c0018352:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0018356:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001835a:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018360:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018364:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0018367:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c001836b:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c001836f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018373:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018379:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001837d:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0018380:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018384:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0018389:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001838d:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018393:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0018397:	8d 48 01             	lea    ecx,[eax+0x1]
c001839a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001839e:	83 c2 2a             	add    edx,0x2a
c00183a1:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c00183a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183a9:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00183af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183b3:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00183b6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00183ba:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c00183be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183c2:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00183c8:	8d 50 01             	lea    edx,[eax+0x1]
c00183cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183cf:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c00183d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183d9:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00183df:	3d 00 02 00 00       	cmp    eax,0x200
c00183e4:	75 10                	jne    c00183f6 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c00183e6:	83 ec 0c             	sub    esp,0xc
c00183e9:	68 3b b4 02 c0       	push   0xc002b43b
c00183ee:	e8 08 22 00 00       	call   c001a5fb <Krnl::panic(char const*)>
c00183f3:	83 c4 10             	add    esp,0x10
c00183f6:	90                   	nop
c00183f7:	83 c4 1c             	add    esp,0x1c
c00183fa:	c3                   	ret    
c00183fb:	90                   	nop

c00183fc <ACPI::setScreenBrightnessLevel(void*, int)>:
c00183fc:	b8 00 00 00 00       	mov    eax,0x0
c0018401:	c3                   	ret    

c0018402 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0018402:	83 ec 1c             	sub    esp,0x1c
c0018405:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018409:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001840c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018410:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0018415:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001841a:	83 ec 08             	sub    esp,0x8
c001841d:	52                   	push   edx
c001841e:	50                   	push   eax
c001841f:	e8 34 6a ff ff       	call   c000ee58 <Computer::readCMOS(unsigned char)>
c0018424:	83 c4 10             	add    esp,0x10
c0018427:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001842b:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0018430:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0018435:	83 ec 04             	sub    esp,0x4
c0018438:	6a 01                	push   0x1
c001843a:	52                   	push   edx
c001843b:	50                   	push   eax
c001843c:	e8 2d 6b ff ff       	call   c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>
c0018441:	83 c4 10             	add    esp,0x10
c0018444:	90                   	nop
c0018445:	83 c4 1c             	add    esp,0x1c
c0018448:	c3                   	ret    
c0018449:	90                   	nop

c001844a <ACPI::open(int, int, void*)>:
c001844a:	53                   	push   ebx
c001844b:	83 ec 28             	sub    esp,0x28
c001844e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018452:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0018459:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001845d:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c0018464:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0018469:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001846f:	83 e0 04             	and    eax,0x4
c0018472:	84 c0                	test   al,al
c0018474:	74 47                	je     c00184bd <ACPI::open(int, int, void*)+0x73>
c0018476:	a1 e8 0c 03 c0       	mov    eax,ds:0xc0030ce8
c001847b:	83 ec 08             	sub    esp,0x8
c001847e:	68 58 b4 02 c0       	push   0xc002b458
c0018483:	50                   	push   eax
c0018484:	e8 3f f8 ff ff       	call   c0017cc8 <findDataTable(unsigned char*, char*)>
c0018489:	83 c4 10             	add    esp,0x10
c001848c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018490:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0018495:	74 26                	je     c00184bd <ACPI::open(int, int, void*)+0x73>
c0018497:	83 ec 0c             	sub    esp,0xc
c001849a:	68 5d b4 02 c0       	push   0xc002b45d
c001849f:	e8 a6 aa ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c00184a4:	83 c4 10             	add    esp,0x10
c00184a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184ab:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00184b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184b6:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00184bd:	c7 44 24 18 5f 0c 00 00 	mov    DWORD PTR [esp+0x18],0xc5f
c00184c5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00184c9:	8a 00                	mov    al,BYTE PTR [eax]
c00184cb:	3c 01                	cmp    al,0x1
c00184cd:	75 28                	jne    c00184f7 <ACPI::open(int, int, void*)+0xad>
c00184cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184d3:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00184da:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184de:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00184e5:	83 ec 0c             	sub    esp,0xc
c00184e8:	68 6e b4 02 c0       	push   0xc002b46e
c00184ed:	e8 58 aa ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c00184f2:	83 c4 10             	add    esp,0x10
c00184f5:	eb 25                	jmp    c001851c <ACPI::open(int, int, void*)+0xd2>
c00184f7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00184fb:	8a 00                	mov    al,BYTE PTR [eax]
c00184fd:	3c 02                	cmp    al,0x2
c00184ff:	75 1b                	jne    c001851c <ACPI::open(int, int, void*)+0xd2>
c0018501:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018505:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001850c:	83 ec 0c             	sub    esp,0xc
c001850f:	68 76 b4 02 c0       	push   0xc002b476
c0018514:	e8 31 aa ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0018519:	83 c4 10             	add    esp,0x10
c001851c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018520:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018526:	83 f0 01             	xor    eax,0x1
c0018529:	84 c0                	test   al,al
c001852b:	74 6a                	je     c0018597 <ACPI::open(int, int, void*)+0x14d>
c001852d:	83 ec 0c             	sub    esp,0xc
c0018530:	68 7e b4 02 c0       	push   0xc002b47e
c0018535:	e8 10 aa ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001853a:	83 c4 10             	add    esp,0x10
c001853d:	e8 0e 7c fe ff       	call   c0000150 <manualPCIProbe>
c0018542:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018546:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c001854b:	75 28                	jne    c0018575 <ACPI::open(int, int, void*)+0x12b>
c001854d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018551:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018558:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001855c:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018563:	83 ec 0c             	sub    esp,0xc
c0018566:	68 8c b4 02 c0       	push   0xc002b48c
c001856b:	e8 da a9 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0018570:	83 c4 10             	add    esp,0x10
c0018573:	eb 22                	jmp    c0018597 <ACPI::open(int, int, void*)+0x14d>
c0018575:	83 7c 24 14 02       	cmp    DWORD PTR [esp+0x14],0x2
c001857a:	75 1b                	jne    c0018597 <ACPI::open(int, int, void*)+0x14d>
c001857c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018580:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018587:	83 ec 0c             	sub    esp,0xc
c001858a:	68 96 b4 02 c0       	push   0xc002b496
c001858f:	e8 b6 a9 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0018594:	83 c4 10             	add    esp,0x10
c0018597:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001859b:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c00185a1:	84 c0                	test   al,al
c00185a3:	74 13                	je     c00185b8 <ACPI::open(int, int, void*)+0x16e>
c00185a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185a9:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c00185af:	83 f0 01             	xor    eax,0x1
c00185b2:	0f b6 c0             	movzx  eax,al
c00185b5:	40                   	inc    eax
c00185b6:	eb 05                	jmp    c00185bd <ACPI::open(int, int, void*)+0x173>
c00185b8:	b8 00 00 00 00       	mov    eax,0x0
c00185bd:	83 ec 08             	sub    esp,0x8
c00185c0:	50                   	push   eax
c00185c1:	68 a0 b4 02 c0       	push   0xc002b4a0
c00185c6:	e8 7f a9 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c00185cb:	83 c4 10             	add    esp,0x10
c00185ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185d2:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c00185d8:	84 c0                	test   al,al
c00185da:	74 67                	je     c0018643 <ACPI::open(int, int, void*)+0x1f9>
c00185dc:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c00185e4:	83 ec 0c             	sub    esp,0xc
c00185e7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00185eb:	e8 50 72 ff ff       	call   c000f840 <malloc>
c00185f0:	83 c4 10             	add    esp,0x10
c00185f3:	89 c3                	mov    ebx,eax
c00185f5:	83 ec 0c             	sub    esp,0xc
c00185f8:	53                   	push   ebx
c00185f9:	e8 dc a2 00 00       	call   c00228da <PCI::PCI()>
c00185fe:	83 c4 10             	add    esp,0x10
c0018601:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018605:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018609:	83 ec 08             	sub    esp,0x8
c001860c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018610:	50                   	push   eax
c0018611:	e8 5a bd ff ff       	call   c0014370 <Device::addChild(Device*)>
c0018616:	83 c4 10             	add    esp,0x10
c0018619:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001861d:	8b 00                	mov    eax,DWORD PTR [eax]
c001861f:	83 c0 08             	add    eax,0x8
c0018622:	8b 00                	mov    eax,DWORD PTR [eax]
c0018624:	6a 00                	push   0x0
c0018626:	6a 00                	push   0x0
c0018628:	6a 00                	push   0x0
c001862a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001862e:	ff d0                	call   eax
c0018630:	83 c4 10             	add    esp,0x10
c0018633:	83 ec 0c             	sub    esp,0xc
c0018636:	68 a9 b4 02 c0       	push   0xc002b4a9
c001863b:	e8 0a a9 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0018640:	83 c4 10             	add    esp,0x10
c0018643:	83 ec 0c             	sub    esp,0xc
c0018646:	68 b4 b4 02 c0       	push   0xc002b4b4
c001864b:	e8 81 46 00 00       	call   c001ccd1 <Thr::loadKernelSymbolTable(char const*)>
c0018650:	83 c4 10             	add    esp,0x10
c0018653:	8b 1d 08 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e408
c0018659:	83 ec 08             	sub    esp,0x8
c001865c:	6a 01                	push   0x1
c001865e:	68 d2 b4 02 c0       	push   0xc002b4d2
c0018663:	e8 c6 50 00 00       	call   c001d72e <Thr::loadDLL(char const*, bool)>
c0018668:	83 c4 10             	add    esp,0x10
c001866b:	83 ec 08             	sub    esp,0x8
c001866e:	53                   	push   ebx
c001866f:	50                   	push   eax
c0018670:	e8 ed 52 00 00       	call   c001d962 <Thr::executeDLL(unsigned long, void*)>
c0018675:	83 c4 10             	add    esp,0x10
c0018678:	8b 1d 08 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e408
c001867e:	83 ec 08             	sub    esp,0x8
c0018681:	6a 01                	push   0x1
c0018683:	68 ef b4 02 c0       	push   0xc002b4ef
c0018688:	e8 a1 50 00 00       	call   c001d72e <Thr::loadDLL(char const*, bool)>
c001868d:	83 c4 10             	add    esp,0x10
c0018690:	83 ec 08             	sub    esp,0x8
c0018693:	53                   	push   ebx
c0018694:	50                   	push   eax
c0018695:	e8 c8 52 00 00       	call   c001d962 <Thr::executeDLL(unsigned long, void*)>
c001869a:	83 c4 10             	add    esp,0x10
c001869d:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c00186a2:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00186a8:	83 e0 04             	and    eax,0x4
c00186ab:	84 c0                	test   al,al
c00186ad:	0f 84 d2 00 00 00    	je     c0018785 <ACPI::open(int, int, void*)+0x33b>
c00186b3:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00186ba:	83 ec 0c             	sub    esp,0xc
c00186bd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00186c1:	e8 7a 71 ff ff       	call   c000f840 <malloc>
c00186c6:	83 c4 10             	add    esp,0x10
c00186c9:	89 c3                	mov    ebx,eax
c00186cb:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c00186d0:	83 ec 04             	sub    esp,0x4
c00186d3:	50                   	push   eax
c00186d4:	68 0c b5 02 c0       	push   0xc002b50c
c00186d9:	53                   	push   ebx
c00186da:	e8 c3 ad ff ff       	call   c00134a2 <File::File(char const*, Process*)>
c00186df:	83 c4 10             	add    esp,0x10
c00186e2:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00186e6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00186eb:	74 17                	je     c0018704 <ACPI::open(int, int, void*)+0x2ba>
c00186ed:	83 ec 0c             	sub    esp,0xc
c00186f0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00186f4:	e8 7b b0 ff ff       	call   c0013774 <File::exists()>
c00186f9:	83 c4 10             	add    esp,0x10
c00186fc:	84 c0                	test   al,al
c00186fe:	74 04                	je     c0018704 <ACPI::open(int, int, void*)+0x2ba>
c0018700:	b0 01                	mov    al,0x1
c0018702:	eb 02                	jmp    c0018706 <ACPI::open(int, int, void*)+0x2bc>
c0018704:	b0 00                	mov    al,0x0
c0018706:	84 c0                	test   al,al
c0018708:	74 22                	je     c001872c <ACPI::open(int, int, void*)+0x2e2>
c001870a:	83 ec 08             	sub    esp,0x8
c001870d:	6a 01                	push   0x1
c001870f:	68 0c b5 02 c0       	push   0xc002b50c
c0018714:	e8 15 50 00 00       	call   c001d72e <Thr::loadDLL(char const*, bool)>
c0018719:	83 c4 10             	add    esp,0x10
c001871c:	83 ec 08             	sub    esp,0x8
c001871f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018723:	50                   	push   eax
c0018724:	e8 39 52 00 00       	call   c001d962 <Thr::executeDLL(unsigned long, void*)>
c0018729:	83 c4 10             	add    esp,0x10
c001872c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018731:	74 1e                	je     c0018751 <ACPI::open(int, int, void*)+0x307>
c0018733:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018738:	74 17                	je     c0018751 <ACPI::open(int, int, void*)+0x307>
c001873a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001873e:	8b 00                	mov    eax,DWORD PTR [eax]
c0018740:	83 c0 08             	add    eax,0x8
c0018743:	8b 00                	mov    eax,DWORD PTR [eax]
c0018745:	83 ec 0c             	sub    esp,0xc
c0018748:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001874c:	ff d0                	call   eax
c001874e:	83 c4 10             	add    esp,0x10
c0018751:	a1 e8 0c 03 c0       	mov    eax,ds:0xc0030ce8
c0018756:	83 ec 08             	sub    esp,0x8
c0018759:	68 29 b5 02 c0       	push   0xc002b529
c001875e:	50                   	push   eax
c001875f:	e8 64 f5 ff ff       	call   c0017cc8 <findDataTable(unsigned char*, char*)>
c0018764:	83 c4 10             	add    esp,0x10
c0018767:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001876b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018770:	74 13                	je     c0018785 <ACPI::open(int, int, void*)+0x33b>
c0018772:	83 ec 08             	sub    esp,0x8
c0018775:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018779:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001877d:	e8 80 fc ff ff       	call   c0018402 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0018782:	83 c4 10             	add    esp,0x10
c0018785:	b8 00 00 00 00       	mov    eax,0x0
c001878a:	83 c4 28             	add    esp,0x28
c001878d:	5b                   	pop    ebx
c001878e:	c3                   	ret    
c001878f:	90                   	nop

c0018790 <ACPI::sleep()>:
c0018790:	83 ec 0c             	sub    esp,0xc
c0018793:	a1 c0 0a 03 c0       	mov    eax,ds:0xc0030ac0
c0018798:	85 c0                	test   eax,eax
c001879a:	74 07                	je     c00187a3 <ACPI::sleep()+0x13>
c001879c:	a1 c0 0a 03 c0       	mov    eax,ds:0xc0030ac0
c00187a1:	ff d0                	call   eax
c00187a3:	90                   	nop
c00187a4:	83 c4 0c             	add    esp,0xc
c00187a7:	c3                   	ret    

c00187a8 <CPU::close(int, int, void*)>:
c00187a8:	31 c0                	xor    eax,eax
c00187aa:	c3                   	ret    
c00187ab:	90                   	nop

c00187ac <CPU::lookupAMDName(unsigned char, unsigned char)>:
c00187ac:	55                   	push   ebp
c00187ad:	57                   	push   edi
c00187ae:	56                   	push   esi
c00187af:	53                   	push   ebx
c00187b0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00187b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00187b8:	89 ce                	mov    esi,ecx
c00187ba:	89 d5                	mov    ebp,edx
c00187bc:	80 f9 04             	cmp    cl,0x4
c00187bf:	75 28                	jne    c00187e9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c00187c1:	8d 42 f9             	lea    eax,[edx-0x7]
c00187c4:	3c 03                	cmp    al,0x3
c00187c6:	0f 86 63 01 00 00    	jbe    c001892f <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00187cc:	80 fa 03             	cmp    dl,0x3
c00187cf:	0f 84 5a 01 00 00    	je     c001892f <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00187d5:	8d 7a f2             	lea    edi,[edx-0xe]
c00187d8:	b8 30 d8 02 c0       	mov    eax,0xc002d830
c00187dd:	89 fb                	mov    ebx,edi
c00187df:	80 fb 01             	cmp    bl,0x1
c00187e2:	77 4e                	ja     c0018832 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c00187e4:	e9 52 01 00 00       	jmp    c001893b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187e9:	80 f9 05             	cmp    cl,0x5
c00187ec:	75 4d                	jne    c001883b <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c00187ee:	b8 40 d8 02 c0       	mov    eax,0xc002d840
c00187f3:	80 fa 03             	cmp    dl,0x3
c00187f6:	0f 86 3f 01 00 00    	jbe    c001893b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187fc:	8d 7a fa             	lea    edi,[edx-0x6]
c00187ff:	b8 50 d8 02 c0       	mov    eax,0xc002d850
c0018804:	89 fb                	mov    ebx,edi
c0018806:	80 fb 01             	cmp    bl,0x1
c0018809:	0f 86 2c 01 00 00    	jbe    c001893b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001880f:	b8 60 d8 02 c0       	mov    eax,0xc002d860
c0018814:	80 fa 08             	cmp    dl,0x8
c0018817:	0f 84 1e 01 00 00    	je     c001893b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001881d:	89 d7                	mov    edi,edx
c001881f:	b8 70 d8 02 c0       	mov    eax,0xc002d870
c0018824:	83 e7 fb             	and    edi,0xfffffffb
c0018827:	89 fb                	mov    ebx,edi
c0018829:	80 fb 09             	cmp    bl,0x9
c001882c:	0f 84 09 01 00 00    	je     c001893b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018832:	31 c0                	xor    eax,eax
c0018834:	89 eb                	mov    ebx,ebp
c0018836:	0f b6 fb             	movzx  edi,bl
c0018839:	eb 30                	jmp    c001886b <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c001883b:	31 c0                	xor    eax,eax
c001883d:	80 f9 06             	cmp    cl,0x6
c0018840:	75 f2                	jne    c0018834 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018842:	80 fa 0a             	cmp    dl,0xa
c0018845:	77 ed                	ja     c0018834 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018847:	bf de 05 00 00       	mov    edi,0x5de
c001884c:	0f a3 d7             	bt     edi,edx
c001884f:	73 e3                	jae    c0018834 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018851:	b8 80 d8 02 c0       	mov    eax,0xc002d880
c0018856:	e9 e0 00 00 00       	jmp    c001893b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001885b:	39 c7                	cmp    edi,eax
c001885d:	0f 84 d3 00 00 00    	je     c0018936 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018863:	40                   	inc    eax
c0018864:	3d d0 00 00 00       	cmp    eax,0xd0
c0018869:	74 09                	je     c0018874 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c001886b:	89 f3                	mov    ebx,esi
c001886d:	80 fb 0f             	cmp    bl,0xf
c0018870:	75 f1                	jne    c0018863 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0018872:	eb e7                	jmp    c001885b <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0018874:	80 f9 10             	cmp    cl,0x10
c0018877:	75 14                	jne    c001888d <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0018879:	8d 42 fc             	lea    eax,[edx-0x4]
c001887c:	83 e0 fb             	and    eax,0xfffffffb
c001887f:	3c 02                	cmp    al,0x2
c0018881:	76 34                	jbe    c00188b7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0018883:	b8 0e b9 02 c0       	mov    eax,0xc002b90e
c0018888:	80 fa 02             	cmp    dl,0x2
c001888b:	eb 24                	jmp    c00188b1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c001888d:	80 f9 11             	cmp    cl,0x11
c0018890:	75 13                	jne    c00188a5 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0018892:	b8 0e b9 02 c0       	mov    eax,0xc002b90e
c0018897:	80 fa 03             	cmp    dl,0x3
c001889a:	0f 85 9b 00 00 00    	jne    c001893b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188a0:	e9 91 00 00 00       	jmp    c0018936 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00188a5:	80 f9 12             	cmp    cl,0x12
c00188a8:	75 14                	jne    c00188be <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c00188aa:	b8 0e b9 02 c0       	mov    eax,0xc002b90e
c00188af:	fe ca                	dec    dl
c00188b1:	0f 85 84 00 00 00    	jne    c001893b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188b7:	b8 a0 d8 02 c0       	mov    eax,0xc002d8a0
c00188bc:	eb 7d                	jmp    c001893b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188be:	80 f9 14             	cmp    cl,0x14
c00188c1:	75 12                	jne    c00188d5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c00188c3:	4a                   	dec    edx
c00188c4:	b8 0e b9 02 c0       	mov    eax,0xc002b90e
c00188c9:	80 fa 01             	cmp    dl,0x1
c00188cc:	77 6d                	ja     c001893b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188ce:	b8 b0 d8 02 c0       	mov    eax,0xc002d8b0
c00188d3:	eb 66                	jmp    c001893b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188d5:	80 f9 15             	cmp    cl,0x15
c00188d8:	75 31                	jne    c001890b <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c00188da:	b8 c0 d8 02 c0       	mov    eax,0xc002d8c0
c00188df:	80 fa 01             	cmp    dl,0x1
c00188e2:	74 57                	je     c001893b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188e4:	b8 0e b9 02 c0       	mov    eax,0xc002b90e
c00188e9:	80 fa 13             	cmp    dl,0x13
c00188ec:	76 0c                	jbe    c00188fa <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c00188ee:	80 fa 30             	cmp    dl,0x30
c00188f1:	75 48                	jne    c001893b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188f3:	b8 e0 d8 02 c0       	mov    eax,0xc002d8e0
c00188f8:	eb 41                	jmp    c001893b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188fa:	b9 04 00 09 00       	mov    ecx,0x90004
c00188ff:	0f a3 d1             	bt     ecx,edx
c0018902:	73 37                	jae    c001893b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018904:	b8 d0 d8 02 c0       	mov    eax,0xc002d8d0
c0018909:	eb 30                	jmp    c001893b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001890b:	b8 0e b9 02 c0       	mov    eax,0xc002b90e
c0018910:	80 f9 16             	cmp    cl,0x16
c0018913:	75 26                	jne    c001893b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018915:	b8 f0 d8 02 c0       	mov    eax,0xc002d8f0
c001891a:	84 d2                	test   dl,dl
c001891c:	74 1d                	je     c001893b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001891e:	b8 0e b9 02 c0       	mov    eax,0xc002b90e
c0018923:	80 fa 30             	cmp    dl,0x30
c0018926:	75 13                	jne    c001893b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018928:	b8 00 d9 02 c0       	mov    eax,0xc002d900
c001892d:	eb 0c                	jmp    c001893b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001892f:	b8 20 d8 02 c0       	mov    eax,0xc002d820
c0018934:	eb 05                	jmp    c001893b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018936:	b8 90 d8 02 c0       	mov    eax,0xc002d890
c001893b:	5b                   	pop    ebx
c001893c:	5e                   	pop    esi
c001893d:	5f                   	pop    edi
c001893e:	5d                   	pop    ebp
c001893f:	c3                   	ret    

c0018940 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0018940:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018944:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018948:	80 f9 04             	cmp    cl,0x4
c001894b:	75 6b                	jne    c00189b8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c001894d:	b8 80 d6 02 c0       	mov    eax,0xc002d680
c0018952:	80 fa 01             	cmp    dl,0x1
c0018955:	0f 86 92 02 00 00    	jbe    c0018bed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001895b:	b8 90 d6 02 c0       	mov    eax,0xc002d690
c0018960:	80 fa 02             	cmp    dl,0x2
c0018963:	0f 84 84 02 00 00    	je     c0018bed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018969:	b8 a0 d6 02 c0       	mov    eax,0xc002d6a0
c001896e:	80 fa 03             	cmp    dl,0x3
c0018971:	0f 84 76 02 00 00    	je     c0018bed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018977:	b8 b0 d6 02 c0       	mov    eax,0xc002d6b0
c001897c:	80 fa 04             	cmp    dl,0x4
c001897f:	0f 84 68 02 00 00    	je     c0018bed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018985:	b8 c0 d6 02 c0       	mov    eax,0xc002d6c0
c001898a:	80 fa 05             	cmp    dl,0x5
c001898d:	0f 84 5a 02 00 00    	je     c0018bed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018993:	b8 a0 d6 02 c0       	mov    eax,0xc002d6a0
c0018998:	80 fa 07             	cmp    dl,0x7
c001899b:	0f 84 4c 02 00 00    	je     c0018bed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189a1:	83 ea 08             	sub    edx,0x8
c00189a4:	b8 0e b9 02 c0       	mov    eax,0xc002b90e
c00189a9:	80 fa 01             	cmp    dl,0x1
c00189ac:	0f 87 3b 02 00 00    	ja     c0018bed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189b2:	b8 d0 d6 02 c0       	mov    eax,0xc002d6d0
c00189b7:	c3                   	ret    
c00189b8:	80 f9 05             	cmp    cl,0x5
c00189bb:	75 45                	jne    c0018a02 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c00189bd:	8d 4a ff             	lea    ecx,[edx-0x1]
c00189c0:	b8 e0 d6 02 c0       	mov    eax,0xc002d6e0
c00189c5:	80 f9 02             	cmp    cl,0x2
c00189c8:	0f 86 1f 02 00 00    	jbe    c0018bed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189ce:	80 fa 04             	cmp    dl,0x4
c00189d1:	0f 84 f3 01 00 00    	je     c0018bca <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c00189d7:	80 fa 07             	cmp    dl,0x7
c00189da:	0f 84 0d 02 00 00    	je     c0018bed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189e0:	b8 f0 d6 02 c0       	mov    eax,0xc002d6f0
c00189e5:	80 fa 08             	cmp    dl,0x8
c00189e8:	0f 84 ff 01 00 00    	je     c0018bed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189ee:	b8 0e b9 02 c0       	mov    eax,0xc002b90e
c00189f3:	80 fa 09             	cmp    dl,0x9
c00189f6:	0f 85 f1 01 00 00    	jne    c0018bed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189fc:	b8 00 d7 02 c0       	mov    eax,0xc002d700
c0018a01:	c3                   	ret    
c0018a02:	80 f9 06             	cmp    cl,0x6
c0018a05:	0f 85 85 01 00 00    	jne    c0018b90 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018a0b:	b8 10 d7 02 c0       	mov    eax,0xc002d710
c0018a10:	80 fa 01             	cmp    dl,0x1
c0018a13:	0f 84 d4 01 00 00    	je     c0018bed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a19:	8d 42 fb             	lea    eax,[edx-0x5]
c0018a1c:	3c 01                	cmp    al,0x1
c0018a1e:	0f 86 ac 01 00 00    	jbe    c0018bd0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018a24:	80 fa 03             	cmp    dl,0x3
c0018a27:	0f 84 a3 01 00 00    	je     c0018bd0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018a2d:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018a30:	b8 30 d7 02 c0       	mov    eax,0xc002d730
c0018a35:	80 f9 01             	cmp    cl,0x1
c0018a38:	0f 86 af 01 00 00    	jbe    c0018bed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a3e:	80 fa 09             	cmp    dl,0x9
c0018a41:	0f 84 8f 01 00 00    	je     c0018bd6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018a47:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018a4a:	80 f9 01             	cmp    cl,0x1
c0018a4d:	0f 86 9a 01 00 00    	jbe    c0018bed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a53:	b8 40 d7 02 c0       	mov    eax,0xc002d740
c0018a58:	80 fa 0d             	cmp    dl,0xd
c0018a5b:	0f 84 8c 01 00 00    	je     c0018bed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a61:	b8 50 d7 02 c0       	mov    eax,0xc002d750
c0018a66:	80 fa 0e             	cmp    dl,0xe
c0018a69:	0f 84 7e 01 00 00    	je     c0018bed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a6f:	b8 60 d7 02 c0       	mov    eax,0xc002d760
c0018a74:	80 fa 0f             	cmp    dl,0xf
c0018a77:	0f 84 70 01 00 00    	je     c0018bed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a7d:	b8 40 d7 02 c0       	mov    eax,0xc002d740
c0018a82:	80 fa 15             	cmp    dl,0x15
c0018a85:	0f 84 62 01 00 00    	je     c0018bed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a8b:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018a8e:	b8 60 d7 02 c0       	mov    eax,0xc002d760
c0018a93:	80 f9 01             	cmp    cl,0x1
c0018a96:	0f 86 51 01 00 00    	jbe    c0018bed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a9c:	80 fa 1a             	cmp    dl,0x1a
c0018a9f:	0f 84 37 01 00 00    	je     c0018bdc <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018aa5:	80 fa 1c             	cmp    dl,0x1c
c0018aa8:	0f 84 34 01 00 00    	je     c0018be2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018aae:	80 fa 1d             	cmp    dl,0x1d
c0018ab1:	0f 84 36 01 00 00    	je     c0018bed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ab7:	b8 90 d7 02 c0       	mov    eax,0xc002d790
c0018abc:	80 fa 25             	cmp    dl,0x25
c0018abf:	0f 84 28 01 00 00    	je     c0018bed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ac5:	8d 4a da             	lea    ecx,[edx-0x26]
c0018ac8:	b8 80 d7 02 c0       	mov    eax,0xc002d780
c0018acd:	80 f9 01             	cmp    cl,0x1
c0018ad0:	0f 86 17 01 00 00    	jbe    c0018bed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ad6:	b8 a0 d7 02 c0       	mov    eax,0xc002d7a0
c0018adb:	80 fa 2a             	cmp    dl,0x2a
c0018ade:	0f 84 09 01 00 00    	je     c0018bed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ae4:	b8 90 d7 02 c0       	mov    eax,0xc002d790
c0018ae9:	80 fa 2c             	cmp    dl,0x2c
c0018aec:	0f 84 fb 00 00 00    	je     c0018bed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018af2:	b8 a0 d7 02 c0       	mov    eax,0xc002d7a0
c0018af7:	80 fa 2d             	cmp    dl,0x2d
c0018afa:	0f 84 ed 00 00 00    	je     c0018bed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b00:	b8 70 d7 02 c0       	mov    eax,0xc002d770
c0018b05:	80 fa 2e             	cmp    dl,0x2e
c0018b08:	0f 84 df 00 00 00    	je     c0018bed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b0e:	b8 90 d7 02 c0       	mov    eax,0xc002d790
c0018b13:	80 fa 2f             	cmp    dl,0x2f
c0018b16:	0f 84 d1 00 00 00    	je     c0018bed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b1c:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018b1f:	b8 80 d7 02 c0       	mov    eax,0xc002d780
c0018b24:	80 f9 01             	cmp    cl,0x1
c0018b27:	0f 86 c0 00 00 00    	jbe    c0018bed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b2d:	b8 b0 d7 02 c0       	mov    eax,0xc002d7b0
c0018b32:	80 fa 37             	cmp    dl,0x37
c0018b35:	0f 84 b2 00 00 00    	je     c0018bed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b3b:	b8 c0 d7 02 c0       	mov    eax,0xc002d7c0
c0018b40:	80 fa 3a             	cmp    dl,0x3a
c0018b43:	0f 84 a4 00 00 00    	je     c0018bed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b49:	b8 d0 d7 02 c0       	mov    eax,0xc002d7d0
c0018b4e:	80 fa 3c             	cmp    dl,0x3c
c0018b51:	0f 84 96 00 00 00    	je     c0018bed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b57:	b8 e0 d7 02 c0       	mov    eax,0xc002d7e0
c0018b5c:	80 fa 3d             	cmp    dl,0x3d
c0018b5f:	0f 84 88 00 00 00    	je     c0018bed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b65:	b8 c0 d7 02 c0       	mov    eax,0xc002d7c0
c0018b6a:	80 fa 3e             	cmp    dl,0x3e
c0018b6d:	74 7e                	je     c0018bed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b6f:	8d 42 bb             	lea    eax,[edx-0x45]
c0018b72:	3c 01                	cmp    al,0x1
c0018b74:	76 72                	jbe    c0018be8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018b76:	80 fa 3f             	cmp    dl,0x3f
c0018b79:	74 6d                	je     c0018be8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018b7b:	80 fa 4a             	cmp    dl,0x4a
c0018b7e:	74 0a                	je     c0018b8a <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018b80:	b8 0e b9 02 c0       	mov    eax,0xc002b90e
c0018b85:	80 fa 4d             	cmp    dl,0x4d
c0018b88:	75 63                	jne    c0018bed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b8a:	b8 b0 d7 02 c0       	mov    eax,0xc002d7b0
c0018b8f:	c3                   	ret    
c0018b90:	b8 0e b9 02 c0       	mov    eax,0xc002b90e
c0018b95:	80 f9 0b             	cmp    cl,0xb
c0018b98:	75 0a                	jne    c0018ba4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018b9a:	fe ca                	dec    dl
c0018b9c:	75 4f                	jne    c0018bed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b9e:	b8 f0 d7 02 c0       	mov    eax,0xc002d7f0
c0018ba3:	c3                   	ret    
c0018ba4:	80 f9 0f             	cmp    cl,0xf
c0018ba7:	75 44                	jne    c0018bed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ba9:	b8 00 d8 02 c0       	mov    eax,0xc002d800
c0018bae:	80 fa 02             	cmp    dl,0x2
c0018bb1:	76 3a                	jbe    c0018bed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bb3:	8d 42 fd             	lea    eax,[edx-0x3]
c0018bb6:	3c 01                	cmp    al,0x1
c0018bb8:	76 0a                	jbe    c0018bc4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018bba:	b8 0e b9 02 c0       	mov    eax,0xc002b90e
c0018bbf:	80 fa 06             	cmp    dl,0x6
c0018bc2:	75 29                	jne    c0018bed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bc4:	b8 10 d8 02 c0       	mov    eax,0xc002d810
c0018bc9:	c3                   	ret    
c0018bca:	b8 f0 d6 02 c0       	mov    eax,0xc002d6f0
c0018bcf:	c3                   	ret    
c0018bd0:	b8 20 d7 02 c0       	mov    eax,0xc002d720
c0018bd5:	c3                   	ret    
c0018bd6:	b8 40 d7 02 c0       	mov    eax,0xc002d740
c0018bdb:	c3                   	ret    
c0018bdc:	b8 70 d7 02 c0       	mov    eax,0xc002d770
c0018be1:	c3                   	ret    
c0018be2:	b8 80 d7 02 c0       	mov    eax,0xc002d780
c0018be7:	c3                   	ret    
c0018be8:	b8 d0 d7 02 c0       	mov    eax,0xc002d7d0
c0018bed:	c3                   	ret    

c0018bee <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018bee:	60                   	pusha  
c0018bef:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018bf3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018bf7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018bfb:	9c                   	pushf  
c0018bfc:	fa                   	cli    
c0018bfd:	0f 09                	wbinvd 
c0018bff:	0f 30                	wrmsr  
c0018c01:	9d                   	popf   
c0018c02:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018c06:	89 02                	mov    DWORD PTR [edx],eax
c0018c08:	61                   	popa   
c0018c09:	c3                   	ret    

c0018c0a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018c0a:	60                   	pusha  
c0018c0b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018c0f:	9c                   	pushf  
c0018c10:	fa                   	cli    
c0018c11:	0f 09                	wbinvd 
c0018c13:	31 c0                	xor    eax,eax
c0018c15:	31 d2                	xor    edx,edx
c0018c17:	0f 32                	rdmsr  
c0018c19:	9d                   	popf   
c0018c1a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018c1e:	89 02                	mov    DWORD PTR [edx],eax
c0018c20:	61                   	popa   
c0018c21:	c3                   	ret    

c0018c22 <CPU::AMD_K6_writeback(int, int, int)>:
c0018c22:	56                   	push   esi
c0018c23:	53                   	push   ebx
c0018c24:	83 ec 10             	sub    esp,0x10
c0018c27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018c2b:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018c30:	75 5d                	jne    c0018c8f <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018c32:	83 f8 08             	cmp    eax,0x8
c0018c35:	75 09                	jne    c0018c40 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018c37:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018c3c:	7e 13                	jle    c0018c51 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018c3e:	eb 30                	jmp    c0018c70 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018c40:	83 f8 06             	cmp    eax,0x6
c0018c43:	7c 4a                	jl     c0018c8f <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018c45:	83 f8 07             	cmp    eax,0x7
c0018c48:	7e 07                	jle    c0018c51 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018c4a:	83 f8 09             	cmp    eax,0x9
c0018c4d:	74 21                	je     c0018c70 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018c4f:	eb 3e                	jmp    c0018c8f <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018c51:	89 e6                	mov    esi,esp
c0018c53:	8b 1d 48 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e448
c0018c59:	56                   	push   esi
c0018c5a:	c1 eb 15             	shr    ebx,0x15
c0018c5d:	68 82 00 00 c0       	push   0xc0000082
c0018c62:	83 e3 7e             	and    ebx,0x7e
c0018c65:	e8 a0 ff ff ff       	call   c0018c0a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018c6a:	56                   	push   esi
c0018c6b:	6a 00                	push   0x0
c0018c6d:	53                   	push   ebx
c0018c6e:	eb 12                	jmp    c0018c82 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018c70:	89 e3                	mov    ebx,esp
c0018c72:	53                   	push   ebx
c0018c73:	68 82 00 00 c0       	push   0xc0000082
c0018c78:	e8 8d ff ff ff       	call   c0018c0a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018c7d:	53                   	push   ebx
c0018c7e:	6a 00                	push   0x0
c0018c80:	6a 00                	push   0x0
c0018c82:	68 82 00 00 c0       	push   0xc0000082
c0018c87:	e8 62 ff ff ff       	call   c0018bee <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018c8c:	83 c4 18             	add    esp,0x18
c0018c8f:	83 c4 10             	add    esp,0x10
c0018c92:	5b                   	pop    ebx
c0018c93:	5e                   	pop    esi
c0018c94:	c3                   	ret    
c0018c95:	90                   	nop

c0018c96 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018c96:	55                   	push   ebp
c0018c97:	57                   	push   edi
c0018c98:	56                   	push   esi
c0018c99:	53                   	push   ebx
c0018c9a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018c9e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018ca2:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018ca6:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018caa:	39 05 20 d9 02 c0    	cmp    DWORD PTR ds:0xc002d920,eax
c0018cb0:	75 23                	jne    c0018cd5 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018cb2:	a1 4c 0f 03 c0       	mov    eax,ds:0xc0030f4c
c0018cb7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018cbb:	89 06                	mov    DWORD PTR [esi],eax
c0018cbd:	a1 48 0f 03 c0       	mov    eax,ds:0xc0030f48
c0018cc2:	89 07                	mov    DWORD PTR [edi],eax
c0018cc4:	a1 44 0f 03 c0       	mov    eax,ds:0xc0030f44
c0018cc9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018ccc:	a1 40 0f 03 c0       	mov    eax,ds:0xc0030f40
c0018cd1:	89 02                	mov    DWORD PTR [edx],eax
c0018cd3:	eb 3f                	jmp    c0018d14 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018cd5:	31 c9                	xor    ecx,ecx
c0018cd7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018cdb:	0f a2                	cpuid  
c0018cdd:	89 06                	mov    DWORD PTR [esi],eax
c0018cdf:	89 1f                	mov    DWORD PTR [edi],ebx
c0018ce1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018ce5:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018ce8:	89 10                	mov    DWORD PTR [eax],edx
c0018cea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018cee:	a3 20 d9 02 c0       	mov    ds:0xc002d920,eax
c0018cf3:	8b 06                	mov    eax,DWORD PTR [esi]
c0018cf5:	a3 4c 0f 03 c0       	mov    ds:0xc0030f4c,eax
c0018cfa:	8b 07                	mov    eax,DWORD PTR [edi]
c0018cfc:	a3 48 0f 03 c0       	mov    ds:0xc0030f48,eax
c0018d01:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018d04:	a3 44 0f 03 c0       	mov    ds:0xc0030f44,eax
c0018d09:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018d0d:	8b 00                	mov    eax,DWORD PTR [eax]
c0018d0f:	a3 40 0f 03 c0       	mov    ds:0xc0030f40,eax
c0018d14:	5b                   	pop    ebx
c0018d15:	5e                   	pop    esi
c0018d16:	5f                   	pop    edi
c0018d17:	5d                   	pop    ebp
c0018d18:	c3                   	ret    
c0018d19:	90                   	nop

c0018d1a <CPU::cpuidCheckEDX(unsigned int)>:
c0018d1a:	83 ec 10             	sub    esp,0x10
c0018d1d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d21:	50                   	push   eax
c0018d22:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d26:	50                   	push   eax
c0018d27:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d2b:	50                   	push   eax
c0018d2c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d30:	50                   	push   eax
c0018d31:	6a 01                	push   0x1
c0018d33:	e8 5e ff ff ff       	call   c0018c96 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d38:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d3c:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018d40:	0f 95 c0             	setne  al
c0018d43:	83 c4 24             	add    esp,0x24
c0018d46:	c3                   	ret    
c0018d47:	90                   	nop

c0018d48 <CPU::cpuidCheckECX(unsigned int)>:
c0018d48:	83 ec 10             	sub    esp,0x10
c0018d4b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d4f:	50                   	push   eax
c0018d50:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d54:	50                   	push   eax
c0018d55:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d59:	50                   	push   eax
c0018d5a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d5e:	50                   	push   eax
c0018d5f:	6a 01                	push   0x1
c0018d61:	e8 30 ff ff ff       	call   c0018c96 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d66:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d6a:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018d6e:	0f 95 c0             	setne  al
c0018d71:	83 c4 24             	add    esp,0x24
c0018d74:	c3                   	ret    
c0018d75:	90                   	nop

c0018d76 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018d76:	83 ec 10             	sub    esp,0x10
c0018d79:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d7d:	50                   	push   eax
c0018d7e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d82:	50                   	push   eax
c0018d83:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d87:	50                   	push   eax
c0018d88:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d8c:	50                   	push   eax
c0018d8d:	6a 07                	push   0x7
c0018d8f:	e8 02 ff ff ff       	call   c0018c96 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d94:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d98:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018d9c:	0f 95 c0             	setne  al
c0018d9f:	83 c4 24             	add    esp,0x24
c0018da2:	c3                   	ret    
c0018da3:	90                   	nop

c0018da4 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018da4:	83 ec 10             	sub    esp,0x10
c0018da7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dab:	50                   	push   eax
c0018dac:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018db0:	50                   	push   eax
c0018db1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018db5:	50                   	push   eax
c0018db6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dba:	50                   	push   eax
c0018dbb:	6a 07                	push   0x7
c0018dbd:	e8 d4 fe ff ff       	call   c0018c96 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018dc2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018dc6:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018dca:	0f 95 c0             	setne  al
c0018dcd:	83 c4 24             	add    esp,0x24
c0018dd0:	c3                   	ret    
c0018dd1:	90                   	nop

c0018dd2 <CPU::CPU()>:
c0018dd2:	83 ec 0c             	sub    esp,0xc
c0018dd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018dd9:	83 ec 08             	sub    esp,0x8
c0018ddc:	68 0e b9 02 c0       	push   0xc002b90e
c0018de1:	50                   	push   eax
c0018de2:	e8 79 b7 ff ff       	call   c0014560 <Device::Device(char const*)>
c0018de7:	83 c4 10             	add    esp,0x10
c0018dea:	ba e8 b9 02 c0       	mov    edx,0xc002b9e8
c0018def:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018df3:	89 10                	mov    DWORD PTR [eax],edx
c0018df5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018df9:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018e03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e07:	05 78 01 00 00       	add    eax,0x178
c0018e0c:	83 ec 0c             	sub    esp,0xc
c0018e0f:	50                   	push   eax
c0018e10:	e8 43 62 ff ff       	call   c000f058 <GDT::GDT()>
c0018e15:	83 c4 10             	add    esp,0x10
c0018e18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e1c:	05 7c 09 00 00       	add    eax,0x97c
c0018e21:	83 ec 0c             	sub    esp,0xc
c0018e24:	50                   	push   eax
c0018e25:	e8 90 64 ff ff       	call   c000f2ba <IDT::IDT()>
c0018e2a:	83 c4 10             	add    esp,0x10
c0018e2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e31:	05 7c 11 00 00       	add    eax,0x117c
c0018e36:	83 ec 0c             	sub    esp,0xc
c0018e39:	50                   	push   eax
c0018e3a:	e8 91 86 ff ff       	call   c00114d0 <TSS::TSS()>
c0018e3f:	83 c4 10             	add    esp,0x10
c0018e42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e46:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018e4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e51:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018e5b:	90                   	nop
c0018e5c:	83 c4 0c             	add    esp,0xc
c0018e5f:	c3                   	ret    

c0018e60 <CPU::displayFeatures()>:
c0018e60:	53                   	push   ebx
c0018e61:	83 ec 10             	sub    esp,0x10
c0018e64:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018e68:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0018e6e:	68 1c b6 02 c0       	push   0xc002b61c
c0018e73:	e8 d2 a0 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0018e78:	59                   	pop    ecx
c0018e79:	58                   	pop    eax
c0018e7a:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0018e80:	50                   	push   eax
c0018e81:	68 2d b6 02 c0       	push   0xc002b62d
c0018e86:	e8 bf a0 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0018e8b:	58                   	pop    eax
c0018e8c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018e92:	5a                   	pop    edx
c0018e93:	c1 e8 0e             	shr    eax,0xe
c0018e96:	0f b6 c0             	movzx  eax,al
c0018e99:	50                   	push   eax
c0018e9a:	68 3e b6 02 c0       	push   0xc002b63e
c0018e9f:	e8 a6 a0 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0018ea4:	59                   	pop    ecx
c0018ea5:	58                   	pop    eax
c0018ea6:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018eac:	66 c1 e8 06          	shr    ax,0x6
c0018eb0:	0f b6 c0             	movzx  eax,al
c0018eb3:	50                   	push   eax
c0018eb4:	68 4f b6 02 c0       	push   0xc002b64f
c0018eb9:	e8 8c a0 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0018ebe:	c7 04 24 fc ba 02 c0 	mov    DWORD PTR [esp],0xc002bafc
c0018ec5:	e8 80 a0 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0018eca:	83 c4 10             	add    esp,0x10
c0018ecd:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c0018ed2:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0018ed9:	74 05                	je     c0018ee0 <CPU::displayFeatures()+0x80>
c0018edb:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c0018ee0:	52                   	push   edx
c0018ee1:	52                   	push   edx
c0018ee2:	50                   	push   eax
c0018ee3:	68 60 b6 02 c0       	push   0xc002b660
c0018ee8:	e8 5d a0 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0018eed:	83 c4 10             	add    esp,0x10
c0018ef0:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c0018ef5:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0018efc:	78 05                	js     c0018f03 <CPU::displayFeatures()+0xa3>
c0018efe:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c0018f03:	51                   	push   ecx
c0018f04:	51                   	push   ecx
c0018f05:	50                   	push   eax
c0018f06:	68 77 b6 02 c0       	push   0xc002b677
c0018f0b:	e8 3a a0 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0018f10:	83 c4 10             	add    esp,0x10
c0018f13:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c0018f18:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0018f1f:	75 05                	jne    c0018f26 <CPU::displayFeatures()+0xc6>
c0018f21:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c0018f26:	52                   	push   edx
c0018f27:	52                   	push   edx
c0018f28:	50                   	push   eax
c0018f29:	68 8e b6 02 c0       	push   0xc002b68e
c0018f2e:	e8 17 a0 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0018f33:	83 c4 10             	add    esp,0x10
c0018f36:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c0018f3b:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0018f42:	75 05                	jne    c0018f49 <CPU::displayFeatures()+0xe9>
c0018f44:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c0018f49:	51                   	push   ecx
c0018f4a:	51                   	push   ecx
c0018f4b:	50                   	push   eax
c0018f4c:	68 a5 b6 02 c0       	push   0xc002b6a5
c0018f51:	e8 f4 9f ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0018f56:	83 c4 10             	add    esp,0x10
c0018f59:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c0018f5e:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0018f65:	75 05                	jne    c0018f6c <CPU::displayFeatures()+0x10c>
c0018f67:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c0018f6c:	52                   	push   edx
c0018f6d:	52                   	push   edx
c0018f6e:	50                   	push   eax
c0018f6f:	68 bc b6 02 c0       	push   0xc002b6bc
c0018f74:	e8 d1 9f ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0018f79:	83 c4 10             	add    esp,0x10
c0018f7c:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c0018f81:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0018f88:	75 05                	jne    c0018f8f <CPU::displayFeatures()+0x12f>
c0018f8a:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c0018f8f:	51                   	push   ecx
c0018f90:	51                   	push   ecx
c0018f91:	50                   	push   eax
c0018f92:	68 d3 b6 02 c0       	push   0xc002b6d3
c0018f97:	e8 ae 9f ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0018f9c:	83 c4 10             	add    esp,0x10
c0018f9f:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c0018fa4:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0018fab:	75 05                	jne    c0018fb2 <CPU::displayFeatures()+0x152>
c0018fad:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c0018fb2:	52                   	push   edx
c0018fb3:	52                   	push   edx
c0018fb4:	50                   	push   eax
c0018fb5:	68 ea b6 02 c0       	push   0xc002b6ea
c0018fba:	e8 8b 9f ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0018fbf:	83 c4 10             	add    esp,0x10
c0018fc2:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c0018fc7:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0018fce:	75 05                	jne    c0018fd5 <CPU::displayFeatures()+0x175>
c0018fd0:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c0018fd5:	51                   	push   ecx
c0018fd6:	51                   	push   ecx
c0018fd7:	50                   	push   eax
c0018fd8:	68 01 b7 02 c0       	push   0xc002b701
c0018fdd:	e8 68 9f ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0018fe2:	83 c4 10             	add    esp,0x10
c0018fe5:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c0018fea:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0018ff1:	75 05                	jne    c0018ff8 <CPU::displayFeatures()+0x198>
c0018ff3:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c0018ff8:	52                   	push   edx
c0018ff9:	52                   	push   edx
c0018ffa:	50                   	push   eax
c0018ffb:	68 18 b7 02 c0       	push   0xc002b718
c0019000:	e8 45 9f ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0019005:	83 c4 10             	add    esp,0x10
c0019008:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c001900d:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0019014:	75 05                	jne    c001901b <CPU::displayFeatures()+0x1bb>
c0019016:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c001901b:	51                   	push   ecx
c001901c:	51                   	push   ecx
c001901d:	50                   	push   eax
c001901e:	68 2f b7 02 c0       	push   0xc002b72f
c0019023:	e8 22 9f ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0019028:	83 c4 10             	add    esp,0x10
c001902b:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c0019030:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0019037:	75 05                	jne    c001903e <CPU::displayFeatures()+0x1de>
c0019039:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c001903e:	52                   	push   edx
c001903f:	52                   	push   edx
c0019040:	50                   	push   eax
c0019041:	68 46 b7 02 c0       	push   0xc002b746
c0019046:	e8 ff 9e ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001904b:	83 c4 10             	add    esp,0x10
c001904e:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c0019053:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c001905a:	75 05                	jne    c0019061 <CPU::displayFeatures()+0x201>
c001905c:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c0019061:	51                   	push   ecx
c0019062:	51                   	push   ecx
c0019063:	50                   	push   eax
c0019064:	68 5d b7 02 c0       	push   0xc002b75d
c0019069:	e8 dc 9e ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001906e:	83 c4 10             	add    esp,0x10
c0019071:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c0019076:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c001907d:	75 05                	jne    c0019084 <CPU::displayFeatures()+0x224>
c001907f:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c0019084:	52                   	push   edx
c0019085:	52                   	push   edx
c0019086:	50                   	push   eax
c0019087:	68 74 b7 02 c0       	push   0xc002b774
c001908c:	e8 b9 9e ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0019091:	83 c4 10             	add    esp,0x10
c0019094:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c0019099:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c00190a0:	78 05                	js     c00190a7 <CPU::displayFeatures()+0x247>
c00190a2:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c00190a7:	51                   	push   ecx
c00190a8:	51                   	push   ecx
c00190a9:	50                   	push   eax
c00190aa:	68 8b b7 02 c0       	push   0xc002b78b
c00190af:	e8 96 9e ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c00190b4:	83 c4 10             	add    esp,0x10
c00190b7:	b8 12 a0 02 c0       	mov    eax,0xc002a012
c00190bc:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c00190c3:	75 05                	jne    c00190ca <CPU::displayFeatures()+0x26a>
c00190c5:	b8 16 a0 02 c0       	mov    eax,0xc002a016
c00190ca:	52                   	push   edx
c00190cb:	52                   	push   edx
c00190cc:	50                   	push   eax
c00190cd:	68 a2 b7 02 c0       	push   0xc002b7a2
c00190d2:	e8 73 9e ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c00190d7:	83 c4 18             	add    esp,0x18
c00190da:	5b                   	pop    ebx
c00190db:	c3                   	ret    

c00190dc <CPU::detectFeatures()>:
c00190dc:	55                   	push   ebp
c00190dd:	57                   	push   edi
c00190de:	56                   	push   esi
c00190df:	53                   	push   ebx
c00190e0:	83 ec 50             	sub    esp,0x50
c00190e3:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00190e7:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c00190f1:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c00190f8:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c00190fe:	6a 0d                	push   0xd
c0019100:	6a 00                	push   0x0
c0019102:	57                   	push   edi
c0019103:	e8 70 76 fe ff       	call   c0000778 <memset>
c0019108:	83 c4 10             	add    esp,0x10
c001910b:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0019110:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0019117:	0f 84 20 09 00 00    	je     c0019a3d <CPU::detectFeatures()+0x961>
c001911d:	83 ec 0c             	sub    esp,0xc
c0019120:	6a 10                	push   0x10
c0019122:	e8 f3 fb ff ff       	call   c0018d1a <CPU::cpuidCheckEDX(unsigned int)>
c0019127:	83 e0 01             	and    eax,0x1
c001912a:	8d 14 00             	lea    edx,[eax+eax*1]
c001912d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019133:	83 e0 fd             	and    eax,0xfffffffd
c0019136:	09 d0                	or     eax,edx
c0019138:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001913e:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0019145:	e8 d0 fb ff ff       	call   c0018d1a <CPU::cpuidCheckEDX(unsigned int)>
c001914a:	83 e0 01             	and    eax,0x1
c001914d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0019154:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001915a:	83 e0 fb             	and    eax,0xfffffffb
c001915d:	09 d0                	or     eax,edx
c001915f:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019165:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001916c:	e8 a9 fb ff ff       	call   c0018d1a <CPU::cpuidCheckEDX(unsigned int)>
c0019171:	83 e0 01             	and    eax,0x1
c0019174:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001917b:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019181:	83 e0 f7             	and    eax,0xfffffff7
c0019184:	09 d0                	or     eax,edx
c0019186:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001918c:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0019193:	e8 82 fb ff ff       	call   c0018d1a <CPU::cpuidCheckEDX(unsigned int)>
c0019198:	83 e0 01             	and    eax,0x1
c001919b:	c1 e0 04             	shl    eax,0x4
c001919e:	88 c2                	mov    dl,al
c00191a0:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00191a6:	83 e0 ef             	and    eax,0xffffffef
c00191a9:	09 d0                	or     eax,edx
c00191ab:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00191b1:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c00191b8:	e8 5d fb ff ff       	call   c0018d1a <CPU::cpuidCheckEDX(unsigned int)>
c00191bd:	83 e0 01             	and    eax,0x1
c00191c0:	c1 e0 05             	shl    eax,0x5
c00191c3:	88 c2                	mov    dl,al
c00191c5:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00191cb:	83 e0 df             	and    eax,0xffffffdf
c00191ce:	09 d0                	or     eax,edx
c00191d0:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00191d6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00191dd:	e8 38 fb ff ff       	call   c0018d1a <CPU::cpuidCheckEDX(unsigned int)>
c00191e2:	83 e0 01             	and    eax,0x1
c00191e5:	8d 14 00             	lea    edx,[eax+eax*1]
c00191e8:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00191ee:	83 e0 fd             	and    eax,0xfffffffd
c00191f1:	09 d0                	or     eax,edx
c00191f3:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00191f9:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0019200:	e8 15 fb ff ff       	call   c0018d1a <CPU::cpuidCheckEDX(unsigned int)>
c0019205:	83 e0 01             	and    eax,0x1
c0019208:	c1 e0 06             	shl    eax,0x6
c001920b:	88 c2                	mov    dl,al
c001920d:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019213:	83 e0 bf             	and    eax,0xffffffbf
c0019216:	09 d0                	or     eax,edx
c0019218:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001921e:	58                   	pop    eax
c001921f:	8d 74 24 28          	lea    esi,[esp+0x28]
c0019223:	56                   	push   esi
c0019224:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019228:	55                   	push   ebp
c0019229:	8d 44 24 28          	lea    eax,[esp+0x28]
c001922d:	50                   	push   eax
c001922e:	8d 54 24 28          	lea    edx,[esp+0x28]
c0019232:	52                   	push   edx
c0019233:	6a 00                	push   0x0
c0019235:	e8 5c fa ff ff       	call   c0018c96 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001923a:	83 c4 1c             	add    esp,0x1c
c001923d:	6a 04                	push   0x4
c001923f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019243:	50                   	push   eax
c0019244:	57                   	push   edi
c0019245:	e8 fa 74 fe ff       	call   c0000744 <memcpy>
c001924a:	83 c4 0c             	add    esp,0xc
c001924d:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0019253:	6a 04                	push   0x4
c0019255:	56                   	push   esi
c0019256:	50                   	push   eax
c0019257:	e8 e8 74 fe ff       	call   c0000744 <memcpy>
c001925c:	83 c4 0c             	add    esp,0xc
c001925f:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0019265:	6a 04                	push   0x4
c0019267:	55                   	push   ebp
c0019268:	50                   	push   eax
c0019269:	e8 d6 74 fe ff       	call   c0000744 <memcpy>
c001926e:	58                   	pop    eax
c001926f:	5a                   	pop    edx
c0019270:	68 b9 b7 02 c0       	push   0xc002b7b9
c0019275:	57                   	push   edi
c0019276:	e8 45 76 fe ff       	call   c00008c0 <strcmp>
c001927b:	83 c4 10             	add    esp,0x10
c001927e:	85 c0                	test   eax,eax
c0019280:	75 0f                	jne    c0019291 <CPU::detectFeatures()+0x1b5>
c0019282:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c001928c:	e9 22 02 00 00       	jmp    c00194b3 <CPU::detectFeatures()+0x3d7>
c0019291:	50                   	push   eax
c0019292:	50                   	push   eax
c0019293:	68 c6 b7 02 c0       	push   0xc002b7c6
c0019298:	57                   	push   edi
c0019299:	e8 22 76 fe ff       	call   c00008c0 <strcmp>
c001929e:	83 c4 10             	add    esp,0x10
c00192a1:	85 c0                	test   eax,eax
c00192a3:	74 dd                	je     c0019282 <CPU::detectFeatures()+0x1a6>
c00192a5:	51                   	push   ecx
c00192a6:	51                   	push   ecx
c00192a7:	68 d3 b7 02 c0       	push   0xc002b7d3
c00192ac:	57                   	push   edi
c00192ad:	e8 0e 76 fe ff       	call   c00008c0 <strcmp>
c00192b2:	83 c4 10             	add    esp,0x10
c00192b5:	85 c0                	test   eax,eax
c00192b7:	74 2a                	je     c00192e3 <CPU::detectFeatures()+0x207>
c00192b9:	52                   	push   edx
c00192ba:	52                   	push   edx
c00192bb:	68 e0 b7 02 c0       	push   0xc002b7e0
c00192c0:	57                   	push   edi
c00192c1:	e8 fa 75 fe ff       	call   c00008c0 <strcmp>
c00192c6:	83 c4 10             	add    esp,0x10
c00192c9:	85 c0                	test   eax,eax
c00192cb:	74 16                	je     c00192e3 <CPU::detectFeatures()+0x207>
c00192cd:	50                   	push   eax
c00192ce:	50                   	push   eax
c00192cf:	68 ed b7 02 c0       	push   0xc002b7ed
c00192d4:	57                   	push   edi
c00192d5:	e8 e6 75 fe ff       	call   c00008c0 <strcmp>
c00192da:	83 c4 10             	add    esp,0x10
c00192dd:	85 c0                	test   eax,eax
c00192df:	74 48                	je     c0019329 <CPU::detectFeatures()+0x24d>
c00192e1:	eb 0f                	jmp    c00192f2 <CPU::detectFeatures()+0x216>
c00192e3:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c00192ed:	e9 c1 01 00 00       	jmp    c00194b3 <CPU::detectFeatures()+0x3d7>
c00192f2:	50                   	push   eax
c00192f3:	50                   	push   eax
c00192f4:	68 fa b7 02 c0       	push   0xc002b7fa
c00192f9:	57                   	push   edi
c00192fa:	e8 c1 75 fe ff       	call   c00008c0 <strcmp>
c00192ff:	83 c4 10             	add    esp,0x10
c0019302:	85 c0                	test   eax,eax
c0019304:	74 23                	je     c0019329 <CPU::detectFeatures()+0x24d>
c0019306:	50                   	push   eax
c0019307:	50                   	push   eax
c0019308:	68 07 b8 02 c0       	push   0xc002b807
c001930d:	57                   	push   edi
c001930e:	e8 ad 75 fe ff       	call   c00008c0 <strcmp>
c0019313:	83 c4 10             	add    esp,0x10
c0019316:	85 c0                	test   eax,eax
c0019318:	75 1e                	jne    c0019338 <CPU::detectFeatures()+0x25c>
c001931a:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019324:	e9 8a 01 00 00       	jmp    c00194b3 <CPU::detectFeatures()+0x3d7>
c0019329:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0019333:	e9 7b 01 00 00       	jmp    c00194b3 <CPU::detectFeatures()+0x3d7>
c0019338:	50                   	push   eax
c0019339:	50                   	push   eax
c001933a:	68 14 b8 02 c0       	push   0xc002b814
c001933f:	57                   	push   edi
c0019340:	e8 7b 75 fe ff       	call   c00008c0 <strcmp>
c0019345:	83 c4 10             	add    esp,0x10
c0019348:	85 c0                	test   eax,eax
c001934a:	75 0f                	jne    c001935b <CPU::detectFeatures()+0x27f>
c001934c:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0019356:	e9 58 01 00 00       	jmp    c00194b3 <CPU::detectFeatures()+0x3d7>
c001935b:	50                   	push   eax
c001935c:	50                   	push   eax
c001935d:	68 d3 b7 02 c0       	push   0xc002b7d3
c0019362:	57                   	push   edi
c0019363:	e8 58 75 fe ff       	call   c00008c0 <strcmp>
c0019368:	83 c4 10             	add    esp,0x10
c001936b:	85 c0                	test   eax,eax
c001936d:	75 0f                	jne    c001937e <CPU::detectFeatures()+0x2a2>
c001936f:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0019379:	e9 35 01 00 00       	jmp    c00194b3 <CPU::detectFeatures()+0x3d7>
c001937e:	50                   	push   eax
c001937f:	50                   	push   eax
c0019380:	68 21 b8 02 c0       	push   0xc002b821
c0019385:	57                   	push   edi
c0019386:	e8 35 75 fe ff       	call   c00008c0 <strcmp>
c001938b:	83 c4 10             	add    esp,0x10
c001938e:	85 c0                	test   eax,eax
c0019390:	75 0f                	jne    c00193a1 <CPU::detectFeatures()+0x2c5>
c0019392:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c001939c:	e9 12 01 00 00       	jmp    c00194b3 <CPU::detectFeatures()+0x3d7>
c00193a1:	51                   	push   ecx
c00193a2:	51                   	push   ecx
c00193a3:	68 2e b8 02 c0       	push   0xc002b82e
c00193a8:	57                   	push   edi
c00193a9:	e8 12 75 fe ff       	call   c00008c0 <strcmp>
c00193ae:	83 c4 10             	add    esp,0x10
c00193b1:	85 c0                	test   eax,eax
c00193b3:	75 0f                	jne    c00193c4 <CPU::detectFeatures()+0x2e8>
c00193b5:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00193bf:	e9 ef 00 00 00       	jmp    c00194b3 <CPU::detectFeatures()+0x3d7>
c00193c4:	52                   	push   edx
c00193c5:	52                   	push   edx
c00193c6:	68 3b b8 02 c0       	push   0xc002b83b
c00193cb:	57                   	push   edi
c00193cc:	e8 ef 74 fe ff       	call   c00008c0 <strcmp>
c00193d1:	83 c4 10             	add    esp,0x10
c00193d4:	85 c0                	test   eax,eax
c00193d6:	75 0f                	jne    c00193e7 <CPU::detectFeatures()+0x30b>
c00193d8:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c00193e2:	e9 cc 00 00 00       	jmp    c00194b3 <CPU::detectFeatures()+0x3d7>
c00193e7:	50                   	push   eax
c00193e8:	50                   	push   eax
c00193e9:	68 48 b8 02 c0       	push   0xc002b848
c00193ee:	57                   	push   edi
c00193ef:	e8 cc 74 fe ff       	call   c00008c0 <strcmp>
c00193f4:	83 c4 10             	add    esp,0x10
c00193f7:	85 c0                	test   eax,eax
c00193f9:	75 0f                	jne    c001940a <CPU::detectFeatures()+0x32e>
c00193fb:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0019405:	e9 a9 00 00 00       	jmp    c00194b3 <CPU::detectFeatures()+0x3d7>
c001940a:	50                   	push   eax
c001940b:	50                   	push   eax
c001940c:	68 55 b8 02 c0       	push   0xc002b855
c0019411:	57                   	push   edi
c0019412:	e8 a9 74 fe ff       	call   c00008c0 <strcmp>
c0019417:	83 c4 10             	add    esp,0x10
c001941a:	85 c0                	test   eax,eax
c001941c:	75 0f                	jne    c001942d <CPU::detectFeatures()+0x351>
c001941e:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0019428:	e9 86 00 00 00       	jmp    c00194b3 <CPU::detectFeatures()+0x3d7>
c001942d:	50                   	push   eax
c001942e:	50                   	push   eax
c001942f:	68 62 b8 02 c0       	push   0xc002b862
c0019434:	57                   	push   edi
c0019435:	e8 86 74 fe ff       	call   c00008c0 <strcmp>
c001943a:	83 c4 10             	add    esp,0x10
c001943d:	85 c0                	test   eax,eax
c001943f:	75 0c                	jne    c001944d <CPU::detectFeatures()+0x371>
c0019441:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c001944b:	eb 66                	jmp    c00194b3 <CPU::detectFeatures()+0x3d7>
c001944d:	50                   	push   eax
c001944e:	50                   	push   eax
c001944f:	68 6f b8 02 c0       	push   0xc002b86f
c0019454:	57                   	push   edi
c0019455:	e8 66 74 fe ff       	call   c00008c0 <strcmp>
c001945a:	83 c4 10             	add    esp,0x10
c001945d:	85 c0                	test   eax,eax
c001945f:	75 0c                	jne    c001946d <CPU::detectFeatures()+0x391>
c0019461:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c001946b:	eb 46                	jmp    c00194b3 <CPU::detectFeatures()+0x3d7>
c001946d:	50                   	push   eax
c001946e:	50                   	push   eax
c001946f:	68 7c b8 02 c0       	push   0xc002b87c
c0019474:	57                   	push   edi
c0019475:	e8 46 74 fe ff       	call   c00008c0 <strcmp>
c001947a:	83 c4 10             	add    esp,0x10
c001947d:	85 c0                	test   eax,eax
c001947f:	74 e0                	je     c0019461 <CPU::detectFeatures()+0x385>
c0019481:	50                   	push   eax
c0019482:	50                   	push   eax
c0019483:	68 89 b8 02 c0       	push   0xc002b889
c0019488:	57                   	push   edi
c0019489:	e8 32 74 fe ff       	call   c00008c0 <strcmp>
c001948e:	83 c4 10             	add    esp,0x10
c0019491:	85 c0                	test   eax,eax
c0019493:	74 cc                	je     c0019461 <CPU::detectFeatures()+0x385>
c0019495:	51                   	push   ecx
c0019496:	51                   	push   ecx
c0019497:	68 96 b8 02 c0       	push   0xc002b896
c001949c:	57                   	push   edi
c001949d:	e8 1e 74 fe ff       	call   c00008c0 <strcmp>
c00194a2:	83 c4 10             	add    esp,0x10
c00194a5:	85 c0                	test   eax,eax
c00194a7:	74 b8                	je     c0019461 <CPU::detectFeatures()+0x385>
c00194a9:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00194b3:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00194b8:	0f 86 be 00 00 00    	jbe    c001957c <CPU::detectFeatures()+0x4a0>
c00194be:	83 ec 0c             	sub    esp,0xc
c00194c1:	68 80 00 00 00       	push   0x80
c00194c6:	e8 ab f8 ff ff       	call   c0018d76 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00194cb:	83 e0 01             	and    eax,0x1
c00194ce:	c1 e0 06             	shl    eax,0x6
c00194d1:	88 c2                	mov    dl,al
c00194d3:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00194d9:	83 e0 bf             	and    eax,0xffffffbf
c00194dc:	09 d0                	or     eax,edx
c00194de:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00194e4:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00194eb:	e8 86 f8 ff ff       	call   c0018d76 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00194f0:	83 e0 01             	and    eax,0x1
c00194f3:	c1 e0 04             	shl    eax,0x4
c00194f6:	88 c2                	mov    dl,al
c00194f8:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00194fe:	83 e0 ef             	and    eax,0xffffffef
c0019501:	09 d0                	or     eax,edx
c0019503:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019509:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0019510:	e8 61 f8 ff ff       	call   c0018d76 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019515:	c1 e0 07             	shl    eax,0x7
c0019518:	88 c2                	mov    dl,al
c001951a:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019520:	83 e0 7f             	and    eax,0x7f
c0019523:	09 d0                	or     eax,edx
c0019525:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001952b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0019532:	e8 6d f8 ff ff       	call   c0018da4 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0019537:	83 e0 01             	and    eax,0x1
c001953a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0019541:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019547:	83 e0 f7             	and    eax,0xfffffff7
c001954a:	09 d0                	or     eax,edx
c001954c:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019552:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0019559:	e8 46 f8 ff ff       	call   c0018da4 <CPU::cpuidCheckExtendedECX(unsigned int)>
c001955e:	83 c4 10             	add    esp,0x10
c0019561:	83 e0 01             	and    eax,0x1
c0019564:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001956b:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019571:	83 e0 fb             	and    eax,0xfffffffb
c0019574:	09 d0                	or     eax,edx
c0019576:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001957c:	83 ec 0c             	sub    esp,0xc
c001957f:	56                   	push   esi
c0019580:	55                   	push   ebp
c0019581:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0019585:	57                   	push   edi
c0019586:	8d 44 24 28          	lea    eax,[esp+0x28]
c001958a:	50                   	push   eax
c001958b:	6a 01                	push   0x1
c001958d:	e8 04 f7 ff ff       	call   c0018c96 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019592:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0019596:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001959c:	88 ca                	mov    dl,cl
c001959e:	83 e0 f0             	and    eax,0xfffffff0
c00195a1:	83 e2 0f             	and    edx,0xf
c00195a4:	09 d0                	or     eax,edx
c00195a6:	88 ca                	mov    dl,cl
c00195a8:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c00195ae:	c0 ea 04             	shr    dl,0x4
c00195b1:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c00195b5:	0f b6 c2             	movzx  eax,dl
c00195b8:	83 c4 20             	add    esp,0x20
c00195bb:	c1 e0 06             	shl    eax,0x6
c00195be:	89 c5                	mov    ebp,eax
c00195c0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00195c6:	66 25 3f c0          	and    ax,0xc03f
c00195ca:	09 e8                	or     eax,ebp
c00195cc:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00195d3:	89 c8                	mov    eax,ecx
c00195d5:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c00195db:	c1 e8 08             	shr    eax,0x8
c00195de:	83 e2 3f             	and    edx,0x3f
c00195e1:	83 e0 0f             	and    eax,0xf
c00195e4:	89 c5                	mov    ebp,eax
c00195e6:	c1 e5 06             	shl    ebp,0x6
c00195e9:	09 d5                	or     ebp,edx
c00195eb:	89 ea                	mov    edx,ebp
c00195ed:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00195f3:	88 c2                	mov    dl,al
c00195f5:	c0 ea 02             	shr    dl,0x2
c00195f8:	89 d5                	mov    ebp,edx
c00195fa:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0019600:	83 e2 c0             	and    edx,0xffffffc0
c0019603:	09 d5                	or     ebp,edx
c0019605:	89 ea                	mov    edx,ebp
c0019607:	89 cd                	mov    ebp,ecx
c0019609:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c001960f:	c1 ed 0c             	shr    ebp,0xc
c0019612:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0019618:	83 e5 03             	and    ebp,0x3
c001961b:	83 e2 cf             	and    edx,0xffffffcf
c001961e:	c1 e5 04             	shl    ebp,0x4
c0019621:	09 d5                	or     ebp,edx
c0019623:	3c 06                	cmp    al,0x6
c0019625:	89 ea                	mov    edx,ebp
c0019627:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c001962d:	74 04                	je     c0019633 <CPU::detectFeatures()+0x557>
c001962f:	3c 0f                	cmp    al,0xf
c0019631:	75 5c                	jne    c001968f <CPU::detectFeatures()+0x5b3>
c0019633:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0019637:	89 cd                	mov    ebp,ecx
c0019639:	c1 ed 10             	shr    ebp,0x10
c001963c:	c1 e5 04             	shl    ebp,0x4
c001963f:	09 ea                	or     edx,ebp
c0019641:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0019647:	0f b6 d2             	movzx  edx,dl
c001964a:	66 81 e5 3f c0       	and    bp,0xc03f
c001964f:	c1 e2 06             	shl    edx,0x6
c0019652:	09 ea                	or     edx,ebp
c0019654:	3c 0f                	cmp    al,0xf
c0019656:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c001965d:	75 30                	jne    c001968f <CPU::detectFeatures()+0x5b3>
c001965f:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0019665:	c1 e9 14             	shr    ecx,0x14
c0019668:	83 e0 3f             	and    eax,0x3f
c001966b:	83 c1 0f             	add    ecx,0xf
c001966e:	88 ca                	mov    dl,cl
c0019670:	c0 e9 02             	shr    cl,0x2
c0019673:	c1 e2 06             	shl    edx,0x6
c0019676:	09 d0                	or     eax,edx
c0019678:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c001967e:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0019684:	83 e0 c0             	and    eax,0xffffffc0
c0019687:	09 c1                	or     ecx,eax
c0019689:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001968f:	83 ec 0c             	sub    esp,0xc
c0019692:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019699:	56                   	push   esi
c001969a:	8d 44 24 28          	lea    eax,[esp+0x28]
c001969e:	50                   	push   eax
c001969f:	57                   	push   edi
c00196a0:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00196a4:	55                   	push   ebp
c00196a5:	68 00 00 00 80       	push   0x80000000
c00196aa:	e8 e7 f5 ff ff       	call   c0018c96 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00196af:	83 c4 20             	add    esp,0x20
c00196b2:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00196ba:	8d 44 24 18          	lea    eax,[esp+0x18]
c00196be:	76 1e                	jbe    c00196de <CPU::detectFeatures()+0x602>
c00196c0:	83 ec 0c             	sub    esp,0xc
c00196c3:	56                   	push   esi
c00196c4:	50                   	push   eax
c00196c5:	57                   	push   edi
c00196c6:	55                   	push   ebp
c00196c7:	68 01 00 00 80       	push   0x80000001
c00196cc:	e8 c5 f5 ff ff       	call   c0018c96 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00196d1:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c00196db:	83 c4 20             	add    esp,0x20
c00196de:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00196e4:	83 f8 01             	cmp    eax,0x1
c00196e7:	75 6f                	jne    c0019758 <CPU::detectFeatures()+0x67c>
c00196e9:	51                   	push   ecx
c00196ea:	51                   	push   ecx
c00196eb:	68 a2 b8 02 c0       	push   0xc002b8a2
c00196f0:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00196f4:	56                   	push   esi
c00196f5:	e8 3a 71 fe ff       	call   c0000834 <strcpy>
c00196fa:	5f                   	pop    edi
c00196fb:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019701:	5d                   	pop    ebp
c0019702:	66 c1 e8 06          	shr    ax,0x6
c0019706:	0f b6 c0             	movzx  eax,al
c0019709:	50                   	push   eax
c001970a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019710:	c1 e8 0e             	shr    eax,0xe
c0019713:	0f b6 c0             	movzx  eax,al
c0019716:	50                   	push   eax
c0019717:	e8 24 f2 ff ff       	call   c0018940 <CPU::lookupIntelName(unsigned char, unsigned char)>
c001971c:	5a                   	pop    edx
c001971d:	59                   	pop    ecx
c001971e:	50                   	push   eax
c001971f:	56                   	push   esi
c0019720:	e8 4f 72 fe ff       	call   c0000974 <strcat>
c0019725:	5f                   	pop    edi
c0019726:	5d                   	pop    ebp
c0019727:	56                   	push   esi
c0019728:	53                   	push   ebx
c0019729:	e8 24 ae ff ff       	call   c0014552 <Device::setName(char const*)>
c001972e:	58                   	pop    eax
c001972f:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019735:	5a                   	pop    edx
c0019736:	68 a9 b8 02 c0       	push   0xc002b8a9
c001973b:	50                   	push   eax
c001973c:	e8 7f 71 fe ff       	call   c00008c0 <strcmp>
c0019741:	83 c4 10             	add    esp,0x10
c0019744:	85 c0                	test   eax,eax
c0019746:	0f 85 71 03 00 00    	jne    c0019abd <CPU::detectFeatures()+0x9e1>
c001974c:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0019753:	e9 65 03 00 00       	jmp    c0019abd <CPU::detectFeatures()+0x9e1>
c0019758:	83 f8 02             	cmp    eax,0x2
c001975b:	0f 85 b5 00 00 00    	jne    c0019816 <CPU::detectFeatures()+0x73a>
c0019761:	57                   	push   edi
c0019762:	57                   	push   edi
c0019763:	68 bb b8 02 c0       	push   0xc002b8bb
c0019768:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001976c:	56                   	push   esi
c001976d:	e8 c2 70 fe ff       	call   c0000834 <strcpy>
c0019772:	5d                   	pop    ebp
c0019773:	58                   	pop    eax
c0019774:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001977a:	66 c1 e8 06          	shr    ax,0x6
c001977e:	0f b6 c0             	movzx  eax,al
c0019781:	50                   	push   eax
c0019782:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019788:	c1 e8 0e             	shr    eax,0xe
c001978b:	0f b6 c0             	movzx  eax,al
c001978e:	50                   	push   eax
c001978f:	e8 18 f0 ff ff       	call   c00187ac <CPU::lookupAMDName(unsigned char, unsigned char)>
c0019794:	5a                   	pop    edx
c0019795:	59                   	pop    ecx
c0019796:	50                   	push   eax
c0019797:	56                   	push   esi
c0019798:	e8 d7 71 fe ff       	call   c0000974 <strcat>
c001979d:	5f                   	pop    edi
c001979e:	5d                   	pop    ebp
c001979f:	56                   	push   esi
c00197a0:	53                   	push   ebx
c00197a1:	e8 ac ad ff ff       	call   c0014552 <Device::setName(char const*)>
c00197a6:	58                   	pop    eax
c00197a7:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00197ad:	5a                   	pop    edx
c00197ae:	68 c0 b8 02 c0       	push   0xc002b8c0
c00197b3:	50                   	push   eax
c00197b4:	e8 07 71 fe ff       	call   c00008c0 <strcmp>
c00197b9:	83 c4 10             	add    esp,0x10
c00197bc:	85 c0                	test   eax,eax
c00197be:	75 20                	jne    c00197e0 <CPU::detectFeatures()+0x704>
c00197c0:	8b 15 08 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e408
c00197c6:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00197cc:	a8 01                	test   al,0x1
c00197ce:	74 10                	je     c00197e0 <CPU::detectFeatures()+0x704>
c00197d0:	83 e0 fe             	and    eax,0xfffffffe
c00197d3:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00197d9:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c00197e0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00197e6:	c1 e8 0e             	shr    eax,0xe
c00197e9:	3c 05                	cmp    al,0x5
c00197eb:	0f 85 cc 02 00 00    	jne    c0019abd <CPU::detectFeatures()+0x9e1>
c00197f1:	56                   	push   esi
c00197f2:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00197f8:	83 e0 0f             	and    eax,0xf
c00197fb:	50                   	push   eax
c00197fc:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019802:	66 c1 e8 06          	shr    ax,0x6
c0019806:	0f b6 c0             	movzx  eax,al
c0019809:	50                   	push   eax
c001980a:	6a 05                	push   0x5
c001980c:	e8 11 f4 ff ff       	call   c0018c22 <CPU::AMD_K6_writeback(int, int, int)>
c0019811:	e9 1f 02 00 00       	jmp    c0019a35 <CPU::detectFeatures()+0x959>
c0019816:	8d 50 fd             	lea    edx,[eax-0x3]
c0019819:	83 fa 01             	cmp    edx,0x1
c001981c:	76 09                	jbe    c0019827 <CPU::detectFeatures()+0x74b>
c001981e:	83 f8 06             	cmp    eax,0x6
c0019821:	0f 85 91 01 00 00    	jne    c00199b8 <CPU::detectFeatures()+0x8dc>
c0019827:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001982d:	c1 ea 0e             	shr    edx,0xe
c0019830:	80 fa 05             	cmp    dl,0x5
c0019833:	75 7b                	jne    c00198b0 <CPU::detectFeatures()+0x7d4>
c0019835:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001983b:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019840:	66 81 fa 00 01       	cmp    dx,0x100
c0019845:	75 0c                	jne    c0019853 <CPU::detectFeatures()+0x777>
c0019847:	51                   	push   ecx
c0019848:	51                   	push   ecx
c0019849:	68 c7 b8 02 c0       	push   0xc002b8c7
c001984e:	e9 dc 01 00 00       	jmp    c0019a2f <CPU::detectFeatures()+0x953>
c0019853:	66 81 fa 00 02       	cmp    dx,0x200
c0019858:	75 0c                	jne    c0019866 <CPU::detectFeatures()+0x78a>
c001985a:	52                   	push   edx
c001985b:	52                   	push   edx
c001985c:	68 da b8 02 c0       	push   0xc002b8da
c0019861:	e9 c9 01 00 00       	jmp    c0019a2f <CPU::detectFeatures()+0x953>
c0019866:	66 81 fa 40 02       	cmp    dx,0x240
c001986b:	75 0c                	jne    c0019879 <CPU::detectFeatures()+0x79d>
c001986d:	50                   	push   eax
c001986e:	50                   	push   eax
c001986f:	68 ec b8 02 c0       	push   0xc002b8ec
c0019874:	e9 b6 01 00 00       	jmp    c0019a2f <CPU::detectFeatures()+0x953>
c0019879:	83 f8 06             	cmp    eax,0x6
c001987c:	75 0c                	jne    c001988a <CPU::detectFeatures()+0x7ae>
c001987e:	50                   	push   eax
c001987f:	50                   	push   eax
c0019880:	68 fe b8 02 c0       	push   0xc002b8fe
c0019885:	e9 a5 01 00 00       	jmp    c0019a2f <CPU::detectFeatures()+0x953>
c001988a:	83 f8 04             	cmp    eax,0x4
c001988d:	75 0c                	jne    c001989b <CPU::detectFeatures()+0x7bf>
c001988f:	50                   	push   eax
c0019890:	50                   	push   eax
c0019891:	68 0a b9 02 c0       	push   0xc002b90a
c0019896:	e9 94 01 00 00       	jmp    c0019a2f <CPU::detectFeatures()+0x953>
c001989b:	83 f8 03             	cmp    eax,0x3
c001989e:	0f 85 19 02 00 00    	jne    c0019abd <CPU::detectFeatures()+0x9e1>
c00198a4:	50                   	push   eax
c00198a5:	50                   	push   eax
c00198a6:	68 12 b9 02 c0       	push   0xc002b912
c00198ab:	e9 7f 01 00 00       	jmp    c0019a2f <CPU::detectFeatures()+0x953>
c00198b0:	80 fa 06             	cmp    dl,0x6
c00198b3:	0f 85 db 00 00 00    	jne    c0019994 <CPU::detectFeatures()+0x8b8>
c00198b9:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00198bf:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00198c4:	66 81 fa 80 01       	cmp    dx,0x180
c00198c9:	75 0c                	jne    c00198d7 <CPU::detectFeatures()+0x7fb>
c00198cb:	50                   	push   eax
c00198cc:	50                   	push   eax
c00198cd:	68 1d b9 02 c0       	push   0xc002b91d
c00198d2:	e9 58 01 00 00       	jmp    c0019a2f <CPU::detectFeatures()+0x953>
c00198d7:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c00198dd:	66 f7 c1 80 ff       	test   cx,0xff80
c00198e2:	75 0c                	jne    c00198f0 <CPU::detectFeatures()+0x814>
c00198e4:	50                   	push   eax
c00198e5:	50                   	push   eax
c00198e6:	68 2d b9 02 c0       	push   0xc002b92d
c00198eb:	e9 3f 01 00 00       	jmp    c0019a2f <CPU::detectFeatures()+0x953>
c00198f0:	66 81 fa 40 02       	cmp    dx,0x240
c00198f5:	75 0c                	jne    c0019903 <CPU::detectFeatures()+0x827>
c00198f7:	55                   	push   ebp
c00198f8:	55                   	push   ebp
c00198f9:	68 34 b9 02 c0       	push   0xc002b934
c00198fe:	e9 2c 01 00 00       	jmp    c0019a2f <CPU::detectFeatures()+0x953>
c0019903:	66 81 fa 80 02       	cmp    dx,0x280
c0019908:	75 0c                	jne    c0019916 <CPU::detectFeatures()+0x83a>
c001990a:	57                   	push   edi
c001990b:	57                   	push   edi
c001990c:	68 3d b9 02 c0       	push   0xc002b93d
c0019911:	e9 19 01 00 00       	jmp    c0019a2f <CPU::detectFeatures()+0x953>
c0019916:	66 81 fa 40 03       	cmp    dx,0x340
c001991b:	74 ed                	je     c001990a <CPU::detectFeatures()+0x82e>
c001991d:	66 81 fa c0 03       	cmp    dx,0x3c0
c0019922:	75 0c                	jne    c0019930 <CPU::detectFeatures()+0x854>
c0019924:	56                   	push   esi
c0019925:	56                   	push   esi
c0019926:	68 44 b9 02 c0       	push   0xc002b944
c001992b:	e9 ff 00 00 00       	jmp    c0019a2f <CPU::detectFeatures()+0x953>
c0019930:	83 f8 06             	cmp    eax,0x6
c0019933:	0f 84 45 ff ff ff    	je     c001987e <CPU::detectFeatures()+0x7a2>
c0019939:	83 f8 04             	cmp    eax,0x4
c001993c:	0f 84 4d ff ff ff    	je     c001988f <CPU::detectFeatures()+0x7b3>
c0019942:	83 f8 03             	cmp    eax,0x3
c0019945:	0f 85 72 01 00 00    	jne    c0019abd <CPU::detectFeatures()+0x9e1>
c001994b:	51                   	push   ecx
c001994c:	51                   	push   ecx
c001994d:	68 4d b9 02 c0       	push   0xc002b94d
c0019952:	53                   	push   ebx
c0019953:	e8 fa ab ff ff       	call   c0014552 <Device::setName(char const*)>
c0019958:	b1 c1                	mov    cl,0xc1
c001995a:	88 c8                	mov    al,cl
c001995c:	e6 22                	out    0x22,al
c001995e:	e4 23                	in     al,0x23
c0019960:	88 c2                	mov    dl,al
c0019962:	88 c8                	mov    al,cl
c0019964:	e6 22                	out    0x22,al
c0019966:	88 d0                	mov    al,dl
c0019968:	83 c8 10             	or     eax,0x10
c001996b:	e6 23                	out    0x23,al
c001996d:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019974:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019977:	89 d0                	mov    eax,edx
c0019979:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c001997f:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0019983:	40                   	inc    eax
c0019984:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001998a:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001998f:	e9 a1 00 00 00       	jmp    c0019a35 <CPU::detectFeatures()+0x959>
c0019994:	83 f8 06             	cmp    eax,0x6
c0019997:	0f 84 e1 fe ff ff    	je     c001987e <CPU::detectFeatures()+0x7a2>
c001999d:	83 f8 04             	cmp    eax,0x4
c00199a0:	0f 84 e9 fe ff ff    	je     c001988f <CPU::detectFeatures()+0x7b3>
c00199a6:	83 f8 03             	cmp    eax,0x3
c00199a9:	0f 85 0e 01 00 00    	jne    c0019abd <CPU::detectFeatures()+0x9e1>
c00199af:	52                   	push   edx
c00199b0:	52                   	push   edx
c00199b1:	68 58 b9 02 c0       	push   0xc002b958
c00199b6:	eb 77                	jmp    c0019a2f <CPU::detectFeatures()+0x953>
c00199b8:	83 f8 07             	cmp    eax,0x7
c00199bb:	75 09                	jne    c00199c6 <CPU::detectFeatures()+0x8ea>
c00199bd:	50                   	push   eax
c00199be:	50                   	push   eax
c00199bf:	68 62 b9 02 c0       	push   0xc002b962
c00199c4:	eb 69                	jmp    c0019a2f <CPU::detectFeatures()+0x953>
c00199c6:	83 f8 0a             	cmp    eax,0xa
c00199c9:	75 09                	jne    c00199d4 <CPU::detectFeatures()+0x8f8>
c00199cb:	50                   	push   eax
c00199cc:	50                   	push   eax
c00199cd:	68 6d b9 02 c0       	push   0xc002b96d
c00199d2:	eb 5b                	jmp    c0019a2f <CPU::detectFeatures()+0x953>
c00199d4:	83 f8 0b             	cmp    eax,0xb
c00199d7:	75 09                	jne    c00199e2 <CPU::detectFeatures()+0x906>
c00199d9:	50                   	push   eax
c00199da:	50                   	push   eax
c00199db:	68 75 b9 02 c0       	push   0xc002b975
c00199e0:	eb 4d                	jmp    c0019a2f <CPU::detectFeatures()+0x953>
c00199e2:	83 f8 08             	cmp    eax,0x8
c00199e5:	75 09                	jne    c00199f0 <CPU::detectFeatures()+0x914>
c00199e7:	50                   	push   eax
c00199e8:	50                   	push   eax
c00199e9:	68 7e b9 02 c0       	push   0xc002b97e
c00199ee:	eb 3f                	jmp    c0019a2f <CPU::detectFeatures()+0x953>
c00199f0:	83 f8 09             	cmp    eax,0x9
c00199f3:	75 09                	jne    c00199fe <CPU::detectFeatures()+0x922>
c00199f5:	50                   	push   eax
c00199f6:	50                   	push   eax
c00199f7:	68 86 b9 02 c0       	push   0xc002b986
c00199fc:	eb 31                	jmp    c0019a2f <CPU::detectFeatures()+0x953>
c00199fe:	83 f8 05             	cmp    eax,0x5
c0019a01:	75 09                	jne    c0019a0c <CPU::detectFeatures()+0x930>
c0019a03:	50                   	push   eax
c0019a04:	50                   	push   eax
c0019a05:	68 8e b9 02 c0       	push   0xc002b98e
c0019a0a:	eb 23                	jmp    c0019a2f <CPU::detectFeatures()+0x953>
c0019a0c:	83 f8 0c             	cmp    eax,0xc
c0019a0f:	75 09                	jne    c0019a1a <CPU::detectFeatures()+0x93e>
c0019a11:	55                   	push   ebp
c0019a12:	55                   	push   ebp
c0019a13:	68 9c b9 02 c0       	push   0xc002b99c
c0019a18:	eb 15                	jmp    c0019a2f <CPU::detectFeatures()+0x953>
c0019a1a:	83 f8 0d             	cmp    eax,0xd
c0019a1d:	75 09                	jne    c0019a28 <CPU::detectFeatures()+0x94c>
c0019a1f:	57                   	push   edi
c0019a20:	57                   	push   edi
c0019a21:	68 a7 b9 02 c0       	push   0xc002b9a7
c0019a26:	eb 07                	jmp    c0019a2f <CPU::detectFeatures()+0x953>
c0019a28:	56                   	push   esi
c0019a29:	56                   	push   esi
c0019a2a:	68 bb b9 02 c0       	push   0xc002b9bb
c0019a2f:	53                   	push   ebx
c0019a30:	e8 1d ab ff ff       	call   c0014552 <Device::setName(char const*)>
c0019a35:	83 c4 10             	add    esp,0x10
c0019a38:	e9 80 00 00 00       	jmp    c0019abd <CPU::detectFeatures()+0x9e1>
c0019a3d:	51                   	push   ecx
c0019a3e:	51                   	push   ecx
c0019a3f:	68 07 b8 02 c0       	push   0xc002b807
c0019a44:	57                   	push   edi
c0019a45:	e8 ea 6d fe ff       	call   c0000834 <strcpy>
c0019a4a:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019a54:	e8 55 68 fe ff       	call   c00002ae <is486>
c0019a59:	83 c4 10             	add    esp,0x10
c0019a5c:	85 c0                	test   eax,eax
c0019a5e:	74 2b                	je     c0019a8b <CPU::detectFeatures()+0x9af>
c0019a60:	52                   	push   edx
c0019a61:	52                   	push   edx
c0019a62:	68 c7 b9 02 c0       	push   0xc002b9c7
c0019a67:	53                   	push   ebx
c0019a68:	e8 e5 aa ff ff       	call   c0014552 <Device::setName(char const*)>
c0019a6d:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019a74:	0f 20 c0             	mov    eax,cr0
c0019a77:	83 e0 14             	and    eax,0x14
c0019a7a:	83 c4 10             	add    esp,0x10
c0019a7d:	83 f8 04             	cmp    eax,0x4
c0019a80:	75 1f                	jne    c0019aa1 <CPU::detectFeatures()+0x9c5>
c0019a82:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019a89:	eb 32                	jmp    c0019abd <CPU::detectFeatures()+0x9e1>
c0019a8b:	50                   	push   eax
c0019a8c:	50                   	push   eax
c0019a8d:	68 d2 b9 02 c0       	push   0xc002b9d2
c0019a92:	53                   	push   ebx
c0019a93:	e8 ba aa ff ff       	call   c0014552 <Device::setName(char const*)>
c0019a98:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019a9f:	eb d3                	jmp    c0019a74 <CPU::detectFeatures()+0x998>
c0019aa1:	e8 e3 67 fe ff       	call   c0000289 <hasLegacyFPU>
c0019aa6:	83 e0 01             	and    eax,0x1
c0019aa9:	8d 14 00             	lea    edx,[eax+eax*1]
c0019aac:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019ab2:	83 e0 fd             	and    eax,0xfffffffd
c0019ab5:	09 d0                	or     eax,edx
c0019ab7:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019abd:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019ac4:	83 c4 4c             	add    esp,0x4c
c0019ac7:	5b                   	pop    ebx
c0019ac8:	5e                   	pop    esi
c0019ac9:	5f                   	pop    edi
c0019aca:	5d                   	pop    ebp
c0019acb:	c3                   	ret    

c0019acc <CPU::setupSMEP()>:
c0019acc:	0f 20 e0             	mov    eax,cr4
c0019acf:	0d 00 00 10 00       	or     eax,0x100000
c0019ad4:	0f 22 e0             	mov    cr4,eax
c0019ad7:	c3                   	ret    

c0019ad8 <CPU::setupUMIP()>:
c0019ad8:	0f 20 e0             	mov    eax,cr4
c0019adb:	80 cc 08             	or     ah,0x8
c0019ade:	0f 22 e0             	mov    cr4,eax
c0019ae1:	c3                   	ret    

c0019ae2 <CPU::setupTSC()>:
c0019ae2:	0f 20 e0             	mov    eax,cr4
c0019ae5:	83 c8 04             	or     eax,0x4
c0019ae8:	0f 22 e0             	mov    cr4,eax
c0019aeb:	c3                   	ret    

c0019aec <CPU::setupLargePages()>:
c0019aec:	0f 20 e0             	mov    eax,cr4
c0019aef:	83 c8 10             	or     eax,0x10
c0019af2:	0f 22 e0             	mov    cr4,eax
c0019af5:	c3                   	ret    

c0019af6 <CPU::setupPAT()>:
c0019af6:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0019afb:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019b02:	74 2c                	je     c0019b30 <CPU::setupPAT()+0x3a>
c0019b04:	53                   	push   ebx
c0019b05:	83 ec 10             	sub    esp,0x10
c0019b08:	68 77 02 00 00       	push   0x277
c0019b0d:	50                   	push   eax
c0019b0e:	e8 d5 52 ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0019b13:	83 e2 f8             	and    edx,0xfffffff8
c0019b16:	83 ca 01             	or     edx,0x1
c0019b19:	52                   	push   edx
c0019b1a:	50                   	push   eax
c0019b1b:	68 77 02 00 00       	push   0x277
c0019b20:	ff 35 08 e4 02 c0    	push   DWORD PTR ds:0xc002e408
c0019b26:	e8 e9 52 ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c0019b2b:	83 c4 28             	add    esp,0x28
c0019b2e:	5b                   	pop    ebx
c0019b2f:	c3                   	ret    
c0019b30:	c3                   	ret    
c0019b31:	90                   	nop

c0019b32 <CPU::setupMTRR()>:
c0019b32:	c3                   	ret    
c0019b33:	90                   	nop

c0019b34 <CPU::setupGlobalPages()>:
c0019b34:	0f 20 e0             	mov    eax,cr4
c0019b37:	0c 80                	or     al,0x80
c0019b39:	0f 22 e0             	mov    cr4,eax
c0019b3c:	c3                   	ret    
c0019b3d:	90                   	nop

c0019b3e <CPU::allowUsermodeDataAccess()>:
c0019b3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b42:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019b49:	74 03                	je     c0019b4e <CPU::allowUsermodeDataAccess()+0x10>
c0019b4b:	0f 01 cb             	stac   
c0019b4e:	c3                   	ret    
c0019b4f:	90                   	nop

c0019b50 <CPU::prohibitUsermodeDataAccess()>:
c0019b50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b54:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019b5b:	74 03                	je     c0019b60 <CPU::prohibitUsermodeDataAccess()+0x10>
c0019b5d:	0f 01 ca             	clac   
c0019b60:	c3                   	ret    
c0019b61:	90                   	nop

c0019b62 <CPU::setupSMAP()>:
c0019b62:	0f 20 e0             	mov    eax,cr4
c0019b65:	0d 00 00 20 00       	or     eax,0x200000
c0019b6a:	0f 22 e0             	mov    cr4,eax
c0019b6d:	eb e1                	jmp    c0019b50 <CPU::prohibitUsermodeDataAccess()>
c0019b6f:	90                   	nop

c0019b70 <CPU::setupFeatures()>:
c0019b70:	83 ec 0c             	sub    esp,0xc
c0019b73:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019b77:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019b7e:	74 07                	je     c0019b87 <CPU::setupFeatures()+0x17>
c0019b80:	52                   	push   edx
c0019b81:	e8 46 ff ff ff       	call   c0019acc <CPU::setupSMEP()>
c0019b86:	58                   	pop    eax
c0019b87:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019b8e:	74 07                	je     c0019b97 <CPU::setupFeatures()+0x27>
c0019b90:	52                   	push   edx
c0019b91:	e8 cc ff ff ff       	call   c0019b62 <CPU::setupSMAP()>
c0019b96:	58                   	pop    eax
c0019b97:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019b9e:	74 07                	je     c0019ba7 <CPU::setupFeatures()+0x37>
c0019ba0:	52                   	push   edx
c0019ba1:	e8 32 ff ff ff       	call   c0019ad8 <CPU::setupUMIP()>
c0019ba6:	58                   	pop    eax
c0019ba7:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019bae:	74 07                	je     c0019bb7 <CPU::setupFeatures()+0x47>
c0019bb0:	52                   	push   edx
c0019bb1:	e8 2c ff ff ff       	call   c0019ae2 <CPU::setupTSC()>
c0019bb6:	58                   	pop    eax
c0019bb7:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019bbe:	74 07                	je     c0019bc7 <CPU::setupFeatures()+0x57>
c0019bc0:	52                   	push   edx
c0019bc1:	e8 26 ff ff ff       	call   c0019aec <CPU::setupLargePages()>
c0019bc6:	59                   	pop    ecx
c0019bc7:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019bce:	74 07                	je     c0019bd7 <CPU::setupFeatures()+0x67>
c0019bd0:	52                   	push   edx
c0019bd1:	e8 5e ff ff ff       	call   c0019b34 <CPU::setupGlobalPages()>
c0019bd6:	58                   	pop    eax
c0019bd7:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019bde:	74 0c                	je     c0019bec <CPU::setupFeatures()+0x7c>
c0019be0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019be4:	83 c4 0c             	add    esp,0xc
c0019be7:	e9 0a ff ff ff       	jmp    c0019af6 <CPU::setupPAT()>
c0019bec:	83 c4 0c             	add    esp,0xc
c0019bef:	c3                   	ret    

c0019bf0 <CPU::open(int, int, void*)>:
c0019bf0:	57                   	push   edi
c0019bf1:	56                   	push   esi
c0019bf2:	53                   	push   ebx
c0019bf3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019bf7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019bfb:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019c01:	83 ec 0c             	sub    esp,0xc
c0019c04:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019c0a:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019c10:	50                   	push   eax
c0019c11:	e8 be 54 ff ff       	call   c000f0d4 <GDT::setup()>
c0019c16:	83 c4 0c             	add    esp,0xc
c0019c19:	6a 00                	push   0x0
c0019c1b:	68 ef be ad de       	push   0xdeadbeef
c0019c20:	57                   	push   edi
c0019c21:	e8 ea 78 ff ff       	call   c0011510 <TSS::setup(unsigned long, unsigned long)>
c0019c26:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019c29:	e8 c2 78 ff ff       	call   c00114f0 <TSS::flush()>
c0019c2e:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019c34:	89 04 24             	mov    DWORD PTR [esp],eax
c0019c37:	e8 f4 56 ff ff       	call   c000f330 <IDT::setup()>
c0019c3c:	b8 00 04 00 00       	mov    eax,0x400
c0019c41:	0f 23 f8             	mov    db7,eax
c0019c44:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019c4e:	e8 8f 62 ff ff       	call   c000fee2 <Phys::allocatePage()>
c0019c53:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019c59:	89 30                	mov    DWORD PTR [eax],esi
c0019c5b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019c61:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019c64:	58                   	pop    eax
c0019c65:	5a                   	pop    edx
c0019c66:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019c6c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019c70:	e8 d9 89 ff ff       	call   c001264e <VAS::setCPUSpecific(unsigned long)>
c0019c75:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019c78:	e8 5f f4 ff ff       	call   c00190dc <CPU::detectFeatures()>
c0019c7d:	e8 ce bc ff ff       	call   c0015950 <setupInterruptController()>
c0019c82:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019c88:	a1 20 e4 02 c0       	mov    eax,ds:0xc002e420
c0019c8d:	83 e0 10             	and    eax,0x10
c0019c90:	83 f8 01             	cmp    eax,0x1
c0019c93:	19 c0                	sbb    eax,eax
c0019c95:	83 e0 46             	and    eax,0x46
c0019c98:	83 c0 1e             	add    eax,0x1e
c0019c9b:	89 04 24             	mov    DWORD PTR [esp],eax
c0019c9e:	e8 bb d1 ff ff       	call   c0016e5e <setupTimer(int)>
c0019ca3:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019ca9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019cac:	e8 bf fe ff ff       	call   c0019b70 <CPU::setupFeatures()>
c0019cb1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019cb4:	e8 a7 f1 ff ff       	call   c0018e60 <CPU::displayFeatures()>
c0019cb9:	83 c4 10             	add    esp,0x10
c0019cbc:	31 c0                	xor    eax,eax
c0019cbe:	5b                   	pop    ebx
c0019cbf:	5e                   	pop    esi
c0019cc0:	5f                   	pop    edi
c0019cc1:	c3                   	ret    

c0019cc2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019cc2:	57                   	push   edi
c0019cc3:	56                   	push   esi
c0019cc4:	53                   	push   ebx
c0019cc5:	51                   	push   ecx
c0019cc6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019cca:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019ccd:	0f 02 c0             	lar    eax,ax
c0019cd0:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019cd3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019cd7:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019cda:	88 ca                	mov    dl,cl
c0019cdc:	c0 ea 06             	shr    dl,0x6
c0019cdf:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019ce3:	89 ca                	mov    edx,ecx
c0019ce5:	66 c1 ea 03          	shr    dx,0x3
c0019ce9:	83 e2 07             	and    edx,0x7
c0019cec:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019cf1:	88 17                	mov    BYTE PTR [edi],dl
c0019cf3:	0f 84 a6 01 00 00    	je     c0019e9f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019cf9:	83 e1 07             	and    ecx,0x7
c0019cfc:	80 f9 04             	cmp    cl,0x4
c0019cff:	0f 84 98 00 00 00    	je     c0019d9d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019d05:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019d0a:	0f 95 c0             	setne  al
c0019d0d:	80 f9 05             	cmp    cl,0x5
c0019d10:	0f 95 c2             	setne  dl
c0019d13:	08 c2                	or     dl,al
c0019d15:	74 79                	je     c0019d90 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019d17:	84 c9                	test   cl,cl
c0019d19:	75 05                	jne    c0019d20 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019d1b:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019d1e:	eb 3c                	jmp    c0019d5c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d20:	80 f9 01             	cmp    cl,0x1
c0019d23:	75 05                	jne    c0019d2a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019d25:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019d28:	eb 32                	jmp    c0019d5c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d2a:	80 f9 02             	cmp    cl,0x2
c0019d2d:	75 05                	jne    c0019d34 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019d2f:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019d32:	eb 28                	jmp    c0019d5c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d34:	31 c0                	xor    eax,eax
c0019d36:	80 f9 03             	cmp    cl,0x3
c0019d39:	75 05                	jne    c0019d40 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019d3b:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019d3e:	eb 1c                	jmp    c0019d5c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d40:	80 f9 05             	cmp    cl,0x5
c0019d43:	75 05                	jne    c0019d4a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019d45:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019d48:	eb 12                	jmp    c0019d5c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d4a:	80 f9 06             	cmp    cl,0x6
c0019d4d:	75 05                	jne    c0019d54 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019d4f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019d52:	eb 08                	jmp    c0019d5c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d54:	80 f9 07             	cmp    cl,0x7
c0019d57:	75 03                	jne    c0019d5c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d59:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019d5c:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019d61:	75 10                	jne    c0019d73 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019d63:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019d67:	b9 03 00 00 00       	mov    ecx,0x3
c0019d6c:	01 d0                	add    eax,edx
c0019d6e:	e9 37 01 00 00       	jmp    c0019eaa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019d73:	b9 02 00 00 00       	mov    ecx,0x2
c0019d78:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019d7d:	0f 85 27 01 00 00    	jne    c0019eaa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019d83:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019d86:	b9 06 00 00 00       	mov    ecx,0x6
c0019d8b:	e9 1a 01 00 00       	jmp    c0019eaa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019d90:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019d93:	b9 06 00 00 00       	mov    ecx,0x6
c0019d98:	e9 0f 01 00 00       	jmp    c0019eac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019d9d:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019da0:	88 ca                	mov    dl,cl
c0019da2:	c0 ea 06             	shr    dl,0x6
c0019da5:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019da9:	89 ca                	mov    edx,ecx
c0019dab:	66 c1 ea 03          	shr    dx,0x3
c0019daf:	83 e2 07             	and    edx,0x7
c0019db2:	80 e1 07             	and    cl,0x7
c0019db5:	75 05                	jne    c0019dbc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019db7:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019dba:	eb 4c                	jmp    c0019e08 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019dbc:	80 f9 01             	cmp    cl,0x1
c0019dbf:	75 05                	jne    c0019dc6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019dc1:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019dc4:	eb 42                	jmp    c0019e08 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019dc6:	80 f9 02             	cmp    cl,0x2
c0019dc9:	75 05                	jne    c0019dd0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019dcb:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019dce:	eb 38                	jmp    c0019e08 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019dd0:	80 f9 03             	cmp    cl,0x3
c0019dd3:	75 05                	jne    c0019dda <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019dd5:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019dd8:	eb 2e                	jmp    c0019e08 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019dda:	80 f9 04             	cmp    cl,0x4
c0019ddd:	75 12                	jne    c0019df1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019ddf:	f6 c4 60             	test   ah,0x60
c0019de2:	75 08                	jne    c0019dec <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019de4:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019de7:	8d 78 14             	lea    edi,[eax+0x14]
c0019dea:	eb 1c                	jmp    c0019e08 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019dec:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019def:	eb 17                	jmp    c0019e08 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019df1:	80 f9 05             	cmp    cl,0x5
c0019df4:	75 05                	jne    c0019dfb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019df6:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019df9:	eb 0d                	jmp    c0019e08 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019dfb:	80 f9 06             	cmp    cl,0x6
c0019dfe:	75 05                	jne    c0019e05 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019e00:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019e03:	eb 03                	jmp    c0019e08 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e05:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019e08:	84 d2                	test   dl,dl
c0019e0a:	75 05                	jne    c0019e11 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019e0c:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019e0f:	eb 3c                	jmp    c0019e4d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e11:	80 fa 01             	cmp    dl,0x1
c0019e14:	75 05                	jne    c0019e1b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019e16:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019e19:	eb 32                	jmp    c0019e4d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e1b:	80 fa 02             	cmp    dl,0x2
c0019e1e:	75 05                	jne    c0019e25 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019e20:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019e23:	eb 28                	jmp    c0019e4d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e25:	80 fa 03             	cmp    dl,0x3
c0019e28:	75 05                	jne    c0019e2f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019e2a:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019e2d:	eb 1e                	jmp    c0019e4d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e2f:	31 c0                	xor    eax,eax
c0019e31:	80 fa 04             	cmp    dl,0x4
c0019e34:	74 17                	je     c0019e4d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e36:	80 fa 05             	cmp    dl,0x5
c0019e39:	75 05                	jne    c0019e40 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019e3b:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019e3e:	eb 0d                	jmp    c0019e4d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e40:	80 fa 06             	cmp    dl,0x6
c0019e43:	75 05                	jne    c0019e4a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019e45:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019e48:	eb 03                	jmp    c0019e4d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e4a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019e4d:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019e52:	0f 94 c2             	sete   dl
c0019e55:	80 f9 05             	cmp    cl,0x5
c0019e58:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019e5c:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019e61:	d3 e0                	shl    eax,cl
c0019e63:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019e67:	74 0a                	je     c0019e73 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019e69:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019e6c:	b9 07 00 00 00       	mov    ecx,0x7
c0019e71:	eb 37                	jmp    c0019eaa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019e73:	01 f8                	add    eax,edi
c0019e75:	b9 03 00 00 00       	mov    ecx,0x3
c0019e7a:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019e7f:	74 2b                	je     c0019eac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019e81:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019e86:	75 0d                	jne    c0019e95 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019e88:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019e8c:	01 c8                	add    eax,ecx
c0019e8e:	b9 04 00 00 00       	mov    ecx,0x4
c0019e93:	eb 17                	jmp    c0019eac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019e95:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019e98:	b9 07 00 00 00       	mov    ecx,0x7
c0019e9d:	eb 0d                	jmp    c0019eac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019e9f:	b9 02 00 00 00       	mov    ecx,0x2
c0019ea4:	b2 01                	mov    dl,0x1
c0019ea6:	31 c0                	xor    eax,eax
c0019ea8:	eb 02                	jmp    c0019eac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019eaa:	31 d2                	xor    edx,edx
c0019eac:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019eb0:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019eb2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019eb6:	88 11                	mov    BYTE PTR [ecx],dl
c0019eb8:	5a                   	pop    edx
c0019eb9:	5b                   	pop    ebx
c0019eba:	5e                   	pop    esi
c0019ebb:	5f                   	pop    edi
c0019ebc:	c3                   	ret    

c0019ebd <Krnl::smpEntry()>:
c0019ebd:	eb fe                	jmp    c0019ebd <Krnl::smpEntry()>

c0019ebf <Krnl::startCPU(int)>:
c0019ebf:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0019ec4:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019ecb:	0f 84 36 01 00 00    	je     c001a007 <Krnl::startCPU(int)+0x148>
c0019ed1:	53                   	push   ebx
c0019ed2:	83 ec 08             	sub    esp,0x8
c0019ed5:	e8 fc 3e 00 00       	call   c001ddd6 <lockScheduler()>
c0019eda:	52                   	push   edx
c0019edb:	52                   	push   edx
c0019edc:	6a 1b                	push   0x1b
c0019ede:	ff 35 08 e4 02 c0    	push   DWORD PTR ds:0xc002e408
c0019ee4:	e8 ff 4e ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0019ee9:	59                   	pop    ecx
c0019eea:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019eef:	89 c3                	mov    ebx,eax
c0019ef1:	58                   	pop    eax
c0019ef2:	53                   	push   ebx
c0019ef3:	68 0c ba 02 c0       	push   0xc002ba0c
c0019ef8:	e8 4d 90 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0019efd:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019f07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019f0b:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019f15:	c1 e0 18             	shl    eax,0x18
c0019f18:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019f1e:	83 c4 10             	add    esp,0x10
c0019f21:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019f27:	09 c2                	or     edx,eax
c0019f29:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0019f2f:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0019f35:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019f3b:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019f41:	80 cd c5             	or     ch,0xc5
c0019f44:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019f4a:	f3 90                	pause  
c0019f4c:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019f4e:	0f ba e1 0c          	bt     ecx,0xc
c0019f52:	72 f6                	jb     c0019f4a <Krnl::startCPU(int)+0x8b>
c0019f54:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019f5a:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019f60:	09 c1                	or     ecx,eax
c0019f62:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019f68:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019f6e:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019f74:	80 cd 85             	or     ch,0x85
c0019f77:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019f7d:	f3 90                	pause  
c0019f7f:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019f81:	0f ba e1 0c          	bt     ecx,0xc
c0019f85:	72 f6                	jb     c0019f7d <Krnl::startCPU(int)+0xbe>
c0019f87:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019f91:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019f97:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019f9d:	09 c1                	or     ecx,eax
c0019f9f:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019fa5:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019fab:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0019fb1:	81 c9 02 06 00 00    	or     ecx,0x602
c0019fb7:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019fbd:	f3 90                	pause  
c0019fbf:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019fc1:	0f ba e1 0c          	bt     ecx,0xc
c0019fc5:	72 f6                	jb     c0019fbd <Krnl::startCPU(int)+0xfe>
c0019fc7:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019fd1:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019fd7:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019fdd:	09 c8                	or     eax,ecx
c0019fdf:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0019fe5:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0019feb:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0019ff0:	0d 02 06 00 00       	or     eax,0x602
c0019ff5:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0019ffb:	f3 90                	pause  
c0019ffd:	8b 02                	mov    eax,DWORD PTR [edx]
c0019fff:	0f ba e0 0c          	bt     eax,0xc
c001a003:	72 f6                	jb     c0019ffb <Krnl::startCPU(int)+0x13c>
c001a005:	eb fe                	jmp    c001a005 <Krnl::startCPU(int)+0x146>
c001a007:	c3                   	ret    

c001a008 <Krnl::startCPUs()>:
c001a008:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c001a00d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001a013:	88 c2                	mov    dl,al
c001a015:	83 e2 0a             	and    edx,0xa
c001a018:	80 fa 0a             	cmp    dl,0xa
c001a01b:	75 09                	jne    c001a026 <Krnl::startCPUs()+0x1e>
c001a01d:	a8 01                	test   al,0x1
c001a01f:	74 05                	je     c001a026 <Krnl::startCPUs()+0x1e>
c001a021:	e9 75 61 fe ff       	jmp    c000019b <prepareTramp>
c001a026:	c3                   	ret    
c001a027:	90                   	nop

c001a028 <EnvVarContainer::getEnv(char const*)>:
c001a028:	57                   	push   edi
c001a029:	56                   	push   esi
c001a02a:	53                   	push   ebx
c001a02b:	31 db                	xor    ebx,ebx
c001a02d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a031:	39 1e                	cmp    DWORD PTR [esi],ebx
c001a033:	7e 2b                	jle    c001a060 <EnvVarContainer::getEnv(char const*)+0x38>
c001a035:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001a03c:	50                   	push   eax
c001a03d:	50                   	push   eax
c001a03e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a041:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001a044:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a048:	e8 73 68 fe ff       	call   c00008c0 <strcmp>
c001a04d:	83 c4 10             	add    esp,0x10
c001a050:	85 c0                	test   eax,eax
c001a052:	75 09                	jne    c001a05d <EnvVarContainer::getEnv(char const*)+0x35>
c001a054:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a057:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001a05b:	eb 05                	jmp    c001a062 <EnvVarContainer::getEnv(char const*)+0x3a>
c001a05d:	43                   	inc    ebx
c001a05e:	eb d1                	jmp    c001a031 <EnvVarContainer::getEnv(char const*)+0x9>
c001a060:	31 c0                	xor    eax,eax
c001a062:	5b                   	pop    ebx
c001a063:	5e                   	pop    esi
c001a064:	5f                   	pop    edi
c001a065:	c3                   	ret    

c001a066 <EnvVarContainer::setEnv(char const*, char const*)>:
c001a066:	57                   	push   edi
c001a067:	56                   	push   esi
c001a068:	53                   	push   ebx
c001a069:	83 ec 1c             	sub    esp,0x1c
c001a06c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a070:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001a074:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a078:	57                   	push   edi
c001a079:	e8 16 67 fe ff       	call   c0000794 <strlen>
c001a07e:	40                   	inc    eax
c001a07f:	89 04 24             	mov    DWORD PTR [esp],eax
c001a082:	e8 b9 57 ff ff       	call   c000f840 <malloc>
c001a087:	89 34 24             	mov    DWORD PTR [esp],esi
c001a08a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a08e:	e8 01 67 fe ff       	call   c0000794 <strlen>
c001a093:	40                   	inc    eax
c001a094:	89 04 24             	mov    DWORD PTR [esp],eax
c001a097:	e8 a4 57 ff ff       	call   c000f840 <malloc>
c001a09c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a09f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a0a3:	e8 ec 66 fe ff       	call   c0000794 <strlen>
c001a0a8:	83 c4 0c             	add    esp,0xc
c001a0ab:	40                   	inc    eax
c001a0ac:	50                   	push   eax
c001a0ad:	6a 00                	push   0x0
c001a0af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a0b3:	e8 c0 66 fe ff       	call   c0000778 <memset>
c001a0b8:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a0bb:	e8 d4 66 fe ff       	call   c0000794 <strlen>
c001a0c0:	83 c4 0c             	add    esp,0xc
c001a0c3:	40                   	inc    eax
c001a0c4:	50                   	push   eax
c001a0c5:	57                   	push   edi
c001a0c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a0ca:	e8 75 66 fe ff       	call   c0000744 <memcpy>
c001a0cf:	89 34 24             	mov    DWORD PTR [esp],esi
c001a0d2:	e8 bd 66 fe ff       	call   c0000794 <strlen>
c001a0d7:	83 c4 0c             	add    esp,0xc
c001a0da:	40                   	inc    eax
c001a0db:	50                   	push   eax
c001a0dc:	6a 00                	push   0x0
c001a0de:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a0e2:	e8 91 66 fe ff       	call   c0000778 <memset>
c001a0e7:	89 34 24             	mov    DWORD PTR [esp],esi
c001a0ea:	e8 a5 66 fe ff       	call   c0000794 <strlen>
c001a0ef:	83 c4 0c             	add    esp,0xc
c001a0f2:	40                   	inc    eax
c001a0f3:	50                   	push   eax
c001a0f4:	56                   	push   esi
c001a0f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a0f9:	e8 46 66 fe ff       	call   c0000744 <memcpy>
c001a0fe:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a100:	40                   	inc    eax
c001a101:	89 03                	mov    DWORD PTR [ebx],eax
c001a103:	c1 e0 03             	shl    eax,0x3
c001a106:	5a                   	pop    edx
c001a107:	59                   	pop    ecx
c001a108:	50                   	push   eax
c001a109:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001a10c:	e8 1b 57 ff ff       	call   c000f82c <realloc>
c001a111:	83 c4 0c             	add    esp,0xc
c001a114:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a117:	6a 08                	push   0x8
c001a119:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a11d:	52                   	push   edx
c001a11e:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a120:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a124:	50                   	push   eax
c001a125:	e8 1a 66 fe ff       	call   c0000744 <memcpy>
c001a12a:	83 c4 20             	add    esp,0x20
c001a12d:	5b                   	pop    ebx
c001a12e:	5e                   	pop    esi
c001a12f:	5f                   	pop    edi
c001a130:	c3                   	ret    
c001a131:	90                   	nop

c001a132 <EnvVarContainer::deleteEnv(char const*)>:
c001a132:	c3                   	ret    
c001a133:	90                   	nop

c001a134 <EnvVarContainer::loadFrom(char const*, char const*)>:
c001a134:	55                   	push   ebp
c001a135:	57                   	push   edi
c001a136:	56                   	push   esi
c001a137:	53                   	push   ebx
c001a138:	81 ec 38 01 00 00    	sub    esp,0x138
c001a13e:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c001a145:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c001a14c:	68 14 01 00 00       	push   0x114
c001a151:	e8 ea 56 ff ff       	call   c000f840 <malloc>
c001a156:	83 c4 0c             	add    esp,0xc
c001a159:	89 c7                	mov    edi,eax
c001a15b:	ff 76 08             	push   DWORD PTR [esi+0x8]
c001a15e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a165:	50                   	push   eax
c001a166:	e8 37 93 ff ff       	call   c00134a2 <File::File(char const*, Process*)>
c001a16b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a16e:	e8 01 96 ff ff       	call   c0013774 <File::exists()>
c001a173:	83 c4 10             	add    esp,0x10
c001a176:	84 c0                	test   al,al
c001a178:	75 31                	jne    c001a1ab <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001a17a:	51                   	push   ecx
c001a17b:	51                   	push   ecx
c001a17c:	6a 12                	push   0x12
c001a17e:	57                   	push   edi
c001a17f:	e8 82 93 ff ff       	call   c0013506 <File::open(FileOpenMode)>
c001a184:	8b 07                	mov    eax,DWORD PTR [edi]
c001a186:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001a189:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a18c:	e8 03 66 fe ff       	call   c0000794 <strlen>
c001a191:	5a                   	pop    edx
c001a192:	31 d2                	xor    edx,edx
c001a194:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a198:	51                   	push   ecx
c001a199:	55                   	push   ebp
c001a19a:	52                   	push   edx
c001a19b:	50                   	push   eax
c001a19c:	57                   	push   edi
c001a19d:	ff d3                	call   ebx
c001a19f:	83 c4 14             	add    esp,0x14
c001a1a2:	57                   	push   edi
c001a1a3:	e8 bc 93 ff ff       	call   c0013564 <File::close()>
c001a1a8:	83 c4 10             	add    esp,0x10
c001a1ab:	31 db                	xor    ebx,ebx
c001a1ad:	50                   	push   eax
c001a1ae:	31 ed                	xor    ebp,ebp
c001a1b0:	68 00 01 00 00       	push   0x100
c001a1b5:	6a 00                	push   0x0
c001a1b7:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a1bb:	50                   	push   eax
c001a1bc:	e8 b7 65 fe ff       	call   c0000778 <memset>
c001a1c1:	58                   	pop    eax
c001a1c2:	5a                   	pop    edx
c001a1c3:	6a 01                	push   0x1
c001a1c5:	57                   	push   edi
c001a1c6:	e8 3b 93 ff ff       	call   c0013506 <File::open(FileOpenMode)>
c001a1cb:	83 c4 10             	add    esp,0x10
c001a1ce:	83 ec 0c             	sub    esp,0xc
c001a1d1:	8b 07                	mov    eax,DWORD PTR [edi]
c001a1d3:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a1d7:	51                   	push   ecx
c001a1d8:	8d 54 24 23          	lea    edx,[esp+0x23]
c001a1dc:	52                   	push   edx
c001a1dd:	6a 00                	push   0x0
c001a1df:	6a 01                	push   0x1
c001a1e1:	57                   	push   edi
c001a1e2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a1e5:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001a1e9:	83 c4 20             	add    esp,0x20
c001a1ec:	3c 0d                	cmp    al,0xd
c001a1ee:	0f 84 12 01 00 00    	je     c001a306 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a1f4:	85 db                	test   ebx,ebx
c001a1f6:	0f 84 fd 00 00 00    	je     c001a2f9 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a1fc:	3c 0a                	cmp    al,0xa
c001a1fe:	74 13                	je     c001a213 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a200:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a205:	74 0c                	je     c001a213 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a207:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c001a20d:	0f 8e e6 00 00 00    	jle    c001a2f9 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a213:	83 ec 0c             	sub    esp,0xc
c001a216:	8d 53 01             	lea    edx,[ebx+0x1]
c001a219:	29 dd                	sub    ebp,ebx
c001a21b:	52                   	push   edx
c001a21c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a220:	e8 1b 56 ff ff       	call   c000f840 <malloc>
c001a225:	8d 4d 04             	lea    ecx,[ebp+0x4]
c001a228:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a22c:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001a22f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001a233:	e8 08 56 ff ff       	call   c000f840 <malloc>
c001a238:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a23c:	83 c4 0c             	add    esp,0xc
c001a23f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a243:	52                   	push   edx
c001a244:	6a 00                	push   0x0
c001a246:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a24a:	e8 29 65 fe ff       	call   c0000778 <memset>
c001a24f:	83 c4 0c             	add    esp,0xc
c001a252:	53                   	push   ebx
c001a253:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001a257:	55                   	push   ebp
c001a258:	01 eb                	add    ebx,ebp
c001a25a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a25e:	e8 e1 64 fe ff       	call   c0000744 <memcpy>
c001a263:	83 c4 0c             	add    esp,0xc
c001a266:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a26a:	51                   	push   ecx
c001a26b:	6a 00                	push   0x0
c001a26d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a271:	e8 02 65 fe ff       	call   c0000778 <memset>
c001a276:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a279:	e8 16 65 fe ff       	call   c0000794 <strlen>
c001a27e:	83 c4 0c             	add    esp,0xc
c001a281:	50                   	push   eax
c001a282:	53                   	push   ebx
c001a283:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a287:	e8 b8 64 fe ff       	call   c0000744 <memcpy>
c001a28c:	5b                   	pop    ebx
c001a28d:	58                   	pop    eax
c001a28e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a292:	68 1d ba 02 c0       	push   0xc002ba1d
c001a297:	e8 ae 8c ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001a29c:	8b 06                	mov    eax,DWORD PTR [esi]
c001a29e:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001a2a1:	40                   	inc    eax
c001a2a2:	83 c4 10             	add    esp,0x10
c001a2a5:	89 06                	mov    DWORD PTR [esi],eax
c001a2a7:	85 d2                	test   edx,edx
c001a2a9:	75 0c                	jne    c001a2b7 <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c001a2ab:	83 ec 0c             	sub    esp,0xc
c001a2ae:	6a 08                	push   0x8
c001a2b0:	e8 8b 55 ff ff       	call   c000f840 <malloc>
c001a2b5:	eb 0c                	jmp    c001a2c3 <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c001a2b7:	c1 e0 03             	shl    eax,0x3
c001a2ba:	51                   	push   ecx
c001a2bb:	51                   	push   ecx
c001a2bc:	50                   	push   eax
c001a2bd:	52                   	push   edx
c001a2be:	e8 69 55 ff ff       	call   c000f82c <realloc>
c001a2c3:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c001a2c6:	83 c4 10             	add    esp,0x10
c001a2c9:	31 db                	xor    ebx,ebx
c001a2cb:	52                   	push   edx
c001a2cc:	6a 08                	push   0x8
c001a2ce:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a2d2:	50                   	push   eax
c001a2d3:	8b 16                	mov    edx,DWORD PTR [esi]
c001a2d5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a2d8:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a2dc:	50                   	push   eax
c001a2dd:	e8 62 64 fe ff       	call   c0000744 <memcpy>
c001a2e2:	83 c4 0c             	add    esp,0xc
c001a2e5:	68 00 01 00 00       	push   0x100
c001a2ea:	6a 00                	push   0x0
c001a2ec:	55                   	push   ebp
c001a2ed:	31 ed                	xor    ebp,ebp
c001a2ef:	e8 84 64 fe ff       	call   c0000778 <memset>
c001a2f4:	83 c4 10             	add    esp,0x10
c001a2f7:	eb 0d                	jmp    c001a306 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a2f9:	3c 3d                	cmp    al,0x3d
c001a2fb:	74 07                	je     c001a304 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c001a2fd:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c001a301:	45                   	inc    ebp
c001a302:	eb 02                	jmp    c001a306 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a304:	89 eb                	mov    ebx,ebp
c001a306:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a30b:	0f 85 bd fe ff ff    	jne    c001a1ce <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c001a311:	50                   	push   eax
c001a312:	50                   	push   eax
c001a313:	ff 36                	push   DWORD PTR [esi]
c001a315:	68 2b ba 02 c0       	push   0xc002ba2b
c001a31a:	e8 2b 8c ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001a31f:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a325:	5b                   	pop    ebx
c001a326:	5e                   	pop    esi
c001a327:	5f                   	pop    edi
c001a328:	5d                   	pop    ebp
c001a329:	c3                   	ret    

c001a32a <EnvVarContainer::__loadSystem()>:
c001a32a:	83 ec 10             	sub    esp,0x10
c001a32d:	68 40 d9 02 c0       	push   0xc002d940
c001a332:	68 56 ba 02 c0       	push   0xc002ba56
c001a337:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a33b:	e8 f4 fd ff ff       	call   c001a134 <EnvVarContainer::loadFrom(char const*, char const*)>
c001a340:	83 c4 1c             	add    esp,0x1c
c001a343:	c3                   	ret    

c001a344 <EnvVarContainer::__loadUser()>:
c001a344:	c3                   	ret    
c001a345:	90                   	nop

c001a346 <EnvVarContainer::EnvVarContainer(Process*)>:
c001a346:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a34a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a350:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a354:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a358:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a35b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a35f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a366:	90                   	nop
c001a367:	c3                   	ret    

c001a368 <EnvVarContainer::~EnvVarContainer()>:
c001a368:	83 ec 0c             	sub    esp,0xc
c001a36b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a36f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a372:	85 c0                	test   eax,eax
c001a374:	74 1d                	je     c001a393 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a376:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a37a:	8b 00                	mov    eax,DWORD PTR [eax]
c001a37c:	85 c0                	test   eax,eax
c001a37e:	74 13                	je     c001a393 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a380:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a384:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a387:	83 ec 0c             	sub    esp,0xc
c001a38a:	50                   	push   eax
c001a38b:	e8 c0 54 ff ff       	call   c000f850 <free>
c001a390:	83 c4 10             	add    esp,0x10
c001a393:	90                   	nop
c001a394:	83 c4 0c             	add    esp,0xc
c001a397:	c3                   	ret    

c001a398 <Krnl::getEnv(Process*, char const*)>:
c001a398:	53                   	push   ebx
c001a399:	83 ec 08             	sub    esp,0x8
c001a39c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a3a0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a3a4:	39 05 74 19 03 c0    	cmp    DWORD PTR ds:0xc0031974,eax
c001a3aa:	74 04                	je     c001a3b0 <Krnl::getEnv(Process*, char const*)+0x18>
c001a3ac:	85 c0                	test   eax,eax
c001a3ae:	75 0b                	jne    c001a3bb <Krnl::getEnv(Process*, char const*)+0x23>
c001a3b0:	a1 54 0f 03 c0       	mov    eax,ds:0xc0030f54
c001a3b5:	85 c0                	test   eax,eax
c001a3b7:	75 19                	jne    c001a3d2 <Krnl::getEnv(Process*, char const*)+0x3a>
c001a3b9:	eb 27                	jmp    c001a3e2 <Krnl::getEnv(Process*, char const*)+0x4a>
c001a3bb:	52                   	push   edx
c001a3bc:	52                   	push   edx
c001a3bd:	53                   	push   ebx
c001a3be:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001a3c4:	e8 5f fc ff ff       	call   c001a028 <EnvVarContainer::getEnv(char const*)>
c001a3c9:	83 c4 10             	add    esp,0x10
c001a3cc:	85 c0                	test   eax,eax
c001a3ce:	75 28                	jne    c001a3f8 <Krnl::getEnv(Process*, char const*)+0x60>
c001a3d0:	eb de                	jmp    c001a3b0 <Krnl::getEnv(Process*, char const*)+0x18>
c001a3d2:	52                   	push   edx
c001a3d3:	52                   	push   edx
c001a3d4:	53                   	push   ebx
c001a3d5:	50                   	push   eax
c001a3d6:	e8 4d fc ff ff       	call   c001a028 <EnvVarContainer::getEnv(char const*)>
c001a3db:	83 c4 10             	add    esp,0x10
c001a3de:	85 c0                	test   eax,eax
c001a3e0:	75 16                	jne    c001a3f8 <Krnl::getEnv(Process*, char const*)+0x60>
c001a3e2:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a3e6:	a1 58 0f 03 c0       	mov    eax,ds:0xc0030f58
c001a3eb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a3ef:	83 c4 08             	add    esp,0x8
c001a3f2:	5b                   	pop    ebx
c001a3f3:	e9 30 fc ff ff       	jmp    c001a028 <EnvVarContainer::getEnv(char const*)>
c001a3f8:	83 c4 08             	add    esp,0x8
c001a3fb:	5b                   	pop    ebx
c001a3fc:	c3                   	ret    

c001a3fd <Krnl::setEnvSystem(char const*, char const*)>:
c001a3fd:	83 ec 10             	sub    esp,0x10
c001a400:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a404:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a408:	ff 35 58 0f 03 c0    	push   DWORD PTR ds:0xc0030f58
c001a40e:	e8 53 fc ff ff       	call   c001a066 <EnvVarContainer::setEnv(char const*, char const*)>
c001a413:	83 c4 1c             	add    esp,0x1c
c001a416:	c3                   	ret    

c001a417 <Krnl::setEnvUser(char const*, char const*)>:
c001a417:	a1 54 0f 03 c0       	mov    eax,ds:0xc0030f54
c001a41c:	85 c0                	test   eax,eax
c001a41e:	74 15                	je     c001a435 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a420:	83 ec 10             	sub    esp,0x10
c001a423:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a427:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a42b:	50                   	push   eax
c001a42c:	e8 35 fc ff ff       	call   c001a066 <EnvVarContainer::setEnv(char const*, char const*)>
c001a431:	83 c4 1c             	add    esp,0x1c
c001a434:	c3                   	ret    
c001a435:	c3                   	ret    

c001a436 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a436:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a43a:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a440:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a444:	e9 1d fc ff ff       	jmp    c001a066 <EnvVarContainer::setEnv(char const*, char const*)>

c001a449 <Krnl::deleteEnvSystem(char const*)>:
c001a449:	c3                   	ret    

c001a44a <Krnl::deleteEnvUser(char const*)>:
c001a44a:	c3                   	ret    

c001a44b <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a44b:	c3                   	ret    

c001a44c <Krnl::newProcessEnv(Process*)>:
c001a44c:	83 ec 28             	sub    esp,0x28
c001a44f:	6a 0c                	push   0xc
c001a451:	e8 ea 53 ff ff       	call   c000f840 <malloc>
c001a456:	5a                   	pop    edx
c001a457:	59                   	pop    ecx
c001a458:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a45c:	50                   	push   eax
c001a45d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a461:	e8 e0 fe ff ff       	call   c001a346 <EnvVarContainer::EnvVarContainer(Process*)>
c001a466:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a46a:	83 c4 2c             	add    esp,0x2c
c001a46d:	c3                   	ret    

c001a46e <Krnl::copyProcessEnv(Process*, Process*)>:
c001a46e:	56                   	push   esi
c001a46f:	53                   	push   ebx
c001a470:	83 ec 10             	sub    esp,0x10
c001a473:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a477:	8b b0 3a 07 00 00    	mov    esi,DWORD PTR [eax+0x73a]
c001a47d:	6a 0c                	push   0xc
c001a47f:	e8 bc 53 ff ff       	call   c000f840 <malloc>
c001a484:	89 c3                	mov    ebx,eax
c001a486:	58                   	pop    eax
c001a487:	5a                   	pop    edx
c001a488:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a48c:	53                   	push   ebx
c001a48d:	e8 b4 fe ff ff       	call   c001a346 <EnvVarContainer::EnvVarContainer(Process*)>
c001a492:	8b 06                	mov    eax,DWORD PTR [esi]
c001a494:	89 03                	mov    DWORD PTR [ebx],eax
c001a496:	c1 e0 03             	shl    eax,0x3
c001a499:	89 04 24             	mov    DWORD PTR [esp],eax
c001a49c:	e8 9f 53 ff ff       	call   c000f840 <malloc>
c001a4a1:	83 c4 0c             	add    esp,0xc
c001a4a4:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a4a7:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a4a9:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c001a4b0:	52                   	push   edx
c001a4b1:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a4b4:	50                   	push   eax
c001a4b5:	e8 8a 62 fe ff       	call   c0000744 <memcpy>
c001a4ba:	89 d8                	mov    eax,ebx
c001a4bc:	83 c4 14             	add    esp,0x14
c001a4bf:	5b                   	pop    ebx
c001a4c0:	5e                   	pop    esi
c001a4c1:	c3                   	ret    

c001a4c2 <Krnl::loadSystemEnv()>:
c001a4c2:	53                   	push   ebx
c001a4c3:	83 ec 14             	sub    esp,0x14
c001a4c6:	6a 0c                	push   0xc
c001a4c8:	e8 73 53 ff ff       	call   c000f840 <malloc>
c001a4cd:	89 c3                	mov    ebx,eax
c001a4cf:	58                   	pop    eax
c001a4d0:	5a                   	pop    edx
c001a4d1:	ff 35 74 19 03 c0    	push   DWORD PTR ds:0xc0031974
c001a4d7:	53                   	push   ebx
c001a4d8:	e8 69 fe ff ff       	call   c001a346 <EnvVarContainer::EnvVarContainer(Process*)>
c001a4dd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a4e0:	89 1d 58 0f 03 c0    	mov    DWORD PTR ds:0xc0030f58,ebx
c001a4e6:	e8 3f fe ff ff       	call   c001a32a <EnvVarContainer::__loadSystem()>
c001a4eb:	83 c4 18             	add    esp,0x18
c001a4ee:	5b                   	pop    ebx
c001a4ef:	c3                   	ret    

c001a4f0 <Krnl::loadUserEnv()>:
c001a4f0:	53                   	push   ebx
c001a4f1:	83 ec 14             	sub    esp,0x14
c001a4f4:	6a 0c                	push   0xc
c001a4f6:	e8 45 53 ff ff       	call   c000f840 <malloc>
c001a4fb:	89 c3                	mov    ebx,eax
c001a4fd:	58                   	pop    eax
c001a4fe:	5a                   	pop    edx
c001a4ff:	ff 35 74 19 03 c0    	push   DWORD PTR ds:0xc0031974
c001a505:	53                   	push   ebx
c001a506:	e8 3b fe ff ff       	call   c001a346 <EnvVarContainer::EnvVarContainer(Process*)>
c001a50b:	89 1d 54 0f 03 c0    	mov    DWORD PTR ds:0xc0030f54,ebx
c001a511:	83 c4 18             	add    esp,0x18
c001a514:	5b                   	pop    ebx
c001a515:	c3                   	ret    

c001a516 <Krnl::flushEnv()>:
c001a516:	c3                   	ret    

c001a517 <Krnl::getProcessTotalEnvCount(Process*)>:
c001a517:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a51b:	8b 15 54 0f 03 c0    	mov    edx,DWORD PTR ds:0xc0030f54
c001a521:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a527:	a1 58 0f 03 c0       	mov    eax,ds:0xc0030f58
c001a52c:	8b 00                	mov    eax,DWORD PTR [eax]
c001a52e:	03 01                	add    eax,DWORD PTR [ecx]
c001a530:	85 d2                	test   edx,edx
c001a532:	74 02                	je     c001a536 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a534:	03 02                	add    eax,DWORD PTR [edx]
c001a536:	c3                   	ret    

c001a537 <Krnl::getProcessEnvPair(Process*, int)>:
c001a537:	57                   	push   edi
c001a538:	8b 0d 54 0f 03 c0    	mov    ecx,DWORD PTR ds:0xc0030f54
c001a53e:	56                   	push   esi
c001a53f:	85 c9                	test   ecx,ecx
c001a541:	53                   	push   ebx
c001a542:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a546:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a54a:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c001a550:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a554:	8b 02                	mov    eax,DWORD PTR [edx]
c001a556:	75 47                	jne    c001a59f <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a558:	39 c3                	cmp    ebx,eax
c001a55a:	7c 47                	jl     c001a5a3 <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a55c:	8b 15 58 0f 03 c0    	mov    edx,DWORD PTR ds:0xc0030f58
c001a562:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a564:	01 c1                	add    ecx,eax
c001a566:	39 d9                	cmp    ecx,ebx
c001a568:	7e 6c                	jle    c001a5d6 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a56a:	51                   	push   ecx
c001a56b:	89 d9                	mov    ecx,ebx
c001a56d:	29 c1                	sub    ecx,eax
c001a56f:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a572:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a576:	53                   	push   ebx
c001a577:	68 78 ba 02 c0       	push   0xc002ba78
c001a57c:	e8 c9 89 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001a581:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001a587:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a589:	a1 58 0f 03 c0       	mov    eax,ds:0xc0030f58
c001a58e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a591:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a595:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a598:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a59b:	89 06                	mov    DWORD PTR [esi],eax
c001a59d:	eb 51                	jmp    c001a5f0 <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a59f:	39 c3                	cmp    ebx,eax
c001a5a1:	7d 05                	jge    c001a5a8 <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a5a3:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a5a6:	eb 20                	jmp    c001a5c8 <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a5a8:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a5aa:	8d 14 07             	lea    edx,[edi+eax*1]
c001a5ad:	39 da                	cmp    edx,ebx
c001a5af:	7e 04                	jle    c001a5b5 <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a5b1:	29 c3                	sub    ebx,eax
c001a5b3:	eb 10                	jmp    c001a5c5 <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a5b5:	8b 0d 58 0f 03 c0    	mov    ecx,DWORD PTR ds:0xc0030f58
c001a5bb:	03 11                	add    edx,DWORD PTR [ecx]
c001a5bd:	39 da                	cmp    edx,ebx
c001a5bf:	7e 15                	jle    c001a5d6 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a5c1:	29 c3                	sub    ebx,eax
c001a5c3:	29 fb                	sub    ebx,edi
c001a5c5:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a5c8:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a5cc:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a5cf:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a5d2:	89 06                	mov    DWORD PTR [esi],eax
c001a5d4:	eb 1d                	jmp    c001a5f3 <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a5d6:	83 ec 0c             	sub    esp,0xc
c001a5d9:	68 8c ba 02 c0       	push   0xc002ba8c
c001a5de:	e8 18 00 00 00       	call   c001a5fb <Krnl::panic(char const*)>
c001a5e3:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a5e9:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a5f0:	83 c4 10             	add    esp,0x10
c001a5f3:	89 f0                	mov    eax,esi
c001a5f5:	5b                   	pop    ebx
c001a5f6:	5e                   	pop    esi
c001a5f7:	5f                   	pop    edi
c001a5f8:	c2 04 00             	ret    0x4

c001a5fb <Krnl::panic(char const*)>:
c001a5fb:	55                   	push   ebp
c001a5fc:	89 e5                	mov    ebp,esp
c001a5fe:	53                   	push   ebx
c001a5ff:	83 ec 0c             	sub    esp,0xc
c001a602:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a605:	fa                   	cli    
c001a606:	c6 05 64 0f 03 c0 01 	mov    BYTE PTR ds:0xc0030f64,0x1
c001a60d:	53                   	push   ebx
c001a60e:	c6 05 44 d3 02 c0 00 	mov    BYTE PTR ds:0xc002d344,0x0
c001a615:	68 a6 ba 02 c0       	push   0xc002baa6
c001a61a:	e8 2b 89 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001a61f:	58                   	pop    eax
c001a620:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c001a625:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a62b:	e8 21 67 ff ff       	call   c0010d51 <setActiveTerminal(VgaText*)>
c001a630:	83 c4 0c             	add    esp,0xc
c001a633:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c001a638:	6a 01                	push   0x1
c001a63a:	6a 0f                	push   0xf
c001a63c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a642:	e8 3b 61 ff ff       	call   c0010782 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a647:	58                   	pop    eax
c001a648:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c001a64d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a653:	e8 9a 69 ff ff       	call   c0010ff2 <VgaText::clearScreen()>
c001a658:	58                   	pop    eax
c001a659:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c001a65e:	5a                   	pop    edx
c001a65f:	68 bf ba 02 c0       	push   0xc002babf
c001a664:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a66a:	e8 01 6b ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a66f:	59                   	pop    ecx
c001a670:	58                   	pop    eax
c001a671:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c001a676:	68 64 bb 02 c0       	push   0xc002bb64
c001a67b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a681:	e8 ea 6a ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a686:	58                   	pop    eax
c001a687:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c001a68c:	5a                   	pop    edx
c001a68d:	68 db ba 02 c0       	push   0xc002badb
c001a692:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a698:	e8 d3 6a ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a69d:	59                   	pop    ecx
c001a69e:	58                   	pop    eax
c001a69f:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c001a6a4:	53                   	push   ebx
c001a6a5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6ab:	e8 c0 6a ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a6b0:	58                   	pop    eax
c001a6b1:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c001a6b6:	5a                   	pop    edx
c001a6b7:	68 fb ba 02 c0       	push   0xc002bafb
c001a6bc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6c2:	e8 a9 6a ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a6c7:	a1 60 0f 03 c0       	mov    eax,ds:0xc0030f60
c001a6cc:	83 c4 10             	add    esp,0x10
c001a6cf:	85 c0                	test   eax,eax
c001a6d1:	74 02                	je     c001a6d5 <Krnl::panic(char const*)+0xda>
c001a6d3:	ff d0                	call   eax
c001a6d5:	83 ec 0c             	sub    esp,0xc
c001a6d8:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a6db:	e8 fd 2f 00 00       	call   c001d6dd <Thr::getDriverNameFromAddress(unsigned long)>
c001a6e0:	83 c4 10             	add    esp,0x10
c001a6e3:	89 c3                	mov    ebx,eax
c001a6e5:	85 c0                	test   eax,eax
c001a6e7:	0f 84 50 02 00 00    	je     c001a93d <Krnl::panic(char const*)+0x342>
c001a6ed:	83 ec 08             	sub    esp,0x8
c001a6f0:	8b 15 74 19 03 c0    	mov    edx,DWORD PTR ds:0xc0031974
c001a6f6:	68 a0 bb 02 c0       	push   0xc002bba0
c001a6fb:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a701:	e8 6a 6a ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a706:	58                   	pop    eax
c001a707:	5a                   	pop    edx
c001a708:	8b 15 74 19 03 c0    	mov    edx,DWORD PTR ds:0xc0031974
c001a70e:	68 db ba 02 c0       	push   0xc002badb
c001a713:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a719:	e8 52 6a ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a71e:	59                   	pop    ecx
c001a71f:	58                   	pop    eax
c001a720:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c001a725:	53                   	push   ebx
c001a726:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a72c:	e8 3f 6a ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a731:	83 c4 10             	add    esp,0x10
c001a734:	83 ec 08             	sub    esp,0x8
c001a737:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c001a73c:	68 fa ba 02 c0       	push   0xc002bafa
c001a741:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a747:	e8 24 6a ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a74c:	58                   	pop    eax
c001a74d:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c001a752:	5a                   	pop    edx
c001a753:	68 f8 bb 02 c0       	push   0xc002bbf8
c001a758:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a75e:	e8 0d 6a ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a763:	59                   	pop    ecx
c001a764:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c001a769:	5b                   	pop    ebx
c001a76a:	68 38 bc 02 c0       	push   0xc002bc38
c001a76f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a775:	e8 f6 69 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a77a:	58                   	pop    eax
c001a77b:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c001a780:	5a                   	pop    edx
c001a781:	68 e6 ba 02 c0       	push   0xc002bae6
c001a786:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a78c:	e8 df 69 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a791:	59                   	pop    ecx
c001a792:	5b                   	pop    ebx
c001a793:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a796:	68 fe ba 02 c0       	push   0xc002bafe
c001a79b:	e8 aa 87 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001a7a0:	58                   	pop    eax
c001a7a1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a7a4:	5a                   	pop    edx
c001a7a5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a7a8:	68 07 bb 02 c0       	push   0xc002bb07
c001a7ad:	e8 98 87 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001a7b2:	59                   	pop    ecx
c001a7b3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a7b6:	5b                   	pop    ebx
c001a7b7:	8b 00                	mov    eax,DWORD PTR [eax]
c001a7b9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a7bc:	68 10 bb 02 c0       	push   0xc002bb10
c001a7c1:	e8 84 87 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001a7c6:	58                   	pop    eax
c001a7c7:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c001a7cc:	5a                   	pop    edx
c001a7cd:	68 7c bc 02 c0       	push   0xc002bc7c
c001a7d2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7d8:	e8 93 69 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a7dd:	59                   	pop    ecx
c001a7de:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c001a7e3:	5b                   	pop    ebx
c001a7e4:	68 19 bb 02 c0       	push   0xc002bb19
c001a7e9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7ef:	e8 7c 69 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a7f4:	0f 20 c0             	mov    eax,cr0
c001a7f7:	5a                   	pop    edx
c001a7f8:	59                   	pop    ecx
c001a7f9:	50                   	push   eax
c001a7fa:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c001a7ff:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a805:	e8 8c 69 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c001a80a:	5b                   	pop    ebx
c001a80b:	58                   	pop    eax
c001a80c:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c001a811:	68 23 bb 02 c0       	push   0xc002bb23
c001a816:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a81c:	e8 4f 69 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a821:	0f 20 d0             	mov    eax,cr2
c001a824:	5a                   	pop    edx
c001a825:	59                   	pop    ecx
c001a826:	50                   	push   eax
c001a827:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c001a82c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a832:	e8 5f 69 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c001a837:	5b                   	pop    ebx
c001a838:	58                   	pop    eax
c001a839:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c001a83e:	68 2d bb 02 c0       	push   0xc002bb2d
c001a843:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a849:	e8 22 69 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a84e:	0f 20 d8             	mov    eax,cr3
c001a851:	5a                   	pop    edx
c001a852:	59                   	pop    ecx
c001a853:	50                   	push   eax
c001a854:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c001a859:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a85f:	e8 32 69 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c001a864:	5b                   	pop    ebx
c001a865:	58                   	pop    eax
c001a866:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c001a86b:	68 40 bb 02 c0       	push   0xc002bb40
c001a870:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a876:	e8 f5 68 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a87b:	0f 20 e0             	mov    eax,cr4
c001a87e:	5a                   	pop    edx
c001a87f:	59                   	pop    ecx
c001a880:	50                   	push   eax
c001a881:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c001a886:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a88c:	e8 05 69 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c001a891:	5b                   	pop    ebx
c001a892:	58                   	pop    eax
c001a893:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c001a898:	68 4a bb 02 c0       	push   0xc002bb4a
c001a89d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8a3:	e8 c8 68 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a8a8:	5a                   	pop    edx
c001a8a9:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c001a8ae:	59                   	pop    ecx
c001a8af:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a8b5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a8b8:	50                   	push   eax
c001a8b9:	e8 d8 68 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c001a8be:	5b                   	pop    ebx
c001a8bf:	58                   	pop    eax
c001a8c0:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c001a8c5:	68 61 bb 02 c0       	push   0xc002bb61
c001a8ca:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8d0:	e8 9b 68 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a8d5:	5a                   	pop    edx
c001a8d6:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c001a8db:	59                   	pop    ecx
c001a8dc:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a8e2:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a8e5:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a8e8:	50                   	push   eax
c001a8e9:	e8 a8 68 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c001a8ee:	5b                   	pop    ebx
c001a8ef:	58                   	pop    eax
c001a8f0:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c001a8f5:	68 61 bb 02 c0       	push   0xc002bb61
c001a8fa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a900:	e8 6b 68 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a905:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c001a90a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a90d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a913:	8b 12                	mov    edx,DWORD PTR [edx]
c001a915:	59                   	pop    ecx
c001a916:	5b                   	pop    ebx
c001a917:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a91a:	50                   	push   eax
c001a91b:	e8 76 68 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c001a920:	83 c4 10             	add    esp,0x10
c001a923:	b2 fe                	mov    dl,0xfe
c001a925:	e4 60                	in     al,0x60
c001a927:	3c 1c                	cmp    al,0x1c
c001a929:	74 04                	je     c001a92f <Krnl::panic(char const*)+0x334>
c001a92b:	3c 5a                	cmp    al,0x5a
c001a92d:	75 f6                	jne    c001a925 <Krnl::panic(char const*)+0x32a>
c001a92f:	e4 64                	in     al,0x64
c001a931:	a8 02                	test   al,0x2
c001a933:	75 fa                	jne    c001a92f <Krnl::panic(char const*)+0x334>
c001a935:	88 d0                	mov    al,dl
c001a937:	e6 64                	out    0x64,al
c001a939:	fa                   	cli    
c001a93a:	f4                   	hlt    
c001a93b:	eb e8                	jmp    c001a925 <Krnl::panic(char const*)+0x32a>
c001a93d:	50                   	push   eax
c001a93e:	50                   	push   eax
c001a93f:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c001a944:	68 cc bb 02 c0       	push   0xc002bbcc
c001a949:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a94f:	e8 1c 68 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a954:	58                   	pop    eax
c001a955:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c001a95a:	5a                   	pop    edx
c001a95b:	68 db ba 02 c0       	push   0xc002badb
c001a960:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a966:	e8 05 68 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a96b:	59                   	pop    ecx
c001a96c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a971:	5b                   	pop    ebx
c001a972:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a975:	83 c0 0c             	add    eax,0xc
c001a978:	50                   	push   eax
c001a979:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c001a97e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a984:	e8 e7 67 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a989:	83 c4 10             	add    esp,0x10
c001a98c:	e9 a3 fd ff ff       	jmp    c001a734 <Krnl::panic(char const*)+0x139>

c001a991 <Net::switchEndian16(unsigned short)>:
c001a991:	83 ec 04             	sub    esp,0x4
c001a994:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a998:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a99c:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a9a0:	c1 f8 08             	sar    eax,0x8
c001a9a3:	89 c2                	mov    edx,eax
c001a9a5:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a9a9:	c1 e0 08             	shl    eax,0x8
c001a9ac:	09 d0                	or     eax,edx
c001a9ae:	83 c4 04             	add    esp,0x4
c001a9b1:	c3                   	ret    

c001a9b2 <Net::switchEndian32(unsigned int)>:
c001a9b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9b6:	c1 e8 18             	shr    eax,0x18
c001a9b9:	89 c2                	mov    edx,eax
c001a9bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9bf:	c1 e0 08             	shl    eax,0x8
c001a9c2:	25 00 00 ff 00       	and    eax,0xff0000
c001a9c7:	09 c2                	or     edx,eax
c001a9c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9cd:	c1 e8 08             	shr    eax,0x8
c001a9d0:	25 00 ff 00 00       	and    eax,0xff00
c001a9d5:	09 c2                	or     edx,eax
c001a9d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9db:	c1 e0 18             	shl    eax,0x18
c001a9de:	09 d0                	or     eax,edx
c001a9e0:	c3                   	ret    

c001a9e1 <Net::crc32Calc(unsigned char*, int)>:
c001a9e1:	83 ec 10             	sub    esp,0x10
c001a9e4:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a9e9:	75 07                	jne    c001a9f2 <Net::crc32Calc(unsigned char*, int)+0x11>
c001a9eb:	b8 00 00 00 00       	mov    eax,0x0
c001a9f0:	eb 7c                	jmp    c001aa6e <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a9f2:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a9f7:	7f 07                	jg     c001aa00 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a9f9:	b8 00 00 00 00       	mov    eax,0x0
c001a9fe:	eb 6e                	jmp    c001aa6e <Net::crc32Calc(unsigned char*, int)+0x8d>
c001aa00:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001aa08:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001aa10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aa14:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001aa18:	7d 4e                	jge    c001aa68 <Net::crc32Calc(unsigned char*, int)+0x87>
c001aa1a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001aa1e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aa22:	01 d0                	add    eax,edx
c001aa24:	8a 00                	mov    al,BYTE PTR [eax]
c001aa26:	0f b6 c0             	movzx  eax,al
c001aa29:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001aa2d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001aa35:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001aa3a:	7f 26                	jg     c001aa62 <Net::crc32Calc(unsigned char*, int)+0x81>
c001aa3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa40:	83 e0 01             	and    eax,0x1
c001aa43:	74 0d                	je     c001aa52 <Net::crc32Calc(unsigned char*, int)+0x71>
c001aa45:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa49:	d1 e8                	shr    eax,1
c001aa4b:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001aa50:	eb 06                	jmp    c001aa58 <Net::crc32Calc(unsigned char*, int)+0x77>
c001aa52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa56:	d1 e8                	shr    eax,1
c001aa58:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001aa5c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001aa60:	eb d3                	jmp    c001aa35 <Net::crc32Calc(unsigned char*, int)+0x54>
c001aa62:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001aa66:	eb a8                	jmp    c001aa10 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001aa68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa6c:	f7 d0                	not    eax
c001aa6e:	83 c4 10             	add    esp,0x10
c001aa71:	c3                   	ret    

c001aa72 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001aa72:	83 ec 1c             	sub    esp,0x1c
c001aa75:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa79:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001aa7d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001aa85:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c001aa8a:	7f 14                	jg     c001aaa0 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c001aa8c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa90:	8d 50 01             	lea    edx,[eax+0x1]
c001aa93:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aa97:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001aa9a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001aa9e:	eb e5                	jmp    c001aa85 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c001aaa0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aaa4:	8d 50 01             	lea    edx,[eax+0x1]
c001aaa7:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aaab:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001aaae:	83 ec 04             	sub    esp,0x4
c001aab1:	6a 06                	push   0x6
c001aab3:	8d 44 24 36          	lea    eax,[esp+0x36]
c001aab7:	50                   	push   eax
c001aab8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001aabc:	e8 83 5c fe ff       	call   c0000744 <memcpy>
c001aac1:	83 c4 10             	add    esp,0x10
c001aac4:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001aac9:	83 ec 04             	sub    esp,0x4
c001aacc:	6a 06                	push   0x6
c001aace:	8d 44 24 30          	lea    eax,[esp+0x30]
c001aad2:	50                   	push   eax
c001aad3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001aad7:	e8 68 5c fe ff       	call   c0000744 <memcpy>
c001aadc:	83 c4 10             	add    esp,0x10
c001aadf:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001aae4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aae8:	0f b7 c0             	movzx  eax,ax
c001aaeb:	c1 f8 08             	sar    eax,0x8
c001aaee:	89 c1                	mov    ecx,eax
c001aaf0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aaf4:	8d 50 01             	lea    edx,[eax+0x1]
c001aaf7:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aafb:	88 ca                	mov    dl,cl
c001aafd:	88 10                	mov    BYTE PTR [eax],dl
c001aaff:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ab03:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab07:	8d 48 01             	lea    ecx,[eax+0x1]
c001ab0a:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001ab0e:	88 10                	mov    BYTE PTR [eax],dl
c001ab10:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ab14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab18:	83 ec 04             	sub    esp,0x4
c001ab1b:	52                   	push   edx
c001ab1c:	50                   	push   eax
c001ab1d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001ab21:	e8 1e 5c fe ff       	call   c0000744 <memcpy>
c001ab26:	83 c4 10             	add    esp,0x10
c001ab29:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ab2d:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c001ab31:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab35:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c001ab39:	83 ec 08             	sub    esp,0x8
c001ab3c:	50                   	push   eax
c001ab3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ab41:	e8 9b fe ff ff       	call   c001a9e1 <Net::crc32Calc(unsigned char*, int)>
c001ab46:	83 c4 10             	add    esp,0x10
c001ab49:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ab4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab51:	c1 e8 18             	shr    eax,0x18
c001ab54:	89 c1                	mov    ecx,eax
c001ab56:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab5a:	8d 50 01             	lea    edx,[eax+0x1]
c001ab5d:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab61:	88 ca                	mov    dl,cl
c001ab63:	88 10                	mov    BYTE PTR [eax],dl
c001ab65:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab69:	c1 e8 10             	shr    eax,0x10
c001ab6c:	89 c1                	mov    ecx,eax
c001ab6e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab72:	8d 50 01             	lea    edx,[eax+0x1]
c001ab75:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab79:	88 ca                	mov    dl,cl
c001ab7b:	88 10                	mov    BYTE PTR [eax],dl
c001ab7d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab81:	c1 e8 08             	shr    eax,0x8
c001ab84:	89 c1                	mov    ecx,eax
c001ab86:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab8a:	8d 50 01             	lea    edx,[eax+0x1]
c001ab8d:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab91:	88 ca                	mov    dl,cl
c001ab93:	88 10                	mov    BYTE PTR [eax],dl
c001ab95:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab99:	8d 50 01             	lea    edx,[eax+0x1]
c001ab9c:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aba0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001aba4:	88 10                	mov    BYTE PTR [eax],dl
c001aba6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001abaa:	83 c4 1c             	add    esp,0x1c
c001abad:	c3                   	ret    

c001abae <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001abae:	83 ec 2c             	sub    esp,0x2c
c001abb1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001abb5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001abb9:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c001abbe:	83 ec 04             	sub    esp,0x4
c001abc1:	6a 06                	push   0x6
c001abc3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001abc7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001abcb:	83 c0 0e             	add    eax,0xe
c001abce:	50                   	push   eax
c001abcf:	e8 70 5b fe ff       	call   c0000744 <memcpy>
c001abd4:	83 c4 10             	add    esp,0x10
c001abd7:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001abdc:	83 ec 04             	sub    esp,0x4
c001abdf:	6a 06                	push   0x6
c001abe1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001abe5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001abe9:	83 c0 08             	add    eax,0x8
c001abec:	50                   	push   eax
c001abed:	e8 52 5b fe ff       	call   c0000744 <memcpy>
c001abf2:	83 c4 10             	add    esp,0x10
c001abf5:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001abfa:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001abfe:	8d 50 01             	lea    edx,[eax+0x1]
c001ac01:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac05:	8a 00                	mov    al,BYTE PTR [eax]
c001ac07:	0f b6 c0             	movzx  eax,al
c001ac0a:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001ac0f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac13:	8d 50 01             	lea    edx,[eax+0x1]
c001ac16:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac1a:	8a 00                	mov    al,BYTE PTR [eax]
c001ac1c:	0f b6 c0             	movzx  eax,al
c001ac1f:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c001ac24:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c001ac29:	c1 e0 08             	shl    eax,0x8
c001ac2c:	89 c2                	mov    edx,eax
c001ac2e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ac32:	09 d0                	or     eax,edx
c001ac34:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ac38:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001ac3c:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c001ac41:	75 3a                	jne    c001ac7d <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001ac43:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac47:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ac4a:	66 3d dc 05          	cmp    ax,0x5dc
c001ac4e:	77 10                	ja     c001ac60 <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c001ac50:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac54:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ac57:	0f b7 c0             	movzx  eax,ax
c001ac5a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001ac5e:	eb 1d                	jmp    c001ac7d <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001ac60:	83 ec 0c             	sub    esp,0xc
c001ac63:	68 a4 bc 02 c0       	push   0xc002bca4
c001ac68:	e8 dd 82 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001ac6d:	83 c4 10             	add    esp,0x10
c001ac70:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac74:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001ac78:	e9 c0 00 00 00       	jmp    c001ad3d <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c001ac7d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001ac81:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac85:	8b 00                	mov    eax,DWORD PTR [eax]
c001ac87:	83 ec 04             	sub    esp,0x4
c001ac8a:	52                   	push   edx
c001ac8b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ac8f:	50                   	push   eax
c001ac90:	e8 af 5a fe ff       	call   c0000744 <memcpy>
c001ac95:	83 c4 10             	add    esp,0x10
c001ac98:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ac9c:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001aca0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aca4:	8d 50 01             	lea    edx,[eax+0x1]
c001aca7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001acab:	8a 00                	mov    al,BYTE PTR [eax]
c001acad:	0f b6 c0             	movzx  eax,al
c001acb0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001acb4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001acb8:	8d 50 01             	lea    edx,[eax+0x1]
c001acbb:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001acbf:	8a 00                	mov    al,BYTE PTR [eax]
c001acc1:	0f b6 c0             	movzx  eax,al
c001acc4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001acc8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001accc:	8d 50 01             	lea    edx,[eax+0x1]
c001accf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001acd3:	8a 00                	mov    al,BYTE PTR [eax]
c001acd5:	0f b6 c0             	movzx  eax,al
c001acd8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001acdc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ace0:	8d 50 01             	lea    edx,[eax+0x1]
c001ace3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ace7:	8a 00                	mov    al,BYTE PTR [eax]
c001ace9:	0f b6 c0             	movzx  eax,al
c001acec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001acf0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001acf4:	c1 e0 18             	shl    eax,0x18
c001acf7:	89 c2                	mov    edx,eax
c001acf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acfd:	c1 e0 10             	shl    eax,0x10
c001ad00:	09 c2                	or     edx,eax
c001ad02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ad06:	c1 e0 08             	shl    eax,0x8
c001ad09:	09 d0                	or     eax,edx
c001ad0b:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c001ad0f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ad13:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad17:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c001ad1b:	83 e8 04             	sub    eax,0x4
c001ad1e:	83 ec 08             	sub    esp,0x8
c001ad21:	50                   	push   eax
c001ad22:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001ad26:	e8 b6 fc ff ff       	call   c001a9e1 <Net::crc32Calc(unsigned char*, int)>
c001ad2b:	83 c4 10             	add    esp,0x10
c001ad2e:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001ad32:	0f 94 c2             	sete   dl
c001ad35:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ad39:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001ad3c:	90                   	nop
c001ad3d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ad41:	83 c4 2c             	add    esp,0x2c
c001ad44:	c2 04 00             	ret    0x4

c001ad47 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001ad47:	55                   	push   ebp
c001ad48:	57                   	push   edi
c001ad49:	56                   	push   esi
c001ad4a:	53                   	push   ebx
c001ad4b:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ad51:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001ad58:	8a 1e                	mov    bl,BYTE PTR [esi]
c001ad5a:	8d 6e 01             	lea    ebp,[esi+0x1]
c001ad5d:	80 fb 40             	cmp    bl,0x40
c001ad60:	75 1b                	jne    c001ad7d <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001ad62:	8a 16                	mov    dl,BYTE PTR [esi]
c001ad64:	84 d2                	test   dl,dl
c001ad66:	0f 84 f1 00 00 00    	je     c001ae5d <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad6c:	8d 46 01             	lea    eax,[esi+0x1]
c001ad6f:	80 fa 3a             	cmp    dl,0x3a
c001ad72:	74 04                	je     c001ad78 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001ad74:	89 c6                	mov    esi,eax
c001ad76:	eb ea                	jmp    c001ad62 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001ad78:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001ad7b:	89 c6                	mov    esi,eax
c001ad7d:	50                   	push   eax
c001ad7e:	6a 40                	push   0x40
c001ad80:	6a 00                	push   0x0
c001ad82:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ad86:	50                   	push   eax
c001ad87:	e8 ec 59 fe ff       	call   c0000778 <memset>
c001ad8c:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001ad93:	31 c0                	xor    eax,eax
c001ad95:	83 c4 10             	add    esp,0x10
c001ad98:	8a 0f                	mov    cl,BYTE PTR [edi]
c001ad9a:	84 c9                	test   cl,cl
c001ad9c:	0f 84 bb 00 00 00    	je     c001ae5d <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ada2:	3d c7 00 00 00       	cmp    eax,0xc7
c001ada7:	0f 8f b0 00 00 00    	jg     c001ae5d <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001adad:	80 f9 0a             	cmp    cl,0xa
c001adb0:	0f 85 98 00 00 00    	jne    c001ae4e <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001adb6:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001adbb:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001adbf:	a8 df                	test   al,0xdf
c001adc1:	0f 94 c1             	sete   cl
c001adc4:	3c 23                	cmp    al,0x23
c001adc6:	0f 94 c2             	sete   dl
c001adc9:	08 d1                	or     cl,dl
c001adcb:	75 4a                	jne    c001ae17 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001adcd:	8d 50 f7             	lea    edx,[eax-0x9]
c001add0:	80 fa 01             	cmp    dl,0x1
c001add3:	76 42                	jbe    c001ae17 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001add5:	3c 5b                	cmp    al,0x5b
c001add7:	75 42                	jne    c001ae1b <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001add9:	80 fb 40             	cmp    bl,0x40
c001addc:	75 39                	jne    c001ae17 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001adde:	83 ec 0c             	sub    esp,0xc
c001ade1:	8d 54 24 65          	lea    edx,[esp+0x65]
c001ade5:	52                   	push   edx
c001ade6:	e8 a9 59 fe ff       	call   c0000794 <strlen>
c001adeb:	83 c4 10             	add    esp,0x10
c001adee:	83 f8 3f             	cmp    eax,0x3f
c001adf1:	77 6a                	ja     c001ae5d <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001adf3:	50                   	push   eax
c001adf4:	50                   	push   eax
c001adf5:	8d 54 24 61          	lea    edx,[esp+0x61]
c001adf9:	52                   	push   edx
c001adfa:	8d 54 24 24          	lea    edx,[esp+0x24]
c001adfe:	52                   	push   edx
c001adff:	e8 30 5a fe ff       	call   c0000834 <strcpy>
c001ae04:	58                   	pop    eax
c001ae05:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ae09:	52                   	push   edx
c001ae0a:	e8 85 59 fe ff       	call   c0000794 <strlen>
c001ae0f:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001ae14:	83 c4 10             	add    esp,0x10
c001ae17:	31 d2                	xor    edx,edx
c001ae19:	eb 3a                	jmp    c001ae55 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001ae1b:	80 fb 40             	cmp    bl,0x40
c001ae1e:	74 06                	je     c001ae26 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001ae20:	8d 44 24 58          	lea    eax,[esp+0x58]
c001ae24:	eb 20                	jmp    c001ae46 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001ae26:	50                   	push   eax
c001ae27:	50                   	push   eax
c001ae28:	55                   	push   ebp
c001ae29:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ae2d:	50                   	push   eax
c001ae2e:	e8 8d 5a fe ff       	call   c00008c0 <strcmp>
c001ae33:	83 c4 10             	add    esp,0x10
c001ae36:	85 c0                	test   eax,eax
c001ae38:	75 dd                	jne    c001ae17 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae3a:	eb e4                	jmp    c001ae20 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001ae3c:	8d 50 01             	lea    edx,[eax+0x1]
c001ae3f:	80 f9 3d             	cmp    cl,0x3d
c001ae42:	74 1d                	je     c001ae61 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001ae44:	89 d0                	mov    eax,edx
c001ae46:	8a 08                	mov    cl,BYTE PTR [eax]
c001ae48:	84 c9                	test   cl,cl
c001ae4a:	75 f0                	jne    c001ae3c <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001ae4c:	eb 0f                	jmp    c001ae5d <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ae4e:	8d 50 01             	lea    edx,[eax+0x1]
c001ae51:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001ae55:	47                   	inc    edi
c001ae56:	89 d0                	mov    eax,edx
c001ae58:	e9 3b ff ff ff       	jmp    c001ad98 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001ae5d:	31 c0                	xor    eax,eax
c001ae5f:	eb 33                	jmp    c001ae94 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001ae61:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ae65:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001ae68:	50                   	push   eax
c001ae69:	50                   	push   eax
c001ae6a:	8d 44 24 60          	lea    eax,[esp+0x60]
c001ae6e:	50                   	push   eax
c001ae6f:	56                   	push   esi
c001ae70:	e8 4b 5a fe ff       	call   c00008c0 <strcmp>
c001ae75:	83 c4 10             	add    esp,0x10
c001ae78:	85 c0                	test   eax,eax
c001ae7a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ae7e:	75 97                	jne    c001ae17 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae80:	51                   	push   ecx
c001ae81:	51                   	push   ecx
c001ae82:	52                   	push   edx
c001ae83:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001ae8a:	e8 a5 59 fe ff       	call   c0000834 <strcpy>
c001ae8f:	83 c4 10             	add    esp,0x10
c001ae92:	b0 01                	mov    al,0x1
c001ae94:	81 c4 2c 01 00 00    	add    esp,0x12c
c001ae9a:	5b                   	pop    ebx
c001ae9b:	5e                   	pop    esi
c001ae9c:	5f                   	pop    edi
c001ae9d:	5d                   	pop    ebp
c001ae9e:	c3                   	ret    

c001ae9f <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001ae9f:	57                   	push   edi
c001aea0:	56                   	push   esi
c001aea1:	53                   	push   ebx
c001aea2:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001aea8:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001aeaf:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001aeb6:	53                   	push   ebx
c001aeb7:	e8 d8 58 fe ff       	call   c0000794 <strlen>
c001aebc:	89 34 24             	mov    DWORD PTR [esp],esi
c001aebf:	89 c7                	mov    edi,eax
c001aec1:	e8 ce 58 fe ff       	call   c0000794 <strlen>
c001aec6:	83 c4 10             	add    esp,0x10
c001aec9:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001aecd:	3d ff 00 00 00       	cmp    eax,0xff
c001aed2:	0f 87 d3 00 00 00    	ja     c001afab <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001aed8:	57                   	push   edi
c001aed9:	57                   	push   edi
c001aeda:	56                   	push   esi
c001aedb:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001aedf:	56                   	push   esi
c001aee0:	e8 4f 59 fe ff       	call   c0000834 <strcpy>
c001aee5:	58                   	pop    eax
c001aee6:	5a                   	pop    edx
c001aee7:	68 ed c1 02 c0       	push   0xc002c1ed
c001aeec:	56                   	push   esi
c001aeed:	e8 82 5a fe ff       	call   c0000974 <strcat>
c001aef2:	59                   	pop    ecx
c001aef3:	5f                   	pop    edi
c001aef4:	53                   	push   ebx
c001aef5:	56                   	push   esi
c001aef6:	e8 79 5a fe ff       	call   c0000974 <strcat>
c001aefb:	58                   	pop    eax
c001aefc:	5a                   	pop    edx
c001aefd:	68 f0 bc 02 c0       	push   0xc002bcf0
c001af02:	56                   	push   esi
c001af03:	e8 6c 5a fe ff       	call   c0000974 <strcat>
c001af08:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001af0f:	e8 2c 49 ff ff       	call   c000f840 <malloc>
c001af14:	83 c4 0c             	add    esp,0xc
c001af17:	89 c3                	mov    ebx,eax
c001af19:	ff 35 74 19 03 c0    	push   DWORD PTR ds:0xc0031974
c001af1f:	56                   	push   esi
c001af20:	50                   	push   eax
c001af21:	e8 7c 85 ff ff       	call   c00134a2 <File::File(char const*, Process*)>
c001af26:	83 c4 10             	add    esp,0x10
c001af29:	85 db                	test   ebx,ebx
c001af2b:	74 7e                	je     c001afab <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001af2d:	51                   	push   ecx
c001af2e:	51                   	push   ecx
c001af2f:	6a 01                	push   0x1
c001af31:	53                   	push   ebx
c001af32:	e8 cf 85 ff ff       	call   c0013506 <File::open(FileOpenMode)>
c001af37:	83 c4 10             	add    esp,0x10
c001af3a:	85 c0                	test   eax,eax
c001af3c:	74 08                	je     c001af46 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001af3e:	83 ec 0c             	sub    esp,0xc
c001af41:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af43:	53                   	push   ebx
c001af44:	eb 5f                	jmp    c001afa5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001af46:	52                   	push   edx
c001af47:	8d 44 24 17          	lea    eax,[esp+0x17]
c001af4b:	50                   	push   eax
c001af4c:	8d 44 24 20          	lea    eax,[esp+0x20]
c001af50:	50                   	push   eax
c001af51:	53                   	push   ebx
c001af52:	e8 5b 88 ff ff       	call   c00137b2 <File::stat(unsigned long long*, bool*)>
c001af57:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001af5b:	83 c4 10             	add    esp,0x10
c001af5e:	89 c1                	mov    ecx,eax
c001af60:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001af64:	74 31                	je     c001af97 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001af66:	83 ec 0c             	sub    esp,0xc
c001af69:	50                   	push   eax
c001af6a:	e8 d1 48 ff ff       	call   c000f840 <malloc>
c001af6f:	89 c6                	mov    esi,eax
c001af71:	58                   	pop    eax
c001af72:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af74:	8d 54 24 20          	lea    edx,[esp+0x20]
c001af78:	52                   	push   edx
c001af79:	56                   	push   esi
c001af7a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af7e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af82:	53                   	push   ebx
c001af83:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001af86:	83 c4 20             	add    esp,0x20
c001af89:	85 c0                	test   eax,eax
c001af8b:	75 0a                	jne    c001af97 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001af8d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001af91:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001af95:	74 18                	je     c001afaf <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001af97:	83 ec 0c             	sub    esp,0xc
c001af9a:	53                   	push   ebx
c001af9b:	e8 c4 85 ff ff       	call   c0013564 <File::close()>
c001afa0:	8b 03                	mov    eax,DWORD PTR [ebx]
c001afa2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001afa5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001afa8:	83 c4 10             	add    esp,0x10
c001afab:	31 c0                	xor    eax,eax
c001afad:	eb 3b                	jmp    c001afea <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001afaf:	83 ec 0c             	sub    esp,0xc
c001afb2:	53                   	push   ebx
c001afb3:	e8 ac 85 ff ff       	call   c0013564 <File::close()>
c001afb8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001afba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001afbd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001afc0:	83 c4 0c             	add    esp,0xc
c001afc3:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001afca:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001afd1:	56                   	push   esi
c001afd2:	e8 70 fd ff ff       	call   c001ad47 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001afd7:	89 34 24             	mov    DWORD PTR [esp],esi
c001afda:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001afde:	e8 6d 48 ff ff       	call   c000f850 <free>
c001afe3:	83 c4 10             	add    esp,0x10
c001afe6:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001afea:	81 c4 20 01 00 00    	add    esp,0x120
c001aff0:	5b                   	pop    ebx
c001aff1:	5e                   	pop    esi
c001aff2:	5f                   	pop    edi
c001aff3:	c3                   	ret    

c001aff4 <Reg::getLine(char*, char*, char*)>:
c001aff4:	57                   	push   edi
c001aff5:	56                   	push   esi
c001aff6:	53                   	push   ebx
c001aff7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001affb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001afff:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b003:	57                   	push   edi
c001b004:	56                   	push   esi
c001b005:	53                   	push   ebx
c001b006:	68 f5 bc 02 c0       	push   0xc002bcf5
c001b00b:	e8 8f fe ff ff       	call   c001ae9f <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b010:	83 c4 10             	add    esp,0x10
c001b013:	84 c0                	test   al,al
c001b015:	75 10                	jne    c001b027 <Reg::getLine(char*, char*, char*)+0x33>
c001b017:	57                   	push   edi
c001b018:	56                   	push   esi
c001b019:	53                   	push   ebx
c001b01a:	68 1a bd 02 c0       	push   0xc002bd1a
c001b01f:	e8 7b fe ff ff       	call   c001ae9f <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b024:	83 c4 10             	add    esp,0x10
c001b027:	5b                   	pop    ebx
c001b028:	5e                   	pop    esi
c001b029:	5f                   	pop    edi
c001b02a:	c3                   	ret    

c001b02b <Reg::readInt(char*, char*, int*)>:
c001b02b:	55                   	push   ebp
c001b02c:	57                   	push   edi
c001b02d:	56                   	push   esi
c001b02e:	53                   	push   ebx
c001b02f:	81 ec f0 00 00 00    	sub    esp,0xf0
c001b035:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001b039:	57                   	push   edi
c001b03a:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b041:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b048:	e8 a7 ff ff ff       	call   c001aff4 <Reg::getLine(char*, char*, char*)>
c001b04d:	83 c4 10             	add    esp,0x10
c001b050:	84 c0                	test   al,al
c001b052:	0f 84 b3 00 00 00    	je     c001b10b <Reg::readInt(char*, char*, int*)+0xe0>
c001b058:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001b05c:	80 fa 2b             	cmp    dl,0x2b
c001b05f:	74 0c                	je     c001b06d <Reg::readInt(char*, char*, int*)+0x42>
c001b061:	80 fa 2d             	cmp    dl,0x2d
c001b064:	75 0e                	jne    c001b074 <Reg::readInt(char*, char*, int*)+0x49>
c001b066:	ba 01 00 00 00       	mov    edx,0x1
c001b06b:	eb 0b                	jmp    c001b078 <Reg::readInt(char*, char*, int*)+0x4d>
c001b06d:	ba 01 00 00 00       	mov    edx,0x1
c001b072:	eb 02                	jmp    c001b076 <Reg::readInt(char*, char*, int*)+0x4b>
c001b074:	31 d2                	xor    edx,edx
c001b076:	31 c0                	xor    eax,eax
c001b078:	be 0a 00 00 00       	mov    esi,0xa
c001b07d:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001b082:	75 20                	jne    c001b0a4 <Reg::readInt(char*, char*, int*)+0x79>
c001b084:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001b088:	80 f9 78             	cmp    cl,0x78
c001b08b:	75 0a                	jne    c001b097 <Reg::readInt(char*, char*, int*)+0x6c>
c001b08d:	83 c2 02             	add    edx,0x2
c001b090:	be 10 00 00 00       	mov    esi,0x10
c001b095:	eb 0d                	jmp    c001b0a4 <Reg::readInt(char*, char*, int*)+0x79>
c001b097:	80 f9 62             	cmp    cl,0x62
c001b09a:	75 08                	jne    c001b0a4 <Reg::readInt(char*, char*, int*)+0x79>
c001b09c:	83 c2 02             	add    edx,0x2
c001b09f:	be 02 00 00 00       	mov    esi,0x2
c001b0a4:	01 d7                	add    edi,edx
c001b0a6:	31 d2                	xor    edx,edx
c001b0a8:	8a 1f                	mov    bl,BYTE PTR [edi]
c001b0aa:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001b0ae:	80 fb 0d             	cmp    bl,0xd
c001b0b1:	0f 94 c3             	sete   bl
c001b0b4:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001b0b9:	0f 94 c1             	sete   cl
c001b0bc:	08 cb                	or     bl,cl
c001b0be:	75 3a                	jne    c001b0fa <Reg::readInt(char*, char*, int*)+0xcf>
c001b0c0:	0f af d6             	imul   edx,esi
c001b0c3:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001b0c8:	83 fe 10             	cmp    esi,0x10
c001b0cb:	75 26                	jne    c001b0f3 <Reg::readInt(char*, char*, int*)+0xc8>
c001b0cd:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b0d1:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001b0d4:	89 e9                	mov    ecx,ebp
c001b0d6:	80 f9 05             	cmp    cl,0x5
c001b0d9:	77 06                	ja     c001b0e1 <Reg::readInt(char*, char*, int*)+0xb6>
c001b0db:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001b0df:	eb 16                	jmp    c001b0f7 <Reg::readInt(char*, char*, int*)+0xcc>
c001b0e1:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b0e5:	83 e9 61             	sub    ecx,0x61
c001b0e8:	80 f9 05             	cmp    cl,0x5
c001b0eb:	77 06                	ja     c001b0f3 <Reg::readInt(char*, char*, int*)+0xc8>
c001b0ed:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001b0f1:	eb 04                	jmp    c001b0f7 <Reg::readInt(char*, char*, int*)+0xcc>
c001b0f3:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001b0f7:	47                   	inc    edi
c001b0f8:	eb ae                	jmp    c001b0a8 <Reg::readInt(char*, char*, int*)+0x7d>
c001b0fa:	84 c0                	test   al,al
c001b0fc:	74 02                	je     c001b100 <Reg::readInt(char*, char*, int*)+0xd5>
c001b0fe:	f7 da                	neg    edx
c001b100:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001b107:	89 10                	mov    DWORD PTR [eax],edx
c001b109:	88 d8                	mov    al,bl
c001b10b:	81 c4 ec 00 00 00    	add    esp,0xec
c001b111:	5b                   	pop    ebx
c001b112:	5e                   	pop    esi
c001b113:	5f                   	pop    edi
c001b114:	5d                   	pop    ebp
c001b115:	c3                   	ret    

c001b116 <Reg::readString(char*, char*, char*, int)>:
c001b116:	57                   	push   edi
c001b117:	56                   	push   esi
c001b118:	53                   	push   ebx
c001b119:	81 ec d4 00 00 00    	sub    esp,0xd4
c001b11f:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001b126:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001b12a:	57                   	push   edi
c001b12b:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b132:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b139:	e8 b6 fe ff ff       	call   c001aff4 <Reg::getLine(char*, char*, char*)>
c001b13e:	83 c4 10             	add    esp,0x10
c001b141:	89 c6                	mov    esi,eax
c001b143:	84 c0                	test   al,al
c001b145:	74 44                	je     c001b18b <Reg::readString(char*, char*, char*, int)+0x75>
c001b147:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001b14e:	31 c0                	xor    eax,eax
c001b150:	4a                   	dec    edx
c001b151:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001b154:	84 c9                	test   cl,cl
c001b156:	74 0f                	je     c001b167 <Reg::readString(char*, char*, char*, int)+0x51>
c001b158:	39 c2                	cmp    edx,eax
c001b15a:	7e 0b                	jle    c001b167 <Reg::readString(char*, char*, char*, int)+0x51>
c001b15c:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001b15f:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001b164:	40                   	inc    eax
c001b165:	eb ea                	jmp    c001b151 <Reg::readString(char*, char*, char*, int)+0x3b>
c001b167:	83 ec 0c             	sub    esp,0xc
c001b16a:	53                   	push   ebx
c001b16b:	e8 24 56 fe ff       	call   c0000794 <strlen>
c001b170:	83 c4 10             	add    esp,0x10
c001b173:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001b178:	75 11                	jne    c001b18b <Reg::readString(char*, char*, char*, int)+0x75>
c001b17a:	83 ec 0c             	sub    esp,0xc
c001b17d:	53                   	push   ebx
c001b17e:	e8 11 56 fe ff       	call   c0000794 <strlen>
c001b183:	83 c4 10             	add    esp,0x10
c001b186:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b18b:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b191:	89 f0                	mov    eax,esi
c001b193:	5b                   	pop    ebx
c001b194:	5e                   	pop    esi
c001b195:	5f                   	pop    edi
c001b196:	c3                   	ret    

c001b197 <Reg::readBool(char*, char*, bool*)>:
c001b197:	83 ec 20             	sub    esp,0x20
c001b19a:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b19e:	50                   	push   eax
c001b19f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1a7:	e8 7f fe ff ff       	call   c001b02b <Reg::readInt(char*, char*, int*)>
c001b1ac:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b1b1:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b1b5:	0f 95 02             	setne  BYTE PTR [edx]
c001b1b8:	83 c4 2c             	add    esp,0x2c
c001b1bb:	c3                   	ret    

c001b1bc <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b1bc:	53                   	push   ebx
c001b1bd:	83 ec 1c             	sub    esp,0x1c
c001b1c0:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b1c4:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b1c8:	50                   	push   eax
c001b1c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1cd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1d1:	e8 c1 ff ff ff       	call   c001b197 <Reg::readBool(char*, char*, bool*)>
c001b1d6:	83 c4 10             	add    esp,0x10
c001b1d9:	84 c0                	test   al,al
c001b1db:	74 04                	je     c001b1e1 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b1dd:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b1e1:	88 d8                	mov    al,bl
c001b1e3:	83 c4 18             	add    esp,0x18
c001b1e6:	5b                   	pop    ebx
c001b1e7:	c3                   	ret    

c001b1e8 <Reg::readIntWithDefault(char*, char*, int)>:
c001b1e8:	53                   	push   ebx
c001b1e9:	83 ec 1c             	sub    esp,0x1c
c001b1ec:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b1f0:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b1f4:	50                   	push   eax
c001b1f5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1f9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1fd:	e8 29 fe ff ff       	call   c001b02b <Reg::readInt(char*, char*, int*)>
c001b202:	83 c4 10             	add    esp,0x10
c001b205:	84 c0                	test   al,al
c001b207:	74 04                	je     c001b20d <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b209:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b20d:	89 d8                	mov    eax,ebx
c001b20f:	83 c4 18             	add    esp,0x18
c001b212:	5b                   	pop    ebx
c001b213:	c3                   	ret    

c001b214 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b214:	57                   	push   edi
c001b215:	56                   	push   esi
c001b216:	53                   	push   ebx
c001b217:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b21b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b21f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b223:	56                   	push   esi
c001b224:	53                   	push   ebx
c001b225:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b229:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b22d:	e8 e4 fe ff ff       	call   c001b116 <Reg::readString(char*, char*, char*, int)>
c001b232:	83 c4 10             	add    esp,0x10
c001b235:	84 c0                	test   al,al
c001b237:	75 1b                	jne    c001b254 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001b239:	50                   	push   eax
c001b23a:	56                   	push   esi
c001b23b:	4e                   	dec    esi
c001b23c:	6a 00                	push   0x0
c001b23e:	53                   	push   ebx
c001b23f:	e8 34 55 fe ff       	call   c0000778 <memset>
c001b244:	83 c4 0c             	add    esp,0xc
c001b247:	56                   	push   esi
c001b248:	57                   	push   edi
c001b249:	53                   	push   ebx
c001b24a:	89 fb                	mov    ebx,edi
c001b24c:	e8 f3 54 fe ff       	call   c0000744 <memcpy>
c001b251:	83 c4 10             	add    esp,0x10
c001b254:	89 d8                	mov    eax,ebx
c001b256:	5b                   	pop    ebx
c001b257:	5e                   	pop    esi
c001b258:	5f                   	pop    edi
c001b259:	c3                   	ret    

c001b25a <Sys::eject(regs*)>:
c001b25a:	83 ec 0c             	sub    esp,0xc
c001b25d:	83 ca ff             	or     edx,0xffffffff
c001b260:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b264:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b267:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b26c:	83 e9 41             	sub    ecx,0x41
c001b26f:	83 f9 19             	cmp    ecx,0x19
c001b272:	77 18                	ja     c001b28c <Sys::eject(regs*)+0x32>
c001b274:	8b 0c 8d 20 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd15e0]
c001b27b:	85 c9                	test   ecx,ecx
c001b27d:	74 0d                	je     c001b28c <Sys::eject(regs*)+0x32>
c001b27f:	83 ec 0c             	sub    esp,0xc
c001b282:	51                   	push   ecx
c001b283:	e8 78 b4 ff ff       	call   c0016700 <LogicalDisk::eject()>
c001b288:	83 c4 10             	add    esp,0x10
c001b28b:	99                   	cdq    
c001b28c:	83 c4 0c             	add    esp,0xc
c001b28f:	c3                   	ret    

c001b290 <Sys::exit(regs*)>:
c001b290:	83 ec 18             	sub    esp,0x18
c001b293:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b297:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b29a:	e8 7a 35 00 00       	call   c001e819 <terminateTask(int)>
c001b29f:	83 c8 ff             	or     eax,0xffffffff
c001b2a2:	83 c4 1c             	add    esp,0x1c
c001b2a5:	89 c2                	mov    edx,eax
c001b2a7:	c3                   	ret    

c001b2a8 <Sys::getCwd(regs*)>:
c001b2a8:	83 ec 10             	sub    esp,0x10
c001b2ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b2af:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b2b2:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b2b5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b2ba:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b2bd:	e8 e2 7f ff ff       	call   c00132a4 <Fs::getcwd(Process*, char*, int)>
c001b2c2:	83 c4 1c             	add    esp,0x1c
c001b2c5:	99                   	cdq    
c001b2c6:	c3                   	ret    

c001b2c7 <Sys::getPID(regs*)>:
c001b2c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b2cc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b2cf:	8b 00                	mov    eax,DWORD PTR [eax]
c001b2d1:	99                   	cdq    
c001b2d2:	c3                   	ret    

c001b2d3 <Sys::getRAMData(regs*)>:
c001b2d3:	8b 0d 54 e4 02 c0    	mov    ecx,DWORD PTR ds:0xc002e454
c001b2d9:	6b 05 50 e4 02 c0 64 	imul   eax,DWORD PTR ds:0xc002e450,0x64
c001b2e0:	99                   	cdq    
c001b2e1:	f7 f9                	idiv   ecx
c001b2e3:	c1 e0 18             	shl    eax,0x18
c001b2e6:	09 c8                	or     eax,ecx
c001b2e8:	99                   	cdq    
c001b2e9:	c3                   	ret    

c001b2ea <Sys::loadDLL(regs*)>:
c001b2ea:	56                   	push   esi
c001b2eb:	53                   	push   ebx
c001b2ec:	31 d2                	xor    edx,edx
c001b2ee:	51                   	push   ecx
c001b2ef:	b8 01 00 00 00       	mov    eax,0x1
c001b2f4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b2f8:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b2fc:	0f 84 8c 00 00 00    	je     c001b38e <Sys::loadDLL(regs*)+0xa4>
c001b302:	83 ec 0c             	sub    esp,0xc
c001b305:	68 14 01 00 00       	push   0x114
c001b30a:	e8 31 45 ff ff       	call   c000f840 <malloc>
c001b30f:	83 c4 0c             	add    esp,0xc
c001b312:	89 c3                	mov    ebx,eax
c001b314:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b319:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b31c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b31f:	53                   	push   ebx
c001b320:	e8 7d 81 ff ff       	call   c00134a2 <File::File(char const*, Process*)>
c001b325:	83 c4 10             	add    esp,0x10
c001b328:	31 d2                	xor    edx,edx
c001b32a:	b8 02 00 00 00       	mov    eax,0x2
c001b32f:	85 db                	test   ebx,ebx
c001b331:	74 5b                	je     c001b38e <Sys::loadDLL(regs*)+0xa4>
c001b333:	83 ec 0c             	sub    esp,0xc
c001b336:	53                   	push   ebx
c001b337:	e8 38 84 ff ff       	call   c0013774 <File::exists()>
c001b33c:	83 c4 10             	add    esp,0x10
c001b33f:	84 c0                	test   al,al
c001b341:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b343:	75 11                	jne    c001b356 <Sys::loadDLL(regs*)+0x6c>
c001b345:	83 ec 0c             	sub    esp,0xc
c001b348:	53                   	push   ebx
c001b349:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b34c:	83 c4 10             	add    esp,0x10
c001b34f:	b8 03 00 00 00       	mov    eax,0x3
c001b354:	eb 36                	jmp    c001b38c <Sys::loadDLL(regs*)+0xa2>
c001b356:	83 ec 0c             	sub    esp,0xc
c001b359:	53                   	push   ebx
c001b35a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b35d:	58                   	pop    eax
c001b35e:	5a                   	pop    edx
c001b35f:	6a 00                	push   0x0
c001b361:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b364:	e8 c5 23 00 00       	call   c001d72e <Thr::loadDLL(char const*, bool)>
c001b369:	83 c4 10             	add    esp,0x10
c001b36c:	89 c1                	mov    ecx,eax
c001b36e:	31 d2                	xor    edx,edx
c001b370:	b8 04 00 00 00       	mov    eax,0x4
c001b375:	85 c9                	test   ecx,ecx
c001b377:	74 15                	je     c001b38e <Sys::loadDLL(regs*)+0xa4>
c001b379:	53                   	push   ebx
c001b37a:	53                   	push   ebx
c001b37b:	ff 35 08 e4 02 c0    	push   DWORD PTR ds:0xc002e408
c001b381:	51                   	push   ecx
c001b382:	e8 db 25 00 00       	call   c001d962 <Thr::executeDLL(unsigned long, void*)>
c001b387:	83 c4 10             	add    esp,0x10
c001b38a:	31 c0                	xor    eax,eax
c001b38c:	31 d2                	xor    edx,edx
c001b38e:	59                   	pop    ecx
c001b38f:	5b                   	pop    ebx
c001b390:	5e                   	pop    esi
c001b391:	c3                   	ret    

c001b392 <Sys::read(regs*)>:
c001b392:	57                   	push   edi
c001b393:	56                   	push   esi
c001b394:	53                   	push   ebx
c001b395:	83 ec 10             	sub    esp,0x10
c001b398:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b39c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b39f:	83 f8 02             	cmp    eax,0x2
c001b3a2:	77 10                	ja     c001b3b4 <Sys::read(regs*)+0x22>
c001b3a4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b3a9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b3ac:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b3b2:	eb 0e                	jmp    c001b3c2 <Sys::read(regs*)+0x30>
c001b3b4:	83 ec 0c             	sub    esp,0xc
c001b3b7:	50                   	push   eax
c001b3b8:	e8 8c 66 ff ff       	call   c0011a49 <getFromFileDescriptor(int)>
c001b3bd:	83 c4 10             	add    esp,0x10
c001b3c0:	89 c1                	mov    ecx,eax
c001b3c2:	83 c8 ff             	or     eax,0xffffffff
c001b3c5:	85 c9                	test   ecx,ecx
c001b3c7:	89 c2                	mov    edx,eax
c001b3c9:	74 28                	je     c001b3f3 <Sys::read(regs*)+0x61>
c001b3cb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b3d3:	31 ff                	xor    edi,edi
c001b3d5:	83 ec 0c             	sub    esp,0xc
c001b3d8:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b3da:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b3de:	52                   	push   edx
c001b3df:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b3e2:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b3e5:	57                   	push   edi
c001b3e6:	56                   	push   esi
c001b3e7:	51                   	push   ecx
c001b3e8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b3eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b3ef:	83 c4 20             	add    esp,0x20
c001b3f2:	99                   	cdq    
c001b3f3:	83 c4 10             	add    esp,0x10
c001b3f6:	5b                   	pop    ebx
c001b3f7:	5e                   	pop    esi
c001b3f8:	5f                   	pop    edi
c001b3f9:	c3                   	ret    

c001b3fa <Sys::sbrk(regs*)>:
c001b3fa:	56                   	push   esi
c001b3fb:	53                   	push   ebx
c001b3fc:	50                   	push   eax
c001b3fd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b402:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b406:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b409:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001b40c:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001b412:	85 db                	test   ebx,ebx
c001b414:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001b417:	74 02                	je     c001b41b <Sys::sbrk(regs*)+0x21>
c001b419:	79 06                	jns    c001b421 <Sys::sbrk(regs*)+0x27>
c001b41b:	89 f0                	mov    eax,esi
c001b41d:	31 d2                	xor    edx,edx
c001b41f:	eb 2a                	jmp    c001b44b <Sys::sbrk(regs*)+0x51>
c001b421:	83 c8 ff             	or     eax,0xffffffff
c001b424:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001b42a:	89 c2                	mov    edx,eax
c001b42c:	77 1d                	ja     c001b44b <Sys::sbrk(regs*)+0x51>
c001b42e:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001b434:	50                   	push   eax
c001b435:	c1 ea 0c             	shr    edx,0xc
c001b438:	68 07 04 00 00       	push   0x407
c001b43d:	52                   	push   edx
c001b43e:	51                   	push   ecx
c001b43f:	e8 32 70 ff ff       	call   c0012476 <VAS::allocatePages(int, int)>
c001b444:	89 f0                	mov    eax,esi
c001b446:	31 d2                	xor    edx,edx
c001b448:	83 c4 10             	add    esp,0x10
c001b44b:	59                   	pop    ecx
c001b44c:	5b                   	pop    ebx
c001b44d:	5e                   	pop    esi
c001b44e:	c3                   	ret    

c001b44f <Sys::setCwd(regs*)>:
c001b44f:	83 ec 14             	sub    esp,0x14
c001b452:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b456:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b459:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b45e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b461:	e8 ad 83 ff ff       	call   c0013813 <Fs::setcwd(Process*, char*)>
c001b466:	83 c4 1c             	add    esp,0x1c
c001b469:	99                   	cdq    
c001b46a:	c3                   	ret    

c001b46b <Sys::setTime(regs*)>:
c001b46b:	55                   	push   ebp
c001b46c:	31 d2                	xor    edx,edx
c001b46e:	57                   	push   edi
c001b46f:	bf 18 00 00 00       	mov    edi,0x18
c001b474:	56                   	push   esi
c001b475:	53                   	push   ebx
c001b476:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b47b:	83 ec 30             	sub    esp,0x30
c001b47e:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b482:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b485:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b488:	f7 f3                	div    ebx
c001b48a:	89 d6                	mov    esi,edx
c001b48c:	31 d2                	xor    edx,edx
c001b48e:	f7 f3                	div    ebx
c001b490:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b493:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b497:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b49c:	31 d2                	xor    edx,edx
c001b49e:	f7 f3                	div    ebx
c001b4a0:	31 d2                	xor    edx,edx
c001b4a2:	bb 0c 00 00 00       	mov    ebx,0xc
c001b4a7:	f7 f7                	div    edi
c001b4a9:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b4ac:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b4b0:	0f b7 cd             	movzx  ecx,bp
c001b4b3:	56                   	push   esi
c001b4b4:	89 c7                	mov    edi,eax
c001b4b6:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b4ba:	c1 e6 10             	shl    esi,0x10
c001b4bd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b4c1:	83 e7 1f             	and    edi,0x1f
c001b4c4:	51                   	push   ecx
c001b4c5:	47                   	inc    edi
c001b4c6:	c1 e8 05             	shr    eax,0x5
c001b4c9:	31 d2                	xor    edx,edx
c001b4cb:	f7 f3                	div    ebx
c001b4cd:	31 db                	xor    ebx,ebx
c001b4cf:	52                   	push   edx
c001b4d0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001b4d4:	57                   	push   edi
c001b4d5:	68 35 bd 02 c0       	push   0xc002bd35
c001b4da:	e8 6b 7a ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001b4df:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b4e3:	89 f8                	mov    eax,edi
c001b4e5:	31 c9                	xor    ecx,ecx
c001b4e7:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b4eb:	88 c1                	mov    cl,al
c001b4ed:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001b4f3:	88 d5                	mov    ch,dl
c001b4f5:	c1 e0 10             	shl    eax,0x10
c001b4f8:	0f b7 d1             	movzx  edx,cx
c001b4fb:	09 c2                	or     edx,eax
c001b4fd:	89 d8                	mov    eax,ebx
c001b4ff:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001b504:	09 f0                	or     eax,esi
c001b506:	89 c3                	mov    ebx,eax
c001b508:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001b50c:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b510:	83 c4 18             	add    esp,0x18
c001b513:	53                   	push   ebx
c001b514:	52                   	push   edx
c001b515:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b519:	8d 74 24 28          	lea    esi,[esp+0x28]
c001b51d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b521:	e8 07 8a ff ff       	call   c0013f2d <datetimeToSeconds(datetime_t)>
c001b526:	83 c4 0c             	add    esp,0xc
c001b529:	52                   	push   edx
c001b52a:	50                   	push   eax
c001b52b:	56                   	push   esi
c001b52c:	e8 83 8b ff ff       	call   c00140b4 <secondsToDatetime(unsigned long long)>
c001b531:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b535:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b539:	51                   	push   ecx
c001b53a:	89 d6                	mov    esi,edx
c001b53c:	51                   	push   ecx
c001b53d:	c1 ee 10             	shr    esi,0x10
c001b540:	89 f3                	mov    ebx,esi
c001b542:	0f b6 f3             	movzx  esi,bl
c001b545:	56                   	push   esi
c001b546:	0f b6 f6             	movzx  esi,dh
c001b549:	0f b6 d2             	movzx  edx,dl
c001b54c:	56                   	push   esi
c001b54d:	52                   	push   edx
c001b54e:	89 c2                	mov    edx,eax
c001b550:	c1 ea 10             	shr    edx,0x10
c001b553:	52                   	push   edx
c001b554:	0f b6 d4             	movzx  edx,ah
c001b557:	0f b6 c0             	movzx  eax,al
c001b55a:	52                   	push   edx
c001b55b:	50                   	push   eax
c001b55c:	68 51 bd 02 c0       	push   0xc002bd51
c001b561:	e8 e4 79 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001b566:	83 c4 2c             	add    esp,0x2c
c001b569:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c001b56e:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b572:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b576:	53                   	push   ebx
c001b577:	51                   	push   ecx
c001b578:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b57e:	e8 d1 8a ff ff       	call   c0014054 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b583:	83 f0 01             	xor    eax,0x1
c001b586:	31 d2                	xor    edx,edx
c001b588:	0f b6 c0             	movzx  eax,al
c001b58b:	83 c4 3c             	add    esp,0x3c
c001b58e:	5b                   	pop    ebx
c001b58f:	5e                   	pop    esi
c001b590:	5f                   	pop    edi
c001b591:	5d                   	pop    ebp
c001b592:	c3                   	ret    

c001b593 <Sys::timezone(regs*)>:
c001b593:	53                   	push   ebx
c001b594:	83 ec 08             	sub    esp,0x8
c001b597:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b59b:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b59f:	75 17                	jne    c001b5b8 <Sys::timezone(regs*)+0x25>
c001b5a1:	83 ec 0c             	sub    esp,0xc
c001b5a4:	68 6d bd 02 c0       	push   0xc002bd6d
c001b5a9:	e8 9c 79 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001b5ae:	83 c8 ff             	or     eax,0xffffffff
c001b5b1:	83 c4 10             	add    esp,0x10
c001b5b4:	89 c2                	mov    edx,eax
c001b5b6:	eb 20                	jmp    c001b5d8 <Sys::timezone(regs*)+0x45>
c001b5b8:	83 ec 0c             	sub    esp,0xc
c001b5bb:	68 a5 bd 02 c0       	push   0xc002bda5
c001b5c0:	e8 85 79 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001b5c5:	58                   	pop    eax
c001b5c6:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b5c9:	e8 e8 87 ff ff       	call   c0013db6 <User::loadClockSettings(int)>
c001b5ce:	83 c4 10             	add    esp,0x10
c001b5d1:	b8 01 00 00 00       	mov    eax,0x1
c001b5d6:	31 d2                	xor    edx,edx
c001b5d8:	83 c4 08             	add    esp,0x8
c001b5db:	5b                   	pop    ebx
c001b5dc:	c3                   	ret    

c001b5dd <Sys::write(regs*)>:
c001b5dd:	57                   	push   edi
c001b5de:	56                   	push   esi
c001b5df:	53                   	push   ebx
c001b5e0:	83 ec 10             	sub    esp,0x10
c001b5e3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b5e7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b5ea:	83 f8 02             	cmp    eax,0x2
c001b5ed:	77 10                	ja     c001b5ff <Sys::write(regs*)+0x22>
c001b5ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b5f4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b5f7:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b5fd:	eb 0e                	jmp    c001b60d <Sys::write(regs*)+0x30>
c001b5ff:	83 ec 0c             	sub    esp,0xc
c001b602:	50                   	push   eax
c001b603:	e8 41 64 ff ff       	call   c0011a49 <getFromFileDescriptor(int)>
c001b608:	83 c4 10             	add    esp,0x10
c001b60b:	89 c1                	mov    ecx,eax
c001b60d:	83 c8 ff             	or     eax,0xffffffff
c001b610:	85 c9                	test   ecx,ecx
c001b612:	89 c2                	mov    edx,eax
c001b614:	74 28                	je     c001b63e <Sys::write(regs*)+0x61>
c001b616:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b61e:	31 ff                	xor    edi,edi
c001b620:	83 ec 0c             	sub    esp,0xc
c001b623:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b625:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b629:	52                   	push   edx
c001b62a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b62d:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b630:	57                   	push   edi
c001b631:	56                   	push   esi
c001b632:	51                   	push   ecx
c001b633:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b636:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b63a:	83 c4 20             	add    esp,0x20
c001b63d:	99                   	cdq    
c001b63e:	83 c4 10             	add    esp,0x10
c001b641:	5b                   	pop    ebx
c001b642:	5e                   	pop    esi
c001b643:	5f                   	pop    edi
c001b644:	c3                   	ret    

c001b645 <Sys::wsbe(regs*)>:
c001b645:	57                   	push   edi
c001b646:	b9 0b 00 00 00       	mov    ecx,0xb
c001b64b:	56                   	push   esi
c001b64c:	be e4 bd 02 c0       	mov    esi,0xc002bde4
c001b651:	53                   	push   ebx
c001b652:	83 ec 30             	sub    esp,0x30
c001b655:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b659:	fc                   	cld    
c001b65a:	83 ec 0c             	sub    esp,0xc
c001b65d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b65f:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b663:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b668:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b66b:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b671:	8b 06                	mov    eax,DWORD PTR [esi]
c001b673:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b676:	57                   	push   edi
c001b677:	e8 18 51 fe ff       	call   c0000794 <strlen>
c001b67c:	5a                   	pop    edx
c001b67d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b681:	52                   	push   edx
c001b682:	31 d2                	xor    edx,edx
c001b684:	57                   	push   edi
c001b685:	52                   	push   edx
c001b686:	50                   	push   eax
c001b687:	56                   	push   esi
c001b688:	ff d3                	call   ebx
c001b68a:	83 c4 14             	add    esp,0x14
c001b68d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b691:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b694:	e8 80 31 00 00       	call   c001e819 <terminateTask(int)>
c001b699:	83 c4 40             	add    esp,0x40
c001b69c:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b6a1:	5b                   	pop    ebx
c001b6a2:	31 d2                	xor    edx,edx
c001b6a4:	5e                   	pop    esi
c001b6a5:	5f                   	pop    edi
c001b6a6:	c3                   	ret    

c001b6a7 <Sys::yield(regs*)>:
c001b6a7:	57                   	push   edi
c001b6a8:	56                   	push   esi
c001b6a9:	53                   	push   ebx
c001b6aa:	e8 27 27 00 00       	call   c001ddd6 <lockScheduler()>
c001b6af:	e8 5e 2a 00 00       	call   c001e112 <schedule()>
c001b6b4:	e8 1f 27 00 00       	call   c001ddd8 <unlockScheduler()>
c001b6b9:	8b 35 90 ea 02 c0    	mov    esi,DWORD PTR ds:0xc002ea90
c001b6bf:	8b 3d 94 ea 02 c0    	mov    edi,DWORD PTR ds:0xc002ea94
c001b6c5:	89 f0                	mov    eax,esi
c001b6c7:	89 fb                	mov    ebx,edi
c001b6c9:	89 f1                	mov    ecx,esi
c001b6cb:	c1 e0 07             	shl    eax,0x7
c001b6ce:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b6d2:	25 80 30 0f 00       	and    eax,0xf3080
c001b6d7:	c1 eb 17             	shr    ebx,0x17
c001b6da:	31 c8                	xor    eax,ecx
c001b6dc:	89 da                	mov    edx,ebx
c001b6de:	5b                   	pop    ebx
c001b6df:	5e                   	pop    esi
c001b6e0:	5f                   	pop    edi
c001b6e1:	c3                   	ret    

c001b6e2 <sysCallSeekDir(regs*)>:
c001b6e2:	31 c0                	xor    eax,eax
c001b6e4:	31 d2                	xor    edx,edx
c001b6e6:	c3                   	ret    

c001b6e7 <sysCallTellDir(regs*)>:
c001b6e7:	31 c0                	xor    eax,eax
c001b6e9:	31 d2                	xor    edx,edx
c001b6eb:	c3                   	ret    

c001b6ec <sysCallVerify(regs*)>:
c001b6ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b6f0:	31 d2                	xor    edx,edx
c001b6f2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b6f5:	c3                   	ret    

c001b6f6 <sysFormatDisk(regs*)>:
c001b6f6:	56                   	push   esi
c001b6f7:	53                   	push   ebx
c001b6f8:	53                   	push   ebx
c001b6f9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b6fd:	8b 1d 90 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e590
c001b703:	eb 25                	jmp    c001b72a <sysFormatDisk(regs*)+0x34>
c001b705:	83 ec 0c             	sub    esp,0xc
c001b708:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b70b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b70d:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b710:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b713:	50                   	push   eax
c001b714:	ff 34 85 20 ea 02 c0 	push   DWORD PTR [eax*4-0x3ffd15e0]
c001b71b:	53                   	push   ebx
c001b71c:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b71f:	83 c4 20             	add    esp,0x20
c001b722:	83 f8 08             	cmp    eax,0x8
c001b725:	75 12                	jne    c001b739 <sysFormatDisk(regs*)+0x43>
c001b727:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b72a:	85 db                	test   ebx,ebx
c001b72c:	75 d7                	jne    c001b705 <sysFormatDisk(regs*)+0xf>
c001b72e:	59                   	pop    ecx
c001b72f:	b8 03 00 00 00       	mov    eax,0x3
c001b734:	31 d2                	xor    edx,edx
c001b736:	5b                   	pop    ebx
c001b737:	5e                   	pop    esi
c001b738:	c3                   	ret    
c001b739:	85 c0                	test   eax,eax
c001b73b:	74 1b                	je     c001b758 <sysFormatDisk(regs*)+0x62>
c001b73d:	83 f8 09             	cmp    eax,0x9
c001b740:	74 0b                	je     c001b74d <sysFormatDisk(regs*)+0x57>
c001b742:	59                   	pop    ecx
c001b743:	b8 02 00 00 00       	mov    eax,0x2
c001b748:	31 d2                	xor    edx,edx
c001b74a:	5b                   	pop    ebx
c001b74b:	5e                   	pop    esi
c001b74c:	c3                   	ret    
c001b74d:	59                   	pop    ecx
c001b74e:	b8 01 00 00 00       	mov    eax,0x1
c001b753:	31 d2                	xor    edx,edx
c001b755:	5b                   	pop    ebx
c001b756:	5e                   	pop    esi
c001b757:	c3                   	ret    
c001b758:	59                   	pop    ecx
c001b759:	31 c0                	xor    eax,eax
c001b75b:	31 d2                	xor    edx,edx
c001b75d:	5b                   	pop    ebx
c001b75e:	5e                   	pop    esi
c001b75f:	c3                   	ret    

c001b760 <sysSetDiskVolumeLabel(regs*)>:
c001b760:	56                   	push   esi
c001b761:	53                   	push   ebx
c001b762:	53                   	push   ebx
c001b763:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b767:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b76a:	83 f8 19             	cmp    eax,0x19
c001b76d:	77 29                	ja     c001b798 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b76f:	8b 0c 85 20 ea 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd15e0]
c001b776:	85 c9                	test   ecx,ecx
c001b778:	74 1e                	je     c001b798 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b77a:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b77d:	85 d2                	test   edx,edx
c001b77f:	74 17                	je     c001b798 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b781:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b787:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b789:	52                   	push   edx
c001b78a:	50                   	push   eax
c001b78b:	51                   	push   ecx
c001b78c:	53                   	push   ebx
c001b78d:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b790:	83 c4 10             	add    esp,0x10
c001b793:	99                   	cdq    
c001b794:	59                   	pop    ecx
c001b795:	5b                   	pop    ebx
c001b796:	5e                   	pop    esi
c001b797:	c3                   	ret    
c001b798:	59                   	pop    ecx
c001b799:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b79e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b7a3:	5b                   	pop    ebx
c001b7a4:	5e                   	pop    esi
c001b7a5:	c3                   	ret    

c001b7a6 <sysGetDiskVolumeLabel(regs*)>:
c001b7a6:	57                   	push   edi
c001b7a7:	56                   	push   esi
c001b7a8:	53                   	push   ebx
c001b7a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7ad:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b7b0:	83 fa 19             	cmp    edx,0x19
c001b7b3:	77 34                	ja     c001b7e9 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b7b5:	8b 0c 95 20 ea 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd15e0]
c001b7bc:	85 c9                	test   ecx,ecx
c001b7be:	74 29                	je     c001b7e9 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b7c0:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b7c3:	85 db                	test   ebx,ebx
c001b7c5:	74 22                	je     c001b7e9 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b7c7:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b7ca:	85 c0                	test   eax,eax
c001b7cc:	74 1b                	je     c001b7e9 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b7ce:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b7d4:	83 ec 0c             	sub    esp,0xc
c001b7d7:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b7d9:	50                   	push   eax
c001b7da:	53                   	push   ebx
c001b7db:	52                   	push   edx
c001b7dc:	51                   	push   ecx
c001b7dd:	56                   	push   esi
c001b7de:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b7e1:	83 c4 20             	add    esp,0x20
c001b7e4:	99                   	cdq    
c001b7e5:	5b                   	pop    ebx
c001b7e6:	5e                   	pop    esi
c001b7e7:	5f                   	pop    edi
c001b7e8:	c3                   	ret    
c001b7e9:	5b                   	pop    ebx
c001b7ea:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b7ef:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b7f4:	5e                   	pop    esi
c001b7f5:	5f                   	pop    edi
c001b7f6:	c3                   	ret    

c001b7f7 <sysShutdown(regs*)>:
c001b7f7:	83 ec 0c             	sub    esp,0xc
c001b7fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7fe:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b801:	85 c0                	test   eax,eax
c001b803:	74 18                	je     c001b81d <sysShutdown(regs*)+0x26>
c001b805:	83 f8 01             	cmp    eax,0x1
c001b808:	74 38                	je     c001b842 <sysShutdown(regs*)+0x4b>
c001b80a:	83 f8 02             	cmp    eax,0x2
c001b80d:	74 24                	je     c001b833 <sysShutdown(regs*)+0x3c>
c001b80f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b814:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b819:	83 c4 0c             	add    esp,0xc
c001b81c:	c3                   	ret    
c001b81d:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c001b822:	8b 10                	mov    edx,DWORD PTR [eax]
c001b824:	6a 00                	push   0x0
c001b826:	6a 00                	push   0x0
c001b828:	6a 00                	push   0x0
c001b82a:	50                   	push   eax
c001b82b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b82e:	83 c4 10             	add    esp,0x10
c001b831:	eb dc                	jmp    c001b80f <sysShutdown(regs*)+0x18>
c001b833:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c001b838:	8b 10                	mov    edx,DWORD PTR [eax]
c001b83a:	6a 00                	push   0x0
c001b83c:	6a 00                	push   0x0
c001b83e:	6a 01                	push   0x1
c001b840:	eb e8                	jmp    c001b82a <sysShutdown(regs*)+0x33>
c001b842:	a1 c0 0a 03 c0       	mov    eax,ds:0xc0030ac0
c001b847:	85 c0                	test   eax,eax
c001b849:	74 02                	je     c001b84d <sysShutdown(regs*)+0x56>
c001b84b:	ff d0                	call   eax
c001b84d:	31 c0                	xor    eax,eax
c001b84f:	31 d2                	xor    edx,edx
c001b851:	83 c4 0c             	add    esp,0xc
c001b854:	c3                   	ret    

c001b855 <sysCallRealpath(regs*)>:
c001b855:	83 ec 0c             	sub    esp,0xc
c001b858:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b85c:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b85f:	85 d2                	test   edx,edx
c001b861:	74 07                	je     c001b86a <sysCallRealpath(regs*)+0x15>
c001b863:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b866:	85 c0                	test   eax,eax
c001b868:	75 0b                	jne    c001b875 <sysCallRealpath(regs*)+0x20>
c001b86a:	b8 01 00 00 00       	mov    eax,0x1
c001b86f:	31 d2                	xor    edx,edx
c001b871:	83 c4 0c             	add    esp,0xc
c001b874:	c3                   	ret    
c001b875:	51                   	push   ecx
c001b876:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b87c:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b87f:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b885:	51                   	push   ecx
c001b886:	52                   	push   edx
c001b887:	50                   	push   eax
c001b888:	e8 6b 7a ff ff       	call   c00132f8 <Fs::standardiseFiles(char*, char const*, char const*)>
c001b88d:	83 c4 10             	add    esp,0x10
c001b890:	31 c0                	xor    eax,eax
c001b892:	31 d2                	xor    edx,edx
c001b894:	83 c4 0c             	add    esp,0xc
c001b897:	c3                   	ret    

c001b898 <sysCallGetArgc(regs*)>:
c001b898:	83 ec 14             	sub    esp,0x14
c001b89b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8a0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b8a3:	ff b0 36 05 00 00    	push   DWORD PTR [eax+0x536]
c001b8a9:	68 10 be 02 c0       	push   0xc002be10
c001b8ae:	e8 97 76 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001b8b3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8b8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b8bb:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b8c1:	83 c4 1c             	add    esp,0x1c
c001b8c4:	99                   	cdq    
c001b8c5:	c3                   	ret    

c001b8c6 <sysCallReadDir(regs*)>:
c001b8c6:	53                   	push   ebx
c001b8c7:	83 ec 18             	sub    esp,0x18
c001b8ca:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b8ce:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b8d1:	83 f8 02             	cmp    eax,0x2
c001b8d4:	76 53                	jbe    c001b929 <sysCallReadDir(regs*)+0x63>
c001b8d6:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b8d9:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001b8df:	77 4f                	ja     c001b930 <sysCallReadDir(regs*)+0x6a>
c001b8e1:	83 ec 0c             	sub    esp,0xc
c001b8e4:	50                   	push   eax
c001b8e5:	e8 5f 61 ff ff       	call   c0011a49 <getFromFileDescriptor(int)>
c001b8ea:	83 c4 10             	add    esp,0x10
c001b8ed:	85 c0                	test   eax,eax
c001b8ef:	74 50                	je     c001b941 <sysCallReadDir(regs*)+0x7b>
c001b8f1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b8f9:	83 ec 0c             	sub    esp,0xc
c001b8fc:	8b 10                	mov    edx,DWORD PTR [eax]
c001b8fe:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b902:	51                   	push   ecx
c001b903:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b906:	6a 00                	push   0x0
c001b908:	68 10 01 00 00       	push   0x110
c001b90d:	50                   	push   eax
c001b90e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b911:	83 c4 20             	add    esp,0x20
c001b914:	85 c0                	test   eax,eax
c001b916:	74 38                	je     c001b950 <sysCallReadDir(regs*)+0x8a>
c001b918:	83 f8 07             	cmp    eax,0x7
c001b91b:	74 0c                	je     c001b929 <sysCallReadDir(regs*)+0x63>
c001b91d:	b8 02 00 00 00       	mov    eax,0x2
c001b922:	31 d2                	xor    edx,edx
c001b924:	83 c4 18             	add    esp,0x18
c001b927:	5b                   	pop    ebx
c001b928:	c3                   	ret    
c001b929:	b8 01 00 00 00       	mov    eax,0x1
c001b92e:	eb f2                	jmp    c001b922 <sysCallReadDir(regs*)+0x5c>
c001b930:	83 ec 08             	sub    esp,0x8
c001b933:	52                   	push   edx
c001b934:	68 28 bf 02 c0       	push   0xc002bf28
c001b939:	e8 0c 76 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001b93e:	83 c4 10             	add    esp,0x10
c001b941:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b946:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b94b:	83 c4 18             	add    esp,0x18
c001b94e:	5b                   	pop    ebx
c001b94f:	c3                   	ret    
c001b950:	31 c0                	xor    eax,eax
c001b952:	eb ce                	jmp    c001b922 <sysCallReadDir(regs*)+0x5c>

c001b954 <sysCallIsATTY(regs*)>:
c001b954:	83 ec 0c             	sub    esp,0xc
c001b957:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b95b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b95e:	83 f8 02             	cmp    eax,0x2
c001b961:	76 07                	jbe    c001b96a <sysCallIsATTY(regs*)+0x16>
c001b963:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b968:	75 26                	jne    c001b990 <sysCallIsATTY(regs*)+0x3c>
c001b96a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b96f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b972:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b978:	85 c0                	test   eax,eax
c001b97a:	74 24                	je     c001b9a0 <sysCallIsATTY(regs*)+0x4c>
c001b97c:	83 ec 0c             	sub    esp,0xc
c001b97f:	8b 10                	mov    edx,DWORD PTR [eax]
c001b981:	50                   	push   eax
c001b982:	ff 12                	call   DWORD PTR [edx]
c001b984:	31 d2                	xor    edx,edx
c001b986:	0f b6 c0             	movzx  eax,al
c001b989:	83 c4 10             	add    esp,0x10
c001b98c:	83 c4 0c             	add    esp,0xc
c001b98f:	c3                   	ret    
c001b990:	83 ec 0c             	sub    esp,0xc
c001b993:	50                   	push   eax
c001b994:	e8 b0 60 ff ff       	call   c0011a49 <getFromFileDescriptor(int)>
c001b999:	83 c4 10             	add    esp,0x10
c001b99c:	85 c0                	test   eax,eax
c001b99e:	75 dc                	jne    c001b97c <sysCallIsATTY(regs*)+0x28>
c001b9a0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b9a5:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b9aa:	83 c4 0c             	add    esp,0xc
c001b9ad:	c3                   	ret    

c001b9ae <sysCallSeek(regs*)>:
c001b9ae:	53                   	push   ebx
c001b9af:	83 ec 08             	sub    esp,0x8
c001b9b2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b9b6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b9b9:	83 f8 02             	cmp    eax,0x2
c001b9bc:	76 4a                	jbe    c001ba08 <sysCallSeek(regs*)+0x5a>
c001b9be:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b9c3:	77 32                	ja     c001b9f7 <sysCallSeek(regs*)+0x49>
c001b9c5:	83 ec 0c             	sub    esp,0xc
c001b9c8:	50                   	push   eax
c001b9c9:	e8 7b 60 ff ff       	call   c0011a49 <getFromFileDescriptor(int)>
c001b9ce:	83 c4 0c             	add    esp,0xc
c001b9d1:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b9d4:	31 db                	xor    ebx,ebx
c001b9d6:	53                   	push   ebx
c001b9d7:	51                   	push   ecx
c001b9d8:	50                   	push   eax
c001b9d9:	e8 e6 7b ff ff       	call   c00135c4 <File::seek(unsigned long long)>
c001b9de:	83 c4 10             	add    esp,0x10
c001b9e1:	85 c0                	test   eax,eax
c001b9e3:	0f 95 c0             	setne  al
c001b9e6:	31 d2                	xor    edx,edx
c001b9e8:	0f b6 c0             	movzx  eax,al
c001b9eb:	f7 d8                	neg    eax
c001b9ed:	83 d2 00             	adc    edx,0x0
c001b9f0:	83 c4 08             	add    esp,0x8
c001b9f3:	f7 da                	neg    edx
c001b9f5:	5b                   	pop    ebx
c001b9f6:	c3                   	ret    
c001b9f7:	83 ec 08             	sub    esp,0x8
c001b9fa:	50                   	push   eax
c001b9fb:	68 1b be 02 c0       	push   0xc002be1b
c001ba00:	e8 45 75 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001ba05:	83 c4 10             	add    esp,0x10
c001ba08:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba0d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba12:	83 c4 08             	add    esp,0x8
c001ba15:	5b                   	pop    ebx
c001ba16:	c3                   	ret    

c001ba17 <sysCallTell(regs*)>:
c001ba17:	53                   	push   ebx
c001ba18:	83 ec 08             	sub    esp,0x8
c001ba1b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ba1f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ba22:	83 f8 02             	cmp    eax,0x2
c001ba25:	76 5e                	jbe    c001ba85 <sysCallTell(regs*)+0x6e>
c001ba27:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001ba2c:	77 2d                	ja     c001ba5b <sysCallTell(regs*)+0x44>
c001ba2e:	83 ec 0c             	sub    esp,0xc
c001ba31:	50                   	push   eax
c001ba32:	e8 12 60 ff ff       	call   c0011a49 <getFromFileDescriptor(int)>
c001ba37:	5a                   	pop    edx
c001ba38:	59                   	pop    ecx
c001ba39:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001ba3c:	50                   	push   eax
c001ba3d:	e8 d8 7b ff ff       	call   c001361a <File::tell(unsigned long long*)>
c001ba42:	83 c4 10             	add    esp,0x10
c001ba45:	85 c0                	test   eax,eax
c001ba47:	0f 95 c0             	setne  al
c001ba4a:	31 d2                	xor    edx,edx
c001ba4c:	0f b6 c0             	movzx  eax,al
c001ba4f:	f7 d8                	neg    eax
c001ba51:	83 d2 00             	adc    edx,0x0
c001ba54:	83 c4 08             	add    esp,0x8
c001ba57:	f7 da                	neg    edx
c001ba59:	5b                   	pop    ebx
c001ba5a:	c3                   	ret    
c001ba5b:	83 ec 08             	sub    esp,0x8
c001ba5e:	50                   	push   eax
c001ba5f:	68 35 be 02 c0       	push   0xc002be35
c001ba64:	e8 e1 74 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001ba69:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001ba6c:	83 c4 10             	add    esp,0x10
c001ba6f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ba75:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ba7c:	31 d2                	xor    edx,edx
c001ba7e:	31 c0                	xor    eax,eax
c001ba80:	83 c4 08             	add    esp,0x8
c001ba83:	5b                   	pop    ebx
c001ba84:	c3                   	ret    
c001ba85:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba8a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba8f:	83 c4 08             	add    esp,0x8
c001ba92:	5b                   	pop    ebx
c001ba93:	c3                   	ret    

c001ba94 <sysCallSize(regs*)>:
c001ba94:	53                   	push   ebx
c001ba95:	83 ec 18             	sub    esp,0x18
c001ba98:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ba9c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ba9f:	83 f8 02             	cmp    eax,0x2
c001baa2:	76 64                	jbe    c001bb08 <sysCallSize(regs*)+0x74>
c001baa4:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001baa9:	77 33                	ja     c001bade <sysCallSize(regs*)+0x4a>
c001baab:	83 ec 0c             	sub    esp,0xc
c001baae:	50                   	push   eax
c001baaf:	e8 95 5f ff ff       	call   c0011a49 <getFromFileDescriptor(int)>
c001bab4:	83 c4 0c             	add    esp,0xc
c001bab7:	8d 54 24 13          	lea    edx,[esp+0x13]
c001babb:	52                   	push   edx
c001babc:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001babf:	50                   	push   eax
c001bac0:	e8 ed 7c ff ff       	call   c00137b2 <File::stat(unsigned long long*, bool*)>
c001bac5:	83 c4 10             	add    esp,0x10
c001bac8:	85 c0                	test   eax,eax
c001baca:	0f 95 c0             	setne  al
c001bacd:	31 d2                	xor    edx,edx
c001bacf:	0f b6 c0             	movzx  eax,al
c001bad2:	f7 d8                	neg    eax
c001bad4:	83 d2 00             	adc    edx,0x0
c001bad7:	83 c4 18             	add    esp,0x18
c001bada:	f7 da                	neg    edx
c001badc:	5b                   	pop    ebx
c001badd:	c3                   	ret    
c001bade:	83 ec 08             	sub    esp,0x8
c001bae1:	50                   	push   eax
c001bae2:	68 4f be 02 c0       	push   0xc002be4f
c001bae7:	e8 5e 74 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001baec:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001baef:	83 c4 10             	add    esp,0x10
c001baf2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001baf8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001baff:	31 d2                	xor    edx,edx
c001bb01:	31 c0                	xor    eax,eax
c001bb03:	83 c4 18             	add    esp,0x18
c001bb06:	5b                   	pop    ebx
c001bb07:	c3                   	ret    
c001bb08:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb0d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb12:	83 c4 18             	add    esp,0x18
c001bb15:	5b                   	pop    ebx
c001bb16:	c3                   	ret    

c001bb17 <sysCallSizeFromFilename(regs*)>:
c001bb17:	57                   	push   edi
c001bb18:	56                   	push   esi
c001bb19:	53                   	push   ebx
c001bb1a:	83 ec 20             	sub    esp,0x20
c001bb1d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bb21:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001bb24:	83 fb 02             	cmp    ebx,0x2
c001bb27:	0f 86 99 00 00 00    	jbe    c001bbc6 <sysCallSizeFromFilename(regs*)+0xaf>
c001bb2d:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001bb33:	77 65                	ja     c001bb9a <sysCallSizeFromFilename(regs*)+0x83>
c001bb35:	83 ec 0c             	sub    esp,0xc
c001bb38:	68 14 01 00 00       	push   0x114
c001bb3d:	e8 fe 3c ff ff       	call   c000f840 <malloc>
c001bb42:	83 c4 0c             	add    esp,0xc
c001bb45:	89 c6                	mov    esi,eax
c001bb47:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb4c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bb4f:	53                   	push   ebx
c001bb50:	56                   	push   esi
c001bb51:	e8 4c 79 ff ff       	call   c00134a2 <File::File(char const*, Process*)>
c001bb56:	83 c4 0c             	add    esp,0xc
c001bb59:	8d 44 24 23          	lea    eax,[esp+0x23]
c001bb5d:	50                   	push   eax
c001bb5e:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001bb61:	56                   	push   esi
c001bb62:	e8 4b 7c ff ff       	call   c00137b2 <File::stat(unsigned long long*, bool*)>
c001bb67:	83 c4 10             	add    esp,0x10
c001bb6a:	85 f6                	test   esi,esi
c001bb6c:	74 14                	je     c001bb82 <sysCallSizeFromFilename(regs*)+0x6b>
c001bb6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bb72:	8b 16                	mov    edx,DWORD PTR [esi]
c001bb74:	83 ec 0c             	sub    esp,0xc
c001bb77:	56                   	push   esi
c001bb78:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bb7b:	83 c4 10             	add    esp,0x10
c001bb7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bb82:	85 c0                	test   eax,eax
c001bb84:	0f 95 c0             	setne  al
c001bb87:	31 d2                	xor    edx,edx
c001bb89:	0f b6 c0             	movzx  eax,al
c001bb8c:	f7 d8                	neg    eax
c001bb8e:	83 d2 00             	adc    edx,0x0
c001bb91:	83 c4 20             	add    esp,0x20
c001bb94:	f7 da                	neg    edx
c001bb96:	5b                   	pop    ebx
c001bb97:	5e                   	pop    esi
c001bb98:	5f                   	pop    edi
c001bb99:	c3                   	ret    
c001bb9a:	83 ec 08             	sub    esp,0x8
c001bb9d:	53                   	push   ebx
c001bb9e:	68 4f be 02 c0       	push   0xc002be4f
c001bba3:	e8 a2 73 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001bba8:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001bbab:	83 c4 10             	add    esp,0x10
c001bbae:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bbb4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bbbb:	31 d2                	xor    edx,edx
c001bbbd:	83 c4 20             	add    esp,0x20
c001bbc0:	31 c0                	xor    eax,eax
c001bbc2:	5b                   	pop    ebx
c001bbc3:	5e                   	pop    esi
c001bbc4:	5f                   	pop    edi
c001bbc5:	c3                   	ret    
c001bbc6:	83 c4 20             	add    esp,0x20
c001bbc9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bbce:	5b                   	pop    ebx
c001bbcf:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bbd4:	5e                   	pop    esi
c001bbd5:	5f                   	pop    edi
c001bbd6:	c3                   	ret    

c001bbd7 <sysCallClose(regs*)>:
c001bbd7:	53                   	push   ebx
c001bbd8:	83 ec 08             	sub    esp,0x8
c001bbdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbdf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bbe2:	83 f8 02             	cmp    eax,0x2
c001bbe5:	76 50                	jbe    c001bc37 <sysCallClose(regs*)+0x60>
c001bbe7:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bbec:	74 58                	je     c001bc46 <sysCallClose(regs*)+0x6f>
c001bbee:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bbf3:	74 60                	je     c001bc55 <sysCallClose(regs*)+0x7e>
c001bbf5:	77 2f                	ja     c001bc26 <sysCallClose(regs*)+0x4f>
c001bbf7:	83 ec 0c             	sub    esp,0xc
c001bbfa:	50                   	push   eax
c001bbfb:	e8 49 5e ff ff       	call   c0011a49 <getFromFileDescriptor(int)>
c001bc00:	89 c3                	mov    ebx,eax
c001bc02:	89 04 24             	mov    DWORD PTR [esp],eax
c001bc05:	e8 5a 79 ff ff       	call   c0013564 <File::close()>
c001bc0a:	83 c4 10             	add    esp,0x10
c001bc0d:	85 db                	test   ebx,ebx
c001bc0f:	74 0c                	je     c001bc1d <sysCallClose(regs*)+0x46>
c001bc11:	83 ec 0c             	sub    esp,0xc
c001bc14:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bc16:	53                   	push   ebx
c001bc17:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bc1a:	83 c4 10             	add    esp,0x10
c001bc1d:	31 c0                	xor    eax,eax
c001bc1f:	31 d2                	xor    edx,edx
c001bc21:	83 c4 08             	add    esp,0x8
c001bc24:	5b                   	pop    ebx
c001bc25:	c3                   	ret    
c001bc26:	83 ec 08             	sub    esp,0x8
c001bc29:	50                   	push   eax
c001bc2a:	68 4c bf 02 c0       	push   0xc002bf4c
c001bc2f:	e8 16 73 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001bc34:	83 c4 10             	add    esp,0x10
c001bc37:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc3c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc41:	83 c4 08             	add    esp,0x8
c001bc44:	5b                   	pop    ebx
c001bc45:	c3                   	ret    
c001bc46:	83 ec 0c             	sub    esp,0xc
c001bc49:	68 6a be 02 c0       	push   0xc002be6a
c001bc4e:	e8 f7 72 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001bc53:	eb c5                	jmp    c001bc1a <sysCallClose(regs*)+0x43>
c001bc55:	83 ec 0c             	sub    esp,0xc
c001bc58:	68 78 be 02 c0       	push   0xc002be78
c001bc5d:	eb ef                	jmp    c001bc4e <sysCallClose(regs*)+0x77>

c001bc5f <sysCallOpenDir(regs*)>:
c001bc5f:	56                   	push   esi
c001bc60:	53                   	push   ebx
c001bc61:	53                   	push   ebx
c001bc62:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bc66:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001bc69:	85 f6                	test   esi,esi
c001bc6b:	74 59                	je     c001bcc6 <sysCallOpenDir(regs*)+0x67>
c001bc6d:	83 ec 0c             	sub    esp,0xc
c001bc70:	68 14 01 00 00       	push   0x114
c001bc75:	e8 c6 3b ff ff       	call   c000f840 <malloc>
c001bc7a:	83 c4 0c             	add    esp,0xc
c001bc7d:	89 c6                	mov    esi,eax
c001bc7f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc84:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bc87:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bc8a:	56                   	push   esi
c001bc8b:	e8 be 7c ff ff       	call   c001394e <Directory::Directory(char const*, Process*)>
c001bc90:	83 c4 10             	add    esp,0x10
c001bc93:	85 f6                	test   esi,esi
c001bc95:	74 2f                	je     c001bcc6 <sysCallOpenDir(regs*)+0x67>
c001bc97:	83 ec 0c             	sub    esp,0xc
c001bc9a:	56                   	push   esi
c001bc9b:	e8 12 7d ff ff       	call   c00139b2 <Directory::open()>
c001bca0:	83 c4 10             	add    esp,0x10
c001bca3:	85 c0                	test   eax,eax
c001bca5:	75 1f                	jne    c001bcc6 <sysCallOpenDir(regs*)+0x67>
c001bca7:	83 ec 0c             	sub    esp,0xc
c001bcaa:	56                   	push   esi
c001bcab:	e8 a4 5a ff ff       	call   c0011754 <UnixFile::getFileDescriptor()>
c001bcb0:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bcb3:	83 c4 10             	add    esp,0x10
c001bcb6:	89 02                	mov    DWORD PTR [edx],eax
c001bcb8:	c1 f8 1f             	sar    eax,0x1f
c001bcbb:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bcbe:	31 c0                	xor    eax,eax
c001bcc0:	59                   	pop    ecx
c001bcc1:	31 d2                	xor    edx,edx
c001bcc3:	5b                   	pop    ebx
c001bcc4:	5e                   	pop    esi
c001bcc5:	c3                   	ret    
c001bcc6:	59                   	pop    ecx
c001bcc7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bccc:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bcd1:	5b                   	pop    ebx
c001bcd2:	5e                   	pop    esi
c001bcd3:	c3                   	ret    

c001bcd4 <sysCallCloseDir(regs*)>:
c001bcd4:	53                   	push   ebx
c001bcd5:	83 ec 08             	sub    esp,0x8
c001bcd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcdc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bcdf:	83 f8 02             	cmp    eax,0x2
c001bce2:	76 47                	jbe    c001bd2b <sysCallCloseDir(regs*)+0x57>
c001bce4:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bce9:	77 2f                	ja     c001bd1a <sysCallCloseDir(regs*)+0x46>
c001bceb:	83 ec 0c             	sub    esp,0xc
c001bcee:	50                   	push   eax
c001bcef:	e8 55 5d ff ff       	call   c0011a49 <getFromFileDescriptor(int)>
c001bcf4:	89 c3                	mov    ebx,eax
c001bcf6:	89 04 24             	mov    DWORD PTR [esp],eax
c001bcf9:	e8 10 7d ff ff       	call   c0013a0e <Directory::close()>
c001bcfe:	83 c4 10             	add    esp,0x10
c001bd01:	85 db                	test   ebx,ebx
c001bd03:	74 0c                	je     c001bd11 <sysCallCloseDir(regs*)+0x3d>
c001bd05:	83 ec 0c             	sub    esp,0xc
c001bd08:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bd0a:	53                   	push   ebx
c001bd0b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bd0e:	83 c4 10             	add    esp,0x10
c001bd11:	31 c0                	xor    eax,eax
c001bd13:	31 d2                	xor    edx,edx
c001bd15:	83 c4 08             	add    esp,0x8
c001bd18:	5b                   	pop    ebx
c001bd19:	c3                   	ret    
c001bd1a:	83 ec 08             	sub    esp,0x8
c001bd1d:	50                   	push   eax
c001bd1e:	68 74 bf 02 c0       	push   0xc002bf74
c001bd23:	e8 22 72 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001bd28:	83 c4 10             	add    esp,0x10
c001bd2b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd30:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd35:	83 c4 08             	add    esp,0x8
c001bd38:	5b                   	pop    ebx
c001bd39:	c3                   	ret    

c001bd3a <sysCallMakeDir(regs*)>:
c001bd3a:	56                   	push   esi
c001bd3b:	53                   	push   ebx
c001bd3c:	83 ec 10             	sub    esp,0x10
c001bd3f:	68 14 01 00 00       	push   0x114
c001bd44:	e8 f7 3a ff ff       	call   c000f840 <malloc>
c001bd49:	83 c4 0c             	add    esp,0xc
c001bd4c:	89 c3                	mov    ebx,eax
c001bd4e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd53:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bd56:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bd5a:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bd5d:	53                   	push   ebx
c001bd5e:	e8 eb 7b ff ff       	call   c001394e <Directory::Directory(char const*, Process*)>
c001bd63:	83 c4 10             	add    esp,0x10
c001bd66:	85 db                	test   ebx,ebx
c001bd68:	74 32                	je     c001bd9c <sysCallMakeDir(regs*)+0x62>
c001bd6a:	83 ec 0c             	sub    esp,0xc
c001bd6d:	53                   	push   ebx
c001bd6e:	e8 1f 7e ff ff       	call   c0013b92 <Directory::create()>
c001bd73:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bd76:	89 c6                	mov    esi,eax
c001bd78:	e8 91 7c ff ff       	call   c0013a0e <Directory::close()>
c001bd7d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bd7f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bd82:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bd85:	83 c4 10             	add    esp,0x10
c001bd88:	31 c0                	xor    eax,eax
c001bd8a:	59                   	pop    ecx
c001bd8b:	85 f6                	test   esi,esi
c001bd8d:	5b                   	pop    ebx
c001bd8e:	0f 95 c0             	setne  al
c001bd91:	5e                   	pop    esi
c001bd92:	31 d2                	xor    edx,edx
c001bd94:	f7 d8                	neg    eax
c001bd96:	83 d2 00             	adc    edx,0x0
c001bd99:	f7 da                	neg    edx
c001bd9b:	c3                   	ret    
c001bd9c:	59                   	pop    ecx
c001bd9d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bda2:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bda7:	5b                   	pop    ebx
c001bda8:	5e                   	pop    esi
c001bda9:	c3                   	ret    

c001bdaa <sysCallWait(regs*)>:
c001bdaa:	83 ec 10             	sub    esp,0x10
c001bdad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bdb1:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001bdb4:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bdb7:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001bdba:	e8 ce 24 00 00       	call   c001e28d <waitTask(int, int*, int)>
c001bdbf:	83 c4 1c             	add    esp,0x1c
c001bdc2:	99                   	cdq    
c001bdc3:	c3                   	ret    

c001bdc4 <sysCallNotImpl(regs*)>:
c001bdc4:	83 ec 18             	sub    esp,0x18
c001bdc7:	68 86 be 02 c0       	push   0xc002be86
c001bdcc:	e8 2a e8 ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c001bdd1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bdd6:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bddb:	83 c4 1c             	add    esp,0x1c
c001bdde:	c3                   	ret    

c001bddf <sysPanic(regs*)>:
c001bddf:	83 ec 18             	sub    esp,0x18
c001bde2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bde6:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bde9:	e8 0d e8 ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c001bdee:	c7 04 24 a0 be 02 c0 	mov    DWORD PTR [esp],0xc002bea0
c001bdf5:	e8 01 e8 ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c001bdfa:	b8 01 00 00 00       	mov    eax,0x1
c001bdff:	31 d2                	xor    edx,edx
c001be01:	83 c4 1c             	add    esp,0x1c
c001be04:	c3                   	ret    

c001be05 <sysCallRmdir(regs*)>:
c001be05:	56                   	push   esi
c001be06:	53                   	push   ebx
c001be07:	83 ec 20             	sub    esp,0x20
c001be0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001be0e:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001be11:	68 14 01 00 00       	push   0x114
c001be16:	e8 25 3a ff ff       	call   c000f840 <malloc>
c001be1b:	83 c4 0c             	add    esp,0xc
c001be1e:	89 c3                	mov    ebx,eax
c001be20:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be25:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001be28:	56                   	push   esi
c001be29:	53                   	push   ebx
c001be2a:	e8 73 76 ff ff       	call   c00134a2 <File::File(char const*, Process*)>
c001be2f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001be32:	e8 47 78 ff ff       	call   c001367e <File::unlink()>
c001be37:	83 c4 10             	add    esp,0x10
c001be3a:	85 db                	test   ebx,ebx
c001be3c:	74 14                	je     c001be52 <sysCallRmdir(regs*)+0x4d>
c001be3e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001be42:	8b 13                	mov    edx,DWORD PTR [ebx]
c001be44:	83 ec 0c             	sub    esp,0xc
c001be47:	53                   	push   ebx
c001be48:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001be4b:	83 c4 10             	add    esp,0x10
c001be4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001be52:	85 c0                	test   eax,eax
c001be54:	0f 95 c0             	setne  al
c001be57:	31 d2                	xor    edx,edx
c001be59:	0f b6 c0             	movzx  eax,al
c001be5c:	f7 d8                	neg    eax
c001be5e:	83 d2 00             	adc    edx,0x0
c001be61:	83 c4 14             	add    esp,0x14
c001be64:	f7 da                	neg    edx
c001be66:	5b                   	pop    ebx
c001be67:	5e                   	pop    esi
c001be68:	c3                   	ret    

c001be69 <sysCallUnlink(regs*)>:
c001be69:	56                   	push   esi
c001be6a:	53                   	push   ebx
c001be6b:	83 ec 20             	sub    esp,0x20
c001be6e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001be72:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001be75:	68 14 01 00 00       	push   0x114
c001be7a:	e8 c1 39 ff ff       	call   c000f840 <malloc>
c001be7f:	83 c4 0c             	add    esp,0xc
c001be82:	89 c3                	mov    ebx,eax
c001be84:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be89:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001be8c:	56                   	push   esi
c001be8d:	53                   	push   ebx
c001be8e:	e8 0f 76 ff ff       	call   c00134a2 <File::File(char const*, Process*)>
c001be93:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001be96:	e8 e3 77 ff ff       	call   c001367e <File::unlink()>
c001be9b:	83 c4 10             	add    esp,0x10
c001be9e:	85 db                	test   ebx,ebx
c001bea0:	74 14                	je     c001beb6 <sysCallUnlink(regs*)+0x4d>
c001bea2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bea6:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bea8:	83 ec 0c             	sub    esp,0xc
c001beab:	53                   	push   ebx
c001beac:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001beaf:	83 c4 10             	add    esp,0x10
c001beb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001beb6:	85 c0                	test   eax,eax
c001beb8:	0f 95 c0             	setne  al
c001bebb:	31 d2                	xor    edx,edx
c001bebd:	0f b6 c0             	movzx  eax,al
c001bec0:	f7 d8                	neg    eax
c001bec2:	83 d2 00             	adc    edx,0x0
c001bec5:	83 c4 14             	add    esp,0x14
c001bec8:	f7 da                	neg    edx
c001beca:	5b                   	pop    ebx
c001becb:	5e                   	pop    esi
c001becc:	c3                   	ret    

c001becd <sysCallGetArgv(regs*)>:
c001becd:	83 ec 0c             	sub    esp,0xc
c001bed0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bed4:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001bed7:	85 c0                	test   eax,eax
c001bed9:	78 2b                	js     c001bf06 <sysCallGetArgv(regs*)+0x39>
c001bedb:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bee1:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001bee4:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001beea:	7d 1a                	jge    c001bf06 <sysCallGetArgv(regs*)+0x39>
c001beec:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001bef3:	85 c0                	test   eax,eax
c001bef5:	74 17                	je     c001bf0e <sysCallGetArgv(regs*)+0x41>
c001bef7:	83 ec 08             	sub    esp,0x8
c001befa:	50                   	push   eax
c001befb:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001befe:	e8 31 49 fe ff       	call   c0000834 <strcpy>
c001bf03:	83 c4 10             	add    esp,0x10
c001bf06:	31 c0                	xor    eax,eax
c001bf08:	31 d2                	xor    edx,edx
c001bf0a:	83 c4 0c             	add    esp,0xc
c001bf0d:	c3                   	ret    
c001bf0e:	b8 01 00 00 00       	mov    eax,0x1
c001bf13:	31 d2                	xor    edx,edx
c001bf15:	83 c4 0c             	add    esp,0xc
c001bf18:	c3                   	ret    

c001bf19 <sysCallTTYName(regs*)>:
c001bf19:	56                   	push   esi
c001bf1a:	53                   	push   ebx
c001bf1b:	53                   	push   ebx
c001bf1c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bf20:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001bf23:	85 c0                	test   eax,eax
c001bf25:	74 5f                	je     c001bf86 <sysCallTTYName(regs*)+0x6d>
c001bf27:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001bf2a:	83 f8 02             	cmp    eax,0x2
c001bf2d:	77 3e                	ja     c001bf6d <sysCallTTYName(regs*)+0x54>
c001bf2f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf34:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bf37:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001bf3d:	85 db                	test   ebx,ebx
c001bf3f:	74 45                	je     c001bf86 <sysCallTTYName(regs*)+0x6d>
c001bf41:	83 ec 0c             	sub    esp,0xc
c001bf44:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bf46:	53                   	push   ebx
c001bf47:	ff 10                	call   DWORD PTR [eax]
c001bf49:	83 c4 10             	add    esp,0x10
c001bf4c:	84 c0                	test   al,al
c001bf4e:	74 41                	je     c001bf91 <sysCallTTYName(regs*)+0x78>
c001bf50:	83 ec 08             	sub    esp,0x8
c001bf53:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001bf59:	53                   	push   ebx
c001bf5a:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001bf5d:	e8 d2 48 fe ff       	call   c0000834 <strcpy>
c001bf62:	83 c4 10             	add    esp,0x10
c001bf65:	31 c0                	xor    eax,eax
c001bf67:	59                   	pop    ecx
c001bf68:	31 d2                	xor    edx,edx
c001bf6a:	5b                   	pop    ebx
c001bf6b:	5e                   	pop    esi
c001bf6c:	c3                   	ret    
c001bf6d:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bf72:	74 bb                	je     c001bf2f <sysCallTTYName(regs*)+0x16>
c001bf74:	83 ec 0c             	sub    esp,0xc
c001bf77:	50                   	push   eax
c001bf78:	e8 cc 5a ff ff       	call   c0011a49 <getFromFileDescriptor(int)>
c001bf7d:	83 c4 10             	add    esp,0x10
c001bf80:	89 c3                	mov    ebx,eax
c001bf82:	85 db                	test   ebx,ebx
c001bf84:	75 bb                	jne    c001bf41 <sysCallTTYName(regs*)+0x28>
c001bf86:	59                   	pop    ecx
c001bf87:	b8 01 00 00 00       	mov    eax,0x1
c001bf8c:	31 d2                	xor    edx,edx
c001bf8e:	5b                   	pop    ebx
c001bf8f:	5e                   	pop    esi
c001bf90:	c3                   	ret    
c001bf91:	59                   	pop    ecx
c001bf92:	b8 02 00 00 00       	mov    eax,0x2
c001bf97:	31 d2                	xor    edx,edx
c001bf99:	5b                   	pop    ebx
c001bf9a:	5e                   	pop    esi
c001bf9b:	c3                   	ret    

c001bf9c <sysCallUSleep(regs*)>:
c001bf9c:	83 ec 14             	sub    esp,0x14
c001bf9f:	b8 e8 03 00 00       	mov    eax,0x3e8
c001bfa4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bfa8:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001bfaf:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001bfb2:	01 ca                	add    edx,ecx
c001bfb4:	52                   	push   edx
c001bfb5:	50                   	push   eax
c001bfb6:	e8 6b 23 00 00       	call   c001e326 <nanoSleep(unsigned long long)>
c001bfbb:	31 c0                	xor    eax,eax
c001bfbd:	31 d2                	xor    edx,edx
c001bfbf:	83 c4 1c             	add    esp,0x1c
c001bfc2:	c3                   	ret    

c001bfc3 <sysCallSpawn(regs*)>:
c001bfc3:	56                   	push   esi
c001bfc4:	53                   	push   ebx
c001bfc5:	53                   	push   ebx
c001bfc6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bfca:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001bfcd:	85 f6                	test   esi,esi
c001bfcf:	75 08                	jne    c001bfd9 <sysCallSpawn(regs*)+0x16>
c001bfd1:	59                   	pop    ecx
c001bfd2:	31 c0                	xor    eax,eax
c001bfd4:	31 d2                	xor    edx,edx
c001bfd6:	5b                   	pop    ebx
c001bfd7:	5e                   	pop    esi
c001bfd8:	c3                   	ret    
c001bfd9:	83 ec 0c             	sub    esp,0xc
c001bfdc:	68 3f 07 00 00       	push   0x73f
c001bfe1:	e8 5a 38 ff ff       	call   c000f840 <malloc>
c001bfe6:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bfe9:	89 c6                	mov    esi,eax
c001bfeb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bff0:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bff3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bff6:	56                   	push   esi
c001bff7:	e8 2a 1a 00 00       	call   c001da26 <Process::Process(char const*, Process*, char**)>
c001bffc:	83 c4 20             	add    esp,0x20
c001bfff:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001c006:	75 c9                	jne    c001bfd1 <sysCallSpawn(regs*)+0xe>
c001c008:	83 ec 0c             	sub    esp,0xc
c001c00b:	56                   	push   esi
c001c00c:	e8 db 1f 00 00       	call   c001dfec <Process::createUserThread()>
c001c011:	8b 06                	mov    eax,DWORD PTR [esi]
c001c013:	83 c4 10             	add    esp,0x10
c001c016:	99                   	cdq    
c001c017:	59                   	pop    ecx
c001c018:	5b                   	pop    ebx
c001c019:	5e                   	pop    esi
c001c01a:	c3                   	ret    

c001c01b <sysCallGetEnv(regs*)>:
c001c01b:	55                   	push   ebp
c001c01c:	57                   	push   edi
c001c01d:	56                   	push   esi
c001c01e:	53                   	push   ebx
c001c01f:	83 ec 28             	sub    esp,0x28
c001c022:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c026:	68 af be 02 c0       	push   0xc002beaf
c001c02b:	e8 1a 6f ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001c030:	5f                   	pop    edi
c001c031:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001c034:	5d                   	pop    ebp
c001c035:	53                   	push   ebx
c001c036:	68 de c1 02 c0       	push   0xc002c1de
c001c03b:	e8 0a 6f ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001c040:	58                   	pop    eax
c001c041:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001c044:	5a                   	pop    edx
c001c045:	57                   	push   edi
c001c046:	68 b8 be 02 c0       	push   0xc002beb8
c001c04b:	e8 fa 6e ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001c050:	59                   	pop    ecx
c001c051:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c056:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c059:	e8 b9 e4 ff ff       	call   c001a517 <Krnl::getProcessTotalEnvCount(Process*)>
c001c05e:	5a                   	pop    edx
c001c05f:	89 c5                	mov    ebp,eax
c001c061:	59                   	pop    ecx
c001c062:	50                   	push   eax
c001c063:	68 c2 be 02 c0       	push   0xc002bec2
c001c068:	e8 dd 6e ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001c06d:	83 c4 10             	add    esp,0x10
c001c070:	39 ef                	cmp    edi,ebp
c001c072:	7c 15                	jl     c001c089 <sysCallGetEnv(regs*)+0x6e>
c001c074:	85 db                	test   ebx,ebx
c001c076:	75 0c                	jne    c001c084 <sysCallGetEnv(regs*)+0x69>
c001c078:	83 c4 1c             	add    esp,0x1c
c001c07b:	31 c0                	xor    eax,eax
c001c07d:	5b                   	pop    ebx
c001c07e:	31 d2                	xor    edx,edx
c001c080:	5e                   	pop    esi
c001c081:	5f                   	pop    edi
c001c082:	5d                   	pop    ebp
c001c083:	c3                   	ret    
c001c084:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c087:	eb ef                	jmp    c001c078 <sysCallGetEnv(regs*)+0x5d>
c001c089:	83 ec 0c             	sub    esp,0xc
c001c08c:	68 ce be 02 c0       	push   0xc002bece
c001c091:	e8 b4 6e ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001c096:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c09a:	83 c4 0c             	add    esp,0xc
c001c09d:	57                   	push   edi
c001c09e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c0a4:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001c0a7:	50                   	push   eax
c001c0a8:	e8 8a e4 ff ff       	call   c001a537 <Krnl::getProcessEnvPair(Process*, int)>
c001c0ad:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c0b1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c0b5:	68 5d c2 02 c0       	push   0xc002c25d
c001c0ba:	e8 8b 6e ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001c0bf:	83 c4 10             	add    esp,0x10
c001c0c2:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001c0c5:	85 f6                	test   esi,esi
c001c0c7:	75 47                	jne    c001c110 <sysCallGetEnv(regs*)+0xf5>
c001c0c9:	83 ec 0c             	sub    esp,0xc
c001c0cc:	55                   	push   ebp
c001c0cd:	e8 c2 46 fe ff       	call   c0000794 <strlen>
c001c0d2:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c0d5:	89 c3                	mov    ebx,eax
c001c0d7:	e8 b8 46 fe ff       	call   c0000794 <strlen>
c001c0dc:	5a                   	pop    edx
c001c0dd:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c0e1:	59                   	pop    ecx
c001c0e2:	50                   	push   eax
c001c0e3:	68 d1 be 02 c0       	push   0xc002bed1
c001c0e8:	e8 5d 6e ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001c0ed:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c0f0:	e8 9f 46 fe ff       	call   c0000794 <strlen>
c001c0f5:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c0f8:	89 c3                	mov    ebx,eax
c001c0fa:	e8 95 46 fe ff       	call   c0000794 <strlen>
c001c0ff:	83 c4 10             	add    esp,0x10
c001c102:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c106:	83 c4 1c             	add    esp,0x1c
c001c109:	31 d2                	xor    edx,edx
c001c10b:	5b                   	pop    ebx
c001c10c:	5e                   	pop    esi
c001c10d:	5f                   	pop    edi
c001c10e:	5d                   	pop    ebp
c001c10f:	c3                   	ret    
c001c110:	83 ec 0c             	sub    esp,0xc
c001c113:	68 77 c2 02 c0       	push   0xc002c277
c001c118:	e8 2d 6e ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001c11d:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c120:	58                   	pop    eax
c001c121:	5a                   	pop    edx
c001c122:	55                   	push   ebp
c001c123:	53                   	push   ebx
c001c124:	e8 0b 47 fe ff       	call   c0000834 <strcpy>
c001c129:	59                   	pop    ecx
c001c12a:	5e                   	pop    esi
c001c12b:	68 db be 02 c0       	push   0xc002bedb
c001c130:	53                   	push   ebx
c001c131:	e8 3e 48 fe ff       	call   c0000974 <strcat>
c001c136:	5d                   	pop    ebp
c001c137:	58                   	pop    eax
c001c138:	57                   	push   edi
c001c139:	53                   	push   ebx
c001c13a:	e8 35 48 fe ff       	call   c0000974 <strcat>
c001c13f:	c7 04 24 91 c2 02 c0 	mov    DWORD PTR [esp],0xc002c291
c001c146:	e8 ff 6d ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001c14b:	83 c4 10             	add    esp,0x10
c001c14e:	e9 25 ff ff ff       	jmp    c001c078 <sysCallGetEnv(regs*)+0x5d>

c001c153 <sysAppSettings(regs*)>:
c001c153:	53                   	push   ebx
c001c154:	83 ec 08             	sub    esp,0x8
c001c157:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c15b:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001c15e:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001c164:	25 e0 1f 00 00       	and    eax,0x1fe0
c001c169:	66 3d c0 09          	cmp    ax,0x9c0
c001c16d:	75 2f                	jne    c001c19e <sysAppSettings(regs*)+0x4b>
c001c16f:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001c175:	83 e0 1f             	and    eax,0x1f
c001c178:	3c 01                	cmp    al,0x1
c001c17a:	74 2e                	je     c001c1aa <sysAppSettings(regs*)+0x57>
c001c17c:	3c 07                	cmp    al,0x7
c001c17e:	0f 84 bd 00 00 00    	je     c001c241 <sysAppSettings(regs*)+0xee>
c001c184:	84 c0                	test   al,al
c001c186:	0f 84 dc 00 00 00    	je     c001c268 <sysAppSettings(regs*)+0x115>
c001c18c:	3c 08                	cmp    al,0x8
c001c18e:	74 6d                	je     c001c1fd <sysAppSettings(regs*)+0xaa>
c001c190:	0f b6 c0             	movzx  eax,al
c001c193:	83 c4 08             	add    esp,0x8
c001c196:	05 e8 03 00 00       	add    eax,0x3e8
c001c19b:	5b                   	pop    ebx
c001c19c:	99                   	cdq    
c001c19d:	c3                   	ret    
c001c19e:	b8 01 00 00 00       	mov    eax,0x1
c001c1a3:	31 d2                	xor    edx,edx
c001c1a5:	83 c4 08             	add    esp,0x8
c001c1a8:	5b                   	pop    ebx
c001c1a9:	c3                   	ret    
c001c1aa:	51                   	push   ecx
c001c1ab:	68 00 01 00 00       	push   0x100
c001c1b0:	6a 00                	push   0x0
c001c1b2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1b7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1ba:	83 c0 0c             	add    eax,0xc
c001c1bd:	50                   	push   eax
c001c1be:	e8 b5 45 fe ff       	call   c0000778 <memset>
c001c1c3:	83 c4 0c             	add    esp,0xc
c001c1c6:	68 ff 00 00 00       	push   0xff
c001c1cb:	53                   	push   ebx
c001c1cc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1d1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1d4:	83 c0 0c             	add    eax,0xc
c001c1d7:	50                   	push   eax
c001c1d8:	e8 67 45 fe ff       	call   c0000744 <memcpy>
c001c1dd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1e2:	5b                   	pop    ebx
c001c1e3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1e6:	5a                   	pop    edx
c001c1e7:	8d 50 0c             	lea    edx,[eax+0xc]
c001c1ea:	52                   	push   edx
c001c1eb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c1f1:	e8 ce 49 ff ff       	call   c0010bc4 <VgaText::setTitle(char*)>
c001c1f6:	83 c4 10             	add    esp,0x10
c001c1f9:	31 c0                	xor    eax,eax
c001c1fb:	eb a6                	jmp    c001c1a3 <sysAppSettings(regs*)+0x50>
c001c1fd:	83 ec 08             	sub    esp,0x8
c001c200:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c206:	83 e0 0f             	and    eax,0xf
c001c209:	50                   	push   eax
c001c20a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c20f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c212:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c218:	e8 97 49 ff ff       	call   c0010bb4 <VgaText::setTitleColour(VgaColour)>
c001c21d:	58                   	pop    eax
c001c21e:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c224:	5a                   	pop    edx
c001c225:	c1 e8 04             	shr    eax,0x4
c001c228:	83 e0 0f             	and    eax,0xf
c001c22b:	50                   	push   eax
c001c22c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c231:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c234:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c23a:	e8 65 49 ff ff       	call   c0010ba4 <VgaText::setTitleTextColour(VgaColour)>
c001c23f:	eb b5                	jmp    c001c1f6 <sysAppSettings(regs*)+0xa3>
c001c241:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c246:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c249:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c24f:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001c255:	c0 e8 06             	shr    al,0x6
c001c258:	83 e0 01             	and    eax,0x1
c001c25b:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001c261:	31 c0                	xor    eax,eax
c001c263:	e9 3b ff ff ff       	jmp    c001c1a3 <sysAppSettings(regs*)+0x50>
c001c268:	b8 02 00 00 00       	mov    eax,0x2
c001c26d:	e9 31 ff ff ff       	jmp    c001c1a3 <sysAppSettings(regs*)+0x50>

c001c272 <sysSetFatAttrib(regs*)>:
c001c272:	57                   	push   edi
c001c273:	56                   	push   esi
c001c274:	53                   	push   ebx
c001c275:	83 ec 1c             	sub    esp,0x1c
c001c278:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c27c:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c27f:	68 14 01 00 00       	push   0x114
c001c284:	e8 b7 35 ff ff       	call   c000f840 <malloc>
c001c289:	83 c4 0c             	add    esp,0xc
c001c28c:	89 c3                	mov    ebx,eax
c001c28e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c293:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c296:	57                   	push   edi
c001c297:	53                   	push   ebx
c001c298:	e8 05 72 ff ff       	call   c00134a2 <File::File(char const*, Process*)>
c001c29d:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c2a0:	83 c4 0c             	add    esp,0xc
c001c2a3:	0f b6 d4             	movzx  edx,ah
c001c2a6:	0f b6 c0             	movzx  eax,al
c001c2a9:	52                   	push   edx
c001c2aa:	50                   	push   eax
c001c2ab:	53                   	push   ebx
c001c2ac:	e8 67 74 ff ff       	call   c0013718 <File::chfatattr(unsigned char, unsigned char)>
c001c2b1:	83 c4 10             	add    esp,0x10
c001c2b4:	85 db                	test   ebx,ebx
c001c2b6:	74 14                	je     c001c2cc <sysSetFatAttrib(regs*)+0x5a>
c001c2b8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c2bc:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c2be:	83 ec 0c             	sub    esp,0xc
c001c2c1:	53                   	push   ebx
c001c2c2:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c2c5:	83 c4 10             	add    esp,0x10
c001c2c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c2cc:	85 c0                	test   eax,eax
c001c2ce:	0f 95 c0             	setne  al
c001c2d1:	31 d2                	xor    edx,edx
c001c2d3:	0f b6 c0             	movzx  eax,al
c001c2d6:	f7 d8                	neg    eax
c001c2d8:	83 d2 00             	adc    edx,0x0
c001c2db:	83 c4 10             	add    esp,0x10
c001c2de:	f7 da                	neg    edx
c001c2e0:	5b                   	pop    ebx
c001c2e1:	5e                   	pop    esi
c001c2e2:	5f                   	pop    edi
c001c2e3:	c3                   	ret    

c001c2e4 <sysPipe(regs*)>:
c001c2e4:	57                   	push   edi
c001c2e5:	56                   	push   esi
c001c2e6:	53                   	push   ebx
c001c2e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2eb:	83 ec 0c             	sub    esp,0xc
c001c2ee:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c2f1:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c2f4:	6a 20                	push   0x20
c001c2f6:	e8 45 35 ff ff       	call   c000f840 <malloc>
c001c2fb:	89 c3                	mov    ebx,eax
c001c2fd:	58                   	pop    eax
c001c2fe:	5a                   	pop    edx
c001c2ff:	68 00 50 00 00       	push   0x5000
c001c304:	53                   	push   ebx
c001c305:	e8 ea 41 ff ff       	call   c00104f4 <Pipe::Pipe(int)>
c001c30a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c30d:	e8 42 54 ff ff       	call   c0011754 <UnixFile::getFileDescriptor()>
c001c312:	89 07                	mov    DWORD PTR [edi],eax
c001c314:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c317:	e8 38 54 ff ff       	call   c0011754 <UnixFile::getFileDescriptor()>
c001c31c:	83 c4 10             	add    esp,0x10
c001c31f:	89 06                	mov    DWORD PTR [esi],eax
c001c321:	31 d2                	xor    edx,edx
c001c323:	5b                   	pop    ebx
c001c324:	31 c0                	xor    eax,eax
c001c326:	5e                   	pop    esi
c001c327:	5f                   	pop    edi
c001c328:	c3                   	ret    

c001c329 <sysGetUnixTime(regs*)>:
c001c329:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c001c32e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c334:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c338:	e9 4f 7b ff ff       	jmp    c0013e8c <Clock::timeInSecondsLocal()>

c001c33d <string_ends_with(char const*, char const*)>:
c001c33d:	57                   	push   edi
c001c33e:	56                   	push   esi
c001c33f:	53                   	push   ebx
c001c340:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c344:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c348:	83 ec 0c             	sub    esp,0xc
c001c34b:	53                   	push   ebx
c001c34c:	e8 43 44 fe ff       	call   c0000794 <strlen>
c001c351:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c354:	89 c6                	mov    esi,eax
c001c356:	e8 39 44 fe ff       	call   c0000794 <strlen>
c001c35b:	83 c4 10             	add    esp,0x10
c001c35e:	39 c6                	cmp    esi,eax
c001c360:	7d 06                	jge    c001c368 <string_ends_with(char const*, char const*)+0x2b>
c001c362:	5b                   	pop    ebx
c001c363:	31 c0                	xor    eax,eax
c001c365:	5e                   	pop    esi
c001c366:	5f                   	pop    edi
c001c367:	c3                   	ret    
c001c368:	83 ec 08             	sub    esp,0x8
c001c36b:	29 c6                	sub    esi,eax
c001c36d:	57                   	push   edi
c001c36e:	01 f3                	add    ebx,esi
c001c370:	53                   	push   ebx
c001c371:	e8 4a 45 fe ff       	call   c00008c0 <strcmp>
c001c376:	83 c4 10             	add    esp,0x10
c001c379:	85 c0                	test   eax,eax
c001c37b:	5b                   	pop    ebx
c001c37c:	0f 94 c0             	sete   al
c001c37f:	5e                   	pop    esi
c001c380:	0f b6 c0             	movzx  eax,al
c001c383:	5f                   	pop    edi
c001c384:	c3                   	ret    

c001c385 <sysCallOpen(regs*)>:
c001c385:	56                   	push   esi
c001c386:	53                   	push   ebx
c001c387:	81 ec 04 01 00 00    	sub    esp,0x104
c001c38d:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c394:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c397:	85 c9                	test   ecx,ecx
c001c399:	0f 84 b3 00 00 00    	je     c001c452 <sysCallOpen(regs*)+0xcd>
c001c39f:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c3a2:	85 c0                	test   eax,eax
c001c3a4:	0f 84 a8 00 00 00    	je     c001c452 <sysCallOpen(regs*)+0xcd>
c001c3aa:	52                   	push   edx
c001c3ab:	68 dd be 02 c0       	push   0xc002bedd
c001c3b0:	50                   	push   eax
c001c3b1:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c3b5:	56                   	push   esi
c001c3b6:	e8 3d 6f ff ff       	call   c00132f8 <Fs::standardiseFiles(char*, char const*, char const*)>
c001c3bb:	89 34 24             	mov    DWORD PTR [esp],esi
c001c3be:	e8 d1 43 fe ff       	call   c0000794 <strlen>
c001c3c3:	83 c4 10             	add    esp,0x10
c001c3c6:	48                   	dec    eax
c001c3c7:	74 1d                	je     c001c3e6 <sysCallOpen(regs*)+0x61>
c001c3c9:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c3cc:	eb 0f                	jmp    c001c3dd <sysCallOpen(regs*)+0x58>
c001c3ce:	80 fa 3a             	cmp    dl,0x3a
c001c3d1:	74 0f                	je     c001c3e2 <sysCallOpen(regs*)+0x5d>
c001c3d3:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c3d7:	48                   	dec    eax
c001c3d8:	74 0c                	je     c001c3e6 <sysCallOpen(regs*)+0x61>
c001c3da:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c3dd:	80 fa 2e             	cmp    dl,0x2e
c001c3e0:	75 ec                	jne    c001c3ce <sysCallOpen(regs*)+0x49>
c001c3e2:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c3e6:	83 ec 08             	sub    esp,0x8
c001c3e9:	68 e1 be 02 c0       	push   0xc002bee1
c001c3ee:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c3f1:	e8 47 ff ff ff       	call   c001c33d <string_ends_with(char const*, char const*)>
c001c3f6:	83 c4 10             	add    esp,0x10
c001c3f9:	85 c0                	test   eax,eax
c001c3fb:	75 17                	jne    c001c414 <sysCallOpen(regs*)+0x8f>
c001c3fd:	83 ec 08             	sub    esp,0x8
c001c400:	68 02 bf 02 c0       	push   0xc002bf02
c001c405:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c408:	e8 30 ff ff ff       	call   c001c33d <string_ends_with(char const*, char const*)>
c001c40d:	83 c4 10             	add    esp,0x10
c001c410:	85 c0                	test   eax,eax
c001c412:	74 51                	je     c001c465 <sysCallOpen(regs*)+0xe0>
c001c414:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c417:	83 ec 08             	sub    esp,0x8
c001c41a:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c420:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c427:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c42a:	ff 30                	push   DWORD PTR [eax]
c001c42c:	68 e6 be 02 c0       	push   0xc002bee6
c001c431:	e8 14 6b ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001c436:	c7 04 24 f5 be 02 c0 	mov    DWORD PTR [esp],0xc002bef5
c001c43d:	e8 08 6b ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001c442:	83 c4 10             	add    esp,0x10
c001c445:	81 c4 04 01 00 00    	add    esp,0x104
c001c44b:	31 c0                	xor    eax,eax
c001c44d:	31 d2                	xor    edx,edx
c001c44f:	5b                   	pop    ebx
c001c450:	5e                   	pop    esi
c001c451:	c3                   	ret    
c001c452:	81 c4 04 01 00 00    	add    esp,0x104
c001c458:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c45d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c462:	5b                   	pop    ebx
c001c463:	5e                   	pop    esi
c001c464:	c3                   	ret    
c001c465:	83 ec 08             	sub    esp,0x8
c001c468:	68 e2 be 02 c0       	push   0xc002bee2
c001c46d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c470:	e8 4b 44 fe ff       	call   c00008c0 <strcmp>
c001c475:	83 c4 10             	add    esp,0x10
c001c478:	85 c0                	test   eax,eax
c001c47a:	74 98                	je     c001c414 <sysCallOpen(regs*)+0x8f>
c001c47c:	83 ec 08             	sub    esp,0x8
c001c47f:	68 e1 be 02 c0       	push   0xc002bee1
c001c484:	56                   	push   esi
c001c485:	e8 b3 fe ff ff       	call   c001c33d <string_ends_with(char const*, char const*)>
c001c48a:	83 c4 10             	add    esp,0x10
c001c48d:	85 c0                	test   eax,eax
c001c48f:	75 83                	jne    c001c414 <sysCallOpen(regs*)+0x8f>
c001c491:	83 ec 08             	sub    esp,0x8
c001c494:	68 07 bf 02 c0       	push   0xc002bf07
c001c499:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c49c:	e8 9c fe ff ff       	call   c001c33d <string_ends_with(char const*, char const*)>
c001c4a1:	83 c4 10             	add    esp,0x10
c001c4a4:	85 c0                	test   eax,eax
c001c4a6:	0f 85 d9 00 00 00    	jne    c001c585 <sysCallOpen(regs*)+0x200>
c001c4ac:	83 ec 08             	sub    esp,0x8
c001c4af:	68 0c bf 02 c0       	push   0xc002bf0c
c001c4b4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c4b7:	e8 81 fe ff ff       	call   c001c33d <string_ends_with(char const*, char const*)>
c001c4bc:	83 c4 10             	add    esp,0x10
c001c4bf:	85 c0                	test   eax,eax
c001c4c1:	0f 85 be 00 00 00    	jne    c001c585 <sysCallOpen(regs*)+0x200>
c001c4c7:	83 ec 08             	sub    esp,0x8
c001c4ca:	68 08 bf 02 c0       	push   0xc002bf08
c001c4cf:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c4d2:	e8 e9 43 fe ff       	call   c00008c0 <strcmp>
c001c4d7:	83 c4 10             	add    esp,0x10
c001c4da:	85 c0                	test   eax,eax
c001c4dc:	0f 84 a3 00 00 00    	je     c001c585 <sysCallOpen(regs*)+0x200>
c001c4e2:	83 ec 08             	sub    esp,0x8
c001c4e5:	68 07 bf 02 c0       	push   0xc002bf07
c001c4ea:	56                   	push   esi
c001c4eb:	e8 4d fe ff ff       	call   c001c33d <string_ends_with(char const*, char const*)>
c001c4f0:	83 c4 10             	add    esp,0x10
c001c4f3:	85 c0                	test   eax,eax
c001c4f5:	0f 85 8a 00 00 00    	jne    c001c585 <sysCallOpen(regs*)+0x200>
c001c4fb:	83 ec 0c             	sub    esp,0xc
c001c4fe:	68 14 01 00 00       	push   0x114
c001c503:	e8 38 33 ff ff       	call   c000f840 <malloc>
c001c508:	83 c4 0c             	add    esp,0xc
c001c50b:	89 c6                	mov    esi,eax
c001c50d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c512:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c515:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c518:	56                   	push   esi
c001c519:	e8 84 6f ff ff       	call   c00134a2 <File::File(char const*, Process*)>
c001c51e:	83 c4 10             	add    esp,0x10
c001c521:	85 f6                	test   esi,esi
c001c523:	0f 84 29 ff ff ff    	je     c001c452 <sysCallOpen(regs*)+0xcd>
c001c529:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c52c:	0f b6 c2             	movzx  eax,dl
c001c52f:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c532:	89 d0                	mov    eax,edx
c001c534:	83 e0 01             	and    eax,0x1
c001c537:	f6 c2 02             	test   dl,0x2
c001c53a:	74 03                	je     c001c53f <sysCallOpen(regs*)+0x1ba>
c001c53c:	83 c8 02             	or     eax,0x2
c001c53f:	f6 c2 04             	test   dl,0x4
c001c542:	74 03                	je     c001c547 <sysCallOpen(regs*)+0x1c2>
c001c544:	83 c8 04             	or     eax,0x4
c001c547:	f6 c2 08             	test   dl,0x8
c001c54a:	74 03                	je     c001c54f <sysCallOpen(regs*)+0x1ca>
c001c54c:	83 c8 0a             	or     eax,0xa
c001c54f:	83 e2 10             	and    edx,0x10
c001c552:	74 03                	je     c001c557 <sysCallOpen(regs*)+0x1d2>
c001c554:	83 c8 12             	or     eax,0x12
c001c557:	83 ec 08             	sub    esp,0x8
c001c55a:	50                   	push   eax
c001c55b:	56                   	push   esi
c001c55c:	e8 a5 6f ff ff       	call   c0013506 <File::open(FileOpenMode)>
c001c561:	83 c4 10             	add    esp,0x10
c001c564:	85 c0                	test   eax,eax
c001c566:	0f 85 e6 fe ff ff    	jne    c001c452 <sysCallOpen(regs*)+0xcd>
c001c56c:	83 ec 0c             	sub    esp,0xc
c001c56f:	56                   	push   esi
c001c570:	e8 df 51 ff ff       	call   c0011754 <UnixFile::getFileDescriptor()>
c001c575:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c578:	89 02                	mov    DWORD PTR [edx],eax
c001c57a:	c1 f8 1f             	sar    eax,0x1f
c001c57d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c580:	e9 bd fe ff ff       	jmp    c001c442 <sysCallOpen(regs*)+0xbd>
c001c585:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c588:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c58e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c595:	e9 ab fe ff ff       	jmp    c001c445 <sysCallOpen(regs*)+0xc0>

c001c59a <Sys::loadSyscalls()>:
c001c59a:	c7 05 80 0f 03 c0 a7 b6 01 c0 	mov    DWORD PTR ds:0xc0030f80,0xc001b6a7
c001c5a4:	c7 05 84 0f 03 c0 90 b2 01 c0 	mov    DWORD PTR ds:0xc0030f84,0xc001b290
c001c5ae:	c7 05 88 0f 03 c0 fa b3 01 c0 	mov    DWORD PTR ds:0xc0030f88,0xc001b3fa
c001c5b8:	c7 05 8c 0f 03 c0 dd b5 01 c0 	mov    DWORD PTR ds:0xc0030f8c,0xc001b5dd
c001c5c2:	c7 05 90 0f 03 c0 92 b3 01 c0 	mov    DWORD PTR ds:0xc0030f90,0xc001b392
c001c5cc:	c7 05 94 0f 03 c0 c7 b2 01 c0 	mov    DWORD PTR ds:0xc0030f94,0xc001b2c7
c001c5d6:	c7 05 98 0f 03 c0 a8 b2 01 c0 	mov    DWORD PTR ds:0xc0030f98,0xc001b2a8
c001c5e0:	c7 05 9c 0f 03 c0 4f b4 01 c0 	mov    DWORD PTR ds:0xc0030f9c,0xc001b44f
c001c5ea:	c7 05 a4 0f 03 c0 d7 bb 01 c0 	mov    DWORD PTR ds:0xc0030fa4,0xc001bbd7
c001c5f4:	c7 05 a0 0f 03 c0 85 c3 01 c0 	mov    DWORD PTR ds:0xc0030fa0,0xc001c385
c001c5fe:	c7 05 a8 0f 03 c0 5f bc 01 c0 	mov    DWORD PTR ds:0xc0030fa8,0xc001bc5f
c001c608:	c7 05 ac 0f 03 c0 c6 b8 01 c0 	mov    DWORD PTR ds:0xc0030fac,0xc001b8c6
c001c612:	c7 05 b0 0f 03 c0 e2 b6 01 c0 	mov    DWORD PTR ds:0xc0030fb0,0xc001b6e2
c001c61c:	c7 05 b4 0f 03 c0 e7 b6 01 c0 	mov    DWORD PTR ds:0xc0030fb4,0xc001b6e7
c001c626:	c7 05 b8 0f 03 c0 3a bd 01 c0 	mov    DWORD PTR ds:0xc0030fb8,0xc001bd3a
c001c630:	c7 05 bc 0f 03 c0 d4 bc 01 c0 	mov    DWORD PTR ds:0xc0030fbc,0xc001bcd4
c001c63a:	c7 05 c0 0f 03 c0 ae b9 01 c0 	mov    DWORD PTR ds:0xc0030fc0,0xc001b9ae
c001c644:	c7 05 c4 0f 03 c0 17 ba 01 c0 	mov    DWORD PTR ds:0xc0030fc4,0xc001ba17
c001c64e:	c7 05 c8 0f 03 c0 94 ba 01 c0 	mov    DWORD PTR ds:0xc0030fc8,0xc001ba94
c001c658:	c7 05 cc 0f 03 c0 ec b6 01 c0 	mov    DWORD PTR ds:0xc0030fcc,0xc001b6ec
c001c662:	c7 05 d0 0f 03 c0 aa bd 01 c0 	mov    DWORD PTR ds:0xc0030fd0,0xc001bdaa
c001c66c:	c7 05 d4 0f 03 c0 c4 bd 01 c0 	mov    DWORD PTR ds:0xc0030fd4,0xc001bdc4
c001c676:	c7 05 d8 0f 03 c0 c4 bd 01 c0 	mov    DWORD PTR ds:0xc0030fd8,0xc001bdc4
c001c680:	c7 05 dc 0f 03 c0 05 be 01 c0 	mov    DWORD PTR ds:0xc0030fdc,0xc001be05
c001c68a:	c7 05 e0 0f 03 c0 69 be 01 c0 	mov    DWORD PTR ds:0xc0030fe0,0xc001be69
c001c694:	c7 05 e4 0f 03 c0 98 b8 01 c0 	mov    DWORD PTR ds:0xc0030fe4,0xc001b898
c001c69e:	c7 05 e8 0f 03 c0 cd be 01 c0 	mov    DWORD PTR ds:0xc0030fe8,0xc001becd
c001c6a8:	c7 05 ec 0f 03 c0 55 b8 01 c0 	mov    DWORD PTR ds:0xc0030fec,0xc001b855
c001c6b2:	c7 05 f0 0f 03 c0 19 bf 01 c0 	mov    DWORD PTR ds:0xc0030ff0,0xc001bf19
c001c6bc:	c7 05 f4 0f 03 c0 54 b9 01 c0 	mov    DWORD PTR ds:0xc0030ff4,0xc001b954
c001c6c6:	c7 05 f8 0f 03 c0 9c bf 01 c0 	mov    DWORD PTR ds:0xc0030ff8,0xc001bf9c
c001c6d0:	c7 05 fc 0f 03 c0 17 bb 01 c0 	mov    DWORD PTR ds:0xc0030ffc,0xc001bb17
c001c6da:	c7 05 00 10 03 c0 c3 bf 01 c0 	mov    DWORD PTR ds:0xc0031000,0xc001bfc3
c001c6e4:	c7 05 04 10 03 c0 1b c0 01 c0 	mov    DWORD PTR ds:0xc0031004,0xc001c01b
c001c6ee:	c7 05 08 10 03 c0 53 c1 01 c0 	mov    DWORD PTR ds:0xc0031008,0xc001c153
c001c6f8:	c7 05 0c 10 03 c0 f6 b6 01 c0 	mov    DWORD PTR ds:0xc003100c,0xc001b6f6
c001c702:	c7 05 10 10 03 c0 60 b7 01 c0 	mov    DWORD PTR ds:0xc0031010,0xc001b760
c001c70c:	c7 05 14 10 03 c0 a6 b7 01 c0 	mov    DWORD PTR ds:0xc0031014,0xc001b7a6
c001c716:	c7 05 18 10 03 c0 72 c2 01 c0 	mov    DWORD PTR ds:0xc0031018,0xc001c272
c001c720:	c7 05 1c 10 03 c0 df bd 01 c0 	mov    DWORD PTR ds:0xc003101c,0xc001bddf
c001c72a:	c7 05 20 10 03 c0 f7 b7 01 c0 	mov    DWORD PTR ds:0xc0031020,0xc001b7f7
c001c734:	c7 05 24 10 03 c0 e4 c2 01 c0 	mov    DWORD PTR ds:0xc0031024,0xc001c2e4
c001c73e:	c7 05 28 10 03 c0 29 c3 01 c0 	mov    DWORD PTR ds:0xc0031028,0xc001c329
c001c748:	c7 05 2c 10 03 c0 ea b2 01 c0 	mov    DWORD PTR ds:0xc003102c,0xc001b2ea
c001c752:	c7 05 30 10 03 c0 6b b4 01 c0 	mov    DWORD PTR ds:0xc0031030,0xc001b46b
c001c75c:	c7 05 34 10 03 c0 93 b5 01 c0 	mov    DWORD PTR ds:0xc0031034,0xc001b593
c001c766:	c7 05 38 10 03 c0 5a b2 01 c0 	mov    DWORD PTR ds:0xc0031038,0xc001b25a
c001c770:	c7 05 3c 10 03 c0 45 b6 01 c0 	mov    DWORD PTR ds:0xc003103c,0xc001b645
c001c77a:	c7 05 40 10 03 c0 d3 b2 01 c0 	mov    DWORD PTR ds:0xc0031040,0xc001b2d3
c001c784:	c3                   	ret    

c001c785 <Sys::systemCall(regs*, void*)>:
c001c785:	53                   	push   ebx
c001c786:	83 ec 08             	sub    esp,0x8
c001c789:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c78d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c790:	83 f8 7f             	cmp    eax,0x7f
c001c793:	77 16                	ja     c001c7ab <Sys::systemCall(regs*, void*)+0x26>
c001c795:	8b 14 85 80 0f 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf080]
c001c79c:	85 d2                	test   edx,edx
c001c79e:	74 0b                	je     c001c7ab <Sys::systemCall(regs*, void*)+0x26>
c001c7a0:	83 ec 0c             	sub    esp,0xc
c001c7a3:	53                   	push   ebx
c001c7a4:	ff d2                	call   edx
c001c7a6:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c7a9:	eb 0d                	jmp    c001c7b8 <Sys::systemCall(regs*, void*)+0x33>
c001c7ab:	52                   	push   edx
c001c7ac:	52                   	push   edx
c001c7ad:	50                   	push   eax
c001c7ae:	68 11 bf 02 c0       	push   0xc002bf11
c001c7b3:	e8 92 67 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001c7b8:	83 c4 10             	add    esp,0x10
c001c7bb:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c7c0:	31 d2                	xor    edx,edx
c001c7c2:	83 c4 08             	add    esp,0x8
c001c7c5:	5b                   	pop    ebx
c001c7c6:	c3                   	ret    

c001c7c7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c7c7:	55                   	push   ebp
c001c7c8:	57                   	push   edi
c001c7c9:	56                   	push   esi
c001c7ca:	53                   	push   ebx
c001c7cb:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c7d1:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c7d8:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c7df:	85 c0                	test   eax,eax
c001c7e1:	0f 95 c1             	setne  cl
c001c7e4:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c7ec:	0f 94 c2             	sete   dl
c001c7ef:	84 d1                	test   cl,dl
c001c7f1:	74 23                	je     c001c816 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c7f3:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c7f9:	74 1b                	je     c001c816 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c7fb:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c801:	89 da                	mov    edx,ebx
c001c803:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c809:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c80f:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c816:	8b 8c 24 48 10 00 00 	mov    ecx,DWORD PTR [esp+0x1048]
c001c81d:	05 ff 0f 00 00       	add    eax,0xfff
c001c822:	83 ec 0c             	sub    esp,0xc
c001c825:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c829:	8d a9 ff 0f 00 00    	lea    ebp,[ecx+0xfff]
c001c82f:	c1 e8 0c             	shr    eax,0xc
c001c832:	89 ef                	mov    edi,ebp
c001c834:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c838:	c1 ef 0c             	shr    edi,0xc
c001c83b:	6a 01                	push   0x1
c001c83d:	e8 5d 53 ff ff       	call   c0011b9f <Virt::allocateKernelVirtualPages(int)>
c001c842:	89 c6                	mov    esi,eax
c001c844:	58                   	pop    eax
c001c845:	5a                   	pop    edx
c001c846:	57                   	push   edi
c001c847:	68 97 bf 02 c0       	push   0xc002bf97
c001c84c:	e8 f9 66 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001c851:	59                   	pop    ecx
c001c852:	58                   	pop    eax
c001c853:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c857:	68 a9 bf 02 c0       	push   0xc002bfa9
c001c85c:	e8 e9 66 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001c861:	83 c4 10             	add    esp,0x10
c001c864:	81 fd ff 0f 00 00    	cmp    ebp,0xfff
c001c86a:	0f 86 24 01 00 00    	jbe    c001c994 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cd>
c001c870:	c1 e7 0c             	shl    edi,0xc
c001c873:	8d 04 1f             	lea    eax,[edi+ebx*1]
c001c876:	89 df                	mov    edi,ebx
c001c878:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c87c:	8b ac 24 48 10 00 00 	mov    ebp,DWORD PTR [esp+0x1048]
c001c883:	01 dd                	add    ebp,ebx
c001c885:	29 fd                	sub    ebp,edi
c001c887:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c001c88b:	0f 84 01 01 00 00    	je     c001c992 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c891:	81 fd 00 10 00 00    	cmp    ebp,0x1000
c001c897:	76 05                	jbe    c001c89e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xd7>
c001c899:	bd 00 10 00 00       	mov    ebp,0x1000
c001c89e:	83 ec 0c             	sub    esp,0xc
c001c8a1:	31 d2                	xor    edx,edx
c001c8a3:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c8aa:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c8ac:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c8b0:	50                   	push   eax
c001c8b1:	8d 44 24 30          	lea    eax,[esp+0x30]
c001c8b5:	50                   	push   eax
c001c8b6:	52                   	push   edx
c001c8b7:	55                   	push   ebp
c001c8b8:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c8bf:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c8c2:	83 c4 20             	add    esp,0x20
c001c8c5:	85 c0                	test   eax,eax
c001c8c7:	74 0a                	je     c001c8d3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x10c>
c001c8c9:	53                   	push   ebx
c001c8ca:	53                   	push   ebx
c001c8cb:	50                   	push   eax
c001c8cc:	68 bb bf 02 c0       	push   0xc002bfbb
c001c8d1:	eb 0f                	jmp    c001c8e2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x11b>
c001c8d3:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c001c8d7:	74 20                	je     c001c8f9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x132>
c001c8d9:	51                   	push   ecx
c001c8da:	51                   	push   ecx
c001c8db:	6a 00                	push   0x0
c001c8dd:	68 e6 bf 02 c0       	push   0xc002bfe6
c001c8e2:	e8 63 66 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001c8e7:	89 34 24             	mov    DWORD PTR [esp],esi
c001c8ea:	e8 20 57 ff ff       	call   c001200f <Virt::freeKernelVirtualPages(unsigned long)>
c001c8ef:	83 c4 10             	add    esp,0x10
c001c8f2:	31 c0                	xor    eax,eax
c001c8f4:	e9 55 01 00 00       	jmp    c001ca4e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x287>
c001c8f9:	e8 d8 14 00 00       	call   c001ddd6 <lockScheduler()>
c001c8fe:	e8 df 35 ff ff       	call   c000fee2 <Phys::allocatePage()>
c001c903:	6a 07                	push   0x7
c001c905:	89 c5                	mov    ebp,eax
c001c907:	56                   	push   esi
c001c908:	50                   	push   eax
c001c909:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c90e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c911:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c917:	e8 5a 5a ff ff       	call   c0012376 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c91c:	83 c4 0c             	add    esp,0xc
c001c91f:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c926:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c92c:	6a 00                	push   0x0
c001c92e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c933:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c936:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c93c:	e8 9f 58 ff ff       	call   c00121e0 <VAS::mapOtherVASIn(bool, VAS*)>
c001c941:	58                   	pop    eax
c001c942:	5a                   	pop    edx
c001c943:	68 07 0c 00 00       	push   0xc07
c001c948:	57                   	push   edi
c001c949:	81 c7 00 10 00 00    	add    edi,0x1000
c001c94f:	55                   	push   ebp
c001c950:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c957:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c95d:	6a 00                	push   0x0
c001c95f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c964:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c967:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c96d:	e8 be 5d ff ff       	call   c0012730 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c972:	83 c4 1c             	add    esp,0x1c
c001c975:	68 00 10 00 00       	push   0x1000
c001c97a:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c97e:	50                   	push   eax
c001c97f:	56                   	push   esi
c001c980:	e8 bf 3d fe ff       	call   c0000744 <memcpy>
c001c985:	e8 4e 14 00 00       	call   c001ddd8 <unlockScheduler()>
c001c98a:	83 c4 10             	add    esp,0x10
c001c98d:	e9 ea fe ff ff       	jmp    c001c87c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb5>
c001c992:	89 fb                	mov    ebx,edi
c001c994:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c99c:	0f 86 9e 00 00 00    	jbe    c001ca40 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c001c9a2:	e8 2f 14 00 00       	call   c001ddd6 <lockScheduler()>
c001c9a7:	51                   	push   ecx
c001c9a8:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c9af:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9b5:	6a 00                	push   0x0
c001c9b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c9bc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c9bf:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9c5:	e8 16 58 ff ff       	call   c00121e0 <VAS::mapOtherVASIn(bool, VAS*)>
c001c9ca:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c9ce:	c1 e7 0c             	shl    edi,0xc
c001c9d1:	01 df                	add    edi,ebx
c001c9d3:	83 c4 10             	add    esp,0x10
c001c9d6:	39 fb                	cmp    ebx,edi
c001c9d8:	74 61                	je     c001ca3b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x274>
c001c9da:	e8 03 35 ff ff       	call   c000fee2 <Phys::allocatePage()>
c001c9df:	6a 07                	push   0x7
c001c9e1:	89 c5                	mov    ebp,eax
c001c9e3:	56                   	push   esi
c001c9e4:	50                   	push   eax
c001c9e5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c9ea:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c9ed:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9f3:	e8 7e 59 ff ff       	call   c0012376 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c9f8:	58                   	pop    eax
c001c9f9:	5a                   	pop    edx
c001c9fa:	68 07 0c 00 00       	push   0xc07
c001c9ff:	53                   	push   ebx
c001ca00:	81 c3 00 10 00 00    	add    ebx,0x1000
c001ca06:	55                   	push   ebp
c001ca07:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001ca0e:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca14:	6a 00                	push   0x0
c001ca16:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca1b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ca1e:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca24:	e8 07 5d ff ff       	call   c0012730 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001ca29:	83 c4 1c             	add    esp,0x1c
c001ca2c:	68 00 10 00 00       	push   0x1000
c001ca31:	6a 00                	push   0x0
c001ca33:	56                   	push   esi
c001ca34:	e8 3f 3d fe ff       	call   c0000778 <memset>
c001ca39:	eb 98                	jmp    c001c9d3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x20c>
c001ca3b:	e8 98 13 00 00       	call   c001ddd8 <unlockScheduler()>
c001ca40:	83 ec 0c             	sub    esp,0xc
c001ca43:	56                   	push   esi
c001ca44:	e8 c6 55 ff ff       	call   c001200f <Virt::freeKernelVirtualPages(unsigned long)>
c001ca49:	83 c4 10             	add    esp,0x10
c001ca4c:	b0 01                	mov    al,0x1
c001ca4e:	81 c4 2c 10 00 00    	add    esp,0x102c
c001ca54:	5b                   	pop    ebx
c001ca55:	5e                   	pop    esi
c001ca56:	5f                   	pop    edi
c001ca57:	5d                   	pop    ebp
c001ca58:	c3                   	ret    

c001ca59 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001ca59:	55                   	push   ebp
c001ca5a:	57                   	push   edi
c001ca5b:	56                   	push   esi
c001ca5c:	53                   	push   ebx
c001ca5d:	83 ec 48             	sub    esp,0x48
c001ca60:	68 14 01 00 00       	push   0x114
c001ca65:	e8 d6 2d ff ff       	call   c000f840 <malloc>
c001ca6a:	83 c4 0c             	add    esp,0xc
c001ca6d:	89 c6                	mov    esi,eax
c001ca6f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001ca73:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001ca77:	50                   	push   eax
c001ca78:	e8 25 6a ff ff       	call   c00134a2 <File::File(char const*, Process*)>
c001ca7d:	58                   	pop    eax
c001ca7e:	5a                   	pop    edx
c001ca7f:	6a 01                	push   0x1
c001ca81:	56                   	push   esi
c001ca82:	e8 7f 6a ff ff       	call   c0013506 <File::open(FileOpenMode)>
c001ca87:	83 c4 10             	add    esp,0x10
c001ca8a:	85 c0                	test   eax,eax
c001ca8c:	0f 85 47 01 00 00    	jne    c001cbd9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ca92:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001ca9a:	83 ec 0c             	sub    esp,0xc
c001ca9d:	6a 34                	push   0x34
c001ca9f:	e8 9c 2d ff ff       	call   c000f840 <malloc>
c001caa4:	89 c3                	mov    ebx,eax
c001caa6:	58                   	pop    eax
c001caa7:	8b 06                	mov    eax,DWORD PTR [esi]
c001caa9:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001caad:	57                   	push   edi
c001caae:	53                   	push   ebx
c001caaf:	6a 00                	push   0x0
c001cab1:	6a 34                	push   0x34
c001cab3:	56                   	push   esi
c001cab4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cab7:	83 c4 20             	add    esp,0x20
c001caba:	85 c0                	test   eax,eax
c001cabc:	0f 85 17 01 00 00    	jne    c001cbd9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cac2:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001cac8:	0f 85 0b 01 00 00    	jne    c001cbd9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cace:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001cad1:	85 c0                	test   eax,eax
c001cad3:	0f 84 00 01 00 00    	je     c001cbd9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cad9:	31 d2                	xor    edx,edx
c001cadb:	55                   	push   ebp
c001cadc:	52                   	push   edx
c001cadd:	50                   	push   eax
c001cade:	56                   	push   esi
c001cadf:	e8 e0 6a ff ff       	call   c00135c4 <File::seek(unsigned long long)>
c001cae4:	83 c4 10             	add    esp,0x10
c001cae7:	85 c0                	test   eax,eax
c001cae9:	0f 85 ea 00 00 00    	jne    c001cbd9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001caef:	83 ec 0c             	sub    esp,0xc
c001caf2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001caf5:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001caf9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001cafd:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cb01:	0f af c2             	imul   eax,edx
c001cb04:	50                   	push   eax
c001cb05:	e8 36 2d ff ff       	call   c000f840 <malloc>
c001cb0a:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cb0c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cb10:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cb13:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cb17:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cb1b:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cb1f:	0f af c2             	imul   eax,edx
c001cb22:	99                   	cdq    
c001cb23:	52                   	push   edx
c001cb24:	50                   	push   eax
c001cb25:	56                   	push   esi
c001cb26:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cb29:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001cb2c:	83 c4 20             	add    esp,0x20
c001cb2f:	85 c0                	test   eax,eax
c001cb31:	0f 84 a2 00 00 00    	je     c001cbd9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb37:	31 d2                	xor    edx,edx
c001cb39:	51                   	push   ecx
c001cb3a:	52                   	push   edx
c001cb3b:	50                   	push   eax
c001cb3c:	56                   	push   esi
c001cb3d:	e8 82 6a ff ff       	call   c00135c4 <File::seek(unsigned long long)>
c001cb42:	83 c4 10             	add    esp,0x10
c001cb45:	85 c0                	test   eax,eax
c001cb47:	0f 85 8c 00 00 00    	jne    c001cbd9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb4d:	83 ec 0c             	sub    esp,0xc
c001cb50:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cb54:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cb58:	31 ed                	xor    ebp,ebp
c001cb5a:	0f af c2             	imul   eax,edx
c001cb5d:	50                   	push   eax
c001cb5e:	e8 dd 2c ff ff       	call   c000f840 <malloc>
c001cb63:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cb65:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cb69:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cb6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb70:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cb74:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cb78:	0f af c2             	imul   eax,edx
c001cb7b:	99                   	cdq    
c001cb7c:	52                   	push   edx
c001cb7d:	50                   	push   eax
c001cb7e:	56                   	push   esi
c001cb7f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cb82:	83 c4 20             	add    esp,0x20
c001cb85:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001cb8d:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001cb91:	0f 86 80 00 00 00    	jbe    c001cc17 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001cb97:	0f b7 fd             	movzx  edi,bp
c001cb9a:	c1 e7 05             	shl    edi,0x5
c001cb9d:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001cba1:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001cba4:	75 6b                	jne    c001cc11 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cba6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001cba9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cbad:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001cbb0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cbb4:	52                   	push   edx
c001cbb5:	31 d2                	xor    edx,edx
c001cbb7:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001cbba:	52                   	push   edx
c001cbbb:	50                   	push   eax
c001cbbc:	56                   	push   esi
c001cbbd:	e8 02 6a ff ff       	call   c00135c4 <File::seek(unsigned long long)>
c001cbc2:	83 c4 10             	add    esp,0x10
c001cbc5:	85 c0                	test   eax,eax
c001cbc7:	74 17                	je     c001cbe0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001cbc9:	83 ec 0c             	sub    esp,0xc
c001cbcc:	68 12 c0 02 c0       	push   0xc002c012
c001cbd1:	e8 74 63 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001cbd6:	83 c4 10             	add    esp,0x10
c001cbd9:	31 c0                	xor    eax,eax
c001cbdb:	e9 87 00 00 00       	jmp    c001cc67 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001cbe0:	83 ec 0c             	sub    esp,0xc
c001cbe3:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001cbe6:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001cbe9:	50                   	push   eax
c001cbea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001cbee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cbf2:	56                   	push   esi
c001cbf3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001cbf7:	e8 cb fb ff ff       	call   c001c7c7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001cbfc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cc00:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001cc04:	83 c4 20             	add    esp,0x20
c001cc07:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001cc0b:	73 04                	jae    c001cc11 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cc0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cc11:	45                   	inc    ebp
c001cc12:	e9 76 ff ff ff       	jmp    c001cb8d <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001cc17:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001cc1b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cc1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cc23:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001cc29:	83 ec 0c             	sub    esp,0xc
c001cc2c:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001cc32:	25 00 f0 ff ff       	and    eax,0xfffff000
c001cc37:	05 00 10 00 00       	add    eax,0x1000
c001cc3c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001cc3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc43:	e8 08 2c ff ff       	call   c000f850 <free>
c001cc48:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cc4b:	e8 00 2c ff ff       	call   c000f850 <free>
c001cc50:	58                   	pop    eax
c001cc51:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cc55:	e8 f6 2b ff ff       	call   c000f850 <free>
c001cc5a:	89 34 24             	mov    DWORD PTR [esp],esi
c001cc5d:	e8 02 69 ff ff       	call   c0013564 <File::close()>
c001cc62:	83 c4 10             	add    esp,0x10
c001cc65:	b0 01                	mov    al,0x1
c001cc67:	83 c4 3c             	add    esp,0x3c
c001cc6a:	5b                   	pop    ebx
c001cc6b:	5e                   	pop    esi
c001cc6c:	5f                   	pop    edi
c001cc6d:	5d                   	pop    ebp
c001cc6e:	c3                   	ret    

c001cc6f <Thr::runtimeReferenceHelper()>:
c001cc6f:	83 ec 18             	sub    esp,0x18
c001cc72:	68 1a c0 02 c0       	push   0xc002c01a
c001cc77:	e8 ce 62 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001cc7c:	fa                   	cli    
c001cc7d:	83 c4 10             	add    esp,0x10
c001cc80:	eb fe                	jmp    c001cc80 <Thr::runtimeReferenceHelper()+0x11>

c001cc82 <Thr::getAddressOfKernelSymbol(char const*)>:
c001cc82:	57                   	push   edi
c001cc83:	56                   	push   esi
c001cc84:	53                   	push   ebx
c001cc85:	31 db                	xor    ebx,ebx
c001cc87:	39 1d 20 19 03 c0    	cmp    DWORD PTR ds:0xc0031920,ebx
c001cc8d:	7e 3c                	jle    c001cccb <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001cc8f:	8b 34 9d a0 18 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffce760]
c001cc96:	31 ff                	xor    edi,edi
c001cc98:	39 3c 9d a0 17 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffce860],edi
c001cc9f:	7e 27                	jle    c001ccc8 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001cca1:	50                   	push   eax
c001cca2:	50                   	push   eax
c001cca3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cca7:	8b 06                	mov    eax,DWORD PTR [esi]
c001cca9:	03 04 9d 20 18 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffce7e0]
c001ccb0:	50                   	push   eax
c001ccb1:	e8 0a 3c fe ff       	call   c00008c0 <strcmp>
c001ccb6:	83 c4 10             	add    esp,0x10
c001ccb9:	85 c0                	test   eax,eax
c001ccbb:	75 05                	jne    c001ccc2 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001ccbd:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001ccc0:	eb 0b                	jmp    c001cccd <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001ccc2:	83 c6 10             	add    esi,0x10
c001ccc5:	47                   	inc    edi
c001ccc6:	eb d0                	jmp    c001cc98 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001ccc8:	43                   	inc    ebx
c001ccc9:	eb bc                	jmp    c001cc87 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001cccb:	31 c0                	xor    eax,eax
c001cccd:	5b                   	pop    ebx
c001ccce:	5e                   	pop    esi
c001cccf:	5f                   	pop    edi
c001ccd0:	c3                   	ret    

c001ccd1 <Thr::loadKernelSymbolTable(char const*)>:
c001ccd1:	55                   	push   ebp
c001ccd2:	57                   	push   edi
c001ccd3:	56                   	push   esi
c001ccd4:	53                   	push   ebx
c001ccd5:	83 ec 68             	sub    esp,0x68
c001ccd8:	8b 35 74 19 03 c0    	mov    esi,DWORD PTR ds:0xc0031974
c001ccde:	68 14 01 00 00       	push   0x114
c001cce3:	e8 58 2b ff ff       	call   c000f840 <malloc>
c001cce8:	83 c4 0c             	add    esp,0xc
c001cceb:	89 c3                	mov    ebx,eax
c001cced:	56                   	push   esi
c001ccee:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001ccf2:	50                   	push   eax
c001ccf3:	e8 aa 67 ff ff       	call   c00134a2 <File::File(char const*, Process*)>
c001ccf8:	5e                   	pop    esi
c001ccf9:	5f                   	pop    edi
c001ccfa:	6a 01                	push   0x1
c001ccfc:	53                   	push   ebx
c001ccfd:	e8 04 68 ff ff       	call   c0013506 <File::open(FileOpenMode)>
c001cd02:	83 c4 10             	add    esp,0x10
c001cd05:	85 c0                	test   eax,eax
c001cd07:	74 0a                	je     c001cd13 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001cd09:	83 ec 0c             	sub    esp,0xc
c001cd0c:	68 3c c0 02 c0       	push   0xc002c03c
c001cd11:	eb 34                	jmp    c001cd47 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001cd13:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001cd1b:	83 ec 0c             	sub    esp,0xc
c001cd1e:	6a 34                	push   0x34
c001cd20:	e8 1b 2b ff ff       	call   c000f840 <malloc>
c001cd25:	59                   	pop    ecx
c001cd26:	89 c7                	mov    edi,eax
c001cd28:	8d 74 24 34          	lea    esi,[esp+0x34]
c001cd2c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cd2e:	56                   	push   esi
c001cd2f:	57                   	push   edi
c001cd30:	6a 00                	push   0x0
c001cd32:	6a 34                	push   0x34
c001cd34:	53                   	push   ebx
c001cd35:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cd38:	83 c4 20             	add    esp,0x20
c001cd3b:	85 c0                	test   eax,eax
c001cd3d:	74 17                	je     c001cd56 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001cd3f:	83 ec 0c             	sub    esp,0xc
c001cd42:	68 53 c0 02 c0       	push   0xc002c053
c001cd47:	e8 af d8 ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c001cd4c:	83 c4 10             	add    esp,0x10
c001cd4f:	31 c0                	xor    eax,eax
c001cd51:	e9 31 02 00 00       	jmp    c001cf87 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001cd56:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001cd5c:	75 e1                	jne    c001cd3f <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cd5e:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001cd61:	85 c0                	test   eax,eax
c001cd63:	74 da                	je     c001cd3f <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cd65:	52                   	push   edx
c001cd66:	31 d2                	xor    edx,edx
c001cd68:	52                   	push   edx
c001cd69:	50                   	push   eax
c001cd6a:	53                   	push   ebx
c001cd6b:	e8 54 68 ff ff       	call   c00135c4 <File::seek(unsigned long long)>
c001cd70:	83 c4 10             	add    esp,0x10
c001cd73:	85 c0                	test   eax,eax
c001cd75:	75 c8                	jne    c001cd3f <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cd77:	83 ec 0c             	sub    esp,0xc
c001cd7a:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cd7e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cd82:	31 ed                	xor    ebp,ebp
c001cd84:	0f af c2             	imul   eax,edx
c001cd87:	50                   	push   eax
c001cd88:	e8 b3 2a ff ff       	call   c000f840 <malloc>
c001cd8d:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cd8f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cd93:	89 34 24             	mov    DWORD PTR [esp],esi
c001cd96:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cd9a:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cd9e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cda2:	0f af c2             	imul   eax,edx
c001cda5:	99                   	cdq    
c001cda6:	52                   	push   edx
c001cda7:	50                   	push   eax
c001cda8:	53                   	push   ebx
c001cda9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cdac:	83 c4 20             	add    esp,0x20
c001cdaf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cdb7:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001cdbf:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001cdc7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001cdcf:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001cdd3:	0f 86 aa 00 00 00    	jbe    c001ce83 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001cdd9:	0f b7 f5             	movzx  esi,bp
c001cddc:	6b f6 28             	imul   esi,esi,0x28
c001cddf:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001cde3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001cde6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cdea:	50                   	push   eax
c001cdeb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cdef:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001cdf3:	8b 16                	mov    edx,DWORD PTR [esi]
c001cdf5:	6b c0 28             	imul   eax,eax,0x28
c001cdf8:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001cdfc:	89 d0                	mov    eax,edx
c001cdfe:	31 d2                	xor    edx,edx
c001ce00:	52                   	push   edx
c001ce01:	50                   	push   eax
c001ce02:	53                   	push   ebx
c001ce03:	e8 bc 67 ff ff       	call   c00135c4 <File::seek(unsigned long long)>
c001ce08:	83 c4 0c             	add    esp,0xc
c001ce0b:	6a 20                	push   0x20
c001ce0d:	6a 00                	push   0x0
c001ce0f:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001ce13:	52                   	push   edx
c001ce14:	e8 5f 39 fe ff       	call   c0000778 <memset>
c001ce19:	58                   	pop    eax
c001ce1a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ce1c:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001ce20:	51                   	push   ecx
c001ce21:	8d 54 24 40          	lea    edx,[esp+0x40]
c001ce25:	52                   	push   edx
c001ce26:	6a 00                	push   0x0
c001ce28:	6a 1f                	push   0x1f
c001ce2a:	53                   	push   ebx
c001ce2b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ce2e:	83 c4 18             	add    esp,0x18
c001ce31:	68 6a c0 02 c0       	push   0xc002c06a
c001ce36:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001ce3a:	52                   	push   edx
c001ce3b:	e8 80 3a fe ff       	call   c00008c0 <strcmp>
c001ce40:	83 c4 10             	add    esp,0x10
c001ce43:	85 c0                	test   eax,eax
c001ce45:	75 0f                	jne    c001ce56 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001ce47:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ce4a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ce4e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ce52:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ce56:	50                   	push   eax
c001ce57:	50                   	push   eax
c001ce58:	68 72 c0 02 c0       	push   0xc002c072
c001ce5d:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001ce61:	50                   	push   eax
c001ce62:	e8 59 3a fe ff       	call   c00008c0 <strcmp>
c001ce67:	83 c4 10             	add    esp,0x10
c001ce6a:	85 c0                	test   eax,eax
c001ce6c:	75 0f                	jne    c001ce7d <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001ce6e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ce71:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ce75:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ce79:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ce7d:	45                   	inc    ebp
c001ce7e:	e9 4c ff ff ff       	jmp    c001cdcf <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001ce83:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ce88:	75 10                	jne    c001ce9a <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001ce8a:	83 ec 0c             	sub    esp,0xc
c001ce8d:	68 7a c0 02 c0       	push   0xc002c07a
c001ce92:	e8 64 d7 ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c001ce97:	83 c4 10             	add    esp,0x10
c001ce9a:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001ce9f:	75 10                	jne    c001ceb1 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001cea1:	83 ec 0c             	sub    esp,0xc
c001cea4:	68 7a c0 02 c0       	push   0xc002c07a
c001cea9:	e8 4d d7 ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c001ceae:	83 c4 10             	add    esp,0x10
c001ceb1:	31 d2                	xor    edx,edx
c001ceb3:	50                   	push   eax
c001ceb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ceb8:	52                   	push   edx
c001ceb9:	50                   	push   eax
c001ceba:	53                   	push   ebx
c001cebb:	e8 04 67 ff ff       	call   c00135c4 <File::seek(unsigned long long)>
c001cec0:	5a                   	pop    edx
c001cec1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cec5:	e8 76 29 ff ff       	call   c000f840 <malloc>
c001ceca:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cece:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ced2:	31 c9                	xor    ecx,ecx
c001ced4:	5e                   	pop    esi
c001ced5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ced7:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001cedb:	55                   	push   ebp
c001cedc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cee0:	51                   	push   ecx
c001cee1:	52                   	push   edx
c001cee2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001cee6:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001ceea:	53                   	push   ebx
c001ceeb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ceee:	83 c4 14             	add    esp,0x14
c001cef1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cef5:	e8 46 29 ff ff       	call   c000f840 <malloc>
c001cefa:	89 c6                	mov    esi,eax
c001cefc:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cefe:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cf01:	56                   	push   esi
c001cf02:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cf06:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001cf0a:	51                   	push   ecx
c001cf0b:	52                   	push   edx
c001cf0c:	53                   	push   ebx
c001cf0d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cf10:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cf14:	8b 15 20 19 03 c0    	mov    edx,DWORD PTR ds:0xc0031920
c001cf1a:	83 c4 1c             	add    esp,0x1c
c001cf1d:	c1 e8 04             	shr    eax,0x4
c001cf20:	89 04 95 a0 17 03 c0 	mov    DWORD PTR [edx*4-0x3ffce860],eax
c001cf27:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cf2b:	31 d2                	xor    edx,edx
c001cf2d:	52                   	push   edx
c001cf2e:	50                   	push   eax
c001cf2f:	53                   	push   ebx
c001cf30:	e8 8f 66 ff ff       	call   c00135c4 <File::seek(unsigned long long)>
c001cf35:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cf37:	31 d2                	xor    edx,edx
c001cf39:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cf3c:	56                   	push   esi
c001cf3d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cf41:	52                   	push   edx
c001cf42:	50                   	push   eax
c001cf43:	53                   	push   ebx
c001cf44:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cf47:	83 c4 14             	add    esp,0x14
c001cf4a:	53                   	push   ebx
c001cf4b:	e8 14 66 ff ff       	call   c0013564 <File::close()>
c001cf50:	5d                   	pop    ebp
c001cf51:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cf55:	e8 f6 28 ff ff       	call   c000f850 <free>
c001cf5a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cf5d:	e8 ee 28 ff ff       	call   c000f850 <free>
c001cf62:	a1 20 19 03 c0       	mov    eax,ds:0xc0031920
c001cf67:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cf6b:	8d 50 01             	lea    edx,[eax+0x1]
c001cf6e:	89 0c 85 a0 18 03 c0 	mov    DWORD PTR [eax*4-0x3ffce760],ecx
c001cf75:	89 34 85 20 18 03 c0 	mov    DWORD PTR [eax*4-0x3ffce7e0],esi
c001cf7c:	89 15 20 19 03 c0    	mov    DWORD PTR ds:0xc0031920,edx
c001cf82:	83 c4 10             	add    esp,0x10
c001cf85:	b0 01                	mov    al,0x1
c001cf87:	83 c4 5c             	add    esp,0x5c
c001cf8a:	5b                   	pop    ebx
c001cf8b:	5e                   	pop    esi
c001cf8c:	5f                   	pop    edi
c001cf8d:	5d                   	pop    ebp
c001cf8e:	c3                   	ret    

c001cf8f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001cf8f:	55                   	push   ebp
c001cf90:	57                   	push   edi
c001cf91:	56                   	push   esi
c001cf92:	53                   	push   ebx
c001cf93:	81 ec 68 03 00 00    	sub    esp,0x368
c001cf99:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001cfa0:	8b 1d 74 19 03 c0    	mov    ebx,DWORD PTR ds:0xc0031974
c001cfa6:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001cfaa:	68 14 01 00 00       	push   0x114
c001cfaf:	e8 8c 28 ff ff       	call   c000f840 <malloc>
c001cfb4:	83 c4 0c             	add    esp,0xc
c001cfb7:	89 c5                	mov    ebp,eax
c001cfb9:	53                   	push   ebx
c001cfba:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001cfc1:	50                   	push   eax
c001cfc2:	e8 db 64 ff ff       	call   c00134a2 <File::File(char const*, Process*)>
c001cfc7:	5e                   	pop    esi
c001cfc8:	5f                   	pop    edi
c001cfc9:	6a 01                	push   0x1
c001cfcb:	55                   	push   ebp
c001cfcc:	e8 35 65 ff ff       	call   c0013506 <File::open(FileOpenMode)>
c001cfd1:	83 c4 10             	add    esp,0x10
c001cfd4:	85 c0                	test   eax,eax
c001cfd6:	0f 85 8d 06 00 00    	jne    c001d669 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cfdc:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001cfe4:	83 ec 0c             	sub    esp,0xc
c001cfe7:	6a 34                	push   0x34
c001cfe9:	e8 52 28 ff ff       	call   c000f840 <malloc>
c001cfee:	5b                   	pop    ebx
c001cfef:	89 c7                	mov    edi,eax
c001cff1:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001cff5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cff8:	53                   	push   ebx
c001cff9:	57                   	push   edi
c001cffa:	6a 00                	push   0x0
c001cffc:	6a 34                	push   0x34
c001cffe:	55                   	push   ebp
c001cfff:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d002:	83 c4 20             	add    esp,0x20
c001d005:	85 c0                	test   eax,eax
c001d007:	0f 85 5c 06 00 00    	jne    c001d669 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d00d:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001d013:	0f 85 50 06 00 00    	jne    c001d669 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d019:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001d01c:	85 c0                	test   eax,eax
c001d01e:	0f 84 45 06 00 00    	je     c001d669 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d024:	31 d2                	xor    edx,edx
c001d026:	51                   	push   ecx
c001d027:	52                   	push   edx
c001d028:	50                   	push   eax
c001d029:	55                   	push   ebp
c001d02a:	e8 95 65 ff ff       	call   c00135c4 <File::seek(unsigned long long)>
c001d02f:	83 c4 10             	add    esp,0x10
c001d032:	85 c0                	test   eax,eax
c001d034:	0f 85 2f 06 00 00    	jne    c001d669 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d03a:	83 ec 0c             	sub    esp,0xc
c001d03d:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001d040:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d044:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001d048:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d04c:	0f af c2             	imul   eax,edx
c001d04f:	50                   	push   eax
c001d050:	e8 eb 27 ff ff       	call   c000f840 <malloc>
c001d055:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d058:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d05c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d05f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d063:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d067:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d06b:	0f af c2             	imul   eax,edx
c001d06e:	99                   	cdq    
c001d06f:	52                   	push   edx
c001d070:	50                   	push   eax
c001d071:	55                   	push   ebp
c001d072:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d075:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001d078:	83 c4 20             	add    esp,0x20
c001d07b:	85 c0                	test   eax,eax
c001d07d:	0f 84 e6 05 00 00    	je     c001d669 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d083:	52                   	push   edx
c001d084:	31 d2                	xor    edx,edx
c001d086:	52                   	push   edx
c001d087:	50                   	push   eax
c001d088:	55                   	push   ebp
c001d089:	e8 36 65 ff ff       	call   c00135c4 <File::seek(unsigned long long)>
c001d08e:	83 c4 10             	add    esp,0x10
c001d091:	85 c0                	test   eax,eax
c001d093:	0f 85 d0 05 00 00    	jne    c001d669 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d099:	83 ec 0c             	sub    esp,0xc
c001d09c:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d0a0:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d0a4:	31 f6                	xor    esi,esi
c001d0a6:	0f af c2             	imul   eax,edx
c001d0a9:	50                   	push   eax
c001d0aa:	e8 91 27 ff ff       	call   c000f840 <malloc>
c001d0af:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d0b2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d0b6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d0b9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d0bd:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d0c1:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d0c5:	0f af c2             	imul   eax,edx
c001d0c8:	99                   	cdq    
c001d0c9:	52                   	push   edx
c001d0ca:	50                   	push   eax
c001d0cb:	55                   	push   ebp
c001d0cc:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d0cf:	83 c4 20             	add    esp,0x20
c001d0d2:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001d0d6:	0f 86 8a 00 00 00    	jbe    c001d166 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001d0dc:	0f b7 de             	movzx  ebx,si
c001d0df:	c1 e3 05             	shl    ebx,0x5
c001d0e2:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001d0e6:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001d0e9:	75 75                	jne    c001d160 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001d0eb:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d0ee:	31 d2                	xor    edx,edx
c001d0f0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d0f4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d0f7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d0fb:	50                   	push   eax
c001d0fc:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001d0ff:	52                   	push   edx
c001d100:	50                   	push   eax
c001d101:	55                   	push   ebp
c001d102:	e8 bd 64 ff ff       	call   c00135c4 <File::seek(unsigned long long)>
c001d107:	83 c4 10             	add    esp,0x10
c001d10a:	85 c0                	test   eax,eax
c001d10c:	0f 85 57 05 00 00    	jne    c001d669 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d112:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001d119:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d11c:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001d120:	31 d2                	xor    edx,edx
c001d122:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d126:	83 ec 0c             	sub    esp,0xc
c001d129:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d12d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d134:	50                   	push   eax
c001d135:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d139:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d13d:	52                   	push   edx
c001d13e:	50                   	push   eax
c001d13f:	55                   	push   ebp
c001d140:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d143:	83 c4 1c             	add    esp,0x1c
c001d146:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d149:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001d14c:	50                   	push   eax
c001d14d:	6a 00                	push   0x0
c001d14f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d153:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001d157:	50                   	push   eax
c001d158:	e8 1b 36 fe ff       	call   c0000778 <memset>
c001d15d:	83 c4 10             	add    esp,0x10
c001d160:	46                   	inc    esi
c001d161:	e9 6c ff ff ff       	jmp    c001d0d2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001d166:	53                   	push   ebx
c001d167:	31 db                	xor    ebx,ebx
c001d169:	68 00 01 00 00       	push   0x100
c001d16e:	6a 00                	push   0x0
c001d170:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001d174:	50                   	push   eax
c001d175:	e8 fe 35 fe ff       	call   c0000778 <memset>
c001d17a:	83 c4 0c             	add    esp,0xc
c001d17d:	68 00 01 00 00       	push   0x100
c001d182:	6a 00                	push   0x0
c001d184:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001d18b:	50                   	push   eax
c001d18c:	e8 e7 35 fe ff       	call   c0000778 <memset>
c001d191:	83 c4 10             	add    esp,0x10
c001d194:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d19c:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d1a4:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001d1ac:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d1b4:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d1bc:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d1c0:	0f 86 30 01 00 00    	jbe    c001d2f6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d1c6:	0f b7 f3             	movzx  esi,bx
c001d1c9:	6b f6 28             	imul   esi,esi,0x28
c001d1cc:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d1d0:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d1d3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d1d7:	52                   	push   edx
c001d1d8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d1dc:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d1e0:	8b 06                	mov    eax,DWORD PTR [esi]
c001d1e2:	6b d2 28             	imul   edx,edx,0x28
c001d1e5:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d1e9:	31 d2                	xor    edx,edx
c001d1eb:	52                   	push   edx
c001d1ec:	50                   	push   eax
c001d1ed:	55                   	push   ebp
c001d1ee:	e8 d1 63 ff ff       	call   c00135c4 <File::seek(unsigned long long)>
c001d1f3:	83 c4 0c             	add    esp,0xc
c001d1f6:	6a 20                	push   0x20
c001d1f8:	6a 00                	push   0x0
c001d1fa:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d201:	51                   	push   ecx
c001d202:	e8 71 35 fe ff       	call   c0000778 <memset>
c001d207:	59                   	pop    ecx
c001d208:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d20b:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d20f:	52                   	push   edx
c001d210:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d217:	51                   	push   ecx
c001d218:	6a 00                	push   0x0
c001d21a:	6a 1f                	push   0x1f
c001d21c:	55                   	push   ebp
c001d21d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d220:	83 c4 1c             	add    esp,0x1c
c001d223:	6a 09                	push   0x9
c001d225:	68 94 c0 02 c0       	push   0xc002c094
c001d22a:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d231:	51                   	push   ecx
c001d232:	e8 09 34 fe ff       	call   c0000640 <memcmp>
c001d237:	83 c4 10             	add    esp,0x10
c001d23a:	85 c0                	test   eax,eax
c001d23c:	75 21                	jne    c001d25f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d23e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d242:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d246:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d24a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d24e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d251:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d258:	89 d0                	mov    eax,edx
c001d25a:	40                   	inc    eax
c001d25b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d25f:	50                   	push   eax
c001d260:	6a 09                	push   0x9
c001d262:	68 9e c0 02 c0       	push   0xc002c09e
c001d267:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d26e:	50                   	push   eax
c001d26f:	e8 cc 33 fe ff       	call   c0000640 <memcmp>
c001d274:	83 c4 10             	add    esp,0x10
c001d277:	85 c0                	test   eax,eax
c001d279:	75 21                	jne    c001d29c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d27b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d27f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d283:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d287:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d28b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d28e:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d295:	89 d0                	mov    eax,edx
c001d297:	40                   	inc    eax
c001d298:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d29c:	50                   	push   eax
c001d29d:	50                   	push   eax
c001d29e:	68 6a c0 02 c0       	push   0xc002c06a
c001d2a3:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d2aa:	50                   	push   eax
c001d2ab:	e8 10 36 fe ff       	call   c00008c0 <strcmp>
c001d2b0:	83 c4 10             	add    esp,0x10
c001d2b3:	85 c0                	test   eax,eax
c001d2b5:	75 0f                	jne    c001d2c6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d2b7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d2ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d2be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d2c2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d2c6:	50                   	push   eax
c001d2c7:	50                   	push   eax
c001d2c8:	68 72 c0 02 c0       	push   0xc002c072
c001d2cd:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d2d4:	50                   	push   eax
c001d2d5:	e8 e6 35 fe ff       	call   c00008c0 <strcmp>
c001d2da:	83 c4 10             	add    esp,0x10
c001d2dd:	85 c0                	test   eax,eax
c001d2df:	75 0f                	jne    c001d2f0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d2e1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d2e4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d2e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d2ec:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d2f0:	43                   	inc    ebx
c001d2f1:	e9 c6 fe ff ff       	jmp    c001d1bc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d2f6:	31 d2                	xor    edx,edx
c001d2f8:	50                   	push   eax
c001d2f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d2fd:	52                   	push   edx
c001d2fe:	50                   	push   eax
c001d2ff:	55                   	push   ebp
c001d300:	e8 bf 62 ff ff       	call   c00135c4 <File::seek(unsigned long long)>
c001d305:	58                   	pop    eax
c001d306:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d30a:	e8 31 25 ff ff       	call   c000f840 <malloc>
c001d30f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d312:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d316:	31 d2                	xor    edx,edx
c001d318:	58                   	pop    eax
c001d319:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d31d:	53                   	push   ebx
c001d31e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d322:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d326:	52                   	push   edx
c001d327:	50                   	push   eax
c001d328:	55                   	push   ebp
c001d329:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d32c:	83 c4 14             	add    esp,0x14
c001d32f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d333:	e8 08 25 ff ff       	call   c000f840 <malloc>
c001d338:	31 d2                	xor    edx,edx
c001d33a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d33e:	83 c4 0c             	add    esp,0xc
c001d341:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d345:	52                   	push   edx
c001d346:	50                   	push   eax
c001d347:	55                   	push   ebp
c001d348:	e8 77 62 ff ff       	call   c00135c4 <File::seek(unsigned long long)>
c001d34d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d350:	31 d2                	xor    edx,edx
c001d352:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d355:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d359:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d35d:	52                   	push   edx
c001d35e:	50                   	push   eax
c001d35f:	55                   	push   ebp
c001d360:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d363:	83 c4 20             	add    esp,0x20
c001d366:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d36e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d372:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d376:	0f 84 f1 02 00 00    	je     c001d66d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6de>
c001d37c:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d383:	31 d2                	xor    edx,edx
c001d385:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d389:	c1 e8 03             	shr    eax,0x3
c001d38c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d390:	51                   	push   ecx
c001d391:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d395:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d399:	52                   	push   edx
c001d39a:	50                   	push   eax
c001d39b:	55                   	push   ebp
c001d39c:	e8 23 62 ff ff       	call   c00135c4 <File::seek(unsigned long long)>
c001d3a1:	5b                   	pop    ebx
c001d3a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3a6:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d3ad:	e8 8e 24 ff ff       	call   c000f840 <malloc>
c001d3b2:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d3b5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d3b9:	31 d2                	xor    edx,edx
c001d3bb:	5e                   	pop    esi
c001d3bc:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d3c0:	50                   	push   eax
c001d3c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d3c5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d3c9:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d3d0:	52                   	push   edx
c001d3d1:	50                   	push   eax
c001d3d2:	55                   	push   ebp
c001d3d3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d3d6:	83 c4 20             	add    esp,0x20
c001d3d9:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d3e1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d3e5:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d3e9:	0f 8d 62 02 00 00    	jge    c001d651 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c2>
c001d3ef:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d3f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d3f7:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d3fc:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d3ff:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d403:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d407:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d40b:	89 d8                	mov    eax,ebx
c001d40d:	c1 e8 08             	shr    eax,0x8
c001d410:	89 c6                	mov    esi,eax
c001d412:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d416:	c1 e6 04             	shl    esi,0x4
c001d419:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d41d:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d420:	85 d2                	test   edx,edx
c001d422:	0f 85 bf 00 00 00    	jne    c001d4e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d428:	83 ec 0c             	sub    esp,0xc
c001d42b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d42f:	03 06                	add    eax,DWORD PTR [esi]
c001d431:	50                   	push   eax
c001d432:	e8 4b f8 ff ff       	call   c001cc82 <Thr::getAddressOfKernelSymbol(char const*)>
c001d437:	83 c4 10             	add    esp,0x10
c001d43a:	89 c2                	mov    edx,eax
c001d43c:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d441:	85 c0                	test   eax,eax
c001d443:	0f 85 9e 00 00 00    	jne    c001d4e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d449:	83 ec 0c             	sub    esp,0xc
c001d44c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d450:	03 06                	add    eax,DWORD PTR [esi]
c001d452:	50                   	push   eax
c001d453:	e8 9d 10 ff ff       	call   c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>
c001d458:	83 c4 10             	add    esp,0x10
c001d45b:	89 c2                	mov    edx,eax
c001d45d:	85 c0                	test   eax,eax
c001d45f:	0f 85 82 00 00 00    	jne    c001d4e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d465:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d469:	50                   	push   eax
c001d46a:	50                   	push   eax
c001d46b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d46f:	03 06                	add    eax,DWORD PTR [esi]
c001d471:	50                   	push   eax
c001d472:	68 a8 c0 02 c0       	push   0xc002c0a8
c001d477:	e8 ce 5a ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001d47c:	58                   	pop    eax
c001d47d:	5a                   	pop    edx
c001d47e:	68 c2 c0 02 c0       	push   0xc002c0c2
c001d483:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d48a:	50                   	push   eax
c001d48b:	e8 a4 33 fe ff       	call   c0000834 <strcpy>
c001d490:	59                   	pop    ecx
c001d491:	58                   	pop    eax
c001d492:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d496:	03 06                	add    eax,DWORD PTR [esi]
c001d498:	50                   	push   eax
c001d499:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d4a0:	50                   	push   eax
c001d4a1:	e8 ce 34 fe ff       	call   c0000974 <strcat>
c001d4a6:	58                   	pop    eax
c001d4a7:	5a                   	pop    edx
c001d4a8:	68 58 c1 02 c0       	push   0xc002c158
c001d4ad:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d4b4:	50                   	push   eax
c001d4b5:	e8 ba 34 fe ff       	call   c0000974 <strcat>
c001d4ba:	83 c4 10             	add    esp,0x10
c001d4bd:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d4c2:	0f 84 43 01 00 00    	je     c001d60b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d4c8:	83 ec 0c             	sub    esp,0xc
c001d4cb:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d4d2:	50                   	push   eax
c001d4d3:	e8 23 d1 ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c001d4d8:	83 c4 10             	add    esp,0x10
c001d4db:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d4df:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d4e3:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d4e7:	80 fb 01             	cmp    bl,0x1
c001d4ea:	75 7d                	jne    c001d569 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5da>
c001d4ec:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d4f3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d4f7:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d4fb:	01 ce                	add    esi,ecx
c001d4fd:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d503:	0f 94 c0             	sete   al
c001d506:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d50c:	0f 94 c3             	sete   bl
c001d50f:	09 c3                	or     ebx,eax
c001d511:	8b 06                	mov    eax,DWORD PTR [esi]
c001d513:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d518:	74 36                	je     c001d550 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c1>
c001d51a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d51d:	84 db                	test   bl,bl
c001d51f:	75 0a                	jne    c001d52b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x59c>
c001d521:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d525:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d529:	76 37                	jbe    c001d562 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d52b:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d52f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d534:	0f 84 d1 00 00 00    	je     c001d60b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d53a:	83 ec 0c             	sub    esp,0xc
c001d53d:	68 d9 c0 02 c0       	push   0xc002c0d9
c001d542:	e8 b4 d0 ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c001d547:	83 c4 10             	add    esp,0x10
c001d54a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d54e:	eb 12                	jmp    c001d562 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d550:	01 c1                	add    ecx,eax
c001d552:	84 db                	test   bl,bl
c001d554:	75 0c                	jne    c001d562 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d556:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d55a:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d55e:	77 02                	ja     c001d562 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d560:	01 d1                	add    ecx,edx
c001d562:	89 0e                	mov    DWORD PTR [esi],ecx
c001d564:	e9 df 00 00 00       	jmp    c001d648 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d569:	80 fb 02             	cmp    bl,0x2
c001d56c:	75 71                	jne    c001d5df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x650>
c001d56e:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d575:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d579:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d57d:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d583:	74 15                	je     c001d59a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d585:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d58b:	74 0d                	je     c001d59a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d58d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d591:	83 e8 04             	sub    eax,0x4
c001d594:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d598:	76 1f                	jbe    c001d5b9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62a>
c001d59a:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d59e:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d5a3:	74 66                	je     c001d60b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d5a5:	83 ec 0c             	sub    esp,0xc
c001d5a8:	68 f5 c0 02 c0       	push   0xc002c0f5
c001d5ad:	e8 49 d0 ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c001d5b2:	83 c4 10             	add    esp,0x10
c001d5b5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d5b9:	8b 06                	mov    eax,DWORD PTR [esi]
c001d5bb:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d5c0:	74 13                	je     c001d5d5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x646>
c001d5c2:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d5c6:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d5cd:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d5d1:	01 c8                	add    eax,ecx
c001d5d3:	eb 04                	jmp    c001d5d9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c001d5d5:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d5d9:	01 c2                	add    edx,eax
c001d5db:	89 16                	mov    DWORD PTR [esi],edx
c001d5dd:	eb 69                	jmp    c001d648 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d5df:	0f b6 db             	movzx  ebx,bl
c001d5e2:	50                   	push   eax
c001d5e3:	50                   	push   eax
c001d5e4:	53                   	push   ebx
c001d5e5:	68 11 c1 02 c0       	push   0xc002c111
c001d5ea:	e8 5b 59 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001d5ef:	83 c4 10             	add    esp,0x10
c001d5f2:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d5f7:	74 12                	je     c001d60b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d5f9:	83 ec 0c             	sub    esp,0xc
c001d5fc:	68 1c c1 02 c0       	push   0xc002c11c
c001d601:	e8 f5 cf ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c001d606:	83 c4 10             	add    esp,0x10
c001d609:	eb 3d                	jmp    c001d648 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d60b:	83 ec 0c             	sub    esp,0xc
c001d60e:	55                   	push   ebp
c001d60f:	e8 50 5f ff ff       	call   c0013564 <File::close()>
c001d614:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d617:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d61a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d61d:	59                   	pop    ecx
c001d61e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d622:	e8 29 22 ff ff       	call   c000f850 <free>
c001d627:	5b                   	pop    ebx
c001d628:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d62c:	e8 1f 22 ff ff       	call   c000f850 <free>
c001d631:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d634:	e8 17 22 ff ff       	call   c000f850 <free>
c001d639:	5e                   	pop    esi
c001d63a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d63e:	e8 0d 22 ff ff       	call   c000f850 <free>
c001d643:	83 c4 10             	add    esp,0x10
c001d646:	eb 21                	jmp    c001d669 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d648:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d64c:	e9 90 fd ff ff       	jmp    c001d3e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d651:	83 ec 0c             	sub    esp,0xc
c001d654:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d658:	e8 f3 21 ff ff       	call   c000f850 <free>
c001d65d:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d661:	83 c4 10             	add    esp,0x10
c001d664:	e9 05 fd ff ff       	jmp    c001d36e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d669:	31 c0                	xor    eax,eax
c001d66b:	eb 33                	jmp    c001d6a0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x711>
c001d66d:	83 ec 0c             	sub    esp,0xc
c001d670:	55                   	push   ebp
c001d671:	e8 ee 5e ff ff       	call   c0013564 <File::close()>
c001d676:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d679:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d67c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d67f:	58                   	pop    eax
c001d680:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d684:	e8 c7 21 ff ff       	call   c000f850 <free>
c001d689:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d68c:	e8 bf 21 ff ff       	call   c000f850 <free>
c001d691:	5a                   	pop    edx
c001d692:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d696:	e8 b5 21 ff ff       	call   c000f850 <free>
c001d69b:	83 c4 10             	add    esp,0x10
c001d69e:	b0 01                	mov    al,0x1
c001d6a0:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d6a6:	5b                   	pop    ebx
c001d6a7:	5e                   	pop    esi
c001d6a8:	5f                   	pop    edi
c001d6a9:	5d                   	pop    ebp
c001d6aa:	c3                   	ret    

c001d6ab <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d6ab:	56                   	push   esi
c001d6ac:	31 d2                	xor    edx,edx
c001d6ae:	53                   	push   ebx
c001d6af:	8b 1d 80 11 03 c0    	mov    ebx,DWORD PTR ds:0xc0031180
c001d6b5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d6b9:	39 d3                	cmp    ebx,edx
c001d6bb:	7e 1b                	jle    c001d6d8 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d6bd:	8b 04 95 a0 13 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcec60]
c001d6c4:	39 c8                	cmp    eax,ecx
c001d6c6:	77 0d                	ja     c001d6d5 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d6c8:	8b 34 95 a0 11 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffcee60]
c001d6cf:	01 c6                	add    esi,eax
c001d6d1:	39 ce                	cmp    esi,ecx
c001d6d3:	77 05                	ja     c001d6da <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d6d5:	42                   	inc    edx
c001d6d6:	eb e1                	jmp    c001d6b9 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d6d8:	31 c0                	xor    eax,eax
c001d6da:	5b                   	pop    ebx
c001d6db:	5e                   	pop    esi
c001d6dc:	c3                   	ret    

c001d6dd <Thr::getDriverNameFromAddress(unsigned long)>:
c001d6dd:	53                   	push   ebx
c001d6de:	31 c0                	xor    eax,eax
c001d6e0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d6e4:	8b 1d 80 11 03 c0    	mov    ebx,DWORD PTR ds:0xc0031180
c001d6ea:	39 c3                	cmp    ebx,eax
c001d6ec:	7e 22                	jle    c001d710 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d6ee:	8b 14 85 a0 13 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcec60]
c001d6f5:	39 ca                	cmp    edx,ecx
c001d6f7:	77 14                	ja     c001d70d <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d6f9:	03 14 85 a0 11 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffcee60]
c001d700:	39 ca                	cmp    edx,ecx
c001d702:	76 09                	jbe    c001d70d <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d704:	8b 04 85 a0 15 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcea60]
c001d70b:	eb 05                	jmp    c001d712 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d70d:	40                   	inc    eax
c001d70e:	eb da                	jmp    c001d6ea <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d710:	31 c0                	xor    eax,eax
c001d712:	5b                   	pop    ebx
c001d713:	c3                   	ret    

c001d714 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d714:	53                   	push   ebx
c001d715:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d719:	53                   	push   ebx
c001d71a:	e8 8c ff ff ff       	call   c001d6ab <Thr::getDriverBaseFromAddress(unsigned long)>
c001d71f:	5a                   	pop    edx
c001d720:	31 d2                	xor    edx,edx
c001d722:	85 c0                	test   eax,eax
c001d724:	74 04                	je     c001d72a <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d726:	89 da                	mov    edx,ebx
c001d728:	29 c2                	sub    edx,eax
c001d72a:	89 d0                	mov    eax,edx
c001d72c:	5b                   	pop    ebx
c001d72d:	c3                   	ret    

c001d72e <Thr::loadDLL(char const*, bool)>:
c001d72e:	55                   	push   ebp
c001d72f:	57                   	push   edi
c001d730:	56                   	push   esi
c001d731:	53                   	push   ebx
c001d732:	81 ec 34 01 00 00    	sub    esp,0x134
c001d738:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d73f:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001d746:	56                   	push   esi
c001d747:	68 34 c1 02 c0       	push   0xc002c134
c001d74c:	e8 f9 57 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001d751:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d758:	e8 e3 20 ff ff       	call   c000f840 <malloc>
c001d75d:	83 c4 0c             	add    esp,0xc
c001d760:	89 c3                	mov    ebx,eax
c001d762:	ff 35 74 19 03 c0    	push   DWORD PTR ds:0xc0031974
c001d768:	56                   	push   esi
c001d769:	50                   	push   eax
c001d76a:	e8 33 5d ff ff       	call   c00134a2 <File::File(char const*, Process*)>
c001d76f:	83 c4 10             	add    esp,0x10
c001d772:	85 db                	test   ebx,ebx
c001d774:	75 3c                	jne    c001d7b2 <Thr::loadDLL(char const*, bool)+0x84>
c001d776:	89 e8                	mov    eax,ebp
c001d778:	84 c0                	test   al,al
c001d77a:	0f 84 d5 01 00 00    	je     c001d955 <Thr::loadDLL(char const*, bool)+0x227>
c001d780:	57                   	push   edi
c001d781:	57                   	push   edi
c001d782:	68 45 c1 02 c0       	push   0xc002c145
c001d787:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001d78b:	57                   	push   edi
c001d78c:	e8 a3 30 fe ff       	call   c0000834 <strcpy>
c001d791:	58                   	pop    eax
c001d792:	5a                   	pop    edx
c001d793:	56                   	push   esi
c001d794:	57                   	push   edi
c001d795:	e8 da 31 fe ff       	call   c0000974 <strcat>
c001d79a:	59                   	pop    ecx
c001d79b:	58                   	pop    eax
c001d79c:	68 58 c1 02 c0       	push   0xc002c158
c001d7a1:	57                   	push   edi
c001d7a2:	e8 cd 31 fe ff       	call   c0000974 <strcat>
c001d7a7:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d7aa:	e8 4c ce ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c001d7af:	83 c4 10             	add    esp,0x10
c001d7b2:	51                   	push   ecx
c001d7b3:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d7b7:	50                   	push   eax
c001d7b8:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d7bc:	50                   	push   eax
c001d7bd:	53                   	push   ebx
c001d7be:	e8 ef 5f ff ff       	call   c00137b2 <File::stat(unsigned long long*, bool*)>
c001d7c3:	83 c4 10             	add    esp,0x10
c001d7c6:	85 db                	test   ebx,ebx
c001d7c8:	74 0c                	je     c001d7d6 <Thr::loadDLL(char const*, bool)+0xa8>
c001d7ca:	83 ec 0c             	sub    esp,0xc
c001d7cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d7cf:	53                   	push   ebx
c001d7d0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d7d3:	83 c4 10             	add    esp,0x10
c001d7d6:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d7db:	75 0a                	jne    c001d7e7 <Thr::loadDLL(char const*, bool)+0xb9>
c001d7dd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d7e1:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d7e5:	75 3c                	jne    c001d823 <Thr::loadDLL(char const*, bool)+0xf5>
c001d7e7:	89 e8                	mov    eax,ebp
c001d7e9:	84 c0                	test   al,al
c001d7eb:	0f 84 4c 01 00 00    	je     c001d93d <Thr::loadDLL(char const*, bool)+0x20f>
c001d7f1:	51                   	push   ecx
c001d7f2:	51                   	push   ecx
c001d7f3:	68 45 c1 02 c0       	push   0xc002c145
c001d7f8:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d7fc:	53                   	push   ebx
c001d7fd:	e8 32 30 fe ff       	call   c0000834 <strcpy>
c001d802:	5f                   	pop    edi
c001d803:	58                   	pop    eax
c001d804:	56                   	push   esi
c001d805:	53                   	push   ebx
c001d806:	e8 69 31 fe ff       	call   c0000974 <strcat>
c001d80b:	58                   	pop    eax
c001d80c:	5a                   	pop    edx
c001d80d:	68 58 c1 02 c0       	push   0xc002c158
c001d812:	53                   	push   ebx
c001d813:	e8 5c 31 fe ff       	call   c0000974 <strcat>
c001d818:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d81b:	e8 db cd ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c001d820:	83 c4 10             	add    esp,0x10
c001d823:	e8 12 46 ff ff       	call   c0011e3a <Virt::getAKernelVAS()>
c001d828:	51                   	push   ecx
c001d829:	6a 03                	push   0x3
c001d82b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001d82f:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d833:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001d839:	83 d3 00             	adc    ebx,0x0
c001d83c:	89 ca                	mov    edx,ecx
c001d83e:	89 d1                	mov    ecx,edx
c001d840:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001d844:	51                   	push   ecx
c001d845:	50                   	push   eax
c001d846:	e8 2b 4c ff ff       	call   c0012476 <VAS::allocatePages(int, int)>
c001d84b:	5f                   	pop    edi
c001d84c:	89 c3                	mov    ebx,eax
c001d84e:	58                   	pop    eax
c001d84f:	53                   	push   ebx
c001d850:	68 5a c1 02 c0       	push   0xc002c15a
c001d855:	e8 f0 56 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001d85a:	89 34 24             	mov    DWORD PTR [esp],esi
c001d85d:	e8 32 2f fe ff       	call   c0000794 <strlen>
c001d862:	8b 3d 80 11 03 c0    	mov    edi,DWORD PTR ds:0xc0031180
c001d868:	40                   	inc    eax
c001d869:	89 04 24             	mov    DWORD PTR [esp],eax
c001d86c:	e8 cf 1f ff ff       	call   c000f840 <malloc>
c001d871:	89 04 bd a0 15 03 c0 	mov    DWORD PTR [edi*4-0x3ffcea60],eax
c001d878:	58                   	pop    eax
c001d879:	a1 80 11 03 c0       	mov    eax,ds:0xc0031180
c001d87e:	5a                   	pop    edx
c001d87f:	56                   	push   esi
c001d880:	ff 34 85 a0 15 03 c0 	push   DWORD PTR [eax*4-0x3ffcea60]
c001d887:	e8 a8 2f fe ff       	call   c0000834 <strcpy>
c001d88c:	a1 80 11 03 c0       	mov    eax,ds:0xc0031180
c001d891:	8d 50 01             	lea    edx,[eax+0x1]
c001d894:	89 1c 85 a0 13 03 c0 	mov    DWORD PTR [eax*4-0x3ffcec60],ebx
c001d89b:	89 15 80 11 03 c0    	mov    DWORD PTR ds:0xc0031180,edx
c001d8a1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d8a5:	83 c4 0c             	add    esp,0xc
c001d8a8:	89 14 85 a0 11 03 c0 	mov    DWORD PTR [eax*4-0x3ffcee60],edx
c001d8af:	6a 01                	push   0x1
c001d8b1:	53                   	push   ebx
c001d8b2:	56                   	push   esi
c001d8b3:	e8 d7 f6 ff ff       	call   c001cf8f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d8b8:	83 c4 10             	add    esp,0x10
c001d8bb:	89 c7                	mov    edi,eax
c001d8bd:	84 c0                	test   al,al
c001d8bf:	0f 85 8c 00 00 00    	jne    c001d951 <Thr::loadDLL(char const*, bool)+0x223>
c001d8c5:	89 e8                	mov    eax,ebp
c001d8c7:	84 c0                	test   al,al
c001d8c9:	74 76                	je     c001d941 <Thr::loadDLL(char const*, bool)+0x213>
c001d8cb:	83 ec 0c             	sub    esp,0xc
c001d8ce:	68 67 c1 02 c0       	push   0xc002c167
c001d8d3:	e8 23 cd ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c001d8d8:	83 c4 10             	add    esp,0x10
c001d8db:	eb 64                	jmp    c001d941 <Thr::loadDLL(char const*, bool)+0x213>
c001d8dd:	e8 58 45 ff ff       	call   c0011e3a <Virt::getAKernelVAS()>
c001d8e2:	89 f5                	mov    ebp,esi
c001d8e4:	c1 e5 0c             	shl    ebp,0xc
c001d8e7:	52                   	push   edx
c001d8e8:	01 dd                	add    ebp,ebx
c001d8ea:	52                   	push   edx
c001d8eb:	55                   	push   ebp
c001d8ec:	50                   	push   eax
c001d8ed:	e8 fe 46 ff ff       	call   c0011ff0 <VAS::getPageTableEntry(unsigned long)>
c001d8f2:	83 c4 10             	add    esp,0x10
c001d8f5:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d8f8:	75 0c                	jne    c001d906 <Thr::loadDLL(char const*, bool)+0x1d8>
c001d8fa:	83 ec 0c             	sub    esp,0xc
c001d8fd:	55                   	push   ebp
c001d8fe:	e8 55 25 ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c001d903:	83 c4 10             	add    esp,0x10
c001d906:	46                   	inc    esi
c001d907:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d90b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d90f:	05 ff 0f 00 00       	add    eax,0xfff
c001d914:	83 d2 00             	adc    edx,0x0
c001d917:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d91b:	c1 ea 0c             	shr    edx,0xc
c001d91e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d922:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d926:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001d92a:	ba 00 00 00 00       	mov    edx,0x0
c001d92f:	89 d0                	mov    eax,edx
c001d931:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001d935:	72 a6                	jb     c001d8dd <Thr::loadDLL(char const*, bool)+0x1af>
c001d937:	89 f8                	mov    eax,edi
c001d939:	84 c0                	test   al,al
c001d93b:	75 18                	jne    c001d955 <Thr::loadDLL(char const*, bool)+0x227>
c001d93d:	31 db                	xor    ebx,ebx
c001d93f:	eb 14                	jmp    c001d955 <Thr::loadDLL(char const*, bool)+0x227>
c001d941:	83 ec 0c             	sub    esp,0xc
c001d944:	68 86 c1 02 c0       	push   0xc002c186
c001d949:	e8 ad cc ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c001d94e:	83 c4 10             	add    esp,0x10
c001d951:	31 f6                	xor    esi,esi
c001d953:	eb b2                	jmp    c001d907 <Thr::loadDLL(char const*, bool)+0x1d9>
c001d955:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d95b:	89 d8                	mov    eax,ebx
c001d95d:	5b                   	pop    ebx
c001d95e:	5e                   	pop    esi
c001d95f:	5f                   	pop    edi
c001d960:	5d                   	pop    ebp
c001d961:	c3                   	ret    

c001d962 <Thr::executeDLL(unsigned long, void*)>:
c001d962:	56                   	push   esi
c001d963:	53                   	push   ebx
c001d964:	52                   	push   edx
c001d965:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d969:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d96d:	85 db                	test   ebx,ebx
c001d96f:	75 10                	jne    c001d981 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d971:	83 ec 0c             	sub    esp,0xc
c001d974:	68 a2 c1 02 c0       	push   0xc002c1a2
c001d979:	e8 7d cc ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c001d97e:	83 c4 10             	add    esp,0x10
c001d981:	50                   	push   eax
c001d982:	50                   	push   eax
c001d983:	53                   	push   ebx
c001d984:	68 cc c1 02 c0       	push   0xc002c1cc
c001d989:	e8 bc 55 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001d98e:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d992:	89 d8                	mov    eax,ebx
c001d994:	83 c4 14             	add    esp,0x14
c001d997:	5b                   	pop    ebx
c001d998:	5e                   	pop    esi
c001d999:	ff e0                	jmp    eax
c001d99b:	90                   	nop

c001d99c <changeTSS>:
c001d99c:	83 ec 14             	sub    esp,0x14
c001d99f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d9a4:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d9a7:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d9ac:	c1 e2 15             	shl    edx,0x15
c001d9af:	29 d0                	sub    eax,edx
c001d9b1:	50                   	push   eax
c001d9b2:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c001d9b7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d9bd:	05 7c 11 00 00       	add    eax,0x117c
c001d9c2:	50                   	push   eax
c001d9c3:	e8 16 3b ff ff       	call   c00114de <TSS::setESP(unsigned long)>
c001d9c8:	83 c4 1c             	add    esp,0x1c
c001d9cb:	c3                   	ret    

c001d9cc <Process::addArgs(char**)>:
c001d9cc:	57                   	push   edi
c001d9cd:	56                   	push   esi
c001d9ce:	53                   	push   ebx
c001d9cf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d9d3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d9d7:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001d9e1:	85 ff                	test   edi,edi
c001d9e3:	74 3d                	je     c001da22 <Process::addArgs(char**)+0x56>
c001d9e5:	8b 07                	mov    eax,DWORD PTR [edi]
c001d9e7:	85 c0                	test   eax,eax
c001d9e9:	74 37                	je     c001da22 <Process::addArgs(char**)+0x56>
c001d9eb:	31 db                	xor    ebx,ebx
c001d9ed:	83 ec 0c             	sub    esp,0xc
c001d9f0:	50                   	push   eax
c001d9f1:	e8 9e 2d fe ff       	call   c0000794 <strlen>
c001d9f6:	40                   	inc    eax
c001d9f7:	89 04 24             	mov    DWORD PTR [esp],eax
c001d9fa:	e8 41 1e ff ff       	call   c000f840 <malloc>
c001d9ff:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001da06:	5a                   	pop    edx
c001da07:	59                   	pop    ecx
c001da08:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001da0b:	43                   	inc    ebx
c001da0c:	50                   	push   eax
c001da0d:	e8 22 2e fe ff       	call   c0000834 <strcpy>
c001da12:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001da18:	83 c4 10             	add    esp,0x10
c001da1b:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001da1e:	85 c0                	test   eax,eax
c001da20:	75 cb                	jne    c001d9ed <Process::addArgs(char**)+0x21>
c001da22:	5b                   	pop    ebx
c001da23:	5e                   	pop    esi
c001da24:	5f                   	pop    edi
c001da25:	c3                   	ret    

c001da26 <Process::Process(char const*, Process*, char**)>:
c001da26:	56                   	push   esi
c001da27:	53                   	push   ebx
c001da28:	83 ec 14             	sub    esp,0x14
c001da2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da2f:	05 0c 02 00 00       	add    eax,0x20c
c001da34:	bb 07 00 00 00       	mov    ebx,0x7
c001da39:	89 c6                	mov    esi,eax
c001da3b:	85 db                	test   ebx,ebx
c001da3d:	78 12                	js     c001da51 <Process::Process(char const*, Process*, char**)+0x2b>
c001da3f:	83 ec 0c             	sub    esp,0xc
c001da42:	56                   	push   esi
c001da43:	e8 1a b2 00 00       	call   c0028c62 <ThreadControlBlock::ThreadControlBlock()>
c001da48:	83 c4 10             	add    esp,0x10
c001da4b:	83 c6 63             	add    esi,0x63
c001da4e:	4b                   	dec    ebx
c001da4f:	eb ea                	jmp    c001da3b <Process::Process(char const*, Process*, char**)+0x15>
c001da51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da55:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001da5c:	83 ec 0c             	sub    esp,0xc
c001da5f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001da63:	e8 e4 c9 ff ff       	call   c001a44c <Krnl::newProcessEnv(Process*)>
c001da68:	83 c4 10             	add    esp,0x10
c001da6b:	89 c2                	mov    edx,eax
c001da6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da71:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001da77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da7b:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001da84:	a1 90 d9 02 c0       	mov    eax,ds:0xc002d990
c001da89:	8d 50 01             	lea    edx,[eax+0x1]
c001da8c:	89 15 90 d9 02 c0    	mov    DWORD PTR ds:0xc002d990,edx
c001da92:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001da96:	89 02                	mov    DWORD PTR [edx],eax
c001da98:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c001daa0:	83 ec 0c             	sub    esp,0xc
c001daa3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001daa7:	e8 94 1d ff ff       	call   c000f840 <malloc>
c001daac:	83 c4 10             	add    esp,0x10
c001daaf:	89 c3                	mov    ebx,eax
c001dab1:	83 ec 08             	sub    esp,0x8
c001dab4:	6a 00                	push   0x0
c001dab6:	53                   	push   ebx
c001dab7:	e8 62 4d ff ff       	call   c001281e <VAS::VAS(bool)>
c001dabc:	83 c4 10             	add    esp,0x10
c001dabf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dac3:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001dac9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dacd:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001dad7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dadb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001dadf:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001dae5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dae9:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001daef:	85 c0                	test   eax,eax
c001daf1:	74 42                	je     c001db35 <Process::Process(char const*, Process*, char**)+0x10f>
c001daf3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001daf7:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dafd:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001db03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db07:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001db0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db11:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001db17:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001db1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db21:	05 0c 01 00 00       	add    eax,0x10c
c001db26:	83 ec 08             	sub    esp,0x8
c001db29:	52                   	push   edx
c001db2a:	50                   	push   eax
c001db2b:	e8 04 2d fe ff       	call   c0000834 <strcpy>
c001db30:	83 c4 10             	add    esp,0x10
c001db33:	eb 63                	jmp    c001db98 <Process::Process(char const*, Process*, char**)+0x172>
c001db35:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001db3d:	83 ec 0c             	sub    esp,0xc
c001db40:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001db44:	e8 f7 1c ff ff       	call   c000f840 <malloc>
c001db49:	83 c4 10             	add    esp,0x10
c001db4c:	89 c3                	mov    ebx,eax
c001db4e:	83 ec 08             	sub    esp,0x8
c001db51:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001db55:	53                   	push   ebx
c001db56:	e8 81 36 ff ff       	call   c00111dc <VgaText::VgaText(char const*)>
c001db5b:	83 c4 10             	add    esp,0x10
c001db5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db62:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001db68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db6c:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001db72:	83 ec 0c             	sub    esp,0xc
c001db75:	50                   	push   eax
c001db76:	e8 54 2a ff ff       	call   c00105cf <addToTerminalCycle(VgaText*)>
c001db7b:	83 c4 10             	add    esp,0x10
c001db7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db82:	05 0c 01 00 00       	add    eax,0x10c
c001db87:	83 ec 08             	sub    esp,0x8
c001db8a:	68 eb c1 02 c0       	push   0xc002c1eb
c001db8f:	50                   	push   eax
c001db90:	e8 9f 2c fe ff       	call   c0000834 <strcpy>
c001db95:	83 c4 10             	add    esp,0x10
c001db98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db9c:	83 c0 0c             	add    eax,0xc
c001db9f:	83 ec 08             	sub    esp,0x8
c001dba2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dba6:	50                   	push   eax
c001dba7:	e8 88 2c fe ff       	call   c0000834 <strcpy>
c001dbac:	83 c4 10             	add    esp,0x10
c001dbaf:	83 ec 08             	sub    esp,0x8
c001dbb2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001dbb6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dbba:	e8 0d fe ff ff       	call   c001d9cc <Process::addArgs(char**)>
c001dbbf:	83 c4 10             	add    esp,0x10
c001dbc2:	83 ec 08             	sub    esp,0x8
c001dbc5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dbc9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dbcd:	e8 87 ee ff ff       	call   c001ca59 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001dbd2:	83 c4 10             	add    esp,0x10
c001dbd5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dbd9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001dbdd:	83 f0 01             	xor    eax,0x1
c001dbe0:	88 c2                	mov    dl,al
c001dbe2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbe6:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001dbec:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001dbf1:	83 ec 08             	sub    esp,0x8
c001dbf4:	50                   	push   eax
c001dbf5:	68 e8 c2 02 c0       	push   0xc002c2e8
c001dbfa:	e8 4b 53 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001dbff:	83 c4 10             	add    esp,0x10
c001dc02:	90                   	nop
c001dc03:	83 c4 14             	add    esp,0x14
c001dc06:	5b                   	pop    ebx
c001dc07:	5e                   	pop    esi
c001dc08:	c3                   	ret    
c001dc09:	90                   	nop

c001dc0a <Process::Process(bool, char const*, Process*, char**)>:
c001dc0a:	56                   	push   esi
c001dc0b:	53                   	push   ebx
c001dc0c:	83 ec 24             	sub    esp,0x24
c001dc0f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001dc13:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001dc17:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc1b:	05 0c 02 00 00       	add    eax,0x20c
c001dc20:	bb 07 00 00 00       	mov    ebx,0x7
c001dc25:	89 c6                	mov    esi,eax
c001dc27:	85 db                	test   ebx,ebx
c001dc29:	78 12                	js     c001dc3d <Process::Process(bool, char const*, Process*, char**)+0x33>
c001dc2b:	83 ec 0c             	sub    esp,0xc
c001dc2e:	56                   	push   esi
c001dc2f:	e8 2e b0 00 00       	call   c0028c62 <ThreadControlBlock::ThreadControlBlock()>
c001dc34:	83 c4 10             	add    esp,0x10
c001dc37:	83 c6 63             	add    esi,0x63
c001dc3a:	4b                   	dec    ebx
c001dc3b:	eb ea                	jmp    c001dc27 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001dc3d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc41:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001dc48:	83 ec 0c             	sub    esp,0xc
c001dc4b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dc4f:	e8 f8 c7 ff ff       	call   c001a44c <Krnl::newProcessEnv(Process*)>
c001dc54:	83 c4 10             	add    esp,0x10
c001dc57:	89 c2                	mov    edx,eax
c001dc59:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc5d:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001dc63:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc67:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001dc70:	a1 90 d9 02 c0       	mov    eax,ds:0xc002d990
c001dc75:	8d 50 01             	lea    edx,[eax+0x1]
c001dc78:	89 15 90 d9 02 c0    	mov    DWORD PTR ds:0xc002d990,edx
c001dc7e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001dc82:	89 02                	mov    DWORD PTR [edx],eax
c001dc84:	c7 44 24 1c 10 00 00 00 	mov    DWORD PTR [esp+0x1c],0x10
c001dc8c:	83 ec 0c             	sub    esp,0xc
c001dc8f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001dc93:	e8 a8 1b ff ff       	call   c000f840 <malloc>
c001dc98:	83 c4 10             	add    esp,0x10
c001dc9b:	89 c3                	mov    ebx,eax
c001dc9d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001dca2:	83 ec 08             	sub    esp,0x8
c001dca5:	50                   	push   eax
c001dca6:	53                   	push   ebx
c001dca7:	e8 72 4b ff ff       	call   c001281e <VAS::VAS(bool)>
c001dcac:	83 c4 10             	add    esp,0x10
c001dcaf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcb3:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001dcb9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcbd:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001dcc7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dccb:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001dccf:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001dcd5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcd9:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dcdf:	85 c0                	test   eax,eax
c001dce1:	74 42                	je     c001dd25 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001dce3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dce7:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dced:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001dcf3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcf7:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001dcfd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd01:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dd07:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001dd0d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd11:	05 0c 01 00 00       	add    eax,0x10c
c001dd16:	83 ec 08             	sub    esp,0x8
c001dd19:	52                   	push   edx
c001dd1a:	50                   	push   eax
c001dd1b:	e8 14 2b fe ff       	call   c0000834 <strcpy>
c001dd20:	83 c4 10             	add    esp,0x10
c001dd23:	eb 63                	jmp    c001dd88 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001dd25:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001dd2d:	83 ec 0c             	sub    esp,0xc
c001dd30:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001dd34:	e8 07 1b ff ff       	call   c000f840 <malloc>
c001dd39:	83 c4 10             	add    esp,0x10
c001dd3c:	89 c3                	mov    ebx,eax
c001dd3e:	83 ec 08             	sub    esp,0x8
c001dd41:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001dd45:	53                   	push   ebx
c001dd46:	e8 91 34 ff ff       	call   c00111dc <VgaText::VgaText(char const*)>
c001dd4b:	83 c4 10             	add    esp,0x10
c001dd4e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd52:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001dd58:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd5c:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001dd62:	83 ec 0c             	sub    esp,0xc
c001dd65:	50                   	push   eax
c001dd66:	e8 64 28 ff ff       	call   c00105cf <addToTerminalCycle(VgaText*)>
c001dd6b:	83 c4 10             	add    esp,0x10
c001dd6e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd72:	05 0c 01 00 00       	add    eax,0x10c
c001dd77:	83 ec 08             	sub    esp,0x8
c001dd7a:	68 eb c1 02 c0       	push   0xc002c1eb
c001dd7f:	50                   	push   eax
c001dd80:	e8 af 2a fe ff       	call   c0000834 <strcpy>
c001dd85:	83 c4 10             	add    esp,0x10
c001dd88:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd8c:	83 c0 0c             	add    eax,0xc
c001dd8f:	83 ec 08             	sub    esp,0x8
c001dd92:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001dd96:	50                   	push   eax
c001dd97:	e8 98 2a fe ff       	call   c0000834 <strcpy>
c001dd9c:	83 c4 10             	add    esp,0x10
c001dd9f:	83 ec 08             	sub    esp,0x8
c001dda2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001dda6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ddaa:	e8 1d fc ff ff       	call   c001d9cc <Process::addArgs(char**)>
c001ddaf:	83 c4 10             	add    esp,0x10
c001ddb2:	90                   	nop
c001ddb3:	83 c4 24             	add    esp,0x24
c001ddb6:	5b                   	pop    ebx
c001ddb7:	5e                   	pop    esi
c001ddb8:	c3                   	ret    

c001ddb9 <disableIRQs()>:
c001ddb9:	fa                   	cli    
c001ddba:	ff 05 4c 19 03 c0    	inc    DWORD PTR ds:0xc003194c
c001ddc0:	c3                   	ret    

c001ddc1 <getIRQNestingLevel()>:
c001ddc1:	a1 4c 19 03 c0       	mov    eax,ds:0xc003194c
c001ddc6:	c3                   	ret    

c001ddc7 <enableIRQs()>:
c001ddc7:	a1 4c 19 03 c0       	mov    eax,ds:0xc003194c
c001ddcc:	48                   	dec    eax
c001ddcd:	a3 4c 19 03 c0       	mov    ds:0xc003194c,eax
c001ddd2:	75 01                	jne    c001ddd5 <enableIRQs()+0xe>
c001ddd4:	fb                   	sti    
c001ddd5:	c3                   	ret    

c001ddd6 <lockScheduler()>:
c001ddd6:	eb e1                	jmp    c001ddb9 <disableIRQs()>

c001ddd8 <unlockScheduler()>:
c001ddd8:	eb ed                	jmp    c001ddc7 <enableIRQs()>

c001ddda <userModeEntryPoint(void*)>:
c001ddda:	83 ec 0c             	sub    esp,0xc
c001dddd:	e8 f6 ff ff ff       	call   c001ddd8 <unlockScheduler()>
c001dde2:	fb                   	sti    
c001dde3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dde8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ddeb:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001ddf1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ddf5:	83 c4 0c             	add    esp,0xc
c001ddf8:	e9 2d 25 fe ff       	jmp    c000032a <goToUsermode>

c001ddfd <lockStuff()>:
c001ddfd:	e8 b7 ff ff ff       	call   c001ddb9 <disableIRQs()>
c001de02:	ff 05 48 19 03 c0    	inc    DWORD PTR ds:0xc0031948
c001de08:	c3                   	ret    

c001de09 <taskStartupFunction>:
c001de09:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001de0e:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001de11:	c3                   	ret    

c001de12 <updateTimeUsed()>:
c001de12:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c001de17:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001de1d:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001de24:	74 50                	je     c001de76 <updateTimeUsed()+0x64>
c001de26:	57                   	push   edi
c001de27:	56                   	push   esi
c001de28:	53                   	push   ebx
c001de29:	0f 31                	rdtsc  
c001de2b:	89 c1                	mov    ecx,eax
c001de2d:	a3 88 19 03 c0       	mov    ds:0xc0031988,eax
c001de32:	2b 0d 78 19 03 c0    	sub    ecx,DWORD PTR ds:0xc0031978
c001de38:	89 d3                	mov    ebx,edx
c001de3a:	89 0d 80 19 03 c0    	mov    DWORD PTR ds:0xc0031980,ecx
c001de40:	1b 1d 7c 19 03 c0    	sbb    ebx,DWORD PTR ds:0xc003197c
c001de46:	a3 78 19 03 c0       	mov    ds:0xc0031978,eax
c001de4b:	89 1d 84 19 03 c0    	mov    DWORD PTR ds:0xc0031984,ebx
c001de51:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001de56:	89 15 8c 19 03 c0    	mov    DWORD PTR ds:0xc003198c,edx
c001de5c:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001de5f:	89 15 7c 19 03 c0    	mov    DWORD PTR ds:0xc003197c,edx
c001de65:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001de68:	01 f1                	add    ecx,esi
c001de6a:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001de6d:	11 fb                	adc    ebx,edi
c001de6f:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001de72:	5b                   	pop    ebx
c001de73:	5e                   	pop    esi
c001de74:	5f                   	pop    edi
c001de75:	c3                   	ret    
c001de76:	c3                   	ret    

c001de77 <switchToThread(ThreadControlBlock*)>:
c001de77:	53                   	push   ebx
c001de78:	83 ec 08             	sub    esp,0x8
c001de7b:	a1 48 19 03 c0       	mov    eax,ds:0xc0031948
c001de80:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001de84:	85 c0                	test   eax,eax
c001de86:	75 30                	jne    c001deb8 <switchToThread(ThreadControlBlock*)+0x41>
c001de88:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001de8b:	3c ff                	cmp    al,0xff
c001de8d:	74 25                	je     c001deb4 <switchToThread(ThreadControlBlock*)+0x3d>
c001de8f:	0f b6 d0             	movzx  edx,al
c001de92:	b8 84 03 00 00       	mov    eax,0x384
c001de97:	29 d0                	sub    eax,edx
c001de99:	c1 e0 10             	shl    eax,0x10
c001de9c:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001de9f:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001dea2:	e8 6b ff ff ff       	call   c001de12 <updateTimeUsed()>
c001dea7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001deab:	83 c4 08             	add    esp,0x8
c001deae:	5b                   	pop    ebx
c001deaf:	e9 ae 24 fe ff       	jmp    c0000362 <switchToThreadASM>
c001deb4:	31 c0                	xor    eax,eax
c001deb6:	eb e7                	jmp    c001de9f <switchToThread(ThreadControlBlock*)+0x28>
c001deb8:	c7 05 44 19 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031944,0x1
c001dec2:	83 c4 08             	add    esp,0x8
c001dec5:	5b                   	pop    ebx
c001dec6:	c3                   	ret    
c001dec7:	90                   	nop

c001dec8 <Semaphore::Semaphore(int)>:
c001dec8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001decc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ded0:	89 10                	mov    DWORD PTR [eax],edx
c001ded2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ded6:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001dedd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dee1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001dee8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001deec:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001def3:	90                   	nop
c001def4:	c3                   	ret    
c001def5:	90                   	nop

c001def6 <Mutex::Mutex()>:
c001def6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001defa:	6a 01                	push   0x1
c001defc:	50                   	push   eax
c001defd:	e8 c6 ff ff ff       	call   c001dec8 <Semaphore::Semaphore(int)>
c001df02:	83 c4 08             	add    esp,0x8
c001df05:	90                   	nop
c001df06:	c3                   	ret    
c001df07:	90                   	nop

c001df08 <Process::createThread(void (*)(void*), void*, int)>:
c001df08:	55                   	push   ebp
c001df09:	31 c9                	xor    ecx,ecx
c001df0b:	57                   	push   edi
c001df0c:	56                   	push   esi
c001df0d:	53                   	push   ebx
c001df0e:	83 ec 1c             	sub    esp,0x1c
c001df11:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001df15:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001df1c:	89 f2                	mov    edx,esi
c001df1e:	0f b7 c2             	movzx  eax,dx
c001df21:	83 e2 01             	and    edx,0x1
c001df24:	74 14                	je     c001df3a <Process::createThread(void (*)(void*), void*, int)+0x32>
c001df26:	d1 f8                	sar    eax,1
c001df28:	41                   	inc    ecx
c001df29:	89 c2                	mov    edx,eax
c001df2b:	83 f9 10             	cmp    ecx,0x10
c001df2e:	75 ee                	jne    c001df1e <Process::createThread(void (*)(void*), void*, int)+0x16>
c001df30:	83 c4 1c             	add    esp,0x1c
c001df33:	31 c0                	xor    eax,eax
c001df35:	5b                   	pop    ebx
c001df36:	5e                   	pop    esi
c001df37:	5f                   	pop    edi
c001df38:	5d                   	pop    ebp
c001df39:	c3                   	ret    
c001df3a:	83 ec 08             	sub    esp,0x8
c001df3d:	b8 01 00 00 00       	mov    eax,0x1
c001df42:	d3 e0                	shl    eax,cl
c001df44:	09 c6                	or     esi,eax
c001df46:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001df4c:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001df53:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001df56:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001df59:	01 ce                	add    esi,ecx
c001df5b:	89 f0                	mov    eax,esi
c001df5d:	c1 e0 05             	shl    eax,0x5
c001df60:	01 c6                	add    esi,eax
c001df62:	8d 04 33             	lea    eax,[ebx+esi*1]
c001df65:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001df6b:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001df71:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001df75:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001df7b:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001df81:	89 ca                	mov    edx,ecx
c001df83:	f7 da                	neg    edx
c001df85:	c1 e2 15             	shl    edx,0x15
c001df88:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001df8e:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001df94:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001df98:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001dfa2:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001dfa8:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001dfac:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001dfb2:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001dfbc:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001dfc6:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001dfcd:	50                   	push   eax
c001dfce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001dfd2:	68 68 19 03 c0       	push   0xc0031968
c001dfd7:	e8 14 ab 00 00       	call   c0028af0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dfdc:	83 c4 10             	add    esp,0x10
c001dfdf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dfe3:	83 c4 1c             	add    esp,0x1c
c001dfe6:	5b                   	pop    ebx
c001dfe7:	5e                   	pop    esi
c001dfe8:	5f                   	pop    edi
c001dfe9:	5d                   	pop    ebp
c001dfea:	c3                   	ret    
c001dfeb:	90                   	nop

c001dfec <Process::createUserThread()>:
c001dfec:	83 ec 0c             	sub    esp,0xc
c001dfef:	68 80 00 00 00       	push   0x80
c001dff4:	6a 00                	push   0x0
c001dff6:	68 da dd 01 c0       	push   0xc001ddda
c001dffb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dfff:	e8 04 ff ff ff       	call   c001df08 <Process::createThread(void (*)(void*), void*, int)>
c001e004:	83 c4 1c             	add    esp,0x1c
c001e007:	c3                   	ret    

c001e008 <setupMultitasking(void (*)())>:
c001e008:	56                   	push   esi
c001e009:	53                   	push   ebx
c001e00a:	53                   	push   ebx
c001e00b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e00f:	eb 10                	jmp    c001e021 <setupMultitasking(void (*)())+0x19>
c001e011:	83 ec 0c             	sub    esp,0xc
c001e014:	68 68 19 03 c0       	push   0xc0031968
c001e019:	e8 24 aa 00 00       	call   c0028a42 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e01e:	83 c4 10             	add    esp,0x10
c001e021:	83 ec 0c             	sub    esp,0xc
c001e024:	68 68 19 03 c0       	push   0xc0031968
c001e029:	e8 f8 a9 00 00       	call   c0028a26 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e02e:	83 c4 10             	add    esp,0x10
c001e031:	84 c0                	test   al,al
c001e033:	74 dc                	je     c001e011 <setupMultitasking(void (*)())+0x9>
c001e035:	83 ec 0c             	sub    esp,0xc
c001e038:	68 3f 07 00 00       	push   0x73f
c001e03d:	e8 fe 17 ff ff       	call   c000f840 <malloc>
c001e042:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e049:	89 c3                	mov    ebx,eax
c001e04b:	6a 00                	push   0x0
c001e04d:	68 ef c1 02 c0       	push   0xc002c1ef
c001e052:	6a 01                	push   0x1
c001e054:	50                   	push   eax
c001e055:	e8 b0 fb ff ff       	call   c001dc0a <Process::Process(bool, char const*, Process*, char**)>
c001e05a:	83 c4 18             	add    esp,0x18
c001e05d:	89 1d 74 19 03 c0    	mov    DWORD PTR ds:0xc0031974,ebx
c001e063:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e069:	68 10 c3 02 c0       	push   0xc002c310
c001e06e:	e8 d7 4e ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001e073:	58                   	pop    eax
c001e074:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e07a:	e8 d2 2c ff ff       	call   c0010d51 <setActiveTerminal(VgaText*)>
c001e07f:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001e087:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e08d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001e090:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001e09a:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001e0a0:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001e0a6:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001e0b0:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001e0ba:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001e0c4:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001e0ca:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001e0d0:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001e0da:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001e0e0:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001e0ea:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001e0f0:	5a                   	pop    edx
c001e0f1:	59                   	pop    ecx
c001e0f2:	68 eb c1 02 c0       	push   0xc002c1eb
c001e0f7:	50                   	push   eax
c001e0f8:	e8 37 27 fe ff       	call   c0000834 <strcpy>
c001e0fd:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001e104:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001e108:	83 c4 14             	add    esp,0x14
c001e10b:	5b                   	pop    ebx
c001e10c:	5e                   	pop    esi
c001e10d:	e9 42 22 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001e112 <schedule()>:
c001e112:	a1 48 19 03 c0       	mov    eax,ds:0xc0031948
c001e117:	85 c0                	test   eax,eax
c001e119:	74 0b                	je     c001e126 <schedule()+0x14>
c001e11b:	c7 05 44 19 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031944,0x1
c001e125:	c3                   	ret    
c001e126:	53                   	push   ebx
c001e127:	83 ec 14             	sub    esp,0x14
c001e12a:	68 68 19 03 c0       	push   0xc0031968
c001e12f:	e8 f2 a8 00 00       	call   c0028a26 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e134:	83 c4 10             	add    esp,0x10
c001e137:	84 c0                	test   al,al
c001e139:	75 38                	jne    c001e173 <schedule()+0x61>
c001e13b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e140:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e143:	4a                   	dec    edx
c001e144:	74 32                	je     c001e178 <schedule()+0x66>
c001e146:	83 ec 0c             	sub    esp,0xc
c001e149:	68 68 19 03 c0       	push   0xc0031968
c001e14e:	e8 cb a8 00 00       	call   c0028a1e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e153:	c7 04 24 68 19 03 c0 	mov    DWORD PTR [esp],0xc0031968
c001e15a:	89 c3                	mov    ebx,eax
c001e15c:	e8 e1 a8 00 00       	call   c0028a42 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e161:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001e168:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e16b:	e8 07 fd ff ff       	call   c001de77 <switchToThread(ThreadControlBlock*)>
c001e170:	83 c4 10             	add    esp,0x10
c001e173:	83 c4 08             	add    esp,0x8
c001e176:	5b                   	pop    ebx
c001e177:	c3                   	ret    
c001e178:	83 ec 08             	sub    esp,0x8
c001e17b:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001e182:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e188:	68 68 19 03 c0       	push   0xc0031968
c001e18d:	e8 5e a9 00 00       	call   c0028af0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e192:	83 c4 10             	add    esp,0x10
c001e195:	eb af                	jmp    c001e146 <schedule()+0x34>

c001e197 <unlockStuff()>:
c001e197:	a1 48 19 03 c0       	mov    eax,ds:0xc0031948
c001e19c:	48                   	dec    eax
c001e19d:	a3 48 19 03 c0       	mov    ds:0xc0031948,eax
c001e1a2:	75 09                	jne    c001e1ad <unlockStuff()+0x16>
c001e1a4:	a1 44 19 03 c0       	mov    eax,ds:0xc0031944
c001e1a9:	85 c0                	test   eax,eax
c001e1ab:	75 05                	jne    c001e1b2 <unlockStuff()+0x1b>
c001e1ad:	e9 15 fc ff ff       	jmp    c001ddc7 <enableIRQs()>
c001e1b2:	83 ec 0c             	sub    esp,0xc
c001e1b5:	c7 05 44 19 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031944,0x0
c001e1bf:	e8 4e ff ff ff       	call   c001e112 <schedule()>
c001e1c4:	83 c4 0c             	add    esp,0xc
c001e1c7:	e9 fb fb ff ff       	jmp    c001ddc7 <enableIRQs()>

c001e1cc <Semaphore::tryAcquire()>:
c001e1cc:	83 ec 0c             	sub    esp,0xc
c001e1cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1d3:	e8 25 fc ff ff       	call   c001ddfd <lockStuff()>
c001e1d8:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e1db:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e1dd:	7c 0b                	jl     c001e1ea <Semaphore::tryAcquire()+0x1e>
c001e1df:	e8 b3 ff ff ff       	call   c001e197 <unlockStuff()>
c001e1e4:	31 c0                	xor    eax,eax
c001e1e6:	83 c4 0c             	add    esp,0xc
c001e1e9:	c3                   	ret    
c001e1ea:	42                   	inc    edx
c001e1eb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e1ee:	e8 a4 ff ff ff       	call   c001e197 <unlockStuff()>
c001e1f3:	b0 01                	mov    al,0x1
c001e1f5:	83 c4 0c             	add    esp,0xc
c001e1f8:	c3                   	ret    
c001e1f9:	90                   	nop

c001e1fa <Semaphore::assertLocked(char const*)>:
c001e1fa:	83 ec 0c             	sub    esp,0xc
c001e1fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e201:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e205:	e8 f3 fb ff ff       	call   c001ddfd <lockStuff()>
c001e20a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e20c:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001e20f:	7c 05                	jl     c001e216 <Semaphore::assertLocked(char const*)+0x1c>
c001e211:	83 c4 0c             	add    esp,0xc
c001e214:	eb 81                	jmp    c001e197 <unlockStuff()>
c001e216:	83 ec 0c             	sub    esp,0xc
c001e219:	52                   	push   edx
c001e21a:	e8 dc c3 ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c001e21f:	83 c4 10             	add    esp,0x10
c001e222:	83 c4 0c             	add    esp,0xc
c001e225:	e9 6d ff ff ff       	jmp    c001e197 <unlockStuff()>

c001e22a <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e22a:	83 ec 0c             	sub    esp,0xc
c001e22d:	e8 8f fb ff ff       	call   c001ddc1 <getIRQNestingLevel()>
c001e232:	83 ec 08             	sub    esp,0x8
c001e235:	50                   	push   eax
c001e236:	68 44 c3 02 c0       	push   0xc002c344
c001e23b:	e8 0a 4d ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001e240:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e244:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e249:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e24c:	e8 c1 fe ff ff       	call   c001e112 <schedule()>
c001e251:	e8 82 fb ff ff       	call   c001ddd8 <unlockScheduler()>
c001e256:	e8 66 fb ff ff       	call   c001ddc1 <getIRQNestingLevel()>
c001e25b:	5a                   	pop    edx
c001e25c:	59                   	pop    ecx
c001e25d:	50                   	push   eax
c001e25e:	68 78 c3 02 c0       	push   0xc002c378
c001e263:	e8 e2 4c ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001e268:	83 c4 1c             	add    esp,0x1c
c001e26b:	c3                   	ret    

c001e26c <blockTask(TaskState)>:
c001e26c:	83 ec 0c             	sub    esp,0xc
c001e26f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e273:	e8 5e fb ff ff       	call   c001ddd6 <lockScheduler()>
c001e278:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e27d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e280:	e8 8d fe ff ff       	call   c001e112 <schedule()>
c001e285:	83 c4 0c             	add    esp,0xc
c001e288:	e9 4b fb ff ff       	jmp    c001ddd8 <unlockScheduler()>

c001e28d <waitTask(int, int*, int)>:
c001e28d:	83 ec 18             	sub    esp,0x18
c001e290:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e295:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e299:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e29c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e2a0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2a5:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e2a8:	6a 07                	push   0x7
c001e2aa:	e8 bd ff ff ff       	call   c001e26c <blockTask(TaskState)>
c001e2af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2b4:	83 c4 10             	add    esp,0x10
c001e2b7:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e2ba:	85 d2                	test   edx,edx
c001e2bc:	74 0a                	je     c001e2c8 <waitTask(int, int*, int)+0x3b>
c001e2be:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e2c1:	89 02                	mov    DWORD PTR [edx],eax
c001e2c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2c8:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e2cb:	83 c4 0c             	add    esp,0xc
c001e2ce:	c3                   	ret    

c001e2cf <nanoSleepUntil(unsigned long long)>:
c001e2cf:	83 ec 0c             	sub    esp,0xc
c001e2d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2d6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e2da:	3b 05 90 ea 02 c0    	cmp    eax,DWORD PTR ds:0xc002ea90
c001e2e0:	89 d1                	mov    ecx,edx
c001e2e2:	1b 0d 94 ea 02 c0    	sbb    ecx,DWORD PTR ds:0xc002ea94
c001e2e8:	73 04                	jae    c001e2ee <nanoSleepUntil(unsigned long long)+0x1f>
c001e2ea:	83 c4 0c             	add    esp,0xc
c001e2ed:	c3                   	ret    
c001e2ee:	e8 0a fb ff ff       	call   c001ddfd <lockStuff()>
c001e2f3:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e2f9:	83 ec 08             	sub    esp,0x8
c001e2fc:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e2ff:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e302:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e308:	68 5c 19 03 c0       	push   0xc003195c
c001e30d:	e8 de a7 00 00       	call   c0028af0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e312:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e319:	e8 4e ff ff ff       	call   c001e26c <blockTask(TaskState)>
c001e31e:	83 c4 1c             	add    esp,0x1c
c001e321:	e9 71 fe ff ff       	jmp    c001e197 <unlockStuff()>

c001e326 <nanoSleep(unsigned long long)>:
c001e326:	a1 90 ea 02 c0       	mov    eax,ds:0xc002ea90
c001e32b:	8b 15 94 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea94
c001e331:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e335:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e339:	eb 94                	jmp    c001e2cf <nanoSleepUntil(unsigned long long)>

c001e33b <sleep(unsigned long long)>:
c001e33b:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e343:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e348:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e34c:	01 ca                	add    edx,ecx
c001e34e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e352:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e356:	eb ce                	jmp    c001e326 <nanoSleep(unsigned long long)>

c001e358 <Semaphore::acquire()>:
c001e358:	83 ec 0c             	sub    esp,0xc
c001e35b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e35f:	e8 99 fa ff ff       	call   c001ddfd <lockStuff()>
c001e364:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e367:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e369:	7d 0c                	jge    c001e377 <Semaphore::acquire()+0x1f>
c001e36b:	42                   	inc    edx
c001e36c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e36f:	83 c4 0c             	add    esp,0xc
c001e372:	e9 20 fe ff ff       	jmp    c001e197 <unlockStuff()>
c001e377:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e37d:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001e384:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e387:	85 d2                	test   edx,edx
c001e389:	74 2a                	je     c001e3b5 <Semaphore::acquire()+0x5d>
c001e38b:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001e38e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e394:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001e397:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e39d:	83 ec 0c             	sub    esp,0xc
c001e3a0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e3a3:	6a 05                	push   0x5
c001e3a5:	e8 c2 fe ff ff       	call   c001e26c <blockTask(TaskState)>
c001e3aa:	83 c4 10             	add    esp,0x10
c001e3ad:	83 c4 0c             	add    esp,0xc
c001e3b0:	e9 e2 fd ff ff       	jmp    c001e197 <unlockStuff()>
c001e3b5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e3bb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e3be:	eb d7                	jmp    c001e397 <Semaphore::acquire()+0x3f>

c001e3c0 <taskReturned>:
c001e3c0:	83 ec 18             	sub    esp,0x18
c001e3c3:	68 ac c3 02 c0       	push   0xc002c3ac
c001e3c8:	e8 2e c2 ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c001e3cd:	83 c4 10             	add    esp,0x10
c001e3d0:	83 ec 0c             	sub    esp,0xc
c001e3d3:	6a 02                	push   0x2
c001e3d5:	e8 92 fe ff ff       	call   c001e26c <blockTask(TaskState)>
c001e3da:	e8 f7 f9 ff ff       	call   c001ddd6 <lockScheduler()>
c001e3df:	e8 2e fd ff ff       	call   c001e112 <schedule()>
c001e3e4:	e8 ef f9 ff ff       	call   c001ddd8 <unlockScheduler()>
c001e3e9:	83 c4 10             	add    esp,0x10
c001e3ec:	eb e2                	jmp    c001e3d0 <taskReturned+0x10>

c001e3ee <unblockTask(ThreadControlBlock*)>:
c001e3ee:	53                   	push   ebx
c001e3ef:	83 ec 08             	sub    esp,0x8
c001e3f2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e3f6:	e8 db f9 ff ff       	call   c001ddd6 <lockScheduler()>
c001e3fb:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e3fe:	85 c0                	test   eax,eax
c001e400:	74 5c                	je     c001e45e <unblockTask(ThreadControlBlock*)+0x70>
c001e402:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e405:	48                   	dec    eax
c001e406:	74 31                	je     c001e439 <unblockTask(ThreadControlBlock*)+0x4b>
c001e408:	83 ec 0c             	sub    esp,0xc
c001e40b:	68 68 19 03 c0       	push   0xc0031968
c001e410:	e8 09 a6 00 00       	call   c0028a1e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e415:	83 c4 10             	add    esp,0x10
c001e418:	85 c0                	test   eax,eax
c001e41a:	75 17                	jne    c001e433 <unblockTask(ThreadControlBlock*)+0x45>
c001e41c:	eb 65                	jmp    c001e483 <unblockTask(ThreadControlBlock*)+0x95>
c001e41e:	83 ec 08             	sub    esp,0x8
c001e421:	50                   	push   eax
c001e422:	68 68 19 03 c0       	push   0xc0031968
c001e427:	e8 cc a8 00 00       	call   c0028cf8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e42c:	83 c4 10             	add    esp,0x10
c001e42f:	85 c0                	test   eax,eax
c001e431:	74 50                	je     c001e483 <unblockTask(ThreadControlBlock*)+0x95>
c001e433:	39 c3                	cmp    ebx,eax
c001e435:	75 e7                	jne    c001e41e <unblockTask(ThreadControlBlock*)+0x30>
c001e437:	eb 1c                	jmp    c001e455 <unblockTask(ThreadControlBlock*)+0x67>
c001e439:	83 ec 0c             	sub    esp,0xc
c001e43c:	68 9c c4 02 c0       	push   0xc002c49c
c001e441:	e8 04 4b ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001e446:	c7 04 24 28 c4 02 c0 	mov    DWORD PTR [esp],0xc002c428
c001e44d:	e8 f8 4a ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001e452:	83 c4 10             	add    esp,0x10
c001e455:	83 c4 08             	add    esp,0x8
c001e458:	5b                   	pop    ebx
c001e459:	e9 7a f9 ff ff       	jmp    c001ddd8 <unlockScheduler()>
c001e45e:	83 ec 0c             	sub    esp,0xc
c001e461:	68 e0 c3 02 c0       	push   0xc002c3e0
c001e466:	e8 df 4a ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001e46b:	c7 04 24 28 c4 02 c0 	mov    DWORD PTR [esp],0xc002c428
c001e472:	e8 d3 4a ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001e477:	83 c4 10             	add    esp,0x10
c001e47a:	83 c4 08             	add    esp,0x8
c001e47d:	5b                   	pop    ebx
c001e47e:	e9 55 f9 ff ff       	jmp    c001ddd8 <unlockScheduler()>
c001e483:	83 ec 08             	sub    esp,0x8
c001e486:	53                   	push   ebx
c001e487:	68 68 19 03 c0       	push   0xc0031968
c001e48c:	e8 5f a6 00 00       	call   c0028af0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e491:	83 c4 10             	add    esp,0x10
c001e494:	83 c4 08             	add    esp,0x8
c001e497:	5b                   	pop    ebx
c001e498:	e9 3b f9 ff ff       	jmp    c001ddd8 <unlockScheduler()>

c001e49d <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e49d:	55                   	push   ebp
c001e49e:	57                   	push   edi
c001e49f:	56                   	push   esi
c001e4a0:	53                   	push   ebx
c001e4a1:	83 ec 1c             	sub    esp,0x1c
c001e4a4:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e4a8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e4ab:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001e4b1:	85 ff                	test   edi,edi
c001e4b3:	7e 20                	jle    c001e4d5 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001e4b5:	31 f6                	xor    esi,esi
c001e4b7:	83 ec 0c             	sub    esp,0xc
c001e4ba:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001e4c1:	46                   	inc    esi
c001e4c2:	e8 89 13 ff ff       	call   c000f850 <free>
c001e4c7:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e4ca:	83 c4 10             	add    esp,0x10
c001e4cd:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001e4d3:	7f e2                	jg     c001e4b7 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001e4d5:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e4df:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001e4e4:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001e4e7:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e4ea:	d3 c0                	rol    eax,cl
c001e4ec:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001e4f3:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e4f6:	89 f7                	mov    edi,esi
c001e4f8:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001e500:	0f 85 74 01 00 00    	jne    c001e67a <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001e506:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001e50c:	85 ed                	test   ebp,ebp
c001e50e:	74 1b                	je     c001e52b <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001e510:	83 ec 0c             	sub    esp,0xc
c001e513:	55                   	push   ebp
c001e514:	e8 4f be ff ff       	call   c001a368 <EnvVarContainer::~EnvVarContainer()>
c001e519:	59                   	pop    ecx
c001e51a:	5e                   	pop    esi
c001e51b:	6a 0c                	push   0xc
c001e51d:	55                   	push   ebp
c001e51e:	e8 47 49 ff ff       	call   c0012e6a <operator delete(void*, unsigned long)>
c001e523:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e526:	83 c4 10             	add    esp,0x10
c001e529:	89 f7                	mov    edi,esi
c001e52b:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e531:	85 c0                	test   eax,eax
c001e533:	0f 84 aa 00 00 00    	je     c001e5e3 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e539:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001e53c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e540:	31 c9                	xor    ecx,ecx
c001e542:	eb 10                	jmp    c001e554 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001e544:	41                   	inc    ecx
c001e545:	83 f9 10             	cmp    ecx,0x10
c001e548:	0f 84 95 00 00 00    	je     c001e5e3 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e54e:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e554:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001e55b:	d3 fa                	sar    edx,cl
c001e55d:	83 e2 01             	and    edx,0x1
c001e560:	74 e2                	je     c001e544 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e562:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e565:	01 ca                	add    edx,ecx
c001e567:	89 d5                	mov    ebp,edx
c001e569:	c1 e5 05             	shl    ebp,0x5
c001e56c:	01 ea                	add    edx,ebp
c001e56e:	01 d0                	add    eax,edx
c001e570:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e576:	83 fd 07             	cmp    ebp,0x7
c001e579:	75 c9                	jne    c001e544 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e57b:	05 40 02 00 00       	add    eax,0x240
c001e580:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e583:	83 fd ff             	cmp    ebp,0xffffffff
c001e586:	0f 8c 08 01 00 00    	jl     c001e694 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e58c:	0f 84 b9 01 00 00    	je     c001e74b <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001e592:	85 ed                	test   ebp,ebp
c001e594:	0f 84 a0 01 00 00    	je     c001e73a <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001e59a:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e59c:	75 a6                	jne    c001e544 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e59e:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e5a4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e5a8:	01 d0                	add    eax,edx
c001e5aa:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e5ae:	83 ec 0c             	sub    esp,0xc
c001e5b1:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e5b7:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e5ba:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e5c0:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e5c7:	50                   	push   eax
c001e5c8:	e8 21 fe ff ff       	call   c001e3ee <unblockTask(ThreadControlBlock*)>
c001e5cd:	83 c4 10             	add    esp,0x10
c001e5d0:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e5d3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e5d7:	89 f7                	mov    edi,esi
c001e5d9:	41                   	inc    ecx
c001e5da:	83 f9 10             	cmp    ecx,0x10
c001e5dd:	0f 85 6b ff ff ff    	jne    c001e54e <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e5e3:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e5e9:	85 c0                	test   eax,eax
c001e5eb:	74 5d                	je     c001e64a <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e5ed:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e5f3:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e5f9:	74 4f                	je     c001e64a <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e5fb:	83 ec 0c             	sub    esp,0xc
c001e5fe:	68 68 19 03 c0       	push   0xc0031968
c001e603:	e8 16 a4 00 00       	call   c0028a1e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e608:	c7 04 24 68 19 03 c0 	mov    DWORD PTR [esp],0xc0031968
c001e60f:	89 c7                	mov    edi,eax
c001e611:	e8 10 a4 00 00       	call   c0028a26 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e616:	83 c4 10             	add    esp,0x10
c001e619:	84 c0                	test   al,al
c001e61b:	0f 84 e4 00 00 00    	je     c001e705 <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001e621:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e624:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e62a:	85 d2                	test   edx,edx
c001e62c:	74 0f                	je     c001e63d <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e62e:	83 ec 0c             	sub    esp,0xc
c001e631:	8b 02                	mov    eax,DWORD PTR [edx]
c001e633:	52                   	push   edx
c001e634:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e637:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e63a:	83 c4 10             	add    esp,0x10
c001e63d:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e647:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e64a:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e650:	85 db                	test   ebx,ebx
c001e652:	74 16                	je     c001e66a <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e654:	83 ec 0c             	sub    esp,0xc
c001e657:	53                   	push   ebx
c001e658:	e8 ad 3b ff ff       	call   c001220a <VAS::~VAS()>
c001e65d:	58                   	pop    eax
c001e65e:	5a                   	pop    edx
c001e65f:	6a 10                	push   0x10
c001e661:	53                   	push   ebx
c001e662:	e8 03 48 ff ff       	call   c0012e6a <operator delete(void*, unsigned long)>
c001e667:	83 c4 10             	add    esp,0x10
c001e66a:	83 ec 0c             	sub    esp,0xc
c001e66d:	68 f6 c1 02 c0       	push   0xc002c1f6
c001e672:	e8 d3 48 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001e677:	83 c4 10             	add    esp,0x10
c001e67a:	83 ec 08             	sub    esp,0x8
c001e67d:	68 3f 07 00 00       	push   0x73f
c001e682:	68 04 c2 02 c0       	push   0xc002c204
c001e687:	e8 be 48 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001e68c:	83 c4 2c             	add    esp,0x2c
c001e68f:	5b                   	pop    ebx
c001e690:	5e                   	pop    esi
c001e691:	5f                   	pop    edi
c001e692:	5d                   	pop    ebp
c001e693:	c3                   	ret    
c001e694:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e698:	83 ec 0c             	sub    esp,0xc
c001e69b:	68 e0 c4 02 c0       	push   0xc002c4e0
c001e6a0:	e8 56 bf ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c001e6a5:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e6a8:	83 c4 10             	add    esp,0x10
c001e6ab:	89 f7                	mov    edi,esi
c001e6ad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e6b1:	e9 8e fe ff ff       	jmp    c001e544 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e6b6:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e6bc:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e6c2:	75 1c                	jne    c001e6e0 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e6c4:	83 ec 0c             	sub    esp,0xc
c001e6c7:	68 48 c5 02 c0       	push   0xc002c548
c001e6cc:	e8 79 48 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001e6d1:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e6d8:	e8 8f fb ff ff       	call   c001e26c <blockTask(TaskState)>
c001e6dd:	83 c4 10             	add    esp,0x10
c001e6e0:	83 ec 08             	sub    esp,0x8
c001e6e3:	56                   	push   esi
c001e6e4:	68 68 19 03 c0       	push   0xc0031968
c001e6e9:	e8 02 a4 00 00       	call   c0028af0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e6ee:	c7 04 24 68 19 03 c0 	mov    DWORD PTR [esp],0xc0031968
c001e6f5:	e8 24 a3 00 00       	call   c0028a1e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e6fa:	83 c4 10             	add    esp,0x10
c001e6fd:	39 f8                	cmp    eax,edi
c001e6ff:	0f 84 1c ff ff ff    	je     c001e621 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e705:	83 ec 0c             	sub    esp,0xc
c001e708:	68 68 19 03 c0       	push   0xc0031968
c001e70d:	e8 0c a3 00 00       	call   c0028a1e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e712:	c7 04 24 68 19 03 c0 	mov    DWORD PTR [esp],0xc0031968
c001e719:	89 c6                	mov    esi,eax
c001e71b:	e8 22 a3 00 00       	call   c0028a42 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e720:	83 c4 10             	add    esp,0x10
c001e723:	39 f3                	cmp    ebx,esi
c001e725:	74 b9                	je     c001e6e0 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e727:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e72a:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e72d:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e733:	75 ab                	jne    c001e6e0 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e735:	e9 7c ff ff ff       	jmp    c001e6b6 <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001e73a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e73e:	83 ec 0c             	sub    esp,0xc
c001e741:	68 14 c5 02 c0       	push   0xc002c514
c001e746:	e9 55 ff ff ff       	jmp    c001e6a0 <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001e74b:	8b 36                	mov    esi,DWORD PTR [esi]
c001e74d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e751:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e754:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e757:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e75d:	01 d7                	add    edi,edx
c001e75f:	89 f8                	mov    eax,edi
c001e761:	e9 44 fe ff ff       	jmp    c001e5aa <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e766 <cleanerTaskFunction(void*)>:
c001e766:	53                   	push   ebx
c001e767:	83 ec 08             	sub    esp,0x8
c001e76a:	e8 69 f6 ff ff       	call   c001ddd8 <unlockScheduler()>
c001e76f:	e8 62 f6 ff ff       	call   c001ddd6 <lockScheduler()>
c001e774:	80 3d 2c 19 03 c0 00 	cmp    BYTE PTR ds:0xc003192c,0x0
c001e77b:	0f 85 8e 00 00 00    	jne    c001e80f <cleanerTaskFunction(void*)+0xa9>
c001e781:	83 ec 0c             	sub    esp,0xc
c001e784:	6a 02                	push   0x2
c001e786:	e8 9f fa ff ff       	call   c001e22a <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e78b:	83 c4 10             	add    esp,0x10
c001e78e:	c6 05 2c 19 03 c0 00 	mov    BYTE PTR ds:0xc003192c,0x0
c001e795:	e8 63 f6 ff ff       	call   c001ddfd <lockStuff()>
c001e79a:	e8 37 f6 ff ff       	call   c001ddd6 <lockScheduler()>
c001e79f:	83 ec 0c             	sub    esp,0xc
c001e7a2:	68 50 19 03 c0       	push   0xc0031950
c001e7a7:	e8 7a a2 00 00       	call   c0028a26 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e7ac:	83 c4 10             	add    esp,0x10
c001e7af:	84 c0                	test   al,al
c001e7b1:	75 40                	jne    c001e7f3 <cleanerTaskFunction(void*)+0x8d>
c001e7b3:	83 ec 0c             	sub    esp,0xc
c001e7b6:	68 50 19 03 c0       	push   0xc0031950
c001e7bb:	e8 5e a2 00 00       	call   c0028a1e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e7c0:	c7 04 24 50 19 03 c0 	mov    DWORD PTR [esp],0xc0031950
c001e7c7:	89 c3                	mov    ebx,eax
c001e7c9:	e8 74 a2 00 00       	call   c0028a42 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e7ce:	c7 04 24 1a c2 02 c0 	mov    DWORD PTR [esp],0xc002c21a
c001e7d5:	e8 70 47 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001e7da:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e7dd:	e8 bb fc ff ff       	call   c001e49d <cleanupTerminatedTask(ThreadControlBlock*)>
c001e7e2:	c7 04 24 33 c2 02 c0 	mov    DWORD PTR [esp],0xc002c233
c001e7e9:	e8 5c 47 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001e7ee:	83 c4 10             	add    esp,0x10
c001e7f1:	eb ac                	jmp    c001e79f <cleanerTaskFunction(void*)+0x39>
c001e7f3:	e8 e0 f5 ff ff       	call   c001ddd8 <unlockScheduler()>
c001e7f8:	e8 9a f9 ff ff       	call   c001e197 <unlockStuff()>
c001e7fd:	e8 d4 f5 ff ff       	call   c001ddd6 <lockScheduler()>
c001e802:	80 3d 2c 19 03 c0 00 	cmp    BYTE PTR ds:0xc003192c,0x0
c001e809:	0f 84 72 ff ff ff    	je     c001e781 <cleanerTaskFunction(void*)+0x1b>
c001e80f:	e8 c4 f5 ff ff       	call   c001ddd8 <unlockScheduler()>
c001e814:	e9 75 ff ff ff       	jmp    c001e78e <cleanerTaskFunction(void*)+0x28>

c001e819 <terminateTask(int)>:
c001e819:	83 ec 14             	sub    esp,0x14
c001e81c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e821:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001e824:	83 c0 0c             	add    eax,0xc
c001e827:	50                   	push   eax
c001e828:	68 70 c5 02 c0       	push   0xc002c570
c001e82d:	e8 18 47 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001e832:	e8 c6 f5 ff ff       	call   c001ddfd <lockStuff()>
c001e837:	e8 9a f5 ff ff       	call   c001ddd6 <lockScheduler()>
c001e83c:	c7 04 24 46 c2 02 c0 	mov    DWORD PTR [esp],0xc002c246
c001e843:	e8 02 47 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001e848:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e84c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e851:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e854:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e859:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e85c:	5a                   	pop    edx
c001e85d:	59                   	pop    ecx
c001e85e:	50                   	push   eax
c001e85f:	68 50 19 03 c0       	push   0xc0031950
c001e864:	e8 87 a2 00 00       	call   c0028af0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e869:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e86e:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e875:	c7 04 24 60 c2 02 c0 	mov    DWORD PTR [esp],0xc002c260
c001e87c:	e8 c9 46 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001e881:	83 c4 10             	add    esp,0x10
c001e884:	a1 28 19 03 c0       	mov    eax,ds:0xc0031928
c001e889:	85 c0                	test   eax,eax
c001e88b:	74 5a                	je     c001e8e7 <terminateTask(int)+0xce>
c001e88d:	83 ec 0c             	sub    esp,0xc
c001e890:	68 7a c2 02 c0       	push   0xc002c27a
c001e895:	e8 b0 46 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001e89a:	58                   	pop    eax
c001e89b:	c6 05 2c 19 03 c0 01 	mov    BYTE PTR ds:0xc003192c,0x1
c001e8a2:	ff 35 28 19 03 c0    	push   DWORD PTR ds:0xc0031928
c001e8a8:	e8 41 fb ff ff       	call   c001e3ee <unblockTask(ThreadControlBlock*)>
c001e8ad:	c7 04 24 94 c2 02 c0 	mov    DWORD PTR [esp],0xc002c294
c001e8b4:	e8 91 46 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001e8b9:	83 c4 10             	add    esp,0x10
c001e8bc:	e8 17 f5 ff ff       	call   c001ddd8 <unlockScheduler()>
c001e8c1:	e8 d1 f8 ff ff       	call   c001e197 <unlockStuff()>
c001e8c6:	83 ec 0c             	sub    esp,0xc
c001e8c9:	68 cc c2 02 c0       	push   0xc002c2cc
c001e8ce:	e8 77 46 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001e8d3:	83 c4 10             	add    esp,0x10
c001e8d6:	e8 fb f4 ff ff       	call   c001ddd6 <lockScheduler()>
c001e8db:	e8 32 f8 ff ff       	call   c001e112 <schedule()>
c001e8e0:	e8 f3 f4 ff ff       	call   c001ddd8 <unlockScheduler()>
c001e8e5:	eb ef                	jmp    c001e8d6 <terminateTask(int)+0xbd>
c001e8e7:	83 ec 0c             	sub    esp,0xc
c001e8ea:	68 ae c2 02 c0       	push   0xc002c2ae
c001e8ef:	e8 56 46 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001e8f4:	83 c4 10             	add    esp,0x10
c001e8f7:	eb c3                	jmp    c001e8bc <terminateTask(int)+0xa3>

c001e8f9 <Thr::terminateFromIRQ(int)>:
c001e8f9:	83 ec 18             	sub    esp,0x18
c001e8fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e900:	e8 14 ff ff ff       	call   c001e819 <terminateTask(int)>
c001e905:	90                   	nop

c001e906 <Semaphore::release()>:
c001e906:	83 ec 0c             	sub    esp,0xc
c001e909:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e90d:	e8 eb f4 ff ff       	call   c001ddfd <lockStuff()>
c001e912:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e915:	85 d2                	test   edx,edx
c001e917:	74 1a                	je     c001e933 <Semaphore::release()+0x2d>
c001e919:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001e91c:	83 ec 0c             	sub    esp,0xc
c001e91f:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001e922:	52                   	push   edx
c001e923:	e8 c6 fa ff ff       	call   c001e3ee <unblockTask(ThreadControlBlock*)>
c001e928:	83 c4 10             	add    esp,0x10
c001e92b:	83 c4 0c             	add    esp,0xc
c001e92e:	e9 64 f8 ff ff       	jmp    c001e197 <unlockStuff()>
c001e933:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001e936:	83 c4 0c             	add    esp,0xc
c001e939:	e9 59 f8 ff ff       	jmp    c001e197 <unlockStuff()>

c001e93e <__static_initialization_and_destruction_0(int, int)>:
c001e93e:	83 ec 0c             	sub    esp,0xc
c001e941:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e946:	0f 85 88 00 00 00    	jne    c001e9d4 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e94c:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e954:	75 7e                	jne    c001e9d4 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e956:	83 ec 0c             	sub    esp,0xc
c001e959:	68 68 19 03 c0       	push   0xc0031968
c001e95e:	e8 3d a3 00 00       	call   c0028ca0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e963:	83 c4 10             	add    esp,0x10
c001e966:	83 ec 04             	sub    esp,0x4
c001e969:	68 28 d3 02 c0       	push   0xc002d328
c001e96e:	68 68 19 03 c0       	push   0xc0031968
c001e973:	68 60 8c 02 c0       	push   0xc0028c60
c001e978:	e8 67 44 ff ff       	call   c0012de4 <__cxa_atexit>
c001e97d:	83 c4 10             	add    esp,0x10
c001e980:	83 ec 0c             	sub    esp,0xc
c001e983:	68 5c 19 03 c0       	push   0xc003195c
c001e988:	e8 13 a3 00 00       	call   c0028ca0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e98d:	83 c4 10             	add    esp,0x10
c001e990:	83 ec 04             	sub    esp,0x4
c001e993:	68 28 d3 02 c0       	push   0xc002d328
c001e998:	68 5c 19 03 c0       	push   0xc003195c
c001e99d:	68 60 8c 02 c0       	push   0xc0028c60
c001e9a2:	e8 3d 44 ff ff       	call   c0012de4 <__cxa_atexit>
c001e9a7:	83 c4 10             	add    esp,0x10
c001e9aa:	83 ec 0c             	sub    esp,0xc
c001e9ad:	68 50 19 03 c0       	push   0xc0031950
c001e9b2:	e8 e9 a2 00 00       	call   c0028ca0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e9b7:	83 c4 10             	add    esp,0x10
c001e9ba:	83 ec 04             	sub    esp,0x4
c001e9bd:	68 28 d3 02 c0       	push   0xc002d328
c001e9c2:	68 50 19 03 c0       	push   0xc0031950
c001e9c7:	68 60 8c 02 c0       	push   0xc0028c60
c001e9cc:	e8 13 44 ff ff       	call   c0012de4 <__cxa_atexit>
c001e9d1:	83 c4 10             	add    esp,0x10
c001e9d4:	90                   	nop
c001e9d5:	83 c4 0c             	add    esp,0xc
c001e9d8:	c3                   	ret    

c001e9d9 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001e9d9:	83 ec 0c             	sub    esp,0xc
c001e9dc:	83 ec 08             	sub    esp,0x8
c001e9df:	68 ff ff 00 00       	push   0xffff
c001e9e4:	6a 01                	push   0x1
c001e9e6:	e8 53 ff ff ff       	call   c001e93e <__static_initialization_and_destruction_0(int, int)>
c001e9eb:	83 c4 10             	add    esp,0x10
c001e9ee:	83 c4 0c             	add    esp,0xc
c001e9f1:	c3                   	ret    

c001e9f2 <Vm::inbv(unsigned short)>:
c001e9f2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e9f6:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e9fb:	75 06                	jne    c001ea03 <Vm::inbv(unsigned short)+0x11>
c001e9fd:	a0 ac 19 03 c0       	mov    al,ds:0xc00319ac
c001ea02:	c3                   	ret    
c001ea03:	ec                   	in     al,dx
c001ea04:	c3                   	ret    

c001ea05 <Vm::outbv(unsigned short, unsigned char)>:
c001ea05:	53                   	push   ebx
c001ea06:	83 ec 08             	sub    esp,0x8
c001ea09:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ea0d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ea11:	66 81 fa fe fe       	cmp    dx,0xfefe
c001ea16:	75 38                	jne    c001ea50 <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001ea18:	0f b6 c3             	movzx  eax,bl
c001ea1b:	51                   	push   ecx
c001ea1c:	51                   	push   ecx
c001ea1d:	50                   	push   eax
c001ea1e:	68 8f c5 02 c0       	push   0xc002c58f
c001ea23:	e8 22 45 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001ea28:	8b 15 ac 19 03 c0    	mov    edx,DWORD PTR ds:0xc00319ac
c001ea2e:	83 c4 10             	add    esp,0x10
c001ea31:	8d 42 01             	lea    eax,[edx+0x1]
c001ea34:	88 9a c0 19 03 c0    	mov    BYTE PTR [edx-0x3ffce640],bl
c001ea3a:	a3 ac 19 03 c0       	mov    ds:0xc00319ac,eax
c001ea3f:	83 f8 20             	cmp    eax,0x20
c001ea42:	75 0f                	jne    c001ea53 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001ea44:	c7 05 ac 19 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00319ac,0x1f
c001ea4e:	eb 03                	jmp    c001ea53 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001ea50:	88 d8                	mov    al,bl
c001ea52:	ee                   	out    dx,al
c001ea53:	83 c4 08             	add    esp,0x8
c001ea56:	5b                   	pop    ebx
c001ea57:	c3                   	ret    

c001ea58 <Vm::realToLinear(unsigned short, unsigned short)>:
c001ea58:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ea5d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ea62:	c1 e0 04             	shl    eax,0x4
c001ea65:	01 d0                	add    eax,edx
c001ea67:	c3                   	ret    

c001ea68 <Vm::getSegment(unsigned int)>:
c001ea68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea6c:	c1 e8 10             	shr    eax,0x10
c001ea6f:	c3                   	ret    

c001ea70 <Vm::getOffset(unsigned int)>:
c001ea70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea74:	c3                   	ret    

c001ea75 <Vm::mainloop2()>:
c001ea75:	83 ec 0c             	sub    esp,0xc
c001ea78:	e8 59 f3 ff ff       	call   c001ddd6 <lockScheduler()>
c001ea7d:	83 ec 0c             	sub    esp,0xc
c001ea80:	c6 05 a5 19 03 c0 01 	mov    BYTE PTR ds:0xc00319a5,0x1
c001ea87:	6a 02                	push   0x2
c001ea89:	e8 9c f7 ff ff       	call   c001e22a <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001ea8e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ea93:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001ea97:	52                   	push   edx
c001ea98:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001ea9c:	52                   	push   edx
c001ea9d:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001eaa1:	52                   	push   edx
c001eaa2:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001eaa6:	50                   	push   eax
c001eaa7:	e8 4e 18 fe ff       	call   c00002fa <goToVM86>
c001eaac:	83 c4 2c             	add    esp,0x2c
c001eaaf:	c3                   	ret    

c001eab0 <Vm::mainVm8086Loop(void*)>:
c001eab0:	83 ec 0c             	sub    esp,0xc
c001eab3:	e8 20 f3 ff ff       	call   c001ddd8 <unlockScheduler()>
c001eab8:	83 c4 0c             	add    esp,0xc
c001eabb:	eb b8                	jmp    c001ea75 <Vm::mainloop2()>

c001eabd <Vm::mainloop3(unsigned long)>:
c001eabd:	53                   	push   ebx
c001eabe:	83 ec 08             	sub    esp,0x8
c001eac1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001eac5:	e8 0c f3 ff ff       	call   c001ddd6 <lockScheduler()>
c001eaca:	83 ec 0c             	sub    esp,0xc
c001eacd:	89 1d a0 19 03 c0    	mov    DWORD PTR ds:0xc00319a0,ebx
c001ead3:	6a 02                	push   0x2
c001ead5:	c6 05 a4 19 03 c0 01 	mov    BYTE PTR ds:0xc00319a4,0x1
c001eadc:	e8 49 f7 ff ff       	call   c001e22a <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001eae1:	83 c4 18             	add    esp,0x18
c001eae4:	5b                   	pop    ebx
c001eae5:	eb 8e                	jmp    c001ea75 <Vm::mainloop2()>

c001eae7 <Vm::initialise8086()>:
c001eae7:	83 ec 0c             	sub    esp,0xc
c001eaea:	68 80 00 00 00       	push   0x80
c001eaef:	6a 00                	push   0x0
c001eaf1:	68 b0 ea 01 c0       	push   0xc001eab0
c001eaf6:	ff 35 74 19 03 c0    	push   DWORD PTR ds:0xc0031974
c001eafc:	e8 07 f4 ff ff       	call   c001df08 <Process::createThread(void (*)(void*), void*, int)>
c001eb01:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001eb08:	a3 a8 19 03 c0       	mov    ds:0xc00319a8,eax
c001eb0d:	68 00 01 00 00       	push   0x100
c001eb12:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c001eb17:	6a 00                	push   0x0
c001eb19:	6a 00                	push   0x0
c001eb1b:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001eb21:	e8 44 3b ff ff       	call   c001266a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001eb26:	83 c4 2c             	add    esp,0x2c
c001eb29:	c3                   	ret    

c001eb2a <Vm::finish8086()>:
c001eb2a:	53                   	push   ebx
c001eb2b:	83 ec 08             	sub    esp,0x8
c001eb2e:	e8 a3 f2 ff ff       	call   c001ddd6 <lockScheduler()>
c001eb33:	80 3d a4 19 03 c0 00 	cmp    BYTE PTR ds:0xc00319a4,0x0
c001eb3a:	75 0c                	jne    c001eb48 <Vm::finish8086()+0x1e>
c001eb3c:	e8 d1 f5 ff ff       	call   c001e112 <schedule()>
c001eb41:	e8 92 f2 ff ff       	call   c001ddd8 <unlockScheduler()>
c001eb46:	eb e6                	jmp    c001eb2e <Vm::finish8086()+0x4>
c001eb48:	83 ec 0c             	sub    esp,0xc
c001eb4b:	8b 1d a0 19 03 c0    	mov    ebx,DWORD PTR ds:0xc00319a0
c001eb51:	ff 35 a8 19 03 c0    	push   DWORD PTR ds:0xc00319a8
c001eb57:	c6 05 a4 19 03 c0 00 	mov    BYTE PTR ds:0xc00319a4,0x0
c001eb5e:	e8 8b f8 ff ff       	call   c001e3ee <unblockTask(ThreadControlBlock*)>
c001eb63:	e8 70 f2 ff ff       	call   c001ddd8 <unlockScheduler()>
c001eb68:	89 d8                	mov    eax,ebx
c001eb6a:	83 c4 18             	add    esp,0x18
c001eb6d:	5b                   	pop    ebx
c001eb6e:	c3                   	ret    

c001eb6f <Vm::getOutput8086(unsigned char*)>:
c001eb6f:	83 ec 10             	sub    esp,0x10
c001eb72:	ff 35 ac 19 03 c0    	push   DWORD PTR ds:0xc00319ac
c001eb78:	68 c0 19 03 c0       	push   0xc00319c0
c001eb7d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eb81:	e8 be 1b fe ff       	call   c0000744 <memcpy>
c001eb86:	a1 ac 19 03 c0       	mov    eax,ds:0xc00319ac
c001eb8b:	c7 05 ac 19 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00319ac,0x0
c001eb95:	83 c4 1c             	add    esp,0x1c
c001eb98:	c3                   	ret    

c001eb99 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001eb99:	55                   	push   ebp
c001eb9a:	57                   	push   edi
c001eb9b:	56                   	push   esi
c001eb9c:	53                   	push   ebx
c001eb9d:	83 ec 2c             	sub    esp,0x2c
c001eba0:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001eba4:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001eba8:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001ebac:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001ebb0:	e8 21 f2 ff ff       	call   c001ddd6 <lockScheduler()>
c001ebb5:	a0 a5 19 03 c0       	mov    al,ds:0xc00319a5
c001ebba:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ebbe:	84 c0                	test   al,al
c001ebc0:	75 0c                	jne    c001ebce <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001ebc2:	e8 4b f5 ff ff       	call   c001e112 <schedule()>
c001ebc7:	e8 0c f2 ff ff       	call   c001ddd8 <unlockScheduler()>
c001ebcc:	eb e2                	jmp    c001ebb0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001ebce:	a1 a8 19 03 c0       	mov    eax,ds:0xc00319a8
c001ebd3:	c7 05 ac 19 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00319ac,0x0
c001ebdd:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001ebe1:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001ebe5:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001ebe9:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001ebed:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001ebf1:	50                   	push   eax
c001ebf2:	6a 20                	push   0x20
c001ebf4:	6a 00                	push   0x0
c001ebf6:	68 c0 19 03 c0       	push   0xc00319c0
c001ebfb:	e8 78 1b fe ff       	call   c0000778 <memset>
c001ec00:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ec07:	e8 34 0c ff ff       	call   c000f840 <malloc>
c001ec0c:	83 c4 0c             	add    esp,0xc
c001ec0f:	89 c7                	mov    edi,eax
c001ec11:	ff 35 74 19 03 c0    	push   DWORD PTR ds:0xc0031974
c001ec17:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ec1b:	50                   	push   eax
c001ec1c:	e8 81 48 ff ff       	call   c00134a2 <File::File(char const*, Process*)>
c001ec21:	83 c4 10             	add    esp,0x10
c001ec24:	85 ff                	test   edi,edi
c001ec26:	75 0a                	jne    c001ec32 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001ec28:	83 ec 0c             	sub    esp,0xc
c001ec2b:	68 ab c5 02 c0       	push   0xc002c5ab
c001ec30:	eb 27                	jmp    c001ec59 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001ec32:	50                   	push   eax
c001ec33:	8d 44 24 17          	lea    eax,[esp+0x17]
c001ec37:	50                   	push   eax
c001ec38:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ec3c:	50                   	push   eax
c001ec3d:	57                   	push   edi
c001ec3e:	e8 6f 4b ff ff       	call   c00137b2 <File::stat(unsigned long long*, bool*)>
c001ec43:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001ec48:	83 c4 10             	add    esp,0x10
c001ec4b:	89 e8                	mov    eax,ebp
c001ec4d:	84 c0                	test   al,al
c001ec4f:	74 19                	je     c001ec6a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001ec51:	83 ec 0c             	sub    esp,0xc
c001ec54:	68 bf c5 02 c0       	push   0xc002c5bf
c001ec59:	e8 9d b9 ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c001ec5e:	31 ed                	xor    ebp,ebp
c001ec60:	e8 73 f1 ff ff       	call   c001ddd8 <unlockScheduler()>
c001ec65:	83 c4 10             	add    esp,0x10
c001ec68:	eb 75                	jmp    c001ecdf <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ec6a:	50                   	push   eax
c001ec6b:	50                   	push   eax
c001ec6c:	6a 01                	push   0x1
c001ec6e:	57                   	push   edi
c001ec6f:	e8 92 48 ff ff       	call   c0013506 <File::open(FileOpenMode)>
c001ec74:	83 c4 10             	add    esp,0x10
c001ec77:	85 c0                	test   eax,eax
c001ec79:	74 17                	je     c001ec92 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001ec7b:	83 ec 0c             	sub    esp,0xc
c001ec7e:	68 d8 c5 02 c0       	push   0xc002c5d8
c001ec83:	e8 73 b9 ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c001ec88:	e8 4b f1 ff ff       	call   c001ddd8 <unlockScheduler()>
c001ec8d:	83 c4 10             	add    esp,0x10
c001ec90:	eb 4d                	jmp    c001ecdf <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ec92:	0f b7 f6             	movzx  esi,si
c001ec95:	50                   	push   eax
c001ec96:	0f b7 db             	movzx  ebx,bx
c001ec99:	50                   	push   eax
c001ec9a:	56                   	push   esi
c001ec9b:	53                   	push   ebx
c001ec9c:	e8 b7 fd ff ff       	call   c001ea58 <Vm::realToLinear(unsigned short, unsigned short)>
c001eca1:	5a                   	pop    edx
c001eca2:	8b 17                	mov    edx,DWORD PTR [edi]
c001eca4:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001eca8:	51                   	push   ecx
c001eca9:	50                   	push   eax
c001ecaa:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ecae:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ecb2:	57                   	push   edi
c001ecb3:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001ecb6:	83 c4 14             	add    esp,0x14
c001ecb9:	57                   	push   edi
c001ecba:	e8 a5 48 ff ff       	call   c0013564 <File::close()>
c001ecbf:	c6 05 a5 19 03 c0 00 	mov    BYTE PTR ds:0xc00319a5,0x0
c001ecc6:	e8 0d f1 ff ff       	call   c001ddd8 <unlockScheduler()>
c001eccb:	59                   	pop    ecx
c001eccc:	ff 35 a8 19 03 c0    	push   DWORD PTR ds:0xc00319a8
c001ecd2:	e8 17 f7 ff ff       	call   c001e3ee <unblockTask(ThreadControlBlock*)>
c001ecd7:	83 c4 10             	add    esp,0x10
c001ecda:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001ecdf:	83 c4 2c             	add    esp,0x2c
c001ece2:	89 e8                	mov    eax,ebp
c001ece4:	5b                   	pop    ebx
c001ece5:	5e                   	pop    esi
c001ece6:	5f                   	pop    edi
c001ece7:	5d                   	pop    ebp
c001ece8:	c3                   	ret    

c001ece9 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001ece9:	57                   	push   edi
c001ecea:	56                   	push   esi
c001eceb:	53                   	push   ebx
c001ecec:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ecf0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ecf4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ecf8:	83 e8 06             	sub    eax,0x6
c001ecfb:	0f b7 c0             	movzx  eax,ax
c001ecfe:	50                   	push   eax
c001ecff:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001ed04:	50                   	push   eax
c001ed05:	e8 4e fd ff ff       	call   c001ea58 <Vm::realToLinear(unsigned short, unsigned short)>
c001ed0a:	5a                   	pop    edx
c001ed0b:	5e                   	pop    esi
c001ed0c:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001ed0f:	8d 56 fa             	lea    edx,[esi-0x6]
c001ed12:	81 e2 ff ff 00 00    	and    edx,0xffff
c001ed18:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001ed1b:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001ed1e:	83 c2 02             	add    edx,0x2
c001ed21:	66 89 10             	mov    WORD PTR [eax],dx
c001ed24:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001ed27:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001ed2b:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001ed2e:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001ed32:	89 d6                	mov    esi,edx
c001ed34:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001ed3a:	66 81 e6 ff fd       	and    si,0xfdff
c001ed3f:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001ed43:	74 07                	je     c001ed4c <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001ed45:	89 d6                	mov    esi,edx
c001ed47:	66 81 ce 00 02       	or     si,0x200
c001ed4c:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001ed50:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ed55:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ed59:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001ed61:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001ed64:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001ed6c:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001ed6f:	5b                   	pop    ebx
c001ed70:	5e                   	pop    esi
c001ed71:	5f                   	pop    edi
c001ed72:	c3                   	ret    

c001ed73 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001ed73:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed78:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ed7d:	c1 e0 04             	shl    eax,0x4
c001ed80:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001ed83:	c3                   	ret    

c001ed84 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001ed84:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed89:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ed8e:	c1 e0 04             	shl    eax,0x4
c001ed91:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001ed95:	c3                   	ret    

c001ed96 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001ed96:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed9b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001eda0:	c1 e0 04             	shl    eax,0x4
c001eda3:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001eda6:	c3                   	ret    

c001eda7 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001eda7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001edac:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001edb1:	c1 e0 04             	shl    eax,0x4
c001edb4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001edb8:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001edbb:	c3                   	ret    

c001edbc <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001edbc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001edc1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001edc6:	c1 e0 04             	shl    eax,0x4
c001edc9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001edcd:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001edd1:	c3                   	ret    

c001edd2 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001edd2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001edd7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001eddc:	c1 e0 04             	shl    eax,0x4
c001eddf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ede3:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001ede6:	c3                   	ret    

c001ede7 <Vm::faultHandler(regs*)>:
c001ede7:	55                   	push   ebp
c001ede8:	57                   	push   edi
c001ede9:	56                   	push   esi
c001edea:	53                   	push   ebx
c001edeb:	83 ec 1c             	sub    esp,0x1c
c001edee:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001edf2:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001edf5:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001edf8:	0f b7 c1             	movzx  eax,cx
c001edfb:	50                   	push   eax
c001edfc:	0f b7 c3             	movzx  eax,bx
c001edff:	c1 e3 04             	shl    ebx,0x4
c001ee02:	50                   	push   eax
c001ee03:	e8 50 fc ff ff       	call   c001ea58 <Vm::realToLinear(unsigned short, unsigned short)>
c001ee08:	5a                   	pop    edx
c001ee09:	89 c5                	mov    ebp,eax
c001ee0b:	5e                   	pop    esi
c001ee0c:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001ee10:	50                   	push   eax
c001ee11:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001ee15:	50                   	push   eax
c001ee16:	e8 3d fc ff ff       	call   c001ea58 <Vm::realToLinear(unsigned short, unsigned short)>
c001ee1b:	01 cb                	add    ebx,ecx
c001ee1d:	89 c6                	mov    esi,eax
c001ee1f:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001ee23:	50                   	push   eax
c001ee24:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ee28:	50                   	push   eax
c001ee29:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001ee2d:	50                   	push   eax
c001ee2e:	55                   	push   ebp
c001ee2f:	53                   	push   ebx
c001ee30:	b3 06                	mov    bl,0x6
c001ee32:	68 f1 c5 02 c0       	push   0xc002c5f1
c001ee37:	e8 0e 41 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001ee3c:	83 c4 20             	add    esp,0x20
c001ee3f:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001ee44:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001ee49:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001ee4d:	3c 9d                	cmp    al,0x9d
c001ee4f:	0f 84 d7 02 00 00    	je     c001f12c <Vm::faultHandler(regs*)+0x345>
c001ee55:	0f 87 a3 00 00 00    	ja     c001eefe <Vm::faultHandler(regs*)+0x117>
c001ee5b:	3c 66                	cmp    al,0x66
c001ee5d:	0f 84 15 02 00 00    	je     c001f078 <Vm::faultHandler(regs*)+0x291>
c001ee63:	77 5f                	ja     c001eec4 <Vm::faultHandler(regs*)+0xdd>
c001ee65:	3c 36                	cmp    al,0x36
c001ee67:	0f 84 f1 01 00 00    	je     c001f05e <Vm::faultHandler(regs*)+0x277>
c001ee6d:	77 28                	ja     c001ee97 <Vm::faultHandler(regs*)+0xb0>
c001ee6f:	3c 26                	cmp    al,0x26
c001ee71:	0f 84 99 01 00 00    	je     c001f010 <Vm::faultHandler(regs*)+0x229>
c001ee77:	3c 2e                	cmp    al,0x2e
c001ee79:	0f 85 3b 07 00 00    	jne    c001f5ba <Vm::faultHandler(regs*)+0x7d3>
c001ee7f:	83 ec 0c             	sub    esp,0xc
c001ee82:	31 db                	xor    ebx,ebx
c001ee84:	68 06 c6 02 c0       	push   0xc002c606
c001ee89:	e8 bc 40 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001ee8e:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ee91:	83 c4 10             	add    esp,0x10
c001ee94:	45                   	inc    ebp
c001ee95:	eb b2                	jmp    c001ee49 <Vm::faultHandler(regs*)+0x62>
c001ee97:	3c 64                	cmp    al,0x64
c001ee99:	0f 84 8b 01 00 00    	je     c001f02a <Vm::faultHandler(regs*)+0x243>
c001ee9f:	0f 87 9f 01 00 00    	ja     c001f044 <Vm::faultHandler(regs*)+0x25d>
c001eea5:	3c 3e                	cmp    al,0x3e
c001eea7:	0f 85 0d 07 00 00    	jne    c001f5ba <Vm::faultHandler(regs*)+0x7d3>
c001eead:	83 ec 0c             	sub    esp,0xc
c001eeb0:	b3 01                	mov    bl,0x1
c001eeb2:	68 0a c6 02 c0       	push   0xc002c60a
c001eeb7:	e8 8e 40 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001eebc:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001eebf:	83 c4 10             	add    esp,0x10
c001eec2:	eb d0                	jmp    c001ee94 <Vm::faultHandler(regs*)+0xad>
c001eec4:	3c 6d                	cmp    al,0x6d
c001eec6:	0f 84 af 03 00 00    	je     c001f27b <Vm::faultHandler(regs*)+0x494>
c001eecc:	77 15                	ja     c001eee3 <Vm::faultHandler(regs*)+0xfc>
c001eece:	3c 67                	cmp    al,0x67
c001eed0:	0f 84 bf 01 00 00    	je     c001f095 <Vm::faultHandler(regs*)+0x2ae>
c001eed6:	3c 6c                	cmp    al,0x6c
c001eed8:	0f 84 3f 03 00 00    	je     c001f21d <Vm::faultHandler(regs*)+0x436>
c001eede:	e9 d7 06 00 00       	jmp    c001f5ba <Vm::faultHandler(regs*)+0x7d3>
c001eee3:	3c 6f                	cmp    al,0x6f
c001eee5:	0f 84 a4 04 00 00    	je     c001f38f <Vm::faultHandler(regs*)+0x5a8>
c001eeeb:	0f 82 11 04 00 00    	jb     c001f302 <Vm::faultHandler(regs*)+0x51b>
c001eef1:	3c 9c                	cmp    al,0x9c
c001eef3:	0f 84 ba 01 00 00    	je     c001f0b3 <Vm::faultHandler(regs*)+0x2cc>
c001eef9:	e9 bc 06 00 00       	jmp    c001f5ba <Vm::faultHandler(regs*)+0x7d3>
c001eefe:	3c ec                	cmp    al,0xec
c001ef00:	0f 84 24 06 00 00    	je     c001f52a <Vm::faultHandler(regs*)+0x743>
c001ef06:	0f 87 93 00 00 00    	ja     c001ef9f <Vm::faultHandler(regs*)+0x1b8>
c001ef0c:	3c e4                	cmp    al,0xe4
c001ef0e:	0f 84 5c 05 00 00    	je     c001f470 <Vm::faultHandler(regs*)+0x689>
c001ef14:	77 6a                	ja     c001ef80 <Vm::faultHandler(regs*)+0x199>
c001ef16:	3c cd                	cmp    al,0xcd
c001ef18:	0f 84 7e 02 00 00    	je     c001f19c <Vm::faultHandler(regs*)+0x3b5>
c001ef1e:	3c cf                	cmp    al,0xcf
c001ef20:	0f 85 94 06 00 00    	jne    c001f5ba <Vm::faultHandler(regs*)+0x7d3>
c001ef26:	83 ec 0c             	sub    esp,0xc
c001ef29:	68 4e c6 02 c0       	push   0xc002c64e
c001ef2e:	e8 17 40 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001ef33:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001ef36:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001ef39:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001ef3d:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001ef40:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001ef44:	0d 00 02 02 00       	or     eax,0x20200
c001ef49:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001ef4c:	56                   	push   esi
c001ef4d:	53                   	push   ebx
c001ef4e:	52                   	push   edx
c001ef4f:	68 54 c6 02 c0       	push   0xc002c654
c001ef54:	e8 f1 3f ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001ef59:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001ef5d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ef63:	66 c1 e8 09          	shr    ax,0x9
c001ef67:	83 e0 01             	and    eax,0x1
c001ef6a:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ef6d:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001ef70:	83 c0 06             	add    eax,0x6
c001ef73:	25 ff ff 00 00       	and    eax,0xffff
c001ef78:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001ef7b:	e9 95 02 00 00       	jmp    c001f215 <Vm::faultHandler(regs*)+0x42e>
c001ef80:	3c e6                	cmp    al,0xe6
c001ef82:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001ef86:	0f 84 4e 05 00 00    	je     c001f4da <Vm::faultHandler(regs*)+0x6f3>
c001ef8c:	0f 82 0a 05 00 00    	jb     c001f49c <Vm::faultHandler(regs*)+0x6b5>
c001ef92:	3c e7                	cmp    al,0xe7
c001ef94:	0f 84 69 05 00 00    	je     c001f503 <Vm::faultHandler(regs*)+0x71c>
c001ef9a:	e9 1b 06 00 00       	jmp    c001f5ba <Vm::faultHandler(regs*)+0x7d3>
c001ef9f:	3c ef                	cmp    al,0xef
c001efa1:	0f 84 e6 05 00 00    	je     c001f58d <Vm::faultHandler(regs*)+0x7a6>
c001efa7:	77 37                	ja     c001efe0 <Vm::faultHandler(regs*)+0x1f9>
c001efa9:	3c ed                	cmp    al,0xed
c001efab:	0f 84 a3 05 00 00    	je     c001f554 <Vm::faultHandler(regs*)+0x76d>
c001efb1:	3c ee                	cmp    al,0xee
c001efb3:	0f 85 01 06 00 00    	jne    c001f5ba <Vm::faultHandler(regs*)+0x7d3>
c001efb9:	52                   	push   edx
c001efba:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001efbd:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001efc0:	68 ef c6 02 c0       	push   0xc002c6ef
c001efc5:	e8 80 3f ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001efca:	59                   	pop    ecx
c001efcb:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001efcf:	5b                   	pop    ebx
c001efd0:	50                   	push   eax
c001efd1:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001efd5:	50                   	push   eax
c001efd6:	e8 2a fa ff ff       	call   c001ea05 <Vm::outbv(unsigned short, unsigned char)>
c001efdb:	e9 a5 05 00 00       	jmp    c001f585 <Vm::faultHandler(regs*)+0x79e>
c001efe0:	3c fa                	cmp    al,0xfa
c001efe2:	0f 84 f7 01 00 00    	je     c001f1df <Vm::faultHandler(regs*)+0x3f8>
c001efe8:	3c fb                	cmp    al,0xfb
c001efea:	0f 84 0a 02 00 00    	je     c001f1fa <Vm::faultHandler(regs*)+0x413>
c001eff0:	3c f3                	cmp    al,0xf3
c001eff2:	0f 85 c2 05 00 00    	jne    c001f5ba <Vm::faultHandler(regs*)+0x7d3>
c001eff8:	83 ec 0c             	sub    esp,0xc
c001effb:	68 27 c6 02 c0       	push   0xc002c627
c001f000:	e8 45 3f ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001f005:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f008:	83 c4 10             	add    esp,0x10
c001f00b:	e9 84 fe ff ff       	jmp    c001ee94 <Vm::faultHandler(regs*)+0xad>
c001f010:	83 ec 0c             	sub    esp,0xc
c001f013:	b3 02                	mov    bl,0x2
c001f015:	68 02 c6 02 c0       	push   0xc002c602
c001f01a:	e8 2b 3f ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001f01f:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f022:	83 c4 10             	add    esp,0x10
c001f025:	e9 6a fe ff ff       	jmp    c001ee94 <Vm::faultHandler(regs*)+0xad>
c001f02a:	83 ec 0c             	sub    esp,0xc
c001f02d:	b3 03                	mov    bl,0x3
c001f02f:	68 0e c6 02 c0       	push   0xc002c60e
c001f034:	e8 11 3f ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001f039:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f03c:	83 c4 10             	add    esp,0x10
c001f03f:	e9 50 fe ff ff       	jmp    c001ee94 <Vm::faultHandler(regs*)+0xad>
c001f044:	83 ec 0c             	sub    esp,0xc
c001f047:	b3 04                	mov    bl,0x4
c001f049:	68 12 c6 02 c0       	push   0xc002c612
c001f04e:	e8 f7 3e ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001f053:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f056:	83 c4 10             	add    esp,0x10
c001f059:	e9 36 fe ff ff       	jmp    c001ee94 <Vm::faultHandler(regs*)+0xad>
c001f05e:	83 ec 0c             	sub    esp,0xc
c001f061:	b3 05                	mov    bl,0x5
c001f063:	68 16 c6 02 c0       	push   0xc002c616
c001f068:	e8 dd 3e ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001f06d:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f070:	83 c4 10             	add    esp,0x10
c001f073:	e9 1c fe ff ff       	jmp    c001ee94 <Vm::faultHandler(regs*)+0xad>
c001f078:	83 ec 0c             	sub    esp,0xc
c001f07b:	68 1a c6 02 c0       	push   0xc002c61a
c001f080:	e8 c5 3e ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001f085:	83 c4 10             	add    esp,0x10
c001f088:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f08b:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001f090:	e9 ff fd ff ff       	jmp    c001ee94 <Vm::faultHandler(regs*)+0xad>
c001f095:	50                   	push   eax
c001f096:	50                   	push   eax
c001f097:	6a 01                	push   0x1
c001f099:	68 1f c6 02 c0       	push   0xc002c61f
c001f09e:	e8 a7 3e ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001f0a3:	83 c4 10             	add    esp,0x10
c001f0a6:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f0a9:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001f0ae:	e9 e1 fd ff ff       	jmp    c001ee94 <Vm::faultHandler(regs*)+0xad>
c001f0b3:	83 ec 0c             	sub    esp,0xc
c001f0b6:	68 2d c6 02 c0       	push   0xc002c62d
c001f0bb:	e8 8a 3e ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001f0c0:	83 c4 10             	add    esp,0x10
c001f0c3:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001f0c6:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f0cb:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001f0ce:	74 2f                	je     c001f0ff <Vm::faultHandler(regs*)+0x318>
c001f0d0:	83 ea 04             	sub    edx,0x4
c001f0d3:	25 ff 0d 00 00       	and    eax,0xdff
c001f0d8:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f0de:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f0e1:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f0e4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f0ea:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f0ee:	0f 84 bf 04 00 00    	je     c001f5b3 <Vm::faultHandler(regs*)+0x7cc>
c001f0f4:	80 cc 02             	or     ah,0x2
c001f0f7:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f0fa:	e9 b4 04 00 00       	jmp    c001f5b3 <Vm::faultHandler(regs*)+0x7cc>
c001f0ff:	83 ea 02             	sub    edx,0x2
c001f102:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f108:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f10b:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f10f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f115:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f119:	74 05                	je     c001f120 <Vm::faultHandler(regs*)+0x339>
c001f11b:	80 cc 02             	or     ah,0x2
c001f11e:	eb 03                	jmp    c001f123 <Vm::faultHandler(regs*)+0x33c>
c001f120:	80 e4 fd             	and    ah,0xfd
c001f123:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f127:	e9 87 04 00 00       	jmp    c001f5b3 <Vm::faultHandler(regs*)+0x7cc>
c001f12c:	83 ec 0c             	sub    esp,0xc
c001f12f:	68 34 c6 02 c0       	push   0xc002c634
c001f134:	e8 11 3e ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001f139:	83 c4 10             	add    esp,0x10
c001f13c:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f141:	74 28                	je     c001f16b <Vm::faultHandler(regs*)+0x384>
c001f143:	8b 06                	mov    eax,DWORD PTR [esi]
c001f145:	25 ff 0d 00 00       	and    eax,0xdff
c001f14a:	0d 00 02 02 00       	or     eax,0x20200
c001f14f:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f152:	8b 06                	mov    eax,DWORD PTR [esi]
c001f154:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f15a:	c1 e8 09             	shr    eax,0x9
c001f15d:	83 e0 01             	and    eax,0x1
c001f160:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f163:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f166:	83 c0 04             	add    eax,0x4
c001f169:	eb 24                	jmp    c001f18f <Vm::faultHandler(regs*)+0x3a8>
c001f16b:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f16e:	0d 00 02 02 00       	or     eax,0x20200
c001f173:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f176:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f179:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f17f:	66 c1 e8 09          	shr    ax,0x9
c001f183:	83 e0 01             	and    eax,0x1
c001f186:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f189:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f18c:	83 c0 02             	add    eax,0x2
c001f18f:	25 ff ff 00 00       	and    eax,0xffff
c001f194:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f197:	e9 17 04 00 00       	jmp    c001f5b3 <Vm::faultHandler(regs*)+0x7cc>
c001f19c:	53                   	push   ebx
c001f19d:	53                   	push   ebx
c001f19e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f1a2:	50                   	push   eax
c001f1a3:	68 3a c6 02 c0       	push   0xc002c63a
c001f1a8:	e8 9d 3d ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001f1ad:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f1b1:	83 c4 10             	add    esp,0x10
c001f1b4:	3c ee                	cmp    al,0xee
c001f1b6:	75 10                	jne    c001f1c8 <Vm::faultHandler(regs*)+0x3e1>
c001f1b8:	83 ec 0c             	sub    esp,0xc
c001f1bb:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f1be:	e8 fa f8 ff ff       	call   c001eabd <Vm::mainloop3(unsigned long)>
c001f1c3:	e9 c0 03 00 00       	jmp    c001f588 <Vm::faultHandler(regs*)+0x7a1>
c001f1c8:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001f1cc:	83 ec 0c             	sub    esp,0xc
c001f1cf:	53                   	push   ebx
c001f1d0:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001f1d4:	53                   	push   ebx
c001f1d5:	55                   	push   ebp
c001f1d6:	50                   	push   eax
c001f1d7:	57                   	push   edi
c001f1d8:	e8 0c fb ff ff       	call   c001ece9 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001f1dd:	eb 36                	jmp    c001f215 <Vm::faultHandler(regs*)+0x42e>
c001f1df:	83 ec 0c             	sub    esp,0xc
c001f1e2:	68 44 c6 02 c0       	push   0xc002c644
c001f1e7:	e8 5e 3d ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001f1ec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f1f1:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f1f5:	e9 8b 03 00 00       	jmp    c001f585 <Vm::faultHandler(regs*)+0x79e>
c001f1fa:	83 ec 0c             	sub    esp,0xc
c001f1fd:	68 49 c6 02 c0       	push   0xc002c649
c001f202:	e8 43 3d ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001f207:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f20c:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001f210:	e9 70 03 00 00       	jmp    c001f585 <Vm::faultHandler(regs*)+0x79e>
c001f215:	83 c4 20             	add    esp,0x20
c001f218:	e9 99 03 00 00       	jmp    c001f5b6 <Vm::faultHandler(regs*)+0x7cf>
c001f21d:	83 ec 0c             	sub    esp,0xc
c001f220:	68 87 c6 02 c0       	push   0xc002c687
c001f225:	e8 20 3d ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001f22a:	83 c4 10             	add    esp,0x10
c001f22d:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f230:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f235:	74 0d                	je     c001f244 <Vm::faultHandler(regs*)+0x45d>
c001f237:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f23e:	0f 87 9e 01 00 00    	ja     c001f3e2 <Vm::faultHandler(regs*)+0x5fb>
c001f244:	83 ec 0c             	sub    esp,0xc
c001f247:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f24b:	0f b7 db             	movzx  ebx,bx
c001f24e:	50                   	push   eax
c001f24f:	e8 9e f7 ff ff       	call   c001e9f2 <Vm::inbv(unsigned short)>
c001f254:	83 c4 0c             	add    esp,0xc
c001f257:	0f b6 c0             	movzx  eax,al
c001f25a:	50                   	push   eax
c001f25b:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001f25f:	50                   	push   eax
c001f260:	53                   	push   ebx
c001f261:	e8 41 fb ff ff       	call   c001eda7 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001f266:	83 c4 10             	add    esp,0x10
c001f269:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f26c:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f270:	74 03                	je     c001f275 <Vm::faultHandler(regs*)+0x48e>
c001f272:	48                   	dec    eax
c001f273:	eb 01                	jmp    c001f276 <Vm::faultHandler(regs*)+0x48f>
c001f275:	40                   	inc    eax
c001f276:	0f b7 c0             	movzx  eax,ax
c001f279:	eb 7f                	jmp    c001f2fa <Vm::faultHandler(regs*)+0x513>
c001f27b:	83 ec 0c             	sub    esp,0xc
c001f27e:	68 b9 c6 02 c0       	push   0xc002c6b9
c001f283:	e8 c2 3c ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001f288:	83 c4 10             	add    esp,0x10
c001f28b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f28e:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f293:	74 0d                	je     c001f2a2 <Vm::faultHandler(regs*)+0x4bb>
c001f295:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f29c:	0f 87 40 01 00 00    	ja     c001f3e2 <Vm::faultHandler(regs*)+0x5fb>
c001f2a2:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f2a5:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001f2a9:	0f b7 db             	movzx  ebx,bx
c001f2ac:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f2b1:	74 20                	je     c001f2d3 <Vm::faultHandler(regs*)+0x4ec>
c001f2b3:	ed                   	in     eax,dx
c001f2b4:	51                   	push   ecx
c001f2b5:	50                   	push   eax
c001f2b6:	56                   	push   esi
c001f2b7:	53                   	push   ebx
c001f2b8:	e8 15 fb ff ff       	call   c001edd2 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001f2bd:	83 c4 10             	add    esp,0x10
c001f2c0:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f2c3:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f2c7:	74 05                	je     c001f2ce <Vm::faultHandler(regs*)+0x4e7>
c001f2c9:	83 e8 04             	sub    eax,0x4
c001f2cc:	eb 27                	jmp    c001f2f5 <Vm::faultHandler(regs*)+0x50e>
c001f2ce:	83 c0 04             	add    eax,0x4
c001f2d1:	eb 22                	jmp    c001f2f5 <Vm::faultHandler(regs*)+0x50e>
c001f2d3:	66 ed                	in     ax,dx
c001f2d5:	0f b7 c0             	movzx  eax,ax
c001f2d8:	52                   	push   edx
c001f2d9:	50                   	push   eax
c001f2da:	56                   	push   esi
c001f2db:	53                   	push   ebx
c001f2dc:	e8 db fa ff ff       	call   c001edbc <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001f2e1:	83 c4 10             	add    esp,0x10
c001f2e4:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f2e7:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f2eb:	74 05                	je     c001f2f2 <Vm::faultHandler(regs*)+0x50b>
c001f2ed:	83 e8 02             	sub    eax,0x2
c001f2f0:	eb 03                	jmp    c001f2f5 <Vm::faultHandler(regs*)+0x50e>
c001f2f2:	83 c0 02             	add    eax,0x2
c001f2f5:	25 ff ff 00 00       	and    eax,0xffff
c001f2fa:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001f2fd:	e9 b1 02 00 00       	jmp    c001f5b3 <Vm::faultHandler(regs*)+0x7cc>
c001f302:	83 ec 0c             	sub    esp,0xc
c001f305:	4b                   	dec    ebx
c001f306:	68 bf c6 02 c0       	push   0xc002c6bf
c001f30b:	e8 3a 3c ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001f310:	83 c4 10             	add    esp,0x10
c001f313:	80 fb 05             	cmp    bl,0x5
c001f316:	77 0a                	ja     c001f322 <Vm::faultHandler(regs*)+0x53b>
c001f318:	0f b6 db             	movzx  ebx,bl
c001f31b:	ff 24 9d 30 c7 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd38d0]
c001f322:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f326:	eb 1b                	jmp    c001f343 <Vm::faultHandler(regs*)+0x55c>
c001f328:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f32c:	eb 15                	jmp    c001f343 <Vm::faultHandler(regs*)+0x55c>
c001f32e:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f332:	eb 0f                	jmp    c001f343 <Vm::faultHandler(regs*)+0x55c>
c001f334:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f338:	eb 09                	jmp    c001f343 <Vm::faultHandler(regs*)+0x55c>
c001f33a:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f33d:	eb 04                	jmp    c001f343 <Vm::faultHandler(regs*)+0x55c>
c001f33f:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f343:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f348:	74 0d                	je     c001f357 <Vm::faultHandler(regs*)+0x570>
c001f34a:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001f351:	0f 87 8b 00 00 00    	ja     c001f3e2 <Vm::faultHandler(regs*)+0x5fb>
c001f357:	53                   	push   ebx
c001f358:	53                   	push   ebx
c001f359:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001f35d:	52                   	push   edx
c001f35e:	50                   	push   eax
c001f35f:	e8 0f fa ff ff       	call   c001ed73 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001f364:	5e                   	pop    esi
c001f365:	0f b6 c0             	movzx  eax,al
c001f368:	5d                   	pop    ebp
c001f369:	50                   	push   eax
c001f36a:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f36e:	50                   	push   eax
c001f36f:	e8 91 f6 ff ff       	call   c001ea05 <Vm::outbv(unsigned short, unsigned char)>
c001f374:	83 c4 10             	add    esp,0x10
c001f377:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001f37a:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f37e:	74 03                	je     c001f383 <Vm::faultHandler(regs*)+0x59c>
c001f380:	48                   	dec    eax
c001f381:	eb 01                	jmp    c001f384 <Vm::faultHandler(regs*)+0x59d>
c001f383:	40                   	inc    eax
c001f384:	0f b7 c0             	movzx  eax,ax
c001f387:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001f38a:	e9 24 02 00 00       	jmp    c001f5b3 <Vm::faultHandler(regs*)+0x7cc>
c001f38f:	83 ec 0c             	sub    esp,0xc
c001f392:	4b                   	dec    ebx
c001f393:	68 bf c6 02 c0       	push   0xc002c6bf
c001f398:	e8 ad 3b ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001f39d:	83 c4 10             	add    esp,0x10
c001f3a0:	80 fb 05             	cmp    bl,0x5
c001f3a3:	77 0a                	ja     c001f3af <Vm::faultHandler(regs*)+0x5c8>
c001f3a5:	0f b6 db             	movzx  ebx,bl
c001f3a8:	ff 24 9d 48 c7 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd38b8]
c001f3af:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f3b3:	eb 1b                	jmp    c001f3d0 <Vm::faultHandler(regs*)+0x5e9>
c001f3b5:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f3b9:	eb 15                	jmp    c001f3d0 <Vm::faultHandler(regs*)+0x5e9>
c001f3bb:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f3bf:	eb 0f                	jmp    c001f3d0 <Vm::faultHandler(regs*)+0x5e9>
c001f3c1:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f3c5:	eb 09                	jmp    c001f3d0 <Vm::faultHandler(regs*)+0x5e9>
c001f3c7:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f3ca:	eb 04                	jmp    c001f3d0 <Vm::faultHandler(regs*)+0x5e9>
c001f3cc:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f3d0:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001f3d3:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f3d8:	74 39                	je     c001f413 <Vm::faultHandler(regs*)+0x62c>
c001f3da:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001f3e0:	76 31                	jbe    c001f413 <Vm::faultHandler(regs*)+0x62c>
c001f3e2:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f3e6:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f3ea:	51                   	push   ecx
c001f3eb:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f3ef:	51                   	push   ecx
c001f3f0:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f3f4:	51                   	push   ecx
c001f3f5:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f3f9:	51                   	push   ecx
c001f3fa:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f3fe:	52                   	push   edx
c001f3ff:	50                   	push   eax
c001f400:	50                   	push   eax
c001f401:	68 8c c6 02 c0       	push   0xc002c68c
c001f406:	e8 3f 3b ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001f40b:	83 c4 20             	add    esp,0x20
c001f40e:	e9 fb 01 00 00       	jmp    c001f60e <Vm::faultHandler(regs*)+0x827>
c001f413:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001f416:	0f b7 d3             	movzx  edx,bx
c001f419:	81 e6 00 04 00 00    	and    esi,0x400
c001f41f:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001f422:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f427:	74 1d                	je     c001f446 <Vm::faultHandler(regs*)+0x65f>
c001f429:	51                   	push   ecx
c001f42a:	51                   	push   ecx
c001f42b:	52                   	push   edx
c001f42c:	50                   	push   eax
c001f42d:	e8 64 f9 ff ff       	call   c001ed96 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001f432:	83 c4 10             	add    esp,0x10
c001f435:	89 ea                	mov    edx,ebp
c001f437:	ef                   	out    dx,eax
c001f438:	85 f6                	test   esi,esi
c001f43a:	74 05                	je     c001f441 <Vm::faultHandler(regs*)+0x65a>
c001f43c:	83 eb 04             	sub    ebx,0x4
c001f43f:	eb 21                	jmp    c001f462 <Vm::faultHandler(regs*)+0x67b>
c001f441:	83 c3 04             	add    ebx,0x4
c001f444:	eb 1c                	jmp    c001f462 <Vm::faultHandler(regs*)+0x67b>
c001f446:	51                   	push   ecx
c001f447:	51                   	push   ecx
c001f448:	52                   	push   edx
c001f449:	50                   	push   eax
c001f44a:	e8 35 f9 ff ff       	call   c001ed84 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001f44f:	83 c4 10             	add    esp,0x10
c001f452:	89 ea                	mov    edx,ebp
c001f454:	66 ef                	out    dx,ax
c001f456:	85 f6                	test   esi,esi
c001f458:	74 05                	je     c001f45f <Vm::faultHandler(regs*)+0x678>
c001f45a:	83 eb 02             	sub    ebx,0x2
c001f45d:	eb 03                	jmp    c001f462 <Vm::faultHandler(regs*)+0x67b>
c001f45f:	83 c3 02             	add    ebx,0x2
c001f462:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001f468:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001f46b:	e9 43 01 00 00       	jmp    c001f5b3 <Vm::faultHandler(regs*)+0x7cc>
c001f470:	53                   	push   ebx
c001f471:	53                   	push   ebx
c001f472:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f476:	50                   	push   eax
c001f477:	68 c5 c6 02 c0       	push   0xc002c6c5
c001f47c:	e8 c9 3a ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001f481:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f488:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f48c:	89 04 24             	mov    DWORD PTR [esp],eax
c001f48f:	e8 5e f5 ff ff       	call   c001e9f2 <Vm::inbv(unsigned short)>
c001f494:	0f b6 c0             	movzx  eax,al
c001f497:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f49a:	eb 5e                	jmp    c001f4fa <Vm::faultHandler(regs*)+0x713>
c001f49c:	51                   	push   ecx
c001f49d:	51                   	push   ecx
c001f49e:	53                   	push   ebx
c001f49f:	68 cb c6 02 c0       	push   0xc002c6cb
c001f4a4:	e8 a1 3a ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001f4a9:	83 c4 10             	add    esp,0x10
c001f4ac:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f4b1:	74 07                	je     c001f4ba <Vm::faultHandler(regs*)+0x6d3>
c001f4b3:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f4b7:	ed                   	in     eax,dx
c001f4b8:	eb 14                	jmp    c001f4ce <Vm::faultHandler(regs*)+0x6e7>
c001f4ba:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001f4bd:	66 31 db             	xor    bx,bx
c001f4c0:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001f4c3:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f4c7:	66 ed                	in     ax,dx
c001f4c9:	0f b7 c0             	movzx  eax,ax
c001f4cc:	09 d8                	or     eax,ebx
c001f4ce:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f4d1:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f4d5:	e9 dc 00 00 00       	jmp    c001f5b6 <Vm::faultHandler(regs*)+0x7cf>
c001f4da:	50                   	push   eax
c001f4db:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f4de:	53                   	push   ebx
c001f4df:	68 d1 c6 02 c0       	push   0xc002c6d1
c001f4e4:	e8 61 3a ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001f4e9:	58                   	pop    eax
c001f4ea:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f4ee:	5a                   	pop    edx
c001f4ef:	50                   	push   eax
c001f4f0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f4f4:	50                   	push   eax
c001f4f5:	e8 0b f5 ff ff       	call   c001ea05 <Vm::outbv(unsigned short, unsigned char)>
c001f4fa:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f4fe:	e9 85 00 00 00       	jmp    c001f588 <Vm::faultHandler(regs*)+0x7a1>
c001f503:	50                   	push   eax
c001f504:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f507:	53                   	push   ebx
c001f508:	68 da c6 02 c0       	push   0xc002c6da
c001f50d:	e8 38 3a ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001f512:	83 c4 10             	add    esp,0x10
c001f515:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f519:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f51e:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f521:	74 03                	je     c001f526 <Vm::faultHandler(regs*)+0x73f>
c001f523:	ef                   	out    dx,eax
c001f524:	eb ab                	jmp    c001f4d1 <Vm::faultHandler(regs*)+0x6ea>
c001f526:	66 ef                	out    dx,ax
c001f528:	eb a7                	jmp    c001f4d1 <Vm::faultHandler(regs*)+0x6ea>
c001f52a:	55                   	push   ebp
c001f52b:	55                   	push   ebp
c001f52c:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f52f:	68 e3 c6 02 c0       	push   0xc002c6e3
c001f534:	e8 11 3a ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001f539:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f540:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f544:	89 04 24             	mov    DWORD PTR [esp],eax
c001f547:	e8 a6 f4 ff ff       	call   c001e9f2 <Vm::inbv(unsigned short)>
c001f54c:	0f b6 c0             	movzx  eax,al
c001f54f:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f552:	eb 31                	jmp    c001f585 <Vm::faultHandler(regs*)+0x79e>
c001f554:	56                   	push   esi
c001f555:	56                   	push   esi
c001f556:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f559:	68 e9 c6 02 c0       	push   0xc002c6e9
c001f55e:	e8 e7 39 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001f563:	83 c4 10             	add    esp,0x10
c001f566:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f569:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f56e:	74 03                	je     c001f573 <Vm::faultHandler(regs*)+0x78c>
c001f570:	ed                   	in     eax,dx
c001f571:	eb 0d                	jmp    c001f580 <Vm::faultHandler(regs*)+0x799>
c001f573:	66 ed                	in     ax,dx
c001f575:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001f578:	0f b7 c0             	movzx  eax,ax
c001f57b:	66 31 d2             	xor    dx,dx
c001f57e:	09 d0                	or     eax,edx
c001f580:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f583:	eb 2e                	jmp    c001f5b3 <Vm::faultHandler(regs*)+0x7cc>
c001f585:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f588:	83 c4 10             	add    esp,0x10
c001f58b:	eb 29                	jmp    c001f5b6 <Vm::faultHandler(regs*)+0x7cf>
c001f58d:	50                   	push   eax
c001f58e:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f591:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f594:	68 f8 c6 02 c0       	push   0xc002c6f8
c001f599:	e8 ac 39 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001f59e:	83 c4 10             	add    esp,0x10
c001f5a1:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f5a4:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f5a9:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f5ac:	74 03                	je     c001f5b1 <Vm::faultHandler(regs*)+0x7ca>
c001f5ae:	ef                   	out    dx,eax
c001f5af:	eb 02                	jmp    c001f5b3 <Vm::faultHandler(regs*)+0x7cc>
c001f5b1:	66 ef                	out    dx,ax
c001f5b3:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f5b6:	b0 01                	mov    al,0x1
c001f5b8:	eb 56                	jmp    c001f610 <Vm::faultHandler(regs*)+0x829>
c001f5ba:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f5be:	51                   	push   ecx
c001f5bf:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f5c3:	51                   	push   ecx
c001f5c4:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f5c8:	51                   	push   ecx
c001f5c9:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f5cd:	51                   	push   ecx
c001f5ce:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f5d2:	52                   	push   edx
c001f5d3:	50                   	push   eax
c001f5d4:	50                   	push   eax
c001f5d5:	68 01 c7 02 c0       	push   0xc002c701
c001f5da:	e8 6b 39 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c001f5df:	83 c4 20             	add    esp,0x20
c001f5e2:	83 ec 0c             	sub    esp,0xc
c001f5e5:	6a 60                	push   0x60
c001f5e7:	e8 06 f4 ff ff       	call   c001e9f2 <Vm::inbv(unsigned short)>
c001f5ec:	83 c4 10             	add    esp,0x10
c001f5ef:	3c 1c                	cmp    al,0x1c
c001f5f1:	74 04                	je     c001f5f7 <Vm::faultHandler(regs*)+0x810>
c001f5f3:	3c 5a                	cmp    al,0x5a
c001f5f5:	75 eb                	jne    c001f5e2 <Vm::faultHandler(regs*)+0x7fb>
c001f5f7:	3c 1c                	cmp    al,0x1c
c001f5f9:	74 04                	je     c001f5ff <Vm::faultHandler(regs*)+0x818>
c001f5fb:	3c 5a                	cmp    al,0x5a
c001f5fd:	75 0f                	jne    c001f60e <Vm::faultHandler(regs*)+0x827>
c001f5ff:	83 ec 0c             	sub    esp,0xc
c001f602:	6a 60                	push   0x60
c001f604:	e8 e9 f3 ff ff       	call   c001e9f2 <Vm::inbv(unsigned short)>
c001f609:	83 c4 10             	add    esp,0x10
c001f60c:	eb e9                	jmp    c001f5f7 <Vm::faultHandler(regs*)+0x810>
c001f60e:	31 c0                	xor    eax,eax
c001f610:	83 c4 1c             	add    esp,0x1c
c001f613:	5b                   	pop    ebx
c001f614:	5e                   	pop    esi
c001f615:	5f                   	pop    edi
c001f616:	5d                   	pop    ebp
c001f617:	c3                   	ret    

c001f618 <Vm::fpuInternalTo32(unsigned long long)>:
c001f618:	57                   	push   edi
c001f619:	56                   	push   esi
c001f61a:	53                   	push   ebx
c001f61b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f61f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f623:	89 d6                	mov    esi,edx
c001f625:	89 d7                	mov    edi,edx
c001f627:	89 c1                	mov    ecx,eax
c001f629:	c1 ef 14             	shr    edi,0x14
c001f62c:	89 d3                	mov    ebx,edx
c001f62e:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f634:	31 d2                	xor    edx,edx
c001f636:	89 f8                	mov    eax,edi
c001f638:	81 e6 00 00 00 80    	and    esi,0x80000000
c001f63e:	bf ff 00 00 00       	mov    edi,0xff
c001f643:	05 80 fc ff ff       	add    eax,0xfffffc80
c001f648:	83 d2 ff             	adc    edx,0xffffffff
c001f64b:	39 c7                	cmp    edi,eax
c001f64d:	bf 00 00 00 00       	mov    edi,0x0
c001f652:	19 d7                	sbb    edi,edx
c001f654:	72 15                	jb     c001f66b <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f656:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f65a:	c1 e0 17             	shl    eax,0x17
c001f65d:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f663:	09 f1                	or     ecx,esi
c001f665:	09 c1                	or     ecx,eax
c001f667:	89 cf                	mov    edi,ecx
c001f669:	eb 02                	jmp    c001f66d <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f66b:	31 ff                	xor    edi,edi
c001f66d:	89 f8                	mov    eax,edi
c001f66f:	5b                   	pop    ebx
c001f670:	5e                   	pop    esi
c001f671:	5f                   	pop    edi
c001f672:	c3                   	ret    

c001f673 <Vm::fpuInternalTo64(unsigned long long)>:
c001f673:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f677:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f67b:	c3                   	ret    

c001f67c <Vm::fpu32ToInternal(unsigned int)>:
c001f67c:	57                   	push   edi
c001f67d:	31 ff                	xor    edi,edi
c001f67f:	56                   	push   esi
c001f680:	53                   	push   ebx
c001f681:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f685:	89 cb                	mov    ebx,ecx
c001f687:	89 ce                	mov    esi,ecx
c001f689:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f68f:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f695:	c1 e9 17             	shr    ecx,0x17
c001f698:	89 f0                	mov    eax,esi
c001f69a:	0f b6 d1             	movzx  edx,cl
c001f69d:	81 c2 80 03 00 00    	add    edx,0x380
c001f6a3:	89 d1                	mov    ecx,edx
c001f6a5:	89 fa                	mov    edx,edi
c001f6a7:	c1 e1 14             	shl    ecx,0x14
c001f6aa:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f6ae:	c1 e0 1d             	shl    eax,0x1d
c001f6b1:	89 d7                	mov    edi,edx
c001f6b3:	89 c6                	mov    esi,eax
c001f6b5:	89 ca                	mov    edx,ecx
c001f6b7:	89 f0                	mov    eax,esi
c001f6b9:	09 fa                	or     edx,edi
c001f6bb:	09 da                	or     edx,ebx
c001f6bd:	5b                   	pop    ebx
c001f6be:	5e                   	pop    esi
c001f6bf:	5f                   	pop    edi
c001f6c0:	c3                   	ret    

c001f6c1 <Vm::fpu64ToInternal(unsigned long long)>:
c001f6c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6c5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f6c9:	c3                   	ret    

c001f6ca <Vm::fpuFloatToLong(unsigned long long)>:
c001f6ca:	57                   	push   edi
c001f6cb:	31 c0                	xor    eax,eax
c001f6cd:	56                   	push   esi
c001f6ce:	31 d2                	xor    edx,edx
c001f6d0:	53                   	push   ebx
c001f6d1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f6d5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f6d9:	89 d9                	mov    ecx,ebx
c001f6db:	c1 e9 14             	shr    ecx,0x14
c001f6de:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f6e4:	89 cf                	mov    edi,ecx
c001f6e6:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f6ec:	78 33                	js     c001f721 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f6ee:	89 d9                	mov    ecx,ebx
c001f6f0:	89 f0                	mov    eax,esi
c001f6f2:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f6f8:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f6fe:	89 ca                	mov    edx,ecx
c001f700:	b9 34 00 00 00       	mov    ecx,0x34
c001f705:	29 f9                	sub    ecx,edi
c001f707:	0f ad d0             	shrd   eax,edx,cl
c001f70a:	d3 fa                	sar    edx,cl
c001f70c:	f6 c1 20             	test   cl,0x20
c001f70f:	74 05                	je     c001f716 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f711:	89 d0                	mov    eax,edx
c001f713:	c1 fa 1f             	sar    edx,0x1f
c001f716:	85 db                	test   ebx,ebx
c001f718:	79 07                	jns    c001f721 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f71a:	f7 d8                	neg    eax
c001f71c:	83 d2 00             	adc    edx,0x0
c001f71f:	f7 da                	neg    edx
c001f721:	5b                   	pop    ebx
c001f722:	5e                   	pop    esi
c001f723:	5f                   	pop    edi
c001f724:	c3                   	ret    

c001f725 <Vm::fpuULongToFloat(unsigned long long)>:
c001f725:	57                   	push   edi
c001f726:	31 c9                	xor    ecx,ecx
c001f728:	56                   	push   esi
c001f729:	53                   	push   ebx
c001f72a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f72e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f732:	0f ba e7 14          	bt     edi,0x14
c001f736:	72 07                	jb     c001f73f <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f738:	01 f6                	add    esi,esi
c001f73a:	11 ff                	adc    edi,edi
c001f73c:	41                   	inc    ecx
c001f73d:	eb f3                	jmp    c001f732 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f73f:	89 fa                	mov    edx,edi
c001f741:	89 f0                	mov    eax,esi
c001f743:	bb 33 04 00 00       	mov    ebx,0x433
c001f748:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f74e:	29 cb                	sub    ebx,ecx
c001f750:	89 d9                	mov    ecx,ebx
c001f752:	5b                   	pop    ebx
c001f753:	c1 e1 14             	shl    ecx,0x14
c001f756:	5e                   	pop    esi
c001f757:	09 ca                	or     edx,ecx
c001f759:	5f                   	pop    edi
c001f75a:	c3                   	ret    

c001f75b <Vm::fpuLongToFloat(long long)>:
c001f75b:	56                   	push   esi
c001f75c:	31 c0                	xor    eax,eax
c001f75e:	53                   	push   ebx
c001f75f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f763:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f767:	39 c8                	cmp    eax,ecx
c001f769:	19 d8                	sbb    eax,ebx
c001f76b:	7d 04                	jge    c001f771 <Vm::fpuLongToFloat(long long)+0x16>
c001f76d:	31 f6                	xor    esi,esi
c001f76f:	eb 0c                	jmp    c001f77d <Vm::fpuLongToFloat(long long)+0x22>
c001f771:	f7 d9                	neg    ecx
c001f773:	be 01 00 00 00       	mov    esi,0x1
c001f778:	83 d3 00             	adc    ebx,0x0
c001f77b:	f7 db                	neg    ebx
c001f77d:	31 c0                	xor    eax,eax
c001f77f:	0f ba e3 14          	bt     ebx,0x14
c001f783:	72 07                	jb     c001f78c <Vm::fpuLongToFloat(long long)+0x31>
c001f785:	01 c9                	add    ecx,ecx
c001f787:	11 db                	adc    ebx,ebx
c001f789:	40                   	inc    eax
c001f78a:	eb f3                	jmp    c001f77f <Vm::fpuLongToFloat(long long)+0x24>
c001f78c:	ba 33 04 00 00       	mov    edx,0x433
c001f791:	29 c2                	sub    edx,eax
c001f793:	89 c8                	mov    eax,ecx
c001f795:	c1 e2 14             	shl    edx,0x14
c001f798:	89 d9                	mov    ecx,ebx
c001f79a:	89 f3                	mov    ebx,esi
c001f79c:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f7a2:	09 ca                	or     edx,ecx
c001f7a4:	84 db                	test   bl,bl
c001f7a6:	74 06                	je     c001f7ae <Vm::fpuLongToFloat(long long)+0x53>
c001f7a8:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f7ae:	5b                   	pop    ebx
c001f7af:	5e                   	pop    esi
c001f7b0:	c3                   	ret    

c001f7b1 <Vm::fpuGet0()>:
c001f7b1:	31 c0                	xor    eax,eax
c001f7b3:	31 d2                	xor    edx,edx
c001f7b5:	c3                   	ret    

c001f7b6 <Vm::fpuGet1()>:
c001f7b6:	b8 01 00 00 00       	mov    eax,0x1
c001f7bb:	31 d2                	xor    edx,edx
c001f7bd:	c3                   	ret    

c001f7be <Vm::fpuGetPi()>:
c001f7be:	b8 03 00 00 00       	mov    eax,0x3
c001f7c3:	31 d2                	xor    edx,edx
c001f7c5:	c3                   	ret    

c001f7c6 <Vm::fpuGetLog2E()>:
c001f7c6:	83 ec 18             	sub    esp,0x18
c001f7c9:	68 60 c7 02 c0       	push   0xc002c760
c001f7ce:	e8 28 ae ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c001f7d3:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f7d8:	31 d2                	xor    edx,edx
c001f7da:	83 c4 1c             	add    esp,0x1c
c001f7dd:	c3                   	ret    

c001f7de <Vm::fpuGetLogE2()>:
c001f7de:	83 ec 18             	sub    esp,0x18
c001f7e1:	68 6c c7 02 c0       	push   0xc002c76c
c001f7e6:	e8 10 ae ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c001f7eb:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f7f0:	31 d2                	xor    edx,edx
c001f7f2:	83 c4 1c             	add    esp,0x1c
c001f7f5:	c3                   	ret    

c001f7f6 <Vm::fpuGetLog210()>:
c001f7f6:	83 ec 18             	sub    esp,0x18
c001f7f9:	68 78 c7 02 c0       	push   0xc002c778
c001f7fe:	e8 f8 ad ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c001f803:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f808:	31 d2                	xor    edx,edx
c001f80a:	83 c4 1c             	add    esp,0x1c
c001f80d:	c3                   	ret    

c001f80e <Vm::fpuGetLog102()>:
c001f80e:	83 ec 18             	sub    esp,0x18
c001f811:	68 85 c7 02 c0       	push   0xc002c785
c001f816:	e8 e0 ad ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c001f81b:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f820:	31 d2                	xor    edx,edx
c001f822:	83 c4 1c             	add    esp,0x1c
c001f825:	c3                   	ret    

c001f826 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f826:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f82a:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f82e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f832:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f836:	0f 92 c0             	setb   al
c001f839:	c3                   	ret    

c001f83a <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f83a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f83e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f842:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f846:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f84a:	09 c2                	or     edx,eax
c001f84c:	0f 94 c0             	sete   al
c001f84f:	c3                   	ret    

c001f850 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f850:	57                   	push   edi
c001f851:	56                   	push   esi
c001f852:	53                   	push   ebx
c001f853:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f857:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f85b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f85f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f863:	57                   	push   edi
c001f864:	56                   	push   esi
c001f865:	53                   	push   ebx
c001f866:	51                   	push   ecx
c001f867:	e8 ce ff ff ff       	call   c001f83a <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f86c:	83 c4 10             	add    esp,0x10
c001f86f:	88 c2                	mov    dl,al
c001f871:	31 c0                	xor    eax,eax
c001f873:	84 d2                	test   dl,dl
c001f875:	75 0c                	jne    c001f883 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f877:	57                   	push   edi
c001f878:	56                   	push   esi
c001f879:	53                   	push   ebx
c001f87a:	51                   	push   ecx
c001f87b:	e8 a6 ff ff ff       	call   c001f826 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f880:	83 c4 10             	add    esp,0x10
c001f883:	83 e0 01             	and    eax,0x1
c001f886:	5b                   	pop    ebx
c001f887:	88 c1                	mov    cl,al
c001f889:	83 e2 01             	and    edx,0x1
c001f88c:	a0 e1 19 03 c0       	mov    al,ds:0xc00319e1
c001f891:	c1 e2 06             	shl    edx,0x6
c001f894:	83 e0 ba             	and    eax,0xffffffba
c001f897:	5e                   	pop    esi
c001f898:	09 c8                	or     eax,ecx
c001f89a:	5f                   	pop    edi
c001f89b:	09 d0                	or     eax,edx
c001f89d:	a2 e1 19 03 c0       	mov    ds:0xc00319e1,al
c001f8a2:	c3                   	ret    

c001f8a3 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f8a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f8a7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f8ab:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f8af:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f8b3:	c3                   	ret    

c001f8b4 <Vm::fpuAbs(unsigned long long)>:
c001f8b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f8b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f8bc:	c3                   	ret    

c001f8bd <Vm::fpuChs(unsigned long long)>:
c001f8bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f8c1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f8c5:	f7 d8                	neg    eax
c001f8c7:	83 d2 00             	adc    edx,0x0
c001f8ca:	f7 da                	neg    edx
c001f8cc:	c3                   	ret    

c001f8cd <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f8cd:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f8d1:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f8d6:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f8da:	eb c7                	jmp    c001f8a3 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f8dc <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f8dc:	53                   	push   ebx
c001f8dd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f8e1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f8e5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f8e9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f8ed:	0f af ca             	imul   ecx,edx
c001f8f0:	0f af d8             	imul   ebx,eax
c001f8f3:	f7 e2                	mul    edx
c001f8f5:	01 d9                	add    ecx,ebx
c001f8f7:	5b                   	pop    ebx
c001f8f8:	01 ca                	add    edx,ecx
c001f8fa:	c3                   	ret    

c001f8fb <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f8fb:	83 ec 0c             	sub    esp,0xc
c001f8fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f902:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f906:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f90a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f90e:	e8 99 70 00 00       	call   c00269ac <__udivdi3>
c001f913:	83 c4 1c             	add    esp,0x1c
c001f916:	c3                   	ret    

c001f917 <Vm::fpuSquare(unsigned long long)>:
c001f917:	50                   	push   eax
c001f918:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f91c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f920:	52                   	push   edx
c001f921:	50                   	push   eax
c001f922:	52                   	push   edx
c001f923:	50                   	push   eax
c001f924:	e8 b3 ff ff ff       	call   c001f8dc <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f929:	83 c4 14             	add    esp,0x14
c001f92c:	c3                   	ret    

c001f92d <Vm::fpuGetReg(int)>:
c001f92d:	83 ec 0c             	sub    esp,0xc
c001f930:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f935:	76 10                	jbe    c001f947 <Vm::fpuGetReg(int)+0x1a>
c001f937:	83 ec 0c             	sub    esp,0xc
c001f93a:	68 92 c7 02 c0       	push   0xc002c792
c001f93f:	e8 b7 ac ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c001f944:	83 c4 10             	add    esp,0x10
c001f947:	a0 e1 19 03 c0       	mov    al,ds:0xc00319e1
c001f94c:	b9 08 00 00 00       	mov    ecx,0x8
c001f951:	c0 e8 03             	shr    al,0x3
c001f954:	83 e0 07             	and    eax,0x7
c001f957:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f95b:	99                   	cdq    
c001f95c:	f7 f9                	idiv   ecx
c001f95e:	8b 04 d5 e4 19 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffce61c]
c001f965:	8b 14 d5 e8 19 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffce618]
c001f96c:	83 c4 0c             	add    esp,0xc
c001f96f:	c3                   	ret    

c001f970 <Vm::fpuSetReg(int, unsigned long long)>:
c001f970:	57                   	push   edi
c001f971:	56                   	push   esi
c001f972:	52                   	push   edx
c001f973:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f977:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f97b:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f980:	76 10                	jbe    c001f992 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f982:	83 ec 0c             	sub    esp,0xc
c001f985:	68 a5 c7 02 c0       	push   0xc002c7a5
c001f98a:	e8 6c ac ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c001f98f:	83 c4 10             	add    esp,0x10
c001f992:	a0 e1 19 03 c0       	mov    al,ds:0xc00319e1
c001f997:	b9 08 00 00 00       	mov    ecx,0x8
c001f99c:	c0 e8 03             	shr    al,0x3
c001f99f:	83 e0 07             	and    eax,0x7
c001f9a2:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f9a6:	99                   	cdq    
c001f9a7:	f7 f9                	idiv   ecx
c001f9a9:	89 34 d5 e4 19 03 c0 	mov    DWORD PTR [edx*8-0x3ffce61c],esi
c001f9b0:	89 3c d5 e8 19 03 c0 	mov    DWORD PTR [edx*8-0x3ffce618],edi
c001f9b7:	58                   	pop    eax
c001f9b8:	5e                   	pop    esi
c001f9b9:	5f                   	pop    edi
c001f9ba:	c3                   	ret    

c001f9bb <Vm::fpuPush(unsigned long long)>:
c001f9bb:	a0 e1 19 03 c0       	mov    al,ds:0xc00319e1
c001f9c0:	c0 e8 03             	shr    al,0x3
c001f9c3:	83 e0 07             	and    eax,0x7
c001f9c6:	83 c0 07             	add    eax,0x7
c001f9c9:	88 c2                	mov    dl,al
c001f9cb:	83 e0 07             	and    eax,0x7
c001f9ce:	83 e2 07             	and    edx,0x7
c001f9d1:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001f9d8:	8a 15 e1 19 03 c0    	mov    dl,BYTE PTR ds:0xc00319e1
c001f9de:	83 e2 c7             	and    edx,0xffffffc7
c001f9e1:	09 ca                	or     edx,ecx
c001f9e3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f9e7:	88 15 e1 19 03 c0    	mov    BYTE PTR ds:0xc00319e1,dl
c001f9ed:	89 0c c5 e8 19 03 c0 	mov    DWORD PTR [eax*8-0x3ffce618],ecx
c001f9f4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f9f8:	89 14 c5 e4 19 03 c0 	mov    DWORD PTR [eax*8-0x3ffce61c],edx
c001f9ff:	a1 24 1a 03 c0       	mov    eax,ds:0xc0031a24
c001fa04:	83 f8 08             	cmp    eax,0x8
c001fa07:	75 08                	jne    c001fa11 <Vm::fpuPush(unsigned long long)+0x56>
c001fa09:	80 0d e0 19 03 c0 40 	or     BYTE PTR ds:0xc00319e0,0x40
c001fa10:	c3                   	ret    
c001fa11:	40                   	inc    eax
c001fa12:	a3 24 1a 03 c0       	mov    ds:0xc0031a24,eax
c001fa17:	c3                   	ret    

c001fa18 <Vm::fpuPop()>:
c001fa18:	8a 0d e1 19 03 c0    	mov    cl,BYTE PTR ds:0xc00319e1
c001fa1e:	53                   	push   ebx
c001fa1f:	c0 e9 03             	shr    cl,0x3
c001fa22:	8a 1d e1 19 03 c0    	mov    bl,BYTE PTR ds:0xc00319e1
c001fa28:	83 e1 07             	and    ecx,0x7
c001fa2b:	83 e3 c7             	and    ebx,0xffffffc7
c001fa2e:	8b 04 cd e4 19 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffce61c]
c001fa35:	8b 14 cd e8 19 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffce618]
c001fa3c:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001fa43:	83 e1 38             	and    ecx,0x38
c001fa46:	09 d9                	or     ecx,ebx
c001fa48:	88 0d e1 19 03 c0    	mov    BYTE PTR ds:0xc00319e1,cl
c001fa4e:	8b 0d 24 1a 03 c0    	mov    ecx,DWORD PTR ds:0xc0031a24
c001fa54:	85 c9                	test   ecx,ecx
c001fa56:	74 09                	je     c001fa61 <Vm::fpuPop()+0x49>
c001fa58:	49                   	dec    ecx
c001fa59:	89 0d 24 1a 03 c0    	mov    DWORD PTR ds:0xc0031a24,ecx
c001fa5f:	eb 07                	jmp    c001fa68 <Vm::fpuPop()+0x50>
c001fa61:	80 0d e0 19 03 c0 40 	or     BYTE PTR ds:0xc00319e0,0x40
c001fa68:	5b                   	pop    ebx
c001fa69:	c3                   	ret    

c001fa6a <Vm::x87Handler(regs*)>:
c001fa6a:	55                   	push   ebp
c001fa6b:	57                   	push   edi
c001fa6c:	56                   	push   esi
c001fa6d:	53                   	push   ebx
c001fa6e:	83 ec 1c             	sub    esp,0x1c
c001fa71:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001fa75:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001fa7a:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001fa7d:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001fa85:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001fa89:	50                   	push   eax
c001fa8a:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001fa8e:	50                   	push   eax
c001fa8f:	8d 44 24 14          	lea    eax,[esp+0x14]
c001fa93:	50                   	push   eax
c001fa94:	53                   	push   ebx
c001fa95:	e8 28 a2 ff ff       	call   c0019cc2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001fa9a:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001fa9d:	83 c4 10             	add    esp,0x10
c001faa0:	89 c6                	mov    esi,eax
c001faa2:	80 fa d9             	cmp    dl,0xd9
c001faa5:	0f 85 52 01 00 00    	jne    c001fbfd <Vm::x87Handler(regs*)+0x193>
c001faab:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001faaf:	8d 50 20             	lea    edx,[eax+0x20]
c001fab2:	80 fa 0e             	cmp    dl,0xe
c001fab5:	0f 87 86 00 00 00    	ja     c001fb41 <Vm::x87Handler(regs*)+0xd7>
c001fabb:	0f b6 d2             	movzx  edx,dl
c001fabe:	ff 24 95 b8 c7 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd3848]
c001fac5:	e8 e7 fc ff ff       	call   c001f7b1 <Vm::fpuGet0()>
c001faca:	eb 05                	jmp    c001fad1 <Vm::x87Handler(regs*)+0x67>
c001facc:	e8 e5 fc ff ff       	call   c001f7b6 <Vm::fpuGet1()>
c001fad1:	57                   	push   edi
c001fad2:	57                   	push   edi
c001fad3:	52                   	push   edx
c001fad4:	50                   	push   eax
c001fad5:	e8 e1 fe ff ff       	call   c001f9bb <Vm::fpuPush(unsigned long long)>
c001fada:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fade:	83 c4 10             	add    esp,0x10
c001fae1:	b0 01                	mov    al,0x1
c001fae3:	e9 e3 09 00 00       	jmp    c00204cb <Vm::x87Handler(regs*)+0xa61>
c001fae8:	83 ec 0c             	sub    esp,0xc
c001faeb:	6a 00                	push   0x0
c001faed:	e8 3b fe ff ff       	call   c001f92d <Vm::fpuGetReg(int)>
c001faf2:	59                   	pop    ecx
c001faf3:	5e                   	pop    esi
c001faf4:	52                   	push   edx
c001faf5:	50                   	push   eax
c001faf6:	e8 c2 fd ff ff       	call   c001f8bd <Vm::fpuChs(unsigned long long)>
c001fafb:	eb 13                	jmp    c001fb10 <Vm::x87Handler(regs*)+0xa6>
c001fafd:	83 ec 0c             	sub    esp,0xc
c001fb00:	6a 00                	push   0x0
c001fb02:	e8 26 fe ff ff       	call   c001f92d <Vm::fpuGetReg(int)>
c001fb07:	5f                   	pop    edi
c001fb08:	5d                   	pop    ebp
c001fb09:	52                   	push   edx
c001fb0a:	50                   	push   eax
c001fb0b:	e8 a4 fd ff ff       	call   c001f8b4 <Vm::fpuAbs(unsigned long long)>
c001fb10:	83 c4 0c             	add    esp,0xc
c001fb13:	52                   	push   edx
c001fb14:	50                   	push   eax
c001fb15:	6a 00                	push   0x0
c001fb17:	e8 54 fe ff ff       	call   c001f970 <Vm::fpuSetReg(int, unsigned long long)>
c001fb1c:	eb bc                	jmp    c001fada <Vm::x87Handler(regs*)+0x70>
c001fb1e:	e8 d3 fc ff ff       	call   c001f7f6 <Vm::fpuGetLog210()>
c001fb23:	eb ac                	jmp    c001fad1 <Vm::x87Handler(regs*)+0x67>
c001fb25:	e8 9c fc ff ff       	call   c001f7c6 <Vm::fpuGetLog2E()>
c001fb2a:	eb a5                	jmp    c001fad1 <Vm::x87Handler(regs*)+0x67>
c001fb2c:	e8 8d fc ff ff       	call   c001f7be <Vm::fpuGetPi()>
c001fb31:	eb 9e                	jmp    c001fad1 <Vm::x87Handler(regs*)+0x67>
c001fb33:	e8 d6 fc ff ff       	call   c001f80e <Vm::fpuGetLog102()>
c001fb38:	eb 97                	jmp    c001fad1 <Vm::x87Handler(regs*)+0x67>
c001fb3a:	e8 9f fc ff ff       	call   c001f7de <Vm::fpuGetLogE2()>
c001fb3f:	eb 90                	jmp    c001fad1 <Vm::x87Handler(regs*)+0x67>
c001fb41:	8d 50 40             	lea    edx,[eax+0x40]
c001fb44:	80 fa 07             	cmp    dl,0x7
c001fb47:	77 15                	ja     c001fb5e <Vm::x87Handler(regs*)+0xf4>
c001fb49:	83 ec 0c             	sub    esp,0xc
c001fb4c:	2d c0 00 00 00       	sub    eax,0xc0
c001fb51:	50                   	push   eax
c001fb52:	e8 d6 fd ff ff       	call   c001f92d <Vm::fpuGetReg(int)>
c001fb57:	59                   	pop    ecx
c001fb58:	5e                   	pop    esi
c001fb59:	e9 75 ff ff ff       	jmp    c001fad3 <Vm::x87Handler(regs*)+0x69>
c001fb5e:	8d 50 38             	lea    edx,[eax+0x38]
c001fb61:	80 fa 07             	cmp    dl,0x7
c001fb64:	77 3c                	ja     c001fba2 <Vm::x87Handler(regs*)+0x138>
c001fb66:	83 ec 0c             	sub    esp,0xc
c001fb69:	2d c8 00 00 00       	sub    eax,0xc8
c001fb6e:	50                   	push   eax
c001fb6f:	e8 b9 fd ff ff       	call   c001f92d <Vm::fpuGetReg(int)>
c001fb74:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb7b:	89 c6                	mov    esi,eax
c001fb7d:	89 d7                	mov    edi,edx
c001fb7f:	e8 a9 fd ff ff       	call   c001f92d <Vm::fpuGetReg(int)>
c001fb84:	83 c4 0c             	add    esp,0xc
c001fb87:	52                   	push   edx
c001fb88:	50                   	push   eax
c001fb89:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb8d:	2d c8 00 00 00       	sub    eax,0xc8
c001fb92:	50                   	push   eax
c001fb93:	e8 d8 fd ff ff       	call   c001f970 <Vm::fpuSetReg(int, unsigned long long)>
c001fb98:	83 c4 0c             	add    esp,0xc
c001fb9b:	57                   	push   edi
c001fb9c:	56                   	push   esi
c001fb9d:	e9 73 ff ff ff       	jmp    c001fb15 <Vm::x87Handler(regs*)+0xab>
c001fba2:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fba6:	84 d2                	test   dl,dl
c001fba8:	75 0f                	jne    c001fbb9 <Vm::x87Handler(regs*)+0x14f>
c001fbaa:	83 ec 0c             	sub    esp,0xc
c001fbad:	ff 36                	push   DWORD PTR [esi]
c001fbaf:	e8 c8 fa ff ff       	call   c001f67c <Vm::fpu32ToInternal(unsigned int)>
c001fbb4:	e9 bf 00 00 00       	jmp    c001fc78 <Vm::x87Handler(regs*)+0x20e>
c001fbb9:	80 fa 03             	cmp    dl,0x3
c001fbbc:	75 13                	jne    c001fbd1 <Vm::x87Handler(regs*)+0x167>
c001fbbe:	e8 55 fe ff ff       	call   c001fa18 <Vm::fpuPop()>
c001fbc3:	55                   	push   ebp
c001fbc4:	55                   	push   ebp
c001fbc5:	52                   	push   edx
c001fbc6:	50                   	push   eax
c001fbc7:	e8 4c fa ff ff       	call   c001f618 <Vm::fpuInternalTo32(unsigned long long)>
c001fbcc:	e9 88 00 00 00       	jmp    c001fc59 <Vm::x87Handler(regs*)+0x1ef>
c001fbd1:	80 fa 05             	cmp    dl,0x5
c001fbd4:	75 0e                	jne    c001fbe4 <Vm::x87Handler(regs*)+0x17a>
c001fbd6:	66 8b 06             	mov    ax,WORD PTR [esi]
c001fbd9:	66 a3 e2 19 03 c0    	mov    ds:0xc00319e2,ax
c001fbdf:	e9 df 00 00 00       	jmp    c001fcc3 <Vm::x87Handler(regs*)+0x259>
c001fbe4:	31 c0                	xor    eax,eax
c001fbe6:	80 fa 07             	cmp    dl,0x7
c001fbe9:	0f 85 dc 08 00 00    	jne    c00204cb <Vm::x87Handler(regs*)+0xa61>
c001fbef:	66 a1 e2 19 03 c0    	mov    ax,ds:0xc00319e2
c001fbf5:	66 89 06             	mov    WORD PTR [esi],ax
c001fbf8:	e9 c6 00 00 00       	jmp    c001fcc3 <Vm::x87Handler(regs*)+0x259>
c001fbfd:	80 fa d8             	cmp    dl,0xd8
c001fc00:	0f 84 c9 00 00 00    	je     c001fccf <Vm::x87Handler(regs*)+0x265>
c001fc06:	80 fa dc             	cmp    dl,0xdc
c001fc09:	0f 84 0d 02 00 00    	je     c001fe1c <Vm::x87Handler(regs*)+0x3b2>
c001fc0f:	80 fa de             	cmp    dl,0xde
c001fc12:	0f 84 cd 02 00 00    	je     c001fee5 <Vm::x87Handler(regs*)+0x47b>
c001fc18:	80 fa dd             	cmp    dl,0xdd
c001fc1b:	0f 84 5f 04 00 00    	je     c0020080 <Vm::x87Handler(regs*)+0x616>
c001fc21:	80 fa da             	cmp    dl,0xda
c001fc24:	0f 84 24 05 00 00    	je     c002014e <Vm::x87Handler(regs*)+0x6e4>
c001fc2a:	80 fa df             	cmp    dl,0xdf
c001fc2d:	0f 84 68 05 00 00    	je     c002019b <Vm::x87Handler(regs*)+0x731>
c001fc33:	31 c0                	xor    eax,eax
c001fc35:	80 fa db             	cmp    dl,0xdb
c001fc38:	0f 85 8d 08 00 00    	jne    c00204cb <Vm::x87Handler(regs*)+0xa61>
c001fc3e:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fc42:	80 fa 03             	cmp    dl,0x3
c001fc45:	0f 85 70 06 00 00    	jne    c00202bb <Vm::x87Handler(regs*)+0x851>
c001fc4b:	e8 c8 fd ff ff       	call   c001fa18 <Vm::fpuPop()>
c001fc50:	55                   	push   ebp
c001fc51:	55                   	push   ebp
c001fc52:	52                   	push   edx
c001fc53:	50                   	push   eax
c001fc54:	e8 71 fa ff ff       	call   c001f6ca <Vm::fpuFloatToLong(unsigned long long)>
c001fc59:	83 c4 10             	add    esp,0x10
c001fc5c:	89 06                	mov    DWORD PTR [esi],eax
c001fc5e:	eb 63                	jmp    c001fcc3 <Vm::x87Handler(regs*)+0x259>
c001fc60:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fc64:	84 d2                	test   dl,dl
c001fc66:	0f 85 e6 05 00 00    	jne    c0020252 <Vm::x87Handler(regs*)+0x7e8>
c001fc6c:	57                   	push   edi
c001fc6d:	57                   	push   edi
c001fc6e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fc71:	ff 36                	push   DWORD PTR [esi]
c001fc73:	e8 49 fa ff ff       	call   c001f6c1 <Vm::fpu64ToInternal(unsigned long long)>
c001fc78:	5e                   	pop    esi
c001fc79:	5f                   	pop    edi
c001fc7a:	52                   	push   edx
c001fc7b:	50                   	push   eax
c001fc7c:	e8 3a fd ff ff       	call   c001f9bb <Vm::fpuPush(unsigned long long)>
c001fc81:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fc85:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fc88:	e9 51 fe ff ff       	jmp    c001fade <Vm::x87Handler(regs*)+0x74>
c001fc8d:	80 fa 03             	cmp    dl,0x3
c001fc90:	0f 85 d7 06 00 00    	jne    c002036d <Vm::x87Handler(regs*)+0x903>
c001fc96:	57                   	push   edi
c001fc97:	57                   	push   edi
c001fc98:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fc9b:	ff 36                	push   DWORD PTR [esi]
c001fc9d:	e8 1f fa ff ff       	call   c001f6c1 <Vm::fpu64ToInternal(unsigned long long)>
c001fca2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fca9:	89 c6                	mov    esi,eax
c001fcab:	89 d7                	mov    edi,edx
c001fcad:	e8 7b fc ff ff       	call   c001f92d <Vm::fpuGetReg(int)>
c001fcb2:	57                   	push   edi
c001fcb3:	56                   	push   esi
c001fcb4:	52                   	push   edx
c001fcb5:	50                   	push   eax
c001fcb6:	e8 95 fb ff ff       	call   c001f850 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fcbb:	83 c4 20             	add    esp,0x20
c001fcbe:	e8 55 fd ff ff       	call   c001fa18 <Vm::fpuPop()>
c001fcc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fcc7:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fcca:	e9 12 fe ff ff       	jmp    c001fae1 <Vm::x87Handler(regs*)+0x77>
c001fccf:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fcd3:	8d 50 40             	lea    edx,[eax+0x40]
c001fcd6:	80 fa 07             	cmp    dl,0x7
c001fcd9:	77 29                	ja     c001fd04 <Vm::x87Handler(regs*)+0x29a>
c001fcdb:	83 ec 0c             	sub    esp,0xc
c001fcde:	2d c0 00 00 00       	sub    eax,0xc0
c001fce3:	50                   	push   eax
c001fce4:	e8 44 fc ff ff       	call   c001f92d <Vm::fpuGetReg(int)>
c001fce9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fcf0:	89 c6                	mov    esi,eax
c001fcf2:	89 d7                	mov    edi,edx
c001fcf4:	e8 34 fc ff ff       	call   c001f92d <Vm::fpuGetReg(int)>
c001fcf9:	57                   	push   edi
c001fcfa:	56                   	push   esi
c001fcfb:	52                   	push   edx
c001fcfc:	50                   	push   eax
c001fcfd:	e8 a1 fb ff ff       	call   c001f8a3 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fd02:	eb 2f                	jmp    c001fd33 <Vm::x87Handler(regs*)+0x2c9>
c001fd04:	8d 50 38             	lea    edx,[eax+0x38]
c001fd07:	80 fa 07             	cmp    dl,0x7
c001fd0a:	77 2f                	ja     c001fd3b <Vm::x87Handler(regs*)+0x2d1>
c001fd0c:	83 ec 0c             	sub    esp,0xc
c001fd0f:	2d c8 00 00 00       	sub    eax,0xc8
c001fd14:	50                   	push   eax
c001fd15:	e8 13 fc ff ff       	call   c001f92d <Vm::fpuGetReg(int)>
c001fd1a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd21:	89 c6                	mov    esi,eax
c001fd23:	89 d7                	mov    edi,edx
c001fd25:	e8 03 fc ff ff       	call   c001f92d <Vm::fpuGetReg(int)>
c001fd2a:	57                   	push   edi
c001fd2b:	56                   	push   esi
c001fd2c:	52                   	push   edx
c001fd2d:	50                   	push   eax
c001fd2e:	e8 a9 fb ff ff       	call   c001f8dc <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fd33:	83 c4 1c             	add    esp,0x1c
c001fd36:	e9 d8 fd ff ff       	jmp    c001fb13 <Vm::x87Handler(regs*)+0xa9>
c001fd3b:	8d 50 30             	lea    edx,[eax+0x30]
c001fd3e:	80 fa 07             	cmp    dl,0x7
c001fd41:	77 0d                	ja     c001fd50 <Vm::x87Handler(regs*)+0x2e6>
c001fd43:	83 ec 0c             	sub    esp,0xc
c001fd46:	2d d0 00 00 00       	sub    eax,0xd0
c001fd4b:	e9 99 03 00 00       	jmp    c00200e9 <Vm::x87Handler(regs*)+0x67f>
c001fd50:	8d 50 28             	lea    edx,[eax+0x28]
c001fd53:	80 fa 07             	cmp    dl,0x7
c001fd56:	77 0d                	ja     c001fd65 <Vm::x87Handler(regs*)+0x2fb>
c001fd58:	83 ec 0c             	sub    esp,0xc
c001fd5b:	2d d8 00 00 00       	sub    eax,0xd8
c001fd60:	e9 c0 03 00 00       	jmp    c0020125 <Vm::x87Handler(regs*)+0x6bb>
c001fd65:	8d 50 20             	lea    edx,[eax+0x20]
c001fd68:	80 fa 07             	cmp    dl,0x7
c001fd6b:	77 1b                	ja     c001fd88 <Vm::x87Handler(regs*)+0x31e>
c001fd6d:	83 ec 0c             	sub    esp,0xc
c001fd70:	2d e0 00 00 00       	sub    eax,0xe0
c001fd75:	50                   	push   eax
c001fd76:	e8 b2 fb ff ff       	call   c001f92d <Vm::fpuGetReg(int)>
c001fd7b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd82:	89 c6                	mov    esi,eax
c001fd84:	89 d7                	mov    edi,edx
c001fd86:	eb 22                	jmp    c001fdaa <Vm::x87Handler(regs*)+0x340>
c001fd88:	8d 50 18             	lea    edx,[eax+0x18]
c001fd8b:	80 fa 07             	cmp    dl,0x7
c001fd8e:	77 2d                	ja     c001fdbd <Vm::x87Handler(regs*)+0x353>
c001fd90:	83 ec 0c             	sub    esp,0xc
c001fd93:	6a 00                	push   0x0
c001fd95:	e8 93 fb ff ff       	call   c001f92d <Vm::fpuGetReg(int)>
c001fd9a:	89 c6                	mov    esi,eax
c001fd9c:	89 d7                	mov    edi,edx
c001fd9e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fda2:	2d e8 00 00 00       	sub    eax,0xe8
c001fda7:	89 04 24             	mov    DWORD PTR [esp],eax
c001fdaa:	e8 7e fb ff ff       	call   c001f92d <Vm::fpuGetReg(int)>
c001fdaf:	57                   	push   edi
c001fdb0:	56                   	push   esi
c001fdb1:	52                   	push   edx
c001fdb2:	50                   	push   eax
c001fdb3:	e8 15 fb ff ff       	call   c001f8cd <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fdb8:	e9 76 ff ff ff       	jmp    c001fd33 <Vm::x87Handler(regs*)+0x2c9>
c001fdbd:	8d 50 10             	lea    edx,[eax+0x10]
c001fdc0:	80 fa 07             	cmp    dl,0x7
c001fdc3:	77 1b                	ja     c001fde0 <Vm::x87Handler(regs*)+0x376>
c001fdc5:	83 ec 0c             	sub    esp,0xc
c001fdc8:	2d f0 00 00 00       	sub    eax,0xf0
c001fdcd:	50                   	push   eax
c001fdce:	e8 5a fb ff ff       	call   c001f92d <Vm::fpuGetReg(int)>
c001fdd3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fdda:	89 c6                	mov    esi,eax
c001fddc:	89 d7                	mov    edi,edx
c001fdde:	eb 22                	jmp    c001fe02 <Vm::x87Handler(regs*)+0x398>
c001fde0:	3c f7                	cmp    al,0xf7
c001fde2:	0f 86 d1 03 00 00    	jbe    c00201b9 <Vm::x87Handler(regs*)+0x74f>
c001fde8:	83 ec 0c             	sub    esp,0xc
c001fdeb:	6a 00                	push   0x0
c001fded:	e8 3b fb ff ff       	call   c001f92d <Vm::fpuGetReg(int)>
c001fdf2:	89 c6                	mov    esi,eax
c001fdf4:	89 d7                	mov    edi,edx
c001fdf6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fdfa:	2d f8 00 00 00       	sub    eax,0xf8
c001fdff:	89 04 24             	mov    DWORD PTR [esp],eax
c001fe02:	e8 26 fb ff ff       	call   c001f92d <Vm::fpuGetReg(int)>
c001fe07:	57                   	push   edi
c001fe08:	56                   	push   esi
c001fe09:	52                   	push   edx
c001fe0a:	50                   	push   eax
c001fe0b:	e8 eb fa ff ff       	call   c001f8fb <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fe10:	83 c4 1c             	add    esp,0x1c
c001fe13:	52                   	push   edx
c001fe14:	50                   	push   eax
c001fe15:	6a 00                	push   0x0
c001fe17:	e9 51 02 00 00       	jmp    c002006d <Vm::x87Handler(regs*)+0x603>
c001fe1c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe20:	8d 50 40             	lea    edx,[eax+0x40]
c001fe23:	80 fa 07             	cmp    dl,0x7
c001fe26:	77 37                	ja     c001fe5f <Vm::x87Handler(regs*)+0x3f5>
c001fe28:	83 ec 0c             	sub    esp,0xc
c001fe2b:	2d c0 00 00 00       	sub    eax,0xc0
c001fe30:	50                   	push   eax
c001fe31:	e8 f7 fa ff ff       	call   c001f92d <Vm::fpuGetReg(int)>
c001fe36:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe3d:	89 c6                	mov    esi,eax
c001fe3f:	89 d7                	mov    edi,edx
c001fe41:	e8 e7 fa ff ff       	call   c001f92d <Vm::fpuGetReg(int)>
c001fe46:	57                   	push   edi
c001fe47:	56                   	push   esi
c001fe48:	52                   	push   edx
c001fe49:	50                   	push   eax
c001fe4a:	e8 54 fa ff ff       	call   c001f8a3 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fe4f:	83 c4 1c             	add    esp,0x1c
c001fe52:	52                   	push   edx
c001fe53:	50                   	push   eax
c001fe54:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe58:	2d c0 00 00 00       	sub    eax,0xc0
c001fe5d:	eb 3d                	jmp    c001fe9c <Vm::x87Handler(regs*)+0x432>
c001fe5f:	8d 50 38             	lea    edx,[eax+0x38]
c001fe62:	80 fa 07             	cmp    dl,0x7
c001fe65:	77 3b                	ja     c001fea2 <Vm::x87Handler(regs*)+0x438>
c001fe67:	83 ec 0c             	sub    esp,0xc
c001fe6a:	2d c8 00 00 00       	sub    eax,0xc8
c001fe6f:	50                   	push   eax
c001fe70:	e8 b8 fa ff ff       	call   c001f92d <Vm::fpuGetReg(int)>
c001fe75:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe7c:	89 c6                	mov    esi,eax
c001fe7e:	89 d7                	mov    edi,edx
c001fe80:	e8 a8 fa ff ff       	call   c001f92d <Vm::fpuGetReg(int)>
c001fe85:	57                   	push   edi
c001fe86:	56                   	push   esi
c001fe87:	52                   	push   edx
c001fe88:	50                   	push   eax
c001fe89:	e8 4e fa ff ff       	call   c001f8dc <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fe8e:	83 c4 1c             	add    esp,0x1c
c001fe91:	52                   	push   edx
c001fe92:	50                   	push   eax
c001fe93:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe97:	2d c8 00 00 00       	sub    eax,0xc8
c001fe9c:	50                   	push   eax
c001fe9d:	e9 75 fc ff ff       	jmp    c001fb17 <Vm::x87Handler(regs*)+0xad>
c001fea2:	83 c0 18             	add    eax,0x18
c001fea5:	3c 07                	cmp    al,0x7
c001fea7:	0f 87 3b 04 00 00    	ja     c00202e8 <Vm::x87Handler(regs*)+0x87e>
c001fead:	83 ec 0c             	sub    esp,0xc
c001feb0:	6a 00                	push   0x0
c001feb2:	e8 76 fa ff ff       	call   c001f92d <Vm::fpuGetReg(int)>
c001feb7:	89 c6                	mov    esi,eax
c001feb9:	89 d7                	mov    edi,edx
c001febb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001febf:	2d e8 00 00 00       	sub    eax,0xe8
c001fec4:	89 04 24             	mov    DWORD PTR [esp],eax
c001fec7:	e8 61 fa ff ff       	call   c001f92d <Vm::fpuGetReg(int)>
c001fecc:	57                   	push   edi
c001fecd:	56                   	push   esi
c001fece:	52                   	push   edx
c001fecf:	50                   	push   eax
c001fed0:	e8 f8 f9 ff ff       	call   c001f8cd <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fed5:	83 c4 1c             	add    esp,0x1c
c001fed8:	52                   	push   edx
c001fed9:	50                   	push   eax
c001feda:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fede:	2d e8 00 00 00       	sub    eax,0xe8
c001fee3:	eb b7                	jmp    c001fe9c <Vm::x87Handler(regs*)+0x432>
c001fee5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fee9:	8d 50 40             	lea    edx,[eax+0x40]
c001feec:	80 fa 07             	cmp    dl,0x7
c001feef:	77 3a                	ja     c001ff2b <Vm::x87Handler(regs*)+0x4c1>
c001fef1:	83 ec 0c             	sub    esp,0xc
c001fef4:	2d c0 00 00 00       	sub    eax,0xc0
c001fef9:	50                   	push   eax
c001fefa:	e8 2e fa ff ff       	call   c001f92d <Vm::fpuGetReg(int)>
c001feff:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff06:	89 c6                	mov    esi,eax
c001ff08:	89 d7                	mov    edi,edx
c001ff0a:	e8 1e fa ff ff       	call   c001f92d <Vm::fpuGetReg(int)>
c001ff0f:	57                   	push   edi
c001ff10:	56                   	push   esi
c001ff11:	52                   	push   edx
c001ff12:	50                   	push   eax
c001ff13:	e8 8b f9 ff ff       	call   c001f8a3 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ff18:	83 c4 1c             	add    esp,0x1c
c001ff1b:	52                   	push   edx
c001ff1c:	50                   	push   eax
c001ff1d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff21:	2d c0 00 00 00       	sub    eax,0xc0
c001ff26:	e9 9e 01 00 00       	jmp    c00200c9 <Vm::x87Handler(regs*)+0x65f>
c001ff2b:	8d 50 20             	lea    edx,[eax+0x20]
c001ff2e:	80 fa 07             	cmp    dl,0x7
c001ff31:	77 3a                	ja     c001ff6d <Vm::x87Handler(regs*)+0x503>
c001ff33:	83 ec 0c             	sub    esp,0xc
c001ff36:	2d e0 00 00 00       	sub    eax,0xe0
c001ff3b:	50                   	push   eax
c001ff3c:	e8 ec f9 ff ff       	call   c001f92d <Vm::fpuGetReg(int)>
c001ff41:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff48:	89 c6                	mov    esi,eax
c001ff4a:	89 d7                	mov    edi,edx
c001ff4c:	e8 dc f9 ff ff       	call   c001f92d <Vm::fpuGetReg(int)>
c001ff51:	57                   	push   edi
c001ff52:	56                   	push   esi
c001ff53:	52                   	push   edx
c001ff54:	50                   	push   eax
c001ff55:	e8 73 f9 ff ff       	call   c001f8cd <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ff5a:	83 c4 1c             	add    esp,0x1c
c001ff5d:	52                   	push   edx
c001ff5e:	50                   	push   eax
c001ff5f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff63:	2d e0 00 00 00       	sub    eax,0xe0
c001ff68:	e9 5c 01 00 00       	jmp    c00200c9 <Vm::x87Handler(regs*)+0x65f>
c001ff6d:	8d 50 18             	lea    edx,[eax+0x18]
c001ff70:	80 fa 07             	cmp    dl,0x7
c001ff73:	77 3b                	ja     c001ffb0 <Vm::x87Handler(regs*)+0x546>
c001ff75:	83 ec 0c             	sub    esp,0xc
c001ff78:	6a 00                	push   0x0
c001ff7a:	e8 ae f9 ff ff       	call   c001f92d <Vm::fpuGetReg(int)>
c001ff7f:	89 c6                	mov    esi,eax
c001ff81:	89 d7                	mov    edi,edx
c001ff83:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff87:	2d e8 00 00 00       	sub    eax,0xe8
c001ff8c:	89 04 24             	mov    DWORD PTR [esp],eax
c001ff8f:	e8 99 f9 ff ff       	call   c001f92d <Vm::fpuGetReg(int)>
c001ff94:	57                   	push   edi
c001ff95:	56                   	push   esi
c001ff96:	52                   	push   edx
c001ff97:	50                   	push   eax
c001ff98:	e8 30 f9 ff ff       	call   c001f8cd <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ff9d:	83 c4 1c             	add    esp,0x1c
c001ffa0:	52                   	push   edx
c001ffa1:	50                   	push   eax
c001ffa2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffa6:	2d e8 00 00 00       	sub    eax,0xe8
c001ffab:	e9 19 01 00 00       	jmp    c00200c9 <Vm::x87Handler(regs*)+0x65f>
c001ffb0:	8d 50 38             	lea    edx,[eax+0x38]
c001ffb3:	80 fa 07             	cmp    dl,0x7
c001ffb6:	77 37                	ja     c001ffef <Vm::x87Handler(regs*)+0x585>
c001ffb8:	83 ec 0c             	sub    esp,0xc
c001ffbb:	2d c8 00 00 00       	sub    eax,0xc8
c001ffc0:	50                   	push   eax
c001ffc1:	e8 67 f9 ff ff       	call   c001f92d <Vm::fpuGetReg(int)>
c001ffc6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ffcd:	89 c6                	mov    esi,eax
c001ffcf:	89 d7                	mov    edi,edx
c001ffd1:	e8 57 f9 ff ff       	call   c001f92d <Vm::fpuGetReg(int)>
c001ffd6:	57                   	push   edi
c001ffd7:	56                   	push   esi
c001ffd8:	52                   	push   edx
c001ffd9:	50                   	push   eax
c001ffda:	e8 fd f8 ff ff       	call   c001f8dc <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ffdf:	83 c4 1c             	add    esp,0x1c
c001ffe2:	52                   	push   edx
c001ffe3:	50                   	push   eax
c001ffe4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffe8:	2d c8 00 00 00       	sub    eax,0xc8
c001ffed:	eb 7d                	jmp    c002006c <Vm::x87Handler(regs*)+0x602>
c001ffef:	3c f7                	cmp    al,0xf7
c001fff1:	76 38                	jbe    c002002b <Vm::x87Handler(regs*)+0x5c1>
c001fff3:	83 ec 0c             	sub    esp,0xc
c001fff6:	6a 00                	push   0x0
c001fff8:	e8 30 f9 ff ff       	call   c001f92d <Vm::fpuGetReg(int)>
c001fffd:	89 c6                	mov    esi,eax
c001ffff:	89 d7                	mov    edi,edx
c0020001:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020005:	2d f8 00 00 00       	sub    eax,0xf8
c002000a:	89 04 24             	mov    DWORD PTR [esp],eax
c002000d:	e8 1b f9 ff ff       	call   c001f92d <Vm::fpuGetReg(int)>
c0020012:	57                   	push   edi
c0020013:	56                   	push   esi
c0020014:	52                   	push   edx
c0020015:	50                   	push   eax
c0020016:	e8 e0 f8 ff ff       	call   c001f8fb <Vm::fpuDivide(unsigned long long, unsigned long long)>
c002001b:	83 c4 1c             	add    esp,0x1c
c002001e:	52                   	push   edx
c002001f:	50                   	push   eax
c0020020:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020024:	2d f8 00 00 00       	sub    eax,0xf8
c0020029:	eb 41                	jmp    c002006c <Vm::x87Handler(regs*)+0x602>
c002002b:	8d 50 10             	lea    edx,[eax+0x10]
c002002e:	80 fa 07             	cmp    dl,0x7
c0020031:	0f 87 5a 01 00 00    	ja     c0020191 <Vm::x87Handler(regs*)+0x727>
c0020037:	83 ec 0c             	sub    esp,0xc
c002003a:	2d f0 00 00 00       	sub    eax,0xf0
c002003f:	50                   	push   eax
c0020040:	e8 e8 f8 ff ff       	call   c001f92d <Vm::fpuGetReg(int)>
c0020045:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002004c:	89 c6                	mov    esi,eax
c002004e:	89 d7                	mov    edi,edx
c0020050:	e8 d8 f8 ff ff       	call   c001f92d <Vm::fpuGetReg(int)>
c0020055:	57                   	push   edi
c0020056:	56                   	push   esi
c0020057:	52                   	push   edx
c0020058:	50                   	push   eax
c0020059:	e8 9d f8 ff ff       	call   c001f8fb <Vm::fpuDivide(unsigned long long, unsigned long long)>
c002005e:	83 c4 1c             	add    esp,0x1c
c0020061:	52                   	push   edx
c0020062:	50                   	push   eax
c0020063:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020067:	2d f0 00 00 00       	sub    eax,0xf0
c002006c:	50                   	push   eax
c002006d:	e8 fe f8 ff ff       	call   c001f970 <Vm::fpuSetReg(int, unsigned long long)>
c0020072:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020076:	e8 9d f9 ff ff       	call   c001fa18 <Vm::fpuPop()>
c002007b:	e9 5e fa ff ff       	jmp    c001fade <Vm::x87Handler(regs*)+0x74>
c0020080:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020084:	8d 50 30             	lea    edx,[eax+0x30]
c0020087:	80 fa 07             	cmp    dl,0x7
c002008a:	77 1d                	ja     c00200a9 <Vm::x87Handler(regs*)+0x63f>
c002008c:	83 ec 0c             	sub    esp,0xc
c002008f:	6a 00                	push   0x0
c0020091:	e8 97 f8 ff ff       	call   c001f92d <Vm::fpuGetReg(int)>
c0020096:	83 c4 0c             	add    esp,0xc
c0020099:	52                   	push   edx
c002009a:	50                   	push   eax
c002009b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002009f:	2d d0 00 00 00       	sub    eax,0xd0
c00200a4:	e9 f3 fd ff ff       	jmp    c001fe9c <Vm::x87Handler(regs*)+0x432>
c00200a9:	8d 50 28             	lea    edx,[eax+0x28]
c00200ac:	80 fa 07             	cmp    dl,0x7
c00200af:	77 28                	ja     c00200d9 <Vm::x87Handler(regs*)+0x66f>
c00200b1:	83 ec 0c             	sub    esp,0xc
c00200b4:	6a 00                	push   0x0
c00200b6:	e8 72 f8 ff ff       	call   c001f92d <Vm::fpuGetReg(int)>
c00200bb:	83 c4 0c             	add    esp,0xc
c00200be:	52                   	push   edx
c00200bf:	50                   	push   eax
c00200c0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200c4:	2d d8 00 00 00       	sub    eax,0xd8
c00200c9:	50                   	push   eax
c00200ca:	e8 a1 f8 ff ff       	call   c001f970 <Vm::fpuSetReg(int, unsigned long long)>
c00200cf:	e8 44 f9 ff ff       	call   c001fa18 <Vm::fpuPop()>
c00200d4:	e9 01 fa ff ff       	jmp    c001fada <Vm::x87Handler(regs*)+0x70>
c00200d9:	8d 50 20             	lea    edx,[eax+0x20]
c00200dc:	80 fa 07             	cmp    dl,0x7
c00200df:	77 30                	ja     c0020111 <Vm::x87Handler(regs*)+0x6a7>
c00200e1:	83 ec 0c             	sub    esp,0xc
c00200e4:	2d e0 00 00 00       	sub    eax,0xe0
c00200e9:	50                   	push   eax
c00200ea:	e8 3e f8 ff ff       	call   c001f92d <Vm::fpuGetReg(int)>
c00200ef:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00200f6:	89 c6                	mov    esi,eax
c00200f8:	89 d7                	mov    edi,edx
c00200fa:	e8 2e f8 ff ff       	call   c001f92d <Vm::fpuGetReg(int)>
c00200ff:	57                   	push   edi
c0020100:	56                   	push   esi
c0020101:	52                   	push   edx
c0020102:	50                   	push   eax
c0020103:	e8 48 f7 ff ff       	call   c001f850 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020108:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c002010c:	e9 54 02 00 00       	jmp    c0020365 <Vm::x87Handler(regs*)+0x8fb>
c0020111:	8d 50 18             	lea    edx,[eax+0x18]
c0020114:	80 fa 07             	cmp    dl,0x7
c0020117:	0f 87 43 fb ff ff    	ja     c001fc60 <Vm::x87Handler(regs*)+0x1f6>
c002011d:	83 ec 0c             	sub    esp,0xc
c0020120:	2d e8 00 00 00       	sub    eax,0xe8
c0020125:	50                   	push   eax
c0020126:	e8 02 f8 ff ff       	call   c001f92d <Vm::fpuGetReg(int)>
c002012b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020132:	89 c6                	mov    esi,eax
c0020134:	89 d7                	mov    edi,edx
c0020136:	e8 f2 f7 ff ff       	call   c001f92d <Vm::fpuGetReg(int)>
c002013b:	57                   	push   edi
c002013c:	56                   	push   esi
c002013d:	52                   	push   edx
c002013e:	50                   	push   eax
c002013f:	e8 0c f7 ff ff       	call   c001f850 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020144:	83 c4 20             	add    esp,0x20
c0020147:	e8 cc f8 ff ff       	call   c001fa18 <Vm::fpuPop()>
c002014c:	eb 62                	jmp    c00201b0 <Vm::x87Handler(regs*)+0x746>
c002014e:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c0020152:	0f 85 0f 01 00 00    	jne    c0020267 <Vm::x87Handler(regs*)+0x7fd>
c0020158:	83 ec 0c             	sub    esp,0xc
c002015b:	6a 01                	push   0x1
c002015d:	e8 cb f7 ff ff       	call   c001f92d <Vm::fpuGetReg(int)>
c0020162:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020169:	89 c6                	mov    esi,eax
c002016b:	89 d7                	mov    edi,edx
c002016d:	e8 bb f7 ff ff       	call   c001f92d <Vm::fpuGetReg(int)>
c0020172:	57                   	push   edi
c0020173:	56                   	push   esi
c0020174:	52                   	push   edx
c0020175:	50                   	push   eax
c0020176:	e8 d5 f6 ff ff       	call   c001f850 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002017b:	83 c4 20             	add    esp,0x20
c002017e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020182:	e8 91 f8 ff ff       	call   c001fa18 <Vm::fpuPop()>
c0020187:	e8 8c f8 ff ff       	call   c001fa18 <Vm::fpuPop()>
c002018c:	e9 50 f9 ff ff       	jmp    c001fae1 <Vm::x87Handler(regs*)+0x77>
c0020191:	3c d9                	cmp    al,0xd9
c0020193:	0f 85 b5 02 00 00    	jne    c002044e <Vm::x87Handler(regs*)+0x9e4>
c0020199:	eb bd                	jmp    c0020158 <Vm::x87Handler(regs*)+0x6ee>
c002019b:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c002019f:	0f 85 ea 02 00 00    	jne    c002048f <Vm::x87Handler(regs*)+0xa25>
c00201a5:	0f b7 05 e0 19 03 c0 	movzx  eax,WORD PTR ds:0xc00319e0
c00201ac:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c00201b0:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00201b4:	e9 28 f9 ff ff       	jmp    c001fae1 <Vm::x87Handler(regs*)+0x77>
c00201b9:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00201bd:	84 d2                	test   dl,dl
c00201bf:	75 0f                	jne    c00201d0 <Vm::x87Handler(regs*)+0x766>
c00201c1:	83 ec 0c             	sub    esp,0xc
c00201c4:	ff 36                	push   DWORD PTR [esi]
c00201c6:	e8 b1 f4 ff ff       	call   c001f67c <Vm::fpu32ToInternal(unsigned int)>
c00201cb:	e9 2c 01 00 00       	jmp    c00202fc <Vm::x87Handler(regs*)+0x892>
c00201d0:	80 fa 01             	cmp    dl,0x1
c00201d3:	75 0f                	jne    c00201e4 <Vm::x87Handler(regs*)+0x77a>
c00201d5:	83 ec 0c             	sub    esp,0xc
c00201d8:	ff 36                	push   DWORD PTR [esi]
c00201da:	e8 9d f4 ff ff       	call   c001f67c <Vm::fpu32ToInternal(unsigned int)>
c00201df:	e9 81 02 00 00       	jmp    c0020465 <Vm::x87Handler(regs*)+0x9fb>
c00201e4:	80 fa 04             	cmp    dl,0x4
c00201e7:	75 0f                	jne    c00201f8 <Vm::x87Handler(regs*)+0x78e>
c00201e9:	83 ec 0c             	sub    esp,0xc
c00201ec:	ff 36                	push   DWORD PTR [esi]
c00201ee:	e8 89 f4 ff ff       	call   c001f67c <Vm::fpu32ToInternal(unsigned int)>
c00201f3:	e9 86 01 00 00       	jmp    c002037e <Vm::x87Handler(regs*)+0x914>
c00201f8:	80 fa 05             	cmp    dl,0x5
c00201fb:	75 1b                	jne    c0020218 <Vm::x87Handler(regs*)+0x7ae>
c00201fd:	83 ec 0c             	sub    esp,0xc
c0020200:	6a 00                	push   0x0
c0020202:	e8 26 f7 ff ff       	call   c001f92d <Vm::fpuGetReg(int)>
c0020207:	89 c7                	mov    edi,eax
c0020209:	89 d5                	mov    ebp,edx
c002020b:	58                   	pop    eax
c002020c:	ff 36                	push   DWORD PTR [esi]
c002020e:	e8 69 f4 ff ff       	call   c001f67c <Vm::fpu32ToInternal(unsigned int)>
c0020213:	e9 a3 01 00 00       	jmp    c00203bb <Vm::x87Handler(regs*)+0x951>
c0020218:	80 fa 06             	cmp    dl,0x6
c002021b:	75 0f                	jne    c002022c <Vm::x87Handler(regs*)+0x7c2>
c002021d:	83 ec 0c             	sub    esp,0xc
c0020220:	ff 36                	push   DWORD PTR [esi]
c0020222:	e8 55 f4 ff ff       	call   c001f67c <Vm::fpu32ToInternal(unsigned int)>
c0020227:	e9 ae 01 00 00       	jmp    c00203da <Vm::x87Handler(regs*)+0x970>
c002022c:	31 c0                	xor    eax,eax
c002022e:	80 fa 07             	cmp    dl,0x7
c0020231:	0f 85 94 02 00 00    	jne    c00204cb <Vm::x87Handler(regs*)+0xa61>
c0020237:	83 ec 0c             	sub    esp,0xc
c002023a:	6a 00                	push   0x0
c002023c:	e8 ec f6 ff ff       	call   c001f92d <Vm::fpuGetReg(int)>
c0020241:	89 c7                	mov    edi,eax
c0020243:	89 d5                	mov    ebp,edx
c0020245:	58                   	pop    eax
c0020246:	ff 36                	push   DWORD PTR [esi]
c0020248:	e8 2f f4 ff ff       	call   c001f67c <Vm::fpu32ToInternal(unsigned int)>
c002024d:	e9 cb 01 00 00       	jmp    c002041d <Vm::x87Handler(regs*)+0x9b3>
c0020252:	80 fa 03             	cmp    dl,0x3
c0020255:	0f 85 d3 01 00 00    	jne    c002042e <Vm::x87Handler(regs*)+0x9c4>
c002025b:	e8 b8 f7 ff ff       	call   c001fa18 <Vm::fpuPop()>
c0020260:	51                   	push   ecx
c0020261:	51                   	push   ecx
c0020262:	e9 de 01 00 00       	jmp    c0020445 <Vm::x87Handler(regs*)+0x9db>
c0020267:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002026b:	80 fa 01             	cmp    dl,0x1
c002026e:	75 09                	jne    c0020279 <Vm::x87Handler(regs*)+0x80f>
c0020270:	57                   	push   edi
c0020271:	57                   	push   edi
c0020272:	8b 06                	mov    eax,DWORD PTR [esi]
c0020274:	e9 e3 01 00 00       	jmp    c002045c <Vm::x87Handler(regs*)+0x9f2>
c0020279:	80 fa 04             	cmp    dl,0x4
c002027c:	75 12                	jne    c0020290 <Vm::x87Handler(regs*)+0x826>
c002027e:	31 d2                	xor    edx,edx
c0020280:	51                   	push   ecx
c0020281:	51                   	push   ecx
c0020282:	8b 06                	mov    eax,DWORD PTR [esi]
c0020284:	52                   	push   edx
c0020285:	50                   	push   eax
c0020286:	e8 d0 f4 ff ff       	call   c001f75b <Vm::fpuLongToFloat(long long)>
c002028b:	e9 ee 00 00 00       	jmp    c002037e <Vm::x87Handler(regs*)+0x914>
c0020290:	31 c0                	xor    eax,eax
c0020292:	80 fa 07             	cmp    dl,0x7
c0020295:	0f 85 30 02 00 00    	jne    c00204cb <Vm::x87Handler(regs*)+0xa61>
c002029b:	83 ec 0c             	sub    esp,0xc
c002029e:	6a 00                	push   0x0
c00202a0:	e8 88 f6 ff ff       	call   c001f92d <Vm::fpuGetReg(int)>
c00202a5:	89 c7                	mov    edi,eax
c00202a7:	89 d5                	mov    ebp,edx
c00202a9:	58                   	pop    eax
c00202aa:	8b 06                	mov    eax,DWORD PTR [esi]
c00202ac:	5a                   	pop    edx
c00202ad:	31 d2                	xor    edx,edx
c00202af:	52                   	push   edx
c00202b0:	50                   	push   eax
c00202b1:	e8 a5 f4 ff ff       	call   c001f75b <Vm::fpuLongToFloat(long long)>
c00202b6:	e9 62 01 00 00       	jmp    c002041d <Vm::x87Handler(regs*)+0x9b3>
c00202bb:	84 d2                	test   dl,dl
c00202bd:	75 0d                	jne    c00202cc <Vm::x87Handler(regs*)+0x862>
c00202bf:	31 d2                	xor    edx,edx
c00202c1:	55                   	push   ebp
c00202c2:	55                   	push   ebp
c00202c3:	8b 06                	mov    eax,DWORD PTR [esi]
c00202c5:	52                   	push   edx
c00202c6:	50                   	push   eax
c00202c7:	e9 d3 01 00 00       	jmp    c002049f <Vm::x87Handler(regs*)+0xa35>
c00202cc:	31 c0                	xor    eax,eax
c00202ce:	80 fa 02             	cmp    dl,0x2
c00202d1:	0f 85 f4 01 00 00    	jne    c00204cb <Vm::x87Handler(regs*)+0xa61>
c00202d7:	83 ec 0c             	sub    esp,0xc
c00202da:	6a 00                	push   0x0
c00202dc:	e8 4c f6 ff ff       	call   c001f92d <Vm::fpuGetReg(int)>
c00202e1:	59                   	pop    ecx
c00202e2:	5f                   	pop    edi
c00202e3:	e9 6a f9 ff ff       	jmp    c001fc52 <Vm::x87Handler(regs*)+0x1e8>
c00202e8:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00202ec:	84 d2                	test   dl,dl
c00202ee:	75 2a                	jne    c002031a <Vm::x87Handler(regs*)+0x8b0>
c00202f0:	50                   	push   eax
c00202f1:	50                   	push   eax
c00202f2:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00202f5:	ff 36                	push   DWORD PTR [esi]
c00202f7:	e8 c5 f3 ff ff       	call   c001f6c1 <Vm::fpu64ToInternal(unsigned long long)>
c00202fc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020303:	89 c6                	mov    esi,eax
c0020305:	89 d7                	mov    edi,edx
c0020307:	e8 21 f6 ff ff       	call   c001f92d <Vm::fpuGetReg(int)>
c002030c:	57                   	push   edi
c002030d:	56                   	push   esi
c002030e:	52                   	push   edx
c002030f:	50                   	push   eax
c0020310:	e8 8e f5 ff ff       	call   c001f8a3 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0020315:	e9 64 01 00 00       	jmp    c002047e <Vm::x87Handler(regs*)+0xa14>
c002031a:	80 fa 01             	cmp    dl,0x1
c002031d:	75 11                	jne    c0020330 <Vm::x87Handler(regs*)+0x8c6>
c002031f:	50                   	push   eax
c0020320:	50                   	push   eax
c0020321:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020324:	ff 36                	push   DWORD PTR [esi]
c0020326:	e8 96 f3 ff ff       	call   c001f6c1 <Vm::fpu64ToInternal(unsigned long long)>
c002032b:	e9 35 01 00 00       	jmp    c0020465 <Vm::x87Handler(regs*)+0x9fb>
c0020330:	80 fa 02             	cmp    dl,0x2
c0020333:	0f 85 54 f9 ff ff    	jne    c001fc8d <Vm::x87Handler(regs*)+0x223>
c0020339:	55                   	push   ebp
c002033a:	55                   	push   ebp
c002033b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002033e:	ff 36                	push   DWORD PTR [esi]
c0020340:	e8 7c f3 ff ff       	call   c001f6c1 <Vm::fpu64ToInternal(unsigned long long)>
c0020345:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002034c:	89 c6                	mov    esi,eax
c002034e:	89 d7                	mov    edi,edx
c0020350:	e8 d8 f5 ff ff       	call   c001f92d <Vm::fpuGetReg(int)>
c0020355:	57                   	push   edi
c0020356:	56                   	push   esi
c0020357:	52                   	push   edx
c0020358:	50                   	push   eax
c0020359:	e8 f2 f4 ff ff       	call   c001f850 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002035e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020362:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0020365:	83 c4 20             	add    esp,0x20
c0020368:	e9 74 f7 ff ff       	jmp    c001fae1 <Vm::x87Handler(regs*)+0x77>
c002036d:	80 fa 04             	cmp    dl,0x4
c0020370:	75 2a                	jne    c002039c <Vm::x87Handler(regs*)+0x932>
c0020372:	51                   	push   ecx
c0020373:	51                   	push   ecx
c0020374:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020377:	ff 36                	push   DWORD PTR [esi]
c0020379:	e8 43 f3 ff ff       	call   c001f6c1 <Vm::fpu64ToInternal(unsigned long long)>
c002037e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020385:	89 c6                	mov    esi,eax
c0020387:	89 d7                	mov    edi,edx
c0020389:	e8 9f f5 ff ff       	call   c001f92d <Vm::fpuGetReg(int)>
c002038e:	57                   	push   edi
c002038f:	56                   	push   esi
c0020390:	52                   	push   edx
c0020391:	50                   	push   eax
c0020392:	e8 36 f5 ff ff       	call   c001f8cd <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020397:	e9 e2 00 00 00       	jmp    c002047e <Vm::x87Handler(regs*)+0xa14>
c002039c:	80 fa 05             	cmp    dl,0x5
c002039f:	75 28                	jne    c00203c9 <Vm::x87Handler(regs*)+0x95f>
c00203a1:	83 ec 0c             	sub    esp,0xc
c00203a4:	6a 00                	push   0x0
c00203a6:	e8 82 f5 ff ff       	call   c001f92d <Vm::fpuGetReg(int)>
c00203ab:	89 c7                	mov    edi,eax
c00203ad:	89 d5                	mov    ebp,edx
c00203af:	58                   	pop    eax
c00203b0:	5a                   	pop    edx
c00203b1:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00203b4:	ff 36                	push   DWORD PTR [esi]
c00203b6:	e8 06 f3 ff ff       	call   c001f6c1 <Vm::fpu64ToInternal(unsigned long long)>
c00203bb:	83 c4 10             	add    esp,0x10
c00203be:	55                   	push   ebp
c00203bf:	57                   	push   edi
c00203c0:	52                   	push   edx
c00203c1:	50                   	push   eax
c00203c2:	e8 06 f5 ff ff       	call   c001f8cd <Vm::fpuSub(unsigned long long, unsigned long long)>
c00203c7:	eb 60                	jmp    c0020429 <Vm::x87Handler(regs*)+0x9bf>
c00203c9:	80 fa 06             	cmp    dl,0x6
c00203cc:	75 2a                	jne    c00203f8 <Vm::x87Handler(regs*)+0x98e>
c00203ce:	51                   	push   ecx
c00203cf:	51                   	push   ecx
c00203d0:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00203d3:	ff 36                	push   DWORD PTR [esi]
c00203d5:	e8 e7 f2 ff ff       	call   c001f6c1 <Vm::fpu64ToInternal(unsigned long long)>
c00203da:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00203e1:	89 c6                	mov    esi,eax
c00203e3:	89 d7                	mov    edi,edx
c00203e5:	e8 43 f5 ff ff       	call   c001f92d <Vm::fpuGetReg(int)>
c00203ea:	57                   	push   edi
c00203eb:	56                   	push   esi
c00203ec:	52                   	push   edx
c00203ed:	50                   	push   eax
c00203ee:	e8 08 f5 ff ff       	call   c001f8fb <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00203f3:	e9 86 00 00 00       	jmp    c002047e <Vm::x87Handler(regs*)+0xa14>
c00203f8:	31 c0                	xor    eax,eax
c00203fa:	80 fa 07             	cmp    dl,0x7
c00203fd:	0f 85 c8 00 00 00    	jne    c00204cb <Vm::x87Handler(regs*)+0xa61>
c0020403:	83 ec 0c             	sub    esp,0xc
c0020406:	6a 00                	push   0x0
c0020408:	e8 20 f5 ff ff       	call   c001f92d <Vm::fpuGetReg(int)>
c002040d:	89 c7                	mov    edi,eax
c002040f:	89 d5                	mov    ebp,edx
c0020411:	58                   	pop    eax
c0020412:	5a                   	pop    edx
c0020413:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020416:	ff 36                	push   DWORD PTR [esi]
c0020418:	e8 a4 f2 ff ff       	call   c001f6c1 <Vm::fpu64ToInternal(unsigned long long)>
c002041d:	83 c4 10             	add    esp,0x10
c0020420:	55                   	push   ebp
c0020421:	57                   	push   edi
c0020422:	52                   	push   edx
c0020423:	50                   	push   eax
c0020424:	e8 d2 f4 ff ff       	call   c001f8fb <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020429:	83 c4 0c             	add    esp,0xc
c002042c:	eb 53                	jmp    c0020481 <Vm::x87Handler(regs*)+0xa17>
c002042e:	31 c0                	xor    eax,eax
c0020430:	80 fa 02             	cmp    dl,0x2
c0020433:	0f 85 92 00 00 00    	jne    c00204cb <Vm::x87Handler(regs*)+0xa61>
c0020439:	83 ec 0c             	sub    esp,0xc
c002043c:	6a 00                	push   0x0
c002043e:	e8 ea f4 ff ff       	call   c001f92d <Vm::fpuGetReg(int)>
c0020443:	59                   	pop    ecx
c0020444:	5f                   	pop    edi
c0020445:	52                   	push   edx
c0020446:	50                   	push   eax
c0020447:	e8 27 f2 ff ff       	call   c001f673 <Vm::fpuInternalTo64(unsigned long long)>
c002044c:	eb 70                	jmp    c00204be <Vm::x87Handler(regs*)+0xa54>
c002044e:	31 c0                	xor    eax,eax
c0020450:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c0020455:	75 74                	jne    c00204cb <Vm::x87Handler(regs*)+0xa61>
c0020457:	50                   	push   eax
c0020458:	50                   	push   eax
c0020459:	0f b7 06             	movzx  eax,WORD PTR [esi]
c002045c:	31 d2                	xor    edx,edx
c002045e:	52                   	push   edx
c002045f:	50                   	push   eax
c0020460:	e8 f6 f2 ff ff       	call   c001f75b <Vm::fpuLongToFloat(long long)>
c0020465:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002046c:	89 c6                	mov    esi,eax
c002046e:	89 d7                	mov    edi,edx
c0020470:	e8 b8 f4 ff ff       	call   c001f92d <Vm::fpuGetReg(int)>
c0020475:	57                   	push   edi
c0020476:	56                   	push   esi
c0020477:	52                   	push   edx
c0020478:	50                   	push   eax
c0020479:	e8 5e f4 ff ff       	call   c001f8dc <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c002047e:	83 c4 1c             	add    esp,0x1c
c0020481:	52                   	push   edx
c0020482:	50                   	push   eax
c0020483:	6a 00                	push   0x0
c0020485:	e8 e6 f4 ff ff       	call   c001f970 <Vm::fpuSetReg(int, unsigned long long)>
c002048a:	e9 f2 f7 ff ff       	jmp    c001fc81 <Vm::x87Handler(regs*)+0x217>
c002048f:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020493:	80 fa 05             	cmp    dl,0x5
c0020496:	75 11                	jne    c00204a9 <Vm::x87Handler(regs*)+0xa3f>
c0020498:	55                   	push   ebp
c0020499:	55                   	push   ebp
c002049a:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002049d:	ff 36                	push   DWORD PTR [esi]
c002049f:	e8 81 f2 ff ff       	call   c001f725 <Vm::fpuULongToFloat(unsigned long long)>
c00204a4:	e9 cf f7 ff ff       	jmp    c001fc78 <Vm::x87Handler(regs*)+0x20e>
c00204a9:	31 c0                	xor    eax,eax
c00204ab:	80 fa 07             	cmp    dl,0x7
c00204ae:	75 1b                	jne    c00204cb <Vm::x87Handler(regs*)+0xa61>
c00204b0:	e8 63 f5 ff ff       	call   c001fa18 <Vm::fpuPop()>
c00204b5:	51                   	push   ecx
c00204b6:	51                   	push   ecx
c00204b7:	52                   	push   edx
c00204b8:	50                   	push   eax
c00204b9:	e8 0c f2 ff ff       	call   c001f6ca <Vm::fpuFloatToLong(unsigned long long)>
c00204be:	83 c4 10             	add    esp,0x10
c00204c1:	89 06                	mov    DWORD PTR [esi],eax
c00204c3:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c00204c6:	e9 f8 f7 ff ff       	jmp    c001fcc3 <Vm::x87Handler(regs*)+0x259>
c00204cb:	83 c4 1c             	add    esp,0x1c
c00204ce:	5b                   	pop    ebx
c00204cf:	5e                   	pop    esi
c00204d0:	5f                   	pop    edi
c00204d1:	5d                   	pop    ebp
c00204d2:	c3                   	ret    

c00204d3 <__static_initialization_and_destruction_0(int, int)>:
c00204d3:	83 ec 0c             	sub    esp,0xc
c00204d6:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00204db:	75 1a                	jne    c00204f7 <__static_initialization_and_destruction_0(int, int)+0x24>
c00204dd:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00204e5:	75 10                	jne    c00204f7 <__static_initialization_and_destruction_0(int, int)+0x24>
c00204e7:	83 ec 0c             	sub    esp,0xc
c00204ea:	68 e0 19 03 c0       	push   0xc00319e0
c00204ef:	e8 0c 88 00 00       	call   c0028d00 <Vm::_FPUState::_FPUState()>
c00204f4:	83 c4 10             	add    esp,0x10
c00204f7:	90                   	nop
c00204f8:	83 c4 0c             	add    esp,0xc
c00204fb:	c3                   	ret    

c00204fc <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c00204fc:	83 ec 0c             	sub    esp,0xc
c00204ff:	83 ec 08             	sub    esp,0x8
c0020502:	68 ff ff 00 00       	push   0xffff
c0020507:	6a 01                	push   0x1
c0020509:	e8 c5 ff ff ff       	call   c00204d3 <__static_initialization_and_destruction_0(int, int)>
c002050e:	83 c4 10             	add    esp,0x10
c0020511:	83 c4 0c             	add    esp,0xc
c0020514:	c3                   	ret    
c0020515:	90                   	nop

c0020516 <FAT::getName()>:
c0020516:	b8 f4 c7 02 c0       	mov    eax,0xc002c7f4
c002051b:	c3                   	ret    

c002051c <FAT::tell(void*, unsigned long long*)>:
c002051c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020521:	75 06                	jne    c0020529 <FAT::tell(void*, unsigned long long*)+0xd>
c0020523:	b8 04 00 00 00       	mov    eax,0x4
c0020528:	c3                   	ret    
c0020529:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002052e:	75 06                	jne    c0020536 <FAT::tell(void*, unsigned long long*)+0x1a>
c0020530:	b8 04 00 00 00       	mov    eax,0x4
c0020535:	c3                   	ret    
c0020536:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002053a:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c002053d:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0020540:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020544:	89 01                	mov    DWORD PTR [ecx],eax
c0020546:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020549:	b8 00 00 00 00       	mov    eax,0x0
c002054e:	c3                   	ret    
c002054f:	90                   	nop

c0020550 <FAT::stat(void*, unsigned long long*)>:
c0020550:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020555:	75 06                	jne    c002055d <FAT::stat(void*, unsigned long long*)+0xd>
c0020557:	b8 04 00 00 00       	mov    eax,0x4
c002055c:	c3                   	ret    
c002055d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020562:	75 06                	jne    c002056a <FAT::stat(void*, unsigned long long*)+0x1a>
c0020564:	b8 04 00 00 00       	mov    eax,0x4
c0020569:	c3                   	ret    
c002056a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002056e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0020571:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020574:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020578:	89 01                	mov    DWORD PTR [ecx],eax
c002057a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002057d:	b8 00 00 00 00       	mov    eax,0x0
c0020582:	c3                   	ret    
c0020583:	90                   	nop

c0020584 <FAT::~FAT()>:
c0020584:	83 ec 0c             	sub    esp,0xc
c0020587:	ba 78 c8 02 c0       	mov    edx,0xc002c878
c002058c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020590:	89 10                	mov    DWORD PTR [eax],edx
c0020592:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020596:	83 ec 0c             	sub    esp,0xc
c0020599:	50                   	push   eax
c002059a:	e8 d3 2c ff ff       	call   c0013272 <Filesystem::~Filesystem()>
c002059f:	83 c4 10             	add    esp,0x10
c00205a2:	90                   	nop
c00205a3:	83 c4 0c             	add    esp,0xc
c00205a6:	c3                   	ret    
c00205a7:	90                   	nop

c00205a8 <FAT::~FAT()>:
c00205a8:	83 ec 0c             	sub    esp,0xc
c00205ab:	83 ec 0c             	sub    esp,0xc
c00205ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00205b2:	e8 cd ff ff ff       	call   c0020584 <FAT::~FAT()>
c00205b7:	83 c4 10             	add    esp,0x10
c00205ba:	83 ec 08             	sub    esp,0x8
c00205bd:	6a 08                	push   0x8
c00205bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00205c3:	e8 a2 28 ff ff       	call   c0012e6a <operator delete(void*, unsigned long)>
c00205c8:	83 c4 10             	add    esp,0x10
c00205cb:	83 c4 0c             	add    esp,0xc
c00205ce:	c3                   	ret    
c00205cf:	90                   	nop

c00205d0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00205d0:	83 ec 1c             	sub    esp,0x1c
c00205d3:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c00205da:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00205df:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00205e3:	8b 04 85 60 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce5a0]
c00205ea:	83 f8 ff             	cmp    eax,0xffffffff
c00205ed:	75 34                	jne    c0020623 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c00205ef:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00205f3:	88 c2                	mov    dl,al
c00205f5:	a1 40 1a 03 c0       	mov    eax,ds:0xc0031a40
c00205fa:	01 d0                	add    eax,edx
c00205fc:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020600:	8b 15 40 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031a40
c0020606:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002060a:	89 14 85 60 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce5a0],edx
c0020611:	a1 40 1a 03 c0       	mov    eax,ds:0xc0031a40
c0020616:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002061a:	89 14 85 e0 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce520],edx
c0020621:	eb 17                	jmp    c002063a <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c0020623:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020627:	88 c2                	mov    dl,al
c0020629:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002062d:	8b 04 85 60 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce5a0]
c0020634:	01 d0                	add    eax,edx
c0020636:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002063a:	83 ec 04             	sub    esp,0x4
c002063d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020641:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020645:	8d 44 24 15          	lea    eax,[esp+0x15]
c0020649:	50                   	push   eax
c002064a:	e8 e9 66 fe ff       	call   c0006d38 <f_getlabel>
c002064f:	83 c4 10             	add    esp,0x10
c0020652:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020656:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002065b:	75 07                	jne    c0020664 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c002065d:	b8 00 00 00 00       	mov    eax,0x0
c0020662:	eb 05                	jmp    c0020669 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0020664:	b8 01 00 00 00       	mov    eax,0x1
c0020669:	83 c4 1c             	add    esp,0x1c
c002066c:	c3                   	ret    
c002066d:	90                   	nop

c002066e <FAT::setlabel(LogicalDisk*, int, char*)>:
c002066e:	57                   	push   edi
c002066f:	83 ec 58             	sub    esp,0x58
c0020672:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c002067a:	8d 54 24 10          	lea    edx,[esp+0x10]
c002067e:	b9 0f 00 00 00       	mov    ecx,0xf
c0020683:	b8 00 00 00 00       	mov    eax,0x0
c0020688:	fc                   	cld    
c0020689:	89 d7                	mov    edi,edx
c002068b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002068d:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020691:	8b 04 85 60 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce5a0]
c0020698:	83 f8 ff             	cmp    eax,0xffffffff
c002069b:	75 34                	jne    c00206d1 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c002069d:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00206a1:	88 c2                	mov    dl,al
c00206a3:	a1 40 1a 03 c0       	mov    eax,ds:0xc0031a40
c00206a8:	01 d0                	add    eax,edx
c00206aa:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00206ae:	8b 15 40 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031a40
c00206b4:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00206b8:	89 14 85 60 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce5a0],edx
c00206bf:	a1 40 1a 03 c0       	mov    eax,ds:0xc0031a40
c00206c4:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c00206c8:	89 14 85 e0 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce520],edx
c00206cf:	eb 17                	jmp    c00206e8 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c00206d1:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00206d5:	88 c2                	mov    dl,al
c00206d7:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00206db:	8b 04 85 60 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce5a0]
c00206e2:	01 d0                	add    eax,edx
c00206e4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00206e8:	83 ec 08             	sub    esp,0x8
c00206eb:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00206ef:	8d 44 24 18          	lea    eax,[esp+0x18]
c00206f3:	50                   	push   eax
c00206f4:	e8 7b 02 fe ff       	call   c0000974 <strcat>
c00206f9:	83 c4 10             	add    esp,0x10
c00206fc:	83 ec 0c             	sub    esp,0xc
c00206ff:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020703:	50                   	push   eax
c0020704:	e8 1d 68 fe ff       	call   c0006f26 <f_setlabel>
c0020709:	83 c4 10             	add    esp,0x10
c002070c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0020710:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0020715:	75 07                	jne    c002071e <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0020717:	b8 00 00 00 00       	mov    eax,0x0
c002071c:	eb 05                	jmp    c0020723 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c002071e:	b8 01 00 00 00       	mov    eax,0x1
c0020723:	83 c4 58             	add    esp,0x58
c0020726:	5f                   	pop    edi
c0020727:	c3                   	ret    

c0020728 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0020728:	83 ec 2c             	sub    esp,0x2c
c002072b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0020733:	83 ec 08             	sub    esp,0x8
c0020736:	68 18 c8 02 c0       	push   0xc002c818
c002073b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002073f:	e8 7c 01 fe ff       	call   c00008c0 <strcmp>
c0020744:	83 c4 10             	add    esp,0x10
c0020747:	85 c0                	test   eax,eax
c0020749:	0f 94 c0             	sete   al
c002074c:	84 c0                	test   al,al
c002074e:	74 0d                	je     c002075d <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0020750:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020758:	e9 a6 00 00 00       	jmp    c0020803 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002075d:	83 ec 08             	sub    esp,0x8
c0020760:	68 0a c8 02 c0       	push   0xc002c80a
c0020765:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020769:	e8 52 01 fe ff       	call   c00008c0 <strcmp>
c002076e:	83 c4 10             	add    esp,0x10
c0020771:	85 c0                	test   eax,eax
c0020773:	0f 94 c0             	sete   al
c0020776:	84 c0                	test   al,al
c0020778:	74 0a                	je     c0020784 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c002077a:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020782:	eb 7f                	jmp    c0020803 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020784:	83 ec 08             	sub    esp,0x8
c0020787:	68 10 c8 02 c0       	push   0xc002c810
c002078c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020790:	e8 2b 01 fe ff       	call   c00008c0 <strcmp>
c0020795:	83 c4 10             	add    esp,0x10
c0020798:	85 c0                	test   eax,eax
c002079a:	0f 94 c0             	sete   al
c002079d:	84 c0                	test   al,al
c002079f:	74 0a                	je     c00207ab <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c00207a1:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00207a9:	eb 58                	jmp    c0020803 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00207ab:	83 ec 08             	sub    esp,0x8
c00207ae:	68 6c 94 02 c0       	push   0xc002946c
c00207b3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00207b7:	e8 04 01 fe ff       	call   c00008c0 <strcmp>
c00207bc:	83 c4 10             	add    esp,0x10
c00207bf:	85 c0                	test   eax,eax
c00207c1:	0f 94 c0             	sete   al
c00207c4:	84 c0                	test   al,al
c00207c6:	74 0a                	je     c00207d2 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c00207c8:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00207d0:	eb 31                	jmp    c0020803 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00207d2:	83 ec 08             	sub    esp,0x8
c00207d5:	68 16 c8 02 c0       	push   0xc002c816
c00207da:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00207de:	e8 dd 00 fe ff       	call   c00008c0 <strcmp>
c00207e3:	83 c4 10             	add    esp,0x10
c00207e6:	85 c0                	test   eax,eax
c00207e8:	0f 94 c0             	sete   al
c00207eb:	84 c0                	test   al,al
c00207ed:	74 0a                	je     c00207f9 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c00207ef:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00207f7:	eb 0a                	jmp    c0020803 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00207f9:	b8 08 00 00 00       	mov    eax,0x8
c00207fe:	e9 04 01 00 00       	jmp    c0020907 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020803:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c002080a:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c002080f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020813:	8b 04 85 60 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce5a0]
c002081a:	83 f8 ff             	cmp    eax,0xffffffff
c002081d:	75 34                	jne    c0020853 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c002081f:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020823:	88 c2                	mov    dl,al
c0020825:	a1 40 1a 03 c0       	mov    eax,ds:0xc0031a40
c002082a:	01 d0                	add    eax,edx
c002082c:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020830:	8b 15 40 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031a40
c0020836:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002083a:	89 14 85 60 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce5a0],edx
c0020841:	a1 40 1a 03 c0       	mov    eax,ds:0xc0031a40
c0020846:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c002084a:	89 14 85 e0 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce520],edx
c0020851:	eb 17                	jmp    c002086a <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0020853:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020857:	88 c2                	mov    dl,al
c0020859:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002085d:	8b 04 85 60 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce5a0]
c0020864:	01 d0                	add    eax,edx
c0020866:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c002086a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002086e:	88 04 24             	mov    BYTE PTR [esp],al
c0020871:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0020875:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020879:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0020881:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0020886:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c002088e:	83 ec 0c             	sub    esp,0xc
c0020891:	68 00 20 00 00       	push   0x2000
c0020896:	e8 a5 ef fe ff       	call   c000f840 <malloc>
c002089b:	83 c4 10             	add    esp,0x10
c002089e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00208a2:	68 00 20 00 00       	push   0x2000
c00208a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00208ab:	8d 44 24 08          	lea    eax,[esp+0x8]
c00208af:	50                   	push   eax
c00208b0:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00208b4:	50                   	push   eax
c00208b5:	e8 b7 6a fe ff       	call   c0007371 <f_mkfs>
c00208ba:	83 c4 10             	add    esp,0x10
c00208bd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00208c1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00208c6:	75 07                	jne    c00208cf <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c00208c8:	b8 00 00 00 00       	mov    eax,0x0
c00208cd:	eb 38                	jmp    c0020907 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00208cf:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00208d4:	75 17                	jne    c00208ed <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c00208d6:	83 ec 0c             	sub    esp,0xc
c00208d9:	68 48 c8 02 c0       	push   0xc002c848
c00208de:	e8 67 26 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c00208e3:	83 c4 10             	add    esp,0x10
c00208e6:	b8 09 00 00 00       	mov    eax,0x9
c00208eb:	eb 1a                	jmp    c0020907 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00208ed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00208f1:	83 ec 08             	sub    esp,0x8
c00208f4:	50                   	push   eax
c00208f5:	68 1c c8 02 c0       	push   0xc002c81c
c00208fa:	e8 4b 26 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c00208ff:	83 c4 10             	add    esp,0x10
c0020902:	b8 01 00 00 00       	mov    eax,0x1
c0020907:	83 c4 2c             	add    esp,0x2c
c002090a:	c3                   	ret    
c002090b:	90                   	nop

c002090c <FAT::tryMount(LogicalDisk*, int)>:
c002090c:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0020912:	a1 40 1a 03 c0       	mov    eax,ds:0xc0031a40
c0020917:	83 f8 14             	cmp    eax,0x14
c002091a:	75 17                	jne    c0020933 <FAT::tryMount(LogicalDisk*, int)+0x27>
c002091c:	83 ec 0c             	sub    esp,0xc
c002091f:	68 2e c8 02 c0       	push   0xc002c82e
c0020924:	e8 d2 9c ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c0020929:	83 c4 10             	add    esp,0x10
c002092c:	b0 00                	mov    al,0x0
c002092e:	e9 d7 01 00 00       	jmp    c0020b0a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020933:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c002093a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020940:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020946:	3d 00 02 00 00       	cmp    eax,0x200
c002094b:	74 07                	je     c0020954 <FAT::tryMount(LogicalDisk*, int)+0x48>
c002094d:	b0 00                	mov    al,0x0
c002094f:	e9 b6 01 00 00       	jmp    c0020b0a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020954:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c002095c:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020963:	8b 04 85 60 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce5a0]
c002096a:	83 f8 ff             	cmp    eax,0xffffffff
c002096d:	74 07                	je     c0020976 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c002096f:	b0 01                	mov    al,0x1
c0020971:	e9 94 01 00 00       	jmp    c0020b0a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020976:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0020980:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0020988:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c002098f:	88 c2                	mov    dl,al
c0020991:	a1 40 1a 03 c0       	mov    eax,ds:0xc0031a40
c0020996:	01 d0                	add    eax,edx
c0020998:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c002099f:	8b 15 40 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031a40
c00209a5:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00209ac:	89 14 85 60 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce5a0],edx
c00209b3:	a1 40 1a 03 c0       	mov    eax,ds:0xc0031a40
c00209b8:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c00209bf:	89 14 85 e0 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce520],edx
c00209c6:	83 ec 0c             	sub    esp,0xc
c00209c9:	68 54 02 00 00       	push   0x254
c00209ce:	e8 6d ee fe ff       	call   c000f840 <malloc>
c00209d3:	83 c4 10             	add    esp,0x10
c00209d6:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c00209dd:	83 ec 04             	sub    esp,0x4
c00209e0:	6a 00                	push   0x0
c00209e2:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00209e9:	50                   	push   eax
c00209ea:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00209f1:	e8 39 45 fe ff       	call   c0004f2f <f_mount>
c00209f6:	83 c4 10             	add    esp,0x10
c00209f9:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020a00:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0020a08:	74 19                	je     c0020a23 <FAT::tryMount(LogicalDisk*, int)+0x117>
c0020a0a:	83 ec 0c             	sub    esp,0xc
c0020a0d:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020a14:	e8 47 ee fe ff       	call   c000f860 <rfree>
c0020a19:	83 c4 10             	add    esp,0x10
c0020a1c:	b0 00                	mov    al,0x0
c0020a1e:	e9 e7 00 00 00       	jmp    c0020b0a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020a23:	83 ec 04             	sub    esp,0x4
c0020a26:	68 00 01 00 00       	push   0x100
c0020a2b:	6a 00                	push   0x0
c0020a2d:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020a34:	50                   	push   eax
c0020a35:	e8 3e fd fd ff       	call   c0000778 <memset>
c0020a3a:	83 c4 10             	add    esp,0x10
c0020a3d:	83 ec 08             	sub    esp,0x8
c0020a40:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020a47:	50                   	push   eax
c0020a48:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020a4f:	50                   	push   eax
c0020a50:	e8 1f ff fd ff       	call   c0000974 <strcat>
c0020a55:	83 c4 10             	add    esp,0x10
c0020a58:	83 ec 08             	sub    esp,0x8
c0020a5b:	68 3c c8 02 c0       	push   0xc002c83c
c0020a60:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020a67:	50                   	push   eax
c0020a68:	e8 07 ff fd ff       	call   c0000974 <strcat>
c0020a6d:	83 c4 10             	add    esp,0x10
c0020a70:	83 ec 04             	sub    esp,0x4
c0020a73:	6a 01                	push   0x1
c0020a75:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0020a7c:	50                   	push   eax
c0020a7d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020a81:	50                   	push   eax
c0020a82:	e8 0a 45 fe ff       	call   c0004f91 <f_open>
c0020a87:	83 c4 10             	add    esp,0x10
c0020a8a:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020a91:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0020a98:	85 c0                	test   eax,eax
c0020a9a:	74 0a                	je     c0020aa6 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0020a9c:	78 2d                	js     c0020acb <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020a9e:	83 e8 04             	sub    eax,0x4
c0020aa1:	83 f8 01             	cmp    eax,0x1
c0020aa4:	77 25                	ja     c0020acb <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020aa6:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0020aae:	83 ec 0c             	sub    esp,0xc
c0020ab1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020ab5:	50                   	push   eax
c0020ab6:	e8 28 50 fe ff       	call   c0005ae3 <f_close>
c0020abb:	83 c4 10             	add    esp,0x10
c0020abe:	90                   	nop
c0020abf:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0020ac7:	74 3a                	je     c0020b03 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0020ac9:	eb 2d                	jmp    c0020af8 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0020acb:	83 ec 0c             	sub    esp,0xc
c0020ace:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020ad5:	e8 86 ed fe ff       	call   c000f860 <rfree>
c0020ada:	83 c4 10             	add    esp,0x10
c0020add:	83 ec 04             	sub    esp,0x4
c0020ae0:	6a 00                	push   0x0
c0020ae2:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020ae9:	50                   	push   eax
c0020aea:	6a 00                	push   0x0
c0020aec:	e8 3e 44 fe ff       	call   c0004f2f <f_mount>
c0020af1:	83 c4 10             	add    esp,0x10
c0020af4:	b0 00                	mov    al,0x0
c0020af6:	eb 12                	jmp    c0020b0a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020af8:	a1 40 1a 03 c0       	mov    eax,ds:0xc0031a40
c0020afd:	40                   	inc    eax
c0020afe:	a3 40 1a 03 c0       	mov    ds:0xc0031a40,eax
c0020b03:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0020b0a:	81 c4 6c 03 00 00    	add    esp,0x36c
c0020b10:	c3                   	ret    
c0020b11:	90                   	nop

c0020b12 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0020b12:	81 ec 3c 02 00 00    	sub    esp,0x23c
c0020b18:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c0020b20:	74 0a                	je     c0020b2c <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c0020b22:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c0020b2a:	75 0a                	jne    c0020b36 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c0020b2c:	b8 04 00 00 00       	mov    eax,0x4
c0020b31:	e9 db 00 00 00       	jmp    c0020c11 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020b36:	83 ec 08             	sub    esp,0x8
c0020b39:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020b40:	50                   	push   eax
c0020b41:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c0020b48:	e8 a0 55 fe ff       	call   c00060ed <f_readdir>
c0020b4d:	83 c4 10             	add    esp,0x10
c0020b50:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c0020b57:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0020b5d:	83 ec 0c             	sub    esp,0xc
c0020b60:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020b67:	83 c0 1a             	add    eax,0x1a
c0020b6a:	50                   	push   eax
c0020b6b:	e8 24 fc fd ff       	call   c0000794 <strlen>
c0020b70:	83 c4 10             	add    esp,0x10
c0020b73:	ba 00 00 00 00       	mov    edx,0x0
c0020b78:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020b7c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020b80:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c0020b87:	0f b6 c0             	movzx  eax,al
c0020b8a:	83 e0 10             	and    eax,0x10
c0020b8d:	74 07                	je     c0020b96 <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c0020b8f:	b8 02 00 00 00       	mov    eax,0x2
c0020b94:	eb 05                	jmp    c0020b9b <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c0020b96:	b8 01 00 00 00       	mov    eax,0x1
c0020b9b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020b9f:	83 ec 08             	sub    esp,0x8
c0020ba2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020ba9:	83 c0 1a             	add    eax,0x1a
c0020bac:	50                   	push   eax
c0020bad:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020bb1:	83 c0 10             	add    eax,0x10
c0020bb4:	50                   	push   eax
c0020bb5:	e8 7a fc fd ff       	call   c0000834 <strcpy>
c0020bba:	83 c4 10             	add    esp,0x10
c0020bbd:	83 ec 04             	sub    esp,0x4
c0020bc0:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c0020bc7:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020bcb:	50                   	push   eax
c0020bcc:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c0020bd3:	e8 6c fb fd ff       	call   c0000744 <memcpy>
c0020bd8:	83 c4 10             	add    esp,0x10
c0020bdb:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c0020be2:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020be8:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c0020bef:	84 c0                	test   al,al
c0020bf1:	75 07                	jne    c0020bfa <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c0020bf3:	b8 07 00 00 00       	mov    eax,0x7
c0020bf8:	eb 17                	jmp    c0020c11 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020bfa:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c0020c01:	85 c0                	test   eax,eax
c0020c03:	75 07                	jne    c0020c0c <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c0020c05:	b8 00 00 00 00       	mov    eax,0x0
c0020c0a:	eb 05                	jmp    c0020c11 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020c0c:	b8 01 00 00 00       	mov    eax,0x1
c0020c11:	81 c4 3c 02 00 00    	add    esp,0x23c
c0020c17:	c3                   	ret    

c0020c18 <FAT::read(void*, unsigned long, void*, int*)>:
c0020c18:	83 ec 1c             	sub    esp,0x1c
c0020c1b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020c20:	74 07                	je     c0020c29 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020c22:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020c27:	75 07                	jne    c0020c30 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020c29:	b8 04 00 00 00       	mov    eax,0x4
c0020c2e:	eb 3d                	jmp    c0020c6d <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020c30:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020c34:	50                   	push   eax
c0020c35:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020c39:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020c3d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020c41:	e8 87 47 fe ff       	call   c00053cd <f_read>
c0020c46:	83 c4 10             	add    esp,0x10
c0020c49:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020c4d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020c51:	89 c2                	mov    edx,eax
c0020c53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020c57:	89 10                	mov    DWORD PTR [eax],edx
c0020c59:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020c5d:	85 c0                	test   eax,eax
c0020c5f:	75 07                	jne    c0020c68 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020c61:	b8 00 00 00 00       	mov    eax,0x0
c0020c66:	eb 05                	jmp    c0020c6d <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020c68:	b8 01 00 00 00       	mov    eax,0x1
c0020c6d:	83 c4 1c             	add    esp,0x1c
c0020c70:	c3                   	ret    
c0020c71:	90                   	nop

c0020c72 <FAT::write(void*, unsigned long, void*, int*)>:
c0020c72:	83 ec 1c             	sub    esp,0x1c
c0020c75:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020c7a:	74 07                	je     c0020c83 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020c7c:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020c81:	75 07                	jne    c0020c8a <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020c83:	b8 04 00 00 00       	mov    eax,0x4
c0020c88:	eb 3d                	jmp    c0020cc7 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020c8a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020c8e:	50                   	push   eax
c0020c8f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020c93:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020c97:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020c9b:	e8 ad 49 fe ff       	call   c000564d <f_write>
c0020ca0:	83 c4 10             	add    esp,0x10
c0020ca3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020ca7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020cab:	89 c2                	mov    edx,eax
c0020cad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020cb1:	89 10                	mov    DWORD PTR [eax],edx
c0020cb3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020cb7:	85 c0                	test   eax,eax
c0020cb9:	75 07                	jne    c0020cc2 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0020cbb:	b8 00 00 00 00       	mov    eax,0x0
c0020cc0:	eb 05                	jmp    c0020cc7 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020cc2:	b8 01 00 00 00       	mov    eax,0x1
c0020cc7:	83 c4 1c             	add    esp,0x1c
c0020cca:	c3                   	ret    
c0020ccb:	90                   	nop

c0020ccc <FAT::close(void*)>:
c0020ccc:	83 ec 1c             	sub    esp,0x1c
c0020ccf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020cd4:	75 07                	jne    c0020cdd <FAT::close(void*)+0x11>
c0020cd6:	b8 04 00 00 00       	mov    eax,0x4
c0020cdb:	eb 36                	jmp    c0020d13 <FAT::close(void*)+0x47>
c0020cdd:	83 ec 0c             	sub    esp,0xc
c0020ce0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020ce4:	e8 fa 4d fe ff       	call   c0005ae3 <f_close>
c0020ce9:	83 c4 10             	add    esp,0x10
c0020cec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020cf0:	83 ec 0c             	sub    esp,0xc
c0020cf3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020cf7:	e8 54 eb fe ff       	call   c000f850 <free>
c0020cfc:	83 c4 10             	add    esp,0x10
c0020cff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d03:	85 c0                	test   eax,eax
c0020d05:	75 07                	jne    c0020d0e <FAT::close(void*)+0x42>
c0020d07:	b8 00 00 00 00       	mov    eax,0x0
c0020d0c:	eb 05                	jmp    c0020d13 <FAT::close(void*)+0x47>
c0020d0e:	b8 01 00 00 00       	mov    eax,0x1
c0020d13:	83 c4 1c             	add    esp,0x1c
c0020d16:	c3                   	ret    
c0020d17:	90                   	nop

c0020d18 <FAT::closeDir(void*)>:
c0020d18:	83 ec 1c             	sub    esp,0x1c
c0020d1b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020d20:	75 07                	jne    c0020d29 <FAT::closeDir(void*)+0x11>
c0020d22:	b8 04 00 00 00       	mov    eax,0x4
c0020d27:	eb 36                	jmp    c0020d5f <FAT::closeDir(void*)+0x47>
c0020d29:	83 ec 0c             	sub    esp,0xc
c0020d2c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d30:	e8 96 53 fe ff       	call   c00060cb <f_closedir>
c0020d35:	83 c4 10             	add    esp,0x10
c0020d38:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d3c:	83 ec 0c             	sub    esp,0xc
c0020d3f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d43:	e8 08 eb fe ff       	call   c000f850 <free>
c0020d48:	83 c4 10             	add    esp,0x10
c0020d4b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d4f:	85 c0                	test   eax,eax
c0020d51:	75 07                	jne    c0020d5a <FAT::closeDir(void*)+0x42>
c0020d53:	b8 00 00 00 00       	mov    eax,0x0
c0020d58:	eb 05                	jmp    c0020d5f <FAT::closeDir(void*)+0x47>
c0020d5a:	b8 01 00 00 00       	mov    eax,0x1
c0020d5f:	83 c4 1c             	add    esp,0x1c
c0020d62:	c3                   	ret    
c0020d63:	90                   	nop

c0020d64 <FAT::seek(void*, unsigned long long)>:
c0020d64:	83 ec 2c             	sub    esp,0x2c
c0020d67:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020d6b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020d6f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020d73:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d77:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020d7c:	75 07                	jne    c0020d85 <FAT::seek(void*, unsigned long long)+0x21>
c0020d7e:	b8 04 00 00 00       	mov    eax,0x4
c0020d83:	eb 2f                	jmp    c0020db4 <FAT::seek(void*, unsigned long long)+0x50>
c0020d85:	83 ec 04             	sub    esp,0x4
c0020d88:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020d8c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020d90:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020d94:	e8 79 4d fe ff       	call   c0005b12 <f_lseek>
c0020d99:	83 c4 10             	add    esp,0x10
c0020d9c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020da0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020da4:	85 c0                	test   eax,eax
c0020da6:	75 07                	jne    c0020daf <FAT::seek(void*, unsigned long long)+0x4b>
c0020da8:	b8 00 00 00 00       	mov    eax,0x0
c0020dad:	eb 05                	jmp    c0020db4 <FAT::seek(void*, unsigned long long)+0x50>
c0020daf:	b8 01 00 00 00       	mov    eax,0x1
c0020db4:	83 c4 2c             	add    esp,0x2c
c0020db7:	c3                   	ret    

c0020db8 <fatWrapperReadDisk>:
c0020db8:	83 ec 1c             	sub    esp,0x1c
c0020dbb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020dbf:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020dc3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020dc7:	89 04 24             	mov    DWORD PTR [esp],eax
c0020dca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020dce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020dd2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020dd7:	8b 04 85 20 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd15e0]
c0020dde:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020de2:	83 ec 0c             	sub    esp,0xc
c0020de5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020de9:	52                   	push   edx
c0020dea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020dee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020df2:	50                   	push   eax
c0020df3:	e8 72 59 ff ff       	call   c001676a <LogicalDisk::read(unsigned long long, int, void*)>
c0020df8:	83 c4 20             	add    esp,0x20
c0020dfb:	83 c4 1c             	add    esp,0x1c
c0020dfe:	c3                   	ret    

c0020dff <fatWrapperWriteDisk>:
c0020dff:	83 ec 1c             	sub    esp,0x1c
c0020e02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020e06:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020e0a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020e0e:	89 04 24             	mov    DWORD PTR [esp],eax
c0020e11:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020e15:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020e19:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e1e:	8b 04 85 20 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd15e0]
c0020e25:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020e29:	83 ec 0c             	sub    esp,0xc
c0020e2c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020e30:	52                   	push   edx
c0020e31:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020e35:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020e39:	50                   	push   eax
c0020e3a:	e8 97 59 ff ff       	call   c00167d6 <LogicalDisk::write(unsigned long long, int, void*)>
c0020e3f:	83 c4 20             	add    esp,0x20
c0020e42:	83 c4 1c             	add    esp,0x1c
c0020e45:	c3                   	ret    

c0020e46 <fatWrapperIoctl>:
c0020e46:	53                   	push   ebx
c0020e47:	83 ec 28             	sub    esp,0x28
c0020e4a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020e4e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0020e52:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020e56:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020e5a:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0020e5f:	75 31                	jne    c0020e92 <fatWrapperIoctl+0x4c>
c0020e61:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020e65:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020e69:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e6e:	8b 04 85 20 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd15e0]
c0020e75:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020e7b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020e81:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020e85:	66 89 02             	mov    WORD PTR [edx],ax
c0020e88:	b8 00 00 00 00       	mov    eax,0x0
c0020e8d:	e9 b2 00 00 00       	jmp    c0020f44 <fatWrapperIoctl+0xfe>
c0020e92:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0020e97:	75 6a                	jne    c0020f03 <fatWrapperIoctl+0xbd>
c0020e99:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020e9d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020ea1:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020ea6:	8b 04 85 20 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd15e0]
c0020ead:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020eb3:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0020eb9:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0020ebf:	89 c8                	mov    eax,ecx
c0020ec1:	89 da                	mov    edx,ebx
c0020ec3:	0f a4 c2 0a          	shld   edx,eax,0xa
c0020ec7:	c1 e0 0a             	shl    eax,0xa
c0020eca:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020ecf:	8b 0c 8d 20 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd15e0]
c0020ed6:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0020edc:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0020ee2:	89 cb                	mov    ebx,ecx
c0020ee4:	c1 fb 1f             	sar    ebx,0x1f
c0020ee7:	53                   	push   ebx
c0020ee8:	51                   	push   ecx
c0020ee9:	52                   	push   edx
c0020eea:	50                   	push   eax
c0020eeb:	e8 bc 5a 00 00       	call   c00269ac <__udivdi3>
c0020ef0:	83 c4 10             	add    esp,0x10
c0020ef3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020ef7:	89 01                	mov    DWORD PTR [ecx],eax
c0020ef9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020efc:	b8 00 00 00 00       	mov    eax,0x0
c0020f01:	eb 41                	jmp    c0020f44 <fatWrapperIoctl+0xfe>
c0020f03:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020f08:	75 07                	jne    c0020f11 <fatWrapperIoctl+0xcb>
c0020f0a:	b8 00 00 00 00       	mov    eax,0x0
c0020f0f:	eb 33                	jmp    c0020f44 <fatWrapperIoctl+0xfe>
c0020f11:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0020f16:	75 19                	jne    c0020f31 <fatWrapperIoctl+0xeb>
c0020f18:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020f1c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020f20:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020f24:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0020f2a:	b8 00 00 00 00       	mov    eax,0x0
c0020f2f:	eb 13                	jmp    c0020f44 <fatWrapperIoctl+0xfe>
c0020f31:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0020f36:	75 07                	jne    c0020f3f <fatWrapperIoctl+0xf9>
c0020f38:	b8 00 00 00 00       	mov    eax,0x0
c0020f3d:	eb 05                	jmp    c0020f44 <fatWrapperIoctl+0xfe>
c0020f3f:	b8 04 00 00 00       	mov    eax,0x4
c0020f44:	83 c4 28             	add    esp,0x28
c0020f47:	5b                   	pop    ebx
c0020f48:	c3                   	ret    
c0020f49:	90                   	nop

c0020f4a <FAT::FAT()>:
c0020f4a:	83 ec 1c             	sub    esp,0x1c
c0020f4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020f51:	83 ec 0c             	sub    esp,0xc
c0020f54:	50                   	push   eax
c0020f55:	e8 f4 22 ff ff       	call   c001324e <Filesystem::Filesystem()>
c0020f5a:	83 c4 10             	add    esp,0x10
c0020f5d:	ba 78 c8 02 c0       	mov    edx,0xc002c878
c0020f62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020f66:	89 10                	mov    DWORD PTR [eax],edx
c0020f68:	c7 05 40 1a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031a40,0x0
c0020f72:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020f7a:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0020f7f:	7f 15                	jg     c0020f96 <FAT::FAT()+0x4c>
c0020f81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020f85:	c7 04 85 60 1a 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffce5a0],0xffffffff
c0020f90:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0020f94:	eb e4                	jmp    c0020f7a <FAT::FAT()+0x30>
c0020f96:	90                   	nop
c0020f97:	83 c4 1c             	add    esp,0x1c
c0020f9a:	c3                   	ret    
c0020f9b:	90                   	nop

c0020f9c <FAT::fixFilepath(char*)>:
c0020f9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020fa0:	8a 00                	mov    al,BYTE PTR [eax]
c0020fa2:	3c 40                	cmp    al,0x40
c0020fa4:	7e 2c                	jle    c0020fd2 <FAT::fixFilepath(char*)+0x36>
c0020fa6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020faa:	8a 00                	mov    al,BYTE PTR [eax]
c0020fac:	83 e8 41             	sub    eax,0x41
c0020faf:	88 c2                	mov    dl,al
c0020fb1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020fb5:	88 10                	mov    BYTE PTR [eax],dl
c0020fb7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020fbb:	8a 00                	mov    al,BYTE PTR [eax]
c0020fbd:	0f be c0             	movsx  eax,al
c0020fc0:	8b 04 85 60 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce5a0]
c0020fc7:	83 c0 30             	add    eax,0x30
c0020fca:	88 c2                	mov    dl,al
c0020fcc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020fd0:	88 10                	mov    BYTE PTR [eax],dl
c0020fd2:	90                   	nop
c0020fd3:	c3                   	ret    

c0020fd4 <FAT::open(char const*, void**, FileOpenMode)>:
c0020fd4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020fda:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020fe2:	74 0a                	je     c0020fee <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0020fe4:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020fec:	75 0a                	jne    c0020ff8 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0020fee:	b8 04 00 00 00       	mov    eax,0x4
c0020ff3:	e9 fd 00 00 00       	jmp    c00210f5 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020ff8:	83 ec 08             	sub    esp,0x8
c0020ffb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021002:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021006:	50                   	push   eax
c0021007:	e8 28 f8 fd ff       	call   c0000834 <strcpy>
c002100c:	83 c4 10             	add    esp,0x10
c002100f:	83 ec 08             	sub    esp,0x8
c0021012:	8d 44 24 10          	lea    eax,[esp+0x10]
c0021016:	50                   	push   eax
c0021017:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002101e:	e8 79 ff ff ff       	call   c0020f9c <FAT::fixFilepath(char*)>
c0021023:	83 c4 10             	add    esp,0x10
c0021026:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c002102e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021035:	83 e0 01             	and    eax,0x1
c0021038:	74 08                	je     c0021042 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c002103a:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0021042:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021049:	83 e0 04             	and    eax,0x4
c002104c:	74 10                	je     c002105e <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c002104e:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0021056:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c002105e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021065:	83 e0 02             	and    eax,0x2
c0021068:	74 08                	je     c0021072 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c002106a:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0021072:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021079:	83 e0 08             	and    eax,0x8
c002107c:	74 08                	je     c0021086 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c002107e:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0021086:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002108d:	83 e0 10             	and    eax,0x10
c0021090:	74 08                	je     c002109a <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0021092:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c002109a:	83 ec 0c             	sub    esp,0xc
c002109d:	68 50 02 00 00       	push   0x250
c00210a2:	e8 99 e7 fe ff       	call   c000f840 <malloc>
c00210a7:	83 c4 10             	add    esp,0x10
c00210aa:	89 c2                	mov    edx,eax
c00210ac:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00210b3:	89 10                	mov    DWORD PTR [eax],edx
c00210b5:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c00210bd:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00210c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00210c6:	83 ec 04             	sub    esp,0x4
c00210c9:	52                   	push   edx
c00210ca:	8d 54 24 10          	lea    edx,[esp+0x10]
c00210ce:	52                   	push   edx
c00210cf:	50                   	push   eax
c00210d0:	e8 bc 3e fe ff       	call   c0004f91 <f_open>
c00210d5:	83 c4 10             	add    esp,0x10
c00210d8:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00210df:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00210e7:	74 07                	je     c00210f0 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c00210e9:	b8 01 00 00 00       	mov    eax,0x1
c00210ee:	eb 05                	jmp    c00210f5 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00210f0:	b8 00 00 00 00       	mov    eax,0x0
c00210f5:	81 c4 1c 01 00 00    	add    esp,0x11c
c00210fb:	c3                   	ret    

c00210fc <FAT::openDir(char const*, void**)>:
c00210fc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021102:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002110a:	74 0a                	je     c0021116 <FAT::openDir(char const*, void**)+0x1a>
c002110c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0021114:	75 07                	jne    c002111d <FAT::openDir(char const*, void**)+0x21>
c0021116:	b8 04 00 00 00       	mov    eax,0x4
c002111b:	eb 7d                	jmp    c002119a <FAT::openDir(char const*, void**)+0x9e>
c002111d:	83 ec 08             	sub    esp,0x8
c0021120:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021127:	8d 44 24 18          	lea    eax,[esp+0x18]
c002112b:	50                   	push   eax
c002112c:	e8 03 f7 fd ff       	call   c0000834 <strcpy>
c0021131:	83 c4 10             	add    esp,0x10
c0021134:	83 ec 08             	sub    esp,0x8
c0021137:	8d 44 24 14          	lea    eax,[esp+0x14]
c002113b:	50                   	push   eax
c002113c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021143:	e8 54 fe ff ff       	call   c0020f9c <FAT::fixFilepath(char*)>
c0021148:	83 c4 10             	add    esp,0x10
c002114b:	83 ec 0c             	sub    esp,0xc
c002114e:	6a 4c                	push   0x4c
c0021150:	e8 eb e6 fe ff       	call   c000f840 <malloc>
c0021155:	83 c4 10             	add    esp,0x10
c0021158:	89 c2                	mov    edx,eax
c002115a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021161:	89 10                	mov    DWORD PTR [eax],edx
c0021163:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002116a:	8b 00                	mov    eax,DWORD PTR [eax]
c002116c:	83 ec 08             	sub    esp,0x8
c002116f:	8d 54 24 14          	lea    edx,[esp+0x14]
c0021173:	52                   	push   edx
c0021174:	50                   	push   eax
c0021175:	e8 4f 4e fe ff       	call   c0005fc9 <f_opendir>
c002117a:	83 c4 10             	add    esp,0x10
c002117d:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021184:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c002118c:	74 07                	je     c0021195 <FAT::openDir(char const*, void**)+0x99>
c002118e:	b8 01 00 00 00       	mov    eax,0x1
c0021193:	eb 05                	jmp    c002119a <FAT::openDir(char const*, void**)+0x9e>
c0021195:	b8 00 00 00 00       	mov    eax,0x0
c002119a:	81 c4 1c 01 00 00    	add    esp,0x11c
c00211a0:	c3                   	ret    
c00211a1:	90                   	nop

c00211a2 <FAT::stat(char const*, unsigned long long*, bool*)>:
c00211a2:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00211a8:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00211b0:	75 0a                	jne    c00211bc <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c00211b2:	b8 04 00 00 00       	mov    eax,0x4
c00211b7:	e9 c9 00 00 00       	jmp    c0021285 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00211bc:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00211c4:	75 0a                	jne    c00211d0 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c00211c6:	b8 04 00 00 00       	mov    eax,0x4
c00211cb:	e9 b5 00 00 00       	jmp    c0021285 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00211d0:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00211d8:	75 0a                	jne    c00211e4 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c00211da:	b8 04 00 00 00       	mov    eax,0x4
c00211df:	e9 a1 00 00 00       	jmp    c0021285 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00211e4:	83 ec 08             	sub    esp,0x8
c00211e7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00211ee:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00211f5:	50                   	push   eax
c00211f6:	e8 39 f6 fd ff       	call   c0000834 <strcpy>
c00211fb:	83 c4 10             	add    esp,0x10
c00211fe:	83 ec 08             	sub    esp,0x8
c0021201:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0021208:	50                   	push   eax
c0021209:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021210:	e8 87 fd ff ff       	call   c0020f9c <FAT::fixFilepath(char*)>
c0021215:	83 c4 10             	add    esp,0x10
c0021218:	83 ec 08             	sub    esp,0x8
c002121b:	8d 44 24 08          	lea    eax,[esp+0x8]
c002121f:	50                   	push   eax
c0021220:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021227:	50                   	push   eax
c0021228:	e8 5b 4f fe ff       	call   c0006188 <f_stat>
c002122d:	83 c4 10             	add    esp,0x10
c0021230:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021237:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c002123e:	85 c0                	test   eax,eax
c0021240:	74 07                	je     c0021249 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0021242:	83 f8 04             	cmp    eax,0x4
c0021245:	74 32                	je     c0021279 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0021247:	eb 37                	jmp    c0021280 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0021249:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002124d:	0f b6 c0             	movzx  eax,al
c0021250:	83 e0 10             	and    eax,0x10
c0021253:	0f 95 c2             	setne  dl
c0021256:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c002125d:	88 10                	mov    BYTE PTR [eax],dl
c002125f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021262:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021266:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c002126d:	89 01                	mov    DWORD PTR [ecx],eax
c002126f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0021272:	b8 00 00 00 00       	mov    eax,0x0
c0021277:	eb 0c                	jmp    c0021285 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021279:	b8 02 00 00 00       	mov    eax,0x2
c002127e:	eb 05                	jmp    c0021285 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021280:	b8 01 00 00 00       	mov    eax,0x1
c0021285:	81 c4 2c 02 00 00    	add    esp,0x22c
c002128b:	c3                   	ret    

c002128c <FAT::unlink(char const*)>:
c002128c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021292:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002129a:	75 07                	jne    c00212a3 <FAT::unlink(char const*)+0x17>
c002129c:	b8 04 00 00 00       	mov    eax,0x4
c00212a1:	eb 5c                	jmp    c00212ff <FAT::unlink(char const*)+0x73>
c00212a3:	83 ec 08             	sub    esp,0x8
c00212a6:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00212ad:	8d 44 24 18          	lea    eax,[esp+0x18]
c00212b1:	50                   	push   eax
c00212b2:	e8 7d f5 fd ff       	call   c0000834 <strcpy>
c00212b7:	83 c4 10             	add    esp,0x10
c00212ba:	83 ec 08             	sub    esp,0x8
c00212bd:	8d 44 24 14          	lea    eax,[esp+0x14]
c00212c1:	50                   	push   eax
c00212c2:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00212c9:	e8 ce fc ff ff       	call   c0020f9c <FAT::fixFilepath(char*)>
c00212ce:	83 c4 10             	add    esp,0x10
c00212d1:	83 ec 0c             	sub    esp,0xc
c00212d4:	8d 44 24 18          	lea    eax,[esp+0x18]
c00212d8:	50                   	push   eax
c00212d9:	e8 fc 51 fe ff       	call   c00064da <f_unlink>
c00212de:	83 c4 10             	add    esp,0x10
c00212e1:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00212e8:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00212ef:	85 c0                	test   eax,eax
c00212f1:	75 07                	jne    c00212fa <FAT::unlink(char const*)+0x6e>
c00212f3:	b8 00 00 00 00       	mov    eax,0x0
c00212f8:	eb 05                	jmp    c00212ff <FAT::unlink(char const*)+0x73>
c00212fa:	b8 01 00 00 00       	mov    eax,0x1
c00212ff:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021305:	c3                   	ret    

c0021306 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0021306:	81 ec 2c 01 00 00    	sub    esp,0x12c
c002130c:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0021313:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c002131a:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c002131e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0021322:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c002132a:	75 0a                	jne    c0021336 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c002132c:	b8 04 00 00 00       	mov    eax,0x4
c0021331:	e9 1c 01 00 00       	jmp    c0021452 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021336:	83 ec 08             	sub    esp,0x8
c0021339:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021340:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021344:	50                   	push   eax
c0021345:	e8 ea f4 fd ff       	call   c0000834 <strcpy>
c002134a:	83 c4 10             	add    esp,0x10
c002134d:	83 ec 08             	sub    esp,0x8
c0021350:	8d 44 24 20          	lea    eax,[esp+0x20]
c0021354:	50                   	push   eax
c0021355:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c002135c:	e8 3b fc ff ff       	call   c0020f9c <FAT::fixFilepath(char*)>
c0021361:	83 c4 10             	add    esp,0x10
c0021364:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c002136c:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0021374:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021379:	83 e0 01             	and    eax,0x1
c002137c:	74 08                	je     c0021386 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c002137e:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0021386:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002138b:	83 e0 02             	and    eax,0x2
c002138e:	74 08                	je     c0021398 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0021390:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0021398:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002139d:	83 e0 04             	and    eax,0x4
c00213a0:	74 08                	je     c00213aa <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c00213a2:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c00213aa:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00213af:	83 e0 08             	and    eax,0x8
c00213b2:	74 08                	je     c00213bc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c00213b4:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c00213bc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00213c1:	83 e0 01             	and    eax,0x1
c00213c4:	74 08                	je     c00213ce <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c00213c6:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c00213ce:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00213d3:	83 e0 02             	and    eax,0x2
c00213d6:	74 08                	je     c00213e0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c00213d8:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c00213e0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00213e5:	83 e0 04             	and    eax,0x4
c00213e8:	74 08                	je     c00213f2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c00213ea:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c00213f2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00213f7:	83 e0 08             	and    eax,0x8
c00213fa:	74 08                	je     c0021404 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c00213fc:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0021404:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c002140b:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0021412:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c002141a:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0021422:	83 ec 04             	sub    esp,0x4
c0021425:	52                   	push   edx
c0021426:	50                   	push   eax
c0021427:	8d 44 24 24          	lea    eax,[esp+0x24]
c002142b:	50                   	push   eax
c002142c:	e8 4b 57 fe ff       	call   c0006b7c <f_chmod>
c0021431:	83 c4 10             	add    esp,0x10
c0021434:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c002143b:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0021442:	85 c0                	test   eax,eax
c0021444:	75 07                	jne    c002144d <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0021446:	b8 00 00 00 00       	mov    eax,0x0
c002144b:	eb 05                	jmp    c0021452 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c002144d:	b8 01 00 00 00       	mov    eax,0x1
c0021452:	81 c4 2c 01 00 00    	add    esp,0x12c
c0021458:	c3                   	ret    
c0021459:	90                   	nop

c002145a <FAT::rename(char const*, char const*)>:
c002145a:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0021460:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0021468:	74 0a                	je     c0021474 <FAT::rename(char const*, char const*)+0x1a>
c002146a:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0021472:	75 0a                	jne    c002147e <FAT::rename(char const*, char const*)+0x24>
c0021474:	b8 04 00 00 00       	mov    eax,0x4
c0021479:	e9 98 00 00 00       	jmp    c0021516 <FAT::rename(char const*, char const*)+0xbc>
c002147e:	83 ec 08             	sub    esp,0x8
c0021481:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021488:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c002148f:	50                   	push   eax
c0021490:	e8 9f f3 fd ff       	call   c0000834 <strcpy>
c0021495:	83 c4 10             	add    esp,0x10
c0021498:	83 ec 08             	sub    esp,0x8
c002149b:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00214a2:	50                   	push   eax
c00214a3:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00214aa:	e8 ed fa ff ff       	call   c0020f9c <FAT::fixFilepath(char*)>
c00214af:	83 c4 10             	add    esp,0x10
c00214b2:	83 ec 08             	sub    esp,0x8
c00214b5:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c00214bc:	8d 44 24 18          	lea    eax,[esp+0x18]
c00214c0:	50                   	push   eax
c00214c1:	e8 6e f3 fd ff       	call   c0000834 <strcpy>
c00214c6:	83 c4 10             	add    esp,0x10
c00214c9:	83 ec 08             	sub    esp,0x8
c00214cc:	8d 44 24 14          	lea    eax,[esp+0x14]
c00214d0:	50                   	push   eax
c00214d1:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00214d8:	e8 bf fa ff ff       	call   c0020f9c <FAT::fixFilepath(char*)>
c00214dd:	83 c4 10             	add    esp,0x10
c00214e0:	83 ec 08             	sub    esp,0x8
c00214e3:	8d 44 24 14          	lea    eax,[esp+0x14]
c00214e7:	50                   	push   eax
c00214e8:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00214ef:	50                   	push   eax
c00214f0:	e8 94 53 fe ff       	call   c0006889 <f_rename>
c00214f5:	83 c4 10             	add    esp,0x10
c00214f8:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c00214ff:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0021506:	85 c0                	test   eax,eax
c0021508:	75 07                	jne    c0021511 <FAT::rename(char const*, char const*)+0xb7>
c002150a:	b8 00 00 00 00       	mov    eax,0x0
c002150f:	eb 05                	jmp    c0021516 <FAT::rename(char const*, char const*)+0xbc>
c0021511:	b8 01 00 00 00       	mov    eax,0x1
c0021516:	81 c4 1c 02 00 00    	add    esp,0x21c
c002151c:	c3                   	ret    
c002151d:	90                   	nop

c002151e <FAT::mkdir(char const*)>:
c002151e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021524:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002152c:	75 07                	jne    c0021535 <FAT::mkdir(char const*)+0x17>
c002152e:	b8 04 00 00 00       	mov    eax,0x4
c0021533:	eb 5c                	jmp    c0021591 <FAT::mkdir(char const*)+0x73>
c0021535:	83 ec 08             	sub    esp,0x8
c0021538:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002153f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021543:	50                   	push   eax
c0021544:	e8 eb f2 fd ff       	call   c0000834 <strcpy>
c0021549:	83 c4 10             	add    esp,0x10
c002154c:	83 ec 08             	sub    esp,0x8
c002154f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021553:	50                   	push   eax
c0021554:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002155b:	e8 3c fa ff ff       	call   c0020f9c <FAT::fixFilepath(char*)>
c0021560:	83 c4 10             	add    esp,0x10
c0021563:	83 ec 0c             	sub    esp,0xc
c0021566:	8d 44 24 18          	lea    eax,[esp+0x18]
c002156a:	50                   	push   eax
c002156b:	e8 ed 50 fe ff       	call   c000665d <f_mkdir>
c0021570:	83 c4 10             	add    esp,0x10
c0021573:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c002157a:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021581:	85 c0                	test   eax,eax
c0021583:	75 07                	jne    c002158c <FAT::mkdir(char const*)+0x6e>
c0021585:	b8 00 00 00 00       	mov    eax,0x0
c002158a:	eb 05                	jmp    c0021591 <FAT::mkdir(char const*)+0x73>
c002158c:	b8 01 00 00 00       	mov    eax,0x1
c0021591:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021597:	c3                   	ret    

c0021598 <FAT::exists(char const*)>:
c0021598:	81 ec 2c 02 00 00    	sub    esp,0x22c
c002159e:	83 ec 08             	sub    esp,0x8
c00215a1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00215a8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00215ac:	50                   	push   eax
c00215ad:	e8 82 f2 fd ff       	call   c0000834 <strcpy>
c00215b2:	83 c4 10             	add    esp,0x10
c00215b5:	83 ec 08             	sub    esp,0x8
c00215b8:	8d 44 24 08          	lea    eax,[esp+0x8]
c00215bc:	50                   	push   eax
c00215bd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00215c4:	e8 d3 f9 ff ff       	call   c0020f9c <FAT::fixFilepath(char*)>
c00215c9:	83 c4 10             	add    esp,0x10
c00215cc:	83 ec 08             	sub    esp,0x8
c00215cf:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c00215d6:	50                   	push   eax
c00215d7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00215db:	50                   	push   eax
c00215dc:	e8 a7 4b fe ff       	call   c0006188 <f_stat>
c00215e1:	83 c4 10             	add    esp,0x10
c00215e4:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00215eb:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00215f2:	85 c0                	test   eax,eax
c00215f4:	75 04                	jne    c00215fa <FAT::exists(char const*)+0x62>
c00215f6:	b0 01                	mov    al,0x1
c00215f8:	eb 02                	jmp    c00215fc <FAT::exists(char const*)+0x64>
c00215fa:	b0 00                	mov    al,0x0
c00215fc:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021602:	c3                   	ret    
c0021603:	90                   	nop

c0021604 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0021604:	b8 08 00 00 00       	mov    eax,0x8
c0021609:	c3                   	ret    

c002160a <ISO9660::seek(void*, unsigned long long)>:
c002160a:	53                   	push   ebx
c002160b:	b8 04 00 00 00       	mov    eax,0x4
c0021610:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021614:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021618:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002161c:	85 d2                	test   edx,edx
c002161e:	74 17                	je     c0021637 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021620:	89 c8                	mov    eax,ecx
c0021622:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0021625:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0021628:	b8 01 00 00 00       	mov    eax,0x1
c002162d:	73 08                	jae    c0021637 <ISO9660::seek(void*, unsigned long long)+0x2d>
c002162f:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0021632:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0021635:	31 c0                	xor    eax,eax
c0021637:	5b                   	pop    ebx
c0021638:	c3                   	ret    
c0021639:	90                   	nop

c002163a <ISO9660::tell(void*, unsigned long long*)>:
c002163a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002163e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021642:	85 d2                	test   edx,edx
c0021644:	74 12                	je     c0021658 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021646:	85 c0                	test   eax,eax
c0021648:	74 0e                	je     c0021658 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c002164a:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c002164d:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0021650:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021653:	89 10                	mov    DWORD PTR [eax],edx
c0021655:	31 c0                	xor    eax,eax
c0021657:	c3                   	ret    
c0021658:	b8 04 00 00 00       	mov    eax,0x4
c002165d:	c3                   	ret    

c002165e <ISO9660::getName()>:
c002165e:	b8 d4 c8 02 c0       	mov    eax,0xc002c8d4
c0021663:	c3                   	ret    

c0021664 <ISO9660::stat(void*, unsigned long long*)>:
c0021664:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021668:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002166c:	85 d2                	test   edx,edx
c002166e:	74 12                	je     c0021682 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021670:	85 c0                	test   eax,eax
c0021672:	74 0e                	je     c0021682 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021674:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0021677:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c002167a:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c002167d:	89 10                	mov    DWORD PTR [eax],edx
c002167f:	31 c0                	xor    eax,eax
c0021681:	c3                   	ret    
c0021682:	b8 04 00 00 00       	mov    eax,0x4
c0021687:	c3                   	ret    

c0021688 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0021688:	b8 01 00 00 00       	mov    eax,0x1
c002168d:	c3                   	ret    

c002168e <ISO9660::unlink(char const*)>:
c002168e:	b8 01 00 00 00       	mov    eax,0x1
c0021693:	c3                   	ret    

c0021694 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0021694:	b8 01 00 00 00       	mov    eax,0x1
c0021699:	c3                   	ret    

c002169a <ISO9660::rename(char const*, char const*)>:
c002169a:	b8 01 00 00 00       	mov    eax,0x1
c002169f:	c3                   	ret    

c00216a0 <ISO9660::mkdir(char const*)>:
c00216a0:	b8 01 00 00 00       	mov    eax,0x1
c00216a5:	c3                   	ret    

c00216a6 <ISO9660::close(void*)>:
c00216a6:	83 ec 0c             	sub    esp,0xc
c00216a9:	b8 04 00 00 00       	mov    eax,0x4
c00216ae:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00216b2:	85 d2                	test   edx,edx
c00216b4:	74 0e                	je     c00216c4 <ISO9660::close(void*)+0x1e>
c00216b6:	83 ec 0c             	sub    esp,0xc
c00216b9:	52                   	push   edx
c00216ba:	e8 91 e1 fe ff       	call   c000f850 <free>
c00216bf:	83 c4 10             	add    esp,0x10
c00216c2:	31 c0                	xor    eax,eax
c00216c4:	83 c4 0c             	add    esp,0xc
c00216c7:	c3                   	ret    

c00216c8 <ISO9660::closeDir(void*)>:
c00216c8:	83 ec 0c             	sub    esp,0xc
c00216cb:	b8 04 00 00 00       	mov    eax,0x4
c00216d0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00216d4:	85 d2                	test   edx,edx
c00216d6:	74 0e                	je     c00216e6 <ISO9660::closeDir(void*)+0x1e>
c00216d8:	83 ec 0c             	sub    esp,0xc
c00216db:	52                   	push   edx
c00216dc:	e8 6f e1 fe ff       	call   c000f850 <free>
c00216e1:	83 c4 10             	add    esp,0x10
c00216e4:	31 c0                	xor    eax,eax
c00216e6:	83 c4 0c             	add    esp,0xc
c00216e9:	c3                   	ret    

c00216ea <ISO9660::~ISO9660()>:
c00216ea:	83 ec 0c             	sub    esp,0xc
c00216ed:	ba 38 c9 02 c0       	mov    edx,0xc002c938
c00216f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216f6:	89 10                	mov    DWORD PTR [eax],edx
c00216f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216fc:	83 ec 0c             	sub    esp,0xc
c00216ff:	50                   	push   eax
c0021700:	e8 6d 1b ff ff       	call   c0013272 <Filesystem::~Filesystem()>
c0021705:	83 c4 10             	add    esp,0x10
c0021708:	90                   	nop
c0021709:	83 c4 0c             	add    esp,0xc
c002170c:	c3                   	ret    
c002170d:	90                   	nop

c002170e <ISO9660::~ISO9660()>:
c002170e:	83 ec 0c             	sub    esp,0xc
c0021711:	83 ec 0c             	sub    esp,0xc
c0021714:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021718:	e8 cd ff ff ff       	call   c00216ea <ISO9660::~ISO9660()>
c002171d:	83 c4 10             	add    esp,0x10
c0021720:	83 ec 08             	sub    esp,0x8
c0021723:	6a 08                	push   0x8
c0021725:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021729:	e8 3c 17 ff ff       	call   c0012e6a <operator delete(void*, unsigned long)>
c002172e:	83 c4 10             	add    esp,0x10
c0021731:	83 c4 0c             	add    esp,0xc
c0021734:	c3                   	ret    

c0021735 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0021735:	55                   	push   ebp
c0021736:	31 c9                	xor    ecx,ecx
c0021738:	57                   	push   edi
c0021739:	56                   	push   esi
c002173a:	53                   	push   ebx
c002173b:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c002173f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0021743:	89 eb                	mov    ebx,ebp
c0021745:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0021749:	39 ce                	cmp    esi,ecx
c002174b:	7e 17                	jle    c0021764 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c002174d:	31 d2                	xor    edx,edx
c002174f:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0021753:	7d 13                	jge    c0021768 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0021755:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021759:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c002175c:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c002175f:	75 0d                	jne    c002176e <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0021761:	42                   	inc    edx
c0021762:	eb eb                	jmp    c002174f <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0021764:	31 c0                	xor    eax,eax
c0021766:	eb 0a                	jmp    c0021772 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021768:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c002176c:	eb 04                	jmp    c0021772 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c002176e:	41                   	inc    ecx
c002176f:	43                   	inc    ebx
c0021770:	eb d7                	jmp    c0021749 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0021772:	5b                   	pop    ebx
c0021773:	5e                   	pop    esi
c0021774:	5f                   	pop    edi
c0021775:	5d                   	pop    ebp
c0021776:	c3                   	ret    

c0021777 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0021777:	56                   	push   esi
c0021778:	53                   	push   ebx
c0021779:	52                   	push   edx
c002177a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002177e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0021782:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021786:	39 0d 40 1b 03 c0    	cmp    DWORD PTR ds:0xc0031b40,ecx
c002178c:	75 08                	jne    c0021796 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c002178e:	38 05 94 d9 02 c0    	cmp    BYTE PTR ds:0xc002d994,al
c0021794:	74 2b                	je     c00217c1 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c0021796:	83 ec 0c             	sub    esp,0xc
c0021799:	a2 94 d9 02 c0       	mov    ds:0xc002d994,al
c002179e:	68 60 1b 03 c0       	push   0xc0031b60
c00217a3:	0f be c0             	movsx  eax,al
c00217a6:	6a 01                	push   0x1
c00217a8:	89 0d 40 1b 03 c0    	mov    DWORD PTR ds:0xc0031b40,ecx
c00217ae:	31 db                	xor    ebx,ebx
c00217b0:	53                   	push   ebx
c00217b1:	51                   	push   ecx
c00217b2:	ff 34 85 1c e9 02 c0 	push   DWORD PTR [eax*4-0x3ffd16e4]
c00217b9:	e8 ac 4f ff ff       	call   c001676a <LogicalDisk::read(unsigned long long, int, void*)>
c00217be:	83 c4 20             	add    esp,0x20
c00217c1:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c00217c9:	c7 44 24 14 60 1b 03 c0 	mov    DWORD PTR [esp+0x14],0xc0031b60
c00217d1:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00217d5:	58                   	pop    eax
c00217d6:	5b                   	pop    ebx
c00217d7:	5e                   	pop    esi
c00217d8:	e9 67 ef fd ff       	jmp    c0000744 <memcpy>
c00217dd:	90                   	nop

c00217de <ISO9660::tryMount(LogicalDisk*, int)>:
c00217de:	81 ec 10 08 00 00    	sub    esp,0x810
c00217e4:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c00217eb:	83 c0 41             	add    eax,0x41
c00217ee:	0f be c0             	movsx  eax,al
c00217f1:	50                   	push   eax
c00217f2:	8d 44 24 08          	lea    eax,[esp+0x8]
c00217f6:	50                   	push   eax
c00217f7:	6a 10                	push   0x10
c00217f9:	e8 79 ff ff ff       	call   c0021777 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00217fe:	83 c4 10             	add    esp,0x10
c0021801:	31 c0                	xor    eax,eax
c0021803:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0021808:	75 1d                	jne    c0021827 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002180a:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c002180f:	75 16                	jne    c0021827 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021811:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0021816:	75 0f                	jne    c0021827 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021818:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c002181d:	75 08                	jne    c0021827 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002181f:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0021824:	0f 94 c0             	sete   al
c0021827:	81 c4 0c 08 00 00    	add    esp,0x80c
c002182d:	c3                   	ret    

c002182e <ISO9660::read(void*, unsigned long, void*, int*)>:
c002182e:	55                   	push   ebp
c002182f:	57                   	push   edi
c0021830:	56                   	push   esi
c0021831:	53                   	push   ebx
c0021832:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0021838:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c002183f:	85 ed                	test   ebp,ebp
c0021841:	0f 84 d6 01 00 00    	je     c0021a1d <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021847:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c002184f:	0f 84 c8 01 00 00    	je     c0021a1d <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021855:	b8 01 00 00 00       	mov    eax,0x1
c002185a:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c002185e:	0f 85 be 01 00 00    	jne    c0021a22 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021864:	31 d2                	xor    edx,edx
c0021866:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c002186d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021870:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0021873:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021877:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
c002187a:	89 04 24             	mov    DWORD PTR [esp],eax
c002187d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021881:	01 f0                	add    eax,esi
c0021883:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0021886:	11 fa                	adc    edx,edi
c0021888:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c002188c:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0021890:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0021894:	19 d1                	sbb    ecx,edx
c0021896:	72 0a                	jb     c00218a2 <ISO9660::read(void*, unsigned long, void*, int*)+0x74>
c0021898:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002189c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00218a0:	eb 13                	jmp    c00218b5 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c00218a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00218a6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00218aa:	29 f0                	sub    eax,esi
c00218ac:	19 fa                	sbb    edx,edi
c00218ae:	89 04 24             	mov    DWORD PTR [esp],eax
c00218b1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00218b5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00218b8:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c00218bb:	0f a4 c2 0b          	shld   edx,eax,0xb
c00218bf:	51                   	push   ecx
c00218c0:	c1 e0 0b             	shl    eax,0xb
c00218c3:	01 c6                	add    esi,eax
c00218c5:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00218c9:	11 d7                	adc    edi,edx
c00218cb:	50                   	push   eax
c00218cc:	89 fa                	mov    edx,edi
c00218ce:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c00218d2:	89 f0                	mov    eax,esi
c00218d4:	53                   	push   ebx
c00218d5:	0f ac d0 0b          	shrd   eax,edx,0xb
c00218d9:	50                   	push   eax
c00218da:	e8 98 fe ff ff       	call   c0021777 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00218df:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00218e3:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00218e6:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00218ea:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00218f0:	83 c4 10             	add    esp,0x10
c00218f3:	b8 00 08 00 00       	mov    eax,0x800
c00218f8:	29 d0                	sub    eax,edx
c00218fa:	39 c1                	cmp    ecx,eax
c00218fc:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0021900:	83 d9 00             	sbb    ecx,0x0
c0021903:	7d 1c                	jge    c0021921 <ISO9660::read(void*, unsigned long, void*, int*)+0xf3>
c0021905:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c002190a:	75 12                	jne    c002191e <ISO9660::read(void*, unsigned long, void*, int*)+0xf0>
c002190c:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021913:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021919:	e9 fb 00 00 00       	jmp    c0021a19 <ISO9660::read(void*, unsigned long, void*, int*)+0x1eb>
c002191e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021921:	8d 0c 13             	lea    ecx,[ebx+edx*1]
c0021924:	31 d2                	xor    edx,edx
c0021926:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c002192a:	39 c2                	cmp    edx,eax
c002192c:	7d 14                	jge    c0021942 <ISO9660::read(void*, unsigned long, void*, int*)+0x114>
c002192e:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0021935:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021939:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c002193c:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c002193f:	42                   	inc    edx
c0021940:	eb e8                	jmp    c002192a <ISO9660::read(void*, unsigned long, void*, int*)+0xfc>
c0021942:	89 c3                	mov    ebx,eax
c0021944:	85 c0                	test   eax,eax
c0021946:	79 02                	jns    c002194a <ISO9660::read(void*, unsigned long, void*, int*)+0x11c>
c0021948:	31 db                	xor    ebx,ebx
c002194a:	99                   	cdq    
c002194b:	01 c3                	add    ebx,eax
c002194d:	03 9c 24 4c 08 00 00 	add    ebx,DWORD PTR [esp+0x84c]
c0021954:	01 c6                	add    esi,eax
c0021956:	11 d7                	adc    edi,edx
c0021958:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c002195c:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0021960:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0021963:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0021967:	29 c6                	sub    esi,eax
c0021969:	19 d7                	sbb    edi,edx
c002196b:	89 34 24             	mov    DWORD PTR [esp],esi
c002196e:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0021972:	b8 ff 07 00 00       	mov    eax,0x7ff
c0021977:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c002197a:	b8 00 00 00 00       	mov    eax,0x0
c002197f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021983:	7d 3e                	jge    c00219c3 <ISO9660::read(void*, unsigned long, void*, int*)+0x195>
c0021985:	52                   	push   edx
c0021986:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002198a:	50                   	push   eax
c002198b:	53                   	push   ebx
c002198c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021990:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021994:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021998:	50                   	push   eax
c0021999:	e8 d9 fd ff ff       	call   c0021777 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002199e:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c00219a6:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c00219ab:	81 c3 00 08 00 00    	add    ebx,0x800
c00219b1:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c00219b9:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c00219be:	83 c4 10             	add    esp,0x10
c00219c1:	eb af                	jmp    c0021972 <ISO9660::read(void*, unsigned long, void*, int*)+0x144>
c00219c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00219c7:	0b 04 24             	or     eax,DWORD PTR [esp]
c00219ca:	74 32                	je     c00219fe <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c00219cc:	50                   	push   eax
c00219cd:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00219d1:	50                   	push   eax
c00219d2:	8d 44 24 28          	lea    eax,[esp+0x28]
c00219d6:	50                   	push   eax
c00219d7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00219db:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00219df:	0f ac fe 0b          	shrd   esi,edi,0xb
c00219e3:	56                   	push   esi
c00219e4:	e8 8e fd ff ff       	call   c0021777 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00219e9:	83 c4 0c             	add    esp,0xc
c00219ec:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00219f0:	8d 44 24 28          	lea    eax,[esp+0x28]
c00219f4:	50                   	push   eax
c00219f5:	53                   	push   ebx
c00219f6:	e8 49 ed fd ff       	call   c0000744 <memcpy>
c00219fb:	83 c4 10             	add    esp,0x10
c00219fe:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021a05:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021a09:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021a0d:	89 38                	mov    DWORD PTR [eax],edi
c0021a0f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021a13:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021a16:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021a19:	31 c0                	xor    eax,eax
c0021a1b:	eb 05                	jmp    c0021a22 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021a1d:	b8 04 00 00 00       	mov    eax,0x4
c0021a22:	81 c4 2c 08 00 00    	add    esp,0x82c
c0021a28:	5b                   	pop    ebx
c0021a29:	5e                   	pop    esi
c0021a2a:	5f                   	pop    edi
c0021a2b:	5d                   	pop    ebp
c0021a2c:	c3                   	ret    
c0021a2d:	90                   	nop

c0021a2e <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0021a2e:	55                   	push   ebp
c0021a2f:	57                   	push   edi
c0021a30:	56                   	push   esi
c0021a31:	53                   	push   ebx
c0021a32:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0021a38:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c0021a3f:	85 f6                	test   esi,esi
c0021a41:	0f 84 64 02 00 00    	je     c0021cab <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021a47:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0021a4f:	0f 84 56 02 00 00    	je     c0021cab <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021a55:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0021a58:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c0021a5b:	75 0a                	jne    c0021a67 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0021a5d:	b8 07 00 00 00       	mov    eax,0x7
c0021a62:	e9 49 02 00 00       	jmp    c0021cb0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021a67:	50                   	push   eax
c0021a68:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021a6c:	50                   	push   eax
c0021a6d:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021a74:	53                   	push   ebx
c0021a75:	8b 06                	mov    eax,DWORD PTR [esi]
c0021a77:	c1 e0 0b             	shl    eax,0xb
c0021a7a:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0021a7d:	c1 e8 0b             	shr    eax,0xb
c0021a80:	50                   	push   eax
c0021a81:	e8 f1 fc ff ff       	call   c0021777 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021a86:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021a89:	83 c4 10             	add    esp,0x10
c0021a8c:	89 c1                	mov    ecx,eax
c0021a8e:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c0021a91:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0021a97:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0021a9a:	84 db                	test   bl,bl
c0021a9c:	0f 85 90 00 00 00    	jne    c0021b32 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c0021aa2:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0021aa8:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021aae:	29 c7                	sub    edi,eax
c0021ab0:	89 fb                	mov    ebx,edi
c0021ab2:	c1 fb 1f             	sar    ebx,0x1f
c0021ab5:	01 f8                	add    eax,edi
c0021ab7:	11 da                	adc    edx,ebx
c0021ab9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021abd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021ac1:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0021ac4:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c0021ac7:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021aca:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021acd:	89 04 24             	mov    DWORD PTR [esp],eax
c0021ad0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021ad4:	89 d8                	mov    eax,ebx
c0021ad6:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0021ad9:	ba 00 00 00 00       	mov    edx,0x0
c0021ade:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021ae2:	b8 00 00 00 00       	mov    eax,0x0
c0021ae7:	73 0b                	jae    c0021af4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0021ae9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021aec:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021af0:	29 f8                	sub    eax,edi
c0021af2:	19 da                	sbb    edx,ebx
c0021af4:	89 d3                	mov    ebx,edx
c0021af6:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021af9:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021afc:	09 c3                	or     ebx,eax
c0021afe:	0f 84 59 ff ff ff    	je     c0021a5d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0021b04:	55                   	push   ebp
c0021b05:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021b09:	50                   	push   eax
c0021b0a:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021b11:	53                   	push   ebx
c0021b12:	8b 06                	mov    eax,DWORD PTR [esi]
c0021b14:	c1 e0 0b             	shl    eax,0xb
c0021b17:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0021b1b:	c1 e8 0b             	shr    eax,0xb
c0021b1e:	50                   	push   eax
c0021b1f:	e8 53 fc ff ff       	call   c0021777 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021b24:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021b27:	83 c4 10             	add    esp,0x10
c0021b2a:	25 ff 07 00 00       	and    eax,0x7ff
c0021b2f:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0021b32:	57                   	push   edi
c0021b33:	6a 28                	push   0x28
c0021b35:	6a 00                	push   0x0
c0021b37:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021b3b:	50                   	push   eax
c0021b3c:	e8 37 ec fd ff       	call   c0000778 <memset>
c0021b41:	31 d2                	xor    edx,edx
c0021b43:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0021b46:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021b4c:	89 f8                	mov    eax,edi
c0021b4e:	83 c0 21             	add    eax,0x21
c0021b51:	83 d2 00             	adc    edx,0x0
c0021b54:	89 c7                	mov    edi,eax
c0021b56:	89 d5                	mov    ebp,edx
c0021b58:	83 c4 10             	add    esp,0x10
c0021b5b:	31 c9                	xor    ecx,ecx
c0021b5d:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c0021b64:	83 f9 28             	cmp    ecx,0x28
c0021b67:	88 04 24             	mov    BYTE PTR [esp],al
c0021b6a:	0f 94 c2             	sete   dl
c0021b6d:	88 d0                	mov    al,dl
c0021b6f:	ba ff 07 00 00       	mov    edx,0x7ff
c0021b74:	39 fa                	cmp    edx,edi
c0021b76:	ba 00 00 00 00       	mov    edx,0x0
c0021b7b:	19 ea                	sbb    edx,ebp
c0021b7d:	0f 92 c2             	setb   dl
c0021b80:	09 c2                	or     edx,eax
c0021b82:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021b86:	0f 94 c0             	sete   al
c0021b89:	08 d0                	or     al,dl
c0021b8b:	75 16                	jne    c0021ba3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021b8d:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021b91:	74 10                	je     c0021ba3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021b93:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021b96:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021b9a:	41                   	inc    ecx
c0021b9b:	83 c7 01             	add    edi,0x1
c0021b9e:	83 d5 00             	adc    ebp,0x0
c0021ba1:	eb ba                	jmp    c0021b5d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c0021ba3:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021baa:	83 ec 0c             	sub    esp,0xc
c0021bad:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0021bb1:	57                   	push   edi
c0021bb2:	e8 dd eb fd ff       	call   c0000794 <strlen>
c0021bb7:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0021bbf:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021bc3:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c0021bca:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021bcd:	5a                   	pop    edx
c0021bce:	25 ff 07 00 00       	and    eax,0x7ff
c0021bd3:	01 c8                	add    eax,ecx
c0021bd5:	59                   	pop    ecx
c0021bd6:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0021bdc:	83 e0 02             	and    eax,0x2
c0021bdf:	3c 01                	cmp    al,0x1
c0021be1:	19 c0                	sbb    eax,eax
c0021be3:	83 c0 02             	add    eax,0x2
c0021be6:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021bea:	57                   	push   edi
c0021beb:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021bef:	50                   	push   eax
c0021bf0:	e8 3f ec fd ff       	call   c0000834 <strcpy>
c0021bf5:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021bf9:	83 c4 10             	add    esp,0x10
c0021bfc:	84 c0                	test   al,al
c0021bfe:	75 21                	jne    c0021c21 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c0021c00:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021c08:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021c10:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021c18:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021c1f:	eb 28                	jmp    c0021c49 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021c21:	fe c8                	dec    al
c0021c23:	75 24                	jne    c0021c49 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021c25:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021c2d:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021c35:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021c3d:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021c44:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021c49:	0f b6 fb             	movzx  edi,bl
c0021c4c:	31 db                	xor    ebx,ebx
c0021c4e:	50                   	push   eax
c0021c4f:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c0021c56:	8d 44 24 48          	lea    eax,[esp+0x48]
c0021c5a:	50                   	push   eax
c0021c5b:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c0021c62:	e8 dd ea fd ff       	call   c0000744 <memcpy>
c0021c67:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c0021c6e:	89 f9                	mov    ecx,edi
c0021c70:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021c76:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c0021c79:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021c7c:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c0021c7f:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021c82:	83 c4 10             	add    esp,0x10
c0021c85:	39 c7                	cmp    edi,eax
c0021c87:	89 df                	mov    edi,ebx
c0021c89:	19 d7                	sbb    edi,edx
c0021c8b:	72 10                	jb     c0021c9d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021c8d:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0021c94:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0021c9b:	eb 0a                	jmp    c0021ca7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c0021c9d:	29 c8                	sub    eax,ecx
c0021c9f:	19 da                	sbb    edx,ebx
c0021ca1:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021ca4:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021ca7:	31 c0                	xor    eax,eax
c0021ca9:	eb 05                	jmp    c0021cb0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021cab:	b8 04 00 00 00       	mov    eax,0x4
c0021cb0:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021cb6:	5b                   	pop    ebx
c0021cb7:	5e                   	pop    esi
c0021cb8:	5f                   	pop    edi
c0021cb9:	5d                   	pop    ebp
c0021cba:	c3                   	ret    

c0021cbb <readRoot(unsigned int*, unsigned int*, char)>:
c0021cbb:	81 ec 40 08 00 00    	sub    esp,0x840
c0021cc1:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021cc9:	50                   	push   eax
c0021cca:	8d 44 24 38          	lea    eax,[esp+0x38]
c0021cce:	50                   	push   eax
c0021ccf:	6a 10                	push   0x10
c0021cd1:	e8 a1 fa ff ff       	call   c0021777 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021cd6:	83 c4 0c             	add    esp,0xc
c0021cd9:	6a 22                	push   0x22
c0021cdb:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c0021ce2:	50                   	push   eax
c0021ce3:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0021ce7:	50                   	push   eax
c0021ce8:	e8 57 ea fd ff       	call   c0000744 <memcpy>
c0021ced:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021cf4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021cf8:	89 10                	mov    DWORD PTR [eax],edx
c0021cfa:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021d01:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021d05:	89 10                	mov    DWORD PTR [eax],edx
c0021d07:	b0 01                	mov    al,0x1
c0021d09:	81 c4 4c 08 00 00    	add    esp,0x84c
c0021d0f:	c3                   	ret    

c0021d10 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021d10:	55                   	push   ebp
c0021d11:	57                   	push   edi
c0021d12:	56                   	push   esi
c0021d13:	53                   	push   ebx
c0021d14:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021d1a:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021d21:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021d28:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021d2c:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021d30:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021d34:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021d38:	75 03                	jne    c0021d3d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021d3a:	83 c3 02             	add    ebx,0x2
c0021d3d:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021d40:	75 03                	jne    c0021d45 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0021d42:	43                   	inc    ebx
c0021d43:	eb f8                	jmp    c0021d3d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021d45:	51                   	push   ecx
c0021d46:	68 00 01 00 00       	push   0x100
c0021d4b:	6a 00                	push   0x0
c0021d4d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021d51:	50                   	push   eax
c0021d52:	e8 21 ea fd ff       	call   c0000778 <memset>
c0021d57:	83 c4 10             	add    esp,0x10
c0021d5a:	31 d2                	xor    edx,edx
c0021d5c:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021d5f:	84 c0                	test   al,al
c0021d61:	74 21                	je     c0021d84 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021d63:	3c 2f                	cmp    al,0x2f
c0021d65:	75 0b                	jne    c0021d72 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021d67:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021d6b:	bd 01 00 00 00       	mov    ebp,0x1
c0021d70:	eb 14                	jmp    c0021d86 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021d72:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021d75:	80 f9 19             	cmp    cl,0x19
c0021d78:	77 03                	ja     c0021d7d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021d7a:	83 e8 20             	sub    eax,0x20
c0021d7d:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021d81:	42                   	inc    edx
c0021d82:	eb d8                	jmp    c0021d5c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021d84:	31 ed                	xor    ebp,ebp
c0021d86:	83 ec 0c             	sub    esp,0xc
c0021d89:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021d90:	e8 ab da fe ff       	call   c000f840 <malloc>
c0021d95:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021d9c:	89 c6                	mov    esi,eax
c0021d9e:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021da4:	c1 ef 0b             	shr    edi,0xb
c0021da7:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021dae:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021db2:	83 c4 10             	add    esp,0x10
c0021db5:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021dba:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021dbe:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021dc5:	74 28                	je     c0021def <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021dc7:	52                   	push   edx
c0021dc8:	57                   	push   edi
c0021dc9:	50                   	push   eax
c0021dca:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021dce:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021dd5:	e8 9d f9 ff ff       	call   c0021777 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021dda:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021dde:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0021de5:	05 00 08 00 00       	add    eax,0x800
c0021dea:	83 c4 10             	add    esp,0x10
c0021ded:	eb cb                	jmp    c0021dba <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0021def:	83 ec 0c             	sub    esp,0xc
c0021df2:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0021df6:	57                   	push   edi
c0021df7:	e8 98 e9 fd ff       	call   c0000794 <strlen>
c0021dfc:	50                   	push   eax
c0021dfd:	57                   	push   edi
c0021dfe:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0021e05:	56                   	push   esi
c0021e06:	e8 2a f9 ff ff       	call   c0021735 <__memmem(unsigned char*, int, unsigned char*, int)>
c0021e0b:	83 c4 20             	add    esp,0x20
c0021e0e:	85 c0                	test   eax,eax
c0021e10:	75 13                	jne    c0021e25 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0021e12:	83 ec 0c             	sub    esp,0xc
c0021e15:	56                   	push   esi
c0021e16:	e8 35 da fe ff       	call   c000f850 <free>
c0021e1b:	83 c4 10             	add    esp,0x10
c0021e1e:	31 c0                	xor    eax,eax
c0021e20:	e9 b3 00 00 00       	jmp    c0021ed8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021e25:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0021e29:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021e2d:	c1 e7 08             	shl    edi,0x8
c0021e30:	c1 e2 10             	shl    edx,0x10
c0021e33:	09 d7                	or     edi,edx
c0021e35:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021e39:	09 d7                	or     edi,edx
c0021e3b:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0021e3f:	c1 e2 18             	shl    edx,0x18
c0021e42:	09 d7                	or     edi,edx
c0021e44:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0021e48:	89 d1                	mov    ecx,edx
c0021e4a:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0021e4e:	c1 e1 08             	shl    ecx,0x8
c0021e51:	c1 e2 10             	shl    edx,0x10
c0021e54:	09 ca                	or     edx,ecx
c0021e56:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021e5a:	09 ca                	or     edx,ecx
c0021e5c:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0021e60:	c1 e1 18             	shl    ecx,0x18
c0021e63:	09 ca                	or     edx,ecx
c0021e65:	89 e9                	mov    ecx,ebp
c0021e67:	84 c9                	test   cl,cl
c0021e69:	74 3c                	je     c0021ea7 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021e6b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021e6f:	83 ec 0c             	sub    esp,0xc
c0021e72:	56                   	push   esi
c0021e73:	e8 d8 d9 fe ff       	call   c000f850 <free>
c0021e78:	83 c4 0c             	add    esp,0xc
c0021e7b:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021e82:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0021e87:	50                   	push   eax
c0021e88:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021e8f:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021e96:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021e9a:	52                   	push   edx
c0021e9b:	57                   	push   edi
c0021e9c:	53                   	push   ebx
c0021e9d:	e8 6e fe ff ff       	call   c0021d10 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021ea2:	83 c4 20             	add    esp,0x20
c0021ea5:	eb 31                	jmp    c0021ed8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021ea7:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021eaa:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0021eb1:	d0 e8                	shr    al,1
c0021eb3:	89 3b                	mov    DWORD PTR [ebx],edi
c0021eb5:	83 e0 01             	and    eax,0x1
c0021eb8:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0021ebf:	83 ec 0c             	sub    esp,0xc
c0021ec2:	89 13                	mov    DWORD PTR [ebx],edx
c0021ec4:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0021ecb:	89 03                	mov    DWORD PTR [ebx],eax
c0021ecd:	56                   	push   esi
c0021ece:	e8 7d d9 fe ff       	call   c000f850 <free>
c0021ed3:	83 c4 10             	add    esp,0x10
c0021ed6:	b0 01                	mov    al,0x1
c0021ed8:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021ede:	5b                   	pop    ebx
c0021edf:	5e                   	pop    esi
c0021ee0:	5f                   	pop    edi
c0021ee1:	5d                   	pop    ebp
c0021ee2:	c3                   	ret    

c0021ee3 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0021ee3:	55                   	push   ebp
c0021ee4:	57                   	push   edi
c0021ee5:	56                   	push   esi
c0021ee6:	53                   	push   ebx
c0021ee7:	83 ec 20             	sub    esp,0x20
c0021eea:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021eee:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0021ef2:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021ef6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021efe:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021f06:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0021f0b:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0021f11:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0021f17:	57                   	push   edi
c0021f18:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021f1c:	50                   	push   eax
c0021f1d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021f21:	50                   	push   eax
c0021f22:	e8 94 fd ff ff       	call   c0021cbb <readRoot(unsigned int*, unsigned int*, char)>
c0021f27:	5a                   	pop    edx
c0021f28:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021f2c:	e8 63 e8 fd ff       	call   c0000794 <strlen>
c0021f31:	83 c4 10             	add    esp,0x10
c0021f34:	83 f8 03             	cmp    eax,0x3
c0021f37:	77 17                	ja     c0021f50 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021f39:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021f3d:	89 03                	mov    DWORD PTR [ebx],eax
c0021f3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021f43:	89 06                	mov    DWORD PTR [esi],eax
c0021f45:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0021f4c:	b0 01                	mov    al,0x1
c0021f4e:	eb 19                	jmp    c0021f69 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0021f50:	50                   	push   eax
c0021f51:	55                   	push   ebp
c0021f52:	57                   	push   edi
c0021f53:	56                   	push   esi
c0021f54:	53                   	push   ebx
c0021f55:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021f59:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021f5d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021f61:	e8 aa fd ff ff       	call   c0021d10 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021f66:	83 c4 20             	add    esp,0x20
c0021f69:	83 c4 1c             	add    esp,0x1c
c0021f6c:	5b                   	pop    ebx
c0021f6d:	5e                   	pop    esi
c0021f6e:	5f                   	pop    edi
c0021f6f:	5d                   	pop    ebp
c0021f70:	c3                   	ret    
c0021f71:	90                   	nop

c0021f72 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0021f72:	57                   	push   edi
c0021f73:	56                   	push   esi
c0021f74:	53                   	push   ebx
c0021f75:	83 ec 10             	sub    esp,0x10
c0021f78:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021f7c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021f80:	85 ff                	test   edi,edi
c0021f82:	0f 84 9d 00 00 00    	je     c0022025 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021f88:	85 f6                	test   esi,esi
c0021f8a:	0f 84 95 00 00 00    	je     c0022025 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021f90:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0021f95:	74 17                	je     c0021fae <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c0021f97:	83 ec 0c             	sub    esp,0xc
c0021f9a:	68 ef c8 02 c0       	push   0xc002c8ef
c0021f9f:	e8 a6 0f ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0021fa4:	83 c4 10             	add    esp,0x10
c0021fa7:	b8 03 00 00 00       	mov    eax,0x3
c0021fac:	eb 7c                	jmp    c002202a <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021fae:	83 ec 0c             	sub    esp,0xc
c0021fb1:	6a 1c                	push   0x1c
c0021fb3:	e8 88 d8 fe ff       	call   c000f840 <malloc>
c0021fb8:	89 07                	mov    DWORD PTR [edi],eax
c0021fba:	89 c3                	mov    ebx,eax
c0021fbc:	58                   	pop    eax
c0021fbd:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021fc1:	50                   	push   eax
c0021fc2:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021fc5:	50                   	push   eax
c0021fc6:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021fca:	50                   	push   eax
c0021fcb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021fcf:	50                   	push   eax
c0021fd0:	56                   	push   esi
c0021fd1:	e8 0d ff ff ff       	call   c0021ee3 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021fd6:	83 c4 20             	add    esp,0x20
c0021fd9:	84 c0                	test   al,al
c0021fdb:	74 07                	je     c0021fe4 <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c0021fdd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021fe2:	74 0b                	je     c0021fef <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c0021fe4:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021fe8:	b8 01 00 00 00       	mov    eax,0x1
c0021fed:	eb 3b                	jmp    c002202a <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021fef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ff3:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021ff7:	89 03                	mov    DWORD PTR [ebx],eax
c0021ff9:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0022000:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022004:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c002200b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022012:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022015:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002201c:	8a 06                	mov    al,BYTE PTR [esi]
c002201e:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0022021:	31 c0                	xor    eax,eax
c0022023:	eb 05                	jmp    c002202a <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0022025:	b8 04 00 00 00       	mov    eax,0x4
c002202a:	83 c4 10             	add    esp,0x10
c002202d:	5b                   	pop    ebx
c002202e:	5e                   	pop    esi
c002202f:	5f                   	pop    edi
c0022030:	c3                   	ret    
c0022031:	90                   	nop

c0022032 <ISO9660::exists(char const*)>:
c0022032:	83 ec 28             	sub    esp,0x28
c0022035:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022039:	8d 54 24 18          	lea    edx,[esp+0x18]
c002203d:	52                   	push   edx
c002203e:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0022041:	52                   	push   edx
c0022042:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022046:	52                   	push   edx
c0022047:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c002204b:	52                   	push   edx
c002204c:	50                   	push   eax
c002204d:	e8 91 fe ff ff       	call   c0021ee3 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022052:	83 c4 3c             	add    esp,0x3c
c0022055:	c3                   	ret    

c0022056 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0022056:	56                   	push   esi
c0022057:	53                   	push   ebx
c0022058:	83 ec 14             	sub    esp,0x14
c002205b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c002205f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022063:	85 db                	test   ebx,ebx
c0022065:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0022069:	0f 94 c2             	sete   dl
c002206c:	85 f6                	test   esi,esi
c002206e:	0f 94 c0             	sete   al
c0022071:	08 c2                	or     dl,al
c0022073:	75 68                	jne    c00220dd <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0022075:	85 c9                	test   ecx,ecx
c0022077:	74 64                	je     c00220dd <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0022079:	83 ec 0c             	sub    esp,0xc
c002207c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c002207f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022083:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0022089:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022090:	50                   	push   eax
c0022091:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0022094:	50                   	push   eax
c0022095:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022099:	50                   	push   eax
c002209a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002209e:	50                   	push   eax
c002209f:	51                   	push   ecx
c00220a0:	e8 3e fe ff ff       	call   c0021ee3 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00220a5:	83 c4 20             	add    esp,0x20
c00220a8:	ba 01 00 00 00       	mov    edx,0x1
c00220ad:	84 c0                	test   al,al
c00220af:	74 31                	je     c00220e2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00220b1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00220b5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00220bc:	89 03                	mov    DWORD PTR [ebx],eax
c00220be:	ba 00 00 00 00       	mov    edx,0x0
c00220c3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00220c7:	85 c0                	test   eax,eax
c00220c9:	0f 95 06             	setne  BYTE PTR [esi]
c00220cc:	74 14                	je     c00220e2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00220ce:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00220d4:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00220db:	eb 05                	jmp    c00220e2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00220dd:	ba 04 00 00 00       	mov    edx,0x4
c00220e2:	83 c4 14             	add    esp,0x14
c00220e5:	89 d0                	mov    eax,edx
c00220e7:	5b                   	pop    ebx
c00220e8:	5e                   	pop    esi
c00220e9:	c3                   	ret    

c00220ea <ISO9660::openDir(char const*, void**)>:
c00220ea:	57                   	push   edi
c00220eb:	56                   	push   esi
c00220ec:	53                   	push   ebx
c00220ed:	83 ec 10             	sub    esp,0x10
c00220f0:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00220f4:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00220f8:	85 ff                	test   edi,edi
c00220fa:	0f 84 95 00 00 00    	je     c0022195 <ISO9660::openDir(char const*, void**)+0xab>
c0022100:	85 f6                	test   esi,esi
c0022102:	0f 84 8d 00 00 00    	je     c0022195 <ISO9660::openDir(char const*, void**)+0xab>
c0022108:	83 ec 0c             	sub    esp,0xc
c002210b:	6a 1c                	push   0x1c
c002210d:	e8 2e d7 fe ff       	call   c000f840 <malloc>
c0022112:	89 07                	mov    DWORD PTR [edi],eax
c0022114:	89 c3                	mov    ebx,eax
c0022116:	59                   	pop    ecx
c0022117:	8d 44 24 18          	lea    eax,[esp+0x18]
c002211b:	50                   	push   eax
c002211c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c002211f:	50                   	push   eax
c0022120:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022124:	50                   	push   eax
c0022125:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022129:	50                   	push   eax
c002212a:	56                   	push   esi
c002212b:	e8 b3 fd ff ff       	call   c0021ee3 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022130:	83 c4 20             	add    esp,0x20
c0022133:	84 c0                	test   al,al
c0022135:	74 07                	je     c002213e <ISO9660::openDir(char const*, void**)+0x54>
c0022137:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002213c:	75 21                	jne    c002215f <ISO9660::openDir(char const*, void**)+0x75>
c002213e:	0f b6 c0             	movzx  eax,al
c0022141:	52                   	push   edx
c0022142:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022146:	50                   	push   eax
c0022147:	68 15 c9 02 c0       	push   0xc002c915
c002214c:	e8 f9 0d ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0022151:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0022155:	83 c4 10             	add    esp,0x10
c0022158:	b8 01 00 00 00       	mov    eax,0x1
c002215d:	eb 3b                	jmp    c002219a <ISO9660::openDir(char const*, void**)+0xb0>
c002215f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022163:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022167:	89 03                	mov    DWORD PTR [ebx],eax
c0022169:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0022170:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022174:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c002217b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022182:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022185:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002218c:	8a 06                	mov    al,BYTE PTR [esi]
c002218e:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0022191:	31 c0                	xor    eax,eax
c0022193:	eb 05                	jmp    c002219a <ISO9660::openDir(char const*, void**)+0xb0>
c0022195:	b8 04 00 00 00       	mov    eax,0x4
c002219a:	83 c4 10             	add    esp,0x10
c002219d:	5b                   	pop    ebx
c002219e:	5e                   	pop    esi
c002219f:	5f                   	pop    edi
c00221a0:	c3                   	ret    
c00221a1:	90                   	nop

c00221a2 <ISO9660::ISO9660()>:
c00221a2:	83 ec 0c             	sub    esp,0xc
c00221a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221a9:	83 ec 0c             	sub    esp,0xc
c00221ac:	50                   	push   eax
c00221ad:	e8 9c 10 ff ff       	call   c001324e <Filesystem::Filesystem()>
c00221b2:	83 c4 10             	add    esp,0x10
c00221b5:	ba 38 c9 02 c0       	mov    edx,0xc002c938
c00221ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221be:	89 10                	mov    DWORD PTR [eax],edx
c00221c0:	90                   	nop
c00221c1:	83 c4 0c             	add    esp,0xc
c00221c4:	c3                   	ret    
c00221c5:	90                   	nop

c00221c6 <SoundChannel::~SoundChannel()>:
c00221c6:	83 ec 0c             	sub    esp,0xc
c00221c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221cd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00221d0:	83 ec 0c             	sub    esp,0xc
c00221d3:	50                   	push   eax
c00221d4:	e8 77 d6 fe ff       	call   c000f850 <free>
c00221d9:	83 c4 10             	add    esp,0x10
c00221dc:	90                   	nop
c00221dd:	83 c4 0c             	add    esp,0xc
c00221e0:	c3                   	ret    
c00221e1:	90                   	nop

c00221e2 <SoundChannel::setSpeed(float)>:
c00221e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00221ea:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00221ed:	c3                   	ret    

c00221ee <SoundChannel::getSpeed()>:
c00221ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221f2:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00221f5:	c3                   	ret    

c00221f6 <SoundChannel::setVolume(int)>:
c00221f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00221fa:	83 f8 64             	cmp    eax,0x64
c00221fd:	7e 05                	jle    c0022204 <SoundChannel::setVolume(int)+0xe>
c00221ff:	b8 64 00 00 00       	mov    eax,0x64
c0022204:	85 c0                	test   eax,eax
c0022206:	79 02                	jns    c002220a <SoundChannel::setVolume(int)+0x14>
c0022208:	31 c0                	xor    eax,eax
c002220a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002220e:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0022211:	c3                   	ret    

c0022212 <SoundChannel::getVolume()>:
c0022212:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022216:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0022219:	c3                   	ret    

c002221a <SoundChannel::pause()>:
c002221a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002221e:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c0022222:	c3                   	ret    
c0022223:	90                   	nop

c0022224 <SoundChannel::SoundChannel(int, int, int, int)>:
c0022224:	83 ec 1c             	sub    esp,0x1c
c0022227:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002222b:	e8 ea ff ff ff       	call   c002221a <SoundChannel::pause()>
c0022230:	83 c4 04             	add    esp,0x4
c0022233:	6a 50                	push   0x50
c0022235:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022239:	e8 b8 ff ff ff       	call   c00221f6 <SoundChannel::setVolume(int)>
c002223e:	83 c4 08             	add    esp,0x8
c0022241:	a1 b0 c9 02 c0       	mov    eax,ds:0xc002c9b0
c0022246:	50                   	push   eax
c0022247:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c002224b:	e8 92 ff ff ff       	call   c00221e2 <SoundChannel::setSpeed(float)>
c0022250:	83 c4 08             	add    esp,0x8
c0022253:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022257:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002225b:	89 10                	mov    DWORD PTR [eax],edx
c002225d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022261:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022265:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022268:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002226c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022270:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022273:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0022278:	75 23                	jne    c002229d <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c002227a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002227e:	8b 10                	mov    edx,DWORD PTR [eax]
c0022280:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022284:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022287:	0f af c2             	imul   eax,edx
c002228a:	85 c0                	test   eax,eax
c002228c:	79 03                	jns    c0022291 <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c002228e:	83 c0 03             	add    eax,0x3
c0022291:	c1 f8 02             	sar    eax,0x2
c0022294:	05 a0 0f 00 00       	add    eax,0xfa0
c0022299:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002229d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222a1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00222a5:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00222a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222ac:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00222b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222b7:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00222be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222c2:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00222c5:	c1 e0 02             	shl    eax,0x2
c00222c8:	83 ec 0c             	sub    esp,0xc
c00222cb:	50                   	push   eax
c00222cc:	e8 6f d5 fe ff       	call   c000f840 <malloc>
c00222d1:	83 c4 10             	add    esp,0x10
c00222d4:	89 c2                	mov    edx,eax
c00222d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222da:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00222dd:	83 ec 04             	sub    esp,0x4
c00222e0:	8d 44 24 08          	lea    eax,[esp+0x8]
c00222e4:	50                   	push   eax
c00222e5:	6a 01                	push   0x1
c00222e7:	6a 04                	push   0x4
c00222e9:	e8 b1 68 fe ff       	call   c0008b9f <src_new>
c00222ee:	83 c4 10             	add    esp,0x10
c00222f1:	89 c2                	mov    edx,eax
c00222f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222f7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00222fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222fe:	85 c0                	test   eax,eax
c0022300:	74 10                	je     c0022312 <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c0022302:	83 ec 0c             	sub    esp,0xc
c0022305:	68 94 c9 02 c0       	push   0xc002c994
c002230a:	e8 ec 82 ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c002230f:	83 c4 10             	add    esp,0x10
c0022312:	a0 60 27 03 c0       	mov    al,ds:0xc0032760
c0022317:	83 f0 01             	xor    eax,0x1
c002231a:	84 c0                	test   al,al
c002231c:	74 57                	je     c0022375 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c002231e:	a1 b4 c9 02 c0       	mov    eax,ds:0xc002c9b4
c0022323:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022327:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002232f:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0022337:	7f 35                	jg     c002236e <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c0022339:	83 ec 0c             	sub    esp,0xc
c002233c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0022340:	e8 92 4f 00 00       	call   c00272d7 <__floatsisf>
c0022345:	83 c4 10             	add    esp,0x10
c0022348:	8b 15 b4 c9 02 c0    	mov    edx,DWORD PTR ds:0xc002c9b4
c002234e:	83 ec 08             	sub    esp,0x8
c0022351:	52                   	push   edx
c0022352:	50                   	push   eax
c0022353:	e8 91 4b 00 00       	call   c0026ee9 <__mulsf3>
c0022358:	83 c4 10             	add    esp,0x10
c002235b:	89 c2                	mov    edx,eax
c002235d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022361:	89 14 85 60 23 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdca0],edx
c0022368:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002236c:	eb c1                	jmp    c002232f <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c002236e:	c6 05 60 27 03 c0 01 	mov    BYTE PTR ds:0xc0032760,0x1
c0022375:	90                   	nop
c0022376:	83 c4 1c             	add    esp,0x1c
c0022379:	c3                   	ret    

c002237a <SoundChannel::play()>:
c002237a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002237e:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c0022382:	c3                   	ret    
c0022383:	90                   	nop

c0022384 <SoundChannel::paused()>:
c0022384:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022388:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c002238b:	c3                   	ret    

c002238c <SoundChannel::getSampleRate()>:
c002238c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022390:	8b 00                	mov    eax,DWORD PTR [eax]
c0022392:	c3                   	ret    
c0022393:	90                   	nop

c0022394 <SoundChannel::getBits()>:
c0022394:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022398:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002239b:	c3                   	ret    

c002239c <SoundChannel::getBufferUsed()>:
c002239c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223a0:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00223a3:	c3                   	ret    

c00223a4 <SoundChannel::getBufferSize()>:
c00223a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223a8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00223ab:	c3                   	ret    

c00223ac <SoundChannel::unbuffer(float*, int, int)>:
c00223ac:	56                   	push   esi
c00223ad:	53                   	push   ebx
c00223ae:	83 ec 40             	sub    esp,0x40
c00223b1:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00223b5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00223b8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00223bc:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00223bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00223c3:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00223c7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00223cb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00223cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00223d3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00223d7:	e8 fb 4e 00 00       	call   c00272d7 <__floatsisf>
c00223dc:	5a                   	pop    edx
c00223dd:	89 c6                	mov    esi,eax
c00223df:	ff 33                	push   DWORD PTR [ebx]
c00223e1:	e8 f1 4e 00 00       	call   c00272d7 <__floatsisf>
c00223e6:	59                   	pop    ecx
c00223e7:	5a                   	pop    edx
c00223e8:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00223eb:	50                   	push   eax
c00223ec:	e8 f8 4a 00 00       	call   c0026ee9 <__mulsf3>
c00223f1:	59                   	pop    ecx
c00223f2:	5a                   	pop    edx
c00223f3:	50                   	push   eax
c00223f4:	56                   	push   esi
c00223f5:	e8 b2 4c 00 00       	call   c00270ac <__divsf3>
c00223fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00223fd:	e8 a5 61 00 00       	call   c00285a7 <__extendsfdf2>
c0022402:	59                   	pop    ecx
c0022403:	5e                   	pop    esi
c0022404:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022408:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c002240c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0022414:	8d 44 24 14          	lea    eax,[esp+0x14]
c0022418:	50                   	push   eax
c0022419:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c002241c:	e8 73 63 fe ff       	call   c0008794 <src_process>
c0022421:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022425:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0022428:	83 c4 0c             	add    esp,0xc
c002242b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c002242e:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0022431:	29 d0                	sub    eax,edx
c0022433:	c1 e0 02             	shl    eax,0x2
c0022436:	50                   	push   eax
c0022437:	8d 04 91             	lea    eax,[ecx+edx*4]
c002243a:	50                   	push   eax
c002243b:	51                   	push   ecx
c002243c:	e8 3b e2 fd ff       	call   c000067c <memmove>
c0022441:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022445:	83 c4 44             	add    esp,0x44
c0022448:	5b                   	pop    ebx
c0022449:	5e                   	pop    esi
c002244a:	c3                   	ret    
c002244b:	90                   	nop

c002244c <SoundChannel::buffer8(unsigned char*, int)>:
c002244c:	55                   	push   ebp
c002244d:	57                   	push   edi
c002244e:	56                   	push   esi
c002244f:	53                   	push   ebx
c0022450:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022454:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0022458:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c002245b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002245f:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022462:	74 7a                	je     c00224de <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022464:	85 ff                	test   edi,edi
c0022466:	7e 76                	jle    c00224de <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022468:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c002246c:	8d 70 01             	lea    esi,[eax+0x1]
c002246f:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022472:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022475:	8b 1c 9d 60 23 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdca0]
c002247c:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c002247f:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022482:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022485:	74 5e                	je     c00224e5 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0022487:	83 ff 01             	cmp    edi,0x1
c002248a:	74 4b                	je     c00224d7 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c002248c:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0022490:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022493:	8d 70 01             	lea    esi,[eax+0x1]
c0022496:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022499:	8b 1c 9d 60 23 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdca0]
c00224a0:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c00224a3:	b8 02 00 00 00       	mov    eax,0x2
c00224a8:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c00224ab:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c00224ae:	75 23                	jne    c00224d3 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c00224b0:	eb 27                	jmp    c00224d9 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c00224b2:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c00224b7:	8d 71 01             	lea    esi,[ecx+0x1]
c00224ba:	40                   	inc    eax
c00224bb:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00224be:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c00224c1:	8b 1c 9d 60 23 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdca0]
c00224c8:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c00224cb:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c00224ce:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c00224d1:	74 06                	je     c00224d9 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c00224d3:	39 c7                	cmp    edi,eax
c00224d5:	75 db                	jne    c00224b2 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c00224d7:	89 f8                	mov    eax,edi
c00224d9:	5b                   	pop    ebx
c00224da:	5e                   	pop    esi
c00224db:	5f                   	pop    edi
c00224dc:	5d                   	pop    ebp
c00224dd:	c3                   	ret    
c00224de:	5b                   	pop    ebx
c00224df:	31 c0                	xor    eax,eax
c00224e1:	5e                   	pop    esi
c00224e2:	5f                   	pop    edi
c00224e3:	5d                   	pop    ebp
c00224e4:	c3                   	ret    
c00224e5:	b8 01 00 00 00       	mov    eax,0x1
c00224ea:	eb ed                	jmp    c00224d9 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c00224ec <SoundDevice::SoundDevice(char const*)>:
c00224ec:	83 ec 1c             	sub    esp,0x1c
c00224ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00224f3:	83 ec 08             	sub    esp,0x8
c00224f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00224fa:	50                   	push   eax
c00224fb:	e8 60 20 ff ff       	call   c0014560 <Device::Device(char const*)>
c0022500:	83 c4 10             	add    esp,0x10
c0022503:	ba c0 c9 02 c0       	mov    edx,0xc002c9c0
c0022508:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002250c:	89 10                	mov    DWORD PTR [eax],edx
c002250e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022512:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c002251c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022520:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c002252a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022532:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022537:	7f 19                	jg     c0022552 <SoundDevice::SoundDevice(char const*)+0x66>
c0022539:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002253d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022541:	83 c2 54             	add    edx,0x54
c0022544:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c002254c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022550:	eb e0                	jmp    c0022532 <SoundDevice::SoundDevice(char const*)+0x46>
c0022552:	90                   	nop
c0022553:	83 c4 1c             	add    esp,0x1c
c0022556:	c3                   	ret    
c0022557:	90                   	nop

c0022558 <SoundDevice::~SoundDevice()>:
c0022558:	53                   	push   ebx
c0022559:	83 ec 18             	sub    esp,0x18
c002255c:	ba c0 c9 02 c0       	mov    edx,0xc002c9c0
c0022561:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022565:	89 10                	mov    DWORD PTR [eax],edx
c0022567:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002256f:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022574:	7f 46                	jg     c00225bc <SoundDevice::~SoundDevice()+0x64>
c0022576:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002257a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002257e:	83 c2 54             	add    edx,0x54
c0022581:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0022585:	85 c0                	test   eax,eax
c0022587:	74 2d                	je     c00225b6 <SoundDevice::~SoundDevice()+0x5e>
c0022589:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002258d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022591:	83 c2 54             	add    edx,0x54
c0022594:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0022598:	85 db                	test   ebx,ebx
c002259a:	74 1a                	je     c00225b6 <SoundDevice::~SoundDevice()+0x5e>
c002259c:	83 ec 0c             	sub    esp,0xc
c002259f:	53                   	push   ebx
c00225a0:	e8 21 fc ff ff       	call   c00221c6 <SoundChannel::~SoundChannel()>
c00225a5:	83 c4 10             	add    esp,0x10
c00225a8:	83 ec 08             	sub    esp,0x8
c00225ab:	6a 2c                	push   0x2c
c00225ad:	53                   	push   ebx
c00225ae:	e8 b7 08 ff ff       	call   c0012e6a <operator delete(void*, unsigned long)>
c00225b3:	83 c4 10             	add    esp,0x10
c00225b6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00225ba:	eb b3                	jmp    c002256f <SoundDevice::~SoundDevice()+0x17>
c00225bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225c0:	83 ec 0c             	sub    esp,0xc
c00225c3:	50                   	push   eax
c00225c4:	e8 79 1c ff ff       	call   c0014242 <Device::~Device()>
c00225c9:	83 c4 10             	add    esp,0x10
c00225cc:	90                   	nop
c00225cd:	83 c4 18             	add    esp,0x18
c00225d0:	5b                   	pop    ebx
c00225d1:	c3                   	ret    

c00225d2 <SoundDevice::~SoundDevice()>:
c00225d2:	83 ec 0c             	sub    esp,0xc
c00225d5:	83 ec 0c             	sub    esp,0xc
c00225d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00225dc:	e8 77 ff ff ff       	call   c0022558 <SoundDevice::~SoundDevice()>
c00225e1:	83 c4 10             	add    esp,0x10
c00225e4:	83 ec 08             	sub    esp,0x8
c00225e7:	68 e4 01 00 00       	push   0x1e4
c00225ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00225f0:	e8 75 08 ff ff       	call   c0012e6a <operator delete(void*, unsigned long)>
c00225f5:	83 c4 10             	add    esp,0x10
c00225f8:	83 c4 0c             	add    esp,0xc
c00225fb:	c3                   	ret    

c00225fc <SoundDevice::getFreeChannelNum()>:
c00225fc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022600:	31 c0                	xor    eax,eax
c0022602:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c002260a:	74 09                	je     c0022615 <SoundDevice::getFreeChannelNum()+0x19>
c002260c:	40                   	inc    eax
c002260d:	83 f8 20             	cmp    eax,0x20
c0022610:	75 f0                	jne    c0022602 <SoundDevice::getFreeChannelNum()+0x6>
c0022612:	83 c8 ff             	or     eax,0xffffffff
c0022615:	c3                   	ret    

c0022616 <SoundDevice::addChannel(SoundChannel*)>:
c0022616:	56                   	push   esi
c0022617:	53                   	push   ebx
c0022618:	51                   	push   ecx
c0022619:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002261d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0022621:	53                   	push   ebx
c0022622:	e8 d5 ff ff ff       	call   c00225fc <SoundDevice::getFreeChannelNum()>
c0022627:	5a                   	pop    edx
c0022628:	83 f8 ff             	cmp    eax,0xffffffff
c002262b:	74 51                	je     c002267e <SoundDevice::addChannel(SoundChannel*)+0x68>
c002262d:	85 f6                	test   esi,esi
c002262f:	74 4d                	je     c002267e <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022631:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0022638:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c002263f:	75 30                	jne    c0022671 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0022641:	83 ec 0c             	sub    esp,0xc
c0022644:	56                   	push   esi
c0022645:	e8 42 fd ff ff       	call   c002238c <SoundChannel::getSampleRate()>
c002264a:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0022650:	89 34 24             	mov    DWORD PTR [esp],esi
c0022653:	e8 3c fd ff ff       	call   c0022394 <SoundChannel::getBits()>
c0022658:	83 c4 0c             	add    esp,0xc
c002265b:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0022661:	8b 13                	mov    edx,DWORD PTR [ebx]
c0022663:	50                   	push   eax
c0022664:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c002266a:	53                   	push   ebx
c002266b:	ff 52 28             	call   DWORD PTR [edx+0x28]
c002266e:	83 c4 10             	add    esp,0x10
c0022671:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0022677:	b8 01 00 00 00       	mov    eax,0x1
c002267c:	eb 03                	jmp    c0022681 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c002267e:	83 c8 ff             	or     eax,0xffffffff
c0022681:	5a                   	pop    edx
c0022682:	5b                   	pop    ebx
c0022683:	5e                   	pop    esi
c0022684:	c3                   	ret    
c0022685:	90                   	nop

c0022686 <SoundDevice::removeChannel(int)>:
c0022686:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002268a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002268e:	83 fa 1f             	cmp    edx,0x1f
c0022691:	77 23                	ja     c00226b6 <SoundDevice::removeChannel(int)+0x30>
c0022693:	8d 14 90             	lea    edx,[eax+edx*4]
c0022696:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c002269d:	74 17                	je     c00226b6 <SoundDevice::removeChannel(int)+0x30>
c002269f:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c00226a9:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c00226af:	75 05                	jne    c00226b6 <SoundDevice::removeChannel(int)+0x30>
c00226b1:	8b 00                	mov    eax,DWORD PTR [eax]
c00226b3:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c00226b6:	c3                   	ret    
c00226b7:	90                   	nop

c00226b8 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c00226b8:	57                   	push   edi
c00226b9:	56                   	push   esi
c00226ba:	53                   	push   ebx
c00226bb:	31 db                	xor    ebx,ebx
c00226bd:	83 ec 10             	sub    esp,0x10
c00226c0:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00226c4:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c00226c8:	0f 8d cb 00 00 00    	jge    c0022799 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c00226ce:	83 ec 0c             	sub    esp,0xc
c00226d1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00226d5:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c00226d8:	e8 ca 5e 00 00       	call   c00285a7 <__extendsfdf2>
c00226dd:	83 c4 10             	add    esp,0x10
c00226e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00226e4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00226e8:	68 00 00 f0 3f       	push   0x3ff00000
c00226ed:	6a 00                	push   0x0
c00226ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00226f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00226f7:	e8 37 4e 00 00       	call   c0027533 <__adddf3>
c00226fc:	83 c4 10             	add    esp,0x10
c00226ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022703:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022707:	68 00 00 e0 3f       	push   0x3fe00000
c002270c:	6a 00                	push   0x0
c002270e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022712:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022716:	e8 95 54 00 00       	call   c0027bb0 <__muldf3>
c002271b:	83 c4 10             	add    esp,0x10
c002271e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022722:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022726:	68 00 00 60 40       	push   0x40600000
c002272b:	6a 00                	push   0x0
c002272d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022731:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022735:	e8 76 54 00 00       	call   c0027bb0 <__muldf3>
c002273a:	59                   	pop    ecx
c002273b:	5f                   	pop    edi
c002273c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022740:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022748:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002274c:	e8 32 5d 00 00       	call   c0028483 <__truncdfsf2>
c0022751:	5a                   	pop    edx
c0022752:	89 c7                	mov    edi,eax
c0022754:	59                   	pop    ecx
c0022755:	68 00 00 fe 42       	push   0x42fe0000
c002275a:	50                   	push   eax
c002275b:	e8 cd 4d 00 00       	call   c002752d <__gesf2>
c0022760:	83 c4 10             	add    esp,0x10
c0022763:	85 c0                	test   eax,eax
c0022765:	78 06                	js     c002276d <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0022767:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c002276b:	eb 26                	jmp    c0022793 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c002276d:	50                   	push   eax
c002276e:	50                   	push   eax
c002276f:	6a 00                	push   0x0
c0022771:	57                   	push   edi
c0022772:	e8 ba 4d 00 00       	call   c0027531 <__lesf2>
c0022777:	83 c4 10             	add    esp,0x10
c002277a:	85 c0                	test   eax,eax
c002277c:	7f 06                	jg     c0022784 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c002277e:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0022782:	eb 0f                	jmp    c0022793 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022784:	83 ec 0c             	sub    esp,0xc
c0022787:	57                   	push   edi
c0022788:	e8 af 5e 00 00       	call   c002863c <lrintf>
c002278d:	83 c4 10             	add    esp,0x10
c0022790:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0022793:	43                   	inc    ebx
c0022794:	e9 2b ff ff ff       	jmp    c00226c4 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0022799:	83 c4 10             	add    esp,0x10
c002279c:	5b                   	pop    ebx
c002279d:	5e                   	pop    esi
c002279e:	5f                   	pop    edi
c002279f:	c3                   	ret    

c00227a0 <SoundDevice::getAudio(int, float*, float*)>:
c00227a0:	55                   	push   ebp
c00227a1:	57                   	push   edi
c00227a2:	56                   	push   esi
c00227a3:	53                   	push   ebx
c00227a4:	31 db                	xor    ebx,ebx
c00227a6:	83 ec 20             	sub    esp,0x20
c00227a9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00227ad:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00227b1:	c1 e0 02             	shl    eax,0x2
c00227b4:	50                   	push   eax
c00227b5:	6a 00                	push   0x0
c00227b7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00227bb:	e8 b8 df fd ff       	call   c0000778 <memset>
c00227c0:	83 c4 10             	add    esp,0x10
c00227c3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00227c7:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c00227ce:	85 c0                	test   eax,eax
c00227d0:	0f 84 d7 00 00 00    	je     c00228ad <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00227d6:	83 ec 0c             	sub    esp,0xc
c00227d9:	50                   	push   eax
c00227da:	e8 a5 fb ff ff       	call   c0022384 <SoundChannel::paused()>
c00227df:	83 c4 10             	add    esp,0x10
c00227e2:	84 c0                	test   al,al
c00227e4:	0f 85 c3 00 00 00    	jne    c00228ad <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00227ea:	83 ec 0c             	sub    esp,0xc
c00227ed:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00227f4:	e8 19 fa ff ff       	call   c0022212 <SoundChannel::getVolume()>
c00227f9:	83 c4 10             	add    esp,0x10
c00227fc:	85 c0                	test   eax,eax
c00227fe:	0f 84 a9 00 00 00    	je     c00228ad <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022804:	83 ec 0c             	sub    esp,0xc
c0022807:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c002280e:	e8 ff f9 ff ff       	call   c0022212 <SoundChannel::getVolume()>
c0022813:	83 ec 0c             	sub    esp,0xc
c0022816:	50                   	push   eax
c0022817:	e8 bb 4a 00 00       	call   c00272d7 <__floatsisf>
c002281c:	59                   	pop    ecx
c002281d:	5d                   	pop    ebp
c002281e:	31 ed                	xor    ebp,ebp
c0022820:	68 00 00 c8 42       	push   0x42c80000
c0022825:	50                   	push   eax
c0022826:	e8 81 48 00 00       	call   c00270ac <__divsf3>
c002282b:	83 c4 10             	add    esp,0x10
c002282e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022832:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0022836:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c002283c:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0022840:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022847:	e8 60 fb ff ff       	call   c00223ac <SoundChannel::unbuffer(float*, int, int)>
c002284c:	83 c4 20             	add    esp,0x20
c002284f:	89 c1                	mov    ecx,eax
c0022851:	39 cd                	cmp    ebp,ecx
c0022853:	7d 52                	jge    c00228a7 <SoundDevice::getAudio(int, float*, float*)+0x107>
c0022855:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0022859:	50                   	push   eax
c002285a:	50                   	push   eax
c002285b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c002285f:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0022862:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022866:	e8 7e 46 00 00       	call   c0026ee9 <__mulsf3>
c002286b:	5a                   	pop    edx
c002286c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022870:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c0022876:	e8 5c 4a 00 00       	call   c00272d7 <__floatsisf>
c002287b:	59                   	pop    ecx
c002287c:	5a                   	pop    edx
c002287d:	50                   	push   eax
c002287e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022882:	e8 25 48 00 00       	call   c00270ac <__divsf3>
c0022887:	59                   	pop    ecx
c0022888:	5a                   	pop    edx
c0022889:	50                   	push   eax
c002288a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002288e:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0022891:	e8 30 43 00 00       	call   c0026bc6 <__addsf3>
c0022896:	83 c4 10             	add    esp,0x10
c0022899:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002289d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00228a1:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c00228a4:	45                   	inc    ebp
c00228a5:	eb aa                	jmp    c0022851 <SoundDevice::getAudio(int, float*, float*)+0xb1>
c00228a7:	39 cf                	cmp    edi,ecx
c00228a9:	7e 02                	jle    c00228ad <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00228ab:	89 cf                	mov    edi,ecx
c00228ad:	43                   	inc    ebx
c00228ae:	83 fb 20             	cmp    ebx,0x20
c00228b1:	0f 85 10 ff ff ff    	jne    c00227c7 <SoundDevice::getAudio(int, float*, float*)+0x27>
c00228b7:	83 c4 1c             	add    esp,0x1c
c00228ba:	89 f8                	mov    eax,edi
c00228bc:	5b                   	pop    ebx
c00228bd:	5e                   	pop    esi
c00228be:	5f                   	pop    edi
c00228bf:	5d                   	pop    ebp
c00228c0:	c3                   	ret    
c00228c1:	90                   	nop

c00228c2 <PCI::open(int, int, void*)>:
c00228c2:	83 ec 18             	sub    esp,0x18
c00228c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00228c9:	8b 10                	mov    edx,DWORD PTR [eax]
c00228cb:	50                   	push   eax
c00228cc:	ff 52 18             	call   DWORD PTR [edx+0x18]
c00228cf:	31 c0                	xor    eax,eax
c00228d1:	83 c4 1c             	add    esp,0x1c
c00228d4:	c3                   	ret    
c00228d5:	90                   	nop

c00228d6 <PCI::close(int, int, void*)>:
c00228d6:	31 c0                	xor    eax,eax
c00228d8:	c3                   	ret    
c00228d9:	90                   	nop

c00228da <PCI::PCI()>:
c00228da:	83 ec 0c             	sub    esp,0xc
c00228dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228e1:	83 ec 08             	sub    esp,0x8
c00228e4:	68 f0 c9 02 c0       	push   0xc002c9f0
c00228e9:	50                   	push   eax
c00228ea:	e8 f5 12 ff ff       	call   c0013be4 <Bus::Bus(char const*)>
c00228ef:	83 c4 10             	add    esp,0x10
c00228f2:	ba 5c ca 02 c0       	mov    edx,0xc002ca5c
c00228f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228fb:	89 10                	mov    DWORD PTR [eax],edx
c00228fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022901:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022907:	0f b6 d0             	movzx  edx,al
c002290a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002290e:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0022915:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022919:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002291f:	0f b6 d0             	movzx  edx,al
c0022922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022926:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c002292b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002292f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022935:	8d 50 01             	lea    edx,[eax+0x1]
c0022938:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002293c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022942:	0f b6 d0             	movzx  edx,al
c0022945:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022949:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002294d:	83 c9 c0             	or     ecx,0xffffffc0
c0022950:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022954:	90                   	nop
c0022955:	83 c4 0c             	add    esp,0xc
c0022958:	c3                   	ret    
c0022959:	90                   	nop

c002295a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002295a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002295e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022963:	89 ca                	mov    edx,ecx
c0022965:	c1 e0 10             	shl    eax,0x10
c0022968:	81 e2 fc 00 00 00    	and    edx,0xfc
c002296e:	09 d0                	or     eax,edx
c0022970:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0022975:	c1 e2 08             	shl    edx,0x8
c0022978:	09 d0                	or     eax,edx
c002297a:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c002297f:	c1 e2 0b             	shl    edx,0xb
c0022982:	09 d0                	or     eax,edx
c0022984:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022989:	0d 00 00 00 80       	or     eax,0x80000000
c002298e:	ef                   	out    dx,eax
c002298f:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022994:	ed                   	in     eax,dx
c0022995:	83 e1 02             	and    ecx,0x2
c0022998:	0f b6 c9             	movzx  ecx,cl
c002299b:	c1 e1 03             	shl    ecx,0x3
c002299e:	d3 e8                	shr    eax,cl
c00229a0:	c3                   	ret    
c00229a1:	90                   	nop

c00229a2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c00229a2:	6a 00                	push   0x0
c00229a4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229a9:	50                   	push   eax
c00229aa:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229af:	50                   	push   eax
c00229b0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229b5:	50                   	push   eax
c00229b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00229ba:	e8 9b ff ff ff       	call   c002295a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00229bf:	83 c4 14             	add    esp,0x14
c00229c2:	c3                   	ret    
c00229c3:	90                   	nop

c00229c4 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c00229c4:	6a 0e                	push   0xe
c00229c6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229cb:	50                   	push   eax
c00229cc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229d1:	50                   	push   eax
c00229d2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229d7:	50                   	push   eax
c00229d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00229dc:	e8 79 ff ff ff       	call   c002295a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00229e1:	83 c4 14             	add    esp,0x14
c00229e4:	0f b6 c0             	movzx  eax,al
c00229e7:	c3                   	ret    

c00229e8 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c00229e8:	55                   	push   ebp
c00229e9:	57                   	push   edi
c00229ea:	56                   	push   esi
c00229eb:	53                   	push   ebx
c00229ec:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c00229f1:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c00229f6:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c00229fb:	6a 0a                	push   0xa
c00229fd:	56                   	push   esi
c00229fe:	55                   	push   ebp
c00229ff:	57                   	push   edi
c0022a00:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022a04:	e8 51 ff ff ff       	call   c002295a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a09:	6a 0a                	push   0xa
c0022a0b:	89 c3                	mov    ebx,eax
c0022a0d:	56                   	push   esi
c0022a0e:	0f b6 db             	movzx  ebx,bl
c0022a11:	55                   	push   ebp
c0022a12:	57                   	push   edi
c0022a13:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022a17:	e8 3e ff ff ff       	call   c002295a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a1c:	83 c4 28             	add    esp,0x28
c0022a1f:	25 00 ff 00 00       	and    eax,0xff00
c0022a24:	09 d8                	or     eax,ebx
c0022a26:	5b                   	pop    ebx
c0022a27:	5e                   	pop    esi
c0022a28:	5f                   	pop    edi
c0022a29:	5d                   	pop    ebp
c0022a2a:	c3                   	ret    
c0022a2b:	90                   	nop

c0022a2c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0022a2c:	6a 08                	push   0x8
c0022a2e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a33:	50                   	push   eax
c0022a34:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a39:	50                   	push   eax
c0022a3a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a3f:	50                   	push   eax
c0022a40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a44:	e8 11 ff ff ff       	call   c002295a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a49:	83 c4 14             	add    esp,0x14
c0022a4c:	0f b6 c4             	movzx  eax,ah
c0022a4f:	c3                   	ret    

c0022a50 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0022a50:	6a 08                	push   0x8
c0022a52:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a57:	50                   	push   eax
c0022a58:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a5d:	50                   	push   eax
c0022a5e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a63:	50                   	push   eax
c0022a64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a68:	e8 ed fe ff ff       	call   c002295a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a6d:	83 c4 14             	add    esp,0x14
c0022a70:	c3                   	ret    
c0022a71:	90                   	nop

c0022a72 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0022a72:	6a 3c                	push   0x3c
c0022a74:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a79:	50                   	push   eax
c0022a7a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a7f:	50                   	push   eax
c0022a80:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a85:	50                   	push   eax
c0022a86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a8a:	e8 cb fe ff ff       	call   c002295a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a8f:	83 c4 14             	add    esp,0x14
c0022a92:	c3                   	ret    
c0022a93:	90                   	nop

c0022a94 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0022a94:	6a 18                	push   0x18
c0022a96:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a9b:	50                   	push   eax
c0022a9c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022aa1:	50                   	push   eax
c0022aa2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022aa7:	50                   	push   eax
c0022aa8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022aac:	e8 a9 fe ff ff       	call   c002295a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ab1:	83 c4 14             	add    esp,0x14
c0022ab4:	0f b6 c4             	movzx  eax,ah
c0022ab7:	c3                   	ret    

c0022ab8 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022ab8:	55                   	push   ebp
c0022ab9:	57                   	push   edi
c0022aba:	56                   	push   esi
c0022abb:	53                   	push   ebx
c0022abc:	50                   	push   eax
c0022abd:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0022ac1:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c0022ac6:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022acb:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0022ad0:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0022ad7:	8d 43 12             	lea    eax,[ebx+0x12]
c0022ada:	83 c3 10             	add    ebx,0x10
c0022add:	0f b6 c0             	movzx  eax,al
c0022ae0:	0f b6 db             	movzx  ebx,bl
c0022ae3:	50                   	push   eax
c0022ae4:	51                   	push   ecx
c0022ae5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0022ae9:	57                   	push   edi
c0022aea:	55                   	push   ebp
c0022aeb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0022aef:	e8 66 fe ff ff       	call   c002295a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022af4:	53                   	push   ebx
c0022af5:	89 c6                	mov    esi,eax
c0022af7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0022afb:	c1 e6 10             	shl    esi,0x10
c0022afe:	51                   	push   ecx
c0022aff:	57                   	push   edi
c0022b00:	55                   	push   ebp
c0022b01:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022b05:	e8 50 fe ff ff       	call   c002295a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b0a:	83 c4 2c             	add    esp,0x2c
c0022b0d:	0f b7 c0             	movzx  eax,ax
c0022b10:	5b                   	pop    ebx
c0022b11:	09 f0                	or     eax,esi
c0022b13:	5e                   	pop    esi
c0022b14:	5f                   	pop    edi
c0022b15:	5d                   	pop    ebp
c0022b16:	c3                   	ret    
c0022b17:	90                   	nop

c0022b18 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0022b18:	53                   	push   ebx
c0022b19:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022b1e:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0022b23:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022b27:	c1 e1 10             	shl    ecx,0x10
c0022b2a:	25 fc 00 00 00       	and    eax,0xfc
c0022b2f:	09 c1                	or     ecx,eax
c0022b31:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b36:	c1 e0 08             	shl    eax,0x8
c0022b39:	09 c1                	or     ecx,eax
c0022b3b:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0022b40:	c1 e0 0b             	shl    eax,0xb
c0022b43:	09 c1                	or     ecx,eax
c0022b45:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0022b4b:	89 c8                	mov    eax,ecx
c0022b4d:	ef                   	out    dx,eax
c0022b4e:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022b53:	ed                   	in     eax,dx
c0022b54:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0022b59:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0022b5e:	74 0a                	je     c0022b6a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0022b60:	0f b7 d8             	movzx  ebx,ax
c0022b63:	89 d0                	mov    eax,edx
c0022b65:	c1 e0 10             	shl    eax,0x10
c0022b68:	eb 05                	jmp    c0022b6f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0022b6a:	66 31 c0             	xor    ax,ax
c0022b6d:	89 d3                	mov    ebx,edx
c0022b6f:	09 c3                	or     ebx,eax
c0022b71:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022b76:	89 c8                	mov    eax,ecx
c0022b78:	ef                   	out    dx,eax
c0022b79:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022b7e:	89 d8                	mov    eax,ebx
c0022b80:	ef                   	out    dx,eax
c0022b81:	5b                   	pop    ebx
c0022b82:	c3                   	ret    
c0022b83:	90                   	nop

c0022b84 <PCI::checkBus(unsigned char)>:
c0022b84:	56                   	push   esi
c0022b85:	53                   	push   ebx
c0022b86:	31 db                	xor    ebx,ebx
c0022b88:	51                   	push   ecx
c0022b89:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022b8e:	52                   	push   edx
c0022b8f:	53                   	push   ebx
c0022b90:	43                   	inc    ebx
c0022b91:	56                   	push   esi
c0022b92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022b96:	e8 2b 03 00 00       	call   c0022ec6 <PCI::checkDevice(unsigned char, unsigned char)>
c0022b9b:	83 c4 10             	add    esp,0x10
c0022b9e:	83 fb 20             	cmp    ebx,0x20
c0022ba1:	75 eb                	jne    c0022b8e <PCI::checkBus(unsigned char)+0xa>
c0022ba3:	58                   	pop    eax
c0022ba4:	5b                   	pop    ebx
c0022ba5:	5e                   	pop    esi
c0022ba6:	c3                   	ret    
c0022ba7:	90                   	nop

c0022ba8 <PCI::foundDevice(PCIDeviceInfo)>:
c0022ba8:	55                   	push   ebp
c0022ba9:	57                   	push   edi
c0022baa:	56                   	push   esi
c0022bab:	53                   	push   ebx
c0022bac:	83 ec 1c             	sub    esp,0x1c
c0022baf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022bb3:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022bb9:	0f 84 52 01 00 00    	je     c0022d11 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022bbf:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0022bc3:	66 81 f9 06 04       	cmp    cx,0x406
c0022bc8:	75 2c                	jne    c0022bf6 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022bca:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0022bcf:	50                   	push   eax
c0022bd0:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022bd5:	50                   	push   eax
c0022bd6:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022bdb:	50                   	push   eax
c0022bdc:	56                   	push   esi
c0022bdd:	e8 b2 fe ff ff       	call   c0022a94 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022be2:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022be6:	0f b6 c0             	movzx  eax,al
c0022be9:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022bed:	83 c4 2c             	add    esp,0x2c
c0022bf0:	5b                   	pop    ebx
c0022bf1:	5e                   	pop    esi
c0022bf2:	5f                   	pop    edi
c0022bf3:	5d                   	pop    ebp
c0022bf4:	eb 8e                	jmp    c0022b84 <PCI::checkBus(unsigned char)>
c0022bf6:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022bfa:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022c00:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022c04:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022c08:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022c0c:	88 d3                	mov    bl,dl
c0022c0e:	85 c0                	test   eax,eax
c0022c10:	74 33                	je     c0022c45 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022c12:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022c15:	85 d2                	test   edx,edx
c0022c17:	74 28                	je     c0022c41 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022c19:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022c1f:	31 ef                	xor    edi,ebp
c0022c21:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0022c27:	75 18                	jne    c0022c41 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022c29:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022c2d:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022c33:	75 0c                	jne    c0022c41 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022c35:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022c3b:	0f 84 d0 00 00 00    	je     c0022d11 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022c41:	8b 00                	mov    eax,DWORD PTR [eax]
c0022c43:	eb c9                	jmp    c0022c0e <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0022c45:	66 81 f9 01 06       	cmp    cx,0x601
c0022c4a:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0022c4e:	75 19                	jne    c0022c69 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0022c50:	83 ec 0c             	sub    esp,0xc
c0022c53:	68 64 01 00 00       	push   0x164
c0022c58:	e8 e3 cb fe ff       	call   c000f840 <malloc>
c0022c5d:	89 c5                	mov    ebp,eax
c0022c5f:	89 04 24             	mov    DWORD PTR [esp],eax
c0022c62:	e8 95 0f 00 00       	call   c0023bfc <SATABus::SATABus()>
c0022c67:	eb 1e                	jmp    c0022c87 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0022c69:	66 81 f9 01 01       	cmp    cx,0x101
c0022c6e:	75 60                	jne    c0022cd0 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0022c70:	83 ec 0c             	sub    esp,0xc
c0022c73:	68 70 02 00 00       	push   0x270
c0022c78:	e8 c3 cb fe ff       	call   c000f840 <malloc>
c0022c7d:	89 c5                	mov    ebp,eax
c0022c7f:	89 04 24             	mov    DWORD PTR [esp],eax
c0022c82:	e8 03 03 00 00       	call   c0022f8a <IDE::IDE()>
c0022c87:	58                   	pop    eax
c0022c88:	5a                   	pop    edx
c0022c89:	55                   	push   ebp
c0022c8a:	56                   	push   esi
c0022c8b:	e8 e0 16 ff ff       	call   c0014370 <Device::addChild(Device*)>
c0022c90:	83 ec 1c             	sub    esp,0x1c
c0022c93:	b9 09 00 00 00       	mov    ecx,0x9
c0022c98:	fc                   	cld    
c0022c99:	89 e7                	mov    edi,esp
c0022c9b:	89 de                	mov    esi,ebx
c0022c9d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022c9f:	55                   	push   ebp
c0022ca0:	e8 d5 15 ff ff       	call   c001427a <Device::preOpenPCI(PCIDeviceInfo)>
c0022ca5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022ca8:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022cac:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022cb4:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022cbc:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022cc4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022cc7:	83 c4 4c             	add    esp,0x4c
c0022cca:	5b                   	pop    ebx
c0022ccb:	5e                   	pop    esi
c0022ccc:	5f                   	pop    edi
c0022ccd:	5d                   	pop    ebp
c0022cce:	ff e0                	jmp    eax
c0022cd0:	83 ec 0c             	sub    esp,0xc
c0022cd3:	68 58 01 00 00       	push   0x158
c0022cd8:	e8 63 cb fe ff       	call   c000f840 <malloc>
c0022cdd:	89 c5                	mov    ebp,eax
c0022cdf:	58                   	pop    eax
c0022ce0:	5a                   	pop    edx
c0022ce1:	68 f8 c9 02 c0       	push   0xc002c9f8
c0022ce6:	55                   	push   ebp
c0022ce7:	e8 7a 19 ff ff       	call   c0014666 <DriverlessDevice::DriverlessDevice(char const*)>
c0022cec:	59                   	pop    ecx
c0022ced:	5f                   	pop    edi
c0022cee:	55                   	push   ebp
c0022cef:	56                   	push   esi
c0022cf0:	e8 7b 16 ff ff       	call   c0014370 <Device::addChild(Device*)>
c0022cf5:	b9 09 00 00 00       	mov    ecx,0x9
c0022cfa:	fc                   	cld    
c0022cfb:	89 df                	mov    edi,ebx
c0022cfd:	89 de                	mov    esi,ebx
c0022cff:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022d01:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022d05:	83 c4 2c             	add    esp,0x2c
c0022d08:	5b                   	pop    ebx
c0022d09:	5e                   	pop    esi
c0022d0a:	5f                   	pop    edi
c0022d0b:	5d                   	pop    ebp
c0022d0c:	e9 69 15 ff ff       	jmp    c001427a <Device::preOpenPCI(PCIDeviceInfo)>
c0022d11:	83 c4 1c             	add    esp,0x1c
c0022d14:	5b                   	pop    ebx
c0022d15:	5e                   	pop    esi
c0022d16:	5f                   	pop    edi
c0022d17:	5d                   	pop    ebp
c0022d18:	c3                   	ret    
c0022d19:	90                   	nop

c0022d1a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022d1a:	55                   	push   ebp
c0022d1b:	57                   	push   edi
c0022d1c:	56                   	push   esi
c0022d1d:	53                   	push   ebx
c0022d1e:	83 ec 5c             	sub    esp,0x5c
c0022d21:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0022d25:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022d29:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0022d2d:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0022d32:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022d36:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0022d3a:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0022d3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022d43:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0022d48:	6a 0c                	push   0xc
c0022d4a:	55                   	push   ebp
c0022d4b:	53                   	push   ebx
c0022d4c:	57                   	push   edi
c0022d4d:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0022d54:	e8 01 fc ff ff       	call   c002295a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d59:	55                   	push   ebp
c0022d5a:	53                   	push   ebx
c0022d5b:	57                   	push   edi
c0022d5c:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022d63:	e8 80 fc ff ff       	call   c00229e8 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022d68:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0022d6d:	83 c4 24             	add    esp,0x24
c0022d70:	55                   	push   ebp
c0022d71:	53                   	push   ebx
c0022d72:	57                   	push   edi
c0022d73:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022d77:	e8 f6 fc ff ff       	call   c0022a72 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022d7c:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0022d80:	6a 3c                	push   0x3c
c0022d82:	55                   	push   ebp
c0022d83:	53                   	push   ebx
c0022d84:	57                   	push   edi
c0022d85:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022d8c:	e8 c9 fb ff ff       	call   c002295a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d91:	0f b6 c4             	movzx  eax,ah
c0022d94:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022d98:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022d9c:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0022da0:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0022da5:	83 c4 24             	add    esp,0x24
c0022da8:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022dae:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022db5:	74 6c                	je     c0022e23 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022db7:	31 f6                	xor    esi,esi
c0022db9:	8b 15 08 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e408
c0022dbf:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022dc5:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c0022dcb:	7e 56                	jle    c0022e23 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022dcd:	8d 14 f2             	lea    edx,[edx+esi*8]
c0022dd0:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022dd7:	39 cb                	cmp    ebx,ecx
c0022dd9:	75 45                	jne    c0022e20 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022ddb:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022de2:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0022de6:	75 38                	jne    c0022e20 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022de8:	83 ec 0c             	sub    esp,0xc
c0022deb:	68 12 ca 02 c0       	push   0xc002ca12
c0022df0:	e8 55 01 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0022df5:	8b 15 08 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e408
c0022dfb:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022e01:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0022e09:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0022e0d:	52                   	push   edx
c0022e0e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022e12:	53                   	push   ebx
c0022e13:	68 37 ca 02 c0       	push   0xc002ca37
c0022e18:	e8 2d 01 ff ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0022e1d:	83 c4 20             	add    esp,0x20
c0022e20:	46                   	inc    esi
c0022e21:	eb 96                	jmp    c0022db9 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0022e23:	31 d2                	xor    edx,edx
c0022e25:	83 ec 0c             	sub    esp,0xc
c0022e28:	55                   	push   ebp
c0022e29:	53                   	push   ebx
c0022e2a:	57                   	push   edi
c0022e2b:	52                   	push   edx
c0022e2c:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022e30:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022e37:	e8 7c fc ff ff       	call   c0022ab8 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022e3c:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0022e40:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022e44:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022e48:	42                   	inc    edx
c0022e49:	83 c4 20             	add    esp,0x20
c0022e4c:	83 fa 06             	cmp    edx,0x6
c0022e4f:	75 d4                	jne    c0022e25 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0022e51:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0022e55:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0022e59:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0022e5d:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0022e61:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0022e65:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0022e69:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0022e6e:	86 e0                	xchg   al,ah
c0022e70:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0022e75:	55                   	push   ebp
c0022e76:	53                   	push   ebx
c0022e77:	57                   	push   edi
c0022e78:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022e7c:	e8 ab fb ff ff       	call   c0022a2c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022e81:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022e85:	55                   	push   ebp
c0022e86:	53                   	push   ebx
c0022e87:	57                   	push   edi
c0022e88:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022e8f:	e8 0e fb ff ff       	call   c00229a2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022e94:	83 ec 0c             	sub    esp,0xc
c0022e97:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0022e9c:	b9 09 00 00 00       	mov    ecx,0x9
c0022ea1:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0022ea5:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0022ea9:	fc                   	cld    
c0022eaa:	89 e7                	mov    edi,esp
c0022eac:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022eae:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022eb5:	e8 ee fc ff ff       	call   c0022ba8 <PCI::foundDevice(PCIDeviceInfo)>
c0022eba:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022ec0:	5b                   	pop    ebx
c0022ec1:	5e                   	pop    esi
c0022ec2:	5f                   	pop    edi
c0022ec3:	5d                   	pop    ebp
c0022ec4:	c3                   	ret    
c0022ec5:	90                   	nop

c0022ec6 <PCI::checkDevice(unsigned char, unsigned char)>:
c0022ec6:	55                   	push   ebp
c0022ec7:	57                   	push   edi
c0022ec8:	56                   	push   esi
c0022ec9:	53                   	push   ebx
c0022eca:	83 ec 0c             	sub    esp,0xc
c0022ecd:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022ed1:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022ed6:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022edb:	6a 00                	push   0x0
c0022edd:	56                   	push   esi
c0022ede:	57                   	push   edi
c0022edf:	55                   	push   ebp
c0022ee0:	e8 bd fa ff ff       	call   c00229a2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022ee5:	6a 00                	push   0x0
c0022ee7:	56                   	push   esi
c0022ee8:	57                   	push   edi
c0022ee9:	55                   	push   ebp
c0022eea:	e8 2b fe ff ff       	call   c0022d1a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022eef:	83 c4 20             	add    esp,0x20
c0022ef2:	6a 00                	push   0x0
c0022ef4:	56                   	push   esi
c0022ef5:	57                   	push   edi
c0022ef6:	55                   	push   ebp
c0022ef7:	e8 c8 fa ff ff       	call   c00229c4 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022efc:	83 c4 10             	add    esp,0x10
c0022eff:	84 c0                	test   al,al
c0022f01:	79 27                	jns    c0022f2a <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0022f03:	bb 01 00 00 00       	mov    ebx,0x1
c0022f08:	53                   	push   ebx
c0022f09:	56                   	push   esi
c0022f0a:	57                   	push   edi
c0022f0b:	55                   	push   ebp
c0022f0c:	e8 91 fa ff ff       	call   c00229a2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022f11:	83 c4 10             	add    esp,0x10
c0022f14:	66 40                	inc    ax
c0022f16:	74 0c                	je     c0022f24 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0022f18:	53                   	push   ebx
c0022f19:	56                   	push   esi
c0022f1a:	57                   	push   edi
c0022f1b:	55                   	push   ebp
c0022f1c:	e8 f9 fd ff ff       	call   c0022d1a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022f21:	83 c4 10             	add    esp,0x10
c0022f24:	43                   	inc    ebx
c0022f25:	83 fb 08             	cmp    ebx,0x8
c0022f28:	75 de                	jne    c0022f08 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0022f2a:	83 c4 0c             	add    esp,0xc
c0022f2d:	5b                   	pop    ebx
c0022f2e:	5e                   	pop    esi
c0022f2f:	5f                   	pop    edi
c0022f30:	5d                   	pop    ebp
c0022f31:	c3                   	ret    

c0022f32 <PCI::detect()>:
c0022f32:	56                   	push   esi
c0022f33:	53                   	push   ebx
c0022f34:	53                   	push   ebx
c0022f35:	31 db                	xor    ebx,ebx
c0022f37:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022f3b:	6a 00                	push   0x0
c0022f3d:	6a 00                	push   0x0
c0022f3f:	6a 00                	push   0x0
c0022f41:	56                   	push   esi
c0022f42:	e8 7d fa ff ff       	call   c00229c4 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022f47:	83 c4 10             	add    esp,0x10
c0022f4a:	a8 80                	test   al,0x80
c0022f4c:	75 21                	jne    c0022f6f <PCI::detect()+0x3d>
c0022f4e:	51                   	push   ecx
c0022f4f:	51                   	push   ecx
c0022f50:	6a 00                	push   0x0
c0022f52:	56                   	push   esi
c0022f53:	e8 2c fc ff ff       	call   c0022b84 <PCI::checkBus(unsigned char)>
c0022f58:	83 c4 10             	add    esp,0x10
c0022f5b:	eb 24                	jmp    c0022f81 <PCI::detect()+0x4f>
c0022f5d:	52                   	push   edx
c0022f5e:	52                   	push   edx
c0022f5f:	53                   	push   ebx
c0022f60:	43                   	inc    ebx
c0022f61:	56                   	push   esi
c0022f62:	e8 1d fc ff ff       	call   c0022b84 <PCI::checkBus(unsigned char)>
c0022f67:	83 c4 10             	add    esp,0x10
c0022f6a:	83 fb 08             	cmp    ebx,0x8
c0022f6d:	74 12                	je     c0022f81 <PCI::detect()+0x4f>
c0022f6f:	53                   	push   ebx
c0022f70:	6a 00                	push   0x0
c0022f72:	6a 00                	push   0x0
c0022f74:	56                   	push   esi
c0022f75:	e8 28 fa ff ff       	call   c00229a2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022f7a:	83 c4 10             	add    esp,0x10
c0022f7d:	66 40                	inc    ax
c0022f7f:	74 dc                	je     c0022f5d <PCI::detect()+0x2b>
c0022f81:	58                   	pop    eax
c0022f82:	5b                   	pop    ebx
c0022f83:	5e                   	pop    esi
c0022f84:	c3                   	ret    
c0022f85:	90                   	nop

c0022f86 <IDE::close(int, int, void*)>:
c0022f86:	83 c8 ff             	or     eax,0xffffffff
c0022f89:	c3                   	ret    

c0022f8a <IDE::IDE()>:
c0022f8a:	83 ec 0c             	sub    esp,0xc
c0022f8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f91:	83 ec 08             	sub    esp,0x8
c0022f94:	68 80 ca 02 c0       	push   0xc002ca80
c0022f99:	50                   	push   eax
c0022f9a:	e8 5d 17 ff ff       	call   c00146fc <HardDiskController::HardDiskController(char const*)>
c0022f9f:	83 c4 10             	add    esp,0x10
c0022fa2:	ba c0 cc 02 c0       	mov    edx,0xc002ccc0
c0022fa7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fab:	89 10                	mov    DWORD PTR [eax],edx
c0022fad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fb1:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0022fb8:	90                   	nop
c0022fb9:	83 c4 0c             	add    esp,0xc
c0022fbc:	c3                   	ret    
c0022fbd:	90                   	nop

c0022fbe <IDE::prepareInterrupt(unsigned char)>:
c0022fbe:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022fc3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022fc7:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0022fcf:	c3                   	ret    

c0022fd0 <selectDrive(unsigned char, unsigned char)>:
c0022fd0:	c3                   	ret    
c0022fd1:	90                   	nop

c0022fd2 <IDE::getBase(unsigned char)>:
c0022fd2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0022fd7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022fdb:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0022fe3:	c3                   	ret    

c0022fe4 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0022fe4:	55                   	push   ebp
c0022fe5:	57                   	push   edi
c0022fe6:	56                   	push   esi
c0022fe7:	53                   	push   ebx
c0022fe8:	83 ec 1c             	sub    esp,0x1c
c0022feb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022fef:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022ff3:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0022ff6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022ffa:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022ffe:	80 f9 03             	cmp    cl,0x3
c0023001:	77 51                	ja     c0023054 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0023003:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023007:	0f b6 f2             	movzx  esi,dl
c002300a:	0f b6 db             	movzx  ebx,bl
c002300d:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023010:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0023014:	83 ca 80             	or     edx,0xffffff80
c0023017:	0f b6 d2             	movzx  edx,dl
c002301a:	52                   	push   edx
c002301b:	6a 0c                	push   0xc
c002301d:	56                   	push   esi
c002301e:	57                   	push   edi
c002301f:	e8 c0 ff ff ff       	call   c0022fe4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023024:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0023029:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002302d:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0023031:	ee                   	out    dx,al
c0023032:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0023037:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c002303b:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c002303f:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023043:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002304b:	83 c4 2c             	add    esp,0x2c
c002304e:	5b                   	pop    ebx
c002304f:	5e                   	pop    esi
c0023050:	5f                   	pop    edi
c0023051:	5d                   	pop    ebp
c0023052:	eb 90                	jmp    c0022fe4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023054:	80 fb 07             	cmp    bl,0x7
c0023057:	77 12                	ja     c002306b <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0023059:	0f b6 d2             	movzx  edx,dl
c002305c:	0f b6 db             	movzx  ebx,bl
c002305f:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0023067:	89 da                	mov    edx,ebx
c0023069:	eb 2f                	jmp    c002309a <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c002306b:	80 fb 0d             	cmp    bl,0xd
c002306e:	77 13                	ja     c0023083 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0023070:	0f b6 d2             	movzx  edx,dl
c0023073:	0f b6 db             	movzx  ebx,bl
c0023076:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c002307d:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0023081:	eb 17                	jmp    c002309a <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023083:	80 fb 15             	cmp    bl,0x15
c0023086:	77 13                	ja     c002309b <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0023088:	0f b6 d2             	movzx  edx,dl
c002308b:	0f b6 db             	movzx  ebx,bl
c002308e:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0023096:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c002309a:	ee                   	out    dx,al
c002309b:	83 c4 1c             	add    esp,0x1c
c002309e:	5b                   	pop    ebx
c002309f:	5e                   	pop    esi
c00230a0:	5f                   	pop    edi
c00230a1:	5d                   	pop    ebp
c00230a2:	c3                   	ret    
c00230a3:	90                   	nop

c00230a4 <IDE::read(unsigned char, unsigned char)>:
c00230a4:	55                   	push   ebp
c00230a5:	57                   	push   edi
c00230a6:	56                   	push   esi
c00230a7:	53                   	push   ebx
c00230a8:	83 ec 1c             	sub    esp,0x1c
c00230ab:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00230af:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00230b3:	8d 43 f8             	lea    eax,[ebx-0x8]
c00230b6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00230ba:	3c 03                	cmp    al,0x3
c00230bc:	77 43                	ja     c0023101 <IDE::read(unsigned char, unsigned char)+0x5d>
c00230be:	0f b6 f2             	movzx  esi,dl
c00230c1:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00230c4:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c00230c8:	83 c8 80             	or     eax,0xffffff80
c00230cb:	0f b6 c0             	movzx  eax,al
c00230ce:	50                   	push   eax
c00230cf:	6a 0c                	push   0xc
c00230d1:	56                   	push   esi
c00230d2:	57                   	push   edi
c00230d3:	e8 0c ff ff ff       	call   c0022fe4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00230d8:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c00230dd:	0f b6 c3             	movzx  eax,bl
c00230e0:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c00230e4:	ec                   	in     al,dx
c00230e5:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00230e9:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00230ee:	52                   	push   edx
c00230ef:	6a 0c                	push   0xc
c00230f1:	56                   	push   esi
c00230f2:	57                   	push   edi
c00230f3:	e8 ec fe ff ff       	call   c0022fe4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00230f8:	83 c4 20             	add    esp,0x20
c00230fb:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00230ff:	eb 49                	jmp    c002314a <IDE::read(unsigned char, unsigned char)+0xa6>
c0023101:	80 fb 07             	cmp    bl,0x7
c0023104:	77 12                	ja     c0023118 <IDE::read(unsigned char, unsigned char)+0x74>
c0023106:	0f b6 d2             	movzx  edx,dl
c0023109:	0f b6 c3             	movzx  eax,bl
c002310c:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0023114:	89 c2                	mov    edx,eax
c0023116:	eb 31                	jmp    c0023149 <IDE::read(unsigned char, unsigned char)+0xa5>
c0023118:	80 fb 0d             	cmp    bl,0xd
c002311b:	77 13                	ja     c0023130 <IDE::read(unsigned char, unsigned char)+0x8c>
c002311d:	0f b6 d2             	movzx  edx,dl
c0023120:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0023127:	0f b6 d3             	movzx  edx,bl
c002312a:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c002312e:	eb 19                	jmp    c0023149 <IDE::read(unsigned char, unsigned char)+0xa5>
c0023130:	31 c0                	xor    eax,eax
c0023132:	80 fb 15             	cmp    bl,0x15
c0023135:	77 13                	ja     c002314a <IDE::read(unsigned char, unsigned char)+0xa6>
c0023137:	0f b6 d2             	movzx  edx,dl
c002313a:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0023142:	0f b6 d3             	movzx  edx,bl
c0023145:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0023149:	ec                   	in     al,dx
c002314a:	83 c4 1c             	add    esp,0x1c
c002314d:	5b                   	pop    ebx
c002314e:	5e                   	pop    esi
c002314f:	5f                   	pop    edi
c0023150:	5d                   	pop    ebp
c0023151:	c3                   	ret    

c0023152 <IDE::waitInterrupt(unsigned char)>:
c0023152:	55                   	push   ebp
c0023153:	57                   	push   edi
c0023154:	56                   	push   esi
c0023155:	53                   	push   ebx
c0023156:	31 db                	xor    ebx,ebx
c0023158:	83 ec 0c             	sub    esp,0xc
c002315b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002315f:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0023164:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c002316c:	89 e8                	mov    eax,ebp
c002316e:	84 c0                	test   al,al
c0023170:	75 34                	jne    c00231a6 <IDE::waitInterrupt(unsigned char)+0x54>
c0023172:	52                   	push   edx
c0023173:	6a 0c                	push   0xc
c0023175:	56                   	push   esi
c0023176:	57                   	push   edi
c0023177:	e8 28 ff ff ff       	call   c00230a4 <IDE::read(unsigned char, unsigned char)>
c002317c:	83 c4 10             	add    esp,0x10
c002317f:	a8 01                	test   al,0x1
c0023181:	75 2b                	jne    c00231ae <IDE::waitInterrupt(unsigned char)+0x5c>
c0023183:	f6 c3 04             	test   bl,0x4
c0023186:	75 16                	jne    c002319e <IDE::waitInterrupt(unsigned char)+0x4c>
c0023188:	83 fb 32             	cmp    ebx,0x32
c002318b:	7e 11                	jle    c002319e <IDE::waitInterrupt(unsigned char)+0x4c>
c002318d:	50                   	push   eax
c002318e:	50                   	push   eax
c002318f:	6a 00                	push   0x0
c0023191:	68 80 96 98 00       	push   0x989680
c0023196:	e8 8b b1 ff ff       	call   c001e326 <nanoSleep(unsigned long long)>
c002319b:	83 c4 10             	add    esp,0x10
c002319e:	83 fb 3c             	cmp    ebx,0x3c
c00231a1:	74 0b                	je     c00231ae <IDE::waitInterrupt(unsigned char)+0x5c>
c00231a3:	43                   	inc    ebx
c00231a4:	eb be                	jmp    c0023164 <IDE::waitInterrupt(unsigned char)+0x12>
c00231a6:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c00231ae:	83 c4 0c             	add    esp,0xc
c00231b1:	89 e8                	mov    eax,ebp
c00231b3:	5b                   	pop    ebx
c00231b4:	5e                   	pop    esi
c00231b5:	5f                   	pop    edi
c00231b6:	5d                   	pop    ebp
c00231b7:	c3                   	ret    

c00231b8 <ideChannel0IRQHandler(regs*, void*)>:
c00231b8:	83 ec 10             	sub    esp,0x10
c00231bb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00231bf:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c00231c6:	6a 07                	push   0x7
c00231c8:	6a 00                	push   0x0
c00231ca:	50                   	push   eax
c00231cb:	e8 d4 fe ff ff       	call   c00230a4 <IDE::read(unsigned char, unsigned char)>
c00231d0:	83 c4 1c             	add    esp,0x1c
c00231d3:	c3                   	ret    

c00231d4 <ideChannel1IRQHandler(regs*, void*)>:
c00231d4:	83 ec 10             	sub    esp,0x10
c00231d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00231db:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c00231e2:	6a 07                	push   0x7
c00231e4:	6a 01                	push   0x1
c00231e6:	50                   	push   eax
c00231e7:	e8 b8 fe ff ff       	call   c00230a4 <IDE::read(unsigned char, unsigned char)>
c00231ec:	83 c4 1c             	add    esp,0x1c
c00231ef:	c3                   	ret    

c00231f0 <IDE::enableIRQs(unsigned char, bool)>:
c00231f0:	57                   	push   edi
c00231f1:	56                   	push   esi
c00231f2:	be 04 00 00 00       	mov    esi,0x4
c00231f7:	53                   	push   ebx
c00231f8:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00231fd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023201:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0023206:	0f 94 c0             	sete   al
c0023209:	d1 e0                	shl    eax,1
c002320b:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0023212:	0f b6 c0             	movzx  eax,al
c0023215:	50                   	push   eax
c0023216:	6a 0c                	push   0xc
c0023218:	57                   	push   edi
c0023219:	53                   	push   ebx
c002321a:	e8 c5 fd ff ff       	call   c0022fe4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002321f:	83 c4 10             	add    esp,0x10
c0023222:	50                   	push   eax
c0023223:	6a 0c                	push   0xc
c0023225:	57                   	push   edi
c0023226:	53                   	push   ebx
c0023227:	e8 78 fe ff ff       	call   c00230a4 <IDE::read(unsigned char, unsigned char)>
c002322c:	83 c4 10             	add    esp,0x10
c002322f:	4e                   	dec    esi
c0023230:	75 f0                	jne    c0023222 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0023232:	5b                   	pop    ebx
c0023233:	5e                   	pop    esi
c0023234:	5f                   	pop    edi
c0023235:	c3                   	ret    

c0023236 <IDE::open(int, int, void*)>:
c0023236:	55                   	push   ebp
c0023237:	57                   	push   edi
c0023238:	56                   	push   esi
c0023239:	53                   	push   ebx
c002323a:	83 ec 1c             	sub    esp,0x1c
c002323d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0023241:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c002324a:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0023253:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c002325a:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0023261:	0f 85 b0 02 00 00    	jne    c0023517 <IDE::open(int, int, void*)+0x2e1>
c0023267:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c002326d:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0023271:	83 e0 7f             	and    eax,0x7f
c0023274:	3c 05                	cmp    al,0x5
c0023276:	74 04                	je     c002327c <IDE::open(int, int, void*)+0x46>
c0023278:	3c 0f                	cmp    al,0xf
c002327a:	75 32                	jne    c00232ae <IDE::open(int, int, void*)+0x78>
c002327c:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0023282:	83 e0 fc             	and    eax,0xfffffffc
c0023285:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c002328c:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0023292:	83 e0 fc             	and    eax,0xfffffffc
c0023295:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002329c:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c00232a2:	83 e0 fc             	and    eax,0xfffffffc
c00232a5:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00232ac:	eb 14                	jmp    c00232c2 <IDE::open(int, int, void*)+0x8c>
c00232ae:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00232b8:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00232c2:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c00232c9:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c00232d0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00232d4:	89 c6                	mov    esi,eax
c00232d6:	bf f8 0c 00 00       	mov    edi,0xcf8
c00232db:	c1 e6 10             	shl    esi,0x10
c00232de:	89 e8                	mov    eax,ebp
c00232e0:	89 fa                	mov    edx,edi
c00232e2:	c1 e0 0b             	shl    eax,0xb
c00232e5:	09 f0                	or     eax,esi
c00232e7:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c00232ee:	c1 e6 08             	shl    esi,0x8
c00232f1:	09 c6                	or     esi,eax
c00232f3:	89 f0                	mov    eax,esi
c00232f5:	0d 08 00 00 80       	or     eax,0x80000008
c00232fa:	ef                   	out    dx,eax
c00232fb:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0023300:	89 ca                	mov    edx,ecx
c0023302:	ed                   	in     eax,dx
c0023303:	c1 e8 10             	shr    eax,0x10
c0023306:	3d ff ff 00 00       	cmp    eax,0xffff
c002330b:	0f 84 f5 00 00 00    	je     c0023406 <IDE::open(int, int, void*)+0x1d0>
c0023311:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0023317:	89 fa                	mov    edx,edi
c0023319:	89 f0                	mov    eax,esi
c002331b:	ef                   	out    dx,eax
c002331c:	b0 fe                	mov    al,0xfe
c002331e:	89 ca                	mov    edx,ecx
c0023320:	ee                   	out    dx,al
c0023321:	89 f0                	mov    eax,esi
c0023323:	89 fa                	mov    edx,edi
c0023325:	ef                   	out    dx,eax
c0023326:	89 ca                	mov    edx,ecx
c0023328:	ed                   	in     eax,dx
c0023329:	3c fe                	cmp    al,0xfe
c002332b:	0f 85 a9 00 00 00    	jne    c00233da <IDE::open(int, int, void*)+0x1a4>
c0023331:	8b 15 08 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e408
c0023337:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c002333e:	74 33                	je     c0023373 <IDE::open(int, int, void*)+0x13d>
c0023340:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0023346:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c002334a:	40                   	inc    eax
c002334b:	83 ec 0c             	sub    esp,0xc
c002334e:	0f b6 c0             	movzx  eax,al
c0023351:	50                   	push   eax
c0023352:	55                   	push   ebp
c0023353:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023357:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c002335d:	51                   	push   ecx
c002335e:	e8 f1 4e ff ff       	call   c0018254 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0023363:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0023368:	83 c4 1c             	add    esp,0x1c
c002336b:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023371:	eb 0a                	jmp    c002337d <IDE::open(int, int, void*)+0x147>
c0023373:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c002337d:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0023384:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c002338b:	c1 e1 10             	shl    ecx,0x10
c002338e:	c1 e0 08             	shl    eax,0x8
c0023391:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023396:	09 c1                	or     ecx,eax
c0023398:	89 fa                	mov    edx,edi
c002339a:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c00233a1:	c1 e0 0b             	shl    eax,0xb
c00233a4:	09 c1                	or     ecx,eax
c00233a6:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c00233ac:	89 c8                	mov    eax,ecx
c00233ae:	ef                   	out    dx,eax
c00233af:	be fc 0c 00 00       	mov    esi,0xcfc
c00233b4:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c00233ba:	89 f2                	mov    edx,esi
c00233bc:	ee                   	out    dx,al
c00233bd:	89 c8                	mov    eax,ecx
c00233bf:	89 fa                	mov    edx,edi
c00233c1:	ef                   	out    dx,eax
c00233c2:	89 f2                	mov    edx,esi
c00233c4:	ed                   	in     eax,dx
c00233c5:	0f b6 c0             	movzx  eax,al
c00233c8:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c00233ce:	74 46                	je     c0023416 <IDE::open(int, int, void*)+0x1e0>
c00233d0:	83 ec 0c             	sub    esp,0xc
c00233d3:	68 98 ca 02 c0       	push   0xc002ca98
c00233d8:	eb 34                	jmp    c002340e <IDE::open(int, int, void*)+0x1d8>
c00233da:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c00233e3:	75 17                	jne    c00233fc <IDE::open(int, int, void*)+0x1c6>
c00233e5:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c00233ea:	74 07                	je     c00233f3 <IDE::open(int, int, void*)+0x1bd>
c00233ec:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c00233f1:	75 09                	jne    c00233fc <IDE::open(int, int, void*)+0x1c6>
c00233f3:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00233fa:	eb 1a                	jmp    c0023416 <IDE::open(int, int, void*)+0x1e0>
c00233fc:	83 ec 0c             	sub    esp,0xc
c00233ff:	68 a0 ca 02 c0       	push   0xc002caa0
c0023404:	eb 08                	jmp    c002340e <IDE::open(int, int, void*)+0x1d8>
c0023406:	83 ec 0c             	sub    esp,0xc
c0023409:	68 d1 ca 02 c0       	push   0xc002cad1
c002340e:	e8 e8 71 ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c0023413:	83 c4 10             	add    esp,0x10
c0023416:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c002341d:	79 1a                	jns    c0023439 <IDE::open(int, int, void*)+0x203>
c002341f:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0023425:	83 e0 fc             	and    eax,0xfffffffc
c0023428:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c002342f:	83 c0 08             	add    eax,0x8
c0023432:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0023439:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c002343f:	89 c2                	mov    edx,eax
c0023441:	83 e2 0f             	and    edx,0xf
c0023444:	66 83 fa 08          	cmp    dx,0x8
c0023448:	75 0a                	jne    c0023454 <IDE::open(int, int, void*)+0x21e>
c002344a:	83 e8 02             	sub    eax,0x2
c002344d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023454:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c002345a:	89 c2                	mov    edx,eax
c002345c:	83 e2 0f             	and    edx,0xf
c002345f:	66 83 fa 08          	cmp    dx,0x8
c0023463:	75 0a                	jne    c002346f <IDE::open(int, int, void*)+0x239>
c0023465:	83 e8 02             	sub    eax,0x2
c0023468:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c002346f:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0023476:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c002347d:	89 d0                	mov    eax,edx
c002347f:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023482:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023486:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c002348a:	8d 4a 01             	lea    ecx,[edx+0x1]
c002348d:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023492:	0f b6 c9             	movzx  ecx,cl
c0023495:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c002349c:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002349f:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00234a3:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c00234a7:	8d 50 02             	lea    edx,[eax+0x2]
c00234aa:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00234af:	0f b6 d2             	movzx  edx,dl
c00234b2:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00234b8:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00234bb:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00234bf:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c00234c3:	8d 48 03             	lea    ecx,[eax+0x3]
c00234c6:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00234cb:	0f b6 c9             	movzx  ecx,cl
c00234ce:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c00234d4:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00234d7:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00234db:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c00234df:	8d 50 04             	lea    edx,[eax+0x4]
c00234e2:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c00234e8:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00234ed:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c00234f4:	66 85 f6             	test   si,si
c00234f7:	74 3e                	je     c0023537 <IDE::open(int, int, void*)+0x301>
c00234f9:	0f b6 d2             	movzx  edx,dl
c00234fc:	83 c0 05             	add    eax,0x5
c00234ff:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023502:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023506:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c002350a:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0023510:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023515:	eb 20                	jmp    c0023537 <IDE::open(int, int, void*)+0x301>
c0023517:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023521:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c002352b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023532:	e9 02 ff ff ff       	jmp    c0023439 <IDE::open(int, int, void*)+0x203>
c0023537:	52                   	push   edx
c0023538:	52                   	push   edx
c0023539:	6a 00                	push   0x0
c002353b:	53                   	push   ebx
c002353c:	e8 7d fa ff ff       	call   c0022fbe <IDE::prepareInterrupt(unsigned char)>
c0023541:	59                   	pop    ecx
c0023542:	5e                   	pop    esi
c0023543:	6a 01                	push   0x1
c0023545:	53                   	push   ebx
c0023546:	e8 73 fa ff ff       	call   c0022fbe <IDE::prepareInterrupt(unsigned char)>
c002354b:	83 c4 0c             	add    esp,0xc
c002354e:	6a 00                	push   0x0
c0023550:	6a 00                	push   0x0
c0023552:	53                   	push   ebx
c0023553:	e8 98 fc ff ff       	call   c00231f0 <IDE::enableIRQs(unsigned char, bool)>
c0023558:	83 c4 0c             	add    esp,0xc
c002355b:	6a 00                	push   0x0
c002355d:	6a 01                	push   0x1
c002355f:	53                   	push   ebx
c0023560:	e8 8b fc ff ff       	call   c00231f0 <IDE::enableIRQs(unsigned char, bool)>
c0023565:	83 c4 10             	add    esp,0x10
c0023568:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c002356f:	74 40                	je     c00235b1 <IDE::open(int, int, void*)+0x37b>
c0023571:	83 ec 0c             	sub    esp,0xc
c0023574:	68 fb ca 02 c0       	push   0xc002cafb
c0023579:	e8 cc f9 fe ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c002357e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023581:	6a 01                	push   0x1
c0023583:	68 b8 31 02 c0       	push   0xc00231b8
c0023588:	6a 0e                	push   0xe
c002358a:	53                   	push   ebx
c002358b:	e8 64 0d ff ff       	call   c00142f4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023590:	83 c4 14             	add    esp,0x14
c0023593:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023599:	53                   	push   ebx
c002359a:	6a 01                	push   0x1
c002359c:	68 d4 31 02 c0       	push   0xc00231d4
c00235a1:	6a 0f                	push   0xf
c00235a3:	53                   	push   ebx
c00235a4:	e8 4b 0d ff ff       	call   c00142f4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00235a9:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c00235af:	eb 4a                	jmp    c00235fb <IDE::open(int, int, void*)+0x3c5>
c00235b1:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c00235bb:	50                   	push   eax
c00235bc:	6a 0f                	push   0xf
c00235be:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00235c4:	68 17 cb 02 c0       	push   0xc002cb17
c00235c9:	e8 7c f9 fe ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c00235ce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00235d1:	6a 00                	push   0x0
c00235d3:	68 b8 31 02 c0       	push   0xc00231b8
c00235d8:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00235de:	53                   	push   ebx
c00235df:	e8 10 0d ff ff       	call   c00142f4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00235e4:	83 c4 14             	add    esp,0x14
c00235e7:	53                   	push   ebx
c00235e8:	6a 00                	push   0x0
c00235ea:	68 d4 31 02 c0       	push   0xc00231d4
c00235ef:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c00235f5:	53                   	push   ebx
c00235f6:	e8 f9 0c ff ff       	call   c00142f4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00235fb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00235fd:	83 c4 20             	add    esp,0x20
c0023600:	83 ec 0c             	sub    esp,0xc
c0023603:	53                   	push   ebx
c0023604:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0023607:	83 c4 0c             	add    esp,0xc
c002360a:	6a 07                	push   0x7
c002360c:	6a 00                	push   0x0
c002360e:	53                   	push   ebx
c002360f:	e8 90 fa ff ff       	call   c00230a4 <IDE::read(unsigned char, unsigned char)>
c0023614:	83 c4 0c             	add    esp,0xc
c0023617:	6a 07                	push   0x7
c0023619:	6a 01                	push   0x1
c002361b:	53                   	push   ebx
c002361c:	e8 83 fa ff ff       	call   c00230a4 <IDE::read(unsigned char, unsigned char)>
c0023621:	83 c4 0c             	add    esp,0xc
c0023624:	6a 01                	push   0x1
c0023626:	6a 00                	push   0x0
c0023628:	53                   	push   ebx
c0023629:	e8 c2 fb ff ff       	call   c00231f0 <IDE::enableIRQs(unsigned char, bool)>
c002362e:	83 c4 0c             	add    esp,0xc
c0023631:	6a 01                	push   0x1
c0023633:	6a 01                	push   0x1
c0023635:	53                   	push   ebx
c0023636:	e8 b5 fb ff ff       	call   c00231f0 <IDE::enableIRQs(unsigned char, bool)>
c002363b:	83 c4 2c             	add    esp,0x2c
c002363e:	31 c0                	xor    eax,eax
c0023640:	5b                   	pop    ebx
c0023641:	5e                   	pop    esi
c0023642:	5f                   	pop    edi
c0023643:	5d                   	pop    ebp
c0023644:	c3                   	ret    
c0023645:	90                   	nop

c0023646 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0023646:	55                   	push   ebp
c0023647:	57                   	push   edi
c0023648:	56                   	push   esi
c0023649:	53                   	push   ebx
c002364a:	83 ec 1c             	sub    esp,0x1c
c002364d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0023651:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023655:	8d 50 f8             	lea    edx,[eax-0x8]
c0023658:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002365c:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0023660:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0023664:	80 fa 03             	cmp    dl,0x3
c0023667:	77 5d                	ja     c00236c6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0023669:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002366d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023671:	0f b6 db             	movzx  ebx,bl
c0023674:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0023677:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c002367b:	83 ca 80             	or     edx,0xffffff80
c002367e:	0f b6 d2             	movzx  edx,dl
c0023681:	52                   	push   edx
c0023682:	6a 0c                	push   0xc
c0023684:	53                   	push   ebx
c0023685:	56                   	push   esi
c0023686:	e8 59 f9 ff ff       	call   c0022fe4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002368b:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0023690:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023694:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023698:	0f b6 c0             	movzx  eax,al
c002369b:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c002369f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00236a1:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c00236a6:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c00236aa:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00236ae:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00236b2:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00236ba:	83 c4 2c             	add    esp,0x2c
c00236bd:	5b                   	pop    ebx
c00236be:	5e                   	pop    esi
c00236bf:	5f                   	pop    edi
c00236c0:	5d                   	pop    ebp
c00236c1:	e9 1e f9 ff ff       	jmp    c0022fe4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00236c6:	3c 07                	cmp    al,0x7
c00236c8:	77 10                	ja     c00236da <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c00236ca:	0f b6 db             	movzx  ebx,bl
c00236cd:	0f b6 d0             	movzx  edx,al
c00236d0:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c00236d8:	eb 2d                	jmp    c0023707 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00236da:	3c 0d                	cmp    al,0xd
c00236dc:	77 13                	ja     c00236f1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c00236de:	0f b6 db             	movzx  ebx,bl
c00236e1:	0f b6 c0             	movzx  eax,al
c00236e4:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c00236eb:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c00236ef:	eb 16                	jmp    c0023707 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00236f1:	3c 15                	cmp    al,0x15
c00236f3:	77 14                	ja     c0023709 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c00236f5:	0f b6 db             	movzx  ebx,bl
c00236f8:	0f b6 c0             	movzx  eax,al
c00236fb:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0023703:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0023707:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023709:	83 c4 1c             	add    esp,0x1c
c002370c:	5b                   	pop    ebx
c002370d:	5e                   	pop    esi
c002370e:	5f                   	pop    edi
c002370f:	5d                   	pop    ebp
c0023710:	c3                   	ret    
c0023711:	90                   	nop

c0023712 <IDE::detect()>:
c0023712:	55                   	push   ebp
c0023713:	57                   	push   edi
c0023714:	56                   	push   esi
c0023715:	53                   	push   ebx
c0023716:	81 ec 1c 02 00 00    	sub    esp,0x21c
c002371c:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0023723:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c002372a:	0f 85 be 02 00 00    	jne    c00239ee <IDE::detect()+0x2dc>
c0023730:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0023737:	31 f6                	xor    esi,esi
c0023739:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0023741:	31 ed                	xor    ebp,ebp
c0023743:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023747:	c1 e0 06             	shl    eax,0x6
c002374a:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0023752:	89 e8                	mov    eax,ebp
c0023754:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0023758:	c1 e0 04             	shl    eax,0x4
c002375b:	83 c8 a0             	or     eax,0xffffffa0
c002375e:	0f b6 c0             	movzx  eax,al
c0023761:	50                   	push   eax
c0023762:	6a 06                	push   0x6
c0023764:	56                   	push   esi
c0023765:	53                   	push   ebx
c0023766:	e8 79 f8 ff ff       	call   c0022fe4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002376b:	83 c4 0c             	add    esp,0xc
c002376e:	6a 0c                	push   0xc
c0023770:	56                   	push   esi
c0023771:	53                   	push   ebx
c0023772:	e8 2d f9 ff ff       	call   c00230a4 <IDE::read(unsigned char, unsigned char)>
c0023777:	83 c4 0c             	add    esp,0xc
c002377a:	6a 0c                	push   0xc
c002377c:	56                   	push   esi
c002377d:	53                   	push   ebx
c002377e:	e8 21 f9 ff ff       	call   c00230a4 <IDE::read(unsigned char, unsigned char)>
c0023783:	83 c4 0c             	add    esp,0xc
c0023786:	6a 0c                	push   0xc
c0023788:	56                   	push   esi
c0023789:	53                   	push   ebx
c002378a:	e8 15 f9 ff ff       	call   c00230a4 <IDE::read(unsigned char, unsigned char)>
c002378f:	83 c4 0c             	add    esp,0xc
c0023792:	6a 0c                	push   0xc
c0023794:	56                   	push   esi
c0023795:	53                   	push   ebx
c0023796:	e8 09 f9 ff ff       	call   c00230a4 <IDE::read(unsigned char, unsigned char)>
c002379b:	68 ec 00 00 00       	push   0xec
c00237a0:	6a 07                	push   0x7
c00237a2:	56                   	push   esi
c00237a3:	53                   	push   ebx
c00237a4:	e8 3b f8 ff ff       	call   c0022fe4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00237a9:	83 c4 1c             	add    esp,0x1c
c00237ac:	6a 0c                	push   0xc
c00237ae:	56                   	push   esi
c00237af:	53                   	push   ebx
c00237b0:	e8 ef f8 ff ff       	call   c00230a4 <IDE::read(unsigned char, unsigned char)>
c00237b5:	83 c4 0c             	add    esp,0xc
c00237b8:	6a 0c                	push   0xc
c00237ba:	56                   	push   esi
c00237bb:	53                   	push   ebx
c00237bc:	e8 e3 f8 ff ff       	call   c00230a4 <IDE::read(unsigned char, unsigned char)>
c00237c1:	83 c4 0c             	add    esp,0xc
c00237c4:	6a 0c                	push   0xc
c00237c6:	56                   	push   esi
c00237c7:	53                   	push   ebx
c00237c8:	e8 d7 f8 ff ff       	call   c00230a4 <IDE::read(unsigned char, unsigned char)>
c00237cd:	83 c4 0c             	add    esp,0xc
c00237d0:	6a 0c                	push   0xc
c00237d2:	56                   	push   esi
c00237d3:	53                   	push   ebx
c00237d4:	e8 cb f8 ff ff       	call   c00230a4 <IDE::read(unsigned char, unsigned char)>
c00237d9:	83 c4 0c             	add    esp,0xc
c00237dc:	6a 0c                	push   0xc
c00237de:	56                   	push   esi
c00237df:	53                   	push   ebx
c00237e0:	e8 bf f8 ff ff       	call   c00230a4 <IDE::read(unsigned char, unsigned char)>
c00237e5:	83 c4 10             	add    esp,0x10
c00237e8:	84 c0                	test   al,al
c00237ea:	0f 84 8b 01 00 00    	je     c002397b <IDE::detect()+0x269>
c00237f0:	31 ff                	xor    edi,edi
c00237f2:	50                   	push   eax
c00237f3:	6a 0c                	push   0xc
c00237f5:	56                   	push   esi
c00237f6:	53                   	push   ebx
c00237f7:	e8 a8 f8 ff ff       	call   c00230a4 <IDE::read(unsigned char, unsigned char)>
c00237fc:	83 c4 10             	add    esp,0x10
c00237ff:	a8 01                	test   al,0x1
c0023801:	0f 85 8e 01 00 00    	jne    c0023995 <IDE::detect()+0x283>
c0023807:	84 c0                	test   al,al
c0023809:	78 04                	js     c002380f <IDE::detect()+0xfd>
c002380b:	a8 08                	test   al,0x8
c002380d:	75 27                	jne    c0023836 <IDE::detect()+0x124>
c002380f:	47                   	inc    edi
c0023810:	81 ff 17 01 00 00    	cmp    edi,0x117
c0023816:	7e da                	jle    c00237f2 <IDE::detect()+0xe0>
c0023818:	50                   	push   eax
c0023819:	50                   	push   eax
c002381a:	6a 00                	push   0x0
c002381c:	68 40 4b 4c 00       	push   0x4c4b40
c0023821:	e8 00 ab ff ff       	call   c001e326 <nanoSleep(unsigned long long)>
c0023826:	83 c4 10             	add    esp,0x10
c0023829:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c002382f:	75 c1                	jne    c00237f2 <IDE::detect()+0xe0>
c0023831:	e9 5f 01 00 00       	jmp    c0023995 <IDE::detect()+0x283>
c0023836:	31 c9                	xor    ecx,ecx
c0023838:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c002383c:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0023840:	83 ec 0c             	sub    esp,0xc
c0023843:	68 80 00 00 00       	push   0x80
c0023848:	57                   	push   edi
c0023849:	6a 00                	push   0x0
c002384b:	56                   	push   esi
c002384c:	53                   	push   ebx
c002384d:	e8 f4 fd ff ff       	call   c0023646 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0023852:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0023857:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002385b:	89 d1                	mov    ecx,edx
c002385d:	c1 e0 06             	shl    eax,0x6
c0023860:	01 d8                	add    eax,ebx
c0023862:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0023869:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0023870:	89 f2                	mov    edx,esi
c0023872:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0023878:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c002387c:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0023882:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023886:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c002388d:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0023895:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c002389c:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c00238a4:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c00238aa:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c00238b1:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c00238b7:	8d 54 24 58          	lea    edx,[esp+0x58]
c00238bb:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00238bf:	83 c4 20             	add    esp,0x20
c00238c2:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c00238c5:	83 c0 02             	add    eax,0x2
c00238c8:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c00238ce:	83 c7 02             	add    edi,0x2
c00238d1:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c00238d4:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c00238da:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00238de:	75 e2                	jne    c00238c2 <IDE::detect()+0x1b0>
c00238e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00238e4:	c1 e0 06             	shl    eax,0x6
c00238e7:	01 d8                	add    eax,ebx
c00238e9:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00238ef:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00238f6:	66 c1 ea 09          	shr    dx,0x9
c00238fa:	83 e2 01             	and    edx,0x1
c00238fd:	84 c9                	test   cl,cl
c00238ff:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0023905:	75 2f                	jne    c0023936 <IDE::detect()+0x224>
c0023907:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c002390d:	85 c0                	test   eax,eax
c002390f:	74 66                	je     c0023977 <IDE::detect()+0x265>
c0023911:	50                   	push   eax
c0023912:	55                   	push   ebp
c0023913:	56                   	push   esi
c0023914:	68 33 cb 02 c0       	push   0xc002cb33
c0023919:	e8 2c f6 fe ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c002391e:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023925:	e8 16 bf fe ff       	call   c000f840 <malloc>
c002392a:	89 c7                	mov    edi,eax
c002392c:	89 04 24             	mov    DWORD PTR [esp],eax
c002392f:	e8 78 06 00 00       	call   c0023fac <ATA::ATA()>
c0023934:	eb 28                	jmp    c002395e <IDE::detect()+0x24c>
c0023936:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c002393c:	55                   	push   ebp
c002393d:	56                   	push   esi
c002393e:	68 62 cb 02 c0       	push   0xc002cb62
c0023943:	e8 02 f6 fe ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0023948:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c002394f:	e8 ec be fe ff       	call   c000f840 <malloc>
c0023954:	89 c7                	mov    edi,eax
c0023956:	89 04 24             	mov    DWORD PTR [esp],eax
c0023959:	e8 8e 0c 00 00       	call   c00245ec <ATAPI::ATAPI()>
c002395e:	5a                   	pop    edx
c002395f:	59                   	pop    ecx
c0023960:	57                   	push   edi
c0023961:	53                   	push   ebx
c0023962:	e8 09 0a ff ff       	call   c0014370 <Device::addChild(Device*)>
c0023967:	8b 07                	mov    eax,DWORD PTR [edi]
c0023969:	53                   	push   ebx
c002396a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002396e:	6a 00                	push   0x0
c0023970:	57                   	push   edi
c0023971:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023974:	83 c4 20             	add    esp,0x20
c0023977:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c002397b:	4d                   	dec    ebp
c002397c:	74 0a                	je     c0023988 <IDE::detect()+0x276>
c002397e:	bd 01 00 00 00       	mov    ebp,0x1
c0023983:	e9 bb fd ff ff       	jmp    c0023743 <IDE::detect()+0x31>
c0023988:	4e                   	dec    esi
c0023989:	74 63                	je     c00239ee <IDE::detect()+0x2dc>
c002398b:	be 01 00 00 00       	mov    esi,0x1
c0023990:	e9 ac fd ff ff       	jmp    c0023741 <IDE::detect()+0x2f>
c0023995:	50                   	push   eax
c0023996:	6a 04                	push   0x4
c0023998:	56                   	push   esi
c0023999:	53                   	push   ebx
c002399a:	e8 05 f7 ff ff       	call   c00230a4 <IDE::read(unsigned char, unsigned char)>
c002399f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00239a3:	83 c4 0c             	add    esp,0xc
c00239a6:	6a 05                	push   0x5
c00239a8:	56                   	push   esi
c00239a9:	53                   	push   ebx
c00239aa:	e8 f5 f6 ff ff       	call   c00230a4 <IDE::read(unsigned char, unsigned char)>
c00239af:	83 c4 10             	add    esp,0x10
c00239b2:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00239b6:	80 fa 14             	cmp    dl,0x14
c00239b9:	75 04                	jne    c00239bf <IDE::detect()+0x2ad>
c00239bb:	3c eb                	cmp    al,0xeb
c00239bd:	eb 07                	jmp    c00239c6 <IDE::detect()+0x2b4>
c00239bf:	3c 96                	cmp    al,0x96
c00239c1:	75 b8                	jne    c002397b <IDE::detect()+0x269>
c00239c3:	80 fa 69             	cmp    dl,0x69
c00239c6:	75 b3                	jne    c002397b <IDE::detect()+0x269>
c00239c8:	68 a1 00 00 00       	push   0xa1
c00239cd:	6a 07                	push   0x7
c00239cf:	56                   	push   esi
c00239d0:	53                   	push   ebx
c00239d1:	e8 0e f6 ff ff       	call   c0022fe4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00239d6:	5f                   	pop    edi
c00239d7:	58                   	pop    eax
c00239d8:	6a 00                	push   0x0
c00239da:	68 40 42 0f 00       	push   0xf4240
c00239df:	e8 42 a9 ff ff       	call   c001e326 <nanoSleep(unsigned long long)>
c00239e4:	83 c4 10             	add    esp,0x10
c00239e7:	b1 01                	mov    cl,0x1
c00239e9:	e9 4a fe ff ff       	jmp    c0023838 <IDE::detect()+0x126>
c00239ee:	81 c4 1c 02 00 00    	add    esp,0x21c
c00239f4:	5b                   	pop    ebx
c00239f5:	5e                   	pop    esi
c00239f6:	5f                   	pop    edi
c00239f7:	5d                   	pop    ebp
c00239f8:	c3                   	ret    
c00239f9:	90                   	nop

c00239fa <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c00239fa:	55                   	push   ebp
c00239fb:	57                   	push   edi
c00239fc:	56                   	push   esi
c00239fd:	53                   	push   ebx
c00239fe:	83 ec 1c             	sub    esp,0x1c
c0023a01:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023a05:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023a09:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0023a0d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0023a11:	88 c3                	mov    bl,al
c0023a13:	84 c0                	test   al,al
c0023a15:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023a19:	0f 84 67 01 00 00    	je     c0023b86 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c0023a1f:	83 ec 0c             	sub    esp,0xc
c0023a22:	68 93 cb 02 c0       	push   0xc002cb93
c0023a27:	e8 1e f5 fe ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0023a2c:	83 c4 10             	add    esp,0x10
c0023a2f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023a33:	3c 01                	cmp    al,0x1
c0023a35:	75 17                	jne    c0023a4e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0023a37:	83 ec 0c             	sub    esp,0xc
c0023a3a:	b3 13                	mov    bl,0x13
c0023a3c:	68 9f cb 02 c0       	push   0xc002cb9f
c0023a41:	e8 04 f5 fe ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0023a46:	83 c4 10             	add    esp,0x10
c0023a49:	e9 25 01 00 00       	jmp    c0023b73 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023a4e:	3c 02                	cmp    al,0x2
c0023a50:	0f 85 ef 00 00 00    	jne    c0023b45 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0023a56:	d1 e6                	shl    esi,1
c0023a58:	09 ee                	or     esi,ebp
c0023a5a:	52                   	push   edx
c0023a5b:	89 f0                	mov    eax,esi
c0023a5d:	6a 01                	push   0x1
c0023a5f:	0f b6 f0             	movzx  esi,al
c0023a62:	c1 e6 06             	shl    esi,0x6
c0023a65:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0023a6d:	50                   	push   eax
c0023a6e:	57                   	push   edi
c0023a6f:	e8 30 f6 ff ff       	call   c00230a4 <IDE::read(unsigned char, unsigned char)>
c0023a74:	83 c4 10             	add    esp,0x10
c0023a77:	89 c6                	mov    esi,eax
c0023a79:	a8 01                	test   al,0x1
c0023a7b:	74 12                	je     c0023a8f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0023a7d:	83 ec 0c             	sub    esp,0xc
c0023a80:	b3 07                	mov    bl,0x7
c0023a82:	68 b4 cb 02 c0       	push   0xc002cbb4
c0023a87:	e8 be f4 fe ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0023a8c:	83 c4 10             	add    esp,0x10
c0023a8f:	f7 c6 02 00 00 00    	test   esi,0x2
c0023a95:	74 12                	je     c0023aa9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0023a97:	83 ec 0c             	sub    esp,0xc
c0023a9a:	b3 03                	mov    bl,0x3
c0023a9c:	68 d2 cb 02 c0       	push   0xc002cbd2
c0023aa1:	e8 a4 f4 fe ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0023aa6:	83 c4 10             	add    esp,0x10
c0023aa9:	f7 c6 04 00 00 00    	test   esi,0x4
c0023aaf:	74 12                	je     c0023ac3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0023ab1:	83 ec 0c             	sub    esp,0xc
c0023ab4:	b3 14                	mov    bl,0x14
c0023ab6:	68 f2 cb 02 c0       	push   0xc002cbf2
c0023abb:	e8 8a f4 fe ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0023ac0:	83 c4 10             	add    esp,0x10
c0023ac3:	f7 c6 08 00 00 00    	test   esi,0x8
c0023ac9:	74 12                	je     c0023add <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0023acb:	83 ec 0c             	sub    esp,0xc
c0023ace:	b3 03                	mov    bl,0x3
c0023ad0:	68 d2 cb 02 c0       	push   0xc002cbd2
c0023ad5:	e8 70 f4 fe ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0023ada:	83 c4 10             	add    esp,0x10
c0023add:	f7 c6 10 00 00 00    	test   esi,0x10
c0023ae3:	74 12                	je     c0023af7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0023ae5:	83 ec 0c             	sub    esp,0xc
c0023ae8:	b3 15                	mov    bl,0x15
c0023aea:	68 0a cc 02 c0       	push   0xc002cc0a
c0023aef:	e8 56 f4 fe ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0023af4:	83 c4 10             	add    esp,0x10
c0023af7:	f7 c6 20 00 00 00    	test   esi,0x20
c0023afd:	74 12                	je     c0023b11 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0023aff:	83 ec 0c             	sub    esp,0xc
c0023b02:	b3 03                	mov    bl,0x3
c0023b04:	68 d2 cb 02 c0       	push   0xc002cbd2
c0023b09:	e8 3c f4 fe ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0023b0e:	83 c4 10             	add    esp,0x10
c0023b11:	f7 c6 40 00 00 00    	test   esi,0x40
c0023b17:	74 12                	je     c0023b2b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0023b19:	83 ec 0c             	sub    esp,0xc
c0023b1c:	b3 16                	mov    bl,0x16
c0023b1e:	68 24 cc 02 c0       	push   0xc002cc24
c0023b23:	e8 22 f4 fe ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0023b28:	83 c4 10             	add    esp,0x10
c0023b2b:	89 f0                	mov    eax,esi
c0023b2d:	84 c0                	test   al,al
c0023b2f:	79 42                	jns    c0023b73 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b31:	83 ec 0c             	sub    esp,0xc
c0023b34:	b3 0d                	mov    bl,0xd
c0023b36:	68 45 cc 02 c0       	push   0xc002cc45
c0023b3b:	e8 0a f4 fe ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0023b40:	83 c4 10             	add    esp,0x10
c0023b43:	eb 2e                	jmp    c0023b73 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b45:	3c 03                	cmp    al,0x3
c0023b47:	75 14                	jne    c0023b5d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0023b49:	83 ec 0c             	sub    esp,0xc
c0023b4c:	b3 17                	mov    bl,0x17
c0023b4e:	68 59 cc 02 c0       	push   0xc002cc59
c0023b53:	e8 f2 f3 fe ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0023b58:	83 c4 10             	add    esp,0x10
c0023b5b:	eb 16                	jmp    c0023b73 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b5d:	3c 04                	cmp    al,0x4
c0023b5f:	75 12                	jne    c0023b73 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b61:	83 ec 0c             	sub    esp,0xc
c0023b64:	b3 08                	mov    bl,0x8
c0023b66:	68 6f cc 02 c0       	push   0xc002cc6f
c0023b6b:	e8 da f3 fe ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0023b70:	83 c4 10             	add    esp,0x10
c0023b73:	50                   	push   eax
c0023b74:	50                   	push   eax
c0023b75:	0f b6 c3             	movzx  eax,bl
c0023b78:	50                   	push   eax
c0023b79:	68 87 cc 02 c0       	push   0xc002cc87
c0023b7e:	e8 c7 f3 fe ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0023b83:	83 c4 10             	add    esp,0x10
c0023b86:	83 c4 1c             	add    esp,0x1c
c0023b89:	88 d8                	mov    al,bl
c0023b8b:	5b                   	pop    ebx
c0023b8c:	5e                   	pop    esi
c0023b8d:	5f                   	pop    edi
c0023b8e:	5d                   	pop    ebp
c0023b8f:	c3                   	ret    

c0023b90 <IDE::polling(unsigned char, unsigned int)>:
c0023b90:	57                   	push   edi
c0023b91:	56                   	push   esi
c0023b92:	53                   	push   ebx
c0023b93:	bb 04 00 00 00       	mov    ebx,0x4
c0023b98:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0023b9c:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023ba1:	52                   	push   edx
c0023ba2:	6a 0c                	push   0xc
c0023ba4:	56                   	push   esi
c0023ba5:	57                   	push   edi
c0023ba6:	e8 f9 f4 ff ff       	call   c00230a4 <IDE::read(unsigned char, unsigned char)>
c0023bab:	83 c4 10             	add    esp,0x10
c0023bae:	4b                   	dec    ebx
c0023baf:	75 f0                	jne    c0023ba1 <IDE::polling(unsigned char, unsigned int)+0x11>
c0023bb1:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023bb6:	50                   	push   eax
c0023bb7:	6a 0c                	push   0xc
c0023bb9:	56                   	push   esi
c0023bba:	57                   	push   edi
c0023bbb:	e8 e4 f4 ff ff       	call   c00230a4 <IDE::read(unsigned char, unsigned char)>
c0023bc0:	83 c4 10             	add    esp,0x10
c0023bc3:	a8 01                	test   al,0x1
c0023bc5:	74 12                	je     c0023bd9 <IDE::polling(unsigned char, unsigned int)+0x49>
c0023bc7:	83 ec 0c             	sub    esp,0xc
c0023bca:	68 a1 cc 02 c0       	push   0xc002cca1
c0023bcf:	e8 76 f3 fe ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0023bd4:	83 c4 10             	add    esp,0x10
c0023bd7:	eb 17                	jmp    c0023bf0 <IDE::polling(unsigned char, unsigned int)+0x60>
c0023bd9:	a8 20                	test   al,0x20
c0023bdb:	75 0f                	jne    c0023bec <IDE::polling(unsigned char, unsigned int)+0x5c>
c0023bdd:	4b                   	dec    ebx
c0023bde:	74 10                	je     c0023bf0 <IDE::polling(unsigned char, unsigned int)+0x60>
c0023be0:	84 c0                	test   al,al
c0023be2:	78 d2                	js     c0023bb6 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023be4:	a8 08                	test   al,0x8
c0023be6:	74 ce                	je     c0023bb6 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023be8:	31 c0                	xor    eax,eax
c0023bea:	eb 06                	jmp    c0023bf2 <IDE::polling(unsigned char, unsigned int)+0x62>
c0023bec:	b0 01                	mov    al,0x1
c0023bee:	eb 02                	jmp    c0023bf2 <IDE::polling(unsigned char, unsigned int)+0x62>
c0023bf0:	b0 02                	mov    al,0x2
c0023bf2:	5b                   	pop    ebx
c0023bf3:	5e                   	pop    esi
c0023bf4:	5f                   	pop    edi
c0023bf5:	c3                   	ret    

c0023bf6 <SATABus::close(int, int, void*)>:
c0023bf6:	31 c0                	xor    eax,eax
c0023bf8:	c3                   	ret    
c0023bf9:	90                   	nop

c0023bfa <SATABus::detect()>:
c0023bfa:	c3                   	ret    
c0023bfb:	90                   	nop

c0023bfc <SATABus::SATABus()>:
c0023bfc:	83 ec 0c             	sub    esp,0xc
c0023bff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c03:	83 ec 08             	sub    esp,0x8
c0023c06:	68 e4 cc 02 c0       	push   0xc002cce4
c0023c0b:	50                   	push   eax
c0023c0c:	e8 eb 0a ff ff       	call   c00146fc <HardDiskController::HardDiskController(char const*)>
c0023c11:	83 c4 10             	add    esp,0x10
c0023c14:	ba a0 cd 02 c0       	mov    edx,0xc002cda0
c0023c19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c1d:	89 10                	mov    DWORD PTR [eax],edx
c0023c1f:	83 ec 0c             	sub    esp,0xc
c0023c22:	6a 50                	push   0x50
c0023c24:	e8 fc c3 fe ff       	call   c0010025 <Phys::allocateContiguousPages(int)>
c0023c29:	83 c4 10             	add    esp,0x10
c0023c2c:	89 c2                	mov    edx,eax
c0023c2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c32:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023c38:	83 ec 0c             	sub    esp,0xc
c0023c3b:	6a 50                	push   0x50
c0023c3d:	e8 5d df fe ff       	call   c0011b9f <Virt::allocateKernelVirtualPages(int)>
c0023c42:	83 c4 10             	add    esp,0x10
c0023c45:	89 c2                	mov    edx,eax
c0023c47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c4b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023c51:	e8 e4 e1 fe ff       	call   c0011e3a <Virt::getAKernelVAS()>
c0023c56:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023c5a:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0023c60:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023c64:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023c6a:	83 ec 0c             	sub    esp,0xc
c0023c6d:	6a 03                	push   0x3
c0023c6f:	6a 50                	push   0x50
c0023c71:	51                   	push   ecx
c0023c72:	52                   	push   edx
c0023c73:	50                   	push   eax
c0023c74:	e8 f1 e9 fe ff       	call   c001266a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0023c79:	83 c4 20             	add    esp,0x20
c0023c7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c80:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0023c86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c8a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0023c90:	83 ec 04             	sub    esp,0x4
c0023c93:	52                   	push   edx
c0023c94:	50                   	push   eax
c0023c95:	68 08 cd 02 c0       	push   0xc002cd08
c0023c9a:	e8 ab f2 fe ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0023c9f:	83 c4 10             	add    esp,0x10
c0023ca2:	90                   	nop
c0023ca3:	83 c4 0c             	add    esp,0xc
c0023ca6:	c3                   	ret    
c0023ca7:	90                   	nop

c0023ca8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023ca8:	83 ec 0c             	sub    esp,0xc
c0023cab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023caf:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023cb2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0023cb5:	09 c2                	or     edx,eax
c0023cb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023cbb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023cc1:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023cc3:	31 c0                	xor    eax,eax
c0023cc5:	c1 e9 08             	shr    ecx,0x8
c0023cc8:	83 e1 0f             	and    ecx,0xf
c0023ccb:	39 c8                	cmp    eax,ecx
c0023ccd:	74 0a                	je     c0023cd9 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0023ccf:	f6 c2 01             	test   dl,0x1
c0023cd2:	74 18                	je     c0023cec <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023cd4:	d1 ea                	shr    edx,1
c0023cd6:	40                   	inc    eax
c0023cd7:	eb f2                	jmp    c0023ccb <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023cd9:	83 ec 0c             	sub    esp,0xc
c0023cdc:	68 2c cd 02 c0       	push   0xc002cd2c
c0023ce1:	e8 15 69 ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c0023ce6:	83 c4 10             	add    esp,0x10
c0023ce9:	83 c8 ff             	or     eax,0xffffffff
c0023cec:	83 c4 0c             	add    esp,0xc
c0023cef:	c3                   	ret    

c0023cf0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023cf0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023cf4:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0023cf7:	89 c2                	mov    edx,eax
c0023cf9:	c1 ea 08             	shr    edx,0x8
c0023cfc:	83 e2 0f             	and    edx,0xf
c0023cff:	fe ca                	dec    dl
c0023d01:	75 31                	jne    c0023d34 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023d03:	83 e0 0f             	and    eax,0xf
c0023d06:	3c 03                	cmp    al,0x3
c0023d08:	75 2a                	jne    c0023d34 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023d0a:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023d0d:	b8 02 00 00 00       	mov    eax,0x2
c0023d12:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023d18:	74 1c                	je     c0023d36 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023d1a:	b8 04 00 00 00       	mov    eax,0x4
c0023d1f:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023d25:	74 0f                	je     c0023d36 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023d27:	31 c0                	xor    eax,eax
c0023d29:	83 fa 03             	cmp    edx,0x3
c0023d2c:	0f 94 c0             	sete   al
c0023d2f:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023d33:	c3                   	ret    
c0023d34:	31 c0                	xor    eax,eax
c0023d36:	c3                   	ret    
c0023d37:	90                   	nop

c0023d38 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023d38:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023d3c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d3f:	0f ba e2 0f          	bt     edx,0xf
c0023d43:	72 f7                	jb     c0023d3c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0023d45:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d48:	83 ca 10             	or     edx,0x10
c0023d4b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023d4e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d51:	83 ca 01             	or     edx,0x1
c0023d54:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023d57:	c3                   	ret    

c0023d58 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023d58:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023d5c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d5f:	83 e2 fe             	and    edx,0xfffffffe
c0023d62:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023d65:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d68:	83 e2 ef             	and    edx,0xffffffef
c0023d6b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023d6e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d71:	0f ba e2 0e          	bt     edx,0xe
c0023d75:	72 f7                	jb     c0023d6e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023d77:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d7a:	0f ba e2 0f          	bt     edx,0xf
c0023d7e:	72 ee                	jb     c0023d6e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023d80:	c3                   	ret    
c0023d81:	90                   	nop

c0023d82 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023d82:	55                   	push   ebp
c0023d83:	57                   	push   edi
c0023d84:	56                   	push   esi
c0023d85:	53                   	push   ebx
c0023d86:	83 ec 1c             	sub    esp,0x1c
c0023d89:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023d8d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023d91:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023d95:	53                   	push   ebx
c0023d96:	89 fd                	mov    ebp,edi
c0023d98:	56                   	push   esi
c0023d99:	c1 e5 0a             	shl    ebp,0xa
c0023d9c:	e8 b7 ff ff ff       	call   c0023d58 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023da1:	83 ec 0c             	sub    esp,0xc
c0023da4:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023daa:	01 e8                	add    eax,ebp
c0023dac:	89 03                	mov    DWORD PTR [ebx],eax
c0023dae:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023db0:	68 00 04 00 00       	push   0x400
c0023db5:	6a 00                	push   0x0
c0023db7:	50                   	push   eax
c0023db8:	e8 bb c9 fd ff       	call   c0000778 <memset>
c0023dbd:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023dc3:	89 fa                	mov    edx,edi
c0023dc5:	01 e8                	add    eax,ebp
c0023dc7:	c1 e7 0d             	shl    edi,0xd
c0023dca:	89 03                	mov    DWORD PTR [ebx],eax
c0023dcc:	c1 e2 08             	shl    edx,0x8
c0023dcf:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023dd6:	81 c2 00 80 00 00    	add    edx,0x8000
c0023ddc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023de0:	89 d0                	mov    eax,edx
c0023de2:	83 c4 1c             	add    esp,0x1c
c0023de5:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023deb:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023dee:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023df1:	68 00 01 00 00       	push   0x100
c0023df6:	6a 00                	push   0x0
c0023df8:	50                   	push   eax
c0023df9:	e8 7a c9 fd ff       	call   c0000778 <memset>
c0023dfe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023e02:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023e08:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023e0e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023e12:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023e15:	83 c4 10             	add    esp,0x10
c0023e18:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023e1f:	31 ff                	xor    edi,edi
c0023e21:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023e27:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023e2d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023e31:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023e37:	83 c5 20             	add    ebp,0x20
c0023e3a:	01 f8                	add    eax,edi
c0023e3c:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023e3f:	52                   	push   edx
c0023e40:	68 00 01 00 00       	push   0x100
c0023e45:	6a 00                	push   0x0
c0023e47:	50                   	push   eax
c0023e48:	e8 2b c9 fd ff       	call   c0000778 <memset>
c0023e4d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023e51:	83 c4 10             	add    esp,0x10
c0023e54:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023e5a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023e61:	01 f8                	add    eax,edi
c0023e63:	81 c7 00 01 00 00    	add    edi,0x100
c0023e69:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023e6c:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023e72:	75 b3                	jne    c0023e27 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023e74:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023e78:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023e7c:	83 c4 1c             	add    esp,0x1c
c0023e7f:	5b                   	pop    ebx
c0023e80:	5e                   	pop    esi
c0023e81:	5f                   	pop    edi
c0023e82:	5d                   	pop    ebp
c0023e83:	e9 b0 fe ff ff       	jmp    c0023d38 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023e88 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023e88:	55                   	push   ebp
c0023e89:	57                   	push   edi
c0023e8a:	56                   	push   esi
c0023e8b:	53                   	push   ebx
c0023e8c:	31 db                	xor    ebx,ebx
c0023e8e:	83 ec 0c             	sub    esp,0xc
c0023e91:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023e95:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023e99:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023e9c:	f7 c7 01 00 00 00    	test   edi,0x1
c0023ea2:	0f 84 aa 00 00 00    	je     c0023f52 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023ea8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023eac:	89 d8                	mov    eax,ebx
c0023eae:	c1 e0 07             	shl    eax,0x7
c0023eb1:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0023eb8:	55                   	push   ebp
c0023eb9:	56                   	push   esi
c0023eba:	e8 31 fe ff ff       	call   c0023cf0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0023ebf:	5a                   	pop    edx
c0023ec0:	83 f8 01             	cmp    eax,0x1
c0023ec3:	59                   	pop    ecx
c0023ec4:	75 30                	jne    c0023ef6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c0023ec6:	50                   	push   eax
c0023ec7:	50                   	push   eax
c0023ec8:	53                   	push   ebx
c0023ec9:	68 51 cd 02 c0       	push   0xc002cd51
c0023ece:	e8 77 f0 fe ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0023ed3:	83 c4 0c             	add    esp,0xc
c0023ed6:	53                   	push   ebx
c0023ed7:	55                   	push   ebp
c0023ed8:	56                   	push   esi
c0023ed9:	e8 a4 fe ff ff       	call   c0023d82 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023ede:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023ee5:	e8 56 b9 fe ff       	call   c000f840 <malloc>
c0023eea:	89 c5                	mov    ebp,eax
c0023eec:	89 04 24             	mov    DWORD PTR [esp],eax
c0023eef:	e8 60 0d 00 00       	call   c0024c54 <SATA::SATA()>
c0023ef4:	eb 33                	jmp    c0023f29 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c0023ef6:	83 f8 04             	cmp    eax,0x4
c0023ef9:	75 47                	jne    c0023f42 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c0023efb:	50                   	push   eax
c0023efc:	50                   	push   eax
c0023efd:	53                   	push   ebx
c0023efe:	68 68 cd 02 c0       	push   0xc002cd68
c0023f03:	e8 42 f0 fe ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0023f08:	83 c4 0c             	add    esp,0xc
c0023f0b:	53                   	push   ebx
c0023f0c:	55                   	push   ebp
c0023f0d:	56                   	push   esi
c0023f0e:	e8 6f fe ff ff       	call   c0023d82 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023f13:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023f1a:	e8 21 b9 fe ff       	call   c000f840 <malloc>
c0023f1f:	89 c5                	mov    ebp,eax
c0023f21:	89 04 24             	mov    DWORD PTR [esp],eax
c0023f24:	e8 d7 10 00 00       	call   c0025000 <SATAPI::SATAPI()>
c0023f29:	5a                   	pop    edx
c0023f2a:	59                   	pop    ecx
c0023f2b:	55                   	push   ebp
c0023f2c:	56                   	push   esi
c0023f2d:	e8 3e 04 ff ff       	call   c0014370 <Device::addChild(Device*)>
c0023f32:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0023f35:	56                   	push   esi
c0023f36:	6a 00                	push   0x0
c0023f38:	53                   	push   ebx
c0023f39:	55                   	push   ebp
c0023f3a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023f3d:	83 c4 20             	add    esp,0x20
c0023f40:	eb 10                	jmp    c0023f52 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023f42:	50                   	push   eax
c0023f43:	50                   	push   eax
c0023f44:	53                   	push   ebx
c0023f45:	68 81 cd 02 c0       	push   0xc002cd81
c0023f4a:	e8 fb ef fe ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0023f4f:	83 c4 10             	add    esp,0x10
c0023f52:	d1 ef                	shr    edi,1
c0023f54:	43                   	inc    ebx
c0023f55:	83 fb 20             	cmp    ebx,0x20
c0023f58:	0f 85 3e ff ff ff    	jne    c0023e9c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0023f5e:	83 c4 0c             	add    esp,0xc
c0023f61:	5b                   	pop    ebx
c0023f62:	5e                   	pop    esi
c0023f63:	5f                   	pop    edi
c0023f64:	5d                   	pop    ebp
c0023f65:	c3                   	ret    

c0023f66 <SATABus::open(int, int, void*)>:
c0023f66:	83 ec 14             	sub    esp,0x14
c0023f69:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023f6d:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0023f73:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0023f79:	52                   	push   edx
c0023f7a:	50                   	push   eax
c0023f7b:	e8 08 ff ff ff       	call   c0023e88 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0023f80:	31 c0                	xor    eax,eax
c0023f82:	83 c4 1c             	add    esp,0x1c
c0023f85:	c3                   	ret    

c0023f86 <ATA::close(int, int, void*)>:
c0023f86:	83 ec 0c             	sub    esp,0xc
c0023f89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023f8d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023f93:	85 c0                	test   eax,eax
c0023f95:	74 0c                	je     c0023fa3 <ATA::close(int, int, void*)+0x1d>
c0023f97:	83 ec 0c             	sub    esp,0xc
c0023f9a:	8b 10                	mov    edx,DWORD PTR [eax]
c0023f9c:	50                   	push   eax
c0023f9d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023fa0:	83 c4 10             	add    esp,0x10
c0023fa3:	31 c0                	xor    eax,eax
c0023fa5:	83 c4 0c             	add    esp,0xc
c0023fa8:	c3                   	ret    
c0023fa9:	90                   	nop

c0023faa <ATA::powerSaving(PowerSavingLevel)>:
c0023faa:	c3                   	ret    
c0023fab:	90                   	nop

c0023fac <ATA::ATA()>:
c0023fac:	83 ec 0c             	sub    esp,0xc
c0023faf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023fb3:	83 ec 04             	sub    esp,0x4
c0023fb6:	68 00 02 00 00       	push   0x200
c0023fbb:	68 69 ce 02 c0       	push   0xc002ce69
c0023fc0:	50                   	push   eax
c0023fc1:	e8 ce 07 ff ff       	call   c0014794 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023fc6:	83 c4 10             	add    esp,0x10
c0023fc9:	ba ec cd 02 c0       	mov    edx,0xc002cdec
c0023fce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023fd2:	89 10                	mov    DWORD PTR [eax],edx
c0023fd4:	90                   	nop
c0023fd5:	83 c4 0c             	add    esp,0xc
c0023fd8:	c3                   	ret    
c0023fd9:	90                   	nop

c0023fda <ATA::flush(bool)>:
c0023fda:	53                   	push   ebx
c0023fdb:	83 ec 08             	sub    esp,0x8
c0023fde:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0023fe3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023fe7:	19 c0                	sbb    eax,eax
c0023fe9:	83 e0 fd             	and    eax,0xfffffffd
c0023fec:	05 ea 00 00 00       	add    eax,0xea
c0023ff1:	50                   	push   eax
c0023ff2:	6a 07                	push   0x7
c0023ff4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023ffb:	50                   	push   eax
c0023ffc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024002:	e8 dd ef ff ff       	call   c0022fe4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024007:	83 c4 0c             	add    esp,0xc
c002400a:	6a 00                	push   0x0
c002400c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024013:	50                   	push   eax
c0024014:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002401a:	e8 71 fb ff ff       	call   c0023b90 <IDE::polling(unsigned char, unsigned int)>
c002401f:	83 c4 18             	add    esp,0x18
c0024022:	5b                   	pop    ebx
c0024023:	c3                   	ret    

c0024024 <ATA::readyForCommand()>:
c0024024:	56                   	push   esi
c0024025:	53                   	push   ebx
c0024026:	31 db                	xor    ebx,ebx
c0024028:	50                   	push   eax
c0024029:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002402d:	50                   	push   eax
c002402e:	6a 0c                	push   0xc
c0024030:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024037:	50                   	push   eax
c0024038:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002403e:	e8 61 f0 ff ff       	call   c00230a4 <IDE::read(unsigned char, unsigned char)>
c0024043:	83 c4 10             	add    esp,0x10
c0024046:	a8 88                	test   al,0x88
c0024048:	74 23                	je     c002406d <ATA::readyForCommand()+0x49>
c002404a:	43                   	inc    ebx
c002404b:	83 fb 63             	cmp    ebx,0x63
c002404e:	7e dd                	jle    c002402d <ATA::readyForCommand()+0x9>
c0024050:	51                   	push   ecx
c0024051:	51                   	push   ecx
c0024052:	6a 00                	push   0x0
c0024054:	68 40 42 0f 00       	push   0xf4240
c0024059:	e8 c8 a2 ff ff       	call   c001e326 <nanoSleep(unsigned long long)>
c002405e:	83 c4 10             	add    esp,0x10
c0024061:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024067:	75 c4                	jne    c002402d <ATA::readyForCommand()+0x9>
c0024069:	31 c0                	xor    eax,eax
c002406b:	eb 02                	jmp    c002406f <ATA::readyForCommand()+0x4b>
c002406d:	b0 01                	mov    al,0x1
c002406f:	5a                   	pop    edx
c0024070:	5b                   	pop    ebx
c0024071:	5e                   	pop    esi
c0024072:	c3                   	ret    
c0024073:	90                   	nop

c0024074 <ATA::access(unsigned long long, int, void*, bool)>:
c0024074:	55                   	push   ebp
c0024075:	57                   	push   edi
c0024076:	56                   	push   esi
c0024077:	53                   	push   ebx
c0024078:	83 ec 2c             	sub    esp,0x2c
c002407b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002407f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024083:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024087:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002408b:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c002408f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0024093:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024097:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c002409d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00240a1:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00240a7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00240ab:	c1 e0 06             	shl    eax,0x6
c00240ae:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c00240b6:	74 5d                	je     c0024115 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c00240b8:	89 fa                	mov    edx,edi
c00240ba:	89 f0                	mov    eax,esi
c00240bc:	0f ac d0 1c          	shrd   eax,edx,0x1c
c00240c0:	c1 ea 1c             	shr    edx,0x1c
c00240c3:	89 d1                	mov    ecx,edx
c00240c5:	09 c1                	or     ecx,eax
c00240c7:	74 25                	je     c00240ee <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c00240c9:	31 ed                	xor    ebp,ebp
c00240cb:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c00240d2:	89 fa                	mov    edx,edi
c00240d4:	89 f0                	mov    eax,esi
c00240d6:	0f ad d0             	shrd   eax,edx,cl
c00240d9:	d3 ea                	shr    edx,cl
c00240db:	f6 c1 20             	test   cl,0x20
c00240de:	74 02                	je     c00240e2 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c00240e0:	89 d0                	mov    eax,edx
c00240e2:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c00240e6:	45                   	inc    ebp
c00240e7:	83 fd 06             	cmp    ebp,0x6
c00240ea:	75 df                	jne    c00240cb <ATA::access(unsigned long long, int, void*, bool)+0x57>
c00240ec:	eb 76                	jmp    c0024164 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c00240ee:	89 f0                	mov    eax,esi
c00240f0:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c00240f5:	89 fa                	mov    edx,edi
c00240f7:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00240fe:	0f ac d0 10          	shrd   eax,edx,0x10
c0024102:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024107:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002410b:	c1 ee 18             	shr    esi,0x18
c002410e:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0024113:	eb 56                	jmp    c002416b <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024115:	6a 00                	push   0x0
c0024117:	6a 3f                	push   0x3f
c0024119:	57                   	push   edi
c002411a:	56                   	push   esi
c002411b:	e8 8c 29 00 00       	call   c0026aac <__umoddi3>
c0024120:	83 c4 10             	add    esp,0x10
c0024123:	40                   	inc    eax
c0024124:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0024128:	6a 00                	push   0x0
c002412a:	68 f0 03 00 00       	push   0x3f0
c002412f:	57                   	push   edi
c0024130:	56                   	push   esi
c0024131:	e8 76 28 00 00       	call   c00269ac <__udivdi3>
c0024136:	83 c4 10             	add    esp,0x10
c0024139:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c002413e:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024145:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002414a:	6a 00                	push   0x0
c002414c:	6a 3f                	push   0x3f
c002414e:	57                   	push   edi
c002414f:	56                   	push   esi
c0024150:	e8 57 28 00 00       	call   c00269ac <__udivdi3>
c0024155:	83 c4 10             	add    esp,0x10
c0024158:	89 c6                	mov    esi,eax
c002415a:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c002415f:	83 e6 0f             	and    esi,0xf
c0024162:	eb 07                	jmp    c002416b <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024164:	31 f6                	xor    esi,esi
c0024166:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c002416b:	bf 01 00 00 00       	mov    edi,0x1
c0024170:	50                   	push   eax
c0024171:	6a 00                	push   0x0
c0024173:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002417a:	50                   	push   eax
c002417b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002417f:	e8 6c f0 ff ff       	call   c00231f0 <IDE::enableIRQs(unsigned char, bool)>
c0024184:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024187:	e8 98 fe ff ff       	call   c0024024 <ATA::readyForCommand()>
c002418c:	83 c4 10             	add    esp,0x10
c002418f:	84 c0                	test   al,al
c0024191:	0f 84 5a 02 00 00    	je     c00243f1 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024197:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c002419d:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00241a3:	c1 e0 04             	shl    eax,0x4
c00241a6:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c00241ad:	09 c6                	or     esi,eax
c00241af:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c00241b4:	75 05                	jne    c00241bb <ATA::access(unsigned long long, int, void*, bool)+0x147>
c00241b6:	83 ce a0             	or     esi,0xffffffa0
c00241b9:	eb 03                	jmp    c00241be <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c00241bb:	83 ce e0             	or     esi,0xffffffe0
c00241be:	89 f0                	mov    eax,esi
c00241c0:	0f b6 f0             	movzx  esi,al
c00241c3:	56                   	push   esi
c00241c4:	6a 06                	push   0x6
c00241c6:	51                   	push   ecx
c00241c7:	52                   	push   edx
c00241c8:	e8 17 ee ff ff       	call   c0022fe4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241cd:	83 c4 10             	add    esp,0x10
c00241d0:	6a 00                	push   0x0
c00241d2:	6a 01                	push   0x1
c00241d4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241db:	50                   	push   eax
c00241dc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00241e2:	e8 fd ed ff ff       	call   c0022fe4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241e7:	83 c4 10             	add    esp,0x10
c00241ea:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00241ef:	75 6e                	jne    c002425f <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c00241f1:	6a 00                	push   0x0
c00241f3:	6a 08                	push   0x8
c00241f5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241fc:	50                   	push   eax
c00241fd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024203:	e8 dc ed ff ff       	call   c0022fe4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024208:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c002420d:	50                   	push   eax
c002420e:	6a 09                	push   0x9
c0024210:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024217:	50                   	push   eax
c0024218:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002421e:	e8 c1 ed ff ff       	call   c0022fe4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024223:	83 c4 20             	add    esp,0x20
c0024226:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c002422b:	50                   	push   eax
c002422c:	6a 0a                	push   0xa
c002422e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024235:	50                   	push   eax
c0024236:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002423c:	e8 a3 ed ff ff       	call   c0022fe4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024241:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0024246:	50                   	push   eax
c0024247:	6a 0b                	push   0xb
c0024249:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024250:	50                   	push   eax
c0024251:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024257:	e8 88 ed ff ff       	call   c0022fe4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002425c:	83 c4 20             	add    esp,0x20
c002425f:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0024264:	50                   	push   eax
c0024265:	6a 02                	push   0x2
c0024267:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002426e:	50                   	push   eax
c002426f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024275:	e8 6a ed ff ff       	call   c0022fe4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002427a:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c002427f:	50                   	push   eax
c0024280:	6a 03                	push   0x3
c0024282:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024289:	50                   	push   eax
c002428a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024290:	e8 4f ed ff ff       	call   c0022fe4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024295:	83 c4 20             	add    esp,0x20
c0024298:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c002429d:	50                   	push   eax
c002429e:	6a 04                	push   0x4
c00242a0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242a7:	50                   	push   eax
c00242a8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242ae:	e8 31 ed ff ff       	call   c0022fe4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00242b8:	50                   	push   eax
c00242b9:	6a 05                	push   0x5
c00242bb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242c2:	50                   	push   eax
c00242c3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242c9:	e8 16 ed ff ff       	call   c0022fe4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242ce:	83 c4 20             	add    esp,0x20
c00242d1:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00242d6:	0f 94 c0             	sete   al
c00242d9:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00242de:	74 09                	je     c00242e9 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c00242e0:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c00242e7:	eb 07                	jmp    c00242f0 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c00242e9:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c00242f0:	0f b6 c0             	movzx  eax,al
c00242f3:	50                   	push   eax
c00242f4:	6a 07                	push   0x7
c00242f6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242fd:	50                   	push   eax
c00242fe:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024304:	e8 db ec ff ff       	call   c0022fe4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024309:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c002430d:	83 c4 10             	add    esp,0x10
c0024310:	85 f6                	test   esi,esi
c0024312:	0f 84 ba 00 00 00    	je     c00243d2 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c0024318:	50                   	push   eax
c0024319:	6a 01                	push   0x1
c002431b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024322:	50                   	push   eax
c0024323:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024329:	e8 62 f8 ff ff       	call   c0023b90 <IDE::polling(unsigned char, unsigned int)>
c002432e:	83 c4 10             	add    esp,0x10
c0024331:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0024337:	84 c0                	test   al,al
c0024339:	74 2c                	je     c0024367 <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c002433b:	0f b6 f8             	movzx  edi,al
c002433e:	0f b6 d2             	movzx  edx,dl
c0024341:	57                   	push   edi
c0024342:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0024349:	50                   	push   eax
c002434a:	52                   	push   edx
c002434b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024351:	e8 a4 f6 ff ff       	call   c00239fa <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024356:	c7 04 24 c4 cd 02 c0 	mov    DWORD PTR [esp],0xc002cdc4
c002435d:	e8 e8 eb fe ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0024362:	e9 87 00 00 00       	jmp    c00243ee <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c0024367:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c002436c:	74 33                	je     c00243a1 <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c002436e:	31 ed                	xor    ebp,ebp
c0024370:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024374:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0024378:	50                   	push   eax
c0024379:	50                   	push   eax
c002437a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024381:	50                   	push   eax
c0024382:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024388:	e8 45 ec ff ff       	call   c0022fd2 <IDE::getBase(unsigned char)>
c002438d:	89 c2                	mov    edx,eax
c002438f:	89 f8                	mov    eax,edi
c0024391:	66 ef                	out    dx,ax
c0024393:	45                   	inc    ebp
c0024394:	83 c4 10             	add    esp,0x10
c0024397:	81 fd 00 01 00 00    	cmp    ebp,0x100
c002439d:	75 d1                	jne    c0024370 <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c002439f:	eb 23                	jmp    c00243c4 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c00243a1:	0f b6 d2             	movzx  edx,dl
c00243a4:	51                   	push   ecx
c00243a5:	51                   	push   ecx
c00243a6:	52                   	push   edx
c00243a7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00243ad:	e8 20 ec ff ff       	call   c0022fd2 <IDE::getBase(unsigned char)>
c00243b2:	b9 00 01 00 00       	mov    ecx,0x100
c00243b7:	89 c2                	mov    edx,eax
c00243b9:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c00243bd:	fc                   	cld    
c00243be:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c00243c1:	83 c4 10             	add    esp,0x10
c00243c4:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c00243cc:	4e                   	dec    esi
c00243cd:	e9 3e ff ff ff       	jmp    c0024310 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c00243d2:	31 ff                	xor    edi,edi
c00243d4:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00243d9:	74 16                	je     c00243f1 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c00243db:	50                   	push   eax
c00243dc:	50                   	push   eax
c00243dd:	31 c0                	xor    eax,eax
c00243df:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c00243e4:	0f 94 c0             	sete   al
c00243e7:	50                   	push   eax
c00243e8:	53                   	push   ebx
c00243e9:	e8 ec fb ff ff       	call   c0023fda <ATA::flush(bool)>
c00243ee:	83 c4 10             	add    esp,0x10
c00243f1:	83 c4 2c             	add    esp,0x2c
c00243f4:	89 f8                	mov    eax,edi
c00243f6:	5b                   	pop    ebx
c00243f7:	5e                   	pop    esi
c00243f8:	5f                   	pop    edi
c00243f9:	5d                   	pop    ebp
c00243fa:	c3                   	ret    
c00243fb:	90                   	nop

c00243fc <ATA::read(unsigned long long, int, void*)>:
c00243fc:	57                   	push   edi
c00243fd:	b8 04 00 00 00       	mov    eax,0x4
c0024402:	56                   	push   esi
c0024403:	53                   	push   ebx
c0024404:	83 ec 10             	sub    esp,0x10
c0024407:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002440b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002440f:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024412:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024416:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002441a:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024420:	77 3b                	ja     c002445d <ATA::read(unsigned long long, int, void*)+0x61>
c0024422:	b8 06 00 00 00       	mov    eax,0x6
c0024427:	85 d2                	test   edx,edx
c0024429:	74 32                	je     c002445d <ATA::read(unsigned long long, int, void*)+0x61>
c002442b:	50                   	push   eax
c002442c:	50                   	push   eax
c002442d:	6a 00                	push   0x0
c002442f:	52                   	push   edx
c0024430:	53                   	push   ebx
c0024431:	57                   	push   edi
c0024432:	56                   	push   esi
c0024433:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024437:	e8 38 fc ff ff       	call   c0024074 <ATA::access(unsigned long long, int, void*, bool)>
c002443c:	83 c4 20             	add    esp,0x20
c002443f:	85 c0                	test   eax,eax
c0024441:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024445:	75 11                	jne    c0024458 <ATA::read(unsigned long long, int, void*)+0x5c>
c0024447:	01 1d 68 27 03 c0    	add    DWORD PTR ds:0xc0032768,ebx
c002444d:	e8 a2 c5 fe ff       	call   c00109f4 <VgaText::updateDiskUsage()>
c0024452:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024456:	eb 05                	jmp    c002445d <ATA::read(unsigned long long, int, void*)+0x61>
c0024458:	b8 01 00 00 00       	mov    eax,0x1
c002445d:	83 c4 10             	add    esp,0x10
c0024460:	5b                   	pop    ebx
c0024461:	5e                   	pop    esi
c0024462:	5f                   	pop    edi
c0024463:	c3                   	ret    

c0024464 <ATA::write(unsigned long long, int, void*)>:
c0024464:	57                   	push   edi
c0024465:	b8 04 00 00 00       	mov    eax,0x4
c002446a:	56                   	push   esi
c002446b:	53                   	push   ebx
c002446c:	83 ec 10             	sub    esp,0x10
c002446f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024473:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024477:	8d 4b ff             	lea    ecx,[ebx-0x1]
c002447a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002447e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024482:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024488:	77 3b                	ja     c00244c5 <ATA::write(unsigned long long, int, void*)+0x61>
c002448a:	b8 06 00 00 00       	mov    eax,0x6
c002448f:	85 d2                	test   edx,edx
c0024491:	74 32                	je     c00244c5 <ATA::write(unsigned long long, int, void*)+0x61>
c0024493:	50                   	push   eax
c0024494:	50                   	push   eax
c0024495:	6a 01                	push   0x1
c0024497:	52                   	push   edx
c0024498:	53                   	push   ebx
c0024499:	57                   	push   edi
c002449a:	56                   	push   esi
c002449b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002449f:	e8 d0 fb ff ff       	call   c0024074 <ATA::access(unsigned long long, int, void*, bool)>
c00244a4:	83 c4 20             	add    esp,0x20
c00244a7:	85 c0                	test   eax,eax
c00244a9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00244ad:	75 11                	jne    c00244c0 <ATA::write(unsigned long long, int, void*)+0x5c>
c00244af:	01 1d 64 27 03 c0    	add    DWORD PTR ds:0xc0032764,ebx
c00244b5:	e8 3a c5 fe ff       	call   c00109f4 <VgaText::updateDiskUsage()>
c00244ba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00244be:	eb 05                	jmp    c00244c5 <ATA::write(unsigned long long, int, void*)+0x61>
c00244c0:	b8 01 00 00 00       	mov    eax,0x1
c00244c5:	83 c4 10             	add    esp,0x10
c00244c8:	5b                   	pop    ebx
c00244c9:	5e                   	pop    esi
c00244ca:	5f                   	pop    edi
c00244cb:	c3                   	ret    

c00244cc <ATA::detectCHS()>:
c00244cc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00244d0:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c00244d6:	c1 e0 06             	shl    eax,0x6
c00244d9:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c00244df:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c00244e9:	c7 44 24 04 cf cd 02 c0 	mov    DWORD PTR [esp+0x4],0xc002cdcf
c00244f1:	e9 05 61 ff ff       	jmp    c001a5fb <Krnl::panic(char const*)>

c00244f6 <ATA::open(int, int, void*)>:
c00244f6:	53                   	push   ebx
c00244f7:	83 ec 08             	sub    esp,0x8
c00244fa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00244fe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024502:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024506:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002450c:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024512:	c1 e0 06             	shl    eax,0x6
c0024515:	01 d0                	add    eax,edx
c0024517:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c002451e:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0024524:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c002452b:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024535:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c002453b:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024542:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0024549:	75 0c                	jne    c0024557 <ATA::open(int, int, void*)+0x61>
c002454b:	83 ec 0c             	sub    esp,0xc
c002454e:	53                   	push   ebx
c002454f:	e8 78 ff ff ff       	call   c00244cc <ATA::detectCHS()>
c0024554:	83 c4 10             	add    esp,0x10
c0024557:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002455d:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024563:	c1 e0 06             	shl    eax,0x6
c0024566:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c002456d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024577:	d1 e8                	shr    eax,1
c0024579:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c002457f:	6a 04                	push   0x4
c0024581:	6a 0c                	push   0xc
c0024583:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002458a:	50                   	push   eax
c002458b:	52                   	push   edx
c002458c:	e8 53 ea ff ff       	call   c0022fe4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024591:	90                   	nop
c0024592:	90                   	nop
c0024593:	6a 00                	push   0x0
c0024595:	6a 0c                	push   0xc
c0024597:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002459e:	50                   	push   eax
c002459f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00245a5:	e8 3a ea ff ff       	call   c0022fe4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00245aa:	83 c4 14             	add    esp,0x14
c00245ad:	53                   	push   ebx
c00245ae:	e8 49 02 ff ff       	call   c00147fc <PhysicalDisk::startCache()>
c00245b3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00245b6:	e8 c7 23 ff ff       	call   c0016982 <createPartitionsForDisk(PhysicalDisk*)>
c00245bb:	31 c0                	xor    eax,eax
c00245bd:	83 c4 18             	add    esp,0x18
c00245c0:	5b                   	pop    ebx
c00245c1:	c3                   	ret    

c00245c2 <ATAPI::write(unsigned long long, int, void*)>:
c00245c2:	b8 03 00 00 00       	mov    eax,0x3
c00245c7:	c3                   	ret    

c00245c8 <ATAPI::close(int, int, void*)>:
c00245c8:	83 ec 0c             	sub    esp,0xc
c00245cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00245cf:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00245d5:	85 c0                	test   eax,eax
c00245d7:	74 0c                	je     c00245e5 <ATAPI::close(int, int, void*)+0x1d>
c00245d9:	83 ec 0c             	sub    esp,0xc
c00245dc:	8b 10                	mov    edx,DWORD PTR [eax]
c00245de:	50                   	push   eax
c00245df:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00245e2:	83 c4 10             	add    esp,0x10
c00245e5:	31 c0                	xor    eax,eax
c00245e7:	83 c4 0c             	add    esp,0xc
c00245ea:	c3                   	ret    
c00245eb:	90                   	nop

c00245ec <ATAPI::ATAPI()>:
c00245ec:	83 ec 0c             	sub    esp,0xc
c00245ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00245f3:	83 ec 04             	sub    esp,0x4
c00245f6:	68 00 08 00 00       	push   0x800
c00245fb:	68 09 cf 02 c0       	push   0xc002cf09
c0024600:	50                   	push   eax
c0024601:	e8 8e 01 ff ff       	call   c0014794 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024606:	83 c4 10             	add    esp,0x10
c0024609:	ba 24 ce 02 c0       	mov    edx,0xc002ce24
c002460e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024612:	89 10                	mov    DWORD PTR [eax],edx
c0024614:	90                   	nop
c0024615:	83 c4 0c             	add    esp,0xc
c0024618:	c3                   	ret    
c0024619:	90                   	nop

c002461a <ATAPI::readyForCommand()>:
c002461a:	56                   	push   esi
c002461b:	53                   	push   ebx
c002461c:	31 db                	xor    ebx,ebx
c002461e:	50                   	push   eax
c002461f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024623:	50                   	push   eax
c0024624:	6a 0c                	push   0xc
c0024626:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002462d:	50                   	push   eax
c002462e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024634:	e8 6b ea ff ff       	call   c00230a4 <IDE::read(unsigned char, unsigned char)>
c0024639:	83 c4 10             	add    esp,0x10
c002463c:	a8 88                	test   al,0x88
c002463e:	74 23                	je     c0024663 <ATAPI::readyForCommand()+0x49>
c0024640:	43                   	inc    ebx
c0024641:	83 fb 63             	cmp    ebx,0x63
c0024644:	7e dd                	jle    c0024623 <ATAPI::readyForCommand()+0x9>
c0024646:	51                   	push   ecx
c0024647:	51                   	push   ecx
c0024648:	6a 00                	push   0x0
c002464a:	68 40 42 0f 00       	push   0xf4240
c002464f:	e8 d2 9c ff ff       	call   c001e326 <nanoSleep(unsigned long long)>
c0024654:	83 c4 10             	add    esp,0x10
c0024657:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c002465d:	75 c4                	jne    c0024623 <ATAPI::readyForCommand()+0x9>
c002465f:	31 c0                	xor    eax,eax
c0024661:	eb 02                	jmp    c0024665 <ATAPI::readyForCommand()+0x4b>
c0024663:	b0 01                	mov    al,0x1
c0024665:	5a                   	pop    edx
c0024666:	5b                   	pop    ebx
c0024667:	5e                   	pop    esi
c0024668:	c3                   	ret    
c0024669:	90                   	nop

c002466a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c002466a:	55                   	push   ebp
c002466b:	57                   	push   edi
c002466c:	56                   	push   esi
c002466d:	53                   	push   ebx
c002466e:	83 ec 20             	sub    esp,0x20
c0024671:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0024675:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0024679:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c002467d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024681:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024685:	6a 01                	push   0x1
c0024687:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002468e:	50                   	push   eax
c002468f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024695:	e8 56 eb ff ff       	call   c00231f0 <IDE::enableIRQs(unsigned char, bool)>
c002469a:	5e                   	pop    esi
c002469b:	58                   	pop    eax
c002469c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246a3:	50                   	push   eax
c00246a4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246aa:	e8 0f e9 ff ff       	call   c0022fbe <IDE::prepareInterrupt(unsigned char)>
c00246af:	89 3c 24             	mov    DWORD PTR [esp],edi
c00246b2:	e8 63 ff ff ff       	call   c002461a <ATAPI::readyForCommand()>
c00246b7:	83 c4 10             	add    esp,0x10
c00246ba:	84 c0                	test   al,al
c00246bc:	75 0a                	jne    c00246c8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c00246be:	bb 01 00 00 00       	mov    ebx,0x1
c00246c3:	e9 57 02 00 00       	jmp    c002491f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00246c8:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c00246ce:	c1 e0 04             	shl    eax,0x4
c00246d1:	0f b6 c0             	movzx  eax,al
c00246d4:	50                   	push   eax
c00246d5:	6a 06                	push   0x6
c00246d7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246de:	50                   	push   eax
c00246df:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246e5:	e8 fa e8 ff ff       	call   c0022fe4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00246ea:	6a 00                	push   0x0
c00246ec:	6a 01                	push   0x1
c00246ee:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246f5:	50                   	push   eax
c00246f6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246fc:	e8 e3 e8 ff ff       	call   c0022fe4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024701:	83 c4 20             	add    esp,0x20
c0024704:	0f b6 c3             	movzx  eax,bl
c0024707:	0f b6 df             	movzx  ebx,bh
c002470a:	50                   	push   eax
c002470b:	6a 04                	push   0x4
c002470d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024714:	50                   	push   eax
c0024715:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002471b:	e8 c4 e8 ff ff       	call   c0022fe4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024720:	53                   	push   ebx
c0024721:	6a 05                	push   0x5
c0024723:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002472a:	50                   	push   eax
c002472b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024731:	e8 ae e8 ff ff       	call   c0022fe4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024736:	83 c4 20             	add    esp,0x20
c0024739:	68 a0 00 00 00       	push   0xa0
c002473e:	6a 07                	push   0x7
c0024740:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024747:	50                   	push   eax
c0024748:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002474e:	e8 91 e8 ff ff       	call   c0022fe4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024753:	83 c4 0c             	add    esp,0xc
c0024756:	6a 01                	push   0x1
c0024758:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002475f:	50                   	push   eax
c0024760:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024766:	e8 25 f4 ff ff       	call   c0023b90 <IDE::polling(unsigned char, unsigned int)>
c002476b:	83 c4 10             	add    esp,0x10
c002476e:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0024774:	84 c0                	test   al,al
c0024776:	74 23                	je     c002479b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0024778:	0f b6 d8             	movzx  ebx,al
c002477b:	0f b6 d2             	movzx  edx,dl
c002477e:	53                   	push   ebx
c002477f:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0024786:	50                   	push   eax
c0024787:	52                   	push   edx
c0024788:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002478e:	e8 67 f2 ff ff       	call   c00239fa <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024793:	83 c4 10             	add    esp,0x10
c0024796:	e9 84 01 00 00       	jmp    c002491f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002479b:	0f b6 d2             	movzx  edx,dl
c002479e:	53                   	push   ebx
c002479f:	53                   	push   ebx
c00247a0:	52                   	push   edx
c00247a1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247a7:	e8 26 e8 ff ff       	call   c0022fd2 <IDE::getBase(unsigned char)>
c00247ac:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00247b0:	b9 06 00 00 00       	mov    ecx,0x6
c00247b5:	89 c2                	mov    edx,eax
c00247b7:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c00247ba:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00247be:	83 c4 10             	add    esp,0x10
c00247c1:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00247c7:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00247ce:	85 db                	test   ebx,ebx
c00247d0:	0f 84 ec 00 00 00    	je     c00248c2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c00247d6:	51                   	push   ecx
c00247d7:	51                   	push   ecx
c00247d8:	52                   	push   edx
c00247d9:	50                   	push   eax
c00247da:	e8 73 e9 ff ff       	call   c0023152 <IDE::waitInterrupt(unsigned char)>
c00247df:	83 c4 10             	add    esp,0x10
c00247e2:	84 c0                	test   al,al
c00247e4:	0f 84 d4 fe ff ff    	je     c00246be <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00247ea:	56                   	push   esi
c00247eb:	56                   	push   esi
c00247ec:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247f3:	50                   	push   eax
c00247f4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247fa:	e8 bf e7 ff ff       	call   c0022fbe <IDE::prepareInterrupt(unsigned char)>
c00247ff:	83 c4 0c             	add    esp,0xc
c0024802:	6a 04                	push   0x4
c0024804:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002480b:	50                   	push   eax
c002480c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024812:	e8 8d e8 ff ff       	call   c00230a4 <IDE::read(unsigned char, unsigned char)>
c0024817:	83 c4 0c             	add    esp,0xc
c002481a:	89 c6                	mov    esi,eax
c002481c:	6a 05                	push   0x5
c002481e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024825:	50                   	push   eax
c0024826:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002482c:	e8 73 e8 ff ff       	call   c00230a4 <IDE::read(unsigned char, unsigned char)>
c0024831:	89 f1                	mov    ecx,esi
c0024833:	0f b6 c0             	movzx  eax,al
c0024836:	0f b6 f1             	movzx  esi,cl
c0024839:	c1 e0 08             	shl    eax,0x8
c002483c:	09 c6                	or     esi,eax
c002483e:	d1 fe                	sar    esi,1
c0024840:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0024844:	83 c4 10             	add    esp,0x10
c0024847:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c002484c:	74 41                	je     c002488f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c002484e:	31 c9                	xor    ecx,ecx
c0024850:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024856:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002485d:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0024861:	75 0a                	jne    c002486d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0024863:	01 c9                	add    ecx,ecx
c0024865:	01 cd                	add    ebp,ecx
c0024867:	4b                   	dec    ebx
c0024868:	e9 54 ff ff ff       	jmp    c00247c1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c002486d:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0024872:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0024876:	51                   	push   ecx
c0024877:	51                   	push   ecx
c0024878:	52                   	push   edx
c0024879:	50                   	push   eax
c002487a:	e8 53 e7 ff ff       	call   c0022fd2 <IDE::getBase(unsigned char)>
c002487f:	89 c2                	mov    edx,eax
c0024881:	89 f0                	mov    eax,esi
c0024883:	66 ef                	out    dx,ax
c0024885:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0024889:	83 c4 10             	add    esp,0x10
c002488c:	41                   	inc    ecx
c002488d:	eb c1                	jmp    c0024850 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c002488f:	31 f6                	xor    esi,esi
c0024891:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024897:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002489e:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c00248a2:	75 06                	jne    c00248aa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c00248a4:	01 f6                	add    esi,esi
c00248a6:	01 f5                	add    ebp,esi
c00248a8:	eb bd                	jmp    c0024867 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c00248aa:	51                   	push   ecx
c00248ab:	51                   	push   ecx
c00248ac:	52                   	push   edx
c00248ad:	50                   	push   eax
c00248ae:	e8 1f e7 ff ff       	call   c0022fd2 <IDE::getBase(unsigned char)>
c00248b3:	89 c2                	mov    edx,eax
c00248b5:	66 ed                	in     ax,dx
c00248b7:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c00248bc:	83 c4 10             	add    esp,0x10
c00248bf:	46                   	inc    esi
c00248c0:	eb cf                	jmp    c0024891 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c00248c2:	51                   	push   ecx
c00248c3:	51                   	push   ecx
c00248c4:	52                   	push   edx
c00248c5:	50                   	push   eax
c00248c6:	e8 87 e8 ff ff       	call   c0023152 <IDE::waitInterrupt(unsigned char)>
c00248cb:	83 c4 10             	add    esp,0x10
c00248ce:	84 c0                	test   al,al
c00248d0:	0f 84 e8 fd ff ff    	je     c00246be <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00248d6:	bb a0 86 01 00       	mov    ebx,0x186a0
c00248db:	52                   	push   edx
c00248dc:	52                   	push   edx
c00248dd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00248e4:	50                   	push   eax
c00248e5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00248eb:	e8 ce e6 ff ff       	call   c0022fbe <IDE::prepareInterrupt(unsigned char)>
c00248f0:	83 c4 10             	add    esp,0x10
c00248f3:	50                   	push   eax
c00248f4:	50                   	push   eax
c00248f5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00248fc:	50                   	push   eax
c00248fd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024903:	e8 ca e6 ff ff       	call   c0022fd2 <IDE::getBase(unsigned char)>
c0024908:	8d 50 07             	lea    edx,[eax+0x7]
c002490b:	ec                   	in     al,dx
c002490c:	83 c4 10             	add    esp,0x10
c002490f:	a8 88                	test   al,0x88
c0024911:	74 0a                	je     c002491d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0024913:	4b                   	dec    ebx
c0024914:	75 dd                	jne    c00248f3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0024916:	bb 02 00 00 00       	mov    ebx,0x2
c002491b:	eb 02                	jmp    c002491f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002491d:	31 db                	xor    ebx,ebx
c002491f:	83 c4 1c             	add    esp,0x1c
c0024922:	89 d8                	mov    eax,ebx
c0024924:	5b                   	pop    ebx
c0024925:	5e                   	pop    esi
c0024926:	5f                   	pop    edi
c0024927:	5d                   	pop    ebp
c0024928:	c3                   	ret    
c0024929:	90                   	nop

c002492a <ATAPI::diskRemoved()>:
c002492a:	83 ec 18             	sub    esp,0x18
c002492d:	68 15 cf 02 c0       	push   0xc002cf15
c0024932:	e8 13 e6 fe ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0024937:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002493b:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0024942:	83 c4 1c             	add    esp,0x1c
c0024945:	c3                   	ret    

c0024946 <ATAPI::eject()>:
c0024946:	57                   	push   edi
c0024947:	b9 03 00 00 00       	mov    ecx,0x3
c002494c:	53                   	push   ebx
c002494d:	83 ec 14             	sub    esp,0x14
c0024950:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024954:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024958:	fc                   	cld    
c0024959:	31 c0                	xor    eax,eax
c002495b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002495d:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024962:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0024967:	50                   	push   eax
c0024968:	50                   	push   eax
c0024969:	6a 00                	push   0x0
c002496b:	6a 00                	push   0x0
c002496d:	6a 00                	push   0x0
c002496f:	6a 02                	push   0x2
c0024971:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024975:	50                   	push   eax
c0024976:	53                   	push   ebx
c0024977:	e8 ee fc ff ff       	call   c002466a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002497c:	83 c4 14             	add    esp,0x14
c002497f:	53                   	push   ebx
c0024980:	e8 a5 ff ff ff       	call   c002492a <ATAPI::diskRemoved()>
c0024985:	83 c4 24             	add    esp,0x24
c0024988:	31 c0                	xor    eax,eax
c002498a:	5b                   	pop    ebx
c002498b:	5f                   	pop    edi
c002498c:	c3                   	ret    
c002498d:	90                   	nop

c002498e <ATAPI::diskInserted()>:
c002498e:	53                   	push   ebx
c002498f:	83 ec 14             	sub    esp,0x14
c0024992:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024996:	68 2c cf 02 c0       	push   0xc002cf2c
c002499b:	e8 aa e5 fe ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c00249a0:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c00249a7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00249aa:	e8 4d fe fe ff       	call   c00147fc <PhysicalDisk::startCache()>
c00249af:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00249b3:	83 c4 18             	add    esp,0x18
c00249b6:	5b                   	pop    ebx
c00249b7:	e9 c6 1f ff ff       	jmp    c0016982 <createPartitionsForDisk(PhysicalDisk*)>

c00249bc <ATAPI::detectMedia()>:
c00249bc:	56                   	push   esi
c00249bd:	53                   	push   ebx
c00249be:	83 ec 28             	sub    esp,0x28
c00249c1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00249c5:	6a 0c                	push   0xc
c00249c7:	6a 00                	push   0x0
c00249c9:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00249cd:	56                   	push   esi
c00249ce:	e8 a5 bd fd ff       	call   c0000778 <memset>
c00249d3:	58                   	pop    eax
c00249d4:	5a                   	pop    edx
c00249d5:	6a 00                	push   0x0
c00249d7:	6a 00                	push   0x0
c00249d9:	6a 00                	push   0x0
c00249db:	6a 00                	push   0x0
c00249dd:	56                   	push   esi
c00249de:	53                   	push   ebx
c00249df:	e8 86 fc ff ff       	call   c002466a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00249e4:	83 c4 1c             	add    esp,0x1c
c00249e7:	6a 0c                	push   0xc
c00249e9:	6a 00                	push   0x0
c00249eb:	56                   	push   esi
c00249ec:	e8 87 bd fd ff       	call   c0000778 <memset>
c00249f1:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00249f6:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00249fb:	59                   	pop    ecx
c00249fc:	58                   	pop    eax
c00249fd:	6a 01                	push   0x1
c00249ff:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0024a03:	50                   	push   eax
c0024a04:	6a 00                	push   0x0
c0024a06:	6a 12                	push   0x12
c0024a08:	56                   	push   esi
c0024a09:	53                   	push   ebx
c0024a0a:	e8 5b fc ff ff       	call   c002466a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024a0f:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0024a13:	83 c4 20             	add    esp,0x20
c0024a16:	83 e0 7f             	and    eax,0x7f
c0024a19:	3c 70                	cmp    al,0x70
c0024a1b:	74 15                	je     c0024a32 <ATAPI::detectMedia()+0x76>
c0024a1d:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024a24:	75 0c                	jne    c0024a32 <ATAPI::detectMedia()+0x76>
c0024a26:	83 ec 0c             	sub    esp,0xc
c0024a29:	53                   	push   ebx
c0024a2a:	e8 5f ff ff ff       	call   c002498e <ATAPI::diskInserted()>
c0024a2f:	83 c4 10             	add    esp,0x10
c0024a32:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024a36:	83 e0 0f             	and    eax,0xf
c0024a39:	3c 02                	cmp    al,0x2
c0024a3b:	75 1b                	jne    c0024a58 <ATAPI::detectMedia()+0x9c>
c0024a3d:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024a42:	75 2d                	jne    c0024a71 <ATAPI::detectMedia()+0xb5>
c0024a44:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024a4b:	74 24                	je     c0024a71 <ATAPI::detectMedia()+0xb5>
c0024a4d:	83 ec 0c             	sub    esp,0xc
c0024a50:	53                   	push   ebx
c0024a51:	e8 d4 fe ff ff       	call   c002492a <ATAPI::diskRemoved()>
c0024a56:	eb 16                	jmp    c0024a6e <ATAPI::detectMedia()+0xb2>
c0024a58:	84 c0                	test   al,al
c0024a5a:	75 15                	jne    c0024a71 <ATAPI::detectMedia()+0xb5>
c0024a5c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024a63:	75 0c                	jne    c0024a71 <ATAPI::detectMedia()+0xb5>
c0024a65:	83 ec 0c             	sub    esp,0xc
c0024a68:	53                   	push   ebx
c0024a69:	e8 20 ff ff ff       	call   c002498e <ATAPI::diskInserted()>
c0024a6e:	83 c4 10             	add    esp,0x10
c0024a71:	83 c4 24             	add    esp,0x24
c0024a74:	5b                   	pop    ebx
c0024a75:	5e                   	pop    esi
c0024a76:	c3                   	ret    
c0024a77:	90                   	nop

c0024a78 <ATAPI::open(int, int, void*)>:
c0024a78:	53                   	push   ebx
c0024a79:	83 ec 08             	sub    esp,0x8
c0024a7c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024a80:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024a84:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024a88:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024a8e:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024a94:	c1 e0 06             	shl    eax,0x6
c0024a97:	01 d0                	add    eax,edx
c0024a99:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0024aa0:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0024aa6:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0024aad:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024ab7:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024abd:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024ac4:	6a 04                	push   0x4
c0024ac6:	6a 0c                	push   0xc
c0024ac8:	51                   	push   ecx
c0024ac9:	52                   	push   edx
c0024aca:	e8 15 e5 ff ff       	call   c0022fe4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024acf:	90                   	nop
c0024ad0:	90                   	nop
c0024ad1:	6a 00                	push   0x0
c0024ad3:	6a 0c                	push   0xc
c0024ad5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024adc:	50                   	push   eax
c0024add:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024ae3:	e8 fc e4 ff ff       	call   c0022fe4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024ae8:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0024aef:	83 c4 14             	add    esp,0x14
c0024af2:	53                   	push   ebx
c0024af3:	e8 c4 fe ff ff       	call   c00249bc <ATAPI::detectMedia()>
c0024af8:	31 c0                	xor    eax,eax
c0024afa:	83 c4 18             	add    esp,0x18
c0024afd:	5b                   	pop    ebx
c0024afe:	c3                   	ret    
c0024aff:	90                   	nop

c0024b00 <ATAPI::read(unsigned long long, int, void*)>:
c0024b00:	55                   	push   ebp
c0024b01:	57                   	push   edi
c0024b02:	56                   	push   esi
c0024b03:	53                   	push   ebx
c0024b04:	83 ec 1c             	sub    esp,0x1c
c0024b07:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024b0b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024b0f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024b13:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024b1a:	74 41                	je     c0024b5d <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0024b1c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024b20:	b9 03 00 00 00       	mov    ecx,0x3
c0024b25:	fc                   	cld    
c0024b26:	31 c0                	xor    eax,eax
c0024b28:	86 fb                	xchg   bl,bh
c0024b2a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024b2c:	c1 c3 10             	rol    ebx,0x10
c0024b2f:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0024b34:	89 e8                	mov    eax,ebp
c0024b36:	86 fb                	xchg   bl,bh
c0024b38:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024b3c:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0024b40:	50                   	push   eax
c0024b41:	50                   	push   eax
c0024b42:	55                   	push   ebp
c0024b43:	c1 e5 0b             	shl    ebp,0xb
c0024b46:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024b4a:	6a 00                	push   0x0
c0024b4c:	55                   	push   ebp
c0024b4d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024b51:	50                   	push   eax
c0024b52:	56                   	push   esi
c0024b53:	e8 12 fb ff ff       	call   c002466a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024b58:	83 c4 20             	add    esp,0x20
c0024b5b:	eb 1a                	jmp    c0024b77 <ATAPI::read(unsigned long long, int, void*)+0x77>
c0024b5d:	83 ec 0c             	sub    esp,0xc
c0024b60:	56                   	push   esi
c0024b61:	e8 56 fe ff ff       	call   c00249bc <ATAPI::detectMedia()>
c0024b66:	83 c4 10             	add    esp,0x10
c0024b69:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024b70:	75 aa                	jne    c0024b1c <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0024b72:	b8 02 00 00 00       	mov    eax,0x2
c0024b77:	83 c4 1c             	add    esp,0x1c
c0024b7a:	5b                   	pop    ebx
c0024b7b:	5e                   	pop    esi
c0024b7c:	5f                   	pop    edi
c0024b7d:	5d                   	pop    ebp
c0024b7e:	c3                   	ret    
c0024b7f:	90                   	nop

c0024b80 <SATA::close(int, int, void*)>:
c0024b80:	83 ec 0c             	sub    esp,0xc
c0024b83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024b87:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024b8d:	85 c0                	test   eax,eax
c0024b8f:	74 0c                	je     c0024b9d <SATA::close(int, int, void*)+0x1d>
c0024b91:	83 ec 0c             	sub    esp,0xc
c0024b94:	8b 10                	mov    edx,DWORD PTR [eax]
c0024b96:	50                   	push   eax
c0024b97:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024b9a:	83 c4 10             	add    esp,0x10
c0024b9d:	31 c0                	xor    eax,eax
c0024b9f:	83 c4 0c             	add    esp,0xc
c0024ba2:	c3                   	ret    
c0024ba3:	90                   	nop

c0024ba4 <SATA::powerSaving(PowerSavingLevel)>:
c0024ba4:	c3                   	ret    
c0024ba5:	90                   	nop

c0024ba6 <SATA::open(int, int, void*)>:
c0024ba6:	56                   	push   esi
c0024ba7:	53                   	push   ebx
c0024ba8:	50                   	push   eax
c0024ba9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024bad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024bb1:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024bbb:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024bc1:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024bcb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024bcf:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024bd9:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024bdf:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024be6:	e8 f7 b2 fe ff       	call   c000fee2 <Phys::allocatePage()>
c0024beb:	89 c6                	mov    esi,eax
c0024bed:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024bf3:	81 c6 00 10 00 00    	add    esi,0x1000
c0024bf9:	e8 e4 b2 fe ff       	call   c000fee2 <Phys::allocatePage()>
c0024bfe:	39 c6                	cmp    esi,eax
c0024c00:	74 10                	je     c0024c12 <SATA::open(int, int, void*)+0x6c>
c0024c02:	83 ec 0c             	sub    esp,0xc
c0024c05:	68 54 ce 02 c0       	push   0xc002ce54
c0024c0a:	e8 ec 59 ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c0024c0f:	83 c4 10             	add    esp,0x10
c0024c12:	83 ec 0c             	sub    esp,0xc
c0024c15:	6a 02                	push   0x2
c0024c17:	e8 83 cf fe ff       	call   c0011b9f <Virt::allocateKernelVirtualPages(int)>
c0024c1c:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024c22:	e8 13 d2 fe ff       	call   c0011e3a <Virt::getAKernelVAS()>
c0024c27:	6a 03                	push   0x3
c0024c29:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0024c2f:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0024c35:	50                   	push   eax
c0024c36:	e8 3b d7 fe ff       	call   c0012376 <VAS::mapPage(unsigned long, unsigned long, int)>
c0024c3b:	83 c4 14             	add    esp,0x14
c0024c3e:	53                   	push   ebx
c0024c3f:	e8 b8 fb fe ff       	call   c00147fc <PhysicalDisk::startCache()>
c0024c44:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024c47:	e8 36 1d ff ff       	call   c0016982 <createPartitionsForDisk(PhysicalDisk*)>
c0024c4c:	83 c4 14             	add    esp,0x14
c0024c4f:	31 c0                	xor    eax,eax
c0024c51:	5b                   	pop    ebx
c0024c52:	5e                   	pop    esi
c0024c53:	c3                   	ret    

c0024c54 <SATA::SATA()>:
c0024c54:	83 ec 0c             	sub    esp,0xc
c0024c57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c5b:	83 ec 04             	sub    esp,0x4
c0024c5e:	68 00 02 00 00       	push   0x200
c0024c63:	68 68 ce 02 c0       	push   0xc002ce68
c0024c68:	50                   	push   eax
c0024c69:	e8 26 fb fe ff       	call   c0014794 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024c6e:	83 c4 10             	add    esp,0x10
c0024c71:	ba d8 ce 02 c0       	mov    edx,0xc002ced8
c0024c76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c7a:	89 10                	mov    DWORD PTR [eax],edx
c0024c7c:	90                   	nop
c0024c7d:	83 c4 0c             	add    esp,0xc
c0024c80:	c3                   	ret    
c0024c81:	90                   	nop

c0024c82 <SATA::access(unsigned long long, int, void*, bool)>:
c0024c82:	55                   	push   ebp
c0024c83:	57                   	push   edi
c0024c84:	56                   	push   esi
c0024c85:	53                   	push   ebx
c0024c86:	83 ec 2c             	sub    esp,0x2c
c0024c89:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024c8d:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0024c91:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024c95:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0024c99:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024c9d:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024ca2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024ca6:	7e 10                	jle    c0024cb8 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0024ca8:	83 ec 0c             	sub    esp,0xc
c0024cab:	68 78 ce 02 c0       	push   0xc002ce78
c0024cb0:	e8 46 59 ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c0024cb5:	83 c4 10             	add    esp,0x10
c0024cb8:	8b b5 6c 01 00 00    	mov    esi,DWORD PTR [ebp+0x16c]
c0024cbe:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0024cc4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024cca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024cce:	89 f0                	mov    eax,esi
c0024cd0:	c1 e0 07             	shl    eax,0x7
c0024cd3:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024cd7:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024ce1:	53                   	push   ebx
c0024ce2:	8d 46 02             	lea    eax,[esi+0x2]
c0024ce5:	53                   	push   ebx
c0024ce6:	c1 e0 07             	shl    eax,0x7
c0024ce9:	bb 01 00 00 00       	mov    ebx,0x1
c0024cee:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0024cf2:	50                   	push   eax
c0024cf3:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0024cf9:	e8 aa ef ff ff       	call   c0023ca8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024cfe:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0024d02:	83 c4 10             	add    esp,0x10
c0024d05:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c0024d0a:	0f 84 ce 01 00 00    	je     c0024ede <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024d10:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024d14:	c1 e0 09             	shl    eax,0x9
c0024d17:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024d1c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024d20:	74 17                	je     c0024d39 <SATA::access(unsigned long long, int, void*, bool)+0xb7>
c0024d22:	51                   	push   ecx
c0024d23:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024d27:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0024d2b:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024d31:	e8 0e ba fd ff       	call   c0000744 <memcpy>
c0024d36:	83 c4 10             	add    esp,0x10
c0024d39:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024d3f:	8d 46 02             	lea    eax,[esi+0x2]
c0024d42:	c1 e0 07             	shl    eax,0x7
c0024d45:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024d49:	8b 00                	mov    eax,DWORD PTR [eax]
c0024d4b:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024d51:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024d57:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024d5b:	c1 e1 05             	shl    ecx,0x5
c0024d5e:	01 c8                	add    eax,ecx
c0024d60:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024d64:	8a 18                	mov    bl,BYTE PTR [eax]
c0024d66:	83 e1 01             	and    ecx,0x1
c0024d69:	83 e3 bf             	and    ebx,0xffffffbf
c0024d6c:	c1 e1 06             	shl    ecx,0x6
c0024d6f:	09 d9                	or     ecx,ebx
c0024d71:	88 08                	mov    BYTE PTR [eax],cl
c0024d73:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024d75:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024d7b:	81 c9 05 00 01 00    	or     ecx,0x10005
c0024d81:	89 08                	mov    DWORD PTR [eax],ecx
c0024d83:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024d89:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024d8f:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024d95:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024d98:	52                   	push   edx
c0024d99:	68 90 00 00 00       	push   0x90
c0024d9e:	6a 00                	push   0x0
c0024da0:	53                   	push   ebx
c0024da1:	e8 d2 b9 fd ff       	call   c0000778 <memset>
c0024da6:	8b 85 74 01 00 00    	mov    eax,DWORD PTR [ebp+0x174]
c0024dac:	66 89 7b 04          	mov    WORD PTR [ebx+0x4],di
c0024db0:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024db6:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024dba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024dbe:	83 c4 10             	add    esp,0x10
c0024dc1:	8d 48 ff             	lea    ecx,[eax-0x1]
c0024dc4:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024dca:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0024dd0:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024dd5:	09 c8                	or     eax,ecx
c0024dd7:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024ddd:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024de0:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024de7:	66 25 00 7f          	and    ax,0x7f00
c0024deb:	66 0d 27 80          	or     ax,0x8027
c0024def:	80 7c 24 10 01       	cmp    BYTE PTR [esp+0x10],0x1
c0024df4:	66 89 03             	mov    WORD PTR [ebx],ax
c0024df7:	19 c0                	sbb    eax,eax
c0024df9:	83 e0 f0             	and    eax,0xfffffff0
c0024dfc:	83 c0 35             	add    eax,0x35
c0024dff:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
c0024e02:	89 f8                	mov    eax,edi
c0024e04:	c1 e8 10             	shr    eax,0x10
c0024e07:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024e0a:	89 f8                	mov    eax,edi
c0024e0c:	c1 e8 18             	shr    eax,0x18
c0024e0f:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0024e12:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0024e16:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024e19:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024e1d:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024e20:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024e24:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024e28:	89 f3                	mov    ebx,esi
c0024e2a:	31 c0                	xor    eax,eax
c0024e2c:	c1 e3 07             	shl    ebx,0x7
c0024e2f:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c0024e33:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c0024e39:	80 e1 88             	and    cl,0x88
c0024e3c:	74 0a                	je     c0024e48 <SATA::access(unsigned long long, int, void*, bool)+0x1c6>
c0024e3e:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024e43:	74 0a                	je     c0024e4f <SATA::access(unsigned long long, int, void*, bool)+0x1cd>
c0024e45:	40                   	inc    eax
c0024e46:	eb eb                	jmp    c0024e33 <SATA::access(unsigned long long, int, void*, bool)+0x1b1>
c0024e48:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024e4d:	75 0a                	jne    c0024e59 <SATA::access(unsigned long long, int, void*, bool)+0x1d7>
c0024e4f:	83 ec 0c             	sub    esp,0xc
c0024e52:	68 b1 ce 02 c0       	push   0xc002ceb1
c0024e57:	eb 56                	jmp    c0024eaf <SATA::access(unsigned long long, int, void*, bool)+0x22d>
c0024e59:	b8 01 00 00 00       	mov    eax,0x1
c0024e5e:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
c0024e62:	c1 e6 07             	shl    esi,0x7
c0024e65:	d3 e0                	shl    eax,cl
c0024e67:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0024e6b:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c0024e71:	8b 8e 38 01 00 00    	mov    ecx,DWORD PTR [esi+0x138]
c0024e77:	85 c8                	test   eax,ecx
c0024e79:	74 20                	je     c0024e9b <SATA::access(unsigned long long, int, void*, bool)+0x219>
c0024e7b:	8b 8e 10 01 00 00    	mov    ecx,DWORD PTR [esi+0x110]
c0024e81:	0f ba e1 1e          	bt     ecx,0x1e
c0024e85:	73 ea                	jae    c0024e71 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c0024e87:	83 ec 0c             	sub    esp,0xc
c0024e8a:	31 db                	xor    ebx,ebx
c0024e8c:	68 bf ce 02 c0       	push   0xc002cebf
c0024e91:	e8 65 57 ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c0024e96:	83 c4 10             	add    esp,0x10
c0024e99:	eb 43                	jmp    c0024ede <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024e9b:	8b 86 10 01 00 00    	mov    eax,DWORD PTR [esi+0x110]
c0024ea1:	0f ba e0 1e          	bt     eax,0x1e
c0024ea5:	73 17                	jae    c0024ebe <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c0024ea7:	83 ec 0c             	sub    esp,0xc
c0024eaa:	68 bf ce 02 c0       	push   0xc002cebf
c0024eaf:	e8 47 57 ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c0024eb4:	bb 01 00 00 00       	mov    ebx,0x1
c0024eb9:	83 c4 10             	add    esp,0x10
c0024ebc:	eb 20                	jmp    c0024ede <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024ebe:	31 db                	xor    ebx,ebx
c0024ec0:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024ec5:	75 17                	jne    c0024ede <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024ec7:	50                   	push   eax
c0024ec8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024ecc:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024ed2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0024ed6:	e8 69 b8 fd ff       	call   c0000744 <memcpy>
c0024edb:	83 c4 10             	add    esp,0x10
c0024ede:	83 c4 2c             	add    esp,0x2c
c0024ee1:	89 d8                	mov    eax,ebx
c0024ee3:	5b                   	pop    ebx
c0024ee4:	5e                   	pop    esi
c0024ee5:	5f                   	pop    edi
c0024ee6:	5d                   	pop    ebp
c0024ee7:	c3                   	ret    

c0024ee8 <SATA::read(unsigned long long, int, void*)>:
c0024ee8:	57                   	push   edi
c0024ee9:	b8 04 00 00 00       	mov    eax,0x4
c0024eee:	56                   	push   esi
c0024eef:	53                   	push   ebx
c0024ef0:	83 ec 10             	sub    esp,0x10
c0024ef3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024ef7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024efb:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024efe:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024f02:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024f06:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024f0c:	77 3b                	ja     c0024f49 <SATA::read(unsigned long long, int, void*)+0x61>
c0024f0e:	b8 06 00 00 00       	mov    eax,0x6
c0024f13:	85 d2                	test   edx,edx
c0024f15:	74 32                	je     c0024f49 <SATA::read(unsigned long long, int, void*)+0x61>
c0024f17:	50                   	push   eax
c0024f18:	50                   	push   eax
c0024f19:	6a 00                	push   0x0
c0024f1b:	52                   	push   edx
c0024f1c:	53                   	push   ebx
c0024f1d:	57                   	push   edi
c0024f1e:	56                   	push   esi
c0024f1f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024f23:	e8 5a fd ff ff       	call   c0024c82 <SATA::access(unsigned long long, int, void*, bool)>
c0024f28:	83 c4 20             	add    esp,0x20
c0024f2b:	85 c0                	test   eax,eax
c0024f2d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024f31:	75 11                	jne    c0024f44 <SATA::read(unsigned long long, int, void*)+0x5c>
c0024f33:	01 1d 68 27 03 c0    	add    DWORD PTR ds:0xc0032768,ebx
c0024f39:	e8 b6 ba fe ff       	call   c00109f4 <VgaText::updateDiskUsage()>
c0024f3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024f42:	eb 05                	jmp    c0024f49 <SATA::read(unsigned long long, int, void*)+0x61>
c0024f44:	b8 01 00 00 00       	mov    eax,0x1
c0024f49:	83 c4 10             	add    esp,0x10
c0024f4c:	5b                   	pop    ebx
c0024f4d:	5e                   	pop    esi
c0024f4e:	5f                   	pop    edi
c0024f4f:	c3                   	ret    

c0024f50 <SATA::write(unsigned long long, int, void*)>:
c0024f50:	55                   	push   ebp
c0024f51:	b8 04 00 00 00       	mov    eax,0x4
c0024f56:	57                   	push   edi
c0024f57:	56                   	push   esi
c0024f58:	53                   	push   ebx
c0024f59:	83 ec 1c             	sub    esp,0x1c
c0024f5c:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024f60:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0024f64:	8d 75 ff             	lea    esi,[ebp-0x1]
c0024f67:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0024f6b:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0024f6f:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0024f75:	77 56                	ja     c0024fcd <SATA::write(unsigned long long, int, void*)+0x7d>
c0024f77:	b8 06 00 00 00       	mov    eax,0x6
c0024f7c:	85 ff                	test   edi,edi
c0024f7e:	74 4d                	je     c0024fcd <SATA::write(unsigned long long, int, void*)+0x7d>
c0024f80:	89 ee                	mov    esi,ebp
c0024f82:	c1 e6 09             	shl    esi,0x9
c0024f85:	01 fe                	add    esi,edi
c0024f87:	89 c8                	mov    eax,ecx
c0024f89:	89 da                	mov    edx,ebx
c0024f8b:	83 c0 01             	add    eax,0x1
c0024f8e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024f92:	83 d2 00             	adc    edx,0x0
c0024f95:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0024f99:	50                   	push   eax
c0024f9a:	50                   	push   eax
c0024f9b:	6a 01                	push   0x1
c0024f9d:	57                   	push   edi
c0024f9e:	81 c7 00 02 00 00    	add    edi,0x200
c0024fa4:	6a 01                	push   0x1
c0024fa6:	53                   	push   ebx
c0024fa7:	51                   	push   ecx
c0024fa8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024fac:	e8 d1 fc ff ff       	call   c0024c82 <SATA::access(unsigned long long, int, void*, bool)>
c0024fb1:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0024fb5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024fb9:	83 c4 20             	add    esp,0x20
c0024fbc:	39 f7                	cmp    edi,esi
c0024fbe:	75 c7                	jne    c0024f87 <SATA::write(unsigned long long, int, void*)+0x37>
c0024fc0:	01 2d 64 27 03 c0    	add    DWORD PTR ds:0xc0032764,ebp
c0024fc6:	e8 29 ba fe ff       	call   c00109f4 <VgaText::updateDiskUsage()>
c0024fcb:	31 c0                	xor    eax,eax
c0024fcd:	83 c4 1c             	add    esp,0x1c
c0024fd0:	5b                   	pop    ebx
c0024fd1:	5e                   	pop    esi
c0024fd2:	5f                   	pop    edi
c0024fd3:	5d                   	pop    ebp
c0024fd4:	c3                   	ret    
c0024fd5:	90                   	nop

c0024fd6 <SATAPI::write(unsigned long long, int, void*)>:
c0024fd6:	b8 03 00 00 00       	mov    eax,0x3
c0024fdb:	c3                   	ret    

c0024fdc <SATAPI::close(int, int, void*)>:
c0024fdc:	83 ec 0c             	sub    esp,0xc
c0024fdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fe3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024fe9:	85 c0                	test   eax,eax
c0024feb:	74 0c                	je     c0024ff9 <SATAPI::close(int, int, void*)+0x1d>
c0024fed:	83 ec 0c             	sub    esp,0xc
c0024ff0:	8b 10                	mov    edx,DWORD PTR [eax]
c0024ff2:	50                   	push   eax
c0024ff3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024ff6:	83 c4 10             	add    esp,0x10
c0024ff9:	31 c0                	xor    eax,eax
c0024ffb:	83 c4 0c             	add    esp,0xc
c0024ffe:	c3                   	ret    
c0024fff:	90                   	nop

c0025000 <SATAPI::SATAPI()>:
c0025000:	83 ec 0c             	sub    esp,0xc
c0025003:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025007:	83 ec 04             	sub    esp,0x4
c002500a:	68 00 08 00 00       	push   0x800
c002500f:	68 08 cf 02 c0       	push   0xc002cf08
c0025014:	50                   	push   eax
c0025015:	e8 7a f7 fe ff       	call   c0014794 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002501a:	83 c4 10             	add    esp,0x10
c002501d:	ba b4 cf 02 c0       	mov    edx,0xc002cfb4
c0025022:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025026:	89 10                	mov    DWORD PTR [eax],edx
c0025028:	90                   	nop
c0025029:	83 c4 0c             	add    esp,0xc
c002502c:	c3                   	ret    
c002502d:	90                   	nop

c002502e <SATAPI::diskRemoved()>:
c002502e:	83 ec 18             	sub    esp,0x18
c0025031:	68 14 cf 02 c0       	push   0xc002cf14
c0025036:	e8 0f df fe ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c002503b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002503f:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0025046:	83 c4 1c             	add    esp,0x1c
c0025049:	c3                   	ret    

c002504a <SATAPI::diskInserted()>:
c002504a:	53                   	push   ebx
c002504b:	83 ec 14             	sub    esp,0x14
c002504e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025052:	68 2b cf 02 c0       	push   0xc002cf2b
c0025057:	e8 ee de fe ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c002505c:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0025063:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025066:	e8 91 f7 fe ff       	call   c00147fc <PhysicalDisk::startCache()>
c002506b:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c002506f:	83 c4 18             	add    esp,0x18
c0025072:	5b                   	pop    ebx
c0025073:	e9 0a 19 ff ff       	jmp    c0016982 <createPartitionsForDisk(PhysicalDisk*)>

c0025078 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0025078:	55                   	push   ebp
c0025079:	57                   	push   edi
c002507a:	56                   	push   esi
c002507b:	53                   	push   ebx
c002507c:	83 ec 24             	sub    esp,0x24
c002507f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025083:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0025087:	8b be 6c 01 00 00    	mov    edi,DWORD PTR [esi+0x16c]
c002508d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025091:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0025095:	8b 86 70 01 00 00    	mov    eax,DWORD PTR [esi+0x170]
c002509b:	8d 5f 02             	lea    ebx,[edi+0x2]
c002509e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00250a4:	c1 e3 07             	shl    ebx,0x7
c00250a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00250ab:	89 f8                	mov    eax,edi
c00250ad:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00250b1:	c1 e0 07             	shl    eax,0x7
c00250b4:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00250b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00250bc:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c00250c6:	53                   	push   ebx
c00250c7:	ff b6 70 01 00 00    	push   DWORD PTR [esi+0x170]
c00250cd:	e8 d6 eb ff ff       	call   c0023ca8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c00250d2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00250d6:	83 c4 10             	add    esp,0x10
c00250d9:	b8 01 00 00 00       	mov    eax,0x1
c00250de:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00250e3:	0f 84 8a 01 00 00    	je     c0025273 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c00250e9:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c00250ef:	8b 03                	mov    eax,DWORD PTR [ebx]
c00250f1:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c00250f7:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c00250fd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0025101:	c1 e1 05             	shl    ecx,0x5
c0025104:	01 c8                	add    eax,ecx
c0025106:	8b 08                	mov    ecx,DWORD PTR [eax]
c0025108:	81 e1 80 ff 00 00    	and    ecx,0xff80
c002510e:	81 c9 25 00 01 00    	or     ecx,0x10025
c0025114:	89 08                	mov    DWORD PTR [eax],ecx
c0025116:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c002511c:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0025122:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0025128:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c002512b:	52                   	push   edx
c002512c:	68 90 00 00 00       	push   0x90
c0025131:	6a 00                	push   0x0
c0025133:	53                   	push   ebx
c0025134:	e8 3f b6 fd ff       	call   c0000778 <memset>
c0025139:	83 c4 0c             	add    esp,0xc
c002513c:	8d 43 40             	lea    eax,[ebx+0x40]
c002513f:	6a 0c                	push   0xc
c0025141:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025145:	50                   	push   eax
c0025146:	e8 f9 b5 fd ff       	call   c0000744 <memcpy>
c002514b:	8b 86 78 01 00 00    	mov    eax,DWORD PTR [esi+0x178]
c0025151:	89 ea                	mov    edx,ebp
c0025153:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0025159:	c1 ea 18             	shr    edx,0x18
c002515c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0025160:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0025163:	8d 48 ff             	lea    ecx,[eax-0x1]
c0025166:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c002516a:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0025170:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0025176:	25 00 00 c0 ff       	and    eax,0xffc00000
c002517b:	66 89 6b 04          	mov    WORD PTR [ebx+0x4],bp
c002517f:	09 c8                	or     eax,ecx
c0025181:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0025185:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c002518b:	66 8b 03             	mov    ax,WORD PTR [ebx]
c002518e:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0025195:	66 25 00 7f          	and    ax,0x7f00
c0025199:	66 0d 27 80          	or     ax,0x8027
c002519d:	66 89 03             	mov    WORD PTR [ebx],ax
c00251a0:	89 e8                	mov    eax,ebp
c00251a2:	c1 e8 10             	shr    eax,0x10
c00251a5:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00251a8:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c00251ac:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c00251af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00251b3:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c00251b6:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00251ba:	83 c4 10             	add    esp,0x10
c00251bd:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c00251c1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00251c5:	31 c0                	xor    eax,eax
c00251c7:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c00251cd:	80 e1 88             	and    cl,0x88
c00251d0:	74 0a                	je     c00251dc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x164>
c00251d2:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00251d7:	74 0a                	je     c00251e3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c00251d9:	40                   	inc    eax
c00251da:	eb eb                	jmp    c00251c7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x14f>
c00251dc:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00251e1:	75 0f                	jne    c00251f2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17a>
c00251e3:	83 ec 0c             	sub    esp,0xc
c00251e6:	68 b1 ce 02 c0       	push   0xc002ceb1
c00251eb:	e8 0b 54 ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c00251f0:	eb 3a                	jmp    c002522c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b4>
c00251f2:	b8 01 00 00 00       	mov    eax,0x1
c00251f7:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00251fb:	c1 e7 07             	shl    edi,0x7
c00251fe:	d3 e0                	shl    eax,cl
c0025200:	03 3c 24             	add    edi,DWORD PTR [esp]
c0025203:	89 82 38 01 00 00    	mov    DWORD PTR [edx+0x138],eax
c0025209:	8b 97 38 01 00 00    	mov    edx,DWORD PTR [edi+0x138]
c002520f:	85 d0                	test   eax,edx
c0025211:	74 23                	je     c0025236 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1be>
c0025213:	8b 97 10 01 00 00    	mov    edx,DWORD PTR [edi+0x110]
c0025219:	0f ba e2 1e          	bt     edx,0x1e
c002521d:	73 ea                	jae    c0025209 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x191>
c002521f:	83 ec 0c             	sub    esp,0xc
c0025222:	68 43 cf 02 c0       	push   0xc002cf43
c0025227:	e8 1e dd fe ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c002522c:	83 c4 10             	add    esp,0x10
c002522f:	b8 01 00 00 00       	mov    eax,0x1
c0025234:	eb 3d                	jmp    c0025273 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c0025236:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c002523c:	0f ba e0 1e          	bt     eax,0x1e
c0025240:	73 0a                	jae    c002524c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d4>
c0025242:	83 ec 0c             	sub    esp,0xc
c0025245:	68 56 cf 02 c0       	push   0xc002cf56
c002524a:	eb db                	jmp    c0025227 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1af>
c002524c:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0025251:	74 1e                	je     c0025271 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c0025253:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0025258:	74 17                	je     c0025271 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c002525a:	50                   	push   eax
c002525b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002525f:	ff b6 7c 01 00 00    	push   DWORD PTR [esi+0x17c]
c0025265:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0025269:	e8 d6 b4 fd ff       	call   c0000744 <memcpy>
c002526e:	83 c4 10             	add    esp,0x10
c0025271:	31 c0                	xor    eax,eax
c0025273:	83 c4 1c             	add    esp,0x1c
c0025276:	5b                   	pop    ebx
c0025277:	5e                   	pop    esi
c0025278:	5f                   	pop    edi
c0025279:	5d                   	pop    ebp
c002527a:	c3                   	ret    
c002527b:	90                   	nop

c002527c <SATAPI::eject()>:
c002527c:	57                   	push   edi
c002527d:	b9 03 00 00 00       	mov    ecx,0x3
c0025282:	53                   	push   ebx
c0025283:	83 ec 14             	sub    esp,0x14
c0025286:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002528a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002528e:	fc                   	cld    
c002528f:	31 c0                	xor    eax,eax
c0025291:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025293:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0025298:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002529d:	50                   	push   eax
c002529e:	6a 00                	push   0x0
c00252a0:	6a 00                	push   0x0
c00252a2:	6a 00                	push   0x0
c00252a4:	6a 00                	push   0x0
c00252a6:	6a 02                	push   0x2
c00252a8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00252ac:	50                   	push   eax
c00252ad:	53                   	push   ebx
c00252ae:	e8 c5 fd ff ff       	call   c0025078 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00252b3:	83 c4 14             	add    esp,0x14
c00252b6:	53                   	push   ebx
c00252b7:	e8 72 fd ff ff       	call   c002502e <SATAPI::diskRemoved()>
c00252bc:	83 c4 24             	add    esp,0x24
c00252bf:	31 c0                	xor    eax,eax
c00252c1:	5b                   	pop    ebx
c00252c2:	5f                   	pop    edi
c00252c3:	c3                   	ret    

c00252c4 <SATAPI::detectMedia()>:
c00252c4:	56                   	push   esi
c00252c5:	53                   	push   ebx
c00252c6:	83 ec 28             	sub    esp,0x28
c00252c9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00252cd:	6a 0c                	push   0xc
c00252cf:	6a 00                	push   0x0
c00252d1:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00252d5:	56                   	push   esi
c00252d6:	e8 9d b4 fd ff       	call   c0000778 <memset>
c00252db:	83 c4 0c             	add    esp,0xc
c00252de:	6a 00                	push   0x0
c00252e0:	6a 00                	push   0x0
c00252e2:	6a 00                	push   0x0
c00252e4:	6a 00                	push   0x0
c00252e6:	6a 00                	push   0x0
c00252e8:	56                   	push   esi
c00252e9:	53                   	push   ebx
c00252ea:	e8 89 fd ff ff       	call   c0025078 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00252ef:	83 c4 1c             	add    esp,0x1c
c00252f2:	6a 0c                	push   0xc
c00252f4:	6a 00                	push   0x0
c00252f6:	56                   	push   esi
c00252f7:	e8 7c b4 fd ff       	call   c0000778 <memset>
c00252fc:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0025301:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0025306:	83 c4 0c             	add    esp,0xc
c0025309:	6a 01                	push   0x1
c002530b:	8d 44 24 16          	lea    eax,[esp+0x16]
c002530f:	50                   	push   eax
c0025310:	6a 00                	push   0x0
c0025312:	6a 00                	push   0x0
c0025314:	6a 12                	push   0x12
c0025316:	56                   	push   esi
c0025317:	53                   	push   ebx
c0025318:	e8 5b fd ff ff       	call   c0025078 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002531d:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0025321:	83 c4 20             	add    esp,0x20
c0025324:	83 e0 7f             	and    eax,0x7f
c0025327:	3c 70                	cmp    al,0x70
c0025329:	74 15                	je     c0025340 <SATAPI::detectMedia()+0x7c>
c002532b:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025332:	75 0c                	jne    c0025340 <SATAPI::detectMedia()+0x7c>
c0025334:	83 ec 0c             	sub    esp,0xc
c0025337:	53                   	push   ebx
c0025338:	e8 0d fd ff ff       	call   c002504a <SATAPI::diskInserted()>
c002533d:	83 c4 10             	add    esp,0x10
c0025340:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0025344:	83 e0 0f             	and    eax,0xf
c0025347:	3c 02                	cmp    al,0x2
c0025349:	75 1b                	jne    c0025366 <SATAPI::detectMedia()+0xa2>
c002534b:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0025350:	75 2d                	jne    c002537f <SATAPI::detectMedia()+0xbb>
c0025352:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025359:	74 24                	je     c002537f <SATAPI::detectMedia()+0xbb>
c002535b:	83 ec 0c             	sub    esp,0xc
c002535e:	53                   	push   ebx
c002535f:	e8 ca fc ff ff       	call   c002502e <SATAPI::diskRemoved()>
c0025364:	eb 16                	jmp    c002537c <SATAPI::detectMedia()+0xb8>
c0025366:	84 c0                	test   al,al
c0025368:	75 15                	jne    c002537f <SATAPI::detectMedia()+0xbb>
c002536a:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025371:	75 0c                	jne    c002537f <SATAPI::detectMedia()+0xbb>
c0025373:	83 ec 0c             	sub    esp,0xc
c0025376:	53                   	push   ebx
c0025377:	e8 ce fc ff ff       	call   c002504a <SATAPI::diskInserted()>
c002537c:	83 c4 10             	add    esp,0x10
c002537f:	83 c4 24             	add    esp,0x24
c0025382:	5b                   	pop    ebx
c0025383:	5e                   	pop    esi
c0025384:	c3                   	ret    
c0025385:	90                   	nop

c0025386 <SATAPI::open(int, int, void*)>:
c0025386:	56                   	push   esi
c0025387:	53                   	push   ebx
c0025388:	50                   	push   eax
c0025389:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002538d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025391:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002539b:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00253a1:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00253ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00253af:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00253b9:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00253bf:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00253c6:	e8 17 ab fe ff       	call   c000fee2 <Phys::allocatePage()>
c00253cb:	89 c6                	mov    esi,eax
c00253cd:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00253d3:	81 c6 00 10 00 00    	add    esi,0x1000
c00253d9:	e8 04 ab fe ff       	call   c000fee2 <Phys::allocatePage()>
c00253de:	39 c6                	cmp    esi,eax
c00253e0:	74 10                	je     c00253f2 <SATAPI::open(int, int, void*)+0x6c>
c00253e2:	83 ec 0c             	sub    esp,0xc
c00253e5:	68 6b cf 02 c0       	push   0xc002cf6b
c00253ea:	e8 0c 52 ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c00253ef:	83 c4 10             	add    esp,0x10
c00253f2:	83 ec 0c             	sub    esp,0xc
c00253f5:	6a 02                	push   0x2
c00253f7:	e8 a3 c7 fe ff       	call   c0011b9f <Virt::allocateKernelVirtualPages(int)>
c00253fc:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0025402:	e8 33 ca fe ff       	call   c0011e3a <Virt::getAKernelVAS()>
c0025407:	6a 03                	push   0x3
c0025409:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c002540f:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0025415:	50                   	push   eax
c0025416:	e8 5b cf fe ff       	call   c0012376 <VAS::mapPage(unsigned long, unsigned long, int)>
c002541b:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0025422:	83 c4 14             	add    esp,0x14
c0025425:	53                   	push   ebx
c0025426:	e8 99 fe ff ff       	call   c00252c4 <SATAPI::detectMedia()>
c002542b:	83 c4 14             	add    esp,0x14
c002542e:	31 c0                	xor    eax,eax
c0025430:	5b                   	pop    ebx
c0025431:	5e                   	pop    esi
c0025432:	c3                   	ret    
c0025433:	90                   	nop

c0025434 <SATAPI::read(unsigned long long, int, void*)>:
c0025434:	55                   	push   ebp
c0025435:	57                   	push   edi
c0025436:	56                   	push   esi
c0025437:	53                   	push   ebx
c0025438:	83 ec 1c             	sub    esp,0x1c
c002543b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002543f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025443:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025447:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c002544e:	74 19                	je     c0025469 <SATAPI::read(unsigned long long, int, void*)+0x35>
c0025450:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0025455:	7e 2e                	jle    c0025485 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025457:	83 ec 0c             	sub    esp,0xc
c002545a:	68 81 cf 02 c0       	push   0xc002cf81
c002545f:	e8 97 51 ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c0025464:	83 c4 10             	add    esp,0x10
c0025467:	eb 1c                	jmp    c0025485 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025469:	83 ec 0c             	sub    esp,0xc
c002546c:	55                   	push   ebp
c002546d:	e8 52 fe ff ff       	call   c00252c4 <SATAPI::detectMedia()>
c0025472:	83 c4 10             	add    esp,0x10
c0025475:	b8 02 00 00 00       	mov    eax,0x2
c002547a:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025481:	75 cd                	jne    c0025450 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c0025483:	eb 49                	jmp    c00254ce <SATAPI::read(unsigned long long, int, void*)+0x9a>
c0025485:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025489:	b9 03 00 00 00       	mov    ecx,0x3
c002548e:	fc                   	cld    
c002548f:	31 c0                	xor    eax,eax
c0025491:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025493:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0025498:	89 d8                	mov    eax,ebx
c002549a:	86 e0                	xchg   al,ah
c002549c:	c1 c0 10             	rol    eax,0x10
c002549f:	86 e0                	xchg   al,ah
c00254a1:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c00254a5:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c00254a9:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00254ad:	50                   	push   eax
c00254ae:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00254b2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00254b6:	56                   	push   esi
c00254b7:	53                   	push   ebx
c00254b8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00254bc:	c1 e0 0b             	shl    eax,0xb
c00254bf:	50                   	push   eax
c00254c0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00254c4:	50                   	push   eax
c00254c5:	55                   	push   ebp
c00254c6:	e8 ad fb ff ff       	call   c0025078 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00254cb:	83 c4 20             	add    esp,0x20
c00254ce:	83 c4 1c             	add    esp,0x1c
c00254d1:	5b                   	pop    ebx
c00254d2:	5e                   	pop    esi
c00254d3:	5f                   	pop    edi
c00254d4:	5d                   	pop    ebp
c00254d5:	c3                   	ret    

c00254d6 <AVX::open(int, int, void*)>:
c00254d6:	83 ec 0c             	sub    esp,0xc
c00254d9:	e8 3a 11 00 00       	call   c0026618 <avxInit>
c00254de:	b8 00 00 00 00       	mov    eax,0x0
c00254e3:	83 c4 0c             	add    esp,0xc
c00254e6:	c3                   	ret    
c00254e7:	90                   	nop

c00254e8 <AVX::close(int, int, void*)>:
c00254e8:	83 ec 0c             	sub    esp,0xc
c00254eb:	e8 29 11 00 00       	call   c0026619 <avxClose>
c00254f0:	b8 00 00 00 00       	mov    eax,0x0
c00254f5:	83 c4 0c             	add    esp,0xc
c00254f8:	c3                   	ret    
c00254f9:	90                   	nop

c00254fa <AVX::available()>:
c00254fa:	83 ec 0c             	sub    esp,0xc
c00254fd:	e8 0e 11 00 00       	call   c0026610 <avxDetect>
c0025502:	85 c0                	test   eax,eax
c0025504:	0f 95 c0             	setne  al
c0025507:	83 c4 0c             	add    esp,0xc
c002550a:	c3                   	ret    
c002550b:	90                   	nop

c002550c <AVX::save(void*)>:
c002550c:	83 ec 0c             	sub    esp,0xc
c002550f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025513:	83 ec 0c             	sub    esp,0xc
c0025516:	50                   	push   eax
c0025517:	e8 fa 10 00 00       	call   c0026616 <avxSave>
c002551c:	83 c4 10             	add    esp,0x10
c002551f:	90                   	nop
c0025520:	83 c4 0c             	add    esp,0xc
c0025523:	c3                   	ret    

c0025524 <AVX::load(void*)>:
c0025524:	83 ec 0c             	sub    esp,0xc
c0025527:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002552b:	83 ec 0c             	sub    esp,0xc
c002552e:	50                   	push   eax
c002552f:	e8 e3 10 00 00       	call   c0026617 <avxLoad>
c0025534:	83 c4 10             	add    esp,0x10
c0025537:	90                   	nop
c0025538:	83 c4 0c             	add    esp,0xc
c002553b:	c3                   	ret    

c002553c <AVX::AVX()>:
c002553c:	83 ec 0c             	sub    esp,0xc
c002553f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025543:	83 ec 08             	sub    esp,0x8
c0025546:	68 e4 cf 02 c0       	push   0xc002cfe4
c002554b:	50                   	push   eax
c002554c:	e8 21 f3 fe ff       	call   c0014872 <FPU::FPU(char const*)>
c0025551:	83 c4 10             	add    esp,0x10
c0025554:	ba f4 cf 02 c0       	mov    edx,0xc002cff4
c0025559:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002555d:	89 10                	mov    DWORD PTR [eax],edx
c002555f:	90                   	nop
c0025560:	83 c4 0c             	add    esp,0xc
c0025563:	c3                   	ret    

c0025564 <MMX::available()>:
c0025564:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0025569:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c002556f:	83 e0 20             	and    eax,0x20
c0025572:	84 c0                	test   al,al
c0025574:	0f 95 c0             	setne  al
c0025577:	c3                   	ret    

c0025578 <MMX::open(int, int, void*)>:
c0025578:	83 ec 0c             	sub    esp,0xc
c002557b:	e8 1c 11 00 00       	call   c002669c <x87Init>
c0025580:	b8 00 00 00 00       	mov    eax,0x0
c0025585:	83 c4 0c             	add    esp,0xc
c0025588:	c3                   	ret    
c0025589:	90                   	nop

c002558a <MMX::close(int, int, void*)>:
c002558a:	83 ec 0c             	sub    esp,0xc
c002558d:	e8 24 11 00 00       	call   c00266b6 <x87Close>
c0025592:	b8 00 00 00 00       	mov    eax,0x0
c0025597:	83 c4 0c             	add    esp,0xc
c002559a:	c3                   	ret    
c002559b:	90                   	nop

c002559c <MMX::save(void*)>:
c002559c:	83 ec 0c             	sub    esp,0xc
c002559f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00255a3:	83 ec 0c             	sub    esp,0xc
c00255a6:	50                   	push   eax
c00255a7:	e8 e5 10 00 00       	call   c0026691 <x87Save>
c00255ac:	83 c4 10             	add    esp,0x10
c00255af:	90                   	nop
c00255b0:	83 c4 0c             	add    esp,0xc
c00255b3:	c3                   	ret    

c00255b4 <MMX::load(void*)>:
c00255b4:	83 ec 0c             	sub    esp,0xc
c00255b7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00255bb:	83 ec 0c             	sub    esp,0xc
c00255be:	50                   	push   eax
c00255bf:	e8 d3 10 00 00       	call   c0026697 <x87Load>
c00255c4:	83 c4 10             	add    esp,0x10
c00255c7:	90                   	nop
c00255c8:	83 c4 0c             	add    esp,0xc
c00255cb:	c3                   	ret    

c00255cc <MMX::MMX()>:
c00255cc:	83 ec 0c             	sub    esp,0xc
c00255cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255d3:	83 ec 08             	sub    esp,0x8
c00255d6:	68 24 d0 02 c0       	push   0xc002d024
c00255db:	50                   	push   eax
c00255dc:	e8 91 f2 fe ff       	call   c0014872 <FPU::FPU(char const*)>
c00255e1:	83 c4 10             	add    esp,0x10
c00255e4:	ba 34 d0 02 c0       	mov    edx,0xc002d034
c00255e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255ed:	89 10                	mov    DWORD PTR [eax],edx
c00255ef:	90                   	nop
c00255f0:	83 c4 0c             	add    esp,0xc
c00255f3:	c3                   	ret    

c00255f4 <SSE::open(int, int, void*)>:
c00255f4:	83 ec 0c             	sub    esp,0xc
c00255f7:	e8 58 10 00 00       	call   c0026654 <sseInit>
c00255fc:	b8 00 00 00 00       	mov    eax,0x0
c0025601:	83 c4 0c             	add    esp,0xc
c0025604:	c3                   	ret    
c0025605:	90                   	nop

c0025606 <SSE::close(int, int, void*)>:
c0025606:	83 ec 0c             	sub    esp,0xc
c0025609:	e8 56 10 00 00       	call   c0026664 <sseClose>
c002560e:	b8 00 00 00 00       	mov    eax,0x0
c0025613:	83 c4 0c             	add    esp,0xc
c0025616:	c3                   	ret    
c0025617:	90                   	nop

c0025618 <SSE::available()>:
c0025618:	83 ec 1c             	sub    esp,0x1c
c002561b:	e8 10 10 00 00       	call   c0026630 <absolutelyNoChanceInHell>
c0025620:	85 c0                	test   eax,eax
c0025622:	0f 95 c0             	setne  al
c0025625:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0025629:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002562d:	83 c4 1c             	add    esp,0x1c
c0025630:	c3                   	ret    
c0025631:	90                   	nop

c0025632 <SSE::save(void*)>:
c0025632:	83 ec 0c             	sub    esp,0xc
c0025635:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025639:	83 ec 0c             	sub    esp,0xc
c002563c:	50                   	push   eax
c002563d:	e8 06 10 00 00       	call   c0026648 <sseSave>
c0025642:	83 c4 10             	add    esp,0x10
c0025645:	90                   	nop
c0025646:	83 c4 0c             	add    esp,0xc
c0025649:	c3                   	ret    

c002564a <SSE::load(void*)>:
c002564a:	83 ec 0c             	sub    esp,0xc
c002564d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025651:	83 ec 0c             	sub    esp,0xc
c0025654:	50                   	push   eax
c0025655:	e8 f4 0f 00 00       	call   c002664e <sseLoad>
c002565a:	83 c4 10             	add    esp,0x10
c002565d:	90                   	nop
c002565e:	83 c4 0c             	add    esp,0xc
c0025661:	c3                   	ret    

c0025662 <SSE::SSE()>:
c0025662:	83 ec 0c             	sub    esp,0xc
c0025665:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025669:	83 ec 08             	sub    esp,0x8
c002566c:	68 64 d0 02 c0       	push   0xc002d064
c0025671:	50                   	push   eax
c0025672:	e8 fb f1 fe ff       	call   c0014872 <FPU::FPU(char const*)>
c0025677:	83 c4 10             	add    esp,0x10
c002567a:	ba 74 d0 02 c0       	mov    edx,0xc002d074
c002567f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025683:	89 10                	mov    DWORD PTR [eax],edx
c0025685:	90                   	nop
c0025686:	83 c4 0c             	add    esp,0xc
c0025689:	c3                   	ret    

c002568a <x87::open(int, int, void*)>:
c002568a:	83 ec 0c             	sub    esp,0xc
c002568d:	e8 0a 10 00 00       	call   c002669c <x87Init>
c0025692:	b8 00 00 00 00       	mov    eax,0x0
c0025697:	83 c4 0c             	add    esp,0xc
c002569a:	c3                   	ret    
c002569b:	90                   	nop

c002569c <x87::close(int, int, void*)>:
c002569c:	83 ec 0c             	sub    esp,0xc
c002569f:	e8 12 10 00 00       	call   c00266b6 <x87Close>
c00256a4:	b8 00 00 00 00       	mov    eax,0x0
c00256a9:	83 c4 0c             	add    esp,0xc
c00256ac:	c3                   	ret    
c00256ad:	90                   	nop

c00256ae <x87::available()>:
c00256ae:	83 ec 0c             	sub    esp,0xc
c00256b1:	e8 c0 0f 00 00       	call   c0026676 <x87Detect>
c00256b6:	85 c0                	test   eax,eax
c00256b8:	0f 95 c0             	setne  al
c00256bb:	83 c4 0c             	add    esp,0xc
c00256be:	c3                   	ret    
c00256bf:	90                   	nop

c00256c0 <x87::save(void*)>:
c00256c0:	83 ec 0c             	sub    esp,0xc
c00256c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00256c7:	83 ec 0c             	sub    esp,0xc
c00256ca:	50                   	push   eax
c00256cb:	e8 c1 0f 00 00       	call   c0026691 <x87Save>
c00256d0:	83 c4 10             	add    esp,0x10
c00256d3:	90                   	nop
c00256d4:	83 c4 0c             	add    esp,0xc
c00256d7:	c3                   	ret    

c00256d8 <x87::load(void*)>:
c00256d8:	83 ec 0c             	sub    esp,0xc
c00256db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00256df:	83 ec 0c             	sub    esp,0xc
c00256e2:	50                   	push   eax
c00256e3:	e8 af 0f 00 00       	call   c0026697 <x87Load>
c00256e8:	83 c4 10             	add    esp,0x10
c00256eb:	90                   	nop
c00256ec:	83 c4 0c             	add    esp,0xc
c00256ef:	c3                   	ret    

c00256f0 <x87::x87()>:
c00256f0:	83 ec 0c             	sub    esp,0xc
c00256f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256f7:	83 ec 08             	sub    esp,0x8
c00256fa:	68 a4 d0 02 c0       	push   0xc002d0a4
c00256ff:	50                   	push   eax
c0025700:	e8 6d f1 fe ff       	call   c0014872 <FPU::FPU(char const*)>
c0025705:	83 c4 10             	add    esp,0x10
c0025708:	ba b4 d0 02 c0       	mov    edx,0xc002d0b4
c002570d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025711:	89 10                	mov    DWORD PTR [eax],edx
c0025713:	90                   	nop
c0025714:	83 c4 0c             	add    esp,0xc
c0025717:	c3                   	ret    

c0025718 <APIC::disable()>:
c0025718:	90                   	nop
c0025719:	c3                   	ret    

c002571a <APIC::close(int, int, void*)>:
c002571a:	55                   	push   ebp
c002571b:	89 e5                	mov    ebp,esp
c002571d:	83 ec 08             	sub    esp,0x8
c0025720:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025723:	8b 00                	mov    eax,DWORD PTR [eax]
c0025725:	83 c0 3c             	add    eax,0x3c
c0025728:	8b 00                	mov    eax,DWORD PTR [eax]
c002572a:	83 ec 0c             	sub    esp,0xc
c002572d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025730:	ff d0                	call   eax
c0025732:	83 c4 10             	add    esp,0x10
c0025735:	b8 00 00 00 00       	mov    eax,0x0
c002573a:	c9                   	leave  
c002573b:	c3                   	ret    

c002573c <IOAPIC::close(int, int, void*)>:
c002573c:	b8 00 00 00 00       	mov    eax,0x0
c0025741:	c3                   	ret    

c0025742 <APIC::io_wait()>:
c0025742:	eb 00                	jmp    c0025744 <APIC::io_wait()+0x2>
c0025744:	eb 00                	jmp    c0025746 <APIC::io_wait()+0x4>
c0025746:	90                   	nop
c0025747:	c3                   	ret    

c0025748 <APIC::getBase()>:
c0025748:	55                   	push   ebp
c0025749:	89 e5                	mov    ebp,esp
c002574b:	83 ec 18             	sub    esp,0x18
c002574e:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0025753:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025759:	83 e0 08             	and    eax,0x8
c002575c:	84 c0                	test   al,al
c002575e:	75 07                	jne    c0025767 <APIC::getBase()+0x1f>
c0025760:	b8 00 00 00 00       	mov    eax,0x0
c0025765:	eb 21                	jmp    c0025788 <APIC::getBase()+0x40>
c0025767:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c002576c:	83 ec 08             	sub    esp,0x8
c002576f:	6a 1b                	push   0x1b
c0025771:	50                   	push   eax
c0025772:	e8 71 96 fe ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0025777:	83 c4 10             	add    esp,0x10
c002577a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002577d:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025780:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025783:	25 00 f0 ff ff       	and    eax,0xfffff000
c0025788:	c9                   	leave  
c0025789:	c3                   	ret    

c002578a <APIC::eoi(unsigned char)>:
c002578a:	55                   	push   ebp
c002578b:	89 e5                	mov    ebp,esp
c002578d:	83 ec 28             	sub    esp,0x28
c0025790:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025793:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025796:	83 ec 0c             	sub    esp,0xc
c0025799:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002579c:	e8 a7 ff ff ff       	call   c0025748 <APIC::getBase()>
c00257a1:	83 c4 10             	add    esp,0x10
c00257a4:	05 b0 00 00 00       	add    eax,0xb0
c00257a9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00257ac:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00257af:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00257b5:	90                   	nop
c00257b6:	c9                   	leave  
c00257b7:	c3                   	ret    

c00257b8 <APIC::open(int, int, void*)>:
c00257b8:	55                   	push   ebp
c00257b9:	89 e5                	mov    ebp,esp
c00257bb:	57                   	push   edi
c00257bc:	56                   	push   esi
c00257bd:	53                   	push   ebx
c00257be:	83 ec 2c             	sub    esp,0x2c
c00257c1:	83 ec 0c             	sub    esp,0xc
c00257c4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00257c7:	e8 7c ff ff ff       	call   c0025748 <APIC::getBase()>
c00257cc:	83 c4 10             	add    esp,0x10
c00257cf:	89 c2                	mov    edx,eax
c00257d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257d4:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00257da:	0f b6 f8             	movzx  edi,al
c00257dd:	89 d0                	mov    eax,edx
c00257df:	ba 00 00 00 00       	mov    edx,0x0
c00257e4:	89 c1                	mov    ecx,eax
c00257e6:	80 e5 ff             	and    ch,0xff
c00257e9:	89 cb                	mov    ebx,ecx
c00257eb:	0f b6 f2             	movzx  esi,dl
c00257ee:	89 d8                	mov    eax,ebx
c00257f0:	89 f2                	mov    edx,esi
c00257f2:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00257f5:	8d 5f 08             	lea    ebx,[edi+0x8]
c00257f8:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00257fc:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025800:	83 e0 00             	and    eax,0x0
c0025803:	09 d0                	or     eax,edx
c0025805:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025809:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002580c:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025812:	8d 50 01             	lea    edx,[eax+0x1]
c0025815:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025818:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002581e:	0f b6 d0             	movzx  edx,al
c0025821:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025824:	83 c2 08             	add    edx,0x8
c0025827:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002582b:	0f b6 c9             	movzx  ecx,cl
c002582e:	81 c9 00 00 01 00    	or     ecx,0x10000
c0025834:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025838:	83 ec 0c             	sub    esp,0xc
c002583b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002583e:	e8 05 ff ff ff       	call   c0025748 <APIC::getBase()>
c0025843:	83 c4 10             	add    esp,0x10
c0025846:	05 f0 00 00 00       	add    eax,0xf0
c002584b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002584e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025851:	8b 00                	mov    eax,DWORD PTR [eax]
c0025853:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025856:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c002585d:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0025864:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025867:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002586a:	89 10                	mov    DWORD PTR [eax],edx
c002586c:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0025873:	a1 f0 0c 03 c0       	mov    eax,ds:0xc0030cf0
c0025878:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c002587b:	7d 7c                	jge    c00258f9 <APIC::open(int, int, void*)+0x141>
c002587d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025880:	8b 04 85 00 0d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf300]
c0025887:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c002588a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002588d:	8b 04 85 00 0d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf300]
c0025894:	c1 e8 08             	shr    eax,0x8
c0025897:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c002589b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002589e:	8b 04 85 00 0d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf300]
c00258a5:	c1 e8 18             	shr    eax,0x18
c00258a8:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c00258ab:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c00258af:	75 40                	jne    c00258f1 <APIC::open(int, int, void*)+0x139>
c00258b1:	83 ec 0c             	sub    esp,0xc
c00258b4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00258b7:	e8 8c fe ff ff       	call   c0025748 <APIC::getBase()>
c00258bc:	83 c4 10             	add    esp,0x10
c00258bf:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c00258c3:	75 07                	jne    c00258cc <APIC::open(int, int, void*)+0x114>
c00258c5:	ba 60 03 00 00       	mov    edx,0x360
c00258ca:	eb 05                	jmp    c00258d1 <APIC::open(int, int, void*)+0x119>
c00258cc:	ba 50 03 00 00       	mov    edx,0x350
c00258d1:	01 d0                	add    eax,edx
c00258d3:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00258d6:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00258d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00258db:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00258de:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c00258e5:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c00258e9:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00258ec:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00258ef:	89 10                	mov    DWORD PTR [eax],edx
c00258f1:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c00258f4:	e9 7a ff ff ff       	jmp    c0025873 <APIC::open(int, int, void*)+0xbb>
c00258f9:	b8 00 00 00 00       	mov    eax,0x0
c00258fe:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025901:	5b                   	pop    ebx
c0025902:	5e                   	pop    esi
c0025903:	5f                   	pop    edi
c0025904:	5d                   	pop    ebp
c0025905:	c3                   	ret    

c0025906 <IOAPIC::IOAPIC()>:
c0025906:	83 ec 0c             	sub    esp,0xc
c0025909:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002590d:	83 ec 08             	sub    esp,0x8
c0025910:	68 e4 d0 02 c0       	push   0xc002d0e4
c0025915:	50                   	push   eax
c0025916:	e8 45 ec fe ff       	call   c0014560 <Device::Device(char const*)>
c002591b:	83 c4 10             	add    esp,0x10
c002591e:	ba 0c d2 02 c0       	mov    edx,0xc002d20c
c0025923:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025927:	89 10                	mov    DWORD PTR [eax],edx
c0025929:	90                   	nop
c002592a:	83 c4 0c             	add    esp,0xc
c002592d:	c3                   	ret    

c002592e <APIC::APIC()>:
c002592e:	53                   	push   ebx
c002592f:	83 ec 18             	sub    esp,0x18
c0025932:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025936:	83 ec 08             	sub    esp,0x8
c0025939:	68 ec d0 02 c0       	push   0xc002d0ec
c002593e:	50                   	push   eax
c002593f:	e8 88 f3 fe ff       	call   c0014ccc <InterruptController::InterruptController(char const*)>
c0025944:	83 c4 10             	add    esp,0x10
c0025947:	ba c4 d1 02 c0       	mov    edx,0xc002d1c4
c002594c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025950:	89 10                	mov    DWORD PTR [eax],edx
c0025952:	a0 c0 27 03 c0       	mov    al,ds:0xc00327c0
c0025957:	83 f0 01             	xor    eax,0x1
c002595a:	84 c0                	test   al,al
c002595c:	0f 84 a1 00 00 00    	je     c0025a03 <APIC::APIC()+0xd5>
c0025962:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0025967:	a0 a0 0d 03 c0       	mov    al,ds:0xc0030da0
c002596c:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0025970:	0f 83 86 00 00 00    	jae    c00259fc <APIC::APIC()+0xce>
c0025976:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c002597e:	83 ec 0c             	sub    esp,0xc
c0025981:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025985:	e8 b6 9e fe ff       	call   c000f840 <malloc>
c002598a:	83 c4 10             	add    esp,0x10
c002598d:	89 c3                	mov    ebx,eax
c002598f:	83 ec 0c             	sub    esp,0xc
c0025992:	53                   	push   ebx
c0025993:	e8 6e ff ff ff       	call   c0025906 <IOAPIC::IOAPIC()>
c0025998:	83 c4 10             	add    esp,0x10
c002599b:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c002599f:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00259a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00259a8:	89 14 85 a0 27 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd860],edx
c00259af:	a1 80 27 03 c0       	mov    eax,ds:0xc0032780
c00259b4:	40                   	inc    eax
c00259b5:	a3 80 27 03 c0       	mov    ds:0xc0032780,eax
c00259ba:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c00259bf:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00259c5:	83 ec 08             	sub    esp,0x8
c00259c8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00259cc:	50                   	push   eax
c00259cd:	e8 9e e9 fe ff       	call   c0014370 <Device::addChild(Device*)>
c00259d2:	83 c4 10             	add    esp,0x10
c00259d5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00259d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00259db:	83 c0 08             	add    eax,0x8
c00259de:	8b 00                	mov    eax,DWORD PTR [eax]
c00259e0:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00259e5:	6a 00                	push   0x0
c00259e7:	6a 00                	push   0x0
c00259e9:	52                   	push   edx
c00259ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00259ee:	ff d0                	call   eax
c00259f0:	83 c4 10             	add    esp,0x10
c00259f3:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c00259f7:	e9 6b ff ff ff       	jmp    c0025967 <APIC::APIC()+0x39>
c00259fc:	c6 05 c0 27 03 c0 01 	mov    BYTE PTR ds:0xc00327c0,0x1
c0025a03:	90                   	nop
c0025a04:	83 c4 18             	add    esp,0x18
c0025a07:	5b                   	pop    ebx
c0025a08:	c3                   	ret    
c0025a09:	90                   	nop

c0025a0a <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0025a0a:	55                   	push   ebp
c0025a0b:	89 e5                	mov    ebp,esp
c0025a0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a10:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025a16:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025a19:	72 1d                	jb     c0025a38 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025a1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a1e:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0025a24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a27:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0025a2d:	01 d0                	add    eax,edx
c0025a2f:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025a32:	73 04                	jae    c0025a38 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025a34:	b0 01                	mov    al,0x1
c0025a36:	eb 02                	jmp    c0025a3a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0025a38:	b0 00                	mov    al,0x0
c0025a3a:	5d                   	pop    ebp
c0025a3b:	c3                   	ret    

c0025a3c <IOAPIC::read(int)>:
c0025a3c:	55                   	push   ebp
c0025a3d:	89 e5                	mov    ebp,esp
c0025a3f:	83 ec 10             	sub    esp,0x10
c0025a42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a45:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025a4b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025a4e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025a51:	0f b6 d0             	movzx  edx,al
c0025a54:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025a57:	89 10                	mov    DWORD PTR [eax],edx
c0025a59:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025a5c:	83 c0 10             	add    eax,0x10
c0025a5f:	8b 00                	mov    eax,DWORD PTR [eax]
c0025a61:	c9                   	leave  
c0025a62:	c3                   	ret    
c0025a63:	90                   	nop

c0025a64 <IOAPIC::open(int, int, void*)>:
c0025a64:	55                   	push   ebp
c0025a65:	89 e5                	mov    ebp,esp
c0025a67:	57                   	push   edi
c0025a68:	56                   	push   esi
c0025a69:	53                   	push   ebx
c0025a6a:	83 ec 0c             	sub    esp,0xc
c0025a6d:	83 ec 0c             	sub    esp,0xc
c0025a70:	68 17 d1 02 c0       	push   0xc002d117
c0025a75:	e8 d0 d4 fe ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0025a7a:	83 c4 10             	add    esp,0x10
c0025a7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a80:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025a83:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025a89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a8c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025a92:	8b 14 85 e0 0d 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf220]
c0025a99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a9c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025aa2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025aa5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025aab:	8b 14 85 60 0e 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf1a0]
c0025ab2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ab5:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0025abb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025abe:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0025ac4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ac7:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025acd:	0f b6 f8             	movzx  edi,al
c0025ad0:	89 d0                	mov    eax,edx
c0025ad2:	ba 00 00 00 00       	mov    edx,0x0
c0025ad7:	89 c1                	mov    ecx,eax
c0025ad9:	80 e5 ff             	and    ch,0xff
c0025adc:	89 cb                	mov    ebx,ecx
c0025ade:	0f b6 f2             	movzx  esi,dl
c0025ae1:	89 d8                	mov    eax,ebx
c0025ae3:	89 f2                	mov    edx,esi
c0025ae5:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025ae8:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025aeb:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025aef:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025af3:	83 e0 00             	and    eax,0x0
c0025af6:	09 d0                	or     eax,edx
c0025af8:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025afc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025aff:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025b05:	8d 50 01             	lea    edx,[eax+0x1]
c0025b08:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025b0b:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025b11:	0f b6 d0             	movzx  edx,al
c0025b14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b17:	83 c2 08             	add    edx,0x8
c0025b1a:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025b1e:	0f b6 c9             	movzx  ecx,cl
c0025b21:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0025b27:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025b2b:	83 ec 08             	sub    esp,0x8
c0025b2e:	6a 01                	push   0x1
c0025b30:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025b33:	e8 04 ff ff ff       	call   c0025a3c <IOAPIC::read(int)>
c0025b38:	83 c4 10             	add    esp,0x10
c0025b3b:	c1 f8 10             	sar    eax,0x10
c0025b3e:	0f b6 c0             	movzx  eax,al
c0025b41:	8d 50 01             	lea    edx,[eax+0x1]
c0025b44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b47:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0025b4d:	b8 00 00 00 00       	mov    eax,0x0
c0025b52:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025b55:	5b                   	pop    ebx
c0025b56:	5e                   	pop    esi
c0025b57:	5f                   	pop    edi
c0025b58:	5d                   	pop    ebp
c0025b59:	c3                   	ret    

c0025b5a <IOAPIC::write(int, int)>:
c0025b5a:	55                   	push   ebp
c0025b5b:	89 e5                	mov    ebp,esp
c0025b5d:	83 ec 10             	sub    esp,0x10
c0025b60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b63:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025b69:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025b6c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b6f:	0f b6 d0             	movzx  edx,al
c0025b72:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025b75:	89 10                	mov    DWORD PTR [eax],edx
c0025b77:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025b7a:	8d 50 10             	lea    edx,[eax+0x10]
c0025b7d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025b80:	89 02                	mov    DWORD PTR [edx],eax
c0025b82:	90                   	nop
c0025b83:	c9                   	leave  
c0025b84:	c3                   	ret    
c0025b85:	90                   	nop

c0025b86 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0025b86:	55                   	push   ebp
c0025b87:	89 e5                	mov    ebp,esp
c0025b89:	53                   	push   ebx
c0025b8a:	83 ec 2c             	sub    esp,0x2c
c0025b8d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b90:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0025b93:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0025b96:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0025b99:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025b9c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025b9f:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025ba2:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025ba5:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025ba8:	88 d8                	mov    al,bl
c0025baa:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0025bad:	88 c8                	mov    al,cl
c0025baf:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025bb2:	88 d0                	mov    al,dl
c0025bb4:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0025bb7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025bbb:	83 c0 08             	add    eax,0x8
c0025bbe:	01 c0                	add    eax,eax
c0025bc0:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025bc3:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025bc7:	83 c0 08             	add    eax,0x8
c0025bca:	01 c0                	add    eax,eax
c0025bcc:	40                   	inc    eax
c0025bcd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025bd0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025bd3:	50                   	push   eax
c0025bd4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025bd7:	e8 60 fe ff ff       	call   c0025a3c <IOAPIC::read(int)>
c0025bdc:	83 c4 08             	add    esp,0x8
c0025bdf:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025be2:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025be9:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025bec:	c1 e0 18             	shl    eax,0x18
c0025bef:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0025bf2:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025bf5:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025bf8:	52                   	push   edx
c0025bf9:	50                   	push   eax
c0025bfa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025bfd:	e8 58 ff ff ff       	call   c0025b5a <IOAPIC::write(int, int)>
c0025c02:	83 c4 0c             	add    esp,0xc
c0025c05:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025c08:	50                   	push   eax
c0025c09:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c0c:	e8 2b fe ff ff       	call   c0025a3c <IOAPIC::read(int)>
c0025c11:	83 c4 08             	add    esp,0x8
c0025c14:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025c17:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0025c1e:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0025c25:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0025c2c:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025c30:	74 09                	je     c0025c3b <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0025c32:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0025c39:	eb 07                	jmp    c0025c42 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0025c3b:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0025c42:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0025c46:	74 09                	je     c0025c51 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0025c48:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0025c4f:	eb 07                	jmp    c0025c58 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0025c51:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0025c58:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0025c5f:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0025c63:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0025c66:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0025c69:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025c6c:	52                   	push   edx
c0025c6d:	50                   	push   eax
c0025c6e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c71:	e8 e4 fe ff ff       	call   c0025b5a <IOAPIC::write(int, int)>
c0025c76:	83 c4 0c             	add    esp,0xc
c0025c79:	90                   	nop
c0025c7a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0025c7d:	c9                   	leave  
c0025c7e:	c3                   	ret    
c0025c7f:	90                   	nop

c0025c80 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0025c80:	55                   	push   ebp
c0025c81:	89 e5                	mov    ebp,esp
c0025c83:	57                   	push   edi
c0025c84:	56                   	push   esi
c0025c85:	53                   	push   ebx
c0025c86:	83 ec 2c             	sub    esp,0x2c
c0025c89:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025c8c:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025c8f:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025c93:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0025c97:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025c9b:	74 5a                	je     c0025cf7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025c9d:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0025ca1:	7f 44                	jg     c0025ce7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0025ca3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025ca6:	05 60 d6 02 c0       	add    eax,0xc002d660
c0025cab:	8a 00                	mov    al,BYTE PTR [eax]
c0025cad:	0f b6 c0             	movzx  eax,al
c0025cb0:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025cb3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025cb6:	66 8b 84 00 80 0d 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf280]
c0025cbe:	0f b7 c0             	movzx  eax,ax
c0025cc1:	83 e0 02             	and    eax,0x2
c0025cc4:	85 c0                	test   eax,eax
c0025cc6:	74 04                	je     c0025ccc <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025cc8:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0025ccc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025ccf:	66 8b 84 00 80 0d 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf280]
c0025cd7:	0f b7 c0             	movzx  eax,ax
c0025cda:	83 e0 08             	and    eax,0x8
c0025cdd:	85 c0                	test   eax,eax
c0025cdf:	74 16                	je     c0025cf7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025ce1:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025ce5:	eb 10                	jmp    c0025cf7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025ce7:	83 ec 0c             	sub    esp,0xc
c0025cea:	68 28 d1 02 c0       	push   0xc002d128
c0025cef:	e8 07 49 ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c0025cf4:	83 c4 10             	add    esp,0x10
c0025cf7:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025cfb:	a1 80 27 03 c0       	mov    eax,ds:0xc0032780
c0025d00:	83 ec 08             	sub    esp,0x8
c0025d03:	50                   	push   eax
c0025d04:	68 60 d1 02 c0       	push   0xc002d160
c0025d09:	e8 3c d2 fe ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0025d0e:	83 c4 10             	add    esp,0x10
c0025d11:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025d18:	a1 80 27 03 c0       	mov    eax,ds:0xc0032780
c0025d1d:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0025d20:	7d 67                	jge    c0025d89 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025d22:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025d25:	8b 04 85 a0 27 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd860]
c0025d2c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025d2f:	83 ec 08             	sub    esp,0x8
c0025d32:	52                   	push   edx
c0025d33:	50                   	push   eax
c0025d34:	e8 d1 fc ff ff       	call   c0025a0a <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0025d39:	83 c4 10             	add    esp,0x10
c0025d3c:	84 c0                	test   al,al
c0025d3e:	74 44                	je     c0025d84 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0025d40:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025d43:	8b 1c 85 a0 27 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcd860]
c0025d4a:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0025d4e:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025d51:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0025d55:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d58:	83 c0 20             	add    eax,0x20
c0025d5b:	0f b6 f0             	movzx  esi,al
c0025d5e:	b8 00 00 00 00       	mov    eax,0x0
c0025d63:	99                   	cdq    
c0025d64:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025d67:	0f b6 c9             	movzx  ecx,cl
c0025d6a:	83 ec 04             	sub    esp,0x4
c0025d6d:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0025d70:	57                   	push   edi
c0025d71:	56                   	push   esi
c0025d72:	52                   	push   edx
c0025d73:	50                   	push   eax
c0025d74:	51                   	push   ecx
c0025d75:	53                   	push   ebx
c0025d76:	e8 0b fe ff ff       	call   c0025b86 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0025d7b:	83 c4 20             	add    esp,0x20
c0025d7e:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0025d82:	eb 05                	jmp    c0025d89 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025d84:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0025d87:	eb 8f                	jmp    c0025d18 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0025d89:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025d8c:	83 f0 01             	xor    eax,0x1
c0025d8f:	84 c0                	test   al,al
c0025d91:	74 10                	je     c0025da3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0025d93:	83 ec 0c             	sub    esp,0xc
c0025d96:	68 77 d1 02 c0       	push   0xc002d177
c0025d9b:	e8 5b 48 ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c0025da0:	83 c4 10             	add    esp,0x10
c0025da3:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0025da7:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025dae:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0025db2:	7f 65                	jg     c0025e19 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0025db4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025db7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025dba:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025dc1:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025dc4:	01 ca                	add    edx,ecx
c0025dc6:	83 c2 54             	add    edx,0x54
c0025dc9:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025dcd:	85 c0                	test   eax,eax
c0025dcf:	75 43                	jne    c0025e14 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025dd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025dd4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025dd7:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025dde:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025de1:	01 ca                	add    edx,ecx
c0025de3:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025de6:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025de9:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025ded:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025df0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025df3:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025dfa:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025dfd:	01 ca                	add    edx,ecx
c0025dff:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0025e05:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0025e08:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025e0c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025e0f:	83 e8 20             	sub    eax,0x20
c0025e12:	eb 1a                	jmp    c0025e2e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0025e14:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0025e17:	eb 95                	jmp    c0025dae <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025e19:	83 ec 0c             	sub    esp,0xc
c0025e1c:	68 84 d1 02 c0       	push   0xc002d184
c0025e21:	e8 d5 47 ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c0025e26:	83 c4 10             	add    esp,0x10
c0025e29:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025e2e:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025e31:	5b                   	pop    ebx
c0025e32:	5e                   	pop    esi
c0025e33:	5f                   	pop    edi
c0025e34:	5d                   	pop    ebp
c0025e35:	c3                   	ret    

c0025e36 <PIC::disable()>:
c0025e36:	55                   	push   ebp
c0025e37:	89 e5                	mov    ebp,esp
c0025e39:	83 ec 10             	sub    esp,0x10
c0025e3c:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0025e42:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0025e46:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025e49:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025e4d:	ee                   	out    dx,al
c0025e4e:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0025e54:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0025e58:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025e5b:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0025e5f:	ee                   	out    dx,al
c0025e60:	90                   	nop
c0025e61:	c9                   	leave  
c0025e62:	c3                   	ret    
c0025e63:	90                   	nop

c0025e64 <PIC::close(int, int, void*)>:
c0025e64:	55                   	push   ebp
c0025e65:	89 e5                	mov    ebp,esp
c0025e67:	83 ec 08             	sub    esp,0x8
c0025e6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e6d:	8b 00                	mov    eax,DWORD PTR [eax]
c0025e6f:	83 c0 3c             	add    eax,0x3c
c0025e72:	8b 00                	mov    eax,DWORD PTR [eax]
c0025e74:	83 ec 0c             	sub    esp,0xc
c0025e77:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e7a:	ff d0                	call   eax
c0025e7c:	83 c4 10             	add    esp,0x10
c0025e7f:	b8 00 00 00 00       	mov    eax,0x0
c0025e84:	c9                   	leave  
c0025e85:	c3                   	ret    

c0025e86 <PIC::PIC()>:
c0025e86:	83 ec 0c             	sub    esp,0xc
c0025e89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e8d:	83 ec 08             	sub    esp,0x8
c0025e90:	68 30 d2 02 c0       	push   0xc002d230
c0025e95:	50                   	push   eax
c0025e96:	e8 31 ee fe ff       	call   c0014ccc <InterruptController::InterruptController(char const*)>
c0025e9b:	83 c4 10             	add    esp,0x10
c0025e9e:	ba 5c d2 02 c0       	mov    edx,0xc002d25c
c0025ea3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ea7:	89 10                	mov    DWORD PTR [eax],edx
c0025ea9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ead:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025eb3:	0f b6 d0             	movzx  edx,al
c0025eb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025eba:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025ec1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ec5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025ecb:	0f b6 d0             	movzx  edx,al
c0025ece:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ed2:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025ed7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025edb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025ee1:	8d 50 01             	lea    edx,[eax+0x1]
c0025ee4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025ee8:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025eee:	0f b6 d0             	movzx  edx,al
c0025ef1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ef5:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025ef9:	83 e1 3f             	and    ecx,0x3f
c0025efc:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025f00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f04:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f0a:	0f b6 d0             	movzx  edx,al
c0025f0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f11:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0025f18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f1c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f22:	0f b6 d0             	movzx  edx,al
c0025f25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f29:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025f2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f32:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f38:	8d 50 01             	lea    edx,[eax+0x1]
c0025f3b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025f3f:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025f45:	0f b6 d0             	movzx  edx,al
c0025f48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f4c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025f50:	83 e1 3f             	and    ecx,0x3f
c0025f53:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025f57:	90                   	nop
c0025f58:	83 c4 0c             	add    esp,0xc
c0025f5b:	c3                   	ret    

c0025f5c <PIC::ioWait()>:
c0025f5c:	eb 00                	jmp    c0025f5e <PIC::ioWait()+0x2>
c0025f5e:	eb 00                	jmp    c0025f60 <PIC::ioWait()+0x4>
c0025f60:	90                   	nop
c0025f61:	c3                   	ret    

c0025f62 <PIC::getIRQReg(int)>:
c0025f62:	55                   	push   ebp
c0025f63:	89 e5                	mov    ebp,esp
c0025f65:	83 ec 10             	sub    esp,0x10
c0025f68:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025f6b:	0f b6 c0             	movzx  eax,al
c0025f6e:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025f74:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0025f77:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025f7a:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025f7e:	ee                   	out    dx,al
c0025f7f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025f82:	0f b6 c0             	movzx  eax,al
c0025f85:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025f8b:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0025f8e:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025f91:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025f95:	ee                   	out    dx,al
c0025f96:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0025f9c:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0025fa0:	89 c2                	mov    edx,eax
c0025fa2:	ec                   	in     al,dx
c0025fa3:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0025fa6:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025fa9:	0f b6 c0             	movzx  eax,al
c0025fac:	c1 e0 08             	shl    eax,0x8
c0025faf:	89 c1                	mov    ecx,eax
c0025fb1:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0025fb7:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0025fbb:	89 c2                	mov    edx,eax
c0025fbd:	ec                   	in     al,dx
c0025fbe:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0025fc1:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025fc4:	0f b6 c0             	movzx  eax,al
c0025fc7:	09 c8                	or     eax,ecx
c0025fc9:	c9                   	leave  
c0025fca:	c3                   	ret    
c0025fcb:	90                   	nop

c0025fcc <PIC::eoi(unsigned char)>:
c0025fcc:	55                   	push   ebp
c0025fcd:	89 e5                	mov    ebp,esp
c0025fcf:	83 ec 14             	sub    esp,0x14
c0025fd2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025fd5:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0025fd8:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025fdc:	75 1e                	jne    c0025ffc <PIC::eoi(unsigned char)+0x30>
c0025fde:	6a 0b                	push   0xb
c0025fe0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025fe3:	e8 7a ff ff ff       	call   c0025f62 <PIC::getIRQReg(int)>
c0025fe8:	83 c4 08             	add    esp,0x8
c0025feb:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0025fef:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0025ff3:	25 80 00 00 00       	and    eax,0x80
c0025ff8:	85 c0                	test   eax,eax
c0025ffa:	74 5f                	je     c002605b <PIC::eoi(unsigned char)+0x8f>
c0025ffc:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0026000:	75 2d                	jne    c002602f <PIC::eoi(unsigned char)+0x63>
c0026002:	6a 0b                	push   0xb
c0026004:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026007:	e8 56 ff ff ff       	call   c0025f62 <PIC::getIRQReg(int)>
c002600c:	83 c4 08             	add    esp,0x8
c002600f:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0026013:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026016:	66 85 c0             	test   ax,ax
c0026019:	78 14                	js     c002602f <PIC::eoi(unsigned char)+0x63>
c002601b:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0026021:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0026025:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026028:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c002602c:	ee                   	out    dx,al
c002602d:	eb 2d                	jmp    c002605c <PIC::eoi(unsigned char)+0x90>
c002602f:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0026033:	76 12                	jbe    c0026047 <PIC::eoi(unsigned char)+0x7b>
c0026035:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c002603b:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c002603f:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026042:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026046:	ee                   	out    dx,al
c0026047:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c002604d:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0026051:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026054:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026058:	ee                   	out    dx,al
c0026059:	eb 01                	jmp    c002605c <PIC::eoi(unsigned char)+0x90>
c002605b:	90                   	nop
c002605c:	c9                   	leave  
c002605d:	c3                   	ret    

c002605e <PIC::remap()>:
c002605e:	55                   	push   ebp
c002605f:	89 e5                	mov    ebp,esp
c0026061:	83 ec 48             	sub    esp,0x48
c0026064:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c002606b:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0026072:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0026078:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c002607b:	89 c2                	mov    edx,eax
c002607d:	ec                   	in     al,dx
c002607e:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0026081:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0026084:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0026087:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c002608d:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0026090:	89 c2                	mov    edx,eax
c0026092:	ec                   	in     al,dx
c0026093:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0026096:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0026099:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c002609c:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c00260a2:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c00260a6:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c00260a9:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c00260ac:	ee                   	out    dx,al
c00260ad:	83 ec 0c             	sub    esp,0xc
c00260b0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260b3:	e8 a4 fe ff ff       	call   c0025f5c <PIC::ioWait()>
c00260b8:	83 c4 10             	add    esp,0x10
c00260bb:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c00260c1:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c00260c5:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c00260c8:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00260cb:	ee                   	out    dx,al
c00260cc:	83 ec 0c             	sub    esp,0xc
c00260cf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260d2:	e8 85 fe ff ff       	call   c0025f5c <PIC::ioWait()>
c00260d7:	83 c4 10             	add    esp,0x10
c00260da:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00260dd:	0f b6 c0             	movzx  eax,al
c00260e0:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c00260e6:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c00260e9:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c00260ec:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00260ef:	ee                   	out    dx,al
c00260f0:	83 ec 0c             	sub    esp,0xc
c00260f3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260f6:	e8 61 fe ff ff       	call   c0025f5c <PIC::ioWait()>
c00260fb:	83 c4 10             	add    esp,0x10
c00260fe:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026101:	0f b6 c0             	movzx  eax,al
c0026104:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c002610a:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c002610d:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0026110:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0026113:	ee                   	out    dx,al
c0026114:	83 ec 0c             	sub    esp,0xc
c0026117:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002611a:	e8 3d fe ff ff       	call   c0025f5c <PIC::ioWait()>
c002611f:	83 c4 10             	add    esp,0x10
c0026122:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0026128:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c002612c:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c002612f:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0026132:	ee                   	out    dx,al
c0026133:	83 ec 0c             	sub    esp,0xc
c0026136:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026139:	e8 1e fe ff ff       	call   c0025f5c <PIC::ioWait()>
c002613e:	83 c4 10             	add    esp,0x10
c0026141:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0026147:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c002614b:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c002614e:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026151:	ee                   	out    dx,al
c0026152:	83 ec 0c             	sub    esp,0xc
c0026155:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026158:	e8 ff fd ff ff       	call   c0025f5c <PIC::ioWait()>
c002615d:	83 c4 10             	add    esp,0x10
c0026160:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0026166:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c002616a:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c002616d:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0026170:	ee                   	out    dx,al
c0026171:	83 ec 0c             	sub    esp,0xc
c0026174:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026177:	e8 e0 fd ff ff       	call   c0025f5c <PIC::ioWait()>
c002617c:	83 c4 10             	add    esp,0x10
c002617f:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0026185:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0026189:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c002618c:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002618f:	ee                   	out    dx,al
c0026190:	83 ec 0c             	sub    esp,0xc
c0026193:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026196:	e8 c1 fd ff ff       	call   c0025f5c <PIC::ioWait()>
c002619b:	83 c4 10             	add    esp,0x10
c002619e:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c00261a2:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c00261a8:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c00261ab:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c00261ae:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00261b1:	ee                   	out    dx,al
c00261b2:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c00261b6:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c00261bc:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c00261bf:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c00261c2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00261c5:	ee                   	out    dx,al
c00261c6:	90                   	nop
c00261c7:	c9                   	leave  
c00261c8:	c3                   	ret    
c00261c9:	90                   	nop

c00261ca <PIC::open(int, int, void*)>:
c00261ca:	55                   	push   ebp
c00261cb:	89 e5                	mov    ebp,esp
c00261cd:	83 ec 18             	sub    esp,0x18
c00261d0:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c00261d6:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c00261da:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00261dd:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00261e1:	ee                   	out    dx,al
c00261e2:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c00261e8:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c00261ec:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00261ef:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00261f3:	ee                   	out    dx,al
c00261f4:	83 ec 0c             	sub    esp,0xc
c00261f7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261fa:	e8 5f fe ff ff       	call   c002605e <PIC::remap()>
c00261ff:	83 c4 10             	add    esp,0x10
c0026202:	b8 00 00 00 00       	mov    eax,0x0
c0026207:	c9                   	leave  
c0026208:	c3                   	ret    
c0026209:	90                   	nop

c002620a <APICTimer::close(int, int, void*)>:
c002620a:	b8 00 00 00 00       	mov    eax,0x0
c002620f:	c3                   	ret    

c0026210 <apicTimerHandler(regs*, void*)>:
c0026210:	83 ec 0c             	sub    esp,0xc
c0026213:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026217:	8b 00                	mov    eax,DWORD PTR [eax]
c0026219:	99                   	cdq    
c002621a:	52                   	push   edx
c002621b:	50                   	push   eax
c002621c:	6a 00                	push   0x0
c002621e:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026223:	e8 84 07 00 00       	call   c00269ac <__udivdi3>
c0026228:	83 c4 10             	add    esp,0x10
c002622b:	83 ec 08             	sub    esp,0x8
c002622e:	52                   	push   edx
c002622f:	50                   	push   eax
c0026230:	e8 f2 0a ff ff       	call   c0016d27 <timerHandler(unsigned long long)>
c0026235:	83 c4 10             	add    esp,0x10
c0026238:	90                   	nop
c0026239:	83 c4 0c             	add    esp,0xc
c002623c:	c3                   	ret    
c002623d:	90                   	nop

c002623e <APICTimer::write(int)>:
c002623e:	53                   	push   ebx
c002623f:	83 ec 28             	sub    esp,0x28
c0026242:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026246:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002624a:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026250:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0026255:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002625b:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026261:	83 ec 0c             	sub    esp,0xc
c0026264:	50                   	push   eax
c0026265:	e8 de f4 ff ff       	call   c0025748 <APIC::getBase()>
c002626a:	83 c4 10             	add    esp,0x10
c002626d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0026271:	a1 90 ea 02 c0       	mov    eax,ds:0xc002ea90
c0026276:	8b 15 94 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea94
c002627c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0026280:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0026284:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026288:	05 e0 03 00 00       	add    eax,0x3e0
c002628d:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026293:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026297:	05 80 03 00 00       	add    eax,0x380
c002629c:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c00262a2:	fb                   	sti    
c00262a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262a7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00262ab:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c00262b0:	83 d2 00             	adc    edx,0x0
c00262b3:	89 c1                	mov    ecx,eax
c00262b5:	89 d3                	mov    ebx,edx
c00262b7:	a1 90 ea 02 c0       	mov    eax,ds:0xc002ea90
c00262bc:	8b 15 94 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea94
c00262c2:	39 c8                	cmp    eax,ecx
c00262c4:	89 d0                	mov    eax,edx
c00262c6:	19 d8                	sbb    eax,ebx
c00262c8:	73 02                	jae    c00262cc <APICTimer::write(int)+0x8e>
c00262ca:	eb d7                	jmp    c00262a3 <APICTimer::write(int)+0x65>
c00262cc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00262d0:	05 20 03 00 00       	add    eax,0x320
c00262d5:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c00262db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00262df:	05 90 03 00 00       	add    eax,0x390
c00262e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00262e6:	f7 d0                	not    eax
c00262e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00262ec:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00262f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00262f4:	ba 00 00 00 00       	mov    edx,0x0
c00262f9:	f7 f3                	div    ebx
c00262fb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00262ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026303:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026309:	0d 00 00 02 00       	or     eax,0x20000
c002630e:	89 c2                	mov    edx,eax
c0026310:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026314:	05 20 03 00 00       	add    eax,0x320
c0026319:	89 10                	mov    DWORD PTR [eax],edx
c002631b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002631f:	05 e0 03 00 00       	add    eax,0x3e0
c0026324:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c002632a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002632e:	05 80 03 00 00       	add    eax,0x380
c0026333:	89 c2                	mov    edx,eax
c0026335:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026339:	89 02                	mov    DWORD PTR [edx],eax
c002633b:	90                   	nop
c002633c:	83 c4 28             	add    esp,0x28
c002633f:	5b                   	pop    ebx
c0026340:	c3                   	ret    
c0026341:	90                   	nop

c0026342 <APICTimer::open(int, int, void*)>:
c0026342:	57                   	push   edi
c0026343:	56                   	push   esi
c0026344:	53                   	push   ebx
c0026345:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026349:	8b 00                	mov    eax,DWORD PTR [eax]
c002634b:	83 c0 24             	add    eax,0x24
c002634e:	8b 00                	mov    eax,DWORD PTR [eax]
c0026350:	83 ec 08             	sub    esp,0x8
c0026353:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026357:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002635b:	ff d0                	call   eax
c002635d:	83 c4 10             	add    esp,0x10
c0026360:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0026365:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002636b:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026371:	83 ec 0c             	sub    esp,0xc
c0026374:	50                   	push   eax
c0026375:	e8 ce f3 ff ff       	call   c0025748 <APIC::getBase()>
c002637a:	83 c4 10             	add    esp,0x10
c002637d:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0026383:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026387:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002638d:	0f b6 f8             	movzx  edi,al
c0026390:	89 d0                	mov    eax,edx
c0026392:	ba 00 00 00 00       	mov    edx,0x0
c0026397:	89 c1                	mov    ecx,eax
c0026399:	80 e5 ff             	and    ch,0xff
c002639c:	89 cb                	mov    ebx,ecx
c002639e:	0f b6 f2             	movzx  esi,dl
c00263a1:	89 d8                	mov    eax,ebx
c00263a3:	89 f2                	mov    edx,esi
c00263a5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00263a9:	8d 5f 08             	lea    ebx,[edi+0x8]
c00263ac:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00263b0:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00263b4:	83 e0 00             	and    eax,0x0
c00263b7:	09 d0                	or     eax,edx
c00263b9:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00263bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263c1:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00263c7:	8d 50 01             	lea    edx,[eax+0x1]
c00263ca:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00263ce:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00263d4:	0f b6 d0             	movzx  edx,al
c00263d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263db:	83 c2 08             	add    edx,0x8
c00263de:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00263e2:	0f b6 c9             	movzx  ecx,cl
c00263e5:	81 c9 00 00 01 00    	or     ecx,0x10000
c00263eb:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00263ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00263f7:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00263fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026401:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026405:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c002640b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002640f:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0026415:	83 ec 0c             	sub    esp,0xc
c0026418:	51                   	push   ecx
c0026419:	6a 01                	push   0x1
c002641b:	68 10 62 02 c0       	push   0xc0026210
c0026420:	52                   	push   edx
c0026421:	50                   	push   eax
c0026422:	e8 cd de fe ff       	call   c00142f4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026427:	83 c4 20             	add    esp,0x20
c002642a:	89 c2                	mov    edx,eax
c002642c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026430:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026436:	b8 00 00 00 00       	mov    eax,0x0
c002643b:	5b                   	pop    ebx
c002643c:	5e                   	pop    esi
c002643d:	5f                   	pop    edi
c002643e:	c3                   	ret    
c002643f:	90                   	nop

c0026440 <APICTimer::APICTimer()>:
c0026440:	83 ec 0c             	sub    esp,0xc
c0026443:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026447:	83 ec 08             	sub    esp,0x8
c002644a:	68 9c d2 02 c0       	push   0xc002d29c
c002644f:	50                   	push   eax
c0026450:	e8 43 08 ff ff       	call   c0016c98 <Timer::Timer(char const*)>
c0026455:	83 c4 10             	add    esp,0x10
c0026458:	ba b0 d2 02 c0       	mov    edx,0xc002d2b0
c002645d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026461:	89 10                	mov    DWORD PTR [eax],edx
c0026463:	90                   	nop
c0026464:	83 c4 0c             	add    esp,0xc
c0026467:	c3                   	ret    

c0026468 <PIT::write(int)>:
c0026468:	83 ec 10             	sub    esp,0x10
c002646b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002646f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026473:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026479:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002647d:	a3 c4 27 03 c0       	mov    ds:0xc00327c4,eax
c0026482:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0026487:	99                   	cdq    
c0026488:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c002648c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026490:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0026497:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c002649c:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00264a0:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00264a5:	ee                   	out    dx,al
c00264a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00264aa:	0f b6 c0             	movzx  eax,al
c00264ad:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c00264b4:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00264b8:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00264bc:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00264c1:	ee                   	out    dx,al
c00264c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00264c6:	c1 f8 08             	sar    eax,0x8
c00264c9:	0f b6 c0             	movzx  eax,al
c00264cc:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c00264d3:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00264d7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00264db:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00264e0:	ee                   	out    dx,al
c00264e1:	90                   	nop
c00264e2:	83 c4 10             	add    esp,0x10
c00264e5:	c3                   	ret    

c00264e6 <pitHandler(regs*, void*)>:
c00264e6:	83 ec 0c             	sub    esp,0xc
c00264e9:	a1 c4 27 03 c0       	mov    eax,ds:0xc00327c4
c00264ee:	99                   	cdq    
c00264ef:	52                   	push   edx
c00264f0:	50                   	push   eax
c00264f1:	6a 00                	push   0x0
c00264f3:	68 00 ca 9a 3b       	push   0x3b9aca00
c00264f8:	e8 af 04 00 00       	call   c00269ac <__udivdi3>
c00264fd:	83 c4 10             	add    esp,0x10
c0026500:	83 ec 08             	sub    esp,0x8
c0026503:	52                   	push   edx
c0026504:	50                   	push   eax
c0026505:	e8 1d 08 ff ff       	call   c0016d27 <timerHandler(unsigned long long)>
c002650a:	83 c4 10             	add    esp,0x10
c002650d:	90                   	nop
c002650e:	83 c4 0c             	add    esp,0xc
c0026511:	c3                   	ret    

c0026512 <PIT::open(int, int, void*)>:
c0026512:	83 ec 0c             	sub    esp,0xc
c0026515:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026519:	8b 00                	mov    eax,DWORD PTR [eax]
c002651b:	83 c0 24             	add    eax,0x24
c002651e:	8b 00                	mov    eax,DWORD PTR [eax]
c0026520:	83 ec 08             	sub    esp,0x8
c0026523:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026527:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002652b:	ff d0                	call   eax
c002652d:	83 c4 10             	add    esp,0x10
c0026530:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026534:	83 ec 0c             	sub    esp,0xc
c0026537:	6a 00                	push   0x0
c0026539:	6a 01                	push   0x1
c002653b:	68 e6 64 02 c0       	push   0xc00264e6
c0026540:	6a 00                	push   0x0
c0026542:	50                   	push   eax
c0026543:	e8 ac dd fe ff       	call   c00142f4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026548:	83 c4 20             	add    esp,0x20
c002654b:	89 c2                	mov    edx,eax
c002654d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026551:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026557:	b8 00 00 00 00       	mov    eax,0x0
c002655c:	83 c4 0c             	add    esp,0xc
c002655f:	c3                   	ret    

c0026560 <PIT::close(int, int, void*)>:
c0026560:	83 ec 0c             	sub    esp,0xc
c0026563:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026567:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0026571:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026575:	6a 01                	push   0x1
c0026577:	68 e6 64 02 c0       	push   0xc00264e6
c002657c:	6a 00                	push   0x0
c002657e:	50                   	push   eax
c002657f:	e8 ae dd fe ff       	call   c0014332 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0026584:	83 c4 10             	add    esp,0x10
c0026587:	b8 00 00 00 00       	mov    eax,0x0
c002658c:	83 c4 0c             	add    esp,0xc
c002658f:	c3                   	ret    

c0026590 <PIT::PIT()>:
c0026590:	83 ec 0c             	sub    esp,0xc
c0026593:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026597:	83 ec 08             	sub    esp,0x8
c002659a:	68 d8 d2 02 c0       	push   0xc002d2d8
c002659f:	50                   	push   eax
c00265a0:	e8 f3 06 ff ff       	call   c0016c98 <Timer::Timer(char const*)>
c00265a5:	83 c4 10             	add    esp,0x10
c00265a8:	ba 00 d3 02 c0       	mov    edx,0xc002d300
c00265ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265b1:	89 10                	mov    DWORD PTR [eax],edx
c00265b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265b7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00265bd:	0f b6 d0             	movzx  edx,al
c00265c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265c4:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c00265cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265cf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00265d5:	0f b6 d0             	movzx  edx,al
c00265d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265dc:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c00265e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265e5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00265eb:	8d 50 01             	lea    edx,[eax+0x1]
c00265ee:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00265f2:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00265f8:	0f b6 d0             	movzx  edx,al
c00265fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265ff:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026603:	83 e1 3f             	and    ecx,0x3f
c0026606:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002660a:	90                   	nop
c002660b:	83 c4 0c             	add    esp,0xc
c002660e:	c3                   	ret    
c002660f:	90                   	nop

c0026610 <avxDetect>:
c0026610:	b8 00 00 00 00       	mov    eax,0x0
c0026615:	c3                   	ret    

c0026616 <avxSave>:
c0026616:	c3                   	ret    

c0026617 <avxLoad>:
c0026617:	c3                   	ret    

c0026618 <avxInit>:
c0026618:	c3                   	ret    

c0026619 <avxClose>:
c0026619:	c3                   	ret    

c002661a <wouldSheSayYes>:
c002661a:	c3                   	ret    
c002661b:	49                   	dec    ecx
c002661c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0026620:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0026624:	75 20                	jne    c0026646 <sseDetect.noSSE+0x1>
c0026626:	4e                   	dec    esi
c0026627:	79 61                	jns    c002668a <x87Detect+0x14>
c0026629:	68 2e 2e 2e 00       	push   0x2e2e2e
c002662e:	66 90                	xchg   ax,ax

c0026630 <absolutelyNoChanceInHell>:
c0026630:	b8 01 00 00 00       	mov    eax,0x1
c0026635:	0f a2                	cpuid  
c0026637:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002663d:	74 06                	je     c0026645 <sseDetect.noSSE>
c002663f:	b8 01 00 00 00       	mov    eax,0x1
c0026644:	c3                   	ret    

c0026645 <sseDetect.noSSE>:
c0026645:	31 c0                	xor    eax,eax
c0026647:	c3                   	ret    

c0026648 <sseSave>:
c0026648:	0f ae 44 24 08       	fxsave [esp+0x8]
c002664d:	c3                   	ret    

c002664e <sseLoad>:
c002664e:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c0026653:	c3                   	ret    

c0026654 <sseInit>:
c0026654:	e8 43 00 00 00       	call   c002669c <x87Init>
c0026659:	0f 20 e0             	mov    eax,cr4
c002665c:	66 0d 00 06          	or     ax,0x600
c0026660:	0f 22 e0             	mov    cr4,eax
c0026663:	c3                   	ret    

c0026664 <sseClose>:
c0026664:	c3                   	ret    
c0026665:	66 90                	xchg   ax,ax
c0026667:	66 90                	xchg   ax,ax
c0026669:	66 90                	xchg   ax,ax
c002666b:	66 90                	xchg   ax,ax
c002666d:	66 90                	xchg   ax,ax
c002666f:	90                   	nop

c0026670 <value_37F>:
c0026670:	7f 03                	jg     c0026675 <value_37A+0x1>

c0026672 <value_37E>:
c0026672:	7e 03                	jle    c0026677 <x87Detect+0x1>

c0026674 <value_37A>:
c0026674:	7a 03                	jp     c0026679 <x87Detect+0x3>

c0026676 <x87Detect>:
c0026676:	b8 01 00 00 00       	mov    eax,0x1
c002667b:	0f a2                	cpuid  
c002667d:	f7 c2 01 00 00 00    	test   edx,0x1
c0026683:	74 06                	je     c002668b <x87Detect.nox87>
c0026685:	b8 01 00 00 00       	mov    eax,0x1
c002668a:	c3                   	ret    

c002668b <x87Detect.nox87>:
c002668b:	b8 00 00 00 00       	mov    eax,0x0
c0026690:	c3                   	ret    

c0026691 <x87Save>:
c0026691:	9b dd 74 24 08       	fsave  [esp+0x8]
c0026696:	c3                   	ret    

c0026697 <x87Load>:
c0026697:	dd 64 24 08          	frstor [esp+0x8]
c002669b:	c3                   	ret    

c002669c <x87Init>:
c002669c:	9b db e3             	finit  
c002669f:	0f 20 c0             	mov    eax,cr0
c00266a2:	66 25 fb ff          	and    ax,0xfffb
c00266a6:	66 0d 22 00          	or     ax,0x22
c00266aa:	0f 22 c0             	mov    cr0,eax
c00266ad:	0f 06                	clts   
c00266af:	d9 2d 74 66 02 c0    	fldcw  WORD PTR ds:0xc0026674
c00266b5:	c3                   	ret    

c00266b6 <x87Close>:
c00266b6:	c3                   	ret    
c00266b7:	90                   	nop

c00266b8 <__do_global_ctors_aux>:
c00266b8:	a1 fc 91 02 c0       	mov    eax,ds:0xc00291fc
c00266bd:	83 f8 ff             	cmp    eax,0xffffffff
c00266c0:	74 1a                	je     c00266dc <__do_global_ctors_aux+0x24>
c00266c2:	55                   	push   ebp
c00266c3:	89 e5                	mov    ebp,esp
c00266c5:	53                   	push   ebx
c00266c6:	52                   	push   edx
c00266c7:	bb fc 91 02 c0       	mov    ebx,0xc00291fc
c00266cc:	ff d0                	call   eax
c00266ce:	83 eb 04             	sub    ebx,0x4
c00266d1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00266d3:	83 f8 ff             	cmp    eax,0xffffffff
c00266d6:	75 f4                	jne    c00266cc <__do_global_ctors_aux+0x14>
c00266d8:	58                   	pop    eax
c00266d9:	5b                   	pop    ebx
c00266da:	5d                   	pop    ebp
c00266db:	c3                   	ret    
c00266dc:	c3                   	ret    
c00266dd:	66 90                	xchg   ax,ax
c00266df:	90                   	nop

c00266e0 <__divdi3>:
c00266e0:	55                   	push   ebp
c00266e1:	57                   	push   edi
c00266e2:	56                   	push   esi
c00266e3:	53                   	push   ebx
c00266e4:	83 ec 1c             	sub    esp,0x1c
c00266e7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00266eb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00266ef:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00266f2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00266f6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00266fa:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00266fe:	85 db                	test   ebx,ebx
c0026700:	0f 88 8e 00 00 00    	js     c0026794 <__divdi3+0xb4>
c0026706:	89 dd                	mov    ebp,ebx
c0026708:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026710:	89 d3                	mov    ebx,edx
c0026712:	85 d2                	test   edx,edx
c0026714:	79 0d                	jns    c0026723 <__divdi3+0x43>
c0026716:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c002671a:	f7 d8                	neg    eax
c002671c:	83 d2 00             	adc    edx,0x0
c002671f:	f7 da                	neg    edx
c0026721:	89 d3                	mov    ebx,edx
c0026723:	89 c7                	mov    edi,eax
c0026725:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026728:	85 db                	test   ebx,ebx
c002672a:	75 48                	jne    c0026774 <__divdi3+0x94>
c002672c:	39 ef                	cmp    edi,ebp
c002672e:	76 24                	jbe    c0026754 <__divdi3+0x74>
c0026730:	89 ea                	mov    edx,ebp
c0026732:	f7 f7                	div    edi
c0026734:	89 c1                	mov    ecx,eax
c0026736:	31 f6                	xor    esi,esi
c0026738:	89 c8                	mov    eax,ecx
c002673a:	89 f2                	mov    edx,esi
c002673c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026740:	85 c9                	test   ecx,ecx
c0026742:	74 07                	je     c002674b <__divdi3+0x6b>
c0026744:	f7 d8                	neg    eax
c0026746:	83 d2 00             	adc    edx,0x0
c0026749:	f7 da                	neg    edx
c002674b:	83 c4 1c             	add    esp,0x1c
c002674e:	5b                   	pop    ebx
c002674f:	5e                   	pop    esi
c0026750:	5f                   	pop    edi
c0026751:	5d                   	pop    ebp
c0026752:	c3                   	ret    
c0026753:	90                   	nop
c0026754:	85 ff                	test   edi,edi
c0026756:	75 0b                	jne    c0026763 <__divdi3+0x83>
c0026758:	b8 01 00 00 00       	mov    eax,0x1
c002675d:	31 d2                	xor    edx,edx
c002675f:	f7 f3                	div    ebx
c0026761:	89 c7                	mov    edi,eax
c0026763:	31 d2                	xor    edx,edx
c0026765:	89 e8                	mov    eax,ebp
c0026767:	f7 f7                	div    edi
c0026769:	89 c6                	mov    esi,eax
c002676b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002676e:	f7 f7                	div    edi
c0026770:	89 c1                	mov    ecx,eax
c0026772:	eb c4                	jmp    c0026738 <__divdi3+0x58>
c0026774:	39 eb                	cmp    ebx,ebp
c0026776:	77 3c                	ja     c00267b4 <__divdi3+0xd4>
c0026778:	0f bd f3             	bsr    esi,ebx
c002677b:	83 f6 1f             	xor    esi,0x1f
c002677e:	75 40                	jne    c00267c0 <__divdi3+0xe0>
c0026780:	39 eb                	cmp    ebx,ebp
c0026782:	72 09                	jb     c002678d <__divdi3+0xad>
c0026784:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0026787:	0f 87 97 00 00 00    	ja     c0026824 <__divdi3+0x144>
c002678d:	b9 01 00 00 00       	mov    ecx,0x1
c0026792:	eb a4                	jmp    c0026738 <__divdi3+0x58>
c0026794:	f7 d9                	neg    ecx
c0026796:	83 d3 00             	adc    ebx,0x0
c0026799:	f7 db                	neg    ebx
c002679b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002679e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00267a2:	89 dd                	mov    ebp,ebx
c00267a4:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c00267ac:	e9 5f ff ff ff       	jmp    c0026710 <__divdi3+0x30>
c00267b1:	8d 76 00             	lea    esi,[esi+0x0]
c00267b4:	31 f6                	xor    esi,esi
c00267b6:	31 c9                	xor    ecx,ecx
c00267b8:	e9 7b ff ff ff       	jmp    c0026738 <__divdi3+0x58>
c00267bd:	8d 76 00             	lea    esi,[esi+0x0]
c00267c0:	b8 20 00 00 00       	mov    eax,0x20
c00267c5:	29 f0                	sub    eax,esi
c00267c7:	89 f1                	mov    ecx,esi
c00267c9:	d3 e3                	shl    ebx,cl
c00267cb:	89 fa                	mov    edx,edi
c00267cd:	88 c1                	mov    cl,al
c00267cf:	d3 ea                	shr    edx,cl
c00267d1:	09 da                	or     edx,ebx
c00267d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00267d7:	89 f1                	mov    ecx,esi
c00267d9:	d3 e7                	shl    edi,cl
c00267db:	89 eb                	mov    ebx,ebp
c00267dd:	88 c1                	mov    cl,al
c00267df:	d3 eb                	shr    ebx,cl
c00267e1:	89 f1                	mov    ecx,esi
c00267e3:	d3 e5                	shl    ebp,cl
c00267e5:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00267e8:	88 c1                	mov    cl,al
c00267ea:	d3 ea                	shr    edx,cl
c00267ec:	09 d5                	or     ebp,edx
c00267ee:	89 e8                	mov    eax,ebp
c00267f0:	89 da                	mov    edx,ebx
c00267f2:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c00267f6:	89 d3                	mov    ebx,edx
c00267f8:	89 c5                	mov    ebp,eax
c00267fa:	f7 e7                	mul    edi
c00267fc:	39 d3                	cmp    ebx,edx
c00267fe:	72 18                	jb     c0026818 <__divdi3+0x138>
c0026800:	74 0a                	je     c002680c <__divdi3+0x12c>
c0026802:	89 e9                	mov    ecx,ebp
c0026804:	31 f6                	xor    esi,esi
c0026806:	e9 2d ff ff ff       	jmp    c0026738 <__divdi3+0x58>
c002680b:	90                   	nop
c002680c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c002680f:	89 f1                	mov    ecx,esi
c0026811:	d3 e7                	shl    edi,cl
c0026813:	39 c7                	cmp    edi,eax
c0026815:	73 eb                	jae    c0026802 <__divdi3+0x122>
c0026817:	90                   	nop
c0026818:	8d 4d ff             	lea    ecx,[ebp-0x1]
c002681b:	31 f6                	xor    esi,esi
c002681d:	e9 16 ff ff ff       	jmp    c0026738 <__divdi3+0x58>
c0026822:	66 90                	xchg   ax,ax
c0026824:	31 c9                	xor    ecx,ecx
c0026826:	e9 0d ff ff ff       	jmp    c0026738 <__divdi3+0x58>
c002682b:	90                   	nop

c002682c <__moddi3>:
c002682c:	55                   	push   ebp
c002682d:	57                   	push   edi
c002682e:	56                   	push   esi
c002682f:	53                   	push   ebx
c0026830:	83 ec 2c             	sub    esp,0x2c
c0026833:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0026837:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c002683b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002683f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0026843:	85 db                	test   ebx,ebx
c0026845:	0f 88 85 00 00 00    	js     c00268d0 <__moddi3+0xa4>
c002684b:	89 de                	mov    esi,ebx
c002684d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0026855:	89 d7                	mov    edi,edx
c0026857:	85 d2                	test   edx,edx
c0026859:	79 09                	jns    c0026864 <__moddi3+0x38>
c002685b:	f7 d8                	neg    eax
c002685d:	83 d2 00             	adc    edx,0x0
c0026860:	f7 da                	neg    edx
c0026862:	89 d7                	mov    edi,edx
c0026864:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026868:	89 cd                	mov    ebp,ecx
c002686a:	85 ff                	test   edi,edi
c002686c:	75 52                	jne    c00268c0 <__moddi3+0x94>
c002686e:	89 c3                	mov    ebx,eax
c0026870:	39 f0                	cmp    eax,esi
c0026872:	76 24                	jbe    c0026898 <__moddi3+0x6c>
c0026874:	89 c8                	mov    eax,ecx
c0026876:	89 f2                	mov    edx,esi
c0026878:	f7 f3                	div    ebx
c002687a:	89 d6                	mov    esi,edx
c002687c:	89 f0                	mov    eax,esi
c002687e:	31 d2                	xor    edx,edx
c0026880:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026884:	85 c9                	test   ecx,ecx
c0026886:	74 07                	je     c002688f <__moddi3+0x63>
c0026888:	f7 d8                	neg    eax
c002688a:	83 d2 00             	adc    edx,0x0
c002688d:	f7 da                	neg    edx
c002688f:	83 c4 2c             	add    esp,0x2c
c0026892:	5b                   	pop    ebx
c0026893:	5e                   	pop    esi
c0026894:	5f                   	pop    edi
c0026895:	5d                   	pop    ebp
c0026896:	c3                   	ret    
c0026897:	90                   	nop
c0026898:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002689c:	85 db                	test   ebx,ebx
c002689e:	75 0d                	jne    c00268ad <__moddi3+0x81>
c00268a0:	b8 01 00 00 00       	mov    eax,0x1
c00268a5:	31 d2                	xor    edx,edx
c00268a7:	f7 f7                	div    edi
c00268a9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00268ad:	89 f0                	mov    eax,esi
c00268af:	31 d2                	xor    edx,edx
c00268b1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00268b5:	f7 f7                	div    edi
c00268b7:	89 e8                	mov    eax,ebp
c00268b9:	f7 f7                	div    edi
c00268bb:	89 d6                	mov    esi,edx
c00268bd:	eb bd                	jmp    c002687c <__moddi3+0x50>
c00268bf:	90                   	nop
c00268c0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00268c4:	39 f7                	cmp    edi,esi
c00268c6:	76 20                	jbe    c00268e8 <__moddi3+0xbc>
c00268c8:	89 c8                	mov    eax,ecx
c00268ca:	89 f2                	mov    edx,esi
c00268cc:	eb b2                	jmp    c0026880 <__moddi3+0x54>
c00268ce:	66 90                	xchg   ax,ax
c00268d0:	f7 d9                	neg    ecx
c00268d2:	83 d3 00             	adc    ebx,0x0
c00268d5:	f7 db                	neg    ebx
c00268d7:	89 de                	mov    esi,ebx
c00268d9:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c00268e1:	e9 6f ff ff ff       	jmp    c0026855 <__moddi3+0x29>
c00268e6:	66 90                	xchg   ax,ax
c00268e8:	0f bd c7             	bsr    eax,edi
c00268eb:	83 f0 1f             	xor    eax,0x1f
c00268ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00268f2:	75 24                	jne    c0026918 <__moddi3+0xec>
c00268f4:	39 f7                	cmp    edi,esi
c00268f6:	72 06                	jb     c00268fe <__moddi3+0xd2>
c00268f8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00268fc:	77 0c                	ja     c002690a <__moddi3+0xde>
c00268fe:	89 e9                	mov    ecx,ebp
c0026900:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0026904:	19 fe                	sbb    esi,edi
c0026906:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002690a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002690e:	89 f2                	mov    edx,esi
c0026910:	e9 6b ff ff ff       	jmp    c0026880 <__moddi3+0x54>
c0026915:	8d 76 00             	lea    esi,[esi+0x0]
c0026918:	b8 20 00 00 00       	mov    eax,0x20
c002691d:	89 c2                	mov    edx,eax
c002691f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0026923:	29 da                	sub    edx,ebx
c0026925:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0026929:	88 d9                	mov    cl,bl
c002692b:	d3 e7                	shl    edi,cl
c002692d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026931:	88 d1                	mov    cl,dl
c0026933:	d3 e8                	shr    eax,cl
c0026935:	09 c7                	or     edi,eax
c0026937:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002693b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002693f:	89 d8                	mov    eax,ebx
c0026941:	88 d9                	mov    cl,bl
c0026943:	d3 e7                	shl    edi,cl
c0026945:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026949:	89 f3                	mov    ebx,esi
c002694b:	88 d1                	mov    cl,dl
c002694d:	d3 eb                	shr    ebx,cl
c002694f:	89 c7                	mov    edi,eax
c0026951:	88 c1                	mov    cl,al
c0026953:	d3 e6                	shl    esi,cl
c0026955:	89 e8                	mov    eax,ebp
c0026957:	88 d1                	mov    cl,dl
c0026959:	d3 e8                	shr    eax,cl
c002695b:	09 f0                	or     eax,esi
c002695d:	89 f9                	mov    ecx,edi
c002695f:	d3 e5                	shl    ebp,cl
c0026961:	89 da                	mov    edx,ebx
c0026963:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0026967:	89 d3                	mov    ebx,edx
c0026969:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002696d:	89 c6                	mov    esi,eax
c002696f:	89 d1                	mov    ecx,edx
c0026971:	39 d3                	cmp    ebx,edx
c0026973:	72 27                	jb     c002699c <__moddi3+0x170>
c0026975:	74 21                	je     c0026998 <__moddi3+0x16c>
c0026977:	29 f5                	sub    ebp,esi
c0026979:	19 cb                	sbb    ebx,ecx
c002697b:	89 de                	mov    esi,ebx
c002697d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0026981:	d3 e6                	shl    esi,cl
c0026983:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0026987:	89 f9                	mov    ecx,edi
c0026989:	d3 ed                	shr    ebp,cl
c002698b:	09 ee                	or     esi,ebp
c002698d:	89 f0                	mov    eax,esi
c002698f:	d3 eb                	shr    ebx,cl
c0026991:	89 da                	mov    edx,ebx
c0026993:	e9 e8 fe ff ff       	jmp    c0026880 <__moddi3+0x54>
c0026998:	39 c5                	cmp    ebp,eax
c002699a:	73 db                	jae    c0026977 <__moddi3+0x14b>
c002699c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00269a0:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00269a4:	89 d1                	mov    ecx,edx
c00269a6:	89 c6                	mov    esi,eax
c00269a8:	eb cd                	jmp    c0026977 <__moddi3+0x14b>
c00269aa:	66 90                	xchg   ax,ax

c00269ac <__udivdi3>:
c00269ac:	55                   	push   ebp
c00269ad:	57                   	push   edi
c00269ae:	56                   	push   esi
c00269af:	53                   	push   ebx
c00269b0:	83 ec 1c             	sub    esp,0x1c
c00269b3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00269b7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00269bb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00269bf:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00269c3:	85 d2                	test   edx,edx
c00269c5:	75 41                	jne    c0026a08 <__udivdi3+0x5c>
c00269c7:	39 f7                	cmp    edi,esi
c00269c9:	76 15                	jbe    c00269e0 <__udivdi3+0x34>
c00269cb:	89 e8                	mov    eax,ebp
c00269cd:	89 f2                	mov    edx,esi
c00269cf:	f7 f7                	div    edi
c00269d1:	31 db                	xor    ebx,ebx
c00269d3:	89 da                	mov    edx,ebx
c00269d5:	83 c4 1c             	add    esp,0x1c
c00269d8:	5b                   	pop    ebx
c00269d9:	5e                   	pop    esi
c00269da:	5f                   	pop    edi
c00269db:	5d                   	pop    ebp
c00269dc:	c3                   	ret    
c00269dd:	8d 76 00             	lea    esi,[esi+0x0]
c00269e0:	89 f9                	mov    ecx,edi
c00269e2:	85 ff                	test   edi,edi
c00269e4:	75 0b                	jne    c00269f1 <__udivdi3+0x45>
c00269e6:	b8 01 00 00 00       	mov    eax,0x1
c00269eb:	31 d2                	xor    edx,edx
c00269ed:	f7 f7                	div    edi
c00269ef:	89 c1                	mov    ecx,eax
c00269f1:	31 d2                	xor    edx,edx
c00269f3:	89 f0                	mov    eax,esi
c00269f5:	f7 f1                	div    ecx
c00269f7:	89 c3                	mov    ebx,eax
c00269f9:	89 e8                	mov    eax,ebp
c00269fb:	f7 f1                	div    ecx
c00269fd:	89 da                	mov    edx,ebx
c00269ff:	83 c4 1c             	add    esp,0x1c
c0026a02:	5b                   	pop    ebx
c0026a03:	5e                   	pop    esi
c0026a04:	5f                   	pop    edi
c0026a05:	5d                   	pop    ebp
c0026a06:	c3                   	ret    
c0026a07:	90                   	nop
c0026a08:	39 f2                	cmp    edx,esi
c0026a0a:	77 1c                	ja     c0026a28 <__udivdi3+0x7c>
c0026a0c:	0f bd da             	bsr    ebx,edx
c0026a0f:	83 f3 1f             	xor    ebx,0x1f
c0026a12:	75 24                	jne    c0026a38 <__udivdi3+0x8c>
c0026a14:	39 f2                	cmp    edx,esi
c0026a16:	72 08                	jb     c0026a20 <__udivdi3+0x74>
c0026a18:	39 ef                	cmp    edi,ebp
c0026a1a:	0f 87 84 00 00 00    	ja     c0026aa4 <__udivdi3+0xf8>
c0026a20:	b8 01 00 00 00       	mov    eax,0x1
c0026a25:	eb ac                	jmp    c00269d3 <__udivdi3+0x27>
c0026a27:	90                   	nop
c0026a28:	31 db                	xor    ebx,ebx
c0026a2a:	31 c0                	xor    eax,eax
c0026a2c:	89 da                	mov    edx,ebx
c0026a2e:	83 c4 1c             	add    esp,0x1c
c0026a31:	5b                   	pop    ebx
c0026a32:	5e                   	pop    esi
c0026a33:	5f                   	pop    edi
c0026a34:	5d                   	pop    ebp
c0026a35:	c3                   	ret    
c0026a36:	66 90                	xchg   ax,ax
c0026a38:	b8 20 00 00 00       	mov    eax,0x20
c0026a3d:	29 d8                	sub    eax,ebx
c0026a3f:	88 d9                	mov    cl,bl
c0026a41:	d3 e2                	shl    edx,cl
c0026a43:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0026a47:	89 fa                	mov    edx,edi
c0026a49:	88 c1                	mov    cl,al
c0026a4b:	d3 ea                	shr    edx,cl
c0026a4d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026a51:	09 d1                	or     ecx,edx
c0026a53:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026a57:	88 d9                	mov    cl,bl
c0026a59:	d3 e7                	shl    edi,cl
c0026a5b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026a5f:	89 f7                	mov    edi,esi
c0026a61:	88 c1                	mov    cl,al
c0026a63:	d3 ef                	shr    edi,cl
c0026a65:	88 d9                	mov    cl,bl
c0026a67:	d3 e6                	shl    esi,cl
c0026a69:	89 ea                	mov    edx,ebp
c0026a6b:	88 c1                	mov    cl,al
c0026a6d:	d3 ea                	shr    edx,cl
c0026a6f:	09 d6                	or     esi,edx
c0026a71:	89 f0                	mov    eax,esi
c0026a73:	89 fa                	mov    edx,edi
c0026a75:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026a79:	89 d7                	mov    edi,edx
c0026a7b:	89 c6                	mov    esi,eax
c0026a7d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026a81:	39 d7                	cmp    edi,edx
c0026a83:	72 13                	jb     c0026a98 <__udivdi3+0xec>
c0026a85:	74 09                	je     c0026a90 <__udivdi3+0xe4>
c0026a87:	89 f0                	mov    eax,esi
c0026a89:	31 db                	xor    ebx,ebx
c0026a8b:	e9 43 ff ff ff       	jmp    c00269d3 <__udivdi3+0x27>
c0026a90:	88 d9                	mov    cl,bl
c0026a92:	d3 e5                	shl    ebp,cl
c0026a94:	39 c5                	cmp    ebp,eax
c0026a96:	73 ef                	jae    c0026a87 <__udivdi3+0xdb>
c0026a98:	8d 46 ff             	lea    eax,[esi-0x1]
c0026a9b:	31 db                	xor    ebx,ebx
c0026a9d:	e9 31 ff ff ff       	jmp    c00269d3 <__udivdi3+0x27>
c0026aa2:	66 90                	xchg   ax,ax
c0026aa4:	31 c0                	xor    eax,eax
c0026aa6:	e9 28 ff ff ff       	jmp    c00269d3 <__udivdi3+0x27>
c0026aab:	90                   	nop

c0026aac <__umoddi3>:
c0026aac:	55                   	push   ebp
c0026aad:	57                   	push   edi
c0026aae:	56                   	push   esi
c0026aaf:	53                   	push   ebx
c0026ab0:	83 ec 1c             	sub    esp,0x1c
c0026ab3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0026ab7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026abb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026abf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0026ac3:	89 da                	mov    edx,ebx
c0026ac5:	85 c0                	test   eax,eax
c0026ac7:	75 37                	jne    c0026b00 <__umoddi3+0x54>
c0026ac9:	39 df                	cmp    edi,ebx
c0026acb:	76 13                	jbe    c0026ae0 <__umoddi3+0x34>
c0026acd:	89 f0                	mov    eax,esi
c0026acf:	f7 f7                	div    edi
c0026ad1:	89 d0                	mov    eax,edx
c0026ad3:	31 d2                	xor    edx,edx
c0026ad5:	83 c4 1c             	add    esp,0x1c
c0026ad8:	5b                   	pop    ebx
c0026ad9:	5e                   	pop    esi
c0026ada:	5f                   	pop    edi
c0026adb:	5d                   	pop    ebp
c0026adc:	c3                   	ret    
c0026add:	8d 76 00             	lea    esi,[esi+0x0]
c0026ae0:	89 fd                	mov    ebp,edi
c0026ae2:	85 ff                	test   edi,edi
c0026ae4:	75 0b                	jne    c0026af1 <__umoddi3+0x45>
c0026ae6:	b8 01 00 00 00       	mov    eax,0x1
c0026aeb:	31 d2                	xor    edx,edx
c0026aed:	f7 f7                	div    edi
c0026aef:	89 c5                	mov    ebp,eax
c0026af1:	89 d8                	mov    eax,ebx
c0026af3:	31 d2                	xor    edx,edx
c0026af5:	f7 f5                	div    ebp
c0026af7:	89 f0                	mov    eax,esi
c0026af9:	f7 f5                	div    ebp
c0026afb:	89 d0                	mov    eax,edx
c0026afd:	eb d4                	jmp    c0026ad3 <__umoddi3+0x27>
c0026aff:	90                   	nop
c0026b00:	89 f1                	mov    ecx,esi
c0026b02:	39 d8                	cmp    eax,ebx
c0026b04:	76 0a                	jbe    c0026b10 <__umoddi3+0x64>
c0026b06:	89 f0                	mov    eax,esi
c0026b08:	83 c4 1c             	add    esp,0x1c
c0026b0b:	5b                   	pop    ebx
c0026b0c:	5e                   	pop    esi
c0026b0d:	5f                   	pop    edi
c0026b0e:	5d                   	pop    ebp
c0026b0f:	c3                   	ret    
c0026b10:	0f bd e8             	bsr    ebp,eax
c0026b13:	83 f5 1f             	xor    ebp,0x1f
c0026b16:	75 1c                	jne    c0026b34 <__umoddi3+0x88>
c0026b18:	39 d8                	cmp    eax,ebx
c0026b1a:	72 04                	jb     c0026b20 <__umoddi3+0x74>
c0026b1c:	39 f7                	cmp    edi,esi
c0026b1e:	77 08                	ja     c0026b28 <__umoddi3+0x7c>
c0026b20:	89 da                	mov    edx,ebx
c0026b22:	29 fe                	sub    esi,edi
c0026b24:	19 c2                	sbb    edx,eax
c0026b26:	89 f1                	mov    ecx,esi
c0026b28:	89 c8                	mov    eax,ecx
c0026b2a:	83 c4 1c             	add    esp,0x1c
c0026b2d:	5b                   	pop    ebx
c0026b2e:	5e                   	pop    esi
c0026b2f:	5f                   	pop    edi
c0026b30:	5d                   	pop    ebp
c0026b31:	c3                   	ret    
c0026b32:	66 90                	xchg   ax,ax
c0026b34:	ba 20 00 00 00       	mov    edx,0x20
c0026b39:	29 ea                	sub    edx,ebp
c0026b3b:	89 e9                	mov    ecx,ebp
c0026b3d:	d3 e0                	shl    eax,cl
c0026b3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026b43:	89 f8                	mov    eax,edi
c0026b45:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0026b49:	88 d1                	mov    cl,dl
c0026b4b:	d3 e8                	shr    eax,cl
c0026b4d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026b51:	09 c1                	or     ecx,eax
c0026b53:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026b57:	89 e9                	mov    ecx,ebp
c0026b59:	d3 e7                	shl    edi,cl
c0026b5b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026b5f:	89 d8                	mov    eax,ebx
c0026b61:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0026b65:	88 d1                	mov    cl,dl
c0026b67:	d3 e8                	shr    eax,cl
c0026b69:	89 c7                	mov    edi,eax
c0026b6b:	89 e9                	mov    ecx,ebp
c0026b6d:	d3 e3                	shl    ebx,cl
c0026b6f:	89 f0                	mov    eax,esi
c0026b71:	88 d1                	mov    cl,dl
c0026b73:	d3 e8                	shr    eax,cl
c0026b75:	09 d8                	or     eax,ebx
c0026b77:	89 e9                	mov    ecx,ebp
c0026b79:	d3 e6                	shl    esi,cl
c0026b7b:	89 f3                	mov    ebx,esi
c0026b7d:	89 fa                	mov    edx,edi
c0026b7f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026b83:	89 d1                	mov    ecx,edx
c0026b85:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026b89:	89 c6                	mov    esi,eax
c0026b8b:	89 d7                	mov    edi,edx
c0026b8d:	39 d1                	cmp    ecx,edx
c0026b8f:	72 27                	jb     c0026bb8 <__umoddi3+0x10c>
c0026b91:	74 21                	je     c0026bb4 <__umoddi3+0x108>
c0026b93:	89 ca                	mov    edx,ecx
c0026b95:	29 f3                	sub    ebx,esi
c0026b97:	19 fa                	sbb    edx,edi
c0026b99:	89 d0                	mov    eax,edx
c0026b9b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0026b9f:	d3 e0                	shl    eax,cl
c0026ba1:	89 e9                	mov    ecx,ebp
c0026ba3:	d3 eb                	shr    ebx,cl
c0026ba5:	09 d8                	or     eax,ebx
c0026ba7:	d3 ea                	shr    edx,cl
c0026ba9:	83 c4 1c             	add    esp,0x1c
c0026bac:	5b                   	pop    ebx
c0026bad:	5e                   	pop    esi
c0026bae:	5f                   	pop    edi
c0026baf:	5d                   	pop    ebp
c0026bb0:	c3                   	ret    
c0026bb1:	8d 76 00             	lea    esi,[esi+0x0]
c0026bb4:	39 c3                	cmp    ebx,eax
c0026bb6:	73 db                	jae    c0026b93 <__umoddi3+0xe7>
c0026bb8:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026bbc:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026bc0:	89 d7                	mov    edi,edx
c0026bc2:	89 c6                	mov    esi,eax
c0026bc4:	eb cd                	jmp    c0026b93 <__umoddi3+0xe7>

c0026bc6 <__addsf3>:
c0026bc6:	55                   	push   ebp
c0026bc7:	89 e5                	mov    ebp,esp
c0026bc9:	57                   	push   edi
c0026bca:	56                   	push   esi
c0026bcb:	53                   	push   ebx
c0026bcc:	83 ec 08             	sub    esp,0x8
c0026bcf:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026bd2:	89 fa                	mov    edx,edi
c0026bd4:	89 f8                	mov    eax,edi
c0026bd6:	c1 f8 17             	sar    eax,0x17
c0026bd9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026bdc:	c1 e2 08             	shl    edx,0x8
c0026bdf:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026be5:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026be8:	89 de                	mov    esi,ebx
c0026bea:	c1 fe 17             	sar    esi,0x17
c0026bed:	c1 e3 08             	shl    ebx,0x8
c0026bf0:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026bf6:	31 f0                	xor    eax,esi
c0026bf8:	0f 88 3b 01 00 00    	js     c0026d39 <__addsf3+0x173>
c0026bfe:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026c01:	29 f1                	sub    ecx,esi
c0026c03:	85 c9                	test   ecx,ecx
c0026c05:	7e 54                	jle    c0026c5b <__addsf3+0x95>
c0026c07:	89 f0                	mov    eax,esi
c0026c09:	84 c0                	test   al,al
c0026c0b:	75 10                	jne    c0026c1d <__addsf3+0x57>
c0026c0d:	85 db                	test   ebx,ebx
c0026c0f:	0f 84 aa 02 00 00    	je     c0026ebf <__addsf3+0x2f9>
c0026c15:	49                   	dec    ecx
c0026c16:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026c19:	74 38                	je     c0026c53 <__addsf3+0x8d>
c0026c1b:	eb 13                	jmp    c0026c30 <__addsf3+0x6a>
c0026c1d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026c20:	f7 d0                	not    eax
c0026c22:	84 c0                	test   al,al
c0026c24:	0f 84 95 02 00 00    	je     c0026ebf <__addsf3+0x2f9>
c0026c2a:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026c30:	83 f9 1f             	cmp    ecx,0x1f
c0026c33:	0f 8f 86 02 00 00    	jg     c0026ebf <__addsf3+0x2f9>
c0026c39:	89 de                	mov    esi,ebx
c0026c3b:	d3 ee                	shr    esi,cl
c0026c3d:	b8 20 00 00 00       	mov    eax,0x20
c0026c42:	29 c8                	sub    eax,ecx
c0026c44:	89 c1                	mov    ecx,eax
c0026c46:	d3 e3                	shl    ebx,cl
c0026c48:	31 c0                	xor    eax,eax
c0026c4a:	85 db                	test   ebx,ebx
c0026c4c:	0f 95 c0             	setne  al
c0026c4f:	09 f0                	or     eax,esi
c0026c51:	01 d0                	add    eax,edx
c0026c53:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026c56:	e9 b6 00 00 00       	jmp    c0026d11 <__addsf3+0x14b>
c0026c5b:	74 5c                	je     c0026cb9 <__addsf3+0xf3>
c0026c5d:	89 f1                	mov    ecx,esi
c0026c5f:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0026c62:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026c65:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026c69:	75 14                	jne    c0026c7f <__addsf3+0xb9>
c0026c6b:	85 d2                	test   edx,edx
c0026c6d:	0f 84 4c 02 00 00    	je     c0026ebf <__addsf3+0x2f9>
c0026c73:	49                   	dec    ecx
c0026c74:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026c77:	0f 84 94 00 00 00    	je     c0026d11 <__addsf3+0x14b>
c0026c7d:	eb 12                	jmp    c0026c91 <__addsf3+0xcb>
c0026c7f:	89 f0                	mov    eax,esi
c0026c81:	f7 d0                	not    eax
c0026c83:	84 c0                	test   al,al
c0026c85:	0f 84 34 02 00 00    	je     c0026ebf <__addsf3+0x2f9>
c0026c8b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026c91:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026c94:	83 f9 1f             	cmp    ecx,0x1f
c0026c97:	0f 8f 22 02 00 00    	jg     c0026ebf <__addsf3+0x2f9>
c0026c9d:	89 d7                	mov    edi,edx
c0026c9f:	d3 ef                	shr    edi,cl
c0026ca1:	b8 20 00 00 00       	mov    eax,0x20
c0026ca6:	29 c8                	sub    eax,ecx
c0026ca8:	89 c1                	mov    ecx,eax
c0026caa:	d3 e2                	shl    edx,cl
c0026cac:	31 c0                	xor    eax,eax
c0026cae:	85 d2                	test   edx,edx
c0026cb0:	0f 95 c0             	setne  al
c0026cb3:	09 f8                	or     eax,edi
c0026cb5:	01 d8                	add    eax,ebx
c0026cb7:	eb 58                	jmp    c0026d11 <__addsf3+0x14b>
c0026cb9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026cbc:	8d 70 01             	lea    esi,[eax+0x1]
c0026cbf:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0026cc5:	75 32                	jne    c0026cf9 <__addsf3+0x133>
c0026cc7:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026ccb:	75 1f                	jne    c0026cec <__addsf3+0x126>
c0026ccd:	85 d2                	test   edx,edx
c0026ccf:	0f 84 e0 01 00 00    	je     c0026eb5 <__addsf3+0x2ef>
c0026cd5:	85 db                	test   ebx,ebx
c0026cd7:	0f 84 e2 01 00 00    	je     c0026ebf <__addsf3+0x2f9>
c0026cdd:	89 d0                	mov    eax,edx
c0026cdf:	01 d8                	add    eax,ebx
c0026ce1:	0f 89 a9 01 00 00    	jns    c0026e90 <__addsf3+0x2ca>
c0026ce7:	e9 9d 01 00 00       	jmp    c0026e89 <__addsf3+0x2c3>
c0026cec:	85 d2                	test   edx,edx
c0026cee:	0f 85 cb 01 00 00    	jne    c0026ebf <__addsf3+0x2f9>
c0026cf4:	e9 bc 01 00 00       	jmp    c0026eb5 <__addsf3+0x2ef>
c0026cf9:	31 c0                	xor    eax,eax
c0026cfb:	89 f1                	mov    ecx,esi
c0026cfd:	f7 d1                	not    ecx
c0026cff:	84 c9                	test   cl,cl
c0026d01:	0f 84 90 01 00 00    	je     c0026e97 <__addsf3+0x2d1>
c0026d07:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026d0a:	d1 e8                	shr    eax,1
c0026d0c:	e9 86 01 00 00       	jmp    c0026e97 <__addsf3+0x2d1>
c0026d11:	85 c0                	test   eax,eax
c0026d13:	0f 89 7e 01 00 00    	jns    c0026e97 <__addsf3+0x2d1>
c0026d19:	46                   	inc    esi
c0026d1a:	89 f2                	mov    edx,esi
c0026d1c:	f7 d2                	not    edx
c0026d1e:	84 d2                	test   dl,dl
c0026d20:	0f 84 6f 01 00 00    	je     c0026e95 <__addsf3+0x2cf>
c0026d26:	89 c2                	mov    edx,eax
c0026d28:	83 e2 01             	and    edx,0x1
c0026d2b:	d1 e8                	shr    eax,1
c0026d2d:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026d32:	09 d0                	or     eax,edx
c0026d34:	e9 5e 01 00 00       	jmp    c0026e97 <__addsf3+0x2d1>
c0026d39:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0026d3d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026d40:	89 f0                	mov    eax,esi
c0026d42:	0f b6 c0             	movzx  eax,al
c0026d45:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026d48:	29 c1                	sub    ecx,eax
c0026d4a:	85 c9                	test   ecx,ecx
c0026d4c:	7e 55                	jle    c0026da3 <__addsf3+0x1dd>
c0026d4e:	85 c0                	test   eax,eax
c0026d50:	75 11                	jne    c0026d63 <__addsf3+0x19d>
c0026d52:	85 db                	test   ebx,ebx
c0026d54:	0f 84 65 01 00 00    	je     c0026ebf <__addsf3+0x2f9>
c0026d5a:	49                   	dec    ecx
c0026d5b:	75 19                	jne    c0026d76 <__addsf3+0x1b0>
c0026d5d:	89 d0                	mov    eax,edx
c0026d5f:	29 d8                	sub    eax,ebx
c0026d61:	eb 38                	jmp    c0026d9b <__addsf3+0x1d5>
c0026d63:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026d66:	f7 d0                	not    eax
c0026d68:	84 c0                	test   al,al
c0026d6a:	0f 84 4f 01 00 00    	je     c0026ebf <__addsf3+0x2f9>
c0026d70:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026d76:	83 f9 1f             	cmp    ecx,0x1f
c0026d79:	0f 8f 40 01 00 00    	jg     c0026ebf <__addsf3+0x2f9>
c0026d7f:	89 de                	mov    esi,ebx
c0026d81:	d3 ee                	shr    esi,cl
c0026d83:	b8 20 00 00 00       	mov    eax,0x20
c0026d88:	29 c8                	sub    eax,ecx
c0026d8a:	89 c1                	mov    ecx,eax
c0026d8c:	d3 e3                	shl    ebx,cl
c0026d8e:	31 c0                	xor    eax,eax
c0026d90:	85 db                	test   ebx,ebx
c0026d92:	0f 95 c0             	setne  al
c0026d95:	09 f0                	or     eax,esi
c0026d97:	29 c2                	sub    edx,eax
c0026d99:	89 d0                	mov    eax,edx
c0026d9b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026d9e:	e9 af 00 00 00       	jmp    c0026e52 <__addsf3+0x28c>
c0026da3:	74 5c                	je     c0026e01 <__addsf3+0x23b>
c0026da5:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026da8:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026dab:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026daf:	75 14                	jne    c0026dc5 <__addsf3+0x1ff>
c0026db1:	85 d2                	test   edx,edx
c0026db3:	0f 84 06 01 00 00    	je     c0026ebf <__addsf3+0x2f9>
c0026db9:	48                   	dec    eax
c0026dba:	75 1b                	jne    c0026dd7 <__addsf3+0x211>
c0026dbc:	89 d8                	mov    eax,ebx
c0026dbe:	29 d0                	sub    eax,edx
c0026dc0:	e9 8d 00 00 00       	jmp    c0026e52 <__addsf3+0x28c>
c0026dc5:	89 f1                	mov    ecx,esi
c0026dc7:	f7 d1                	not    ecx
c0026dc9:	84 c9                	test   cl,cl
c0026dcb:	0f 84 ee 00 00 00    	je     c0026ebf <__addsf3+0x2f9>
c0026dd1:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026dd7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026dda:	83 f8 1f             	cmp    eax,0x1f
c0026ddd:	0f 8f dc 00 00 00    	jg     c0026ebf <__addsf3+0x2f9>
c0026de3:	89 d7                	mov    edi,edx
c0026de5:	88 c1                	mov    cl,al
c0026de7:	d3 ef                	shr    edi,cl
c0026de9:	b9 20 00 00 00       	mov    ecx,0x20
c0026dee:	29 c1                	sub    ecx,eax
c0026df0:	d3 e2                	shl    edx,cl
c0026df2:	31 c0                	xor    eax,eax
c0026df4:	85 d2                	test   edx,edx
c0026df6:	0f 95 c0             	setne  al
c0026df9:	09 f8                	or     eax,edi
c0026dfb:	29 c3                	sub    ebx,eax
c0026dfd:	89 d8                	mov    eax,ebx
c0026dff:	eb 51                	jmp    c0026e52 <__addsf3+0x28c>
c0026e01:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026e04:	40                   	inc    eax
c0026e05:	a8 fe                	test   al,0xfe
c0026e07:	75 3d                	jne    c0026e46 <__addsf3+0x280>
c0026e09:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026e0d:	0f 85 a7 00 00 00    	jne    c0026eba <__addsf3+0x2f4>
c0026e13:	85 d2                	test   edx,edx
c0026e15:	75 12                	jne    c0026e29 <__addsf3+0x263>
c0026e17:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026e1a:	85 db                	test   ebx,ebx
c0026e1c:	0f 85 9d 00 00 00    	jne    c0026ebf <__addsf3+0x2f9>
c0026e22:	31 ff                	xor    edi,edi
c0026e24:	e9 96 00 00 00       	jmp    c0026ebf <__addsf3+0x2f9>
c0026e29:	85 db                	test   ebx,ebx
c0026e2b:	0f 84 8e 00 00 00    	je     c0026ebf <__addsf3+0x2f9>
c0026e31:	89 d0                	mov    eax,edx
c0026e33:	29 d8                	sub    eax,ebx
c0026e35:	79 06                	jns    c0026e3d <__addsf3+0x277>
c0026e37:	89 d8                	mov    eax,ebx
c0026e39:	29 d0                	sub    eax,edx
c0026e3b:	eb 5a                	jmp    c0026e97 <__addsf3+0x2d1>
c0026e3d:	bf 00 00 00 00       	mov    edi,0x0
c0026e42:	74 7b                	je     c0026ebf <__addsf3+0x2f9>
c0026e44:	eb 4a                	jmp    c0026e90 <__addsf3+0x2ca>
c0026e46:	89 d0                	mov    eax,edx
c0026e48:	29 d8                	sub    eax,ebx
c0026e4a:	79 12                	jns    c0026e5e <__addsf3+0x298>
c0026e4c:	89 d8                	mov    eax,ebx
c0026e4e:	29 d0                	sub    eax,edx
c0026e50:	eb 09                	jmp    c0026e5b <__addsf3+0x295>
c0026e52:	85 c0                	test   eax,eax
c0026e54:	79 41                	jns    c0026e97 <__addsf3+0x2d1>
c0026e56:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026e5b:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0026e5e:	31 f6                	xor    esi,esi
c0026e60:	85 c0                	test   eax,eax
c0026e62:	74 33                	je     c0026e97 <__addsf3+0x2d1>
c0026e64:	0f bd c8             	bsr    ecx,eax
c0026e67:	83 f1 1f             	xor    ecx,0x1f
c0026e6a:	d3 e0                	shl    eax,cl
c0026e6c:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026e70:	39 ca                	cmp    edx,ecx
c0026e72:	7f 10                	jg     c0026e84 <__addsf3+0x2be>
c0026e74:	29 d1                	sub    ecx,edx
c0026e76:	41                   	inc    ecx
c0026e77:	d3 e8                	shr    eax,cl
c0026e79:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026e7c:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026e82:	eb 13                	jmp    c0026e97 <__addsf3+0x2d1>
c0026e84:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026e87:	29 ce                	sub    esi,ecx
c0026e89:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026e8e:	eb 07                	jmp    c0026e97 <__addsf3+0x2d1>
c0026e90:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026e93:	eb 02                	jmp    c0026e97 <__addsf3+0x2d1>
c0026e95:	31 c0                	xor    eax,eax
c0026e97:	89 c2                	mov    edx,eax
c0026e99:	c1 ea 08             	shr    edx,0x8
c0026e9c:	a8 7f                	test   al,0x7f
c0026e9e:	0f 95 c1             	setne  cl
c0026ea1:	09 d1                	or     ecx,edx
c0026ea3:	83 e1 01             	and    ecx,0x1
c0026ea6:	c1 e8 07             	shr    eax,0x7
c0026ea9:	21 c8                	and    eax,ecx
c0026eab:	c1 e6 17             	shl    esi,0x17
c0026eae:	09 d6                	or     esi,edx
c0026eb0:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026eb3:	eb 0a                	jmp    c0026ebf <__addsf3+0x2f9>
c0026eb5:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026eb8:	eb 05                	jmp    c0026ebf <__addsf3+0x2f9>
c0026eba:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0026ebf:	89 f8                	mov    eax,edi
c0026ec1:	5a                   	pop    edx
c0026ec2:	59                   	pop    ecx
c0026ec3:	5b                   	pop    ebx
c0026ec4:	5e                   	pop    esi
c0026ec5:	5f                   	pop    edi
c0026ec6:	5d                   	pop    ebp
c0026ec7:	c3                   	ret    

c0026ec8 <__subsf3>:
c0026ec8:	55                   	push   ebp
c0026ec9:	89 e5                	mov    ebp,esp
c0026ecb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026ece:	05 00 00 00 80       	add    eax,0x80000000
c0026ed3:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026ed6:	5d                   	pop    ebp
c0026ed7:	e9 ea fc ff ff       	jmp    c0026bc6 <__addsf3>

c0026edc <__negsf2>:
c0026edc:	55                   	push   ebp
c0026edd:	89 e5                	mov    ebp,esp
c0026edf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026ee2:	05 00 00 00 80       	add    eax,0x80000000
c0026ee7:	5d                   	pop    ebp
c0026ee8:	c3                   	ret    

c0026ee9 <__mulsf3>:
c0026ee9:	55                   	push   ebp
c0026eea:	89 e5                	mov    ebp,esp
c0026eec:	57                   	push   edi
c0026eed:	56                   	push   esi
c0026eee:	53                   	push   ebx
c0026eef:	83 ec 1c             	sub    esp,0x1c
c0026ef2:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0026ef5:	89 f0                	mov    eax,esi
c0026ef7:	89 f1                	mov    ecx,esi
c0026ef9:	c1 f9 17             	sar    ecx,0x17
c0026efc:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026eff:	c1 e0 08             	shl    eax,0x8
c0026f02:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026f07:	89 c1                	mov    ecx,eax
c0026f09:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026f0c:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026f0f:	89 c7                	mov    edi,eax
c0026f11:	c1 ff 17             	sar    edi,0x17
c0026f14:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026f18:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026f1b:	89 f8                	mov    eax,edi
c0026f1d:	0f b6 c0             	movzx  eax,al
c0026f20:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026f23:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0026f27:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026f2a:	42                   	inc    edx
c0026f2b:	80 e2 fe             	and    dl,0xfe
c0026f2e:	75 7b                	jne    c0026fab <__mulsf3+0xc2>
c0026f30:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026f34:	74 54                	je     c0026f8a <__mulsf3+0xa1>
c0026f36:	85 c9                	test   ecx,ecx
c0026f38:	0f 85 64 01 00 00    	jne    c00270a2 <__mulsf3+0x1b9>
c0026f3e:	8d 57 01             	lea    edx,[edi+0x1]
c0026f41:	80 e2 fe             	and    dl,0xfe
c0026f44:	75 1f                	jne    c0026f65 <__mulsf3+0x7c>
c0026f46:	85 c0                	test   eax,eax
c0026f48:	b8 00 00 00 00       	mov    eax,0x0
c0026f4d:	74 29                	je     c0026f78 <__mulsf3+0x8f>
c0026f4f:	53                   	push   ebx
c0026f50:	53                   	push   ebx
c0026f51:	50                   	push   eax
c0026f52:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f55:	e8 96 05 00 00       	call   c00274f0 <__nesf2>
c0026f5a:	83 c4 10             	add    esp,0x10
c0026f5d:	85 c0                	test   eax,eax
c0026f5f:	0f 85 3a 01 00 00    	jne    c002709f <__mulsf3+0x1b6>
c0026f65:	85 ff                	test   edi,edi
c0026f67:	0f 89 35 01 00 00    	jns    c00270a2 <__mulsf3+0x1b9>
c0026f6d:	81 c6 00 00 00 80    	add    esi,0x80000000
c0026f73:	e9 2a 01 00 00       	jmp    c00270a2 <__mulsf3+0x1b9>
c0026f78:	51                   	push   ecx
c0026f79:	51                   	push   ecx
c0026f7a:	50                   	push   eax
c0026f7b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f7e:	e8 6d 05 00 00       	call   c00274f0 <__nesf2>
c0026f83:	83 c4 10             	add    esp,0x10
c0026f86:	85 c0                	test   eax,eax
c0026f88:	eb 15                	jmp    c0026f9f <__mulsf3+0xb6>
c0026f8a:	85 c9                	test   ecx,ecx
c0026f8c:	74 0b                	je     c0026f99 <__mulsf3+0xb0>
c0026f8e:	8d 53 ff             	lea    edx,[ebx-0x1]
c0026f91:	01 c9                	add    ecx,ecx
c0026f93:	78 16                	js     c0026fab <__mulsf3+0xc2>
c0026f95:	89 d3                	mov    ebx,edx
c0026f97:	eb f5                	jmp    c0026f8e <__mulsf3+0xa5>
c0026f99:	89 f8                	mov    eax,edi
c0026f9b:	f7 d0                	not    eax
c0026f9d:	84 c0                	test   al,al
c0026f9f:	75 c4                	jne    c0026f65 <__mulsf3+0x7c>
c0026fa1:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0026fa6:	e9 f7 00 00 00       	jmp    c00270a2 <__mulsf3+0x1b9>
c0026fab:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0026fae:	c1 e6 08             	shl    esi,0x8
c0026fb1:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0026fb7:	8d 57 01             	lea    edx,[edi+0x1]
c0026fba:	80 e2 fe             	and    dl,0xfe
c0026fbd:	75 63                	jne    c0027022 <__mulsf3+0x139>
c0026fbf:	85 c0                	test   eax,eax
c0026fc1:	74 2f                	je     c0026ff2 <__mulsf3+0x109>
c0026fc3:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026fc7:	0f 89 d2 00 00 00    	jns    c002709f <__mulsf3+0x1b6>
c0026fcd:	52                   	push   edx
c0026fce:	52                   	push   edx
c0026fcf:	6a 00                	push   0x0
c0026fd1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026fd4:	e8 dc 04 00 00       	call   c00274b5 <__eqsf2>
c0026fd9:	83 c4 10             	add    esp,0x10
c0026fdc:	85 c0                	test   eax,eax
c0026fde:	0f 85 bb 00 00 00    	jne    c002709f <__mulsf3+0x1b6>
c0026fe4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026fe7:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0026fed:	e9 b0 00 00 00       	jmp    c00270a2 <__mulsf3+0x1b9>
c0026ff2:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026ff5:	50                   	push   eax
c0026ff6:	50                   	push   eax
c0026ff7:	6a 00                	push   0x0
c0026ff9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026ffc:	e8 b4 04 00 00       	call   c00274b5 <__eqsf2>
c0027001:	83 c4 10             	add    esp,0x10
c0027004:	85 c0                	test   eax,eax
c0027006:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027009:	75 0c                	jne    c0027017 <__mulsf3+0x12e>
c002700b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c002700f:	0f 89 8a 00 00 00    	jns    c002709f <__mulsf3+0x1b6>
c0027015:	eb cd                	jmp    c0026fe4 <__mulsf3+0xfb>
c0027017:	8d 43 ff             	lea    eax,[ebx-0x1]
c002701a:	01 f6                	add    esi,esi
c002701c:	78 04                	js     c0027022 <__mulsf3+0x139>
c002701e:	89 c3                	mov    ebx,eax
c0027020:	eb f5                	jmp    c0027017 <__mulsf3+0x12e>
c0027022:	89 c8                	mov    eax,ecx
c0027024:	0d 00 00 00 80       	or     eax,0x80000000
c0027029:	81 ce 00 00 00 80    	or     esi,0x80000000
c002702f:	f7 e6                	mul    esi
c0027031:	85 c0                	test   eax,eax
c0027033:	0f 95 c0             	setne  al
c0027036:	0f b6 c0             	movzx  eax,al
c0027039:	09 c2                	or     edx,eax
c002703b:	78 03                	js     c0027040 <__mulsf3+0x157>
c002703d:	01 d2                	add    edx,edx
c002703f:	4b                   	dec    ebx
c0027040:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0027046:	7f 22                	jg     c002706a <__mulsf3+0x181>
c0027048:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002704e:	85 db                	test   ebx,ebx
c0027050:	7f 23                	jg     c0027075 <__mulsf3+0x18c>
c0027052:	83 fb e9             	cmp    ebx,0xffffffe9
c0027055:	7c 1a                	jl     c0027071 <__mulsf3+0x188>
c0027057:	81 ca 00 00 00 80    	or     edx,0x80000000
c002705d:	b9 01 00 00 00       	mov    ecx,0x1
c0027062:	29 d9                	sub    ecx,ebx
c0027064:	d3 ea                	shr    edx,cl
c0027066:	31 db                	xor    ebx,ebx
c0027068:	eb 0b                	jmp    c0027075 <__mulsf3+0x18c>
c002706a:	bb ff 00 00 00       	mov    ebx,0xff
c002706f:	eb 02                	jmp    c0027073 <__mulsf3+0x18a>
c0027071:	31 db                	xor    ebx,ebx
c0027073:	31 d2                	xor    edx,edx
c0027075:	89 d0                	mov    eax,edx
c0027077:	c1 e8 08             	shr    eax,0x8
c002707a:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c002707d:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027083:	09 fb                	or     ebx,edi
c0027085:	c1 e3 17             	shl    ebx,0x17
c0027088:	09 c3                	or     ebx,eax
c002708a:	f6 c2 7f             	test   dl,0x7f
c002708d:	0f 95 c1             	setne  cl
c0027090:	09 c8                	or     eax,ecx
c0027092:	83 e0 01             	and    eax,0x1
c0027095:	c1 ea 07             	shr    edx,0x7
c0027098:	21 c2                	and    edx,eax
c002709a:	8d 34 13             	lea    esi,[ebx+edx*1]
c002709d:	eb 03                	jmp    c00270a2 <__mulsf3+0x1b9>
c002709f:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c00270a2:	89 f0                	mov    eax,esi
c00270a4:	8d 65 f4             	lea    esp,[ebp-0xc]
c00270a7:	5b                   	pop    ebx
c00270a8:	5e                   	pop    esi
c00270a9:	5f                   	pop    edi
c00270aa:	5d                   	pop    ebp
c00270ab:	c3                   	ret    

c00270ac <__divsf3>:
c00270ac:	55                   	push   ebp
c00270ad:	89 e5                	mov    ebp,esp
c00270af:	57                   	push   edi
c00270b0:	56                   	push   esi
c00270b1:	53                   	push   ebx
c00270b2:	83 ec 1c             	sub    esp,0x1c
c00270b5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00270b8:	89 d8                	mov    eax,ebx
c00270ba:	89 d9                	mov    ecx,ebx
c00270bc:	c1 f9 17             	sar    ecx,0x17
c00270bf:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00270c2:	c1 e0 08             	shl    eax,0x8
c00270c5:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00270ca:	89 c1                	mov    ecx,eax
c00270cc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00270cf:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00270d2:	89 c7                	mov    edi,eax
c00270d4:	c1 ff 17             	sar    edi,0x17
c00270d7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00270db:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00270de:	89 f8                	mov    eax,edi
c00270e0:	0f b6 c0             	movzx  eax,al
c00270e3:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00270e6:	29 c6                	sub    esi,eax
c00270e8:	83 c6 7f             	add    esi,0x7f
c00270eb:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00270ee:	42                   	inc    edx
c00270ef:	80 e2 fe             	and    dl,0xfe
c00270f2:	0f 85 9c 00 00 00    	jne    c0027194 <__divsf3+0xe8>
c00270f8:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00270fc:	74 33                	je     c0027131 <__divsf3+0x85>
c00270fe:	85 c9                	test   ecx,ecx
c0027100:	0f 85 c7 01 00 00    	jne    c00272cd <__divsf3+0x221>
c0027106:	8d 57 01             	lea    edx,[edi+0x1]
c0027109:	80 e2 fe             	and    dl,0xfe
c002710c:	75 2f                	jne    c002713d <__divsf3+0x91>
c002710e:	85 c0                	test   eax,eax
c0027110:	74 2b                	je     c002713d <__divsf3+0x91>
c0027112:	51                   	push   ecx
c0027113:	51                   	push   ecx
c0027114:	6a 00                	push   0x0
c0027116:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027119:	e8 d2 03 00 00       	call   c00274f0 <__nesf2>
c002711e:	83 c4 10             	add    esp,0x10
c0027121:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027124:	85 c0                	test   eax,eax
c0027126:	0f 85 a1 01 00 00    	jne    c00272cd <__divsf3+0x221>
c002712c:	e9 92 01 00 00       	jmp    c00272c3 <__divsf3+0x217>
c0027131:	85 c9                	test   ecx,ecx
c0027133:	75 1b                	jne    c0027150 <__divsf3+0xa4>
c0027135:	8d 57 01             	lea    edx,[edi+0x1]
c0027138:	80 e2 fe             	and    dl,0xfe
c002713b:	74 1e                	je     c002715b <__divsf3+0xaf>
c002713d:	85 ff                	test   edi,edi
c002713f:	0f 89 88 01 00 00    	jns    c00272cd <__divsf3+0x221>
c0027145:	81 c3 00 00 00 80    	add    ebx,0x80000000
c002714b:	e9 7d 01 00 00       	jmp    c00272cd <__divsf3+0x221>
c0027150:	8d 56 ff             	lea    edx,[esi-0x1]
c0027153:	01 c9                	add    ecx,ecx
c0027155:	78 3d                	js     c0027194 <__divsf3+0xe8>
c0027157:	89 d6                	mov    esi,edx
c0027159:	eb f5                	jmp    c0027150 <__divsf3+0xa4>
c002715b:	85 c0                	test   eax,eax
c002715d:	b8 00 00 00 00       	mov    eax,0x0
c0027162:	74 18                	je     c002717c <__divsf3+0xd0>
c0027164:	52                   	push   edx
c0027165:	52                   	push   edx
c0027166:	50                   	push   eax
c0027167:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002716a:	e8 81 03 00 00       	call   c00274f0 <__nesf2>
c002716f:	83 c4 10             	add    esp,0x10
c0027172:	85 c0                	test   eax,eax
c0027174:	0f 85 50 01 00 00    	jne    c00272ca <__divsf3+0x21e>
c002717a:	eb c1                	jmp    c002713d <__divsf3+0x91>
c002717c:	56                   	push   esi
c002717d:	56                   	push   esi
c002717e:	50                   	push   eax
c002717f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027182:	e8 69 03 00 00       	call   c00274f0 <__nesf2>
c0027187:	83 c4 10             	add    esp,0x10
c002718a:	85 c0                	test   eax,eax
c002718c:	0f 84 31 01 00 00    	je     c00272c3 <__divsf3+0x217>
c0027192:	eb a9                	jmp    c002713d <__divsf3+0x91>
c0027194:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0027197:	c1 e3 08             	shl    ebx,0x8
c002719a:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00271a0:	8d 57 01             	lea    edx,[edi+0x1]
c00271a3:	80 e2 fe             	and    dl,0xfe
c00271a6:	75 71                	jne    c0027219 <__divsf3+0x16d>
c00271a8:	85 c0                	test   eax,eax
c00271aa:	ba 00 00 00 00       	mov    edx,0x0
c00271af:	74 2f                	je     c00271e0 <__divsf3+0x134>
c00271b1:	51                   	push   ecx
c00271b2:	51                   	push   ecx
c00271b3:	52                   	push   edx
c00271b4:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00271b7:	e8 f9 02 00 00       	call   c00274b5 <__eqsf2>
c00271bc:	83 c4 10             	add    esp,0x10
c00271bf:	85 c0                	test   eax,eax
c00271c1:	0f 85 03 01 00 00    	jne    c00272ca <__divsf3+0x21e>
c00271c7:	31 d2                	xor    edx,edx
c00271c9:	89 d3                	mov    ebx,edx
c00271cb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00271ce:	31 f8                	xor    eax,edi
c00271d0:	0f 89 f7 00 00 00    	jns    c00272cd <__divsf3+0x221>
c00271d6:	bb 00 00 00 80       	mov    ebx,0x80000000
c00271db:	e9 ed 00 00 00       	jmp    c00272cd <__divsf3+0x221>
c00271e0:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00271e3:	50                   	push   eax
c00271e4:	50                   	push   eax
c00271e5:	52                   	push   edx
c00271e6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00271e9:	e8 c7 02 00 00       	call   c00274b5 <__eqsf2>
c00271ee:	83 c4 10             	add    esp,0x10
c00271f1:	85 c0                	test   eax,eax
c00271f3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00271f6:	75 16                	jne    c002720e <__divsf3+0x162>
c00271f8:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00271fb:	31 fb                	xor    ebx,edi
c00271fd:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0027203:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0027209:	e9 bf 00 00 00       	jmp    c00272cd <__divsf3+0x221>
c002720e:	8d 46 01             	lea    eax,[esi+0x1]
c0027211:	01 db                	add    ebx,ebx
c0027213:	78 04                	js     c0027219 <__divsf3+0x16d>
c0027215:	89 c6                	mov    esi,eax
c0027217:	eb f5                	jmp    c002720e <__divsf3+0x162>
c0027219:	89 c8                	mov    eax,ecx
c002721b:	0d 00 00 00 80       	or     eax,0x80000000
c0027220:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027226:	31 d2                	xor    edx,edx
c0027228:	39 d8                	cmp    eax,ebx
c002722a:	72 07                	jb     c0027233 <__divsf3+0x187>
c002722c:	29 d8                	sub    eax,ebx
c002722e:	ba 01 00 00 00       	mov    edx,0x1
c0027233:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c002723a:	01 d2                	add    edx,edx
c002723c:	89 c1                	mov    ecx,eax
c002723e:	01 c0                	add    eax,eax
c0027240:	85 c9                	test   ecx,ecx
c0027242:	78 04                	js     c0027248 <__divsf3+0x19c>
c0027244:	39 c3                	cmp    ebx,eax
c0027246:	77 05                	ja     c002724d <__divsf3+0x1a1>
c0027248:	29 d8                	sub    eax,ebx
c002724a:	83 ca 01             	or     edx,0x1
c002724d:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0027250:	75 e8                	jne    c002723a <__divsf3+0x18e>
c0027252:	85 c0                	test   eax,eax
c0027254:	0f 95 c0             	setne  al
c0027257:	0f b6 c0             	movzx  eax,al
c002725a:	c1 e2 06             	shl    edx,0x6
c002725d:	09 c2                	or     edx,eax
c002725f:	78 03                	js     c0027264 <__divsf3+0x1b8>
c0027261:	01 d2                	add    edx,edx
c0027263:	4e                   	dec    esi
c0027264:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002726a:	7f 22                	jg     c002728e <__divsf3+0x1e2>
c002726c:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027272:	85 f6                	test   esi,esi
c0027274:	7f 23                	jg     c0027299 <__divsf3+0x1ed>
c0027276:	83 fe e9             	cmp    esi,0xffffffe9
c0027279:	7c 1a                	jl     c0027295 <__divsf3+0x1e9>
c002727b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027281:	b9 01 00 00 00       	mov    ecx,0x1
c0027286:	29 f1                	sub    ecx,esi
c0027288:	d3 ea                	shr    edx,cl
c002728a:	31 f6                	xor    esi,esi
c002728c:	eb 0b                	jmp    c0027299 <__divsf3+0x1ed>
c002728e:	be ff 00 00 00       	mov    esi,0xff
c0027293:	eb 02                	jmp    c0027297 <__divsf3+0x1eb>
c0027295:	31 f6                	xor    esi,esi
c0027297:	31 d2                	xor    edx,edx
c0027299:	89 d0                	mov    eax,edx
c002729b:	c1 e8 08             	shr    eax,0x8
c002729e:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c00272a1:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c00272a7:	09 fe                	or     esi,edi
c00272a9:	c1 e6 17             	shl    esi,0x17
c00272ac:	09 c6                	or     esi,eax
c00272ae:	f6 c2 7f             	test   dl,0x7f
c00272b1:	0f 95 c1             	setne  cl
c00272b4:	09 c8                	or     eax,ecx
c00272b6:	83 e0 01             	and    eax,0x1
c00272b9:	c1 ea 07             	shr    edx,0x7
c00272bc:	21 c2                	and    edx,eax
c00272be:	8d 1c 16             	lea    ebx,[esi+edx*1]
c00272c1:	eb 0a                	jmp    c00272cd <__divsf3+0x221>
c00272c3:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c00272c8:	eb 03                	jmp    c00272cd <__divsf3+0x221>
c00272ca:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00272cd:	89 d8                	mov    eax,ebx
c00272cf:	8d 65 f4             	lea    esp,[ebp-0xc]
c00272d2:	5b                   	pop    ebx
c00272d3:	5e                   	pop    esi
c00272d4:	5f                   	pop    edi
c00272d5:	5d                   	pop    ebp
c00272d6:	c3                   	ret    

c00272d7 <__floatsisf>:
c00272d7:	55                   	push   ebp
c00272d8:	89 e5                	mov    ebp,esp
c00272da:	53                   	push   ebx
c00272db:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00272de:	85 d2                	test   edx,edx
c00272e0:	7e 2b                	jle    c002730d <__floatsisf+0x36>
c00272e2:	0f bd ca             	bsr    ecx,edx
c00272e5:	83 f1 1f             	xor    ecx,0x1f
c00272e8:	d3 e2                	shl    edx,cl
c00272ea:	89 d0                	mov    eax,edx
c00272ec:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00272f1:	89 c3                	mov    ebx,eax
c00272f3:	c1 eb 08             	shr    ebx,0x8
c00272f6:	80 e2 7f             	and    dl,0x7f
c00272f9:	0f 95 c2             	setne  dl
c00272fc:	09 da                	or     edx,ebx
c00272fe:	83 e2 01             	and    edx,0x1
c0027301:	c1 e8 07             	shr    eax,0x7
c0027304:	21 c2                	and    edx,eax
c0027306:	b8 9e 00 00 00       	mov    eax,0x9e
c002730b:	eb 32                	jmp    c002733f <__floatsisf+0x68>
c002730d:	b8 00 00 00 00       	mov    eax,0x0
c0027312:	74 34                	je     c0027348 <__floatsisf+0x71>
c0027314:	f7 da                	neg    edx
c0027316:	0f bd ca             	bsr    ecx,edx
c0027319:	83 f1 1f             	xor    ecx,0x1f
c002731c:	d3 e2                	shl    edx,cl
c002731e:	89 d0                	mov    eax,edx
c0027320:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027325:	89 c3                	mov    ebx,eax
c0027327:	c1 eb 08             	shr    ebx,0x8
c002732a:	80 e2 7f             	and    dl,0x7f
c002732d:	0f 95 c2             	setne  dl
c0027330:	09 da                	or     edx,ebx
c0027332:	83 e2 01             	and    edx,0x1
c0027335:	c1 e8 07             	shr    eax,0x7
c0027338:	21 c2                	and    edx,eax
c002733a:	b8 9e 01 00 00       	mov    eax,0x19e
c002733f:	29 c8                	sub    eax,ecx
c0027341:	c1 e0 17             	shl    eax,0x17
c0027344:	09 d8                	or     eax,ebx
c0027346:	01 d0                	add    eax,edx
c0027348:	5b                   	pop    ebx
c0027349:	5d                   	pop    ebp
c002734a:	c3                   	ret    

c002734b <__floatunsisf>:
c002734b:	55                   	push   ebp
c002734c:	89 e5                	mov    ebp,esp
c002734e:	53                   	push   ebx
c002734f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027352:	31 c0                	xor    eax,eax
c0027354:	85 d2                	test   edx,edx
c0027356:	74 32                	je     c002738a <__floatunsisf+0x3f>
c0027358:	0f bd ca             	bsr    ecx,edx
c002735b:	83 f1 1f             	xor    ecx,0x1f
c002735e:	d3 e2                	shl    edx,cl
c0027360:	89 d0                	mov    eax,edx
c0027362:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027367:	89 c3                	mov    ebx,eax
c0027369:	c1 eb 08             	shr    ebx,0x8
c002736c:	80 e2 7f             	and    dl,0x7f
c002736f:	0f 95 c2             	setne  dl
c0027372:	09 da                	or     edx,ebx
c0027374:	83 e2 01             	and    edx,0x1
c0027377:	c1 e8 07             	shr    eax,0x7
c002737a:	21 c2                	and    edx,eax
c002737c:	b8 9e 00 00 00       	mov    eax,0x9e
c0027381:	29 c8                	sub    eax,ecx
c0027383:	c1 e0 17             	shl    eax,0x17
c0027386:	09 d8                	or     eax,ebx
c0027388:	01 d0                	add    eax,edx
c002738a:	5b                   	pop    ebx
c002738b:	5d                   	pop    ebp
c002738c:	c3                   	ret    

c002738d <__fixsfsi>:
c002738d:	55                   	push   ebp
c002738e:	89 e5                	mov    ebp,esp
c0027390:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027393:	89 d1                	mov    ecx,edx
c0027395:	c1 e1 08             	shl    ecx,0x8
c0027398:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c002739e:	c1 fa 17             	sar    edx,0x17
c00273a1:	78 1c                	js     c00273bf <__fixsfsi+0x32>
c00273a3:	83 ea 7f             	sub    edx,0x7f
c00273a6:	31 c0                	xor    eax,eax
c00273a8:	83 fa 1e             	cmp    edx,0x1e
c00273ab:	77 40                	ja     c00273ed <__fixsfsi+0x60>
c00273ad:	89 c8                	mov    eax,ecx
c00273af:	0d 00 00 00 80       	or     eax,0x80000000
c00273b4:	b9 1f 00 00 00       	mov    ecx,0x1f
c00273b9:	29 d1                	sub    ecx,edx
c00273bb:	d3 e8                	shr    eax,cl
c00273bd:	eb 2e                	jmp    c00273ed <__fixsfsi+0x60>
c00273bf:	31 c0                	xor    eax,eax
c00273c1:	81 c2 81 00 00 00    	add    edx,0x81
c00273c7:	78 24                	js     c00273ed <__fixsfsi+0x60>
c00273c9:	83 fa 1e             	cmp    edx,0x1e
c00273cc:	7e 09                	jle    c00273d7 <__fixsfsi+0x4a>
c00273ce:	83 fa 1f             	cmp    edx,0x1f
c00273d1:	75 18                	jne    c00273eb <__fixsfsi+0x5e>
c00273d3:	85 c9                	test   ecx,ecx
c00273d5:	75 14                	jne    c00273eb <__fixsfsi+0x5e>
c00273d7:	89 c8                	mov    eax,ecx
c00273d9:	0d 00 00 00 80       	or     eax,0x80000000
c00273de:	b9 1f 00 00 00       	mov    ecx,0x1f
c00273e3:	29 d1                	sub    ecx,edx
c00273e5:	d3 e8                	shr    eax,cl
c00273e7:	f7 d8                	neg    eax
c00273e9:	eb 02                	jmp    c00273ed <__fixsfsi+0x60>
c00273eb:	31 c0                	xor    eax,eax
c00273ed:	5d                   	pop    ebp
c00273ee:	c3                   	ret    

c00273ef <__fixunssfsi>:
c00273ef:	55                   	push   ebp
c00273f0:	89 e5                	mov    ebp,esp
c00273f2:	53                   	push   ebx
c00273f3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00273f6:	89 d3                	mov    ebx,edx
c00273f8:	c1 fb 17             	sar    ebx,0x17
c00273fb:	83 eb 7f             	sub    ebx,0x7f
c00273fe:	31 c0                	xor    eax,eax
c0027400:	83 fb 1f             	cmp    ebx,0x1f
c0027403:	77 18                	ja     c002741d <__fixunssfsi+0x2e>
c0027405:	89 d0                	mov    eax,edx
c0027407:	c1 e0 08             	shl    eax,0x8
c002740a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002740f:	0d 00 00 00 80       	or     eax,0x80000000
c0027414:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027419:	29 d9                	sub    ecx,ebx
c002741b:	d3 e8                	shr    eax,cl
c002741d:	5b                   	pop    ebx
c002741e:	5d                   	pop    ebp
c002741f:	c3                   	ret    

c0027420 <__cmpsf2>:
c0027420:	55                   	push   ebp
c0027421:	89 e5                	mov    ebp,esp
c0027423:	57                   	push   edi
c0027424:	56                   	push   esi
c0027425:	53                   	push   ebx
c0027426:	83 ec 24             	sub    esp,0x24
c0027429:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002742c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002742f:	e8 4f 10 00 00       	call   c0028483 <__truncdfsf2>
c0027434:	5a                   	pop    edx
c0027435:	59                   	pop    ecx
c0027436:	89 c3                	mov    ebx,eax
c0027438:	c1 e8 17             	shr    eax,0x17
c002743b:	0f b6 f0             	movzx  esi,al
c002743e:	89 d8                	mov    eax,ebx
c0027440:	c1 e8 1f             	shr    eax,0x1f
c0027443:	31 c6                	xor    esi,eax
c0027445:	c1 e3 08             	shl    ebx,0x8
c0027448:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002744b:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002744e:	e8 30 10 00 00       	call   c0028483 <__truncdfsf2>
c0027453:	83 c4 10             	add    esp,0x10
c0027456:	89 c1                	mov    ecx,eax
c0027458:	c1 e9 17             	shr    ecx,0x17
c002745b:	0f b6 c9             	movzx  ecx,cl
c002745e:	89 c7                	mov    edi,eax
c0027460:	c1 ef 1f             	shr    edi,0x1f
c0027463:	89 ca                	mov    edx,ecx
c0027465:	31 fa                	xor    edx,edi
c0027467:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c002746a:	c1 e0 08             	shl    eax,0x8
c002746d:	89 c2                	mov    edx,eax
c002746f:	89 d8                	mov    eax,ebx
c0027471:	09 d0                	or     eax,edx
c0027473:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027478:	09 f0                	or     eax,esi
c002747a:	75 08                	jne    c0027484 <__cmpsf2+0x64>
c002747c:	31 c0                	xor    eax,eax
c002747e:	39 f9                	cmp    ecx,edi
c0027480:	75 0c                	jne    c002748e <__cmpsf2+0x6e>
c0027482:	eb 29                	jmp    c00274ad <__cmpsf2+0x8d>
c0027484:	b8 01 00 00 00       	mov    eax,0x1
c0027489:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c002748c:	7f 1f                	jg     c00274ad <__cmpsf2+0x8d>
c002748e:	83 c8 ff             	or     eax,0xffffffff
c0027491:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027494:	7c 17                	jl     c00274ad <__cmpsf2+0x8d>
c0027496:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c002749c:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00274a2:	b8 01 00 00 00       	mov    eax,0x1
c00274a7:	39 d3                	cmp    ebx,edx
c00274a9:	77 02                	ja     c00274ad <__cmpsf2+0x8d>
c00274ab:	19 c0                	sbb    eax,eax
c00274ad:	8d 65 f4             	lea    esp,[ebp-0xc]
c00274b0:	5b                   	pop    ebx
c00274b1:	5e                   	pop    esi
c00274b2:	5f                   	pop    edi
c00274b3:	5d                   	pop    ebp
c00274b4:	c3                   	ret    

c00274b5 <__eqsf2>:
c00274b5:	55                   	push   ebp
c00274b6:	89 e5                	mov    ebp,esp
c00274b8:	83 ec 24             	sub    esp,0x24
c00274bb:	6a 01                	push   0x1
c00274bd:	83 ec 0c             	sub    esp,0xc
c00274c0:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00274c3:	e8 df 10 00 00       	call   c00285a7 <__extendsfdf2>
c00274c8:	83 c4 10             	add    esp,0x10
c00274cb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00274ce:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00274d1:	52                   	push   edx
c00274d2:	50                   	push   eax
c00274d3:	50                   	push   eax
c00274d4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00274d7:	e8 cb 10 00 00       	call   c00285a7 <__extendsfdf2>
c00274dc:	59                   	pop    ecx
c00274dd:	59                   	pop    ecx
c00274de:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00274e1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00274e4:	52                   	push   edx
c00274e5:	50                   	push   eax
c00274e6:	e8 35 ff ff ff       	call   c0027420 <__cmpsf2>
c00274eb:	83 c4 20             	add    esp,0x20
c00274ee:	c9                   	leave  
c00274ef:	c3                   	ret    

c00274f0 <__nesf2>:
c00274f0:	eb c3                	jmp    c00274b5 <__eqsf2>

c00274f2 <__gtsf2>:
c00274f2:	55                   	push   ebp
c00274f3:	89 e5                	mov    ebp,esp
c00274f5:	83 ec 24             	sub    esp,0x24
c00274f8:	6a ff                	push   0xffffffff
c00274fa:	83 ec 0c             	sub    esp,0xc
c00274fd:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027500:	e8 a2 10 00 00       	call   c00285a7 <__extendsfdf2>
c0027505:	83 c4 10             	add    esp,0x10
c0027508:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002750b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002750e:	52                   	push   edx
c002750f:	50                   	push   eax
c0027510:	50                   	push   eax
c0027511:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027514:	e8 8e 10 00 00       	call   c00285a7 <__extendsfdf2>
c0027519:	59                   	pop    ecx
c002751a:	59                   	pop    ecx
c002751b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002751e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027521:	52                   	push   edx
c0027522:	50                   	push   eax
c0027523:	e8 f8 fe ff ff       	call   c0027420 <__cmpsf2>
c0027528:	83 c4 20             	add    esp,0x20
c002752b:	c9                   	leave  
c002752c:	c3                   	ret    

c002752d <__gesf2>:
c002752d:	eb c3                	jmp    c00274f2 <__gtsf2>

c002752f <__ltsf2>:
c002752f:	eb 84                	jmp    c00274b5 <__eqsf2>

c0027531 <__lesf2>:
c0027531:	eb 82                	jmp    c00274b5 <__eqsf2>

c0027533 <__adddf3>:
c0027533:	55                   	push   ebp
c0027534:	89 e5                	mov    ebp,esp
c0027536:	57                   	push   edi
c0027537:	56                   	push   esi
c0027538:	53                   	push   ebx
c0027539:	83 ec 24             	sub    esp,0x24
c002753c:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002753f:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027542:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027545:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027548:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002754b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002754e:	89 c8                	mov    eax,ecx
c0027550:	89 ce                	mov    esi,ecx
c0027552:	c1 fe 14             	sar    esi,0x14
c0027555:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0027558:	89 fb                	mov    ebx,edi
c002755a:	89 fa                	mov    edx,edi
c002755c:	c1 e2 0b             	shl    edx,0xb
c002755f:	c1 e0 0b             	shl    eax,0xb
c0027562:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027567:	c1 eb 15             	shr    ebx,0x15
c002756a:	09 d8                	or     eax,ebx
c002756c:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c002756f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027572:	c1 fe 14             	sar    esi,0x14
c0027575:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027578:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002757b:	89 f3                	mov    ebx,esi
c002757d:	c1 e3 0b             	shl    ebx,0xb
c0027580:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027583:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027586:	c1 e3 0b             	shl    ebx,0xb
c0027589:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c002758f:	c1 ee 15             	shr    esi,0x15
c0027592:	09 f3                	or     ebx,esi
c0027594:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0027597:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002759a:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c002759d:	0f 88 5f 02 00 00    	js     c0027802 <__adddf3+0x2cf>
c00275a3:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00275a6:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c00275a9:	85 db                	test   ebx,ebx
c00275ab:	0f 8e c7 00 00 00    	jle    c0027678 <__adddf3+0x145>
c00275b1:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c00275b8:	75 1a                	jne    c00275d4 <__adddf3+0xa1>
c00275ba:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00275bd:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00275c0:	0f 84 b2 05 00 00    	je     c0027b78 <__adddf3+0x645>
c00275c6:	4b                   	dec    ebx
c00275c7:	75 23                	jne    c00275ec <__adddf3+0xb9>
c00275c9:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00275cc:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00275cf:	e9 99 00 00 00       	jmp    c002766d <__adddf3+0x13a>
c00275d4:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00275d7:	f7 d6                	not    esi
c00275d9:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00275df:	0f 84 93 05 00 00    	je     c0027b78 <__adddf3+0x645>
c00275e5:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00275ec:	83 fb 1f             	cmp    ebx,0x1f
c00275ef:	7e 42                	jle    c0027633 <__adddf3+0x100>
c00275f1:	83 fb 3f             	cmp    ebx,0x3f
c00275f4:	0f 8f 7e 05 00 00    	jg     c0027b78 <__adddf3+0x645>
c00275fa:	83 e3 1f             	and    ebx,0x1f
c00275fd:	89 d9                	mov    ecx,ebx
c00275ff:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027602:	d3 ef                	shr    edi,cl
c0027604:	31 db                	xor    ebx,ebx
c0027606:	85 c9                	test   ecx,ecx
c0027608:	74 15                	je     c002761f <__adddf3+0xec>
c002760a:	be 20 00 00 00       	mov    esi,0x20
c002760f:	29 ce                	sub    esi,ecx
c0027611:	89 f1                	mov    ecx,esi
c0027613:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027616:	d3 e6                	shl    esi,cl
c0027618:	31 db                	xor    ebx,ebx
c002761a:	85 f6                	test   esi,esi
c002761c:	0f 95 c3             	setne  bl
c002761f:	31 c9                	xor    ecx,ecx
c0027621:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027625:	0f 95 c1             	setne  cl
c0027628:	09 cf                	or     edi,ecx
c002762a:	09 fb                	or     ebx,edi
c002762c:	01 da                	add    edx,ebx
c002762e:	83 d0 00             	adc    eax,0x0
c0027631:	eb 3a                	jmp    c002766d <__adddf3+0x13a>
c0027633:	bf 20 00 00 00       	mov    edi,0x20
c0027638:	29 df                	sub    edi,ebx
c002763a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002763d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027640:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027643:	d3 e6                	shl    esi,cl
c0027645:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027648:	88 d9                	mov    cl,bl
c002764a:	d3 ef                	shr    edi,cl
c002764c:	09 fe                	or     esi,edi
c002764e:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027651:	88 d9                	mov    cl,bl
c0027653:	d3 ef                	shr    edi,cl
c0027655:	89 fb                	mov    ebx,edi
c0027657:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002765a:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002765d:	d3 e7                	shl    edi,cl
c002765f:	85 ff                	test   edi,edi
c0027661:	0f 95 c1             	setne  cl
c0027664:	0f b6 c9             	movzx  ecx,cl
c0027667:	09 ce                	or     esi,ecx
c0027669:	01 f2                	add    edx,esi
c002766b:	11 d8                	adc    eax,ebx
c002766d:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027670:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027673:	e9 52 01 00 00       	jmp    c00277ca <__adddf3+0x297>
c0027678:	0f 84 d5 00 00 00    	je     c0027753 <__adddf3+0x220>
c002767e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027681:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0027684:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027687:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002768a:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027691:	75 20                	jne    c00276b3 <__adddf3+0x180>
c0027693:	89 d6                	mov    esi,edx
c0027695:	09 c6                	or     esi,eax
c0027697:	0f 84 db 04 00 00    	je     c0027b78 <__adddf3+0x645>
c002769d:	4b                   	dec    ebx
c002769e:	75 29                	jne    c00276c9 <__adddf3+0x196>
c00276a0:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00276a3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00276a6:	01 d1                	add    ecx,edx
c00276a8:	11 c6                	adc    esi,eax
c00276aa:	89 f0                	mov    eax,esi
c00276ac:	89 ca                	mov    edx,ecx
c00276ae:	e9 17 01 00 00       	jmp    c00277ca <__adddf3+0x297>
c00276b3:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00276b6:	f7 d6                	not    esi
c00276b8:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00276be:	0f 84 b4 04 00 00    	je     c0027b78 <__adddf3+0x645>
c00276c4:	0d 00 00 00 80       	or     eax,0x80000000
c00276c9:	83 fb 1f             	cmp    ebx,0x1f
c00276cc:	7e 48                	jle    c0027716 <__adddf3+0x1e3>
c00276ce:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00276d1:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00276d4:	83 fb 3f             	cmp    ebx,0x3f
c00276d7:	0f 8f 9b 04 00 00    	jg     c0027b78 <__adddf3+0x645>
c00276dd:	83 e3 1f             	and    ebx,0x1f
c00276e0:	89 d9                	mov    ecx,ebx
c00276e2:	89 c7                	mov    edi,eax
c00276e4:	d3 ef                	shr    edi,cl
c00276e6:	31 db                	xor    ebx,ebx
c00276e8:	85 c9                	test   ecx,ecx
c00276ea:	74 12                	je     c00276fe <__adddf3+0x1cb>
c00276ec:	be 20 00 00 00       	mov    esi,0x20
c00276f1:	29 ce                	sub    esi,ecx
c00276f3:	89 f1                	mov    ecx,esi
c00276f5:	d3 e0                	shl    eax,cl
c00276f7:	31 db                	xor    ebx,ebx
c00276f9:	85 c0                	test   eax,eax
c00276fb:	0f 95 c3             	setne  bl
c00276fe:	31 c0                	xor    eax,eax
c0027700:	85 d2                	test   edx,edx
c0027702:	0f 95 c0             	setne  al
c0027705:	09 c7                	or     edi,eax
c0027707:	09 fb                	or     ebx,edi
c0027709:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002770c:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002770f:	01 da                	add    edx,ebx
c0027711:	83 d6 00             	adc    esi,0x0
c0027714:	eb 39                	jmp    c002774f <__adddf3+0x21c>
c0027716:	be 20 00 00 00       	mov    esi,0x20
c002771b:	29 de                	sub    esi,ebx
c002771d:	89 c7                	mov    edi,eax
c002771f:	89 f1                	mov    ecx,esi
c0027721:	d3 e7                	shl    edi,cl
c0027723:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027726:	89 d7                	mov    edi,edx
c0027728:	88 d9                	mov    cl,bl
c002772a:	d3 ef                	shr    edi,cl
c002772c:	89 f9                	mov    ecx,edi
c002772e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027731:	09 cf                	or     edi,ecx
c0027733:	88 d9                	mov    cl,bl
c0027735:	d3 e8                	shr    eax,cl
c0027737:	89 f1                	mov    ecx,esi
c0027739:	d3 e2                	shl    edx,cl
c002773b:	85 d2                	test   edx,edx
c002773d:	0f 95 c2             	setne  dl
c0027740:	0f b6 d2             	movzx  edx,dl
c0027743:	09 d7                	or     edi,edx
c0027745:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027748:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002774b:	01 fa                	add    edx,edi
c002774d:	11 c6                	adc    esi,eax
c002774f:	89 f0                	mov    eax,esi
c0027751:	eb 77                	jmp    c00277ca <__adddf3+0x297>
c0027753:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027756:	46                   	inc    esi
c0027757:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c002775a:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027760:	75 41                	jne    c00277a3 <__adddf3+0x270>
c0027762:	89 d3                	mov    ebx,edx
c0027764:	09 c3                	or     ebx,eax
c0027766:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c002776d:	75 27                	jne    c0027796 <__adddf3+0x263>
c002776f:	85 db                	test   ebx,ebx
c0027771:	0f 84 fb 03 00 00    	je     c0027b72 <__adddf3+0x63f>
c0027777:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002777a:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c002777d:	0f 84 f5 03 00 00    	je     c0027b78 <__adddf3+0x645>
c0027783:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027786:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027789:	85 c0                	test   eax,eax
c002778b:	0f 89 91 03 00 00    	jns    c0027b22 <__adddf3+0x5ef>
c0027791:	e9 85 03 00 00       	jmp    c0027b1b <__adddf3+0x5e8>
c0027796:	85 db                	test   ebx,ebx
c0027798:	0f 85 da 03 00 00    	jne    c0027b78 <__adddf3+0x645>
c002779e:	e9 cf 03 00 00       	jmp    c0027b72 <__adddf3+0x63f>
c00277a3:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00277a6:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00277a9:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00277ac:	f7 d1                	not    ecx
c00277ae:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00277b4:	0f 84 70 03 00 00    	je     c0027b2a <__adddf3+0x5f7>
c00277ba:	d1 ea                	shr    edx,1
c00277bc:	89 c1                	mov    ecx,eax
c00277be:	c1 e1 1f             	shl    ecx,0x1f
c00277c1:	09 ca                	or     edx,ecx
c00277c3:	d1 e8                	shr    eax,1
c00277c5:	e9 6f 03 00 00       	jmp    c0027b39 <__adddf3+0x606>
c00277ca:	85 c0                	test   eax,eax
c00277cc:	0f 89 67 03 00 00    	jns    c0027b39 <__adddf3+0x606>
c00277d2:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c00277d5:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00277d8:	f7 d1                	not    ecx
c00277da:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00277e0:	0f 84 44 03 00 00    	je     c0027b2a <__adddf3+0x5f7>
c00277e6:	89 d1                	mov    ecx,edx
c00277e8:	d1 e9                	shr    ecx,1
c00277ea:	83 e2 01             	and    edx,0x1
c00277ed:	09 ca                	or     edx,ecx
c00277ef:	89 c1                	mov    ecx,eax
c00277f1:	c1 e1 1f             	shl    ecx,0x1f
c00277f4:	09 ca                	or     edx,ecx
c00277f6:	d1 e8                	shr    eax,1
c00277f8:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00277fd:	e9 37 03 00 00       	jmp    c0027b39 <__adddf3+0x606>
c0027802:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027805:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002780b:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c002780e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027811:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027817:	29 de                	sub    esi,ebx
c0027819:	85 f6                	test   esi,esi
c002781b:	0f 8e bd 00 00 00    	jle    c00278de <__adddf3+0x3ab>
c0027821:	85 db                	test   ebx,ebx
c0027823:	75 17                	jne    c002783c <__adddf3+0x309>
c0027825:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027828:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002782b:	0f 84 47 03 00 00    	je     c0027b78 <__adddf3+0x645>
c0027831:	4e                   	dec    esi
c0027832:	75 20                	jne    c0027854 <__adddf3+0x321>
c0027834:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027837:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002783a:	eb 5b                	jmp    c0027897 <__adddf3+0x364>
c002783c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002783f:	f7 d3                	not    ebx
c0027841:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027847:	0f 84 2b 03 00 00    	je     c0027b78 <__adddf3+0x645>
c002784d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027854:	83 fe 1f             	cmp    esi,0x1f
c0027857:	7e 49                	jle    c00278a2 <__adddf3+0x36f>
c0027859:	83 fe 3f             	cmp    esi,0x3f
c002785c:	0f 8f 16 03 00 00    	jg     c0027b78 <__adddf3+0x645>
c0027862:	83 e6 1f             	and    esi,0x1f
c0027865:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027868:	89 f1                	mov    ecx,esi
c002786a:	d3 ef                	shr    edi,cl
c002786c:	31 db                	xor    ebx,ebx
c002786e:	85 f6                	test   esi,esi
c0027870:	74 13                	je     c0027885 <__adddf3+0x352>
c0027872:	b9 20 00 00 00       	mov    ecx,0x20
c0027877:	29 f1                	sub    ecx,esi
c0027879:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002787c:	d3 e6                	shl    esi,cl
c002787e:	31 db                	xor    ebx,ebx
c0027880:	85 f6                	test   esi,esi
c0027882:	0f 95 c3             	setne  bl
c0027885:	31 c9                	xor    ecx,ecx
c0027887:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002788b:	0f 95 c1             	setne  cl
c002788e:	09 cf                	or     edi,ecx
c0027890:	09 fb                	or     ebx,edi
c0027892:	29 da                	sub    edx,ebx
c0027894:	83 d8 00             	sbb    eax,0x0
c0027897:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002789a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002789d:	e9 aa 01 00 00       	jmp    c0027a4c <__adddf3+0x519>
c00278a2:	bf 20 00 00 00       	mov    edi,0x20
c00278a7:	29 f7                	sub    edi,esi
c00278a9:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00278ac:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00278af:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00278b2:	d3 e3                	shl    ebx,cl
c00278b4:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00278b7:	89 f1                	mov    ecx,esi
c00278b9:	d3 ef                	shr    edi,cl
c00278bb:	09 fb                	or     ebx,edi
c00278bd:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00278c0:	89 f1                	mov    ecx,esi
c00278c2:	d3 ef                	shr    edi,cl
c00278c4:	89 fe                	mov    esi,edi
c00278c6:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00278c9:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00278cc:	d3 e7                	shl    edi,cl
c00278ce:	85 ff                	test   edi,edi
c00278d0:	0f 95 c1             	setne  cl
c00278d3:	0f b6 c9             	movzx  ecx,cl
c00278d6:	09 cb                	or     ebx,ecx
c00278d8:	29 da                	sub    edx,ebx
c00278da:	19 f0                	sbb    eax,esi
c00278dc:	eb b9                	jmp    c0027897 <__adddf3+0x364>
c00278de:	0f 84 cd 00 00 00    	je     c00279b1 <__adddf3+0x47e>
c00278e4:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c00278e7:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00278ea:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00278ed:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00278f1:	75 1b                	jne    c002790e <__adddf3+0x3db>
c00278f3:	89 d6                	mov    esi,edx
c00278f5:	09 c6                	or     esi,eax
c00278f7:	0f 84 7b 02 00 00    	je     c0027b78 <__adddf3+0x645>
c00278fd:	4b                   	dec    ebx
c00278fe:	75 24                	jne    c0027924 <__adddf3+0x3f1>
c0027900:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027903:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027906:	29 d1                	sub    ecx,edx
c0027908:	19 c6                	sbb    esi,eax
c002790a:	89 ca                	mov    edx,ecx
c002790c:	eb 61                	jmp    c002796f <__adddf3+0x43c>
c002790e:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027911:	f7 d6                	not    esi
c0027913:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027919:	0f 84 59 02 00 00    	je     c0027b78 <__adddf3+0x645>
c002791f:	0d 00 00 00 80       	or     eax,0x80000000
c0027924:	83 fb 1f             	cmp    ebx,0x1f
c0027927:	7e 4d                	jle    c0027976 <__adddf3+0x443>
c0027929:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002792c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002792f:	83 fb 3f             	cmp    ebx,0x3f
c0027932:	0f 8f 40 02 00 00    	jg     c0027b78 <__adddf3+0x645>
c0027938:	83 e3 1f             	and    ebx,0x1f
c002793b:	89 d9                	mov    ecx,ebx
c002793d:	89 c7                	mov    edi,eax
c002793f:	d3 ef                	shr    edi,cl
c0027941:	31 db                	xor    ebx,ebx
c0027943:	85 c9                	test   ecx,ecx
c0027945:	74 12                	je     c0027959 <__adddf3+0x426>
c0027947:	be 20 00 00 00       	mov    esi,0x20
c002794c:	29 ce                	sub    esi,ecx
c002794e:	89 f1                	mov    ecx,esi
c0027950:	d3 e0                	shl    eax,cl
c0027952:	31 db                	xor    ebx,ebx
c0027954:	85 c0                	test   eax,eax
c0027956:	0f 95 c3             	setne  bl
c0027959:	31 c0                	xor    eax,eax
c002795b:	85 d2                	test   edx,edx
c002795d:	0f 95 c0             	setne  al
c0027960:	09 c7                	or     edi,eax
c0027962:	09 fb                	or     ebx,edi
c0027964:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027967:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002796a:	29 da                	sub    edx,ebx
c002796c:	83 de 00             	sbb    esi,0x0
c002796f:	89 f0                	mov    eax,esi
c0027971:	e9 d6 00 00 00       	jmp    c0027a4c <__adddf3+0x519>
c0027976:	be 20 00 00 00       	mov    esi,0x20
c002797b:	29 de                	sub    esi,ebx
c002797d:	89 c7                	mov    edi,eax
c002797f:	89 f1                	mov    ecx,esi
c0027981:	d3 e7                	shl    edi,cl
c0027983:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027986:	89 d7                	mov    edi,edx
c0027988:	88 d9                	mov    cl,bl
c002798a:	d3 ef                	shr    edi,cl
c002798c:	89 f9                	mov    ecx,edi
c002798e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027991:	09 cf                	or     edi,ecx
c0027993:	88 d9                	mov    cl,bl
c0027995:	d3 e8                	shr    eax,cl
c0027997:	89 f1                	mov    ecx,esi
c0027999:	d3 e2                	shl    edx,cl
c002799b:	85 d2                	test   edx,edx
c002799d:	0f 95 c2             	setne  dl
c00279a0:	0f b6 d2             	movzx  edx,dl
c00279a3:	09 d7                	or     edi,edx
c00279a5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00279a8:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00279ab:	29 fa                	sub    edx,edi
c00279ad:	19 c6                	sbb    esi,eax
c00279af:	eb be                	jmp    c002796f <__adddf3+0x43c>
c00279b1:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00279b4:	8d 5e 01             	lea    ebx,[esi+0x1]
c00279b7:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c00279bd:	75 6a                	jne    c0027a29 <__adddf3+0x4f6>
c00279bf:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00279c3:	75 58                	jne    c0027a1d <__adddf3+0x4ea>
c00279c5:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00279c8:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00279cb:	89 d6                	mov    esi,edx
c00279cd:	09 c6                	or     esi,eax
c00279cf:	75 17                	jne    c00279e8 <__adddf3+0x4b5>
c00279d1:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00279d4:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00279d7:	85 db                	test   ebx,ebx
c00279d9:	0f 85 99 01 00 00    	jne    c0027b78 <__adddf3+0x645>
c00279df:	31 ff                	xor    edi,edi
c00279e1:	31 c9                	xor    ecx,ecx
c00279e3:	e9 90 01 00 00       	jmp    c0027b78 <__adddf3+0x645>
c00279e8:	85 db                	test   ebx,ebx
c00279ea:	0f 84 88 01 00 00    	je     c0027b78 <__adddf3+0x645>
c00279f0:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00279f3:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00279f6:	85 c0                	test   eax,eax
c00279f8:	79 10                	jns    c0027a0a <__adddf3+0x4d7>
c00279fa:	31 c9                	xor    ecx,ecx
c00279fc:	f7 da                	neg    edx
c00279fe:	0f 95 c1             	setne  cl
c0027a01:	01 c8                	add    eax,ecx
c0027a03:	f7 d8                	neg    eax
c0027a05:	e9 2f 01 00 00       	jmp    c0027b39 <__adddf3+0x606>
c0027a0a:	31 ff                	xor    edi,edi
c0027a0c:	31 c9                	xor    ecx,ecx
c0027a0e:	89 c3                	mov    ebx,eax
c0027a10:	09 d3                	or     ebx,edx
c0027a12:	0f 84 60 01 00 00    	je     c0027b78 <__adddf3+0x645>
c0027a18:	e9 05 01 00 00       	jmp    c0027b22 <__adddf3+0x5ef>
c0027a1d:	31 ff                	xor    edi,edi
c0027a1f:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027a24:	e9 4f 01 00 00       	jmp    c0027b78 <__adddf3+0x645>
c0027a29:	89 c1                	mov    ecx,eax
c0027a2b:	89 d0                	mov    eax,edx
c0027a2d:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0027a30:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0027a33:	89 ca                	mov    edx,ecx
c0027a35:	85 c9                	test   ecx,ecx
c0027a37:	79 2c                	jns    c0027a65 <__adddf3+0x532>
c0027a39:	31 c9                	xor    ecx,ecx
c0027a3b:	f7 d8                	neg    eax
c0027a3d:	0f 95 c1             	setne  cl
c0027a40:	01 ca                	add    edx,ecx
c0027a42:	f7 da                	neg    edx
c0027a44:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027a47:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027a4a:	eb 19                	jmp    c0027a65 <__adddf3+0x532>
c0027a4c:	85 c0                	test   eax,eax
c0027a4e:	0f 89 e5 00 00 00    	jns    c0027b39 <__adddf3+0x606>
c0027a54:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027a59:	89 c1                	mov    ecx,eax
c0027a5b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027a5e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027a61:	89 d0                	mov    eax,edx
c0027a63:	89 ca                	mov    edx,ecx
c0027a65:	85 d2                	test   edx,edx
c0027a67:	74 59                	je     c0027ac2 <__adddf3+0x58f>
c0027a69:	0f bd da             	bsr    ebx,edx
c0027a6c:	83 f3 1f             	xor    ebx,0x1f
c0027a6f:	88 d9                	mov    cl,bl
c0027a71:	d3 e2                	shl    edx,cl
c0027a73:	bf 20 00 00 00       	mov    edi,0x20
c0027a78:	89 f9                	mov    ecx,edi
c0027a7a:	29 d9                	sub    ecx,ebx
c0027a7c:	89 c6                	mov    esi,eax
c0027a7e:	d3 ee                	shr    esi,cl
c0027a80:	09 d6                	or     esi,edx
c0027a82:	88 d9                	mov    cl,bl
c0027a84:	d3 e0                	shl    eax,cl
c0027a86:	89 c2                	mov    edx,eax
c0027a88:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027a8b:	25 ff 07 00 00       	and    eax,0x7ff
c0027a90:	39 d8                	cmp    eax,ebx
c0027a92:	7f 22                	jg     c0027ab6 <__adddf3+0x583>
c0027a94:	29 c3                	sub    ebx,eax
c0027a96:	43                   	inc    ebx
c0027a97:	88 d9                	mov    cl,bl
c0027a99:	d3 ea                	shr    edx,cl
c0027a9b:	29 df                	sub    edi,ebx
c0027a9d:	89 f9                	mov    ecx,edi
c0027a9f:	89 f0                	mov    eax,esi
c0027aa1:	d3 e0                	shl    eax,cl
c0027aa3:	09 c2                	or     edx,eax
c0027aa5:	89 f0                	mov    eax,esi
c0027aa7:	88 d9                	mov    cl,bl
c0027aa9:	d3 e8                	shr    eax,cl
c0027aab:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027aae:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0027ab4:	eb 6f                	jmp    c0027b25 <__adddf3+0x5f2>
c0027ab6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027ab9:	29 d8                	sub    eax,ebx
c0027abb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027abe:	89 f0                	mov    eax,esi
c0027ac0:	eb 59                	jmp    c0027b1b <__adddf3+0x5e8>
c0027ac2:	85 c0                	test   eax,eax
c0027ac4:	74 6a                	je     c0027b30 <__adddf3+0x5fd>
c0027ac6:	0f bd c8             	bsr    ecx,eax
c0027ac9:	83 f1 1f             	xor    ecx,0x1f
c0027acc:	d3 e0                	shl    eax,cl
c0027ace:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027ad1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027ad7:	83 c1 20             	add    ecx,0x20
c0027ada:	39 cb                	cmp    ebx,ecx
c0027adc:	7f 35                	jg     c0027b13 <__adddf3+0x5e0>
c0027ade:	29 d9                	sub    ecx,ebx
c0027ae0:	8d 71 01             	lea    esi,[ecx+0x1]
c0027ae3:	83 fe 1f             	cmp    esi,0x1f
c0027ae6:	7e 09                	jle    c0027af1 <__adddf3+0x5be>
c0027ae8:	83 e9 1f             	sub    ecx,0x1f
c0027aeb:	d3 e8                	shr    eax,cl
c0027aed:	89 c3                	mov    ebx,eax
c0027aef:	eb 11                	jmp    c0027b02 <__adddf3+0x5cf>
c0027af1:	b9 20 00 00 00       	mov    ecx,0x20
c0027af6:	29 f1                	sub    ecx,esi
c0027af8:	89 c3                	mov    ebx,eax
c0027afa:	d3 e3                	shl    ebx,cl
c0027afc:	89 f1                	mov    ecx,esi
c0027afe:	d3 e8                	shr    eax,cl
c0027b00:	89 c2                	mov    edx,eax
c0027b02:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027b05:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027b0a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027b0d:	89 d0                	mov    eax,edx
c0027b0f:	89 da                	mov    edx,ebx
c0027b11:	eb 26                	jmp    c0027b39 <__adddf3+0x606>
c0027b13:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027b16:	29 cf                	sub    edi,ecx
c0027b18:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027b1b:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027b20:	eb 17                	jmp    c0027b39 <__adddf3+0x606>
c0027b22:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027b25:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027b28:	eb 0f                	jmp    c0027b39 <__adddf3+0x606>
c0027b2a:	31 d2                	xor    edx,edx
c0027b2c:	31 c0                	xor    eax,eax
c0027b2e:	eb 09                	jmp    c0027b39 <__adddf3+0x606>
c0027b30:	89 c2                	mov    edx,eax
c0027b32:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0027b39:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027b3c:	c1 e1 14             	shl    ecx,0x14
c0027b3f:	89 c3                	mov    ebx,eax
c0027b41:	c1 eb 0b             	shr    ebx,0xb
c0027b44:	09 d9                	or     ecx,ebx
c0027b46:	89 d3                	mov    ebx,edx
c0027b48:	c1 eb 0b             	shr    ebx,0xb
c0027b4b:	c1 e0 15             	shl    eax,0x15
c0027b4e:	09 d8                	or     eax,ebx
c0027b50:	89 c7                	mov    edi,eax
c0027b52:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0027b58:	0f 95 c0             	setne  al
c0027b5b:	89 c6                	mov    esi,eax
c0027b5d:	09 f3                	or     ebx,esi
c0027b5f:	83 e3 01             	and    ebx,0x1
c0027b62:	c1 ea 0a             	shr    edx,0xa
c0027b65:	21 da                	and    edx,ebx
c0027b67:	89 f8                	mov    eax,edi
c0027b69:	01 d0                	add    eax,edx
c0027b6b:	83 d1 00             	adc    ecx,0x0
c0027b6e:	89 c7                	mov    edi,eax
c0027b70:	eb 06                	jmp    c0027b78 <__adddf3+0x645>
c0027b72:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027b75:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027b78:	89 f8                	mov    eax,edi
c0027b7a:	89 ca                	mov    edx,ecx
c0027b7c:	83 c4 24             	add    esp,0x24
c0027b7f:	5b                   	pop    ebx
c0027b80:	5e                   	pop    esi
c0027b81:	5f                   	pop    edi
c0027b82:	5d                   	pop    ebp
c0027b83:	c3                   	ret    

c0027b84 <__subdf3>:
c0027b84:	55                   	push   ebp
c0027b85:	89 e5                	mov    ebp,esp
c0027b87:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027b8a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027b8d:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027b93:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0027b96:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027b99:	5d                   	pop    ebp
c0027b9a:	e9 94 f9 ff ff       	jmp    c0027533 <__adddf3>

c0027b9f <__negdf2>:
c0027b9f:	55                   	push   ebp
c0027ba0:	89 e5                	mov    ebp,esp
c0027ba2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027ba5:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027ba8:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027bae:	5d                   	pop    ebp
c0027baf:	c3                   	ret    

c0027bb0 <__muldf3>:
c0027bb0:	55                   	push   ebp
c0027bb1:	89 e5                	mov    ebp,esp
c0027bb3:	57                   	push   edi
c0027bb4:	56                   	push   esi
c0027bb5:	53                   	push   ebx
c0027bb6:	83 ec 24             	sub    esp,0x24
c0027bb9:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027bbc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027bbf:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027bc2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027bc5:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027bc8:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0027bcb:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027bce:	89 c8                	mov    eax,ecx
c0027bd0:	c1 f8 14             	sar    eax,0x14
c0027bd3:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027bd6:	89 f8                	mov    eax,edi
c0027bd8:	89 fb                	mov    ebx,edi
c0027bda:	c1 e3 0b             	shl    ebx,0xb
c0027bdd:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027be0:	c1 e1 0b             	shl    ecx,0xb
c0027be3:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027be9:	c1 e8 15             	shr    eax,0x15
c0027bec:	09 c1                	or     ecx,eax
c0027bee:	89 d6                	mov    esi,edx
c0027bf0:	89 d0                	mov    eax,edx
c0027bf2:	c1 f8 14             	sar    eax,0x14
c0027bf5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027bf8:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0027bfb:	89 c3                	mov    ebx,eax
c0027bfd:	c1 e3 0b             	shl    ebx,0xb
c0027c00:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027c03:	c1 e6 0b             	shl    esi,0xb
c0027c06:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027c0c:	c1 e8 15             	shr    eax,0x15
c0027c0f:	09 c6                	or     esi,eax
c0027c11:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027c14:	25 ff 07 00 00       	and    eax,0x7ff
c0027c19:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027c1c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027c1f:	25 ff 07 00 00       	and    eax,0x7ff
c0027c24:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027c27:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027c2a:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027c2d:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0027c34:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027c37:	40                   	inc    eax
c0027c38:	a9 fe 07 00 00       	test   eax,0x7fe
c0027c3d:	0f 85 8d 00 00 00    	jne    c0027cd0 <__muldf3+0x120>
c0027c43:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027c46:	09 c8                	or     eax,ecx
c0027c48:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0027c4c:	74 44                	je     c0027c92 <__muldf3+0xe2>
c0027c4e:	85 c0                	test   eax,eax
c0027c50:	0f 85 31 02 00 00    	jne    c0027e87 <__muldf3+0x2d7>
c0027c56:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027c59:	40                   	inc    eax
c0027c5a:	a9 fe 07 00 00       	test   eax,0x7fe
c0027c5f:	75 13                	jne    c0027c74 <__muldf3+0xc4>
c0027c61:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027c64:	09 f1                	or     ecx,esi
c0027c66:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027c6a:	74 22                	je     c0027c8e <__muldf3+0xde>
c0027c6c:	85 c9                	test   ecx,ecx
c0027c6e:	0f 85 0d 02 00 00    	jne    c0027e81 <__muldf3+0x2d1>
c0027c74:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0027c78:	0f 89 09 02 00 00    	jns    c0027e87 <__muldf3+0x2d7>
c0027c7e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027c81:	05 00 00 00 80       	add    eax,0x80000000
c0027c86:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027c89:	e9 f9 01 00 00       	jmp    c0027e87 <__muldf3+0x2d7>
c0027c8e:	85 c9                	test   ecx,ecx
c0027c90:	eb 2e                	jmp    c0027cc0 <__muldf3+0x110>
c0027c92:	85 c0                	test   eax,eax
c0027c94:	74 20                	je     c0027cb6 <__muldf3+0x106>
c0027c96:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027c99:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027c9c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027c9f:	c1 ef 1f             	shr    edi,0x1f
c0027ca2:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0027ca5:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027ca8:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027cab:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027cae:	09 f9                	or     ecx,edi
c0027cb0:	78 1e                	js     c0027cd0 <__muldf3+0x120>
c0027cb2:	89 c3                	mov    ebx,eax
c0027cb4:	eb e0                	jmp    c0027c96 <__muldf3+0xe6>
c0027cb6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027cb9:	f7 d0                	not    eax
c0027cbb:	a9 ff 07 00 00       	test   eax,0x7ff
c0027cc0:	75 b2                	jne    c0027c74 <__muldf3+0xc4>
c0027cc2:	31 ff                	xor    edi,edi
c0027cc4:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0027ccb:	e9 b7 01 00 00       	jmp    c0027e87 <__muldf3+0x2d7>
c0027cd0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027cd3:	40                   	inc    eax
c0027cd4:	a9 fe 07 00 00       	test   eax,0x7fe
c0027cd9:	75 57                	jne    c0027d32 <__muldf3+0x182>
c0027cdb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0027cde:	09 f0                	or     eax,esi
c0027ce0:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027ce4:	74 23                	je     c0027d09 <__muldf3+0x159>
c0027ce6:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027cea:	0f 89 91 01 00 00    	jns    c0027e81 <__muldf3+0x2d1>
c0027cf0:	85 c0                	test   eax,eax
c0027cf2:	0f 85 89 01 00 00    	jne    c0027e81 <__muldf3+0x2d1>
c0027cf8:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027cfb:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027d01:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027d04:	e9 7e 01 00 00       	jmp    c0027e87 <__muldf3+0x2d7>
c0027d09:	85 c0                	test   eax,eax
c0027d0b:	75 0c                	jne    c0027d19 <__muldf3+0x169>
c0027d0d:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027d11:	0f 89 6a 01 00 00    	jns    c0027e81 <__muldf3+0x2d1>
c0027d17:	eb df                	jmp    c0027cf8 <__muldf3+0x148>
c0027d19:	01 f6                	add    esi,esi
c0027d1b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027d1e:	c1 ea 1f             	shr    edx,0x1f
c0027d21:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027d24:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0027d27:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027d2a:	09 d6                	or     esi,edx
c0027d2c:	78 04                	js     c0027d32 <__muldf3+0x182>
c0027d2e:	89 c3                	mov    ebx,eax
c0027d30:	eb e7                	jmp    c0027d19 <__muldf3+0x169>
c0027d32:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0027d38:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027d3e:	89 c8                	mov    eax,ecx
c0027d40:	f7 e6                	mul    esi
c0027d42:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0027d45:	89 c7                	mov    edi,eax
c0027d47:	89 c8                	mov    eax,ecx
c0027d49:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027d4c:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0027d4f:	89 c1                	mov    ecx,eax
c0027d51:	89 f0                	mov    eax,esi
c0027d53:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0027d56:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0027d59:	89 c6                	mov    esi,eax
c0027d5b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027d5e:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027d61:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027d64:	31 c0                	xor    eax,eax
c0027d66:	01 f1                	add    ecx,esi
c0027d68:	0f 92 c0             	setb   al
c0027d6b:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0027d6e:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027d71:	83 d6 00             	adc    esi,0x0
c0027d74:	01 c7                	add    edi,eax
c0027d76:	83 d6 00             	adc    esi,0x0
c0027d79:	01 ca                	add    edx,ecx
c0027d7b:	0f 92 c1             	setb   cl
c0027d7e:	0f b6 c9             	movzx  ecx,cl
c0027d81:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0027d84:	83 d6 00             	adc    esi,0x0
c0027d87:	01 cf                	add    edi,ecx
c0027d89:	83 d6 00             	adc    esi,0x0
c0027d8c:	31 c9                	xor    ecx,ecx
c0027d8e:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027d91:	0f 95 c1             	setne  cl
c0027d94:	09 cf                	or     edi,ecx
c0027d96:	85 f6                	test   esi,esi
c0027d98:	78 0c                	js     c0027da6 <__muldf3+0x1f6>
c0027d9a:	01 f6                	add    esi,esi
c0027d9c:	89 f8                	mov    eax,edi
c0027d9e:	c1 e8 1f             	shr    eax,0x1f
c0027da1:	09 c6                	or     esi,eax
c0027da3:	01 ff                	add    edi,edi
c0027da5:	4b                   	dec    ebx
c0027da6:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0027dac:	0f 8f 85 00 00 00    	jg     c0027e37 <__muldf3+0x287>
c0027db2:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027db8:	85 db                	test   ebx,ebx
c0027dba:	0f 8f 84 00 00 00    	jg     c0027e44 <__muldf3+0x294>
c0027dc0:	83 fb cc             	cmp    ebx,0xffffffcc
c0027dc3:	7c 79                	jl     c0027e3e <__muldf3+0x28e>
c0027dc5:	ba 01 00 00 00       	mov    edx,0x1
c0027dca:	29 da                	sub    edx,ebx
c0027dcc:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027dd2:	83 fa 1f             	cmp    edx,0x1f
c0027dd5:	7e 30                	jle    c0027e07 <__muldf3+0x257>
c0027dd7:	83 fa 20             	cmp    edx,0x20
c0027dda:	75 0b                	jne    c0027de7 <__muldf3+0x237>
c0027ddc:	31 c0                	xor    eax,eax
c0027dde:	85 ff                	test   edi,edi
c0027de0:	0f 95 c0             	setne  al
c0027de3:	89 c7                	mov    edi,eax
c0027de5:	eb 1a                	jmp    c0027e01 <__muldf3+0x251>
c0027de7:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0027dea:	89 f0                	mov    eax,esi
c0027dec:	d3 e0                	shl    eax,cl
c0027dee:	09 f8                	or     eax,edi
c0027df0:	0f 95 c0             	setne  al
c0027df3:	0f b6 c0             	movzx  eax,al
c0027df6:	89 c7                	mov    edi,eax
c0027df8:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027dfd:	29 d9                	sub    ecx,ebx
c0027dff:	d3 ee                	shr    esi,cl
c0027e01:	09 f7                	or     edi,esi
c0027e03:	31 db                	xor    ebx,ebx
c0027e05:	eb 3b                	jmp    c0027e42 <__muldf3+0x292>
c0027e07:	83 c3 1f             	add    ebx,0x1f
c0027e0a:	89 f0                	mov    eax,esi
c0027e0c:	88 d9                	mov    cl,bl
c0027e0e:	d3 e0                	shl    eax,cl
c0027e10:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027e13:	89 f8                	mov    eax,edi
c0027e15:	88 d1                	mov    cl,dl
c0027e17:	d3 e8                	shr    eax,cl
c0027e19:	89 c1                	mov    ecx,eax
c0027e1b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027e1e:	09 c8                	or     eax,ecx
c0027e20:	88 d9                	mov    cl,bl
c0027e22:	d3 e7                	shl    edi,cl
c0027e24:	31 db                	xor    ebx,ebx
c0027e26:	85 ff                	test   edi,edi
c0027e28:	0f 95 c3             	setne  bl
c0027e2b:	89 df                	mov    edi,ebx
c0027e2d:	09 c7                	or     edi,eax
c0027e2f:	88 d1                	mov    cl,dl
c0027e31:	d3 ee                	shr    esi,cl
c0027e33:	31 db                	xor    ebx,ebx
c0027e35:	eb 0d                	jmp    c0027e44 <__muldf3+0x294>
c0027e37:	bb ff 07 00 00       	mov    ebx,0x7ff
c0027e3c:	eb 02                	jmp    c0027e40 <__muldf3+0x290>
c0027e3e:	31 db                	xor    ebx,ebx
c0027e40:	31 ff                	xor    edi,edi
c0027e42:	31 f6                	xor    esi,esi
c0027e44:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027e47:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0027e4a:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027e4f:	09 c3                	or     ebx,eax
c0027e51:	c1 e3 14             	shl    ebx,0x14
c0027e54:	89 f0                	mov    eax,esi
c0027e56:	c1 e8 0b             	shr    eax,0xb
c0027e59:	09 c3                	or     ebx,eax
c0027e5b:	89 f8                	mov    eax,edi
c0027e5d:	c1 e8 0b             	shr    eax,0xb
c0027e60:	c1 e6 15             	shl    esi,0x15
c0027e63:	09 c6                	or     esi,eax
c0027e65:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0027e6b:	0f 95 c1             	setne  cl
c0027e6e:	09 c8                	or     eax,ecx
c0027e70:	83 e0 01             	and    eax,0x1
c0027e73:	c1 ef 0a             	shr    edi,0xa
c0027e76:	21 c7                	and    edi,eax
c0027e78:	01 f7                	add    edi,esi
c0027e7a:	83 d3 00             	adc    ebx,0x0
c0027e7d:	89 da                	mov    edx,ebx
c0027e7f:	eb 03                	jmp    c0027e84 <__muldf3+0x2d4>
c0027e81:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027e84:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027e87:	89 f8                	mov    eax,edi
c0027e89:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027e8c:	83 c4 24             	add    esp,0x24
c0027e8f:	5b                   	pop    ebx
c0027e90:	5e                   	pop    esi
c0027e91:	5f                   	pop    edi
c0027e92:	5d                   	pop    ebp
c0027e93:	c3                   	ret    

c0027e94 <__divdf3>:
c0027e94:	55                   	push   ebp
c0027e95:	89 e5                	mov    ebp,esp
c0027e97:	57                   	push   edi
c0027e98:	56                   	push   esi
c0027e99:	53                   	push   ebx
c0027e9a:	83 ec 2c             	sub    esp,0x2c
c0027e9d:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027ea0:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027ea3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027ea6:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027ea9:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027eac:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027eaf:	89 ce                	mov    esi,ecx
c0027eb1:	89 c8                	mov    eax,ecx
c0027eb3:	c1 f8 14             	sar    eax,0x14
c0027eb6:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027eb9:	89 f8                	mov    eax,edi
c0027ebb:	89 fb                	mov    ebx,edi
c0027ebd:	c1 e3 0b             	shl    ebx,0xb
c0027ec0:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027ec3:	c1 e6 0b             	shl    esi,0xb
c0027ec6:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027ecc:	c1 e8 15             	shr    eax,0x15
c0027ecf:	09 c6                	or     esi,eax
c0027ed1:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027ed4:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027ed7:	89 c2                	mov    edx,eax
c0027ed9:	c1 fa 14             	sar    edx,0x14
c0027edc:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027edf:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027ee2:	89 de                	mov    esi,ebx
c0027ee4:	c1 e6 0b             	shl    esi,0xb
c0027ee7:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027eea:	c1 e0 0b             	shl    eax,0xb
c0027eed:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027ef2:	c1 eb 15             	shr    ebx,0x15
c0027ef5:	09 d8                	or     eax,ebx
c0027ef7:	89 c2                	mov    edx,eax
c0027ef9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027efc:	25 ff 07 00 00       	and    eax,0x7ff
c0027f01:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0027f04:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027f07:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027f0d:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0027f10:	29 d8                	sub    eax,ebx
c0027f12:	05 ff 03 00 00       	add    eax,0x3ff
c0027f17:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027f1a:	46                   	inc    esi
c0027f1b:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027f21:	0f 85 a5 00 00 00    	jne    c0027fcc <__divdf3+0x138>
c0027f27:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027f2a:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0027f2d:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0027f31:	74 2a                	je     c0027f5d <__divdf3+0xc9>
c0027f33:	85 f6                	test   esi,esi
c0027f35:	0f 85 cc 02 00 00    	jne    c0028207 <__divdf3+0x373>
c0027f3b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027f3e:	40                   	inc    eax
c0027f3f:	a9 fe 07 00 00       	test   eax,0x7fe
c0027f44:	75 26                	jne    c0027f6c <__divdf3+0xd8>
c0027f46:	85 db                	test   ebx,ebx
c0027f48:	74 22                	je     c0027f6c <__divdf3+0xd8>
c0027f4a:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027f4d:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027f50:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027f53:	09 d0                	or     eax,edx
c0027f55:	0f 85 ac 02 00 00    	jne    c0028207 <__divdf3+0x373>
c0027f5b:	eb 63                	jmp    c0027fc0 <__divdf3+0x12c>
c0027f5d:	85 f6                	test   esi,esi
c0027f5f:	75 22                	jne    c0027f83 <__divdf3+0xef>
c0027f61:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027f64:	40                   	inc    eax
c0027f65:	a9 fe 07 00 00       	test   eax,0x7fe
c0027f6a:	74 36                	je     c0027fa2 <__divdf3+0x10e>
c0027f6c:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027f70:	0f 89 91 02 00 00    	jns    c0028207 <__divdf3+0x373>
c0027f76:	89 f8                	mov    eax,edi
c0027f78:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027f7e:	e9 80 02 00 00       	jmp    c0028203 <__divdf3+0x36f>
c0027f83:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027f86:	01 f6                	add    esi,esi
c0027f88:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027f8b:	c1 ef 1f             	shr    edi,0x1f
c0027f8e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027f91:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0027f94:	8d 48 ff             	lea    ecx,[eax-0x1]
c0027f97:	09 f7                	or     edi,esi
c0027f99:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0027f9c:	78 2e                	js     c0027fcc <__divdf3+0x138>
c0027f9e:	89 c8                	mov    eax,ecx
c0027fa0:	eb e1                	jmp    c0027f83 <__divdf3+0xef>
c0027fa2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027fa5:	09 d0                	or     eax,edx
c0027fa7:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027fab:	74 0f                	je     c0027fbc <__divdf3+0x128>
c0027fad:	85 c0                	test   eax,eax
c0027faf:	74 bb                	je     c0027f6c <__divdf3+0xd8>
c0027fb1:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027fb4:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027fb7:	e9 4b 02 00 00       	jmp    c0028207 <__divdf3+0x373>
c0027fbc:	85 c0                	test   eax,eax
c0027fbe:	75 ac                	jne    c0027f6c <__divdf3+0xd8>
c0027fc0:	31 ff                	xor    edi,edi
c0027fc2:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027fc7:	e9 3b 02 00 00       	jmp    c0028207 <__divdf3+0x373>
c0027fcc:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027fcf:	8d 4f 01             	lea    ecx,[edi+0x1]
c0027fd2:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0027fd8:	75 6b                	jne    c0028045 <__divdf3+0x1b1>
c0027fda:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027fdd:	09 d6                	or     esi,edx
c0027fdf:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027fe3:	74 28                	je     c002800d <__divdf3+0x179>
c0027fe5:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027fe8:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027feb:	85 f6                	test   esi,esi
c0027fed:	0f 85 14 02 00 00    	jne    c0028207 <__divdf3+0x373>
c0027ff3:	31 ff                	xor    edi,edi
c0027ff5:	31 c9                	xor    ecx,ecx
c0027ff7:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027ffa:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027ffd:	0f 89 04 02 00 00    	jns    c0028207 <__divdf3+0x373>
c0028003:	b9 00 00 00 80       	mov    ecx,0x80000000
c0028008:	e9 fa 01 00 00       	jmp    c0028207 <__divdf3+0x373>
c002800d:	85 f6                	test   esi,esi
c002800f:	75 1b                	jne    c002802c <__divdf3+0x198>
c0028011:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028014:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0028017:	25 00 00 00 80       	and    eax,0x80000000
c002801c:	31 c9                	xor    ecx,ecx
c002801e:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0028023:	89 cf                	mov    edi,ecx
c0028025:	89 c1                	mov    ecx,eax
c0028027:	e9 db 01 00 00       	jmp    c0028207 <__divdf3+0x373>
c002802c:	01 d2                	add    edx,edx
c002802e:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028031:	c1 eb 1f             	shr    ebx,0x1f
c0028034:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028037:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c002803a:	8d 48 01             	lea    ecx,[eax+0x1]
c002803d:	09 da                	or     edx,ebx
c002803f:	78 04                	js     c0028045 <__divdf3+0x1b1>
c0028041:	89 c8                	mov    eax,ecx
c0028043:	eb e7                	jmp    c002802c <__divdf3+0x198>
c0028045:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028048:	81 ce 00 00 00 80    	or     esi,0x80000000
c002804e:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028054:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0028057:	39 d6                	cmp    esi,edx
c0028059:	77 0d                	ja     c0028068 <__divdf3+0x1d4>
c002805b:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002805e:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0028061:	72 1b                	jb     c002807e <__divdf3+0x1ea>
c0028063:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0028066:	75 16                	jne    c002807e <__divdf3+0x1ea>
c0028068:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002806b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002806e:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0028071:	83 de 00             	sbb    esi,0x0
c0028074:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0028077:	ba 01 00 00 00       	mov    edx,0x1
c002807c:	eb 02                	jmp    c0028080 <__divdf3+0x1ec>
c002807e:	31 d2                	xor    edx,edx
c0028080:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0028087:	31 ff                	xor    edi,edi
c0028089:	01 ff                	add    edi,edi
c002808b:	89 d1                	mov    ecx,edx
c002808d:	c1 e9 1f             	shr    ecx,0x1f
c0028090:	09 cf                	or     edi,ecx
c0028092:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0028095:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0028098:	89 da                	mov    edx,ebx
c002809a:	89 f3                	mov    ebx,esi
c002809c:	8d 34 36             	lea    esi,[esi+esi*1]
c002809f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00280a2:	c1 e9 1f             	shr    ecx,0x1f
c00280a5:	09 ce                	or     esi,ecx
c00280a7:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00280aa:	01 c9                	add    ecx,ecx
c00280ac:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c00280af:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c00280b2:	85 db                	test   ebx,ebx
c00280b4:	78 29                	js     c00280df <__divdf3+0x24b>
c00280b6:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c00280b9:	72 07                	jb     c00280c2 <__divdf3+0x22e>
c00280bb:	75 3c                	jne    c00280f9 <__divdf3+0x265>
c00280bd:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00280c0:	77 37                	ja     c00280f9 <__divdf3+0x265>
c00280c2:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00280c5:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c00280c8:	31 d2                	xor    edx,edx
c00280ca:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c00280cd:	0f 97 c2             	seta   dl
c00280d0:	29 d6                	sub    esi,edx
c00280d2:	89 d9                	mov    ecx,ebx
c00280d4:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c00280d7:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c00280da:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00280dd:	eb 17                	jmp    c00280f6 <__divdf3+0x262>
c00280df:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00280e2:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00280e5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00280e8:	0f 97 c1             	seta   cl
c00280eb:	0f b6 c9             	movzx  ecx,cl
c00280ee:	29 ce                	sub    esi,ecx
c00280f0:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c00280f3:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c00280f6:	83 ca 01             	or     edx,0x1
c00280f9:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c00280fc:	75 8b                	jne    c0028089 <__divdf3+0x1f5>
c00280fe:	c1 e7 09             	shl    edi,0x9
c0028101:	89 d1                	mov    ecx,edx
c0028103:	c1 e9 17             	shr    ecx,0x17
c0028106:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028109:	09 f3                	or     ebx,esi
c002810b:	0f 95 c3             	setne  bl
c002810e:	0f b6 db             	movzx  ebx,bl
c0028111:	c1 e2 09             	shl    edx,0x9
c0028114:	09 d3                	or     ebx,edx
c0028116:	89 ca                	mov    edx,ecx
c0028118:	09 fa                	or     edx,edi
c002811a:	78 0c                	js     c0028128 <__divdf3+0x294>
c002811c:	01 d2                	add    edx,edx
c002811e:	89 d9                	mov    ecx,ebx
c0028120:	c1 e9 1f             	shr    ecx,0x1f
c0028123:	09 ca                	or     edx,ecx
c0028125:	01 db                	add    ebx,ebx
c0028127:	48                   	dec    eax
c0028128:	3d fe 07 00 00       	cmp    eax,0x7fe
c002812d:	0f 8f 83 00 00 00    	jg     c00281b6 <__divdf3+0x322>
c0028133:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028139:	85 c0                	test   eax,eax
c002813b:	0f 8f 82 00 00 00    	jg     c00281c3 <__divdf3+0x32f>
c0028141:	83 f8 cc             	cmp    eax,0xffffffcc
c0028144:	7c 77                	jl     c00281bd <__divdf3+0x329>
c0028146:	be 01 00 00 00       	mov    esi,0x1
c002814b:	29 c6                	sub    esi,eax
c002814d:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028153:	83 fe 1f             	cmp    esi,0x1f
c0028156:	7e 2f                	jle    c0028187 <__divdf3+0x2f3>
c0028158:	83 fe 20             	cmp    esi,0x20
c002815b:	75 0a                	jne    c0028167 <__divdf3+0x2d3>
c002815d:	85 db                	test   ebx,ebx
c002815f:	0f 95 c3             	setne  bl
c0028162:	0f b6 db             	movzx  ebx,bl
c0028165:	eb 1a                	jmp    c0028181 <__divdf3+0x2ed>
c0028167:	8d 48 3f             	lea    ecx,[eax+0x3f]
c002816a:	89 d7                	mov    edi,edx
c002816c:	d3 e7                	shl    edi,cl
c002816e:	89 f9                	mov    ecx,edi
c0028170:	09 d9                	or     ecx,ebx
c0028172:	0f 95 c3             	setne  bl
c0028175:	0f b6 db             	movzx  ebx,bl
c0028178:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c002817d:	29 c1                	sub    ecx,eax
c002817f:	d3 ea                	shr    edx,cl
c0028181:	09 d3                	or     ebx,edx
c0028183:	31 c0                	xor    eax,eax
c0028185:	eb 3a                	jmp    c00281c1 <__divdf3+0x32d>
c0028187:	83 c0 1f             	add    eax,0x1f
c002818a:	89 d7                	mov    edi,edx
c002818c:	88 c1                	mov    cl,al
c002818e:	d3 e7                	shl    edi,cl
c0028190:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028193:	89 df                	mov    edi,ebx
c0028195:	89 f1                	mov    ecx,esi
c0028197:	d3 ef                	shr    edi,cl
c0028199:	89 f9                	mov    ecx,edi
c002819b:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002819e:	09 cf                	or     edi,ecx
c00281a0:	88 c1                	mov    cl,al
c00281a2:	d3 e3                	shl    ebx,cl
c00281a4:	85 db                	test   ebx,ebx
c00281a6:	0f 95 c3             	setne  bl
c00281a9:	0f b6 db             	movzx  ebx,bl
c00281ac:	09 fb                	or     ebx,edi
c00281ae:	89 f1                	mov    ecx,esi
c00281b0:	d3 ea                	shr    edx,cl
c00281b2:	31 c0                	xor    eax,eax
c00281b4:	eb 0d                	jmp    c00281c3 <__divdf3+0x32f>
c00281b6:	b8 ff 07 00 00       	mov    eax,0x7ff
c00281bb:	eb 02                	jmp    c00281bf <__divdf3+0x32b>
c00281bd:	31 c0                	xor    eax,eax
c00281bf:	31 db                	xor    ebx,ebx
c00281c1:	31 d2                	xor    edx,edx
c00281c3:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c00281c6:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c00281c9:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00281cf:	09 c8                	or     eax,ecx
c00281d1:	c1 e0 14             	shl    eax,0x14
c00281d4:	89 d1                	mov    ecx,edx
c00281d6:	c1 e9 0b             	shr    ecx,0xb
c00281d9:	09 c8                	or     eax,ecx
c00281db:	89 c6                	mov    esi,eax
c00281dd:	89 d9                	mov    ecx,ebx
c00281df:	c1 e9 0b             	shr    ecx,0xb
c00281e2:	c1 e2 15             	shl    edx,0x15
c00281e5:	09 ca                	or     edx,ecx
c00281e7:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c00281ed:	0f 95 c0             	setne  al
c00281f0:	09 c1                	or     ecx,eax
c00281f2:	83 e1 01             	and    ecx,0x1
c00281f5:	c1 eb 0a             	shr    ebx,0xa
c00281f8:	21 cb                	and    ebx,ecx
c00281fa:	01 d3                	add    ebx,edx
c00281fc:	89 d8                	mov    eax,ebx
c00281fe:	83 d6 00             	adc    esi,0x0
c0028201:	89 f2                	mov    edx,esi
c0028203:	89 c7                	mov    edi,eax
c0028205:	89 d1                	mov    ecx,edx
c0028207:	89 f8                	mov    eax,edi
c0028209:	89 ca                	mov    edx,ecx
c002820b:	83 c4 2c             	add    esp,0x2c
c002820e:	5b                   	pop    ebx
c002820f:	5e                   	pop    esi
c0028210:	5f                   	pop    edi
c0028211:	5d                   	pop    ebp
c0028212:	c3                   	ret    

c0028213 <__floatsidf>:
c0028213:	55                   	push   ebp
c0028214:	89 e5                	mov    ebp,esp
c0028216:	56                   	push   esi
c0028217:	53                   	push   ebx
c0028218:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c002821b:	85 db                	test   ebx,ebx
c002821d:	7e 15                	jle    c0028234 <__floatsidf+0x21>
c002821f:	0f bd cb             	bsr    ecx,ebx
c0028222:	83 f1 1f             	xor    ecx,0x1f
c0028225:	d3 e3                	shl    ebx,cl
c0028227:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c002822d:	b8 1e 04 00 00       	mov    eax,0x41e
c0028232:	eb 21                	jmp    c0028255 <__floatsidf+0x42>
c0028234:	b8 00 00 00 00       	mov    eax,0x0
c0028239:	ba 00 00 00 00       	mov    edx,0x0
c002823e:	74 2a                	je     c002826a <__floatsidf+0x57>
c0028240:	f7 db                	neg    ebx
c0028242:	0f bd cb             	bsr    ecx,ebx
c0028245:	83 f1 1f             	xor    ecx,0x1f
c0028248:	d3 e3                	shl    ebx,cl
c002824a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028250:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0028255:	29 c8                	sub    eax,ecx
c0028257:	c1 e0 14             	shl    eax,0x14
c002825a:	89 c1                	mov    ecx,eax
c002825c:	89 de                	mov    esi,ebx
c002825e:	c1 ee 0b             	shr    esi,0xb
c0028261:	09 f1                	or     ecx,esi
c0028263:	89 ca                	mov    edx,ecx
c0028265:	c1 e3 15             	shl    ebx,0x15
c0028268:	89 d8                	mov    eax,ebx
c002826a:	5b                   	pop    ebx
c002826b:	5e                   	pop    esi
c002826c:	5d                   	pop    ebp
c002826d:	c3                   	ret    

c002826e <__floatunsidf>:
c002826e:	55                   	push   ebp
c002826f:	89 e5                	mov    ebp,esp
c0028271:	56                   	push   esi
c0028272:	53                   	push   ebx
c0028273:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028276:	85 db                	test   ebx,ebx
c0028278:	74 2a                	je     c00282a4 <__floatunsidf+0x36>
c002827a:	0f bd cb             	bsr    ecx,ebx
c002827d:	83 f1 1f             	xor    ecx,0x1f
c0028280:	d3 e3                	shl    ebx,cl
c0028282:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028288:	b8 1e 04 00 00       	mov    eax,0x41e
c002828d:	29 c8                	sub    eax,ecx
c002828f:	c1 e0 14             	shl    eax,0x14
c0028292:	89 c1                	mov    ecx,eax
c0028294:	89 de                	mov    esi,ebx
c0028296:	c1 ee 0b             	shr    esi,0xb
c0028299:	09 f1                	or     ecx,esi
c002829b:	89 ca                	mov    edx,ecx
c002829d:	c1 e3 15             	shl    ebx,0x15
c00282a0:	89 d8                	mov    eax,ebx
c00282a2:	eb 04                	jmp    c00282a8 <__floatunsidf+0x3a>
c00282a4:	31 c0                	xor    eax,eax
c00282a6:	31 d2                	xor    edx,edx
c00282a8:	5b                   	pop    ebx
c00282a9:	5e                   	pop    esi
c00282aa:	5d                   	pop    ebp
c00282ab:	c3                   	ret    

c00282ac <__fixdfsi>:
c00282ac:	55                   	push   ebp
c00282ad:	89 e5                	mov    ebp,esp
c00282af:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00282b2:	89 d1                	mov    ecx,edx
c00282b4:	c1 e1 0b             	shl    ecx,0xb
c00282b7:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00282bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00282c0:	c1 e8 15             	shr    eax,0x15
c00282c3:	09 c1                	or     ecx,eax
c00282c5:	c1 fa 14             	sar    edx,0x14
c00282c8:	78 1f                	js     c00282e9 <__fixdfsi+0x3d>
c00282ca:	81 ea ff 03 00 00    	sub    edx,0x3ff
c00282d0:	31 c0                	xor    eax,eax
c00282d2:	83 fa 1e             	cmp    edx,0x1e
c00282d5:	77 40                	ja     c0028317 <__fixdfsi+0x6b>
c00282d7:	89 c8                	mov    eax,ecx
c00282d9:	0d 00 00 00 80       	or     eax,0x80000000
c00282de:	b9 1f 00 00 00       	mov    ecx,0x1f
c00282e3:	29 d1                	sub    ecx,edx
c00282e5:	d3 e8                	shr    eax,cl
c00282e7:	eb 2e                	jmp    c0028317 <__fixdfsi+0x6b>
c00282e9:	31 c0                	xor    eax,eax
c00282eb:	81 c2 01 04 00 00    	add    edx,0x401
c00282f1:	78 24                	js     c0028317 <__fixdfsi+0x6b>
c00282f3:	83 fa 1e             	cmp    edx,0x1e
c00282f6:	7e 09                	jle    c0028301 <__fixdfsi+0x55>
c00282f8:	83 fa 1f             	cmp    edx,0x1f
c00282fb:	75 18                	jne    c0028315 <__fixdfsi+0x69>
c00282fd:	85 c9                	test   ecx,ecx
c00282ff:	75 14                	jne    c0028315 <__fixdfsi+0x69>
c0028301:	89 c8                	mov    eax,ecx
c0028303:	0d 00 00 00 80       	or     eax,0x80000000
c0028308:	b9 1f 00 00 00       	mov    ecx,0x1f
c002830d:	29 d1                	sub    ecx,edx
c002830f:	d3 e8                	shr    eax,cl
c0028311:	f7 d8                	neg    eax
c0028313:	eb 02                	jmp    c0028317 <__fixdfsi+0x6b>
c0028315:	31 c0                	xor    eax,eax
c0028317:	5d                   	pop    ebp
c0028318:	c3                   	ret    

c0028319 <__fixunsdfsi>:
c0028319:	55                   	push   ebp
c002831a:	89 e5                	mov    ebp,esp
c002831c:	53                   	push   ebx
c002831d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0028320:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028323:	89 d3                	mov    ebx,edx
c0028325:	c1 fb 14             	sar    ebx,0x14
c0028328:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c002832e:	31 c0                	xor    eax,eax
c0028330:	83 fb 1f             	cmp    ebx,0x1f
c0028333:	77 1d                	ja     c0028352 <__fixunsdfsi+0x39>
c0028335:	89 d0                	mov    eax,edx
c0028337:	c1 e0 0b             	shl    eax,0xb
c002833a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002833f:	c1 e9 15             	shr    ecx,0x15
c0028342:	09 c8                	or     eax,ecx
c0028344:	0d 00 00 00 80       	or     eax,0x80000000
c0028349:	b9 1f 00 00 00       	mov    ecx,0x1f
c002834e:	29 d9                	sub    ecx,ebx
c0028350:	d3 e8                	shr    eax,cl
c0028352:	5b                   	pop    ebx
c0028353:	5d                   	pop    ebp
c0028354:	c3                   	ret    

c0028355 <__cmpdf2>:
c0028355:	55                   	push   ebp
c0028356:	89 e5                	mov    ebp,esp
c0028358:	57                   	push   edi
c0028359:	56                   	push   esi
c002835a:	53                   	push   ebx
c002835b:	83 ec 0c             	sub    esp,0xc
c002835e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0028361:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028364:	89 ca                	mov    edx,ecx
c0028366:	c1 ea 14             	shr    edx,0x14
c0028369:	81 e2 ff 07 00 00    	and    edx,0x7ff
c002836f:	89 cb                	mov    ebx,ecx
c0028371:	c1 fb 1f             	sar    ebx,0x1f
c0028374:	31 da                	xor    edx,ebx
c0028376:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028379:	89 df                	mov    edi,ebx
c002837b:	c1 e7 0b             	shl    edi,0xb
c002837e:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028381:	c1 e1 0b             	shl    ecx,0xb
c0028384:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c002838a:	c1 eb 15             	shr    ebx,0x15
c002838d:	09 d9                	or     ecx,ebx
c002838f:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0028392:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0028395:	89 ce                	mov    esi,ecx
c0028397:	c1 ee 14             	shr    esi,0x14
c002839a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00283a0:	89 cb                	mov    ebx,ecx
c00283a2:	c1 fb 1f             	sar    ebx,0x1f
c00283a5:	31 de                	xor    esi,ebx
c00283a7:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00283aa:	89 df                	mov    edi,ebx
c00283ac:	c1 e7 0b             	shl    edi,0xb
c00283af:	c1 e1 0b             	shl    ecx,0xb
c00283b2:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00283b8:	c1 eb 15             	shr    ebx,0x15
c00283bb:	09 d9                	or     ecx,ebx
c00283bd:	89 d3                	mov    ebx,edx
c00283bf:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c00283c5:	43                   	inc    ebx
c00283c6:	83 fb 01             	cmp    ebx,0x1
c00283c9:	77 08                	ja     c00283d3 <__cmpdf2+0x7e>
c00283cb:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00283ce:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00283d1:	75 68                	jne    c002843b <__cmpdf2+0xe6>
c00283d3:	89 f3                	mov    ebx,esi
c00283d5:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c00283db:	43                   	inc    ebx
c00283dc:	83 fb 01             	cmp    ebx,0x1
c00283df:	77 06                	ja     c00283e7 <__cmpdf2+0x92>
c00283e1:	89 fb                	mov    ebx,edi
c00283e3:	09 cb                	or     ebx,ecx
c00283e5:	75 54                	jne    c002843b <__cmpdf2+0xe6>
c00283e7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00283ea:	09 f8                	or     eax,edi
c00283ec:	09 c8                	or     eax,ecx
c00283ee:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c00283f1:	75 12                	jne    c0028405 <__cmpdf2+0xb0>
c00283f3:	8d 42 01             	lea    eax,[edx+0x1]
c00283f6:	83 f8 01             	cmp    eax,0x1
c00283f9:	77 0a                	ja     c0028405 <__cmpdf2+0xb0>
c00283fb:	8d 5e 01             	lea    ebx,[esi+0x1]
c00283fe:	31 c0                	xor    eax,eax
c0028400:	83 fb 01             	cmp    ebx,0x1
c0028403:	76 36                	jbe    c002843b <__cmpdf2+0xe6>
c0028405:	b8 01 00 00 00       	mov    eax,0x1
c002840a:	39 f2                	cmp    edx,esi
c002840c:	7f 2d                	jg     c002843b <__cmpdf2+0xe6>
c002840e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0028413:	7c 26                	jl     c002843b <__cmpdf2+0xe6>
c0028415:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028418:	77 07                	ja     c0028421 <__cmpdf2+0xcc>
c002841a:	72 16                	jb     c0028432 <__cmpdf2+0xdd>
c002841c:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c002841f:	76 0a                	jbe    c002842b <__cmpdf2+0xd6>
c0028421:	89 d0                	mov    eax,edx
c0028423:	c1 f8 1f             	sar    eax,0x1f
c0028426:	83 c8 01             	or     eax,0x1
c0028429:	eb 10                	jmp    c002843b <__cmpdf2+0xe6>
c002842b:	b8 00 00 00 00       	mov    eax,0x0
c0028430:	73 09                	jae    c002843b <__cmpdf2+0xe6>
c0028432:	89 d0                	mov    eax,edx
c0028434:	c1 f8 1f             	sar    eax,0x1f
c0028437:	83 e0 02             	and    eax,0x2
c002843a:	48                   	dec    eax
c002843b:	83 c4 0c             	add    esp,0xc
c002843e:	5b                   	pop    ebx
c002843f:	5e                   	pop    esi
c0028440:	5f                   	pop    edi
c0028441:	5d                   	pop    ebp
c0028442:	c3                   	ret    

c0028443 <__eqdf2>:
c0028443:	55                   	push   ebp
c0028444:	89 e5                	mov    ebp,esp
c0028446:	50                   	push   eax
c0028447:	6a 01                	push   0x1
c0028449:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002844c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002844f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028452:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028455:	e8 fb fe ff ff       	call   c0028355 <__cmpdf2>
c002845a:	83 c4 18             	add    esp,0x18
c002845d:	c9                   	leave  
c002845e:	c3                   	ret    

c002845f <__nedf2>:
c002845f:	eb e2                	jmp    c0028443 <__eqdf2>

c0028461 <__gtdf2>:
c0028461:	55                   	push   ebp
c0028462:	89 e5                	mov    ebp,esp
c0028464:	50                   	push   eax
c0028465:	6a ff                	push   0xffffffff
c0028467:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002846a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002846d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028470:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028473:	e8 dd fe ff ff       	call   c0028355 <__cmpdf2>
c0028478:	83 c4 18             	add    esp,0x18
c002847b:	c9                   	leave  
c002847c:	c3                   	ret    

c002847d <__gedf2>:
c002847d:	eb e2                	jmp    c0028461 <__gtdf2>

c002847f <__ltdf2>:
c002847f:	eb c2                	jmp    c0028443 <__eqdf2>

c0028481 <__ledf2>:
c0028481:	eb c0                	jmp    c0028443 <__eqdf2>

c0028483 <__truncdfsf2>:
c0028483:	55                   	push   ebp
c0028484:	89 e5                	mov    ebp,esp
c0028486:	57                   	push   edi
c0028487:	56                   	push   esi
c0028488:	53                   	push   ebx
c0028489:	83 ec 0c             	sub    esp,0xc
c002848c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002848f:	89 d1                	mov    ecx,edx
c0028491:	c1 f9 14             	sar    ecx,0x14
c0028494:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028497:	89 df                	mov    edi,ebx
c0028499:	c1 e7 0b             	shl    edi,0xb
c002849c:	89 d0                	mov    eax,edx
c002849e:	c1 e0 0b             	shl    eax,0xb
c00284a1:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00284a6:	c1 eb 15             	shr    ebx,0x15
c00284a9:	09 d8                	or     eax,ebx
c00284ab:	89 cb                	mov    ebx,ecx
c00284ad:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00284b3:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c00284b9:	81 fe fd 00 00 00    	cmp    esi,0xfd
c00284bf:	0f 86 9e 00 00 00    	jbe    c0028563 <__truncdfsf2+0xe0>
c00284c5:	85 db                	test   ebx,ebx
c00284c7:	75 0a                	jne    c00284d3 <__truncdfsf2+0x50>
c00284c9:	c1 fa 17             	sar    edx,0x17
c00284cc:	30 d2                	xor    dl,dl
c00284ce:	e9 84 00 00 00       	jmp    c0028557 <__truncdfsf2+0xd4>
c00284d3:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c00284d9:	83 fe 83             	cmp    esi,0xffffff83
c00284dc:	7d 4b                	jge    c0028529 <__truncdfsf2+0xa6>
c00284de:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c00284e3:	29 f1                	sub    ecx,esi
c00284e5:	83 f9 1f             	cmp    ecx,0x1f
c00284e8:	7f 6b                	jg     c0028555 <__truncdfsf2+0xd2>
c00284ea:	0d 00 00 00 80       	or     eax,0x80000000
c00284ef:	89 c3                	mov    ebx,eax
c00284f1:	d3 eb                	shr    ebx,cl
c00284f3:	be 01 00 00 00       	mov    esi,0x1
c00284f8:	d3 e6                	shl    esi,cl
c00284fa:	4e                   	dec    esi
c00284fb:	21 f0                	and    eax,esi
c00284fd:	09 f8                	or     eax,edi
c00284ff:	0f 95 c0             	setne  al
c0028502:	0f b6 c0             	movzx  eax,al
c0028505:	09 c3                	or     ebx,eax
c0028507:	89 d9                	mov    ecx,ebx
c0028509:	c1 e9 08             	shr    ecx,0x8
c002850c:	f6 c3 7f             	test   bl,0x7f
c002850f:	0f 95 c0             	setne  al
c0028512:	09 c8                	or     eax,ecx
c0028514:	83 e0 01             	and    eax,0x1
c0028517:	c1 eb 07             	shr    ebx,0x7
c002851a:	21 c3                	and    ebx,eax
c002851c:	81 e2 00 00 00 80    	and    edx,0x80000000
c0028522:	09 d1                	or     ecx,edx
c0028524:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0028527:	eb 76                	jmp    c002859f <__truncdfsf2+0x11c>
c0028529:	83 c6 80             	add    esi,0xffffff80
c002852c:	7e 1d                	jle    c002854b <__truncdfsf2+0xc8>
c002852e:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0028534:	75 0b                	jne    c0028541 <__truncdfsf2+0xbe>
c0028536:	09 f8                	or     eax,edi
c0028538:	74 09                	je     c0028543 <__truncdfsf2+0xc0>
c002853a:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c002853f:	eb 02                	jmp    c0028543 <__truncdfsf2+0xc0>
c0028541:	31 c0                	xor    eax,eax
c0028543:	c1 fa 17             	sar    edx,0x17
c0028546:	80 ca ff             	or     dl,0xff
c0028549:	eb 0e                	jmp    c0028559 <__truncdfsf2+0xd6>
c002854b:	c1 fa 1f             	sar    edx,0x1f
c002854e:	c1 e2 08             	shl    edx,0x8
c0028551:	09 ca                	or     edx,ecx
c0028553:	eb 04                	jmp    c0028559 <__truncdfsf2+0xd6>
c0028555:	31 d2                	xor    edx,edx
c0028557:	31 c0                	xor    eax,eax
c0028559:	c1 e2 17             	shl    edx,0x17
c002855c:	c1 e8 08             	shr    eax,0x8
c002855f:	09 d0                	or     eax,edx
c0028561:	eb 3c                	jmp    c002859f <__truncdfsf2+0x11c>
c0028563:	81 e9 80 03 00 00    	sub    ecx,0x380
c0028569:	89 ca                	mov    edx,ecx
c002856b:	c1 fa 0b             	sar    edx,0xb
c002856e:	c1 e2 08             	shl    edx,0x8
c0028571:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0028574:	31 db                	xor    ebx,ebx
c0028576:	85 ff                	test   edi,edi
c0028578:	0f 95 c3             	setne  bl
c002857b:	09 d8                	or     eax,ebx
c002857d:	89 c3                	mov    ebx,eax
c002857f:	c1 eb 08             	shr    ebx,0x8
c0028582:	a8 7f                	test   al,0x7f
c0028584:	0f 95 c2             	setne  dl
c0028587:	89 d6                	mov    esi,edx
c0028589:	09 de                	or     esi,ebx
c002858b:	83 e6 01             	and    esi,0x1
c002858e:	c1 e8 07             	shr    eax,0x7
c0028591:	21 f0                	and    eax,esi
c0028593:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028596:	09 ca                	or     edx,ecx
c0028598:	c1 e2 17             	shl    edx,0x17
c002859b:	09 da                	or     edx,ebx
c002859d:	01 d0                	add    eax,edx
c002859f:	83 c4 0c             	add    esp,0xc
c00285a2:	5b                   	pop    ebx
c00285a3:	5e                   	pop    esi
c00285a4:	5f                   	pop    edi
c00285a5:	5d                   	pop    ebp
c00285a6:	c3                   	ret    

c00285a7 <__extendsfdf2>:
c00285a7:	55                   	push   ebp
c00285a8:	89 e5                	mov    ebp,esp
c00285aa:	57                   	push   edi
c00285ab:	56                   	push   esi
c00285ac:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00285af:	89 d1                	mov    ecx,edx
c00285b1:	c1 f9 17             	sar    ecx,0x17
c00285b4:	c1 e2 08             	shl    edx,0x8
c00285b7:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00285bd:	89 c8                	mov    eax,ecx
c00285bf:	80 e4 f8             	and    ah,0xf8
c00285c2:	8d 71 01             	lea    esi,[ecx+0x1]
c00285c5:	81 e6 fe 00 00 00    	and    esi,0xfe
c00285cb:	75 27                	jne    c00285f4 <__extendsfdf2+0x4d>
c00285cd:	81 e1 ff 00 00 00    	and    ecx,0xff
c00285d3:	75 18                	jne    c00285ed <__extendsfdf2+0x46>
c00285d5:	85 d2                	test   edx,edx
c00285d7:	74 20                	je     c00285f9 <__extendsfdf2+0x52>
c00285d9:	41                   	inc    ecx
c00285da:	01 d2                	add    edx,edx
c00285dc:	79 fb                	jns    c00285d9 <__extendsfdf2+0x32>
c00285de:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00285e4:	29 c8                	sub    eax,ecx
c00285e6:	05 81 03 00 00       	add    eax,0x381
c00285eb:	eb 0c                	jmp    c00285f9 <__extendsfdf2+0x52>
c00285ed:	05 00 07 00 00       	add    eax,0x700
c00285f2:	eb 05                	jmp    c00285f9 <__extendsfdf2+0x52>
c00285f4:	05 80 03 00 00       	add    eax,0x380
c00285f9:	c1 e0 14             	shl    eax,0x14
c00285fc:	89 c1                	mov    ecx,eax
c00285fe:	89 d0                	mov    eax,edx
c0028600:	c1 e8 0b             	shr    eax,0xb
c0028603:	09 c1                	or     ecx,eax
c0028605:	c1 e2 15             	shl    edx,0x15
c0028608:	89 d0                	mov    eax,edx
c002860a:	89 ca                	mov    edx,ecx
c002860c:	5e                   	pop    esi
c002860d:	5f                   	pop    edi
c002860e:	5d                   	pop    ebp
c002860f:	c3                   	ret    

c0028610 <fabs>:
c0028610:	83 ec 0c             	sub    esp,0xc
c0028613:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028617:	89 04 24             	mov    DWORD PTR [esp],eax
c002861a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002861e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028623:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0028627:	dd 04 24             	fld    QWORD PTR [esp]
c002862a:	83 c4 0c             	add    esp,0xc
c002862d:	c3                   	ret    
c002862e:	66 90                	xchg   ax,ax

c0028630 <lrint>:
c0028630:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0028634:	83 ec 04             	sub    esp,0x4
c0028637:	db 1c 24             	fistp  DWORD PTR [esp]
c002863a:	58                   	pop    eax
c002863b:	c3                   	ret    

c002863c <lrintf>:
c002863c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0028640:	83 ec 04             	sub    esp,0x4
c0028643:	db 1c 24             	fistp  DWORD PTR [esp]
c0028646:	58                   	pop    eax
c0028647:	c3                   	ret    

Disassembly of section .init:

c0028648 <_init>:
c0028648:	55                   	push   ebp
c0028649:	89 e5                	mov    ebp,esp
c002864b:	e8 c8 7a fd ff       	call   c0000118 <frame_dummy>
c0028650:	e8 63 e0 ff ff       	call   c00266b8 <__do_global_ctors_aux>
c0028655:	5d                   	pop    ebp
c0028656:	c3                   	ret    

Disassembly of section .fini:

c0028657 <_fini>:
c0028657:	55                   	push   ebp
c0028658:	89 e5                	mov    ebp,esp
c002865a:	e8 49 7a fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002865f:	5d                   	pop    ebp
c0028660:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0028662 <Computer::~Computer()>:
c0028662:	83 ec 0c             	sub    esp,0xc
c0028665:	ba a8 a1 02 c0       	mov    edx,0xc002a1a8
c002866a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002866e:	89 10                	mov    DWORD PTR [eax],edx
c0028670:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028674:	83 ec 0c             	sub    esp,0xc
c0028677:	50                   	push   eax
c0028678:	e8 c5 bb fe ff       	call   c0014242 <Device::~Device()>
c002867d:	83 c4 10             	add    esp,0x10
c0028680:	90                   	nop
c0028681:	83 c4 0c             	add    esp,0xc
c0028684:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0028686 <Computer::~Computer()>:
c0028686:	83 ec 0c             	sub    esp,0xc
c0028689:	83 ec 0c             	sub    esp,0xc
c002868c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028690:	e8 cd ff ff ff       	call   c0028662 <Computer::~Computer()>
c0028695:	83 c4 10             	add    esp,0x10
c0028698:	83 ec 08             	sub    esp,0x8
c002869b:	68 ec 01 00 00       	push   0x1ec
c00286a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00286a4:	e8 c1 a7 fe ff       	call   c0012e6a <operator delete(void*, unsigned long)>
c00286a9:	83 c4 10             	add    esp,0x10
c00286ac:	83 c4 0c             	add    esp,0xc
c00286af:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c00286b0 <idleCommon()>:
c00286b0:	83 ec 0c             	sub    esp,0xc
c00286b3:	e8 1e 57 ff ff       	call   c001ddd6 <lockScheduler()>
c00286b8:	e8 55 5a ff ff       	call   c001e112 <schedule()>
c00286bd:	83 c4 0c             	add    esp,0xc
c00286c0:	e9 13 57 ff ff       	jmp    c001ddd8 <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c00286c6 <LinkedList<UnixFile>::~LinkedList()>:
c00286c6:	90                   	nop
c00286c7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c00286c8 <LinkedList<UnixFile>::LinkedList()>:
c00286c8:	83 ec 0c             	sub    esp,0xc
c00286cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286cf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00286d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286d9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00286e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286e4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00286eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286ef:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00286f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286f9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028700:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028704:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002870b:	83 ec 0c             	sub    esp,0xc
c002870e:	68 66 a4 02 c0       	push   0xc002a466
c0028713:	e8 32 a8 fe ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0028718:	83 c4 10             	add    esp,0x10
c002871b:	90                   	nop
c002871c:	83 c4 0c             	add    esp,0xc
c002871f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0028720 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0028720:	83 ec 0c             	sub    esp,0xc
c0028723:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028728:	75 10                	jne    c002873a <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c002872a:	83 ec 0c             	sub    esp,0xc
c002872d:	68 80 a4 02 c0       	push   0xc002a480
c0028732:	e8 c4 1e ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c0028737:	83 c4 10             	add    esp,0x10
c002873a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002873e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028740:	85 c0                	test   eax,eax
c0028742:	74 34                	je     c0028778 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028744:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028748:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002874b:	85 c0                	test   eax,eax
c002874d:	74 29                	je     c0028778 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002874f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028753:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028756:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002875a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002875d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028761:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028765:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028768:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002876c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002876f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028776:	eb 65                	jmp    c00287dd <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028778:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002877c:	8b 00                	mov    eax,DWORD PTR [eax]
c002877e:	85 c0                	test   eax,eax
c0028780:	75 4b                	jne    c00287cd <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028782:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028786:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028789:	85 c0                	test   eax,eax
c002878b:	75 40                	jne    c00287cd <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002878d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028791:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028795:	89 10                	mov    DWORD PTR [eax],edx
c0028797:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002879b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002879f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00287a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287a9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00287b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287b4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00287b7:	85 c0                	test   eax,eax
c00287b9:	74 22                	je     c00287dd <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00287bb:	83 ec 0c             	sub    esp,0xc
c00287be:	68 a2 a4 02 c0       	push   0xc002a4a2
c00287c3:	e8 33 1e ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c00287c8:	83 c4 10             	add    esp,0x10
c00287cb:	eb 10                	jmp    c00287dd <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00287cd:	83 ec 0c             	sub    esp,0xc
c00287d0:	68 ac a4 02 c0       	push   0xc002a4ac
c00287d5:	e8 21 1e ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c00287da:	83 c4 10             	add    esp,0x10
c00287dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287e1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00287e4:	8d 50 01             	lea    edx,[eax+0x1]
c00287e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287eb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00287ee:	90                   	nop
c00287ef:	83 c4 0c             	add    esp,0xc
c00287f2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00287f4 <LinkedList<UnixFile>::getFirstElement()>:
c00287f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00287f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00287fa:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00287fc <LinkedList<UnixFile>::removeFirst()>:
c00287fc:	83 ec 0c             	sub    esp,0xc
c00287ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028803:	8b 00                	mov    eax,DWORD PTR [eax]
c0028805:	85 c0                	test   eax,eax
c0028807:	75 12                	jne    c002881b <LinkedList<UnixFile>::removeFirst()+0x1f>
c0028809:	83 ec 0c             	sub    esp,0xc
c002880c:	68 b8 a4 02 c0       	push   0xc002a4b8
c0028811:	e8 e5 1d ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c0028816:	83 c4 10             	add    esp,0x10
c0028819:	eb 7e                	jmp    c0028899 <LinkedList<UnixFile>::removeFirst()+0x9d>
c002881b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002881f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028822:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028825:	85 c0                	test   eax,eax
c0028827:	74 10                	je     c0028839 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0028829:	83 ec 0c             	sub    esp,0xc
c002882c:	68 03 a5 02 c0       	push   0xc002a503
c0028831:	e8 c5 1d ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c0028836:	83 c4 10             	add    esp,0x10
c0028839:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002883d:	8b 00                	mov    eax,DWORD PTR [eax]
c002883f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028842:	85 c0                	test   eax,eax
c0028844:	75 33                	jne    c0028879 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0028846:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002884a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028850:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028854:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002885b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002885f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028862:	83 f8 01             	cmp    eax,0x1
c0028865:	74 21                	je     c0028888 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028867:	83 ec 0c             	sub    esp,0xc
c002886a:	68 dc a4 02 c0       	push   0xc002a4dc
c002886f:	e8 87 1d ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c0028874:	83 c4 10             	add    esp,0x10
c0028877:	eb 0f                	jmp    c0028888 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028879:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002887d:	8b 00                	mov    eax,DWORD PTR [eax]
c002887f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028886:	89 10                	mov    DWORD PTR [eax],edx
c0028888:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002888c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002888f:	8d 50 ff             	lea    edx,[eax-0x1]
c0028892:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028896:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028899:	83 c4 0c             	add    esp,0xc
c002889c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002889e <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002889e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00288a2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288a5:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c00288a6 <DriverlessDevice::~DriverlessDevice()>:
c00288a6:	ba a4 ac 02 c0       	mov    edx,0xc002aca4
c00288ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288af:	89 10                	mov    DWORD PTR [eax],edx
c00288b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288b5:	50                   	push   eax
c00288b6:	e8 87 b9 fe ff       	call   c0014242 <Device::~Device()>
c00288bb:	83 c4 04             	add    esp,0x4
c00288be:	90                   	nop
c00288bf:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c00288c0 <DriverlessDevice::~DriverlessDevice()>:
c00288c0:	83 ec 0c             	sub    esp,0xc
c00288c3:	83 ec 0c             	sub    esp,0xc
c00288c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00288ca:	e8 d7 ff ff ff       	call   c00288a6 <DriverlessDevice::~DriverlessDevice()>
c00288cf:	83 c4 10             	add    esp,0x10
c00288d2:	83 ec 08             	sub    esp,0x8
c00288d5:	68 58 01 00 00       	push   0x158
c00288da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00288de:	e8 87 a5 fe ff       	call   c0012e6a <operator delete(void*, unsigned long)>
c00288e3:	83 c4 10             	add    esp,0x10
c00288e6:	83 c4 0c             	add    esp,0xc
c00288e9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00288ea <LinkedList<Device>::addElement(Device*)>:
c00288ea:	83 ec 0c             	sub    esp,0xc
c00288ed:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00288f2:	75 10                	jne    c0028904 <LinkedList<Device>::addElement(Device*)+0x1a>
c00288f4:	83 ec 0c             	sub    esp,0xc
c00288f7:	68 80 a4 02 c0       	push   0xc002a480
c00288fc:	e8 fa 1c ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c0028901:	83 c4 10             	add    esp,0x10
c0028904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028908:	8b 00                	mov    eax,DWORD PTR [eax]
c002890a:	85 c0                	test   eax,eax
c002890c:	74 3a                	je     c0028948 <LinkedList<Device>::addElement(Device*)+0x5e>
c002890e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028912:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028915:	85 c0                	test   eax,eax
c0028917:	74 2f                	je     c0028948 <LinkedList<Device>::addElement(Device*)+0x5e>
c0028919:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002891d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028920:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028924:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c002892a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002892e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028932:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028935:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028939:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002893c:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028946:	eb 68                	jmp    c00289b0 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002894c:	8b 00                	mov    eax,DWORD PTR [eax]
c002894e:	85 c0                	test   eax,eax
c0028950:	75 4e                	jne    c00289a0 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028956:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028959:	85 c0                	test   eax,eax
c002895b:	75 43                	jne    c00289a0 <LinkedList<Device>::addElement(Device*)+0xb6>
c002895d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028961:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028965:	89 10                	mov    DWORD PTR [eax],edx
c0028967:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002896b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002896f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028972:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028976:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028979:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028983:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028987:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002898a:	85 c0                	test   eax,eax
c002898c:	74 22                	je     c00289b0 <LinkedList<Device>::addElement(Device*)+0xc6>
c002898e:	83 ec 0c             	sub    esp,0xc
c0028991:	68 a2 a4 02 c0       	push   0xc002a4a2
c0028996:	e8 60 1c ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c002899b:	83 c4 10             	add    esp,0x10
c002899e:	eb 10                	jmp    c00289b0 <LinkedList<Device>::addElement(Device*)+0xc6>
c00289a0:	83 ec 0c             	sub    esp,0xc
c00289a3:	68 ac a4 02 c0       	push   0xc002a4ac
c00289a8:	e8 4e 1c ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c00289ad:	83 c4 10             	add    esp,0x10
c00289b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289b4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00289b7:	8d 50 01             	lea    edx,[eax+0x1]
c00289ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289be:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00289c1:	90                   	nop
c00289c2:	83 c4 0c             	add    esp,0xc
c00289c5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c00289c6 <LinkedList<Device>::LinkedList()>:
c00289c6:	83 ec 0c             	sub    esp,0xc
c00289c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289cd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00289d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289d7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00289de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289e2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00289e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289ed:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00289f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289f7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00289fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a02:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028a09:	83 ec 0c             	sub    esp,0xc
c0028a0c:	68 66 a4 02 c0       	push   0xc002a466
c0028a11:	e8 34 a5 fe ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0028a16:	83 c4 10             	add    esp,0x10
c0028a19:	90                   	nop
c0028a1a:	83 c4 0c             	add    esp,0xc
c0028a1d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0028a1e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0028a1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a22:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a24:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0028a26 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0028a26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a2a:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a2c:	85 c0                	test   eax,eax
c0028a2e:	75 0e                	jne    c0028a3e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028a30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a34:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a37:	85 c0                	test   eax,eax
c0028a39:	75 03                	jne    c0028a3e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028a3b:	b0 01                	mov    al,0x1
c0028a3d:	c3                   	ret    
c0028a3e:	b0 00                	mov    al,0x0
c0028a40:	90                   	nop
c0028a41:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0028a42 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0028a42:	83 ec 0c             	sub    esp,0xc
c0028a45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a49:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a4b:	85 c0                	test   eax,eax
c0028a4d:	75 15                	jne    c0028a64 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c0028a4f:	83 ec 0c             	sub    esp,0xc
c0028a52:	68 b8 a4 02 c0       	push   0xc002a4b8
c0028a57:	e8 9f 1b ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c0028a5c:	83 c4 10             	add    esp,0x10
c0028a5f:	e9 88 00 00 00       	jmp    c0028aec <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0028a64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a68:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a6b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028a6e:	85 c0                	test   eax,eax
c0028a70:	0f 95 c0             	setne  al
c0028a73:	84 c0                	test   al,al
c0028a75:	74 10                	je     c0028a87 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0028a77:	83 ec 0c             	sub    esp,0xc
c0028a7a:	68 03 a5 02 c0       	push   0xc002a503
c0028a7f:	e8 77 1b ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c0028a84:	83 c4 10             	add    esp,0x10
c0028a87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a8b:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a8d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028a90:	85 c0                	test   eax,eax
c0028a92:	0f 94 c0             	sete   al
c0028a95:	84 c0                	test   al,al
c0028a97:	74 33                	je     c0028acc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0028a99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a9d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028aa3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aa7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028aae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ab2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028ab5:	83 f8 01             	cmp    eax,0x1
c0028ab8:	74 21                	je     c0028adb <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028aba:	83 ec 0c             	sub    esp,0xc
c0028abd:	68 dc a4 02 c0       	push   0xc002a4dc
c0028ac2:	e8 34 1b ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c0028ac7:	83 c4 10             	add    esp,0x10
c0028aca:	eb 0f                	jmp    c0028adb <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028acc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ad0:	8b 00                	mov    eax,DWORD PTR [eax]
c0028ad2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028ad5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ad9:	89 10                	mov    DWORD PTR [eax],edx
c0028adb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028adf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028ae2:	8d 50 ff             	lea    edx,[eax-0x1]
c0028ae5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ae9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028aec:	83 c4 0c             	add    esp,0xc
c0028aef:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028af0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028af0:	83 ec 0c             	sub    esp,0xc
c0028af3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028af8:	75 10                	jne    c0028b0a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0028afa:	83 ec 0c             	sub    esp,0xc
c0028afd:	68 80 a4 02 c0       	push   0xc002a480
c0028b02:	e8 f4 1a ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c0028b07:	83 c4 10             	add    esp,0x10
c0028b0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b0e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b10:	85 c0                	test   eax,eax
c0028b12:	74 34                	je     c0028b48 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028b14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b18:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b1b:	85 c0                	test   eax,eax
c0028b1d:	74 29                	je     c0028b48 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028b1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b23:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b26:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b2a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0028b2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b31:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b35:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028b38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b3c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b3f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028b46:	eb 65                	jmp    c0028bad <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028b48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b4c:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b4e:	85 c0                	test   eax,eax
c0028b50:	75 4b                	jne    c0028b9d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b56:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b59:	85 c0                	test   eax,eax
c0028b5b:	75 40                	jne    c0028b9d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028b5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b61:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b65:	89 10                	mov    DWORD PTR [eax],edx
c0028b67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b6b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b6f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028b72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b76:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b79:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028b80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b84:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028b87:	85 c0                	test   eax,eax
c0028b89:	74 22                	je     c0028bad <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028b8b:	83 ec 0c             	sub    esp,0xc
c0028b8e:	68 a2 a4 02 c0       	push   0xc002a4a2
c0028b93:	e8 63 1a ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c0028b98:	83 c4 10             	add    esp,0x10
c0028b9b:	eb 10                	jmp    c0028bad <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028b9d:	83 ec 0c             	sub    esp,0xc
c0028ba0:	68 ac a4 02 c0       	push   0xc002a4ac
c0028ba5:	e8 51 1a ff ff       	call   c001a5fb <Krnl::panic(char const*)>
c0028baa:	83 c4 10             	add    esp,0x10
c0028bad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bb1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028bb4:	8d 50 01             	lea    edx,[eax+0x1]
c0028bb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bbb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028bbe:	90                   	nop
c0028bbf:	83 c4 0c             	add    esp,0xc
c0028bc2:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028bc4 <ACPI::~ACPI()>:
c0028bc4:	83 ec 0c             	sub    esp,0xc
c0028bc7:	ba f8 b5 02 c0       	mov    edx,0xc002b5f8
c0028bcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bd0:	89 10                	mov    DWORD PTR [eax],edx
c0028bd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bd6:	83 ec 0c             	sub    esp,0xc
c0028bd9:	50                   	push   eax
c0028bda:	e8 63 b6 fe ff       	call   c0014242 <Device::~Device()>
c0028bdf:	83 c4 10             	add    esp,0x10
c0028be2:	90                   	nop
c0028be3:	83 c4 0c             	add    esp,0xc
c0028be6:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028be8 <ACPI::~ACPI()>:
c0028be8:	83 ec 0c             	sub    esp,0xc
c0028beb:	83 ec 0c             	sub    esp,0xc
c0028bee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028bf2:	e8 cd ff ff ff       	call   c0028bc4 <ACPI::~ACPI()>
c0028bf7:	83 c4 10             	add    esp,0x10
c0028bfa:	83 ec 08             	sub    esp,0x8
c0028bfd:	68 68 12 00 00       	push   0x1268
c0028c02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c06:	e8 5f a2 fe ff       	call   c0012e6a <operator delete(void*, unsigned long)>
c0028c0b:	83 c4 10             	add    esp,0x10
c0028c0e:	83 c4 0c             	add    esp,0xc
c0028c11:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028c12 <CPU::~CPU()>:
c0028c12:	83 ec 0c             	sub    esp,0xc
c0028c15:	ba e8 b9 02 c0       	mov    edx,0xc002b9e8
c0028c1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c1e:	89 10                	mov    DWORD PTR [eax],edx
c0028c20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c24:	83 ec 0c             	sub    esp,0xc
c0028c27:	50                   	push   eax
c0028c28:	e8 15 b6 fe ff       	call   c0014242 <Device::~Device()>
c0028c2d:	83 c4 10             	add    esp,0x10
c0028c30:	90                   	nop
c0028c31:	83 c4 0c             	add    esp,0xc
c0028c34:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0028c36 <CPU::~CPU()>:
c0028c36:	83 ec 0c             	sub    esp,0xc
c0028c39:	83 ec 0c             	sub    esp,0xc
c0028c3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c40:	e8 cd ff ff ff       	call   c0028c12 <CPU::~CPU()>
c0028c45:	83 c4 10             	add    esp,0x10
c0028c48:	83 ec 08             	sub    esp,0x8
c0028c4b:	68 98 11 00 00       	push   0x1198
c0028c50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c54:	e8 11 a2 fe ff       	call   c0012e6a <operator delete(void*, unsigned long)>
c0028c59:	83 c4 10             	add    esp,0x10
c0028c5c:	83 c4 0c             	add    esp,0xc
c0028c5f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028c60 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028c60:	90                   	nop
c0028c61:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028c62 <ThreadControlBlock::ThreadControlBlock()>:
c0028c62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c66:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028c6d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c71:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0028c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c7c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028c83:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c87:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0028c8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c92:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028c96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c9a:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0028c9e:	90                   	nop
c0028c9f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028ca0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028ca0:	83 ec 0c             	sub    esp,0xc
c0028ca3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ca7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028cad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cb1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028cb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cbc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028cc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cc7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028ccd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cd1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028cd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cdc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028ce3:	83 ec 0c             	sub    esp,0xc
c0028ce6:	68 66 a4 02 c0       	push   0xc002a466
c0028ceb:	e8 5a a2 fe ff       	call   c0012f4a <Dbg::kprintf(char const*, ...)>
c0028cf0:	83 c4 10             	add    esp,0x10
c0028cf3:	90                   	nop
c0028cf4:	83 c4 0c             	add    esp,0xc
c0028cf7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028cf8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028cf8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028cfc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028cff:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0028d00 <Vm::_FPUState::_FPUState()>:
c0028d00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d04:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0028d0b:	90                   	nop
c0028d0c:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0028d0e <PCI::~PCI()>:
c0028d0e:	83 ec 0c             	sub    esp,0xc
c0028d11:	ba 5c ca 02 c0       	mov    edx,0xc002ca5c
c0028d16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d1a:	89 10                	mov    DWORD PTR [eax],edx
c0028d1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d20:	83 ec 0c             	sub    esp,0xc
c0028d23:	50                   	push   eax
c0028d24:	e8 f1 ae fe ff       	call   c0013c1a <Bus::~Bus()>
c0028d29:	83 c4 10             	add    esp,0x10
c0028d2c:	90                   	nop
c0028d2d:	83 c4 0c             	add    esp,0xc
c0028d30:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0028d32 <PCI::~PCI()>:
c0028d32:	83 ec 0c             	sub    esp,0xc
c0028d35:	83 ec 0c             	sub    esp,0xc
c0028d38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d3c:	e8 cd ff ff ff       	call   c0028d0e <PCI::~PCI()>
c0028d41:	83 c4 10             	add    esp,0x10
c0028d44:	83 ec 08             	sub    esp,0x8
c0028d47:	68 58 01 00 00       	push   0x158
c0028d4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d50:	e8 15 a1 fe ff       	call   c0012e6a <operator delete(void*, unsigned long)>
c0028d55:	83 c4 10             	add    esp,0x10
c0028d58:	83 c4 0c             	add    esp,0xc
c0028d5b:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0028d5c <IDE::~IDE()>:
c0028d5c:	83 ec 0c             	sub    esp,0xc
c0028d5f:	ba c0 cc 02 c0       	mov    edx,0xc002ccc0
c0028d64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d68:	89 10                	mov    DWORD PTR [eax],edx
c0028d6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d6e:	83 ec 0c             	sub    esp,0xc
c0028d71:	50                   	push   eax
c0028d72:	e8 bb b9 fe ff       	call   c0014732 <HardDiskController::~HardDiskController()>
c0028d77:	83 c4 10             	add    esp,0x10
c0028d7a:	90                   	nop
c0028d7b:	83 c4 0c             	add    esp,0xc
c0028d7e:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028d80 <IDE::~IDE()>:
c0028d80:	83 ec 0c             	sub    esp,0xc
c0028d83:	83 ec 0c             	sub    esp,0xc
c0028d86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d8a:	e8 cd ff ff ff       	call   c0028d5c <IDE::~IDE()>
c0028d8f:	83 c4 10             	add    esp,0x10
c0028d92:	83 ec 08             	sub    esp,0x8
c0028d95:	68 70 02 00 00       	push   0x270
c0028d9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d9e:	e8 c7 a0 fe ff       	call   c0012e6a <operator delete(void*, unsigned long)>
c0028da3:	83 c4 10             	add    esp,0x10
c0028da6:	83 c4 0c             	add    esp,0xc
c0028da9:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0028daa <SATABus::~SATABus()>:
c0028daa:	83 ec 0c             	sub    esp,0xc
c0028dad:	ba a0 cd 02 c0       	mov    edx,0xc002cda0
c0028db2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028db6:	89 10                	mov    DWORD PTR [eax],edx
c0028db8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dbc:	83 ec 0c             	sub    esp,0xc
c0028dbf:	50                   	push   eax
c0028dc0:	e8 6d b9 fe ff       	call   c0014732 <HardDiskController::~HardDiskController()>
c0028dc5:	83 c4 10             	add    esp,0x10
c0028dc8:	90                   	nop
c0028dc9:	83 c4 0c             	add    esp,0xc
c0028dcc:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0028dce <SATABus::~SATABus()>:
c0028dce:	83 ec 0c             	sub    esp,0xc
c0028dd1:	83 ec 0c             	sub    esp,0xc
c0028dd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dd8:	e8 cd ff ff ff       	call   c0028daa <SATABus::~SATABus()>
c0028ddd:	83 c4 10             	add    esp,0x10
c0028de0:	83 ec 08             	sub    esp,0x8
c0028de3:	68 64 01 00 00       	push   0x164
c0028de8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dec:	e8 79 a0 fe ff       	call   c0012e6a <operator delete(void*, unsigned long)>
c0028df1:	83 c4 10             	add    esp,0x10
c0028df4:	83 c4 0c             	add    esp,0xc
c0028df7:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028df8 <ATA::~ATA()>:
c0028df8:	83 ec 0c             	sub    esp,0xc
c0028dfb:	ba ec cd 02 c0       	mov    edx,0xc002cdec
c0028e00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e04:	89 10                	mov    DWORD PTR [eax],edx
c0028e06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e0a:	83 ec 0c             	sub    esp,0xc
c0028e0d:	50                   	push   eax
c0028e0e:	e8 11 ba fe ff       	call   c0014824 <PhysicalDisk::~PhysicalDisk()>
c0028e13:	83 c4 10             	add    esp,0x10
c0028e16:	90                   	nop
c0028e17:	83 c4 0c             	add    esp,0xc
c0028e1a:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0028e1c <ATA::~ATA()>:
c0028e1c:	83 ec 0c             	sub    esp,0xc
c0028e1f:	83 ec 0c             	sub    esp,0xc
c0028e22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e26:	e8 cd ff ff ff       	call   c0028df8 <ATA::~ATA()>
c0028e2b:	83 c4 10             	add    esp,0x10
c0028e2e:	83 ec 08             	sub    esp,0x8
c0028e31:	68 7c 01 00 00       	push   0x17c
c0028e36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e3a:	e8 2b a0 fe ff       	call   c0012e6a <operator delete(void*, unsigned long)>
c0028e3f:	83 c4 10             	add    esp,0x10
c0028e42:	83 c4 0c             	add    esp,0xc
c0028e45:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028e46 <ATAPI::~ATAPI()>:
c0028e46:	83 ec 0c             	sub    esp,0xc
c0028e49:	ba 24 ce 02 c0       	mov    edx,0xc002ce24
c0028e4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e52:	89 10                	mov    DWORD PTR [eax],edx
c0028e54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e58:	83 ec 0c             	sub    esp,0xc
c0028e5b:	50                   	push   eax
c0028e5c:	e8 c3 b9 fe ff       	call   c0014824 <PhysicalDisk::~PhysicalDisk()>
c0028e61:	83 c4 10             	add    esp,0x10
c0028e64:	90                   	nop
c0028e65:	83 c4 0c             	add    esp,0xc
c0028e68:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0028e6a <ATAPI::~ATAPI()>:
c0028e6a:	83 ec 0c             	sub    esp,0xc
c0028e6d:	83 ec 0c             	sub    esp,0xc
c0028e70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e74:	e8 cd ff ff ff       	call   c0028e46 <ATAPI::~ATAPI()>
c0028e79:	83 c4 10             	add    esp,0x10
c0028e7c:	83 ec 08             	sub    esp,0x8
c0028e7f:	68 80 01 00 00       	push   0x180
c0028e84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e88:	e8 dd 9f fe ff       	call   c0012e6a <operator delete(void*, unsigned long)>
c0028e8d:	83 c4 10             	add    esp,0x10
c0028e90:	83 c4 0c             	add    esp,0xc
c0028e93:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028e94 <SATA::~SATA()>:
c0028e94:	83 ec 0c             	sub    esp,0xc
c0028e97:	ba d8 ce 02 c0       	mov    edx,0xc002ced8
c0028e9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ea0:	89 10                	mov    DWORD PTR [eax],edx
c0028ea2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ea6:	83 ec 0c             	sub    esp,0xc
c0028ea9:	50                   	push   eax
c0028eaa:	e8 75 b9 fe ff       	call   c0014824 <PhysicalDisk::~PhysicalDisk()>
c0028eaf:	83 c4 10             	add    esp,0x10
c0028eb2:	90                   	nop
c0028eb3:	83 c4 0c             	add    esp,0xc
c0028eb6:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028eb8 <SATA::~SATA()>:
c0028eb8:	83 ec 0c             	sub    esp,0xc
c0028ebb:	83 ec 0c             	sub    esp,0xc
c0028ebe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ec2:	e8 cd ff ff ff       	call   c0028e94 <SATA::~SATA()>
c0028ec7:	83 c4 10             	add    esp,0x10
c0028eca:	83 ec 08             	sub    esp,0x8
c0028ecd:	68 7c 01 00 00       	push   0x17c
c0028ed2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ed6:	e8 8f 9f fe ff       	call   c0012e6a <operator delete(void*, unsigned long)>
c0028edb:	83 c4 10             	add    esp,0x10
c0028ede:	83 c4 0c             	add    esp,0xc
c0028ee1:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028ee2 <SATAPI::~SATAPI()>:
c0028ee2:	83 ec 0c             	sub    esp,0xc
c0028ee5:	ba b4 cf 02 c0       	mov    edx,0xc002cfb4
c0028eea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028eee:	89 10                	mov    DWORD PTR [eax],edx
c0028ef0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ef4:	83 ec 0c             	sub    esp,0xc
c0028ef7:	50                   	push   eax
c0028ef8:	e8 27 b9 fe ff       	call   c0014824 <PhysicalDisk::~PhysicalDisk()>
c0028efd:	83 c4 10             	add    esp,0x10
c0028f00:	90                   	nop
c0028f01:	83 c4 0c             	add    esp,0xc
c0028f04:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0028f06 <SATAPI::~SATAPI()>:
c0028f06:	83 ec 0c             	sub    esp,0xc
c0028f09:	83 ec 0c             	sub    esp,0xc
c0028f0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f10:	e8 cd ff ff ff       	call   c0028ee2 <SATAPI::~SATAPI()>
c0028f15:	83 c4 10             	add    esp,0x10
c0028f18:	83 ec 08             	sub    esp,0x8
c0028f1b:	68 80 01 00 00       	push   0x180
c0028f20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f24:	e8 41 9f fe ff       	call   c0012e6a <operator delete(void*, unsigned long)>
c0028f29:	83 c4 10             	add    esp,0x10
c0028f2c:	83 c4 0c             	add    esp,0xc
c0028f2f:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0028f30 <AVX::~AVX()>:
c0028f30:	83 ec 0c             	sub    esp,0xc
c0028f33:	ba f4 cf 02 c0       	mov    edx,0xc002cff4
c0028f38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f3c:	89 10                	mov    DWORD PTR [eax],edx
c0028f3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f42:	83 ec 0c             	sub    esp,0xc
c0028f45:	50                   	push   eax
c0028f46:	e8 5d b9 fe ff       	call   c00148a8 <FPU::~FPU()>
c0028f4b:	83 c4 10             	add    esp,0x10
c0028f4e:	90                   	nop
c0028f4f:	83 c4 0c             	add    esp,0xc
c0028f52:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0028f54 <AVX::~AVX()>:
c0028f54:	83 ec 0c             	sub    esp,0xc
c0028f57:	83 ec 0c             	sub    esp,0xc
c0028f5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f5e:	e8 cd ff ff ff       	call   c0028f30 <AVX::~AVX()>
c0028f63:	83 c4 10             	add    esp,0x10
c0028f66:	83 ec 08             	sub    esp,0x8
c0028f69:	68 58 01 00 00       	push   0x158
c0028f6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f72:	e8 f3 9e fe ff       	call   c0012e6a <operator delete(void*, unsigned long)>
c0028f77:	83 c4 10             	add    esp,0x10
c0028f7a:	83 c4 0c             	add    esp,0xc
c0028f7d:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0028f7e <MMX::~MMX()>:
c0028f7e:	83 ec 0c             	sub    esp,0xc
c0028f81:	ba 34 d0 02 c0       	mov    edx,0xc002d034
c0028f86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f8a:	89 10                	mov    DWORD PTR [eax],edx
c0028f8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f90:	83 ec 0c             	sub    esp,0xc
c0028f93:	50                   	push   eax
c0028f94:	e8 0f b9 fe ff       	call   c00148a8 <FPU::~FPU()>
c0028f99:	83 c4 10             	add    esp,0x10
c0028f9c:	90                   	nop
c0028f9d:	83 c4 0c             	add    esp,0xc
c0028fa0:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0028fa2 <MMX::~MMX()>:
c0028fa2:	83 ec 0c             	sub    esp,0xc
c0028fa5:	83 ec 0c             	sub    esp,0xc
c0028fa8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fac:	e8 cd ff ff ff       	call   c0028f7e <MMX::~MMX()>
c0028fb1:	83 c4 10             	add    esp,0x10
c0028fb4:	83 ec 08             	sub    esp,0x8
c0028fb7:	68 58 01 00 00       	push   0x158
c0028fbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fc0:	e8 a5 9e fe ff       	call   c0012e6a <operator delete(void*, unsigned long)>
c0028fc5:	83 c4 10             	add    esp,0x10
c0028fc8:	83 c4 0c             	add    esp,0xc
c0028fcb:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0028fcc <SSE::~SSE()>:
c0028fcc:	83 ec 0c             	sub    esp,0xc
c0028fcf:	ba 74 d0 02 c0       	mov    edx,0xc002d074
c0028fd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fd8:	89 10                	mov    DWORD PTR [eax],edx
c0028fda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fde:	83 ec 0c             	sub    esp,0xc
c0028fe1:	50                   	push   eax
c0028fe2:	e8 c1 b8 fe ff       	call   c00148a8 <FPU::~FPU()>
c0028fe7:	83 c4 10             	add    esp,0x10
c0028fea:	90                   	nop
c0028feb:	83 c4 0c             	add    esp,0xc
c0028fee:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0028ff0 <SSE::~SSE()>:
c0028ff0:	83 ec 0c             	sub    esp,0xc
c0028ff3:	83 ec 0c             	sub    esp,0xc
c0028ff6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ffa:	e8 cd ff ff ff       	call   c0028fcc <SSE::~SSE()>
c0028fff:	83 c4 10             	add    esp,0x10
c0029002:	83 ec 08             	sub    esp,0x8
c0029005:	68 58 01 00 00       	push   0x158
c002900a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002900e:	e8 57 9e fe ff       	call   c0012e6a <operator delete(void*, unsigned long)>
c0029013:	83 c4 10             	add    esp,0x10
c0029016:	83 c4 0c             	add    esp,0xc
c0029019:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c002901a <x87::~x87()>:
c002901a:	83 ec 0c             	sub    esp,0xc
c002901d:	ba b4 d0 02 c0       	mov    edx,0xc002d0b4
c0029022:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029026:	89 10                	mov    DWORD PTR [eax],edx
c0029028:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002902c:	83 ec 0c             	sub    esp,0xc
c002902f:	50                   	push   eax
c0029030:	e8 73 b8 fe ff       	call   c00148a8 <FPU::~FPU()>
c0029035:	83 c4 10             	add    esp,0x10
c0029038:	90                   	nop
c0029039:	83 c4 0c             	add    esp,0xc
c002903c:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c002903e <x87::~x87()>:
c002903e:	83 ec 0c             	sub    esp,0xc
c0029041:	83 ec 0c             	sub    esp,0xc
c0029044:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029048:	e8 cd ff ff ff       	call   c002901a <x87::~x87()>
c002904d:	83 c4 10             	add    esp,0x10
c0029050:	83 ec 08             	sub    esp,0x8
c0029053:	68 58 01 00 00       	push   0x158
c0029058:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002905c:	e8 09 9e fe ff       	call   c0012e6a <operator delete(void*, unsigned long)>
c0029061:	83 c4 10             	add    esp,0x10
c0029064:	83 c4 0c             	add    esp,0xc
c0029067:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0029068 <IOAPIC::~IOAPIC()>:
c0029068:	83 ec 0c             	sub    esp,0xc
c002906b:	ba 0c d2 02 c0       	mov    edx,0xc002d20c
c0029070:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029074:	89 10                	mov    DWORD PTR [eax],edx
c0029076:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002907a:	83 ec 0c             	sub    esp,0xc
c002907d:	50                   	push   eax
c002907e:	e8 bf b1 fe ff       	call   c0014242 <Device::~Device()>
c0029083:	83 c4 10             	add    esp,0x10
c0029086:	90                   	nop
c0029087:	83 c4 0c             	add    esp,0xc
c002908a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002908c <IOAPIC::~IOAPIC()>:
c002908c:	83 ec 0c             	sub    esp,0xc
c002908f:	83 ec 0c             	sub    esp,0xc
c0029092:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029096:	e8 cd ff ff ff       	call   c0029068 <IOAPIC::~IOAPIC()>
c002909b:	83 c4 10             	add    esp,0x10
c002909e:	83 ec 08             	sub    esp,0x8
c00290a1:	68 68 01 00 00       	push   0x168
c00290a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290aa:	e8 bb 9d fe ff       	call   c0012e6a <operator delete(void*, unsigned long)>
c00290af:	83 c4 10             	add    esp,0x10
c00290b2:	83 c4 0c             	add    esp,0xc
c00290b5:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c00290b6 <APIC::~APIC()>:
c00290b6:	83 ec 0c             	sub    esp,0xc
c00290b9:	ba c4 d1 02 c0       	mov    edx,0xc002d1c4
c00290be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290c2:	89 10                	mov    DWORD PTR [eax],edx
c00290c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290c8:	83 ec 0c             	sub    esp,0xc
c00290cb:	50                   	push   eax
c00290cc:	e8 a1 bc fe ff       	call   c0014d72 <InterruptController::~InterruptController()>
c00290d1:	83 c4 10             	add    esp,0x10
c00290d4:	90                   	nop
c00290d5:	83 c4 0c             	add    esp,0xc
c00290d8:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c00290da <APIC::~APIC()>:
c00290da:	83 ec 0c             	sub    esp,0xc
c00290dd:	83 ec 0c             	sub    esp,0xc
c00290e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290e4:	e8 cd ff ff ff       	call   c00290b6 <APIC::~APIC()>
c00290e9:	83 c4 10             	add    esp,0x10
c00290ec:	83 ec 08             	sub    esp,0x8
c00290ef:	68 58 21 00 00       	push   0x2158
c00290f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290f8:	e8 6d 9d fe ff       	call   c0012e6a <operator delete(void*, unsigned long)>
c00290fd:	83 c4 10             	add    esp,0x10
c0029100:	83 c4 0c             	add    esp,0xc
c0029103:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0029104 <PIC::~PIC()>:
c0029104:	83 ec 0c             	sub    esp,0xc
c0029107:	ba 5c d2 02 c0       	mov    edx,0xc002d25c
c002910c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029110:	89 10                	mov    DWORD PTR [eax],edx
c0029112:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029116:	83 ec 0c             	sub    esp,0xc
c0029119:	50                   	push   eax
c002911a:	e8 53 bc fe ff       	call   c0014d72 <InterruptController::~InterruptController()>
c002911f:	83 c4 10             	add    esp,0x10
c0029122:	90                   	nop
c0029123:	83 c4 0c             	add    esp,0xc
c0029126:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0029128 <PIC::~PIC()>:
c0029128:	83 ec 0c             	sub    esp,0xc
c002912b:	83 ec 0c             	sub    esp,0xc
c002912e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029132:	e8 cd ff ff ff       	call   c0029104 <PIC::~PIC()>
c0029137:	83 c4 10             	add    esp,0x10
c002913a:	83 ec 08             	sub    esp,0x8
c002913d:	68 58 21 00 00       	push   0x2158
c0029142:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029146:	e8 1f 9d fe ff       	call   c0012e6a <operator delete(void*, unsigned long)>
c002914b:	83 c4 10             	add    esp,0x10
c002914e:	83 c4 0c             	add    esp,0xc
c0029151:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0029152 <APICTimer::~APICTimer()>:
c0029152:	83 ec 0c             	sub    esp,0xc
c0029155:	ba b0 d2 02 c0       	mov    edx,0xc002d2b0
c002915a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002915e:	89 10                	mov    DWORD PTR [eax],edx
c0029160:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029164:	83 ec 0c             	sub    esp,0xc
c0029167:	50                   	push   eax
c0029168:	e8 61 db fe ff       	call   c0016cce <Timer::~Timer()>
c002916d:	83 c4 10             	add    esp,0x10
c0029170:	90                   	nop
c0029171:	83 c4 0c             	add    esp,0xc
c0029174:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0029176 <APICTimer::~APICTimer()>:
c0029176:	83 ec 0c             	sub    esp,0xc
c0029179:	83 ec 0c             	sub    esp,0xc
c002917c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029180:	e8 cd ff ff ff       	call   c0029152 <APICTimer::~APICTimer()>
c0029185:	83 c4 10             	add    esp,0x10
c0029188:	83 ec 08             	sub    esp,0x8
c002918b:	68 60 01 00 00       	push   0x160
c0029190:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029194:	e8 d1 9c fe ff       	call   c0012e6a <operator delete(void*, unsigned long)>
c0029199:	83 c4 10             	add    esp,0x10
c002919c:	83 c4 0c             	add    esp,0xc
c002919f:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c00291a0 <PIT::~PIT()>:
c00291a0:	83 ec 0c             	sub    esp,0xc
c00291a3:	ba 00 d3 02 c0       	mov    edx,0xc002d300
c00291a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291ac:	89 10                	mov    DWORD PTR [eax],edx
c00291ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291b2:	83 ec 0c             	sub    esp,0xc
c00291b5:	50                   	push   eax
c00291b6:	e8 13 db fe ff       	call   c0016cce <Timer::~Timer()>
c00291bb:	83 c4 10             	add    esp,0x10
c00291be:	90                   	nop
c00291bf:	83 c4 0c             	add    esp,0xc
c00291c2:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c00291c4 <PIT::~PIT()>:
c00291c4:	83 ec 0c             	sub    esp,0xc
c00291c7:	83 ec 0c             	sub    esp,0xc
c00291ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291ce:	e8 cd ff ff ff       	call   c00291a0 <PIT::~PIT()>
c00291d3:	83 c4 10             	add    esp,0x10
c00291d6:	83 ec 08             	sub    esp,0x8
c00291d9:	68 5c 01 00 00       	push   0x15c
c00291de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291e2:	e8 83 9c fe ff       	call   c0012e6a <operator delete(void*, unsigned long)>
c00291e7:	83 c4 10             	add    esp,0x10
c00291ea:	83 c4 0c             	add    esp,0xc
c00291ed:	c3                   	ret    
