
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 0d fc 00 00       	call   c000fc2d <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 63 92 02 00       	call   c0029288 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 1e 9f 02 c0       	mov    ebx,0xc0029f1e
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 2c 9f 02 c0    	cmp    ebx,0xc0029f2c
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 18 e8 02 c0       	mov    eax,0xc002e818
c0000049:	3d 18 e8 02 c0       	cmp    eax,0xc002e818
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 18 e8 02 c0       	push   0xc002e818
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 18 e8 02 c0       	mov    eax,0xc002e818
c0000075:	2d 18 e8 02 c0       	sub    eax,0xc002e818
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 18 e8 02 c0       	push   0xc002e818
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 48 ee 02 c0 00 	cmp    BYTE PTR ds:0xc002ee48,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 34 9f 02 c0       	mov    ebx,0xc0029f34
c00000bb:	81 eb 30 9f 02 c0    	sub    ebx,0xc0029f30
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 30 9f 02 c0       	mov    esi,0xc0029f30
c00000ca:	a1 4c ee 02 c0       	mov    eax,ds:0xc002ee4c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 4c ee 02 c0       	mov    ds:0xc002ee4c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 4c ee 02 c0       	mov    eax,ds:0xc002ee4c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 18 e8 02 c0       	push   0xc002e818
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 48 ee 02 c0 01 	mov    BYTE PTR ds:0xc002ee48,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 50 ee 02 c0       	push   0xc002ee50
c000012c:	68 18 e8 02 c0       	push   0xc002e818
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	0f 20 c0             	mov    eax,cr0
c0000392:	0c 08                	or     al,0x8
c0000394:	0f 22 c0             	mov    cr0,eax
c0000397:	85 d2                	test   edx,edx
c0000399:	75 11                	jne    c00003ac <commonThreadSwitch.firstTime>
c000039b:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000039e:	e8 a9 db 01 00       	call   c001df4c <changeTSS>
c00003a3:	5d                   	pop    ebp
c00003a4:	5f                   	pop    edi
c00003a5:	5e                   	pop    esi
c00003a6:	5a                   	pop    edx
c00003a7:	59                   	pop    ecx
c00003a8:	5b                   	pop    ebx
c00003a9:	58                   	pop    eax
c00003aa:	9d                   	popf   
c00003ab:	c3                   	ret    

c00003ac <commonThreadSwitch.firstTime>:
c00003ac:	fa                   	cli    
c00003ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003b0:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003b5:	60                   	pusha  
c00003b6:	e8 76 28 01 00       	call   c0012c31 <mapVASFirstTime>
c00003bb:	61                   	popa   
c00003bc:	89 c4                	mov    esp,eax
c00003be:	56                   	push   esi
c00003bf:	52                   	push   edx
c00003c0:	e8 87 db 01 00       	call   c001df4c <changeTSS>
c00003c5:	5a                   	pop    edx
c00003c6:	5e                   	pop    esi
c00003c7:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003ce:	5d                   	pop    ebp
c00003cf:	5f                   	pop    edi
c00003d0:	5e                   	pop    esi
c00003d1:	59                   	pop    ecx
c00003d2:	59                   	pop    ecx
c00003d3:	5b                   	pop    ebx
c00003d4:	58                   	pop    eax
c00003d5:	81 c4 04 00 00 00    	add    esp,0x4
c00003db:	6a 02                	push   0x2
c00003dd:	9d                   	popf   
c00003de:	52                   	push   edx
c00003df:	e8 2f e0 01 00       	call   c001e413 <taskStartupFunction>
c00003e4:	5a                   	pop    edx
c00003e5:	50                   	push   eax
c00003e6:	ff d2                	call   edx
c00003e8:	e8 8d e6 01 00       	call   c001ea7a <taskReturned>
c00003ed:	e9 fb ff ff ff       	jmp    c00003ed <commonThreadSwitch.firstTime+0x41>

c00003f2 <asmQuickAcquireLock>:
c00003f2:	55                   	push   ebp
c00003f3:	89 e5                	mov    ebp,esp
c00003f5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f8 <asmQuickAcquireLock.retry>:
c00003f8:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003fd:	72 02                	jb     c0000401 <asmQuickAcquireLock.spin_with_pause>
c00003ff:	fa                   	cli    
c0000400:	c3                   	ret    

c0000401 <asmQuickAcquireLock.spin_with_pause>:
c0000401:	f3 90                	pause  
c0000403:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000409:	75 f6                	jne    c0000401 <asmQuickAcquireLock.spin_with_pause>
c000040b:	e9 e8 ff ff ff       	jmp    c00003f8 <asmQuickAcquireLock.retry>

c0000410 <asmQuickReleaseLock>:
c0000410:	55                   	push   ebp
c0000411:	89 e5                	mov    ebp,esp
c0000413:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000041a:	5d                   	pop    ebp
c000041b:	c3                   	ret    

c000041c <asmAcquireLock>:
c000041c:	55                   	push   ebp
c000041d:	89 e5                	mov    ebp,esp
c000041f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000422 <asmAcquireLock.retry>:
c0000422:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000427:	72 05                	jb     c000042e <asmAcquireLock.spin_with_pause>
c0000429:	9c                   	pushf  
c000042a:	58                   	pop    eax
c000042b:	fa                   	cli    
c000042c:	5d                   	pop    ebp
c000042d:	c3                   	ret    

c000042e <asmAcquireLock.spin_with_pause>:
c000042e:	f3 90                	pause  
c0000430:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000436:	75 f6                	jne    c000042e <asmAcquireLock.spin_with_pause>
c0000438:	e9 e5 ff ff ff       	jmp    c0000422 <asmAcquireLock.retry>

c000043d <asmReleaseLock>:
c000043d:	55                   	push   ebp
c000043e:	89 e5                	mov    ebp,esp
c0000440:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000443:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000446:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000044c:	52                   	push   edx
c000044d:	9d                   	popf   
c000044e:	5d                   	pop    ebp
c000044f:	c3                   	ret    

c0000450 <loadGDT>:
c0000450:	0f 01 15 90 f2 02 c0 	lgdtd  ds:0xc002f290
c0000457:	66 b8 10 00          	mov    ax,0x10
c000045b:	66 8e d8             	mov    ds,ax
c000045e:	66 8e c0             	mov    es,ax
c0000461:	66 8e e0             	mov    fs,ax
c0000464:	66 8e e8             	mov    gs,ax
c0000467:	66 8e d0             	mov    ss,ax
c000046a:	e9 00 00 00 00       	jmp    c000046f <flush2>

c000046f <flush2>:
c000046f:	c3                   	ret    

c0000470 <isr0>:
c0000470:	fa                   	cli    
c0000471:	68 00 00 00 00       	push   0x0
c0000476:	68 00 00 00 00       	push   0x0
c000047b:	e9 44 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000480 <isr1>:
c0000480:	fa                   	cli    
c0000481:	6a 00                	push   0x0
c0000483:	6a 01                	push   0x1
c0000485:	e9 3a 01 00 00       	jmp    c00005c4 <int_common_stub>

c000048a <isr2>:
c000048a:	fa                   	cli    
c000048b:	6a 00                	push   0x0
c000048d:	6a 02                	push   0x2
c000048f:	e9 30 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000494 <isr3>:
c0000494:	fa                   	cli    
c0000495:	6a 00                	push   0x0
c0000497:	6a 03                	push   0x3
c0000499:	e9 26 01 00 00       	jmp    c00005c4 <int_common_stub>

c000049e <isr4>:
c000049e:	fa                   	cli    
c000049f:	6a 00                	push   0x0
c00004a1:	6a 04                	push   0x4
c00004a3:	e9 1c 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004a8 <isr5>:
c00004a8:	fa                   	cli    
c00004a9:	6a 00                	push   0x0
c00004ab:	6a 05                	push   0x5
c00004ad:	e9 12 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004b2 <isr6>:
c00004b2:	fa                   	cli    
c00004b3:	6a 00                	push   0x0
c00004b5:	6a 06                	push   0x6
c00004b7:	e9 08 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004bc <isr7>:
c00004bc:	fa                   	cli    
c00004bd:	6a 00                	push   0x0
c00004bf:	6a 07                	push   0x7
c00004c1:	e9 fe 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004c6 <isr8>:
c00004c6:	fa                   	cli    
c00004c7:	6a 08                	push   0x8
c00004c9:	e9 f6 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004ce <isr9>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 09                	push   0x9
c00004d3:	e9 ec 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004d8 <isr10>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0a                	push   0xa
c00004db:	e9 e4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e0 <isr11>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0b                	push   0xb
c00004e3:	e9 dc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e8 <isr12>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0c                	push   0xc
c00004eb:	e9 d4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f0 <isr13>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0d                	push   0xd
c00004f3:	e9 cc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f8 <isr14>:
c00004f8:	fa                   	cli    
c00004f9:	6a 0e                	push   0xe
c00004fb:	e9 c4 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000500 <isr15>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 0f                	push   0xf
c0000505:	e9 ba 00 00 00       	jmp    c00005c4 <int_common_stub>

c000050a <isr16>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 10                	push   0x10
c000050f:	e9 b0 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000514 <isr17>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 11                	push   0x11
c0000519:	e9 a6 00 00 00       	jmp    c00005c4 <int_common_stub>

c000051e <isr18>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 12                	push   0x12
c0000523:	e9 9c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000528 <irq3>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 23                	push   0x23
c000052d:	e9 92 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000532 <irq4>:
c0000532:	fa                   	cli    
c0000533:	6a 00                	push   0x0
c0000535:	6a 24                	push   0x24
c0000537:	e9 88 00 00 00       	jmp    c00005c4 <int_common_stub>

c000053c <irq5>:
c000053c:	fa                   	cli    
c000053d:	6a 00                	push   0x0
c000053f:	6a 25                	push   0x25
c0000541:	e9 7e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000546 <irq6>:
c0000546:	fa                   	cli    
c0000547:	6a 00                	push   0x0
c0000549:	6a 26                	push   0x26
c000054b:	e9 74 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000550 <irq7>:
c0000550:	fa                   	cli    
c0000551:	6a 00                	push   0x0
c0000553:	6a 27                	push   0x27
c0000555:	e9 6a 00 00 00       	jmp    c00005c4 <int_common_stub>

c000055a <irq8>:
c000055a:	fa                   	cli    
c000055b:	6a 00                	push   0x0
c000055d:	6a 28                	push   0x28
c000055f:	e9 60 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000564 <irq9>:
c0000564:	fa                   	cli    
c0000565:	6a 00                	push   0x0
c0000567:	6a 29                	push   0x29
c0000569:	e9 56 00 00 00       	jmp    c00005c4 <int_common_stub>

c000056e <irq10>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 2a                	push   0x2a
c0000573:	e9 4c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000578 <irq11>:
c0000578:	fa                   	cli    
c0000579:	6a 00                	push   0x0
c000057b:	6a 2b                	push   0x2b
c000057d:	e9 42 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000582 <irq12>:
c0000582:	fa                   	cli    
c0000583:	6a 00                	push   0x0
c0000585:	6a 2c                	push   0x2c
c0000587:	e9 38 00 00 00       	jmp    c00005c4 <int_common_stub>

c000058c <irq13>:
c000058c:	fa                   	cli    
c000058d:	6a 00                	push   0x0
c000058f:	6a 2d                	push   0x2d
c0000591:	e9 2e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000596 <irq14>:
c0000596:	fa                   	cli    
c0000597:	6a 00                	push   0x0
c0000599:	6a 2e                	push   0x2e
c000059b:	e9 24 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005a0 <irq15>:
c00005a0:	fa                   	cli    
c00005a1:	6a 00                	push   0x0
c00005a3:	6a 2f                	push   0x2f
c00005a5:	e9 1a 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005aa <irq1>:
c00005aa:	fa                   	cli    
c00005ab:	6a 00                	push   0x0
c00005ad:	6a 21                	push   0x21
c00005af:	eb 13                	jmp    c00005c4 <int_common_stub>

c00005b1 <irq2>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 22                	push   0x22
c00005b6:	eb 0c                	jmp    c00005c4 <int_common_stub>

c00005b8 <isr96>:
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 60                	push   0x60
c00005bc:	fb                   	sti    
c00005bd:	eb 05                	jmp    c00005c4 <int_common_stub>

c00005bf <irq0>:
c00005bf:	fa                   	cli    
c00005c0:	6a 00                	push   0x0
c00005c2:	6a 20                	push   0x20

c00005c4 <int_common_stub>:
c00005c4:	60                   	pusha  
c00005c5:	1e                   	push   ds
c00005c6:	06                   	push   es
c00005c7:	0f a0                	push   fs
c00005c9:	0f a8                	push   gs
c00005cb:	66 b8 10 00          	mov    ax,0x10
c00005cf:	66 8e d8             	mov    ds,ax
c00005d2:	66 8e c0             	mov    es,ax
c00005d5:	66 8e e0             	mov    fs,ax
c00005d8:	66 8e e8             	mov    gs,ax
c00005db:	54                   	push   esp
c00005dc:	fc                   	cld    
c00005dd:	e8 5b 45 01 00       	call   c0014b3d <int_handler>
c00005e2:	81 c4 04 00 00 00    	add    esp,0x4
c00005e8:	0f a9                	pop    gs
c00005ea:	0f a1                	pop    fs
c00005ec:	07                   	pop    es
c00005ed:	1f                   	pop    ds
c00005ee:	61                   	popa   
c00005ef:	81 c4 08 00 00 00    	add    esp,0x8
c00005f5:	cf                   	iret   

c00005f6 <irq16>:
c00005f6:	fa                   	cli    
c00005f7:	6a 00                	push   0x0
c00005f9:	6a 30                	push   0x30
c00005fb:	e9 c4 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000600 <irq17>:
c0000600:	fa                   	cli    
c0000601:	6a 00                	push   0x0
c0000603:	6a 31                	push   0x31
c0000605:	e9 ba ff ff ff       	jmp    c00005c4 <int_common_stub>

c000060a <irq18>:
c000060a:	fa                   	cli    
c000060b:	6a 00                	push   0x0
c000060d:	6a 32                	push   0x32
c000060f:	e9 b0 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000614 <irq19>:
c0000614:	fa                   	cli    
c0000615:	6a 00                	push   0x0
c0000617:	6a 33                	push   0x33
c0000619:	e9 a6 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000061e <irq20>:
c000061e:	fa                   	cli    
c000061f:	6a 00                	push   0x0
c0000621:	6a 34                	push   0x34
c0000623:	e9 9c ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000628 <irq21>:
c0000628:	fa                   	cli    
c0000629:	6a 00                	push   0x0
c000062b:	6a 35                	push   0x35
c000062d:	e9 92 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000632 <irq22>:
c0000632:	fa                   	cli    
c0000633:	6a 00                	push   0x0
c0000635:	6a 36                	push   0x36
c0000637:	e9 88 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000063c <irq23>:
c000063c:	fa                   	cli    
c000063d:	6a 00                	push   0x0
c000063f:	6a 37                	push   0x37
c0000641:	e9 7e ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000646 <hexStrToInt>:
c0000646:	56                   	push   esi
c0000647:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000064b:	31 d2                	xor    edx,edx

c000064d <hexStrToInt.looping>:
c000064d:	ac                   	lods   al,BYTE PTR ds:[esi]
c000064e:	84 c0                	test   al,al
c0000650:	74 0d                	je     c000065f <hexStrToInt.end>
c0000652:	d4 40                	aam    0x40
c0000654:	d5 39                	aad    0x39
c0000656:	2c 30                	sub    al,0x30
c0000658:	c1 e2 04             	shl    edx,0x4
c000065b:	08 c2                	or     dl,al
c000065d:	eb ee                	jmp    c000064d <hexStrToInt.looping>

c000065f <hexStrToInt.end>:
c000065f:	89 d0                	mov    eax,edx
c0000661:	5e                   	pop    esi
c0000662:	c3                   	ret    

c0000663 <memcpy>:
c0000663:	e9 de de 00 00       	jmp    c000e546 <__not_memcpy>

c0000668 <memcmp>:
c0000668:	56                   	push   esi
c0000669:	53                   	push   ebx
c000066a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000066e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000672:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000676:	85 f6                	test   esi,esi
c0000678:	74 1d                	je     c0000697 <memcmp+0x2f>
c000067a:	8a 08                	mov    cl,BYTE PTR [eax]
c000067c:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c000067f:	38 cb                	cmp    bl,cl
c0000681:	75 19                	jne    c000069c <memcmp+0x34>
c0000683:	01 c6                	add    esi,eax
c0000685:	eb 0a                	jmp    c0000691 <memcmp+0x29>
c0000687:	90                   	nop
c0000688:	8a 08                	mov    cl,BYTE PTR [eax]
c000068a:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c000068d:	38 d9                	cmp    cl,bl
c000068f:	75 0b                	jne    c000069c <memcmp+0x34>
c0000691:	40                   	inc    eax
c0000692:	42                   	inc    edx
c0000693:	39 f0                	cmp    eax,esi
c0000695:	75 f1                	jne    c0000688 <memcmp+0x20>
c0000697:	31 c0                	xor    eax,eax
c0000699:	5b                   	pop    ebx
c000069a:	5e                   	pop    esi
c000069b:	c3                   	ret    
c000069c:	0f b6 c1             	movzx  eax,cl
c000069f:	29 d8                	sub    eax,ebx
c00006a1:	5b                   	pop    ebx
c00006a2:	5e                   	pop    esi
c00006a3:	c3                   	ret    

c00006a4 <memmove>:
c00006a4:	55                   	push   ebp
c00006a5:	57                   	push   edi
c00006a6:	56                   	push   esi
c00006a7:	53                   	push   ebx
c00006a8:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00006ac:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00006b0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00006b4:	39 dd                	cmp    ebp,ebx
c00006b6:	0f 83 80 00 00 00    	jae    c000073c <memmove+0x98>
c00006bc:	85 d2                	test   edx,edx
c00006be:	74 74                	je     c0000734 <memmove+0x90>
c00006c0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00006c3:	8d 75 04             	lea    esi,[ebp+0x4]
c00006c6:	39 cd                	cmp    ebp,ecx
c00006c8:	0f 93 c1             	setae  cl
c00006cb:	39 f3                	cmp    ebx,esi
c00006cd:	0f 93 c0             	setae  al
c00006d0:	89 c6                	mov    esi,eax
c00006d2:	09 ce                	or     esi,ecx
c00006d4:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006d7:	89 f0                	mov    eax,esi
c00006d9:	83 f9 0c             	cmp    ecx,0xc
c00006dc:	0f 97 c1             	seta   cl
c00006df:	84 c8                	test   al,cl
c00006e1:	74 75                	je     c0000758 <memmove+0xb4>
c00006e3:	89 e9                	mov    ecx,ebp
c00006e5:	09 d9                	or     ecx,ebx
c00006e7:	83 e1 03             	and    ecx,0x3
c00006ea:	75 6c                	jne    c0000758 <memmove+0xb4>
c00006ec:	89 d7                	mov    edi,edx
c00006ee:	89 d9                	mov    ecx,ebx
c00006f0:	83 e7 fc             	and    edi,0xfffffffc
c00006f3:	89 ee                	mov    esi,ebp
c00006f5:	01 df                	add    edi,ebx
c00006f7:	90                   	nop
c00006f8:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006fa:	83 c6 04             	add    esi,0x4
c00006fd:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000700:	83 c1 04             	add    ecx,0x4
c0000703:	39 f9                	cmp    ecx,edi
c0000705:	75 f1                	jne    c00006f8 <memmove+0x54>
c0000707:	89 d1                	mov    ecx,edx
c0000709:	89 d7                	mov    edi,edx
c000070b:	83 e1 fc             	and    ecx,0xfffffffc
c000070e:	29 cf                	sub    edi,ecx
c0000710:	01 cb                	add    ebx,ecx
c0000712:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c0000716:	39 ca                	cmp    edx,ecx
c0000718:	74 1a                	je     c0000734 <memmove+0x90>
c000071a:	8a 03                	mov    al,BYTE PTR [ebx]
c000071c:	83 ff 01             	cmp    edi,0x1
c000071f:	88 06                	mov    BYTE PTR [esi],al
c0000721:	74 11                	je     c0000734 <memmove+0x90>
c0000723:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0000726:	83 ff 02             	cmp    edi,0x2
c0000729:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c000072c:	74 06                	je     c0000734 <memmove+0x90>
c000072e:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000731:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000734:	5b                   	pop    ebx
c0000735:	89 e8                	mov    eax,ebp
c0000737:	5e                   	pop    esi
c0000738:	5f                   	pop    edi
c0000739:	5d                   	pop    ebp
c000073a:	c3                   	ret    
c000073b:	90                   	nop
c000073c:	76 f6                	jbe    c0000734 <memmove+0x90>
c000073e:	85 d2                	test   edx,edx
c0000740:	74 f2                	je     c0000734 <memmove+0x90>
c0000742:	4b                   	dec    ebx
c0000743:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000746:	66 90                	xchg   ax,ax
c0000748:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c000074b:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c000074e:	4a                   	dec    edx
c000074f:	75 f7                	jne    c0000748 <memmove+0xa4>
c0000751:	5b                   	pop    ebx
c0000752:	89 e8                	mov    eax,ebp
c0000754:	5e                   	pop    esi
c0000755:	5f                   	pop    edi
c0000756:	5d                   	pop    ebp
c0000757:	c3                   	ret    
c0000758:	01 ea                	add    edx,ebp
c000075a:	89 e9                	mov    ecx,ebp
c000075c:	8a 03                	mov    al,BYTE PTR [ebx]
c000075e:	41                   	inc    ecx
c000075f:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c0000762:	43                   	inc    ebx
c0000763:	39 d1                	cmp    ecx,edx
c0000765:	75 f5                	jne    c000075c <memmove+0xb8>
c0000767:	eb cb                	jmp    c0000734 <memmove+0x90>
c0000769:	8d 76 00             	lea    esi,[esi+0x0]

c000076c <memset>:
c000076c:	57                   	push   edi
c000076d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000771:	85 c9                	test   ecx,ecx
c0000773:	74 0b                	je     c0000780 <memset+0x14>
c0000775:	fc                   	cld    
c0000776:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000077a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000077e:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000780:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000784:	5f                   	pop    edi
c0000785:	c3                   	ret    
c0000786:	66 90                	xchg   ax,ax

c0000788 <strlen>:
c0000788:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000078c:	31 c0                	xor    eax,eax
c000078e:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000791:	74 09                	je     c000079c <strlen+0x14>
c0000793:	90                   	nop
c0000794:	40                   	inc    eax
c0000795:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000799:	75 f9                	jne    c0000794 <strlen+0xc>
c000079b:	c3                   	ret    
c000079c:	c3                   	ret    
c000079d:	8d 76 00             	lea    esi,[esi+0x0]

c00007a0 <strpbrk>:
c00007a0:	57                   	push   edi
c00007a1:	56                   	push   esi
c00007a2:	53                   	push   ebx
c00007a3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ab:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007ad:	84 db                	test   bl,bl
c00007af:	74 21                	je     c00007d2 <strpbrk+0x32>
c00007b1:	8a 07                	mov    al,BYTE PTR [edi]
c00007b3:	84 c0                	test   al,al
c00007b5:	74 14                	je     c00007cb <strpbrk+0x2b>
c00007b7:	38 d8                	cmp    al,bl
c00007b9:	74 19                	je     c00007d4 <strpbrk+0x34>
c00007bb:	89 fa                	mov    edx,edi
c00007bd:	eb 05                	jmp    c00007c4 <strpbrk+0x24>
c00007bf:	90                   	nop
c00007c0:	38 d9                	cmp    cl,bl
c00007c2:	74 10                	je     c00007d4 <strpbrk+0x34>
c00007c4:	42                   	inc    edx
c00007c5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007c7:	84 c9                	test   cl,cl
c00007c9:	75 f5                	jne    c00007c0 <strpbrk+0x20>
c00007cb:	46                   	inc    esi
c00007cc:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007ce:	84 db                	test   bl,bl
c00007d0:	75 e1                	jne    c00007b3 <strpbrk+0x13>
c00007d2:	31 f6                	xor    esi,esi
c00007d4:	89 f0                	mov    eax,esi
c00007d6:	5b                   	pop    ebx
c00007d7:	5e                   	pop    esi
c00007d8:	5f                   	pop    edi
c00007d9:	c3                   	ret    
c00007da:	66 90                	xchg   ax,ax

c00007dc <strtok>:
c00007dc:	56                   	push   esi
c00007dd:	53                   	push   ebx
c00007de:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007e2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007e6:	85 db                	test   ebx,ebx
c00007e8:	75 07                	jne    c00007f1 <strtok+0x15>
c00007ea:	eb 2c                	jmp    c0000818 <strtok+0x3c>
c00007ec:	43                   	inc    ebx
c00007ed:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007f1:	56                   	push   esi
c00007f2:	53                   	push   ebx
c00007f3:	e8 a8 ff ff ff       	call   c00007a0 <strpbrk>
c00007f8:	5a                   	pop    edx
c00007f9:	a3 68 ee 02 c0       	mov    ds:0xc002ee68,eax
c00007fe:	59                   	pop    ecx
c00007ff:	39 d8                	cmp    eax,ebx
c0000801:	74 e9                	je     c00007ec <strtok+0x10>
c0000803:	85 c0                	test   eax,eax
c0000805:	74 1b                	je     c0000822 <strtok+0x46>
c0000807:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000080a:	8d 50 01             	lea    edx,[eax+0x1]
c000080d:	89 d8                	mov    eax,ebx
c000080f:	89 15 68 ee 02 c0    	mov    DWORD PTR ds:0xc002ee68,edx
c0000815:	5b                   	pop    ebx
c0000816:	5e                   	pop    esi
c0000817:	c3                   	ret    
c0000818:	8b 1d 68 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002ee68
c000081e:	85 db                	test   ebx,ebx
c0000820:	75 cf                	jne    c00007f1 <strtok+0x15>
c0000822:	31 c0                	xor    eax,eax
c0000824:	5b                   	pop    ebx
c0000825:	5e                   	pop    esi
c0000826:	c3                   	ret    
c0000827:	90                   	nop

c0000828 <strcpy>:
c0000828:	53                   	push   ebx
c0000829:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000082d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000831:	89 c3                	mov    ebx,eax
c0000833:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000835:	84 d2                	test   dl,dl
c0000837:	74 0d                	je     c0000846 <strcpy+0x1e>
c0000839:	8d 76 00             	lea    esi,[esi+0x0]
c000083c:	88 13                	mov    BYTE PTR [ebx],dl
c000083e:	41                   	inc    ecx
c000083f:	43                   	inc    ebx
c0000840:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000842:	84 d2                	test   dl,dl
c0000844:	75 f6                	jne    c000083c <strcpy+0x14>
c0000846:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000849:	5b                   	pop    ebx
c000084a:	c3                   	ret    
c000084b:	90                   	nop

c000084c <strncpy>:
c000084c:	55                   	push   ebp
c000084d:	57                   	push   edi
c000084e:	56                   	push   esi
c000084f:	53                   	push   ebx
c0000850:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000854:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000858:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000085c:	85 c0                	test   eax,eax
c000085e:	74 39                	je     c0000899 <strncpy+0x4d>
c0000860:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000862:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000865:	8d 55 01             	lea    edx,[ebp+0x1]
c0000868:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000086b:	84 db                	test   bl,bl
c000086d:	74 31                	je     c00008a0 <strncpy+0x54>
c000086f:	85 c9                	test   ecx,ecx
c0000871:	74 26                	je     c0000899 <strncpy+0x4d>
c0000873:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000876:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000879:	8d 55 02             	lea    edx,[ebp+0x2]
c000087c:	8d 46 02             	lea    eax,[esi+0x2]
c000087f:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000882:	84 db                	test   bl,bl
c0000884:	75 0f                	jne    c0000895 <strncpy+0x49>
c0000886:	eb 18                	jmp    c00008a0 <strncpy+0x54>
c0000888:	40                   	inc    eax
c0000889:	42                   	inc    edx
c000088a:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c000088d:	49                   	dec    ecx
c000088e:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000891:	84 db                	test   bl,bl
c0000893:	74 0b                	je     c00008a0 <strncpy+0x54>
c0000895:	85 c9                	test   ecx,ecx
c0000897:	75 ef                	jne    c0000888 <strncpy+0x3c>
c0000899:	5b                   	pop    ebx
c000089a:	89 e8                	mov    eax,ebp
c000089c:	5e                   	pop    esi
c000089d:	5f                   	pop    edi
c000089e:	5d                   	pop    ebp
c000089f:	c3                   	ret    
c00008a0:	85 c9                	test   ecx,ecx
c00008a2:	74 f5                	je     c0000899 <strncpy+0x4d>
c00008a4:	fc                   	cld    
c00008a5:	31 c0                	xor    eax,eax
c00008a7:	89 d7                	mov    edi,edx
c00008a9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00008ab:	89 e8                	mov    eax,ebp
c00008ad:	5b                   	pop    ebx
c00008ae:	5e                   	pop    esi
c00008af:	5f                   	pop    edi
c00008b0:	5d                   	pop    ebp
c00008b1:	c3                   	ret    
c00008b2:	66 90                	xchg   ax,ax

c00008b4 <strcmp>:
c00008b4:	56                   	push   esi
c00008b5:	53                   	push   ebx
c00008b6:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00008ba:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008be:	8a 16                	mov    dl,BYTE PTR [esi]
c00008c0:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008c3:	38 d1                	cmp    cl,dl
c00008c5:	75 1d                	jne    c00008e4 <strcmp+0x30>
c00008c7:	84 c9                	test   cl,cl
c00008c9:	74 21                	je     c00008ec <strcmp+0x38>
c00008cb:	b8 01 00 00 00       	mov    eax,0x1
c00008d0:	eb 07                	jmp    c00008d9 <strcmp+0x25>
c00008d2:	66 90                	xchg   ax,ax
c00008d4:	40                   	inc    eax
c00008d5:	84 d2                	test   dl,dl
c00008d7:	74 13                	je     c00008ec <strcmp+0x38>
c00008d9:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008dc:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008e0:	38 ca                	cmp    dl,cl
c00008e2:	74 f0                	je     c00008d4 <strcmp+0x20>
c00008e4:	0f b6 c2             	movzx  eax,dl
c00008e7:	5b                   	pop    ebx
c00008e8:	29 c8                	sub    eax,ecx
c00008ea:	5e                   	pop    esi
c00008eb:	c3                   	ret    
c00008ec:	31 c0                	xor    eax,eax
c00008ee:	5b                   	pop    ebx
c00008ef:	5e                   	pop    esi
c00008f0:	c3                   	ret    
c00008f1:	8d 76 00             	lea    esi,[esi+0x0]

c00008f4 <strchr>:
c00008f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008f8:	8a 10                	mov    dl,BYTE PTR [eax]
c00008fa:	84 d2                	test   dl,dl
c00008fc:	74 15                	je     c0000913 <strchr+0x1f>
c00008fe:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0000902:	38 ca                	cmp    dl,cl
c0000904:	75 06                	jne    c000090c <strchr+0x18>
c0000906:	eb 0e                	jmp    c0000916 <strchr+0x22>
c0000908:	38 ca                	cmp    dl,cl
c000090a:	74 09                	je     c0000915 <strchr+0x21>
c000090c:	40                   	inc    eax
c000090d:	8a 10                	mov    dl,BYTE PTR [eax]
c000090f:	84 d2                	test   dl,dl
c0000911:	75 f5                	jne    c0000908 <strchr+0x14>
c0000913:	31 c0                	xor    eax,eax
c0000915:	c3                   	ret    
c0000916:	c3                   	ret    
c0000917:	90                   	nop

c0000918 <strncmp>:
c0000918:	57                   	push   edi
c0000919:	56                   	push   esi
c000091a:	53                   	push   ebx
c000091b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000091f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000923:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000927:	85 ff                	test   edi,edi
c0000929:	74 28                	je     c0000953 <strncmp+0x3b>
c000092b:	8a 16                	mov    dl,BYTE PTR [esi]
c000092d:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000930:	38 d1                	cmp    cl,dl
c0000932:	75 28                	jne    c000095c <strncmp+0x44>
c0000934:	8d 46 01             	lea    eax,[esi+0x1]
c0000937:	84 c9                	test   cl,cl
c0000939:	74 18                	je     c0000953 <strncmp+0x3b>
c000093b:	01 fe                	add    esi,edi
c000093d:	eb 0f                	jmp    c000094e <strncmp+0x36>
c000093f:	90                   	nop
c0000940:	8a 10                	mov    dl,BYTE PTR [eax]
c0000942:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000945:	38 ca                	cmp    dl,cl
c0000947:	75 13                	jne    c000095c <strncmp+0x44>
c0000949:	40                   	inc    eax
c000094a:	84 d2                	test   dl,dl
c000094c:	74 05                	je     c0000953 <strncmp+0x3b>
c000094e:	43                   	inc    ebx
c000094f:	39 c6                	cmp    esi,eax
c0000951:	75 ed                	jne    c0000940 <strncmp+0x28>
c0000953:	5b                   	pop    ebx
c0000954:	31 c0                	xor    eax,eax
c0000956:	5e                   	pop    esi
c0000957:	5f                   	pop    edi
c0000958:	c3                   	ret    
c0000959:	8d 76 00             	lea    esi,[esi+0x0]
c000095c:	5b                   	pop    ebx
c000095d:	0f b6 c2             	movzx  eax,dl
c0000960:	5e                   	pop    esi
c0000961:	29 c8                	sub    eax,ecx
c0000963:	5f                   	pop    edi
c0000964:	c3                   	ret    
c0000965:	8d 76 00             	lea    esi,[esi+0x0]

c0000968 <strcat>:
c0000968:	56                   	push   esi
c0000969:	53                   	push   ebx
c000096a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000096e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000972:	89 c3                	mov    ebx,eax
c0000974:	eb 04                	jmp    c000097a <strcat+0x12>
c0000976:	66 90                	xchg   ax,ax
c0000978:	89 d3                	mov    ebx,edx
c000097a:	8d 53 01             	lea    edx,[ebx+0x1]
c000097d:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000981:	75 f5                	jne    c0000978 <strcat+0x10>
c0000983:	31 d2                	xor    edx,edx
c0000985:	8d 76 00             	lea    esi,[esi+0x0]
c0000988:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000098b:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c000098e:	42                   	inc    edx
c000098f:	84 c9                	test   cl,cl
c0000991:	75 f5                	jne    c0000988 <strcat+0x20>
c0000993:	5b                   	pop    ebx
c0000994:	5e                   	pop    esi
c0000995:	c3                   	ret    
c0000996:	66 90                	xchg   ax,ax

c0000998 <strncat>:
c0000998:	56                   	push   esi
c0000999:	53                   	push   ebx
c000099a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000099e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00009a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00009a6:	85 f6                	test   esi,esi
c00009a8:	74 1e                	je     c00009c8 <strncat+0x30>
c00009aa:	89 c2                	mov    edx,eax
c00009ac:	42                   	inc    edx
c00009ad:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00009b1:	75 f9                	jne    c00009ac <strncat+0x14>
c00009b3:	01 ce                	add    esi,ecx
c00009b5:	eb 06                	jmp    c00009bd <strncat+0x25>
c00009b7:	90                   	nop
c00009b8:	39 f1                	cmp    ecx,esi
c00009ba:	74 10                	je     c00009cc <strncat+0x34>
c00009bc:	42                   	inc    edx
c00009bd:	41                   	inc    ecx
c00009be:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009c1:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009c4:	84 db                	test   bl,bl
c00009c6:	75 f0                	jne    c00009b8 <strncat+0x20>
c00009c8:	5b                   	pop    ebx
c00009c9:	5e                   	pop    esi
c00009ca:	c3                   	ret    
c00009cb:	90                   	nop
c00009cc:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009cf:	5b                   	pop    ebx
c00009d0:	5e                   	pop    esi
c00009d1:	c3                   	ret    
c00009d2:	66 90                	xchg   ax,ax

c00009d4 <strstr>:
c00009d4:	57                   	push   edi
c00009d5:	56                   	push   esi
c00009d6:	53                   	push   ebx
c00009d7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009db:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009df:	57                   	push   edi
c00009e0:	e8 a3 fd ff ff       	call   c0000788 <strlen>
c00009e5:	59                   	pop    ecx
c00009e6:	85 c0                	test   eax,eax
c00009e8:	74 2a                	je     c0000a14 <strstr+0x40>
c00009ea:	89 c6                	mov    esi,eax
c00009ec:	eb 12                	jmp    c0000a00 <strstr+0x2c>
c00009ee:	66 90                	xchg   ax,ax
c00009f0:	56                   	push   esi
c00009f1:	57                   	push   edi
c00009f2:	53                   	push   ebx
c00009f3:	e8 70 fc ff ff       	call   c0000668 <memcmp>
c00009f8:	83 c4 0c             	add    esp,0xc
c00009fb:	85 c0                	test   eax,eax
c00009fd:	74 15                	je     c0000a14 <strstr+0x40>
c00009ff:	43                   	inc    ebx
c0000a00:	53                   	push   ebx
c0000a01:	e8 82 fd ff ff       	call   c0000788 <strlen>
c0000a06:	5a                   	pop    edx
c0000a07:	39 f0                	cmp    eax,esi
c0000a09:	73 e5                	jae    c00009f0 <strstr+0x1c>
c0000a0b:	5b                   	pop    ebx
c0000a0c:	31 c0                	xor    eax,eax
c0000a0e:	5e                   	pop    esi
c0000a0f:	5f                   	pop    edi
c0000a10:	c3                   	ret    
c0000a11:	8d 76 00             	lea    esi,[esi+0x0]
c0000a14:	89 d8                	mov    eax,ebx
c0000a16:	5b                   	pop    ebx
c0000a17:	5e                   	pop    esi
c0000a18:	5f                   	pop    edi
c0000a19:	c3                   	ret    
c0000a1a:	66 90                	xchg   ax,ax

c0000a1c <toupper>:
c0000a1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a20:	0f b6 d0             	movzx  edx,al
c0000a23:	f6 82 40 9f 02 c0 02 	test   BYTE PTR [edx-0x3ffd60c0],0x2
c0000a2a:	74 03                	je     c0000a2f <toupper+0x13>
c0000a2c:	83 e8 20             	sub    eax,0x20
c0000a2f:	c3                   	ret    

c0000a30 <tolower>:
c0000a30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a34:	0f b6 d0             	movzx  edx,al
c0000a37:	f6 82 40 9f 02 c0 01 	test   BYTE PTR [edx-0x3ffd60c0],0x1
c0000a3e:	74 03                	je     c0000a43 <tolower+0x13>
c0000a40:	83 c0 20             	add    eax,0x20
c0000a43:	c3                   	ret    

c0000a44 <simple_strtoul>:
c0000a44:	55                   	push   ebp
c0000a45:	57                   	push   edi
c0000a46:	56                   	push   esi
c0000a47:	53                   	push   ebx
c0000a48:	83 ec 08             	sub    esp,0x8
c0000a4b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a4f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a53:	90                   	nop
c0000a54:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a57:	f6 82 40 9f 02 c0 08 	test   BYTE PTR [edx-0x3ffd60c0],0x8
c0000a5e:	75 05                	jne    c0000a65 <simple_strtoul+0x21>
c0000a60:	80 fa 09             	cmp    dl,0x9
c0000a63:	75 03                	jne    c0000a68 <simple_strtoul+0x24>
c0000a65:	41                   	inc    ecx
c0000a66:	eb ec                	jmp    c0000a54 <simple_strtoul+0x10>
c0000a68:	80 fa 2d             	cmp    dl,0x2d
c0000a6b:	0f 84 1b 01 00 00    	je     c0000b8c <simple_strtoul+0x148>
c0000a71:	80 fa 2b             	cmp    dl,0x2b
c0000a74:	0f 84 c2 00 00 00    	je     c0000b3c <simple_strtoul+0xf8>
c0000a7a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a82:	85 f6                	test   esi,esi
c0000a84:	0f 85 c3 00 00 00    	jne    c0000b4d <simple_strtoul+0x109>
c0000a8a:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a8c:	80 fa 30             	cmp    dl,0x30
c0000a8f:	0f 84 47 01 00 00    	je     c0000bdc <simple_strtoul+0x198>
c0000a95:	be 0a 00 00 00       	mov    esi,0xa
c0000a9a:	84 d2                	test   dl,dl
c0000a9c:	0f 84 6f 01 00 00    	je     c0000c11 <simple_strtoul+0x1cd>
c0000aa2:	31 ed                	xor    ebp,ebp
c0000aa4:	31 ff                	xor    edi,edi
c0000aa6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000aad:	eb 2b                	jmp    c0000ada <simple_strtoul+0x96>
c0000aaf:	90                   	nop
c0000ab0:	83 eb 30             	sub    ebx,0x30
c0000ab3:	39 f3                	cmp    ebx,esi
c0000ab5:	73 4d                	jae    c0000b04 <simple_strtoul+0xc0>
c0000ab7:	31 d2                	xor    edx,edx
c0000ab9:	89 d8                	mov    eax,ebx
c0000abb:	f7 d0                	not    eax
c0000abd:	f7 f6                	div    esi
c0000abf:	39 f8                	cmp    eax,edi
c0000ac1:	0f 82 b1 00 00 00    	jb     c0000b78 <simple_strtoul+0x134>
c0000ac7:	0f af fe             	imul   edi,esi
c0000aca:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000ad1:	01 df                	add    edi,ebx
c0000ad3:	41                   	inc    ecx
c0000ad4:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000ad6:	84 d2                	test   dl,dl
c0000ad8:	74 2a                	je     c0000b04 <simple_strtoul+0xc0>
c0000ada:	0f b6 da             	movzx  ebx,dl
c0000add:	f6 83 40 9f 02 c0 04 	test   BYTE PTR [ebx-0x3ffd60c0],0x4
c0000ae4:	75 ca                	jne    c0000ab0 <simple_strtoul+0x6c>
c0000ae6:	0f be d2             	movsx  edx,dl
c0000ae9:	52                   	push   edx
c0000aea:	e8 2d ff ff ff       	call   c0000a1c <toupper>
c0000aef:	5b                   	pop    ebx
c0000af0:	0f b6 d0             	movzx  edx,al
c0000af3:	f6 82 40 9f 02 c0 01 	test   BYTE PTR [edx-0x3ffd60c0],0x1
c0000afa:	74 08                	je     c0000b04 <simple_strtoul+0xc0>
c0000afc:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000aff:	39 f3                	cmp    ebx,esi
c0000b01:	72 b4                	jb     c0000ab7 <simple_strtoul+0x73>
c0000b03:	90                   	nop
c0000b04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b08:	85 c0                	test   eax,eax
c0000b0a:	74 14                	je     c0000b20 <simple_strtoul+0xdc>
c0000b0c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000b0f:	09 f8                	or     eax,edi
c0000b11:	75 71                	jne    c0000b84 <simple_strtoul+0x140>
c0000b13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b17:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b1b:	31 ff                	xor    edi,edi
c0000b1d:	89 30                	mov    DWORD PTR [eax],esi
c0000b1f:	90                   	nop
c0000b20:	4d                   	dec    ebp
c0000b21:	75 05                	jne    c0000b28 <simple_strtoul+0xe4>
c0000b23:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b28:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b2d:	75 02                	jne    c0000b31 <simple_strtoul+0xed>
c0000b2f:	f7 df                	neg    edi
c0000b31:	83 c4 08             	add    esp,0x8
c0000b34:	89 f8                	mov    eax,edi
c0000b36:	5b                   	pop    ebx
c0000b37:	5e                   	pop    esi
c0000b38:	5f                   	pop    edi
c0000b39:	5d                   	pop    ebp
c0000b3a:	c3                   	ret    
c0000b3b:	90                   	nop
c0000b3c:	41                   	inc    ecx
c0000b3d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b45:	85 f6                	test   esi,esi
c0000b47:	0f 84 3d ff ff ff    	je     c0000a8a <simple_strtoul+0x46>
c0000b4d:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b50:	83 f8 22             	cmp    eax,0x22
c0000b53:	77 6a                	ja     c0000bbf <simple_strtoul+0x17b>
c0000b55:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b57:	83 fe 08             	cmp    esi,0x8
c0000b5a:	0f 84 a2 00 00 00    	je     c0000c02 <simple_strtoul+0x1be>
c0000b60:	83 fe 10             	cmp    esi,0x10
c0000b63:	0f 85 31 ff ff ff    	jne    c0000a9a <simple_strtoul+0x56>
c0000b69:	80 fa 30             	cmp    dl,0x30
c0000b6c:	74 2c                	je     c0000b9a <simple_strtoul+0x156>
c0000b6e:	be 10 00 00 00       	mov    esi,0x10
c0000b73:	e9 22 ff ff ff       	jmp    c0000a9a <simple_strtoul+0x56>
c0000b78:	bd 01 00 00 00       	mov    ebp,0x1
c0000b7d:	31 ff                	xor    edi,edi
c0000b7f:	e9 4f ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x8f>
c0000b84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b88:	89 08                	mov    DWORD PTR [eax],ecx
c0000b8a:	eb 94                	jmp    c0000b20 <simple_strtoul+0xdc>
c0000b8c:	41                   	inc    ecx
c0000b8d:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b95:	e9 e8 fe ff ff       	jmp    c0000a82 <simple_strtoul+0x3e>
c0000b9a:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000b9e:	88 04 24             	mov    BYTE PTR [esp],al
c0000ba1:	50                   	push   eax
c0000ba2:	e8 89 fe ff ff       	call   c0000a30 <tolower>
c0000ba7:	5e                   	pop    esi
c0000ba8:	83 f8 78             	cmp    eax,0x78
c0000bab:	0f 84 84 00 00 00    	je     c0000c35 <simple_strtoul+0x1f1>
c0000bb1:	41                   	inc    ecx
c0000bb2:	be 10 00 00 00       	mov    esi,0x10
c0000bb7:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bba:	e9 db fe ff ff       	jmp    c0000a9a <simple_strtoul+0x56>
c0000bbf:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000bc3:	85 ff                	test   edi,edi
c0000bc5:	74 5c                	je     c0000c23 <simple_strtoul+0x1df>
c0000bc7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bcb:	85 c9                	test   ecx,ecx
c0000bcd:	75 4e                	jne    c0000c1d <simple_strtoul+0x1d9>
c0000bcf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bd5:	31 ff                	xor    edi,edi
c0000bd7:	e9 4c ff ff ff       	jmp    c0000b28 <simple_strtoul+0xe4>
c0000bdc:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000be0:	88 04 24             	mov    BYTE PTR [esp],al
c0000be3:	50                   	push   eax
c0000be4:	e8 47 fe ff ff       	call   c0000a30 <tolower>
c0000be9:	5d                   	pop    ebp
c0000bea:	83 f8 78             	cmp    eax,0x78
c0000bed:	74 3b                	je     c0000c2a <simple_strtoul+0x1e6>
c0000bef:	41                   	inc    ecx
c0000bf0:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bf3:	80 fa 30             	cmp    dl,0x30
c0000bf6:	74 13                	je     c0000c0b <simple_strtoul+0x1c7>
c0000bf8:	be 08 00 00 00       	mov    esi,0x8
c0000bfd:	e9 98 fe ff ff       	jmp    c0000a9a <simple_strtoul+0x56>
c0000c02:	80 fa 30             	cmp    dl,0x30
c0000c05:	0f 85 8f fe ff ff    	jne    c0000a9a <simple_strtoul+0x56>
c0000c0b:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000c0e:	41                   	inc    ecx
c0000c0f:	eb e7                	jmp    c0000bf8 <simple_strtoul+0x1b4>
c0000c11:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000c15:	85 d2                	test   edx,edx
c0000c17:	74 0a                	je     c0000c23 <simple_strtoul+0x1df>
c0000c19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c1d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c21:	89 30                	mov    DWORD PTR [eax],esi
c0000c23:	31 ff                	xor    edi,edi
c0000c25:	e9 fe fe ff ff       	jmp    c0000b28 <simple_strtoul+0xe4>
c0000c2a:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c2d:	83 c1 02             	add    ecx,0x2
c0000c30:	e9 34 ff ff ff       	jmp    c0000b69 <simple_strtoul+0x125>
c0000c35:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c38:	be 10 00 00 00       	mov    esi,0x10
c0000c3d:	83 c1 02             	add    ecx,0x2
c0000c40:	e9 55 fe ff ff       	jmp    c0000a9a <simple_strtoul+0x56>

c0000c45 <largebin_index>:
c0000c45:	89 c2                	mov    edx,eax
c0000c47:	c1 ea 08             	shr    edx,0x8
c0000c4a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c50:	77 10                	ja     c0000c62 <largebin_index+0x1d>
c0000c52:	0f bd d2             	bsr    edx,edx
c0000c55:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c58:	d3 e8                	shr    eax,cl
c0000c5a:	83 e0 03             	and    eax,0x3
c0000c5d:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c61:	c3                   	ret    
c0000c62:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c67:	c3                   	ret    

c0000c68 <malloc_init_state>:
c0000c68:	53                   	push   ebx
c0000c69:	8d 50 34             	lea    edx,[eax+0x34]
c0000c6c:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c72:	89 d1                	mov    ecx,edx
c0000c74:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c77:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c7a:	83 c2 08             	add    edx,0x8
c0000c7d:	39 da                	cmp    edx,ebx
c0000c7f:	75 f3                	jne    c0000c74 <malloc_init_state+0xc>
c0000c81:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c83:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c8d:	83 e2 03             	and    edx,0x3
c0000c90:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c9a:	83 ca 48             	or     edx,0x48
c0000c9d:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000ca7:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000cb1:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000cb8:	89 10                	mov    DWORD PTR [eax],edx
c0000cba:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000cbd:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cc7:	5b                   	pop    ebx
c0000cc8:	c3                   	ret    

c0000cc9 <malloc_consolidate>:
c0000cc9:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ccb:	85 d2                	test   edx,edx
c0000ccd:	0f 84 d8 00 00 00    	je     c0000dab <malloc_consolidate+0xe2>
c0000cd3:	55                   	push   ebp
c0000cd4:	83 e2 fd             	and    edx,0xfffffffd
c0000cd7:	57                   	push   edi
c0000cd8:	89 c5                	mov    ebp,eax
c0000cda:	56                   	push   esi
c0000cdb:	8d 78 34             	lea    edi,[eax+0x34]
c0000cde:	53                   	push   ebx
c0000cdf:	83 ec 10             	sub    esp,0x10
c0000ce2:	89 10                	mov    DWORD PTR [eax],edx
c0000ce4:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ce8:	c1 ea 03             	shr    edx,0x3
c0000ceb:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cef:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cf3:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000cf6:	85 d2                	test   edx,edx
c0000cf8:	0f 84 98 00 00 00    	je     c0000d96 <malloc_consolidate+0xcd>
c0000cfe:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d05:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d08:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d0b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d0f:	89 f9                	mov    ecx,edi
c0000d11:	83 e1 fe             	and    ecx,0xfffffffe
c0000d14:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d17:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d1a:	83 e3 fc             	and    ebx,0xfffffffc
c0000d1d:	83 e7 01             	and    edi,0x1
c0000d20:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d23:	75 14                	jne    c0000d39 <malloc_consolidate+0x70>
c0000d25:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d27:	29 fa                	sub    edx,edi
c0000d29:	01 f9                	add    ecx,edi
c0000d2b:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d2e:	89 fb                	mov    ebx,edi
c0000d30:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d33:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d36:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d39:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d3c:	74 40                	je     c0000d7e <malloc_consolidate+0xb5>
c0000d3e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d41:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d44:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d48:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d4b:	83 e7 01             	and    edi,0x1
c0000d4e:	75 0e                	jne    c0000d5e <malloc_consolidate+0x95>
c0000d50:	01 d9                	add    ecx,ebx
c0000d52:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d55:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d58:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d5b:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d5e:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d61:	89 ce                	mov    esi,ecx
c0000d63:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d66:	83 ce 01             	or     esi,0x1
c0000d69:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d6c:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d6f:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d72:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d76:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d79:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d7c:	eb 0c                	jmp    c0000d8a <malloc_consolidate+0xc1>
c0000d7e:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d81:	83 c9 01             	or     ecx,0x1
c0000d84:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d87:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d8a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d8e:	85 d2                	test   edx,edx
c0000d90:	0f 85 6f ff ff ff    	jne    c0000d05 <malloc_consolidate+0x3c>
c0000d96:	83 c5 04             	add    ebp,0x4
c0000d99:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d9d:	0f 85 50 ff ff ff    	jne    c0000cf3 <malloc_consolidate+0x2a>
c0000da3:	83 c4 10             	add    esp,0x10
c0000da6:	5b                   	pop    ebx
c0000da7:	5e                   	pop    esi
c0000da8:	5f                   	pop    edi
c0000da9:	5d                   	pop    ebp
c0000daa:	c3                   	ret    
c0000dab:	e9 b8 fe ff ff       	jmp    c0000c68 <malloc_init_state>

c0000db0 <dlfree>:
c0000db0:	57                   	push   edi
c0000db1:	56                   	push   esi
c0000db2:	53                   	push   ebx
c0000db3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000db7:	85 db                	test   ebx,ebx
c0000db9:	0f 84 e2 00 00 00    	je     c0000ea1 <dlfree+0xf1>
c0000dbf:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000dc2:	8b 0d 80 ee 02 c0    	mov    ecx,DWORD PTR ds:0xc002ee80
c0000dc8:	89 f0                	mov    eax,esi
c0000dca:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000dcd:	83 e0 fc             	and    eax,0xfffffffc
c0000dd0:	39 c1                	cmp    ecx,eax
c0000dd2:	72 24                	jb     c0000df8 <dlfree+0x48>
c0000dd4:	83 c9 03             	or     ecx,0x3
c0000dd7:	c1 e8 03             	shr    eax,0x3
c0000dda:	89 0d 80 ee 02 c0    	mov    DWORD PTR ds:0xc002ee80,ecx
c0000de0:	83 e8 02             	sub    eax,0x2
c0000de3:	8b 0c 85 84 ee 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd117c]
c0000dea:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dec:	89 14 85 84 ee 02 c0 	mov    DWORD PTR [eax*4-0x3ffd117c],edx
c0000df3:	e9 a9 00 00 00       	jmp    c0000ea1 <dlfree+0xf1>
c0000df8:	83 e6 02             	and    esi,0x2
c0000dfb:	0f 85 a0 00 00 00    	jne    c0000ea1 <dlfree+0xf1>
c0000e01:	83 c9 01             	or     ecx,0x1
c0000e04:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e07:	89 0d 80 ee 02 c0    	mov    DWORD PTR ds:0xc002ee80,ecx
c0000e0d:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e10:	83 e1 fc             	and    ecx,0xfffffffc
c0000e13:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e17:	75 13                	jne    c0000e2c <dlfree+0x7c>
c0000e19:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e1c:	29 da                	sub    edx,ebx
c0000e1e:	01 d8                	add    eax,ebx
c0000e20:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e23:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e26:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e29:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e2c:	39 35 ac ee 02 c0    	cmp    DWORD PTR ds:0xc002eeac,esi
c0000e32:	74 40                	je     c0000e74 <dlfree+0xc4>
c0000e34:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e38:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e3b:	80 e3 01             	and    bl,0x1
c0000e3e:	75 0e                	jne    c0000e4e <dlfree+0x9e>
c0000e40:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e43:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e46:	01 c8                	add    eax,ecx
c0000e48:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e4b:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e4e:	8b 0d bc ee 02 c0    	mov    ecx,DWORD PTR ds:0xc002eebc
c0000e54:	c7 42 0c b4 ee 02 c0 	mov    DWORD PTR [edx+0xc],0xc002eeb4
c0000e5b:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e5e:	89 15 bc ee 02 c0    	mov    DWORD PTR ds:0xc002eebc,edx
c0000e64:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e67:	89 c1                	mov    ecx,eax
c0000e69:	83 c9 01             	or     ecx,0x1
c0000e6c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e6f:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e72:	eb 10                	jmp    c0000e84 <dlfree+0xd4>
c0000e74:	01 c8                	add    eax,ecx
c0000e76:	89 c1                	mov    ecx,eax
c0000e78:	83 c9 01             	or     ecx,0x1
c0000e7b:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e7e:	89 15 ac ee 02 c0    	mov    DWORD PTR ds:0xc002eeac,edx
c0000e84:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e89:	76 16                	jbe    c0000ea1 <dlfree+0xf1>
c0000e8b:	f6 05 80 ee 02 c0 02 	test   BYTE PTR ds:0xc002ee80,0x2
c0000e92:	74 0d                	je     c0000ea1 <dlfree+0xf1>
c0000e94:	5b                   	pop    ebx
c0000e95:	b8 80 ee 02 c0       	mov    eax,0xc002ee80
c0000e9a:	5e                   	pop    esi
c0000e9b:	5f                   	pop    edi
c0000e9c:	e9 28 fe ff ff       	jmp    c0000cc9 <malloc_consolidate>
c0000ea1:	5b                   	pop    ebx
c0000ea2:	5e                   	pop    esi
c0000ea3:	5f                   	pop    edi
c0000ea4:	c3                   	ret    

c0000ea5 <sYSMALLOc>:
c0000ea5:	55                   	push   ebp
c0000ea6:	57                   	push   edi
c0000ea7:	56                   	push   esi
c0000ea8:	53                   	push   ebx
c0000ea9:	89 d3                	mov    ebx,edx
c0000eab:	83 ec 2c             	sub    esp,0x2c
c0000eae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000eb2:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000eb8:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000ebb:	8d 42 ff             	lea    eax,[edx-0x1]
c0000ebe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ec2:	74 1f                	je     c0000ee3 <sYSMALLOc+0x3e>
c0000ec4:	89 d8                	mov    eax,ebx
c0000ec6:	e8 fe fd ff ff       	call   c0000cc9 <malloc_consolidate>
c0000ecb:	83 ec 0c             	sub    esp,0xc
c0000ece:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ed2:	83 e8 07             	sub    eax,0x7
c0000ed5:	50                   	push   eax
c0000ed6:	e8 30 02 00 00       	call   c000110b <dlmalloc>
c0000edb:	83 c4 10             	add    esp,0x10
c0000ede:	e9 20 02 00 00       	jmp    c0001103 <sYSMALLOc+0x25e>
c0000ee3:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000ee6:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000eec:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000eef:	83 e0 fc             	and    eax,0xfffffffc
c0000ef2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ef6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000efa:	83 c0 10             	add    eax,0x10
c0000efd:	01 c1                	add    ecx,eax
c0000eff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f03:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f0a:	74 04                	je     c0000f10 <sYSMALLOc+0x6b>
c0000f0c:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000f10:	f7 da                	neg    edx
c0000f12:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000f16:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000f1a:	21 d1                	and    ecx,edx
c0000f1c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f20:	7f 07                	jg     c0000f29 <sYSMALLOc+0x84>
c0000f22:	31 c0                	xor    eax,eax
c0000f24:	e9 da 01 00 00       	jmp    c0001103 <sYSMALLOc+0x25e>
c0000f29:	83 ec 0c             	sub    esp,0xc
c0000f2c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f30:	e8 cf e7 00 00       	call   c000f704 <sbrk>
c0000f35:	83 c4 10             	add    esp,0x10
c0000f38:	89 c6                	mov    esi,eax
c0000f3a:	83 f8 ff             	cmp    eax,0xffffffff
c0000f3d:	74 e3                	je     c0000f22 <sYSMALLOc+0x7d>
c0000f3f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f43:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f47:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f4a:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f50:	39 f1                	cmp    ecx,esi
c0000f52:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f58:	75 13                	jne    c0000f6d <sYSMALLOc+0xc8>
c0000f5a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f5e:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f62:	83 c8 01             	or     eax,0x1
c0000f65:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f68:	e9 3e 01 00 00       	jmp    c00010ab <sYSMALLOc+0x206>
c0000f6d:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f73:	88 d0                	mov    al,dl
c0000f75:	83 e0 01             	and    eax,0x1
c0000f78:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f7d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f81:	0f 95 c0             	setne  al
c0000f84:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f88:	39 f1                	cmp    ecx,esi
c0000f8a:	76 12                	jbe    c0000f9e <sYSMALLOc+0xf9>
c0000f8c:	84 c0                	test   al,al
c0000f8e:	74 0e                	je     c0000f9e <sYSMALLOc+0xf9>
c0000f90:	83 e2 fe             	and    edx,0xfffffffe
c0000f93:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f99:	e9 83 00 00 00       	jmp    c0001021 <sYSMALLOc+0x17c>
c0000f9e:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000fa3:	74 7c                	je     c0001021 <sYSMALLOc+0x17c>
c0000fa5:	84 c0                	test   al,al
c0000fa7:	74 0c                	je     c0000fb5 <sYSMALLOc+0x110>
c0000fa9:	89 f0                	mov    eax,esi
c0000fab:	29 c8                	sub    eax,ecx
c0000fad:	01 e8                	add    eax,ebp
c0000faf:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000fb5:	89 f2                	mov    edx,esi
c0000fb7:	83 e2 07             	and    edx,0x7
c0000fba:	74 0c                	je     c0000fc8 <sYSMALLOc+0x123>
c0000fbc:	b8 08 00 00 00       	mov    eax,0x8
c0000fc1:	29 d0                	sub    eax,edx
c0000fc3:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000fc6:	eb 04                	jmp    c0000fcc <sYSMALLOc+0x127>
c0000fc8:	89 f5                	mov    ebp,esi
c0000fca:	31 c0                	xor    eax,eax
c0000fcc:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fd0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fd4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fd8:	01 c1                	add    ecx,eax
c0000fda:	83 ec 0c             	sub    esp,0xc
c0000fdd:	01 f1                	add    ecx,esi
c0000fdf:	01 ca                	add    edx,ecx
c0000fe1:	29 c8                	sub    eax,ecx
c0000fe3:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000fe7:	01 c2                	add    edx,eax
c0000fe9:	52                   	push   edx
c0000fea:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000fee:	e8 11 e7 00 00       	call   c000f704 <sbrk>
c0000ff3:	83 c4 10             	add    esp,0x10
c0000ff6:	83 f8 ff             	cmp    eax,0xffffffff
c0000ff9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ffd:	75 0f                	jne    c000100e <sYSMALLOc+0x169>
c0000fff:	83 ec 0c             	sub    esp,0xc
c0001002:	6a 00                	push   0x0
c0001004:	e8 fb e6 00 00       	call   c000f704 <sbrk>
c0001009:	83 c4 10             	add    esp,0x10
c000100c:	eb 30                	jmp    c000103e <sYSMALLOc+0x199>
c000100e:	39 c6                	cmp    esi,eax
c0001010:	76 33                	jbe    c0001045 <sYSMALLOc+0x1a0>
c0001012:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001016:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000101d:	01 f0                	add    eax,esi
c000101f:	eb 1d                	jmp    c000103e <sYSMALLOc+0x199>
c0001021:	83 ec 0c             	sub    esp,0xc
c0001024:	89 f5                	mov    ebp,esi
c0001026:	6a 00                	push   0x0
c0001028:	e8 d7 e6 00 00       	call   c000f704 <sbrk>
c000102d:	89 c2                	mov    edx,eax
c000102f:	29 f2                	sub    edx,esi
c0001031:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001035:	83 c4 10             	add    esp,0x10
c0001038:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000103e:	31 d2                	xor    edx,edx
c0001040:	83 f8 ff             	cmp    eax,0xffffffff
c0001043:	74 66                	je     c00010ab <sYSMALLOc+0x206>
c0001045:	29 e8                	sub    eax,ebp
c0001047:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c000104a:	01 d0                	add    eax,edx
c000104c:	83 c8 01             	or     eax,0x1
c000104f:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001052:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001058:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000105d:	74 4c                	je     c00010ab <sYSMALLOc+0x206>
c000105f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001063:	83 e8 0c             	sub    eax,0xc
c0001066:	83 e0 f8             	and    eax,0xfffffff8
c0001069:	89 c2                	mov    edx,eax
c000106b:	83 ca 01             	or     edx,0x1
c000106e:	83 f8 0f             	cmp    eax,0xf
c0001071:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001074:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c000107c:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001084:	76 25                	jbe    c00010ab <sYSMALLOc+0x206>
c0001086:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c000108c:	83 ec 0c             	sub    esp,0xc
c000108f:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0001099:	83 c7 08             	add    edi,0x8
c000109c:	57                   	push   edi
c000109d:	e8 0e fd ff ff       	call   c0000db0 <dlfree>
c00010a2:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010a8:	83 c4 10             	add    esp,0x10
c00010ab:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c00010b1:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c00010b7:	73 06                	jae    c00010bf <sYSMALLOc+0x21a>
c00010b9:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010bf:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010c5:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010cb:	73 06                	jae    c00010d3 <sYSMALLOc+0x22e>
c00010cd:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010d3:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010d6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010d9:	83 e2 fc             	and    edx,0xfffffffc
c00010dc:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010e0:	0f 82 3c fe ff ff    	jb     c0000f22 <sYSMALLOc+0x7d>
c00010e6:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010ea:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010ed:	29 fa                	sub    edx,edi
c00010ef:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010f2:	83 ca 01             	or     edx,0x1
c00010f5:	89 fb                	mov    ebx,edi
c00010f7:	83 c0 08             	add    eax,0x8
c00010fa:	83 cb 01             	or     ebx,0x1
c00010fd:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001100:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001103:	83 c4 2c             	add    esp,0x2c
c0001106:	5b                   	pop    ebx
c0001107:	5e                   	pop    esi
c0001108:	5f                   	pop    edi
c0001109:	5d                   	pop    ebp
c000110a:	c3                   	ret    

c000110b <dlmalloc>:
c000110b:	55                   	push   ebp
c000110c:	57                   	push   edi
c000110d:	56                   	push   esi
c000110e:	53                   	push   ebx
c000110f:	83 ec 1c             	sub    esp,0x1c
c0001112:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001116:	83 f8 df             	cmp    eax,0xffffffdf
c0001119:	0f 87 70 03 00 00    	ja     c000148f <dlmalloc+0x384>
c000111f:	83 c0 0b             	add    eax,0xb
c0001122:	be 10 00 00 00       	mov    esi,0x10
c0001127:	83 f8 0f             	cmp    eax,0xf
c000112a:	76 05                	jbe    c0001131 <dlmalloc+0x26>
c000112c:	83 e0 f8             	and    eax,0xfffffff8
c000112f:	89 c6                	mov    esi,eax
c0001131:	8b 3d 80 ee 02 c0    	mov    edi,DWORD PTR ds:0xc002ee80
c0001137:	f7 c7 01 00 00 00    	test   edi,0x1
c000113d:	75 17                	jne    c0001156 <dlmalloc+0x4b>
c000113f:	85 ff                	test   edi,edi
c0001141:	0f 85 05 03 00 00    	jne    c000144c <dlmalloc+0x341>
c0001147:	b8 80 ee 02 c0       	mov    eax,0xc002ee80
c000114c:	e8 78 fb ff ff       	call   c0000cc9 <malloc_consolidate>
c0001151:	e9 f6 02 00 00       	jmp    c000144c <dlmalloc+0x341>
c0001156:	39 f7                	cmp    edi,esi
c0001158:	72 1f                	jb     c0001179 <dlmalloc+0x6e>
c000115a:	89 f2                	mov    edx,esi
c000115c:	c1 ea 03             	shr    edx,0x3
c000115f:	83 ea 02             	sub    edx,0x2
c0001162:	8b 04 95 84 ee 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd117c]
c0001169:	85 c0                	test   eax,eax
c000116b:	74 0c                	je     c0001179 <dlmalloc+0x6e>
c000116d:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001170:	89 0c 95 84 ee 02 c0 	mov    DWORD PTR [edx*4-0x3ffd117c],ecx
c0001177:	eb 30                	jmp    c00011a9 <dlmalloc+0x9e>
c0001179:	89 f0                	mov    eax,esi
c000117b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001181:	77 2e                	ja     c00011b1 <dlmalloc+0xa6>
c0001183:	c1 e8 03             	shr    eax,0x3
c0001186:	8d 14 c5 b4 ee 02 c0 	lea    edx,[eax*8-0x3ffd114c]
c000118d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001191:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001194:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001197:	39 c3                	cmp    ebx,eax
c0001199:	74 2e                	je     c00011c9 <dlmalloc+0xbe>
c000119b:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000119e:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00011a3:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00011a6:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00011a9:	83 c0 08             	add    eax,0x8
c00011ac:	e9 e0 02 00 00       	jmp    c0001491 <dlmalloc+0x386>
c00011b1:	e8 8f fa ff ff       	call   c0000c45 <largebin_index>
c00011b6:	83 e7 02             	and    edi,0x2
c00011b9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011bd:	74 0a                	je     c00011c9 <dlmalloc+0xbe>
c00011bf:	b8 80 ee 02 c0       	mov    eax,0xc002ee80
c00011c4:	e8 00 fb ff ff       	call   c0000cc9 <malloc_consolidate>
c00011c9:	8d 46 10             	lea    eax,[esi+0x10]
c00011cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011d0:	8b 1d c0 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002eec0
c00011d6:	81 fb b4 ee 02 c0    	cmp    ebx,0xc002eeb4
c00011dc:	0f 84 13 01 00 00    	je     c00012f5 <dlmalloc+0x1ea>
c00011e2:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011e5:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011e8:	83 e7 fc             	and    edi,0xfffffffc
c00011eb:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011f1:	77 4c                	ja     c000123f <dlmalloc+0x134>
c00011f3:	3d b4 ee 02 c0       	cmp    eax,0xc002eeb4
c00011f8:	75 45                	jne    c000123f <dlmalloc+0x134>
c00011fa:	39 1d b0 ee 02 c0    	cmp    DWORD PTR ds:0xc002eeb0,ebx
c0001200:	75 3d                	jne    c000123f <dlmalloc+0x134>
c0001202:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001206:	73 37                	jae    c000123f <dlmalloc+0x134>
c0001208:	8d 04 33             	lea    eax,[ebx+esi*1]
c000120b:	89 fa                	mov    edx,edi
c000120d:	a3 bc ee 02 c0       	mov    ds:0xc002eebc,eax
c0001212:	a3 c0 ee 02 c0       	mov    ds:0xc002eec0,eax
c0001217:	a3 b0 ee 02 c0       	mov    ds:0xc002eeb0,eax
c000121c:	29 f2                	sub    edx,esi
c000121e:	c7 40 08 b4 ee 02 c0 	mov    DWORD PTR [eax+0x8],0xc002eeb4
c0001225:	c7 40 0c b4 ee 02 c0 	mov    DWORD PTR [eax+0xc],0xc002eeb4
c000122c:	83 ce 01             	or     esi,0x1
c000122f:	89 d1                	mov    ecx,edx
c0001231:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001234:	83 c9 01             	or     ecx,0x1
c0001237:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000123a:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000123d:	eb 15                	jmp    c0001254 <dlmalloc+0x149>
c000123f:	a3 c0 ee 02 c0       	mov    ds:0xc002eec0,eax
c0001244:	39 fe                	cmp    esi,edi
c0001246:	c7 40 08 b4 ee 02 c0 	mov    DWORD PTR [eax+0x8],0xc002eeb4
c000124d:	75 0d                	jne    c000125c <dlmalloc+0x151>
c000124f:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001254:	8d 43 08             	lea    eax,[ebx+0x8]
c0001257:	e9 35 02 00 00       	jmp    c0001491 <dlmalloc+0x386>
c000125c:	89 f8                	mov    eax,edi
c000125e:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001264:	77 19                	ja     c000127f <dlmalloc+0x174>
c0001266:	c1 e8 03             	shr    eax,0x3
c0001269:	8d 14 00             	lea    edx,[eax+eax*1]
c000126c:	83 c2 0d             	add    edx,0xd
c000126f:	8d 2c 95 78 ee 02 c0 	lea    ebp,[edx*4-0x3ffd1188]
c0001276:	8b 14 95 80 ee 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1180]
c000127d:	eb 46                	jmp    c00012c5 <dlmalloc+0x1ba>
c000127f:	e8 c1 f9 ff ff       	call   c0000c45 <largebin_index>
c0001284:	8d 14 00             	lea    edx,[eax+eax*1]
c0001287:	83 c2 0d             	add    edx,0xd
c000128a:	8d 0c 95 80 ee 02 c0 	lea    ecx,[edx*4-0x3ffd1180]
c0001291:	8b 14 95 80 ee 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1180]
c0001298:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000129b:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000129f:	89 d5                	mov    ebp,edx
c00012a1:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00012a5:	74 1e                	je     c00012c5 <dlmalloc+0x1ba>
c00012a7:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00012aa:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00012ad:	77 12                	ja     c00012c1 <dlmalloc+0x1b6>
c00012af:	83 cf 01             	or     edi,0x1
c00012b2:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00012b5:	76 05                	jbe    c00012bc <dlmalloc+0x1b1>
c00012b7:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00012ba:	eb f6                	jmp    c00012b2 <dlmalloc+0x1a7>
c00012bc:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012bf:	eb 04                	jmp    c00012c5 <dlmalloc+0x1ba>
c00012c1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012c5:	89 c7                	mov    edi,eax
c00012c7:	88 c1                	mov    cl,al
c00012c9:	c1 ff 05             	sar    edi,0x5
c00012cc:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012d0:	bf 01 00 00 00       	mov    edi,0x1
c00012d5:	d3 e7                	shl    edi,cl
c00012d7:	89 f8                	mov    eax,edi
c00012d9:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012dd:	09 04 bd b4 f1 02 c0 	or     DWORD PTR [edi*4-0x3ffd0e4c],eax
c00012e4:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012e7:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012ea:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012ed:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012f0:	e9 db fe ff ff       	jmp    c00011d0 <dlmalloc+0xc5>
c00012f5:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012fb:	76 78                	jbe    c0001375 <dlmalloc+0x26a>
c00012fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001301:	8d 04 c5 b4 ee 02 c0 	lea    eax,[eax*8-0x3ffd114c]
c0001308:	8d 48 f8             	lea    ecx,[eax-0x8]
c000130b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000130e:	39 ca                	cmp    edx,ecx
c0001310:	74 63                	je     c0001375 <dlmalloc+0x26a>
c0001312:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001315:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001318:	83 e3 fc             	and    ebx,0xfffffffc
c000131b:	39 de                	cmp    esi,ebx
c000131d:	77 52                	ja     c0001371 <dlmalloc+0x266>
c000131f:	89 df                	mov    edi,ebx
c0001321:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001324:	29 f7                	sub    edi,esi
c0001326:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001329:	01 d3                	add    ebx,edx
c000132b:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000132e:	83 ff 0f             	cmp    edi,0xf
c0001331:	8d 42 08             	lea    eax,[edx+0x8]
c0001334:	77 09                	ja     c000133f <dlmalloc+0x234>
c0001336:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000133a:	e9 52 01 00 00       	jmp    c0001491 <dlmalloc+0x386>
c000133f:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001342:	83 ce 01             	or     esi,0x1
c0001345:	89 0d bc ee 02 c0    	mov    DWORD PTR ds:0xc002eebc,ecx
c000134b:	89 0d c0 ee 02 c0    	mov    DWORD PTR ds:0xc002eec0,ecx
c0001351:	c7 41 08 b4 ee 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002eeb4
c0001358:	c7 41 0c b4 ee 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002eeb4
c000135f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001362:	89 fa                	mov    edx,edi
c0001364:	83 ca 01             	or     edx,0x1
c0001367:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000136a:	89 3b                	mov    DWORD PTR [ebx],edi
c000136c:	e9 20 01 00 00       	jmp    c0001491 <dlmalloc+0x386>
c0001371:	89 c2                	mov    edx,eax
c0001373:	eb 99                	jmp    c000130e <dlmalloc+0x203>
c0001375:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001379:	b8 01 00 00 00       	mov    eax,0x1
c000137e:	41                   	inc    ecx
c000137f:	89 cb                	mov    ebx,ecx
c0001381:	8d 14 cd ac ee 02 c0 	lea    edx,[ecx*8-0x3ffd1154]
c0001388:	c1 eb 05             	shr    ebx,0x5
c000138b:	d3 e0                	shl    eax,cl
c000138d:	8b 3c 9d b4 f1 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd0e4c]
c0001394:	39 f8                	cmp    eax,edi
c0001396:	77 04                	ja     c000139c <dlmalloc+0x291>
c0001398:	85 c0                	test   eax,eax
c000139a:	75 26                	jne    c00013c2 <dlmalloc+0x2b7>
c000139c:	43                   	inc    ebx
c000139d:	83 fb 02             	cmp    ebx,0x2
c00013a0:	0f 87 a6 00 00 00    	ja     c000144c <dlmalloc+0x341>
c00013a6:	8b 3c 9d b4 f1 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd0e4c]
c00013ad:	85 ff                	test   edi,edi
c00013af:	74 eb                	je     c000139c <dlmalloc+0x291>
c00013b1:	89 d8                	mov    eax,ebx
c00013b3:	c1 e0 06             	shl    eax,0x6
c00013b6:	8d 14 85 ac ee 02 c0 	lea    edx,[eax*4-0x3ffd1154]
c00013bd:	b8 01 00 00 00       	mov    eax,0x1
c00013c2:	85 f8                	test   eax,edi
c00013c4:	75 07                	jne    c00013cd <dlmalloc+0x2c2>
c00013c6:	83 c2 08             	add    edx,0x8
c00013c9:	01 c0                	add    eax,eax
c00013cb:	eb f5                	jmp    c00013c2 <dlmalloc+0x2b7>
c00013cd:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013d0:	39 ca                	cmp    edx,ecx
c00013d2:	75 14                	jne    c00013e8 <dlmalloc+0x2dd>
c00013d4:	89 c1                	mov    ecx,eax
c00013d6:	83 c2 08             	add    edx,0x8
c00013d9:	f7 d1                	not    ecx
c00013db:	01 c0                	add    eax,eax
c00013dd:	21 cf                	and    edi,ecx
c00013df:	89 3c 9d b4 f1 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd0e4c],edi
c00013e6:	eb ac                	jmp    c0001394 <dlmalloc+0x289>
c00013e8:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013eb:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013ee:	83 e0 fc             	and    eax,0xfffffffc
c00013f1:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013f4:	89 c3                	mov    ebx,eax
c00013f6:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013f9:	29 f3                	sub    ebx,esi
c00013fb:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013fe:	83 fb 0f             	cmp    ebx,0xf
c0001401:	8d 41 08             	lea    eax,[ecx+0x8]
c0001404:	77 09                	ja     c000140f <dlmalloc+0x304>
c0001406:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c000140a:	e9 82 00 00 00       	jmp    c0001491 <dlmalloc+0x386>
c000140f:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001412:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001418:	89 3d bc ee 02 c0    	mov    DWORD PTR ds:0xc002eebc,edi
c000141e:	89 3d c0 ee 02 c0    	mov    DWORD PTR ds:0xc002eec0,edi
c0001424:	c7 47 08 b4 ee 02 c0 	mov    DWORD PTR [edi+0x8],0xc002eeb4
c000142b:	c7 47 0c b4 ee 02 c0 	mov    DWORD PTR [edi+0xc],0xc002eeb4
c0001432:	77 06                	ja     c000143a <dlmalloc+0x32f>
c0001434:	89 3d b0 ee 02 c0    	mov    DWORD PTR ds:0xc002eeb0,edi
c000143a:	83 ce 01             	or     esi,0x1
c000143d:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001440:	89 d9                	mov    ecx,ebx
c0001442:	83 c9 01             	or     ecx,0x1
c0001445:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001448:	89 1a                	mov    DWORD PTR [edx],ebx
c000144a:	eb 45                	jmp    c0001491 <dlmalloc+0x386>
c000144c:	a1 ac ee 02 c0       	mov    eax,ds:0xc002eeac
c0001451:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001454:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001457:	83 e2 fc             	and    edx,0xfffffffc
c000145a:	39 d1                	cmp    ecx,edx
c000145c:	77 1e                	ja     c000147c <dlmalloc+0x371>
c000145e:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001461:	89 f3                	mov    ebx,esi
c0001463:	89 0d ac ee 02 c0    	mov    DWORD PTR ds:0xc002eeac,ecx
c0001469:	83 cb 01             	or     ebx,0x1
c000146c:	29 f2                	sub    edx,esi
c000146e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001471:	83 ca 01             	or     edx,0x1
c0001474:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001477:	e9 2d fd ff ff       	jmp    c00011a9 <dlmalloc+0x9e>
c000147c:	83 c4 1c             	add    esp,0x1c
c000147f:	89 f0                	mov    eax,esi
c0001481:	5b                   	pop    ebx
c0001482:	ba 80 ee 02 c0       	mov    edx,0xc002ee80
c0001487:	5e                   	pop    esi
c0001488:	5f                   	pop    edi
c0001489:	5d                   	pop    ebp
c000148a:	e9 16 fa ff ff       	jmp    c0000ea5 <sYSMALLOc>
c000148f:	31 c0                	xor    eax,eax
c0001491:	83 c4 1c             	add    esp,0x1c
c0001494:	5b                   	pop    ebx
c0001495:	5e                   	pop    esi
c0001496:	5f                   	pop    edi
c0001497:	5d                   	pop    ebp
c0001498:	c3                   	ret    

c0001499 <iALLOc>:
c0001499:	55                   	push   ebp
c000149a:	89 c5                	mov    ebp,eax
c000149c:	57                   	push   edi
c000149d:	56                   	push   esi
c000149e:	53                   	push   ebx
c000149f:	83 ec 2c             	sub    esp,0x2c
c00014a2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00014a6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00014aa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014ae:	83 3d 80 ee 02 c0 00 	cmp    DWORD PTR ds:0xc002ee80,0x0
c00014b5:	75 12                	jne    c00014c9 <iALLOc+0x30>
c00014b7:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00014bb:	b8 80 ee 02 c0       	mov    eax,0xc002ee80
c00014c0:	e8 04 f8 ff ff       	call   c0000cc9 <malloc_consolidate>
c00014c5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014c9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014ce:	74 12                	je     c00014e2 <iALLOc+0x49>
c00014d0:	85 ed                	test   ebp,ebp
c00014d2:	0f 84 64 01 00 00    	je     c000163c <iALLOc+0x1a3>
c00014d8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014e0:	eb 33                	jmp    c0001515 <iALLOc+0x7c>
c00014e2:	85 ed                	test   ebp,ebp
c00014e4:	75 14                	jne    c00014fa <iALLOc+0x61>
c00014e6:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014ee:	83 c4 2c             	add    esp,0x2c
c00014f1:	5b                   	pop    ebx
c00014f2:	5e                   	pop    esi
c00014f3:	5f                   	pop    edi
c00014f4:	5d                   	pop    ebp
c00014f5:	e9 11 fc ff ff       	jmp    c000110b <dlmalloc>
c00014fa:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001501:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001509:	83 f8 0f             	cmp    eax,0xf
c000150c:	76 07                	jbe    c0001515 <iALLOc+0x7c>
c000150e:	83 e0 f8             	and    eax,0xfffffff8
c0001511:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001515:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c000151a:	75 09                	jne    c0001525 <iALLOc+0x8c>
c000151c:	89 d0                	mov    eax,edx
c000151e:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001521:	31 f6                	xor    esi,esi
c0001523:	eb 3b                	jmp    c0001560 <iALLOc+0xc7>
c0001525:	8b 02                	mov    eax,DWORD PTR [edx]
c0001527:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000152f:	83 c0 0b             	add    eax,0xb
c0001532:	83 f8 0f             	cmp    eax,0xf
c0001535:	76 07                	jbe    c000153e <iALLOc+0xa5>
c0001537:	83 e0 f8             	and    eax,0xfffffff8
c000153a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000153e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001542:	0f af f5             	imul   esi,ebp
c0001545:	eb 25                	jmp    c000156c <iALLOc+0xd3>
c0001547:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001549:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c000154c:	bb 10 00 00 00       	mov    ebx,0x10
c0001551:	83 f9 0f             	cmp    ecx,0xf
c0001554:	76 05                	jbe    c000155b <iALLOc+0xc2>
c0001556:	83 e1 f8             	and    ecx,0xfffffff8
c0001559:	89 cb                	mov    ebx,ecx
c000155b:	01 de                	add    esi,ebx
c000155d:	83 c0 04             	add    eax,0x4
c0001560:	39 c7                	cmp    edi,eax
c0001562:	75 e3                	jne    c0001547 <iALLOc+0xae>
c0001564:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000156c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001570:	8b 1d d4 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f1d4
c0001576:	83 ec 0c             	sub    esp,0xc
c0001579:	c7 05 d4 f1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f1d4,0x0
c0001583:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001587:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000158b:	50                   	push   eax
c000158c:	e8 7a fb ff ff       	call   c000110b <dlmalloc>
c0001591:	83 c4 10             	add    esp,0x10
c0001594:	89 1d d4 f1 02 c0    	mov    DWORD PTR ds:0xc002f1d4,ebx
c000159a:	85 c0                	test   eax,eax
c000159c:	0f 84 92 00 00 00    	je     c0001634 <iALLOc+0x19b>
c00015a2:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00015a5:	8d 78 f8             	lea    edi,[eax-0x8]
c00015a8:	83 e3 fc             	and    ebx,0xfffffffc
c00015ab:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00015af:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00015b4:	74 1e                	je     c00015d4 <iALLOc+0x13b>
c00015b6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00015ba:	89 d9                	mov    ecx,ebx
c00015bc:	52                   	push   edx
c00015bd:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015c1:	83 e9 04             	sub    ecx,0x4
c00015c4:	51                   	push   ecx
c00015c5:	6a 00                	push   0x0
c00015c7:	50                   	push   eax
c00015c8:	e8 9f f1 ff ff       	call   c000076c <memset>
c00015cd:	83 c4 10             	add    esp,0x10
c00015d0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015d4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015d9:	75 14                	jne    c00015ef <iALLOc+0x156>
c00015db:	8d 04 37             	lea    eax,[edi+esi*1]
c00015de:	29 f3                	sub    ebx,esi
c00015e0:	8d 48 08             	lea    ecx,[eax+0x8]
c00015e3:	83 cb 01             	or     ebx,0x1
c00015e6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015ea:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015ed:	89 f3                	mov    ebx,esi
c00015ef:	31 c0                	xor    eax,eax
c00015f1:	4d                   	dec    ebp
c00015f2:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015f5:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015f9:	39 c5                	cmp    ebp,eax
c00015fb:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015fe:	74 2c                	je     c000162c <iALLOc+0x193>
c0001600:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001604:	85 c9                	test   ecx,ecx
c0001606:	75 15                	jne    c000161d <iALLOc+0x184>
c0001608:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c000160b:	8d 71 0b             	lea    esi,[ecx+0xb]
c000160e:	b9 10 00 00 00       	mov    ecx,0x10
c0001613:	83 fe 0f             	cmp    esi,0xf
c0001616:	76 05                	jbe    c000161d <iALLOc+0x184>
c0001618:	83 e6 f8             	and    esi,0xfffffff8
c000161b:	89 f1                	mov    ecx,esi
c000161d:	89 ce                	mov    esi,ecx
c000161f:	29 cb                	sub    ebx,ecx
c0001621:	83 ce 01             	or     esi,0x1
c0001624:	40                   	inc    eax
c0001625:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001628:	01 cf                	add    edi,ecx
c000162a:	eb c6                	jmp    c00015f2 <iALLOc+0x159>
c000162c:	83 cb 01             	or     ebx,0x1
c000162f:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001632:	eb 08                	jmp    c000163c <iALLOc+0x1a3>
c0001634:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000163c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001640:	83 c4 2c             	add    esp,0x2c
c0001643:	5b                   	pop    ebx
c0001644:	5e                   	pop    esi
c0001645:	5f                   	pop    edi
c0001646:	5d                   	pop    ebp
c0001647:	c3                   	ret    

c0001648 <dlrealloc>:
c0001648:	55                   	push   ebp
c0001649:	57                   	push   edi
c000164a:	56                   	push   esi
c000164b:	53                   	push   ebx
c000164c:	83 ec 1c             	sub    esp,0x1c
c000164f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001653:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001657:	85 db                	test   ebx,ebx
c0001659:	75 10                	jne    c000166b <dlrealloc+0x23>
c000165b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000165f:	83 c4 1c             	add    esp,0x1c
c0001662:	5b                   	pop    ebx
c0001663:	5e                   	pop    esi
c0001664:	5f                   	pop    edi
c0001665:	5d                   	pop    ebp
c0001666:	e9 a0 fa ff ff       	jmp    c000110b <dlmalloc>
c000166b:	83 f8 df             	cmp    eax,0xffffffdf
c000166e:	76 07                	jbe    c0001677 <dlrealloc+0x2f>
c0001670:	31 db                	xor    ebx,ebx
c0001672:	e9 6a 01 00 00       	jmp    c00017e1 <dlrealloc+0x199>
c0001677:	83 c0 0b             	add    eax,0xb
c000167a:	bd 10 00 00 00       	mov    ebp,0x10
c000167f:	83 f8 0f             	cmp    eax,0xf
c0001682:	76 05                	jbe    c0001689 <dlrealloc+0x41>
c0001684:	83 e0 f8             	and    eax,0xfffffff8
c0001687:	89 c5                	mov    ebp,eax
c0001689:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c000168c:	8d 7b f8             	lea    edi,[ebx-0x8]
c000168f:	89 c6                	mov    esi,eax
c0001691:	83 e6 fc             	and    esi,0xfffffffc
c0001694:	a8 02                	test   al,0x2
c0001696:	75 d8                	jne    c0001670 <dlrealloc+0x28>
c0001698:	39 f5                	cmp    ebp,esi
c000169a:	0f 86 04 01 00 00    	jbe    c00017a4 <dlrealloc+0x15c>
c00016a0:	8d 14 37             	lea    edx,[edi+esi*1]
c00016a3:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00016a6:	39 15 ac ee 02 c0    	cmp    DWORD PTR ds:0xc002eeac,edx
c00016ac:	75 33                	jne    c00016e1 <dlrealloc+0x99>
c00016ae:	83 e1 fc             	and    ecx,0xfffffffc
c00016b1:	01 f1                	add    ecx,esi
c00016b3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016b7:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00016ba:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016be:	77 49                	ja     c0001709 <dlrealloc+0xc1>
c00016c0:	01 ef                	add    edi,ebp
c00016c2:	83 e0 01             	and    eax,0x1
c00016c5:	09 e8                	or     eax,ebp
c00016c7:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016ca:	89 3d ac ee 02 c0    	mov    DWORD PTR ds:0xc002eeac,edi
c00016d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016d4:	29 e8                	sub    eax,ebp
c00016d6:	83 c8 01             	or     eax,0x1
c00016d9:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016dc:	e9 00 01 00 00       	jmp    c00017e1 <dlrealloc+0x199>
c00016e1:	89 c8                	mov    eax,ecx
c00016e3:	83 e0 fe             	and    eax,0xfffffffe
c00016e6:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016eb:	75 1c                	jne    c0001709 <dlrealloc+0xc1>
c00016ed:	83 e1 fc             	and    ecx,0xfffffffc
c00016f0:	01 f1                	add    ecx,esi
c00016f2:	39 cd                	cmp    ebp,ecx
c00016f4:	77 13                	ja     c0001709 <dlrealloc+0xc1>
c00016f6:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00016f9:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00016fc:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00016ff:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c0001702:	89 ce                	mov    esi,ecx
c0001704:	e9 9b 00 00 00       	jmp    c00017a4 <dlrealloc+0x15c>
c0001709:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000170d:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001710:	83 ec 0c             	sub    esp,0xc
c0001713:	50                   	push   eax
c0001714:	e8 f2 f9 ff ff       	call   c000110b <dlmalloc>
c0001719:	83 c4 10             	add    esp,0x10
c000171c:	85 c0                	test   eax,eax
c000171e:	0f 84 4c ff ff ff    	je     c0001670 <dlrealloc+0x28>
c0001724:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001727:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000172b:	39 ca                	cmp    edx,ecx
c000172d:	75 0a                	jne    c0001739 <dlrealloc+0xf1>
c000172f:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001732:	83 e0 fc             	and    eax,0xfffffffc
c0001735:	01 c6                	add    esi,eax
c0001737:	eb 6b                	jmp    c00017a4 <dlrealloc+0x15c>
c0001739:	8d 4e fc             	lea    ecx,[esi-0x4]
c000173c:	83 f9 27             	cmp    ecx,0x27
c000173f:	76 08                	jbe    c0001749 <dlrealloc+0x101>
c0001741:	89 de                	mov    esi,ebx
c0001743:	89 c7                	mov    edi,eax
c0001745:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001747:	eb 43                	jmp    c000178c <dlrealloc+0x144>
c0001749:	8b 13                	mov    edx,DWORD PTR [ebx]
c000174b:	83 f9 13             	cmp    ecx,0x13
c000174e:	89 10                	mov    DWORD PTR [eax],edx
c0001750:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001753:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001756:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001759:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000175c:	76 2e                	jbe    c000178c <dlrealloc+0x144>
c000175e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001761:	83 f9 1b             	cmp    ecx,0x1b
c0001764:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001767:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000176a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000176d:	76 1d                	jbe    c000178c <dlrealloc+0x144>
c000176f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001772:	83 f9 23             	cmp    ecx,0x23
c0001775:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001778:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000177b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000177e:	76 0c                	jbe    c000178c <dlrealloc+0x144>
c0001780:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001783:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001786:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001789:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000178c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001790:	83 ec 0c             	sub    esp,0xc
c0001793:	53                   	push   ebx
c0001794:	e8 17 f6 ff ff       	call   c0000db0 <dlfree>
c0001799:	83 c4 10             	add    esp,0x10
c000179c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00017a0:	89 c3                	mov    ebx,eax
c00017a2:	eb 3d                	jmp    c00017e1 <dlrealloc+0x199>
c00017a4:	89 f2                	mov    edx,esi
c00017a6:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017a9:	29 ea                	sub    edx,ebp
c00017ab:	83 e1 01             	and    ecx,0x1
c00017ae:	8d 04 37             	lea    eax,[edi+esi*1]
c00017b1:	83 fa 0f             	cmp    edx,0xf
c00017b4:	77 0b                	ja     c00017c1 <dlrealloc+0x179>
c00017b6:	09 ce                	or     esi,ecx
c00017b8:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00017bb:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017bf:	eb 20                	jmp    c00017e1 <dlrealloc+0x199>
c00017c1:	01 ef                	add    edi,ebp
c00017c3:	83 ec 0c             	sub    esp,0xc
c00017c6:	09 cd                	or     ebp,ecx
c00017c8:	83 ca 01             	or     edx,0x1
c00017cb:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017ce:	83 c7 08             	add    edi,0x8
c00017d1:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017d4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017d8:	57                   	push   edi
c00017d9:	e8 d2 f5 ff ff       	call   c0000db0 <dlfree>
c00017de:	83 c4 10             	add    esp,0x10
c00017e1:	83 c4 1c             	add    esp,0x1c
c00017e4:	89 d8                	mov    eax,ebx
c00017e6:	5b                   	pop    ebx
c00017e7:	5e                   	pop    esi
c00017e8:	5f                   	pop    edi
c00017e9:	5d                   	pop    ebp
c00017ea:	c3                   	ret    

c00017eb <dlmemalign>:
c00017eb:	55                   	push   ebp
c00017ec:	57                   	push   edi
c00017ed:	56                   	push   esi
c00017ee:	53                   	push   ebx
c00017ef:	83 ec 0c             	sub    esp,0xc
c00017f2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017f6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017fa:	83 fa 08             	cmp    edx,0x8
c00017fd:	77 10                	ja     c000180f <dlmemalign+0x24>
c00017ff:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001803:	83 c4 0c             	add    esp,0xc
c0001806:	5b                   	pop    ebx
c0001807:	5e                   	pop    esi
c0001808:	5f                   	pop    edi
c0001809:	5d                   	pop    ebp
c000180a:	e9 fc f8 ff ff       	jmp    c000110b <dlmalloc>
c000180f:	bf 10 00 00 00       	mov    edi,0x10
c0001814:	83 fa 0f             	cmp    edx,0xf
c0001817:	76 13                	jbe    c000182c <dlmemalign+0x41>
c0001819:	8d 4a ff             	lea    ecx,[edx-0x1]
c000181c:	85 d1                	test   ecx,edx
c000181e:	75 04                	jne    c0001824 <dlmemalign+0x39>
c0001820:	89 d7                	mov    edi,edx
c0001822:	eb 08                	jmp    c000182c <dlmemalign+0x41>
c0001824:	39 d7                	cmp    edi,edx
c0001826:	73 04                	jae    c000182c <dlmemalign+0x41>
c0001828:	01 ff                	add    edi,edi
c000182a:	eb f8                	jmp    c0001824 <dlmemalign+0x39>
c000182c:	83 f8 df             	cmp    eax,0xffffffdf
c000182f:	76 07                	jbe    c0001838 <dlmemalign+0x4d>
c0001831:	31 c0                	xor    eax,eax
c0001833:	e9 ce 00 00 00       	jmp    c0001906 <dlmemalign+0x11b>
c0001838:	83 c0 0b             	add    eax,0xb
c000183b:	bd 10 00 00 00       	mov    ebp,0x10
c0001840:	83 f8 0f             	cmp    eax,0xf
c0001843:	76 05                	jbe    c000184a <dlmemalign+0x5f>
c0001845:	83 e0 f8             	and    eax,0xfffffff8
c0001848:	89 c5                	mov    ebp,eax
c000184a:	83 ec 0c             	sub    esp,0xc
c000184d:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001851:	50                   	push   eax
c0001852:	e8 b4 f8 ff ff       	call   c000110b <dlmalloc>
c0001857:	83 c4 10             	add    esp,0x10
c000185a:	89 c1                	mov    ecx,eax
c000185c:	85 c0                	test   eax,eax
c000185e:	74 d1                	je     c0001831 <dlmemalign+0x46>
c0001860:	31 d2                	xor    edx,edx
c0001862:	8d 70 f8             	lea    esi,[eax-0x8]
c0001865:	f7 f7                	div    edi
c0001867:	85 d2                	test   edx,edx
c0001869:	74 62                	je     c00018cd <dlmemalign+0xe2>
c000186b:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000186f:	89 f8                	mov    eax,edi
c0001871:	f7 d8                	neg    eax
c0001873:	21 c3                	and    ebx,eax
c0001875:	83 eb 08             	sub    ebx,0x8
c0001878:	89 d8                	mov    eax,ebx
c000187a:	29 f0                	sub    eax,esi
c000187c:	83 f8 0f             	cmp    eax,0xf
c000187f:	77 02                	ja     c0001883 <dlmemalign+0x98>
c0001881:	01 fb                	add    ebx,edi
c0001883:	89 d8                	mov    eax,ebx
c0001885:	29 f0                	sub    eax,esi
c0001887:	89 c6                	mov    esi,eax
c0001889:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000188c:	89 c2                	mov    edx,eax
c000188e:	83 e2 fc             	and    edx,0xfffffffc
c0001891:	29 f2                	sub    edx,esi
c0001893:	a8 02                	test   al,0x2
c0001895:	74 10                	je     c00018a7 <dlmemalign+0xbc>
c0001897:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000189a:	83 ca 02             	or     edx,0x2
c000189d:	8d 43 08             	lea    eax,[ebx+0x8]
c00018a0:	89 33                	mov    DWORD PTR [ebx],esi
c00018a2:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00018a5:	eb 5f                	jmp    c0001906 <dlmemalign+0x11b>
c00018a7:	83 ec 0c             	sub    esp,0xc
c00018aa:	89 d0                	mov    eax,edx
c00018ac:	83 c8 01             	or     eax,0x1
c00018af:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00018b2:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00018b7:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018ba:	83 e0 01             	and    eax,0x1
c00018bd:	09 f0                	or     eax,esi
c00018bf:	89 de                	mov    esi,ebx
c00018c1:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018c4:	51                   	push   ecx
c00018c5:	e8 e6 f4 ff ff       	call   c0000db0 <dlfree>
c00018ca:	83 c4 10             	add    esp,0x10
c00018cd:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018d0:	a8 02                	test   al,0x2
c00018d2:	75 2f                	jne    c0001903 <dlmemalign+0x118>
c00018d4:	83 e0 fc             	and    eax,0xfffffffc
c00018d7:	8d 55 10             	lea    edx,[ebp+0x10]
c00018da:	39 c2                	cmp    edx,eax
c00018dc:	73 25                	jae    c0001903 <dlmemalign+0x118>
c00018de:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018e1:	83 ec 0c             	sub    esp,0xc
c00018e4:	29 e8                	sub    eax,ebp
c00018e6:	83 c2 08             	add    edx,0x8
c00018e9:	83 c8 01             	or     eax,0x1
c00018ec:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00018ef:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018f2:	83 e0 01             	and    eax,0x1
c00018f5:	09 c5                	or     ebp,eax
c00018f7:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018fa:	52                   	push   edx
c00018fb:	e8 b0 f4 ff ff       	call   c0000db0 <dlfree>
c0001900:	83 c4 10             	add    esp,0x10
c0001903:	8d 46 08             	lea    eax,[esi+0x8]
c0001906:	83 c4 0c             	add    esp,0xc
c0001909:	5b                   	pop    ebx
c000190a:	5e                   	pop    esi
c000190b:	5f                   	pop    edi
c000190c:	5d                   	pop    ebp
c000190d:	c3                   	ret    

c000190e <dlcalloc>:
c000190e:	53                   	push   ebx
c000190f:	83 ec 14             	sub    esp,0x14
c0001912:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001916:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c000191b:	50                   	push   eax
c000191c:	e8 ea f7 ff ff       	call   c000110b <dlmalloc>
c0001921:	83 c4 10             	add    esp,0x10
c0001924:	89 c3                	mov    ebx,eax
c0001926:	85 c0                	test   eax,eax
c0001928:	74 77                	je     c00019a1 <dlcalloc+0x93>
c000192a:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000192d:	89 d0                	mov    eax,edx
c000192f:	83 e0 fc             	and    eax,0xfffffffc
c0001932:	80 e2 02             	and    dl,0x2
c0001935:	75 5a                	jne    c0001991 <dlcalloc+0x83>
c0001937:	83 e8 04             	sub    eax,0x4
c000193a:	83 f8 27             	cmp    eax,0x27
c000193d:	76 03                	jbe    c0001942 <dlcalloc+0x34>
c000193f:	51                   	push   ecx
c0001940:	eb 53                	jmp    c0001995 <dlcalloc+0x87>
c0001942:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001948:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000194f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001956:	83 f8 13             	cmp    eax,0x13
c0001959:	76 46                	jbe    c00019a1 <dlcalloc+0x93>
c000195b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001962:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001969:	83 f8 1b             	cmp    eax,0x1b
c000196c:	76 33                	jbe    c00019a1 <dlcalloc+0x93>
c000196e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001975:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000197c:	83 f8 23             	cmp    eax,0x23
c000197f:	76 20                	jbe    c00019a1 <dlcalloc+0x93>
c0001981:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001988:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000198f:	eb 10                	jmp    c00019a1 <dlcalloc+0x93>
c0001991:	83 e8 08             	sub    eax,0x8
c0001994:	52                   	push   edx
c0001995:	50                   	push   eax
c0001996:	6a 00                	push   0x0
c0001998:	53                   	push   ebx
c0001999:	e8 ce ed ff ff       	call   c000076c <memset>
c000199e:	83 c4 10             	add    esp,0x10
c00019a1:	89 d8                	mov    eax,ebx
c00019a3:	83 c4 08             	add    esp,0x8
c00019a6:	5b                   	pop    ebx
c00019a7:	c3                   	ret    

c00019a8 <dlcfree>:
c00019a8:	e9 03 f4 ff ff       	jmp    c0000db0 <dlfree>

c00019ad <dlindependent_calloc>:
c00019ad:	83 ec 28             	sub    esp,0x28
c00019b0:	b9 03 00 00 00       	mov    ecx,0x3
c00019b5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019b9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019c9:	e8 cb fa ff ff       	call   c0001499 <iALLOc>
c00019ce:	83 c4 2c             	add    esp,0x2c
c00019d1:	c3                   	ret    

c00019d2 <dlindependent_comalloc>:
c00019d2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019da:	31 c9                	xor    ecx,ecx
c00019dc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019e0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019e4:	e9 b0 fa ff ff       	jmp    c0001499 <iALLOc>

c00019e9 <dlvalloc>:
c00019e9:	83 ec 0c             	sub    esp,0xc
c00019ec:	83 3d 80 ee 02 c0 00 	cmp    DWORD PTR ds:0xc002ee80,0x0
c00019f3:	75 0a                	jne    c00019ff <dlvalloc+0x16>
c00019f5:	b8 80 ee 02 c0       	mov    eax,0xc002ee80
c00019fa:	e8 ca f2 ff ff       	call   c0000cc9 <malloc_consolidate>
c00019ff:	50                   	push   eax
c0001a00:	50                   	push   eax
c0001a01:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a05:	ff 35 dc f1 02 c0    	push   DWORD PTR ds:0xc002f1dc
c0001a0b:	e8 db fd ff ff       	call   c00017eb <dlmemalign>
c0001a10:	83 c4 1c             	add    esp,0x1c
c0001a13:	c3                   	ret    

c0001a14 <dlpvalloc>:
c0001a14:	83 ec 0c             	sub    esp,0xc
c0001a17:	83 3d 80 ee 02 c0 00 	cmp    DWORD PTR ds:0xc002ee80,0x0
c0001a1e:	75 0a                	jne    c0001a2a <dlpvalloc+0x16>
c0001a20:	b8 80 ee 02 c0       	mov    eax,0xc002ee80
c0001a25:	e8 9f f2 ff ff       	call   c0000cc9 <malloc_consolidate>
c0001a2a:	a1 dc f1 02 c0       	mov    eax,ds:0xc002f1dc
c0001a2f:	89 c1                	mov    ecx,eax
c0001a31:	52                   	push   edx
c0001a32:	f7 d9                	neg    ecx
c0001a34:	52                   	push   edx
c0001a35:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a39:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a3d:	21 ca                	and    edx,ecx
c0001a3f:	52                   	push   edx
c0001a40:	50                   	push   eax
c0001a41:	e8 a5 fd ff ff       	call   c00017eb <dlmemalign>
c0001a46:	83 c4 1c             	add    esp,0x1c
c0001a49:	c3                   	ret    

c0001a4a <dlmalloc_trim>:
c0001a4a:	b8 80 ee 02 c0       	mov    eax,0xc002ee80
c0001a4f:	e8 75 f2 ff ff       	call   c0000cc9 <malloc_consolidate>
c0001a54:	31 c0                	xor    eax,eax
c0001a56:	c3                   	ret    

c0001a57 <dlmalloc_usable_size>:
c0001a57:	53                   	push   ebx
c0001a58:	31 c0                	xor    eax,eax
c0001a5a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a5e:	85 c9                	test   ecx,ecx
c0001a60:	74 24                	je     c0001a86 <dlmalloc_usable_size+0x2f>
c0001a62:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a65:	f6 c2 02             	test   dl,0x2
c0001a68:	74 08                	je     c0001a72 <dlmalloc_usable_size+0x1b>
c0001a6a:	83 e2 fc             	and    edx,0xfffffffc
c0001a6d:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a70:	eb 14                	jmp    c0001a86 <dlmalloc_usable_size+0x2f>
c0001a72:	89 d3                	mov    ebx,edx
c0001a74:	31 c0                	xor    eax,eax
c0001a76:	83 e3 fe             	and    ebx,0xfffffffe
c0001a79:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a7e:	74 06                	je     c0001a86 <dlmalloc_usable_size+0x2f>
c0001a80:	83 e2 fc             	and    edx,0xfffffffc
c0001a83:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a86:	5b                   	pop    ebx
c0001a87:	c3                   	ret    

c0001a88 <dlmallinfo>:
c0001a88:	55                   	push   ebp
c0001a89:	57                   	push   edi
c0001a8a:	56                   	push   esi
c0001a8b:	53                   	push   ebx
c0001a8c:	83 ec 08             	sub    esp,0x8
c0001a8f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a93:	83 3d ac ee 02 c0 00 	cmp    DWORD PTR ds:0xc002eeac,0x0
c0001a9a:	75 0a                	jne    c0001aa6 <dlmallinfo+0x1e>
c0001a9c:	b8 80 ee 02 c0       	mov    eax,0xc002ee80
c0001aa1:	e8 23 f2 ff ff       	call   c0000cc9 <malloc_consolidate>
c0001aa6:	a1 ac ee 02 c0       	mov    eax,ds:0xc002eeac
c0001aab:	31 ed                	xor    ebp,ebp
c0001aad:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001ab0:	31 c9                	xor    ecx,ecx
c0001ab2:	83 e0 fc             	and    eax,0xfffffffc
c0001ab5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ab9:	31 c0                	xor    eax,eax
c0001abb:	8b 14 85 84 ee 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd117c]
c0001ac2:	85 d2                	test   edx,edx
c0001ac4:	74 0e                	je     c0001ad4 <dlmallinfo+0x4c>
c0001ac6:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001ac9:	45                   	inc    ebp
c0001aca:	83 e6 fc             	and    esi,0xfffffffc
c0001acd:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001ad0:	01 f1                	add    ecx,esi
c0001ad2:	eb ee                	jmp    c0001ac2 <dlmallinfo+0x3a>
c0001ad4:	40                   	inc    eax
c0001ad5:	83 f8 0a             	cmp    eax,0xa
c0001ad8:	75 e1                	jne    c0001abb <dlmallinfo+0x33>
c0001ada:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ade:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001ae5:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001ae8:	b8 b4 ee 02 c0       	mov    eax,0xc002eeb4
c0001aed:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001af0:	39 f0                	cmp    eax,esi
c0001af2:	74 10                	je     c0001b04 <dlmallinfo+0x7c>
c0001af4:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001af7:	ff 04 24             	inc    DWORD PTR [esp]
c0001afa:	83 e7 fc             	and    edi,0xfffffffc
c0001afd:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b00:	01 fa                	add    edx,edi
c0001b02:	eb ec                	jmp    c0001af0 <dlmallinfo+0x68>
c0001b04:	83 c0 08             	add    eax,0x8
c0001b07:	3d ac f1 02 c0       	cmp    eax,0xc002f1ac
c0001b0c:	75 df                	jne    c0001aed <dlmallinfo+0x65>
c0001b0e:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b11:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b14:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b17:	a1 e8 f1 02 c0       	mov    eax,ds:0xc002f1e8
c0001b1c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b1f:	89 03                	mov    DWORD PTR [ebx],eax
c0001b21:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b24:	8b 35 d0 f1 02 c0    	mov    esi,DWORD PTR ds:0xc002f1d0
c0001b2a:	29 d0                	sub    eax,edx
c0001b2c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b2f:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b32:	8b 35 e4 f1 02 c0    	mov    esi,DWORD PTR ds:0xc002f1e4
c0001b38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b3c:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b3f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b42:	8b 35 f4 f1 02 c0    	mov    esi,DWORD PTR ds:0xc002f1f4
c0001b48:	89 d8                	mov    eax,ebx
c0001b4a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b4d:	83 c4 08             	add    esp,0x8
c0001b50:	5b                   	pop    ebx
c0001b51:	5e                   	pop    esi
c0001b52:	5f                   	pop    edi
c0001b53:	5d                   	pop    ebp
c0001b54:	c2 04 00             	ret    0x4

c0001b57 <dlmalloc_stats>:
c0001b57:	83 ec 30             	sub    esp,0x30
c0001b5a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b5e:	50                   	push   eax
c0001b5f:	e8 24 ff ff ff       	call   c0001a88 <dlmallinfo>
c0001b64:	83 c4 30             	add    esp,0x30
c0001b67:	c3                   	ret    

c0001b68 <dlmallopt>:
c0001b68:	56                   	push   esi
c0001b69:	b8 80 ee 02 c0       	mov    eax,0xc002ee80
c0001b6e:	53                   	push   ebx
c0001b6f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b73:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b77:	e8 4d f1 ff ff       	call   c0000cc9 <malloc_consolidate>
c0001b7c:	8d 46 04             	lea    eax,[esi+0x4]
c0001b7f:	83 f8 05             	cmp    eax,0x5
c0001b82:	77 67                	ja     c0001beb <dlmallopt+0x83>
c0001b84:	ff 24 85 44 a0 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd5fbc]
c0001b8b:	83 fb 50             	cmp    ebx,0x50
c0001b8e:	77 5b                	ja     c0001beb <dlmallopt+0x83>
c0001b90:	ba 08 00 00 00       	mov    edx,0x8
c0001b95:	85 db                	test   ebx,ebx
c0001b97:	74 12                	je     c0001bab <dlmallopt+0x43>
c0001b99:	83 c3 0b             	add    ebx,0xb
c0001b9c:	ba 10 00 00 00       	mov    edx,0x10
c0001ba1:	83 fb 0f             	cmp    ebx,0xf
c0001ba4:	76 05                	jbe    c0001bab <dlmallopt+0x43>
c0001ba6:	89 da                	mov    edx,ebx
c0001ba8:	83 e2 f8             	and    edx,0xfffffff8
c0001bab:	a1 80 ee 02 c0       	mov    eax,ds:0xc002ee80
c0001bb0:	83 e0 03             	and    eax,0x3
c0001bb3:	09 d0                	or     eax,edx
c0001bb5:	a3 80 ee 02 c0       	mov    ds:0xc002ee80,eax
c0001bba:	eb 31                	jmp    c0001bed <dlmallopt+0x85>
c0001bbc:	89 1d c4 f1 02 c0    	mov    DWORD PTR ds:0xc002f1c4,ebx
c0001bc2:	eb 06                	jmp    c0001bca <dlmallopt+0x62>
c0001bc4:	89 1d c8 f1 02 c0    	mov    DWORD PTR ds:0xc002f1c8,ebx
c0001bca:	be 01 00 00 00       	mov    esi,0x1
c0001bcf:	eb 1c                	jmp    c0001bed <dlmallopt+0x85>
c0001bd1:	89 1d cc f1 02 c0    	mov    DWORD PTR ds:0xc002f1cc,ebx
c0001bd7:	eb f1                	jmp    c0001bca <dlmallopt+0x62>
c0001bd9:	31 f6                	xor    esi,esi
c0001bdb:	85 db                	test   ebx,ebx
c0001bdd:	75 0e                	jne    c0001bed <dlmallopt+0x85>
c0001bdf:	c7 05 d4 f1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f1d4,0x0
c0001be9:	eb df                	jmp    c0001bca <dlmallopt+0x62>
c0001beb:	31 f6                	xor    esi,esi
c0001bed:	89 f0                	mov    eax,esi
c0001bef:	5b                   	pop    ebx
c0001bf0:	5e                   	pop    esi
c0001bf1:	c3                   	ret    

c0001bf2 <disk_status>:
c0001bf2:	31 c0                	xor    eax,eax
c0001bf4:	c3                   	ret    

c0001bf5 <disk_initialize>:
c0001bf5:	31 c0                	xor    eax,eax
c0001bf7:	c3                   	ret    

c0001bf8 <disk_read>:
c0001bf8:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001bfd:	0f b6 04 85 60 29 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcd6a0]
c0001c05:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c09:	e9 36 fb 01 00       	jmp    c0021744 <fatWrapperReadDisk>

c0001c0e <disk_write>:
c0001c0e:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c13:	0f b6 04 85 60 29 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcd6a0]
c0001c1b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c1f:	e9 67 fb 01 00       	jmp    c002178b <fatWrapperWriteDisk>

c0001c24 <disk_ioctl>:
c0001c24:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c29:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c2d:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c32:	0f b6 04 85 60 29 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcd6a0]
c0001c3a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c3e:	e9 8f fb 01 00       	jmp    c00217d2 <fatWrapperIoctl>

c0001c43 <ld_word>:
c0001c43:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c47:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c4a:	c1 e2 08             	shl    edx,0x8
c0001c4d:	09 d0                	or     eax,edx
c0001c4f:	c3                   	ret    

c0001c50 <ld_dword>:
c0001c50:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c54:	89 d1                	mov    ecx,edx
c0001c56:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c5a:	c1 e1 08             	shl    ecx,0x8
c0001c5d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c60:	09 ca                	or     edx,ecx
c0001c62:	c1 e2 08             	shl    edx,0x8
c0001c65:	09 d0                	or     eax,edx
c0001c67:	c3                   	ret    

c0001c68 <ld_qword>:
c0001c68:	57                   	push   edi
c0001c69:	56                   	push   esi
c0001c6a:	53                   	push   ebx
c0001c6b:	31 db                	xor    ebx,ebx
c0001c6d:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c70:	89 df                	mov    edi,ebx
c0001c72:	89 ce                	mov    esi,ecx
c0001c74:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c78:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c7c:	c1 e6 08             	shl    esi,0x8
c0001c7f:	09 f2                	or     edx,esi
c0001c81:	89 d6                	mov    esi,edx
c0001c83:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001c87:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c8b:	c1 e6 08             	shl    esi,0x8
c0001c8e:	09 f2                	or     edx,esi
c0001c90:	89 d6                	mov    esi,edx
c0001c92:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c96:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c9a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c9d:	c1 e6 08             	shl    esi,0x8
c0001ca0:	89 fb                	mov    ebx,edi
c0001ca2:	09 f2                	or     edx,esi
c0001ca4:	89 d1                	mov    ecx,edx
c0001ca6:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001caa:	c1 e1 08             	shl    ecx,0x8
c0001cad:	89 da                	mov    edx,ebx
c0001caf:	09 c8                	or     eax,ecx
c0001cb1:	5b                   	pop    ebx
c0001cb2:	5e                   	pop    esi
c0001cb3:	5f                   	pop    edi
c0001cb4:	c3                   	ret    

c0001cb5 <st_word>:
c0001cb5:	66 89 10             	mov    WORD PTR [eax],dx
c0001cb8:	c3                   	ret    

c0001cb9 <st_dword>:
c0001cb9:	89 10                	mov    DWORD PTR [eax],edx
c0001cbb:	c3                   	ret    

c0001cbc <st_qword>:
c0001cbc:	89 10                	mov    DWORD PTR [eax],edx
c0001cbe:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001cc1:	c3                   	ret    

c0001cc2 <mem_cpy>:
c0001cc2:	85 c9                	test   ecx,ecx
c0001cc4:	74 10                	je     c0001cd6 <mem_cpy+0x14>
c0001cc6:	57                   	push   edi
c0001cc7:	01 c1                	add    ecx,eax
c0001cc9:	56                   	push   esi
c0001cca:	89 c7                	mov    edi,eax
c0001ccc:	89 d6                	mov    esi,edx
c0001cce:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ccf:	39 f9                	cmp    ecx,edi
c0001cd1:	75 fb                	jne    c0001cce <mem_cpy+0xc>
c0001cd3:	5e                   	pop    esi
c0001cd4:	5f                   	pop    edi
c0001cd5:	c3                   	ret    
c0001cd6:	c3                   	ret    

c0001cd7 <mem_set>:
c0001cd7:	01 c1                	add    ecx,eax
c0001cd9:	40                   	inc    eax
c0001cda:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cdd:	39 c8                	cmp    eax,ecx
c0001cdf:	75 f8                	jne    c0001cd9 <mem_set+0x2>
c0001ce1:	c3                   	ret    

c0001ce2 <mem_cmp>:
c0001ce2:	57                   	push   edi
c0001ce3:	56                   	push   esi
c0001ce4:	89 c6                	mov    esi,eax
c0001ce6:	53                   	push   ebx
c0001ce7:	46                   	inc    esi
c0001ce8:	42                   	inc    edx
c0001ce9:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001ced:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001cf1:	29 fb                	sub    ebx,edi
c0001cf3:	89 cf                	mov    edi,ecx
c0001cf5:	29 f7                	sub    edi,esi
c0001cf7:	01 c7                	add    edi,eax
c0001cf9:	74 04                	je     c0001cff <mem_cmp+0x1d>
c0001cfb:	85 db                	test   ebx,ebx
c0001cfd:	74 e8                	je     c0001ce7 <mem_cmp+0x5>
c0001cff:	89 d8                	mov    eax,ebx
c0001d01:	5b                   	pop    ebx
c0001d02:	5e                   	pop    esi
c0001d03:	5f                   	pop    edi
c0001d04:	c3                   	ret    

c0001d05 <chk_chr>:
c0001d05:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d08:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d0b:	74 07                	je     c0001d14 <chk_chr+0xf>
c0001d0d:	39 d1                	cmp    ecx,edx
c0001d0f:	74 03                	je     c0001d14 <chk_chr+0xf>
c0001d11:	40                   	inc    eax
c0001d12:	eb f1                	jmp    c0001d05 <chk_chr>
c0001d14:	89 c8                	mov    eax,ecx
c0001d16:	c3                   	ret    

c0001d17 <dbc_1st>:
c0001d17:	31 c0                	xor    eax,eax
c0001d19:	c3                   	ret    

c0001d1a <dbc_2nd>:
c0001d1a:	31 c0                	xor    eax,eax
c0001d1c:	c3                   	ret    

c0001d1d <tchar2uni>:
c0001d1d:	57                   	push   edi
c0001d1e:	89 c7                	mov    edi,eax
c0001d20:	56                   	push   esi
c0001d21:	53                   	push   ebx
c0001d22:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d24:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d26:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d29:	84 c9                	test   cl,cl
c0001d2b:	78 0a                	js     c0001d37 <tchar2uni+0x1a>
c0001d2d:	0f b6 d1             	movzx  edx,cl
c0001d30:	89 f3                	mov    ebx,esi
c0001d32:	e9 9f 00 00 00       	jmp    c0001dd6 <tchar2uni+0xb9>
c0001d37:	88 ca                	mov    dl,cl
c0001d39:	83 e2 e0             	and    edx,0xffffffe0
c0001d3c:	80 fa c0             	cmp    dl,0xc0
c0001d3f:	75 0c                	jne    c0001d4d <tchar2uni+0x30>
c0001d41:	89 ca                	mov    edx,ecx
c0001d43:	b9 01 00 00 00       	mov    ecx,0x1
c0001d48:	83 e2 1f             	and    edx,0x1f
c0001d4b:	eb 2e                	jmp    c0001d7b <tchar2uni+0x5e>
c0001d4d:	88 ca                	mov    dl,cl
c0001d4f:	83 e2 f0             	and    edx,0xfffffff0
c0001d52:	80 fa e0             	cmp    dl,0xe0
c0001d55:	75 0c                	jne    c0001d63 <tchar2uni+0x46>
c0001d57:	89 ca                	mov    edx,ecx
c0001d59:	b9 02 00 00 00       	mov    ecx,0x2
c0001d5e:	83 e2 0f             	and    edx,0xf
c0001d61:	eb 18                	jmp    c0001d7b <tchar2uni+0x5e>
c0001d63:	88 ca                	mov    dl,cl
c0001d65:	83 e2 f8             	and    edx,0xfffffff8
c0001d68:	88 d0                	mov    al,dl
c0001d6a:	83 ca ff             	or     edx,0xffffffff
c0001d6d:	3c f0                	cmp    al,0xf0
c0001d6f:	75 6c                	jne    c0001ddd <tchar2uni+0xc0>
c0001d71:	89 ca                	mov    edx,ecx
c0001d73:	b9 03 00 00 00       	mov    ecx,0x3
c0001d78:	83 e2 07             	and    edx,0x7
c0001d7b:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d7f:	46                   	inc    esi
c0001d80:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001d83:	88 c8                	mov    al,cl
c0001d85:	83 e0 c0             	and    eax,0xffffffc0
c0001d88:	3c 80                	cmp    al,0x80
c0001d8a:	75 4e                	jne    c0001dda <tchar2uni+0xbd>
c0001d8c:	c1 e2 06             	shl    edx,0x6
c0001d8f:	83 e1 3f             	and    ecx,0x3f
c0001d92:	09 ca                	or     edx,ecx
c0001d94:	39 de                	cmp    esi,ebx
c0001d96:	75 e7                	jne    c0001d7f <tchar2uni+0x62>
c0001d98:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001d9b:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001da1:	77 37                	ja     c0001dda <tchar2uni+0xbd>
c0001da3:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001da9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001daf:	76 29                	jbe    c0001dda <tchar2uni+0xbd>
c0001db1:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001db7:	76 1d                	jbe    c0001dd6 <tchar2uni+0xb9>
c0001db9:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001dbf:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001dc5:	c1 e1 06             	shl    ecx,0x6
c0001dc8:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001dce:	09 ca                	or     edx,ecx
c0001dd0:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001dd6:	89 1f                	mov    DWORD PTR [edi],ebx
c0001dd8:	eb 03                	jmp    c0001ddd <tchar2uni+0xc0>
c0001dda:	83 ca ff             	or     edx,0xffffffff
c0001ddd:	5b                   	pop    ebx
c0001dde:	89 d0                	mov    eax,edx
c0001de0:	5e                   	pop    esi
c0001de1:	5f                   	pop    edi
c0001de2:	c3                   	ret    

c0001de3 <put_utf>:
c0001de3:	53                   	push   ebx
c0001de4:	83 f8 7f             	cmp    eax,0x7f
c0001de7:	89 c3                	mov    ebx,eax
c0001de9:	b0 00                	mov    al,0x0
c0001deb:	77 11                	ja     c0001dfe <put_utf+0x1b>
c0001ded:	85 c9                	test   ecx,ecx
c0001def:	0f 84 e5 00 00 00    	je     c0001eda <put_utf+0xf7>
c0001df5:	88 1a                	mov    BYTE PTR [edx],bl
c0001df7:	b0 01                	mov    al,0x1
c0001df9:	e9 dc 00 00 00       	jmp    c0001eda <put_utf+0xf7>
c0001dfe:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e04:	77 23                	ja     c0001e29 <put_utf+0x46>
c0001e06:	83 f9 01             	cmp    ecx,0x1
c0001e09:	0f 86 cb 00 00 00    	jbe    c0001eda <put_utf+0xf7>
c0001e0f:	89 d8                	mov    eax,ebx
c0001e11:	83 e3 3f             	and    ebx,0x3f
c0001e14:	c1 e8 06             	shr    eax,0x6
c0001e17:	83 cb 80             	or     ebx,0xffffff80
c0001e1a:	83 c8 c0             	or     eax,0xffffffc0
c0001e1d:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e20:	88 02                	mov    BYTE PTR [edx],al
c0001e22:	b0 02                	mov    al,0x2
c0001e24:	e9 b1 00 00 00       	jmp    c0001eda <put_utf+0xf7>
c0001e29:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e2f:	77 40                	ja     c0001e71 <put_utf+0x8e>
c0001e31:	83 f9 02             	cmp    ecx,0x2
c0001e34:	0f 86 a0 00 00 00    	jbe    c0001eda <put_utf+0xf7>
c0001e3a:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e40:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e46:	0f 86 8e 00 00 00    	jbe    c0001eda <put_utf+0xf7>
c0001e4c:	89 d8                	mov    eax,ebx
c0001e4e:	c1 e8 0c             	shr    eax,0xc
c0001e51:	83 c8 e0             	or     eax,0xffffffe0
c0001e54:	88 02                	mov    BYTE PTR [edx],al
c0001e56:	89 d8                	mov    eax,ebx
c0001e58:	83 e3 3f             	and    ebx,0x3f
c0001e5b:	c1 e8 06             	shr    eax,0x6
c0001e5e:	83 cb 80             	or     ebx,0xffffff80
c0001e61:	83 e0 3f             	and    eax,0x3f
c0001e64:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e67:	83 c8 80             	or     eax,0xffffff80
c0001e6a:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e6d:	b0 03                	mov    al,0x3
c0001e6f:	eb 69                	jmp    c0001eda <put_utf+0xf7>
c0001e71:	83 f9 03             	cmp    ecx,0x3
c0001e74:	76 64                	jbe    c0001eda <put_utf+0xf7>
c0001e76:	89 d9                	mov    ecx,ebx
c0001e78:	0f b7 c3             	movzx  eax,bx
c0001e7b:	66 31 c9             	xor    cx,cx
c0001e7e:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001e84:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001e8a:	c1 e9 06             	shr    ecx,0x6
c0001e8d:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001e93:	77 43                	ja     c0001ed8 <put_utf+0xf5>
c0001e95:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001e9b:	77 3b                	ja     c0001ed8 <put_utf+0xf5>
c0001e9d:	09 cb                	or     ebx,ecx
c0001e9f:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ea5:	89 d8                	mov    eax,ebx
c0001ea7:	c1 e8 12             	shr    eax,0x12
c0001eaa:	83 c8 f0             	or     eax,0xfffffff0
c0001ead:	88 02                	mov    BYTE PTR [edx],al
c0001eaf:	89 d8                	mov    eax,ebx
c0001eb1:	c1 e8 0c             	shr    eax,0xc
c0001eb4:	83 e0 3f             	and    eax,0x3f
c0001eb7:	83 c8 80             	or     eax,0xffffff80
c0001eba:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ebd:	89 d8                	mov    eax,ebx
c0001ebf:	83 e3 3f             	and    ebx,0x3f
c0001ec2:	c1 e8 06             	shr    eax,0x6
c0001ec5:	83 cb 80             	or     ebx,0xffffff80
c0001ec8:	83 e0 3f             	and    eax,0x3f
c0001ecb:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001ece:	83 c8 80             	or     eax,0xffffff80
c0001ed1:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001ed4:	b0 04                	mov    al,0x4
c0001ed6:	eb 02                	jmp    c0001eda <put_utf+0xf7>
c0001ed8:	31 c0                	xor    eax,eax
c0001eda:	5b                   	pop    ebx
c0001edb:	c3                   	ret    

c0001edc <clst2sect>:
c0001edc:	89 c1                	mov    ecx,eax
c0001ede:	83 ea 02             	sub    edx,0x2
c0001ee1:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ee4:	83 e8 02             	sub    eax,0x2
c0001ee7:	39 d0                	cmp    eax,edx
c0001ee9:	76 0d                	jbe    c0001ef8 <clst2sect+0x1c>
c0001eeb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001eef:	f7 e2                	mul    edx
c0001ef1:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001ef4:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001ef7:	c3                   	ret    
c0001ef8:	31 c0                	xor    eax,eax
c0001efa:	31 d2                	xor    edx,edx
c0001efc:	c3                   	ret    

c0001efd <clmt_clust>:
c0001efd:	57                   	push   edi
c0001efe:	89 cf                	mov    edi,ecx
c0001f00:	56                   	push   esi
c0001f01:	89 d6                	mov    esi,edx
c0001f03:	53                   	push   ebx
c0001f04:	0f ac fe 09          	shrd   esi,edi,0x9
c0001f08:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001f0b:	89 f2                	mov    edx,esi
c0001f0d:	8b 00                	mov    eax,DWORD PTR [eax]
c0001f0f:	c1 ef 09             	shr    edi,0x9
c0001f12:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001f16:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001f19:	89 f9                	mov    ecx,edi
c0001f1b:	31 ff                	xor    edi,edi
c0001f1d:	57                   	push   edi
c0001f1e:	56                   	push   esi
c0001f1f:	51                   	push   ecx
c0001f20:	52                   	push   edx
c0001f21:	e8 be 56 02 00       	call   c00275e4 <__udivdi3>
c0001f26:	83 c4 10             	add    esp,0x10
c0001f29:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f2b:	85 d2                	test   edx,edx
c0001f2d:	74 10                	je     c0001f3f <clmt_clust+0x42>
c0001f2f:	39 d0                	cmp    eax,edx
c0001f31:	72 07                	jb     c0001f3a <clmt_clust+0x3d>
c0001f33:	29 d0                	sub    eax,edx
c0001f35:	83 c3 08             	add    ebx,0x8
c0001f38:	eb ef                	jmp    c0001f29 <clmt_clust+0x2c>
c0001f3a:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f3d:	89 c2                	mov    edx,eax
c0001f3f:	5b                   	pop    ebx
c0001f40:	89 d0                	mov    eax,edx
c0001f42:	5e                   	pop    esi
c0001f43:	5f                   	pop    edi
c0001f44:	c3                   	ret    

c0001f45 <pick_lfn>:
c0001f45:	55                   	push   ebp
c0001f46:	57                   	push   edi
c0001f47:	56                   	push   esi
c0001f48:	89 d6                	mov    esi,edx
c0001f4a:	53                   	push   ebx
c0001f4b:	89 c3                	mov    ebx,eax
c0001f4d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f50:	e8 ee fc ff ff       	call   c0001c43 <ld_word>
c0001f55:	66 85 c0             	test   ax,ax
c0001f58:	74 04                	je     c0001f5e <pick_lfn+0x19>
c0001f5a:	31 c0                	xor    eax,eax
c0001f5c:	eb 5c                	jmp    c0001fba <pick_lfn+0x75>
c0001f5e:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f61:	bd 01 00 00 00       	mov    ebp,0x1
c0001f66:	83 e1 bf             	and    ecx,0xffffffbf
c0001f69:	31 ff                	xor    edi,edi
c0001f6b:	49                   	dec    ecx
c0001f6c:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f6f:	0f b6 87 60 a1 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd5ea0]
c0001f76:	01 f0                	add    eax,esi
c0001f78:	e8 c6 fc ff ff       	call   c0001c43 <ld_word>
c0001f7d:	66 85 ed             	test   bp,bp
c0001f80:	74 11                	je     c0001f93 <pick_lfn+0x4e>
c0001f82:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f88:	77 d0                	ja     c0001f5a <pick_lfn+0x15>
c0001f8a:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001f8e:	89 c5                	mov    ebp,eax
c0001f90:	41                   	inc    ecx
c0001f91:	eb 04                	jmp    c0001f97 <pick_lfn+0x52>
c0001f93:	66 40                	inc    ax
c0001f95:	75 c3                	jne    c0001f5a <pick_lfn+0x15>
c0001f97:	47                   	inc    edi
c0001f98:	83 ff 0d             	cmp    edi,0xd
c0001f9b:	75 d2                	jne    c0001f6f <pick_lfn+0x2a>
c0001f9d:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fa0:	74 13                	je     c0001fb5 <pick_lfn+0x70>
c0001fa2:	66 85 ed             	test   bp,bp
c0001fa5:	74 0e                	je     c0001fb5 <pick_lfn+0x70>
c0001fa7:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fad:	77 ab                	ja     c0001f5a <pick_lfn+0x15>
c0001faf:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001fb5:	b8 01 00 00 00       	mov    eax,0x1
c0001fba:	5b                   	pop    ebx
c0001fbb:	5e                   	pop    esi
c0001fbc:	5f                   	pop    edi
c0001fbd:	5d                   	pop    ebp
c0001fbe:	c3                   	ret    

c0001fbf <put_lfn>:
c0001fbf:	55                   	push   ebp
c0001fc0:	31 ed                	xor    ebp,ebp
c0001fc2:	57                   	push   edi
c0001fc3:	89 d7                	mov    edi,edx
c0001fc5:	56                   	push   esi
c0001fc6:	31 f6                	xor    esi,esi
c0001fc8:	53                   	push   ebx
c0001fc9:	83 ec 08             	sub    esp,0x8
c0001fcc:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fcf:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001fd3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001fd7:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001fdd:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001fe0:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fe3:	31 d2                	xor    edx,edx
c0001fe5:	e8 cb fc ff ff       	call   c0001cb5 <st_word>
c0001fea:	0f b6 d9             	movzx  ebx,cl
c0001fed:	4b                   	dec    ebx
c0001fee:	6b db 0d             	imul   ebx,ebx,0xd
c0001ff1:	66 83 fe ff          	cmp    si,0xffff
c0001ff5:	74 08                	je     c0001fff <put_lfn+0x40>
c0001ff7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001ffa:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001ffe:	43                   	inc    ebx
c0001fff:	0f b6 85 60 a1 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd5ea0]
c0002006:	0f b7 d6             	movzx  edx,si
c0002009:	01 f8                	add    eax,edi
c000200b:	e8 a5 fc ff ff       	call   c0001cb5 <st_word>
c0002010:	66 85 f6             	test   si,si
c0002013:	75 03                	jne    c0002018 <put_lfn+0x59>
c0002015:	83 ce ff             	or     esi,0xffffffff
c0002018:	45                   	inc    ebp
c0002019:	83 fd 0d             	cmp    ebp,0xd
c000201c:	75 d3                	jne    c0001ff1 <put_lfn+0x32>
c000201e:	66 46                	inc    si
c0002020:	74 0a                	je     c000202c <put_lfn+0x6d>
c0002022:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002025:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000202a:	75 09                	jne    c0002035 <put_lfn+0x76>
c000202c:	88 c8                	mov    al,cl
c000202e:	83 c8 40             	or     eax,0x40
c0002031:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002035:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002039:	88 07                	mov    BYTE PTR [edi],al
c000203b:	83 c4 08             	add    esp,0x8
c000203e:	5b                   	pop    ebx
c000203f:	5e                   	pop    esi
c0002040:	5f                   	pop    edi
c0002041:	5d                   	pop    ebp
c0002042:	c3                   	ret    

c0002043 <gen_numname>:
c0002043:	57                   	push   edi
c0002044:	89 cf                	mov    edi,ecx
c0002046:	56                   	push   esi
c0002047:	b9 0b 00 00 00       	mov    ecx,0xb
c000204c:	53                   	push   ebx
c000204d:	89 c6                	mov    esi,eax
c000204f:	83 ec 10             	sub    esp,0x10
c0002052:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002056:	e8 67 fc ff ff       	call   c0001cc2 <mem_cpy>
c000205b:	83 fb 05             	cmp    ebx,0x5
c000205e:	76 2d                	jbe    c000208d <gen_numname+0x4a>
c0002060:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002063:	66 85 c0             	test   ax,ax
c0002066:	74 25                	je     c000208d <gen_numname+0x4a>
c0002068:	83 c7 02             	add    edi,0x2
c000206b:	ba 10 00 00 00       	mov    edx,0x10
c0002070:	01 db                	add    ebx,ebx
c0002072:	89 c1                	mov    ecx,eax
c0002074:	66 d1 e8             	shr    ax,1
c0002077:	83 e1 01             	and    ecx,0x1
c000207a:	01 cb                	add    ebx,ecx
c000207c:	0f ba e3 10          	bt     ebx,0x10
c0002080:	73 06                	jae    c0002088 <gen_numname+0x45>
c0002082:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0002088:	4a                   	dec    edx
c0002089:	75 e5                	jne    c0002070 <gen_numname+0x2d>
c000208b:	eb d3                	jmp    c0002060 <gen_numname+0x1d>
c000208d:	b8 07 00 00 00       	mov    eax,0x7
c0002092:	88 d9                	mov    cl,bl
c0002094:	83 e1 0f             	and    ecx,0xf
c0002097:	8d 51 30             	lea    edx,[ecx+0x30]
c000209a:	80 fa 39             	cmp    dl,0x39
c000209d:	76 03                	jbe    c00020a2 <gen_numname+0x5f>
c000209f:	8d 51 37             	lea    edx,[ecx+0x37]
c00020a2:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020a5:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020a9:	89 da                	mov    edx,ebx
c00020ab:	c1 ea 04             	shr    edx,0x4
c00020ae:	83 fb 0f             	cmp    ebx,0xf
c00020b1:	76 06                	jbe    c00020b9 <gen_numname+0x76>
c00020b3:	89 c8                	mov    eax,ecx
c00020b5:	89 d3                	mov    ebx,edx
c00020b7:	eb d9                	jmp    c0002092 <gen_numname+0x4f>
c00020b9:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020be:	31 d2                	xor    edx,edx
c00020c0:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020c3:	8d 04 16             	lea    eax,[esi+edx*1]
c00020c6:	39 ca                	cmp    edx,ecx
c00020c8:	73 18                	jae    c00020e2 <gen_numname+0x9f>
c00020ca:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020cd:	3c 20                	cmp    al,0x20
c00020cf:	74 11                	je     c00020e2 <gen_numname+0x9f>
c00020d1:	e8 41 fc ff ff       	call   c0001d17 <dbc_1st>
c00020d6:	85 c0                	test   eax,eax
c00020d8:	74 05                	je     c00020df <gen_numname+0x9c>
c00020da:	39 d3                	cmp    ebx,edx
c00020dc:	74 04                	je     c00020e2 <gen_numname+0x9f>
c00020de:	42                   	inc    edx
c00020df:	42                   	inc    edx
c00020e0:	eb e1                	jmp    c00020c3 <gen_numname+0x80>
c00020e2:	b0 20                	mov    al,0x20
c00020e4:	83 f9 07             	cmp    ecx,0x7
c00020e7:	77 05                	ja     c00020ee <gen_numname+0xab>
c00020e9:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00020ed:	41                   	inc    ecx
c00020ee:	42                   	inc    edx
c00020ef:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c00020f3:	83 fa 07             	cmp    edx,0x7
c00020f6:	76 ea                	jbe    c00020e2 <gen_numname+0x9f>
c00020f8:	83 c4 10             	add    esp,0x10
c00020fb:	5b                   	pop    ebx
c00020fc:	5e                   	pop    esi
c00020fd:	5f                   	pop    edi
c00020fe:	c3                   	ret    

c00020ff <sum_sfn>:
c00020ff:	31 c9                	xor    ecx,ecx
c0002101:	31 d2                	xor    edx,edx
c0002103:	d0 ca                	ror    dl,1
c0002105:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002108:	41                   	inc    ecx
c0002109:	83 f9 0b             	cmp    ecx,0xb
c000210c:	75 f5                	jne    c0002103 <sum_sfn+0x4>
c000210e:	88 d0                	mov    al,dl
c0002110:	c3                   	ret    

c0002111 <xdir_sum>:
c0002111:	56                   	push   esi
c0002112:	31 c9                	xor    ecx,ecx
c0002114:	53                   	push   ebx
c0002115:	31 d2                	xor    edx,edx
c0002117:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c000211b:	43                   	inc    ebx
c000211c:	c1 e3 05             	shl    ebx,0x5
c000211f:	83 fa 02             	cmp    edx,0x2
c0002122:	74 0b                	je     c000212f <xdir_sum+0x1e>
c0002124:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002128:	66 d1 c9             	ror    cx,1
c000212b:	01 f1                	add    ecx,esi
c000212d:	eb 05                	jmp    c0002134 <xdir_sum+0x23>
c000212f:	ba 03 00 00 00       	mov    edx,0x3
c0002134:	42                   	inc    edx
c0002135:	39 d3                	cmp    ebx,edx
c0002137:	77 e6                	ja     c000211f <xdir_sum+0xe>
c0002139:	89 c8                	mov    eax,ecx
c000213b:	5b                   	pop    ebx
c000213c:	5e                   	pop    esi
c000213d:	c3                   	ret    

c000213e <xsum32>:
c000213e:	d1 ca                	ror    edx,1
c0002140:	0f b6 c0             	movzx  eax,al
c0002143:	01 d0                	add    eax,edx
c0002145:	c3                   	ret    

c0002146 <get_xfileinfo>:
c0002146:	55                   	push   ebp
c0002147:	31 c9                	xor    ecx,ecx
c0002149:	57                   	push   edi
c000214a:	bd 40 00 00 00       	mov    ebp,0x40
c000214f:	56                   	push   esi
c0002150:	31 ff                	xor    edi,edi
c0002152:	53                   	push   ebx
c0002153:	89 c6                	mov    esi,eax
c0002155:	83 ec 0c             	sub    esp,0xc
c0002158:	89 d3                	mov    ebx,edx
c000215a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002161:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002165:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002168:	76 6d                	jbe    c00021d7 <get_xfileinfo+0x91>
c000216a:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002170:	76 0b                	jbe    c000217d <get_xfileinfo+0x37>
c0002172:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0002176:	bf 01 00 00 00       	mov    edi,0x1
c000217b:	eb 63                	jmp    c00021e0 <get_xfileinfo+0x9a>
c000217d:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0002183:	75 03                	jne    c0002188 <get_xfileinfo+0x42>
c0002185:	83 c5 02             	add    ebp,0x2
c0002188:	8d 04 2e             	lea    eax,[esi+ebp*1]
c000218b:	83 c5 02             	add    ebp,0x2
c000218e:	e8 b0 fa ff ff       	call   c0001c43 <ld_word>
c0002193:	ff 04 24             	inc    DWORD PTR [esp]
c0002196:	66 85 c9             	test   cx,cx
c0002199:	75 0d                	jne    c00021a8 <get_xfileinfo+0x62>
c000219b:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00021a1:	66 81 fa ff 07       	cmp    dx,0x7ff
c00021a6:	76 2b                	jbe    c00021d3 <get_xfileinfo+0x8d>
c00021a8:	c1 e1 10             	shl    ecx,0x10
c00021ab:	ba ff 00 00 00       	mov    edx,0xff
c00021b0:	0f b7 c0             	movzx  eax,ax
c00021b3:	29 fa                	sub    edx,edi
c00021b5:	09 c8                	or     eax,ecx
c00021b7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00021bb:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021bf:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021c3:	e8 1b fc ff ff       	call   c0001de3 <put_utf>
c00021c8:	84 c0                	test   al,al
c00021ca:	74 a6                	je     c0002172 <get_xfileinfo+0x2c>
c00021cc:	0f b6 c0             	movzx  eax,al
c00021cf:	01 c7                	add    edi,eax
c00021d1:	31 c0                	xor    eax,eax
c00021d3:	89 c1                	mov    ecx,eax
c00021d5:	eb 8a                	jmp    c0002161 <get_xfileinfo+0x1b>
c00021d7:	85 ff                	test   edi,edi
c00021d9:	74 97                	je     c0002172 <get_xfileinfo+0x2c>
c00021db:	66 85 c9             	test   cx,cx
c00021de:	75 92                	jne    c0002172 <get_xfileinfo+0x2c>
c00021e0:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00021e5:	31 c0                	xor    eax,eax
c00021e7:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c00021eb:	31 d2                	xor    edx,edx
c00021ed:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c00021f0:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c00021f3:	80 e1 10             	and    cl,0x10
c00021f6:	75 08                	jne    c0002200 <get_xfileinfo+0xba>
c00021f8:	8d 46 38             	lea    eax,[esi+0x38]
c00021fb:	e8 68 fa ff ff       	call   c0001c68 <ld_qword>
c0002200:	89 03                	mov    DWORD PTR [ebx],eax
c0002202:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002205:	8d 46 0c             	lea    eax,[esi+0xc]
c0002208:	e8 36 fa ff ff       	call   c0001c43 <ld_word>
c000220d:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002211:	8d 46 0e             	lea    eax,[esi+0xe]
c0002214:	e8 2a fa ff ff       	call   c0001c43 <ld_word>
c0002219:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000221d:	83 c4 0c             	add    esp,0xc
c0002220:	5b                   	pop    ebx
c0002221:	5e                   	pop    esi
c0002222:	5f                   	pop    edi
c0002223:	5d                   	pop    ebp
c0002224:	c3                   	ret    

c0002225 <get_ldnumber>:
c0002225:	8b 10                	mov    edx,DWORD PTR [eax]
c0002227:	85 d2                	test   edx,edx
c0002229:	74 14                	je     c000223f <get_ldnumber+0x1a>
c000222b:	56                   	push   esi
c000222c:	53                   	push   ebx
c000222d:	89 d3                	mov    ebx,edx
c000222f:	43                   	inc    ebx
c0002230:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002233:	80 f9 1f             	cmp    cl,0x1f
c0002236:	76 0d                	jbe    c0002245 <get_ldnumber+0x20>
c0002238:	80 f9 3a             	cmp    cl,0x3a
c000223b:	75 f2                	jne    c000222f <get_ldnumber+0xa>
c000223d:	eb 0a                	jmp    c0002249 <get_ldnumber+0x24>
c000223f:	83 c9 ff             	or     ecx,0xffffffff
c0002242:	89 c8                	mov    eax,ecx
c0002244:	c3                   	ret    
c0002245:	31 c9                	xor    ecx,ecx
c0002247:	eb 24                	jmp    c000226d <get_ldnumber+0x48>
c0002249:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000224c:	8d 4e d0             	lea    ecx,[esi-0x30]
c000224f:	80 f9 09             	cmp    cl,0x9
c0002252:	77 16                	ja     c000226a <get_ldnumber+0x45>
c0002254:	83 c2 02             	add    edx,0x2
c0002257:	83 c9 ff             	or     ecx,0xffffffff
c000225a:	39 d3                	cmp    ebx,edx
c000225c:	75 0f                	jne    c000226d <get_ldnumber+0x48>
c000225e:	89 f2                	mov    edx,esi
c0002260:	89 18                	mov    DWORD PTR [eax],ebx
c0002262:	0f be ca             	movsx  ecx,dl
c0002265:	83 e9 30             	sub    ecx,0x30
c0002268:	eb 03                	jmp    c000226d <get_ldnumber+0x48>
c000226a:	83 c9 ff             	or     ecx,0xffffffff
c000226d:	89 c8                	mov    eax,ecx
c000226f:	5b                   	pop    ebx
c0002270:	5e                   	pop    esi
c0002271:	c3                   	ret    

c0002272 <crc32>:
c0002272:	56                   	push   esi
c0002273:	89 d6                	mov    esi,edx
c0002275:	53                   	push   ebx
c0002276:	b2 01                	mov    dl,0x1
c0002278:	bb 08 00 00 00       	mov    ebx,0x8
c000227d:	89 f1                	mov    ecx,esi
c000227f:	84 d1                	test   cl,dl
c0002281:	0f 95 c1             	setne  cl
c0002284:	0f b6 c9             	movzx  ecx,cl
c0002287:	31 c1                	xor    ecx,eax
c0002289:	89 c8                	mov    eax,ecx
c000228b:	d1 e8                	shr    eax,1
c000228d:	80 e1 01             	and    cl,0x1
c0002290:	74 05                	je     c0002297 <crc32+0x25>
c0002292:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0002297:	d1 e2                	shl    edx,1
c0002299:	4b                   	dec    ebx
c000229a:	75 e1                	jne    c000227d <crc32+0xb>
c000229c:	5b                   	pop    ebx
c000229d:	5e                   	pop    esi
c000229e:	c3                   	ret    

c000229f <test_gpt_header>:
c000229f:	55                   	push   ebp
c00022a0:	b9 10 00 00 00       	mov    ecx,0x10
c00022a5:	57                   	push   edi
c00022a6:	ba 60 a0 02 c0       	mov    edx,0xc002a060
c00022ab:	56                   	push   esi
c00022ac:	31 ff                	xor    edi,edi
c00022ae:	53                   	push   ebx
c00022af:	89 c3                	mov    ebx,eax
c00022b1:	e8 2c fa ff ff       	call   c0001ce2 <mem_cmp>
c00022b6:	85 c0                	test   eax,eax
c00022b8:	75 55                	jne    c000230f <test_gpt_header+0x70>
c00022ba:	89 c7                	mov    edi,eax
c00022bc:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022c1:	83 ce ff             	or     esi,0xffffffff
c00022c4:	31 d2                	xor    edx,edx
c00022c6:	83 fd 03             	cmp    ebp,0x3
c00022c9:	76 05                	jbe    c00022d0 <test_gpt_header+0x31>
c00022cb:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022d0:	89 f0                	mov    eax,esi
c00022d2:	45                   	inc    ebp
c00022d3:	e8 9a ff ff ff       	call   c0002272 <crc32>
c00022d8:	83 fd 4c             	cmp    ebp,0x4c
c00022db:	89 c6                	mov    esi,eax
c00022dd:	75 e5                	jne    c00022c4 <test_gpt_header+0x25>
c00022df:	8d 43 10             	lea    eax,[ebx+0x10]
c00022e2:	f7 d6                	not    esi
c00022e4:	e8 67 f9 ff ff       	call   c0001c50 <ld_dword>
c00022e9:	39 c6                	cmp    esi,eax
c00022eb:	75 22                	jne    c000230f <test_gpt_header+0x70>
c00022ed:	8d 43 54             	lea    eax,[ebx+0x54]
c00022f0:	e8 5b f9 ff ff       	call   c0001c50 <ld_dword>
c00022f5:	83 c0 80             	add    eax,0xffffff80
c00022f8:	75 15                	jne    c000230f <test_gpt_header+0x70>
c00022fa:	8d 43 50             	lea    eax,[ebx+0x50]
c00022fd:	e8 4e f9 ff ff       	call   c0001c50 <ld_dword>
c0002302:	3d 80 00 00 00       	cmp    eax,0x80
c0002307:	0f 96 c0             	setbe  al
c000230a:	0f b6 c0             	movzx  eax,al
c000230d:	89 c7                	mov    edi,eax
c000230f:	5b                   	pop    ebx
c0002310:	89 f8                	mov    eax,edi
c0002312:	5e                   	pop    esi
c0002313:	5f                   	pop    edi
c0002314:	5d                   	pop    ebp
c0002315:	c3                   	ret    

c0002316 <make_rand>:
c0002316:	56                   	push   esi
c0002317:	85 c0                	test   eax,eax
c0002319:	53                   	push   ebx
c000231a:	75 05                	jne    c0002321 <make_rand+0xb>
c000231c:	b8 01 00 00 00       	mov    eax,0x1
c0002321:	01 d1                	add    ecx,edx
c0002323:	bb 08 00 00 00       	mov    ebx,0x8
c0002328:	89 c6                	mov    esi,eax
c000232a:	d1 e8                	shr    eax,1
c000232c:	83 e6 01             	and    esi,0x1
c000232f:	85 f6                	test   esi,esi
c0002331:	74 05                	je     c0002338 <make_rand+0x22>
c0002333:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002338:	4b                   	dec    ebx
c0002339:	75 ed                	jne    c0002328 <make_rand+0x12>
c000233b:	42                   	inc    edx
c000233c:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000233f:	39 ca                	cmp    edx,ecx
c0002341:	75 e0                	jne    c0002323 <make_rand+0xd>
c0002343:	5b                   	pop    ebx
c0002344:	5e                   	pop    esi
c0002345:	c3                   	ret    

c0002346 <validate>:
c0002346:	56                   	push   esi
c0002347:	53                   	push   ebx
c0002348:	89 d6                	mov    esi,edx
c000234a:	51                   	push   ecx
c000234b:	85 c0                	test   eax,eax
c000234d:	75 09                	jne    c0002358 <validate+0x12>
c000234f:	b8 09 00 00 00       	mov    eax,0x9
c0002354:	31 c9                	xor    ecx,ecx
c0002356:	eb 2f                	jmp    c0002387 <validate+0x41>
c0002358:	89 c3                	mov    ebx,eax
c000235a:	8b 00                	mov    eax,DWORD PTR [eax]
c000235c:	85 c0                	test   eax,eax
c000235e:	74 ef                	je     c000234f <validate+0x9>
c0002360:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002363:	74 ea                	je     c000234f <validate+0x9>
c0002365:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002369:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000236d:	75 e0                	jne    c000234f <validate+0x9>
c000236f:	83 ec 0c             	sub    esp,0xc
c0002372:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002376:	50                   	push   eax
c0002377:	e8 76 f8 ff ff       	call   c0001bf2 <disk_status>
c000237c:	83 c4 10             	add    esp,0x10
c000237f:	a8 01                	test   al,0x1
c0002381:	75 cc                	jne    c000234f <validate+0x9>
c0002383:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002385:	31 c0                	xor    eax,eax
c0002387:	89 0e                	mov    DWORD PTR [esi],ecx
c0002389:	5a                   	pop    edx
c000238a:	5b                   	pop    ebx
c000238b:	5e                   	pop    esi
c000238c:	c3                   	ret    

c000238d <sync_window>:
c000238d:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002391:	0f 84 85 00 00 00    	je     c000241c <sync_window+0x8f>
c0002397:	55                   	push   ebp
c0002398:	8d 68 54             	lea    ebp,[eax+0x54]
c000239b:	57                   	push   edi
c000239c:	56                   	push   esi
c000239d:	53                   	push   ebx
c000239e:	89 c3                	mov    ebx,eax
c00023a0:	83 ec 28             	sub    esp,0x28
c00023a3:	6a 01                	push   0x1
c00023a5:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00023a8:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00023ab:	55                   	push   ebp
c00023ac:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023b0:	50                   	push   eax
c00023b1:	e8 58 f8 ff ff       	call   c0001c0e <disk_write>
c00023b6:	83 c4 20             	add    esp,0x20
c00023b9:	ba 01 00 00 00       	mov    edx,0x1
c00023be:	85 c0                	test   eax,eax
c00023c0:	75 50                	jne    c0002412 <sync_window+0x85>
c00023c2:	31 ff                	xor    edi,edi
c00023c4:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023c7:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023cb:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023cf:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023d2:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023d5:	89 c6                	mov    esi,eax
c00023d7:	89 d7                	mov    edi,edx
c00023d9:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023dc:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023e0:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00023e3:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00023e7:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00023eb:	73 23                	jae    c0002410 <sync_window+0x83>
c00023ed:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00023f1:	75 1d                	jne    c0002410 <sync_window+0x83>
c00023f3:	83 ec 0c             	sub    esp,0xc
c00023f6:	6a 01                	push   0x1
c00023f8:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00023fc:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002400:	52                   	push   edx
c0002401:	50                   	push   eax
c0002402:	55                   	push   ebp
c0002403:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002407:	50                   	push   eax
c0002408:	e8 01 f8 ff ff       	call   c0001c0e <disk_write>
c000240d:	83 c4 20             	add    esp,0x20
c0002410:	31 d2                	xor    edx,edx
c0002412:	83 c4 1c             	add    esp,0x1c
c0002415:	89 d0                	mov    eax,edx
c0002417:	5b                   	pop    ebx
c0002418:	5e                   	pop    esi
c0002419:	5f                   	pop    edi
c000241a:	5d                   	pop    ebp
c000241b:	c3                   	ret    
c000241c:	31 d2                	xor    edx,edx
c000241e:	89 d0                	mov    eax,edx
c0002420:	c3                   	ret    

c0002421 <move_window>:
c0002421:	56                   	push   esi
c0002422:	53                   	push   ebx
c0002423:	89 c3                	mov    ebx,eax
c0002425:	83 ec 14             	sub    esp,0x14
c0002428:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000242b:	75 07                	jne    c0002434 <move_window+0x13>
c000242d:	31 f6                	xor    esi,esi
c000242f:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002432:	74 59                	je     c000248d <move_window+0x6c>
c0002434:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002438:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000243c:	89 d8                	mov    eax,ebx
c000243e:	e8 4a ff ff ff       	call   c000238d <sync_window>
c0002443:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002447:	89 c6                	mov    esi,eax
c0002449:	85 c0                	test   eax,eax
c000244b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000244f:	75 3c                	jne    c000248d <move_window+0x6c>
c0002451:	83 ec 0c             	sub    esp,0xc
c0002454:	8d 43 54             	lea    eax,[ebx+0x54]
c0002457:	6a 01                	push   0x1
c0002459:	51                   	push   ecx
c000245a:	52                   	push   edx
c000245b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000245f:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002463:	50                   	push   eax
c0002464:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002468:	50                   	push   eax
c0002469:	e8 8a f7 ff ff       	call   c0001bf8 <disk_read>
c000246e:	83 c4 20             	add    esp,0x20
c0002471:	85 c0                	test   eax,eax
c0002473:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002477:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000247b:	74 0a                	je     c0002487 <move_window+0x66>
c000247d:	83 ca ff             	or     edx,0xffffffff
c0002480:	be 01 00 00 00       	mov    esi,0x1
c0002485:	89 d1                	mov    ecx,edx
c0002487:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c000248a:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c000248d:	89 f0                	mov    eax,esi
c000248f:	83 c4 14             	add    esp,0x14
c0002492:	5b                   	pop    ebx
c0002493:	5e                   	pop    esi
c0002494:	c3                   	ret    

c0002495 <check_fs>:
c0002495:	53                   	push   ebx
c0002496:	89 c3                	mov    ebx,eax
c0002498:	83 ec 08             	sub    esp,0x8
c000249b:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000249f:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00024a6:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00024ad:	e8 6f ff ff ff       	call   c0002421 <move_window>
c00024b2:	ba 04 00 00 00       	mov    edx,0x4
c00024b7:	85 c0                	test   eax,eax
c00024b9:	0f 85 89 00 00 00    	jne    c0002548 <check_fs+0xb3>
c00024bf:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024c5:	e8 79 f7 ff ff       	call   c0001c43 <ld_word>
c00024ca:	ba 03 00 00 00       	mov    edx,0x3
c00024cf:	66 3d 55 aa          	cmp    ax,0xaa55
c00024d3:	75 73                	jne    c0002548 <check_fs+0xb3>
c00024d5:	ba 80 a1 02 c0       	mov    edx,0xc002a180
c00024da:	8d 43 54             	lea    eax,[ebx+0x54]
c00024dd:	b9 0b 00 00 00       	mov    ecx,0xb
c00024e2:	e8 fb f7 ff ff       	call   c0001ce2 <mem_cmp>
c00024e7:	ba 01 00 00 00       	mov    edx,0x1
c00024ec:	85 c0                	test   eax,eax
c00024ee:	74 58                	je     c0002548 <check_fs+0xb3>
c00024f0:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00024f3:	8d 50 18             	lea    edx,[eax+0x18]
c00024f6:	80 fa 01             	cmp    dl,0x1
c00024f9:	76 09                	jbe    c0002504 <check_fs+0x6f>
c00024fb:	ba 02 00 00 00       	mov    edx,0x2
c0002500:	3c eb                	cmp    al,0xeb
c0002502:	75 44                	jne    c0002548 <check_fs+0xb3>
c0002504:	ba 50 d6 02 c0       	mov    edx,0xc002d650
c0002509:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000250f:	b9 03 00 00 00       	mov    ecx,0x3
c0002514:	e8 c9 f7 ff ff       	call   c0001ce2 <mem_cmp>
c0002519:	31 d2                	xor    edx,edx
c000251b:	85 c0                	test   eax,eax
c000251d:	74 29                	je     c0002548 <check_fs+0xb3>
c000251f:	ba 8c a1 02 c0       	mov    edx,0xc002a18c
c0002524:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c000252a:	b9 05 00 00 00       	mov    ecx,0x5
c000252f:	e8 ae f7 ff ff       	call   c0001ce2 <mem_cmp>
c0002534:	31 d2                	xor    edx,edx
c0002536:	85 c0                	test   eax,eax
c0002538:	74 0e                	je     c0002548 <check_fs+0xb3>
c000253a:	31 d2                	xor    edx,edx
c000253c:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002543:	0f 95 c2             	setne  dl
c0002546:	01 d2                	add    edx,edx
c0002548:	89 d0                	mov    eax,edx
c000254a:	83 c4 08             	add    esp,0x8
c000254d:	5b                   	pop    ebx
c000254e:	c3                   	ret    

c000254f <find_volume>:
c000254f:	55                   	push   ebp
c0002550:	31 c9                	xor    ecx,ecx
c0002552:	57                   	push   edi
c0002553:	56                   	push   esi
c0002554:	89 d6                	mov    esi,edx
c0002556:	53                   	push   ebx
c0002557:	31 d2                	xor    edx,edx
c0002559:	83 ec 3c             	sub    esp,0x3c
c000255c:	89 c3                	mov    ebx,eax
c000255e:	e8 32 ff ff ff       	call   c0002495 <check_fs>
c0002563:	83 f8 02             	cmp    eax,0x2
c0002566:	74 0e                	je     c0002576 <find_volume+0x27>
c0002568:	0f 87 5d 01 00 00    	ja     c00026cb <find_volume+0x17c>
c000256e:	85 f6                	test   esi,esi
c0002570:	0f 84 55 01 00 00    	je     c00026cb <find_volume+0x17c>
c0002576:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000257d:	0f 85 dd 00 00 00    	jne    c0002660 <find_volume+0x111>
c0002583:	31 c9                	xor    ecx,ecx
c0002585:	ba 01 00 00 00       	mov    edx,0x1
c000258a:	89 d8                	mov    eax,ebx
c000258c:	e8 90 fe ff ff       	call   c0002421 <move_window>
c0002591:	85 c0                	test   eax,eax
c0002593:	74 0a                	je     c000259f <find_volume+0x50>
c0002595:	b8 04 00 00 00       	mov    eax,0x4
c000259a:	e9 2c 01 00 00       	jmp    c00026cb <find_volume+0x17c>
c000259f:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00025a2:	89 e8                	mov    eax,ebp
c00025a4:	e8 f6 fc ff ff       	call   c000229f <test_gpt_header>
c00025a9:	85 c0                	test   eax,eax
c00025ab:	75 0a                	jne    c00025b7 <find_volume+0x68>
c00025ad:	b8 03 00 00 00       	mov    eax,0x3
c00025b2:	e9 14 01 00 00       	jmp    c00026cb <find_volume+0x17c>
c00025b7:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025bd:	e8 8e f6 ff ff       	call   c0001c50 <ld_dword>
c00025c2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025c6:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025cc:	e8 97 f6 ff ff       	call   c0001c68 <ld_qword>
c00025d1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025d9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025dd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025e1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00025e9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00025ed:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00025f1:	74 ba                	je     c00025ad <find_volume+0x5e>
c00025f3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00025f7:	31 c9                	xor    ecx,ecx
c00025f9:	c1 e7 07             	shl    edi,0x7
c00025fc:	89 d8                	mov    eax,ebx
c00025fe:	89 fa                	mov    edx,edi
c0002600:	c1 ea 09             	shr    edx,0x9
c0002603:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002607:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c000260b:	e8 11 fe ff ff       	call   c0002421 <move_window>
c0002610:	85 c0                	test   eax,eax
c0002612:	75 81                	jne    c0002595 <find_volume+0x46>
c0002614:	81 e7 80 01 00 00    	and    edi,0x180
c000261a:	b9 10 00 00 00       	mov    ecx,0x10
c000261f:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002623:	ba 70 a1 02 c0       	mov    edx,0xc002a170
c0002628:	e8 b5 f6 ff ff       	call   c0001ce2 <mem_cmp>
c000262d:	85 c0                	test   eax,eax
c000262f:	75 29                	jne    c000265a <find_volume+0x10b>
c0002631:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002635:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002639:	e8 2a f6 ff ff       	call   c0001c68 <ld_qword>
c000263e:	89 d1                	mov    ecx,edx
c0002640:	89 c2                	mov    edx,eax
c0002642:	89 d8                	mov    eax,ebx
c0002644:	e8 4c fe ff ff       	call   c0002495 <check_fs>
c0002649:	85 f6                	test   esi,esi
c000264b:	75 07                	jne    c0002654 <find_volume+0x105>
c000264d:	83 f8 01             	cmp    eax,0x1
c0002650:	77 08                	ja     c000265a <find_volume+0x10b>
c0002652:	eb 77                	jmp    c00026cb <find_volume+0x17c>
c0002654:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002658:	74 71                	je     c00026cb <find_volume+0x17c>
c000265a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000265e:	eb 89                	jmp    c00025e9 <find_volume+0x9a>
c0002660:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002664:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c000266a:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002670:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002674:	89 cd                	mov    ebp,ecx
c0002676:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000267a:	89 f8                	mov    eax,edi
c000267c:	83 c7 10             	add    edi,0x10
c000267f:	e8 cc f5 ff ff       	call   c0001c50 <ld_dword>
c0002684:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0002688:	89 01                	mov    DWORD PTR [ecx],eax
c000268a:	83 c1 04             	add    ecx,0x4
c000268d:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002691:	75 e3                	jne    c0002676 <find_volume+0x127>
c0002693:	31 ff                	xor    edi,edi
c0002695:	85 f6                	test   esi,esi
c0002697:	74 03                	je     c000269c <find_volume+0x14d>
c0002699:	8d 7e ff             	lea    edi,[esi-0x1]
c000269c:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00026a0:	85 d2                	test   edx,edx
c00026a2:	74 14                	je     c00026b8 <find_volume+0x169>
c00026a4:	31 c9                	xor    ecx,ecx
c00026a6:	89 d8                	mov    eax,ebx
c00026a8:	e8 e8 fd ff ff       	call   c0002495 <check_fs>
c00026ad:	83 f8 01             	cmp    eax,0x1
c00026b0:	76 19                	jbe    c00026cb <find_volume+0x17c>
c00026b2:	85 f6                	test   esi,esi
c00026b4:	74 0f                	je     c00026c5 <find_volume+0x176>
c00026b6:	eb 13                	jmp    c00026cb <find_volume+0x17c>
c00026b8:	85 f6                	test   esi,esi
c00026ba:	0f 85 ed fe ff ff    	jne    c00025ad <find_volume+0x5e>
c00026c0:	b8 03 00 00 00       	mov    eax,0x3
c00026c5:	47                   	inc    edi
c00026c6:	83 ff 03             	cmp    edi,0x3
c00026c9:	76 d1                	jbe    c000269c <find_volume+0x14d>
c00026cb:	83 c4 3c             	add    esp,0x3c
c00026ce:	5b                   	pop    ebx
c00026cf:	5e                   	pop    esi
c00026d0:	5f                   	pop    edi
c00026d1:	5d                   	pop    ebp
c00026d2:	c3                   	ret    

c00026d3 <mount_volume>:
c00026d3:	55                   	push   ebp
c00026d4:	57                   	push   edi
c00026d5:	89 cf                	mov    edi,ecx
c00026d7:	56                   	push   esi
c00026d8:	53                   	push   ebx
c00026d9:	bb 0b 00 00 00       	mov    ebx,0xb
c00026de:	83 ec 3c             	sub    esp,0x3c
c00026e1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026e7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00026eb:	e8 35 fb ff ff       	call   c0002225 <get_ldnumber>
c00026f0:	85 c0                	test   eax,eax
c00026f2:	0f 88 3a 05 00 00    	js     c0002c32 <mount_volume+0x55f>
c00026f8:	8b 2c 85 20 f2 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd0de0]
c00026ff:	89 c6                	mov    esi,eax
c0002701:	bb 0c 00 00 00       	mov    ebx,0xc
c0002706:	85 ed                	test   ebp,ebp
c0002708:	0f 84 24 05 00 00    	je     c0002c32 <mount_volume+0x55f>
c000270e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002712:	83 e7 fe             	and    edi,0xfffffffe
c0002715:	89 2a                	mov    DWORD PTR [edx],ebp
c0002717:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c000271b:	74 32                	je     c000274f <mount_volume+0x7c>
c000271d:	83 ec 0c             	sub    esp,0xc
c0002720:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002724:	50                   	push   eax
c0002725:	e8 c8 f4 ff ff       	call   c0001bf2 <disk_status>
c000272a:	83 c4 10             	add    esp,0x10
c000272d:	a8 01                	test   al,0x1
c000272f:	75 1e                	jne    c000274f <mount_volume+0x7c>
c0002731:	31 db                	xor    ebx,ebx
c0002733:	89 f9                	mov    ecx,edi
c0002735:	84 c9                	test   cl,cl
c0002737:	0f 84 f5 04 00 00    	je     c0002c32 <mount_volume+0x55f>
c000273d:	a8 04                	test   al,0x4
c000273f:	0f 84 ed 04 00 00    	je     c0002c32 <mount_volume+0x55f>
c0002745:	bb 0a 00 00 00       	mov    ebx,0xa
c000274a:	e9 e3 04 00 00       	jmp    c0002c32 <mount_volume+0x55f>
c000274f:	83 ec 0c             	sub    esp,0xc
c0002752:	89 f0                	mov    eax,esi
c0002754:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002758:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000275b:	0f b6 f0             	movzx  esi,al
c000275e:	bb 03 00 00 00       	mov    ebx,0x3
c0002763:	56                   	push   esi
c0002764:	e8 8c f4 ff ff       	call   c0001bf5 <disk_initialize>
c0002769:	83 c4 10             	add    esp,0x10
c000276c:	a8 01                	test   al,0x1
c000276e:	0f 85 be 04 00 00    	jne    c0002c32 <mount_volume+0x55f>
c0002774:	89 f9                	mov    ecx,edi
c0002776:	84 c9                	test   cl,cl
c0002778:	74 04                	je     c000277e <mount_volume+0xab>
c000277a:	a8 04                	test   al,0x4
c000277c:	75 c7                	jne    c0002745 <mount_volume+0x72>
c000277e:	31 d2                	xor    edx,edx
c0002780:	89 e8                	mov    eax,ebp
c0002782:	e8 c8 fd ff ff       	call   c000254f <find_volume>
c0002787:	83 f8 04             	cmp    eax,0x4
c000278a:	75 0a                	jne    c0002796 <mount_volume+0xc3>
c000278c:	bb 01 00 00 00       	mov    ebx,0x1
c0002791:	e9 9c 04 00 00       	jmp    c0002c32 <mount_volume+0x55f>
c0002796:	83 f8 01             	cmp    eax,0x1
c0002799:	76 0a                	jbe    c00027a5 <mount_volume+0xd2>
c000279b:	bb 0d 00 00 00       	mov    ebx,0xd
c00027a0:	e9 8d 04 00 00       	jmp    c0002c32 <mount_volume+0x55f>
c00027a5:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00027a8:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00027ab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027af:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027b3:	75 17                	jne    c00027cc <mount_volume+0xf9>
c00027b5:	b8 0b 00 00 00       	mov    eax,0xb
c00027ba:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027bf:	75 da                	jne    c000279b <mount_volume+0xc8>
c00027c1:	40                   	inc    eax
c00027c2:	83 f8 40             	cmp    eax,0x40
c00027c5:	75 f3                	jne    c00027ba <mount_volume+0xe7>
c00027c7:	e9 5a 02 00 00       	jmp    c0002a26 <mount_volume+0x353>
c00027cc:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027cf:	e8 6f f4 ff ff       	call   c0001c43 <ld_word>
c00027d4:	66 3d 00 02          	cmp    ax,0x200
c00027d8:	75 c1                	jne    c000279b <mount_volume+0xc8>
c00027da:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027dd:	e8 61 f4 ff ff       	call   c0001c43 <ld_word>
c00027e2:	0f b7 c0             	movzx  eax,ax
c00027e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027e9:	85 c0                	test   eax,eax
c00027eb:	75 0c                	jne    c00027f9 <mount_volume+0x126>
c00027ed:	8d 45 78             	lea    eax,[ebp+0x78]
c00027f0:	e8 5b f4 ff ff       	call   c0001c50 <ld_dword>
c00027f5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027fd:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002800:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002803:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002807:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c000280a:	48                   	dec    eax
c000280b:	3c 01                	cmp    al,0x1
c000280d:	77 8c                	ja     c000279b <mount_volume+0xc8>
c000280f:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002813:	89 c3                	mov    ebx,eax
c0002815:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002819:	66 85 c0             	test   ax,ax
c000281c:	0f 84 79 ff ff ff    	je     c000279b <mount_volume+0xc8>
c0002822:	8d 40 ff             	lea    eax,[eax-0x1]
c0002825:	85 d8                	test   eax,ebx
c0002827:	0f 85 6e ff ff ff    	jne    c000279b <mount_volume+0xc8>
c000282d:	8d 45 65             	lea    eax,[ebp+0x65]
c0002830:	e8 0e f4 ff ff       	call   c0001c43 <ld_word>
c0002835:	89 c7                	mov    edi,eax
c0002837:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000283b:	a8 0f                	test   al,0xf
c000283d:	0f 85 58 ff ff ff    	jne    c000279b <mount_volume+0xc8>
c0002843:	8d 45 67             	lea    eax,[ebp+0x67]
c0002846:	e8 f8 f3 ff ff       	call   c0001c43 <ld_word>
c000284b:	0f b7 f0             	movzx  esi,ax
c000284e:	85 f6                	test   esi,esi
c0002850:	75 0a                	jne    c000285c <mount_volume+0x189>
c0002852:	8d 45 74             	lea    eax,[ebp+0x74]
c0002855:	e8 f6 f3 ff ff       	call   c0001c50 <ld_dword>
c000285a:	89 c6                	mov    esi,eax
c000285c:	8d 45 62             	lea    eax,[ebp+0x62]
c000285f:	e8 df f3 ff ff       	call   c0001c43 <ld_word>
c0002864:	66 85 c0             	test   ax,ax
c0002867:	0f 84 2e ff ff ff    	je     c000279b <mount_volume+0xc8>
c000286d:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002872:	0f b7 c8             	movzx  ecx,ax
c0002875:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000287a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000287e:	89 fa                	mov    edx,edi
c0002880:	66 c1 ea 04          	shr    dx,0x4
c0002884:	0f b7 d2             	movzx  edx,dx
c0002887:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000288b:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000288e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002892:	39 c6                	cmp    esi,eax
c0002894:	0f 82 01 ff ff ff    	jb     c000279b <mount_volume+0xc8>
c000289a:	29 c6                	sub    esi,eax
c000289c:	31 d2                	xor    edx,edx
c000289e:	89 f0                	mov    eax,esi
c00028a0:	f7 f3                	div    ebx
c00028a2:	39 de                	cmp    esi,ebx
c00028a4:	0f 82 f1 fe ff ff    	jb     c000279b <mount_volume+0xc8>
c00028aa:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00028af:	0f 87 e6 fe ff ff    	ja     c000279b <mount_volume+0xc8>
c00028b5:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00028ba:	0f 86 63 03 00 00    	jbe    c0002c23 <mount_volume+0x550>
c00028c0:	bb 03 00 00 00       	mov    ebx,0x3
c00028c5:	8d 70 02             	lea    esi,[eax+0x2]
c00028c8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028d0:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028d3:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028d6:	31 d2                	xor    edx,edx
c00028d8:	89 c8                	mov    eax,ecx
c00028da:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028dd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028e1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028e5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00028e9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00028ed:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028f0:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028f3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00028f7:	31 d2                	xor    edx,edx
c00028f9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028fd:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002901:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002904:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002907:	83 fb 03             	cmp    ebx,0x3
c000290a:	75 2b                	jne    c0002937 <mount_volume+0x264>
c000290c:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000290f:	e8 2f f3 ff ff       	call   c0001c43 <ld_word>
c0002914:	66 09 c7             	or     di,ax
c0002917:	0f 85 7e fe ff ff    	jne    c000279b <mount_volume+0xc8>
c000291d:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002923:	c1 e6 02             	shl    esi,0x2
c0002926:	e8 25 f3 ff ff       	call   c0001c50 <ld_dword>
c000292b:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002932:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002935:	eb 30                	jmp    c0002967 <mount_volume+0x294>
c0002937:	66 85 ff             	test   di,di
c000293a:	0f 84 5b fe ff ff    	je     c000279b <mount_volume+0xc8>
c0002940:	31 d2                	xor    edx,edx
c0002942:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002946:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000294a:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000294e:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002951:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002954:	83 fb 02             	cmp    ebx,0x2
c0002957:	75 04                	jne    c000295d <mount_volume+0x28a>
c0002959:	01 f6                	add    esi,esi
c000295b:	eb 0a                	jmp    c0002967 <mount_volume+0x294>
c000295d:	8d 04 76             	lea    eax,[esi+esi*2]
c0002960:	83 e6 01             	and    esi,0x1
c0002963:	d1 e8                	shr    eax,1
c0002965:	01 c6                	add    esi,eax
c0002967:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000296d:	c1 ee 09             	shr    esi,0x9
c0002970:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002974:	0f 87 21 fe ff ff    	ja     c000279b <mount_volume+0xc8>
c000297a:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002981:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002988:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c000298c:	83 fb 03             	cmp    ebx,0x3
c000298f:	75 7a                	jne    c0002a0b <mount_volume+0x338>
c0002991:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c0002997:	e8 a7 f2 ff ff       	call   c0001c43 <ld_word>
c000299c:	66 48                	dec    ax
c000299e:	75 6b                	jne    c0002a0b <mount_volume+0x338>
c00029a0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00029a4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029a8:	83 c2 01             	add    edx,0x1
c00029ab:	89 e8                	mov    eax,ebp
c00029ad:	83 d1 00             	adc    ecx,0x0
c00029b0:	e8 6c fa ff ff       	call   c0002421 <move_window>
c00029b5:	85 c0                	test   eax,eax
c00029b7:	75 52                	jne    c0002a0b <mount_volume+0x338>
c00029b9:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029bd:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029c3:	e8 7b f2 ff ff       	call   c0001c43 <ld_word>
c00029c8:	66 3d 55 aa          	cmp    ax,0xaa55
c00029cc:	75 3d                	jne    c0002a0b <mount_volume+0x338>
c00029ce:	8d 45 54             	lea    eax,[ebp+0x54]
c00029d1:	e8 7a f2 ff ff       	call   c0001c50 <ld_dword>
c00029d6:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029db:	75 2e                	jne    c0002a0b <mount_volume+0x338>
c00029dd:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00029e3:	e8 68 f2 ff ff       	call   c0001c50 <ld_dword>
c00029e8:	3d 72 72 41 61       	cmp    eax,0x61417272
c00029ed:	75 1c                	jne    c0002a0b <mount_volume+0x338>
c00029ef:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00029f5:	e8 56 f2 ff ff       	call   c0001c50 <ld_dword>
c00029fa:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00029fd:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002a03:	e8 48 f2 ff ff       	call   c0001c50 <ld_dword>
c0002a08:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002a0b:	66 a1 00 f2 02 c0    	mov    ax,ds:0xc002f200
c0002a11:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002a14:	40                   	inc    eax
c0002a15:	31 db                	xor    ebx,ebx
c0002a17:	66 a3 00 f2 02 c0    	mov    ds:0xc002f200,ax
c0002a1d:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a21:	e9 0c 02 00 00       	jmp    c0002c32 <mount_volume+0x55f>
c0002a26:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a2c:	e8 12 f2 ff ff       	call   c0001c43 <ld_word>
c0002a31:	66 3d 00 01          	cmp    ax,0x100
c0002a35:	0f 85 60 fd ff ff    	jne    c000279b <mount_volume+0xc8>
c0002a3b:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a42:	0f 85 53 fd ff ff    	jne    c000279b <mount_volume+0xc8>
c0002a48:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a4e:	e8 15 f2 ff ff       	call   c0001c68 <ld_qword>
c0002a53:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a57:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a5b:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a61:	e8 ea f1 ff ff       	call   c0001c50 <ld_dword>
c0002a66:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a69:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a6f:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a72:	fe c8                	dec    al
c0002a74:	0f 85 21 fd ff ff    	jne    c000279b <mount_volume+0xc8>
c0002a7a:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a81:	bb 01 00 00 00       	mov    ebx,0x1
c0002a86:	d3 e3                	shl    ebx,cl
c0002a88:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002a8c:	66 85 db             	test   bx,bx
c0002a8f:	0f 84 06 fd ff ff    	je     c000279b <mount_volume+0xc8>
c0002a95:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002a9b:	e8 b0 f1 ff ff       	call   c0001c50 <ld_dword>
c0002aa0:	89 c6                	mov    esi,eax
c0002aa2:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002aa7:	0f 87 ee fc ff ff    	ja     c000279b <mount_volume+0xc8>
c0002aad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002ab1:	8d 40 02             	lea    eax,[eax+0x2]
c0002ab4:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002ab7:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002aba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002abe:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002ac1:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002ac7:	e8 84 f1 ff ff       	call   c0001c50 <ld_dword>
c0002acc:	31 d2                	xor    edx,edx
c0002ace:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002ad2:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002ad6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ada:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002ade:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002ae1:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002ae4:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002aea:	e8 61 f1 ff ff       	call   c0001c50 <ld_dword>
c0002aef:	31 d2                	xor    edx,edx
c0002af1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002af5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002af9:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002afd:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002b00:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002b03:	0f b7 c3             	movzx  eax,bx
c0002b06:	31 d2                	xor    edx,edx
c0002b08:	0f af f0             	imul   esi,eax
c0002b0b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002b0f:	89 f0                	mov    eax,esi
c0002b11:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002b15:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002b19:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b1d:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b21:	39 c1                	cmp    ecx,eax
c0002b23:	89 df                	mov    edi,ebx
c0002b25:	19 d7                	sbb    edi,edx
c0002b27:	0f 82 6e fc ff ff    	jb     c000279b <mount_volume+0xc8>
c0002b2d:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b33:	31 db                	xor    ebx,ebx
c0002b35:	e8 16 f1 ff ff       	call   c0001c50 <ld_dword>
c0002b3a:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b41:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b44:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b4c:	85 db                	test   ebx,ebx
c0002b4e:	75 39                	jne    c0002b89 <mount_volume+0x4b6>
c0002b50:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b54:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b58:	0f 86 3d fc ff ff    	jbe    c000279b <mount_volume+0xc8>
c0002b5e:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b61:	31 ff                	xor    edi,edi
c0002b63:	89 e8                	mov    eax,ebp
c0002b65:	e8 72 f3 ff ff       	call   c0001edc <clst2sect>
c0002b6a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b6e:	01 c6                	add    esi,eax
c0002b70:	89 e8                	mov    eax,ebp
c0002b72:	11 d7                	adc    edi,edx
c0002b74:	89 f2                	mov    edx,esi
c0002b76:	89 f9                	mov    ecx,edi
c0002b78:	e8 a4 f8 ff ff       	call   c0002421 <move_window>
c0002b7d:	85 c0                	test   eax,eax
c0002b7f:	0f 85 07 fc ff ff    	jne    c000278c <mount_volume+0xb9>
c0002b85:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002b89:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002b8e:	74 0b                	je     c0002b9b <mount_volume+0x4c8>
c0002b90:	83 c3 20             	add    ebx,0x20
c0002b93:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002b99:	eb b1                	jmp    c0002b4c <mount_volume+0x479>
c0002b9b:	8d 75 54             	lea    esi,[ebp+0x54]
c0002b9e:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002ba2:	e8 a9 f0 ff ff       	call   c0001c50 <ld_dword>
c0002ba7:	89 c3                	mov    ebx,eax
c0002ba9:	83 f8 01             	cmp    eax,0x1
c0002bac:	0f 86 e9 fb ff ff    	jbe    c000279b <mount_volume+0xc8>
c0002bb2:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002bb5:	0f 86 e0 fb ff ff    	jbe    c000279b <mount_volume+0xc8>
c0002bbb:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002bbe:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002bc2:	0f af c2             	imul   eax,edx
c0002bc5:	31 d2                	xor    edx,edx
c0002bc7:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002bca:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002bcd:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bd0:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bd3:	31 c9                	xor    ecx,ecx
c0002bd5:	89 da                	mov    edx,ebx
c0002bd7:	89 e8                	mov    eax,ebp
c0002bd9:	c1 ea 07             	shr    edx,0x7
c0002bdc:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bdf:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002be2:	e8 3a f8 ff ff       	call   c0002421 <move_window>
c0002be7:	85 c0                	test   eax,eax
c0002be9:	0f 85 9d fb ff ff    	jne    c000278c <mount_volume+0xb9>
c0002bef:	89 d8                	mov    eax,ebx
c0002bf1:	83 e0 7f             	and    eax,0x7f
c0002bf4:	8d 04 86             	lea    eax,[esi+eax*4]
c0002bf7:	e8 54 f0 ff ff       	call   c0001c50 <ld_dword>
c0002bfc:	83 f8 ff             	cmp    eax,0xffffffff
c0002bff:	74 0a                	je     c0002c0b <mount_volume+0x538>
c0002c01:	43                   	inc    ebx
c0002c02:	39 d8                	cmp    eax,ebx
c0002c04:	74 cd                	je     c0002bd3 <mount_volume+0x500>
c0002c06:	e9 90 fb ff ff       	jmp    c000279b <mount_volume+0xc8>
c0002c0b:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002c12:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002c19:	bb 04 00 00 00       	mov    ebx,0x4
c0002c1e:	e9 e8 fd ff ff       	jmp    c0002a0b <mount_volume+0x338>
c0002c23:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c28:	19 db                	sbb    ebx,ebx
c0002c2a:	83 c3 02             	add    ebx,0x2
c0002c2d:	e9 93 fc ff ff       	jmp    c00028c5 <mount_volume+0x1f2>
c0002c32:	83 c4 3c             	add    esp,0x3c
c0002c35:	89 d8                	mov    eax,ebx
c0002c37:	5b                   	pop    ebx
c0002c38:	5e                   	pop    esi
c0002c39:	5f                   	pop    edi
c0002c3a:	5d                   	pop    ebp
c0002c3b:	c3                   	ret    

c0002c3c <find_bitmap>:
c0002c3c:	55                   	push   ebp
c0002c3d:	57                   	push   edi
c0002c3e:	89 c7                	mov    edi,eax
c0002c40:	56                   	push   esi
c0002c41:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c44:	53                   	push   ebx
c0002c45:	83 ec 1c             	sub    esp,0x1c
c0002c48:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c4b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c4f:	83 e8 02             	sub    eax,0x2
c0002c52:	39 f0                	cmp    eax,esi
c0002c54:	77 02                	ja     c0002c58 <find_bitmap+0x1c>
c0002c56:	31 f6                	xor    esi,esi
c0002c58:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c5c:	89 f3                	mov    ebx,esi
c0002c5e:	31 ed                	xor    ebp,ebp
c0002c60:	31 c9                	xor    ecx,ecx
c0002c62:	89 da                	mov    edx,ebx
c0002c64:	89 f8                	mov    eax,edi
c0002c66:	c1 ea 0c             	shr    edx,0xc
c0002c69:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c6c:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c6f:	e8 ad f7 ff ff       	call   c0002421 <move_window>
c0002c74:	85 c0                	test   eax,eax
c0002c76:	75 68                	jne    c0002ce0 <find_bitmap+0xa4>
c0002c78:	89 da                	mov    edx,ebx
c0002c7a:	89 d9                	mov    ecx,ebx
c0002c7c:	c1 ea 03             	shr    edx,0x3
c0002c7f:	83 e1 07             	and    ecx,0x7
c0002c82:	b8 01 00 00 00       	mov    eax,0x1
c0002c87:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002c8d:	d3 e0                	shl    eax,cl
c0002c8f:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002c92:	83 e9 02             	sub    ecx,0x2
c0002c95:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c99:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002c9d:	43                   	inc    ebx
c0002c9e:	21 c1                	and    ecx,eax
c0002ca0:	d1 e0                	shl    eax,1
c0002ca2:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002ca6:	77 09                	ja     c0002cb1 <find_bitmap+0x75>
c0002ca8:	31 db                	xor    ebx,ebx
c0002caa:	ba 00 02 00 00       	mov    edx,0x200
c0002caf:	31 c0                	xor    eax,eax
c0002cb1:	84 c9                	test   cl,cl
c0002cb3:	75 10                	jne    c0002cc5 <find_bitmap+0x89>
c0002cb5:	45                   	inc    ebp
c0002cb6:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002cba:	75 0f                	jne    c0002ccb <find_bitmap+0x8f>
c0002cbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002cc0:	83 c0 02             	add    eax,0x2
c0002cc3:	eb 22                	jmp    c0002ce7 <find_bitmap+0xab>
c0002cc5:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002cc9:	31 ed                	xor    ebp,ebp
c0002ccb:	39 de                	cmp    esi,ebx
c0002ccd:	74 16                	je     c0002ce5 <find_bitmap+0xa9>
c0002ccf:	84 c0                	test   al,al
c0002cd1:	75 c6                	jne    c0002c99 <find_bitmap+0x5d>
c0002cd3:	42                   	inc    edx
c0002cd4:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cda:	77 84                	ja     c0002c60 <find_bitmap+0x24>
c0002cdc:	b0 01                	mov    al,0x1
c0002cde:	eb b9                	jmp    c0002c99 <find_bitmap+0x5d>
c0002ce0:	83 c8 ff             	or     eax,0xffffffff
c0002ce3:	eb 02                	jmp    c0002ce7 <find_bitmap+0xab>
c0002ce5:	31 c0                	xor    eax,eax
c0002ce7:	83 c4 1c             	add    esp,0x1c
c0002cea:	5b                   	pop    ebx
c0002ceb:	5e                   	pop    esi
c0002cec:	5f                   	pop    edi
c0002ced:	5d                   	pop    ebp
c0002cee:	c3                   	ret    

c0002cef <change_bitmap>:
c0002cef:	55                   	push   ebp
c0002cf0:	89 cd                	mov    ebp,ecx
c0002cf2:	57                   	push   edi
c0002cf3:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002cf6:	56                   	push   esi
c0002cf7:	89 c7                	mov    edi,eax
c0002cf9:	53                   	push   ebx
c0002cfa:	89 c8                	mov    eax,ecx
c0002cfc:	83 ec 1c             	sub    esp,0x1c
c0002cff:	31 d2                	xor    edx,edx
c0002d01:	89 ce                	mov    esi,ecx
c0002d03:	c1 e8 0c             	shr    eax,0xc
c0002d06:	bb 01 00 00 00       	mov    ebx,0x1
c0002d0b:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002d0e:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002d11:	c1 ee 03             	shr    esi,0x3
c0002d14:	83 e1 07             	and    ecx,0x7
c0002d17:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d1d:	d3 e3                	shl    ebx,cl
c0002d1f:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d23:	89 c1                	mov    ecx,eax
c0002d25:	89 d3                	mov    ebx,edx
c0002d27:	83 c1 01             	add    ecx,0x1
c0002d2a:	83 d3 00             	adc    ebx,0x0
c0002d2d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d31:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d35:	89 d1                	mov    ecx,edx
c0002d37:	89 c2                	mov    edx,eax
c0002d39:	89 f8                	mov    eax,edi
c0002d3b:	e8 e1 f6 ff ff       	call   c0002421 <move_window>
c0002d40:	89 c1                	mov    ecx,eax
c0002d42:	85 c0                	test   eax,eax
c0002d44:	75 48                	jne    c0002d8e <change_bitmap+0x9f>
c0002d46:	31 d2                	xor    edx,edx
c0002d48:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d4c:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d50:	0f 95 c2             	setne  dl
c0002d53:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d57:	74 3c                	je     c0002d95 <change_bitmap+0xa6>
c0002d59:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d5d:	4d                   	dec    ebp
c0002d5e:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d62:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d66:	74 32                	je     c0002d9a <change_bitmap+0xab>
c0002d68:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d6c:	75 d8                	jne    c0002d46 <change_bitmap+0x57>
c0002d6e:	8d 46 01             	lea    eax,[esi+0x1]
c0002d71:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d76:	89 c3                	mov    ebx,eax
c0002d78:	31 f6                	xor    esi,esi
c0002d7a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d7e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d82:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002d88:	74 99                	je     c0002d23 <change_bitmap+0x34>
c0002d8a:	89 de                	mov    esi,ebx
c0002d8c:	eb b8                	jmp    c0002d46 <change_bitmap+0x57>
c0002d8e:	b9 01 00 00 00       	mov    ecx,0x1
c0002d93:	eb 05                	jmp    c0002d9a <change_bitmap+0xab>
c0002d95:	b9 02 00 00 00       	mov    ecx,0x2
c0002d9a:	83 c4 1c             	add    esp,0x1c
c0002d9d:	89 c8                	mov    eax,ecx
c0002d9f:	5b                   	pop    ebx
c0002da0:	5e                   	pop    esi
c0002da1:	5f                   	pop    edi
c0002da2:	5d                   	pop    ebp
c0002da3:	c3                   	ret    

c0002da4 <put_fat>:
c0002da4:	83 fa 01             	cmp    edx,0x1
c0002da7:	0f 86 7b 01 00 00    	jbe    c0002f28 <put_fat+0x184>
c0002dad:	55                   	push   ebp
c0002dae:	57                   	push   edi
c0002daf:	89 cf                	mov    edi,ecx
c0002db1:	56                   	push   esi
c0002db2:	b9 02 00 00 00       	mov    ecx,0x2
c0002db7:	53                   	push   ebx
c0002db8:	89 c6                	mov    esi,eax
c0002dba:	83 ec 1c             	sub    esp,0x1c
c0002dbd:	89 d3                	mov    ebx,edx
c0002dbf:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002dc2:	0f 86 68 01 00 00    	jbe    c0002f30 <put_fat+0x18c>
c0002dc8:	8a 00                	mov    al,BYTE PTR [eax]
c0002dca:	3c 02                	cmp    al,0x2
c0002dcc:	0f 84 c7 00 00 00    	je     c0002e99 <put_fat+0xf5>
c0002dd2:	77 09                	ja     c0002ddd <put_fat+0x39>
c0002dd4:	fe c8                	dec    al
c0002dd6:	74 17                	je     c0002def <put_fat+0x4b>
c0002dd8:	e9 53 01 00 00       	jmp    c0002f30 <put_fat+0x18c>
c0002ddd:	b9 02 00 00 00       	mov    ecx,0x2
c0002de2:	3c 04                	cmp    al,0x4
c0002de4:	0f 86 e1 00 00 00    	jbe    c0002ecb <put_fat+0x127>
c0002dea:	e9 41 01 00 00       	jmp    c0002f30 <put_fat+0x18c>
c0002def:	89 d5                	mov    ebp,edx
c0002df1:	31 c9                	xor    ecx,ecx
c0002df3:	d1 ed                	shr    ebp,1
c0002df5:	89 f0                	mov    eax,esi
c0002df7:	01 d5                	add    ebp,edx
c0002df9:	89 ea                	mov    edx,ebp
c0002dfb:	c1 ea 09             	shr    edx,0x9
c0002dfe:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e01:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e04:	e8 18 f6 ff ff       	call   c0002421 <move_window>
c0002e09:	89 c1                	mov    ecx,eax
c0002e0b:	85 c0                	test   eax,eax
c0002e0d:	0f 85 1d 01 00 00    	jne    c0002f30 <put_fat+0x18c>
c0002e13:	8d 46 54             	lea    eax,[esi+0x54]
c0002e16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e1a:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e1d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e27:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e2b:	89 f8                	mov    eax,edi
c0002e2d:	83 e3 01             	and    ebx,0x1
c0002e30:	74 0d                	je     c0002e3f <put_fat+0x9b>
c0002e32:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e35:	89 fa                	mov    edx,edi
c0002e37:	83 e0 0f             	and    eax,0xf
c0002e3a:	c1 e2 04             	shl    edx,0x4
c0002e3d:	09 d0                	or     eax,edx
c0002e3f:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e42:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e46:	31 c9                	xor    ecx,ecx
c0002e48:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e4c:	c1 ea 09             	shr    edx,0x9
c0002e4f:	89 f0                	mov    eax,esi
c0002e51:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e54:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e57:	e8 c5 f5 ff ff       	call   c0002421 <move_window>
c0002e5c:	89 c1                	mov    ecx,eax
c0002e5e:	85 c0                	test   eax,eax
c0002e60:	0f 85 ca 00 00 00    	jne    c0002f30 <put_fat+0x18c>
c0002e66:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e6a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e70:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e74:	85 db                	test   ebx,ebx
c0002e76:	74 07                	je     c0002e7f <put_fat+0xdb>
c0002e78:	c1 ef 04             	shr    edi,0x4
c0002e7b:	89 fa                	mov    edx,edi
c0002e7d:	eb 0e                	jmp    c0002e8d <put_fat+0xe9>
c0002e7f:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002e82:	c1 ef 08             	shr    edi,0x8
c0002e85:	83 e2 f0             	and    edx,0xfffffff0
c0002e88:	83 e7 0f             	and    edi,0xf
c0002e8b:	09 fa                	or     edx,edi
c0002e8d:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002e90:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e94:	e9 97 00 00 00       	jmp    c0002f30 <put_fat+0x18c>
c0002e99:	31 c9                	xor    ecx,ecx
c0002e9b:	c1 ea 08             	shr    edx,0x8
c0002e9e:	89 f0                	mov    eax,esi
c0002ea0:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ea3:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ea6:	e8 76 f5 ff ff       	call   c0002421 <move_window>
c0002eab:	89 c1                	mov    ecx,eax
c0002ead:	85 c0                	test   eax,eax
c0002eaf:	75 7f                	jne    c0002f30 <put_fat+0x18c>
c0002eb1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002eb5:	01 db                	add    ebx,ebx
c0002eb7:	0f b7 d7             	movzx  edx,di
c0002eba:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ec0:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ec4:	e8 ec ed ff ff       	call   c0001cb5 <st_word>
c0002ec9:	eb 53                	jmp    c0002f1e <put_fat+0x17a>
c0002ecb:	31 c9                	xor    ecx,ecx
c0002ecd:	c1 ea 07             	shr    edx,0x7
c0002ed0:	89 f0                	mov    eax,esi
c0002ed2:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ed5:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ed8:	e8 44 f5 ff ff       	call   c0002421 <move_window>
c0002edd:	89 c1                	mov    ecx,eax
c0002edf:	85 c0                	test   eax,eax
c0002ee1:	75 4d                	jne    c0002f30 <put_fat+0x18c>
c0002ee3:	c1 e3 02             	shl    ebx,0x2
c0002ee6:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002eec:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002eef:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002ef3:	74 1c                	je     c0002f11 <put_fat+0x16d>
c0002ef5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ef9:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002eff:	89 d8                	mov    eax,ebx
c0002f01:	e8 4a ed ff ff       	call   c0001c50 <ld_dword>
c0002f06:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f0a:	25 00 00 00 f0       	and    eax,0xf0000000
c0002f0f:	09 c7                	or     edi,eax
c0002f11:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f15:	89 fa                	mov    edx,edi
c0002f17:	89 d8                	mov    eax,ebx
c0002f19:	e8 9b ed ff ff       	call   c0001cb9 <st_dword>
c0002f1e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f22:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f26:	eb 08                	jmp    c0002f30 <put_fat+0x18c>
c0002f28:	b9 02 00 00 00       	mov    ecx,0x2
c0002f2d:	89 c8                	mov    eax,ecx
c0002f2f:	c3                   	ret    
c0002f30:	83 c4 1c             	add    esp,0x1c
c0002f33:	89 c8                	mov    eax,ecx
c0002f35:	5b                   	pop    ebx
c0002f36:	5e                   	pop    esi
c0002f37:	5f                   	pop    edi
c0002f38:	5d                   	pop    ebp
c0002f39:	c3                   	ret    

c0002f3a <fill_last_frag>:
c0002f3a:	57                   	push   edi
c0002f3b:	89 cf                	mov    edi,ecx
c0002f3d:	56                   	push   esi
c0002f3e:	89 d6                	mov    esi,edx
c0002f40:	53                   	push   ebx
c0002f41:	89 c3                	mov    ebx,eax
c0002f43:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f46:	85 c0                	test   eax,eax
c0002f48:	74 21                	je     c0002f6b <fill_last_frag+0x31>
c0002f4a:	89 f9                	mov    ecx,edi
c0002f4c:	83 f8 01             	cmp    eax,0x1
c0002f4f:	76 05                	jbe    c0002f56 <fill_last_frag+0x1c>
c0002f51:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f54:	29 c1                	sub    ecx,eax
c0002f56:	8d 56 01             	lea    edx,[esi+0x1]
c0002f59:	29 c2                	sub    edx,eax
c0002f5b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f5d:	e8 42 fe ff ff       	call   c0002da4 <put_fat>
c0002f62:	85 c0                	test   eax,eax
c0002f64:	75 05                	jne    c0002f6b <fill_last_frag+0x31>
c0002f66:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f69:	eb d8                	jmp    c0002f43 <fill_last_frag+0x9>
c0002f6b:	5b                   	pop    ebx
c0002f6c:	5e                   	pop    esi
c0002f6d:	5f                   	pop    edi
c0002f6e:	c3                   	ret    

c0002f6f <fill_first_frag>:
c0002f6f:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f73:	75 2d                	jne    c0002fa2 <fill_first_frag+0x33>
c0002f75:	57                   	push   edi
c0002f76:	56                   	push   esi
c0002f77:	53                   	push   ebx
c0002f78:	89 c3                	mov    ebx,eax
c0002f7a:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f7d:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f80:	01 d7                	add    edi,edx
c0002f82:	39 fa                	cmp    edx,edi
c0002f84:	74 14                	je     c0002f9a <fill_first_frag+0x2b>
c0002f86:	8d 72 01             	lea    esi,[edx+0x1]
c0002f89:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f8b:	89 f1                	mov    ecx,esi
c0002f8d:	e8 12 fe ff ff       	call   c0002da4 <put_fat>
c0002f92:	89 f2                	mov    edx,esi
c0002f94:	85 c0                	test   eax,eax
c0002f96:	74 ea                	je     c0002f82 <fill_first_frag+0x13>
c0002f98:	eb 0b                	jmp    c0002fa5 <fill_first_frag+0x36>
c0002f9a:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f9e:	31 c0                	xor    eax,eax
c0002fa0:	eb 03                	jmp    c0002fa5 <fill_first_frag+0x36>
c0002fa2:	31 c0                	xor    eax,eax
c0002fa4:	c3                   	ret    
c0002fa5:	5b                   	pop    ebx
c0002fa6:	5e                   	pop    esi
c0002fa7:	5f                   	pop    edi
c0002fa8:	c3                   	ret    

c0002fa9 <get_fat>:
c0002fa9:	83 fa 01             	cmp    edx,0x1
c0002fac:	0f 86 db 01 00 00    	jbe    c000318d <get_fat+0x1e4>
c0002fb2:	55                   	push   ebp
c0002fb3:	b9 01 00 00 00       	mov    ecx,0x1
c0002fb8:	57                   	push   edi
c0002fb9:	56                   	push   esi
c0002fba:	53                   	push   ebx
c0002fbb:	83 ec 1c             	sub    esp,0x1c
c0002fbe:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fc0:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fc3:	0f 86 cc 01 00 00    	jbe    c0003195 <get_fat+0x1ec>
c0002fc9:	89 c3                	mov    ebx,eax
c0002fcb:	89 d6                	mov    esi,edx
c0002fcd:	8a 07                	mov    al,BYTE PTR [edi]
c0002fcf:	3c 02                	cmp    al,0x2
c0002fd1:	0f 84 99 00 00 00    	je     c0003070 <get_fat+0xc7>
c0002fd7:	77 09                	ja     c0002fe2 <get_fat+0x39>
c0002fd9:	fe c8                	dec    al
c0002fdb:	74 1a                	je     c0002ff7 <get_fat+0x4e>
c0002fdd:	e9 b3 01 00 00       	jmp    c0003195 <get_fat+0x1ec>
c0002fe2:	3c 03                	cmp    al,0x3
c0002fe4:	0f 84 b5 00 00 00    	je     c000309f <get_fat+0xf6>
c0002fea:	3c 04                	cmp    al,0x4
c0002fec:	0f 84 e3 00 00 00    	je     c00030d5 <get_fat+0x12c>
c0002ff2:	e9 9e 01 00 00       	jmp    c0003195 <get_fat+0x1ec>
c0002ff7:	89 d3                	mov    ebx,edx
c0002ff9:	31 c9                	xor    ecx,ecx
c0002ffb:	d1 eb                	shr    ebx,1
c0002ffd:	89 f8                	mov    eax,edi
c0002fff:	01 d3                	add    ebx,edx
c0003001:	89 da                	mov    edx,ebx
c0003003:	c1 ea 09             	shr    edx,0x9
c0003006:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003009:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000300c:	e8 10 f4 ff ff       	call   c0002421 <move_window>
c0003011:	85 c0                	test   eax,eax
c0003013:	74 08                	je     c000301d <get_fat+0x74>
c0003015:	83 c9 ff             	or     ecx,0xffffffff
c0003018:	e9 78 01 00 00       	jmp    c0003195 <get_fat+0x1ec>
c000301d:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003020:	31 c9                	xor    ecx,ecx
c0003022:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003028:	89 ea                	mov    edx,ebp
c000302a:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c000302e:	c1 ea 09             	shr    edx,0x9
c0003031:	89 f8                	mov    eax,edi
c0003033:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003036:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003039:	e8 e3 f3 ff ff       	call   c0002421 <move_window>
c000303e:	85 c0                	test   eax,eax
c0003040:	75 d3                	jne    c0003015 <get_fat+0x6c>
c0003042:	0f b6 c3             	movzx  eax,bl
c0003045:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000304b:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0003050:	c1 e3 08             	shl    ebx,0x8
c0003053:	09 c3                	or     ebx,eax
c0003055:	89 d9                	mov    ecx,ebx
c0003057:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000305d:	83 e6 01             	and    esi,0x1
c0003060:	0f 84 2f 01 00 00    	je     c0003195 <get_fat+0x1ec>
c0003066:	89 d9                	mov    ecx,ebx
c0003068:	c1 e9 04             	shr    ecx,0x4
c000306b:	e9 25 01 00 00       	jmp    c0003195 <get_fat+0x1ec>
c0003070:	31 c9                	xor    ecx,ecx
c0003072:	c1 ea 08             	shr    edx,0x8
c0003075:	89 f8                	mov    eax,edi
c0003077:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000307a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000307d:	e8 9f f3 ff ff       	call   c0002421 <move_window>
c0003082:	85 c0                	test   eax,eax
c0003084:	75 8f                	jne    c0003015 <get_fat+0x6c>
c0003086:	01 f6                	add    esi,esi
c0003088:	81 e6 fe 01 00 00    	and    esi,0x1fe
c000308e:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003092:	e8 ac eb ff ff       	call   c0001c43 <ld_word>
c0003097:	0f b7 c8             	movzx  ecx,ax
c000309a:	e9 f6 00 00 00       	jmp    c0003195 <get_fat+0x1ec>
c000309f:	31 c9                	xor    ecx,ecx
c00030a1:	c1 ea 07             	shr    edx,0x7
c00030a4:	89 f8                	mov    eax,edi
c00030a6:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030a9:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030ac:	e8 70 f3 ff ff       	call   c0002421 <move_window>
c00030b1:	85 c0                	test   eax,eax
c00030b3:	0f 85 5c ff ff ff    	jne    c0003015 <get_fat+0x6c>
c00030b9:	c1 e6 02             	shl    esi,0x2
c00030bc:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030c2:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030c6:	e8 85 eb ff ff       	call   c0001c50 <ld_dword>
c00030cb:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030d0:	e9 b4 00 00 00       	jmp    c0003189 <get_fat+0x1e0>
c00030d5:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030d8:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030db:	89 d1                	mov    ecx,edx
c00030dd:	09 c1                	or     ecx,eax
c00030df:	74 06                	je     c00030e7 <get_fat+0x13e>
c00030e1:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00030e5:	75 0f                	jne    c00030f6 <get_fat+0x14d>
c00030e7:	b9 01 00 00 00       	mov    ecx,0x1
c00030ec:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c00030f0:	0f 85 9f 00 00 00    	jne    c0003195 <get_fat+0x1ec>
c00030f6:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c00030fa:	89 f5                	mov    ebp,esi
c00030fc:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0003101:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0003104:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0003107:	80 f9 02             	cmp    cl,0x2
c000310a:	75 35                	jne    c0003141 <get_fat+0x198>
c000310c:	83 c0 ff             	add    eax,0xffffffff
c000310f:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0003114:	83 d2 ff             	adc    edx,0xffffffff
c0003117:	31 db                	xor    ebx,ebx
c0003119:	0f ac d0 09          	shrd   eax,edx,0x9
c000311d:	53                   	push   ebx
c000311e:	c1 ea 09             	shr    edx,0x9
c0003121:	51                   	push   ecx
c0003122:	52                   	push   edx
c0003123:	50                   	push   eax
c0003124:	e8 bb 44 02 00       	call   c00275e4 <__udivdi3>
c0003129:	83 c4 10             	add    esp,0x10
c000312c:	b9 01 00 00 00       	mov    ecx,0x1
c0003131:	39 c5                	cmp    ebp,eax
c0003133:	77 60                	ja     c0003195 <get_fat+0x1ec>
c0003135:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000313a:	74 59                	je     c0003195 <get_fat+0x1ec>
c000313c:	8d 4e 01             	lea    ecx,[esi+0x1]
c000313f:	eb 54                	jmp    c0003195 <get_fat+0x1ec>
c0003141:	80 f9 03             	cmp    cl,0x3
c0003144:	75 05                	jne    c000314b <get_fat+0x1a2>
c0003146:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003149:	77 f1                	ja     c000313c <get_fat+0x193>
c000314b:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003150:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003154:	75 3f                	jne    c0003195 <get_fat+0x1ec>
c0003156:	31 c9                	xor    ecx,ecx
c0003158:	89 f2                	mov    edx,esi
c000315a:	89 f8                	mov    eax,edi
c000315c:	c1 ea 07             	shr    edx,0x7
c000315f:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003162:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003165:	e8 b7 f2 ff ff       	call   c0002421 <move_window>
c000316a:	85 c0                	test   eax,eax
c000316c:	0f 85 a3 fe ff ff    	jne    c0003015 <get_fat+0x6c>
c0003172:	c1 e6 02             	shl    esi,0x2
c0003175:	81 e6 fc 01 00 00    	and    esi,0x1fc
c000317b:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000317f:	e8 cc ea ff ff       	call   c0001c50 <ld_dword>
c0003184:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0003189:	89 c1                	mov    ecx,eax
c000318b:	eb 08                	jmp    c0003195 <get_fat+0x1ec>
c000318d:	b9 01 00 00 00       	mov    ecx,0x1
c0003192:	89 c8                	mov    eax,ecx
c0003194:	c3                   	ret    
c0003195:	83 c4 1c             	add    esp,0x1c
c0003198:	89 c8                	mov    eax,ecx
c000319a:	5b                   	pop    ebx
c000319b:	5e                   	pop    esi
c000319c:	5f                   	pop    edi
c000319d:	5d                   	pop    ebp
c000319e:	c3                   	ret    

c000319f <dir_sdi>:
c000319f:	55                   	push   ebp
c00031a0:	57                   	push   edi
c00031a1:	56                   	push   esi
c00031a2:	53                   	push   ebx
c00031a3:	89 c3                	mov    ebx,eax
c00031a5:	83 ec 1c             	sub    esp,0x1c
c00031a8:	8b 38                	mov    edi,DWORD PTR [eax]
c00031aa:	31 c0                	xor    eax,eax
c00031ac:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00031af:	0f 94 c0             	sete   al
c00031b2:	48                   	dec    eax
c00031b3:	25 00 00 20 f0       	and    eax,0xf0200000
c00031b8:	05 00 00 00 10       	add    eax,0x10000000
c00031bd:	39 d0                	cmp    eax,edx
c00031bf:	77 0a                	ja     c00031cb <dir_sdi+0x2c>
c00031c1:	b8 02 00 00 00       	mov    eax,0x2
c00031c6:	e9 c4 00 00 00       	jmp    c000328f <dir_sdi+0xf0>
c00031cb:	89 d6                	mov    esi,edx
c00031cd:	f6 c2 1f             	test   dl,0x1f
c00031d0:	75 ef                	jne    c00031c1 <dir_sdi+0x22>
c00031d2:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031d5:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031d8:	85 c9                	test   ecx,ecx
c00031da:	75 2d                	jne    c0003209 <dir_sdi+0x6a>
c00031dc:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031df:	77 1b                	ja     c00031fc <dir_sdi+0x5d>
c00031e1:	89 f2                	mov    edx,esi
c00031e3:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00031e7:	c1 ea 05             	shr    edx,0x5
c00031ea:	39 c2                	cmp    edx,eax
c00031ec:	73 d3                	jae    c00031c1 <dir_sdi+0x22>
c00031ee:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031f1:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c00031f4:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00031f7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00031fa:	eb 4b                	jmp    c0003247 <dir_sdi+0xa8>
c00031fc:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031ff:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003203:	85 c0                	test   eax,eax
c0003205:	74 da                	je     c00031e1 <dir_sdi+0x42>
c0003207:	89 c1                	mov    ecx,eax
c0003209:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000320d:	c1 e5 09             	shl    ebp,0x9
c0003210:	89 ca                	mov    edx,ecx
c0003212:	39 ee                	cmp    esi,ebp
c0003214:	72 1c                	jb     c0003232 <dir_sdi+0x93>
c0003216:	89 d8                	mov    eax,ebx
c0003218:	e8 8c fd ff ff       	call   c0002fa9 <get_fat>
c000321d:	89 c1                	mov    ecx,eax
c000321f:	83 f8 ff             	cmp    eax,0xffffffff
c0003222:	74 66                	je     c000328a <dir_sdi+0xeb>
c0003224:	83 f8 01             	cmp    eax,0x1
c0003227:	76 98                	jbe    c00031c1 <dir_sdi+0x22>
c0003229:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c000322c:	76 93                	jbe    c00031c1 <dir_sdi+0x22>
c000322e:	29 ee                	sub    esi,ebp
c0003230:	eb de                	jmp    c0003210 <dir_sdi+0x71>
c0003232:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003236:	89 f8                	mov    eax,edi
c0003238:	e8 9f ec ff ff       	call   c0001edc <clst2sect>
c000323d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003241:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003244:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003247:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000324a:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000324d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003250:	89 d1                	mov    ecx,edx
c0003252:	09 c1                	or     ecx,eax
c0003254:	0f 84 67 ff ff ff    	je     c00031c1 <dir_sdi+0x22>
c000325a:	89 f1                	mov    ecx,esi
c000325c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003264:	c1 e9 09             	shr    ecx,0x9
c0003267:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000326b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000326f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003273:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003276:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000327c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000327f:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003283:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003286:	31 c0                	xor    eax,eax
c0003288:	eb 05                	jmp    c000328f <dir_sdi+0xf0>
c000328a:	b8 01 00 00 00       	mov    eax,0x1
c000328f:	83 c4 1c             	add    esp,0x1c
c0003292:	5b                   	pop    ebx
c0003293:	5e                   	pop    esi
c0003294:	5f                   	pop    edi
c0003295:	5d                   	pop    ebp
c0003296:	c3                   	ret    

c0003297 <create_chain>:
c0003297:	55                   	push   ebp
c0003298:	89 c5                	mov    ebp,eax
c000329a:	57                   	push   edi
c000329b:	56                   	push   esi
c000329c:	53                   	push   ebx
c000329d:	83 ec 1c             	sub    esp,0x1c
c00032a0:	85 d2                	test   edx,edx
c00032a2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00032a6:	8b 30                	mov    esi,DWORD PTR [eax]
c00032a8:	75 0e                	jne    c00032b8 <create_chain+0x21>
c00032aa:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00032ad:	85 ff                	test   edi,edi
c00032af:	74 39                	je     c00032ea <create_chain+0x53>
c00032b1:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00032b4:	77 39                	ja     c00032ef <create_chain+0x58>
c00032b6:	eb 32                	jmp    c00032ea <create_chain+0x53>
c00032b8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032bc:	e8 e8 fc ff ff       	call   c0002fa9 <get_fat>
c00032c1:	89 c3                	mov    ebx,eax
c00032c3:	83 f8 01             	cmp    eax,0x1
c00032c6:	77 0a                	ja     c00032d2 <create_chain+0x3b>
c00032c8:	bb 01 00 00 00       	mov    ebx,0x1
c00032cd:	e9 ba 01 00 00       	jmp    c000348c <create_chain+0x1f5>
c00032d2:	83 f8 ff             	cmp    eax,0xffffffff
c00032d5:	0f 84 62 01 00 00    	je     c000343d <create_chain+0x1a6>
c00032db:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032de:	0f 87 a8 01 00 00    	ja     c000348c <create_chain+0x1f5>
c00032e4:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00032e8:	eb 05                	jmp    c00032ef <create_chain+0x58>
c00032ea:	bf 01 00 00 00       	mov    edi,0x1
c00032ef:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00032f3:	75 07                	jne    c00032fc <create_chain+0x65>
c00032f5:	31 db                	xor    ebx,ebx
c00032f7:	e9 90 01 00 00       	jmp    c000348c <create_chain+0x1f5>
c00032fc:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00032ff:	75 74                	jne    c0003375 <create_chain+0xde>
c0003301:	b9 01 00 00 00       	mov    ecx,0x1
c0003306:	89 fa                	mov    edx,edi
c0003308:	89 f0                	mov    eax,esi
c000330a:	e8 2d f9 ff ff       	call   c0002c3c <find_bitmap>
c000330f:	89 c3                	mov    ebx,eax
c0003311:	8d 40 ff             	lea    eax,[eax-0x1]
c0003314:	83 f8 fd             	cmp    eax,0xfffffffd
c0003317:	0f 87 6f 01 00 00    	ja     c000348c <create_chain+0x1f5>
c000331d:	83 ec 0c             	sub    esp,0xc
c0003320:	b9 01 00 00 00       	mov    ecx,0x1
c0003325:	6a 01                	push   0x1
c0003327:	89 da                	mov    edx,ebx
c0003329:	89 f0                	mov    eax,esi
c000332b:	e8 bf f9 ff ff       	call   c0002cef <change_bitmap>
c0003330:	83 c4 10             	add    esp,0x10
c0003333:	83 f8 02             	cmp    eax,0x2
c0003336:	74 90                	je     c00032c8 <create_chain+0x31>
c0003338:	83 f8 01             	cmp    eax,0x1
c000333b:	0f 84 fc 00 00 00    	je     c000343d <create_chain+0x1a6>
c0003341:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003346:	75 09                	jne    c0003351 <create_chain+0xba>
c0003348:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000334c:	e9 0c 01 00 00       	jmp    c000345d <create_chain+0x1c6>
c0003351:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003355:	0f 85 e7 00 00 00    	jne    c0003442 <create_chain+0x1ab>
c000335b:	8d 57 01             	lea    edx,[edi+0x1]
c000335e:	39 da                	cmp    edx,ebx
c0003360:	0f 84 f7 00 00 00    	je     c000345d <create_chain+0x1c6>
c0003366:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003369:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000336d:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003370:	e9 cd 00 00 00       	jmp    c0003442 <create_chain+0x1ab>
c0003375:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003379:	75 41                	jne    c00033bc <create_chain+0x125>
c000337b:	8d 5f 01             	lea    ebx,[edi+0x1]
c000337e:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003381:	77 05                	ja     c0003388 <create_chain+0xf1>
c0003383:	bb 02 00 00 00       	mov    ebx,0x2
c0003388:	89 da                	mov    edx,ebx
c000338a:	89 e8                	mov    eax,ebp
c000338c:	e8 18 fc ff ff       	call   c0002fa9 <get_fat>
c0003391:	83 f8 01             	cmp    eax,0x1
c0003394:	0f 84 2e ff ff ff    	je     c00032c8 <create_chain+0x31>
c000339a:	83 f8 ff             	cmp    eax,0xffffffff
c000339d:	0f 84 9a 00 00 00    	je     c000343d <create_chain+0x1a6>
c00033a3:	85 c0                	test   eax,eax
c00033a5:	74 11                	je     c00033b8 <create_chain+0x121>
c00033a7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033aa:	83 f8 01             	cmp    eax,0x1
c00033ad:	76 0d                	jbe    c00033bc <create_chain+0x125>
c00033af:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00033b2:	76 08                	jbe    c00033bc <create_chain+0x125>
c00033b4:	89 c7                	mov    edi,eax
c00033b6:	eb 04                	jmp    c00033bc <create_chain+0x125>
c00033b8:	85 db                	test   ebx,ebx
c00033ba:	75 38                	jne    c00033f4 <create_chain+0x15d>
c00033bc:	89 fb                	mov    ebx,edi
c00033be:	43                   	inc    ebx
c00033bf:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033c2:	77 0e                	ja     c00033d2 <create_chain+0x13b>
c00033c4:	83 ff 01             	cmp    edi,0x1
c00033c7:	0f 86 28 ff ff ff    	jbe    c00032f5 <create_chain+0x5e>
c00033cd:	bb 02 00 00 00       	mov    ebx,0x2
c00033d2:	89 da                	mov    edx,ebx
c00033d4:	89 e8                	mov    eax,ebp
c00033d6:	e8 ce fb ff ff       	call   c0002fa9 <get_fat>
c00033db:	85 c0                	test   eax,eax
c00033dd:	74 15                	je     c00033f4 <create_chain+0x15d>
c00033df:	83 f8 01             	cmp    eax,0x1
c00033e2:	0f 84 e0 fe ff ff    	je     c00032c8 <create_chain+0x31>
c00033e8:	40                   	inc    eax
c00033e9:	74 52                	je     c000343d <create_chain+0x1a6>
c00033eb:	39 fb                	cmp    ebx,edi
c00033ed:	75 cf                	jne    c00033be <create_chain+0x127>
c00033ef:	e9 01 ff ff ff       	jmp    c00032f5 <create_chain+0x5e>
c00033f4:	83 c9 ff             	or     ecx,0xffffffff
c00033f7:	89 da                	mov    edx,ebx
c00033f9:	89 f0                	mov    eax,esi
c00033fb:	e8 a4 f9 ff ff       	call   c0002da4 <put_fat>
c0003400:	85 c0                	test   eax,eax
c0003402:	75 32                	jne    c0003436 <create_chain+0x19f>
c0003404:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003409:	74 11                	je     c000341c <create_chain+0x185>
c000340b:	89 d9                	mov    ecx,ebx
c000340d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003411:	89 f0                	mov    eax,esi
c0003413:	e8 8c f9 ff ff       	call   c0002da4 <put_fat>
c0003418:	85 c0                	test   eax,eax
c000341a:	75 1a                	jne    c0003436 <create_chain+0x19f>
c000341c:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000341f:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003422:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003425:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003428:	39 d0                	cmp    eax,edx
c000342a:	77 04                	ja     c0003430 <create_chain+0x199>
c000342c:	48                   	dec    eax
c000342d:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003430:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003434:	eb 56                	jmp    c000348c <create_chain+0x1f5>
c0003436:	48                   	dec    eax
c0003437:	0f 85 8b fe ff ff    	jne    c00032c8 <create_chain+0x31>
c000343d:	83 cb ff             	or     ebx,0xffffffff
c0003440:	eb 4a                	jmp    c000348c <create_chain+0x1f5>
c0003442:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003446:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003449:	41                   	inc    ecx
c000344a:	39 d9                	cmp    ecx,ebx
c000344c:	75 19                	jne    c0003467 <create_chain+0x1d0>
c000344e:	b9 02 00 00 00       	mov    ecx,0x2
c0003453:	85 d2                	test   edx,edx
c0003455:	74 03                	je     c000345a <create_chain+0x1c3>
c0003457:	8d 4a 01             	lea    ecx,[edx+0x1]
c000345a:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000345d:	85 c0                	test   eax,eax
c000345f:	0f 85 63 fe ff ff    	jne    c00032c8 <create_chain+0x31>
c0003465:	eb b5                	jmp    c000341c <create_chain+0x185>
c0003467:	85 d2                	test   edx,edx
c0003469:	75 07                	jne    c0003472 <create_chain+0x1db>
c000346b:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003472:	89 d9                	mov    ecx,ebx
c0003474:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003478:	89 e8                	mov    eax,ebp
c000347a:	e8 bb fa ff ff       	call   c0002f3a <fill_last_frag>
c000347f:	85 c0                	test   eax,eax
c0003481:	75 b3                	jne    c0003436 <create_chain+0x19f>
c0003483:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000348a:	eb 90                	jmp    c000341c <create_chain+0x185>
c000348c:	83 c4 1c             	add    esp,0x1c
c000348f:	89 d8                	mov    eax,ebx
c0003491:	5b                   	pop    ebx
c0003492:	5e                   	pop    esi
c0003493:	5f                   	pop    edi
c0003494:	5d                   	pop    ebp
c0003495:	c3                   	ret    

c0003496 <remove_chain>:
c0003496:	55                   	push   ebp
c0003497:	57                   	push   edi
c0003498:	56                   	push   esi
c0003499:	53                   	push   ebx
c000349a:	83 ec 1c             	sub    esp,0x1c
c000349d:	83 fa 01             	cmp    edx,0x1
c00034a0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00034a4:	8b 18                	mov    ebx,DWORD PTR [eax]
c00034a6:	77 0a                	ja     c00034b2 <remove_chain+0x1c>
c00034a8:	b8 02 00 00 00       	mov    eax,0x2
c00034ad:	e9 24 01 00 00       	jmp    c00035d6 <remove_chain+0x140>
c00034b2:	89 d6                	mov    esi,edx
c00034b4:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00034b7:	76 ef                	jbe    c00034a8 <remove_chain+0x12>
c00034b9:	89 c7                	mov    edi,eax
c00034bb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034c0:	75 06                	jne    c00034c8 <remove_chain+0x32>
c00034c2:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034c6:	eb 54                	jmp    c000351c <remove_chain+0x86>
c00034c8:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034cb:	75 06                	jne    c00034d3 <remove_chain+0x3d>
c00034cd:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034d1:	74 ef                	je     c00034c2 <remove_chain+0x2c>
c00034d3:	83 c9 ff             	or     ecx,0xffffffff
c00034d6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034da:	89 d8                	mov    eax,ebx
c00034dc:	e8 c3 f8 ff ff       	call   c0002da4 <put_fat>
c00034e1:	85 c0                	test   eax,eax
c00034e3:	74 dd                	je     c00034c2 <remove_chain+0x2c>
c00034e5:	e9 ec 00 00 00       	jmp    c00035d6 <remove_chain+0x140>
c00034ea:	83 f8 01             	cmp    eax,0x1
c00034ed:	74 b9                	je     c00034a8 <remove_chain+0x12>
c00034ef:	83 f8 ff             	cmp    eax,0xffffffff
c00034f2:	74 6d                	je     c0003561 <remove_chain+0xcb>
c00034f4:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034f7:	75 6f                	jne    c0003568 <remove_chain+0xd2>
c00034f9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00034fc:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00034ff:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003502:	39 d0                	cmp    eax,edx
c0003504:	73 08                	jae    c000350e <remove_chain+0x78>
c0003506:	40                   	inc    eax
c0003507:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000350b:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000350e:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003511:	39 e9                	cmp    ecx,ebp
c0003513:	75 64                	jne    c0003579 <remove_chain+0xe3>
c0003515:	89 ee                	mov    esi,ebp
c0003517:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c000351a:	76 0f                	jbe    c000352b <remove_chain+0x95>
c000351c:	89 f2                	mov    edx,esi
c000351e:	89 f8                	mov    eax,edi
c0003520:	e8 84 fa ff ff       	call   c0002fa9 <get_fat>
c0003525:	89 c5                	mov    ebp,eax
c0003527:	85 c0                	test   eax,eax
c0003529:	75 bf                	jne    c00034ea <remove_chain+0x54>
c000352b:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000352e:	0f 85 a0 00 00 00    	jne    c00035d4 <remove_chain+0x13e>
c0003534:	eb 6c                	jmp    c00035a2 <remove_chain+0x10c>
c0003536:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003539:	84 c0                	test   al,al
c000353b:	75 7d                	jne    c00035ba <remove_chain+0x124>
c000353d:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003540:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003544:	0f 84 86 00 00 00    	je     c00035d0 <remove_chain+0x13a>
c000354a:	89 da                	mov    edx,ebx
c000354c:	89 f8                	mov    eax,edi
c000354e:	e8 56 fa ff ff       	call   c0002fa9 <get_fat>
c0003553:	83 f8 01             	cmp    eax,0x1
c0003556:	0f 86 4c ff ff ff    	jbe    c00034a8 <remove_chain+0x12>
c000355c:	83 f8 ff             	cmp    eax,0xffffffff
c000355f:	75 4e                	jne    c00035af <remove_chain+0x119>
c0003561:	b8 01 00 00 00       	mov    eax,0x1
c0003566:	eb 6e                	jmp    c00035d6 <remove_chain+0x140>
c0003568:	31 c9                	xor    ecx,ecx
c000356a:	89 f2                	mov    edx,esi
c000356c:	89 d8                	mov    eax,ebx
c000356e:	e8 31 f8 ff ff       	call   c0002da4 <put_fat>
c0003573:	85 c0                	test   eax,eax
c0003575:	74 82                	je     c00034f9 <remove_chain+0x63>
c0003577:	eb 5d                	jmp    c00035d6 <remove_chain+0x140>
c0003579:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000357c:	75 1b                	jne    c0003599 <remove_chain+0x103>
c000357e:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003582:	89 d8                	mov    eax,ebx
c0003584:	83 ec 0c             	sub    esp,0xc
c0003587:	6a 00                	push   0x0
c0003589:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000358d:	e8 5d f7 ff ff       	call   c0002cef <change_bitmap>
c0003592:	83 c4 10             	add    esp,0x10
c0003595:	85 c0                	test   eax,eax
c0003597:	75 3d                	jne    c00035d6 <remove_chain+0x140>
c0003599:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c000359d:	e9 73 ff ff ff       	jmp    c0003515 <remove_chain+0x7f>
c00035a2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00035a7:	75 8d                	jne    c0003536 <remove_chain+0xa0>
c00035a9:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00035ad:	eb 25                	jmp    c00035d4 <remove_chain+0x13e>
c00035af:	8d 53 01             	lea    edx,[ebx+0x1]
c00035b2:	89 c3                	mov    ebx,eax
c00035b4:	39 c2                	cmp    edx,eax
c00035b6:	74 88                	je     c0003540 <remove_chain+0xaa>
c00035b8:	eb 1a                	jmp    c00035d4 <remove_chain+0x13e>
c00035ba:	3c 03                	cmp    al,0x3
c00035bc:	75 16                	jne    c00035d4 <remove_chain+0x13e>
c00035be:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035c1:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035c5:	77 0d                	ja     c00035d4 <remove_chain+0x13e>
c00035c7:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035ca:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035ce:	72 04                	jb     c00035d4 <remove_chain+0x13e>
c00035d0:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035d4:	31 c0                	xor    eax,eax
c00035d6:	83 c4 1c             	add    esp,0x1c
c00035d9:	5b                   	pop    ebx
c00035da:	5e                   	pop    esi
c00035db:	5f                   	pop    edi
c00035dc:	5d                   	pop    ebp
c00035dd:	c3                   	ret    

c00035de <dir_clear>:
c00035de:	55                   	push   ebp
c00035df:	57                   	push   edi
c00035e0:	56                   	push   esi
c00035e1:	89 c6                	mov    esi,eax
c00035e3:	53                   	push   ebx
c00035e4:	83 ec 1c             	sub    esp,0x1c
c00035e7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00035eb:	e8 9d ed ff ff       	call   c000238d <sync_window>
c00035f0:	85 c0                	test   eax,eax
c00035f2:	0f 85 de 00 00 00    	jne    c00036d6 <dir_clear+0xf8>
c00035f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00035fc:	89 f0                	mov    eax,esi
c00035fe:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003601:	e8 d6 e8 ff ff       	call   c0001edc <clst2sect>
c0003606:	b9 00 02 00 00       	mov    ecx,0x200
c000360b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000360f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003613:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003616:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003619:	89 e8                	mov    eax,ebp
c000361b:	31 d2                	xor    edx,edx
c000361d:	e8 b5 e6 ff ff       	call   c0001cd7 <mem_set>
c0003622:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003626:	c1 e3 09             	shl    ebx,0x9
c0003629:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000362f:	76 1f                	jbe    c0003650 <dir_clear+0x72>
c0003631:	bb 00 80 00 00       	mov    ebx,0x8000
c0003636:	eb 18                	jmp    c0003650 <dir_clear+0x72>
c0003638:	83 ec 0c             	sub    esp,0xc
c000363b:	53                   	push   ebx
c000363c:	e8 35 4e 00 00       	call   c0008476 <ff_memalloc>
c0003641:	83 c4 10             	add    esp,0x10
c0003644:	89 c7                	mov    edi,eax
c0003646:	85 c0                	test   eax,eax
c0003648:	0f 85 8f 00 00 00    	jne    c00036dd <dir_clear+0xff>
c000364e:	d1 eb                	shr    ebx,1
c0003650:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003656:	77 e0                	ja     c0003638 <dir_clear+0x5a>
c0003658:	31 db                	xor    ebx,ebx
c000365a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000365e:	39 d8                	cmp    eax,ebx
c0003660:	76 66                	jbe    c00036c8 <dir_clear+0xea>
c0003662:	83 ec 0c             	sub    esp,0xc
c0003665:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003669:	6a 01                	push   0x1
c000366b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000366f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003673:	55                   	push   ebp
c0003674:	50                   	push   eax
c0003675:	e8 94 e5 ff ff       	call   c0001c0e <disk_write>
c000367a:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000367f:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003684:	83 c4 20             	add    esp,0x20
c0003687:	85 c0                	test   eax,eax
c0003689:	75 3d                	jne    c00036c8 <dir_clear+0xea>
c000368b:	43                   	inc    ebx
c000368c:	eb cc                	jmp    c000365a <dir_clear+0x7c>
c000368e:	83 ec 0c             	sub    esp,0xc
c0003691:	31 d2                	xor    edx,edx
c0003693:	55                   	push   ebp
c0003694:	89 d8                	mov    eax,ebx
c0003696:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000369a:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000369e:	52                   	push   edx
c000369f:	50                   	push   eax
c00036a0:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036a4:	57                   	push   edi
c00036a5:	50                   	push   eax
c00036a6:	e8 63 e5 ff ff       	call   c0001c0e <disk_write>
c00036ab:	83 c4 20             	add    esp,0x20
c00036ae:	85 c0                	test   eax,eax
c00036b0:	75 0a                	jne    c00036bc <dir_clear+0xde>
c00036b2:	01 eb                	add    ebx,ebp
c00036b4:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036b8:	39 d8                	cmp    eax,ebx
c00036ba:	77 d2                	ja     c000368e <dir_clear+0xb0>
c00036bc:	83 ec 0c             	sub    esp,0xc
c00036bf:	57                   	push   edi
c00036c0:	e8 c7 4d 00 00       	call   c000848c <ff_memfree>
c00036c5:	83 c4 10             	add    esp,0x10
c00036c8:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036cc:	39 d8                	cmp    eax,ebx
c00036ce:	0f 95 c0             	setne  al
c00036d1:	0f b6 c0             	movzx  eax,al
c00036d4:	eb 19                	jmp    c00036ef <dir_clear+0x111>
c00036d6:	b8 01 00 00 00       	mov    eax,0x1
c00036db:	eb 12                	jmp    c00036ef <dir_clear+0x111>
c00036dd:	89 d9                	mov    ecx,ebx
c00036df:	31 d2                	xor    edx,edx
c00036e1:	c1 eb 09             	shr    ebx,0x9
c00036e4:	e8 ee e5 ff ff       	call   c0001cd7 <mem_set>
c00036e9:	89 dd                	mov    ebp,ebx
c00036eb:	31 db                	xor    ebx,ebx
c00036ed:	eb c5                	jmp    c00036b4 <dir_clear+0xd6>
c00036ef:	83 c4 1c             	add    esp,0x1c
c00036f2:	5b                   	pop    ebx
c00036f3:	5e                   	pop    esi
c00036f4:	5f                   	pop    edi
c00036f5:	5d                   	pop    ebp
c00036f6:	c3                   	ret    

c00036f7 <dir_next>:
c00036f7:	55                   	push   ebp
c00036f8:	57                   	push   edi
c00036f9:	56                   	push   esi
c00036fa:	53                   	push   ebx
c00036fb:	89 c3                	mov    ebx,eax
c00036fd:	83 ec 1c             	sub    esp,0x1c
c0003700:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003702:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003706:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003709:	8d 78 20             	lea    edi,[eax+0x20]
c000370c:	31 c0                	xor    eax,eax
c000370e:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003712:	0f 94 c0             	sete   al
c0003715:	48                   	dec    eax
c0003716:	25 00 00 20 f0       	and    eax,0xf0200000
c000371b:	05 00 00 00 10       	add    eax,0x10000000
c0003720:	39 f8                	cmp    eax,edi
c0003722:	77 0e                	ja     c0003732 <dir_next+0x3b>
c0003724:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000372b:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003732:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003735:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003738:	b8 04 00 00 00       	mov    eax,0x4
c000373d:	89 ce                	mov    esi,ecx
c000373f:	09 d6                	or     esi,edx
c0003741:	0f 84 da 00 00 00    	je     c0003821 <dir_next+0x12a>
c0003747:	89 f8                	mov    eax,edi
c0003749:	25 ff 01 00 00       	and    eax,0x1ff
c000374e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003752:	0f 85 b9 00 00 00    	jne    c0003811 <dir_next+0x11a>
c0003758:	83 c2 01             	add    edx,0x1
c000375b:	83 d1 00             	adc    ecx,0x0
c000375e:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003761:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003764:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003767:	85 d2                	test   edx,edx
c0003769:	75 29                	jne    c0003794 <dir_next+0x9d>
c000376b:	89 fa                	mov    edx,edi
c000376d:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003771:	c1 ea 05             	shr    edx,0x5
c0003774:	39 c2                	cmp    edx,eax
c0003776:	0f 82 95 00 00 00    	jb     c0003811 <dir_next+0x11a>
c000377c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003783:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000378a:	b8 04 00 00 00       	mov    eax,0x4
c000378f:	e9 8d 00 00 00       	jmp    c0003821 <dir_next+0x12a>
c0003794:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003798:	89 f9                	mov    ecx,edi
c000379a:	48                   	dec    eax
c000379b:	c1 e9 09             	shr    ecx,0x9
c000379e:	85 c8                	test   eax,ecx
c00037a0:	75 6f                	jne    c0003811 <dir_next+0x11a>
c00037a2:	89 d8                	mov    eax,ebx
c00037a4:	e8 00 f8 ff ff       	call   c0002fa9 <get_fat>
c00037a9:	89 c6                	mov    esi,eax
c00037ab:	83 f8 01             	cmp    eax,0x1
c00037ae:	77 07                	ja     c00037b7 <dir_next+0xc0>
c00037b0:	b8 02 00 00 00       	mov    eax,0x2
c00037b5:	eb 6a                	jmp    c0003821 <dir_next+0x12a>
c00037b7:	83 f8 ff             	cmp    eax,0xffffffff
c00037ba:	75 07                	jne    c00037c3 <dir_next+0xcc>
c00037bc:	b8 01 00 00 00       	mov    eax,0x1
c00037c1:	eb 5e                	jmp    c0003821 <dir_next+0x12a>
c00037c3:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037c6:	77 37                	ja     c00037ff <dir_next+0x108>
c00037c8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037cd:	74 ad                	je     c000377c <dir_next+0x85>
c00037cf:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037d2:	89 d8                	mov    eax,ebx
c00037d4:	e8 be fa ff ff       	call   c0003297 <create_chain>
c00037d9:	89 c6                	mov    esi,eax
c00037db:	b8 07 00 00 00       	mov    eax,0x7
c00037e0:	85 f6                	test   esi,esi
c00037e2:	74 3d                	je     c0003821 <dir_next+0x12a>
c00037e4:	83 fe 01             	cmp    esi,0x1
c00037e7:	74 c7                	je     c00037b0 <dir_next+0xb9>
c00037e9:	83 fe ff             	cmp    esi,0xffffffff
c00037ec:	74 ce                	je     c00037bc <dir_next+0xc5>
c00037ee:	89 f2                	mov    edx,esi
c00037f0:	89 e8                	mov    eax,ebp
c00037f2:	e8 e7 fd ff ff       	call   c00035de <dir_clear>
c00037f7:	85 c0                	test   eax,eax
c00037f9:	75 c1                	jne    c00037bc <dir_next+0xc5>
c00037fb:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00037ff:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003802:	89 f2                	mov    edx,esi
c0003804:	89 e8                	mov    eax,ebp
c0003806:	e8 d1 e6 ff ff       	call   c0001edc <clst2sect>
c000380b:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000380e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003811:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003815:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003818:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c000381c:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000381f:	31 c0                	xor    eax,eax
c0003821:	83 c4 1c             	add    esp,0x1c
c0003824:	5b                   	pop    ebx
c0003825:	5e                   	pop    esi
c0003826:	5f                   	pop    edi
c0003827:	5d                   	pop    ebp
c0003828:	c3                   	ret    

c0003829 <load_xdir>:
c0003829:	55                   	push   ebp
c000382a:	57                   	push   edi
c000382b:	56                   	push   esi
c000382c:	89 c6                	mov    esi,eax
c000382e:	53                   	push   ebx
c000382f:	83 ec 1c             	sub    esp,0x1c
c0003832:	8b 00                	mov    eax,DWORD PTR [eax]
c0003834:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003837:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000383a:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000383d:	e8 df eb ff ff       	call   c0002421 <move_window>
c0003842:	89 c3                	mov    ebx,eax
c0003844:	85 c0                	test   eax,eax
c0003846:	0f 85 0c 01 00 00    	jne    c0003958 <load_xdir+0x12f>
c000384c:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000384f:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003852:	0f 85 fb 00 00 00    	jne    c0003953 <load_xdir+0x12a>
c0003858:	89 f8                	mov    eax,edi
c000385a:	b9 20 00 00 00       	mov    ecx,0x20
c000385f:	e8 5e e4 ff ff       	call   c0001cc2 <mem_cpy>
c0003864:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003868:	40                   	inc    eax
c0003869:	c1 e0 05             	shl    eax,0x5
c000386c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003870:	83 e8 60             	sub    eax,0x60
c0003873:	3d 00 02 00 00       	cmp    eax,0x200
c0003878:	0f 87 d5 00 00 00    	ja     c0003953 <load_xdir+0x12a>
c000387e:	31 d2                	xor    edx,edx
c0003880:	89 f0                	mov    eax,esi
c0003882:	e8 70 fe ff ff       	call   c00036f7 <dir_next>
c0003887:	89 c3                	mov    ebx,eax
c0003889:	83 f8 04             	cmp    eax,0x4
c000388c:	0f 84 c1 00 00 00    	je     c0003953 <load_xdir+0x12a>
c0003892:	85 c0                	test   eax,eax
c0003894:	0f 85 be 00 00 00    	jne    c0003958 <load_xdir+0x12f>
c000389a:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000389d:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038a0:	8b 06                	mov    eax,DWORD PTR [esi]
c00038a2:	e8 7a eb ff ff       	call   c0002421 <move_window>
c00038a7:	89 c3                	mov    ebx,eax
c00038a9:	85 c0                	test   eax,eax
c00038ab:	0f 85 a7 00 00 00    	jne    c0003958 <load_xdir+0x12f>
c00038b1:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038b4:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00038b7:	0f 85 96 00 00 00    	jne    c0003953 <load_xdir+0x12a>
c00038bd:	8d 47 20             	lea    eax,[edi+0x20]
c00038c0:	b9 20 00 00 00       	mov    ecx,0x20
c00038c5:	e8 f8 e3 ff ff       	call   c0001cc2 <mem_cpy>
c00038ca:	31 d2                	xor    edx,edx
c00038cc:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038d0:	b9 0f 00 00 00       	mov    ecx,0xf
c00038d5:	83 c0 2c             	add    eax,0x2c
c00038d8:	f7 f1                	div    ecx
c00038da:	c1 e0 05             	shl    eax,0x5
c00038dd:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038e1:	77 70                	ja     c0003953 <load_xdir+0x12a>
c00038e3:	bd 40 00 00 00       	mov    ebp,0x40
c00038e8:	31 d2                	xor    edx,edx
c00038ea:	89 f0                	mov    eax,esi
c00038ec:	e8 06 fe ff ff       	call   c00036f7 <dir_next>
c00038f1:	89 c3                	mov    ebx,eax
c00038f3:	83 f8 04             	cmp    eax,0x4
c00038f6:	74 5b                	je     c0003953 <load_xdir+0x12a>
c00038f8:	85 c0                	test   eax,eax
c00038fa:	75 5c                	jne    c0003958 <load_xdir+0x12f>
c00038fc:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038ff:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003902:	8b 06                	mov    eax,DWORD PTR [esi]
c0003904:	e8 18 eb ff ff       	call   c0002421 <move_window>
c0003909:	89 c3                	mov    ebx,eax
c000390b:	85 c0                	test   eax,eax
c000390d:	75 49                	jne    c0003958 <load_xdir+0x12f>
c000390f:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003912:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003915:	75 3c                	jne    c0003953 <load_xdir+0x12a>
c0003917:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000391d:	77 0d                	ja     c000392c <load_xdir+0x103>
c000391f:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003922:	b9 20 00 00 00       	mov    ecx,0x20
c0003927:	e8 96 e3 ff ff       	call   c0001cc2 <mem_cpy>
c000392c:	83 c5 20             	add    ebp,0x20
c000392f:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003933:	77 b3                	ja     c00038e8 <load_xdir+0xbf>
c0003935:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000393b:	77 1b                	ja     c0003958 <load_xdir+0x12f>
c000393d:	89 f8                	mov    eax,edi
c000393f:	e8 cd e7 ff ff       	call   c0002111 <xdir_sum>
c0003944:	89 c1                	mov    ecx,eax
c0003946:	8d 47 02             	lea    eax,[edi+0x2]
c0003949:	e8 f5 e2 ff ff       	call   c0001c43 <ld_word>
c000394e:	66 39 c1             	cmp    cx,ax
c0003951:	74 05                	je     c0003958 <load_xdir+0x12f>
c0003953:	bb 02 00 00 00       	mov    ebx,0x2
c0003958:	83 c4 1c             	add    esp,0x1c
c000395b:	89 d8                	mov    eax,ebx
c000395d:	5b                   	pop    ebx
c000395e:	5e                   	pop    esi
c000395f:	5f                   	pop    edi
c0003960:	5d                   	pop    ebp
c0003961:	c3                   	ret    

c0003962 <load_obj_xdir>:
c0003962:	53                   	push   ebx
c0003963:	89 c3                	mov    ebx,eax
c0003965:	83 ec 08             	sub    esp,0x8
c0003968:	8b 02                	mov    eax,DWORD PTR [edx]
c000396a:	89 03                	mov    DWORD PTR [ebx],eax
c000396c:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000396f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003972:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003975:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003978:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000397b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003982:	30 c0                	xor    al,al
c0003984:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000398b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000398e:	89 d8                	mov    eax,ebx
c0003990:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003993:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c0003996:	e8 04 f8 ff ff       	call   c000319f <dir_sdi>
c000399b:	85 c0                	test   eax,eax
c000399d:	75 0b                	jne    c00039aa <load_obj_xdir+0x48>
c000399f:	89 d8                	mov    eax,ebx
c00039a1:	83 c4 08             	add    esp,0x8
c00039a4:	5b                   	pop    ebx
c00039a5:	e9 7f fe ff ff       	jmp    c0003829 <load_xdir>
c00039aa:	83 c4 08             	add    esp,0x8
c00039ad:	5b                   	pop    ebx
c00039ae:	c3                   	ret    

c00039af <dir_read>:
c00039af:	55                   	push   ebp
c00039b0:	bd 04 00 00 00       	mov    ebp,0x4
c00039b5:	57                   	push   edi
c00039b6:	56                   	push   esi
c00039b7:	be ff ff ff ff       	mov    esi,0xffffffff
c00039bc:	53                   	push   ebx
c00039bd:	89 c3                	mov    ebx,eax
c00039bf:	83 ec 1c             	sub    esp,0x1c
c00039c2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039c6:	8b 38                	mov    edi,DWORD PTR [eax]
c00039c8:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039cd:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039d0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039d3:	89 c8                	mov    eax,ecx
c00039d5:	09 d0                	or     eax,edx
c00039d7:	0f 84 25 01 00 00    	je     c0003b02 <dir_read+0x153>
c00039dd:	89 f8                	mov    eax,edi
c00039df:	e8 3d ea ff ff       	call   c0002421 <move_window>
c00039e4:	89 c5                	mov    ebp,eax
c00039e6:	85 c0                	test   eax,eax
c00039e8:	0f 85 23 01 00 00    	jne    c0003b11 <dir_read+0x162>
c00039ee:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039f1:	8a 0a                	mov    cl,BYTE PTR [edx]
c00039f3:	84 c9                	test   cl,cl
c00039f5:	0f 84 11 01 00 00    	je     c0003b0c <dir_read+0x15d>
c00039fb:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00039fe:	75 48                	jne    c0003a48 <dir_read+0x99>
c0003a00:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003a05:	74 10                	je     c0003a17 <dir_read+0x68>
c0003a07:	80 f9 83             	cmp    cl,0x83
c0003a0a:	0f 85 dd 00 00 00    	jne    c0003aed <dir_read+0x13e>
c0003a10:	31 ed                	xor    ebp,ebp
c0003a12:	e9 08 01 00 00       	jmp    c0003b1f <dir_read+0x170>
c0003a17:	80 f9 85             	cmp    cl,0x85
c0003a1a:	0f 85 cd 00 00 00    	jne    c0003aed <dir_read+0x13e>
c0003a20:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a23:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a26:	89 d8                	mov    eax,ebx
c0003a28:	e8 fc fd ff ff       	call   c0003829 <load_xdir>
c0003a2d:	89 c5                	mov    ebp,eax
c0003a2f:	85 c0                	test   eax,eax
c0003a31:	0f 85 da 00 00 00    	jne    c0003b11 <dir_read+0x162>
c0003a37:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a3a:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a3d:	83 e0 3f             	and    eax,0x3f
c0003a40:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a43:	e9 d7 00 00 00       	jmp    c0003b1f <dir_read+0x170>
c0003a48:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a4b:	83 e0 3f             	and    eax,0x3f
c0003a4e:	80 f9 2e             	cmp    cl,0x2e
c0003a51:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a55:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a58:	0f 84 8a 00 00 00    	je     c0003ae8 <dir_read+0x139>
c0003a5e:	80 f9 e5             	cmp    cl,0xe5
c0003a61:	0f 84 81 00 00 00    	je     c0003ae8 <dir_read+0x139>
c0003a67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a6b:	83 e0 1f             	and    eax,0x1f
c0003a6e:	83 f8 08             	cmp    eax,0x8
c0003a71:	0f 94 c0             	sete   al
c0003a74:	0f b6 c0             	movzx  eax,al
c0003a77:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a7b:	75 6b                	jne    c0003ae8 <dir_read+0x139>
c0003a7d:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003a82:	75 44                	jne    c0003ac8 <dir_read+0x119>
c0003a84:	f6 c1 40             	test   cl,0x40
c0003a87:	74 12                	je     c0003a9b <dir_read+0xec>
c0003a89:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003a8c:	83 e1 bf             	and    ecx,0xffffffbf
c0003a8f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003a93:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a96:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a99:	eb 06                	jmp    c0003aa1 <dir_read+0xf2>
c0003a9b:	89 f0                	mov    eax,esi
c0003a9d:	38 c8                	cmp    al,cl
c0003a9f:	75 47                	jne    c0003ae8 <dir_read+0x139>
c0003aa1:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003aa5:	be ff ff ff ff       	mov    esi,0xffffffff
c0003aaa:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003aad:	75 3e                	jne    c0003aed <dir_read+0x13e>
c0003aaf:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003ab3:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003ab6:	e8 8a e4 ff ff       	call   c0001f45 <pick_lfn>
c0003abb:	85 c0                	test   eax,eax
c0003abd:	74 2e                	je     c0003aed <dir_read+0x13e>
c0003abf:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003ac3:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003ac6:	eb 25                	jmp    c0003aed <dir_read+0x13e>
c0003ac8:	89 f0                	mov    eax,esi
c0003aca:	84 c0                	test   al,al
c0003acc:	75 11                	jne    c0003adf <dir_read+0x130>
c0003ace:	89 d0                	mov    eax,edx
c0003ad0:	e8 2a e6 ff ff       	call   c00020ff <sum_sfn>
c0003ad5:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003ad9:	0f 84 31 ff ff ff    	je     c0003a10 <dir_read+0x61>
c0003adf:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003ae6:	eb 37                	jmp    c0003b1f <dir_read+0x170>
c0003ae8:	be ff ff ff ff       	mov    esi,0xffffffff
c0003aed:	31 d2                	xor    edx,edx
c0003aef:	89 d8                	mov    eax,ebx
c0003af1:	e8 01 fc ff ff       	call   c00036f7 <dir_next>
c0003af6:	89 c5                	mov    ebp,eax
c0003af8:	85 c0                	test   eax,eax
c0003afa:	0f 84 cd fe ff ff    	je     c00039cd <dir_read+0x1e>
c0003b00:	eb 0f                	jmp    c0003b11 <dir_read+0x162>
c0003b02:	85 ed                	test   ebp,ebp
c0003b04:	0f 84 06 ff ff ff    	je     c0003a10 <dir_read+0x61>
c0003b0a:	eb 05                	jmp    c0003b11 <dir_read+0x162>
c0003b0c:	bd 04 00 00 00       	mov    ebp,0x4
c0003b11:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003b18:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b1f:	83 c4 1c             	add    esp,0x1c
c0003b22:	89 e8                	mov    eax,ebp
c0003b24:	5b                   	pop    ebx
c0003b25:	5e                   	pop    esi
c0003b26:	5f                   	pop    edi
c0003b27:	5d                   	pop    ebp
c0003b28:	c3                   	ret    

c0003b29 <dir_alloc>:
c0003b29:	55                   	push   ebp
c0003b2a:	89 d5                	mov    ebp,edx
c0003b2c:	57                   	push   edi
c0003b2d:	31 d2                	xor    edx,edx
c0003b2f:	56                   	push   esi
c0003b30:	53                   	push   ebx
c0003b31:	89 c3                	mov    ebx,eax
c0003b33:	83 ec 0c             	sub    esp,0xc
c0003b36:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b38:	e8 62 f6 ff ff       	call   c000319f <dir_sdi>
c0003b3d:	85 c0                	test   eax,eax
c0003b3f:	75 4e                	jne    c0003b8f <dir_alloc+0x66>
c0003b41:	31 f6                	xor    esi,esi
c0003b43:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b46:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b49:	89 f8                	mov    eax,edi
c0003b4b:	e8 d1 e8 ff ff       	call   c0002421 <move_window>
c0003b50:	85 c0                	test   eax,eax
c0003b52:	75 3b                	jne    c0003b8f <dir_alloc+0x66>
c0003b54:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b57:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b5a:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b5c:	75 07                	jne    c0003b65 <dir_alloc+0x3c>
c0003b5e:	f7 d2                	not    edx
c0003b60:	c0 ea 07             	shr    dl,0x7
c0003b63:	eb 0d                	jmp    c0003b72 <dir_alloc+0x49>
c0003b65:	84 d2                	test   dl,dl
c0003b67:	0f 94 c1             	sete   cl
c0003b6a:	80 fa e5             	cmp    dl,0xe5
c0003b6d:	0f 94 c2             	sete   dl
c0003b70:	09 ca                	or     edx,ecx
c0003b72:	84 d2                	test   dl,dl
c0003b74:	74 07                	je     c0003b7d <dir_alloc+0x54>
c0003b76:	46                   	inc    esi
c0003b77:	39 ee                	cmp    esi,ebp
c0003b79:	75 04                	jne    c0003b7f <dir_alloc+0x56>
c0003b7b:	eb 1c                	jmp    c0003b99 <dir_alloc+0x70>
c0003b7d:	31 f6                	xor    esi,esi
c0003b7f:	ba 01 00 00 00       	mov    edx,0x1
c0003b84:	89 d8                	mov    eax,ebx
c0003b86:	e8 6c fb ff ff       	call   c00036f7 <dir_next>
c0003b8b:	85 c0                	test   eax,eax
c0003b8d:	74 b4                	je     c0003b43 <dir_alloc+0x1a>
c0003b8f:	83 f8 04             	cmp    eax,0x4
c0003b92:	75 05                	jne    c0003b99 <dir_alloc+0x70>
c0003b94:	b8 07 00 00 00       	mov    eax,0x7
c0003b99:	83 c4 0c             	add    esp,0xc
c0003b9c:	5b                   	pop    ebx
c0003b9d:	5e                   	pop    esi
c0003b9e:	5f                   	pop    edi
c0003b9f:	5d                   	pop    ebp
c0003ba0:	c3                   	ret    

c0003ba1 <store_xdir>:
c0003ba1:	55                   	push   ebp
c0003ba2:	57                   	push   edi
c0003ba3:	89 c7                	mov    edi,eax
c0003ba5:	56                   	push   esi
c0003ba6:	53                   	push   ebx
c0003ba7:	83 ec 0c             	sub    esp,0xc
c0003baa:	8b 00                	mov    eax,DWORD PTR [eax]
c0003bac:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003baf:	89 e8                	mov    eax,ebp
c0003bb1:	e8 5b e5 ff ff       	call   c0002111 <xdir_sum>
c0003bb6:	0f b7 d0             	movzx  edx,ax
c0003bb9:	8d 45 02             	lea    eax,[ebp+0x2]
c0003bbc:	e8 f4 e0 ff ff       	call   c0001cb5 <st_word>
c0003bc1:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003bc5:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003bc8:	89 f8                	mov    eax,edi
c0003bca:	e8 d0 f5 ff ff       	call   c000319f <dir_sdi>
c0003bcf:	89 c6                	mov    esi,eax
c0003bd1:	85 f6                	test   esi,esi
c0003bd3:	75 3d                	jne    c0003c12 <store_xdir+0x71>
c0003bd5:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bd8:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bdb:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bdd:	e8 3f e8 ff ff       	call   c0002421 <move_window>
c0003be2:	89 c6                	mov    esi,eax
c0003be4:	85 c0                	test   eax,eax
c0003be6:	75 2a                	jne    c0003c12 <store_xdir+0x71>
c0003be8:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003beb:	b9 20 00 00 00       	mov    ecx,0x20
c0003bf0:	89 ea                	mov    edx,ebp
c0003bf2:	e8 cb e0 ff ff       	call   c0001cc2 <mem_cpy>
c0003bf7:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bf9:	85 db                	test   ebx,ebx
c0003bfb:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003bff:	74 11                	je     c0003c12 <store_xdir+0x71>
c0003c01:	31 d2                	xor    edx,edx
c0003c03:	89 f8                	mov    eax,edi
c0003c05:	83 c5 20             	add    ebp,0x20
c0003c08:	e8 ea fa ff ff       	call   c00036f7 <dir_next>
c0003c0d:	4b                   	dec    ebx
c0003c0e:	89 c6                	mov    esi,eax
c0003c10:	eb bf                	jmp    c0003bd1 <store_xdir+0x30>
c0003c12:	89 f0                	mov    eax,esi
c0003c14:	83 fe 02             	cmp    esi,0x2
c0003c17:	76 05                	jbe    c0003c1e <store_xdir+0x7d>
c0003c19:	b8 02 00 00 00       	mov    eax,0x2
c0003c1e:	83 c4 0c             	add    esp,0xc
c0003c21:	5b                   	pop    ebx
c0003c22:	5e                   	pop    esi
c0003c23:	5f                   	pop    edi
c0003c24:	5d                   	pop    ebp
c0003c25:	c3                   	ret    

c0003c26 <dir_remove>:
c0003c26:	57                   	push   edi
c0003c27:	56                   	push   esi
c0003c28:	53                   	push   ebx
c0003c29:	89 c3                	mov    ebx,eax
c0003c2b:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c2e:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c30:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c33:	83 fa ff             	cmp    edx,0xffffffff
c0003c36:	74 09                	je     c0003c41 <dir_remove+0x1b>
c0003c38:	e8 62 f5 ff ff       	call   c000319f <dir_sdi>
c0003c3d:	85 c0                	test   eax,eax
c0003c3f:	75 41                	jne    c0003c82 <dir_remove+0x5c>
c0003c41:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c44:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c47:	89 f0                	mov    eax,esi
c0003c49:	e8 d3 e7 ff ff       	call   c0002421 <move_window>
c0003c4e:	85 c0                	test   eax,eax
c0003c50:	75 26                	jne    c0003c78 <dir_remove+0x52>
c0003c52:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c55:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c58:	75 05                	jne    c0003c5f <dir_remove+0x39>
c0003c5a:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c5d:	eb 03                	jmp    c0003c62 <dir_remove+0x3c>
c0003c5f:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c62:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c66:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c69:	73 17                	jae    c0003c82 <dir_remove+0x5c>
c0003c6b:	31 d2                	xor    edx,edx
c0003c6d:	89 d8                	mov    eax,ebx
c0003c6f:	e8 83 fa ff ff       	call   c00036f7 <dir_next>
c0003c74:	85 c0                	test   eax,eax
c0003c76:	74 c9                	je     c0003c41 <dir_remove+0x1b>
c0003c78:	83 f8 04             	cmp    eax,0x4
c0003c7b:	75 05                	jne    c0003c82 <dir_remove+0x5c>
c0003c7d:	b8 02 00 00 00       	mov    eax,0x2
c0003c82:	5b                   	pop    ebx
c0003c83:	5e                   	pop    esi
c0003c84:	5f                   	pop    edi
c0003c85:	c3                   	ret    

c0003c86 <create_name>:
c0003c86:	55                   	push   ebp
c0003c87:	89 d5                	mov    ebp,edx
c0003c89:	57                   	push   edi
c0003c8a:	89 c7                	mov    edi,eax
c0003c8c:	56                   	push   esi
c0003c8d:	31 f6                	xor    esi,esi
c0003c8f:	53                   	push   ebx
c0003c90:	83 ec 3c             	sub    esp,0x3c
c0003c93:	8b 02                	mov    eax,DWORD PTR [edx]
c0003c95:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c99:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c9b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003c9e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003ca2:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003ca6:	e8 72 e0 ff ff       	call   c0001d1d <tchar2uni>
c0003cab:	89 c3                	mov    ebx,eax
c0003cad:	83 f8 ff             	cmp    eax,0xffffffff
c0003cb0:	75 0a                	jne    c0003cbc <create_name+0x36>
c0003cb2:	b8 06 00 00 00       	mov    eax,0x6
c0003cb7:	e9 9e 02 00 00       	jmp    c0003f5a <create_name+0x2d4>
c0003cbc:	3d ff ff 00 00       	cmp    eax,0xffff
c0003cc1:	76 0c                	jbe    c0003ccf <create_name+0x49>
c0003cc3:	c1 e8 10             	shr    eax,0x10
c0003cc6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003cca:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cce:	46                   	inc    esi
c0003ccf:	66 83 fb 1f          	cmp    bx,0x1f
c0003cd3:	76 4f                	jbe    c0003d24 <create_name+0x9e>
c0003cd5:	66 83 fb 5c          	cmp    bx,0x5c
c0003cd9:	74 35                	je     c0003d10 <create_name+0x8a>
c0003cdb:	66 83 fb 2f          	cmp    bx,0x2f
c0003cdf:	74 2f                	je     c0003d10 <create_name+0x8a>
c0003ce1:	66 83 fb 7f          	cmp    bx,0x7f
c0003ce5:	77 11                	ja     c0003cf8 <create_name+0x72>
c0003ce7:	0f b7 d3             	movzx  edx,bx
c0003cea:	b8 92 a1 02 c0       	mov    eax,0xc002a192
c0003cef:	e8 11 e0 ff ff       	call   c0001d05 <chk_chr>
c0003cf4:	85 c0                	test   eax,eax
c0003cf6:	75 ba                	jne    c0003cb2 <create_name+0x2c>
c0003cf8:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003cfe:	77 b2                	ja     c0003cb2 <create_name+0x2c>
c0003d00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d04:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003d08:	46                   	inc    esi
c0003d09:	eb 97                	jmp    c0003ca2 <create_name+0x1c>
c0003d0b:	40                   	inc    eax
c0003d0c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d10:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d14:	8a 10                	mov    dl,BYTE PTR [eax]
c0003d16:	80 fa 2f             	cmp    dl,0x2f
c0003d19:	74 f0                	je     c0003d0b <create_name+0x85>
c0003d1b:	80 fa 5c             	cmp    dl,0x5c
c0003d1e:	74 eb                	je     c0003d0b <create_name+0x85>
c0003d20:	31 db                	xor    ebx,ebx
c0003d22:	eb 02                	jmp    c0003d26 <create_name+0xa0>
c0003d24:	b3 04                	mov    bl,0x4
c0003d26:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d2a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d2d:	85 f6                	test   esi,esi
c0003d2f:	74 18                	je     c0003d49 <create_name+0xc3>
c0003d31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d35:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d3a:	66 83 f8 20          	cmp    ax,0x20
c0003d3e:	74 06                	je     c0003d46 <create_name+0xc0>
c0003d40:	66 83 f8 2e          	cmp    ax,0x2e
c0003d44:	75 03                	jne    c0003d49 <create_name+0xc3>
c0003d46:	4e                   	dec    esi
c0003d47:	eb e4                	jmp    c0003d2d <create_name+0xa7>
c0003d49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d4d:	31 ed                	xor    ebp,ebp
c0003d4f:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d55:	85 f6                	test   esi,esi
c0003d57:	0f 84 55 ff ff ff    	je     c0003cb2 <create_name+0x2c>
c0003d5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d61:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d64:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d68:	66 83 f8 20          	cmp    ax,0x20
c0003d6c:	75 04                	jne    c0003d72 <create_name+0xec>
c0003d6e:	89 d5                	mov    ebp,edx
c0003d70:	eb eb                	jmp    c0003d5d <create_name+0xd7>
c0003d72:	85 ed                	test   ebp,ebp
c0003d74:	75 06                	jne    c0003d7c <create_name+0xf6>
c0003d76:	66 83 f8 2e          	cmp    ax,0x2e
c0003d7a:	75 08                	jne    c0003d84 <create_name+0xfe>
c0003d7c:	83 cb 03             	or     ebx,0x3
c0003d7f:	eb 03                	jmp    c0003d84 <create_name+0xfe>
c0003d81:	4e                   	dec    esi
c0003d82:	74 0c                	je     c0003d90 <create_name+0x10a>
c0003d84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d88:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003d8e:	75 f1                	jne    c0003d81 <create_name+0xfb>
c0003d90:	b9 0b 00 00 00       	mov    ecx,0xb
c0003d95:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003d98:	ba 20 00 00 00       	mov    edx,0x20
c0003d9d:	e8 35 df ff ff       	call   c0001cd7 <mem_set>
c0003da2:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003daa:	31 c9                	xor    ecx,ecx
c0003dac:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003db1:	8d 45 01             	lea    eax,[ebp+0x1]
c0003db4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003db8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003dbc:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003dc0:	66 85 ed             	test   bp,bp
c0003dc3:	0f 84 30 01 00 00    	je     c0003ef9 <create_name+0x273>
c0003dc9:	66 83 fd 20          	cmp    bp,0x20
c0003dcd:	74 10                	je     c0003ddf <create_name+0x159>
c0003dcf:	66 83 fd 2e          	cmp    bp,0x2e
c0003dd3:	75 13                	jne    c0003de8 <create_name+0x162>
c0003dd5:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dd9:	0f 84 6b 01 00 00    	je     c0003f4a <create_name+0x2c4>
c0003ddf:	83 cb 03             	or     ebx,0x3
c0003de2:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003de6:	eb c9                	jmp    c0003db1 <create_name+0x12b>
c0003de8:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003dec:	73 0b                	jae    c0003df9 <create_name+0x173>
c0003dee:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df2:	75 47                	jne    c0003e3b <create_name+0x1b5>
c0003df4:	e9 51 01 00 00       	jmp    c0003f4a <create_name+0x2c4>
c0003df9:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003dfe:	75 10                	jne    c0003e10 <create_name+0x18a>
c0003e00:	83 cb 03             	or     ebx,0x3
c0003e03:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e0b:	e9 e9 00 00 00       	jmp    c0003ef9 <create_name+0x273>
c0003e10:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e14:	74 0d                	je     c0003e23 <create_name+0x19d>
c0003e16:	83 cb 03             	or     ebx,0x3
c0003e19:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e1d:	0f 87 d6 00 00 00    	ja     c0003ef9 <create_name+0x273>
c0003e23:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e28:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e2c:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e34:	b9 08 00 00 00       	mov    ecx,0x8
c0003e39:	eb a7                	jmp    c0003de2 <create_name+0x15c>
c0003e3b:	66 83 fd 7f          	cmp    bp,0x7f
c0003e3f:	76 68                	jbe    c0003ea9 <create_name+0x223>
c0003e41:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e45:	88 da                	mov    dl,bl
c0003e47:	83 ca 02             	or     edx,0x2
c0003e4a:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e4e:	50                   	push   eax
c0003e4f:	50                   	push   eax
c0003e50:	68 b5 01 00 00       	push   0x1b5
c0003e55:	55                   	push   ebp
c0003e56:	e8 48 46 00 00       	call   c00084a3 <ff_uni2oem>
c0003e5b:	83 c4 10             	add    esp,0x10
c0003e5e:	89 c5                	mov    ebp,eax
c0003e60:	a8 80                	test   al,0x80
c0003e62:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e66:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e6a:	74 0c                	je     c0003e78 <create_name+0x1f2>
c0003e6c:	83 e5 7f             	and    ebp,0x7f
c0003e6f:	0f b6 ad e0 a0 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd5f20]
c0003e76:	eb 2a                	jmp    c0003ea2 <create_name+0x21c>
c0003e78:	66 3d ff 00          	cmp    ax,0xff
c0003e7c:	76 24                	jbe    c0003ea2 <create_name+0x21c>
c0003e7e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e82:	48                   	dec    eax
c0003e83:	39 c8                	cmp    eax,ecx
c0003e85:	77 0c                	ja     c0003e93 <create_name+0x20d>
c0003e87:	83 cb 03             	or     ebx,0x3
c0003e8a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003e8e:	e9 4f ff ff ff       	jmp    c0003de2 <create_name+0x15c>
c0003e93:	89 e8                	mov    eax,ebp
c0003e95:	88 d3                	mov    bl,dl
c0003e97:	66 c1 e8 08          	shr    ax,0x8
c0003e9b:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e9f:	41                   	inc    ecx
c0003ea0:	eb 4b                	jmp    c0003eed <create_name+0x267>
c0003ea2:	88 d3                	mov    bl,dl
c0003ea4:	66 85 ed             	test   bp,bp
c0003ea7:	74 19                	je     c0003ec2 <create_name+0x23c>
c0003ea9:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003ead:	0f b7 d5             	movzx  edx,bp
c0003eb0:	b8 9b a1 02 c0       	mov    eax,0xc002a19b
c0003eb5:	e8 4b de ff ff       	call   c0001d05 <chk_chr>
c0003eba:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ebe:	85 c0                	test   eax,eax
c0003ec0:	74 0a                	je     c0003ecc <create_name+0x246>
c0003ec2:	83 cb 03             	or     ebx,0x3
c0003ec5:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003eca:	eb 21                	jmp    c0003eed <create_name+0x267>
c0003ecc:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003ecf:	66 83 f8 19          	cmp    ax,0x19
c0003ed3:	77 07                	ja     c0003edc <create_name+0x256>
c0003ed5:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003eda:	eb 11                	jmp    c0003eed <create_name+0x267>
c0003edc:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003edf:	66 83 f8 19          	cmp    ax,0x19
c0003ee3:	77 08                	ja     c0003eed <create_name+0x267>
c0003ee5:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003eea:	83 ed 20             	sub    ebp,0x20
c0003eed:	89 e8                	mov    eax,ebp
c0003eef:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ef3:	41                   	inc    ecx
c0003ef4:	e9 e9 fe ff ff       	jmp    c0003de2 <create_name+0x15c>
c0003ef9:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003efd:	75 04                	jne    c0003f03 <create_name+0x27d>
c0003eff:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003f03:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003f08:	75 05                	jne    c0003f0f <create_name+0x289>
c0003f0a:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003f0f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f13:	83 e0 0c             	and    eax,0xc
c0003f16:	3c 0c                	cmp    al,0xc
c0003f18:	74 0b                	je     c0003f25 <create_name+0x29f>
c0003f1a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f1e:	83 e0 03             	and    eax,0x3
c0003f21:	3c 03                	cmp    al,0x3
c0003f23:	75 05                	jne    c0003f2a <create_name+0x2a4>
c0003f25:	83 cb 02             	or     ebx,0x2
c0003f28:	eb 19                	jmp    c0003f43 <create_name+0x2bd>
c0003f2a:	f6 c3 02             	test   bl,0x2
c0003f2d:	75 14                	jne    c0003f43 <create_name+0x2bd>
c0003f2f:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f34:	74 03                	je     c0003f39 <create_name+0x2b3>
c0003f36:	83 cb 10             	or     ebx,0x10
c0003f39:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f3e:	74 03                	je     c0003f43 <create_name+0x2bd>
c0003f40:	83 cb 08             	or     ebx,0x8
c0003f43:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f46:	31 c0                	xor    eax,eax
c0003f48:	eb 10                	jmp    c0003f5a <create_name+0x2d4>
c0003f4a:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f4f:	0f 85 ce fe ff ff    	jne    c0003e23 <create_name+0x19d>
c0003f55:	e9 a6 fe ff ff       	jmp    c0003e00 <create_name+0x17a>
c0003f5a:	83 c4 3c             	add    esp,0x3c
c0003f5d:	5b                   	pop    ebx
c0003f5e:	5e                   	pop    esi
c0003f5f:	5f                   	pop    edi
c0003f60:	5d                   	pop    ebp
c0003f61:	c3                   	ret    

c0003f62 <xname_sum>:
c0003f62:	56                   	push   esi
c0003f63:	53                   	push   ebx
c0003f64:	89 c6                	mov    esi,eax
c0003f66:	51                   	push   ecx
c0003f67:	31 db                	xor    ebx,ebx
c0003f69:	83 c6 02             	add    esi,0x2
c0003f6c:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f70:	66 85 c0             	test   ax,ax
c0003f73:	74 1f                	je     c0003f94 <xname_sum+0x32>
c0003f75:	83 ec 0c             	sub    esp,0xc
c0003f78:	66 d1 cb             	ror    bx,1
c0003f7b:	50                   	push   eax
c0003f7c:	e8 1e 46 00 00       	call   c000859f <ff_wtoupper>
c0003f81:	83 c4 10             	add    esp,0x10
c0003f84:	0f b6 d0             	movzx  edx,al
c0003f87:	66 c1 e8 08          	shr    ax,0x8
c0003f8b:	01 d3                	add    ebx,edx
c0003f8d:	66 d1 cb             	ror    bx,1
c0003f90:	01 c3                	add    ebx,eax
c0003f92:	eb d5                	jmp    c0003f69 <xname_sum+0x7>
c0003f94:	89 d8                	mov    eax,ebx
c0003f96:	5a                   	pop    edx
c0003f97:	5b                   	pop    ebx
c0003f98:	5e                   	pop    esi
c0003f99:	c3                   	ret    

c0003f9a <create_xdir>:
c0003f9a:	55                   	push   ebp
c0003f9b:	b9 40 00 00 00       	mov    ecx,0x40
c0003fa0:	57                   	push   edi
c0003fa1:	bd 01 00 00 00       	mov    ebp,0x1
c0003fa6:	56                   	push   esi
c0003fa7:	31 ff                	xor    edi,edi
c0003fa9:	53                   	push   ebx
c0003faa:	be 40 00 00 00       	mov    esi,0x40
c0003faf:	89 c3                	mov    ebx,eax
c0003fb1:	83 ec 1c             	sub    esp,0x1c
c0003fb4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003fb8:	31 d2                	xor    edx,edx
c0003fba:	e8 18 dd ff ff       	call   c0001cd7 <mem_set>
c0003fbf:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fc2:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003fc6:	31 c9                	xor    ecx,ecx
c0003fc8:	8d 46 01             	lea    eax,[esi+0x1]
c0003fcb:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fcf:	83 c6 02             	add    esi,0x2
c0003fd2:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003fd6:	66 85 ed             	test   bp,bp
c0003fd9:	74 12                	je     c0003fed <create_xdir+0x53>
c0003fdb:	0f b6 c1             	movzx  eax,cl
c0003fde:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fe2:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003fe6:	66 83 fd 01          	cmp    bp,0x1
c0003fea:	80 d9 ff             	sbb    cl,0xff
c0003fed:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003ff0:	0f b7 d5             	movzx  edx,bp
c0003ff3:	83 c6 02             	add    esi,0x2
c0003ff6:	e8 ba dc ff ff       	call   c0001cb5 <st_word>
c0003ffb:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0004001:	75 d3                	jne    c0003fd6 <create_xdir+0x3c>
c0004003:	8d 47 01             	lea    eax,[edi+0x1]
c0004006:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000400a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000400e:	0f b6 c1             	movzx  eax,cl
c0004011:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0004016:	74 07                	je     c000401f <create_xdir+0x85>
c0004018:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c000401d:	eb a9                	jmp    c0003fc8 <create_xdir+0x2e>
c000401f:	8d 47 02             	lea    eax,[edi+0x2]
c0004022:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004025:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0004028:	89 d0                	mov    eax,edx
c000402a:	e8 33 ff ff ff       	call   c0003f62 <xname_sum>
c000402f:	83 c4 1c             	add    esp,0x1c
c0004032:	0f b7 d0             	movzx  edx,ax
c0004035:	8d 43 24             	lea    eax,[ebx+0x24]
c0004038:	5b                   	pop    ebx
c0004039:	5e                   	pop    esi
c000403a:	5f                   	pop    edi
c000403b:	5d                   	pop    ebp
c000403c:	e9 74 dc ff ff       	jmp    c0001cb5 <st_word>

c0004041 <cmp_lfn>:
c0004041:	55                   	push   ebp
c0004042:	57                   	push   edi
c0004043:	89 d7                	mov    edi,edx
c0004045:	56                   	push   esi
c0004046:	53                   	push   ebx
c0004047:	83 ec 1c             	sub    esp,0x1c
c000404a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000404e:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004051:	e8 ed db ff ff       	call   c0001c43 <ld_word>
c0004056:	66 85 c0             	test   ax,ax
c0004059:	74 07                	je     c0004062 <cmp_lfn+0x21>
c000405b:	31 c0                	xor    eax,eax
c000405d:	e9 9a 00 00 00       	jmp    c00040fc <cmp_lfn+0xbb>
c0004062:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004064:	bd 01 00 00 00       	mov    ebp,0x1
c0004069:	83 e3 3f             	and    ebx,0x3f
c000406c:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004074:	4b                   	dec    ebx
c0004075:	6b db 0d             	imul   ebx,ebx,0xd
c0004078:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000407c:	0f b6 80 60 a1 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd5ea0]
c0004083:	01 f8                	add    eax,edi
c0004085:	e8 b9 db ff ff       	call   c0001c43 <ld_word>
c000408a:	66 85 ed             	test   bp,bp
c000408d:	89 c6                	mov    esi,eax
c000408f:	74 3c                	je     c00040cd <cmp_lfn+0x8c>
c0004091:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0004097:	77 c2                	ja     c000405b <cmp_lfn+0x1a>
c0004099:	83 ec 0c             	sub    esp,0xc
c000409c:	0f b7 c0             	movzx  eax,ax
c000409f:	50                   	push   eax
c00040a0:	e8 fa 44 00 00       	call   c000859f <ff_wtoupper>
c00040a5:	89 c5                	mov    ebp,eax
c00040a7:	8d 43 01             	lea    eax,[ebx+0x1]
c00040aa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00040ae:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00040b2:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c00040b6:	89 04 24             	mov    DWORD PTR [esp],eax
c00040b9:	e8 e1 44 00 00       	call   c000859f <ff_wtoupper>
c00040be:	83 c4 10             	add    esp,0x10
c00040c1:	39 c5                	cmp    ebp,eax
c00040c3:	75 96                	jne    c000405b <cmp_lfn+0x1a>
c00040c5:	89 f5                	mov    ebp,esi
c00040c7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040cb:	eb 04                	jmp    c00040d1 <cmp_lfn+0x90>
c00040cd:	66 46                	inc    si
c00040cf:	75 8a                	jne    c000405b <cmp_lfn+0x1a>
c00040d1:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040d5:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040da:	75 9c                	jne    c0004078 <cmp_lfn+0x37>
c00040dc:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040df:	74 16                	je     c00040f7 <cmp_lfn+0xb6>
c00040e1:	66 85 ed             	test   bp,bp
c00040e4:	74 11                	je     c00040f7 <cmp_lfn+0xb6>
c00040e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00040ea:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c00040ef:	0f 94 c0             	sete   al
c00040f2:	0f b6 c0             	movzx  eax,al
c00040f5:	eb 05                	jmp    c00040fc <cmp_lfn+0xbb>
c00040f7:	b8 01 00 00 00       	mov    eax,0x1
c00040fc:	83 c4 1c             	add    esp,0x1c
c00040ff:	5b                   	pop    ebx
c0004100:	5e                   	pop    esi
c0004101:	5f                   	pop    edi
c0004102:	5d                   	pop    ebp
c0004103:	c3                   	ret    

c0004104 <dir_find>:
c0004104:	55                   	push   ebp
c0004105:	31 d2                	xor    edx,edx
c0004107:	57                   	push   edi
c0004108:	56                   	push   esi
c0004109:	53                   	push   ebx
c000410a:	89 c3                	mov    ebx,eax
c000410c:	83 ec 1c             	sub    esp,0x1c
c000410f:	8b 30                	mov    esi,DWORD PTR [eax]
c0004111:	e8 89 f0 ff ff       	call   c000319f <dir_sdi>
c0004116:	89 04 24             	mov    DWORD PTR [esp],eax
c0004119:	85 c0                	test   eax,eax
c000411b:	0f 85 9e 01 00 00    	jne    c00042bf <dir_find+0x1bb>
c0004121:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004124:	0f 85 8d 00 00 00    	jne    c00041b7 <dir_find+0xb3>
c000412a:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000412d:	e8 30 fe ff ff       	call   c0003f62 <xname_sum>
c0004132:	89 c7                	mov    edi,eax
c0004134:	31 d2                	xor    edx,edx
c0004136:	89 d8                	mov    eax,ebx
c0004138:	e8 72 f8 ff ff       	call   c00039af <dir_read>
c000413d:	85 c0                	test   eax,eax
c000413f:	0f 85 5e 01 00 00    	jne    c00042a3 <dir_find+0x19f>
c0004145:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004148:	8d 41 24             	lea    eax,[ecx+0x24]
c000414b:	e8 f3 da ff ff       	call   c0001c43 <ld_word>
c0004150:	66 39 f8             	cmp    ax,di
c0004153:	75 df                	jne    c0004134 <dir_find+0x30>
c0004155:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004158:	31 ed                	xor    ebp,ebp
c000415a:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000415e:	ba 40 00 00 00       	mov    edx,0x40
c0004163:	89 e9                	mov    ecx,ebp
c0004165:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004169:	0f 84 42 01 00 00    	je     c00042b1 <dir_find+0x1ad>
c000416f:	f6 c2 1f             	test   dl,0x1f
c0004172:	75 03                	jne    c0004177 <dir_find+0x73>
c0004174:	83 c2 02             	add    edx,0x2
c0004177:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000417b:	89 d0                	mov    eax,edx
c000417d:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004180:	e8 be da ff ff       	call   c0001c43 <ld_word>
c0004185:	83 ec 0c             	sub    esp,0xc
c0004188:	0f b7 c0             	movzx  eax,ax
c000418b:	50                   	push   eax
c000418c:	e8 0e 44 00 00       	call   c000859f <ff_wtoupper>
c0004191:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0004195:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004198:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c000419c:	89 04 24             	mov    DWORD PTR [esp],eax
c000419f:	e8 fb 43 00 00       	call   c000859f <ff_wtoupper>
c00041a4:	83 c4 10             	add    esp,0x10
c00041a7:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00041ab:	75 87                	jne    c0004134 <dir_find+0x30>
c00041ad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00041b1:	45                   	inc    ebp
c00041b2:	83 c2 02             	add    edx,0x2
c00041b5:	eb ac                	jmp    c0004163 <dir_find+0x5f>
c00041b7:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041be:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041c3:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041c8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041cb:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041ce:	89 f0                	mov    eax,esi
c00041d0:	e8 4c e2 ff ff       	call   c0002421 <move_window>
c00041d5:	85 c0                	test   eax,eax
c00041d7:	0f 85 c6 00 00 00    	jne    c00042a3 <dir_find+0x19f>
c00041dd:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041e0:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00041e3:	84 c9                	test   cl,cl
c00041e5:	0f 84 bd 00 00 00    	je     c00042a8 <dir_find+0x1a4>
c00041eb:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00041ee:	88 d0                	mov    al,dl
c00041f0:	83 e0 3f             	and    eax,0x3f
c00041f3:	80 f9 e5             	cmp    cl,0xe5
c00041f6:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00041f9:	0f 84 87 00 00 00    	je     c0004286 <dir_find+0x182>
c00041ff:	80 e2 08             	and    dl,0x8
c0004202:	74 06                	je     c000420a <dir_find+0x106>
c0004204:	3c 0f                	cmp    al,0xf
c0004206:	75 7e                	jne    c0004286 <dir_find+0x182>
c0004208:	eb 04                	jmp    c000420e <dir_find+0x10a>
c000420a:	3c 0f                	cmp    al,0xf
c000420c:	75 4c                	jne    c000425a <dir_find+0x156>
c000420e:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004212:	75 7e                	jne    c0004292 <dir_find+0x18e>
c0004214:	f6 c1 40             	test   cl,0x40
c0004217:	74 12                	je     c000422b <dir_find+0x127>
c0004219:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000421c:	83 e1 bf             	and    ecx,0xffffffbf
c000421f:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004223:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004226:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004229:	eb 06                	jmp    c0004231 <dir_find+0x12d>
c000422b:	89 f8                	mov    eax,edi
c000422d:	38 c8                	cmp    al,cl
c000422f:	75 5c                	jne    c000428d <dir_find+0x189>
c0004231:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004235:	bf ff ff ff ff       	mov    edi,0xffffffff
c000423a:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000423d:	75 53                	jne    c0004292 <dir_find+0x18e>
c000423f:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004243:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004246:	89 ea                	mov    edx,ebp
c0004248:	e8 f4 fd ff ff       	call   c0004041 <cmp_lfn>
c000424d:	85 c0                	test   eax,eax
c000424f:	74 41                	je     c0004292 <dir_find+0x18e>
c0004251:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004255:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004258:	eb 38                	jmp    c0004292 <dir_find+0x18e>
c000425a:	89 f8                	mov    eax,edi
c000425c:	84 c0                	test   al,al
c000425e:	75 0d                	jne    c000426d <dir_find+0x169>
c0004260:	89 e8                	mov    eax,ebp
c0004262:	e8 98 de ff ff       	call   c00020ff <sum_sfn>
c0004267:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000426b:	74 52                	je     c00042bf <dir_find+0x1bb>
c000426d:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004271:	75 13                	jne    c0004286 <dir_find+0x182>
c0004273:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004276:	b9 0b 00 00 00       	mov    ecx,0xb
c000427b:	89 e8                	mov    eax,ebp
c000427d:	e8 60 da ff ff       	call   c0001ce2 <mem_cmp>
c0004282:	85 c0                	test   eax,eax
c0004284:	74 39                	je     c00042bf <dir_find+0x1bb>
c0004286:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c000428d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004292:	31 d2                	xor    edx,edx
c0004294:	89 d8                	mov    eax,ebx
c0004296:	e8 5c f4 ff ff       	call   c00036f7 <dir_next>
c000429b:	85 c0                	test   eax,eax
c000429d:	0f 84 25 ff ff ff    	je     c00041c8 <dir_find+0xc4>
c00042a3:	89 04 24             	mov    DWORD PTR [esp],eax
c00042a6:	eb 17                	jmp    c00042bf <dir_find+0x1bb>
c00042a8:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00042af:	eb 0e                	jmp    c00042bf <dir_find+0x1bb>
c00042b1:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00042b4:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00042b9:	0f 85 75 fe ff ff    	jne    c0004134 <dir_find+0x30>
c00042bf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042c2:	83 c4 1c             	add    esp,0x1c
c00042c5:	5b                   	pop    ebx
c00042c6:	5e                   	pop    esi
c00042c7:	5f                   	pop    edi
c00042c8:	5d                   	pop    ebp
c00042c9:	c3                   	ret    

c00042ca <dir_register>:
c00042ca:	55                   	push   ebp
c00042cb:	57                   	push   edi
c00042cc:	56                   	push   esi
c00042cd:	be 06 00 00 00       	mov    esi,0x6
c00042d2:	53                   	push   ebx
c00042d3:	83 ec 6c             	sub    esp,0x6c
c00042d6:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042da:	0f 85 62 02 00 00    	jne    c0004542 <dir_register+0x278>
c00042e0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00042e2:	31 ff                	xor    edi,edi
c00042e4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042e7:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00042ec:	74 03                	je     c00042f1 <dir_register+0x27>
c00042ee:	47                   	inc    edi
c00042ef:	eb f6                	jmp    c00042e7 <dir_register+0x1d>
c00042f1:	89 c3                	mov    ebx,eax
c00042f3:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00042f7:	0f 85 e1 00 00 00    	jne    c00043de <dir_register+0x114>
c00042fd:	83 c7 0e             	add    edi,0xe
c0004300:	b9 0f 00 00 00       	mov    ecx,0xf
c0004305:	89 f8                	mov    eax,edi
c0004307:	31 d2                	xor    edx,edx
c0004309:	f7 f1                	div    ecx
c000430b:	8d 50 02             	lea    edx,[eax+0x2]
c000430e:	89 c7                	mov    edi,eax
c0004310:	89 d8                	mov    eax,ebx
c0004312:	e8 12 f8 ff ff       	call   c0003b29 <dir_alloc>
c0004317:	89 c6                	mov    esi,eax
c0004319:	85 c0                	test   eax,eax
c000431b:	0f 85 21 02 00 00    	jne    c0004542 <dir_register+0x278>
c0004321:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004327:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000432a:	c1 e7 05             	shl    edi,0x5
c000432d:	29 f8                	sub    eax,edi
c000432f:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004332:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004335:	a8 04                	test   al,0x4
c0004337:	0f 84 91 00 00 00    	je     c00043ce <dir_register+0x104>
c000433d:	83 e0 fb             	and    eax,0xfffffffb
c0004340:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004343:	89 d8                	mov    eax,ebx
c0004345:	e8 25 ec ff ff       	call   c0002f6f <fill_first_frag>
c000434a:	85 c0                	test   eax,eax
c000434c:	0f 85 ee 01 00 00    	jne    c0004540 <dir_register+0x276>
c0004352:	83 c9 ff             	or     ecx,0xffffffff
c0004355:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004358:	89 d8                	mov    eax,ebx
c000435a:	e8 db eb ff ff       	call   c0002f3a <fill_last_frag>
c000435f:	85 c0                	test   eax,eax
c0004361:	0f 85 d9 01 00 00    	jne    c0004540 <dir_register+0x276>
c0004367:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000436b:	74 61                	je     c00043ce <dir_register+0x104>
c000436d:	89 da                	mov    edx,ebx
c000436f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004373:	e8 ea f5 ff ff       	call   c0003962 <load_obj_xdir>
c0004378:	85 c0                	test   eax,eax
c000437a:	0f 85 c0 01 00 00    	jne    c0004540 <dir_register+0x276>
c0004380:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004384:	31 c9                	xor    ecx,ecx
c0004386:	c1 e2 09             	shl    edx,0x9
c0004389:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c000438c:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c000438f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004392:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004395:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004398:	83 c0 38             	add    eax,0x38
c000439b:	e8 1c d9 ff ff       	call   c0001cbc <st_qword>
c00043a0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043a3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043a6:	83 c0 28             	add    eax,0x28
c00043a9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00043ac:	e8 0b d9 ff ff       	call   c0001cbc <st_qword>
c00043b1:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00043b4:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00043b7:	83 c8 01             	or     eax,0x1
c00043ba:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043bd:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043c1:	e8 db f7 ff ff       	call   c0003ba1 <store_xdir>
c00043c6:	85 c0                	test   eax,eax
c00043c8:	0f 85 72 01 00 00    	jne    c0004540 <dir_register+0x276>
c00043ce:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043d1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043d4:	e8 c1 fb ff ff       	call   c0003f9a <create_xdir>
c00043d9:	e9 64 01 00 00       	jmp    c0004542 <dir_register+0x278>
c00043de:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043e1:	b9 0c 00 00 00       	mov    ecx,0xc
c00043e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00043ea:	89 c2                	mov    edx,eax
c00043ec:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043f0:	e8 cd d8 ff ff       	call   c0001cc2 <mem_cpy>
c00043f5:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00043fa:	74 58                	je     c0004454 <dir_register+0x18a>
c00043fc:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004400:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004408:	83 ec 0c             	sub    esp,0xc
c000440b:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000440e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004412:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004416:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000441a:	e8 24 dc ff ff       	call   c0002043 <gen_numname>
c000441f:	89 d8                	mov    eax,ebx
c0004421:	e8 de fc ff ff       	call   c0004104 <dir_find>
c0004426:	83 c4 10             	add    esp,0x10
c0004429:	89 c6                	mov    esi,eax
c000442b:	85 c0                	test   eax,eax
c000442d:	75 15                	jne    c0004444 <dir_register+0x17a>
c000442f:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004433:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004438:	75 ce                	jne    c0004408 <dir_register+0x13e>
c000443a:	be 07 00 00 00       	mov    esi,0x7
c000443f:	e9 fe 00 00 00       	jmp    c0004542 <dir_register+0x278>
c0004444:	83 f8 04             	cmp    eax,0x4
c0004447:	0f 85 f5 00 00 00    	jne    c0004542 <dir_register+0x278>
c000444d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004451:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004454:	b9 01 00 00 00       	mov    ecx,0x1
c0004459:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000445e:	74 0f                	je     c000446f <dir_register+0x1a5>
c0004460:	b9 0d 00 00 00       	mov    ecx,0xd
c0004465:	8d 47 0c             	lea    eax,[edi+0xc]
c0004468:	31 d2                	xor    edx,edx
c000446a:	f7 f1                	div    ecx
c000446c:	8d 48 01             	lea    ecx,[eax+0x1]
c000446f:	89 ca                	mov    edx,ecx
c0004471:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004475:	89 d8                	mov    eax,ebx
c0004477:	e8 ad f6 ff ff       	call   c0003b29 <dir_alloc>
c000447c:	89 c6                	mov    esi,eax
c000447e:	85 c0                	test   eax,eax
c0004480:	0f 85 bc 00 00 00    	jne    c0004542 <dir_register+0x278>
c0004486:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000448a:	49                   	dec    ecx
c000448b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000448f:	74 6a                	je     c00044fb <dir_register+0x231>
c0004491:	89 c8                	mov    eax,ecx
c0004493:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004496:	c1 e0 05             	shl    eax,0x5
c0004499:	29 c2                	sub    edx,eax
c000449b:	89 d8                	mov    eax,ebx
c000449d:	e8 fd ec ff ff       	call   c000319f <dir_sdi>
c00044a2:	89 c6                	mov    esi,eax
c00044a4:	85 c0                	test   eax,eax
c00044a6:	0f 85 96 00 00 00    	jne    c0004542 <dir_register+0x278>
c00044ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00044b0:	e8 4a dc ff ff       	call   c00020ff <sum_sfn>
c00044b5:	0f b6 f8             	movzx  edi,al
c00044b8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044bb:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044be:	89 e8                	mov    eax,ebp
c00044c0:	e8 5c df ff ff       	call   c0002421 <move_window>
c00044c5:	89 c6                	mov    esi,eax
c00044c7:	85 c0                	test   eax,eax
c00044c9:	75 77                	jne    c0004542 <dir_register+0x278>
c00044cb:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044d0:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044d3:	83 ec 0c             	sub    esp,0xc
c00044d6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044d9:	57                   	push   edi
c00044da:	e8 e0 da ff ff       	call   c0001fbf <put_lfn>
c00044df:	31 d2                	xor    edx,edx
c00044e1:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00044e5:	89 d8                	mov    eax,ebx
c00044e7:	e8 0b f2 ff ff       	call   c00036f7 <dir_next>
c00044ec:	83 c4 10             	add    esp,0x10
c00044ef:	89 c6                	mov    esi,eax
c00044f1:	85 c0                	test   eax,eax
c00044f3:	75 4d                	jne    c0004542 <dir_register+0x278>
c00044f5:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00044f9:	75 bd                	jne    c00044b8 <dir_register+0x1ee>
c00044fb:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044fe:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004501:	89 e8                	mov    eax,ebp
c0004503:	e8 19 df ff ff       	call   c0002421 <move_window>
c0004508:	89 c6                	mov    esi,eax
c000450a:	85 c0                	test   eax,eax
c000450c:	75 34                	jne    c0004542 <dir_register+0x278>
c000450e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004511:	b9 20 00 00 00       	mov    ecx,0x20
c0004516:	31 d2                	xor    edx,edx
c0004518:	e8 ba d7 ff ff       	call   c0001cd7 <mem_set>
c000451d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004520:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004524:	b9 0b 00 00 00       	mov    ecx,0xb
c0004529:	e8 94 d7 ff ff       	call   c0001cc2 <mem_cpy>
c000452e:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004531:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004534:	83 e0 18             	and    eax,0x18
c0004537:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c000453a:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000453e:	eb 02                	jmp    c0004542 <dir_register+0x278>
c0004540:	89 c6                	mov    esi,eax
c0004542:	83 c4 6c             	add    esp,0x6c
c0004545:	89 f0                	mov    eax,esi
c0004547:	5b                   	pop    ebx
c0004548:	5e                   	pop    esi
c0004549:	5f                   	pop    edi
c000454a:	5d                   	pop    ebp
c000454b:	c3                   	ret    

c000454c <sync_fs>:
c000454c:	56                   	push   esi
c000454d:	53                   	push   ebx
c000454e:	53                   	push   ebx
c000454f:	89 c3                	mov    ebx,eax
c0004551:	e8 37 de ff ff       	call   c000238d <sync_window>
c0004556:	85 c0                	test   eax,eax
c0004558:	0f 85 b1 00 00 00    	jne    c000460f <sync_fs+0xc3>
c000455e:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004561:	0f 85 8e 00 00 00    	jne    c00045f5 <sync_fs+0xa9>
c0004567:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000456b:	0f 85 84 00 00 00    	jne    c00045f5 <sync_fs+0xa9>
c0004571:	b9 00 02 00 00       	mov    ecx,0x200
c0004576:	8d 73 54             	lea    esi,[ebx+0x54]
c0004579:	31 d2                	xor    edx,edx
c000457b:	89 f0                	mov    eax,esi
c000457d:	e8 55 d7 ff ff       	call   c0001cd7 <mem_set>
c0004582:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0004588:	ba 55 aa 00 00       	mov    edx,0xaa55
c000458d:	e8 23 d7 ff ff       	call   c0001cb5 <st_word>
c0004592:	ba 52 52 61 41       	mov    edx,0x41615252
c0004597:	89 f0                	mov    eax,esi
c0004599:	e8 1b d7 ff ff       	call   c0001cb9 <st_dword>
c000459e:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00045a4:	ba 72 72 41 61       	mov    edx,0x61417272
c00045a9:	e8 0b d7 ff ff       	call   c0001cb9 <st_dword>
c00045ae:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045b1:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00045b7:	e8 fd d6 ff ff       	call   c0001cb9 <st_dword>
c00045bc:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045bf:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045c5:	e8 ef d6 ff ff       	call   c0001cb9 <st_dword>
c00045ca:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045cd:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045d0:	83 c0 01             	add    eax,0x1
c00045d3:	83 d2 00             	adc    edx,0x0
c00045d6:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045d9:	83 ec 0c             	sub    esp,0xc
c00045dc:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045df:	6a 01                	push   0x1
c00045e1:	52                   	push   edx
c00045e2:	50                   	push   eax
c00045e3:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045e7:	56                   	push   esi
c00045e8:	50                   	push   eax
c00045e9:	e8 20 d6 ff ff       	call   c0001c0e <disk_write>
c00045ee:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00045f2:	83 c4 20             	add    esp,0x20
c00045f5:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045f9:	51                   	push   ecx
c00045fa:	6a 00                	push   0x0
c00045fc:	6a 00                	push   0x0
c00045fe:	50                   	push   eax
c00045ff:	e8 20 d6 ff ff       	call   c0001c24 <disk_ioctl>
c0004604:	83 c4 10             	add    esp,0x10
c0004607:	85 c0                	test   eax,eax
c0004609:	0f 95 c0             	setne  al
c000460c:	0f b6 c0             	movzx  eax,al
c000460f:	5a                   	pop    edx
c0004610:	5b                   	pop    ebx
c0004611:	5e                   	pop    esi
c0004612:	c3                   	ret    

c0004613 <create_partition>:
c0004613:	55                   	push   ebp
c0004614:	0f b6 c0             	movzx  eax,al
c0004617:	57                   	push   edi
c0004618:	56                   	push   esi
c0004619:	53                   	push   ebx
c000461a:	83 ec 60             	sub    esp,0x60
c000461d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004621:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004625:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004629:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000462d:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004631:	50                   	push   eax
c0004632:	6a 01                	push   0x1
c0004634:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004638:	e8 e7 d5 ff ff       	call   c0001c24 <disk_ioctl>
c000463d:	83 c4 10             	add    esp,0x10
c0004640:	85 c0                	test   eax,eax
c0004642:	74 0a                	je     c000464e <create_partition+0x3b>
c0004644:	b8 01 00 00 00       	mov    eax,0x1
c0004649:	e9 67 05 00 00       	jmp    c0004bb5 <create_partition+0x5a2>
c000464e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004652:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004656:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000465a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000465e:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004663:	0f 86 ed 03 00 00    	jbe    c0004a56 <create_partition+0x443>
c0004669:	83 c0 df             	add    eax,0xffffffdf
c000466c:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004674:	83 d2 ff             	adc    edx,0xffffffff
c0004677:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000467b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000467f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004683:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004687:	83 c0 bd             	add    eax,0xffffffbd
c000468a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004691:	83 d2 ff             	adc    edx,0xffffffff
c0004694:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0004698:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000469c:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046a4:	be 22 00 00 00       	mov    esi,0x22
c00046a9:	31 ff                	xor    edi,edi
c00046ab:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00046b3:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00046bb:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046c3:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046c7:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046cd:	75 0e                	jne    c00046dd <create_partition+0xca>
c00046cf:	b9 00 02 00 00       	mov    ecx,0x200
c00046d4:	31 d2                	xor    edx,edx
c00046d6:	89 d8                	mov    eax,ebx
c00046d8:	e8 fa d5 ff ff       	call   c0001cd7 <mem_set>
c00046dd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046e1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00046e5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046e9:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046ec:	0f 84 23 01 00 00    	je     c0004815 <create_partition+0x202>
c00046f2:	89 f0                	mov    eax,esi
c00046f4:	89 fa                	mov    edx,edi
c00046f6:	05 ff 07 00 00       	add    eax,0x7ff
c00046fb:	83 d2 00             	adc    edx,0x0
c00046fe:	89 c1                	mov    ecx,eax
c0004700:	89 d7                	mov    edi,edx
c0004702:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004708:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000470c:	89 ce                	mov    esi,ecx
c000470e:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004712:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004716:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c000471a:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000471d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004721:	89 04 24             	mov    DWORD PTR [esp],eax
c0004724:	b8 64 00 00 00       	mov    eax,0x64
c0004729:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000472c:	b8 00 00 00 00       	mov    eax,0x0
c0004731:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004735:	72 41                	jb     c0004778 <create_partition+0x165>
c0004737:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000473b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000473f:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004743:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004748:	01 c1                	add    ecx,eax
c000474a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000474e:	f7 24 24             	mul    DWORD PTR [esp]
c0004751:	6a 00                	push   0x0
c0004753:	01 ca                	add    edx,ecx
c0004755:	6a 64                	push   0x64
c0004757:	52                   	push   edx
c0004758:	50                   	push   eax
c0004759:	e8 86 2e 02 00       	call   c00275e4 <__udivdi3>
c000475e:	83 c4 10             	add    esp,0x10
c0004761:	05 ff 07 00 00       	add    eax,0x7ff
c0004766:	83 d2 00             	adc    edx,0x0
c0004769:	89 c1                	mov    ecx,eax
c000476b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000476f:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004775:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004778:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000477b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000477f:	01 f0                	add    eax,esi
c0004781:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004785:	11 fa                	adc    edx,edi
c0004787:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000478b:	19 d1                	sbb    ecx,edx
c000478d:	73 2e                	jae    c00047bd <create_partition+0x1aa>
c000478f:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004793:	89 f8                	mov    eax,edi
c0004795:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000479c:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00047a0:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00047a8:	73 6b                	jae    c0004815 <create_partition+0x202>
c00047aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00047ae:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00047b2:	29 f0                	sub    eax,esi
c00047b4:	19 fa                	sbb    edx,edi
c00047b6:	89 04 24             	mov    DWORD PTR [esp],eax
c00047b9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047c1:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047c4:	74 4f                	je     c0004815 <create_partition+0x202>
c00047c6:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047c9:	b9 10 00 00 00       	mov    ecx,0x10
c00047ce:	ba 70 a1 02 c0       	mov    edx,0xc002a170
c00047d3:	e8 ea d4 ff ff       	call   c0001cc2 <mem_cpy>
c00047d8:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047dc:	b9 10 00 00 00       	mov    ecx,0x10
c00047e1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00047e5:	e8 2c db ff ff       	call   c0002316 <make_rand>
c00047ea:	89 f2                	mov    edx,esi
c00047ec:	89 f9                	mov    ecx,edi
c00047ee:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00047f2:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00047f6:	e8 c1 d4 ff ff       	call   c0001cbc <st_qword>
c00047fb:	03 34 24             	add    esi,DWORD PTR [esp]
c00047fe:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004802:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004806:	89 f2                	mov    edx,esi
c0004808:	89 f9                	mov    ecx,edi
c000480a:	83 c2 ff             	add    edx,0xffffffff
c000480d:	83 d1 ff             	adc    ecx,0xffffffff
c0004810:	e8 a7 d4 ff ff       	call   c0001cbc <st_qword>
c0004815:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004819:	83 e8 80             	sub    eax,0xffffff80
c000481c:	89 c5                	mov    ebp,eax
c000481e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004822:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004828:	75 6b                	jne    c0004895 <create_partition+0x282>
c000482a:	45                   	inc    ebp
c000482b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000482f:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004834:	e8 39 da ff ff       	call   c0002272 <crc32>
c0004839:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000483f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004843:	75 e5                	jne    c000482a <create_partition+0x217>
c0004845:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004849:	31 d2                	xor    edx,edx
c000484b:	83 ec 0c             	sub    esp,0xc
c000484e:	c1 ed 09             	shr    ebp,0x9
c0004851:	6a 01                	push   0x1
c0004853:	8d 45 02             	lea    eax,[ebp+0x2]
c0004856:	52                   	push   edx
c0004857:	50                   	push   eax
c0004858:	53                   	push   ebx
c0004859:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000485d:	e8 ac d3 ff ff       	call   c0001c0e <disk_write>
c0004862:	83 c4 20             	add    esp,0x20
c0004865:	85 c0                	test   eax,eax
c0004867:	0f 85 d7 fd ff ff    	jne    c0004644 <create_partition+0x31>
c000486d:	83 ec 0c             	sub    esp,0xc
c0004870:	31 d2                	xor    edx,edx
c0004872:	6a 01                	push   0x1
c0004874:	89 e8                	mov    eax,ebp
c0004876:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000487a:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000487e:	52                   	push   edx
c000487f:	50                   	push   eax
c0004880:	53                   	push   ebx
c0004881:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004885:	e8 84 d3 ff ff       	call   c0001c0e <disk_write>
c000488a:	83 c4 20             	add    esp,0x20
c000488d:	85 c0                	test   eax,eax
c000488f:	0f 85 af fd ff ff    	jne    c0004644 <create_partition+0x31>
c0004895:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004899:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000489d:	3d 00 40 00 00       	cmp    eax,0x4000
c00048a2:	74 0d                	je     c00048b1 <create_partition+0x29e>
c00048a4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00048a8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048ac:	e9 12 fe ff ff       	jmp    c00046c3 <create_partition+0xb0>
c00048b1:	31 d2                	xor    edx,edx
c00048b3:	b9 00 02 00 00       	mov    ecx,0x200
c00048b8:	89 d8                	mov    eax,ebx
c00048ba:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048bd:	e8 15 d4 ff ff       	call   c0001cd7 <mem_set>
c00048c2:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048c5:	b9 10 00 00 00       	mov    ecx,0x10
c00048ca:	ba 60 a0 02 c0       	mov    edx,0xc002a060
c00048cf:	89 d8                	mov    eax,ebx
c00048d1:	e8 ec d3 ff ff       	call   c0001cc2 <mem_cpy>
c00048d6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048da:	8d 43 58             	lea    eax,[ebx+0x58]
c00048dd:	f7 d2                	not    edx
c00048df:	e8 d5 d3 ff ff       	call   c0001cb9 <st_dword>
c00048e4:	8d 43 18             	lea    eax,[ebx+0x18]
c00048e7:	31 c9                	xor    ecx,ecx
c00048e9:	89 04 24             	mov    DWORD PTR [esp],eax
c00048ec:	ba 01 00 00 00       	mov    edx,0x1
c00048f1:	e8 c6 d3 ff ff       	call   c0001cbc <st_qword>
c00048f6:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048fa:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048fe:	83 c2 ff             	add    edx,0xffffffff
c0004901:	89 e8                	mov    eax,ebp
c0004903:	83 d1 ff             	adc    ecx,0xffffffff
c0004906:	e8 b1 d3 ff ff       	call   c0001cbc <st_qword>
c000490b:	31 c9                	xor    ecx,ecx
c000490d:	8d 43 28             	lea    eax,[ebx+0x28]
c0004910:	ba 22 00 00 00       	mov    edx,0x22
c0004915:	e8 a2 d3 ff ff       	call   c0001cbc <st_qword>
c000491a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000491e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004922:	83 c2 de             	add    edx,0xffffffde
c0004925:	8d 43 30             	lea    eax,[ebx+0x30]
c0004928:	83 d1 ff             	adc    ecx,0xffffffff
c000492b:	31 f6                	xor    esi,esi
c000492d:	e8 8a d3 ff ff       	call   c0001cbc <st_qword>
c0004932:	8d 43 54             	lea    eax,[ebx+0x54]
c0004935:	ba 80 00 00 00       	mov    edx,0x80
c000493a:	e8 7a d3 ff ff       	call   c0001cb9 <st_dword>
c000493f:	8d 43 50             	lea    eax,[ebx+0x50]
c0004942:	ba 80 00 00 00       	mov    edx,0x80
c0004947:	e8 6d d3 ff ff       	call   c0001cb9 <st_dword>
c000494c:	ba 02 00 00 00       	mov    edx,0x2
c0004951:	89 f8                	mov    eax,edi
c0004953:	e8 61 d3 ff ff       	call   c0001cb9 <st_dword>
c0004958:	8d 53 38             	lea    edx,[ebx+0x38]
c000495b:	b9 10 00 00 00       	mov    ecx,0x10
c0004960:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004964:	e8 ad d9 ff ff       	call   c0002316 <make_rand>
c0004969:	83 c8 ff             	or     eax,0xffffffff
c000496c:	46                   	inc    esi
c000496d:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004972:	e8 fb d8 ff ff       	call   c0002272 <crc32>
c0004977:	83 fe 5c             	cmp    esi,0x5c
c000497a:	75 f0                	jne    c000496c <create_partition+0x359>
c000497c:	f7 d0                	not    eax
c000497e:	8d 73 10             	lea    esi,[ebx+0x10]
c0004981:	89 c2                	mov    edx,eax
c0004983:	89 f0                	mov    eax,esi
c0004985:	e8 2f d3 ff ff       	call   c0001cb9 <st_dword>
c000498a:	83 ec 0c             	sub    esp,0xc
c000498d:	6a 01                	push   0x1
c000498f:	6a 00                	push   0x0
c0004991:	6a 01                	push   0x1
c0004993:	53                   	push   ebx
c0004994:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004998:	e8 71 d2 ff ff       	call   c0001c0e <disk_write>
c000499d:	83 c4 20             	add    esp,0x20
c00049a0:	85 c0                	test   eax,eax
c00049a2:	0f 85 9c fc ff ff    	jne    c0004644 <create_partition+0x31>
c00049a8:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00049ac:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00049b0:	83 c2 ff             	add    edx,0xffffffff
c00049b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049b6:	83 d1 ff             	adc    ecx,0xffffffff
c00049b9:	e8 fe d2 ff ff       	call   c0001cbc <st_qword>
c00049be:	ba 01 00 00 00       	mov    edx,0x1
c00049c3:	31 c9                	xor    ecx,ecx
c00049c5:	89 e8                	mov    eax,ebp
c00049c7:	e8 f0 d2 ff ff       	call   c0001cbc <st_qword>
c00049cc:	89 f8                	mov    eax,edi
c00049ce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049d2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049d6:	31 ff                	xor    edi,edi
c00049d8:	e8 df d2 ff ff       	call   c0001cbc <st_qword>
c00049dd:	89 f0                	mov    eax,esi
c00049df:	31 d2                	xor    edx,edx
c00049e1:	e8 d3 d2 ff ff       	call   c0001cb9 <st_dword>
c00049e6:	83 c8 ff             	or     eax,0xffffffff
c00049e9:	47                   	inc    edi
c00049ea:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00049ef:	e8 7e d8 ff ff       	call   c0002272 <crc32>
c00049f4:	83 ff 5c             	cmp    edi,0x5c
c00049f7:	75 f0                	jne    c00049e9 <create_partition+0x3d6>
c00049f9:	f7 d0                	not    eax
c00049fb:	89 c2                	mov    edx,eax
c00049fd:	89 f0                	mov    eax,esi
c00049ff:	e8 b5 d2 ff ff       	call   c0001cb9 <st_dword>
c0004a04:	83 ec 0c             	sub    esp,0xc
c0004a07:	6a 01                	push   0x1
c0004a09:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004a0d:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a11:	83 c0 ff             	add    eax,0xffffffff
c0004a14:	83 d2 ff             	adc    edx,0xffffffff
c0004a17:	52                   	push   edx
c0004a18:	50                   	push   eax
c0004a19:	53                   	push   ebx
c0004a1a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a1e:	e8 eb d1 ff ff       	call   c0001c0e <disk_write>
c0004a23:	83 c4 20             	add    esp,0x20
c0004a26:	85 c0                	test   eax,eax
c0004a28:	0f 85 16 fc ff ff    	jne    c0004644 <create_partition+0x31>
c0004a2e:	31 d2                	xor    edx,edx
c0004a30:	89 d8                	mov    eax,ebx
c0004a32:	b9 00 02 00 00       	mov    ecx,0x200
c0004a37:	e8 9b d2 ff ff       	call   c0001cd7 <mem_set>
c0004a3c:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a42:	b9 10 00 00 00       	mov    ecx,0x10
c0004a47:	ba 70 a0 02 c0       	mov    edx,0xc002a070
c0004a4c:	e8 71 d2 ff ff       	call   c0001cc2 <mem_cpy>
c0004a51:	e9 21 01 00 00       	jmp    c0004b77 <create_partition+0x564>
c0004a56:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a5a:	b9 05 00 00 00       	mov    ecx,0x5
c0004a5f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a62:	bf 08 00 00 00       	mov    edi,0x8
c0004a67:	89 f8                	mov    eax,edi
c0004a69:	31 d2                	xor    edx,edx
c0004a6b:	0f b6 f0             	movzx  esi,al
c0004a6e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a71:	f7 f6                	div    esi
c0004a73:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a78:	76 0a                	jbe    c0004a84 <create_partition+0x471>
c0004a7a:	d1 e7                	shl    edi,1
c0004a7c:	49                   	dec    ecx
c0004a7d:	75 e8                	jne    c0004a67 <create_partition+0x454>
c0004a7f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004a84:	b9 00 02 00 00       	mov    ecx,0x200
c0004a89:	31 d2                	xor    edx,edx
c0004a8b:	89 d8                	mov    eax,ebx
c0004a8d:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004a93:	e8 3f d2 ff ff       	call   c0001cd7 <mem_set>
c0004a98:	b9 64 00 00 00       	mov    ecx,0x64
c0004a9d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004aa0:	31 d2                	xor    edx,edx
c0004aa2:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004aaa:	f7 f1                	div    ecx
c0004aac:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004ab1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ab5:	89 f8                	mov    eax,edi
c0004ab7:	0f b6 c0             	movzx  eax,al
c0004aba:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004abe:	e9 80 00 00 00       	jmp    c0004b43 <create_partition+0x530>
c0004ac3:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004ac6:	29 cf                	sub    edi,ecx
c0004ac8:	89 ca                	mov    edx,ecx
c0004aca:	89 f0                	mov    eax,esi
c0004acc:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004ad1:	e8 e3 d1 ff ff       	call   c0001cb9 <st_dword>
c0004ad6:	8d 46 04             	lea    eax,[esi+0x4]
c0004ad9:	89 fa                	mov    edx,edi
c0004adb:	83 c6 10             	add    esi,0x10
c0004ade:	e8 d6 d1 ff ff       	call   c0001cb9 <st_dword>
c0004ae3:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004ae7:	31 d2                	xor    edx,edx
c0004ae9:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004aec:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004af0:	89 c8                	mov    eax,ecx
c0004af2:	01 f9                	add    ecx,edi
c0004af4:	f7 f5                	div    ebp
c0004af6:	89 d5                	mov    ebp,edx
c0004af8:	31 d2                	xor    edx,edx
c0004afa:	45                   	inc    ebp
c0004afb:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004aff:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004b02:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004b05:	89 c2                	mov    edx,eax
c0004b07:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004b0a:	c1 ea 02             	shr    edx,0x2
c0004b0d:	83 e2 c0             	and    edx,0xffffffc0
c0004b10:	09 ea                	or     edx,ebp
c0004b12:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b17:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004b1a:	31 d2                	xor    edx,edx
c0004b1c:	f7 f5                	div    ebp
c0004b1e:	89 d7                	mov    edi,edx
c0004b20:	31 d2                	xor    edx,edx
c0004b22:	47                   	inc    edi
c0004b23:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b27:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b2a:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b2d:	89 c5                	mov    ebp,eax
c0004b2f:	c1 ed 02             	shr    ebp,0x2
c0004b32:	83 e5 c0             	and    ebp,0xffffffc0
c0004b35:	09 ef                	or     edi,ebp
c0004b37:	89 fa                	mov    edx,edi
c0004b39:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b3c:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b41:	74 34                	je     c0004b77 <create_partition+0x564>
c0004b43:	85 c9                	test   ecx,ecx
c0004b45:	74 30                	je     c0004b77 <create_partition+0x564>
c0004b47:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b4a:	76 2b                	jbe    c0004b77 <create_partition+0x564>
c0004b4c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b50:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b54:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b57:	83 ff 64             	cmp    edi,0x64
c0004b5a:	76 4b                	jbe    c0004ba7 <create_partition+0x594>
c0004b5c:	89 f8                	mov    eax,edi
c0004b5e:	01 c8                	add    eax,ecx
c0004b60:	0f 82 5d ff ff ff    	jb     c0004ac3 <create_partition+0x4b0>
c0004b66:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b69:	0f 87 54 ff ff ff    	ja     c0004ac3 <create_partition+0x4b0>
c0004b6f:	85 ff                	test   edi,edi
c0004b71:	0f 85 51 ff ff ff    	jne    c0004ac8 <create_partition+0x4b5>
c0004b77:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b7d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004b82:	e8 2e d1 ff ff       	call   c0001cb5 <st_word>
c0004b87:	83 ec 0c             	sub    esp,0xc
c0004b8a:	6a 01                	push   0x1
c0004b8c:	6a 00                	push   0x0
c0004b8e:	6a 00                	push   0x0
c0004b90:	53                   	push   ebx
c0004b91:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004b95:	e8 74 d0 ff ff       	call   c0001c0e <disk_write>
c0004b9a:	83 c4 20             	add    esp,0x20
c0004b9d:	85 c0                	test   eax,eax
c0004b9f:	0f 95 c0             	setne  al
c0004ba2:	0f b6 c0             	movzx  eax,al
c0004ba5:	eb 0e                	jmp    c0004bb5 <create_partition+0x5a2>
c0004ba7:	74 07                	je     c0004bb0 <create_partition+0x59d>
c0004ba9:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004bae:	eb ac                	jmp    c0004b5c <create_partition+0x549>
c0004bb0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004bb3:	eb a7                	jmp    c0004b5c <create_partition+0x549>
c0004bb5:	83 c4 5c             	add    esp,0x5c
c0004bb8:	5b                   	pop    ebx
c0004bb9:	5e                   	pop    esi
c0004bba:	5f                   	pop    edi
c0004bbb:	5d                   	pop    ebp
c0004bbc:	c3                   	ret    

c0004bbd <get_fileinfo>:
c0004bbd:	55                   	push   ebp
c0004bbe:	57                   	push   edi
c0004bbf:	56                   	push   esi
c0004bc0:	53                   	push   ebx
c0004bc1:	83 ec 1c             	sub    esp,0x1c
c0004bc4:	8b 30                	mov    esi,DWORD PTR [eax]
c0004bc6:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004bca:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bce:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bd1:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bd4:	0f 84 dc 01 00 00    	je     c0004db6 <get_fileinfo+0x1f9>
c0004bda:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bdd:	75 0f                	jne    c0004bee <get_fileinfo+0x31>
c0004bdf:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004be2:	83 c4 1c             	add    esp,0x1c
c0004be5:	5b                   	pop    ebx
c0004be6:	5e                   	pop    esi
c0004be7:	5f                   	pop    edi
c0004be8:	5d                   	pop    ebp
c0004be9:	e9 58 d5 ff ff       	jmp    c0002146 <get_xfileinfo>
c0004bee:	89 d3                	mov    ebx,edx
c0004bf0:	89 c6                	mov    esi,eax
c0004bf2:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004bf6:	74 6a                	je     c0004c62 <get_fileinfo+0xa5>
c0004bf8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004c00:	31 ed                	xor    ebp,ebp
c0004c02:	31 ff                	xor    edi,edi
c0004c04:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004c08:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004c0c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004c0f:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004c13:	66 85 d2             	test   dx,dx
c0004c16:	74 3e                	je     c0004c56 <get_fileinfo+0x99>
c0004c18:	66 85 ed             	test   bp,bp
c0004c1b:	75 0c                	jne    c0004c29 <get_fileinfo+0x6c>
c0004c1d:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c23:	66 3d ff 07          	cmp    ax,0x7ff
c0004c27:	76 22                	jbe    c0004c4b <get_fileinfo+0x8e>
c0004c29:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c2e:	89 e8                	mov    eax,ebp
c0004c30:	29 f9                	sub    ecx,edi
c0004c32:	c1 e0 10             	shl    eax,0x10
c0004c35:	09 d0                	or     eax,edx
c0004c37:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c3b:	e8 a3 d1 ff ff       	call   c0001de3 <put_utf>
c0004c40:	84 c0                	test   al,al
c0004c42:	74 10                	je     c0004c54 <get_fileinfo+0x97>
c0004c44:	0f b6 c0             	movzx  eax,al
c0004c47:	31 d2                	xor    edx,edx
c0004c49:	01 c7                	add    edi,eax
c0004c4b:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c50:	89 d5                	mov    ebp,edx
c0004c52:	eb b0                	jmp    c0004c04 <get_fileinfo+0x47>
c0004c54:	31 ff                	xor    edi,edi
c0004c56:	66 85 ed             	test   bp,bp
c0004c59:	74 02                	je     c0004c5d <get_fileinfo+0xa0>
c0004c5b:	31 ff                	xor    edi,edi
c0004c5d:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c62:	31 ff                	xor    edi,edi
c0004c64:	31 c9                	xor    ecx,ecx
c0004c66:	83 f9 0a             	cmp    ecx,0xa
c0004c69:	0f 87 ad 00 00 00    	ja     c0004d1c <get_fileinfo+0x15f>
c0004c6f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c72:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c75:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c79:	66 83 fa 20          	cmp    dx,0x20
c0004c7d:	0f 84 92 00 00 00    	je     c0004d15 <get_fileinfo+0x158>
c0004c83:	66 83 fa 05          	cmp    dx,0x5
c0004c87:	75 05                	jne    c0004c8e <get_fileinfo+0xd1>
c0004c89:	ba e5 00 00 00       	mov    edx,0xe5
c0004c8e:	83 ff 0b             	cmp    edi,0xb
c0004c91:	77 0b                	ja     c0004c9e <get_fileinfo+0xe1>
c0004c93:	83 fd 09             	cmp    ebp,0x9
c0004c96:	75 06                	jne    c0004c9e <get_fileinfo+0xe1>
c0004c98:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004c9d:	47                   	inc    edi
c0004c9e:	0f b7 c2             	movzx  eax,dx
c0004ca1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ca5:	e8 6d d0 ff ff       	call   c0001d17 <dbc_1st>
c0004caa:	85 c0                	test   eax,eax
c0004cac:	74 2f                	je     c0004cdd <get_fileinfo+0x120>
c0004cae:	83 fd 08             	cmp    ebp,0x8
c0004cb1:	74 2a                	je     c0004cdd <get_fileinfo+0x120>
c0004cb3:	83 fd 0b             	cmp    ebp,0xb
c0004cb6:	74 25                	je     c0004cdd <get_fileinfo+0x120>
c0004cb8:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cbb:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004cbf:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004cc3:	e8 52 d0 ff ff       	call   c0001d1a <dbc_2nd>
c0004cc8:	85 c0                	test   eax,eax
c0004cca:	74 11                	je     c0004cdd <get_fileinfo+0x120>
c0004ccc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cd0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cd5:	c1 e2 08             	shl    edx,0x8
c0004cd8:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cdb:	09 c2                	or     edx,eax
c0004cdd:	0f b7 d2             	movzx  edx,dx
c0004ce0:	50                   	push   eax
c0004ce1:	50                   	push   eax
c0004ce2:	68 b5 01 00 00       	push   0x1b5
c0004ce7:	52                   	push   edx
c0004ce8:	e8 46 38 00 00       	call   c0008533 <ff_oem2uni>
c0004ced:	83 c4 10             	add    esp,0x10
c0004cf0:	66 85 c0             	test   ax,ax
c0004cf3:	75 04                	jne    c0004cf9 <get_fileinfo+0x13c>
c0004cf5:	31 ff                	xor    edi,edi
c0004cf7:	eb 23                	jmp    c0004d1c <get_fileinfo+0x15f>
c0004cf9:	b9 0c 00 00 00       	mov    ecx,0xc
c0004cfe:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004d02:	29 f9                	sub    ecx,edi
c0004d04:	0f b7 c0             	movzx  eax,ax
c0004d07:	e8 d7 d0 ff ff       	call   c0001de3 <put_utf>
c0004d0c:	84 c0                	test   al,al
c0004d0e:	74 e5                	je     c0004cf5 <get_fileinfo+0x138>
c0004d10:	0f b6 c0             	movzx  eax,al
c0004d13:	01 c7                	add    edi,eax
c0004d15:	89 e9                	mov    ecx,ebp
c0004d17:	e9 4a ff ff ff       	jmp    c0004c66 <get_fileinfo+0xa9>
c0004d1c:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d21:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d25:	75 54                	jne    c0004d7b <get_fileinfo+0x1be>
c0004d27:	85 ff                	test   edi,edi
c0004d29:	75 0b                	jne    c0004d36 <get_fileinfo+0x179>
c0004d2b:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d2f:	ba 01 00 00 00       	mov    edx,0x1
c0004d34:	eb 33                	jmp    c0004d69 <get_fileinfo+0x1ac>
c0004d36:	b1 08                	mov    cl,0x8
c0004d38:	31 d2                	xor    edx,edx
c0004d3a:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d40:	84 c0                	test   al,al
c0004d42:	74 25                	je     c0004d69 <get_fileinfo+0x1ac>
c0004d44:	66 83 f8 2e          	cmp    ax,0x2e
c0004d48:	74 16                	je     c0004d60 <get_fileinfo+0x1a3>
c0004d4a:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d4d:	66 83 ff 19          	cmp    di,0x19
c0004d51:	77 0f                	ja     c0004d62 <get_fileinfo+0x1a5>
c0004d53:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d56:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d59:	74 07                	je     c0004d62 <get_fileinfo+0x1a5>
c0004d5b:	83 c0 20             	add    eax,0x20
c0004d5e:	eb 02                	jmp    c0004d62 <get_fileinfo+0x1a5>
c0004d60:	b1 10                	mov    cl,0x10
c0004d62:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d66:	42                   	inc    edx
c0004d67:	eb d1                	jmp    c0004d3a <get_fileinfo+0x17d>
c0004d69:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d6e:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d71:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d75:	75 04                	jne    c0004d7b <get_fileinfo+0x1be>
c0004d77:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d7b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d7e:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d81:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004d84:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d87:	83 c0 1c             	add    eax,0x1c
c0004d8a:	e8 c1 ce ff ff       	call   c0001c50 <ld_dword>
c0004d8f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004d96:	89 03                	mov    DWORD PTR [ebx],eax
c0004d98:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d9b:	83 c0 16             	add    eax,0x16
c0004d9e:	e8 a0 ce ff ff       	call   c0001c43 <ld_word>
c0004da3:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004da7:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004daa:	83 c0 18             	add    eax,0x18
c0004dad:	e8 91 ce ff ff       	call   c0001c43 <ld_word>
c0004db2:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004db6:	83 c4 1c             	add    esp,0x1c
c0004db9:	5b                   	pop    ebx
c0004dba:	5e                   	pop    esi
c0004dbb:	5f                   	pop    edi
c0004dbc:	5d                   	pop    ebp
c0004dbd:	c3                   	ret    

c0004dbe <ld_clust.isra.0>:
c0004dbe:	56                   	push   esi
c0004dbf:	89 c6                	mov    esi,eax
c0004dc1:	53                   	push   ebx
c0004dc2:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004dc5:	89 d3                	mov    ebx,edx
c0004dc7:	e8 77 ce ff ff       	call   c0001c43 <ld_word>
c0004dcc:	0f b7 c8             	movzx  ecx,ax
c0004dcf:	89 f0                	mov    eax,esi
c0004dd1:	3c 03                	cmp    al,0x3
c0004dd3:	75 0d                	jne    c0004de2 <ld_clust.isra.0+0x24>
c0004dd5:	8d 43 14             	lea    eax,[ebx+0x14]
c0004dd8:	e8 66 ce ff ff       	call   c0001c43 <ld_word>
c0004ddd:	c1 e0 10             	shl    eax,0x10
c0004de0:	09 c1                	or     ecx,eax
c0004de2:	89 c8                	mov    eax,ecx
c0004de4:	5b                   	pop    ebx
c0004de5:	5e                   	pop    esi
c0004de6:	c3                   	ret    

c0004de7 <st_clust.isra.1>:
c0004de7:	56                   	push   esi
c0004de8:	89 c6                	mov    esi,eax
c0004dea:	53                   	push   ebx
c0004deb:	89 d3                	mov    ebx,edx
c0004ded:	0f b7 d1             	movzx  edx,cx
c0004df0:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004df3:	e8 bd ce ff ff       	call   c0001cb5 <st_word>
c0004df8:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004dfb:	75 0f                	jne    c0004e0c <st_clust.isra.1+0x25>
c0004dfd:	c1 e9 10             	shr    ecx,0x10
c0004e00:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e03:	89 ca                	mov    edx,ecx
c0004e05:	5b                   	pop    ebx
c0004e06:	5e                   	pop    esi
c0004e07:	e9 a9 ce ff ff       	jmp    c0001cb5 <st_word>
c0004e0c:	5b                   	pop    ebx
c0004e0d:	5e                   	pop    esi
c0004e0e:	c3                   	ret    

c0004e0f <init_alloc_info.isra.2>:
c0004e0f:	56                   	push   esi
c0004e10:	53                   	push   ebx
c0004e11:	89 c6                	mov    esi,eax
c0004e13:	89 d3                	mov    ebx,edx
c0004e15:	51                   	push   ecx
c0004e16:	8b 00                	mov    eax,DWORD PTR [eax]
c0004e18:	83 c0 34             	add    eax,0x34
c0004e1b:	e8 30 ce ff ff       	call   c0001c50 <ld_dword>
c0004e20:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e23:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e25:	83 c0 38             	add    eax,0x38
c0004e28:	e8 3b ce ff ff       	call   c0001c68 <ld_qword>
c0004e2d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e30:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e33:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e35:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e38:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e3f:	83 e0 02             	and    eax,0x2
c0004e42:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e45:	5b                   	pop    ebx
c0004e46:	5b                   	pop    ebx
c0004e47:	5e                   	pop    esi
c0004e48:	c3                   	ret    

c0004e49 <follow_path>:
c0004e49:	56                   	push   esi
c0004e4a:	53                   	push   ebx
c0004e4b:	89 c3                	mov    ebx,eax
c0004e4d:	83 ec 14             	sub    esp,0x14
c0004e50:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e54:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e56:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e5a:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e5c:	80 fa 5c             	cmp    dl,0x5c
c0004e5f:	75 07                	jne    c0004e68 <follow_path+0x1f>
c0004e61:	40                   	inc    eax
c0004e62:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e66:	eb ee                	jmp    c0004e56 <follow_path+0xd>
c0004e68:	80 fa 2f             	cmp    dl,0x2f
c0004e6b:	74 f4                	je     c0004e61 <follow_path+0x18>
c0004e6d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e74:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e7b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e7e:	77 52                	ja     c0004ed2 <follow_path+0x89>
c0004e80:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004e84:	31 d2                	xor    edx,edx
c0004e86:	89 d8                	mov    eax,ebx
c0004e88:	e8 12 e3 ff ff       	call   c000319f <dir_sdi>
c0004e8d:	eb 7c                	jmp    c0004f0b <follow_path+0xc2>
c0004e8f:	89 d8                	mov    eax,ebx
c0004e91:	e8 6e f2 ff ff       	call   c0004104 <dir_find>
c0004e96:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004e99:	85 c0                	test   eax,eax
c0004e9b:	75 46                	jne    c0004ee3 <follow_path+0x9a>
c0004e9d:	80 e2 04             	and    dl,0x4
c0004ea0:	75 69                	jne    c0004f0b <follow_path+0xc2>
c0004ea2:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004ea6:	74 5e                	je     c0004f06 <follow_path+0xbd>
c0004ea8:	8a 06                	mov    al,BYTE PTR [esi]
c0004eaa:	3c 04                	cmp    al,0x4
c0004eac:	75 41                	jne    c0004eef <follow_path+0xa6>
c0004eae:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004eb1:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004eb5:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004eb8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004ebb:	30 c0                	xor    al,al
c0004ebd:	09 d0                	or     eax,edx
c0004ebf:	89 da                	mov    edx,ebx
c0004ec1:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ec4:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ec7:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004eca:	8d 46 10             	lea    eax,[esi+0x10]
c0004ecd:	e8 3d ff ff ff       	call   c0004e0f <init_alloc_info.isra.2>
c0004ed2:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004ed6:	89 d8                	mov    eax,ebx
c0004ed8:	e8 a9 ed ff ff       	call   c0003c86 <create_name>
c0004edd:	85 c0                	test   eax,eax
c0004edf:	74 ae                	je     c0004e8f <follow_path+0x46>
c0004ee1:	eb 28                	jmp    c0004f0b <follow_path+0xc2>
c0004ee3:	83 f8 04             	cmp    eax,0x4
c0004ee6:	75 23                	jne    c0004f0b <follow_path+0xc2>
c0004ee8:	80 e2 04             	and    dl,0x4
c0004eeb:	74 19                	je     c0004f06 <follow_path+0xbd>
c0004eed:	eb 1c                	jmp    c0004f0b <follow_path+0xc2>
c0004eef:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004ef2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004ef8:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004efc:	e8 bd fe ff ff       	call   c0004dbe <ld_clust.isra.0>
c0004f01:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f04:	eb cc                	jmp    c0004ed2 <follow_path+0x89>
c0004f06:	b8 05 00 00 00       	mov    eax,0x5
c0004f0b:	83 c4 14             	add    esp,0x14
c0004f0e:	5b                   	pop    ebx
c0004f0f:	5e                   	pop    esi
c0004f10:	c3                   	ret    

c0004f11 <f_mount>:
c0004f11:	53                   	push   ebx
c0004f12:	83 ec 18             	sub    esp,0x18
c0004f15:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004f19:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f1d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f21:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f25:	e8 fb d2 ff ff       	call   c0002225 <get_ldnumber>
c0004f2a:	89 c2                	mov    edx,eax
c0004f2c:	b8 0b 00 00 00       	mov    eax,0xb
c0004f31:	85 d2                	test   edx,edx
c0004f33:	78 39                	js     c0004f6e <f_mount+0x5d>
c0004f35:	8b 04 95 20 f2 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0de0]
c0004f3c:	85 c0                	test   eax,eax
c0004f3e:	74 03                	je     c0004f43 <f_mount+0x32>
c0004f40:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f47:	85 c0                	test   eax,eax
c0004f49:	74 03                	je     c0004f4e <f_mount+0x3d>
c0004f4b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f52:	89 04 95 20 f2 02 c0 	mov    DWORD PTR [edx*4-0x3ffd0de0],eax
c0004f59:	31 c0                	xor    eax,eax
c0004f5b:	84 db                	test   bl,bl
c0004f5d:	74 0f                	je     c0004f6e <f_mount+0x5d>
c0004f5f:	31 c9                	xor    ecx,ecx
c0004f61:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f65:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f69:	e8 65 d7 ff ff       	call   c00026d3 <mount_volume>
c0004f6e:	83 c4 18             	add    esp,0x18
c0004f71:	5b                   	pop    ebx
c0004f72:	c3                   	ret    

c0004f73 <f_open>:
c0004f73:	55                   	push   ebp
c0004f74:	bd 09 00 00 00       	mov    ebp,0x9
c0004f79:	57                   	push   edi
c0004f7a:	56                   	push   esi
c0004f7b:	53                   	push   ebx
c0004f7c:	83 ec 7c             	sub    esp,0x7c
c0004f7f:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004f86:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004f8d:	85 db                	test   ebx,ebx
c0004f8f:	0f 84 10 04 00 00    	je     c00053a5 <f_open+0x432>
c0004f95:	89 fe                	mov    esi,edi
c0004f97:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f9b:	83 e6 3f             	and    esi,0x3f
c0004f9e:	89 f0                	mov    eax,esi
c0004fa0:	0f b6 c8             	movzx  ecx,al
c0004fa3:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004faa:	e8 24 d7 ff ff       	call   c00026d3 <mount_volume>
c0004faf:	89 c5                	mov    ebp,eax
c0004fb1:	85 c0                	test   eax,eax
c0004fb3:	0f 85 e6 03 00 00    	jne    c000539f <f_open+0x42c>
c0004fb9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fbd:	bd 11 00 00 00       	mov    ebp,0x11
c0004fc2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fc6:	83 ec 0c             	sub    esp,0xc
c0004fc9:	68 60 04 00 00       	push   0x460
c0004fce:	e8 a3 34 00 00       	call   c0008476 <ff_memalloc>
c0004fd3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fd7:	83 c4 10             	add    esp,0x10
c0004fda:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004fdf:	0f 84 c0 03 00 00    	je     c00053a5 <f_open+0x432>
c0004fe5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fe9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004fed:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004ff3:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004ff6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004ff9:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0005000:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005004:	e8 40 fe ff ff       	call   c0004e49 <follow_path>
c0005009:	89 c5                	mov    ebp,eax
c000500b:	85 c0                	test   eax,eax
c000500d:	75 0c                	jne    c000501b <f_open+0xa8>
c000500f:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0005014:	79 05                	jns    c000501b <f_open+0xa8>
c0005016:	bd 06 00 00 00       	mov    ebp,0x6
c000501b:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0005021:	0f 84 84 01 00 00    	je     c00051ab <f_open+0x238>
c0005027:	85 ed                	test   ebp,ebp
c0005029:	74 20                	je     c000504b <f_open+0xd8>
c000502b:	83 fd 04             	cmp    ebp,0x4
c000502e:	0f 85 58 03 00 00    	jne    c000538c <f_open+0x419>
c0005034:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005038:	83 ce 08             	or     esi,0x8
c000503b:	e8 8a f2 ff ff       	call   c00042ca <dir_register>
c0005040:	89 c5                	mov    ebp,eax
c0005042:	85 c0                	test   eax,eax
c0005044:	74 2f                	je     c0005075 <f_open+0x102>
c0005046:	e9 41 03 00 00       	jmp    c000538c <f_open+0x419>
c000504b:	bd 07 00 00 00       	mov    ebp,0x7
c0005050:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005055:	0f 85 31 03 00 00    	jne    c000538c <f_open+0x419>
c000505b:	bd 08 00 00 00       	mov    ebp,0x8
c0005060:	f7 c7 04 00 00 00    	test   edi,0x4
c0005066:	0f 85 20 03 00 00    	jne    c000538c <f_open+0x419>
c000506c:	83 e7 08             	and    edi,0x8
c000506f:	0f 84 65 01 00 00    	je     c00051da <f_open+0x267>
c0005075:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005079:	8a 02                	mov    al,BYTE PTR [edx]
c000507b:	3c 04                	cmp    al,0x4
c000507d:	0f 85 97 00 00 00    	jne    c000511a <f_open+0x1a7>
c0005083:	8d 42 10             	lea    eax,[edx+0x10]
c0005086:	89 13                	mov    DWORD PTR [ebx],edx
c0005088:	89 da                	mov    edx,ebx
c000508a:	e8 80 fd ff ff       	call   c0004e0f <init_alloc_info.isra.2>
c000508f:	31 d2                	xor    edx,edx
c0005091:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005095:	b9 1e 00 00 00       	mov    ecx,0x1e
c000509a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000509d:	83 c0 02             	add    eax,0x2
c00050a0:	e8 32 cc ff ff       	call   c0001cd7 <mem_set>
c00050a5:	b9 1a 00 00 00       	mov    ecx,0x1a
c00050aa:	31 d2                	xor    edx,edx
c00050ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050b3:	83 c0 26             	add    eax,0x26
c00050b6:	e8 1c cc ff ff       	call   c0001cd7 <mem_set>
c00050bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050bf:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050c2:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050c6:	ba 00 00 21 50       	mov    edx,0x50210000
c00050cb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050ce:	83 c0 08             	add    eax,0x8
c00050d1:	e8 e3 cb ff ff       	call   c0001cb9 <st_dword>
c00050d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050da:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050dd:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050e1:	8d 44 24 24          	lea    eax,[esp+0x24]
c00050e5:	e8 b7 ea ff ff       	call   c0003ba1 <store_xdir>
c00050ea:	89 c5                	mov    ebp,eax
c00050ec:	85 c0                	test   eax,eax
c00050ee:	0f 85 98 02 00 00    	jne    c000538c <f_open+0x419>
c00050f4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050f7:	85 d2                	test   edx,edx
c00050f9:	0f 84 db 00 00 00    	je     c00051da <f_open+0x267>
c00050ff:	31 c9                	xor    ecx,ecx
c0005101:	89 d8                	mov    eax,ebx
c0005103:	e8 8e e3 ff ff       	call   c0003496 <remove_chain>
c0005108:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000510c:	89 c5                	mov    ebp,eax
c000510e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005111:	48                   	dec    eax
c0005112:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005115:	e9 b8 00 00 00       	jmp    c00051d2 <f_open+0x25f>
c000511a:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000511e:	89 ea                	mov    edx,ebp
c0005120:	e8 99 fc ff ff       	call   c0004dbe <ld_clust.isra.0>
c0005125:	ba 00 00 21 50       	mov    edx,0x50210000
c000512a:	89 c7                	mov    edi,eax
c000512c:	8d 45 0e             	lea    eax,[ebp+0xe]
c000512f:	e8 85 cb ff ff       	call   c0001cb9 <st_dword>
c0005134:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005138:	31 c9                	xor    ecx,ecx
c000513a:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c000513e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005142:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0005146:	e8 9c fc ff ff       	call   c0004de7 <st_clust.isra.1>
c000514b:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000514f:	31 d2                	xor    edx,edx
c0005151:	83 c0 1c             	add    eax,0x1c
c0005154:	e8 60 cb ff ff       	call   c0001cb9 <st_dword>
c0005159:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000515d:	85 ff                	test   edi,edi
c000515f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005163:	74 75                	je     c00051da <f_open+0x267>
c0005165:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005169:	31 c9                	xor    ecx,ecx
c000516b:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000516e:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005171:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005175:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005179:	89 fa                	mov    edx,edi
c000517b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000517f:	e8 12 e3 ff ff       	call   c0003496 <remove_chain>
c0005184:	89 c5                	mov    ebp,eax
c0005186:	85 c0                	test   eax,eax
c0005188:	0f 85 fe 01 00 00    	jne    c000538c <f_open+0x419>
c000518e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005192:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005196:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000519a:	4f                   	dec    edi
c000519b:	e8 81 d2 ff ff       	call   c0002421 <move_window>
c00051a0:	89 c5                	mov    ebp,eax
c00051a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051a6:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00051a9:	eb 27                	jmp    c00051d2 <f_open+0x25f>
c00051ab:	85 ed                	test   ebp,ebp
c00051ad:	0f 85 d9 01 00 00    	jne    c000538c <f_open+0x419>
c00051b3:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00051b7:	bd 04 00 00 00       	mov    ebp,0x4
c00051bc:	a8 10                	test   al,0x10
c00051be:	0f 85 c8 01 00 00    	jne    c000538c <f_open+0x419>
c00051c4:	83 e7 02             	and    edi,0x2
c00051c7:	74 11                	je     c00051da <f_open+0x267>
c00051c9:	bd 07 00 00 00       	mov    ebp,0x7
c00051ce:	a8 01                	test   al,0x1
c00051d0:	eb 02                	jmp    c00051d4 <f_open+0x261>
c00051d2:	85 ed                	test   ebp,ebp
c00051d4:	0f 85 b2 01 00 00    	jne    c000538c <f_open+0x419>
c00051da:	f7 c6 08 00 00 00    	test   esi,0x8
c00051e0:	74 03                	je     c00051e5 <f_open+0x272>
c00051e2:	83 ce 40             	or     esi,0x40
c00051e5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00051e9:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c00051ec:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c00051ef:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c00051f2:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c00051f5:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00051f9:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c00051fc:	8a 02                	mov    al,BYTE PTR [edx]
c00051fe:	3c 04                	cmp    al,0x4
c0005200:	75 2a                	jne    c000522c <f_open+0x2b9>
c0005202:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005206:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c000520b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000520e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005212:	30 c0                	xor    al,al
c0005214:	09 c8                	or     eax,ecx
c0005216:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005219:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000521d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005220:	8d 42 10             	lea    eax,[edx+0x10]
c0005223:	89 da                	mov    edx,ebx
c0005225:	e8 e5 fb ff ff       	call   c0004e0f <init_alloc_info.isra.2>
c000522a:	eb 1c                	jmp    c0005248 <f_open+0x2d5>
c000522c:	89 fa                	mov    edx,edi
c000522e:	e8 8b fb ff ff       	call   c0004dbe <ld_clust.isra.0>
c0005233:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005236:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005239:	e8 12 ca ff ff       	call   c0001c50 <ld_dword>
c000523e:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005245:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005248:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000524c:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005253:	89 03                	mov    DWORD PTR [ebx],eax
c0005255:	31 d2                	xor    edx,edx
c0005257:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000525b:	b9 00 02 00 00       	mov    ecx,0x200
c0005260:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005264:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005268:	89 f0                	mov    eax,esi
c000526a:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005271:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005274:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000527b:	8d 43 50             	lea    eax,[ebx+0x50]
c000527e:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005285:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000528c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005290:	e8 42 ca ff ff       	call   c0001cd7 <mem_set>
c0005295:	83 e6 20             	and    esi,0x20
c0005298:	75 07                	jne    c00052a1 <f_open+0x32e>
c000529a:	31 ed                	xor    ebp,ebp
c000529c:	e9 eb 00 00 00       	jmp    c000538c <f_open+0x419>
c00052a1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00052a4:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00052a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00052af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00052b3:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00052b7:	74 e1                	je     c000529a <f_open+0x327>
c00052b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052bd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052c1:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052c4:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052cb:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052ce:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052d2:	31 ff                	xor    edi,edi
c00052d4:	c1 e5 09             	shl    ebp,0x9
c00052d7:	89 ee                	mov    esi,ebp
c00052d9:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052dd:	89 f8                	mov    eax,edi
c00052df:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00052e3:	73 22                	jae    c0005307 <f_open+0x394>
c00052e5:	89 d8                	mov    eax,ebx
c00052e7:	e8 bd dc ff ff       	call   c0002fa9 <get_fat>
c00052ec:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00052f0:	89 c2                	mov    edx,eax
c00052f2:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00052f6:	83 f8 01             	cmp    eax,0x1
c00052f9:	76 10                	jbe    c000530b <f_open+0x398>
c00052fb:	83 f8 ff             	cmp    eax,0xffffffff
c00052fe:	75 d9                	jne    c00052d9 <f_open+0x366>
c0005300:	bd 01 00 00 00       	mov    ebp,0x1
c0005305:	eb 09                	jmp    c0005310 <f_open+0x39d>
c0005307:	31 ed                	xor    ebp,ebp
c0005309:	eb 05                	jmp    c0005310 <f_open+0x39d>
c000530b:	bd 02 00 00 00       	mov    ebp,0x2
c0005310:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005313:	85 ed                	test   ebp,ebp
c0005315:	75 75                	jne    c000538c <f_open+0x419>
c0005317:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000531b:	25 ff 01 00 00       	and    eax,0x1ff
c0005320:	0f 84 74 ff ff ff    	je     c000529a <f_open+0x327>
c0005326:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000532a:	bd 02 00 00 00       	mov    ebp,0x2
c000532f:	89 c8                	mov    eax,ecx
c0005331:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005335:	e8 a2 cb ff ff       	call   c0001edc <clst2sect>
c000533a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000533e:	89 d7                	mov    edi,edx
c0005340:	09 c7                	or     edi,eax
c0005342:	74 48                	je     c000538c <f_open+0x419>
c0005344:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005348:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000534c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005354:	0f ac fe 09          	shrd   esi,edi,0x9
c0005358:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000535c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005360:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005363:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005367:	83 ec 0c             	sub    esp,0xc
c000536a:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000536d:	6a 01                	push   0x1
c000536f:	52                   	push   edx
c0005370:	50                   	push   eax
c0005371:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005375:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005379:	50                   	push   eax
c000537a:	e8 79 c8 ff ff       	call   c0001bf8 <disk_read>
c000537f:	83 c4 20             	add    esp,0x20
c0005382:	85 c0                	test   eax,eax
c0005384:	0f 95 c0             	setne  al
c0005387:	0f b6 c0             	movzx  eax,al
c000538a:	89 c5                	mov    ebp,eax
c000538c:	83 ec 0c             	sub    esp,0xc
c000538f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005393:	e8 f4 30 00 00       	call   c000848c <ff_memfree>
c0005398:	83 c4 10             	add    esp,0x10
c000539b:	85 ed                	test   ebp,ebp
c000539d:	74 06                	je     c00053a5 <f_open+0x432>
c000539f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00053a5:	83 c4 7c             	add    esp,0x7c
c00053a8:	89 e8                	mov    eax,ebp
c00053aa:	5b                   	pop    ebx
c00053ab:	5e                   	pop    esi
c00053ac:	5f                   	pop    edi
c00053ad:	5d                   	pop    ebp
c00053ae:	c3                   	ret    

c00053af <f_read>:
c00053af:	55                   	push   ebp
c00053b0:	57                   	push   edi
c00053b1:	56                   	push   esi
c00053b2:	53                   	push   ebx
c00053b3:	83 ec 2c             	sub    esp,0x2c
c00053b6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053ba:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053be:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053c4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053c8:	89 d8                	mov    eax,ebx
c00053ca:	e8 77 cf ff ff       	call   c0002346 <validate>
c00053cf:	89 c5                	mov    ebp,eax
c00053d1:	85 c0                	test   eax,eax
c00053d3:	0f 85 4c 02 00 00    	jne    c0005625 <f_read+0x276>
c00053d9:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053dd:	85 ed                	test   ebp,ebp
c00053df:	0f 85 40 02 00 00    	jne    c0005625 <f_read+0x276>
c00053e5:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00053e9:	0f 84 31 02 00 00    	je     c0005620 <f_read+0x271>
c00053ef:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00053f2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00053f5:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00053f8:	bf 00 00 00 00       	mov    edi,0x0
c00053fd:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005400:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005404:	89 d1                	mov    ecx,edx
c0005406:	19 f9                	sbb    ecx,edi
c0005408:	0f 83 cf 00 00 00    	jae    c00054dd <f_read+0x12e>
c000540e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005412:	e9 c6 00 00 00       	jmp    c00054dd <f_read+0x12e>
c0005417:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000541a:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000541d:	89 d0                	mov    eax,edx
c000541f:	25 ff 01 00 00       	and    eax,0x1ff
c0005424:	0f 85 c9 01 00 00    	jne    c00055f3 <f_read+0x244>
c000542a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000542e:	89 d6                	mov    esi,edx
c0005430:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005434:	89 cf                	mov    edi,ecx
c0005436:	48                   	dec    eax
c0005437:	0f ac fe 09          	shrd   esi,edi,0x9
c000543b:	21 f0                	and    eax,esi
c000543d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005441:	0f 84 a6 00 00 00    	je     c00054ed <f_read+0x13e>
c0005447:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000544b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000544e:	89 c8                	mov    eax,ecx
c0005450:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005453:	e8 84 ca ff ff       	call   c0001edc <clst2sect>
c0005458:	89 d7                	mov    edi,edx
c000545a:	09 c7                	or     edi,eax
c000545c:	0f 84 b4 00 00 00    	je     c0005516 <f_read+0x167>
c0005462:	31 ff                	xor    edi,edi
c0005464:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005468:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000546b:	01 c6                	add    esi,eax
c000546d:	11 d7                	adc    edi,edx
c000546f:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005477:	0f 86 fd 00 00 00    	jbe    c000557a <f_read+0x1cb>
c000547d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005481:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005485:	c1 e8 09             	shr    eax,0x9
c0005488:	89 04 24             	mov    DWORD PTR [esp],eax
c000548b:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000548f:	03 14 24             	add    edx,DWORD PTR [esp]
c0005492:	39 c2                	cmp    edx,eax
c0005494:	76 07                	jbe    c000549d <f_read+0xee>
c0005496:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000549a:	89 04 24             	mov    DWORD PTR [esp],eax
c000549d:	83 ec 0c             	sub    esp,0xc
c00054a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00054a4:	57                   	push   edi
c00054a5:	56                   	push   esi
c00054a6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054aa:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054ae:	50                   	push   eax
c00054af:	e8 44 c7 ff ff       	call   c0001bf8 <disk_read>
c00054b4:	83 c4 20             	add    esp,0x20
c00054b7:	85 c0                	test   eax,eax
c00054b9:	75 6e                	jne    c0005529 <f_read+0x17a>
c00054bb:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054bf:	78 7e                	js     c000553f <f_read+0x190>
c00054c1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054c4:	c1 e6 09             	shl    esi,0x9
c00054c7:	31 ff                	xor    edi,edi
c00054c9:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054cd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054d1:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054d5:	01 30                	add    DWORD PTR [eax],esi
c00054d7:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054da:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054dd:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00054e2:	0f 85 2f ff ff ff    	jne    c0005417 <f_read+0x68>
c00054e8:	e9 38 01 00 00       	jmp    c0005625 <f_read+0x276>
c00054ed:	89 c8                	mov    eax,ecx
c00054ef:	09 d0                	or     eax,edx
c00054f1:	75 05                	jne    c00054f8 <f_read+0x149>
c00054f3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054f6:	eb 19                	jmp    c0005511 <f_read+0x162>
c00054f8:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00054fc:	74 09                	je     c0005507 <f_read+0x158>
c00054fe:	89 d8                	mov    eax,ebx
c0005500:	e8 f8 c9 ff ff       	call   c0001efd <clmt_clust>
c0005505:	eb 0a                	jmp    c0005511 <f_read+0x162>
c0005507:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000550a:	89 d8                	mov    eax,ebx
c000550c:	e8 98 da ff ff       	call   c0002fa9 <get_fat>
c0005511:	83 f8 01             	cmp    eax,0x1
c0005514:	77 0e                	ja     c0005524 <f_read+0x175>
c0005516:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000551a:	bd 02 00 00 00       	mov    ebp,0x2
c000551f:	e9 01 01 00 00       	jmp    c0005625 <f_read+0x276>
c0005524:	83 f8 ff             	cmp    eax,0xffffffff
c0005527:	75 0e                	jne    c0005537 <f_read+0x188>
c0005529:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000552d:	bd 01 00 00 00       	mov    ebp,0x1
c0005532:	e9 ee 00 00 00       	jmp    c0005625 <f_read+0x276>
c0005537:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000553a:	e9 08 ff ff ff       	jmp    c0005447 <f_read+0x98>
c000553f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005542:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005545:	29 f0                	sub    eax,esi
c0005547:	19 fa                	sbb    edx,edi
c0005549:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000554c:	89 d7                	mov    edi,edx
c000554e:	ba 00 00 00 00       	mov    edx,0x0
c0005553:	89 f9                	mov    ecx,edi
c0005555:	19 d1                	sbb    ecx,edx
c0005557:	0f 83 64 ff ff ff    	jae    c00054c1 <f_read+0x112>
c000555d:	89 c7                	mov    edi,eax
c000555f:	8d 53 50             	lea    edx,[ebx+0x50]
c0005562:	c1 e7 09             	shl    edi,0x9
c0005565:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005569:	b9 00 02 00 00       	mov    ecx,0x200
c000556e:	01 f8                	add    eax,edi
c0005570:	e8 4d c7 ff ff       	call   c0001cc2 <mem_cpy>
c0005575:	e9 47 ff ff ff       	jmp    c00054c1 <f_read+0x112>
c000557a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000557d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005580:	89 04 24             	mov    DWORD PTR [esp],eax
c0005583:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005587:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000558b:	75 05                	jne    c0005592 <f_read+0x1e3>
c000558d:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005590:	74 5b                	je     c00055ed <f_read+0x23e>
c0005592:	8d 43 50             	lea    eax,[ebx+0x50]
c0005595:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005599:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000559d:	79 2a                	jns    c00055c9 <f_read+0x21a>
c000559f:	83 ec 0c             	sub    esp,0xc
c00055a2:	6a 01                	push   0x1
c00055a4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055ac:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055b0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055b4:	50                   	push   eax
c00055b5:	e8 54 c6 ff ff       	call   c0001c0e <disk_write>
c00055ba:	83 c4 20             	add    esp,0x20
c00055bd:	85 c0                	test   eax,eax
c00055bf:	0f 85 64 ff ff ff    	jne    c0005529 <f_read+0x17a>
c00055c5:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055c9:	83 ec 0c             	sub    esp,0xc
c00055cc:	6a 01                	push   0x1
c00055ce:	57                   	push   edi
c00055cf:	56                   	push   esi
c00055d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055d4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055d8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055dc:	50                   	push   eax
c00055dd:	e8 16 c6 ff ff       	call   c0001bf8 <disk_read>
c00055e2:	83 c4 20             	add    esp,0x20
c00055e5:	85 c0                	test   eax,eax
c00055e7:	0f 85 3c ff ff ff    	jne    c0005529 <f_read+0x17a>
c00055ed:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055f0:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055f3:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055f6:	ba 00 02 00 00       	mov    edx,0x200
c00055fb:	25 ff 01 00 00       	and    eax,0x1ff
c0005600:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005604:	29 c2                	sub    edx,eax
c0005606:	39 d6                	cmp    esi,edx
c0005608:	76 02                	jbe    c000560c <f_read+0x25d>
c000560a:	89 d6                	mov    esi,edx
c000560c:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005610:	89 f1                	mov    ecx,esi
c0005612:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005616:	e8 a7 c6 ff ff       	call   c0001cc2 <mem_cpy>
c000561b:	e9 a7 fe ff ff       	jmp    c00054c7 <f_read+0x118>
c0005620:	bd 07 00 00 00       	mov    ebp,0x7
c0005625:	83 c4 2c             	add    esp,0x2c
c0005628:	89 e8                	mov    eax,ebp
c000562a:	5b                   	pop    ebx
c000562b:	5e                   	pop    esi
c000562c:	5f                   	pop    edi
c000562d:	5d                   	pop    ebp
c000562e:	c3                   	ret    

c000562f <f_write>:
c000562f:	55                   	push   ebp
c0005630:	57                   	push   edi
c0005631:	56                   	push   esi
c0005632:	53                   	push   ebx
c0005633:	83 ec 2c             	sub    esp,0x2c
c0005636:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000563a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000563e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005644:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005648:	89 d8                	mov    eax,ebx
c000564a:	e8 f7 cc ff ff       	call   c0002346 <validate>
c000564f:	89 c5                	mov    ebp,eax
c0005651:	85 c0                	test   eax,eax
c0005653:	0f 85 86 02 00 00    	jne    c00058df <f_write+0x2b0>
c0005659:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000565d:	85 ed                	test   ebp,ebp
c000565f:	0f 85 7a 02 00 00    	jne    c00058df <f_write+0x2b0>
c0005665:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005669:	0f 84 6b 02 00 00    	je     c00058da <f_write+0x2ab>
c000566f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005673:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005676:	0f 84 43 01 00 00    	je     c00057bf <f_write+0x190>
c000567c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000567f:	89 c1                	mov    ecx,eax
c0005681:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005685:	0f 83 34 01 00 00    	jae    c00057bf <f_write+0x190>
c000568b:	f7 d0                	not    eax
c000568d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005691:	e9 29 01 00 00       	jmp    c00057bf <f_write+0x190>
c0005696:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005699:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000569c:	89 d0                	mov    eax,edx
c000569e:	25 ff 01 00 00       	and    eax,0x1ff
c00056a3:	0f 85 00 02 00 00    	jne    c00058a9 <f_write+0x27a>
c00056a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056ad:	89 d6                	mov    esi,edx
c00056af:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00056b3:	89 cf                	mov    edi,ecx
c00056b5:	48                   	dec    eax
c00056b6:	0f ac fe 09          	shrd   esi,edi,0x9
c00056ba:	21 f0                	and    eax,esi
c00056bc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056c0:	0f 84 06 01 00 00    	je     c00057cc <f_write+0x19d>
c00056c6:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056ca:	0f 88 6e 01 00 00    	js     c000583e <f_write+0x20f>
c00056d0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056d4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056d7:	89 c8                	mov    eax,ecx
c00056d9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056dd:	e8 fa c7 ff ff       	call   c0001edc <clst2sect>
c00056e2:	89 d1                	mov    ecx,edx
c00056e4:	09 c1                	or     ecx,eax
c00056e6:	0f 84 1c 01 00 00    	je     c0005808 <f_write+0x1d9>
c00056ec:	31 ff                	xor    edi,edi
c00056ee:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00056f2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00056f6:	01 c6                	add    esi,eax
c00056f8:	11 d7                	adc    edi,edx
c00056fa:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005702:	0f 86 63 01 00 00    	jbe    c000586b <f_write+0x23c>
c0005708:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000570c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005710:	c1 e8 09             	shr    eax,0x9
c0005713:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005717:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000571b:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000571f:	39 c2                	cmp    edx,eax
c0005721:	76 08                	jbe    c000572b <f_write+0xfc>
c0005723:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005727:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000572b:	83 ec 0c             	sub    esp,0xc
c000572e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005732:	57                   	push   edi
c0005733:	56                   	push   esi
c0005734:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005738:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000573c:	50                   	push   eax
c000573d:	e8 cc c4 ff ff       	call   c0001c0e <disk_write>
c0005742:	83 c4 20             	add    esp,0x20
c0005745:	85 c0                	test   eax,eax
c0005747:	0f 85 ce 00 00 00    	jne    c000581b <f_write+0x1ec>
c000574d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005750:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005753:	29 f0                	sub    eax,esi
c0005755:	19 fa                	sbb    edx,edi
c0005757:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000575b:	89 d7                	mov    edi,edx
c000575d:	ba 00 00 00 00       	mov    edx,0x0
c0005762:	89 f9                	mov    ecx,edi
c0005764:	19 d1                	sbb    ecx,edx
c0005766:	73 1c                	jae    c0005784 <f_write+0x155>
c0005768:	89 c7                	mov    edi,eax
c000576a:	b9 00 02 00 00       	mov    ecx,0x200
c000576f:	c1 e7 09             	shl    edi,0x9
c0005772:	8d 43 50             	lea    eax,[ebx+0x50]
c0005775:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005779:	89 fa                	mov    edx,edi
c000577b:	e8 42 c5 ff ff       	call   c0001cc2 <mem_cpy>
c0005780:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005784:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005788:	c1 e6 09             	shl    esi,0x9
c000578b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000578f:	31 ff                	xor    edi,edi
c0005791:	01 30                	add    DWORD PTR [eax],esi
c0005793:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0005797:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000579b:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000579e:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00057a1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00057a4:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00057a7:	89 c1                	mov    ecx,eax
c00057a9:	39 f2                	cmp    edx,esi
c00057ab:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00057ae:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00057b1:	19 f9                	sbb    ecx,edi
c00057b3:	73 04                	jae    c00057b9 <f_write+0x18a>
c00057b5:	89 f2                	mov    edx,esi
c00057b7:	89 f8                	mov    eax,edi
c00057b9:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057bc:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057bf:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057c4:	0f 85 cc fe ff ff    	jne    c0005696 <f_write+0x67>
c00057ca:	eb 2e                	jmp    c00057fa <f_write+0x1cb>
c00057cc:	89 c8                	mov    eax,ecx
c00057ce:	09 d0                	or     eax,edx
c00057d0:	75 0b                	jne    c00057dd <f_write+0x1ae>
c00057d2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057d5:	31 d2                	xor    edx,edx
c00057d7:	85 c0                	test   eax,eax
c00057d9:	75 28                	jne    c0005803 <f_write+0x1d4>
c00057db:	eb 12                	jmp    c00057ef <f_write+0x1c0>
c00057dd:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057e1:	74 09                	je     c00057ec <f_write+0x1bd>
c00057e3:	89 d8                	mov    eax,ebx
c00057e5:	e8 13 c7 ff ff       	call   c0001efd <clmt_clust>
c00057ea:	eb 0a                	jmp    c00057f6 <f_write+0x1c7>
c00057ec:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00057ef:	89 d8                	mov    eax,ebx
c00057f1:	e8 a1 da ff ff       	call   c0003297 <create_chain>
c00057f6:	85 c0                	test   eax,eax
c00057f8:	75 09                	jne    c0005803 <f_write+0x1d4>
c00057fa:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00057fe:	e9 dc 00 00 00       	jmp    c00058df <f_write+0x2b0>
c0005803:	83 f8 01             	cmp    eax,0x1
c0005806:	75 0e                	jne    c0005816 <f_write+0x1e7>
c0005808:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000580c:	bd 02 00 00 00       	mov    ebp,0x2
c0005811:	e9 c9 00 00 00       	jmp    c00058df <f_write+0x2b0>
c0005816:	83 f8 ff             	cmp    eax,0xffffffff
c0005819:	75 0e                	jne    c0005829 <f_write+0x1fa>
c000581b:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000581f:	bd 01 00 00 00       	mov    ebp,0x1
c0005824:	e9 b6 00 00 00       	jmp    c00058df <f_write+0x2b0>
c0005829:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000582c:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005830:	0f 85 90 fe ff ff    	jne    c00056c6 <f_write+0x97>
c0005836:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005839:	e9 88 fe ff ff       	jmp    c00056c6 <f_write+0x97>
c000583e:	83 ec 0c             	sub    esp,0xc
c0005841:	8d 43 50             	lea    eax,[ebx+0x50]
c0005844:	6a 01                	push   0x1
c0005846:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005849:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000584c:	50                   	push   eax
c000584d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005851:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005855:	50                   	push   eax
c0005856:	e8 b3 c3 ff ff       	call   c0001c0e <disk_write>
c000585b:	83 c4 20             	add    esp,0x20
c000585e:	85 c0                	test   eax,eax
c0005860:	75 b9                	jne    c000581b <f_write+0x1ec>
c0005862:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005866:	e9 65 fe ff ff       	jmp    c00056d0 <f_write+0xa1>
c000586b:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000586e:	75 05                	jne    c0005875 <f_write+0x246>
c0005870:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005873:	74 2e                	je     c00058a3 <f_write+0x274>
c0005875:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005878:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000587b:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000587e:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005881:	73 20                	jae    c00058a3 <f_write+0x274>
c0005883:	83 ec 0c             	sub    esp,0xc
c0005886:	8d 43 50             	lea    eax,[ebx+0x50]
c0005889:	6a 01                	push   0x1
c000588b:	57                   	push   edi
c000588c:	56                   	push   esi
c000588d:	50                   	push   eax
c000588e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005892:	50                   	push   eax
c0005893:	e8 60 c3 ff ff       	call   c0001bf8 <disk_read>
c0005898:	83 c4 20             	add    esp,0x20
c000589b:	85 c0                	test   eax,eax
c000589d:	0f 85 78 ff ff ff    	jne    c000581b <f_write+0x1ec>
c00058a3:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00058a6:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00058a9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00058ac:	ba 00 02 00 00       	mov    edx,0x200
c00058b1:	25 ff 01 00 00       	and    eax,0x1ff
c00058b6:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00058ba:	29 c2                	sub    edx,eax
c00058bc:	39 d6                	cmp    esi,edx
c00058be:	76 02                	jbe    c00058c2 <f_write+0x293>
c00058c0:	89 d6                	mov    esi,edx
c00058c2:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058c6:	89 f1                	mov    ecx,esi
c00058c8:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058cc:	e8 f1 c3 ff ff       	call   c0001cc2 <mem_cpy>
c00058d1:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058d5:	e9 b1 fe ff ff       	jmp    c000578b <f_write+0x15c>
c00058da:	bd 07 00 00 00       	mov    ebp,0x7
c00058df:	83 c4 2c             	add    esp,0x2c
c00058e2:	89 e8                	mov    eax,ebp
c00058e4:	5b                   	pop    ebx
c00058e5:	5e                   	pop    esi
c00058e6:	5f                   	pop    edi
c00058e7:	5d                   	pop    ebp
c00058e8:	c3                   	ret    

c00058e9 <f_sync>:
c00058e9:	56                   	push   esi
c00058ea:	53                   	push   ebx
c00058eb:	83 ec 64             	sub    esp,0x64
c00058ee:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00058f2:	8d 54 24 10          	lea    edx,[esp+0x10]
c00058f6:	89 d8                	mov    eax,ebx
c00058f8:	e8 49 ca ff ff       	call   c0002346 <validate>
c00058fd:	85 c0                	test   eax,eax
c00058ff:	0f 85 ba 01 00 00    	jne    c0005abf <f_sync+0x1d6>
c0005905:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005908:	f6 c2 40             	test   dl,0x40
c000590b:	0f 84 ae 01 00 00    	je     c0005abf <f_sync+0x1d6>
c0005911:	84 d2                	test   dl,dl
c0005913:	79 33                	jns    c0005948 <f_sync+0x5f>
c0005915:	83 ec 0c             	sub    esp,0xc
c0005918:	8d 43 50             	lea    eax,[ebx+0x50]
c000591b:	6a 01                	push   0x1
c000591d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005920:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005923:	50                   	push   eax
c0005924:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005928:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000592c:	50                   	push   eax
c000592d:	e8 dc c2 ff ff       	call   c0001c0e <disk_write>
c0005932:	83 c4 20             	add    esp,0x20
c0005935:	89 c2                	mov    edx,eax
c0005937:	b8 01 00 00 00       	mov    eax,0x1
c000593c:	85 d2                	test   edx,edx
c000593e:	0f 85 7b 01 00 00    	jne    c0005abf <f_sync+0x1d6>
c0005944:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000594c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000594f:	0f 85 11 01 00 00    	jne    c0005a66 <f_sync+0x17d>
c0005955:	89 d8                	mov    eax,ebx
c0005957:	e8 13 d6 ff ff       	call   c0002f6f <fill_first_frag>
c000595c:	85 c0                	test   eax,eax
c000595e:	0f 85 5b 01 00 00    	jne    c0005abf <f_sync+0x1d6>
c0005964:	83 c9 ff             	or     ecx,0xffffffff
c0005967:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000596a:	89 d8                	mov    eax,ebx
c000596c:	e8 c9 d5 ff ff       	call   c0002f3a <fill_last_frag>
c0005971:	85 c0                	test   eax,eax
c0005973:	0f 85 46 01 00 00    	jne    c0005abf <f_sync+0x1d6>
c0005979:	83 ec 0c             	sub    esp,0xc
c000597c:	68 60 04 00 00       	push   0x460
c0005981:	e8 f0 2a 00 00       	call   c0008476 <ff_memalloc>
c0005986:	83 c4 10             	add    esp,0x10
c0005989:	89 c6                	mov    esi,eax
c000598b:	b8 11 00 00 00       	mov    eax,0x11
c0005990:	85 f6                	test   esi,esi
c0005992:	0f 84 27 01 00 00    	je     c0005abf <f_sync+0x1d6>
c0005998:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000599c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00059a2:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00059a5:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00059a8:	89 da                	mov    edx,ebx
c00059aa:	8d 44 24 14          	lea    eax,[esp+0x14]
c00059ae:	e8 af df ff ff       	call   c0003962 <load_obj_xdir>
c00059b3:	85 c0                	test   eax,eax
c00059b5:	0f 85 95 00 00 00    	jne    c0005a50 <f_sync+0x167>
c00059bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059bf:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059c2:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059c6:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059c9:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059cc:	83 ca 01             	or     edx,0x1
c00059cf:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059d2:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059d5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059d8:	83 c0 34             	add    eax,0x34
c00059db:	e8 d9 c2 ff ff       	call   c0001cb9 <st_dword>
c00059e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059e4:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059e7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059ea:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059ed:	83 c0 38             	add    eax,0x38
c00059f0:	e8 c7 c2 ff ff       	call   c0001cbc <st_qword>
c00059f5:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059fc:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059ff:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a02:	83 c0 28             	add    eax,0x28
c0005a05:	e8 b2 c2 ff ff       	call   c0001cbc <st_qword>
c0005a0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a0e:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a13:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a16:	83 c0 0c             	add    eax,0xc
c0005a19:	e8 9b c2 ff ff       	call   c0001cb9 <st_dword>
c0005a1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a22:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a25:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a29:	31 d2                	xor    edx,edx
c0005a2b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a2e:	83 c0 10             	add    eax,0x10
c0005a31:	e8 83 c2 ff ff       	call   c0001cb9 <st_dword>
c0005a36:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a3a:	e8 62 e1 ff ff       	call   c0003ba1 <store_xdir>
c0005a3f:	85 c0                	test   eax,eax
c0005a41:	75 0d                	jne    c0005a50 <f_sync+0x167>
c0005a43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a47:	e8 00 eb ff ff       	call   c000454c <sync_fs>
c0005a4c:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a50:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a54:	83 ec 0c             	sub    esp,0xc
c0005a57:	56                   	push   esi
c0005a58:	e8 2f 2a 00 00       	call   c000848c <ff_memfree>
c0005a5d:	83 c4 10             	add    esp,0x10
c0005a60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a64:	eb 59                	jmp    c0005abf <f_sync+0x1d6>
c0005a66:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a69:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a6c:	e8 b0 c9 ff ff       	call   c0002421 <move_window>
c0005a71:	85 c0                	test   eax,eax
c0005a73:	75 4a                	jne    c0005abf <f_sync+0x1d6>
c0005a75:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a78:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a7c:	89 f2                	mov    edx,esi
c0005a7e:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a81:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005a83:	e8 5f f3 ff ff       	call   c0004de7 <st_clust.isra.1>
c0005a88:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a8b:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005a8e:	e8 26 c2 ff ff       	call   c0001cb9 <st_dword>
c0005a93:	8d 46 16             	lea    eax,[esi+0x16]
c0005a96:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a9b:	e8 19 c2 ff ff       	call   c0001cb9 <st_dword>
c0005aa0:	8d 46 12             	lea    eax,[esi+0x12]
c0005aa3:	31 d2                	xor    edx,edx
c0005aa5:	e8 0b c2 ff ff       	call   c0001cb5 <st_word>
c0005aaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005aae:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005ab2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ab6:	e8 91 ea ff ff       	call   c000454c <sync_fs>
c0005abb:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005abf:	83 c4 64             	add    esp,0x64
c0005ac2:	5b                   	pop    ebx
c0005ac3:	5e                   	pop    esi
c0005ac4:	c3                   	ret    

c0005ac5 <f_close>:
c0005ac5:	53                   	push   ebx
c0005ac6:	83 ec 24             	sub    esp,0x24
c0005ac9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005acd:	53                   	push   ebx
c0005ace:	e8 16 fe ff ff       	call   c00058e9 <f_sync>
c0005ad3:	83 c4 10             	add    esp,0x10
c0005ad6:	85 c0                	test   eax,eax
c0005ad8:	75 15                	jne    c0005aef <f_close+0x2a>
c0005ada:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005ade:	89 d8                	mov    eax,ebx
c0005ae0:	e8 61 c8 ff ff       	call   c0002346 <validate>
c0005ae5:	85 c0                	test   eax,eax
c0005ae7:	75 06                	jne    c0005aef <f_close+0x2a>
c0005ae9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005aef:	83 c4 18             	add    esp,0x18
c0005af2:	5b                   	pop    ebx
c0005af3:	c3                   	ret    

c0005af4 <f_lseek>:
c0005af4:	55                   	push   ebp
c0005af5:	57                   	push   edi
c0005af6:	56                   	push   esi
c0005af7:	53                   	push   ebx
c0005af8:	83 ec 3c             	sub    esp,0x3c
c0005afb:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005aff:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005b03:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005b07:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b0a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005b0e:	89 d8                	mov    eax,ebx
c0005b10:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005b14:	e8 2d c8 ff ff       	call   c0002346 <validate>
c0005b19:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b1d:	85 c0                	test   eax,eax
c0005b1f:	0f 85 7a 04 00 00    	jne    c0005f9f <f_lseek+0x4ab>
c0005b25:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b29:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b2d:	85 c0                	test   eax,eax
c0005b2f:	0f 85 6a 04 00 00    	jne    c0005f9f <f_lseek+0x4ab>
c0005b35:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b39:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b3c:	74 0c                	je     c0005b4a <f_lseek+0x56>
c0005b3e:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b41:	85 c0                	test   eax,eax
c0005b43:	75 1f                	jne    c0005b64 <f_lseek+0x70>
c0005b45:	e9 b5 01 00 00       	jmp    c0005cff <f_lseek+0x20b>
c0005b4a:	83 c9 ff             	or     ecx,0xffffffff
c0005b4d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b50:	89 d8                	mov    eax,ebx
c0005b52:	e8 e3 d3 ff ff       	call   c0002f3a <fill_last_frag>
c0005b57:	85 c0                	test   eax,eax
c0005b59:	74 e3                	je     c0005b3e <f_lseek+0x4a>
c0005b5b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b5f:	e9 3b 04 00 00       	jmp    c0005f9f <f_lseek+0x4ab>
c0005b64:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b69:	0f 85 ac 00 00 00    	jne    c0005c1b <f_lseek+0x127>
c0005b6f:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b73:	0f 85 a2 00 00 00    	jne    c0005c1b <f_lseek+0x127>
c0005b79:	8d 78 04             	lea    edi,[eax+0x4]
c0005b7c:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b7f:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b81:	be 02 00 00 00       	mov    esi,0x2
c0005b86:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b8a:	85 ed                	test   ebp,ebp
c0005b8c:	74 73                	je     c0005c01 <f_lseek+0x10d>
c0005b8e:	89 e9                	mov    ecx,ebp
c0005b90:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005b97:	ff 04 24             	inc    DWORD PTR [esp]
c0005b9a:	89 ca                	mov    edx,ecx
c0005b9c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005ba0:	89 d8                	mov    eax,ebx
c0005ba2:	e8 02 d4 ff ff       	call   c0002fa9 <get_fat>
c0005ba7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bab:	83 f8 01             	cmp    eax,0x1
c0005bae:	77 11                	ja     c0005bc1 <f_lseek+0xcd>
c0005bb0:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005bb4:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005bbc:	e9 de 03 00 00       	jmp    c0005f9f <f_lseek+0x4ab>
c0005bc1:	83 f8 ff             	cmp    eax,0xffffffff
c0005bc4:	75 11                	jne    c0005bd7 <f_lseek+0xe3>
c0005bc6:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005bca:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bd2:	e9 c8 03 00 00       	jmp    c0005f9f <f_lseek+0x4ab>
c0005bd7:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bda:	89 c1                	mov    ecx,eax
c0005bdc:	39 c2                	cmp    edx,eax
c0005bde:	74 b7                	je     c0005b97 <f_lseek+0xa3>
c0005be0:	83 c6 02             	add    esi,0x2
c0005be3:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005be7:	72 0b                	jb     c0005bf4 <f_lseek+0x100>
c0005be9:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005bec:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005bef:	89 0f                	mov    DWORD PTR [edi],ecx
c0005bf1:	83 c7 08             	add    edi,0x8
c0005bf4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bf8:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bfb:	76 04                	jbe    c0005c01 <f_lseek+0x10d>
c0005bfd:	89 c5                	mov    ebp,eax
c0005bff:	eb 8d                	jmp    c0005b8e <f_lseek+0x9a>
c0005c01:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005c04:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005c08:	89 30                	mov    DWORD PTR [eax],esi
c0005c0a:	0f 87 87 03 00 00    	ja     c0005f97 <f_lseek+0x4a3>
c0005c10:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005c16:	e9 84 03 00 00       	jmp    c0005f9f <f_lseek+0x4ab>
c0005c1b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c1e:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c21:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c25:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c29:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c2d:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c34:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c38:	73 0f                	jae    c0005c49 <f_lseek+0x155>
c0005c3a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c3d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c41:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c45:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c49:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c4d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c51:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c54:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c57:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c5b:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c5f:	0f 84 3a 03 00 00    	je     c0005f9f <f_lseek+0x4ab>
c0005c65:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c69:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c6d:	83 c6 ff             	add    esi,0xffffffff
c0005c70:	89 d8                	mov    eax,ebx
c0005c72:	83 d7 ff             	adc    edi,0xffffffff
c0005c75:	89 f2                	mov    edx,esi
c0005c77:	89 f9                	mov    ecx,edi
c0005c79:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c7d:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c80:	e8 78 c2 ff ff       	call   c0001efd <clmt_clust>
c0005c85:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c89:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c8c:	89 c2                	mov    edx,eax
c0005c8e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005c92:	89 c8                	mov    eax,ecx
c0005c94:	e8 43 c2 ff ff       	call   c0001edc <clst2sect>
c0005c99:	89 d7                	mov    edi,edx
c0005c9b:	09 c7                	or     edi,eax
c0005c9d:	0f 84 0d ff ff ff    	je     c0005bb0 <f_lseek+0xbc>
c0005ca3:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005ca7:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005cad:	0f 84 ec 02 00 00    	je     c0005f9f <f_lseek+0x4ab>
c0005cb3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cb7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005cbb:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cbe:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005cc2:	0f ac fe 09          	shrd   esi,edi,0x9
c0005cc6:	4d                   	dec    ebp
c0005cc7:	31 ff                	xor    edi,edi
c0005cc9:	21 ee                	and    esi,ebp
c0005ccb:	01 c6                	add    esi,eax
c0005ccd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cd0:	11 d7                	adc    edi,edx
c0005cd2:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cd5:	39 fa                	cmp    edx,edi
c0005cd7:	75 08                	jne    c0005ce1 <f_lseek+0x1ed>
c0005cd9:	39 f0                	cmp    eax,esi
c0005cdb:	0f 84 be 02 00 00    	je     c0005f9f <f_lseek+0x4ab>
c0005ce1:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005ce4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ce8:	0f 89 80 02 00 00    	jns    c0005f6e <f_lseek+0x47a>
c0005cee:	83 ec 0c             	sub    esp,0xc
c0005cf1:	6a 01                	push   0x1
c0005cf3:	52                   	push   edx
c0005cf4:	50                   	push   eax
c0005cf5:	55                   	push   ebp
c0005cf6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005cfa:	e9 5a 02 00 00       	jmp    c0005f59 <f_lseek+0x465>
c0005cff:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005d03:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005d06:	74 16                	je     c0005d1e <f_lseek+0x22a>
c0005d08:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005d0d:	76 0f                	jbe    c0005d1e <f_lseek+0x22a>
c0005d0f:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005d16:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d1e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d21:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d24:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d27:	89 c7                	mov    edi,eax
c0005d29:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d2d:	73 0d                	jae    c0005d3c <f_lseek+0x248>
c0005d2f:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d33:	75 07                	jne    c0005d3c <f_lseek+0x248>
c0005d35:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d38:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d3c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d3f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d42:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d46:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d4d:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d54:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d57:	75 09                	jne    c0005d62 <f_lseek+0x26e>
c0005d59:	31 f6                	xor    esi,esi
c0005d5b:	31 ff                	xor    edi,edi
c0005d5d:	e9 af 01 00 00       	jmp    c0005f11 <f_lseek+0x41d>
c0005d62:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d66:	89 d7                	mov    edi,edx
c0005d68:	c1 e1 09             	shl    ecx,0x9
c0005d6b:	09 c7                	or     edi,eax
c0005d6d:	89 cd                	mov    ebp,ecx
c0005d6f:	74 6d                	je     c0005dde <f_lseek+0x2ea>
c0005d71:	83 c0 ff             	add    eax,0xffffffff
c0005d74:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d78:	83 d2 ff             	adc    edx,0xffffffff
c0005d7b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005d82:	83 c0 ff             	add    eax,0xffffffff
c0005d85:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005d89:	83 d2 ff             	adc    edx,0xffffffff
c0005d8c:	31 ff                	xor    edi,edi
c0005d8e:	57                   	push   edi
c0005d8f:	51                   	push   ecx
c0005d90:	52                   	push   edx
c0005d91:	50                   	push   eax
c0005d92:	e8 4d 18 02 00       	call   c00275e4 <__udivdi3>
c0005d97:	83 c4 10             	add    esp,0x10
c0005d9a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005d9e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005da2:	57                   	push   edi
c0005da3:	55                   	push   ebp
c0005da4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005da8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dac:	e8 33 18 02 00       	call   c00275e4 <__udivdi3>
c0005db1:	83 c4 10             	add    esp,0x10
c0005db4:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005db8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dbc:	19 d1                	sbb    ecx,edx
c0005dbe:	72 1e                	jb     c0005dde <f_lseek+0x2ea>
c0005dc0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005dc4:	89 e9                	mov    ecx,ebp
c0005dc6:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005dc9:	f7 d9                	neg    ecx
c0005dcb:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005dce:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005dd2:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005dd5:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005dd8:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005ddc:	eb 28                	jmp    c0005e06 <f_lseek+0x312>
c0005dde:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005de1:	85 c0                	test   eax,eax
c0005de3:	75 1e                	jne    c0005e03 <f_lseek+0x30f>
c0005de5:	31 d2                	xor    edx,edx
c0005de7:	89 d8                	mov    eax,ebx
c0005de9:	e8 a9 d4 ff ff       	call   c0003297 <create_chain>
c0005dee:	83 f8 01             	cmp    eax,0x1
c0005df1:	0f 84 b9 fd ff ff    	je     c0005bb0 <f_lseek+0xbc>
c0005df7:	83 f8 ff             	cmp    eax,0xffffffff
c0005dfa:	0f 84 c6 fd ff ff    	je     c0005bc6 <f_lseek+0xd2>
c0005e00:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e03:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e06:	85 c0                	test   eax,eax
c0005e08:	0f 84 4b ff ff ff    	je     c0005d59 <f_lseek+0x265>
c0005e0e:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005e12:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005e1a:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e1d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e21:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e24:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e27:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e2b:	0f 83 9d 00 00 00    	jae    c0005ece <f_lseek+0x3da>
c0005e31:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e35:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e39:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e3c:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e40:	01 f2                	add    edx,esi
c0005e42:	11 f9                	adc    ecx,edi
c0005e44:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e48:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e4c:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e4f:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e52:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e55:	f6 c1 02             	test   cl,0x2
c0005e58:	74 35                	je     c0005e8f <f_lseek+0x39b>
c0005e5a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e5e:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e61:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e64:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e68:	73 16                	jae    c0005e80 <f_lseek+0x38c>
c0005e6a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e6e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e72:	88 ca                	mov    dl,cl
c0005e74:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e77:	83 ca 40             	or     edx,0x40
c0005e7a:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e7d:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e80:	89 c2                	mov    edx,eax
c0005e82:	89 d8                	mov    eax,ebx
c0005e84:	e8 0e d4 ff ff       	call   c0003297 <create_chain>
c0005e89:	85 c0                	test   eax,eax
c0005e8b:	75 0b                	jne    c0005e98 <f_lseek+0x3a4>
c0005e8d:	eb 30                	jmp    c0005ebf <f_lseek+0x3cb>
c0005e8f:	89 c2                	mov    edx,eax
c0005e91:	89 d8                	mov    eax,ebx
c0005e93:	e8 11 d1 ff ff       	call   c0002fa9 <get_fat>
c0005e98:	83 f8 ff             	cmp    eax,0xffffffff
c0005e9b:	0f 84 25 fd ff ff    	je     c0005bc6 <f_lseek+0xd2>
c0005ea1:	83 f8 01             	cmp    eax,0x1
c0005ea4:	0f 86 06 fd ff ff    	jbe    c0005bb0 <f_lseek+0xbc>
c0005eaa:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005eae:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005eb1:	0f 86 f9 fc ff ff    	jbe    c0005bb0 <f_lseek+0xbc>
c0005eb7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005eba:	e9 5b ff ff ff       	jmp    c0005e1a <f_lseek+0x326>
c0005ebf:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005ec6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005ece:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005ed1:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ed5:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ed8:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005edb:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005ede:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ee4:	0f 84 6f fe ff ff    	je     c0005d59 <f_lseek+0x265>
c0005eea:	89 c2                	mov    edx,eax
c0005eec:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005ef0:	e8 e7 bf ff ff       	call   c0001edc <clst2sect>
c0005ef5:	89 d7                	mov    edi,edx
c0005ef7:	09 c7                	or     edi,eax
c0005ef9:	0f 84 b1 fc ff ff    	je     c0005bb0 <f_lseek+0xbc>
c0005eff:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005f03:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005f06:	0f ac fe 09          	shrd   esi,edi,0x9
c0005f0a:	c1 ef 09             	shr    edi,0x9
c0005f0d:	01 c6                	add    esi,eax
c0005f0f:	11 d7                	adc    edi,edx
c0005f11:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005f14:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005f17:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005f1a:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f1d:	19 d1                	sbb    ecx,edx
c0005f1f:	73 0a                	jae    c0005f2b <f_lseek+0x437>
c0005f21:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f24:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f27:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f2b:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f30:	74 6d                	je     c0005f9f <f_lseek+0x4ab>
c0005f32:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f35:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f38:	39 fa                	cmp    edx,edi
c0005f3a:	75 04                	jne    c0005f40 <f_lseek+0x44c>
c0005f3c:	39 f0                	cmp    eax,esi
c0005f3e:	74 5f                	je     c0005f9f <f_lseek+0x4ab>
c0005f40:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f43:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f47:	79 25                	jns    c0005f6e <f_lseek+0x47a>
c0005f49:	83 ec 0c             	sub    esp,0xc
c0005f4c:	6a 01                	push   0x1
c0005f4e:	52                   	push   edx
c0005f4f:	50                   	push   eax
c0005f50:	55                   	push   ebp
c0005f51:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f55:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f59:	50                   	push   eax
c0005f5a:	e8 af bc ff ff       	call   c0001c0e <disk_write>
c0005f5f:	83 c4 20             	add    esp,0x20
c0005f62:	85 c0                	test   eax,eax
c0005f64:	0f 85 5c fc ff ff    	jne    c0005bc6 <f_lseek+0xd2>
c0005f6a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f6e:	83 ec 0c             	sub    esp,0xc
c0005f71:	6a 01                	push   0x1
c0005f73:	57                   	push   edi
c0005f74:	56                   	push   esi
c0005f75:	55                   	push   ebp
c0005f76:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f7a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f7e:	50                   	push   eax
c0005f7f:	e8 74 bc ff ff       	call   c0001bf8 <disk_read>
c0005f84:	83 c4 20             	add    esp,0x20
c0005f87:	85 c0                	test   eax,eax
c0005f89:	0f 85 37 fc ff ff    	jne    c0005bc6 <f_lseek+0xd2>
c0005f8f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005f92:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005f95:	eb 08                	jmp    c0005f9f <f_lseek+0x4ab>
c0005f97:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005f9f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005fa3:	83 c4 3c             	add    esp,0x3c
c0005fa6:	5b                   	pop    ebx
c0005fa7:	5e                   	pop    esi
c0005fa8:	5f                   	pop    edi
c0005fa9:	5d                   	pop    ebp
c0005faa:	c3                   	ret    

c0005fab <f_opendir>:
c0005fab:	56                   	push   esi
c0005fac:	b8 09 00 00 00       	mov    eax,0x9
c0005fb1:	53                   	push   ebx
c0005fb2:	83 ec 24             	sub    esp,0x24
c0005fb5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005fb9:	85 db                	test   ebx,ebx
c0005fbb:	0f 84 e6 00 00 00    	je     c00060a7 <f_opendir+0xfc>
c0005fc1:	31 c9                	xor    ecx,ecx
c0005fc3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fc7:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005fcb:	e8 03 c7 ff ff       	call   c00026d3 <mount_volume>
c0005fd0:	85 c0                	test   eax,eax
c0005fd2:	0f 85 c9 00 00 00    	jne    c00060a1 <f_opendir+0xf6>
c0005fd8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fdc:	83 ec 0c             	sub    esp,0xc
c0005fdf:	89 03                	mov    DWORD PTR [ebx],eax
c0005fe1:	68 60 04 00 00       	push   0x460
c0005fe6:	e8 8b 24 00 00       	call   c0008476 <ff_memalloc>
c0005feb:	83 c4 10             	add    esp,0x10
c0005fee:	89 c6                	mov    esi,eax
c0005ff0:	b8 11 00 00 00       	mov    eax,0x11
c0005ff5:	85 f6                	test   esi,esi
c0005ff7:	0f 84 aa 00 00 00    	je     c00060a7 <f_opendir+0xfc>
c0005ffd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006001:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006007:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000600a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000600d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0006011:	89 d8                	mov    eax,ebx
c0006013:	e8 31 ee ff ff       	call   c0004e49 <follow_path>
c0006018:	85 c0                	test   eax,eax
c000601a:	75 61                	jne    c000607d <f_opendir+0xd2>
c000601c:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0006020:	78 46                	js     c0006068 <f_opendir+0xbd>
c0006022:	b8 05 00 00 00       	mov    eax,0x5
c0006027:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000602b:	74 50                	je     c000607d <f_opendir+0xd2>
c000602d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006031:	8a 01                	mov    al,BYTE PTR [ecx]
c0006033:	3c 04                	cmp    al,0x4
c0006035:	75 26                	jne    c000605d <f_opendir+0xb2>
c0006037:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000603a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000603d:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0006040:	30 d2                	xor    dl,dl
c0006042:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0006046:	09 c2                	or     edx,eax
c0006048:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c000604b:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000604e:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0006051:	89 da                	mov    edx,ebx
c0006053:	8d 41 10             	lea    eax,[ecx+0x10]
c0006056:	e8 b4 ed ff ff       	call   c0004e0f <init_alloc_info.isra.2>
c000605b:	eb 0b                	jmp    c0006068 <f_opendir+0xbd>
c000605d:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0006060:	e8 59 ed ff ff       	call   c0004dbe <ld_clust.isra.0>
c0006065:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0006068:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000606c:	31 d2                	xor    edx,edx
c000606e:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006072:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0006076:	89 d8                	mov    eax,ebx
c0006078:	e8 22 d1 ff ff       	call   c000319f <dir_sdi>
c000607d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006081:	83 ec 0c             	sub    esp,0xc
c0006084:	56                   	push   esi
c0006085:	e8 02 24 00 00       	call   c000848c <ff_memfree>
c000608a:	83 c4 10             	add    esp,0x10
c000608d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006091:	83 f8 04             	cmp    eax,0x4
c0006094:	74 06                	je     c000609c <f_opendir+0xf1>
c0006096:	85 c0                	test   eax,eax
c0006098:	74 0d                	je     c00060a7 <f_opendir+0xfc>
c000609a:	eb 05                	jmp    c00060a1 <f_opendir+0xf6>
c000609c:	b8 05 00 00 00       	mov    eax,0x5
c00060a1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060a7:	83 c4 24             	add    esp,0x24
c00060aa:	5b                   	pop    ebx
c00060ab:	5e                   	pop    esi
c00060ac:	c3                   	ret    

c00060ad <f_closedir>:
c00060ad:	53                   	push   ebx
c00060ae:	83 ec 18             	sub    esp,0x18
c00060b1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00060b5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00060b9:	89 d8                	mov    eax,ebx
c00060bb:	e8 86 c2 ff ff       	call   c0002346 <validate>
c00060c0:	85 c0                	test   eax,eax
c00060c2:	75 06                	jne    c00060ca <f_closedir+0x1d>
c00060c4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060ca:	83 c4 18             	add    esp,0x18
c00060cd:	5b                   	pop    ebx
c00060ce:	c3                   	ret    

c00060cf <f_readdir>:
c00060cf:	57                   	push   edi
c00060d0:	56                   	push   esi
c00060d1:	53                   	push   ebx
c00060d2:	83 ec 20             	sub    esp,0x20
c00060d5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060d9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060dd:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060e1:	89 d8                	mov    eax,ebx
c00060e3:	e8 5e c2 ff ff       	call   c0002346 <validate>
c00060e8:	85 c0                	test   eax,eax
c00060ea:	75 77                	jne    c0006163 <f_readdir+0x94>
c00060ec:	85 ff                	test   edi,edi
c00060ee:	75 0b                	jne    c00060fb <f_readdir+0x2c>
c00060f0:	31 d2                	xor    edx,edx
c00060f2:	89 d8                	mov    eax,ebx
c00060f4:	e8 a6 d0 ff ff       	call   c000319f <dir_sdi>
c00060f9:	eb 68                	jmp    c0006163 <f_readdir+0x94>
c00060fb:	83 ec 0c             	sub    esp,0xc
c00060fe:	68 60 04 00 00       	push   0x460
c0006103:	e8 6e 23 00 00       	call   c0008476 <ff_memalloc>
c0006108:	83 c4 10             	add    esp,0x10
c000610b:	89 c6                	mov    esi,eax
c000610d:	b8 11 00 00 00       	mov    eax,0x11
c0006112:	85 f6                	test   esi,esi
c0006114:	74 4d                	je     c0006163 <f_readdir+0x94>
c0006116:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000611a:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006120:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006123:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006126:	31 d2                	xor    edx,edx
c0006128:	89 d8                	mov    eax,ebx
c000612a:	e8 80 d8 ff ff       	call   c00039af <dir_read>
c000612f:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006134:	75 19                	jne    c000614f <f_readdir+0x80>
c0006136:	89 fa                	mov    edx,edi
c0006138:	89 d8                	mov    eax,ebx
c000613a:	e8 7e ea ff ff       	call   c0004bbd <get_fileinfo>
c000613f:	31 d2                	xor    edx,edx
c0006141:	89 d8                	mov    eax,ebx
c0006143:	e8 af d5 ff ff       	call   c00036f7 <dir_next>
c0006148:	83 f8 04             	cmp    eax,0x4
c000614b:	75 02                	jne    c000614f <f_readdir+0x80>
c000614d:	31 c0                	xor    eax,eax
c000614f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006153:	83 ec 0c             	sub    esp,0xc
c0006156:	56                   	push   esi
c0006157:	e8 30 23 00 00       	call   c000848c <ff_memfree>
c000615c:	83 c4 10             	add    esp,0x10
c000615f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006163:	83 c4 20             	add    esp,0x20
c0006166:	5b                   	pop    ebx
c0006167:	5e                   	pop    esi
c0006168:	5f                   	pop    edi
c0006169:	c3                   	ret    

c000616a <f_stat>:
c000616a:	57                   	push   edi
c000616b:	31 c9                	xor    ecx,ecx
c000616d:	56                   	push   esi
c000616e:	53                   	push   ebx
c000616f:	83 ec 50             	sub    esp,0x50
c0006172:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0006176:	8d 54 24 04          	lea    edx,[esp+0x4]
c000617a:	8d 44 24 60          	lea    eax,[esp+0x60]
c000617e:	e8 50 c5 ff ff       	call   c00026d3 <mount_volume>
c0006183:	89 c3                	mov    ebx,eax
c0006185:	85 c0                	test   eax,eax
c0006187:	75 67                	jne    c00061f0 <f_stat+0x86>
c0006189:	83 ec 0c             	sub    esp,0xc
c000618c:	bb 11 00 00 00       	mov    ebx,0x11
c0006191:	68 60 04 00 00       	push   0x460
c0006196:	e8 db 22 00 00       	call   c0008476 <ff_memalloc>
c000619b:	83 c4 10             	add    esp,0x10
c000619e:	89 c6                	mov    esi,eax
c00061a0:	85 c0                	test   eax,eax
c00061a2:	74 4c                	je     c00061f0 <f_stat+0x86>
c00061a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061a8:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00061ae:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00061b1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00061b4:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00061b8:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061bc:	e8 88 ec ff ff       	call   c0004e49 <follow_path>
c00061c1:	89 c3                	mov    ebx,eax
c00061c3:	85 c0                	test   eax,eax
c00061c5:	75 1d                	jne    c00061e4 <f_stat+0x7a>
c00061c7:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061cc:	78 11                	js     c00061df <f_stat+0x75>
c00061ce:	85 ff                	test   edi,edi
c00061d0:	74 12                	je     c00061e4 <f_stat+0x7a>
c00061d2:	89 fa                	mov    edx,edi
c00061d4:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061d8:	e8 e0 e9 ff ff       	call   c0004bbd <get_fileinfo>
c00061dd:	eb 05                	jmp    c00061e4 <f_stat+0x7a>
c00061df:	bb 06 00 00 00       	mov    ebx,0x6
c00061e4:	83 ec 0c             	sub    esp,0xc
c00061e7:	56                   	push   esi
c00061e8:	e8 9f 22 00 00       	call   c000848c <ff_memfree>
c00061ed:	83 c4 10             	add    esp,0x10
c00061f0:	83 c4 50             	add    esp,0x50
c00061f3:	89 d8                	mov    eax,ebx
c00061f5:	5b                   	pop    ebx
c00061f6:	5e                   	pop    esi
c00061f7:	5f                   	pop    edi
c00061f8:	c3                   	ret    

c00061f9 <f_getfree>:
c00061f9:	55                   	push   ebp
c00061fa:	31 c9                	xor    ecx,ecx
c00061fc:	57                   	push   edi
c00061fd:	56                   	push   esi
c00061fe:	53                   	push   ebx
c00061ff:	83 ec 5c             	sub    esp,0x5c
c0006202:	8d 54 24 24          	lea    edx,[esp+0x24]
c0006206:	8d 44 24 70          	lea    eax,[esp+0x70]
c000620a:	e8 c4 c4 ff ff       	call   c00026d3 <mount_volume>
c000620f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006213:	85 c0                	test   eax,eax
c0006215:	0f 85 9d 01 00 00    	jne    c00063b8 <f_getfree+0x1bf>
c000621b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000621f:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006223:	89 02                	mov    DWORD PTR [edx],eax
c0006225:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006228:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000622b:	8d 71 fe             	lea    esi,[ecx-0x2]
c000622e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006232:	39 f2                	cmp    edx,esi
c0006234:	77 0b                	ja     c0006241 <f_getfree+0x48>
c0006236:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000623a:	89 10                	mov    DWORD PTR [eax],edx
c000623c:	e9 77 01 00 00       	jmp    c00063b8 <f_getfree+0x1bf>
c0006241:	8a 10                	mov    dl,BYTE PTR [eax]
c0006243:	80 fa 01             	cmp    dl,0x1
c0006246:	75 3a                	jne    c0006282 <f_getfree+0x89>
c0006248:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000624c:	be 02 00 00 00       	mov    esi,0x2
c0006251:	31 db                	xor    ebx,ebx
c0006253:	89 f2                	mov    edx,esi
c0006255:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006259:	e8 4b cd ff ff       	call   c0002fa9 <get_fat>
c000625e:	83 f8 ff             	cmp    eax,0xffffffff
c0006261:	0f 84 28 01 00 00    	je     c000638f <f_getfree+0x196>
c0006267:	83 f8 01             	cmp    eax,0x1
c000626a:	0f 84 29 01 00 00    	je     c0006399 <f_getfree+0x1a0>
c0006270:	83 d3 00             	adc    ebx,0x0
c0006273:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006277:	46                   	inc    esi
c0006278:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000627b:	77 d6                	ja     c0006253 <f_getfree+0x5a>
c000627d:	e9 25 01 00 00       	jmp    c00063a7 <f_getfree+0x1ae>
c0006282:	80 fa 04             	cmp    dl,0x4
c0006285:	0f 85 88 00 00 00    	jne    c0006313 <f_getfree+0x11a>
c000628b:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c000628e:	31 ed                	xor    ebp,ebp
c0006290:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006293:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006297:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000629b:	31 db                	xor    ebx,ebx
c000629d:	85 ed                	test   ebp,ebp
c000629f:	75 3f                	jne    c00062e0 <f_getfree+0xe7>
c00062a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062a5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00062a9:	83 c0 01             	add    eax,0x1
c00062ac:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00062b0:	83 d2 00             	adc    edx,0x0
c00062b3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00062b7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00062bb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062bf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062c3:	e8 59 c1 ff ff       	call   c0002421 <move_window>
c00062c8:	85 c0                	test   eax,eax
c00062ca:	0f 85 d3 00 00 00    	jne    c00063a3 <f_getfree+0x1aa>
c00062d0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062d4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062dc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062e0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062e4:	8d 4e f8             	lea    ecx,[esi-0x8]
c00062e7:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00062eb:	89 cf                	mov    edi,ecx
c00062ed:	85 f6                	test   esi,esi
c00062ef:	74 12                	je     c0006303 <f_getfree+0x10a>
c00062f1:	88 c1                	mov    cl,al
c00062f3:	83 e1 01             	and    ecx,0x1
c00062f6:	80 f9 01             	cmp    cl,0x1
c00062f9:	83 d3 00             	adc    ebx,0x0
c00062fc:	d0 e8                	shr    al,1
c00062fe:	4e                   	dec    esi
c00062ff:	39 fe                	cmp    esi,edi
c0006301:	75 ea                	jne    c00062ed <f_getfree+0xf4>
c0006303:	45                   	inc    ebp
c0006304:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000630a:	85 f6                	test   esi,esi
c000630c:	75 8f                	jne    c000629d <f_getfree+0xa4>
c000630e:	e9 94 00 00 00       	jmp    c00063a7 <f_getfree+0x1ae>
c0006313:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006316:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006319:	31 f6                	xor    esi,esi
c000631b:	31 db                	xor    ebx,ebx
c000631d:	85 f6                	test   esi,esi
c000631f:	75 1b                	jne    c000633c <f_getfree+0x143>
c0006321:	89 d7                	mov    edi,edx
c0006323:	89 cd                	mov    ebp,ecx
c0006325:	83 c7 01             	add    edi,0x1
c0006328:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000632c:	83 d5 00             	adc    ebp,0x0
c000632f:	e8 ed c0 ff ff       	call   c0002421 <move_window>
c0006334:	85 c0                	test   eax,eax
c0006336:	75 6b                	jne    c00063a3 <f_getfree+0x1aa>
c0006338:	89 fa                	mov    edx,edi
c000633a:	89 e9                	mov    ecx,ebp
c000633c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006340:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006344:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006348:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000634b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000634f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006353:	75 11                	jne    c0006366 <f_getfree+0x16d>
c0006355:	e8 e9 b8 ff ff       	call   c0001c43 <ld_word>
c000635a:	66 83 f8 01          	cmp    ax,0x1
c000635e:	83 d3 00             	adc    ebx,0x0
c0006361:	83 c6 02             	add    esi,0x2
c0006364:	eb 13                	jmp    c0006379 <f_getfree+0x180>
c0006366:	e8 e5 b8 ff ff       	call   c0001c50 <ld_dword>
c000636b:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006370:	83 f8 01             	cmp    eax,0x1
c0006373:	83 d3 00             	adc    ebx,0x0
c0006376:	83 c6 04             	add    esi,0x4
c0006379:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000637f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006383:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006387:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000638b:	75 90                	jne    c000631d <f_getfree+0x124>
c000638d:	eb 18                	jmp    c00063a7 <f_getfree+0x1ae>
c000638f:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0006397:	eb 0e                	jmp    c00063a7 <f_getfree+0x1ae>
c0006399:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00063a1:	eb 04                	jmp    c00063a7 <f_getfree+0x1ae>
c00063a3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063a7:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00063ab:	89 18                	mov    DWORD PTR [eax],ebx
c00063ad:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00063b1:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00063b4:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00063b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063bc:	83 c4 5c             	add    esp,0x5c
c00063bf:	5b                   	pop    ebx
c00063c0:	5e                   	pop    esi
c00063c1:	5f                   	pop    edi
c00063c2:	5d                   	pop    ebp
c00063c3:	c3                   	ret    

c00063c4 <f_truncate>:
c00063c4:	56                   	push   esi
c00063c5:	53                   	push   ebx
c00063c6:	83 ec 14             	sub    esp,0x14
c00063c9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063cd:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063d1:	89 d8                	mov    eax,ebx
c00063d3:	e8 6e bf ff ff       	call   c0002346 <validate>
c00063d8:	89 c6                	mov    esi,eax
c00063da:	85 c0                	test   eax,eax
c00063dc:	0f 85 d2 00 00 00    	jne    c00064b4 <f_truncate+0xf0>
c00063e2:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00063e6:	85 f6                	test   esi,esi
c00063e8:	0f 85 c6 00 00 00    	jne    c00064b4 <f_truncate+0xf0>
c00063ee:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00063f2:	0f 84 b7 00 00 00    	je     c00064af <f_truncate+0xeb>
c00063f8:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00063fb:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00063fe:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006401:	89 d1                	mov    ecx,edx
c0006403:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006406:	0f 83 a8 00 00 00    	jae    c00064b4 <f_truncate+0xf0>
c000640c:	09 c2                	or     edx,eax
c000640e:	75 15                	jne    c0006425 <f_truncate+0x61>
c0006410:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006413:	31 c9                	xor    ecx,ecx
c0006415:	89 d8                	mov    eax,ebx
c0006417:	e8 7a d0 ff ff       	call   c0003496 <remove_chain>
c000641c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006423:	eb 35                	jmp    c000645a <f_truncate+0x96>
c0006425:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006428:	89 d8                	mov    eax,ebx
c000642a:	e8 7a cb ff ff       	call   c0002fa9 <get_fat>
c000642f:	89 c2                	mov    edx,eax
c0006431:	b8 01 00 00 00       	mov    eax,0x1
c0006436:	83 fa ff             	cmp    edx,0xffffffff
c0006439:	74 1f                	je     c000645a <f_truncate+0x96>
c000643b:	b8 02 00 00 00       	mov    eax,0x2
c0006440:	83 fa 01             	cmp    edx,0x1
c0006443:	74 15                	je     c000645a <f_truncate+0x96>
c0006445:	31 c0                	xor    eax,eax
c0006447:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000644b:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000644e:	76 0a                	jbe    c000645a <f_truncate+0x96>
c0006450:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006453:	89 d8                	mov    eax,ebx
c0006455:	e8 3c d0 ff ff       	call   c0003496 <remove_chain>
c000645a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000645d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006460:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006463:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006466:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006469:	83 ca 40             	or     edx,0x40
c000646c:	85 c0                	test   eax,eax
c000646e:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006471:	75 35                	jne    c00064a8 <f_truncate+0xe4>
c0006473:	84 d2                	test   dl,dl
c0006475:	79 3d                	jns    c00064b4 <f_truncate+0xf0>
c0006477:	83 ec 0c             	sub    esp,0xc
c000647a:	8d 43 50             	lea    eax,[ebx+0x50]
c000647d:	6a 01                	push   0x1
c000647f:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006482:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006485:	50                   	push   eax
c0006486:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000648a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000648e:	50                   	push   eax
c000648f:	e8 7a b7 ff ff       	call   c0001c0e <disk_write>
c0006494:	83 c4 20             	add    esp,0x20
c0006497:	85 c0                	test   eax,eax
c0006499:	75 08                	jne    c00064a3 <f_truncate+0xdf>
c000649b:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000649f:	31 f6                	xor    esi,esi
c00064a1:	eb 11                	jmp    c00064b4 <f_truncate+0xf0>
c00064a3:	b8 01 00 00 00       	mov    eax,0x1
c00064a8:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00064ab:	89 c6                	mov    esi,eax
c00064ad:	eb 05                	jmp    c00064b4 <f_truncate+0xf0>
c00064af:	be 07 00 00 00       	mov    esi,0x7
c00064b4:	89 f0                	mov    eax,esi
c00064b6:	83 c4 14             	add    esp,0x14
c00064b9:	5b                   	pop    ebx
c00064ba:	5e                   	pop    esi
c00064bb:	c3                   	ret    

c00064bc <f_unlink>:
c00064bc:	56                   	push   esi
c00064bd:	b9 02 00 00 00       	mov    ecx,0x2
c00064c2:	53                   	push   ebx
c00064c3:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064c9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064cd:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064d4:	e8 fa c1 ff ff       	call   c00026d3 <mount_volume>
c00064d9:	85 c0                	test   eax,eax
c00064db:	0f 85 55 01 00 00    	jne    c0006636 <f_unlink+0x17a>
c00064e1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064e5:	83 ec 0c             	sub    esp,0xc
c00064e8:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00064ec:	68 60 04 00 00       	push   0x460
c00064f1:	e8 80 1f 00 00       	call   c0008476 <ff_memalloc>
c00064f6:	83 c4 10             	add    esp,0x10
c00064f9:	89 c3                	mov    ebx,eax
c00064fb:	b8 11 00 00 00       	mov    eax,0x11
c0006500:	85 db                	test   ebx,ebx
c0006502:	0f 84 2e 01 00 00    	je     c0006636 <f_unlink+0x17a>
c0006508:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000650c:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006512:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006515:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006518:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000651f:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006523:	e8 21 e9 ff ff       	call   c0004e49 <follow_path>
c0006528:	85 c0                	test   eax,eax
c000652a:	0f 85 f2 00 00 00    	jne    c0006622 <f_unlink+0x166>
c0006530:	b8 06 00 00 00       	mov    eax,0x6
c0006535:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000653d:	0f 88 df 00 00 00    	js     c0006622 <f_unlink+0x166>
c0006543:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006548:	74 0a                	je     c0006554 <f_unlink+0x98>
c000654a:	b8 07 00 00 00       	mov    eax,0x7
c000654f:	e9 ce 00 00 00       	jmp    c0006622 <f_unlink+0x166>
c0006554:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006558:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000655c:	8a 02                	mov    al,BYTE PTR [edx]
c000655e:	3c 04                	cmp    al,0x4
c0006560:	75 12                	jne    c0006574 <f_unlink+0xb8>
c0006562:	8d 42 10             	lea    eax,[edx+0x10]
c0006565:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006569:	e8 a1 e8 ff ff       	call   c0004e0f <init_alloc_info.isra.2>
c000656e:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006572:	eb 0e                	jmp    c0006582 <f_unlink+0xc6>
c0006574:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000657b:	e8 3e e8 ff ff       	call   c0004dbe <ld_clust.isra.0>
c0006580:	89 c6                	mov    esi,eax
c0006582:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c0006587:	75 12                	jne    c000659b <f_unlink+0xdf>
c0006589:	8d 44 24 48          	lea    eax,[esp+0x48]
c000658d:	e8 94 d6 ff ff       	call   c0003c26 <dir_remove>
c0006592:	85 c0                	test   eax,eax
c0006594:	74 6c                	je     c0006602 <f_unlink+0x146>
c0006596:	e9 87 00 00 00       	jmp    c0006622 <f_unlink+0x166>
c000659b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000659f:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00065a6:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00065ad:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065b0:	75 21                	jne    c00065d3 <f_unlink+0x117>
c00065b2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00065b6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00065ba:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065c1:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065c8:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065cc:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065d3:	31 d2                	xor    edx,edx
c00065d5:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065dc:	e8 be cb ff ff       	call   c000319f <dir_sdi>
c00065e1:	85 c0                	test   eax,eax
c00065e3:	75 3d                	jne    c0006622 <f_unlink+0x166>
c00065e5:	31 d2                	xor    edx,edx
c00065e7:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065ee:	e8 bc d3 ff ff       	call   c00039af <dir_read>
c00065f3:	85 c0                	test   eax,eax
c00065f5:	0f 84 4f ff ff ff    	je     c000654a <f_unlink+0x8e>
c00065fb:	83 f8 04             	cmp    eax,0x4
c00065fe:	75 22                	jne    c0006622 <f_unlink+0x166>
c0006600:	eb 87                	jmp    c0006589 <f_unlink+0xcd>
c0006602:	85 f6                	test   esi,esi
c0006604:	75 0b                	jne    c0006611 <f_unlink+0x155>
c0006606:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000660a:	e8 3d df ff ff       	call   c000454c <sync_fs>
c000660f:	eb 11                	jmp    c0006622 <f_unlink+0x166>
c0006611:	31 c9                	xor    ecx,ecx
c0006613:	89 f2                	mov    edx,esi
c0006615:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006619:	e8 78 ce ff ff       	call   c0003496 <remove_chain>
c000661e:	85 c0                	test   eax,eax
c0006620:	74 e4                	je     c0006606 <f_unlink+0x14a>
c0006622:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006626:	83 ec 0c             	sub    esp,0xc
c0006629:	53                   	push   ebx
c000662a:	e8 5d 1e 00 00       	call   c000848c <ff_memfree>
c000662f:	83 c4 10             	add    esp,0x10
c0006632:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006636:	81 c4 e4 00 00 00    	add    esp,0xe4
c000663c:	5b                   	pop    ebx
c000663d:	5e                   	pop    esi
c000663e:	c3                   	ret    

c000663f <f_mkdir>:
c000663f:	57                   	push   edi
c0006640:	b9 02 00 00 00       	mov    ecx,0x2
c0006645:	56                   	push   esi
c0006646:	53                   	push   ebx
c0006647:	83 c4 80             	add    esp,0xffffff80
c000664a:	8d 54 24 08          	lea    edx,[esp+0x8]
c000664e:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006655:	e8 79 c0 ff ff       	call   c00026d3 <mount_volume>
c000665a:	89 c3                	mov    ebx,eax
c000665c:	85 c0                	test   eax,eax
c000665e:	0f 85 fe 01 00 00    	jne    c0006862 <f_mkdir+0x223>
c0006664:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006668:	bb 11 00 00 00       	mov    ebx,0x11
c000666d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006671:	83 ec 0c             	sub    esp,0xc
c0006674:	68 60 04 00 00       	push   0x460
c0006679:	e8 f8 1d 00 00       	call   c0008476 <ff_memalloc>
c000667e:	83 c4 10             	add    esp,0x10
c0006681:	89 c7                	mov    edi,eax
c0006683:	85 c0                	test   eax,eax
c0006685:	0f 84 d7 01 00 00    	je     c0006862 <f_mkdir+0x223>
c000668b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000668f:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006695:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0006698:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000669b:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00066a2:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066a6:	e8 9e e7 ff ff       	call   c0004e49 <follow_path>
c00066ab:	89 c3                	mov    ebx,eax
c00066ad:	85 c0                	test   eax,eax
c00066af:	74 3e                	je     c00066ef <f_mkdir+0xb0>
c00066b1:	83 f8 04             	cmp    eax,0x4
c00066b4:	75 3e                	jne    c00066f4 <f_mkdir+0xb5>
c00066b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066ba:	31 d2                	xor    edx,edx
c00066bc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066c0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066c4:	e8 ce cb ff ff       	call   c0003297 <create_chain>
c00066c9:	89 c6                	mov    esi,eax
c00066cb:	85 c0                	test   eax,eax
c00066cd:	74 0c                	je     c00066db <f_mkdir+0x9c>
c00066cf:	bb 02 00 00 00       	mov    ebx,0x2
c00066d4:	83 f8 01             	cmp    eax,0x1
c00066d7:	74 07                	je     c00066e0 <f_mkdir+0xa1>
c00066d9:	eb 2a                	jmp    c0006705 <f_mkdir+0xc6>
c00066db:	bb 07 00 00 00       	mov    ebx,0x7
c00066e0:	31 c9                	xor    ecx,ecx
c00066e2:	89 f2                	mov    edx,esi
c00066e4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066e8:	e8 a9 cd ff ff       	call   c0003496 <remove_chain>
c00066ed:	eb 05                	jmp    c00066f4 <f_mkdir+0xb5>
c00066ef:	bb 08 00 00 00       	mov    ebx,0x8
c00066f4:	83 ec 0c             	sub    esp,0xc
c00066f7:	57                   	push   edi
c00066f8:	e8 8f 1d 00 00       	call   c000848c <ff_memfree>
c00066fd:	83 c4 10             	add    esp,0x10
c0006700:	e9 5d 01 00 00       	jmp    c0006862 <f_mkdir+0x223>
c0006705:	bb 01 00 00 00       	mov    ebx,0x1
c000670a:	83 f8 ff             	cmp    eax,0xffffffff
c000670d:	74 d1                	je     c00066e0 <f_mkdir+0xa1>
c000670f:	89 f2                	mov    edx,esi
c0006711:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006715:	e8 c4 ce ff ff       	call   c00035de <dir_clear>
c000671a:	89 c3                	mov    ebx,eax
c000671c:	85 c0                	test   eax,eax
c000671e:	75 c0                	jne    c00066e0 <f_mkdir+0xa1>
c0006720:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006724:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006727:	74 69                	je     c0006792 <f_mkdir+0x153>
c0006729:	b9 0b 00 00 00       	mov    ecx,0xb
c000672e:	83 c0 54             	add    eax,0x54
c0006731:	ba 20 00 00 00       	mov    edx,0x20
c0006736:	e8 9c b5 ff ff       	call   c0001cd7 <mem_set>
c000673b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000673f:	ba 00 00 21 50       	mov    edx,0x50210000
c0006744:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006748:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000674c:	83 c0 6a             	add    eax,0x6a
c000674f:	e8 65 b5 ff ff       	call   c0001cb9 <st_dword>
c0006754:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006758:	89 f1                	mov    ecx,esi
c000675a:	8d 50 54             	lea    edx,[eax+0x54]
c000675d:	e8 85 e6 ff ff       	call   c0004de7 <st_clust.isra.1>
c0006762:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006766:	b9 20 00 00 00       	mov    ecx,0x20
c000676b:	8d 50 54             	lea    edx,[eax+0x54]
c000676e:	83 c0 74             	add    eax,0x74
c0006771:	e8 4c b5 ff ff       	call   c0001cc2 <mem_cpy>
c0006776:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000677a:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000677e:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006782:	8d 50 74             	lea    edx,[eax+0x74]
c0006785:	e8 5d e6 ff ff       	call   c0004de7 <st_clust.isra.1>
c000678a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000678e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006792:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006796:	e8 2f db ff ff       	call   c00042ca <dir_register>
c000679b:	89 c3                	mov    ebx,eax
c000679d:	85 c0                	test   eax,eax
c000679f:	0f 85 3b ff ff ff    	jne    c00066e0 <f_mkdir+0xa1>
c00067a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a9:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00067ac:	75 74                	jne    c0006822 <f_mkdir+0x1e3>
c00067ae:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067b1:	ba 00 00 21 50       	mov    edx,0x50210000
c00067b6:	83 c0 0c             	add    eax,0xc
c00067b9:	e8 fb b4 ff ff       	call   c0001cb9 <st_dword>
c00067be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067c2:	89 f2                	mov    edx,esi
c00067c4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067c7:	83 c0 34             	add    eax,0x34
c00067ca:	e8 ea b4 ff ff       	call   c0001cb9 <st_dword>
c00067cf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067d3:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067d7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067da:	c1 e2 09             	shl    edx,0x9
c00067dd:	83 c0 38             	add    eax,0x38
c00067e0:	e8 d4 b4 ff ff       	call   c0001cb9 <st_dword>
c00067e5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e9:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067ed:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067f0:	c1 e2 09             	shl    edx,0x9
c00067f3:	83 c0 28             	add    eax,0x28
c00067f6:	e8 be b4 ff ff       	call   c0001cb9 <st_dword>
c00067fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067ff:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006802:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006806:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006809:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c000680d:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006811:	e8 8b d3 ff ff       	call   c0003ba1 <store_xdir>
c0006816:	89 c3                	mov    ebx,eax
c0006818:	85 c0                	test   eax,eax
c000681a:	0f 85 d4 fe ff ff    	jne    c00066f4 <f_mkdir+0xb5>
c0006820:	eb 30                	jmp    c0006852 <f_mkdir+0x213>
c0006822:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006826:	ba 00 00 21 50       	mov    edx,0x50210000
c000682b:	83 c0 16             	add    eax,0x16
c000682e:	e8 86 b4 ff ff       	call   c0001cb9 <st_dword>
c0006833:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006837:	89 f1                	mov    ecx,esi
c0006839:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000683d:	e8 a5 e5 ff ff       	call   c0004de7 <st_clust.isra.1>
c0006842:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006846:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000684a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000684e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006852:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006856:	e8 f1 dc ff ff       	call   c000454c <sync_fs>
c000685b:	89 c3                	mov    ebx,eax
c000685d:	e9 92 fe ff ff       	jmp    c00066f4 <f_mkdir+0xb5>
c0006862:	83 ec 80             	sub    esp,0xffffff80
c0006865:	89 d8                	mov    eax,ebx
c0006867:	5b                   	pop    ebx
c0006868:	5e                   	pop    esi
c0006869:	5f                   	pop    edi
c000686a:	c3                   	ret    

c000686b <f_rename>:
c000686b:	55                   	push   ebp
c000686c:	57                   	push   edi
c000686d:	56                   	push   esi
c000686e:	53                   	push   ebx
c000686f:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006875:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000687c:	e8 a4 b9 ff ff       	call   c0002225 <get_ldnumber>
c0006881:	b9 02 00 00 00       	mov    ecx,0x2
c0006886:	8d 54 24 14          	lea    edx,[esp+0x14]
c000688a:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006891:	e8 3d be ff ff       	call   c00026d3 <mount_volume>
c0006896:	85 c0                	test   eax,eax
c0006898:	0f 85 b5 02 00 00    	jne    c0006b53 <f_rename+0x2e8>
c000689e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068a2:	83 ec 0c             	sub    esp,0xc
c00068a5:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00068a9:	68 60 04 00 00       	push   0x460
c00068ae:	e8 c3 1b 00 00       	call   c0008476 <ff_memalloc>
c00068b3:	83 c4 10             	add    esp,0x10
c00068b6:	89 c3                	mov    ebx,eax
c00068b8:	b8 11 00 00 00       	mov    eax,0x11
c00068bd:	85 db                	test   ebx,ebx
c00068bf:	0f 84 8e 02 00 00    	je     c0006b53 <f_rename+0x2e8>
c00068c5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068c9:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068cf:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068d2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068d5:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068dc:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068e0:	e8 64 e5 ff ff       	call   c0004e49 <follow_path>
c00068e5:	85 c0                	test   eax,eax
c00068e7:	0f 85 52 02 00 00    	jne    c0006b3f <f_rename+0x2d4>
c00068ed:	b8 06 00 00 00       	mov    eax,0x6
c00068f2:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00068fa:	0f 85 3f 02 00 00    	jne    c0006b3f <f_rename+0x2d4>
c0006900:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006904:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006907:	0f 85 05 01 00 00    	jne    c0006a12 <f_rename+0x1a7>
c000690d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006910:	b9 40 00 00 00       	mov    ecx,0x40
c0006915:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006919:	e8 a4 b3 ff ff       	call   c0001cc2 <mem_cpy>
c000691e:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006923:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006927:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000692e:	e8 8f b3 ff ff       	call   c0001cc2 <mem_cpy>
c0006933:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000693a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006941:	e8 03 e5 ff ff       	call   c0004e49 <follow_path>
c0006946:	85 c0                	test   eax,eax
c0006948:	75 29                	jne    c0006973 <f_rename+0x108>
c000694a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000694e:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006955:	74 0a                	je     c0006961 <f_rename+0xf6>
c0006957:	b8 08 00 00 00       	mov    eax,0x8
c000695c:	e9 de 01 00 00       	jmp    c0006b3f <f_rename+0x2d4>
c0006961:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006968:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000696f:	75 e6                	jne    c0006957 <f_rename+0xec>
c0006971:	eb 09                	jmp    c000697c <f_rename+0x111>
c0006973:	83 f8 04             	cmp    eax,0x4
c0006976:	0f 85 c3 01 00 00    	jne    c0006b3f <f_rename+0x2d4>
c000697c:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006983:	e8 42 d9 ff ff       	call   c00042ca <dir_register>
c0006988:	85 c0                	test   eax,eax
c000698a:	0f 85 af 01 00 00    	jne    c0006b3f <f_rename+0x2d4>
c0006990:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006994:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c0006997:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000699a:	89 c5                	mov    ebp,eax
c000699c:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c000699f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00069a3:	8d 46 24             	lea    eax,[esi+0x24]
c00069a6:	e8 98 b2 ff ff       	call   c0001c43 <ld_word>
c00069ab:	b9 40 00 00 00       	mov    ecx,0x40
c00069b0:	89 c7                	mov    edi,eax
c00069b2:	8d 54 24 18          	lea    edx,[esp+0x18]
c00069b6:	89 f0                	mov    eax,esi
c00069b8:	e8 05 b3 ff ff       	call   c0001cc2 <mem_cpy>
c00069bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069c1:	89 e9                	mov    ecx,ebp
c00069c3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069c6:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069c9:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069cd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069d1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069d4:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069d7:	0f b7 d7             	movzx  edx,di
c00069da:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069dd:	83 c0 24             	add    eax,0x24
c00069e0:	e8 d0 b2 ff ff       	call   c0001cb5 <st_word>
c00069e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069e9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069ec:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00069ef:	a8 10                	test   al,0x10
c00069f1:	75 06                	jne    c00069f9 <f_rename+0x18e>
c00069f3:	83 c8 20             	or     eax,0x20
c00069f6:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00069f9:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a00:	e8 9c d1 ff ff       	call   c0003ba1 <store_xdir>
c0006a05:	85 c0                	test   eax,eax
c0006a07:	0f 84 1c 01 00 00    	je     c0006b29 <f_rename+0x2be>
c0006a0d:	e9 2d 01 00 00       	jmp    c0006b3f <f_rename+0x2d4>
c0006a12:	b9 20 00 00 00       	mov    ecx,0x20
c0006a17:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a1e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a22:	e8 9b b2 ff ff       	call   c0001cc2 <mem_cpy>
c0006a27:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a2c:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a30:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a37:	e8 86 b2 ff ff       	call   c0001cc2 <mem_cpy>
c0006a3c:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a43:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a4a:	e8 fa e3 ff ff       	call   c0004e49 <follow_path>
c0006a4f:	85 c0                	test   eax,eax
c0006a51:	75 27                	jne    c0006a7a <f_rename+0x20f>
c0006a53:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a57:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a5e:	0f 85 f3 fe ff ff    	jne    c0006957 <f_rename+0xec>
c0006a64:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a6b:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a72:	0f 85 df fe ff ff    	jne    c0006957 <f_rename+0xec>
c0006a78:	eb 09                	jmp    c0006a83 <f_rename+0x218>
c0006a7a:	83 f8 04             	cmp    eax,0x4
c0006a7d:	0f 85 bc 00 00 00    	jne    c0006b3f <f_rename+0x2d4>
c0006a83:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a8a:	e8 3b d8 ff ff       	call   c00042ca <dir_register>
c0006a8f:	85 c0                	test   eax,eax
c0006a91:	0f 85 a8 00 00 00    	jne    c0006b3f <f_rename+0x2d4>
c0006a97:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006a9e:	b9 13 00 00 00       	mov    ecx,0x13
c0006aa3:	8d 46 0d             	lea    eax,[esi+0xd]
c0006aa6:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006aaa:	e8 13 b2 ff ff       	call   c0001cc2 <mem_cpy>
c0006aaf:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006ab3:	a8 10                	test   al,0x10
c0006ab5:	75 03                	jne    c0006aba <f_rename+0x24f>
c0006ab7:	83 c8 20             	or     eax,0x20
c0006aba:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006abd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006ac1:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ac5:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006ac9:	74 5e                	je     c0006b29 <f_rename+0x2be>
c0006acb:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006ad2:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006ad6:	74 51                	je     c0006b29 <f_rename+0x2be>
c0006ad8:	89 f2                	mov    edx,esi
c0006ada:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006ade:	8a 07                	mov    al,BYTE PTR [edi]
c0006ae0:	e8 d9 e2 ff ff       	call   c0004dbe <ld_clust.isra.0>
c0006ae5:	89 c2                	mov    edx,eax
c0006ae7:	89 f8                	mov    eax,edi
c0006ae9:	e8 ee b3 ff ff       	call   c0001edc <clst2sect>
c0006aee:	89 c6                	mov    esi,eax
c0006af0:	89 d1                	mov    ecx,edx
c0006af2:	b8 02 00 00 00       	mov    eax,0x2
c0006af7:	09 f2                	or     edx,esi
c0006af9:	74 44                	je     c0006b3f <f_rename+0x2d4>
c0006afb:	89 f2                	mov    edx,esi
c0006afd:	89 f8                	mov    eax,edi
c0006aff:	e8 1d b9 ff ff       	call   c0002421 <move_window>
c0006b04:	85 c0                	test   eax,eax
c0006b06:	75 37                	jne    c0006b3f <f_rename+0x2d4>
c0006b08:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b0c:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006b10:	75 17                	jne    c0006b29 <f_rename+0x2be>
c0006b12:	8d 50 74             	lea    edx,[eax+0x74]
c0006b15:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b1c:	e8 c6 e2 ff ff       	call   c0004de7 <st_clust.isra.1>
c0006b21:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b25:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b29:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b2d:	e8 f4 d0 ff ff       	call   c0003c26 <dir_remove>
c0006b32:	85 c0                	test   eax,eax
c0006b34:	75 09                	jne    c0006b3f <f_rename+0x2d4>
c0006b36:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b3a:	e8 0d da ff ff       	call   c000454c <sync_fs>
c0006b3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b43:	83 ec 0c             	sub    esp,0xc
c0006b46:	53                   	push   ebx
c0006b47:	e8 40 19 00 00       	call   c000848c <ff_memfree>
c0006b4c:	83 c4 10             	add    esp,0x10
c0006b4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b53:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b59:	5b                   	pop    ebx
c0006b5a:	5e                   	pop    esi
c0006b5b:	5f                   	pop    edi
c0006b5c:	5d                   	pop    ebp
c0006b5d:	c3                   	ret    

c0006b5e <f_chmod>:
c0006b5e:	57                   	push   edi
c0006b5f:	b9 02 00 00 00       	mov    ecx,0x2
c0006b64:	56                   	push   esi
c0006b65:	53                   	push   ebx
c0006b66:	83 ec 60             	sub    esp,0x60
c0006b69:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b6d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b71:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b75:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b79:	e8 55 bb ff ff       	call   c00026d3 <mount_volume>
c0006b7e:	85 c0                	test   eax,eax
c0006b80:	0f 85 af 00 00 00    	jne    c0006c35 <f_chmod+0xd7>
c0006b86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b8a:	83 ec 0c             	sub    esp,0xc
c0006b8d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b91:	68 60 04 00 00       	push   0x460
c0006b96:	e8 db 18 00 00       	call   c0008476 <ff_memalloc>
c0006b9b:	83 c4 10             	add    esp,0x10
c0006b9e:	89 c6                	mov    esi,eax
c0006ba0:	b8 11 00 00 00       	mov    eax,0x11
c0006ba5:	85 f6                	test   esi,esi
c0006ba7:	0f 84 88 00 00 00    	je     c0006c35 <f_chmod+0xd7>
c0006bad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bb1:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006bb7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006bba:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bbd:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bc1:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bc5:	e8 7f e2 ff ff       	call   c0004e49 <follow_path>
c0006bca:	85 c0                	test   eax,eax
c0006bcc:	75 53                	jne    c0006c21 <f_chmod+0xc3>
c0006bce:	b8 06 00 00 00       	mov    eax,0x6
c0006bd3:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bd8:	75 47                	jne    c0006c21 <f_chmod+0xc3>
c0006bda:	89 f9                	mov    ecx,edi
c0006bdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006be0:	83 e1 27             	and    ecx,0x27
c0006be3:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006be6:	75 1d                	jne    c0006c05 <f_chmod+0xa7>
c0006be8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006beb:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bee:	21 cb                	and    ebx,ecx
c0006bf0:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bf3:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006bf6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bfa:	e8 a2 cf ff ff       	call   c0003ba1 <store_xdir>
c0006bff:	85 c0                	test   eax,eax
c0006c01:	75 1e                	jne    c0006c21 <f_chmod+0xc3>
c0006c03:	eb 13                	jmp    c0006c18 <f_chmod+0xba>
c0006c05:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006c09:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c0c:	21 cb                	and    ebx,ecx
c0006c0e:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c11:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006c14:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c1c:	e8 2b d9 ff ff       	call   c000454c <sync_fs>
c0006c21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c25:	83 ec 0c             	sub    esp,0xc
c0006c28:	56                   	push   esi
c0006c29:	e8 5e 18 00 00       	call   c000848c <ff_memfree>
c0006c2e:	83 c4 10             	add    esp,0x10
c0006c31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c35:	83 c4 60             	add    esp,0x60
c0006c38:	5b                   	pop    ebx
c0006c39:	5e                   	pop    esi
c0006c3a:	5f                   	pop    edi
c0006c3b:	c3                   	ret    

c0006c3c <f_utime>:
c0006c3c:	56                   	push   esi
c0006c3d:	b9 02 00 00 00       	mov    ecx,0x2
c0006c42:	53                   	push   ebx
c0006c43:	83 ec 64             	sub    esp,0x64
c0006c46:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c4a:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c4e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c52:	e8 7c ba ff ff       	call   c00026d3 <mount_volume>
c0006c57:	85 c0                	test   eax,eax
c0006c59:	0f 85 b5 00 00 00    	jne    c0006d14 <f_utime+0xd8>
c0006c5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c63:	83 ec 0c             	sub    esp,0xc
c0006c66:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c6a:	68 60 04 00 00       	push   0x460
c0006c6f:	e8 02 18 00 00       	call   c0008476 <ff_memalloc>
c0006c74:	83 c4 10             	add    esp,0x10
c0006c77:	89 c3                	mov    ebx,eax
c0006c79:	b8 11 00 00 00       	mov    eax,0x11
c0006c7e:	85 db                	test   ebx,ebx
c0006c80:	0f 84 8e 00 00 00    	je     c0006d14 <f_utime+0xd8>
c0006c86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c8a:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006c90:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006c93:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006c96:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006c9a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c9e:	e8 a6 e1 ff ff       	call   c0004e49 <follow_path>
c0006ca3:	85 c0                	test   eax,eax
c0006ca5:	75 59                	jne    c0006d00 <f_utime+0xc4>
c0006ca7:	b8 06 00 00 00       	mov    eax,0x6
c0006cac:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006cb1:	75 4d                	jne    c0006d00 <f_utime+0xc4>
c0006cb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cb7:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006cbb:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006cbf:	c1 e2 10             	shl    edx,0x10
c0006cc2:	09 ca                	or     edx,ecx
c0006cc4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cc7:	75 1a                	jne    c0006ce3 <f_utime+0xa7>
c0006cc9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006ccc:	83 c0 0c             	add    eax,0xc
c0006ccf:	e8 e5 af ff ff       	call   c0001cb9 <st_dword>
c0006cd4:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cd8:	e8 c4 ce ff ff       	call   c0003ba1 <store_xdir>
c0006cdd:	85 c0                	test   eax,eax
c0006cdf:	75 1f                	jne    c0006d00 <f_utime+0xc4>
c0006ce1:	eb 14                	jmp    c0006cf7 <f_utime+0xbb>
c0006ce3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ce7:	83 c0 16             	add    eax,0x16
c0006cea:	e8 ca af ff ff       	call   c0001cb9 <st_dword>
c0006cef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cf3:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006cf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cfb:	e8 4c d8 ff ff       	call   c000454c <sync_fs>
c0006d00:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d04:	83 ec 0c             	sub    esp,0xc
c0006d07:	53                   	push   ebx
c0006d08:	e8 7f 17 00 00       	call   c000848c <ff_memfree>
c0006d0d:	83 c4 10             	add    esp,0x10
c0006d10:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d14:	83 c4 64             	add    esp,0x64
c0006d17:	5b                   	pop    ebx
c0006d18:	5e                   	pop    esi
c0006d19:	c3                   	ret    

c0006d1a <f_getlabel>:
c0006d1a:	55                   	push   ebp
c0006d1b:	31 c9                	xor    ecx,ecx
c0006d1d:	57                   	push   edi
c0006d1e:	56                   	push   esi
c0006d1f:	53                   	push   ebx
c0006d20:	83 ec 6c             	sub    esp,0x6c
c0006d23:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d27:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d2e:	e8 a0 b9 ff ff       	call   c00026d3 <mount_volume>
c0006d33:	89 c6                	mov    esi,eax
c0006d35:	85 c0                	test   eax,eax
c0006d37:	0f 85 c1 01 00 00    	jne    c0006efe <f_getlabel+0x1e4>
c0006d3d:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d45:	0f 84 5f 01 00 00    	je     c0006eaa <f_getlabel+0x190>
c0006d4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d4f:	31 d2                	xor    edx,edx
c0006d51:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d55:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d5d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d61:	e8 39 c4 ff ff       	call   c000319f <dir_sdi>
c0006d66:	85 c0                	test   eax,eax
c0006d68:	0f 85 2d 01 00 00    	jne    c0006e9b <f_getlabel+0x181>
c0006d6e:	ba 01 00 00 00       	mov    edx,0x1
c0006d73:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d77:	e8 33 cc ff ff       	call   c00039af <dir_read>
c0006d7c:	85 c0                	test   eax,eax
c0006d7e:	0f 85 17 01 00 00    	jne    c0006e9b <f_getlabel+0x181>
c0006d84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d88:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d8b:	74 09                	je     c0006d96 <f_getlabel+0x7c>
c0006d8d:	31 db                	xor    ebx,ebx
c0006d8f:	31 c9                	xor    ecx,ecx
c0006d91:	e9 c8 00 00 00       	jmp    c0006e5e <f_getlabel+0x144>
c0006d96:	31 ed                	xor    ebp,ebp
c0006d98:	31 db                	xor    ebx,ebx
c0006d9a:	31 ff                	xor    edi,edi
c0006d9c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006da0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006da4:	39 fa                	cmp    edx,edi
c0006da6:	76 4b                	jbe    c0006df3 <f_getlabel+0xd9>
c0006da8:	47                   	inc    edi
c0006da9:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006dac:	01 d0                	add    eax,edx
c0006dae:	e8 90 ae ff ff       	call   c0001c43 <ld_word>
c0006db3:	66 85 ed             	test   bp,bp
c0006db6:	75 0d                	jne    c0006dc5 <f_getlabel+0xab>
c0006db8:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006dbe:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006dc3:	76 28                	jbe    c0006ded <f_getlabel+0xd3>
c0006dc5:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006dcc:	89 e9                	mov    ecx,ebp
c0006dce:	01 da                	add    edx,ebx
c0006dd0:	c1 e1 10             	shl    ecx,0x10
c0006dd3:	0f b7 c0             	movzx  eax,ax
c0006dd6:	09 c8                	or     eax,ecx
c0006dd8:	b9 04 00 00 00       	mov    ecx,0x4
c0006ddd:	e8 01 b0 ff ff       	call   c0001de3 <put_utf>
c0006de2:	84 c0                	test   al,al
c0006de4:	74 0b                	je     c0006df1 <f_getlabel+0xd7>
c0006de6:	0f b6 c0             	movzx  eax,al
c0006de9:	01 c3                	add    ebx,eax
c0006deb:	31 c0                	xor    eax,eax
c0006ded:	89 c5                	mov    ebp,eax
c0006def:	eb ab                	jmp    c0006d9c <f_getlabel+0x82>
c0006df1:	31 db                	xor    ebx,ebx
c0006df3:	66 85 ed             	test   bp,bp
c0006df6:	74 02                	je     c0006dfa <f_getlabel+0xe0>
c0006df8:	31 db                	xor    ebx,ebx
c0006dfa:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e01:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006e05:	e9 a0 00 00 00       	jmp    c0006eaa <f_getlabel+0x190>
c0006e0a:	83 ff 0b             	cmp    edi,0xb
c0006e0d:	74 11                	je     c0006e20 <f_getlabel+0x106>
c0006e0f:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006e14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e18:	8d 79 02             	lea    edi,[ecx+0x2]
c0006e1b:	c1 e0 08             	shl    eax,0x8
c0006e1e:	09 c2                	or     edx,eax
c0006e20:	0f b7 d2             	movzx  edx,dx
c0006e23:	50                   	push   eax
c0006e24:	50                   	push   eax
c0006e25:	68 b5 01 00 00       	push   0x1b5
c0006e2a:	52                   	push   edx
c0006e2b:	e8 03 17 00 00       	call   c0008533 <ff_oem2uni>
c0006e30:	83 c4 10             	add    esp,0x10
c0006e33:	66 85 c0             	test   ax,ax
c0006e36:	74 46                	je     c0006e7e <f_getlabel+0x164>
c0006e38:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e3f:	0f b7 c0             	movzx  eax,ax
c0006e42:	01 da                	add    edx,ebx
c0006e44:	b9 04 00 00 00       	mov    ecx,0x4
c0006e49:	e8 95 af ff ff       	call   c0001de3 <put_utf>
c0006e4e:	84 c0                	test   al,al
c0006e50:	74 2c                	je     c0006e7e <f_getlabel+0x164>
c0006e52:	0f b6 c0             	movzx  eax,al
c0006e55:	01 c3                	add    ebx,eax
c0006e57:	83 ff 0b             	cmp    edi,0xb
c0006e5a:	74 24                	je     c0006e80 <f_getlabel+0x166>
c0006e5c:	89 f9                	mov    ecx,edi
c0006e5e:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e62:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e65:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e6a:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e6f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e73:	e8 9f ae ff ff       	call   c0001d17 <dbc_1st>
c0006e78:	85 c0                	test   eax,eax
c0006e7a:	74 a4                	je     c0006e20 <f_getlabel+0x106>
c0006e7c:	eb 8c                	jmp    c0006e0a <f_getlabel+0xf0>
c0006e7e:	31 db                	xor    ebx,ebx
c0006e80:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006e87:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006e8a:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006e91:	74 17                	je     c0006eaa <f_getlabel+0x190>
c0006e93:	4b                   	dec    ebx
c0006e94:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006e97:	74 ee                	je     c0006e87 <f_getlabel+0x16d>
c0006e99:	eb 0f                	jmp    c0006eaa <f_getlabel+0x190>
c0006e9b:	83 f8 04             	cmp    eax,0x4
c0006e9e:	75 5c                	jne    c0006efc <f_getlabel+0x1e2>
c0006ea0:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006ea7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006eaa:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006eb2:	74 4a                	je     c0006efe <f_getlabel+0x1e4>
c0006eb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006eb8:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006ebb:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006ebe:	e8 5e b5 ff ff       	call   c0002421 <move_window>
c0006ec3:	89 c6                	mov    esi,eax
c0006ec5:	85 c0                	test   eax,eax
c0006ec7:	75 35                	jne    c0006efe <f_getlabel+0x1e4>
c0006ec9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006ecd:	b8 43 00 00 00       	mov    eax,0x43
c0006ed2:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006ed4:	80 f9 03             	cmp    cl,0x3
c0006ed7:	74 0f                	je     c0006ee8 <f_getlabel+0x1ce>
c0006ed9:	31 c0                	xor    eax,eax
c0006edb:	80 f9 04             	cmp    cl,0x4
c0006ede:	0f 94 c0             	sete   al
c0006ee1:	48                   	dec    eax
c0006ee2:	83 e0 c3             	and    eax,0xffffffc3
c0006ee5:	83 c0 64             	add    eax,0x64
c0006ee8:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006eec:	e8 5f ad ff ff       	call   c0001c50 <ld_dword>
c0006ef1:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006ef8:	89 07                	mov    DWORD PTR [edi],eax
c0006efa:	eb 02                	jmp    c0006efe <f_getlabel+0x1e4>
c0006efc:	89 c6                	mov    esi,eax
c0006efe:	83 c4 6c             	add    esp,0x6c
c0006f01:	89 f0                	mov    eax,esi
c0006f03:	5b                   	pop    ebx
c0006f04:	5e                   	pop    esi
c0006f05:	5f                   	pop    edi
c0006f06:	5d                   	pop    ebp
c0006f07:	c3                   	ret    

c0006f08 <f_setlabel>:
c0006f08:	56                   	push   esi
c0006f09:	b9 02 00 00 00       	mov    ecx,0x2
c0006f0e:	53                   	push   ebx
c0006f0f:	83 ec 74             	sub    esp,0x74
c0006f12:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006f16:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f1d:	e8 b1 b7 ff ff       	call   c00026d3 <mount_volume>
c0006f22:	89 c6                	mov    esi,eax
c0006f24:	85 c0                	test   eax,eax
c0006f26:	0f 85 41 02 00 00    	jne    c000716d <f_setlabel+0x265>
c0006f2c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f30:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f33:	0f 85 8e 00 00 00    	jne    c0006fc7 <f_setlabel+0xbf>
c0006f39:	b9 16 00 00 00       	mov    ecx,0x16
c0006f3e:	31 d2                	xor    edx,edx
c0006f40:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f44:	31 db                	xor    ebx,ebx
c0006f46:	e8 8c ad ff ff       	call   c0001cd7 <mem_set>
c0006f4b:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f52:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f55:	0f 86 0a 01 00 00    	jbe    c0007065 <f_setlabel+0x15d>
c0006f5b:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f62:	e8 b6 ad ff ff       	call   c0001d1d <tchar2uni>
c0006f67:	89 c6                	mov    esi,eax
c0006f69:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f6e:	76 2a                	jbe    c0006f9a <f_setlabel+0x92>
c0006f70:	83 f8 ff             	cmp    eax,0xffffffff
c0006f73:	74 05                	je     c0006f7a <f_setlabel+0x72>
c0006f75:	83 fb 09             	cmp    ebx,0x9
c0006f78:	76 0a                	jbe    c0006f84 <f_setlabel+0x7c>
c0006f7a:	be 06 00 00 00       	mov    esi,0x6
c0006f7f:	e9 e9 01 00 00       	jmp    c000716d <f_setlabel+0x265>
c0006f84:	89 c2                	mov    edx,eax
c0006f86:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f8a:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f8d:	c1 ea 10             	shr    edx,0x10
c0006f90:	01 c8                	add    eax,ecx
c0006f92:	43                   	inc    ebx
c0006f93:	e8 1d ad ff ff       	call   c0001cb5 <st_word>
c0006f98:	eb 04                	jmp    c0006f9e <f_setlabel+0x96>
c0006f9a:	85 c0                	test   eax,eax
c0006f9c:	74 dc                	je     c0006f7a <f_setlabel+0x72>
c0006f9e:	89 f2                	mov    edx,esi
c0006fa0:	b8 b7 a0 02 c0       	mov    eax,0xc002a0b7
c0006fa5:	e8 5b ad ff ff       	call   c0001d05 <chk_chr>
c0006faa:	85 c0                	test   eax,eax
c0006fac:	75 cc                	jne    c0006f7a <f_setlabel+0x72>
c0006fae:	83 fb 0a             	cmp    ebx,0xa
c0006fb1:	77 c7                	ja     c0006f7a <f_setlabel+0x72>
c0006fb3:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fb6:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fba:	0f b7 d6             	movzx  edx,si
c0006fbd:	01 c8                	add    eax,ecx
c0006fbf:	43                   	inc    ebx
c0006fc0:	e8 f0 ac ff ff       	call   c0001cb5 <st_word>
c0006fc5:	eb 84                	jmp    c0006f4b <f_setlabel+0x43>
c0006fc7:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fcc:	ba 20 00 00 00       	mov    edx,0x20
c0006fd1:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006fd5:	31 db                	xor    ebx,ebx
c0006fd7:	e8 fb ac ff ff       	call   c0001cd7 <mem_set>
c0006fdc:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006fe3:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006fe6:	76 60                	jbe    c0007048 <f_setlabel+0x140>
c0006fe8:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006fef:	e8 29 ad ff ff       	call   c0001d1d <tchar2uni>
c0006ff4:	3d ff ff 00 00       	cmp    eax,0xffff
c0006ff9:	0f 87 7b ff ff ff    	ja     c0006f7a <f_setlabel+0x72>
c0006fff:	83 ec 0c             	sub    esp,0xc
c0007002:	50                   	push   eax
c0007003:	e8 97 15 00 00       	call   c000859f <ff_wtoupper>
c0007008:	5a                   	pop    edx
c0007009:	59                   	pop    ecx
c000700a:	68 b5 01 00 00       	push   0x1b5
c000700f:	50                   	push   eax
c0007010:	e8 8e 14 00 00       	call   c00084a3 <ff_uni2oem>
c0007015:	83 c4 10             	add    esp,0x10
c0007018:	89 c6                	mov    esi,eax
c000701a:	66 85 c0             	test   ax,ax
c000701d:	0f 84 57 ff ff ff    	je     c0006f7a <f_setlabel+0x72>
c0007023:	0f b7 d0             	movzx  edx,ax
c0007026:	b8 b0 a0 02 c0       	mov    eax,0xc002a0b0
c000702b:	e8 d5 ac ff ff       	call   c0001d05 <chk_chr>
c0007030:	85 c0                	test   eax,eax
c0007032:	0f 85 42 ff ff ff    	jne    c0006f7a <f_setlabel+0x72>
c0007038:	66 81 fe ff 00       	cmp    si,0xff
c000703d:	0f 87 14 01 00 00    	ja     c0007157 <f_setlabel+0x24f>
c0007043:	e9 fa 00 00 00       	jmp    c0007142 <f_setlabel+0x23a>
c0007048:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c000704d:	0f 84 27 ff ff ff    	je     c0006f7a <f_setlabel+0x72>
c0007053:	85 db                	test   ebx,ebx
c0007055:	74 0e                	je     c0007065 <f_setlabel+0x15d>
c0007057:	8d 43 ff             	lea    eax,[ebx-0x1]
c000705a:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c000705f:	75 04                	jne    c0007065 <f_setlabel+0x15d>
c0007061:	89 c3                	mov    ebx,eax
c0007063:	eb ee                	jmp    c0007053 <f_setlabel+0x14b>
c0007065:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007069:	31 d2                	xor    edx,edx
c000706b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000706f:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007077:	8d 44 24 24          	lea    eax,[esp+0x24]
c000707b:	e8 1f c1 ff ff       	call   c000319f <dir_sdi>
c0007080:	89 c6                	mov    esi,eax
c0007082:	85 c0                	test   eax,eax
c0007084:	0f 85 e3 00 00 00    	jne    c000716d <f_setlabel+0x265>
c000708a:	ba 01 00 00 00       	mov    edx,0x1
c000708f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007093:	e8 17 c9 ff ff       	call   c00039af <dir_read>
c0007098:	85 c0                	test   eax,eax
c000709a:	75 21                	jne    c00070bd <f_setlabel+0x1b5>
c000709c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00070a0:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070a4:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c00070a7:	74 5d                	je     c0007106 <f_setlabel+0x1fe>
c00070a9:	85 db                	test   ebx,ebx
c00070ab:	74 0b                	je     c00070b8 <f_setlabel+0x1b0>
c00070ad:	b9 0b 00 00 00       	mov    ecx,0xb
c00070b2:	8d 54 24 0e          	lea    edx,[esp+0xe]
c00070b6:	eb 70                	jmp    c0007128 <f_setlabel+0x220>
c00070b8:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00070bb:	eb 70                	jmp    c000712d <f_setlabel+0x225>
c00070bd:	83 f8 04             	cmp    eax,0x4
c00070c0:	75 7c                	jne    c000713e <f_setlabel+0x236>
c00070c2:	85 db                	test   ebx,ebx
c00070c4:	0f 84 a3 00 00 00    	je     c000716d <f_setlabel+0x265>
c00070ca:	ba 01 00 00 00       	mov    edx,0x1
c00070cf:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070d3:	e8 51 ca ff ff       	call   c0003b29 <dir_alloc>
c00070d8:	89 c6                	mov    esi,eax
c00070da:	85 c0                	test   eax,eax
c00070dc:	0f 85 8b 00 00 00    	jne    c000716d <f_setlabel+0x265>
c00070e2:	31 d2                	xor    edx,edx
c00070e4:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070e8:	b9 20 00 00 00       	mov    ecx,0x20
c00070ed:	e8 e5 ab ff ff       	call   c0001cd7 <mem_set>
c00070f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070f6:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00070f9:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070fd:	75 18                	jne    c0007117 <f_setlabel+0x20f>
c00070ff:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0007102:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007106:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007109:	b9 16 00 00 00       	mov    ecx,0x16
c000710e:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007112:	83 c0 02             	add    eax,0x2
c0007115:	eb 9b                	jmp    c00070b2 <f_setlabel+0x1aa>
c0007117:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000711b:	b9 0b 00 00 00       	mov    ecx,0xb
c0007120:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007124:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007128:	e8 95 ab ff ff       	call   c0001cc2 <mem_cpy>
c000712d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007131:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007135:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007139:	e8 0e d4 ff ff       	call   c000454c <sync_fs>
c000713e:	89 c6                	mov    esi,eax
c0007140:	eb 2b                	jmp    c000716d <f_setlabel+0x265>
c0007142:	83 fb 0a             	cmp    ebx,0xa
c0007145:	0f 87 2f fe ff ff    	ja     c0006f7a <f_setlabel+0x72>
c000714b:	89 f0                	mov    eax,esi
c000714d:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007151:	43                   	inc    ebx
c0007152:	e9 85 fe ff ff       	jmp    c0006fdc <f_setlabel+0xd4>
c0007157:	83 fb 09             	cmp    ebx,0x9
c000715a:	0f 87 1a fe ff ff    	ja     c0006f7a <f_setlabel+0x72>
c0007160:	89 f0                	mov    eax,esi
c0007162:	66 c1 e8 08          	shr    ax,0x8
c0007166:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000716a:	43                   	inc    ebx
c000716b:	eb de                	jmp    c000714b <f_setlabel+0x243>
c000716d:	89 f0                	mov    eax,esi
c000716f:	83 c4 74             	add    esp,0x74
c0007172:	5b                   	pop    ebx
c0007173:	5e                   	pop    esi
c0007174:	c3                   	ret    

c0007175 <f_forward>:
c0007175:	55                   	push   ebp
c0007176:	57                   	push   edi
c0007177:	56                   	push   esi
c0007178:	53                   	push   ebx
c0007179:	83 ec 2c             	sub    esp,0x2c
c000717c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0007180:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0007184:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000718a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000718e:	89 d8                	mov    eax,ebx
c0007190:	e8 b1 b1 ff ff       	call   c0002346 <validate>
c0007195:	89 c5                	mov    ebp,eax
c0007197:	85 c0                	test   eax,eax
c0007199:	0f 85 aa 01 00 00    	jne    c0007349 <f_forward+0x1d4>
c000719f:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00071a3:	85 ed                	test   ebp,ebp
c00071a5:	0f 85 9e 01 00 00    	jne    c0007349 <f_forward+0x1d4>
c00071ab:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00071af:	0f 84 8f 01 00 00    	je     c0007344 <f_forward+0x1cf>
c00071b5:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00071b8:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00071bb:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071be:	bf 00 00 00 00       	mov    edi,0x0
c00071c3:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071c6:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071ca:	89 d1                	mov    ecx,edx
c00071cc:	19 f9                	sbb    ecx,edi
c00071ce:	0f 83 cf 00 00 00    	jae    c00072a3 <f_forward+0x12e>
c00071d4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071d8:	e9 c6 00 00 00       	jmp    c00072a3 <f_forward+0x12e>
c00071dd:	50                   	push   eax
c00071de:	50                   	push   eax
c00071df:	6a 00                	push   0x0
c00071e1:	6a 00                	push   0x0
c00071e3:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00071e7:	83 c4 10             	add    esp,0x10
c00071ea:	85 c0                	test   eax,eax
c00071ec:	0f 84 57 01 00 00    	je     c0007349 <f_forward+0x1d4>
c00071f2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00071f5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00071f9:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00071fc:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0007200:	89 d7                	mov    edi,edx
c0007202:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007205:	89 c6                	mov    esi,eax
c0007207:	0f ac fe 09          	shrd   esi,edi,0x9
c000720b:	21 ce                	and    esi,ecx
c000720d:	89 c1                	mov    ecx,eax
c000720f:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007215:	0f 84 98 00 00 00    	je     c00072b3 <f_forward+0x13e>
c000721b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000721f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007222:	89 c8                	mov    eax,ecx
c0007224:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007228:	e8 af ac ff ff       	call   c0001edc <clst2sect>
c000722d:	89 d7                	mov    edi,edx
c000722f:	09 c7                	or     edi,eax
c0007231:	0f 84 9e 00 00 00    	je     c00072d5 <f_forward+0x160>
c0007237:	31 ff                	xor    edi,edi
c0007239:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000723c:	01 c6                	add    esi,eax
c000723e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007242:	11 d7                	adc    edi,edx
c0007244:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007247:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000724a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000724e:	39 fa                	cmp    edx,edi
c0007250:	0f 85 a2 00 00 00    	jne    c00072f8 <f_forward+0x183>
c0007256:	39 f0                	cmp    eax,esi
c0007258:	0f 85 9a 00 00 00    	jne    c00072f8 <f_forward+0x183>
c000725e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007261:	ba 00 02 00 00       	mov    edx,0x200
c0007266:	25 ff 01 00 00       	and    eax,0x1ff
c000726b:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000726f:	29 c2                	sub    edx,eax
c0007271:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007274:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007277:	39 d1                	cmp    ecx,edx
c0007279:	76 02                	jbe    c000727d <f_forward+0x108>
c000727b:	89 d1                	mov    ecx,edx
c000727d:	8d 73 50             	lea    esi,[ebx+0x50]
c0007280:	52                   	push   edx
c0007281:	01 c6                	add    esi,eax
c0007283:	52                   	push   edx
c0007284:	51                   	push   ecx
c0007285:	56                   	push   esi
c0007286:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000728a:	83 c4 10             	add    esp,0x10
c000728d:	85 c0                	test   eax,eax
c000728f:	74 44                	je     c00072d5 <f_forward+0x160>
c0007291:	31 ff                	xor    edi,edi
c0007293:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c0007296:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0007299:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c000729d:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00072a1:	01 07                	add    DWORD PTR [edi],eax
c00072a3:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00072a8:	0f 85 2f ff ff ff    	jne    c00071dd <f_forward+0x68>
c00072ae:	e9 96 00 00 00       	jmp    c0007349 <f_forward+0x1d4>
c00072b3:	85 f6                	test   esi,esi
c00072b5:	0f 85 60 ff ff ff    	jne    c000721b <f_forward+0xa6>
c00072bb:	89 d7                	mov    edi,edx
c00072bd:	09 c7                	or     edi,eax
c00072bf:	75 05                	jne    c00072c6 <f_forward+0x151>
c00072c1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072c4:	eb 0a                	jmp    c00072d0 <f_forward+0x15b>
c00072c6:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072c9:	89 d8                	mov    eax,ebx
c00072cb:	e8 d9 bc ff ff       	call   c0002fa9 <get_fat>
c00072d0:	83 f8 01             	cmp    eax,0x1
c00072d3:	77 0b                	ja     c00072e0 <f_forward+0x16b>
c00072d5:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072d9:	bd 02 00 00 00       	mov    ebp,0x2
c00072de:	eb 69                	jmp    c0007349 <f_forward+0x1d4>
c00072e0:	83 f8 ff             	cmp    eax,0xffffffff
c00072e3:	75 0b                	jne    c00072f0 <f_forward+0x17b>
c00072e5:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00072e9:	bd 01 00 00 00       	mov    ebp,0x1
c00072ee:	eb 59                	jmp    c0007349 <f_forward+0x1d4>
c00072f0:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00072f3:	e9 23 ff ff ff       	jmp    c000721b <f_forward+0xa6>
c00072f8:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00072fc:	79 20                	jns    c000731e <f_forward+0x1a9>
c00072fe:	83 ec 0c             	sub    esp,0xc
c0007301:	6a 01                	push   0x1
c0007303:	52                   	push   edx
c0007304:	50                   	push   eax
c0007305:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007309:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000730d:	50                   	push   eax
c000730e:	e8 fb a8 ff ff       	call   c0001c0e <disk_write>
c0007313:	83 c4 20             	add    esp,0x20
c0007316:	85 c0                	test   eax,eax
c0007318:	75 cb                	jne    c00072e5 <f_forward+0x170>
c000731a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000731e:	83 ec 0c             	sub    esp,0xc
c0007321:	6a 01                	push   0x1
c0007323:	57                   	push   edi
c0007324:	56                   	push   esi
c0007325:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007329:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000732d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007331:	50                   	push   eax
c0007332:	e8 c1 a8 ff ff       	call   c0001bf8 <disk_read>
c0007337:	83 c4 20             	add    esp,0x20
c000733a:	85 c0                	test   eax,eax
c000733c:	0f 84 1c ff ff ff    	je     c000725e <f_forward+0xe9>
c0007342:	eb a1                	jmp    c00072e5 <f_forward+0x170>
c0007344:	bd 07 00 00 00       	mov    ebp,0x7
c0007349:	83 c4 2c             	add    esp,0x2c
c000734c:	89 e8                	mov    eax,ebp
c000734e:	5b                   	pop    ebx
c000734f:	5e                   	pop    esi
c0007350:	5f                   	pop    edi
c0007351:	5d                   	pop    ebp
c0007352:	c3                   	ret    

c0007353 <f_mkfs>:
c0007353:	55                   	push   ebp
c0007354:	57                   	push   edi
c0007355:	56                   	push   esi
c0007356:	53                   	push   ebx
c0007357:	bb 0b 00 00 00       	mov    ebx,0xb
c000735c:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007362:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007369:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007370:	e8 b0 ae ff ff       	call   c0002225 <get_ldnumber>
c0007375:	85 c0                	test   eax,eax
c0007377:	0f 88 ec 10 00 00    	js     c0008469 <f_mkfs+0x1116>
c000737d:	8b 14 85 20 f2 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0de0]
c0007384:	85 d2                	test   edx,edx
c0007386:	74 03                	je     c000738b <f_mkfs+0x38>
c0007388:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000738b:	85 f6                	test   esi,esi
c000738d:	75 05                	jne    c0007394 <f_mkfs+0x41>
c000738f:	be a0 a0 02 c0       	mov    esi,0xc002a0a0
c0007394:	83 ec 0c             	sub    esp,0xc
c0007397:	0f b6 c0             	movzx  eax,al
c000739a:	bb 03 00 00 00       	mov    ebx,0x3
c000739f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00073a3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073a7:	e8 49 a8 ff ff       	call   c0001bf5 <disk_initialize>
c00073ac:	83 c4 10             	add    esp,0x10
c00073af:	a8 01                	test   al,0x1
c00073b1:	0f 85 b2 10 00 00    	jne    c0008469 <f_mkfs+0x1116>
c00073b7:	bb 0a 00 00 00       	mov    ebx,0xa
c00073bc:	a8 04                	test   al,0x4
c00073be:	0f 85 a5 10 00 00    	jne    c0008469 <f_mkfs+0x1116>
c00073c4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073c7:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073cb:	85 c0                	test   eax,eax
c00073cd:	75 20                	jne    c00073ef <f_mkfs+0x9c>
c00073cf:	51                   	push   ecx
c00073d0:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073d4:	50                   	push   eax
c00073d5:	6a 03                	push   0x3
c00073d7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073db:	e8 44 a8 ff ff       	call   c0001c24 <disk_ioctl>
c00073e0:	83 c4 10             	add    esp,0x10
c00073e3:	85 c0                	test   eax,eax
c00073e5:	74 08                	je     c00073ef <f_mkfs+0x9c>
c00073e7:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073ef:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00073f3:	8d 42 ff             	lea    eax,[edx-0x1]
c00073f6:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00073fb:	77 04                	ja     c0007401 <f_mkfs+0xae>
c00073fd:	85 c2                	test   edx,eax
c00073ff:	74 08                	je     c0007409 <f_mkfs+0xb6>
c0007401:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007409:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000740c:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0007410:	48                   	dec    eax
c0007411:	3c 01                	cmp    al,0x1
c0007413:	76 05                	jbe    c000741a <f_mkfs+0xc7>
c0007415:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c000741a:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000741d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007421:	48                   	dec    eax
c0007422:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007427:	77 07                	ja     c0007430 <f_mkfs+0xdd>
c0007429:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000742e:	74 08                	je     c0007438 <f_mkfs+0xe5>
c0007430:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007438:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c000743b:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007441:	77 07                	ja     c000744a <f_mkfs+0xf7>
c0007443:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007446:	85 d8                	test   eax,ebx
c0007448:	74 02                	je     c000744c <f_mkfs+0xf9>
c000744a:	31 db                	xor    ebx,ebx
c000744c:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007457:	77 0a                	ja     c0007463 <f_mkfs+0x110>
c0007459:	bb 11 00 00 00       	mov    ebx,0x11
c000745e:	e9 06 10 00 00       	jmp    c0008469 <f_mkfs+0x1116>
c0007463:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c000746a:	8b 36                	mov    esi,DWORD PTR [esi]
c000746c:	85 ed                	test   ebp,ebp
c000746e:	75 1e                	jne    c000748e <f_mkfs+0x13b>
c0007470:	83 ec 0c             	sub    esp,0xc
c0007473:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c000747a:	25 00 fe ff ff       	and    eax,0xfffffe00
c000747f:	50                   	push   eax
c0007480:	e8 f1 0f 00 00       	call   c0008476 <ff_memalloc>
c0007485:	83 c4 10             	add    esp,0x10
c0007488:	89 c5                	mov    ebp,eax
c000748a:	85 c0                	test   eax,eax
c000748c:	74 cb                	je     c0007459 <f_mkfs+0x106>
c000748e:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c0007496:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c000749e:	52                   	push   edx
c000749f:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00074a3:	50                   	push   eax
c00074a4:	6a 01                	push   0x1
c00074a6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074aa:	e8 75 a7 ff ff       	call   c0001c24 <disk_ioctl>
c00074af:	83 c4 10             	add    esp,0x10
c00074b2:	85 c0                	test   eax,eax
c00074b4:	0f 85 4a 0f 00 00    	jne    c0008404 <f_mkfs+0x10b1>
c00074ba:	89 f1                	mov    ecx,esi
c00074bc:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074c4:	83 e1 0f             	and    ecx,0xf
c00074c7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074cf:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074d3:	83 e6 08             	and    esi,0x8
c00074d6:	75 56                	jne    c000752e <f_mkfs+0x1db>
c00074d8:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074dc:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074e0:	83 ff 00             	cmp    edi,0x0
c00074e3:	76 20                	jbe    c0007505 <f_mkfs+0x1b2>
c00074e5:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00074ea:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00074f2:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00074f8:	83 d7 ff             	adc    edi,0xffffffff
c00074fb:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00074ff:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007503:	eb 21                	jmp    c0007526 <f_mkfs+0x1d3>
c0007505:	ba 3f 00 00 00       	mov    edx,0x3f
c000750a:	39 f2                	cmp    edx,esi
c000750c:	19 f8                	sbb    eax,edi
c000750e:	73 1e                	jae    c000752e <f_mkfs+0x1db>
c0007510:	83 c6 c1             	add    esi,0xffffffc1
c0007513:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c000751b:	83 d7 ff             	adc    edi,0xffffffff
c000751e:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007522:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007526:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000752e:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007532:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007536:	89 04 24             	mov    DWORD PTR [esp],eax
c0007539:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000753d:	31 c0                	xor    eax,eax
c000753f:	ba 7f 00 00 00       	mov    edx,0x7f
c0007544:	89 c7                	mov    edi,eax
c0007546:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007549:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000754d:	0f 83 c5 0a 00 00    	jae    c0008018 <f_mkfs+0xcc5>
c0007553:	89 df                	mov    edi,ebx
c0007555:	c1 ef 09             	shr    edi,0x9
c0007558:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000755c:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007563:	c1 ef 09             	shr    edi,0x9
c0007566:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c000756b:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000756f:	74 29                	je     c000759a <f_mkfs+0x247>
c0007571:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007577:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000757c:	0f 97 c2             	seta   dl
c000757f:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007582:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007586:	0f 92 c0             	setb   al
c0007589:	08 c2                	or     dl,al
c000758b:	75 5b                	jne    c00075e8 <f_mkfs+0x295>
c000758d:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007591:	83 e0 07             	and    eax,0x7
c0007594:	3c 04                	cmp    al,0x4
c0007596:	74 50                	je     c00075e8 <f_mkfs+0x295>
c0007598:	eb 1b                	jmp    c00075b5 <f_mkfs+0x262>
c000759a:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000759f:	0f 87 73 0a 00 00    	ja     c0008018 <f_mkfs+0xcc5>
c00075a5:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075ab:	76 08                	jbe    c00075b5 <f_mkfs+0x262>
c00075ad:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00075b5:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075b9:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075bd:	83 e0 01             	and    eax,0x1
c00075c0:	80 e1 02             	and    cl,0x2
c00075c3:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075c7:	74 0d                	je     c00075d6 <f_mkfs+0x283>
c00075c9:	84 c0                	test   al,al
c00075cb:	0f 84 53 09 00 00    	je     c0007f24 <f_mkfs+0xbd1>
c00075d1:	e9 12 08 00 00       	jmp    c0007de8 <f_mkfs+0xa95>
c00075d6:	bb 13 00 00 00       	mov    ebx,0x13
c00075db:	84 c0                	test   al,al
c00075dd:	0f 85 05 08 00 00    	jne    c0007de8 <f_mkfs+0xa95>
c00075e3:	e9 39 0e 00 00       	jmp    c0008421 <f_mkfs+0x10ce>
c00075e8:	31 c0                	xor    eax,eax
c00075ea:	ba ff 0f 00 00       	mov    edx,0xfff
c00075ef:	89 c7                	mov    edi,eax
c00075f1:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075f4:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00075f8:	0f 83 1a 0a 00 00    	jae    c0008018 <f_mkfs+0xcc5>
c00075fe:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007604:	77 39                	ja     c000763f <f_mkfs+0x2ec>
c0007606:	ba ff ff 07 00       	mov    edx,0x7ffff
c000760b:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007613:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007616:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000761a:	73 08                	jae    c0007624 <f_mkfs+0x2d1>
c000761c:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007624:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007629:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000762c:	b8 00 00 00 00       	mov    eax,0x0
c0007631:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007635:	73 08                	jae    c000763f <f_mkfs+0x2ec>
c0007637:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000763f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007643:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007647:	83 c0 20             	add    eax,0x20
c000764a:	83 d2 00             	adc    edx,0x0
c000764d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007651:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007655:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007659:	31 d2                	xor    edx,edx
c000765b:	31 ff                	xor    edi,edi
c000765d:	52                   	push   edx
c000765e:	89 fb                	mov    ebx,edi
c0007660:	50                   	push   eax
c0007661:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007665:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007669:	e8 76 ff 01 00       	call   c00275e4 <__udivdi3>
c000766e:	83 c4 10             	add    esp,0x10
c0007671:	c1 e0 02             	shl    eax,0x2
c0007674:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007678:	05 07 02 00 00       	add    eax,0x207
c000767d:	89 f1                	mov    ecx,esi
c000767f:	c1 e8 09             	shr    eax,0x9
c0007682:	83 c1 ff             	add    ecx,0xffffffff
c0007685:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0007689:	83 d3 ff             	adc    ebx,0xffffffff
c000768c:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0007690:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007694:	31 d2                	xor    edx,edx
c0007696:	01 c8                	add    eax,ecx
c0007698:	11 da                	adc    edx,ebx
c000769a:	89 c1                	mov    ecx,eax
c000769c:	f7 de                	neg    esi
c000769e:	89 d0                	mov    eax,edx
c00076a0:	83 d7 00             	adc    edi,0x0
c00076a3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076a7:	f7 df                	neg    edi
c00076a9:	21 f1                	and    ecx,esi
c00076ab:	21 f8                	and    eax,edi
c00076ad:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00076b1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00076b5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00076b9:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076bd:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076c1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076c4:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076c8:	0f ac d0 01          	shrd   eax,edx,0x1
c00076cc:	89 df                	mov    edi,ebx
c00076ce:	d1 ea                	shr    edx,1
c00076d0:	39 c1                	cmp    ecx,eax
c00076d2:	19 d7                	sbb    edi,edx
c00076d4:	0f 83 3e 09 00 00    	jae    c0008018 <f_mkfs+0xcc5>
c00076da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076de:	31 d2                	xor    edx,edx
c00076e0:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00076e4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076e8:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00076ec:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076ef:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00076f3:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00076f7:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00076fb:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00076ff:	83 f8 0f             	cmp    eax,0xf
c0007702:	0f 86 10 09 00 00    	jbe    c0008018 <f_mkfs+0xcc5>
c0007708:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c0007710:	0f 87 02 09 00 00    	ja     c0008018 <f_mkfs+0xcc5>
c0007716:	31 d2                	xor    edx,edx
c0007718:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000771c:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007724:	83 c0 07             	add    eax,0x7
c0007727:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000772f:	c1 e8 03             	shr    eax,0x3
c0007732:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007739:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000773d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007741:	c1 e0 09             	shl    eax,0x9
c0007744:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007748:	48                   	dec    eax
c0007749:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000774d:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007751:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007755:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007759:	31 d2                	xor    edx,edx
c000775b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000775f:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007766:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000776a:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000776f:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007773:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007777:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000777b:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000777f:	31 ff                	xor    edi,edi
c0007781:	31 f6                	xor    esi,esi
c0007783:	31 db                	xor    ebx,ebx
c0007785:	85 ff                	test   edi,edi
c0007787:	74 05                	je     c000778e <f_mkfs+0x43b>
c0007789:	4f                   	dec    edi
c000778a:	74 44                	je     c00077d0 <f_mkfs+0x47d>
c000778c:	eb 4f                	jmp    c00077dd <f_mkfs+0x48a>
c000778e:	83 ec 0c             	sub    esp,0xc
c0007791:	0f b7 c3             	movzx  eax,bx
c0007794:	50                   	push   eax
c0007795:	e8 05 0e 00 00       	call   c000859f <ff_wtoupper>
c000779a:	83 c4 10             	add    esp,0x10
c000779d:	89 c1                	mov    ecx,eax
c000779f:	8d 53 01             	lea    edx,[ebx+0x1]
c00077a2:	66 39 c3             	cmp    bx,ax
c00077a5:	75 3e                	jne    c00077e5 <f_mkfs+0x492>
c00077a7:	be 01 00 00 00       	mov    esi,0x1
c00077ac:	89 df                	mov    edi,ebx
c00077ae:	66 01 f7             	add    di,si
c00077b1:	75 07                	jne    c00077ba <f_mkfs+0x467>
c00077b3:	83 fe 7f             	cmp    esi,0x7f
c00077b6:	77 31                	ja     c00077e9 <f_mkfs+0x496>
c00077b8:	eb 16                	jmp    c00077d0 <f_mkfs+0x47d>
c00077ba:	83 ec 0c             	sub    esp,0xc
c00077bd:	0f b7 ff             	movzx  edi,di
c00077c0:	57                   	push   edi
c00077c1:	e8 d9 0d 00 00       	call   c000859f <ff_wtoupper>
c00077c6:	83 c4 10             	add    esp,0x10
c00077c9:	39 c7                	cmp    edi,eax
c00077cb:	75 e6                	jne    c00077b3 <f_mkfs+0x460>
c00077cd:	46                   	inc    esi
c00077ce:	eb dc                	jmp    c00077ac <f_mkfs+0x459>
c00077d0:	31 c0                	xor    eax,eax
c00077d2:	89 d9                	mov    ecx,ebx
c00077d4:	4e                   	dec    esi
c00077d5:	0f 95 c0             	setne  al
c00077d8:	43                   	inc    ebx
c00077d9:	89 c7                	mov    edi,eax
c00077db:	eb 14                	jmp    c00077f1 <f_mkfs+0x49e>
c00077dd:	89 f1                	mov    ecx,esi
c00077df:	01 f3                	add    ebx,esi
c00077e1:	31 ff                	xor    edi,edi
c00077e3:	eb 0c                	jmp    c00077f1 <f_mkfs+0x49e>
c00077e5:	89 d3                	mov    ebx,edx
c00077e7:	eb 08                	jmp    c00077f1 <f_mkfs+0x49e>
c00077e9:	bf 02 00 00 00       	mov    edi,0x2
c00077ee:	83 c9 ff             	or     ecx,0xffffffff
c00077f1:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00077f5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077f8:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00077fc:	0f b6 c1             	movzx  eax,cl
c00077ff:	e8 3a a9 ff ff       	call   c000213e <xsum32>
c0007804:	66 c1 e9 08          	shr    cx,0x8
c0007808:	89 c2                	mov    edx,eax
c000780a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000780d:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c0007811:	0f b7 c1             	movzx  eax,cx
c0007814:	e8 25 a9 ff ff       	call   c000213e <xsum32>
c0007819:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000781e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007822:	66 85 db             	test   bx,bx
c0007825:	74 1f                	je     c0007846 <f_mkfs+0x4f3>
c0007827:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782a:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007831:	83 c0 02             	add    eax,0x2
c0007834:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c000783a:	39 c2                	cmp    edx,eax
c000783c:	74 08                	je     c0007846 <f_mkfs+0x4f3>
c000783e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007841:	e9 3f ff ff ff       	jmp    c0007785 <f_mkfs+0x432>
c0007846:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007849:	83 ec 0c             	sub    esp,0xc
c000784c:	05 01 02 00 00       	add    eax,0x201
c0007851:	c1 e8 09             	shr    eax,0x9
c0007854:	50                   	push   eax
c0007855:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007859:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000785d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007861:	55                   	push   ebp
c0007862:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007866:	e8 a3 a3 ff ff       	call   c0001c0e <disk_write>
c000786b:	83 c4 20             	add    esp,0x20
c000786e:	85 c0                	test   eax,eax
c0007870:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007873:	0f 85 8b 0b 00 00    	jne    c0008404 <f_mkfs+0x10b1>
c0007879:	89 d0                	mov    eax,edx
c000787b:	31 d2                	xor    edx,edx
c000787d:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007881:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007885:	66 85 db             	test   bx,bx
c0007888:	74 04                	je     c000788e <f_mkfs+0x53b>
c000788a:	31 c0                	xor    eax,eax
c000788c:	eb b0                	jmp    c000783e <f_mkfs+0x4eb>
c000788e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007892:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0007896:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c000789a:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00078a0:	31 d2                	xor    edx,edx
c00078a2:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00078ad:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078b1:	c1 eb 09             	shr    ebx,0x9
c00078b4:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00078bb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078bf:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078c3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078c7:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078cb:	8d 70 01             	lea    esi,[eax+0x1]
c00078ce:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078d2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078d6:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078dd:	31 d2                	xor    edx,edx
c00078df:	25 00 fe ff ff       	and    eax,0xfffffe00
c00078e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00078e7:	89 c1                	mov    ecx,eax
c00078e9:	89 e8                	mov    eax,ebp
c00078eb:	e8 e7 a3 ff ff       	call   c0001cd7 <mem_set>
c00078f0:	31 c0                	xor    eax,eax
c00078f2:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078f5:	76 10                	jbe    c0007907 <f_mkfs+0x5b4>
c00078f7:	83 fe 07             	cmp    esi,0x7
c00078fa:	76 0b                	jbe    c0007907 <f_mkfs+0x5b4>
c00078fc:	40                   	inc    eax
c00078fd:	83 ee 08             	sub    esi,0x8
c0007900:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007905:	eb eb                	jmp    c00078f2 <f_mkfs+0x59f>
c0007907:	b2 01                	mov    dl,0x1
c0007909:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c000790d:	85 f6                	test   esi,esi
c000790f:	74 0c                	je     c000791d <f_mkfs+0x5ca>
c0007911:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007914:	76 07                	jbe    c000791d <f_mkfs+0x5ca>
c0007916:	08 11                	or     BYTE PTR [ecx],dl
c0007918:	4e                   	dec    esi
c0007919:	d1 e2                	shl    edx,1
c000791b:	eb f0                	jmp    c000790d <f_mkfs+0x5ba>
c000791d:	89 df                	mov    edi,ebx
c000791f:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007923:	76 04                	jbe    c0007929 <f_mkfs+0x5d6>
c0007925:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007929:	83 ec 0c             	sub    esp,0xc
c000792c:	57                   	push   edi
c000792d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007931:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007935:	55                   	push   ebp
c0007936:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000793a:	e8 cf a2 ff ff       	call   c0001c0e <disk_write>
c000793f:	83 c4 20             	add    esp,0x20
c0007942:	85 c0                	test   eax,eax
c0007944:	0f 85 ba 0a 00 00    	jne    c0008404 <f_mkfs+0x10b1>
c000794a:	31 d2                	xor    edx,edx
c000794c:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007950:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007954:	29 fb                	sub    ebx,edi
c0007956:	0f 85 7a ff ff ff    	jne    c00078d6 <f_mkfs+0x583>
c000795c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007960:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007968:	31 f6                	xor    esi,esi
c000796a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000796e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007971:	31 d2                	xor    edx,edx
c0007973:	89 e8                	mov    eax,ebp
c0007975:	e8 5d a3 ff ff       	call   c0001cd7 <mem_set>
c000797a:	31 c9                	xor    ecx,ecx
c000797c:	85 db                	test   ebx,ebx
c000797e:	75 40                	jne    c00079c0 <f_mkfs+0x66d>
c0007980:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007985:	89 e8                	mov    eax,ebp
c0007987:	bb 02 00 00 00       	mov    ebx,0x2
c000798c:	e8 28 a3 ff ff       	call   c0001cb9 <st_dword>
c0007991:	8d 45 04             	lea    eax,[ebp+0x4]
c0007994:	83 ca ff             	or     edx,0xffffffff
c0007997:	e8 1d a3 ff ff       	call   c0001cb9 <st_dword>
c000799c:	b9 08 00 00 00       	mov    ecx,0x8
c00079a1:	eb 1d                	jmp    c00079c0 <f_mkfs+0x66d>
c00079a3:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079a6:	76 3b                	jbe    c00079e3 <f_mkfs+0x690>
c00079a8:	43                   	inc    ebx
c00079a9:	83 fe 01             	cmp    esi,0x1
c00079ac:	89 da                	mov    edx,ebx
c00079ae:	77 03                	ja     c00079b3 <f_mkfs+0x660>
c00079b0:	83 ca ff             	or     edx,0xffffffff
c00079b3:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00079b7:	4e                   	dec    esi
c00079b8:	e8 fc a2 ff ff       	call   c0001cb9 <st_dword>
c00079bd:	83 c1 04             	add    ecx,0x4
c00079c0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079c4:	85 f6                	test   esi,esi
c00079c6:	75 db                	jne    c00079a3 <f_mkfs+0x650>
c00079c8:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079cd:	77 14                	ja     c00079e3 <f_mkfs+0x690>
c00079cf:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079d3:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079da:	85 f6                	test   esi,esi
c00079dc:	74 05                	je     c00079e3 <f_mkfs+0x690>
c00079de:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079e1:	77 dd                	ja     c00079c0 <f_mkfs+0x66d>
c00079e3:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00079e7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00079eb:	39 cf                	cmp    edi,ecx
c00079ed:	76 02                	jbe    c00079f1 <f_mkfs+0x69e>
c00079ef:	89 cf                	mov    edi,ecx
c00079f1:	83 ec 0c             	sub    esp,0xc
c00079f4:	57                   	push   edi
c00079f5:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079f9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079fd:	55                   	push   ebp
c00079fe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a02:	e8 07 a2 ff ff       	call   c0001c0e <disk_write>
c0007a07:	83 c4 20             	add    esp,0x20
c0007a0a:	85 c0                	test   eax,eax
c0007a0c:	0f 85 f2 09 00 00    	jne    c0008404 <f_mkfs+0x10b1>
c0007a12:	31 d2                	xor    edx,edx
c0007a14:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007a18:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a1c:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a20:	0f 85 48 ff ff ff    	jne    c000796e <f_mkfs+0x61b>
c0007a26:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a29:	31 d2                	xor    edx,edx
c0007a2b:	89 e8                	mov    eax,ebp
c0007a2d:	31 ff                	xor    edi,edi
c0007a2f:	e8 a3 a2 ff ff       	call   c0001cd7 <mem_set>
c0007a34:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a37:	ba 02 00 00 00       	mov    edx,0x2
c0007a3c:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a40:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a44:	e8 70 a2 ff ff       	call   c0001cb9 <st_dword>
c0007a49:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a4c:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a50:	e8 64 a2 ff ff       	call   c0001cb9 <st_dword>
c0007a55:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a58:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a5c:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a60:	e8 54 a2 ff ff       	call   c0001cb9 <st_dword>
c0007a65:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a68:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a6c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a70:	83 c2 02             	add    edx,0x2
c0007a73:	e8 41 a2 ff ff       	call   c0001cb9 <st_dword>
c0007a78:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a7b:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a7f:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007a83:	e8 31 a2 ff ff       	call   c0001cb9 <st_dword>
c0007a88:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a8c:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007a91:	89 c6                	mov    esi,eax
c0007a93:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a97:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007a9b:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a9e:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007aa2:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007aa5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007aa9:	39 cb                	cmp    ebx,ecx
c0007aab:	76 02                	jbe    c0007aaf <f_mkfs+0x75c>
c0007aad:	89 cb                	mov    ebx,ecx
c0007aaf:	83 ec 0c             	sub    esp,0xc
c0007ab2:	53                   	push   ebx
c0007ab3:	57                   	push   edi
c0007ab4:	56                   	push   esi
c0007ab5:	55                   	push   ebp
c0007ab6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007aba:	e8 4f a1 ff ff       	call   c0001c0e <disk_write>
c0007abf:	83 c4 20             	add    esp,0x20
c0007ac2:	85 c0                	test   eax,eax
c0007ac4:	0f 85 3a 09 00 00    	jne    c0008404 <f_mkfs+0x10b1>
c0007aca:	31 d2                	xor    edx,edx
c0007acc:	b9 00 02 00 00       	mov    ecx,0x200
c0007ad1:	89 e8                	mov    eax,ebp
c0007ad3:	e8 ff a1 ff ff       	call   c0001cd7 <mem_set>
c0007ad8:	31 d2                	xor    edx,edx
c0007ada:	01 de                	add    esi,ebx
c0007adc:	11 d7                	adc    edi,edx
c0007ade:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007ae1:	75 bf                	jne    c0007aa2 <f_mkfs+0x74f>
c0007ae3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007ae7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007aeb:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007af3:	b9 00 02 00 00       	mov    ecx,0x200
c0007af8:	31 d2                	xor    edx,edx
c0007afa:	89 e8                	mov    eax,ebp
c0007afc:	e8 d6 a1 ff ff       	call   c0001cd7 <mem_set>
c0007b01:	b9 0b 00 00 00       	mov    ecx,0xb
c0007b06:	ba 80 a1 02 c0       	mov    edx,0xc002a180
c0007b0b:	89 e8                	mov    eax,ebp
c0007b0d:	e8 b0 a1 ff ff       	call   c0001cc2 <mem_cpy>
c0007b12:	8d 45 40             	lea    eax,[ebp+0x40]
c0007b15:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007b19:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b1d:	e8 9a a1 ff ff       	call   c0001cbc <st_qword>
c0007b22:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b26:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b29:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b2d:	e8 8a a1 ff ff       	call   c0001cbc <st_qword>
c0007b32:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b35:	ba 20 00 00 00       	mov    edx,0x20
c0007b3a:	e8 7a a1 ff ff       	call   c0001cb9 <st_dword>
c0007b3f:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b43:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b47:	e8 6d a1 ff ff       	call   c0001cb9 <st_dword>
c0007b4c:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b50:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b54:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b58:	e8 5c a1 ff ff       	call   c0001cb9 <st_dword>
c0007b5d:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b60:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b64:	e8 50 a1 ff ff       	call   c0001cb9 <st_dword>
c0007b69:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b6d:	8d 50 02             	lea    edx,[eax+0x2]
c0007b70:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b73:	e8 41 a1 ff ff       	call   c0001cb9 <st_dword>
c0007b78:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b7b:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b80:	e8 34 a1 ff ff       	call   c0001cb9 <st_dword>
c0007b85:	8d 45 68             	lea    eax,[ebp+0x68]
c0007b88:	ba 00 01 00 00       	mov    edx,0x100
c0007b8d:	e8 23 a1 ff ff       	call   c0001cb5 <st_word>
c0007b92:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007b96:	b8 0a 00 00 00       	mov    eax,0xa
c0007b9b:	48                   	dec    eax
c0007b9c:	74 05                	je     c0007ba3 <f_mkfs+0x850>
c0007b9e:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007ba1:	eb f8                	jmp    c0007b9b <f_mkfs+0x848>
c0007ba3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ba7:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007bab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007baf:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007bb3:	74 05                	je     c0007bba <f_mkfs+0x867>
c0007bb5:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007bb8:	eb f5                	jmp    c0007baf <f_mkfs+0x85c>
c0007bba:	8d 45 78             	lea    eax,[ebp+0x78]
c0007bbd:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007bc2:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007bc8:	31 db                	xor    ebx,ebx
c0007bca:	e8 e6 a0 ff ff       	call   c0001cb5 <st_word>
c0007bcf:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bd5:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bda:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bdd:	e8 d3 a0 ff ff       	call   c0001cb5 <st_word>
c0007be2:	31 c9                	xor    ecx,ecx
c0007be4:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007be7:	83 f8 01             	cmp    eax,0x1
c0007bea:	76 13                	jbe    c0007bff <f_mkfs+0x8ac>
c0007bec:	83 f9 70             	cmp    ecx,0x70
c0007bef:	74 0e                	je     c0007bff <f_mkfs+0x8ac>
c0007bf1:	89 da                	mov    edx,ebx
c0007bf3:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007bf8:	e8 41 a5 ff ff       	call   c000213e <xsum32>
c0007bfd:	89 c3                	mov    ebx,eax
c0007bff:	41                   	inc    ecx
c0007c00:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c06:	75 dc                	jne    c0007be4 <f_mkfs+0x891>
c0007c08:	89 f0                	mov    eax,esi
c0007c0a:	89 fa                	mov    edx,edi
c0007c0c:	83 c0 01             	add    eax,0x1
c0007c0f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c13:	83 d2 00             	adc    edx,0x0
c0007c16:	83 ec 0c             	sub    esp,0xc
c0007c19:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c1d:	6a 01                	push   0x1
c0007c1f:	57                   	push   edi
c0007c20:	56                   	push   esi
c0007c21:	55                   	push   ebp
c0007c22:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c26:	e8 e3 9f ff ff       	call   c0001c0e <disk_write>
c0007c2b:	83 c4 20             	add    esp,0x20
c0007c2e:	85 c0                	test   eax,eax
c0007c30:	0f 85 ce 07 00 00    	jne    c0008404 <f_mkfs+0x10b1>
c0007c36:	31 d2                	xor    edx,edx
c0007c38:	b9 00 02 00 00       	mov    ecx,0x200
c0007c3d:	89 e8                	mov    eax,ebp
c0007c3f:	e8 93 a0 ff ff       	call   c0001cd7 <mem_set>
c0007c44:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c49:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c4c:	e8 64 a0 ff ff       	call   c0001cb5 <st_word>
c0007c51:	89 f0                	mov    eax,esi
c0007c53:	89 fa                	mov    edx,edi
c0007c55:	83 c0 09             	add    eax,0x9
c0007c58:	83 d2 00             	adc    edx,0x0
c0007c5b:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c5e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c62:	31 c9                	xor    ecx,ecx
c0007c64:	41                   	inc    ecx
c0007c65:	89 da                	mov    edx,ebx
c0007c67:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c6c:	e8 cd a4 ff ff       	call   c000213e <xsum32>
c0007c71:	89 c3                	mov    ebx,eax
c0007c73:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c79:	75 e9                	jne    c0007c64 <f_mkfs+0x911>
c0007c7b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c7f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007c83:	83 c0 01             	add    eax,0x1
c0007c86:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007c8a:	83 d2 00             	adc    edx,0x0
c0007c8d:	83 ec 0c             	sub    esp,0xc
c0007c90:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007c94:	6a 01                	push   0x1
c0007c96:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c9a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c9e:	55                   	push   ebp
c0007c9f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ca3:	e8 66 9f ff ff       	call   c0001c0e <disk_write>
c0007ca8:	83 c4 20             	add    esp,0x20
c0007cab:	85 c0                	test   eax,eax
c0007cad:	0f 85 51 07 00 00    	jne    c0008404 <f_mkfs+0x10b1>
c0007cb3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cb7:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007cbb:	75 09                	jne    c0007cc6 <f_mkfs+0x973>
c0007cbd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007cc0:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007cc4:	74 12                	je     c0007cd8 <f_mkfs+0x985>
c0007cc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007cca:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cce:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cd2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cd6:	eb 8a                	jmp    c0007c62 <f_mkfs+0x90f>
c0007cd8:	31 d2                	xor    edx,edx
c0007cda:	b9 00 02 00 00       	mov    ecx,0x200
c0007cdf:	89 e8                	mov    eax,ebp
c0007ce1:	e8 f1 9f ff ff       	call   c0001cd7 <mem_set>
c0007ce6:	83 c6 0b             	add    esi,0xb
c0007ce9:	83 d7 00             	adc    edi,0x0
c0007cec:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007cf0:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007cf4:	31 c9                	xor    ecx,ecx
c0007cf6:	41                   	inc    ecx
c0007cf7:	89 da                	mov    edx,ebx
c0007cf9:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007cfe:	e8 3b a4 ff ff       	call   c000213e <xsum32>
c0007d03:	89 c3                	mov    ebx,eax
c0007d05:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d0b:	75 e9                	jne    c0007cf6 <f_mkfs+0x9a3>
c0007d0d:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d10:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d14:	83 c6 01             	add    esi,0x1
c0007d17:	83 d7 00             	adc    edi,0x0
c0007d1a:	83 ec 0c             	sub    esp,0xc
c0007d1d:	6a 01                	push   0x1
c0007d1f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d23:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d27:	55                   	push   ebp
c0007d28:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d2c:	e8 dd 9e ff ff       	call   c0001c0e <disk_write>
c0007d31:	83 c4 20             	add    esp,0x20
c0007d34:	85 c0                	test   eax,eax
c0007d36:	0f 85 c8 06 00 00    	jne    c0008404 <f_mkfs+0x10b1>
c0007d3c:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d40:	75 06                	jne    c0007d48 <f_mkfs+0x9f5>
c0007d42:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d46:	74 09                	je     c0007d51 <f_mkfs+0x9fe>
c0007d48:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d4b:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d4f:	eb a3                	jmp    c0007cf4 <f_mkfs+0x9a1>
c0007d51:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d55:	89 da                	mov    edx,ebx
c0007d57:	01 e8                	add    eax,ebp
c0007d59:	e8 5b 9f ff ff       	call   c0001cb9 <st_dword>
c0007d5e:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d63:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d6b:	75 e4                	jne    c0007d51 <f_mkfs+0x9fe>
c0007d6d:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d70:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d74:	83 c6 02             	add    esi,0x2
c0007d77:	83 d7 00             	adc    edi,0x0
c0007d7a:	83 ec 0c             	sub    esp,0xc
c0007d7d:	6a 01                	push   0x1
c0007d7f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d83:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d87:	55                   	push   ebp
c0007d88:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d8c:	e8 7d 9e ff ff       	call   c0001c0e <disk_write>
c0007d91:	83 c4 20             	add    esp,0x20
c0007d94:	85 c0                	test   eax,eax
c0007d96:	0f 85 68 06 00 00    	jne    c0008404 <f_mkfs+0x10b1>
c0007d9c:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007da1:	74 0d                	je     c0007db0 <f_mkfs+0xa5d>
c0007da3:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007dab:	e9 43 fd ff ff       	jmp    c0007af3 <f_mkfs+0x7a0>
c0007db0:	b1 07                	mov    cl,0x7
c0007db2:	e9 e3 05 00 00       	jmp    c000839a <f_mkfs+0x1047>
c0007db7:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007dbc:	0f 85 4f 02 00 00    	jne    c0008011 <f_mkfs+0xcbe>
c0007dc2:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007dc7:	0f 86 22 02 00 00    	jbe    c0007fef <f_mkfs+0xc9c>
c0007dcd:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007dd2:	0f 85 81 06 00 00    	jne    c0008459 <f_mkfs+0x1106>
c0007dd8:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007ddb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007ddf:	83 f8 40             	cmp    eax,0x40
c0007de2:	0f 87 51 06 00 00    	ja     c0008439 <f_mkfs+0x10e6>
c0007de8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007dec:	85 ff                	test   edi,edi
c0007dee:	75 1c                	jne    c0007e0c <f_mkfs+0xab9>
c0007df0:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007df3:	ba 80 a0 02 c0       	mov    edx,0xc002a080
c0007df8:	c1 e9 0c             	shr    ecx,0xc
c0007dfb:	bf 01 00 00 00       	mov    edi,0x1
c0007e00:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007e03:	66 85 c0             	test   ax,ax
c0007e06:	0f 85 95 01 00 00    	jne    c0007fa1 <f_mkfs+0xc4e>
c0007e0c:	31 d2                	xor    edx,edx
c0007e0e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e11:	f7 f7                	div    edi
c0007e13:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e18:	0f 86 95 01 00 00    	jbe    c0007fb3 <f_mkfs+0xc60>
c0007e1e:	83 c0 02             	add    eax,0x2
c0007e21:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e26:	01 c0                	add    eax,eax
c0007e28:	05 ff 01 00 00       	add    eax,0x1ff
c0007e2d:	be 01 00 00 00       	mov    esi,0x1
c0007e32:	c1 e8 09             	shr    eax,0x9
c0007e35:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e39:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e3d:	c1 e0 05             	shl    eax,0x5
c0007e40:	c1 e8 09             	shr    eax,0x9
c0007e43:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e47:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e4c:	31 d2                	xor    edx,edx
c0007e4e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e52:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e56:	89 f0                	mov    eax,esi
c0007e58:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e5c:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e60:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e64:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e68:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e6c:	31 d2                	xor    edx,edx
c0007e6e:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e73:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e77:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e7b:	31 db                	xor    ebx,ebx
c0007e7d:	01 c8                	add    eax,ecx
c0007e7f:	11 da                	adc    edx,ebx
c0007e81:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007e85:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007e89:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007e8d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007e91:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007e95:	f7 da                	neg    edx
c0007e97:	21 d1                	and    ecx,edx
c0007e99:	29 d9                	sub    ecx,ebx
c0007e9b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ea0:	0f 85 20 01 00 00    	jne    c0007fc6 <f_mkfs+0xc73>
c0007ea6:	31 db                	xor    ebx,ebx
c0007ea8:	01 ce                	add    esi,ecx
c0007eaa:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007eae:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007eb2:	31 d2                	xor    edx,edx
c0007eb4:	89 f8                	mov    eax,edi
c0007eb6:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007eba:	c1 e0 04             	shl    eax,0x4
c0007ebd:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007ec1:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ec5:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ec9:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007ecd:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007ed0:	19 d3                	sbb    ebx,edx
c0007ed2:	0f 82 40 01 00 00    	jb     c0008018 <f_mkfs+0xcc5>
c0007ed8:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007edb:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007edf:	89 c8                	mov    eax,ecx
c0007ee1:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007ee6:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007eea:	29 f0                	sub    eax,esi
c0007eec:	29 d0                	sub    eax,edx
c0007eee:	31 d2                	xor    edx,edx
c0007ef0:	f7 f7                	div    edi
c0007ef2:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ef7:	89 c3                	mov    ebx,eax
c0007ef9:	0f 85 b8 fe ff ff    	jne    c0007db7 <f_mkfs+0xa64>
c0007eff:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f04:	0f 87 1d 01 00 00    	ja     c0008027 <f_mkfs+0xcd4>
c0007f0a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f0f:	0f 85 03 01 00 00    	jne    c0008018 <f_mkfs+0xcc5>
c0007f15:	83 ff 01             	cmp    edi,0x1
c0007f18:	0f 86 fa 00 00 00    	jbe    c0008018 <f_mkfs+0xcc5>
c0007f1e:	d1 ef                	shr    edi,1
c0007f20:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f24:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f28:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f2b:	85 db                	test   ebx,ebx
c0007f2d:	75 2d                	jne    c0007f5c <f_mkfs+0xc09>
c0007f2f:	89 cb                	mov    ebx,ecx
c0007f31:	ba 90 a0 02 c0       	mov    edx,0xc002a090
c0007f36:	c1 eb 11             	shr    ebx,0x11
c0007f39:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f41:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f44:	66 85 c0             	test   ax,ax
c0007f47:	74 11                	je     c0007f5a <f_mkfs+0xc07>
c0007f49:	83 c2 02             	add    edx,0x2
c0007f4c:	39 d8                	cmp    eax,ebx
c0007f4e:	77 0a                	ja     c0007f5a <f_mkfs+0xc07>
c0007f50:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f54:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f58:	eb e7                	jmp    c0007f41 <f_mkfs+0xbee>
c0007f5a:	31 db                	xor    ebx,ebx
c0007f5c:	31 d2                	xor    edx,edx
c0007f5e:	89 c8                	mov    eax,ecx
c0007f60:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f64:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f6b:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f70:	c1 ea 09             	shr    edx,0x9
c0007f73:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f78:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f7c:	0f 87 96 00 00 00    	ja     c0008018 <f_mkfs+0xcc5>
c0007f82:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f86:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007f8e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f92:	be 20 00 00 00       	mov    esi,0x20
c0007f97:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007f9c:	e9 a6 fe ff ff       	jmp    c0007e47 <f_mkfs+0xaf4>
c0007fa1:	83 c2 02             	add    edx,0x2
c0007fa4:	39 c8                	cmp    eax,ecx
c0007fa6:	0f 87 60 fe ff ff    	ja     c0007e0c <f_mkfs+0xab9>
c0007fac:	01 ff                	add    edi,edi
c0007fae:	e9 4d fe ff ff       	jmp    c0007e00 <f_mkfs+0xaad>
c0007fb3:	8d 04 40             	lea    eax,[eax+eax*2]
c0007fb6:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007fbb:	40                   	inc    eax
c0007fbc:	d1 e8                	shr    eax,1
c0007fbe:	83 c0 03             	add    eax,0x3
c0007fc1:	e9 62 fe ff ff       	jmp    c0007e28 <f_mkfs+0xad5>
c0007fc6:	31 d2                	xor    edx,edx
c0007fc8:	89 c8                	mov    eax,ecx
c0007fca:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fce:	85 d2                	test   edx,edx
c0007fd0:	74 0c                	je     c0007fde <f_mkfs+0xc8b>
c0007fd2:	49                   	dec    ecx
c0007fd3:	46                   	inc    esi
c0007fd4:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007fd9:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007fde:	89 c8                	mov    eax,ecx
c0007fe0:	31 d2                	xor    edx,edx
c0007fe2:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fe6:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007fea:	e9 c3 fe ff ff       	jmp    c0007eb2 <f_mkfs+0xb5f>
c0007fef:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007ff4:	77 31                	ja     c0008027 <f_mkfs+0xcd4>
c0007ff6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ffb:	75 1b                	jne    c0008018 <f_mkfs+0xcc5>
c0007ffd:	8d 04 3f             	lea    eax,[edi+edi*1]
c0008000:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008004:	3d 80 00 00 00       	cmp    eax,0x80
c0008009:	0f 86 d9 fd ff ff    	jbe    c0007de8 <f_mkfs+0xa95>
c000800f:	eb 07                	jmp    c0008018 <f_mkfs+0xcc5>
c0008011:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008016:	76 0a                	jbe    c0008022 <f_mkfs+0xccf>
c0008018:	bb 0e 00 00 00       	mov    ebx,0xe
c000801d:	e9 ff 03 00 00       	jmp    c0008421 <f_mkfs+0x10ce>
c0008022:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008027:	31 d2                	xor    edx,edx
c0008029:	b9 00 02 00 00       	mov    ecx,0x200
c000802e:	89 e8                	mov    eax,ebp
c0008030:	e8 a2 9c ff ff       	call   c0001cd7 <mem_set>
c0008035:	b9 0b 00 00 00       	mov    ecx,0xb
c000803a:	ba a2 a1 02 c0       	mov    edx,0xc002a1a2
c000803f:	89 e8                	mov    eax,ebp
c0008041:	e8 7c 9c ff ff       	call   c0001cc2 <mem_cpy>
c0008046:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008049:	ba 00 02 00 00       	mov    edx,0x200
c000804e:	e8 62 9c ff ff       	call   c0001cb5 <st_word>
c0008053:	89 f8                	mov    eax,edi
c0008055:	0f b7 d6             	movzx  edx,si
c0008058:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c000805b:	8d 45 0e             	lea    eax,[ebp+0xe]
c000805e:	e8 52 9c ff ff       	call   c0001cb5 <st_word>
c0008063:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0008067:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000806c:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c000806f:	75 08                	jne    c0008079 <f_mkfs+0xd26>
c0008071:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0008079:	8d 45 11             	lea    eax,[ebp+0x11]
c000807c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0008080:	e8 30 9c ff ff       	call   c0001cb5 <st_word>
c0008085:	b8 ff ff 00 00       	mov    eax,0xffff
c000808a:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c000808e:	39 d0                	cmp    eax,edx
c0008090:	b8 00 00 00 00       	mov    eax,0x0
c0008095:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0008099:	72 0a                	jb     c00080a5 <f_mkfs+0xd52>
c000809b:	8d 45 13             	lea    eax,[ebp+0x13]
c000809e:	e8 12 9c ff ff       	call   c0001cb5 <st_word>
c00080a3:	eb 08                	jmp    c00080ad <f_mkfs+0xd5a>
c00080a5:	8d 45 20             	lea    eax,[ebp+0x20]
c00080a8:	e8 0c 9c ff ff       	call   c0001cb9 <st_dword>
c00080ad:	8d 45 18             	lea    eax,[ebp+0x18]
c00080b0:	ba 3f 00 00 00       	mov    edx,0x3f
c00080b5:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00080b9:	e8 f7 9b ff ff       	call   c0001cb5 <st_word>
c00080be:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080c1:	ba ff 00 00 00       	mov    edx,0xff
c00080c6:	e8 ea 9b ff ff       	call   c0001cb5 <st_word>
c00080cb:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080ce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080d2:	e8 e2 9b ff ff       	call   c0001cb9 <st_dword>
c00080d7:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080dc:	75 57                	jne    c0008135 <f_mkfs+0xde2>
c00080de:	8d 45 43             	lea    eax,[ebp+0x43]
c00080e1:	ba 00 00 21 50       	mov    edx,0x50210000
c00080e6:	e8 ce 9b ff ff       	call   c0001cb9 <st_dword>
c00080eb:	8d 45 24             	lea    eax,[ebp+0x24]
c00080ee:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00080f2:	e8 c2 9b ff ff       	call   c0001cb9 <st_dword>
c00080f7:	8d 45 2c             	lea    eax,[ebp+0x2c]
c00080fa:	ba 02 00 00 00       	mov    edx,0x2
c00080ff:	e8 b5 9b ff ff       	call   c0001cb9 <st_dword>
c0008104:	8d 45 30             	lea    eax,[ebp+0x30]
c0008107:	ba 01 00 00 00       	mov    edx,0x1
c000810c:	e8 a4 9b ff ff       	call   c0001cb5 <st_word>
c0008111:	8d 45 32             	lea    eax,[ebp+0x32]
c0008114:	ba 06 00 00 00       	mov    edx,0x6
c0008119:	e8 97 9b ff ff       	call   c0001cb5 <st_word>
c000811e:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008122:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008126:	8d 45 47             	lea    eax,[ebp+0x47]
c0008129:	b9 13 00 00 00       	mov    ecx,0x13
c000812e:	ba ae a1 02 c0       	mov    edx,0xc002a1ae
c0008133:	eb 2f                	jmp    c0008164 <f_mkfs+0xe11>
c0008135:	8d 45 27             	lea    eax,[ebp+0x27]
c0008138:	ba 00 00 21 50       	mov    edx,0x50210000
c000813d:	e8 77 9b ff ff       	call   c0001cb9 <st_dword>
c0008142:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008147:	8d 45 16             	lea    eax,[ebp+0x16]
c000814a:	e8 66 9b ff ff       	call   c0001cb5 <st_word>
c000814f:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008153:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0008157:	8d 45 2b             	lea    eax,[ebp+0x2b]
c000815a:	b9 13 00 00 00       	mov    ecx,0x13
c000815f:	ba c2 a1 02 c0       	mov    edx,0xc002a1c2
c0008164:	e8 59 9b ff ff       	call   c0001cc2 <mem_cpy>
c0008169:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c000816f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008174:	89 f0                	mov    eax,esi
c0008176:	e8 3a 9b ff ff       	call   c0001cb5 <st_word>
c000817b:	83 ec 0c             	sub    esp,0xc
c000817e:	6a 01                	push   0x1
c0008180:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008184:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008188:	55                   	push   ebp
c0008189:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000818d:	e8 7c 9a ff ff       	call   c0001c0e <disk_write>
c0008192:	83 c4 20             	add    esp,0x20
c0008195:	85 c0                	test   eax,eax
c0008197:	0f 85 67 02 00 00    	jne    c0008404 <f_mkfs+0x10b1>
c000819d:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081a2:	0f 85 b7 00 00 00    	jne    c000825f <f_mkfs+0xf0c>
c00081a8:	83 ec 0c             	sub    esp,0xc
c00081ab:	6a 01                	push   0x1
c00081ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081b1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00081b5:	83 c0 06             	add    eax,0x6
c00081b8:	83 d2 00             	adc    edx,0x0
c00081bb:	52                   	push   edx
c00081bc:	50                   	push   eax
c00081bd:	55                   	push   ebp
c00081be:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081c2:	e8 47 9a ff ff       	call   c0001c0e <disk_write>
c00081c7:	83 c4 20             	add    esp,0x20
c00081ca:	b9 00 02 00 00       	mov    ecx,0x200
c00081cf:	31 d2                	xor    edx,edx
c00081d1:	89 e8                	mov    eax,ebp
c00081d3:	e8 ff 9a ff ff       	call   c0001cd7 <mem_set>
c00081d8:	ba 52 52 61 41       	mov    edx,0x41615252
c00081dd:	89 e8                	mov    eax,ebp
c00081df:	e8 d5 9a ff ff       	call   c0001cb9 <st_dword>
c00081e4:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c00081ea:	ba 72 72 41 61       	mov    edx,0x61417272
c00081ef:	e8 c5 9a ff ff       	call   c0001cb9 <st_dword>
c00081f4:	8d 53 ff             	lea    edx,[ebx-0x1]
c00081f7:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c00081fd:	e8 b7 9a ff ff       	call   c0001cb9 <st_dword>
c0008202:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008208:	ba 02 00 00 00       	mov    edx,0x2
c000820d:	e8 a7 9a ff ff       	call   c0001cb9 <st_dword>
c0008212:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008217:	89 f0                	mov    eax,esi
c0008219:	e8 97 9a ff ff       	call   c0001cb5 <st_word>
c000821e:	83 ec 0c             	sub    esp,0xc
c0008221:	6a 01                	push   0x1
c0008223:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008227:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000822b:	83 c0 07             	add    eax,0x7
c000822e:	83 d2 00             	adc    edx,0x0
c0008231:	52                   	push   edx
c0008232:	50                   	push   eax
c0008233:	55                   	push   ebp
c0008234:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008238:	e8 d1 99 ff ff       	call   c0001c0e <disk_write>
c000823d:	83 c4 14             	add    esp,0x14
c0008240:	6a 01                	push   0x1
c0008242:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008246:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000824a:	83 c0 01             	add    eax,0x1
c000824d:	83 d2 00             	adc    edx,0x0
c0008250:	52                   	push   edx
c0008251:	50                   	push   eax
c0008252:	55                   	push   ebp
c0008253:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008257:	e8 b2 99 ff ff       	call   c0001c0e <disk_write>
c000825c:	83 c4 20             	add    esp,0x20
c000825f:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008266:	31 d2                	xor    edx,edx
c0008268:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000826e:	31 db                	xor    ebx,ebx
c0008270:	89 e8                	mov    eax,ebp
c0008272:	e8 60 9a ff ff       	call   c0001cd7 <mem_set>
c0008277:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000827c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008283:	0f 94 c3             	sete   bl
c0008286:	4b                   	dec    ebx
c0008287:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c000828d:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008293:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008298:	75 21                	jne    c00082bb <f_mkfs+0xf68>
c000829a:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c000829f:	89 e8                	mov    eax,ebp
c00082a1:	e8 13 9a ff ff       	call   c0001cb9 <st_dword>
c00082a6:	8d 45 04             	lea    eax,[ebp+0x4]
c00082a9:	83 ca ff             	or     edx,0xffffffff
c00082ac:	e8 08 9a ff ff       	call   c0001cb9 <st_dword>
c00082b1:	8d 45 08             	lea    eax,[ebp+0x8]
c00082b4:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00082b9:	eb 04                	jmp    c00082bf <f_mkfs+0xf6c>
c00082bb:	89 da                	mov    edx,ebx
c00082bd:	89 e8                	mov    eax,ebp
c00082bf:	e8 f5 99 ff ff       	call   c0001cb9 <st_dword>
c00082c4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082c8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082cc:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082d0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082d4:	39 ce                	cmp    esi,ecx
c00082d6:	76 02                	jbe    c00082da <f_mkfs+0xf87>
c00082d8:	89 ce                	mov    esi,ecx
c00082da:	83 ec 0c             	sub    esp,0xc
c00082dd:	56                   	push   esi
c00082de:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082e2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082e6:	55                   	push   ebp
c00082e7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082eb:	e8 1e 99 ff ff       	call   c0001c0e <disk_write>
c00082f0:	83 c4 20             	add    esp,0x20
c00082f3:	85 c0                	test   eax,eax
c00082f5:	0f 85 09 01 00 00    	jne    c0008404 <f_mkfs+0x10b1>
c00082fb:	31 d2                	xor    edx,edx
c00082fd:	b9 00 02 00 00       	mov    ecx,0x200
c0008302:	89 e8                	mov    eax,ebp
c0008304:	e8 ce 99 ff ff       	call   c0001cd7 <mem_set>
c0008309:	31 d2                	xor    edx,edx
c000830b:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000830f:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008313:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008317:	75 b3                	jne    c00082cc <f_mkfs+0xf79>
c0008319:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000831c:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008323:	40                   	inc    eax
c0008324:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008328:	0f 87 65 ff ff ff    	ja     c0008293 <f_mkfs+0xf40>
c000832e:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008333:	74 04                	je     c0008339 <f_mkfs+0xfe6>
c0008335:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008339:	89 fb                	mov    ebx,edi
c000833b:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000833f:	76 04                	jbe    c0008345 <f_mkfs+0xff2>
c0008341:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008345:	83 ec 0c             	sub    esp,0xc
c0008348:	53                   	push   ebx
c0008349:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000834d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008351:	55                   	push   ebp
c0008352:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008356:	e8 b3 98 ff ff       	call   c0001c0e <disk_write>
c000835b:	83 c4 20             	add    esp,0x20
c000835e:	85 c0                	test   eax,eax
c0008360:	0f 85 9e 00 00 00    	jne    c0008404 <f_mkfs+0x10b1>
c0008366:	31 d2                	xor    edx,edx
c0008368:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000836c:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008370:	29 df                	sub    edi,ebx
c0008372:	75 c5                	jne    c0008339 <f_mkfs+0xfe6>
c0008374:	b1 0c                	mov    cl,0xc
c0008376:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000837b:	74 1d                	je     c000839a <f_mkfs+0x1047>
c000837d:	b8 ff ff 00 00       	mov    eax,0xffff
c0008382:	b1 06                	mov    cl,0x6
c0008384:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c0008388:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c000838c:	72 0c                	jb     c000839a <f_mkfs+0x1047>
c000838e:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008393:	0f 94 c1             	sete   cl
c0008396:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c000839a:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c000839f:	75 4c                	jne    c00083ed <f_mkfs+0x109a>
c00083a1:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00083a5:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00083a9:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00083b0:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00083b7:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083c2:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083cd:	0f b6 c9             	movzx  ecx,cl
c00083d0:	83 ec 0c             	sub    esp,0xc
c00083d3:	55                   	push   ebp
c00083d4:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083df:	e8 2f c2 ff ff       	call   c0004613 <create_partition>
c00083e4:	83 c4 10             	add    esp,0x10
c00083e7:	89 c3                	mov    ebx,eax
c00083e9:	85 c0                	test   eax,eax
c00083eb:	75 34                	jne    c0008421 <f_mkfs+0x10ce>
c00083ed:	31 db                	xor    ebx,ebx
c00083ef:	50                   	push   eax
c00083f0:	6a 00                	push   0x0
c00083f2:	6a 00                	push   0x0
c00083f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00083f8:	e8 27 98 ff ff       	call   c0001c24 <disk_ioctl>
c00083fd:	83 c4 10             	add    esp,0x10
c0008400:	85 c0                	test   eax,eax
c0008402:	74 1d                	je     c0008421 <f_mkfs+0x10ce>
c0008404:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000840c:	75 0c                	jne    c000841a <f_mkfs+0x10c7>
c000840e:	83 ec 0c             	sub    esp,0xc
c0008411:	55                   	push   ebp
c0008412:	e8 75 00 00 00       	call   c000848c <ff_memfree>
c0008417:	83 c4 10             	add    esp,0x10
c000841a:	bb 01 00 00 00       	mov    ebx,0x1
c000841f:	eb 48                	jmp    c0008469 <f_mkfs+0x1116>
c0008421:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008429:	75 3e                	jne    c0008469 <f_mkfs+0x1116>
c000842b:	83 ec 0c             	sub    esp,0xc
c000842e:	55                   	push   ebp
c000842f:	e8 58 00 00 00       	call   c000848c <ff_memfree>
c0008434:	83 c4 10             	add    esp,0x10
c0008437:	eb 30                	jmp    c0008469 <f_mkfs+0x1116>
c0008439:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000843e:	0f 85 eb fa ff ff    	jne    c0007f2f <f_mkfs+0xbdc>
c0008444:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008448:	81 ff 80 00 00 00    	cmp    edi,0x80
c000844e:	0f 86 b8 f9 ff ff    	jbe    c0007e0c <f_mkfs+0xab9>
c0008454:	e9 bf fb ff ff       	jmp    c0008018 <f_mkfs+0xcc5>
c0008459:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000845e:	0f 85 c0 fa ff ff    	jne    c0007f24 <f_mkfs+0xbd1>
c0008464:	e9 af fb ff ff       	jmp    c0008018 <f_mkfs+0xcc5>
c0008469:	81 c4 9c 00 00 00    	add    esp,0x9c
c000846f:	89 d8                	mov    eax,ebx
c0008471:	5b                   	pop    ebx
c0008472:	5e                   	pop    esi
c0008473:	5f                   	pop    edi
c0008474:	5d                   	pop    ebp
c0008475:	c3                   	ret    

c0008476 <ff_memalloc>:
c0008476:	83 ec 0c             	sub    esp,0xc
c0008479:	83 ec 0c             	sub    esp,0xc
c000847c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008480:	e8 23 74 00 00       	call   c000f8a8 <malloc>
c0008485:	83 c4 10             	add    esp,0x10
c0008488:	83 c4 0c             	add    esp,0xc
c000848b:	c3                   	ret    

c000848c <ff_memfree>:
c000848c:	83 ec 0c             	sub    esp,0xc
c000848f:	83 ec 0c             	sub    esp,0xc
c0008492:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008496:	e8 1d 74 00 00       	call   c000f8b8 <free>
c000849b:	83 c4 10             	add    esp,0x10
c000849e:	90                   	nop
c000849f:	83 c4 0c             	add    esp,0xc
c00084a2:	c3                   	ret    

c00084a3 <ff_uni2oem>:
c00084a3:	83 ec 14             	sub    esp,0x14
c00084a6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00084aa:	66 89 04 24          	mov    WORD PTR [esp],ax
c00084ae:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084b5:	c7 44 24 0c e0 a4 02 c0 	mov    DWORD PTR [esp+0xc],0xc002a4e0
c00084bd:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084c2:	77 0b                	ja     c00084cf <ff_uni2oem+0x2c>
c00084c4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084c8:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084cd:	eb 5b                	jmp    c000852a <ff_uni2oem+0x87>
c00084cf:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084d7:	77 51                	ja     c000852a <ff_uni2oem+0x87>
c00084d9:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084df:	75 49                	jne    c000852a <ff_uni2oem+0x87>
c00084e1:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084e8:	eb 0b                	jmp    c00084f5 <ff_uni2oem+0x52>
c00084ea:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00084ef:	40                   	inc    eax
c00084f0:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084f5:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00084fb:	77 1b                	ja     c0008518 <ff_uni2oem+0x75>
c00084fd:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008502:	01 c0                	add    eax,eax
c0008504:	89 c2                	mov    edx,eax
c0008506:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000850a:	01 d0                	add    eax,edx
c000850c:	66 8b 00             	mov    ax,WORD PTR [eax]
c000850f:	0f b7 c0             	movzx  eax,ax
c0008512:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008516:	75 d2                	jne    c00084ea <ff_uni2oem+0x47>
c0008518:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000851d:	83 e8 80             	sub    eax,0xffffff80
c0008520:	25 ff 00 00 00       	and    eax,0xff
c0008525:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000852a:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000852f:	83 c4 14             	add    esp,0x14
c0008532:	c3                   	ret    

c0008533 <ff_oem2uni>:
c0008533:	83 ec 18             	sub    esp,0x18
c0008536:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000853a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000853e:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008543:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008547:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000854e:	c7 44 24 10 e0 a4 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a4e0
c0008556:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000855c:	77 0b                	ja     c0008569 <ff_oem2uni+0x36>
c000855e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008562:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008567:	eb 2d                	jmp    c0008596 <ff_oem2uni+0x63>
c0008569:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000856f:	75 25                	jne    c0008596 <ff_oem2uni+0x63>
c0008571:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008578:	77 1c                	ja     c0008596 <ff_oem2uni+0x63>
c000857a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000857f:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008584:	01 c0                	add    eax,eax
c0008586:	89 c2                	mov    edx,eax
c0008588:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000858c:	01 d0                	add    eax,edx
c000858e:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008591:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008596:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000859b:	83 c4 18             	add    esp,0x18
c000859e:	c3                   	ret    

c000859f <ff_wtoupper>:
c000859f:	83 ec 10             	sub    esp,0x10
c00085a2:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00085aa:	0f 87 3e 01 00 00    	ja     c00086ee <ff_wtoupper+0x14f>
c00085b0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085b4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00085b9:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085c0:	77 07                	ja     c00085c9 <ff_wtoupper+0x2a>
c00085c2:	b8 e0 a2 02 c0       	mov    eax,0xc002a2e0
c00085c7:	eb 05                	jmp    c00085ce <ff_wtoupper+0x2f>
c00085c9:	b8 20 a2 02 c0       	mov    eax,0xc002a220
c00085ce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085d6:	8d 50 02             	lea    edx,[eax+0x2]
c00085d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085dd:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085e0:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00085e5:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00085eb:	0f 84 f4 00 00 00    	je     c00086e5 <ff_wtoupper+0x146>
c00085f1:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00085f6:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00085fb:	0f 82 e4 00 00 00    	jb     c00086e5 <ff_wtoupper+0x146>
c0008601:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008605:	8d 50 02             	lea    edx,[eax+0x2]
c0008608:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000860c:	66 8b 00             	mov    ax,WORD PTR [eax]
c000860f:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008614:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008619:	66 c1 e8 08          	shr    ax,0x8
c000861d:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008622:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008629:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000862e:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008633:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008638:	01 ca                	add    edx,ecx
c000863a:	39 d0                	cmp    eax,edx
c000863c:	0f 8d 86 00 00 00    	jge    c00086c8 <ff_wtoupper+0x129>
c0008642:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008647:	83 f8 08             	cmp    eax,0x8
c000864a:	0f 87 94 00 00 00    	ja     c00086e4 <ff_wtoupper+0x145>
c0008650:	8b 04 85 e0 a1 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5e20]
c0008657:	ff e0                	jmp    eax
c0008659:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000865e:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008663:	29 c2                	sub    edx,eax
c0008665:	89 d0                	mov    eax,edx
c0008667:	01 c0                	add    eax,eax
c0008669:	89 c2                	mov    edx,eax
c000866b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000866f:	01 d0                	add    eax,edx
c0008671:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008674:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008679:	eb 4b                	jmp    c00086c6 <ff_wtoupper+0x127>
c000867b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008680:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008684:	83 e0 01             	and    eax,0x1
c0008687:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c000868c:	eb 38                	jmp    c00086c6 <ff_wtoupper+0x127>
c000868e:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008694:	eb 30                	jmp    c00086c6 <ff_wtoupper+0x127>
c0008696:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c000869c:	eb 28                	jmp    c00086c6 <ff_wtoupper+0x127>
c000869e:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00086a4:	eb 20                	jmp    c00086c6 <ff_wtoupper+0x127>
c00086a6:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00086ac:	eb 18                	jmp    c00086c6 <ff_wtoupper+0x127>
c00086ae:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00086b4:	eb 10                	jmp    c00086c6 <ff_wtoupper+0x127>
c00086b6:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086bc:	eb 08                	jmp    c00086c6 <ff_wtoupper+0x127>
c00086be:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086c5:	90                   	nop
c00086c6:	eb 1c                	jmp    c00086e4 <ff_wtoupper+0x145>
c00086c8:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086ce:	0f 85 fe fe ff ff    	jne    c00085d2 <ff_wtoupper+0x33>
c00086d4:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086d9:	01 c0                	add    eax,eax
c00086db:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086df:	e9 ee fe ff ff       	jmp    c00085d2 <ff_wtoupper+0x33>
c00086e4:	90                   	nop
c00086e5:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00086ea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00086ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00086f2:	83 c4 10             	add    esp,0x10
c00086f5:	c3                   	ret    

c00086f6 <psrc_set_converter>:
c00086f6:	56                   	push   esi
c00086f7:	89 d6                	mov    esi,edx
c00086f9:	53                   	push   ebx
c00086fa:	89 c3                	mov    ebx,eax
c00086fc:	83 ec 0c             	sub    esp,0xc
c00086ff:	52                   	push   edx
c0008700:	50                   	push   eax
c0008701:	e8 6f 55 00 00       	call   c000dc75 <sinc_set_converter>
c0008706:	83 c4 10             	add    esp,0x10
c0008709:	85 c0                	test   eax,eax
c000870b:	74 25                	je     c0008732 <psrc_set_converter+0x3c>
c000870d:	50                   	push   eax
c000870e:	50                   	push   eax
c000870f:	56                   	push   esi
c0008710:	53                   	push   ebx
c0008711:	e8 17 5d 00 00       	call   c000e42d <zoh_set_converter>
c0008716:	83 c4 10             	add    esp,0x10
c0008719:	85 c0                	test   eax,eax
c000871b:	74 15                	je     c0008732 <psrc_set_converter+0x3c>
c000871d:	51                   	push   ecx
c000871e:	51                   	push   ecx
c000871f:	56                   	push   esi
c0008720:	53                   	push   ebx
c0008721:	e8 0f 11 00 00       	call   c0009835 <linear_set_converter>
c0008726:	83 c4 10             	add    esp,0x10
c0008729:	ba 0a 00 00 00       	mov    edx,0xa
c000872e:	85 c0                	test   eax,eax
c0008730:	75 02                	jne    c0008734 <psrc_set_converter+0x3e>
c0008732:	31 d2                	xor    edx,edx
c0008734:	89 d0                	mov    eax,edx
c0008736:	5a                   	pop    edx
c0008737:	5b                   	pop    ebx
c0008738:	5e                   	pop    esi
c0008739:	c3                   	ret    

c000873a <src_delete>:
c000873a:	53                   	push   ebx
c000873b:	83 ec 08             	sub    esp,0x8
c000873e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008742:	85 db                	test   ebx,ebx
c0008744:	74 29                	je     c000876f <src_delete+0x35>
c0008746:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008749:	85 c0                	test   eax,eax
c000874b:	74 0c                	je     c0008759 <src_delete+0x1f>
c000874d:	83 ec 0c             	sub    esp,0xc
c0008750:	50                   	push   eax
c0008751:	e8 62 71 00 00       	call   c000f8b8 <free>
c0008756:	83 c4 10             	add    esp,0x10
c0008759:	50                   	push   eax
c000875a:	6a 3c                	push   0x3c
c000875c:	6a 00                	push   0x0
c000875e:	53                   	push   ebx
c000875f:	e8 08 80 ff ff       	call   c000076c <memset>
c0008764:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008767:	e8 4c 71 00 00       	call   c000f8b8 <free>
c000876c:	83 c4 10             	add    esp,0x10
c000876f:	31 c0                	xor    eax,eax
c0008771:	83 c4 08             	add    esp,0x8
c0008774:	5b                   	pop    ebx
c0008775:	c3                   	ret    

c0008776 <src_process>:
c0008776:	55                   	push   ebp
c0008777:	57                   	push   edi
c0008778:	56                   	push   esi
c0008779:	53                   	push   ebx
c000877a:	83 ec 1c             	sub    esp,0x1c
c000877d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008781:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008785:	85 ed                	test   ebp,ebp
c0008787:	0f 84 6f 01 00 00    	je     c00088fc <src_process+0x186>
c000878d:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c0008791:	0f 84 6c 01 00 00    	je     c0008903 <src_process+0x18d>
c0008797:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c000879b:	0f 84 62 01 00 00    	je     c0008903 <src_process+0x18d>
c00087a1:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00087a8:	0f 85 5c 01 00 00    	jne    c000890a <src_process+0x194>
c00087ae:	85 db                	test   ebx,ebx
c00087b0:	0f 84 5b 01 00 00    	je     c0008911 <src_process+0x19b>
c00087b6:	8b 33                	mov    esi,DWORD PTR [ebx]
c00087b8:	85 f6                	test   esi,esi
c00087ba:	0f 84 58 01 00 00    	je     c0008918 <src_process+0x1a2>
c00087c0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087c3:	85 ff                	test   edi,edi
c00087c5:	0f 84 4d 01 00 00    	je     c0008918 <src_process+0x1a2>
c00087cb:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087ce:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087d1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087d5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087d9:	68 00 00 70 3f       	push   0x3f700000
c00087de:	6a 00                	push   0x0
c00087e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087e8:	e8 ca 08 02 00       	call   c00290b7 <__ltdf2>
c00087ed:	83 c4 10             	add    esp,0x10
c00087f0:	85 c0                	test   eax,eax
c00087f2:	0f 88 27 01 00 00    	js     c000891f <src_process+0x1a9>
c00087f8:	68 00 00 70 40       	push   0x40700000
c00087fd:	6a 00                	push   0x0
c00087ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008803:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008807:	e8 8d 08 02 00       	call   c0029099 <__gtdf2>
c000880c:	83 c4 10             	add    esp,0x10
c000880f:	85 c0                	test   eax,eax
c0008811:	0f 8f 08 01 00 00    	jg     c000891f <src_process+0x1a9>
c0008817:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000881b:	79 07                	jns    c0008824 <src_process+0xae>
c000881d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008824:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008827:	85 c0                	test   eax,eax
c0008829:	79 50                	jns    c000887b <src_process+0x105>
c000882b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008832:	39 fe                	cmp    esi,edi
c0008834:	72 37                	jb     c000886d <src_process+0xf7>
c0008836:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000883d:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008844:	68 00 00 70 3f       	push   0x3f700000
c0008849:	6a 00                	push   0x0
c000884b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000884e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008851:	e8 61 08 02 00       	call   c00290b7 <__ltdf2>
c0008856:	83 c4 10             	add    esp,0x10
c0008859:	85 c0                	test   eax,eax
c000885b:	79 37                	jns    c0008894 <src_process+0x11e>
c000885d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008861:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008865:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008868:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000886b:	eb 27                	jmp    c0008894 <src_process+0x11e>
c000886d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008870:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008874:	8d 04 86             	lea    eax,[esi+eax*4]
c0008877:	39 c7                	cmp    edi,eax
c0008879:	eb 0d                	jmp    c0008888 <src_process+0x112>
c000887b:	39 fe                	cmp    esi,edi
c000887d:	72 ee                	jb     c000886d <src_process+0xf7>
c000887f:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008883:	8d 04 87             	lea    eax,[edi+eax*4]
c0008886:	39 c6                	cmp    esi,eax
c0008888:	73 ac                	jae    c0008836 <src_process+0xc0>
c000888a:	b8 10 00 00 00       	mov    eax,0x10
c000888f:	e9 90 00 00 00       	jmp    c0008924 <src_process+0x1ae>
c0008894:	83 ec 10             	sub    esp,0x10
c0008897:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000889a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000889d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00088a0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00088a3:	e8 14 ff 01 00       	call   c00287bc <__subdf3>
c00088a8:	83 c4 18             	add    esp,0x18
c00088ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00088af:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00088b3:	52                   	push   edx
c00088b4:	50                   	push   eax
c00088b5:	e8 96 09 02 00       	call   c0029250 <fabs>
c00088ba:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088be:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088c2:	83 c4 10             	add    esp,0x10
c00088c5:	68 af 03 d2 3c       	push   0x3cd203af
c00088ca:	68 16 56 e7 9e       	push   0x9ee75616
c00088cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088d7:	e8 db 07 02 00       	call   c00290b7 <__ltdf2>
c00088dc:	83 c4 10             	add    esp,0x10
c00088df:	85 c0                	test   eax,eax
c00088e1:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00088e5:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00088e9:	79 05                	jns    c00088f0 <src_process+0x17a>
c00088eb:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00088ee:	eb 03                	jmp    c00088f3 <src_process+0x17d>
c00088f0:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00088f3:	83 c4 1c             	add    esp,0x1c
c00088f6:	5b                   	pop    ebx
c00088f7:	5e                   	pop    esi
c00088f8:	5f                   	pop    edi
c00088f9:	5d                   	pop    ebp
c00088fa:	ff e0                	jmp    eax
c00088fc:	b8 02 00 00 00       	mov    eax,0x2
c0008901:	eb 21                	jmp    c0008924 <src_process+0x1ae>
c0008903:	b8 07 00 00 00       	mov    eax,0x7
c0008908:	eb 1a                	jmp    c0008924 <src_process+0x1ae>
c000890a:	b8 12 00 00 00       	mov    eax,0x12
c000890f:	eb 13                	jmp    c0008924 <src_process+0x1ae>
c0008911:	b8 03 00 00 00       	mov    eax,0x3
c0008916:	eb 0c                	jmp    c0008924 <src_process+0x1ae>
c0008918:	b8 04 00 00 00       	mov    eax,0x4
c000891d:	eb 05                	jmp    c0008924 <src_process+0x1ae>
c000891f:	b8 06 00 00 00       	mov    eax,0x6
c0008924:	83 c4 1c             	add    esp,0x1c
c0008927:	5b                   	pop    ebx
c0008928:	5e                   	pop    esi
c0008929:	5f                   	pop    edi
c000892a:	5d                   	pop    ebp
c000892b:	c3                   	ret    

c000892c <src_callback_read>:
c000892c:	55                   	push   ebp
c000892d:	57                   	push   edi
c000892e:	56                   	push   esi
c000892f:	53                   	push   ebx
c0008930:	83 ec 3c             	sub    esp,0x3c
c0008933:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008937:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000893b:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000893f:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008943:	85 ed                	test   ebp,ebp
c0008945:	0f 8e 52 01 00 00    	jle    c0008a9d <src_callback_read+0x171>
c000894b:	85 db                	test   ebx,ebx
c000894d:	0f 84 4a 01 00 00    	je     c0008a9d <src_callback_read+0x171>
c0008953:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c000895a:	74 0c                	je     c0008968 <src_callback_read+0x3c>
c000895c:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008963:	e9 35 01 00 00       	jmp    c0008a9d <src_callback_read+0x171>
c0008968:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000896c:	75 0c                	jne    c000897a <src_callback_read+0x4e>
c000896e:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008975:	e9 23 01 00 00       	jmp    c0008a9d <src_callback_read+0x171>
c000897a:	51                   	push   ecx
c000897b:	6a 24                	push   0x24
c000897d:	6a 00                	push   0x0
c000897f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008983:	50                   	push   eax
c0008984:	e8 e3 7d ff ff       	call   c000076c <memset>
c0008989:	83 c4 10             	add    esp,0x10
c000898c:	68 00 00 70 3f       	push   0x3f700000
c0008991:	6a 00                	push   0x0
c0008993:	57                   	push   edi
c0008994:	56                   	push   esi
c0008995:	e8 1d 07 02 00       	call   c00290b7 <__ltdf2>
c000899a:	83 c4 10             	add    esp,0x10
c000899d:	85 c0                	test   eax,eax
c000899f:	78 3e                	js     c00089df <src_callback_read+0xb3>
c00089a1:	68 00 00 70 40       	push   0x40700000
c00089a6:	6a 00                	push   0x0
c00089a8:	57                   	push   edi
c00089a9:	56                   	push   esi
c00089aa:	e8 ea 06 02 00       	call   c0029099 <__gtdf2>
c00089af:	83 c4 10             	add    esp,0x10
c00089b2:	85 c0                	test   eax,eax
c00089b4:	7f 29                	jg     c00089df <src_callback_read+0xb3>
c00089b6:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00089ba:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089be:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089c2:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089c6:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089c9:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089cd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089d1:	31 f6                	xor    esi,esi
c00089d3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089d6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089da:	e9 97 00 00 00       	jmp    c0008a76 <src_callback_read+0x14a>
c00089df:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00089e6:	e9 b2 00 00 00       	jmp    c0008a9d <src_callback_read+0x171>
c00089eb:	8d 44 24 04          	lea    eax,[esp+0x4]
c00089ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00089f3:	52                   	push   edx
c00089f4:	52                   	push   edx
c00089f5:	8d 44 24 10          	lea    eax,[esp+0x10]
c00089f9:	50                   	push   eax
c00089fa:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00089fd:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008a00:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008a04:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008a08:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008a0c:	83 c4 10             	add    esp,0x10
c0008a0f:	85 c0                	test   eax,eax
c0008a11:	75 08                	jne    c0008a1b <src_callback_read+0xef>
c0008a13:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008a1b:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a22:	50                   	push   eax
c0008a23:	50                   	push   eax
c0008a24:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a28:	50                   	push   eax
c0008a29:	53                   	push   ebx
c0008a2a:	e8 47 fd ff ff       	call   c0008776 <src_process>
c0008a2f:	83 c4 10             	add    esp,0x10
c0008a32:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a39:	85 c0                	test   eax,eax
c0008a3b:	75 49                	jne    c0008a86 <src_callback_read+0x15a>
c0008a3d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a41:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a44:	89 f9                	mov    ecx,edi
c0008a46:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a4a:	0f af ca             	imul   ecx,edx
c0008a4d:	c1 e1 02             	shl    ecx,0x2
c0008a50:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a54:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a58:	0f af d1             	imul   edx,ecx
c0008a5b:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a5f:	c1 e2 02             	shl    edx,0x2
c0008a62:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a66:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a69:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a6e:	74 12                	je     c0008a82 <src_callback_read+0x156>
c0008a70:	39 d5                	cmp    ebp,edx
c0008a72:	7e 14                	jle    c0008a88 <src_callback_read+0x15c>
c0008a74:	89 d6                	mov    esi,edx
c0008a76:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a7b:	75 9e                	jne    c0008a1b <src_callback_read+0xef>
c0008a7d:	e9 69 ff ff ff       	jmp    c00089eb <src_callback_read+0xbf>
c0008a82:	85 c9                	test   ecx,ecx
c0008a84:	75 ea                	jne    c0008a70 <src_callback_read+0x144>
c0008a86:	89 f2                	mov    edx,esi
c0008a88:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008a8c:	85 c0                	test   eax,eax
c0008a8e:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008a91:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008a95:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008a98:	74 05                	je     c0008a9f <src_callback_read+0x173>
c0008a9a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008a9d:	31 d2                	xor    edx,edx
c0008a9f:	83 c4 3c             	add    esp,0x3c
c0008aa2:	89 d0                	mov    eax,edx
c0008aa4:	5b                   	pop    ebx
c0008aa5:	5e                   	pop    esi
c0008aa6:	5f                   	pop    edi
c0008aa7:	5d                   	pop    ebp
c0008aa8:	c3                   	ret    

c0008aa9 <src_set_ratio>:
c0008aa9:	57                   	push   edi
c0008aaa:	ba 02 00 00 00       	mov    edx,0x2
c0008aaf:	56                   	push   esi
c0008ab0:	53                   	push   ebx
c0008ab1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ab5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008ab9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008abd:	85 db                	test   ebx,ebx
c0008abf:	74 4c                	je     c0008b0d <src_set_ratio+0x64>
c0008ac1:	ba 07 00 00 00       	mov    edx,0x7
c0008ac6:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008aca:	74 41                	je     c0008b0d <src_set_ratio+0x64>
c0008acc:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008ad0:	74 3b                	je     c0008b0d <src_set_ratio+0x64>
c0008ad2:	68 00 00 70 3f       	push   0x3f700000
c0008ad7:	6a 00                	push   0x0
c0008ad9:	57                   	push   edi
c0008ada:	56                   	push   esi
c0008adb:	e8 d7 05 02 00       	call   c00290b7 <__ltdf2>
c0008ae0:	83 c4 10             	add    esp,0x10
c0008ae3:	ba 06 00 00 00       	mov    edx,0x6
c0008ae8:	85 c0                	test   eax,eax
c0008aea:	78 21                	js     c0008b0d <src_set_ratio+0x64>
c0008aec:	68 00 00 70 40       	push   0x40700000
c0008af1:	6a 00                	push   0x0
c0008af3:	57                   	push   edi
c0008af4:	56                   	push   esi
c0008af5:	e8 9f 05 02 00       	call   c0029099 <__gtdf2>
c0008afa:	83 c4 10             	add    esp,0x10
c0008afd:	ba 06 00 00 00       	mov    edx,0x6
c0008b02:	85 c0                	test   eax,eax
c0008b04:	7f 07                	jg     c0008b0d <src_set_ratio+0x64>
c0008b06:	89 33                	mov    DWORD PTR [ebx],esi
c0008b08:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008b0b:	31 d2                	xor    edx,edx
c0008b0d:	5b                   	pop    ebx
c0008b0e:	89 d0                	mov    eax,edx
c0008b10:	5e                   	pop    esi
c0008b11:	5f                   	pop    edi
c0008b12:	c3                   	ret    

c0008b13 <src_get_channels>:
c0008b13:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b17:	b8 02 00 00 00       	mov    eax,0x2
c0008b1c:	85 d2                	test   edx,edx
c0008b1e:	74 14                	je     c0008b34 <src_get_channels+0x21>
c0008b20:	b8 07 00 00 00       	mov    eax,0x7
c0008b25:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b29:	74 09                	je     c0008b34 <src_get_channels+0x21>
c0008b2b:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b2f:	74 03                	je     c0008b34 <src_get_channels+0x21>
c0008b31:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b34:	c3                   	ret    

c0008b35 <src_reset>:
c0008b35:	53                   	push   ebx
c0008b36:	b8 02 00 00 00       	mov    eax,0x2
c0008b3b:	83 ec 08             	sub    esp,0x8
c0008b3e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b42:	85 db                	test   ebx,ebx
c0008b44:	74 36                	je     c0008b7c <src_reset+0x47>
c0008b46:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b49:	85 c0                	test   eax,eax
c0008b4b:	74 09                	je     c0008b56 <src_reset+0x21>
c0008b4d:	83 ec 0c             	sub    esp,0xc
c0008b50:	53                   	push   ebx
c0008b51:	ff d0                	call   eax
c0008b53:	83 c4 10             	add    esp,0x10
c0008b56:	31 c0                	xor    eax,eax
c0008b58:	31 d2                	xor    edx,edx
c0008b5a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b5d:	89 03                	mov    DWORD PTR [ebx],eax
c0008b5f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b62:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b65:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b6c:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b73:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b7a:	31 c0                	xor    eax,eax
c0008b7c:	83 c4 08             	add    esp,0x8
c0008b7f:	5b                   	pop    ebx
c0008b80:	c3                   	ret    

c0008b81 <src_new>:
c0008b81:	57                   	push   edi
c0008b82:	56                   	push   esi
c0008b83:	53                   	push   ebx
c0008b84:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008b88:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008b8c:	85 f6                	test   esi,esi
c0008b8e:	74 73                	je     c0008c03 <src_new+0x82>
c0008b90:	85 ff                	test   edi,edi
c0008b92:	7f 08                	jg     c0008b9c <src_new+0x1b>
c0008b94:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008b9a:	eb 1e                	jmp    c0008bba <src_new+0x39>
c0008b9c:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008ba2:	50                   	push   eax
c0008ba3:	50                   	push   eax
c0008ba4:	6a 3c                	push   0x3c
c0008ba6:	6a 01                	push   0x1
c0008ba8:	e8 2b 6d 00 00       	call   c000f8d8 <calloc>
c0008bad:	83 c4 10             	add    esp,0x10
c0008bb0:	89 c3                	mov    ebx,eax
c0008bb2:	85 c0                	test   eax,eax
c0008bb4:	75 10                	jne    c0008bc6 <src_new+0x45>
c0008bb6:	85 f6                	test   esi,esi
c0008bb8:	75 04                	jne    c0008bbe <src_new+0x3d>
c0008bba:	31 db                	xor    ebx,ebx
c0008bbc:	eb 4b                	jmp    c0008c09 <src_new+0x88>
c0008bbe:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008bc4:	eb 43                	jmp    c0008c09 <src_new+0x88>
c0008bc6:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008bc9:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bd0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bd4:	e8 1d fb ff ff       	call   c00086f6 <psrc_set_converter>
c0008bd9:	85 c0                	test   eax,eax
c0008bdb:	74 18                	je     c0008bf5 <src_new+0x74>
c0008bdd:	85 f6                	test   esi,esi
c0008bdf:	74 06                	je     c0008be7 <src_new+0x66>
c0008be1:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008be7:	83 ec 0c             	sub    esp,0xc
c0008bea:	53                   	push   ebx
c0008beb:	31 db                	xor    ebx,ebx
c0008bed:	e8 c6 6c 00 00       	call   c000f8b8 <free>
c0008bf2:	83 c4 10             	add    esp,0x10
c0008bf5:	83 ec 0c             	sub    esp,0xc
c0008bf8:	53                   	push   ebx
c0008bf9:	e8 37 ff ff ff       	call   c0008b35 <src_reset>
c0008bfe:	83 c4 10             	add    esp,0x10
c0008c01:	eb 06                	jmp    c0008c09 <src_new+0x88>
c0008c03:	85 ff                	test   edi,edi
c0008c05:	7f 9b                	jg     c0008ba2 <src_new+0x21>
c0008c07:	eb b1                	jmp    c0008bba <src_new+0x39>
c0008c09:	89 d8                	mov    eax,ebx
c0008c0b:	5b                   	pop    ebx
c0008c0c:	5e                   	pop    esi
c0008c0d:	5f                   	pop    edi
c0008c0e:	c3                   	ret    

c0008c0f <src_callback_new>:
c0008c0f:	56                   	push   esi
c0008c10:	53                   	push   ebx
c0008c11:	53                   	push   ebx
c0008c12:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008c16:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c1a:	85 f6                	test   esi,esi
c0008c1c:	75 0e                	jne    c0008c2c <src_callback_new+0x1d>
c0008c1e:	31 db                	xor    ebx,ebx
c0008c20:	85 c0                	test   eax,eax
c0008c22:	74 47                	je     c0008c6b <src_callback_new+0x5c>
c0008c24:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c2a:	eb 3f                	jmp    c0008c6b <src_callback_new+0x5c>
c0008c2c:	85 c0                	test   eax,eax
c0008c2e:	74 06                	je     c0008c36 <src_callback_new+0x27>
c0008c30:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c36:	51                   	push   ecx
c0008c37:	50                   	push   eax
c0008c38:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c3c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c40:	e8 3c ff ff ff       	call   c0008b81 <src_new>
c0008c45:	83 c4 10             	add    esp,0x10
c0008c48:	89 c3                	mov    ebx,eax
c0008c4a:	85 c0                	test   eax,eax
c0008c4c:	74 1d                	je     c0008c6b <src_callback_new+0x5c>
c0008c4e:	83 ec 0c             	sub    esp,0xc
c0008c51:	50                   	push   eax
c0008c52:	e8 de fe ff ff       	call   c0008b35 <src_reset>
c0008c57:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c5b:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c62:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c65:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c68:	83 c4 10             	add    esp,0x10
c0008c6b:	89 d8                	mov    eax,ebx
c0008c6d:	5a                   	pop    edx
c0008c6e:	5b                   	pop    ebx
c0008c6f:	5e                   	pop    esi
c0008c70:	c3                   	ret    

c0008c71 <src_get_name>:
c0008c71:	53                   	push   ebx
c0008c72:	83 ec 14             	sub    esp,0x14
c0008c75:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c79:	53                   	push   ebx
c0008c7a:	e8 d0 4f 00 00       	call   c000dc4f <sinc_get_name>
c0008c7f:	83 c4 10             	add    esp,0x10
c0008c82:	85 c0                	test   eax,eax
c0008c84:	75 1d                	jne    c0008ca3 <src_get_name+0x32>
c0008c86:	83 ec 0c             	sub    esp,0xc
c0008c89:	53                   	push   ebx
c0008c8a:	e8 80 57 00 00       	call   c000e40f <zoh_get_name>
c0008c8f:	83 c4 10             	add    esp,0x10
c0008c92:	85 c0                	test   eax,eax
c0008c94:	75 0d                	jne    c0008ca3 <src_get_name+0x32>
c0008c96:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008c9a:	83 c4 08             	add    esp,0x8
c0008c9d:	5b                   	pop    ebx
c0008c9e:	e9 74 0b 00 00       	jmp    c0009817 <linear_get_name>
c0008ca3:	83 c4 08             	add    esp,0x8
c0008ca6:	5b                   	pop    ebx
c0008ca7:	c3                   	ret    

c0008ca8 <src_get_description>:
c0008ca8:	53                   	push   ebx
c0008ca9:	83 ec 14             	sub    esp,0x14
c0008cac:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008cb0:	53                   	push   ebx
c0008cb1:	e8 ac 4f 00 00       	call   c000dc62 <sinc_get_description>
c0008cb6:	83 c4 10             	add    esp,0x10
c0008cb9:	85 c0                	test   eax,eax
c0008cbb:	75 1d                	jne    c0008cda <src_get_description+0x32>
c0008cbd:	83 ec 0c             	sub    esp,0xc
c0008cc0:	53                   	push   ebx
c0008cc1:	e8 58 57 00 00       	call   c000e41e <zoh_get_description>
c0008cc6:	83 c4 10             	add    esp,0x10
c0008cc9:	85 c0                	test   eax,eax
c0008ccb:	75 0d                	jne    c0008cda <src_get_description+0x32>
c0008ccd:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cd1:	83 c4 08             	add    esp,0x8
c0008cd4:	5b                   	pop    ebx
c0008cd5:	e9 4c 0b 00 00       	jmp    c0009826 <linear_get_description>
c0008cda:	83 c4 08             	add    esp,0x8
c0008cdd:	5b                   	pop    ebx
c0008cde:	c3                   	ret    

c0008cdf <src_get_version>:
c0008cdf:	b8 e0 a5 02 c0       	mov    eax,0xc002a5e0
c0008ce4:	c3                   	ret    

c0008ce5 <src_is_valid_ratio>:
c0008ce5:	83 ec 1c             	sub    esp,0x1c
c0008ce8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008cec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cf0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cf4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cf8:	68 00 00 70 3f       	push   0x3f700000
c0008cfd:	6a 00                	push   0x0
c0008cff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d07:	e8 ab 03 02 00       	call   c00290b7 <__ltdf2>
c0008d0c:	83 c4 10             	add    esp,0x10
c0008d0f:	31 d2                	xor    edx,edx
c0008d11:	85 c0                	test   eax,eax
c0008d13:	78 1e                	js     c0008d33 <src_is_valid_ratio+0x4e>
c0008d15:	68 00 00 70 40       	push   0x40700000
c0008d1a:	6a 00                	push   0x0
c0008d1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d24:	e8 70 03 02 00       	call   c0029099 <__gtdf2>
c0008d29:	31 d2                	xor    edx,edx
c0008d2b:	83 c4 10             	add    esp,0x10
c0008d2e:	85 c0                	test   eax,eax
c0008d30:	0f 9e c2             	setle  dl
c0008d33:	89 d0                	mov    eax,edx
c0008d35:	83 c4 1c             	add    esp,0x1c
c0008d38:	c3                   	ret    

c0008d39 <src_error>:
c0008d39:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d3d:	31 c0                	xor    eax,eax
c0008d3f:	85 d2                	test   edx,edx
c0008d41:	74 03                	je     c0008d46 <src_error+0xd>
c0008d43:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d46:	c3                   	ret    

c0008d47 <src_strerror>:
c0008d47:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d4b:	31 c0                	xor    eax,eax
c0008d4d:	83 fa 17             	cmp    edx,0x17
c0008d50:	77 07                	ja     c0008d59 <src_strerror+0x12>
c0008d52:	8b 04 95 40 aa 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd55c0]
c0008d59:	c3                   	ret    

c0008d5a <src_simple>:
c0008d5a:	56                   	push   esi
c0008d5b:	53                   	push   ebx
c0008d5c:	83 ec 18             	sub    esp,0x18
c0008d5f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d63:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d67:	50                   	push   eax
c0008d68:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d6c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d70:	e8 0c fe ff ff       	call   c0008b81 <src_new>
c0008d75:	83 c4 10             	add    esp,0x10
c0008d78:	85 c0                	test   eax,eax
c0008d7a:	75 06                	jne    c0008d82 <src_simple+0x28>
c0008d7c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d80:	eb 25                	jmp    c0008da7 <src_simple+0x4d>
c0008d82:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008d89:	89 c3                	mov    ebx,eax
c0008d8b:	50                   	push   eax
c0008d8c:	50                   	push   eax
c0008d8d:	56                   	push   esi
c0008d8e:	53                   	push   ebx
c0008d8f:	e8 e2 f9 ff ff       	call   c0008776 <src_process>
c0008d94:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008d97:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008d9b:	e8 9a f9 ff ff       	call   c000873a <src_delete>
c0008da0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008da4:	83 c4 10             	add    esp,0x10
c0008da7:	83 c4 14             	add    esp,0x14
c0008daa:	5b                   	pop    ebx
c0008dab:	5e                   	pop    esi
c0008dac:	c3                   	ret    

c0008dad <src_short_to_float_array>:
c0008dad:	53                   	push   ebx
c0008dae:	83 ec 18             	sub    esp,0x18
c0008db1:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008db5:	85 db                	test   ebx,ebx
c0008db7:	74 54                	je     c0008e0d <src_short_to_float_array+0x60>
c0008db9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008dbd:	4b                   	dec    ebx
c0008dbe:	83 ec 0c             	sub    esp,0xc
c0008dc1:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008dc5:	50                   	push   eax
c0008dc6:	e8 80 00 02 00       	call   c0028e4b <__floatsidf>
c0008dcb:	83 c4 10             	add    esp,0x10
c0008dce:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008dd2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008dd6:	68 00 00 00 3f       	push   0x3f000000
c0008ddb:	6a 00                	push   0x0
c0008ddd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008de1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008de5:	e8 fe f9 01 00       	call   c00287e8 <__muldf3>
c0008dea:	59                   	pop    ecx
c0008deb:	59                   	pop    ecx
c0008dec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008df0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008df4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008df8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dfc:	e8 ba 02 02 00       	call   c00290bb <__truncdfsf2>
c0008e01:	83 c4 10             	add    esp,0x10
c0008e04:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e08:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008e0b:	eb a8                	jmp    c0008db5 <src_short_to_float_array+0x8>
c0008e0d:	83 c4 18             	add    esp,0x18
c0008e10:	5b                   	pop    ebx
c0008e11:	c3                   	ret    

c0008e12 <src_float_to_short_array>:
c0008e12:	56                   	push   esi
c0008e13:	53                   	push   ebx
c0008e14:	83 ec 14             	sub    esp,0x14
c0008e17:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008e1b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e1f:	85 db                	test   ebx,ebx
c0008e21:	0f 84 a4 00 00 00    	je     c0008ecb <src_float_to_short_array+0xb9>
c0008e27:	83 ec 0c             	sub    esp,0xc
c0008e2a:	4b                   	dec    ebx
c0008e2b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e2f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e32:	e8 a8 03 02 00       	call   c00291df <__extendsfdf2>
c0008e37:	83 c4 10             	add    esp,0x10
c0008e3a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e3e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e42:	68 00 00 e0 41       	push   0x41e00000
c0008e47:	6a 00                	push   0x0
c0008e49:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e4d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e51:	e8 92 f9 01 00       	call   c00287e8 <__muldf3>
c0008e56:	83 c4 10             	add    esp,0x10
c0008e59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e5d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e61:	68 ff ff df 41       	push   0x41dfffff
c0008e66:	68 00 00 c0 ff       	push   0xffc00000
c0008e6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e73:	e8 3d 02 02 00       	call   c00290b5 <__gedf2>
c0008e78:	83 c4 10             	add    esp,0x10
c0008e7b:	85 c0                	test   eax,eax
c0008e7d:	78 08                	js     c0008e87 <src_float_to_short_array+0x75>
c0008e7f:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008e85:	eb 98                	jmp    c0008e1f <src_float_to_short_array+0xd>
c0008e87:	68 00 00 e0 c1       	push   0xc1e00000
c0008e8c:	6a 00                	push   0x0
c0008e8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e96:	e8 1e 02 02 00       	call   c00290b9 <__ledf2>
c0008e9b:	83 c4 10             	add    esp,0x10
c0008e9e:	85 c0                	test   eax,eax
c0008ea0:	7f 0b                	jg     c0008ead <src_float_to_short_array+0x9b>
c0008ea2:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008ea8:	e9 72 ff ff ff       	jmp    c0008e1f <src_float_to_short_array+0xd>
c0008ead:	50                   	push   eax
c0008eae:	50                   	push   eax
c0008eaf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb7:	e8 b4 03 02 00       	call   c0029270 <lrint>
c0008ebc:	83 c4 10             	add    esp,0x10
c0008ebf:	c1 f8 10             	sar    eax,0x10
c0008ec2:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ec6:	e9 54 ff ff ff       	jmp    c0008e1f <src_float_to_short_array+0xd>
c0008ecb:	83 c4 14             	add    esp,0x14
c0008ece:	5b                   	pop    ebx
c0008ecf:	5e                   	pop    esi
c0008ed0:	c3                   	ret    

c0008ed1 <src_int_to_float_array>:
c0008ed1:	53                   	push   ebx
c0008ed2:	83 ec 18             	sub    esp,0x18
c0008ed5:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ed9:	85 db                	test   ebx,ebx
c0008edb:	74 52                	je     c0008f2f <src_int_to_float_array+0x5e>
c0008edd:	83 ec 0c             	sub    esp,0xc
c0008ee0:	4b                   	dec    ebx
c0008ee1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008ee5:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008ee8:	e8 5e ff 01 00       	call   c0028e4b <__floatsidf>
c0008eed:	83 c4 10             	add    esp,0x10
c0008ef0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ef4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008ef8:	68 00 00 00 3e       	push   0x3e000000
c0008efd:	6a 00                	push   0x0
c0008eff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f07:	e8 dc f8 01 00       	call   c00287e8 <__muldf3>
c0008f0c:	59                   	pop    ecx
c0008f0d:	59                   	pop    ecx
c0008f0e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f12:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f1e:	e8 98 01 02 00       	call   c00290bb <__truncdfsf2>
c0008f23:	83 c4 10             	add    esp,0x10
c0008f26:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f2a:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f2d:	eb aa                	jmp    c0008ed9 <src_int_to_float_array+0x8>
c0008f2f:	83 c4 18             	add    esp,0x18
c0008f32:	5b                   	pop    ebx
c0008f33:	c3                   	ret    

c0008f34 <src_float_to_int_array>:
c0008f34:	56                   	push   esi
c0008f35:	53                   	push   ebx
c0008f36:	83 ec 14             	sub    esp,0x14
c0008f39:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f3d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f41:	85 db                	test   ebx,ebx
c0008f43:	0f 84 a2 00 00 00    	je     c0008feb <src_float_to_int_array+0xb7>
c0008f49:	83 ec 0c             	sub    esp,0xc
c0008f4c:	4b                   	dec    ebx
c0008f4d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f51:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f54:	e8 86 02 02 00       	call   c00291df <__extendsfdf2>
c0008f59:	83 c4 10             	add    esp,0x10
c0008f5c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f60:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f64:	68 00 00 e0 41       	push   0x41e00000
c0008f69:	6a 00                	push   0x0
c0008f6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f73:	e8 70 f8 01 00       	call   c00287e8 <__muldf3>
c0008f78:	83 c4 10             	add    esp,0x10
c0008f7b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f7f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f83:	68 ff ff df 41       	push   0x41dfffff
c0008f88:	68 00 00 c0 ff       	push   0xffc00000
c0008f8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f91:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f95:	e8 1b 01 02 00       	call   c00290b5 <__gedf2>
c0008f9a:	83 c4 10             	add    esp,0x10
c0008f9d:	85 c0                	test   eax,eax
c0008f9f:	78 09                	js     c0008faa <src_float_to_int_array+0x76>
c0008fa1:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008fa8:	eb 97                	jmp    c0008f41 <src_float_to_int_array+0xd>
c0008faa:	68 00 00 e0 c1       	push   0xc1e00000
c0008faf:	6a 00                	push   0x0
c0008fb1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb9:	e8 fb 00 02 00       	call   c00290b9 <__ledf2>
c0008fbe:	83 c4 10             	add    esp,0x10
c0008fc1:	85 c0                	test   eax,eax
c0008fc3:	7f 0c                	jg     c0008fd1 <src_float_to_int_array+0x9d>
c0008fc5:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fcc:	e9 70 ff ff ff       	jmp    c0008f41 <src_float_to_int_array+0xd>
c0008fd1:	50                   	push   eax
c0008fd2:	50                   	push   eax
c0008fd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fdb:	e8 90 02 02 00       	call   c0029270 <lrint>
c0008fe0:	83 c4 10             	add    esp,0x10
c0008fe3:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008fe6:	e9 56 ff ff ff       	jmp    c0008f41 <src_float_to_int_array+0xd>
c0008feb:	83 c4 14             	add    esp,0x14
c0008fee:	5b                   	pop    ebx
c0008fef:	5e                   	pop    esi
c0008ff0:	c3                   	ret    

c0008ff1 <linear_vari_process>:
c0008ff1:	55                   	push   ebp
c0008ff2:	31 d2                	xor    edx,edx
c0008ff4:	57                   	push   edi
c0008ff5:	56                   	push   esi
c0008ff6:	53                   	push   ebx
c0008ff7:	83 ec 3c             	sub    esp,0x3c
c0008ffa:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008ffe:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0009002:	0f 8e d3 07 00 00    	jle    c00097db <linear_vari_process+0x7ea>
c0009008:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000900c:	ba 05 00 00 00       	mov    edx,0x5
c0009011:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0009014:	85 db                	test   ebx,ebx
c0009016:	0f 84 bf 07 00 00    	je     c00097db <linear_vari_process+0x7ea>
c000901c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000901f:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009023:	74 19                	je     c000903e <linear_vari_process+0x4d>
c0009025:	31 d2                	xor    edx,edx
c0009027:	39 c2                	cmp    edx,eax
c0009029:	7d 0c                	jge    c0009037 <linear_vari_process+0x46>
c000902b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000902d:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0009030:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009034:	42                   	inc    edx
c0009035:	eb f0                	jmp    c0009027 <linear_vari_process+0x36>
c0009037:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000903e:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0009041:	0f af d0             	imul   edx,eax
c0009044:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0009047:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000904b:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009052:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009055:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000905c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009060:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009063:	8b 00                	mov    eax,DWORD PTR [eax]
c0009065:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009069:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000906d:	68 00 00 70 3f       	push   0x3f700000
c0009072:	6a 00                	push   0x0
c0009074:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009078:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000907c:	e8 36 00 02 00       	call   c00290b7 <__ltdf2>
c0009081:	83 c4 10             	add    esp,0x10
c0009084:	ba 16 00 00 00       	mov    edx,0x16
c0009089:	85 c0                	test   eax,eax
c000908b:	0f 88 4a 07 00 00    	js     c00097db <linear_vari_process+0x7ea>
c0009091:	68 00 00 70 40       	push   0x40700000
c0009096:	6a 00                	push   0x0
c0009098:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000909c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090a0:	e8 f4 ff 01 00       	call   c0029099 <__gtdf2>
c00090a5:	83 c4 10             	add    esp,0x10
c00090a8:	ba 16 00 00 00       	mov    edx,0x16
c00090ad:	85 c0                	test   eax,eax
c00090af:	0f 8f 26 07 00 00    	jg     c00097db <linear_vari_process+0x7ea>
c00090b5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00090b9:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090bc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090c3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090c7:	68 00 00 f0 3f       	push   0x3ff00000
c00090cc:	6a 00                	push   0x0
c00090ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090d6:	e8 dc ff 01 00       	call   c00290b7 <__ltdf2>
c00090db:	83 c4 10             	add    esp,0x10
c00090de:	85 c0                	test   eax,eax
c00090e0:	0f 89 89 02 00 00    	jns    c000936f <linear_vari_process+0x37e>
c00090e6:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c00090e9:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c00090ec:	0f 8d 7d 02 00 00    	jge    c000936f <linear_vari_process+0x37e>
c00090f2:	83 ec 0c             	sub    esp,0xc
c00090f5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00090f8:	e8 4e fd 01 00       	call   c0028e4b <__floatsidf>
c00090fd:	83 c4 10             	add    esp,0x10
c0009100:	89 04 24             	mov    DWORD PTR [esp],eax
c0009103:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009107:	68 00 00 f0 3f       	push   0x3ff00000
c000910c:	6a 00                	push   0x0
c000910e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009112:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009116:	e8 50 f0 01 00       	call   c002816b <__adddf3>
c000911b:	83 c4 10             	add    esp,0x10
c000911e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009122:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009126:	52                   	push   edx
c0009127:	50                   	push   eax
c0009128:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000912c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009130:	e8 b3 f6 01 00       	call   c00287e8 <__muldf3>
c0009135:	5d                   	pop    ebp
c0009136:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000913a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000913e:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0009141:	e8 05 fd 01 00       	call   c0028e4b <__floatsidf>
c0009146:	83 c4 10             	add    esp,0x10
c0009149:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000914d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009151:	52                   	push   edx
c0009152:	50                   	push   eax
c0009153:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009157:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000915b:	e8 0b f0 01 00       	call   c002816b <__adddf3>
c0009160:	59                   	pop    ecx
c0009161:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009165:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009169:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000916c:	e8 da fc 01 00       	call   c0028e4b <__floatsidf>
c0009171:	83 c4 10             	add    esp,0x10
c0009174:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009178:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000917c:	52                   	push   edx
c000917d:	50                   	push   eax
c000917e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009182:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009186:	e8 2a ff 01 00       	call   c00290b5 <__gedf2>
c000918b:	83 c4 10             	add    esp,0x10
c000918e:	85 c0                	test   eax,eax
c0009190:	0f 89 d9 01 00 00    	jns    c000936f <linear_vari_process+0x37e>
c0009196:	85 ff                	test   edi,edi
c0009198:	0f 8e f4 00 00 00    	jle    c0009292 <linear_vari_process+0x2a1>
c000919e:	83 ec 10             	sub    esp,0x10
c00091a1:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091a4:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091a7:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00091ab:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00091ae:	ff 30                	push   DWORD PTR [eax]
c00091b0:	e8 07 f6 01 00       	call   c00287bc <__subdf3>
c00091b5:	83 c4 18             	add    esp,0x18
c00091b8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091bc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091c0:	52                   	push   edx
c00091c1:	50                   	push   eax
c00091c2:	e8 89 00 02 00       	call   c0029250 <fabs>
c00091c7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091cb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091cf:	83 c4 10             	add    esp,0x10
c00091d2:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091d7:	68 23 42 92 0c       	push   0xc924223
c00091dc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091e0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091e4:	e8 b0 fe 01 00       	call   c0029099 <__gtdf2>
c00091e9:	83 c4 10             	add    esp,0x10
c00091ec:	85 c0                	test   eax,eax
c00091ee:	0f 8e 9e 00 00 00    	jle    c0009292 <linear_vari_process+0x2a1>
c00091f4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00091f8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00091fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00091fd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009201:	89 04 24             	mov    DWORD PTR [esp],eax
c0009204:	52                   	push   edx
c0009205:	50                   	push   eax
c0009206:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009209:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000920c:	e8 ab f5 01 00       	call   c00287bc <__subdf3>
c0009211:	59                   	pop    ecx
c0009212:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009216:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000921a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000921d:	e8 29 fc 01 00       	call   c0028e4b <__floatsidf>
c0009222:	83 c4 10             	add    esp,0x10
c0009225:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009229:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000922d:	52                   	push   edx
c000922e:	50                   	push   eax
c000922f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009233:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009237:	e8 ac f5 01 00       	call   c00287e8 <__muldf3>
c000923c:	5f                   	pop    edi
c000923d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009241:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009245:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009248:	e8 fe fb 01 00       	call   c0028e4b <__floatsidf>
c000924d:	83 c4 10             	add    esp,0x10
c0009250:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009254:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009258:	52                   	push   edx
c0009259:	50                   	push   eax
c000925a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000925e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009262:	e8 65 f8 01 00       	call   c0028acc <__divdf3>
c0009267:	83 c4 10             	add    esp,0x10
c000926a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000926e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009272:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009276:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000927a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000927e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009282:	e8 e4 ee 01 00       	call   c002816b <__adddf3>
c0009287:	83 c4 10             	add    esp,0x10
c000928a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000928e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009292:	31 ff                	xor    edi,edi
c0009294:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c0009297:	0f 8e 9d 00 00 00    	jle    c000933a <linear_vari_process+0x349>
c000929d:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00092a0:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00092a4:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00092a7:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00092ab:	89 04 24             	mov    DWORD PTR [esp],eax
c00092ae:	8b 06                	mov    eax,DWORD PTR [esi]
c00092b0:	52                   	push   edx
c00092b1:	52                   	push   edx
c00092b2:	55                   	push   ebp
c00092b3:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00092b6:	47                   	inc    edi
c00092b7:	e8 44 e8 01 00       	call   c0027b00 <__subsf3>
c00092bc:	89 04 24             	mov    DWORD PTR [esp],eax
c00092bf:	e8 1b ff 01 00       	call   c00291df <__extendsfdf2>
c00092c4:	83 c4 10             	add    esp,0x10
c00092c7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092cb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092cf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092d7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092db:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092df:	e8 04 f5 01 00       	call   c00287e8 <__muldf3>
c00092e4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00092e7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00092eb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00092ef:	e8 eb fe 01 00       	call   c00291df <__extendsfdf2>
c00092f4:	83 c4 10             	add    esp,0x10
c00092f7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092fb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092ff:	52                   	push   edx
c0009300:	50                   	push   eax
c0009301:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009305:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009309:	e8 5d ee 01 00       	call   c002816b <__adddf3>
c000930e:	59                   	pop    ecx
c000930f:	5d                   	pop    ebp
c0009310:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009314:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009318:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000931c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009320:	e8 96 fd 01 00       	call   c00290bb <__truncdfsf2>
c0009325:	83 c4 10             	add    esp,0x10
c0009328:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000932b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000932f:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009332:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009335:	e9 5a ff ff ff       	jmp    c0009294 <linear_vari_process+0x2a3>
c000933a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000933e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009342:	68 00 00 f0 3f       	push   0x3ff00000
c0009347:	6a 00                	push   0x0
c0009349:	e8 7e f7 01 00       	call   c0028acc <__divdf3>
c000934e:	83 c4 10             	add    esp,0x10
c0009351:	89 04 24             	mov    DWORD PTR [esp],eax
c0009354:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009358:	52                   	push   edx
c0009359:	50                   	push   eax
c000935a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009362:	e8 04 ee 01 00       	call   c002816b <__adddf3>
c0009367:	83 c4 10             	add    esp,0x10
c000936a:	e9 50 fd ff ff       	jmp    c00090bf <linear_vari_process+0xce>
c000936f:	50                   	push   eax
c0009370:	50                   	push   eax
c0009371:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009375:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009379:	e8 f2 fe 01 00       	call   c0029270 <lrint>
c000937e:	83 ec 0c             	sub    esp,0xc
c0009381:	50                   	push   eax
c0009382:	e8 c4 fa 01 00       	call   c0028e4b <__floatsidf>
c0009387:	83 c4 10             	add    esp,0x10
c000938a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000938e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009392:	52                   	push   edx
c0009393:	50                   	push   eax
c0009394:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009398:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000939c:	e8 1b f4 01 00       	call   c00287bc <__subdf3>
c00093a1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00093a5:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00093a9:	83 c4 20             	add    esp,0x20
c00093ac:	6a 00                	push   0x0
c00093ae:	6a 00                	push   0x0
c00093b0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b8:	e8 fa fc 01 00       	call   c00290b7 <__ltdf2>
c00093bd:	83 c4 10             	add    esp,0x10
c00093c0:	85 c0                	test   eax,eax
c00093c2:	79 1e                	jns    c00093e2 <linear_vari_process+0x3f1>
c00093c4:	68 00 00 f0 3f       	push   0x3ff00000
c00093c9:	6a 00                	push   0x0
c00093cb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093cf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d3:	e8 93 ed 01 00       	call   c002816b <__adddf3>
c00093d8:	83 c4 10             	add    esp,0x10
c00093db:	89 04 24             	mov    DWORD PTR [esp],eax
c00093de:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00093e2:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00093e5:	83 ec 10             	sub    esp,0x10
c00093e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093f8:	e8 bf f3 01 00       	call   c00287bc <__subdf3>
c00093fd:	83 c4 18             	add    esp,0x18
c0009400:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009404:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009408:	52                   	push   edx
c0009409:	50                   	push   eax
c000940a:	e8 61 fe 01 00       	call   c0029270 <lrint>
c000940f:	83 c4 10             	add    esp,0x10
c0009412:	0f af f8             	imul   edi,eax
c0009415:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009418:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c000941b:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000941e:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0009421:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009424:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009428:	0f 8d 13 03 00 00    	jge    c0009741 <linear_vari_process+0x750>
c000942e:	83 ec 0c             	sub    esp,0xc
c0009431:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009434:	e8 12 fa 01 00       	call   c0028e4b <__floatsidf>
c0009439:	83 c4 10             	add    esp,0x10
c000943c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009440:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009444:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009448:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000944c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009450:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009454:	e8 8f f3 01 00       	call   c00287e8 <__muldf3>
c0009459:	89 3c 24             	mov    DWORD PTR [esp],edi
c000945c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009460:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009464:	e8 e2 f9 01 00       	call   c0028e4b <__floatsidf>
c0009469:	83 c4 10             	add    esp,0x10
c000946c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009470:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009474:	52                   	push   edx
c0009475:	50                   	push   eax
c0009476:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000947a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000947e:	e8 e8 ec 01 00       	call   c002816b <__adddf3>
c0009483:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009486:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000948a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000948e:	e8 b8 f9 01 00       	call   c0028e4b <__floatsidf>
c0009493:	83 c4 10             	add    esp,0x10
c0009496:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000949a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000949e:	52                   	push   edx
c000949f:	50                   	push   eax
c00094a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094a4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094a8:	e8 0a fc 01 00       	call   c00290b7 <__ltdf2>
c00094ad:	83 c4 10             	add    esp,0x10
c00094b0:	85 c0                	test   eax,eax
c00094b2:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00094b6:	0f 89 85 02 00 00    	jns    c0009741 <linear_vari_process+0x750>
c00094bc:	85 c9                	test   ecx,ecx
c00094be:	0f 8e f5 00 00 00    	jle    c00095b9 <linear_vari_process+0x5c8>
c00094c4:	83 ec 10             	sub    esp,0x10
c00094c7:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094ca:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094cd:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094d1:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094d4:	ff 30                	push   DWORD PTR [eax]
c00094d6:	e8 e1 f2 01 00       	call   c00287bc <__subdf3>
c00094db:	83 c4 18             	add    esp,0x18
c00094de:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094e2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094e6:	52                   	push   edx
c00094e7:	50                   	push   eax
c00094e8:	e8 63 fd 01 00       	call   c0029250 <fabs>
c00094ed:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094f1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094f5:	83 c4 10             	add    esp,0x10
c00094f8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00094fd:	68 23 42 92 0c       	push   0xc924223
c0009502:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009506:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000950a:	e8 8a fb 01 00       	call   c0029099 <__gtdf2>
c000950f:	83 c4 10             	add    esp,0x10
c0009512:	85 c0                	test   eax,eax
c0009514:	0f 8e 9f 00 00 00    	jle    c00095b9 <linear_vari_process+0x5c8>
c000951a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000951e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009521:	8b 00                	mov    eax,DWORD PTR [eax]
c0009523:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009527:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000952b:	52                   	push   edx
c000952c:	50                   	push   eax
c000952d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009530:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009533:	e8 84 f2 01 00       	call   c00287bc <__subdf3>
c0009538:	5f                   	pop    edi
c0009539:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000953d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009541:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009544:	e8 02 f9 01 00       	call   c0028e4b <__floatsidf>
c0009549:	83 c4 10             	add    esp,0x10
c000954c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009550:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009554:	52                   	push   edx
c0009555:	50                   	push   eax
c0009556:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000955a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000955e:	e8 85 f2 01 00       	call   c00287e8 <__muldf3>
c0009563:	5d                   	pop    ebp
c0009564:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009568:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000956c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000956f:	e8 d7 f8 01 00       	call   c0028e4b <__floatsidf>
c0009574:	83 c4 10             	add    esp,0x10
c0009577:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000957b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000957f:	52                   	push   edx
c0009580:	50                   	push   eax
c0009581:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009585:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009589:	e8 3e f5 01 00       	call   c0028acc <__divdf3>
c000958e:	83 c4 10             	add    esp,0x10
c0009591:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009595:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009599:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000959d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a9:	e8 bd eb 01 00       	call   c002816b <__adddf3>
c00095ae:	83 c4 10             	add    esp,0x10
c00095b1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095b5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095b9:	31 ff                	xor    edi,edi
c00095bb:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095be:	39 f8                	cmp    eax,edi
c00095c0:	0f 8e ac 00 00 00    	jle    c0009672 <linear_vari_process+0x681>
c00095c6:	8b 16                	mov    edx,DWORD PTR [esi]
c00095c8:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095cb:	29 c1                	sub    ecx,eax
c00095cd:	89 c8                	mov    eax,ecx
c00095cf:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095d2:	01 f8                	add    eax,edi
c00095d4:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095d8:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095db:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095de:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00095e2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00095e5:	51                   	push   ecx
c00095e6:	01 f8                	add    eax,edi
c00095e8:	51                   	push   ecx
c00095e9:	47                   	inc    edi
c00095ea:	55                   	push   ebp
c00095eb:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00095ee:	e8 0d e5 01 00       	call   c0027b00 <__subsf3>
c00095f3:	89 04 24             	mov    DWORD PTR [esp],eax
c00095f6:	e8 e4 fb 01 00       	call   c00291df <__extendsfdf2>
c00095fb:	83 c4 10             	add    esp,0x10
c00095fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009602:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009606:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000960a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000960e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009612:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009616:	e8 cd f1 01 00       	call   c00287e8 <__muldf3>
c000961b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000961e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009622:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009626:	e8 b4 fb 01 00       	call   c00291df <__extendsfdf2>
c000962b:	83 c4 10             	add    esp,0x10
c000962e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009632:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009636:	52                   	push   edx
c0009637:	50                   	push   eax
c0009638:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000963c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009640:	e8 26 eb 01 00       	call   c002816b <__adddf3>
c0009645:	5d                   	pop    ebp
c0009646:	59                   	pop    ecx
c0009647:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000964b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000964f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009653:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009657:	e8 5f fa 01 00       	call   c00290bb <__truncdfsf2>
c000965c:	83 c4 10             	add    esp,0x10
c000965f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009663:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009667:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c000966a:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000966d:	e9 49 ff ff ff       	jmp    c00095bb <linear_vari_process+0x5ca>
c0009672:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009676:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000967a:	68 00 00 f0 3f       	push   0x3ff00000
c000967f:	6a 00                	push   0x0
c0009681:	e8 46 f4 01 00       	call   c0028acc <__divdf3>
c0009686:	83 c4 10             	add    esp,0x10
c0009689:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000968d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009691:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009695:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009699:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000969d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096a1:	e8 c5 ea 01 00       	call   c002816b <__adddf3>
c00096a6:	59                   	pop    ecx
c00096a7:	5f                   	pop    edi
c00096a8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096b8:	e8 b3 fb 01 00       	call   c0029270 <lrint>
c00096bd:	83 ec 0c             	sub    esp,0xc
c00096c0:	50                   	push   eax
c00096c1:	e8 85 f7 01 00       	call   c0028e4b <__floatsidf>
c00096c6:	83 c4 10             	add    esp,0x10
c00096c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096cd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096d1:	52                   	push   edx
c00096d2:	50                   	push   eax
c00096d3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096d7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096db:	e8 dc f0 01 00       	call   c00287bc <__subdf3>
c00096e0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00096e4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00096e8:	83 c4 20             	add    esp,0x20
c00096eb:	6a 00                	push   0x0
c00096ed:	6a 00                	push   0x0
c00096ef:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f7:	e8 bb f9 01 00       	call   c00290b7 <__ltdf2>
c00096fc:	83 c4 10             	add    esp,0x10
c00096ff:	85 c0                	test   eax,eax
c0009701:	79 1e                	jns    c0009721 <linear_vari_process+0x730>
c0009703:	68 00 00 f0 3f       	push   0x3ff00000
c0009708:	6a 00                	push   0x0
c000970a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000970e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009712:	e8 54 ea 01 00       	call   c002816b <__adddf3>
c0009717:	83 c4 10             	add    esp,0x10
c000971a:	89 04 24             	mov    DWORD PTR [esp],eax
c000971d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009721:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009724:	83 ec 10             	sub    esp,0x10
c0009727:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000972b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000972f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009733:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009737:	e8 80 f0 01 00       	call   c00287bc <__subdf3>
c000973c:	e9 bc fc ff ff       	jmp    c00093fd <linear_vari_process+0x40c>
c0009741:	39 fd                	cmp    ebp,edi
c0009743:	7d 38                	jge    c000977d <linear_vari_process+0x78c>
c0009745:	83 ec 0c             	sub    esp,0xc
c0009748:	89 f8                	mov    eax,edi
c000974a:	29 e8                	sub    eax,ebp
c000974c:	99                   	cdq    
c000974d:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009750:	50                   	push   eax
c0009751:	e8 f5 f6 01 00       	call   c0028e4b <__floatsidf>
c0009756:	83 c4 10             	add    esp,0x10
c0009759:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000975d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009761:	52                   	push   edx
c0009762:	50                   	push   eax
c0009763:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009767:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000976b:	e8 fb e9 01 00       	call   c002816b <__adddf3>
c0009770:	83 c4 10             	add    esp,0x10
c0009773:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009776:	89 04 24             	mov    DWORD PTR [esp],eax
c0009779:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000977d:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009781:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009784:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009788:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000978b:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000978e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009791:	85 c0                	test   eax,eax
c0009793:	7f 29                	jg     c00097be <linear_vari_process+0x7cd>
c0009795:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009799:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000979d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00097a1:	89 01                	mov    DWORD PTR [ecx],eax
c00097a3:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00097a6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097a9:	99                   	cdq    
c00097aa:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097ad:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00097b0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097b3:	99                   	cdq    
c00097b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097b7:	31 d2                	xor    edx,edx
c00097b9:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097bc:	eb 1d                	jmp    c00097db <linear_vari_process+0x7ea>
c00097be:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097c1:	31 d2                	xor    edx,edx
c00097c3:	29 c8                	sub    eax,ecx
c00097c5:	c1 e0 02             	shl    eax,0x2
c00097c8:	39 d1                	cmp    ecx,edx
c00097ca:	7e c9                	jle    c0009795 <linear_vari_process+0x7a4>
c00097cc:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097ce:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097d1:	83 c0 04             	add    eax,0x4
c00097d4:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097d8:	42                   	inc    edx
c00097d9:	eb ed                	jmp    c00097c8 <linear_vari_process+0x7d7>
c00097db:	83 c4 3c             	add    esp,0x3c
c00097de:	89 d0                	mov    eax,edx
c00097e0:	5b                   	pop    ebx
c00097e1:	5e                   	pop    esi
c00097e2:	5f                   	pop    edi
c00097e3:	5d                   	pop    ebp
c00097e4:	c3                   	ret    

c00097e5 <linear_reset>:
c00097e5:	83 ec 0c             	sub    esp,0xc
c00097e8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097ec:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00097ef:	85 c0                	test   eax,eax
c00097f1:	74 20                	je     c0009813 <linear_reset+0x2e>
c00097f3:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00097f6:	83 c0 1c             	add    eax,0x1c
c00097f9:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00097fc:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009803:	c1 e2 02             	shl    edx,0x2
c0009806:	51                   	push   ecx
c0009807:	52                   	push   edx
c0009808:	6a 00                	push   0x0
c000980a:	50                   	push   eax
c000980b:	e8 5c 6f ff ff       	call   c000076c <memset>
c0009810:	83 c4 10             	add    esp,0x10
c0009813:	83 c4 0c             	add    esp,0xc
c0009816:	c3                   	ret    

c0009817 <linear_get_name>:
c0009817:	31 c0                	xor    eax,eax
c0009819:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000981e:	75 05                	jne    c0009825 <linear_get_name+0xe>
c0009820:	b8 a0 aa 02 c0       	mov    eax,0xc002aaa0
c0009825:	c3                   	ret    

c0009826 <linear_get_description>:
c0009826:	31 c0                	xor    eax,eax
c0009828:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000982d:	75 05                	jne    c0009834 <linear_get_description+0xe>
c000982f:	b8 b4 aa 02 c0       	mov    eax,0xc002aab4
c0009834:	c3                   	ret    

c0009835 <linear_set_converter>:
c0009835:	53                   	push   ebx
c0009836:	b8 0a 00 00 00       	mov    eax,0xa
c000983b:	83 ec 08             	sub    esp,0x8
c000983e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009842:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009847:	75 6e                	jne    c00098b7 <linear_set_converter+0x82>
c0009849:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000984c:	85 c0                	test   eax,eax
c000984e:	74 13                	je     c0009863 <linear_set_converter+0x2e>
c0009850:	83 ec 0c             	sub    esp,0xc
c0009853:	50                   	push   eax
c0009854:	e8 5f 60 00 00       	call   c000f8b8 <free>
c0009859:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009860:	83 c4 10             	add    esp,0x10
c0009863:	50                   	push   eax
c0009864:	50                   	push   eax
c0009865:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009868:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000986f:	50                   	push   eax
c0009870:	6a 01                	push   0x1
c0009872:	e8 61 60 00 00       	call   c000f8d8 <calloc>
c0009877:	83 c4 10             	add    esp,0x10
c000987a:	89 c2                	mov    edx,eax
c000987c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000987f:	85 d2                	test   edx,edx
c0009881:	b8 01 00 00 00       	mov    eax,0x1
c0009886:	74 2f                	je     c00098b7 <linear_set_converter+0x82>
c0009888:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000988b:	83 ec 0c             	sub    esp,0xc
c000988e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009891:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0009897:	c7 43 24 f1 8f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008ff1
c000989e:	c7 43 20 f1 8f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008ff1
c00098a5:	c7 43 28 e5 97 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00097e5
c00098ac:	53                   	push   ebx
c00098ad:	e8 33 ff ff ff       	call   c00097e5 <linear_reset>
c00098b2:	83 c4 10             	add    esp,0x10
c00098b5:	31 c0                	xor    eax,eax
c00098b7:	83 c4 08             	add    esp,0x8
c00098ba:	5b                   	pop    ebx
c00098bb:	c3                   	ret    

c00098bc <int_to_fp>:
c00098bc:	c1 e0 0c             	shl    eax,0xc
c00098bf:	c3                   	ret    

c00098c0 <fp_to_int>:
c00098c0:	c1 f8 0c             	sar    eax,0xc
c00098c3:	c3                   	ret    

c00098c4 <fp_fraction_part>:
c00098c4:	25 ff 0f 00 00       	and    eax,0xfff
c00098c9:	c3                   	ret    

c00098ca <fp_to_double>:
c00098ca:	83 ec 1c             	sub    esp,0x1c
c00098cd:	e8 f2 ff ff ff       	call   c00098c4 <fp_fraction_part>
c00098d2:	83 ec 0c             	sub    esp,0xc
c00098d5:	50                   	push   eax
c00098d6:	e8 70 f5 01 00       	call   c0028e4b <__floatsidf>
c00098db:	83 c4 10             	add    esp,0x10
c00098de:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00098e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00098e6:	68 00 00 30 3f       	push   0x3f300000
c00098eb:	6a 00                	push   0x0
c00098ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098f5:	e8 ee ee 01 00       	call   c00287e8 <__muldf3>
c00098fa:	83 c4 2c             	add    esp,0x2c
c00098fd:	c3                   	ret    

c00098fe <calc_output_single>:
c00098fe:	55                   	push   ebp
c00098ff:	57                   	push   edi
c0009900:	56                   	push   esi
c0009901:	89 c6                	mov    esi,eax
c0009903:	53                   	push   ebx
c0009904:	89 d3                	mov    ebx,edx
c0009906:	83 ec 4c             	sub    esp,0x4c
c0009909:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000990d:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009910:	e8 a7 ff ff ff       	call   c00098bc <int_to_fp>
c0009915:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c0009918:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000991c:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009920:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009924:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009927:	99                   	cdq    
c0009928:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009930:	f7 fb                	idiv   ebx
c0009932:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000993a:	89 da                	mov    edx,ebx
c000993c:	0f af d0             	imul   edx,eax
c000993f:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009943:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009947:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000994b:	29 c2                	sub    edx,eax
c000994d:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009950:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009954:	83 c5 04             	add    ebp,0x4
c0009957:	e8 6e ff ff ff       	call   c00098ca <fp_to_double>
c000995c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009960:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009964:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009968:	e8 53 ff ff ff       	call   c00098c0 <fp_to_int>
c000996d:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009970:	52                   	push   edx
c0009971:	52                   	push   edx
c0009972:	51                   	push   ecx
c0009973:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009977:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000997b:	e8 80 e1 01 00       	call   c0027b00 <__subsf3>
c0009980:	89 04 24             	mov    DWORD PTR [esp],eax
c0009983:	e8 57 f8 01 00       	call   c00291df <__extendsfdf2>
c0009988:	83 c4 10             	add    esp,0x10
c000998b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000998f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009993:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009997:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000999b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000999f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099a3:	e8 40 ee 01 00       	call   c00287e8 <__muldf3>
c00099a8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00099ac:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099b0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099b3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00099b7:	e8 23 f8 01 00       	call   c00291df <__extendsfdf2>
c00099bc:	83 c4 10             	add    esp,0x10
c00099bf:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099c3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099c7:	52                   	push   edx
c00099c8:	50                   	push   eax
c00099c9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099d1:	e8 95 e7 01 00       	call   c002816b <__adddf3>
c00099d6:	59                   	pop    ecx
c00099d7:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099db:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099df:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00099e5:	e8 f5 f7 01 00       	call   c00291df <__extendsfdf2>
c00099ea:	83 c4 10             	add    esp,0x10
c00099ed:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099f1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099f5:	52                   	push   edx
c00099f6:	50                   	push   eax
c00099f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099ff:	e8 e4 ed 01 00       	call   c00287e8 <__muldf3>
c0009a04:	83 c4 10             	add    esp,0x10
c0009a07:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009a0b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009a0f:	52                   	push   edx
c0009a10:	50                   	push   eax
c0009a11:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a19:	e8 4d e7 01 00       	call   c002816b <__adddf3>
c0009a1e:	83 c4 10             	add    esp,0x10
c0009a21:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a25:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a29:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a2d:	0f 89 1d ff ff ff    	jns    c0009950 <calc_output_single+0x52>
c0009a33:	89 d9                	mov    ecx,ebx
c0009a35:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a39:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a3d:	89 dd                	mov    ebp,ebx
c0009a3f:	29 c8                	sub    eax,ecx
c0009a41:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a49:	99                   	cdq    
c0009a4a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a52:	f7 fb                	idiv   ebx
c0009a54:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a58:	0f af e8             	imul   ebp,eax
c0009a5b:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a5f:	01 cd                	add    ebp,ecx
c0009a61:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a64:	89 e8                	mov    eax,ebp
c0009a66:	83 ee 04             	sub    esi,0x4
c0009a69:	e8 5c fe ff ff       	call   c00098ca <fp_to_double>
c0009a6e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a72:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a76:	89 e8                	mov    eax,ebp
c0009a78:	29 dd                	sub    ebp,ebx
c0009a7a:	e8 41 fe ff ff       	call   c00098c0 <fp_to_int>
c0009a7f:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009a82:	52                   	push   edx
c0009a83:	52                   	push   edx
c0009a84:	51                   	push   ecx
c0009a85:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009a89:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009a8d:	e8 6e e0 01 00       	call   c0027b00 <__subsf3>
c0009a92:	89 04 24             	mov    DWORD PTR [esp],eax
c0009a95:	e8 45 f7 01 00       	call   c00291df <__extendsfdf2>
c0009a9a:	83 c4 10             	add    esp,0x10
c0009a9d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009aa1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009aa5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009aa9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009aad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ab1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ab5:	e8 2e ed 01 00       	call   c00287e8 <__muldf3>
c0009aba:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009abe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ac2:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009ac5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ac9:	e8 11 f7 01 00       	call   c00291df <__extendsfdf2>
c0009ace:	83 c4 10             	add    esp,0x10
c0009ad1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ad5:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009ad9:	52                   	push   edx
c0009ada:	50                   	push   eax
c0009adb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009adf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ae3:	e8 83 e6 01 00       	call   c002816b <__adddf3>
c0009ae8:	59                   	pop    ecx
c0009ae9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009aed:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009af1:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009af7:	e8 e3 f6 01 00       	call   c00291df <__extendsfdf2>
c0009afc:	83 c4 10             	add    esp,0x10
c0009aff:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b03:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b07:	52                   	push   edx
c0009b08:	50                   	push   eax
c0009b09:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b0d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b11:	e8 d2 ec 01 00       	call   c00287e8 <__muldf3>
c0009b16:	83 c4 10             	add    esp,0x10
c0009b19:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b1d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b21:	52                   	push   edx
c0009b22:	50                   	push   eax
c0009b23:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b2b:	e8 3b e6 01 00       	call   c002816b <__adddf3>
c0009b30:	83 c4 10             	add    esp,0x10
c0009b33:	85 ed                	test   ebp,ebp
c0009b35:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b39:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b3d:	0f 8f 21 ff ff ff    	jg     c0009a64 <calc_output_single+0x166>
c0009b43:	52                   	push   edx
c0009b44:	50                   	push   eax
c0009b45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b49:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b4d:	e8 19 e6 01 00       	call   c002816b <__adddf3>
c0009b52:	83 c4 5c             	add    esp,0x5c
c0009b55:	5b                   	pop    ebx
c0009b56:	5e                   	pop    esi
c0009b57:	5f                   	pop    edi
c0009b58:	5d                   	pop    ebp
c0009b59:	c3                   	ret    

c0009b5a <calc_output_stereo>:
c0009b5a:	55                   	push   ebp
c0009b5b:	89 cd                	mov    ebp,ecx
c0009b5d:	57                   	push   edi
c0009b5e:	56                   	push   esi
c0009b5f:	53                   	push   ebx
c0009b60:	89 c3                	mov    ebx,eax
c0009b62:	83 ec 6c             	sub    esp,0x6c
c0009b65:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b69:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b70:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b77:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b7b:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b7f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009b82:	e8 35 fd ff ff       	call   c00098bc <int_to_fp>
c0009b87:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009b8f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b93:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009b9b:	29 c8                	sub    eax,ecx
c0009b9d:	99                   	cdq    
c0009b9e:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009ba2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009ba6:	0f af d0             	imul   edx,eax
c0009ba9:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009bac:	31 d2                	xor    edx,edx
c0009bae:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009bb2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009bb6:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009bb9:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009bbd:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009bc0:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009bc4:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009bc8:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009bcb:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bd0:	29 c1                	sub    ecx,eax
c0009bd2:	31 c0                	xor    eax,eax
c0009bd4:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bd7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bdb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bdf:	83 c7 08             	add    edi,0x8
c0009be2:	e8 e3 fc ff ff       	call   c00098ca <fp_to_double>
c0009be7:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009beb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009bef:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bf3:	e8 c8 fc ff ff       	call   c00098c0 <fp_to_int>
c0009bf8:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009bfb:	52                   	push   edx
c0009bfc:	52                   	push   edx
c0009bfd:	51                   	push   ecx
c0009bfe:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009c02:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009c06:	e8 f5 de 01 00       	call   c0027b00 <__subsf3>
c0009c0b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c0e:	e8 cc f5 01 00       	call   c00291df <__extendsfdf2>
c0009c13:	83 c4 10             	add    esp,0x10
c0009c16:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c1a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c1e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c22:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c26:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c2a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c2e:	e8 b5 eb 01 00       	call   c00287e8 <__muldf3>
c0009c33:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c37:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c3b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c3e:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c42:	e8 98 f5 01 00       	call   c00291df <__extendsfdf2>
c0009c47:	83 c4 10             	add    esp,0x10
c0009c4a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c4e:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c52:	52                   	push   edx
c0009c53:	50                   	push   eax
c0009c54:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c58:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c5c:	e8 0a e5 01 00       	call   c002816b <__adddf3>
c0009c61:	59                   	pop    ecx
c0009c62:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c66:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c6a:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c70:	e8 6a f5 01 00       	call   c00291df <__extendsfdf2>
c0009c75:	83 c4 10             	add    esp,0x10
c0009c78:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c7c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c80:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c84:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c88:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c8c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c90:	e8 53 eb 01 00       	call   c00287e8 <__muldf3>
c0009c95:	83 c4 10             	add    esp,0x10
c0009c98:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c9c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009ca0:	52                   	push   edx
c0009ca1:	50                   	push   eax
c0009ca2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ca6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009caa:	e8 bc e4 01 00       	call   c002816b <__adddf3>
c0009caf:	59                   	pop    ecx
c0009cb0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009cb4:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009cb8:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009cbe:	e8 1c f5 01 00       	call   c00291df <__extendsfdf2>
c0009cc3:	83 c4 10             	add    esp,0x10
c0009cc6:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cca:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cce:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cd2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cd6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cda:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cde:	e8 05 eb 01 00       	call   c00287e8 <__muldf3>
c0009ce3:	83 c4 10             	add    esp,0x10
c0009ce6:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009cea:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009cee:	52                   	push   edx
c0009cef:	50                   	push   eax
c0009cf0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cf4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cf8:	e8 6e e4 01 00       	call   c002816b <__adddf3>
c0009cfd:	83 c4 10             	add    esp,0x10
c0009d00:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009d04:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d08:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d0c:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009d10:	0f 89 c5 fe ff ff    	jns    c0009bdb <calc_output_stereo+0x81>
c0009d16:	29 e9                	sub    ecx,ebp
c0009d18:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d1c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d20:	29 c8                	sub    eax,ecx
c0009d22:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d2a:	99                   	cdq    
c0009d2b:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d2f:	31 d2                	xor    edx,edx
c0009d31:	0f af f8             	imul   edi,eax
c0009d34:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d38:	40                   	inc    eax
c0009d39:	01 cf                	add    edi,ecx
c0009d3b:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d40:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d44:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d4c:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d4f:	31 c0                	xor    eax,eax
c0009d51:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d55:	89 f8                	mov    eax,edi
c0009d57:	83 eb 08             	sub    ebx,0x8
c0009d5a:	e8 6b fb ff ff       	call   c00098ca <fp_to_double>
c0009d5f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d63:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d67:	89 f8                	mov    eax,edi
c0009d69:	e8 52 fb ff ff       	call   c00098c0 <fp_to_int>
c0009d6e:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d71:	52                   	push   edx
c0009d72:	52                   	push   edx
c0009d73:	55                   	push   ebp
c0009d74:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d78:	e8 83 dd 01 00       	call   c0027b00 <__subsf3>
c0009d7d:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d80:	e8 5a f4 01 00       	call   c00291df <__extendsfdf2>
c0009d85:	83 c4 10             	add    esp,0x10
c0009d88:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009d8c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009d90:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d94:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d98:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d9c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009da0:	e8 43 ea 01 00       	call   c00287e8 <__muldf3>
c0009da5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009da8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009dac:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009db0:	e8 2a f4 01 00       	call   c00291df <__extendsfdf2>
c0009db5:	83 c4 10             	add    esp,0x10
c0009db8:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dbc:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dc0:	52                   	push   edx
c0009dc1:	50                   	push   eax
c0009dc2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009dc6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009dca:	e8 9c e3 01 00       	call   c002816b <__adddf3>
c0009dcf:	59                   	pop    ecx
c0009dd0:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009dd4:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009dd8:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dde:	e8 fc f3 01 00       	call   c00291df <__extendsfdf2>
c0009de3:	83 c4 10             	add    esp,0x10
c0009de6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dea:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dee:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009df2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009df6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dfa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dfe:	e8 e5 e9 01 00       	call   c00287e8 <__muldf3>
c0009e03:	83 c4 10             	add    esp,0x10
c0009e06:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e0a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e0e:	52                   	push   edx
c0009e0f:	50                   	push   eax
c0009e10:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e14:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e18:	e8 4e e3 01 00       	call   c002816b <__adddf3>
c0009e1d:	5d                   	pop    ebp
c0009e1e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e22:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e26:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e2c:	e8 ae f3 01 00       	call   c00291df <__extendsfdf2>
c0009e31:	83 c4 10             	add    esp,0x10
c0009e34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e38:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e3c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e40:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e44:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e48:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e4c:	e8 97 e9 01 00       	call   c00287e8 <__muldf3>
c0009e51:	83 c4 10             	add    esp,0x10
c0009e54:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e58:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e5c:	52                   	push   edx
c0009e5d:	50                   	push   eax
c0009e5e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e62:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e66:	e8 00 e3 01 00       	call   c002816b <__adddf3>
c0009e6b:	83 c4 10             	add    esp,0x10
c0009e6e:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e72:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e76:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e7a:	85 ff                	test   edi,edi
c0009e7c:	0f 8f d3 fe ff ff    	jg     c0009d55 <calc_output_stereo+0x1fb>
c0009e82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e92:	e8 d4 e2 01 00       	call   c002816b <__adddf3>
c0009e97:	83 c4 10             	add    esp,0x10
c0009e9a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e9e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ea2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ea6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009eaa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eb2:	e8 31 e9 01 00       	call   c00287e8 <__muldf3>
c0009eb7:	59                   	pop    ecx
c0009eb8:	5b                   	pop    ebx
c0009eb9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009ebd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ec1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ec5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ec9:	e8 ed f1 01 00       	call   c00290bb <__truncdfsf2>
c0009ece:	83 c4 10             	add    esp,0x10
c0009ed1:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ed8:	89 03                	mov    DWORD PTR [ebx],eax
c0009eda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ede:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ee2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ee6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009eea:	e8 7c e2 01 00       	call   c002816b <__adddf3>
c0009eef:	83 c4 10             	add    esp,0x10
c0009ef2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ef6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009efa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009efe:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f0a:	e8 d9 e8 01 00       	call   c00287e8 <__muldf3>
c0009f0f:	5e                   	pop    esi
c0009f10:	5f                   	pop    edi
c0009f11:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f15:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f21:	e8 95 f1 01 00       	call   c00290bb <__truncdfsf2>
c0009f26:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f2d:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f30:	83 c4 7c             	add    esp,0x7c
c0009f33:	5b                   	pop    ebx
c0009f34:	5e                   	pop    esi
c0009f35:	5f                   	pop    edi
c0009f36:	5d                   	pop    ebp
c0009f37:	c3                   	ret    

c0009f38 <calc_output_quad>:
c0009f38:	55                   	push   ebp
c0009f39:	57                   	push   edi
c0009f3a:	56                   	push   esi
c0009f3b:	89 c6                	mov    esi,eax
c0009f3d:	53                   	push   ebx
c0009f3e:	83 ec 7c             	sub    esp,0x7c
c0009f41:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f45:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f49:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f50:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f57:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f5b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f5f:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f62:	e8 55 f9 ff ff       	call   c00098bc <int_to_fp>
c0009f67:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f6a:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f6d:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f71:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f75:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f79:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f7d:	99                   	cdq    
c0009f7e:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009f82:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f86:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009f89:	31 d2                	xor    edx,edx
c0009f8b:	0f af d8             	imul   ebx,eax
c0009f8e:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009f96:	0f af c7             	imul   eax,edi
c0009f99:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009f9d:	29 c1                	sub    ecx,eax
c0009f9f:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009fa7:	31 c0                	xor    eax,eax
c0009fa9:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009fac:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009fb0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009fb4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fb8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fbc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fc0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fc4:	89 d8                	mov    eax,ebx
c0009fc6:	83 c7 10             	add    edi,0x10
c0009fc9:	e8 fc f8 ff ff       	call   c00098ca <fp_to_double>
c0009fce:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fd2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fd6:	89 d8                	mov    eax,ebx
c0009fd8:	e8 e3 f8 ff ff       	call   c00098c0 <fp_to_int>
c0009fdd:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fe1:	52                   	push   edx
c0009fe2:	52                   	push   edx
c0009fe3:	51                   	push   ecx
c0009fe4:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009fe8:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009fec:	e8 0f db 01 00       	call   c0027b00 <__subsf3>
c0009ff1:	89 04 24             	mov    DWORD PTR [esp],eax
c0009ff4:	e8 e6 f1 01 00       	call   c00291df <__extendsfdf2>
c0009ff9:	83 c4 10             	add    esp,0x10
c0009ffc:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a000:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a004:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a008:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a00c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a010:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a014:	e8 cf e7 01 00       	call   c00287e8 <__muldf3>
c000a019:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a01d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a021:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a024:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a028:	e8 b2 f1 01 00       	call   c00291df <__extendsfdf2>
c000a02d:	83 c4 10             	add    esp,0x10
c000a030:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a034:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a038:	52                   	push   edx
c000a039:	50                   	push   eax
c000a03a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a03e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a042:	e8 24 e1 01 00       	call   c002816b <__adddf3>
c000a047:	59                   	pop    ecx
c000a048:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a04c:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a050:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a056:	e8 84 f1 01 00       	call   c00291df <__extendsfdf2>
c000a05b:	83 c4 10             	add    esp,0x10
c000a05e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a062:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a066:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a06a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a06e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a072:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a076:	e8 6d e7 01 00       	call   c00287e8 <__muldf3>
c000a07b:	83 c4 10             	add    esp,0x10
c000a07e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a082:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a086:	52                   	push   edx
c000a087:	50                   	push   eax
c000a088:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a08c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a090:	e8 d6 e0 01 00       	call   c002816b <__adddf3>
c000a095:	59                   	pop    ecx
c000a096:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a09a:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a09e:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a0a4:	e8 36 f1 01 00       	call   c00291df <__extendsfdf2>
c000a0a9:	83 c4 10             	add    esp,0x10
c000a0ac:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0b0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0bc:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0c0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0c4:	e8 1f e7 01 00       	call   c00287e8 <__muldf3>
c000a0c9:	83 c4 10             	add    esp,0x10
c000a0cc:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0d0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0d4:	52                   	push   edx
c000a0d5:	50                   	push   eax
c000a0d6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0da:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0de:	e8 88 e0 01 00       	call   c002816b <__adddf3>
c000a0e3:	59                   	pop    ecx
c000a0e4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a0e8:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a0ec:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a0f2:	e8 e8 f0 01 00       	call   c00291df <__extendsfdf2>
c000a0f7:	83 c4 10             	add    esp,0x10
c000a0fa:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0fe:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a102:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a106:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a10a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a10e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a112:	e8 d1 e6 01 00       	call   c00287e8 <__muldf3>
c000a117:	83 c4 10             	add    esp,0x10
c000a11a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a11e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a122:	52                   	push   edx
c000a123:	50                   	push   eax
c000a124:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a128:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a12c:	e8 3a e0 01 00       	call   c002816b <__adddf3>
c000a131:	59                   	pop    ecx
c000a132:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a136:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a13a:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a140:	e8 9a f0 01 00       	call   c00291df <__extendsfdf2>
c000a145:	83 c4 10             	add    esp,0x10
c000a148:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a14c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a150:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a154:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a158:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a15c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a160:	e8 83 e6 01 00       	call   c00287e8 <__muldf3>
c000a165:	83 c4 10             	add    esp,0x10
c000a168:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a16c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a170:	52                   	push   edx
c000a171:	50                   	push   eax
c000a172:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a176:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a17a:	e8 ec df 01 00       	call   c002816b <__adddf3>
c000a17f:	83 c4 10             	add    esp,0x10
c000a182:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a186:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a18a:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a18e:	0f 89 30 fe ff ff    	jns    c0009fc4 <calc_output_quad+0x8c>
c000a194:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a198:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a19c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a1a0:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a1a4:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a1ac:	29 c8                	sub    eax,ecx
c000a1ae:	99                   	cdq    
c000a1af:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1b3:	31 d2                	xor    edx,edx
c000a1b5:	0f af d8             	imul   ebx,eax
c000a1b8:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1bc:	40                   	inc    eax
c000a1bd:	01 cb                	add    ebx,ecx
c000a1bf:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1c4:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1c8:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1cc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1d0:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1d3:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1db:	31 c0                	xor    eax,eax
c000a1dd:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1e1:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a1e5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a1e9:	89 d8                	mov    eax,ebx
c000a1eb:	83 ee 10             	sub    esi,0x10
c000a1ee:	e8 d7 f6 ff ff       	call   c00098ca <fp_to_double>
c000a1f3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a1f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1fb:	89 d8                	mov    eax,ebx
c000a1fd:	e8 be f6 ff ff       	call   c00098c0 <fp_to_int>
c000a202:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a206:	52                   	push   edx
c000a207:	52                   	push   edx
c000a208:	57                   	push   edi
c000a209:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a20d:	e8 ee d8 01 00       	call   c0027b00 <__subsf3>
c000a212:	89 04 24             	mov    DWORD PTR [esp],eax
c000a215:	e8 c5 ef 01 00       	call   c00291df <__extendsfdf2>
c000a21a:	83 c4 10             	add    esp,0x10
c000a21d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a221:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a225:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a229:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a22d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a231:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a235:	e8 ae e5 01 00       	call   c00287e8 <__muldf3>
c000a23a:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a23d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a241:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a245:	e8 95 ef 01 00       	call   c00291df <__extendsfdf2>
c000a24a:	83 c4 10             	add    esp,0x10
c000a24d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a251:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a255:	52                   	push   edx
c000a256:	50                   	push   eax
c000a257:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a25b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a25f:	e8 07 df 01 00       	call   c002816b <__adddf3>
c000a264:	59                   	pop    ecx
c000a265:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a269:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a26d:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a273:	e8 67 ef 01 00       	call   c00291df <__extendsfdf2>
c000a278:	83 c4 10             	add    esp,0x10
c000a27b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a27f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a283:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a287:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a28b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a28f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a293:	e8 50 e5 01 00       	call   c00287e8 <__muldf3>
c000a298:	83 c4 10             	add    esp,0x10
c000a29b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a29f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2a3:	52                   	push   edx
c000a2a4:	50                   	push   eax
c000a2a5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2a9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2ad:	e8 b9 de 01 00       	call   c002816b <__adddf3>
c000a2b2:	5f                   	pop    edi
c000a2b3:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a2b7:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a2bb:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2c1:	e8 19 ef 01 00       	call   c00291df <__extendsfdf2>
c000a2c6:	83 c4 10             	add    esp,0x10
c000a2c9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2cd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2d1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2d9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2dd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2e1:	e8 02 e5 01 00       	call   c00287e8 <__muldf3>
c000a2e6:	83 c4 10             	add    esp,0x10
c000a2e9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2ed:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2f1:	52                   	push   edx
c000a2f2:	50                   	push   eax
c000a2f3:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2f7:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2fb:	e8 6b de 01 00       	call   c002816b <__adddf3>
c000a300:	59                   	pop    ecx
c000a301:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a305:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a309:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a30f:	e8 cb ee 01 00       	call   c00291df <__extendsfdf2>
c000a314:	83 c4 10             	add    esp,0x10
c000a317:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a31b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a31f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a323:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a327:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a32b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a32f:	e8 b4 e4 01 00       	call   c00287e8 <__muldf3>
c000a334:	83 c4 10             	add    esp,0x10
c000a337:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a33b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a33f:	52                   	push   edx
c000a340:	50                   	push   eax
c000a341:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a345:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a349:	e8 1d de 01 00       	call   c002816b <__adddf3>
c000a34e:	5f                   	pop    edi
c000a34f:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a353:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a357:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a35d:	e8 7d ee 01 00       	call   c00291df <__extendsfdf2>
c000a362:	83 c4 10             	add    esp,0x10
c000a365:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a369:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a36d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a371:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a375:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a379:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a37d:	e8 66 e4 01 00       	call   c00287e8 <__muldf3>
c000a382:	83 c4 10             	add    esp,0x10
c000a385:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a389:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a38d:	52                   	push   edx
c000a38e:	50                   	push   eax
c000a38f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a393:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a397:	e8 cf dd 01 00       	call   c002816b <__adddf3>
c000a39c:	83 c4 10             	add    esp,0x10
c000a39f:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3a3:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a3a7:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a3ab:	85 db                	test   ebx,ebx
c000a3ad:	0f 8f 36 fe ff ff    	jg     c000a1e9 <calc_output_quad+0x2b1>
c000a3b3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3b7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3bb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3bf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3c3:	e8 a3 dd 01 00       	call   c002816b <__adddf3>
c000a3c8:	83 c4 10             	add    esp,0x10
c000a3cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3e3:	e8 00 e4 01 00       	call   c00287e8 <__muldf3>
c000a3e8:	59                   	pop    ecx
c000a3e9:	5b                   	pop    ebx
c000a3ea:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a3ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a3f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3fa:	e8 bc ec 01 00       	call   c00290bb <__truncdfsf2>
c000a3ff:	83 c4 10             	add    esp,0x10
c000a402:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a409:	89 06                	mov    DWORD PTR [esi],eax
c000a40b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a40f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a413:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a417:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a41b:	e8 4b dd 01 00       	call   c002816b <__adddf3>
c000a420:	83 c4 10             	add    esp,0x10
c000a423:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a427:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a42b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a42f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a433:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a437:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a43b:	e8 a8 e3 01 00       	call   c00287e8 <__muldf3>
c000a440:	5e                   	pop    esi
c000a441:	5f                   	pop    edi
c000a442:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a446:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a44a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a44e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a452:	e8 64 ec 01 00       	call   c00290bb <__truncdfsf2>
c000a457:	83 c4 10             	add    esp,0x10
c000a45a:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a461:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a464:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a468:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a46c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a470:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a474:	e8 f2 dc 01 00       	call   c002816b <__adddf3>
c000a479:	83 c4 10             	add    esp,0x10
c000a47c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a480:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a484:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a488:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a490:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a494:	e8 4f e3 01 00       	call   c00287e8 <__muldf3>
c000a499:	5d                   	pop    ebp
c000a49a:	59                   	pop    ecx
c000a49b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a49f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ab:	e8 0b ec 01 00       	call   c00290bb <__truncdfsf2>
c000a4b0:	83 c4 10             	add    esp,0x10
c000a4b3:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a4ba:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4bd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4c1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4c5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4c9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4cd:	e8 99 dc 01 00       	call   c002816b <__adddf3>
c000a4d2:	83 c4 10             	add    esp,0x10
c000a4d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ed:	e8 f6 e2 01 00       	call   c00287e8 <__muldf3>
c000a4f2:	5b                   	pop    ebx
c000a4f3:	5e                   	pop    esi
c000a4f4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4f8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4fc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a500:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a504:	e8 b2 eb 01 00       	call   c00290bb <__truncdfsf2>
c000a509:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a510:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a513:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a519:	5b                   	pop    ebx
c000a51a:	5e                   	pop    esi
c000a51b:	5f                   	pop    edi
c000a51c:	5d                   	pop    ebp
c000a51d:	c3                   	ret    

c000a51e <calc_output_hex>:
c000a51e:	55                   	push   ebp
c000a51f:	89 cd                	mov    ebp,ecx
c000a521:	57                   	push   edi
c000a522:	56                   	push   esi
c000a523:	53                   	push   ebx
c000a524:	89 c3                	mov    ebx,eax
c000a526:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a52c:	89 14 24             	mov    DWORD PTR [esp],edx
c000a52f:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a536:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a53d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a541:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a545:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a548:	e8 6f f3 ff ff       	call   c00098bc <int_to_fp>
c000a54d:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a550:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a554:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a557:	29 c8                	sub    eax,ecx
c000a559:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a55d:	99                   	cdq    
c000a55e:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a566:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a569:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a571:	0f af f8             	imul   edi,eax
c000a574:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a577:	01 cf                	add    edi,ecx
c000a579:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a57d:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a580:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a584:	0f af c2             	imul   eax,edx
c000a587:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a58b:	29 c1                	sub    ecx,eax
c000a58d:	31 d2                	xor    edx,edx
c000a58f:	31 c0                	xor    eax,eax
c000a591:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a594:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a598:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a59c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a5a0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a5a4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a5a8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a5ac:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a5b0:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a5b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5bc:	89 f8                	mov    eax,edi
c000a5be:	e8 07 f3 ff ff       	call   c00098ca <fp_to_double>
c000a5c3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5c7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5cb:	89 f8                	mov    eax,edi
c000a5cd:	e8 ee f2 ff ff       	call   c00098c0 <fp_to_int>
c000a5d2:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5d6:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5d9:	52                   	push   edx
c000a5da:	52                   	push   edx
c000a5db:	51                   	push   ecx
c000a5dc:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5e0:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a5e7:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a5eb:	e8 10 d5 01 00       	call   c0027b00 <__subsf3>
c000a5f0:	89 04 24             	mov    DWORD PTR [esp],eax
c000a5f3:	e8 e7 eb 01 00       	call   c00291df <__extendsfdf2>
c000a5f8:	83 c4 10             	add    esp,0x10
c000a5fb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5ff:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a603:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a607:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a60b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a60f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a613:	e8 d0 e1 01 00       	call   c00287e8 <__muldf3>
c000a618:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a61c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a620:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a623:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a627:	e8 b3 eb 01 00       	call   c00291df <__extendsfdf2>
c000a62c:	83 c4 10             	add    esp,0x10
c000a62f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a633:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a637:	52                   	push   edx
c000a638:	50                   	push   eax
c000a639:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a63d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a641:	e8 25 db 01 00       	call   c002816b <__adddf3>
c000a646:	59                   	pop    ecx
c000a647:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a64b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a64f:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a655:	e8 85 eb 01 00       	call   c00291df <__extendsfdf2>
c000a65a:	83 c4 10             	add    esp,0x10
c000a65d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a661:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a665:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a669:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a66d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a671:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a675:	e8 6e e1 01 00       	call   c00287e8 <__muldf3>
c000a67a:	83 c4 10             	add    esp,0x10
c000a67d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a681:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a685:	52                   	push   edx
c000a686:	50                   	push   eax
c000a687:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a68b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a68f:	e8 d7 da 01 00       	call   c002816b <__adddf3>
c000a694:	59                   	pop    ecx
c000a695:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a699:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a69d:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a6a3:	e8 37 eb 01 00       	call   c00291df <__extendsfdf2>
c000a6a8:	83 c4 10             	add    esp,0x10
c000a6ab:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6af:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6bb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6bf:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6c3:	e8 20 e1 01 00       	call   c00287e8 <__muldf3>
c000a6c8:	83 c4 10             	add    esp,0x10
c000a6cb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6cf:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6d3:	52                   	push   edx
c000a6d4:	50                   	push   eax
c000a6d5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6d9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6dd:	e8 89 da 01 00       	call   c002816b <__adddf3>
c000a6e2:	59                   	pop    ecx
c000a6e3:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a6e7:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a6eb:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a6f1:	e8 e9 ea 01 00       	call   c00291df <__extendsfdf2>
c000a6f6:	83 c4 10             	add    esp,0x10
c000a6f9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6fd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a701:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a705:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a709:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a70d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a711:	e8 d2 e0 01 00       	call   c00287e8 <__muldf3>
c000a716:	83 c4 10             	add    esp,0x10
c000a719:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a71d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a721:	52                   	push   edx
c000a722:	50                   	push   eax
c000a723:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a727:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a72b:	e8 3b da 01 00       	call   c002816b <__adddf3>
c000a730:	59                   	pop    ecx
c000a731:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a735:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a739:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a73f:	e8 9b ea 01 00       	call   c00291df <__extendsfdf2>
c000a744:	83 c4 10             	add    esp,0x10
c000a747:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a74b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a74f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a753:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a757:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a75b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a75f:	e8 84 e0 01 00       	call   c00287e8 <__muldf3>
c000a764:	83 c4 10             	add    esp,0x10
c000a767:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a76b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a76f:	52                   	push   edx
c000a770:	50                   	push   eax
c000a771:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a775:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a779:	e8 ed d9 01 00       	call   c002816b <__adddf3>
c000a77e:	59                   	pop    ecx
c000a77f:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a783:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a787:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a78d:	e8 4d ea 01 00       	call   c00291df <__extendsfdf2>
c000a792:	83 c4 10             	add    esp,0x10
c000a795:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a799:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7a5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7a9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7ad:	e8 36 e0 01 00       	call   c00287e8 <__muldf3>
c000a7b2:	83 c4 10             	add    esp,0x10
c000a7b5:	83 c6 18             	add    esi,0x18
c000a7b8:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7bc:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7c0:	52                   	push   edx
c000a7c1:	50                   	push   eax
c000a7c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7c6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7ca:	e8 9c d9 01 00       	call   c002816b <__adddf3>
c000a7cf:	59                   	pop    ecx
c000a7d0:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7d4:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7d8:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7de:	e8 fc e9 01 00       	call   c00291df <__extendsfdf2>
c000a7e3:	83 c4 10             	add    esp,0x10
c000a7e6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7ea:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7f6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7fa:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7fe:	e8 e5 df 01 00       	call   c00287e8 <__muldf3>
c000a803:	83 c4 10             	add    esp,0x10
c000a806:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a80a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a80e:	52                   	push   edx
c000a80f:	50                   	push   eax
c000a810:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a814:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a818:	e8 4e d9 01 00       	call   c002816b <__adddf3>
c000a81d:	83 c4 10             	add    esp,0x10
c000a820:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a824:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a828:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a82b:	0f 89 8b fd ff ff    	jns    c000a5bc <calc_output_hex+0x9e>
c000a831:	31 f6                	xor    esi,esi
c000a833:	31 ff                	xor    edi,edi
c000a835:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a839:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a83c:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a840:	29 e9                	sub    ecx,ebp
c000a842:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a846:	29 c8                	sub    eax,ecx
c000a848:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a84b:	99                   	cdq    
c000a84c:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a850:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a853:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a857:	0f af e8             	imul   ebp,eax
c000a85a:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a85e:	40                   	inc    eax
c000a85f:	01 cd                	add    ebp,ecx
c000a861:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a866:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a86a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a86e:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a872:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a875:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a879:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a87d:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a881:	89 e8                	mov    eax,ebp
c000a883:	e8 42 f0 ff ff       	call   c00098ca <fp_to_double>
c000a888:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a88c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a890:	89 e8                	mov    eax,ebp
c000a892:	e8 29 f0 ff ff       	call   c00098c0 <fp_to_int>
c000a897:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a89b:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a89e:	52                   	push   edx
c000a89f:	52                   	push   edx
c000a8a0:	51                   	push   ecx
c000a8a1:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a8a8:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a8af:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a8b3:	e8 48 d2 01 00       	call   c0027b00 <__subsf3>
c000a8b8:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8bb:	e8 1f e9 01 00       	call   c00291df <__extendsfdf2>
c000a8c0:	83 c4 10             	add    esp,0x10
c000a8c3:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8c7:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8d3:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8d7:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8db:	e8 08 df 01 00       	call   c00287e8 <__muldf3>
c000a8e0:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a8e7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a8eb:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a8ee:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a8f2:	e8 e8 e8 01 00       	call   c00291df <__extendsfdf2>
c000a8f7:	83 c4 10             	add    esp,0x10
c000a8fa:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8fe:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a902:	52                   	push   edx
c000a903:	50                   	push   eax
c000a904:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a908:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a90c:	e8 5a d8 01 00       	call   c002816b <__adddf3>
c000a911:	59                   	pop    ecx
c000a912:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a916:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a91a:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a920:	e8 ba e8 01 00       	call   c00291df <__extendsfdf2>
c000a925:	83 c4 10             	add    esp,0x10
c000a928:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a92c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a930:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a934:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a938:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a93c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a940:	e8 a3 de 01 00       	call   c00287e8 <__muldf3>
c000a945:	83 c4 10             	add    esp,0x10
c000a948:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a94c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a950:	52                   	push   edx
c000a951:	50                   	push   eax
c000a952:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a956:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a95a:	e8 0c d8 01 00       	call   c002816b <__adddf3>
c000a95f:	59                   	pop    ecx
c000a960:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a964:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a968:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a96e:	e8 6c e8 01 00       	call   c00291df <__extendsfdf2>
c000a973:	83 c4 10             	add    esp,0x10
c000a976:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a97a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a97e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a982:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a986:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a98a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a98e:	e8 55 de 01 00       	call   c00287e8 <__muldf3>
c000a993:	83 c4 10             	add    esp,0x10
c000a996:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a99a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a99e:	52                   	push   edx
c000a99f:	50                   	push   eax
c000a9a0:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9a4:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9a8:	e8 be d7 01 00       	call   c002816b <__adddf3>
c000a9ad:	59                   	pop    ecx
c000a9ae:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a9b2:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a9b6:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9bc:	e8 1e e8 01 00       	call   c00291df <__extendsfdf2>
c000a9c1:	83 c4 10             	add    esp,0x10
c000a9c4:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9c8:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9d4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9d8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9dc:	e8 07 de 01 00       	call   c00287e8 <__muldf3>
c000a9e1:	83 c4 10             	add    esp,0x10
c000a9e4:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9e8:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9ec:	52                   	push   edx
c000a9ed:	50                   	push   eax
c000a9ee:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9f2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9f6:	e8 70 d7 01 00       	call   c002816b <__adddf3>
c000a9fb:	59                   	pop    ecx
c000a9fc:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000aa00:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000aa04:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000aa0a:	e8 d0 e7 01 00       	call   c00291df <__extendsfdf2>
c000aa0f:	83 c4 10             	add    esp,0x10
c000aa12:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa16:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa1e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa22:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa26:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa2a:	e8 b9 dd 01 00       	call   c00287e8 <__muldf3>
c000aa2f:	83 c4 10             	add    esp,0x10
c000aa32:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa36:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa3a:	52                   	push   edx
c000aa3b:	50                   	push   eax
c000aa3c:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa40:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa44:	e8 22 d7 01 00       	call   c002816b <__adddf3>
c000aa49:	59                   	pop    ecx
c000aa4a:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa4e:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa52:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa58:	e8 82 e7 01 00       	call   c00291df <__extendsfdf2>
c000aa5d:	83 c4 10             	add    esp,0x10
c000aa60:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa64:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa6c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa70:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa74:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa78:	e8 6b dd 01 00       	call   c00287e8 <__muldf3>
c000aa7d:	83 c4 10             	add    esp,0x10
c000aa80:	83 eb 18             	sub    ebx,0x18
c000aa83:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa87:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa8b:	52                   	push   edx
c000aa8c:	50                   	push   eax
c000aa8d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa91:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa95:	e8 d1 d6 01 00       	call   c002816b <__adddf3>
c000aa9a:	59                   	pop    ecx
c000aa9b:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aa9f:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aaa3:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aaa9:	e8 31 e7 01 00       	call   c00291df <__extendsfdf2>
c000aaae:	83 c4 10             	add    esp,0x10
c000aab1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aab5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aab9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aabd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aac1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aac5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aac9:	e8 1a dd 01 00       	call   c00287e8 <__muldf3>
c000aace:	83 c4 10             	add    esp,0x10
c000aad1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aad5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aad9:	52                   	push   edx
c000aada:	50                   	push   eax
c000aadb:	57                   	push   edi
c000aadc:	56                   	push   esi
c000aadd:	e8 89 d6 01 00       	call   c002816b <__adddf3>
c000aae2:	83 c4 10             	add    esp,0x10
c000aae5:	89 c6                	mov    esi,eax
c000aae7:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000aaea:	89 d7                	mov    edi,edx
c000aaec:	85 ed                	test   ebp,ebp
c000aaee:	0f 8f 8d fd ff ff    	jg     c000a881 <calc_output_hex+0x363>
c000aaf4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aaf8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aafc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab00:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab04:	e8 62 d6 01 00       	call   c002816b <__adddf3>
c000ab09:	83 c4 10             	add    esp,0x10
c000ab0c:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab0f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab13:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab17:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab23:	e8 c0 dc 01 00       	call   c00287e8 <__muldf3>
c000ab28:	59                   	pop    ecx
c000ab29:	5b                   	pop    ebx
c000ab2a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab2e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab32:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab36:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab3a:	e8 7c e5 01 00       	call   c00290bb <__truncdfsf2>
c000ab3f:	83 c4 10             	add    esp,0x10
c000ab42:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab49:	89 03                	mov    DWORD PTR [ebx],eax
c000ab4b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab4f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab53:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab57:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab5b:	e8 0b d6 01 00       	call   c002816b <__adddf3>
c000ab60:	83 c4 10             	add    esp,0x10
c000ab63:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab66:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab6a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab6e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab72:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab76:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab7a:	e8 69 dc 01 00       	call   c00287e8 <__muldf3>
c000ab7f:	5d                   	pop    ebp
c000ab80:	59                   	pop    ecx
c000ab81:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab85:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab89:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab8d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab91:	e8 25 e5 01 00       	call   c00290bb <__truncdfsf2>
c000ab96:	83 c4 10             	add    esp,0x10
c000ab99:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aba0:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000aba3:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aba7:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abab:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abaf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abb3:	e8 b3 d5 01 00       	call   c002816b <__adddf3>
c000abb8:	83 c4 10             	add    esp,0x10
c000abbb:	89 04 24             	mov    DWORD PTR [esp],eax
c000abbe:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abc2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abc6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abca:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abd2:	e8 11 dc 01 00       	call   c00287e8 <__muldf3>
c000abd7:	5b                   	pop    ebx
c000abd8:	5d                   	pop    ebp
c000abd9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abdd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abe1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe9:	e8 cd e4 01 00       	call   c00290bb <__truncdfsf2>
c000abee:	83 c4 10             	add    esp,0x10
c000abf1:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abf8:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000abfb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abff:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac03:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac07:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac0b:	e8 5b d5 01 00       	call   c002816b <__adddf3>
c000ac10:	83 c4 10             	add    esp,0x10
c000ac13:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac16:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac1a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac1e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac22:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac26:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac2a:	e8 b9 db 01 00       	call   c00287e8 <__muldf3>
c000ac2f:	59                   	pop    ecx
c000ac30:	5b                   	pop    ebx
c000ac31:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac35:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac3d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac41:	e8 75 e4 01 00       	call   c00290bb <__truncdfsf2>
c000ac46:	83 c4 10             	add    esp,0x10
c000ac49:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac50:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac53:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac57:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac5b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac5f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac63:	e8 03 d5 01 00       	call   c002816b <__adddf3>
c000ac68:	83 c4 10             	add    esp,0x10
c000ac6b:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac72:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac76:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac7a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac7e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac82:	e8 61 db 01 00       	call   c00287e8 <__muldf3>
c000ac87:	5d                   	pop    ebp
c000ac88:	59                   	pop    ecx
c000ac89:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac8d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac91:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac95:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac99:	e8 1d e4 01 00       	call   c00290bb <__truncdfsf2>
c000ac9e:	83 c4 10             	add    esp,0x10
c000aca1:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aca8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000acab:	57                   	push   edi
c000acac:	56                   	push   esi
c000acad:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acb1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acb5:	e8 b1 d4 01 00       	call   c002816b <__adddf3>
c000acba:	83 c4 10             	add    esp,0x10
c000acbd:	89 04 24             	mov    DWORD PTR [esp],eax
c000acc0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000acc4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acc8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acd0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acd4:	e8 0f db 01 00       	call   c00287e8 <__muldf3>
c000acd9:	5b                   	pop    ebx
c000acda:	5e                   	pop    esi
c000acdb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acdf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ace3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ace7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aceb:	e8 cb e3 01 00       	call   c00290bb <__truncdfsf2>
c000acf0:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000acf7:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000acfa:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ad00:	5b                   	pop    ebx
c000ad01:	5e                   	pop    esi
c000ad02:	5f                   	pop    edi
c000ad03:	5d                   	pop    ebp
c000ad04:	c3                   	ret    

c000ad05 <sinc_reset>:
c000ad05:	56                   	push   esi
c000ad06:	53                   	push   ebx
c000ad07:	51                   	push   ecx
c000ad08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad0c:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ad0f:	85 db                	test   ebx,ebx
c000ad11:	74 59                	je     c000ad6c <sinc_reset+0x67>
c000ad13:	31 d2                	xor    edx,edx
c000ad15:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad1c:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad1f:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad22:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad29:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad30:	31 c0                	xor    eax,eax
c000ad32:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad38:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad3b:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad3e:	52                   	push   edx
c000ad3f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad42:	c1 e0 02             	shl    eax,0x2
c000ad45:	50                   	push   eax
c000ad46:	6a 00                	push   0x0
c000ad48:	56                   	push   esi
c000ad49:	e8 1e 5a ff ff       	call   c000076c <memset>
c000ad4e:	83 c4 0c             	add    esp,0xc
c000ad51:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad54:	c1 e0 02             	shl    eax,0x2
c000ad57:	50                   	push   eax
c000ad58:	68 aa 00 00 00       	push   0xaa
c000ad5d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad60:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad63:	50                   	push   eax
c000ad64:	e8 03 5a ff ff       	call   c000076c <memset>
c000ad69:	83 c4 10             	add    esp,0x10
c000ad6c:	58                   	pop    eax
c000ad6d:	5b                   	pop    ebx
c000ad6e:	5e                   	pop    esi
c000ad6f:	c3                   	ret    

c000ad70 <calc_output_multi>:
c000ad70:	55                   	push   ebp
c000ad71:	57                   	push   edi
c000ad72:	56                   	push   esi
c000ad73:	89 c6                	mov    esi,eax
c000ad75:	53                   	push   ebx
c000ad76:	83 ec 4c             	sub    esp,0x4c
c000ad79:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad7d:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad81:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ad85:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ad89:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ad8d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ad91:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ad95:	8d 46 44             	lea    eax,[esi+0x44]
c000ad98:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad9b:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000ada1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ada5:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000ada8:	e8 0f eb ff ff       	call   c00098bc <int_to_fp>
c000adad:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000adb0:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000adb4:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000adb8:	99                   	cdq    
c000adb9:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000adbd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000adc1:	0f af d0             	imul   edx,eax
c000adc4:	0f af c3             	imul   eax,ebx
c000adc7:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000adcb:	29 c1                	sub    ecx,eax
c000adcd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000add1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000add5:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000addc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ade0:	57                   	push   edi
c000ade1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ade5:	6a 00                	push   0x0
c000ade7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adeb:	e8 7c 59 ff ff       	call   c000076c <memset>
c000adf0:	83 c4 10             	add    esp,0x10
c000adf3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000adf7:	89 df                	mov    edi,ebx
c000adf9:	e8 cc ea ff ff       	call   c00098ca <fp_to_double>
c000adfe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae02:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae06:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae0a:	e8 b1 ea ff ff       	call   c00098c0 <fp_to_int>
c000ae0f:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ae12:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ae15:	51                   	push   ecx
c000ae16:	51                   	push   ecx
c000ae17:	55                   	push   ebp
c000ae18:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae1c:	e8 df cc 01 00       	call   c0027b00 <__subsf3>
c000ae21:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae24:	e8 b6 e3 01 00       	call   c00291df <__extendsfdf2>
c000ae29:	83 c4 10             	add    esp,0x10
c000ae2c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae30:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae3c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae40:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae44:	e8 9f d9 01 00       	call   c00287e8 <__muldf3>
c000ae49:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae4c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae50:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae54:	e8 86 e3 01 00       	call   c00291df <__extendsfdf2>
c000ae59:	83 c4 10             	add    esp,0x10
c000ae5c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae60:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae64:	52                   	push   edx
c000ae65:	50                   	push   eax
c000ae66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae6e:	e8 f8 d2 01 00       	call   c002816b <__adddf3>
c000ae73:	83 c4 10             	add    esp,0x10
c000ae76:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae7a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae7e:	89 f8                	mov    eax,edi
c000ae80:	b9 08 00 00 00       	mov    ecx,0x8
c000ae85:	99                   	cdq    
c000ae86:	f7 f9                	idiv   ecx
c000ae88:	4a                   	dec    edx
c000ae89:	83 fa 06             	cmp    edx,0x6
c000ae8c:	77 07                	ja     c000ae95 <calc_output_multi+0x125>
c000ae8e:	ff 24 95 e4 aa 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd551c]
c000ae95:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae98:	4f                   	dec    edi
c000ae99:	83 ec 0c             	sub    esp,0xc
c000ae9c:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae9f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aea3:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aeaa:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aeae:	e8 2c e3 01 00       	call   c00291df <__extendsfdf2>
c000aeb3:	83 c4 10             	add    esp,0x10
c000aeb6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aeba:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aebe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aec2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aec6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeca:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aece:	e8 15 d9 01 00       	call   c00287e8 <__muldf3>
c000aed3:	83 c4 10             	add    esp,0x10
c000aed6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aeda:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aede:	52                   	push   edx
c000aedf:	50                   	push   eax
c000aee0:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aee3:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aee6:	e8 80 d2 01 00       	call   c002816b <__adddf3>
c000aeeb:	83 c4 10             	add    esp,0x10
c000aeee:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aef1:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aef4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aef7:	4f                   	dec    edi
c000aef8:	83 ec 0c             	sub    esp,0xc
c000aefb:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aefe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af02:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af09:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af0d:	e8 cd e2 01 00       	call   c00291df <__extendsfdf2>
c000af12:	83 c4 10             	add    esp,0x10
c000af15:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af19:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af25:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af29:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af2d:	e8 b6 d8 01 00       	call   c00287e8 <__muldf3>
c000af32:	83 c4 10             	add    esp,0x10
c000af35:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af39:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af3d:	52                   	push   edx
c000af3e:	50                   	push   eax
c000af3f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af42:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af45:	e8 21 d2 01 00       	call   c002816b <__adddf3>
c000af4a:	83 c4 10             	add    esp,0x10
c000af4d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af50:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af53:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af56:	4f                   	dec    edi
c000af57:	83 ec 0c             	sub    esp,0xc
c000af5a:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af5d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af61:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af68:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af6c:	e8 6e e2 01 00       	call   c00291df <__extendsfdf2>
c000af71:	83 c4 10             	add    esp,0x10
c000af74:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af78:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af84:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af88:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af8c:	e8 57 d8 01 00       	call   c00287e8 <__muldf3>
c000af91:	83 c4 10             	add    esp,0x10
c000af94:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af98:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af9c:	52                   	push   edx
c000af9d:	50                   	push   eax
c000af9e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afa1:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afa4:	e8 c2 d1 01 00       	call   c002816b <__adddf3>
c000afa9:	83 c4 10             	add    esp,0x10
c000afac:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000afaf:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000afb2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000afb5:	4f                   	dec    edi
c000afb6:	83 ec 0c             	sub    esp,0xc
c000afb9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afbc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afc0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afc7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afcb:	e8 0f e2 01 00       	call   c00291df <__extendsfdf2>
c000afd0:	83 c4 10             	add    esp,0x10
c000afd3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afd7:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afdb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afdf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afe3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afe7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afeb:	e8 f8 d7 01 00       	call   c00287e8 <__muldf3>
c000aff0:	83 c4 10             	add    esp,0x10
c000aff3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aff7:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000affb:	52                   	push   edx
c000affc:	50                   	push   eax
c000affd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b000:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b003:	e8 63 d1 01 00       	call   c002816b <__adddf3>
c000b008:	83 c4 10             	add    esp,0x10
c000b00b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b00e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b011:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b014:	4f                   	dec    edi
c000b015:	83 ec 0c             	sub    esp,0xc
c000b018:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b01b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b01f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b026:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b02a:	e8 b0 e1 01 00       	call   c00291df <__extendsfdf2>
c000b02f:	83 c4 10             	add    esp,0x10
c000b032:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b036:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b03a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b03e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b042:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b046:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b04a:	e8 99 d7 01 00       	call   c00287e8 <__muldf3>
c000b04f:	83 c4 10             	add    esp,0x10
c000b052:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b056:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b05a:	52                   	push   edx
c000b05b:	50                   	push   eax
c000b05c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b05f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b062:	e8 04 d1 01 00       	call   c002816b <__adddf3>
c000b067:	83 c4 10             	add    esp,0x10
c000b06a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b06d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b070:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b073:	4f                   	dec    edi
c000b074:	83 ec 0c             	sub    esp,0xc
c000b077:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b07a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b07e:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b085:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b089:	e8 51 e1 01 00       	call   c00291df <__extendsfdf2>
c000b08e:	83 c4 10             	add    esp,0x10
c000b091:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b095:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b099:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b09d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0a1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0a5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0a9:	e8 3a d7 01 00       	call   c00287e8 <__muldf3>
c000b0ae:	83 c4 10             	add    esp,0x10
c000b0b1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0b5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0b9:	52                   	push   edx
c000b0ba:	50                   	push   eax
c000b0bb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0be:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0c1:	e8 a5 d0 01 00       	call   c002816b <__adddf3>
c000b0c6:	83 c4 10             	add    esp,0x10
c000b0c9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0cc:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0cf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0d2:	4f                   	dec    edi
c000b0d3:	83 ec 0c             	sub    esp,0xc
c000b0d6:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0d9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0dd:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0e4:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0e8:	e8 f2 e0 01 00       	call   c00291df <__extendsfdf2>
c000b0ed:	83 c4 10             	add    esp,0x10
c000b0f0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0f4:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0f8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0fc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b100:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b104:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b108:	e8 db d6 01 00       	call   c00287e8 <__muldf3>
c000b10d:	83 c4 10             	add    esp,0x10
c000b110:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b114:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b118:	52                   	push   edx
c000b119:	50                   	push   eax
c000b11a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b11d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b120:	e8 46 d0 01 00       	call   c002816b <__adddf3>
c000b125:	83 c4 10             	add    esp,0x10
c000b128:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b12b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b12e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b131:	4f                   	dec    edi
c000b132:	83 ec 0c             	sub    esp,0xc
c000b135:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b138:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b13c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b143:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b147:	e8 93 e0 01 00       	call   c00291df <__extendsfdf2>
c000b14c:	83 c4 10             	add    esp,0x10
c000b14f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b153:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b157:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b15b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b15f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b163:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b167:	e8 7c d6 01 00       	call   c00287e8 <__muldf3>
c000b16c:	83 c4 10             	add    esp,0x10
c000b16f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b173:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b177:	52                   	push   edx
c000b178:	50                   	push   eax
c000b179:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b17c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b17f:	e8 e7 cf 01 00       	call   c002816b <__adddf3>
c000b184:	83 c4 10             	add    esp,0x10
c000b187:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b18a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b18d:	85 ff                	test   edi,edi
c000b18f:	0f 8f e9 fc ff ff    	jg     c000ae7e <calc_output_multi+0x10e>
c000b195:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b199:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b19d:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b1a1:	0f 89 4c fc ff ff    	jns    c000adf3 <calc_output_multi+0x83>
c000b1a7:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b1ab:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b1af:	29 c8                	sub    eax,ecx
c000b1b1:	99                   	cdq    
c000b1b2:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b1b6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b1ba:	0f af d0             	imul   edx,eax
c000b1bd:	40                   	inc    eax
c000b1be:	01 d1                	add    ecx,edx
c000b1c0:	0f af c3             	imul   eax,ebx
c000b1c3:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1c7:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1ce:	55                   	push   ebp
c000b1cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1d3:	6a 00                	push   0x0
c000b1d5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1d9:	e8 8e 55 ff ff       	call   c000076c <memset>
c000b1de:	83 c4 10             	add    esp,0x10
c000b1e1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1e5:	e8 e0 e6 ff ff       	call   c00098ca <fp_to_double>
c000b1ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b1ee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b1f2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1f6:	e8 c5 e6 ff ff       	call   c00098c0 <fp_to_int>
c000b1fb:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b1fe:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b201:	57                   	push   edi
c000b202:	57                   	push   edi
c000b203:	89 df                	mov    edi,ebx
c000b205:	55                   	push   ebp
c000b206:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b20a:	e8 f1 c8 01 00       	call   c0027b00 <__subsf3>
c000b20f:	89 04 24             	mov    DWORD PTR [esp],eax
c000b212:	e8 c8 df 01 00       	call   c00291df <__extendsfdf2>
c000b217:	83 c4 10             	add    esp,0x10
c000b21a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b21e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b222:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b226:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b22a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b22e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b232:	e8 b1 d5 01 00       	call   c00287e8 <__muldf3>
c000b237:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b23a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b23e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b242:	e8 98 df 01 00       	call   c00291df <__extendsfdf2>
c000b247:	83 c4 10             	add    esp,0x10
c000b24a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b24e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b252:	52                   	push   edx
c000b253:	50                   	push   eax
c000b254:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b258:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b25c:	e8 0a cf 01 00       	call   c002816b <__adddf3>
c000b261:	83 c4 10             	add    esp,0x10
c000b264:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b268:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b26c:	89 f8                	mov    eax,edi
c000b26e:	b9 08 00 00 00       	mov    ecx,0x8
c000b273:	99                   	cdq    
c000b274:	f7 f9                	idiv   ecx
c000b276:	4a                   	dec    edx
c000b277:	83 fa 06             	cmp    edx,0x6
c000b27a:	77 07                	ja     c000b283 <calc_output_multi+0x513>
c000b27c:	ff 24 95 00 ab 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd5500]
c000b283:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b287:	4f                   	dec    edi
c000b288:	83 ec 0c             	sub    esp,0xc
c000b28b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b28e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b292:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b299:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b29d:	e8 3d df 01 00       	call   c00291df <__extendsfdf2>
c000b2a2:	83 c4 10             	add    esp,0x10
c000b2a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2a9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2b5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2bd:	e8 26 d5 01 00       	call   c00287e8 <__muldf3>
c000b2c2:	83 c4 10             	add    esp,0x10
c000b2c5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2cd:	52                   	push   edx
c000b2ce:	50                   	push   eax
c000b2cf:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2d2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2d5:	e8 91 ce 01 00       	call   c002816b <__adddf3>
c000b2da:	83 c4 10             	add    esp,0x10
c000b2dd:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2e0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2e7:	4f                   	dec    edi
c000b2e8:	83 ec 0c             	sub    esp,0xc
c000b2eb:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2f2:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2f9:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2fd:	e8 dd de 01 00       	call   c00291df <__extendsfdf2>
c000b302:	83 c4 10             	add    esp,0x10
c000b305:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b309:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b30d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b311:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b315:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b319:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b31d:	e8 c6 d4 01 00       	call   c00287e8 <__muldf3>
c000b322:	83 c4 10             	add    esp,0x10
c000b325:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b329:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b32d:	52                   	push   edx
c000b32e:	50                   	push   eax
c000b32f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b332:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b335:	e8 31 ce 01 00       	call   c002816b <__adddf3>
c000b33a:	83 c4 10             	add    esp,0x10
c000b33d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b340:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b343:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b347:	4f                   	dec    edi
c000b348:	83 ec 0c             	sub    esp,0xc
c000b34b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b34e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b352:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b359:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b35d:	e8 7d de 01 00       	call   c00291df <__extendsfdf2>
c000b362:	83 c4 10             	add    esp,0x10
c000b365:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b369:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b36d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b371:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b375:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b379:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b37d:	e8 66 d4 01 00       	call   c00287e8 <__muldf3>
c000b382:	83 c4 10             	add    esp,0x10
c000b385:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b389:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b38d:	52                   	push   edx
c000b38e:	50                   	push   eax
c000b38f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b392:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b395:	e8 d1 cd 01 00       	call   c002816b <__adddf3>
c000b39a:	83 c4 10             	add    esp,0x10
c000b39d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3a0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3a7:	4f                   	dec    edi
c000b3a8:	83 ec 0c             	sub    esp,0xc
c000b3ab:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3b2:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3b9:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3bd:	e8 1d de 01 00       	call   c00291df <__extendsfdf2>
c000b3c2:	83 c4 10             	add    esp,0x10
c000b3c5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3d5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3dd:	e8 06 d4 01 00       	call   c00287e8 <__muldf3>
c000b3e2:	83 c4 10             	add    esp,0x10
c000b3e5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3e9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3ed:	52                   	push   edx
c000b3ee:	50                   	push   eax
c000b3ef:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3f2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3f5:	e8 71 cd 01 00       	call   c002816b <__adddf3>
c000b3fa:	83 c4 10             	add    esp,0x10
c000b3fd:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b400:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b403:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b407:	4f                   	dec    edi
c000b408:	83 ec 0c             	sub    esp,0xc
c000b40b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b40e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b412:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b419:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b41d:	e8 bd dd 01 00       	call   c00291df <__extendsfdf2>
c000b422:	83 c4 10             	add    esp,0x10
c000b425:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b429:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b42d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b431:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b435:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b439:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b43d:	e8 a6 d3 01 00       	call   c00287e8 <__muldf3>
c000b442:	83 c4 10             	add    esp,0x10
c000b445:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b449:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b44d:	52                   	push   edx
c000b44e:	50                   	push   eax
c000b44f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b452:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b455:	e8 11 cd 01 00       	call   c002816b <__adddf3>
c000b45a:	83 c4 10             	add    esp,0x10
c000b45d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b460:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b463:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b467:	4f                   	dec    edi
c000b468:	83 ec 0c             	sub    esp,0xc
c000b46b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b46e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b472:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b479:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b47d:	e8 5d dd 01 00       	call   c00291df <__extendsfdf2>
c000b482:	83 c4 10             	add    esp,0x10
c000b485:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b489:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b48d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b491:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b495:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b499:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b49d:	e8 46 d3 01 00       	call   c00287e8 <__muldf3>
c000b4a2:	83 c4 10             	add    esp,0x10
c000b4a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4a9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4ad:	52                   	push   edx
c000b4ae:	50                   	push   eax
c000b4af:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4b2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4b5:	e8 b1 cc 01 00       	call   c002816b <__adddf3>
c000b4ba:	83 c4 10             	add    esp,0x10
c000b4bd:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4c0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4c7:	4f                   	dec    edi
c000b4c8:	83 ec 0c             	sub    esp,0xc
c000b4cb:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4d2:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4d9:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4dd:	e8 fd dc 01 00       	call   c00291df <__extendsfdf2>
c000b4e2:	83 c4 10             	add    esp,0x10
c000b4e5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4e9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4f5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4fd:	e8 e6 d2 01 00       	call   c00287e8 <__muldf3>
c000b502:	83 c4 10             	add    esp,0x10
c000b505:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b509:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b50d:	52                   	push   edx
c000b50e:	50                   	push   eax
c000b50f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b512:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b515:	e8 51 cc 01 00       	call   c002816b <__adddf3>
c000b51a:	83 c4 10             	add    esp,0x10
c000b51d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b520:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b523:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b527:	4f                   	dec    edi
c000b528:	83 ec 0c             	sub    esp,0xc
c000b52b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b52e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b532:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b539:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b53d:	e8 9d dc 01 00       	call   c00291df <__extendsfdf2>
c000b542:	83 c4 10             	add    esp,0x10
c000b545:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b549:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b54d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b551:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b555:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b559:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b55d:	e8 86 d2 01 00       	call   c00287e8 <__muldf3>
c000b562:	83 c4 10             	add    esp,0x10
c000b565:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b569:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b56d:	52                   	push   edx
c000b56e:	50                   	push   eax
c000b56f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b572:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b575:	e8 f1 cb 01 00       	call   c002816b <__adddf3>
c000b57a:	83 c4 10             	add    esp,0x10
c000b57d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b580:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b583:	85 ff                	test   edi,edi
c000b585:	0f 8f e1 fc ff ff    	jg     c000b26c <calc_output_multi+0x4fc>
c000b58b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b58f:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b593:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b597:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b59c:	0f 8f 3f fc ff ff    	jg     c000b1e1 <calc_output_multi+0x471>
c000b5a2:	be 08 00 00 00       	mov    esi,0x8
c000b5a7:	89 d8                	mov    eax,ebx
c000b5a9:	99                   	cdq    
c000b5aa:	f7 fe                	idiv   esi
c000b5ac:	4a                   	dec    edx
c000b5ad:	83 fa 06             	cmp    edx,0x6
c000b5b0:	77 07                	ja     c000b5b9 <calc_output_multi+0x849>
c000b5b2:	ff 24 95 1c ab 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd54e4]
c000b5b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5bd:	4b                   	dec    ebx
c000b5be:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5c2:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5c9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5cd:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5d0:	e8 96 cb 01 00       	call   c002816b <__adddf3>
c000b5d5:	83 c4 10             	add    esp,0x10
c000b5d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5dc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5f0:	e8 f3 d1 01 00       	call   c00287e8 <__muldf3>
c000b5f5:	5d                   	pop    ebp
c000b5f6:	59                   	pop    ecx
c000b5f7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5fb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b603:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b607:	e8 af da 01 00       	call   c00290bb <__truncdfsf2>
c000b60c:	83 c4 10             	add    esp,0x10
c000b60f:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b613:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b616:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b61a:	4b                   	dec    ebx
c000b61b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b61f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b622:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b626:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b62a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b62d:	e8 39 cb 01 00       	call   c002816b <__adddf3>
c000b632:	83 c4 10             	add    esp,0x10
c000b635:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b639:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b63d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b641:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b645:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b649:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b64d:	e8 96 d1 01 00       	call   c00287e8 <__muldf3>
c000b652:	59                   	pop    ecx
c000b653:	5f                   	pop    edi
c000b654:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b658:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b65c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b660:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b664:	e8 52 da 01 00       	call   c00290bb <__truncdfsf2>
c000b669:	83 c4 10             	add    esp,0x10
c000b66c:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b670:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b673:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b677:	4b                   	dec    ebx
c000b678:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b67c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b67f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b683:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b687:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b68a:	e8 dc ca 01 00       	call   c002816b <__adddf3>
c000b68f:	83 c4 10             	add    esp,0x10
c000b692:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b696:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b69a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b69e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6aa:	e8 39 d1 01 00       	call   c00287e8 <__muldf3>
c000b6af:	5f                   	pop    edi
c000b6b0:	5d                   	pop    ebp
c000b6b1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6b5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6b9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c1:	e8 f5 d9 01 00       	call   c00290bb <__truncdfsf2>
c000b6c6:	83 c4 10             	add    esp,0x10
c000b6c9:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6cd:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6d4:	4b                   	dec    ebx
c000b6d5:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6d9:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6e0:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6e4:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6e7:	e8 7f ca 01 00       	call   c002816b <__adddf3>
c000b6ec:	83 c4 10             	add    esp,0x10
c000b6ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b703:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b707:	e8 dc d0 01 00       	call   c00287e8 <__muldf3>
c000b70c:	5d                   	pop    ebp
c000b70d:	59                   	pop    ecx
c000b70e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b712:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b716:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b71a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b71e:	e8 98 d9 01 00       	call   c00290bb <__truncdfsf2>
c000b723:	83 c4 10             	add    esp,0x10
c000b726:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b72a:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b72d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b731:	4b                   	dec    ebx
c000b732:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b736:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b739:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b73d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b741:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b744:	e8 22 ca 01 00       	call   c002816b <__adddf3>
c000b749:	83 c4 10             	add    esp,0x10
c000b74c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b750:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b754:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b758:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b75c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b760:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b764:	e8 7f d0 01 00       	call   c00287e8 <__muldf3>
c000b769:	59                   	pop    ecx
c000b76a:	5f                   	pop    edi
c000b76b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b76f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b773:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b777:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b77b:	e8 3b d9 01 00       	call   c00290bb <__truncdfsf2>
c000b780:	83 c4 10             	add    esp,0x10
c000b783:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b787:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b78a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b78e:	4b                   	dec    ebx
c000b78f:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b793:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b796:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b79a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b79e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7a1:	e8 c5 c9 01 00       	call   c002816b <__adddf3>
c000b7a6:	83 c4 10             	add    esp,0x10
c000b7a9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7ad:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7b9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7c1:	e8 22 d0 01 00       	call   c00287e8 <__muldf3>
c000b7c6:	5f                   	pop    edi
c000b7c7:	5d                   	pop    ebp
c000b7c8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7cc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7d8:	e8 de d8 01 00       	call   c00290bb <__truncdfsf2>
c000b7dd:	83 c4 10             	add    esp,0x10
c000b7e0:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7e4:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7eb:	4b                   	dec    ebx
c000b7ec:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7f0:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7f3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7f7:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7fb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7fe:	e8 68 c9 01 00       	call   c002816b <__adddf3>
c000b803:	83 c4 10             	add    esp,0x10
c000b806:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b80a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b80e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b812:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b816:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b81a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b81e:	e8 c5 cf 01 00       	call   c00287e8 <__muldf3>
c000b823:	5d                   	pop    ebp
c000b824:	59                   	pop    ecx
c000b825:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b829:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b82d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b831:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b835:	e8 81 d8 01 00       	call   c00290bb <__truncdfsf2>
c000b83a:	83 c4 10             	add    esp,0x10
c000b83d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b841:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b844:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b848:	4b                   	dec    ebx
c000b849:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b84d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b850:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b854:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b858:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b85b:	e8 0b c9 01 00       	call   c002816b <__adddf3>
c000b860:	83 c4 10             	add    esp,0x10
c000b863:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b867:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b86b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b86f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b873:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b877:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b87b:	e8 68 cf 01 00       	call   c00287e8 <__muldf3>
c000b880:	59                   	pop    ecx
c000b881:	5f                   	pop    edi
c000b882:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b886:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b88a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b88e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b892:	e8 24 d8 01 00       	call   c00290bb <__truncdfsf2>
c000b897:	83 c4 10             	add    esp,0x10
c000b89a:	85 db                	test   ebx,ebx
c000b89c:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b8a0:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b8a3:	0f 8f fe fc ff ff    	jg     c000b5a7 <calc_output_multi+0x837>
c000b8a9:	83 c4 4c             	add    esp,0x4c
c000b8ac:	5b                   	pop    ebx
c000b8ad:	5e                   	pop    esi
c000b8ae:	5f                   	pop    edi
c000b8af:	5d                   	pop    ebp
c000b8b0:	c3                   	ret    

c000b8b1 <double_to_fp>:
c000b8b1:	83 ec 0c             	sub    esp,0xc
c000b8b4:	68 00 00 b0 40       	push   0x40b00000
c000b8b9:	6a 00                	push   0x0
c000b8bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8c3:	e8 20 cf 01 00       	call   c00287e8 <__muldf3>
c000b8c8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8d0:	83 c4 1c             	add    esp,0x1c
c000b8d3:	e9 98 d9 01 00       	jmp    c0029270 <lrint>

c000b8d8 <prepare_data>:
c000b8d8:	55                   	push   ebp
c000b8d9:	57                   	push   edi
c000b8da:	56                   	push   esi
c000b8db:	53                   	push   ebx
c000b8dc:	83 ec 1c             	sub    esp,0x1c
c000b8df:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b8e3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b8e7:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b8eb:	0f 89 57 01 00 00    	jns    c000ba48 <prepare_data+0x170>
c000b8f1:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b8f4:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b8f7:	85 d2                	test   edx,edx
c000b8f9:	75 0d                	jne    c000b908 <prepare_data+0x30>
c000b8fb:	8d 14 36             	lea    edx,[esi+esi*1]
c000b8fe:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b901:	29 d0                	sub    eax,edx
c000b903:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b906:	eb 44                	jmp    c000b94c <prepare_data+0x74>
c000b908:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b90b:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b90e:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b911:	39 c1                	cmp    ecx,eax
c000b913:	7d 04                	jge    c000b919 <prepare_data+0x41>
c000b915:	29 d0                	sub    eax,edx
c000b917:	eb 2d                	jmp    c000b946 <prepare_data+0x6e>
c000b919:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b91f:	29 d7                	sub    edi,edx
c000b921:	01 f7                	add    edi,esi
c000b923:	51                   	push   ecx
c000b924:	29 f2                	sub    edx,esi
c000b926:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b92d:	8d 14 90             	lea    edx,[eax+edx*4]
c000b930:	51                   	push   ecx
c000b931:	52                   	push   edx
c000b932:	50                   	push   eax
c000b933:	e8 6c 4d ff ff       	call   c00006a4 <memmove>
c000b938:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b93b:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b93e:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b941:	29 f0                	sub    eax,esi
c000b943:	83 c4 10             	add    esp,0x10
c000b946:	29 f0                	sub    eax,esi
c000b948:	79 02                	jns    c000b94c <prepare_data+0x74>
c000b94a:	31 c0                	xor    eax,eax
c000b94c:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b94f:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b952:	29 ef                	sub    edi,ebp
c000b954:	39 c7                	cmp    edi,eax
c000b956:	7e 02                	jle    c000b95a <prepare_data+0x82>
c000b958:	89 c7                	mov    edi,eax
c000b95a:	89 f8                	mov    eax,edi
c000b95c:	99                   	cdq    
c000b95d:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b960:	b8 15 00 00 00       	mov    eax,0x15
c000b965:	29 d7                	sub    edi,edx
c000b967:	0f 88 dd 00 00 00    	js     c000ba4a <prepare_data+0x172>
c000b96d:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b970:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b973:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b976:	0f 8f ce 00 00 00    	jg     c000ba4a <prepare_data+0x172>
c000b97c:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b982:	50                   	push   eax
c000b983:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b98a:	50                   	push   eax
c000b98b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b98f:	8b 00                	mov    eax,DWORD PTR [eax]
c000b991:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b994:	50                   	push   eax
c000b995:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b998:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b99c:	50                   	push   eax
c000b99d:	e8 c1 4c ff ff       	call   c0000663 <memcpy>
c000b9a2:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b9a5:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b9a8:	01 fd                	add    ebp,edi
c000b9aa:	01 f9                	add    ecx,edi
c000b9ac:	83 c4 10             	add    esp,0x10
c000b9af:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b9b2:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b9b5:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b9b8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9bc:	0f 85 86 00 00 00    	jne    c000ba48 <prepare_data+0x170>
c000b9c2:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9c5:	89 e8                	mov    eax,ebp
c000b9c7:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9ca:	29 c8                	sub    eax,ecx
c000b9cc:	39 f8                	cmp    eax,edi
c000b9ce:	7d 78                	jge    c000ba48 <prepare_data+0x170>
c000b9d0:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9d4:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9d8:	74 6e                	je     c000ba48 <prepare_data+0x170>
c000b9da:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9dd:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9e1:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b9e4:	29 ef                	sub    edi,ebp
c000b9e6:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b9ea:	7c 29                	jl     c000ba15 <prepare_data+0x13d>
c000b9ec:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b9ef:	29 f1                	sub    ecx,esi
c000b9f1:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9f8:	55                   	push   ebp
c000b9f9:	50                   	push   eax
c000b9fa:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9fd:	50                   	push   eax
c000b9fe:	52                   	push   edx
c000b9ff:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba03:	e8 9c 4c ff ff       	call   c00006a4 <memmove>
c000ba08:	83 c4 10             	add    esp,0x10
c000ba0b:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000ba0e:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000ba11:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba15:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ba18:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ba1b:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba1e:	83 c6 05             	add    esi,0x5
c000ba21:	78 07                	js     c000ba2a <prepare_data+0x152>
c000ba23:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba26:	39 cf                	cmp    edi,ecx
c000ba28:	7e 04                	jle    c000ba2e <prepare_data+0x156>
c000ba2a:	89 ce                	mov    esi,ecx
c000ba2c:	29 c6                	sub    esi,eax
c000ba2e:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba31:	51                   	push   ecx
c000ba32:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba39:	51                   	push   ecx
c000ba3a:	6a 00                	push   0x0
c000ba3c:	50                   	push   eax
c000ba3d:	e8 2a 4d ff ff       	call   c000076c <memset>
c000ba42:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba45:	83 c4 10             	add    esp,0x10
c000ba48:	31 c0                	xor    eax,eax
c000ba4a:	83 c4 1c             	add    esp,0x1c
c000ba4d:	5b                   	pop    ebx
c000ba4e:	5e                   	pop    esi
c000ba4f:	5f                   	pop    edi
c000ba50:	5d                   	pop    ebp
c000ba51:	c3                   	ret    

c000ba52 <sinc_multichan_vari_process>:
c000ba52:	55                   	push   ebp
c000ba53:	ba 05 00 00 00       	mov    edx,0x5
c000ba58:	57                   	push   edi
c000ba59:	56                   	push   esi
c000ba5a:	53                   	push   ebx
c000ba5b:	83 ec 4c             	sub    esp,0x4c
c000ba5e:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba62:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba66:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba69:	85 db                	test   ebx,ebx
c000ba6b:	0f 84 9b 06 00 00    	je     c000c10c <sinc_multichan_vari_process+0x6ba>
c000ba71:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba74:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba77:	0f af c5             	imul   eax,ebp
c000ba7a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba7d:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba80:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ba87:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ba8e:	0f af c5             	imul   eax,ebp
c000ba91:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ba94:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ba97:	8b 06                	mov    eax,DWORD PTR [esi]
c000ba99:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ba9d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000baa1:	68 00 00 70 3f       	push   0x3f700000
c000baa6:	6a 00                	push   0x0
c000baa8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab0:	e8 02 d6 01 00       	call   c00290b7 <__ltdf2>
c000bab5:	83 c4 10             	add    esp,0x10
c000bab8:	ba 16 00 00 00       	mov    edx,0x16
c000babd:	85 c0                	test   eax,eax
c000babf:	0f 88 47 06 00 00    	js     c000c10c <sinc_multichan_vari_process+0x6ba>
c000bac5:	68 00 00 70 40       	push   0x40700000
c000baca:	6a 00                	push   0x0
c000bacc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bad0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bad4:	e8 c0 d5 01 00       	call   c0029099 <__gtdf2>
c000bad9:	83 c4 10             	add    esp,0x10
c000badc:	ba 16 00 00 00       	mov    edx,0x16
c000bae1:	85 c0                	test   eax,eax
c000bae3:	0f 8f 23 06 00 00    	jg     c000c10c <sinc_multichan_vari_process+0x6ba>
c000bae9:	83 ec 0c             	sub    esp,0xc
c000baec:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000baef:	e8 57 d3 01 00       	call   c0028e4b <__floatsidf>
c000baf4:	83 c4 10             	add    esp,0x10
c000baf7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bafb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000baff:	68 00 00 00 40       	push   0x40000000
c000bb04:	6a 00                	push   0x0
c000bb06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb0e:	e8 58 c6 01 00       	call   c002816b <__adddf3>
c000bb13:	59                   	pop    ecx
c000bb14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb18:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb1c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb1f:	e8 27 d3 01 00       	call   c0028e4b <__floatsidf>
c000bb24:	83 c4 10             	add    esp,0x10
c000bb27:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb2b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb2f:	52                   	push   edx
c000bb30:	50                   	push   eax
c000bb31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb39:	e8 8e cf 01 00       	call   c0028acc <__divdf3>
c000bb3e:	83 c4 10             	add    esp,0x10
c000bb41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb45:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb49:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb4c:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb4f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb53:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb57:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb5b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb67:	e8 2d d5 01 00       	call   c0029099 <__gtdf2>
c000bb6c:	83 c4 10             	add    esp,0x10
c000bb6f:	85 c0                	test   eax,eax
c000bb71:	7e 2d                	jle    c000bba0 <sinc_multichan_vari_process+0x14e>
c000bb73:	68 00 00 f0 3f       	push   0x3ff00000
c000bb78:	6a 00                	push   0x0
c000bb7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb82:	e8 30 d5 01 00       	call   c00290b7 <__ltdf2>
c000bb87:	83 c4 10             	add    esp,0x10
c000bb8a:	85 c0                	test   eax,eax
c000bb8c:	79 4d                	jns    c000bbdb <sinc_multichan_vari_process+0x189>
c000bb8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb92:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb96:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb9a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb9e:	eb 1b                	jmp    c000bbbb <sinc_multichan_vari_process+0x169>
c000bba0:	68 00 00 f0 3f       	push   0x3ff00000
c000bba5:	6a 00                	push   0x0
c000bba7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbaf:	e8 03 d5 01 00       	call   c00290b7 <__ltdf2>
c000bbb4:	83 c4 10             	add    esp,0x10
c000bbb7:	85 c0                	test   eax,eax
c000bbb9:	79 20                	jns    c000bbdb <sinc_multichan_vari_process+0x189>
c000bbbb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbbf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbc3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbcb:	e8 fc ce 01 00       	call   c0028acc <__divdf3>
c000bbd0:	83 c4 10             	add    esp,0x10
c000bbd3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbd7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbdb:	50                   	push   eax
c000bbdc:	50                   	push   eax
c000bbdd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe5:	e8 86 d6 01 00       	call   c0029270 <lrint>
c000bbea:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bbed:	40                   	inc    eax
c000bbee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbf2:	0f af c5             	imul   eax,ebp
c000bbf5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bbf9:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bbfc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc00:	58                   	pop    eax
c000bc01:	5a                   	pop    edx
c000bc02:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc06:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc0a:	e8 61 d6 01 00       	call   c0029270 <lrint>
c000bc0f:	83 ec 0c             	sub    esp,0xc
c000bc12:	50                   	push   eax
c000bc13:	e8 33 d2 01 00       	call   c0028e4b <__floatsidf>
c000bc18:	83 c4 10             	add    esp,0x10
c000bc1b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc1f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc23:	52                   	push   edx
c000bc24:	50                   	push   eax
c000bc25:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc29:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc2d:	e8 8a cb 01 00       	call   c00287bc <__subdf3>
c000bc32:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc36:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc3a:	83 c4 20             	add    esp,0x20
c000bc3d:	6a 00                	push   0x0
c000bc3f:	6a 00                	push   0x0
c000bc41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc49:	e8 69 d4 01 00       	call   c00290b7 <__ltdf2>
c000bc4e:	83 c4 10             	add    esp,0x10
c000bc51:	85 c0                	test   eax,eax
c000bc53:	79 1f                	jns    c000bc74 <sinc_multichan_vari_process+0x222>
c000bc55:	68 00 00 f0 3f       	push   0x3ff00000
c000bc5a:	6a 00                	push   0x0
c000bc5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc64:	e8 02 c5 01 00       	call   c002816b <__adddf3>
c000bc69:	83 c4 10             	add    esp,0x10
c000bc6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc70:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc74:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc77:	83 ec 10             	sub    esp,0x10
c000bc7a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc7e:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc81:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc85:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc89:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc8d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc91:	e8 26 cb 01 00       	call   c00287bc <__subdf3>
c000bc96:	83 c4 18             	add    esp,0x18
c000bc99:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bc9d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bca1:	52                   	push   edx
c000bca2:	50                   	push   eax
c000bca3:	e8 c8 d5 01 00       	call   c0029270 <lrint>
c000bca8:	0f af e8             	imul   ebp,eax
c000bcab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bcaf:	01 e8                	add    eax,ebp
c000bcb1:	99                   	cdq    
c000bcb2:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bcb5:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bcb8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcbc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcc0:	68 00 00 f0 3f       	push   0x3ff00000
c000bcc5:	6a 00                	push   0x0
c000bcc7:	e8 00 ce 01 00       	call   c0028acc <__divdf3>
c000bccc:	83 c4 10             	add    esp,0x10
c000bccf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcd3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcd7:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcdc:	68 23 42 92 0c       	push   0xc924223
c000bce1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bce5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bce9:	e8 7d c4 01 00       	call   c002816b <__adddf3>
c000bcee:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bcf2:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bcf6:	83 c4 20             	add    esp,0x20
c000bcf9:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd01:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bd09:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bd0c:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bd0f:	7d 50                	jge    c000bd61 <sinc_multichan_vari_process+0x30f>
c000bd11:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd14:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd17:	01 c8                	add    eax,ecx
c000bd19:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd1c:	99                   	cdq    
c000bd1d:	f7 f9                	idiv   ecx
c000bd1f:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd23:	7d 0c                	jge    c000bd31 <sinc_multichan_vari_process+0x2df>
c000bd25:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd28:	85 ed                	test   ebp,ebp
c000bd2a:	79 6b                	jns    c000bd97 <sinc_multichan_vari_process+0x345>
c000bd2c:	e9 e6 00 00 00       	jmp    c000be17 <sinc_multichan_vari_process+0x3c5>
c000bd31:	50                   	push   eax
c000bd32:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd36:	57                   	push   edi
c000bd37:	53                   	push   ebx
c000bd38:	e8 9b fb ff ff       	call   c000b8d8 <prepare_data>
c000bd3d:	83 c4 10             	add    esp,0x10
c000bd40:	89 c2                	mov    edx,eax
c000bd42:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd45:	85 c0                	test   eax,eax
c000bd47:	0f 85 bf 03 00 00    	jne    c000c10c <sinc_multichan_vari_process+0x6ba>
c000bd4d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd50:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd53:	01 c8                	add    eax,ecx
c000bd55:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd58:	99                   	cdq    
c000bd59:	f7 f9                	idiv   ecx
c000bd5b:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd5f:	7c c4                	jl     c000bd25 <sinc_multichan_vari_process+0x2d3>
c000bd61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd65:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd69:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd6c:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd73:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd77:	89 06                	mov    DWORD PTR [esi],eax
c000bd79:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd7c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd7f:	99                   	cdq    
c000bd80:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd83:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bd86:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bd89:	99                   	cdq    
c000bd8a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd8d:	31 d2                	xor    edx,edx
c000bd8f:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bd92:	e9 75 03 00 00       	jmp    c000c10c <sinc_multichan_vari_process+0x6ba>
c000bd97:	83 ec 0c             	sub    esp,0xc
c000bd9a:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bd9d:	e8 a9 d0 01 00       	call   c0028e4b <__floatsidf>
c000bda2:	83 c4 10             	add    esp,0x10
c000bda5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bda9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdad:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdb1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdb5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdb9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdbd:	e8 a9 c3 01 00       	call   c002816b <__adddf3>
c000bdc2:	83 c4 10             	add    esp,0x10
c000bdc5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdc9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdcd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdd1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdd5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdd9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bddd:	e8 89 c3 01 00       	call   c002816b <__adddf3>
c000bde2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bde5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bde9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bded:	e8 59 d0 01 00       	call   c0028e4b <__floatsidf>
c000bdf2:	83 c4 10             	add    esp,0x10
c000bdf5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bdf9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bdfd:	52                   	push   edx
c000bdfe:	50                   	push   eax
c000bdff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be03:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be07:	e8 a9 d2 01 00       	call   c00290b5 <__gedf2>
c000be0c:	83 c4 10             	add    esp,0x10
c000be0f:	85 c0                	test   eax,eax
c000be11:	0f 89 4a ff ff ff    	jns    c000bd61 <sinc_multichan_vari_process+0x30f>
c000be17:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000be1b:	0f 8e ed 00 00 00    	jle    c000bf0e <sinc_multichan_vari_process+0x4bc>
c000be21:	83 ec 10             	sub    esp,0x10
c000be24:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be27:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be2a:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be2d:	ff 36                	push   DWORD PTR [esi]
c000be2f:	e8 88 c9 01 00       	call   c00287bc <__subdf3>
c000be34:	83 c4 18             	add    esp,0x18
c000be37:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be3b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be3f:	52                   	push   edx
c000be40:	50                   	push   eax
c000be41:	e8 0a d4 01 00       	call   c0029250 <fabs>
c000be46:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be4a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be4e:	83 c4 10             	add    esp,0x10
c000be51:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be56:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be5b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be5f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be63:	e8 31 d2 01 00       	call   c0029099 <__gtdf2>
c000be68:	83 c4 10             	add    esp,0x10
c000be6b:	85 c0                	test   eax,eax
c000be6d:	0f 8e 9b 00 00 00    	jle    c000bf0e <sinc_multichan_vari_process+0x4bc>
c000be73:	8b 06                	mov    eax,DWORD PTR [esi]
c000be75:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be78:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be7c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be80:	52                   	push   edx
c000be81:	50                   	push   eax
c000be82:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be85:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be88:	e8 2f c9 01 00       	call   c00287bc <__subdf3>
c000be8d:	59                   	pop    ecx
c000be8e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be92:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000be96:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000be99:	e8 ad cf 01 00       	call   c0028e4b <__floatsidf>
c000be9e:	83 c4 10             	add    esp,0x10
c000bea1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bea5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bea9:	52                   	push   edx
c000beaa:	50                   	push   eax
c000beab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000beaf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000beb3:	e8 30 c9 01 00       	call   c00287e8 <__muldf3>
c000beb8:	5d                   	pop    ebp
c000beb9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bebd:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bec1:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bec4:	e8 82 cf 01 00       	call   c0028e4b <__floatsidf>
c000bec9:	83 c4 10             	add    esp,0x10
c000becc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bed0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bed4:	52                   	push   edx
c000bed5:	50                   	push   eax
c000bed6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000beda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bede:	e8 e9 cb 01 00       	call   c0028acc <__divdf3>
c000bee3:	83 c4 10             	add    esp,0x10
c000bee6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000beea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000beee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bef2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bef6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000befa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000befe:	e8 68 c2 01 00       	call   c002816b <__adddf3>
c000bf03:	83 c4 10             	add    esp,0x10
c000bf06:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf0a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf0e:	83 ec 0c             	sub    esp,0xc
c000bf11:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bf14:	e8 32 cf 01 00       	call   c0028e4b <__floatsidf>
c000bf19:	83 c4 10             	add    esp,0x10
c000bf1c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf20:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf34:	e8 7e d1 01 00       	call   c00290b7 <__ltdf2>
c000bf39:	83 c4 10             	add    esp,0x10
c000bf3c:	85 c0                	test   eax,eax
c000bf3e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf42:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf46:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf4a:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf4e:	78 10                	js     c000bf60 <sinc_multichan_vari_process+0x50e>
c000bf50:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf54:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf58:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf5c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf64:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf68:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf6c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf70:	e8 73 c8 01 00       	call   c00287e8 <__muldf3>
c000bf75:	59                   	pop    ecx
c000bf76:	5d                   	pop    ebp
c000bf77:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf7b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf7f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf83:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf87:	e8 25 f9 ff ff       	call   c000b8b1 <double_to_fp>
c000bf8c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf90:	89 c5                	mov    ebp,eax
c000bf92:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf96:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf9a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf9e:	e8 45 c8 01 00       	call   c00287e8 <__muldf3>
c000bfa3:	83 c4 18             	add    esp,0x18
c000bfa6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bfaa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bfae:	52                   	push   edx
c000bfaf:	50                   	push   eax
c000bfb0:	e8 fc f8 ff ff       	call   c000b8b1 <double_to_fp>
c000bfb5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bfb8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfbc:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfbf:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfc2:	50                   	push   eax
c000bfc3:	50                   	push   eax
c000bfc4:	50                   	push   eax
c000bfc5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfc8:	e8 7e ce 01 00       	call   c0028e4b <__floatsidf>
c000bfcd:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfd1:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bfd5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfd9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfdd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfe1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfe5:	e8 e2 ca 01 00       	call   c0028acc <__divdf3>
c000bfea:	83 c4 1c             	add    esp,0x1c
c000bfed:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bff1:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bff5:	52                   	push   edx
c000bff6:	89 ea                	mov    edx,ebp
c000bff8:	50                   	push   eax
c000bff9:	89 d8                	mov    eax,ebx
c000bffb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bffe:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c002:	e8 69 ed ff ff       	call   c000ad70 <calc_output_multi>
c000c007:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c00a:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c00d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c011:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c015:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c019:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c01d:	e8 aa ca 01 00       	call   c0028acc <__divdf3>
c000c022:	83 c4 10             	add    esp,0x10
c000c025:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c029:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c02d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c031:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c035:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c039:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c03d:	e8 29 c1 01 00       	call   c002816b <__adddf3>
c000c042:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c046:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c04a:	83 c4 28             	add    esp,0x28
c000c04d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c051:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c055:	e8 16 d2 01 00       	call   c0029270 <lrint>
c000c05a:	83 ec 0c             	sub    esp,0xc
c000c05d:	50                   	push   eax
c000c05e:	e8 e8 cd 01 00       	call   c0028e4b <__floatsidf>
c000c063:	83 c4 10             	add    esp,0x10
c000c066:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c06a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c06e:	52                   	push   edx
c000c06f:	50                   	push   eax
c000c070:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c074:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c078:	e8 3f c7 01 00       	call   c00287bc <__subdf3>
c000c07d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c081:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c085:	83 c4 20             	add    esp,0x20
c000c088:	6a 00                	push   0x0
c000c08a:	6a 00                	push   0x0
c000c08c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c090:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c094:	e8 1e d0 01 00       	call   c00290b7 <__ltdf2>
c000c099:	83 c4 10             	add    esp,0x10
c000c09c:	85 c0                	test   eax,eax
c000c09e:	79 20                	jns    c000c0c0 <sinc_multichan_vari_process+0x66e>
c000c0a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0b0:	e8 b6 c0 01 00       	call   c002816b <__adddf3>
c000c0b5:	83 c4 10             	add    esp,0x10
c000c0b8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0bc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0c0:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0c3:	83 ec 10             	sub    esp,0x10
c000c0c6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0ca:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0d1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0d5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0d9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0dd:	e8 da c6 01 00       	call   c00287bc <__subdf3>
c000c0e2:	83 c4 18             	add    esp,0x18
c000c0e5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0ed:	52                   	push   edx
c000c0ee:	50                   	push   eax
c000c0ef:	e8 7c d1 01 00       	call   c0029270 <lrint>
c000c0f4:	0f af e8             	imul   ebp,eax
c000c0f7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c0fb:	83 c4 10             	add    esp,0x10
c000c0fe:	01 e8                	add    eax,ebp
c000c100:	99                   	cdq    
c000c101:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c104:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c107:	e9 fd fb ff ff       	jmp    c000bd09 <sinc_multichan_vari_process+0x2b7>
c000c10c:	83 c4 4c             	add    esp,0x4c
c000c10f:	89 d0                	mov    eax,edx
c000c111:	5b                   	pop    ebx
c000c112:	5e                   	pop    esi
c000c113:	5f                   	pop    edi
c000c114:	5d                   	pop    ebp
c000c115:	c3                   	ret    

c000c116 <sinc_hex_vari_process>:
c000c116:	55                   	push   ebp
c000c117:	ba 05 00 00 00       	mov    edx,0x5
c000c11c:	57                   	push   edi
c000c11d:	56                   	push   esi
c000c11e:	53                   	push   ebx
c000c11f:	83 ec 4c             	sub    esp,0x4c
c000c122:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c126:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c12a:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c12d:	85 db                	test   ebx,ebx
c000c12f:	0f 84 9c 06 00 00    	je     c000c7d1 <sinc_hex_vari_process+0x6bb>
c000c135:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c138:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c13b:	0f af c7             	imul   eax,edi
c000c13e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c141:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c144:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c14b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c152:	0f af c7             	imul   eax,edi
c000c155:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c158:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c15b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c15e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c162:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c166:	68 00 00 70 3f       	push   0x3f700000
c000c16b:	6a 00                	push   0x0
c000c16d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c171:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c175:	e8 3d cf 01 00       	call   c00290b7 <__ltdf2>
c000c17a:	83 c4 10             	add    esp,0x10
c000c17d:	ba 16 00 00 00       	mov    edx,0x16
c000c182:	85 c0                	test   eax,eax
c000c184:	0f 88 47 06 00 00    	js     c000c7d1 <sinc_hex_vari_process+0x6bb>
c000c18a:	68 00 00 70 40       	push   0x40700000
c000c18f:	6a 00                	push   0x0
c000c191:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c195:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c199:	e8 fb ce 01 00       	call   c0029099 <__gtdf2>
c000c19e:	83 c4 10             	add    esp,0x10
c000c1a1:	ba 16 00 00 00       	mov    edx,0x16
c000c1a6:	85 c0                	test   eax,eax
c000c1a8:	0f 8f 23 06 00 00    	jg     c000c7d1 <sinc_hex_vari_process+0x6bb>
c000c1ae:	83 ec 0c             	sub    esp,0xc
c000c1b1:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c1b4:	e8 92 cc 01 00       	call   c0028e4b <__floatsidf>
c000c1b9:	83 c4 10             	add    esp,0x10
c000c1bc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1c4:	68 00 00 00 40       	push   0x40000000
c000c1c9:	6a 00                	push   0x0
c000c1cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1d3:	e8 93 bf 01 00       	call   c002816b <__adddf3>
c000c1d8:	59                   	pop    ecx
c000c1d9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1dd:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1e1:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c1e4:	e8 62 cc 01 00       	call   c0028e4b <__floatsidf>
c000c1e9:	83 c4 10             	add    esp,0x10
c000c1ec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1f0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1f4:	52                   	push   edx
c000c1f5:	50                   	push   eax
c000c1f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1fe:	e8 c9 c8 01 00       	call   c0028acc <__divdf3>
c000c203:	83 c4 10             	add    esp,0x10
c000c206:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c20a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c20e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c211:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c214:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c218:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c21c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c220:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c224:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c228:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c22c:	e8 68 ce 01 00       	call   c0029099 <__gtdf2>
c000c231:	83 c4 10             	add    esp,0x10
c000c234:	85 c0                	test   eax,eax
c000c236:	7e 2d                	jle    c000c265 <sinc_hex_vari_process+0x14f>
c000c238:	68 00 00 f0 3f       	push   0x3ff00000
c000c23d:	6a 00                	push   0x0
c000c23f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c243:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c247:	e8 6b ce 01 00       	call   c00290b7 <__ltdf2>
c000c24c:	83 c4 10             	add    esp,0x10
c000c24f:	85 c0                	test   eax,eax
c000c251:	79 4d                	jns    c000c2a0 <sinc_hex_vari_process+0x18a>
c000c253:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c257:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c25b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c25f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c263:	eb 1b                	jmp    c000c280 <sinc_hex_vari_process+0x16a>
c000c265:	68 00 00 f0 3f       	push   0x3ff00000
c000c26a:	6a 00                	push   0x0
c000c26c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c270:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c274:	e8 3e ce 01 00       	call   c00290b7 <__ltdf2>
c000c279:	83 c4 10             	add    esp,0x10
c000c27c:	85 c0                	test   eax,eax
c000c27e:	79 20                	jns    c000c2a0 <sinc_hex_vari_process+0x18a>
c000c280:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c284:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c288:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c290:	e8 37 c8 01 00       	call   c0028acc <__divdf3>
c000c295:	83 c4 10             	add    esp,0x10
c000c298:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c29c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2a0:	50                   	push   eax
c000c2a1:	50                   	push   eax
c000c2a2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2aa:	e8 c1 cf 01 00       	call   c0029270 <lrint>
c000c2af:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c2b2:	40                   	inc    eax
c000c2b3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2b7:	0f af c7             	imul   eax,edi
c000c2ba:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2c1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2c5:	58                   	pop    eax
c000c2c6:	5a                   	pop    edx
c000c2c7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2cb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2cf:	e8 9c cf 01 00       	call   c0029270 <lrint>
c000c2d4:	83 ec 0c             	sub    esp,0xc
c000c2d7:	50                   	push   eax
c000c2d8:	e8 6e cb 01 00       	call   c0028e4b <__floatsidf>
c000c2dd:	83 c4 10             	add    esp,0x10
c000c2e0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2e4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2e8:	52                   	push   edx
c000c2e9:	50                   	push   eax
c000c2ea:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2ee:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2f2:	e8 c5 c4 01 00       	call   c00287bc <__subdf3>
c000c2f7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2fb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2ff:	83 c4 20             	add    esp,0x20
c000c302:	6a 00                	push   0x0
c000c304:	6a 00                	push   0x0
c000c306:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c30a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c30e:	e8 a4 cd 01 00       	call   c00290b7 <__ltdf2>
c000c313:	83 c4 10             	add    esp,0x10
c000c316:	85 c0                	test   eax,eax
c000c318:	79 1f                	jns    c000c339 <sinc_hex_vari_process+0x223>
c000c31a:	68 00 00 f0 3f       	push   0x3ff00000
c000c31f:	6a 00                	push   0x0
c000c321:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c325:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c329:	e8 3d be 01 00       	call   c002816b <__adddf3>
c000c32e:	83 c4 10             	add    esp,0x10
c000c331:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c335:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c339:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c33c:	83 ec 10             	sub    esp,0x10
c000c33f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c343:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c346:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c34a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c34e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c352:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c356:	e8 61 c4 01 00       	call   c00287bc <__subdf3>
c000c35b:	83 c4 18             	add    esp,0x18
c000c35e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c362:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c366:	52                   	push   edx
c000c367:	50                   	push   eax
c000c368:	e8 03 cf 01 00       	call   c0029270 <lrint>
c000c36d:	0f af f8             	imul   edi,eax
c000c370:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c374:	01 f8                	add    eax,edi
c000c376:	99                   	cdq    
c000c377:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c37a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c37d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c381:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c385:	68 00 00 f0 3f       	push   0x3ff00000
c000c38a:	6a 00                	push   0x0
c000c38c:	e8 3b c7 01 00       	call   c0028acc <__divdf3>
c000c391:	83 c4 10             	add    esp,0x10
c000c394:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c398:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c39c:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c3a1:	68 23 42 92 0c       	push   0xc924223
c000c3a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3aa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3ae:	e8 b8 bd 01 00       	call   c002816b <__adddf3>
c000c3b3:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c3b7:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c3bb:	83 c4 20             	add    esp,0x20
c000c3be:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3c6:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3ce:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3d1:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3d4:	7d 50                	jge    c000c426 <sinc_hex_vari_process+0x310>
c000c3d6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3d9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3dc:	01 c8                	add    eax,ecx
c000c3de:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3e1:	99                   	cdq    
c000c3e2:	f7 f9                	idiv   ecx
c000c3e4:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c3e8:	7d 0c                	jge    c000c3f6 <sinc_hex_vari_process+0x2e0>
c000c3ea:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c3ed:	85 ff                	test   edi,edi
c000c3ef:	79 6c                	jns    c000c45d <sinc_hex_vari_process+0x347>
c000c3f1:	e9 e7 00 00 00       	jmp    c000c4dd <sinc_hex_vari_process+0x3c7>
c000c3f6:	50                   	push   eax
c000c3f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c3fb:	56                   	push   esi
c000c3fc:	53                   	push   ebx
c000c3fd:	e8 d6 f4 ff ff       	call   c000b8d8 <prepare_data>
c000c402:	83 c4 10             	add    esp,0x10
c000c405:	89 c2                	mov    edx,eax
c000c407:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c40a:	85 c0                	test   eax,eax
c000c40c:	0f 85 bf 03 00 00    	jne    c000c7d1 <sinc_hex_vari_process+0x6bb>
c000c412:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c415:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c418:	01 c8                	add    eax,ecx
c000c41a:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c41d:	99                   	cdq    
c000c41e:	f7 f9                	idiv   ecx
c000c420:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c424:	7c c4                	jl     c000c3ea <sinc_hex_vari_process+0x2d4>
c000c426:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c42a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c42e:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c431:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c434:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c438:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c43c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c43f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c442:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c445:	99                   	cdq    
c000c446:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c449:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c44c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c44f:	99                   	cdq    
c000c450:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c453:	31 d2                	xor    edx,edx
c000c455:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c458:	e9 74 03 00 00       	jmp    c000c7d1 <sinc_hex_vari_process+0x6bb>
c000c45d:	83 ec 0c             	sub    esp,0xc
c000c460:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c463:	e8 e3 c9 01 00       	call   c0028e4b <__floatsidf>
c000c468:	83 c4 10             	add    esp,0x10
c000c46b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c46f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c473:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c477:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c47b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c47f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c483:	e8 e3 bc 01 00       	call   c002816b <__adddf3>
c000c488:	83 c4 10             	add    esp,0x10
c000c48b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c48f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c493:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c497:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c49b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c49f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4a3:	e8 c3 bc 01 00       	call   c002816b <__adddf3>
c000c4a8:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c4ab:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4af:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4b3:	e8 93 c9 01 00       	call   c0028e4b <__floatsidf>
c000c4b8:	83 c4 10             	add    esp,0x10
c000c4bb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4bf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4c3:	52                   	push   edx
c000c4c4:	50                   	push   eax
c000c4c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4cd:	e8 e3 cb 01 00       	call   c00290b5 <__gedf2>
c000c4d2:	83 c4 10             	add    esp,0x10
c000c4d5:	85 c0                	test   eax,eax
c000c4d7:	0f 89 49 ff ff ff    	jns    c000c426 <sinc_hex_vari_process+0x310>
c000c4dd:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4e1:	0f 8e ef 00 00 00    	jle    c000c5d6 <sinc_hex_vari_process+0x4c0>
c000c4e7:	83 ec 10             	sub    esp,0x10
c000c4ea:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c4ed:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c4f0:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c4f3:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c4f6:	e8 c1 c2 01 00       	call   c00287bc <__subdf3>
c000c4fb:	83 c4 18             	add    esp,0x18
c000c4fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c502:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c506:	52                   	push   edx
c000c507:	50                   	push   eax
c000c508:	e8 43 cd 01 00       	call   c0029250 <fabs>
c000c50d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c511:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c515:	83 c4 10             	add    esp,0x10
c000c518:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c51d:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c522:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c526:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c52a:	e8 6a cb 01 00       	call   c0029099 <__gtdf2>
c000c52f:	83 c4 10             	add    esp,0x10
c000c532:	85 c0                	test   eax,eax
c000c534:	0f 8e 9c 00 00 00    	jle    c000c5d6 <sinc_hex_vari_process+0x4c0>
c000c53a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c53d:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c540:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c544:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c548:	52                   	push   edx
c000c549:	50                   	push   eax
c000c54a:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c54d:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c550:	e8 67 c2 01 00       	call   c00287bc <__subdf3>
c000c555:	59                   	pop    ecx
c000c556:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c55a:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c55e:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c561:	e8 e5 c8 01 00       	call   c0028e4b <__floatsidf>
c000c566:	83 c4 10             	add    esp,0x10
c000c569:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c56d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c571:	52                   	push   edx
c000c572:	50                   	push   eax
c000c573:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c577:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c57b:	e8 68 c2 01 00       	call   c00287e8 <__muldf3>
c000c580:	5f                   	pop    edi
c000c581:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c585:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c589:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c58c:	e8 ba c8 01 00       	call   c0028e4b <__floatsidf>
c000c591:	83 c4 10             	add    esp,0x10
c000c594:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c598:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c59c:	52                   	push   edx
c000c59d:	50                   	push   eax
c000c59e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5a6:	e8 21 c5 01 00       	call   c0028acc <__divdf3>
c000c5ab:	83 c4 10             	add    esp,0x10
c000c5ae:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c5b2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c5b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c6:	e8 a0 bb 01 00       	call   c002816b <__adddf3>
c000c5cb:	83 c4 10             	add    esp,0x10
c000c5ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5d2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5d6:	83 ec 0c             	sub    esp,0xc
c000c5d9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5dc:	e8 6a c8 01 00       	call   c0028e4b <__floatsidf>
c000c5e1:	83 c4 10             	add    esp,0x10
c000c5e4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5e8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5fc:	e8 b6 ca 01 00       	call   c00290b7 <__ltdf2>
c000c601:	83 c4 10             	add    esp,0x10
c000c604:	85 c0                	test   eax,eax
c000c606:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c60a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c60e:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c612:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c616:	78 10                	js     c000c628 <sinc_hex_vari_process+0x512>
c000c618:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c61c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c620:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c624:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c628:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c62c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c630:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c634:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c638:	e8 ab c1 01 00       	call   c00287e8 <__muldf3>
c000c63d:	59                   	pop    ecx
c000c63e:	5f                   	pop    edi
c000c63f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c643:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c647:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c64b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c64f:	e8 5d f2 ff ff       	call   c000b8b1 <double_to_fp>
c000c654:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c658:	89 c7                	mov    edi,eax
c000c65a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c65e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c662:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c666:	e8 7d c1 01 00       	call   c00287e8 <__muldf3>
c000c66b:	83 c4 18             	add    esp,0x18
c000c66e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c672:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c676:	52                   	push   edx
c000c677:	50                   	push   eax
c000c678:	e8 34 f2 ff ff       	call   c000b8b1 <double_to_fp>
c000c67d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c680:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c684:	83 c4 0c             	add    esp,0xc
c000c687:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c68a:	8d 04 90             	lea    eax,[eax+edx*4]
c000c68d:	50                   	push   eax
c000c68e:	50                   	push   eax
c000c68f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c692:	e8 b4 c7 01 00       	call   c0028e4b <__floatsidf>
c000c697:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c69b:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c69f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6a7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6ab:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6af:	e8 18 c4 01 00       	call   c0028acc <__divdf3>
c000c6b4:	83 c4 18             	add    esp,0x18
c000c6b7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6bb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6bf:	52                   	push   edx
c000c6c0:	89 fa                	mov    edx,edi
c000c6c2:	50                   	push   eax
c000c6c3:	89 d8                	mov    eax,ebx
c000c6c5:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6c9:	e8 50 de ff ff       	call   c000a51e <calc_output_hex>
c000c6ce:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6d2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6d6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6da:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6de:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6e2:	e8 e5 c3 01 00       	call   c0028acc <__divdf3>
c000c6e7:	83 c4 10             	add    esp,0x10
c000c6ea:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c6ee:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c6f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6fa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6fe:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c702:	e8 64 ba 01 00       	call   c002816b <__adddf3>
c000c707:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c70b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c70f:	83 c4 18             	add    esp,0x18
c000c712:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c716:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c71a:	e8 51 cb 01 00       	call   c0029270 <lrint>
c000c71f:	83 ec 0c             	sub    esp,0xc
c000c722:	50                   	push   eax
c000c723:	e8 23 c7 01 00       	call   c0028e4b <__floatsidf>
c000c728:	83 c4 10             	add    esp,0x10
c000c72b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c72f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c733:	52                   	push   edx
c000c734:	50                   	push   eax
c000c735:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c739:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c73d:	e8 7a c0 01 00       	call   c00287bc <__subdf3>
c000c742:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c746:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c74a:	83 c4 20             	add    esp,0x20
c000c74d:	6a 00                	push   0x0
c000c74f:	6a 00                	push   0x0
c000c751:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c755:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c759:	e8 59 c9 01 00       	call   c00290b7 <__ltdf2>
c000c75e:	83 c4 10             	add    esp,0x10
c000c761:	85 c0                	test   eax,eax
c000c763:	79 20                	jns    c000c785 <sinc_hex_vari_process+0x66f>
c000c765:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c769:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c76d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c771:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c775:	e8 f1 b9 01 00       	call   c002816b <__adddf3>
c000c77a:	83 c4 10             	add    esp,0x10
c000c77d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c781:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c785:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c788:	83 ec 10             	sub    esp,0x10
c000c78b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c78f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c792:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c796:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c79a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c79e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7a2:	e8 15 c0 01 00       	call   c00287bc <__subdf3>
c000c7a7:	83 c4 18             	add    esp,0x18
c000c7aa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7ae:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7b2:	52                   	push   edx
c000c7b3:	50                   	push   eax
c000c7b4:	e8 b7 ca 01 00       	call   c0029270 <lrint>
c000c7b9:	0f af f8             	imul   edi,eax
c000c7bc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7c0:	83 c4 10             	add    esp,0x10
c000c7c3:	01 f8                	add    eax,edi
c000c7c5:	99                   	cdq    
c000c7c6:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7c9:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7cc:	e9 fd fb ff ff       	jmp    c000c3ce <sinc_hex_vari_process+0x2b8>
c000c7d1:	83 c4 4c             	add    esp,0x4c
c000c7d4:	89 d0                	mov    eax,edx
c000c7d6:	5b                   	pop    ebx
c000c7d7:	5e                   	pop    esi
c000c7d8:	5f                   	pop    edi
c000c7d9:	5d                   	pop    ebp
c000c7da:	c3                   	ret    

c000c7db <sinc_quad_vari_process>:
c000c7db:	55                   	push   ebp
c000c7dc:	ba 05 00 00 00       	mov    edx,0x5
c000c7e1:	57                   	push   edi
c000c7e2:	56                   	push   esi
c000c7e3:	53                   	push   ebx
c000c7e4:	83 ec 4c             	sub    esp,0x4c
c000c7e7:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c7eb:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c7ef:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c7f2:	85 db                	test   ebx,ebx
c000c7f4:	0f 84 9c 06 00 00    	je     c000ce96 <sinc_quad_vari_process+0x6bb>
c000c7fa:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c7fd:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c800:	0f af c7             	imul   eax,edi
c000c803:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c806:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c809:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c810:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c817:	0f af c7             	imul   eax,edi
c000c81a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c81d:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c820:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c823:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c827:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c82b:	68 00 00 70 3f       	push   0x3f700000
c000c830:	6a 00                	push   0x0
c000c832:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c836:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c83a:	e8 78 c8 01 00       	call   c00290b7 <__ltdf2>
c000c83f:	83 c4 10             	add    esp,0x10
c000c842:	ba 16 00 00 00       	mov    edx,0x16
c000c847:	85 c0                	test   eax,eax
c000c849:	0f 88 47 06 00 00    	js     c000ce96 <sinc_quad_vari_process+0x6bb>
c000c84f:	68 00 00 70 40       	push   0x40700000
c000c854:	6a 00                	push   0x0
c000c856:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c85a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c85e:	e8 36 c8 01 00       	call   c0029099 <__gtdf2>
c000c863:	83 c4 10             	add    esp,0x10
c000c866:	ba 16 00 00 00       	mov    edx,0x16
c000c86b:	85 c0                	test   eax,eax
c000c86d:	0f 8f 23 06 00 00    	jg     c000ce96 <sinc_quad_vari_process+0x6bb>
c000c873:	83 ec 0c             	sub    esp,0xc
c000c876:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c879:	e8 cd c5 01 00       	call   c0028e4b <__floatsidf>
c000c87e:	83 c4 10             	add    esp,0x10
c000c881:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c885:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c889:	68 00 00 00 40       	push   0x40000000
c000c88e:	6a 00                	push   0x0
c000c890:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c894:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c898:	e8 ce b8 01 00       	call   c002816b <__adddf3>
c000c89d:	59                   	pop    ecx
c000c89e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c8a2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c8a6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8a9:	e8 9d c5 01 00       	call   c0028e4b <__floatsidf>
c000c8ae:	83 c4 10             	add    esp,0x10
c000c8b1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8b5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8b9:	52                   	push   edx
c000c8ba:	50                   	push   eax
c000c8bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8c3:	e8 04 c2 01 00       	call   c0028acc <__divdf3>
c000c8c8:	83 c4 10             	add    esp,0x10
c000c8cb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8cf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8d3:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8d6:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8e1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8f1:	e8 a3 c7 01 00       	call   c0029099 <__gtdf2>
c000c8f6:	83 c4 10             	add    esp,0x10
c000c8f9:	85 c0                	test   eax,eax
c000c8fb:	7e 2d                	jle    c000c92a <sinc_quad_vari_process+0x14f>
c000c8fd:	68 00 00 f0 3f       	push   0x3ff00000
c000c902:	6a 00                	push   0x0
c000c904:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c908:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c90c:	e8 a6 c7 01 00       	call   c00290b7 <__ltdf2>
c000c911:	83 c4 10             	add    esp,0x10
c000c914:	85 c0                	test   eax,eax
c000c916:	79 4d                	jns    c000c965 <sinc_quad_vari_process+0x18a>
c000c918:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c91c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c920:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c924:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c928:	eb 1b                	jmp    c000c945 <sinc_quad_vari_process+0x16a>
c000c92a:	68 00 00 f0 3f       	push   0x3ff00000
c000c92f:	6a 00                	push   0x0
c000c931:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c935:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c939:	e8 79 c7 01 00       	call   c00290b7 <__ltdf2>
c000c93e:	83 c4 10             	add    esp,0x10
c000c941:	85 c0                	test   eax,eax
c000c943:	79 20                	jns    c000c965 <sinc_quad_vari_process+0x18a>
c000c945:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c949:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c94d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c951:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c955:	e8 72 c1 01 00       	call   c0028acc <__divdf3>
c000c95a:	83 c4 10             	add    esp,0x10
c000c95d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c961:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c965:	50                   	push   eax
c000c966:	50                   	push   eax
c000c967:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c96b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c96f:	e8 fc c8 01 00       	call   c0029270 <lrint>
c000c974:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c977:	40                   	inc    eax
c000c978:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c97c:	0f af c7             	imul   eax,edi
c000c97f:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c983:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c986:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c98a:	58                   	pop    eax
c000c98b:	5a                   	pop    edx
c000c98c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c990:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c994:	e8 d7 c8 01 00       	call   c0029270 <lrint>
c000c999:	83 ec 0c             	sub    esp,0xc
c000c99c:	50                   	push   eax
c000c99d:	e8 a9 c4 01 00       	call   c0028e4b <__floatsidf>
c000c9a2:	83 c4 10             	add    esp,0x10
c000c9a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c9a9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c9ad:	52                   	push   edx
c000c9ae:	50                   	push   eax
c000c9af:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9b7:	e8 00 be 01 00       	call   c00287bc <__subdf3>
c000c9bc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9c0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9c4:	83 c4 20             	add    esp,0x20
c000c9c7:	6a 00                	push   0x0
c000c9c9:	6a 00                	push   0x0
c000c9cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9d3:	e8 df c6 01 00       	call   c00290b7 <__ltdf2>
c000c9d8:	83 c4 10             	add    esp,0x10
c000c9db:	85 c0                	test   eax,eax
c000c9dd:	79 1f                	jns    c000c9fe <sinc_quad_vari_process+0x223>
c000c9df:	68 00 00 f0 3f       	push   0x3ff00000
c000c9e4:	6a 00                	push   0x0
c000c9e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ee:	e8 78 b7 01 00       	call   c002816b <__adddf3>
c000c9f3:	83 c4 10             	add    esp,0x10
c000c9f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c9fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c9fe:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca01:	83 ec 10             	sub    esp,0x10
c000ca04:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ca08:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca0f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca17:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca1b:	e8 9c bd 01 00       	call   c00287bc <__subdf3>
c000ca20:	83 c4 18             	add    esp,0x18
c000ca23:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca27:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca2b:	52                   	push   edx
c000ca2c:	50                   	push   eax
c000ca2d:	e8 3e c8 01 00       	call   c0029270 <lrint>
c000ca32:	0f af f8             	imul   edi,eax
c000ca35:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca39:	01 f8                	add    eax,edi
c000ca3b:	99                   	cdq    
c000ca3c:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca3f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca42:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca46:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca4a:	68 00 00 f0 3f       	push   0x3ff00000
c000ca4f:	6a 00                	push   0x0
c000ca51:	e8 76 c0 01 00       	call   c0028acc <__divdf3>
c000ca56:	83 c4 10             	add    esp,0x10
c000ca59:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca5d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca61:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca66:	68 23 42 92 0c       	push   0xc924223
c000ca6b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca6f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca73:	e8 f3 b6 01 00       	call   c002816b <__adddf3>
c000ca78:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca7c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca80:	83 c4 20             	add    esp,0x20
c000ca83:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ca8b:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000ca93:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ca96:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000ca99:	7d 50                	jge    c000caeb <sinc_quad_vari_process+0x310>
c000ca9b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ca9e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000caa1:	01 c8                	add    eax,ecx
c000caa3:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000caa6:	99                   	cdq    
c000caa7:	f7 f9                	idiv   ecx
c000caa9:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000caad:	7d 0c                	jge    c000cabb <sinc_quad_vari_process+0x2e0>
c000caaf:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cab2:	85 ff                	test   edi,edi
c000cab4:	79 6c                	jns    c000cb22 <sinc_quad_vari_process+0x347>
c000cab6:	e9 e7 00 00 00       	jmp    c000cba2 <sinc_quad_vari_process+0x3c7>
c000cabb:	50                   	push   eax
c000cabc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cac0:	56                   	push   esi
c000cac1:	53                   	push   ebx
c000cac2:	e8 11 ee ff ff       	call   c000b8d8 <prepare_data>
c000cac7:	83 c4 10             	add    esp,0x10
c000caca:	89 c2                	mov    edx,eax
c000cacc:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cacf:	85 c0                	test   eax,eax
c000cad1:	0f 85 bf 03 00 00    	jne    c000ce96 <sinc_quad_vari_process+0x6bb>
c000cad7:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cada:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cadd:	01 c8                	add    eax,ecx
c000cadf:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cae2:	99                   	cdq    
c000cae3:	f7 f9                	idiv   ecx
c000cae5:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cae9:	7c c4                	jl     c000caaf <sinc_quad_vari_process+0x2d4>
c000caeb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000caef:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000caf3:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000caf6:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000caf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cafd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb01:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cb04:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cb07:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cb0a:	99                   	cdq    
c000cb0b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb0e:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cb11:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cb14:	99                   	cdq    
c000cb15:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb18:	31 d2                	xor    edx,edx
c000cb1a:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb1d:	e9 74 03 00 00       	jmp    c000ce96 <sinc_quad_vari_process+0x6bb>
c000cb22:	83 ec 0c             	sub    esp,0xc
c000cb25:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb28:	e8 1e c3 01 00       	call   c0028e4b <__floatsidf>
c000cb2d:	83 c4 10             	add    esp,0x10
c000cb30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb34:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb38:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb3c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb40:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb44:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb48:	e8 1e b6 01 00       	call   c002816b <__adddf3>
c000cb4d:	83 c4 10             	add    esp,0x10
c000cb50:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb54:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb58:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb5c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb60:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb64:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb68:	e8 fe b5 01 00       	call   c002816b <__adddf3>
c000cb6d:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb70:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb74:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb78:	e8 ce c2 01 00       	call   c0028e4b <__floatsidf>
c000cb7d:	83 c4 10             	add    esp,0x10
c000cb80:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb84:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb88:	52                   	push   edx
c000cb89:	50                   	push   eax
c000cb8a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb8e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb92:	e8 1e c5 01 00       	call   c00290b5 <__gedf2>
c000cb97:	83 c4 10             	add    esp,0x10
c000cb9a:	85 c0                	test   eax,eax
c000cb9c:	0f 89 49 ff ff ff    	jns    c000caeb <sinc_quad_vari_process+0x310>
c000cba2:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cba6:	0f 8e ef 00 00 00    	jle    c000cc9b <sinc_quad_vari_process+0x4c0>
c000cbac:	83 ec 10             	sub    esp,0x10
c000cbaf:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbb2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbb5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cbb8:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cbbb:	e8 fc bb 01 00       	call   c00287bc <__subdf3>
c000cbc0:	83 c4 18             	add    esp,0x18
c000cbc3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbc7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbcb:	52                   	push   edx
c000cbcc:	50                   	push   eax
c000cbcd:	e8 7e c6 01 00       	call   c0029250 <fabs>
c000cbd2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbd6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbda:	83 c4 10             	add    esp,0x10
c000cbdd:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cbe2:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cbe7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbeb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbef:	e8 a5 c4 01 00       	call   c0029099 <__gtdf2>
c000cbf4:	83 c4 10             	add    esp,0x10
c000cbf7:	85 c0                	test   eax,eax
c000cbf9:	0f 8e 9c 00 00 00    	jle    c000cc9b <sinc_quad_vari_process+0x4c0>
c000cbff:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cc02:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cc05:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc09:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc0d:	52                   	push   edx
c000cc0e:	50                   	push   eax
c000cc0f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cc12:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cc15:	e8 a2 bb 01 00       	call   c00287bc <__subdf3>
c000cc1a:	59                   	pop    ecx
c000cc1b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc1f:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc23:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc26:	e8 20 c2 01 00       	call   c0028e4b <__floatsidf>
c000cc2b:	83 c4 10             	add    esp,0x10
c000cc2e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc32:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc36:	52                   	push   edx
c000cc37:	50                   	push   eax
c000cc38:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc3c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc40:	e8 a3 bb 01 00       	call   c00287e8 <__muldf3>
c000cc45:	5f                   	pop    edi
c000cc46:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc4a:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc4e:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc51:	e8 f5 c1 01 00       	call   c0028e4b <__floatsidf>
c000cc56:	83 c4 10             	add    esp,0x10
c000cc59:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc5d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc61:	52                   	push   edx
c000cc62:	50                   	push   eax
c000cc63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6b:	e8 5c be 01 00       	call   c0028acc <__divdf3>
c000cc70:	83 c4 10             	add    esp,0x10
c000cc73:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc77:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc7b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc7f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc83:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc87:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc8b:	e8 db b4 01 00       	call   c002816b <__adddf3>
c000cc90:	83 c4 10             	add    esp,0x10
c000cc93:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc97:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc9b:	83 ec 0c             	sub    esp,0xc
c000cc9e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cca1:	e8 a5 c1 01 00       	call   c0028e4b <__floatsidf>
c000cca6:	83 c4 10             	add    esp,0x10
c000cca9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ccad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ccb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccb5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccb9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccbd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccc1:	e8 f1 c3 01 00       	call   c00290b7 <__ltdf2>
c000ccc6:	83 c4 10             	add    esp,0x10
c000ccc9:	85 c0                	test   eax,eax
c000cccb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cccf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccd3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccd7:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccdb:	78 10                	js     c000cced <sinc_quad_vari_process+0x512>
c000ccdd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cce1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cce5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cce9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cced:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccf1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccf5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ccf9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ccfd:	e8 e6 ba 01 00       	call   c00287e8 <__muldf3>
c000cd02:	59                   	pop    ecx
c000cd03:	5f                   	pop    edi
c000cd04:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd08:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd0c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd10:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd14:	e8 98 eb ff ff       	call   c000b8b1 <double_to_fp>
c000cd19:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd1d:	89 c7                	mov    edi,eax
c000cd1f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd23:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd2b:	e8 b8 ba 01 00       	call   c00287e8 <__muldf3>
c000cd30:	83 c4 18             	add    esp,0x18
c000cd33:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd37:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd3b:	52                   	push   edx
c000cd3c:	50                   	push   eax
c000cd3d:	e8 6f eb ff ff       	call   c000b8b1 <double_to_fp>
c000cd42:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd45:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd49:	83 c4 0c             	add    esp,0xc
c000cd4c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd4f:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd52:	50                   	push   eax
c000cd53:	50                   	push   eax
c000cd54:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd57:	e8 ef c0 01 00       	call   c0028e4b <__floatsidf>
c000cd5c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd60:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd64:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd68:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd6c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd70:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd74:	e8 53 bd 01 00       	call   c0028acc <__divdf3>
c000cd79:	83 c4 18             	add    esp,0x18
c000cd7c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd80:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd84:	52                   	push   edx
c000cd85:	89 fa                	mov    edx,edi
c000cd87:	50                   	push   eax
c000cd88:	89 d8                	mov    eax,ebx
c000cd8a:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cd8e:	e8 a5 d1 ff ff       	call   c0009f38 <calc_output_quad>
c000cd93:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cd97:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd9b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd9f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cda3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cda7:	e8 20 bd 01 00       	call   c0028acc <__divdf3>
c000cdac:	83 c4 10             	add    esp,0x10
c000cdaf:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cdb3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cdb7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdbb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdbf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdc3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdc7:	e8 9f b3 01 00       	call   c002816b <__adddf3>
c000cdcc:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdd0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdd4:	83 c4 18             	add    esp,0x18
c000cdd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cddb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cddf:	e8 8c c4 01 00       	call   c0029270 <lrint>
c000cde4:	83 ec 0c             	sub    esp,0xc
c000cde7:	50                   	push   eax
c000cde8:	e8 5e c0 01 00       	call   c0028e4b <__floatsidf>
c000cded:	83 c4 10             	add    esp,0x10
c000cdf0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdf4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cdf8:	52                   	push   edx
c000cdf9:	50                   	push   eax
c000cdfa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdfe:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce02:	e8 b5 b9 01 00       	call   c00287bc <__subdf3>
c000ce07:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce0b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce0f:	83 c4 20             	add    esp,0x20
c000ce12:	6a 00                	push   0x0
c000ce14:	6a 00                	push   0x0
c000ce16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1e:	e8 94 c2 01 00       	call   c00290b7 <__ltdf2>
c000ce23:	83 c4 10             	add    esp,0x10
c000ce26:	85 c0                	test   eax,eax
c000ce28:	79 20                	jns    c000ce4a <sinc_quad_vari_process+0x66f>
c000ce2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce32:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce36:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce3a:	e8 2c b3 01 00       	call   c002816b <__adddf3>
c000ce3f:	83 c4 10             	add    esp,0x10
c000ce42:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce46:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce4a:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce4d:	83 ec 10             	sub    esp,0x10
c000ce50:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce54:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce57:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce5b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce5f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce63:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce67:	e8 50 b9 01 00       	call   c00287bc <__subdf3>
c000ce6c:	83 c4 18             	add    esp,0x18
c000ce6f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce73:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce77:	52                   	push   edx
c000ce78:	50                   	push   eax
c000ce79:	e8 f2 c3 01 00       	call   c0029270 <lrint>
c000ce7e:	0f af f8             	imul   edi,eax
c000ce81:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ce85:	83 c4 10             	add    esp,0x10
c000ce88:	01 f8                	add    eax,edi
c000ce8a:	99                   	cdq    
c000ce8b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ce8e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ce91:	e9 fd fb ff ff       	jmp    c000ca93 <sinc_quad_vari_process+0x2b8>
c000ce96:	83 c4 4c             	add    esp,0x4c
c000ce99:	89 d0                	mov    eax,edx
c000ce9b:	5b                   	pop    ebx
c000ce9c:	5e                   	pop    esi
c000ce9d:	5f                   	pop    edi
c000ce9e:	5d                   	pop    ebp
c000ce9f:	c3                   	ret    

c000cea0 <sinc_stereo_vari_process>:
c000cea0:	55                   	push   ebp
c000cea1:	ba 05 00 00 00       	mov    edx,0x5
c000cea6:	57                   	push   edi
c000cea7:	56                   	push   esi
c000cea8:	53                   	push   ebx
c000cea9:	83 ec 4c             	sub    esp,0x4c
c000ceac:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ceb0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ceb4:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ceb7:	85 db                	test   ebx,ebx
c000ceb9:	0f 84 9c 06 00 00    	je     c000d55b <sinc_stereo_vari_process+0x6bb>
c000cebf:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cec2:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cec5:	0f af c7             	imul   eax,edi
c000cec8:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cecb:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000cece:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ced5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cedc:	0f af c7             	imul   eax,edi
c000cedf:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cee2:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cee5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cee8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ceec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cef0:	68 00 00 70 3f       	push   0x3f700000
c000cef5:	6a 00                	push   0x0
c000cef7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cefb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ceff:	e8 b3 c1 01 00       	call   c00290b7 <__ltdf2>
c000cf04:	83 c4 10             	add    esp,0x10
c000cf07:	ba 16 00 00 00       	mov    edx,0x16
c000cf0c:	85 c0                	test   eax,eax
c000cf0e:	0f 88 47 06 00 00    	js     c000d55b <sinc_stereo_vari_process+0x6bb>
c000cf14:	68 00 00 70 40       	push   0x40700000
c000cf19:	6a 00                	push   0x0
c000cf1b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf1f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf23:	e8 71 c1 01 00       	call   c0029099 <__gtdf2>
c000cf28:	83 c4 10             	add    esp,0x10
c000cf2b:	ba 16 00 00 00       	mov    edx,0x16
c000cf30:	85 c0                	test   eax,eax
c000cf32:	0f 8f 23 06 00 00    	jg     c000d55b <sinc_stereo_vari_process+0x6bb>
c000cf38:	83 ec 0c             	sub    esp,0xc
c000cf3b:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf3e:	e8 08 bf 01 00       	call   c0028e4b <__floatsidf>
c000cf43:	83 c4 10             	add    esp,0x10
c000cf46:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf4a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf4e:	68 00 00 00 40       	push   0x40000000
c000cf53:	6a 00                	push   0x0
c000cf55:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf59:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf5d:	e8 09 b2 01 00       	call   c002816b <__adddf3>
c000cf62:	59                   	pop    ecx
c000cf63:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf67:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf6b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf6e:	e8 d8 be 01 00       	call   c0028e4b <__floatsidf>
c000cf73:	83 c4 10             	add    esp,0x10
c000cf76:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf7a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf7e:	52                   	push   edx
c000cf7f:	50                   	push   eax
c000cf80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf84:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf88:	e8 3f bb 01 00       	call   c0028acc <__divdf3>
c000cf8d:	83 c4 10             	add    esp,0x10
c000cf90:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf94:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf98:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cf9b:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cf9e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfa2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfa6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfaa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfb2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfb6:	e8 de c0 01 00       	call   c0029099 <__gtdf2>
c000cfbb:	83 c4 10             	add    esp,0x10
c000cfbe:	85 c0                	test   eax,eax
c000cfc0:	7e 2d                	jle    c000cfef <sinc_stereo_vari_process+0x14f>
c000cfc2:	68 00 00 f0 3f       	push   0x3ff00000
c000cfc7:	6a 00                	push   0x0
c000cfc9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfcd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfd1:	e8 e1 c0 01 00       	call   c00290b7 <__ltdf2>
c000cfd6:	83 c4 10             	add    esp,0x10
c000cfd9:	85 c0                	test   eax,eax
c000cfdb:	79 4d                	jns    c000d02a <sinc_stereo_vari_process+0x18a>
c000cfdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfe1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cfe5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfe9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfed:	eb 1b                	jmp    c000d00a <sinc_stereo_vari_process+0x16a>
c000cfef:	68 00 00 f0 3f       	push   0x3ff00000
c000cff4:	6a 00                	push   0x0
c000cff6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cffa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cffe:	e8 b4 c0 01 00       	call   c00290b7 <__ltdf2>
c000d003:	83 c4 10             	add    esp,0x10
c000d006:	85 c0                	test   eax,eax
c000d008:	79 20                	jns    c000d02a <sinc_stereo_vari_process+0x18a>
c000d00a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d00e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d012:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d016:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d01a:	e8 ad ba 01 00       	call   c0028acc <__divdf3>
c000d01f:	83 c4 10             	add    esp,0x10
c000d022:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d026:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d02a:	50                   	push   eax
c000d02b:	50                   	push   eax
c000d02c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d030:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d034:	e8 37 c2 01 00       	call   c0029270 <lrint>
c000d039:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d03c:	40                   	inc    eax
c000d03d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d041:	0f af c7             	imul   eax,edi
c000d044:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d048:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d04b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d04f:	58                   	pop    eax
c000d050:	5a                   	pop    edx
c000d051:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d055:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d059:	e8 12 c2 01 00       	call   c0029270 <lrint>
c000d05e:	83 ec 0c             	sub    esp,0xc
c000d061:	50                   	push   eax
c000d062:	e8 e4 bd 01 00       	call   c0028e4b <__floatsidf>
c000d067:	83 c4 10             	add    esp,0x10
c000d06a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d06e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d072:	52                   	push   edx
c000d073:	50                   	push   eax
c000d074:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d078:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d07c:	e8 3b b7 01 00       	call   c00287bc <__subdf3>
c000d081:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d085:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d089:	83 c4 20             	add    esp,0x20
c000d08c:	6a 00                	push   0x0
c000d08e:	6a 00                	push   0x0
c000d090:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d094:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d098:	e8 1a c0 01 00       	call   c00290b7 <__ltdf2>
c000d09d:	83 c4 10             	add    esp,0x10
c000d0a0:	85 c0                	test   eax,eax
c000d0a2:	79 1f                	jns    c000d0c3 <sinc_stereo_vari_process+0x223>
c000d0a4:	68 00 00 f0 3f       	push   0x3ff00000
c000d0a9:	6a 00                	push   0x0
c000d0ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b3:	e8 b3 b0 01 00       	call   c002816b <__adddf3>
c000d0b8:	83 c4 10             	add    esp,0x10
c000d0bb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0bf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0c3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0c6:	83 ec 10             	sub    esp,0x10
c000d0c9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0cd:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0e0:	e8 d7 b6 01 00       	call   c00287bc <__subdf3>
c000d0e5:	83 c4 18             	add    esp,0x18
c000d0e8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d0ec:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d0f0:	52                   	push   edx
c000d0f1:	50                   	push   eax
c000d0f2:	e8 79 c1 01 00       	call   c0029270 <lrint>
c000d0f7:	0f af f8             	imul   edi,eax
c000d0fa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d0fe:	01 f8                	add    eax,edi
c000d100:	99                   	cdq    
c000d101:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d104:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d107:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d10b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d10f:	68 00 00 f0 3f       	push   0x3ff00000
c000d114:	6a 00                	push   0x0
c000d116:	e8 b1 b9 01 00       	call   c0028acc <__divdf3>
c000d11b:	83 c4 10             	add    esp,0x10
c000d11e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d122:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d126:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d12b:	68 23 42 92 0c       	push   0xc924223
c000d130:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d134:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d138:	e8 2e b0 01 00       	call   c002816b <__adddf3>
c000d13d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d141:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d145:	83 c4 20             	add    esp,0x20
c000d148:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d150:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d158:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d15b:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d15e:	7d 50                	jge    c000d1b0 <sinc_stereo_vari_process+0x310>
c000d160:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d163:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d166:	01 c8                	add    eax,ecx
c000d168:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d16b:	99                   	cdq    
c000d16c:	f7 f9                	idiv   ecx
c000d16e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d172:	7d 0c                	jge    c000d180 <sinc_stereo_vari_process+0x2e0>
c000d174:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d177:	85 ff                	test   edi,edi
c000d179:	79 6c                	jns    c000d1e7 <sinc_stereo_vari_process+0x347>
c000d17b:	e9 e7 00 00 00       	jmp    c000d267 <sinc_stereo_vari_process+0x3c7>
c000d180:	50                   	push   eax
c000d181:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d185:	56                   	push   esi
c000d186:	53                   	push   ebx
c000d187:	e8 4c e7 ff ff       	call   c000b8d8 <prepare_data>
c000d18c:	83 c4 10             	add    esp,0x10
c000d18f:	89 c2                	mov    edx,eax
c000d191:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d194:	85 c0                	test   eax,eax
c000d196:	0f 85 bf 03 00 00    	jne    c000d55b <sinc_stereo_vari_process+0x6bb>
c000d19c:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d19f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d1a2:	01 c8                	add    eax,ecx
c000d1a4:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d1a7:	99                   	cdq    
c000d1a8:	f7 f9                	idiv   ecx
c000d1aa:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d1ae:	7c c4                	jl     c000d174 <sinc_stereo_vari_process+0x2d4>
c000d1b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1b4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1b8:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d1bb:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1c2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1c6:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1c9:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1cc:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1cf:	99                   	cdq    
c000d1d0:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1d3:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1d6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1d9:	99                   	cdq    
c000d1da:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1dd:	31 d2                	xor    edx,edx
c000d1df:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d1e2:	e9 74 03 00 00       	jmp    c000d55b <sinc_stereo_vari_process+0x6bb>
c000d1e7:	83 ec 0c             	sub    esp,0xc
c000d1ea:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d1ed:	e8 59 bc 01 00       	call   c0028e4b <__floatsidf>
c000d1f2:	83 c4 10             	add    esp,0x10
c000d1f5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1f9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d1fd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d201:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d205:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d209:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d20d:	e8 59 af 01 00       	call   c002816b <__adddf3>
c000d212:	83 c4 10             	add    esp,0x10
c000d215:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d219:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d21d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d221:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d225:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d229:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d22d:	e8 39 af 01 00       	call   c002816b <__adddf3>
c000d232:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d235:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d239:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d23d:	e8 09 bc 01 00       	call   c0028e4b <__floatsidf>
c000d242:	83 c4 10             	add    esp,0x10
c000d245:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d249:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d24d:	52                   	push   edx
c000d24e:	50                   	push   eax
c000d24f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d253:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d257:	e8 59 be 01 00       	call   c00290b5 <__gedf2>
c000d25c:	83 c4 10             	add    esp,0x10
c000d25f:	85 c0                	test   eax,eax
c000d261:	0f 89 49 ff ff ff    	jns    c000d1b0 <sinc_stereo_vari_process+0x310>
c000d267:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d26b:	0f 8e ef 00 00 00    	jle    c000d360 <sinc_stereo_vari_process+0x4c0>
c000d271:	83 ec 10             	sub    esp,0x10
c000d274:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d277:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d27a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d27d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d280:	e8 37 b5 01 00       	call   c00287bc <__subdf3>
c000d285:	83 c4 18             	add    esp,0x18
c000d288:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d28c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d290:	52                   	push   edx
c000d291:	50                   	push   eax
c000d292:	e8 b9 bf 01 00       	call   c0029250 <fabs>
c000d297:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d29b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d29f:	83 c4 10             	add    esp,0x10
c000d2a2:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d2a7:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d2ac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2b0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2b4:	e8 e0 bd 01 00       	call   c0029099 <__gtdf2>
c000d2b9:	83 c4 10             	add    esp,0x10
c000d2bc:	85 c0                	test   eax,eax
c000d2be:	0f 8e 9c 00 00 00    	jle    c000d360 <sinc_stereo_vari_process+0x4c0>
c000d2c4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2c7:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2d2:	52                   	push   edx
c000d2d3:	50                   	push   eax
c000d2d4:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2d7:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2da:	e8 dd b4 01 00       	call   c00287bc <__subdf3>
c000d2df:	59                   	pop    ecx
c000d2e0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2e4:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2e8:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d2eb:	e8 5b bb 01 00       	call   c0028e4b <__floatsidf>
c000d2f0:	83 c4 10             	add    esp,0x10
c000d2f3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2fb:	52                   	push   edx
c000d2fc:	50                   	push   eax
c000d2fd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d301:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d305:	e8 de b4 01 00       	call   c00287e8 <__muldf3>
c000d30a:	5f                   	pop    edi
c000d30b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d30f:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d313:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d316:	e8 30 bb 01 00       	call   c0028e4b <__floatsidf>
c000d31b:	83 c4 10             	add    esp,0x10
c000d31e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d322:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d326:	52                   	push   edx
c000d327:	50                   	push   eax
c000d328:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d32c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d330:	e8 97 b7 01 00       	call   c0028acc <__divdf3>
c000d335:	83 c4 10             	add    esp,0x10
c000d338:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d33c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d340:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d344:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d348:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d350:	e8 16 ae 01 00       	call   c002816b <__adddf3>
c000d355:	83 c4 10             	add    esp,0x10
c000d358:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d35c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d360:	83 ec 0c             	sub    esp,0xc
c000d363:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d366:	e8 e0 ba 01 00       	call   c0028e4b <__floatsidf>
c000d36b:	83 c4 10             	add    esp,0x10
c000d36e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d372:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d376:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d37a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d37e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d382:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d386:	e8 2c bd 01 00       	call   c00290b7 <__ltdf2>
c000d38b:	83 c4 10             	add    esp,0x10
c000d38e:	85 c0                	test   eax,eax
c000d390:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d394:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d398:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d39c:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d3a0:	78 10                	js     c000d3b2 <sinc_stereo_vari_process+0x512>
c000d3a2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d3a6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d3aa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d3ae:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d3b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3ba:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3c2:	e8 21 b4 01 00       	call   c00287e8 <__muldf3>
c000d3c7:	59                   	pop    ecx
c000d3c8:	5f                   	pop    edi
c000d3c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3cd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3d9:	e8 d3 e4 ff ff       	call   c000b8b1 <double_to_fp>
c000d3de:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e2:	89 c7                	mov    edi,eax
c000d3e4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3ec:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3f0:	e8 f3 b3 01 00       	call   c00287e8 <__muldf3>
c000d3f5:	83 c4 18             	add    esp,0x18
c000d3f8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d3fc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d400:	52                   	push   edx
c000d401:	50                   	push   eax
c000d402:	e8 aa e4 ff ff       	call   c000b8b1 <double_to_fp>
c000d407:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d40a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d40e:	83 c4 0c             	add    esp,0xc
c000d411:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d414:	8d 04 90             	lea    eax,[eax+edx*4]
c000d417:	50                   	push   eax
c000d418:	50                   	push   eax
c000d419:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d41c:	e8 2a ba 01 00       	call   c0028e4b <__floatsidf>
c000d421:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d425:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d429:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d42d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d431:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d435:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d439:	e8 8e b6 01 00       	call   c0028acc <__divdf3>
c000d43e:	83 c4 18             	add    esp,0x18
c000d441:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d445:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d449:	52                   	push   edx
c000d44a:	89 fa                	mov    edx,edi
c000d44c:	50                   	push   eax
c000d44d:	89 d8                	mov    eax,ebx
c000d44f:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d453:	e8 02 c7 ff ff       	call   c0009b5a <calc_output_stereo>
c000d458:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d45c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d460:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d464:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d468:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d46c:	e8 5b b6 01 00       	call   c0028acc <__divdf3>
c000d471:	83 c4 10             	add    esp,0x10
c000d474:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d478:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d47c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d480:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d484:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d488:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d48c:	e8 da ac 01 00       	call   c002816b <__adddf3>
c000d491:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d495:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d499:	83 c4 18             	add    esp,0x18
c000d49c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4a0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4a4:	e8 c7 bd 01 00       	call   c0029270 <lrint>
c000d4a9:	83 ec 0c             	sub    esp,0xc
c000d4ac:	50                   	push   eax
c000d4ad:	e8 99 b9 01 00       	call   c0028e4b <__floatsidf>
c000d4b2:	83 c4 10             	add    esp,0x10
c000d4b5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4b9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4bd:	52                   	push   edx
c000d4be:	50                   	push   eax
c000d4bf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4c3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4c7:	e8 f0 b2 01 00       	call   c00287bc <__subdf3>
c000d4cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4d0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4d4:	83 c4 20             	add    esp,0x20
c000d4d7:	6a 00                	push   0x0
c000d4d9:	6a 00                	push   0x0
c000d4db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4e3:	e8 cf bb 01 00       	call   c00290b7 <__ltdf2>
c000d4e8:	83 c4 10             	add    esp,0x10
c000d4eb:	85 c0                	test   eax,eax
c000d4ed:	79 20                	jns    c000d50f <sinc_stereo_vari_process+0x66f>
c000d4ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4f7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4ff:	e8 67 ac 01 00       	call   c002816b <__adddf3>
c000d504:	83 c4 10             	add    esp,0x10
c000d507:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d50b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d50f:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d512:	83 ec 10             	sub    esp,0x10
c000d515:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d519:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d51c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d520:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d524:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d528:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d52c:	e8 8b b2 01 00       	call   c00287bc <__subdf3>
c000d531:	83 c4 18             	add    esp,0x18
c000d534:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d538:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d53c:	52                   	push   edx
c000d53d:	50                   	push   eax
c000d53e:	e8 2d bd 01 00       	call   c0029270 <lrint>
c000d543:	0f af f8             	imul   edi,eax
c000d546:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d54a:	83 c4 10             	add    esp,0x10
c000d54d:	01 f8                	add    eax,edi
c000d54f:	99                   	cdq    
c000d550:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d553:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d556:	e9 fd fb ff ff       	jmp    c000d158 <sinc_stereo_vari_process+0x2b8>
c000d55b:	83 c4 4c             	add    esp,0x4c
c000d55e:	89 d0                	mov    eax,edx
c000d560:	5b                   	pop    ebx
c000d561:	5e                   	pop    esi
c000d562:	5f                   	pop    edi
c000d563:	5d                   	pop    ebp
c000d564:	c3                   	ret    

c000d565 <sinc_mono_vari_process>:
c000d565:	55                   	push   ebp
c000d566:	ba 05 00 00 00       	mov    edx,0x5
c000d56b:	57                   	push   edi
c000d56c:	56                   	push   esi
c000d56d:	53                   	push   ebx
c000d56e:	83 ec 4c             	sub    esp,0x4c
c000d571:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d575:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d579:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d57c:	85 db                	test   ebx,ebx
c000d57e:	0f 84 c1 06 00 00    	je     c000dc45 <sinc_mono_vari_process+0x6e0>
c000d584:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d587:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d58a:	0f af c7             	imul   eax,edi
c000d58d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d590:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d593:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d59a:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d5a1:	0f af c7             	imul   eax,edi
c000d5a4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d5a7:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d5ab:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d5ae:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5b0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d5b4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d5b8:	68 00 00 70 3f       	push   0x3f700000
c000d5bd:	6a 00                	push   0x0
c000d5bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5c7:	e8 eb ba 01 00       	call   c00290b7 <__ltdf2>
c000d5cc:	83 c4 10             	add    esp,0x10
c000d5cf:	ba 16 00 00 00       	mov    edx,0x16
c000d5d4:	85 c0                	test   eax,eax
c000d5d6:	0f 88 69 06 00 00    	js     c000dc45 <sinc_mono_vari_process+0x6e0>
c000d5dc:	68 00 00 70 40       	push   0x40700000
c000d5e1:	6a 00                	push   0x0
c000d5e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5eb:	e8 a9 ba 01 00       	call   c0029099 <__gtdf2>
c000d5f0:	83 c4 10             	add    esp,0x10
c000d5f3:	ba 16 00 00 00       	mov    edx,0x16
c000d5f8:	85 c0                	test   eax,eax
c000d5fa:	0f 8f 45 06 00 00    	jg     c000dc45 <sinc_mono_vari_process+0x6e0>
c000d600:	83 ec 0c             	sub    esp,0xc
c000d603:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d606:	e8 40 b8 01 00       	call   c0028e4b <__floatsidf>
c000d60b:	83 c4 10             	add    esp,0x10
c000d60e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d612:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d616:	68 00 00 00 40       	push   0x40000000
c000d61b:	6a 00                	push   0x0
c000d61d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d625:	e8 41 ab 01 00       	call   c002816b <__adddf3>
c000d62a:	59                   	pop    ecx
c000d62b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d62f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d633:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d636:	e8 10 b8 01 00       	call   c0028e4b <__floatsidf>
c000d63b:	83 c4 10             	add    esp,0x10
c000d63e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d642:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d646:	52                   	push   edx
c000d647:	50                   	push   eax
c000d648:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d64c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d650:	e8 77 b4 01 00       	call   c0028acc <__divdf3>
c000d655:	83 c4 10             	add    esp,0x10
c000d658:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d65c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d660:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d663:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d666:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d66a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d66e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d672:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d676:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d67a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d67e:	e8 16 ba 01 00       	call   c0029099 <__gtdf2>
c000d683:	83 c4 10             	add    esp,0x10
c000d686:	85 c0                	test   eax,eax
c000d688:	7e 2d                	jle    c000d6b7 <sinc_mono_vari_process+0x152>
c000d68a:	68 00 00 f0 3f       	push   0x3ff00000
c000d68f:	6a 00                	push   0x0
c000d691:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d695:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d699:	e8 19 ba 01 00       	call   c00290b7 <__ltdf2>
c000d69e:	83 c4 10             	add    esp,0x10
c000d6a1:	85 c0                	test   eax,eax
c000d6a3:	79 4d                	jns    c000d6f2 <sinc_mono_vari_process+0x18d>
c000d6a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6a9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6ad:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6b1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6b5:	eb 1b                	jmp    c000d6d2 <sinc_mono_vari_process+0x16d>
c000d6b7:	68 00 00 f0 3f       	push   0x3ff00000
c000d6bc:	6a 00                	push   0x0
c000d6be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6c6:	e8 ec b9 01 00       	call   c00290b7 <__ltdf2>
c000d6cb:	83 c4 10             	add    esp,0x10
c000d6ce:	85 c0                	test   eax,eax
c000d6d0:	79 20                	jns    c000d6f2 <sinc_mono_vari_process+0x18d>
c000d6d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6d6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6da:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6de:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6e2:	e8 e5 b3 01 00       	call   c0028acc <__divdf3>
c000d6e7:	83 c4 10             	add    esp,0x10
c000d6ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d6ee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d6f2:	50                   	push   eax
c000d6f3:	50                   	push   eax
c000d6f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6fc:	e8 6f bb 01 00       	call   c0029270 <lrint>
c000d701:	40                   	inc    eax
c000d702:	0f af c7             	imul   eax,edi
c000d705:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d709:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d70d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d710:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d713:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d717:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d71b:	58                   	pop    eax
c000d71c:	5a                   	pop    edx
c000d71d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d721:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d725:	e8 46 bb 01 00       	call   c0029270 <lrint>
c000d72a:	83 ec 0c             	sub    esp,0xc
c000d72d:	50                   	push   eax
c000d72e:	e8 18 b7 01 00       	call   c0028e4b <__floatsidf>
c000d733:	83 c4 10             	add    esp,0x10
c000d736:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d73a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d73e:	52                   	push   edx
c000d73f:	50                   	push   eax
c000d740:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d744:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d748:	e8 6f b0 01 00       	call   c00287bc <__subdf3>
c000d74d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d751:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d755:	83 c4 20             	add    esp,0x20
c000d758:	6a 00                	push   0x0
c000d75a:	6a 00                	push   0x0
c000d75c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d760:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d764:	e8 4e b9 01 00       	call   c00290b7 <__ltdf2>
c000d769:	83 c4 10             	add    esp,0x10
c000d76c:	85 c0                	test   eax,eax
c000d76e:	79 1f                	jns    c000d78f <sinc_mono_vari_process+0x22a>
c000d770:	68 00 00 f0 3f       	push   0x3ff00000
c000d775:	6a 00                	push   0x0
c000d777:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d77b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d77f:	e8 e7 a9 01 00       	call   c002816b <__adddf3>
c000d784:	83 c4 10             	add    esp,0x10
c000d787:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d78b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d78f:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d792:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d795:	83 ec 10             	sub    esp,0x10
c000d798:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d79c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7a0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7a4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7a8:	e8 0f b0 01 00       	call   c00287bc <__subdf3>
c000d7ad:	83 c4 18             	add    esp,0x18
c000d7b0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d7b4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d7b8:	52                   	push   edx
c000d7b9:	50                   	push   eax
c000d7ba:	e8 b1 ba 01 00       	call   c0029270 <lrint>
c000d7bf:	0f af f8             	imul   edi,eax
c000d7c2:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7c5:	31 ff                	xor    edi,edi
c000d7c7:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7cc:	99                   	cdq    
c000d7cd:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7d0:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7d3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7d7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7db:	55                   	push   ebp
c000d7dc:	57                   	push   edi
c000d7dd:	e8 ea b2 01 00       	call   c0028acc <__divdf3>
c000d7e2:	83 c4 10             	add    esp,0x10
c000d7e5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d7e9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7ed:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d7f2:	68 23 42 92 0c       	push   0xc924223
c000d7f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7ff:	e8 67 a9 01 00       	call   c002816b <__adddf3>
c000d804:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d808:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d80c:	83 c4 20             	add    esp,0x20
c000d80f:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d813:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d817:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d81a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d81d:	7d 54                	jge    c000d873 <sinc_mono_vari_process+0x30e>
c000d81f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d822:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d825:	01 c8                	add    eax,ecx
c000d827:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d82a:	99                   	cdq    
c000d82b:	f7 f9                	idiv   ecx
c000d82d:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d831:	7d 0c                	jge    c000d83f <sinc_mono_vari_process+0x2da>
c000d833:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d836:	85 ff                	test   edi,edi
c000d838:	79 73                	jns    c000d8ad <sinc_mono_vari_process+0x348>
c000d83a:	e9 ee 00 00 00       	jmp    c000d92d <sinc_mono_vari_process+0x3c8>
c000d83f:	50                   	push   eax
c000d840:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d844:	56                   	push   esi
c000d845:	53                   	push   ebx
c000d846:	e8 8d e0 ff ff       	call   c000b8d8 <prepare_data>
c000d84b:	89 c2                	mov    edx,eax
c000d84d:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d851:	83 c4 10             	add    esp,0x10
c000d854:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d857:	85 d2                	test   edx,edx
c000d859:	0f 85 e6 03 00 00    	jne    c000dc45 <sinc_mono_vari_process+0x6e0>
c000d85f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d862:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d865:	01 c8                	add    eax,ecx
c000d867:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d86a:	99                   	cdq    
c000d86b:	f7 f9                	idiv   ecx
c000d86d:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d871:	7c c0                	jl     c000d833 <sinc_mono_vari_process+0x2ce>
c000d873:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d877:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d87b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d87f:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d882:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d885:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d889:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d88d:	89 01                	mov    DWORD PTR [ecx],eax
c000d88f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d892:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d895:	99                   	cdq    
c000d896:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d899:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d89c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d89f:	99                   	cdq    
c000d8a0:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8a3:	31 d2                	xor    edx,edx
c000d8a5:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d8a8:	e9 98 03 00 00       	jmp    c000dc45 <sinc_mono_vari_process+0x6e0>
c000d8ad:	83 ec 0c             	sub    esp,0xc
c000d8b0:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d8b3:	e8 93 b5 01 00       	call   c0028e4b <__floatsidf>
c000d8b8:	83 c4 10             	add    esp,0x10
c000d8bb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8bf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8c3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8c7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8cb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d3:	e8 93 a8 01 00       	call   c002816b <__adddf3>
c000d8d8:	83 c4 10             	add    esp,0x10
c000d8db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8df:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8e3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8e7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8ef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8f3:	e8 73 a8 01 00       	call   c002816b <__adddf3>
c000d8f8:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d8fb:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8ff:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d903:	e8 43 b5 01 00       	call   c0028e4b <__floatsidf>
c000d908:	83 c4 10             	add    esp,0x10
c000d90b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d90f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d913:	52                   	push   edx
c000d914:	50                   	push   eax
c000d915:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d919:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d91d:	e8 77 b7 01 00       	call   c0029099 <__gtdf2>
c000d922:	83 c4 10             	add    esp,0x10
c000d925:	85 c0                	test   eax,eax
c000d927:	0f 8f 46 ff ff ff    	jg     c000d873 <sinc_mono_vari_process+0x30e>
c000d92d:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d931:	0f 8e f5 00 00 00    	jle    c000da2c <sinc_mono_vari_process+0x4c7>
c000d937:	83 ec 10             	sub    esp,0x10
c000d93a:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d93d:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d940:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d944:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d947:	ff 30                	push   DWORD PTR [eax]
c000d949:	e8 6e ae 01 00       	call   c00287bc <__subdf3>
c000d94e:	83 c4 18             	add    esp,0x18
c000d951:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d955:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d959:	52                   	push   edx
c000d95a:	50                   	push   eax
c000d95b:	e8 f0 b8 01 00       	call   c0029250 <fabs>
c000d960:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d964:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d968:	83 c4 10             	add    esp,0x10
c000d96b:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d970:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d975:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d979:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d97d:	e8 17 b7 01 00       	call   c0029099 <__gtdf2>
c000d982:	83 c4 10             	add    esp,0x10
c000d985:	85 c0                	test   eax,eax
c000d987:	0f 8e 9f 00 00 00    	jle    c000da2c <sinc_mono_vari_process+0x4c7>
c000d98d:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d991:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d994:	8b 00                	mov    eax,DWORD PTR [eax]
c000d996:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d99a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d99e:	52                   	push   edx
c000d99f:	50                   	push   eax
c000d9a0:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d9a3:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d9a6:	e8 11 ae 01 00       	call   c00287bc <__subdf3>
c000d9ab:	5f                   	pop    edi
c000d9ac:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9b0:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9b4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d9b7:	e8 8f b4 01 00       	call   c0028e4b <__floatsidf>
c000d9bc:	83 c4 10             	add    esp,0x10
c000d9bf:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9c3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9c7:	52                   	push   edx
c000d9c8:	50                   	push   eax
c000d9c9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9d1:	e8 12 ae 01 00       	call   c00287e8 <__muldf3>
c000d9d6:	5d                   	pop    ebp
c000d9d7:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9db:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9df:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d9e2:	e8 64 b4 01 00       	call   c0028e4b <__floatsidf>
c000d9e7:	83 c4 10             	add    esp,0x10
c000d9ea:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9ee:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9f2:	52                   	push   edx
c000d9f3:	50                   	push   eax
c000d9f4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9fc:	e8 cb b0 01 00       	call   c0028acc <__divdf3>
c000da01:	83 c4 10             	add    esp,0x10
c000da04:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da08:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da14:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da18:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da1c:	e8 4a a7 01 00       	call   c002816b <__adddf3>
c000da21:	83 c4 10             	add    esp,0x10
c000da24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da28:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da2c:	83 ec 0c             	sub    esp,0xc
c000da2f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da32:	e8 14 b4 01 00       	call   c0028e4b <__floatsidf>
c000da37:	83 c4 10             	add    esp,0x10
c000da3a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da3e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da52:	e8 60 b6 01 00       	call   c00290b7 <__ltdf2>
c000da57:	83 c4 10             	add    esp,0x10
c000da5a:	85 c0                	test   eax,eax
c000da5c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da60:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da64:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da68:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da6c:	78 10                	js     c000da7e <sinc_mono_vari_process+0x519>
c000da6e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da72:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da76:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da7a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da86:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da8e:	e8 55 ad 01 00       	call   c00287e8 <__muldf3>
c000da93:	59                   	pop    ecx
c000da94:	5f                   	pop    edi
c000da95:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da99:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000daa1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000daa5:	e8 07 de ff ff       	call   c000b8b1 <double_to_fp>
c000daaa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daae:	89 c7                	mov    edi,eax
c000dab0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dab4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dab8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dabc:	e8 27 ad 01 00       	call   c00287e8 <__muldf3>
c000dac1:	83 c4 18             	add    esp,0x18
c000dac4:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dac8:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dacc:	52                   	push   edx
c000dacd:	50                   	push   eax
c000dace:	e8 de dd ff ff       	call   c000b8b1 <double_to_fp>
c000dad3:	83 ec 0c             	sub    esp,0xc
c000dad6:	89 c5                	mov    ebp,eax
c000dad8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dadb:	e8 6b b3 01 00       	call   c0028e4b <__floatsidf>
c000dae0:	83 c4 10             	add    esp,0x10
c000dae3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dae7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000daeb:	52                   	push   edx
c000daec:	50                   	push   eax
c000daed:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000daf1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000daf5:	e8 d2 af 01 00       	call   c0028acc <__divdf3>
c000dafa:	83 c4 10             	add    esp,0x10
c000dafd:	89 e9                	mov    ecx,ebp
c000daff:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db03:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db07:	89 d8                	mov    eax,ebx
c000db09:	89 fa                	mov    edx,edi
c000db0b:	e8 ee bd ff ff       	call   c00098fe <calc_output_single>
c000db10:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000db13:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000db16:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db1a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db1e:	52                   	push   edx
c000db1f:	50                   	push   eax
c000db20:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db24:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db28:	e8 bb ac 01 00       	call   c00287e8 <__muldf3>
c000db2d:	59                   	pop    ecx
c000db2e:	59                   	pop    ecx
c000db2f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db33:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db37:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db3b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db3f:	e8 77 b5 01 00       	call   c00290bb <__truncdfsf2>
c000db44:	83 c4 10             	add    esp,0x10
c000db47:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db4a:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db4d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db51:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db55:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db59:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db5d:	e8 6a af 01 00       	call   c0028acc <__divdf3>
c000db62:	83 c4 10             	add    esp,0x10
c000db65:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db69:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db6d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db71:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db75:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db79:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db7d:	e8 e9 a5 01 00       	call   c002816b <__adddf3>
c000db82:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000db86:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000db8a:	83 c4 18             	add    esp,0x18
c000db8d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db91:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db95:	e8 d6 b6 01 00       	call   c0029270 <lrint>
c000db9a:	83 ec 0c             	sub    esp,0xc
c000db9d:	50                   	push   eax
c000db9e:	e8 a8 b2 01 00       	call   c0028e4b <__floatsidf>
c000dba3:	83 c4 10             	add    esp,0x10
c000dba6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dbaa:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbae:	52                   	push   edx
c000dbaf:	50                   	push   eax
c000dbb0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbb4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbb8:	e8 ff ab 01 00       	call   c00287bc <__subdf3>
c000dbbd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dbc1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dbc5:	83 c4 20             	add    esp,0x20
c000dbc8:	6a 00                	push   0x0
c000dbca:	6a 00                	push   0x0
c000dbcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd4:	e8 de b4 01 00       	call   c00290b7 <__ltdf2>
c000dbd9:	83 c4 10             	add    esp,0x10
c000dbdc:	85 c0                	test   eax,eax
c000dbde:	79 20                	jns    c000dc00 <sinc_mono_vari_process+0x69b>
c000dbe0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbe4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbe8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbf0:	e8 76 a5 01 00       	call   c002816b <__adddf3>
c000dbf5:	83 c4 10             	add    esp,0x10
c000dbf8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbfc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dc00:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dc03:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dc06:	83 ec 10             	sub    esp,0x10
c000dc09:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc0d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc11:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc15:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc19:	e8 9e ab 01 00       	call   c00287bc <__subdf3>
c000dc1e:	83 c4 18             	add    esp,0x18
c000dc21:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc25:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc29:	52                   	push   edx
c000dc2a:	50                   	push   eax
c000dc2b:	e8 40 b6 01 00       	call   c0029270 <lrint>
c000dc30:	83 c4 10             	add    esp,0x10
c000dc33:	0f af f8             	imul   edi,eax
c000dc36:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc39:	99                   	cdq    
c000dc3a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc3d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc40:	e9 d2 fb ff ff       	jmp    c000d817 <sinc_mono_vari_process+0x2b2>
c000dc45:	83 c4 4c             	add    esp,0x4c
c000dc48:	89 d0                	mov    eax,edx
c000dc4a:	5b                   	pop    ebx
c000dc4b:	5e                   	pop    esi
c000dc4c:	5f                   	pop    edi
c000dc4d:	5d                   	pop    ebp
c000dc4e:	c3                   	ret    

c000dc4f <sinc_get_name>:
c000dc4f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc53:	31 c0                	xor    eax,eax
c000dc55:	83 fa 02             	cmp    edx,0x2
c000dc58:	77 07                	ja     c000dc61 <sinc_get_name+0x12>
c000dc5a:	8b 04 95 44 ab 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd54bc]
c000dc61:	c3                   	ret    

c000dc62 <sinc_get_description>:
c000dc62:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc66:	31 c0                	xor    eax,eax
c000dc68:	83 fa 02             	cmp    edx,0x2
c000dc6b:	77 07                	ja     c000dc74 <sinc_get_description+0x12>
c000dc6d:	8b 04 95 38 ab 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd54c8]
c000dc74:	c3                   	ret    

c000dc75 <sinc_set_converter>:
c000dc75:	53                   	push   ebx
c000dc76:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc7c:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dc83:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dc86:	85 c0                	test   eax,eax
c000dc88:	74 13                	je     c000dc9d <sinc_set_converter+0x28>
c000dc8a:	83 ec 0c             	sub    esp,0xc
c000dc8d:	50                   	push   eax
c000dc8e:	e8 25 1c 00 00       	call   c000f8b8 <free>
c000dc93:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dc9a:	83 c4 10             	add    esp,0x10
c000dc9d:	50                   	push   eax
c000dc9e:	68 44 08 00 00       	push   0x844
c000dca3:	6a 00                	push   0x0
c000dca5:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dca9:	50                   	push   eax
c000dcaa:	e8 bd 2a ff ff       	call   c000076c <memset>
c000dcaf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dcb2:	83 c4 10             	add    esp,0x10
c000dcb5:	b8 0b 00 00 00       	mov    eax,0xb
c000dcba:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dcc0:	7f 6e                	jg     c000dd30 <sinc_set_converter+0xbb>
c000dcc2:	83 fa 01             	cmp    edx,0x1
c000dcc5:	75 10                	jne    c000dcd7 <sinc_set_converter+0x62>
c000dcc7:	c7 43 24 65 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d565
c000dcce:	c7 43 20 65 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d565
c000dcd5:	eb 4d                	jmp    c000dd24 <sinc_set_converter+0xaf>
c000dcd7:	83 fa 02             	cmp    edx,0x2
c000dcda:	75 10                	jne    c000dcec <sinc_set_converter+0x77>
c000dcdc:	c7 43 24 a0 ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cea0
c000dce3:	c7 43 20 a0 ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cea0
c000dcea:	eb 38                	jmp    c000dd24 <sinc_set_converter+0xaf>
c000dcec:	83 fa 04             	cmp    edx,0x4
c000dcef:	75 10                	jne    c000dd01 <sinc_set_converter+0x8c>
c000dcf1:	c7 43 24 db c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7db
c000dcf8:	c7 43 20 db c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7db
c000dcff:	eb 23                	jmp    c000dd24 <sinc_set_converter+0xaf>
c000dd01:	83 fa 06             	cmp    edx,0x6
c000dd04:	75 10                	jne    c000dd16 <sinc_set_converter+0xa1>
c000dd06:	c7 43 24 16 c1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c116
c000dd0d:	c7 43 20 16 c1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c116
c000dd14:	eb 0e                	jmp    c000dd24 <sinc_set_converter+0xaf>
c000dd16:	c7 43 24 52 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba52
c000dd1d:	c7 43 20 52 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba52
c000dd24:	c7 43 28 05 ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad05
c000dd2b:	b8 0a 00 00 00       	mov    eax,0xa
c000dd30:	81 c4 58 08 00 00    	add    esp,0x858
c000dd36:	5b                   	pop    ebx
c000dd37:	c3                   	ret    

c000dd38 <zoh_vari_process>:
c000dd38:	55                   	push   ebp
c000dd39:	31 d2                	xor    edx,edx
c000dd3b:	57                   	push   edi
c000dd3c:	56                   	push   esi
c000dd3d:	53                   	push   ebx
c000dd3e:	83 ec 3c             	sub    esp,0x3c
c000dd41:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd45:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd49:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd4d:	0f 8e 80 06 00 00    	jle    c000e3d3 <zoh_vari_process+0x69b>
c000dd53:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd56:	ba 05 00 00 00       	mov    edx,0x5
c000dd5b:	85 db                	test   ebx,ebx
c000dd5d:	0f 84 70 06 00 00    	je     c000e3d3 <zoh_vari_process+0x69b>
c000dd63:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd66:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd6a:	74 19                	je     c000dd85 <zoh_vari_process+0x4d>
c000dd6c:	31 d2                	xor    edx,edx
c000dd6e:	39 c2                	cmp    edx,eax
c000dd70:	7d 0c                	jge    c000dd7e <zoh_vari_process+0x46>
c000dd72:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd74:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd77:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd7b:	42                   	inc    edx
c000dd7c:	eb f0                	jmp    c000dd6e <zoh_vari_process+0x36>
c000dd7e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dd85:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dd88:	0f af d0             	imul   edx,eax
c000dd8b:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000dd8e:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000dd92:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000dd99:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000dd9c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000dda3:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dda6:	8b 07                	mov    eax,DWORD PTR [edi]
c000dda8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddb0:	68 00 00 70 3f       	push   0x3f700000
c000ddb5:	6a 00                	push   0x0
c000ddb7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddbb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddbf:	e8 f3 b2 01 00       	call   c00290b7 <__ltdf2>
c000ddc4:	83 c4 10             	add    esp,0x10
c000ddc7:	ba 16 00 00 00       	mov    edx,0x16
c000ddcc:	85 c0                	test   eax,eax
c000ddce:	0f 88 ff 05 00 00    	js     c000e3d3 <zoh_vari_process+0x69b>
c000ddd4:	68 00 00 70 40       	push   0x40700000
c000ddd9:	6a 00                	push   0x0
c000dddb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dddf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dde3:	e8 b1 b2 01 00       	call   c0029099 <__gtdf2>
c000dde8:	83 c4 10             	add    esp,0x10
c000ddeb:	ba 16 00 00 00       	mov    edx,0x16
c000ddf0:	85 c0                	test   eax,eax
c000ddf2:	0f 8f db 05 00 00    	jg     c000e3d3 <zoh_vari_process+0x69b>
c000ddf8:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ddfb:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000ddfe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de02:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de06:	68 00 00 f0 3f       	push   0x3ff00000
c000de0b:	6a 00                	push   0x0
c000de0d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de11:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de15:	e8 9d b2 01 00       	call   c00290b7 <__ltdf2>
c000de1a:	83 c4 10             	add    esp,0x10
c000de1d:	85 c0                	test   eax,eax
c000de1f:	0f 89 da 01 00 00    	jns    c000dfff <zoh_vari_process+0x2c7>
c000de25:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de28:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de2b:	0f 8d ce 01 00 00    	jge    c000dfff <zoh_vari_process+0x2c7>
c000de31:	83 ec 0c             	sub    esp,0xc
c000de34:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de37:	e8 0f b0 01 00       	call   c0028e4b <__floatsidf>
c000de3c:	83 c4 10             	add    esp,0x10
c000de3f:	89 04 24             	mov    DWORD PTR [esp],eax
c000de42:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de46:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de4e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de52:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de56:	e8 8d a9 01 00       	call   c00287e8 <__muldf3>
c000de5b:	59                   	pop    ecx
c000de5c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de60:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de64:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de67:	e8 df af 01 00       	call   c0028e4b <__floatsidf>
c000de6c:	83 c4 10             	add    esp,0x10
c000de6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de73:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de77:	52                   	push   edx
c000de78:	50                   	push   eax
c000de79:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de7d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de81:	e8 e5 a2 01 00       	call   c002816b <__adddf3>
c000de86:	59                   	pop    ecx
c000de87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de8b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de8f:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000de92:	e8 b4 af 01 00       	call   c0028e4b <__floatsidf>
c000de97:	83 c4 10             	add    esp,0x10
c000de9a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de9e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dea2:	52                   	push   edx
c000dea3:	50                   	push   eax
c000dea4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dea8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deac:	e8 04 b2 01 00       	call   c00290b5 <__gedf2>
c000deb1:	83 c4 10             	add    esp,0x10
c000deb4:	85 c0                	test   eax,eax
c000deb6:	0f 89 43 01 00 00    	jns    c000dfff <zoh_vari_process+0x2c7>
c000debc:	85 ed                	test   ebp,ebp
c000debe:	0f 8e ec 00 00 00    	jle    c000dfb0 <zoh_vari_process+0x278>
c000dec4:	83 ec 10             	sub    esp,0x10
c000dec7:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000deca:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000decd:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000ded0:	ff 37                	push   DWORD PTR [edi]
c000ded2:	e8 e5 a8 01 00       	call   c00287bc <__subdf3>
c000ded7:	83 c4 18             	add    esp,0x18
c000deda:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dede:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dee2:	52                   	push   edx
c000dee3:	50                   	push   eax
c000dee4:	e8 67 b3 01 00       	call   c0029250 <fabs>
c000dee9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000deed:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000def1:	83 c4 10             	add    esp,0x10
c000def4:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000def9:	68 23 42 92 0c       	push   0xc924223
c000defe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df02:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df06:	e8 8e b1 01 00       	call   c0029099 <__gtdf2>
c000df0b:	83 c4 10             	add    esp,0x10
c000df0e:	85 c0                	test   eax,eax
c000df10:	0f 8e 9a 00 00 00    	jle    c000dfb0 <zoh_vari_process+0x278>
c000df16:	8b 07                	mov    eax,DWORD PTR [edi]
c000df18:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df1b:	89 04 24             	mov    DWORD PTR [esp],eax
c000df1e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df22:	52                   	push   edx
c000df23:	50                   	push   eax
c000df24:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df27:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df2a:	e8 8d a8 01 00       	call   c00287bc <__subdf3>
c000df2f:	59                   	pop    ecx
c000df30:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df34:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df38:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df3b:	e8 0b af 01 00       	call   c0028e4b <__floatsidf>
c000df40:	83 c4 10             	add    esp,0x10
c000df43:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df47:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df4b:	52                   	push   edx
c000df4c:	50                   	push   eax
c000df4d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df51:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df55:	e8 8e a8 01 00       	call   c00287e8 <__muldf3>
c000df5a:	5d                   	pop    ebp
c000df5b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df5f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df63:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df66:	e8 e0 ae 01 00       	call   c0028e4b <__floatsidf>
c000df6b:	83 c4 10             	add    esp,0x10
c000df6e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df72:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df76:	52                   	push   edx
c000df77:	50                   	push   eax
c000df78:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df80:	e8 47 ab 01 00       	call   c0028acc <__divdf3>
c000df85:	83 c4 10             	add    esp,0x10
c000df88:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df8c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df90:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df94:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df98:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfa0:	e8 c6 a1 01 00       	call   c002816b <__adddf3>
c000dfa5:	83 c4 10             	add    esp,0x10
c000dfa8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfac:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfb0:	31 c0                	xor    eax,eax
c000dfb2:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dfb5:	7e 13                	jle    c000dfca <zoh_vari_process+0x292>
c000dfb7:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dfbb:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfbe:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfc1:	40                   	inc    eax
c000dfc2:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfc5:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfc8:	eb e8                	jmp    c000dfb2 <zoh_vari_process+0x27a>
c000dfca:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfd2:	68 00 00 f0 3f       	push   0x3ff00000
c000dfd7:	6a 00                	push   0x0
c000dfd9:	e8 ee aa 01 00       	call   c0028acc <__divdf3>
c000dfde:	83 c4 10             	add    esp,0x10
c000dfe1:	89 04 24             	mov    DWORD PTR [esp],eax
c000dfe4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dfe8:	52                   	push   edx
c000dfe9:	50                   	push   eax
c000dfea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dff2:	e8 74 a1 01 00       	call   c002816b <__adddf3>
c000dff7:	83 c4 10             	add    esp,0x10
c000dffa:	e9 ff fd ff ff       	jmp    c000ddfe <zoh_vari_process+0xc6>
c000dfff:	55                   	push   ebp
c000e000:	55                   	push   ebp
c000e001:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e005:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e009:	e8 62 b2 01 00       	call   c0029270 <lrint>
c000e00e:	83 ec 0c             	sub    esp,0xc
c000e011:	50                   	push   eax
c000e012:	e8 34 ae 01 00       	call   c0028e4b <__floatsidf>
c000e017:	83 c4 10             	add    esp,0x10
c000e01a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e01e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e022:	52                   	push   edx
c000e023:	50                   	push   eax
c000e024:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e028:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e02c:	e8 8b a7 01 00       	call   c00287bc <__subdf3>
c000e031:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e035:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e039:	83 c4 20             	add    esp,0x20
c000e03c:	6a 00                	push   0x0
c000e03e:	6a 00                	push   0x0
c000e040:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e044:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e048:	e8 6a b0 01 00       	call   c00290b7 <__ltdf2>
c000e04d:	83 c4 10             	add    esp,0x10
c000e050:	85 c0                	test   eax,eax
c000e052:	79 1e                	jns    c000e072 <zoh_vari_process+0x33a>
c000e054:	68 00 00 f0 3f       	push   0x3ff00000
c000e059:	6a 00                	push   0x0
c000e05b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e05f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e063:	e8 03 a1 01 00       	call   c002816b <__adddf3>
c000e068:	83 c4 10             	add    esp,0x10
c000e06b:	89 04 24             	mov    DWORD PTR [esp],eax
c000e06e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e072:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e075:	83 ec 10             	sub    esp,0x10
c000e078:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e07c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e080:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e084:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e088:	e8 2f a7 01 00       	call   c00287bc <__subdf3>
c000e08d:	83 c4 18             	add    esp,0x18
c000e090:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e094:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e098:	52                   	push   edx
c000e099:	50                   	push   eax
c000e09a:	e8 d1 b1 01 00       	call   c0029270 <lrint>
c000e09f:	83 c4 10             	add    esp,0x10
c000e0a2:	0f af e8             	imul   ebp,eax
c000e0a5:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e0a8:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e0ab:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e0af:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e0b2:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e0b5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0b9:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0bc:	0f 8d 7a 02 00 00    	jge    c000e33c <zoh_vari_process+0x604>
c000e0c2:	83 ec 0c             	sub    esp,0xc
c000e0c5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0c8:	e8 7e ad 01 00       	call   c0028e4b <__floatsidf>
c000e0cd:	83 c4 10             	add    esp,0x10
c000e0d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0d4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0d8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0dc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0e0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0e4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0e8:	e8 fb a6 01 00       	call   c00287e8 <__muldf3>
c000e0ed:	59                   	pop    ecx
c000e0ee:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e0f2:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e0f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0fa:	e8 4c ad 01 00       	call   c0028e4b <__floatsidf>
c000e0ff:	83 c4 10             	add    esp,0x10
c000e102:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e106:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e10a:	52                   	push   edx
c000e10b:	50                   	push   eax
c000e10c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e110:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e114:	e8 52 a0 01 00       	call   c002816b <__adddf3>
c000e119:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e11c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e120:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e124:	e8 22 ad 01 00       	call   c0028e4b <__floatsidf>
c000e129:	83 c4 10             	add    esp,0x10
c000e12c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e130:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e134:	52                   	push   edx
c000e135:	50                   	push   eax
c000e136:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e13a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e13e:	e8 76 af 01 00       	call   c00290b9 <__ledf2>
c000e143:	83 c4 10             	add    esp,0x10
c000e146:	85 c0                	test   eax,eax
c000e148:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e14c:	0f 8f ea 01 00 00    	jg     c000e33c <zoh_vari_process+0x604>
c000e152:	85 c9                	test   ecx,ecx
c000e154:	0f 8e ed 00 00 00    	jle    c000e247 <zoh_vari_process+0x50f>
c000e15a:	83 ec 10             	sub    esp,0x10
c000e15d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e160:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e163:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e166:	ff 37                	push   DWORD PTR [edi]
c000e168:	e8 4f a6 01 00       	call   c00287bc <__subdf3>
c000e16d:	83 c4 18             	add    esp,0x18
c000e170:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e174:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e178:	52                   	push   edx
c000e179:	50                   	push   eax
c000e17a:	e8 d1 b0 01 00       	call   c0029250 <fabs>
c000e17f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e183:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e187:	83 c4 10             	add    esp,0x10
c000e18a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e18f:	68 23 42 92 0c       	push   0xc924223
c000e194:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e198:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e19c:	e8 f8 ae 01 00       	call   c0029099 <__gtdf2>
c000e1a1:	83 c4 10             	add    esp,0x10
c000e1a4:	85 c0                	test   eax,eax
c000e1a6:	0f 8e 9b 00 00 00    	jle    c000e247 <zoh_vari_process+0x50f>
c000e1ac:	8b 07                	mov    eax,DWORD PTR [edi]
c000e1ae:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e1b1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1b5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1b9:	52                   	push   edx
c000e1ba:	50                   	push   eax
c000e1bb:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1be:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1c1:	e8 f6 a5 01 00       	call   c00287bc <__subdf3>
c000e1c6:	5d                   	pop    ebp
c000e1c7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1cb:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1cf:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1d2:	e8 74 ac 01 00       	call   c0028e4b <__floatsidf>
c000e1d7:	83 c4 10             	add    esp,0x10
c000e1da:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1de:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1e2:	52                   	push   edx
c000e1e3:	50                   	push   eax
c000e1e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1ec:	e8 f7 a5 01 00       	call   c00287e8 <__muldf3>
c000e1f1:	59                   	pop    ecx
c000e1f2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1f6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1fa:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e1fd:	e8 49 ac 01 00       	call   c0028e4b <__floatsidf>
c000e202:	83 c4 10             	add    esp,0x10
c000e205:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e209:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e20d:	52                   	push   edx
c000e20e:	50                   	push   eax
c000e20f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e217:	e8 b0 a8 01 00       	call   c0028acc <__divdf3>
c000e21c:	83 c4 10             	add    esp,0x10
c000e21f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e223:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e227:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e22b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e22f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e233:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e237:	e8 2f 9f 01 00       	call   c002816b <__adddf3>
c000e23c:	83 c4 10             	add    esp,0x10
c000e23f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e243:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e247:	31 d2                	xor    edx,edx
c000e249:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e24c:	39 d0                	cmp    eax,edx
c000e24e:	7e 1d                	jle    c000e26d <zoh_vari_process+0x535>
c000e250:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e253:	29 c1                	sub    ecx,eax
c000e255:	89 c8                	mov    eax,ecx
c000e257:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e259:	01 d0                	add    eax,edx
c000e25b:	42                   	inc    edx
c000e25c:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e25f:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e262:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e265:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e268:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e26b:	eb dc                	jmp    c000e249 <zoh_vari_process+0x511>
c000e26d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e271:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e275:	68 00 00 f0 3f       	push   0x3ff00000
c000e27a:	6a 00                	push   0x0
c000e27c:	e8 4b a8 01 00       	call   c0028acc <__divdf3>
c000e281:	83 c4 10             	add    esp,0x10
c000e284:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e288:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e28c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e290:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e294:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e298:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e29c:	e8 ca 9e 01 00       	call   c002816b <__adddf3>
c000e2a1:	5d                   	pop    ebp
c000e2a2:	59                   	pop    ecx
c000e2a3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2a7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2b3:	e8 b8 af 01 00       	call   c0029270 <lrint>
c000e2b8:	83 ec 0c             	sub    esp,0xc
c000e2bb:	50                   	push   eax
c000e2bc:	e8 8a ab 01 00       	call   c0028e4b <__floatsidf>
c000e2c1:	83 c4 10             	add    esp,0x10
c000e2c4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2c8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2cc:	52                   	push   edx
c000e2cd:	50                   	push   eax
c000e2ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2d2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2d6:	e8 e1 a4 01 00       	call   c00287bc <__subdf3>
c000e2db:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2df:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e2e3:	83 c4 20             	add    esp,0x20
c000e2e6:	6a 00                	push   0x0
c000e2e8:	6a 00                	push   0x0
c000e2ea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2ee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2f2:	e8 c0 ad 01 00       	call   c00290b7 <__ltdf2>
c000e2f7:	83 c4 10             	add    esp,0x10
c000e2fa:	85 c0                	test   eax,eax
c000e2fc:	79 1e                	jns    c000e31c <zoh_vari_process+0x5e4>
c000e2fe:	68 00 00 f0 3f       	push   0x3ff00000
c000e303:	6a 00                	push   0x0
c000e305:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e309:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e30d:	e8 59 9e 01 00       	call   c002816b <__adddf3>
c000e312:	83 c4 10             	add    esp,0x10
c000e315:	89 04 24             	mov    DWORD PTR [esp],eax
c000e318:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e31c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e31f:	83 ec 10             	sub    esp,0x10
c000e322:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e326:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e32a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e32e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e332:	e8 85 a4 01 00       	call   c00287bc <__subdf3>
c000e337:	e9 51 fd ff ff       	jmp    c000e08d <zoh_vari_process+0x355>
c000e33c:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e340:	7d 3a                	jge    c000e37c <zoh_vari_process+0x644>
c000e342:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e346:	83 ec 0c             	sub    esp,0xc
c000e349:	29 e8                	sub    eax,ebp
c000e34b:	99                   	cdq    
c000e34c:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e34f:	50                   	push   eax
c000e350:	e8 f6 aa 01 00       	call   c0028e4b <__floatsidf>
c000e355:	83 c4 10             	add    esp,0x10
c000e358:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e35c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e360:	52                   	push   edx
c000e361:	50                   	push   eax
c000e362:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e366:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e36a:	e8 fc 9d 01 00       	call   c002816b <__adddf3>
c000e36f:	83 c4 10             	add    esp,0x10
c000e372:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e375:	89 04 24             	mov    DWORD PTR [esp],eax
c000e378:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e37c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e37f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e383:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e386:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e389:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e38c:	85 c0                	test   eax,eax
c000e38e:	7f 25                	jg     c000e3b5 <zoh_vari_process+0x67d>
c000e390:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e394:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e398:	89 07                	mov    DWORD PTR [edi],eax
c000e39a:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e39d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3a0:	99                   	cdq    
c000e3a1:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3a4:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e3a7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e3aa:	99                   	cdq    
c000e3ab:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3ae:	31 d2                	xor    edx,edx
c000e3b0:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e3b3:	eb 1e                	jmp    c000e3d3 <zoh_vari_process+0x69b>
c000e3b5:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e3b8:	31 d2                	xor    edx,edx
c000e3ba:	29 c8                	sub    eax,ecx
c000e3bc:	c1 e0 02             	shl    eax,0x2
c000e3bf:	39 d1                	cmp    ecx,edx
c000e3c1:	7e cd                	jle    c000e390 <zoh_vari_process+0x658>
c000e3c3:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3c5:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3c9:	83 c0 04             	add    eax,0x4
c000e3cc:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3d0:	42                   	inc    edx
c000e3d1:	eb ec                	jmp    c000e3bf <zoh_vari_process+0x687>
c000e3d3:	83 c4 3c             	add    esp,0x3c
c000e3d6:	89 d0                	mov    eax,edx
c000e3d8:	5b                   	pop    ebx
c000e3d9:	5e                   	pop    esi
c000e3da:	5f                   	pop    edi
c000e3db:	5d                   	pop    ebp
c000e3dc:	c3                   	ret    

c000e3dd <zoh_reset>:
c000e3dd:	83 ec 0c             	sub    esp,0xc
c000e3e0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e3e4:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e3e7:	85 c0                	test   eax,eax
c000e3e9:	74 20                	je     c000e40b <zoh_reset+0x2e>
c000e3eb:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e3ee:	83 c0 1c             	add    eax,0x1c
c000e3f1:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e3f4:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e3fb:	c1 e2 02             	shl    edx,0x2
c000e3fe:	51                   	push   ecx
c000e3ff:	52                   	push   edx
c000e400:	6a 00                	push   0x0
c000e402:	50                   	push   eax
c000e403:	e8 64 23 ff ff       	call   c000076c <memset>
c000e408:	83 c4 10             	add    esp,0x10
c000e40b:	83 c4 0c             	add    esp,0xc
c000e40e:	c3                   	ret    

c000e40f <zoh_get_name>:
c000e40f:	31 c0                	xor    eax,eax
c000e411:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e416:	75 05                	jne    c000e41d <zoh_get_name+0xe>
c000e418:	b8 5e ac 02 c0       	mov    eax,0xc002ac5e
c000e41d:	c3                   	ret    

c000e41e <zoh_get_description>:
c000e41e:	31 c0                	xor    eax,eax
c000e420:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e425:	75 05                	jne    c000e42c <zoh_get_description+0xe>
c000e427:	b8 6f ac 02 c0       	mov    eax,0xc002ac6f
c000e42c:	c3                   	ret    

c000e42d <zoh_set_converter>:
c000e42d:	53                   	push   ebx
c000e42e:	b8 0a 00 00 00       	mov    eax,0xa
c000e433:	83 ec 08             	sub    esp,0x8
c000e436:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e43a:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e43f:	75 6e                	jne    c000e4af <zoh_set_converter+0x82>
c000e441:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e444:	85 c0                	test   eax,eax
c000e446:	74 13                	je     c000e45b <zoh_set_converter+0x2e>
c000e448:	83 ec 0c             	sub    esp,0xc
c000e44b:	50                   	push   eax
c000e44c:	e8 67 14 00 00       	call   c000f8b8 <free>
c000e451:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e458:	83 c4 10             	add    esp,0x10
c000e45b:	50                   	push   eax
c000e45c:	50                   	push   eax
c000e45d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e460:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e467:	50                   	push   eax
c000e468:	6a 01                	push   0x1
c000e46a:	e8 69 14 00 00       	call   c000f8d8 <calloc>
c000e46f:	83 c4 10             	add    esp,0x10
c000e472:	89 c2                	mov    edx,eax
c000e474:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e477:	85 d2                	test   edx,edx
c000e479:	b8 01 00 00 00       	mov    eax,0x1
c000e47e:	74 2f                	je     c000e4af <zoh_set_converter+0x82>
c000e480:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e483:	83 ec 0c             	sub    esp,0xc
c000e486:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e489:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e48f:	c7 43 24 38 dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd38
c000e496:	c7 43 20 38 dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd38
c000e49d:	c7 43 28 dd e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3dd
c000e4a4:	53                   	push   ebx
c000e4a5:	e8 33 ff ff ff       	call   c000e3dd <zoh_reset>
c000e4aa:	83 c4 10             	add    esp,0x10
c000e4ad:	31 c0                	xor    eax,eax
c000e4af:	83 c4 08             	add    esp,0x8
c000e4b2:	5b                   	pop    ebx
c000e4b3:	c3                   	ret    

c000e4b4 <CPU::current()>:
c000e4b4:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c000e4b9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4bf:	c3                   	ret    

c000e4c0 <operator new(unsigned long)>:
c000e4c0:	e9 e3 13 00 00       	jmp    c000f8a8 <malloc>

c000e4c5 <operator delete(void*)>:
c000e4c5:	e9 fe 13 00 00       	jmp    c000f8c8 <rfree>

c000e4ca <disableIRQs()>:
c000e4ca:	fa                   	cli    
c000e4cb:	ff 05 c8 27 03 c0    	inc    DWORD PTR ds:0xc00327c8
c000e4d1:	c3                   	ret    

c000e4d2 <enableIRQs()>:
c000e4d2:	a1 c8 27 03 c0       	mov    eax,ds:0xc00327c8
c000e4d7:	48                   	dec    eax
c000e4d8:	a3 c8 27 03 c0       	mov    ds:0xc00327c8,eax
c000e4dd:	75 01                	jne    c000e4e0 <enableIRQs()+0xe>
c000e4df:	fb                   	sti    
c000e4e0:	c3                   	ret    

c000e4e1 <lockScheduler()>:
c000e4e1:	fa                   	cli    
c000e4e2:	ff 05 c8 27 03 c0    	inc    DWORD PTR ds:0xc00327c8
c000e4e8:	c3                   	ret    

c000e4e9 <unlockScheduler()>:
c000e4e9:	a1 c8 27 03 c0       	mov    eax,ds:0xc00327c8
c000e4ee:	48                   	dec    eax
c000e4ef:	a3 c8 27 03 c0       	mov    ds:0xc00327c8,eax
c000e4f4:	75 01                	jne    c000e4f7 <unlockScheduler()+0xe>
c000e4f6:	fb                   	sti    
c000e4f7:	c3                   	ret    

c000e4f8 <lockStuff()>:
c000e4f8:	fa                   	cli    
c000e4f9:	ff 05 c8 27 03 c0    	inc    DWORD PTR ds:0xc00327c8
c000e4ff:	ff 05 c4 27 03 c0    	inc    DWORD PTR ds:0xc00327c4
c000e505:	c3                   	ret    

c000e506 <unlockStuff()>:
c000e506:	83 ec 0c             	sub    esp,0xc
c000e509:	a1 c4 27 03 c0       	mov    eax,ds:0xc00327c4
c000e50e:	48                   	dec    eax
c000e50f:	a3 c4 27 03 c0       	mov    ds:0xc00327c4,eax
c000e514:	75 18                	jne    c000e52e <unlockStuff()+0x28>
c000e516:	83 3d c0 27 03 c0 00 	cmp    DWORD PTR ds:0xc00327c0,0x0
c000e51d:	74 0f                	je     c000e52e <unlockStuff()+0x28>
c000e51f:	c7 05 c0 27 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00327c0,0x0
c000e529:	e8 72 01 01 00       	call   c001e6a0 <schedule()>
c000e52e:	a1 c8 27 03 c0       	mov    eax,ds:0xc00327c8
c000e533:	48                   	dec    eax
c000e534:	a3 c8 27 03 c0       	mov    ds:0xc00327c8,eax
c000e539:	75 01                	jne    c000e53c <unlockStuff()+0x36>
c000e53b:	fb                   	sti    
c000e53c:	83 c4 0c             	add    esp,0xc
c000e53f:	c3                   	ret    

c000e540 <Virt::getAKernelVAS()>:
c000e540:	a1 10 f4 02 c0       	mov    eax,ds:0xc002f410
c000e545:	c3                   	ret    

c000e546 <__not_memcpy>:
c000e546:	57                   	push   edi
c000e547:	56                   	push   esi
c000e548:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e54c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e550:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e554:	89 c7                	mov    edi,eax
c000e556:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e558:	5e                   	pop    esi
c000e559:	5f                   	pop    edi
c000e55a:	c3                   	ret    

c000e55b <Krnl::resolveCompatibilitySymbol(char*)>:
c000e55b:	83 ec 0c             	sub    esp,0xc
c000e55e:	83 ec 08             	sub    esp,0x8
c000e561:	68 a6 ac 02 c0       	push   0xc002aca6
c000e566:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e56a:	e8 45 23 ff ff       	call   c00008b4 <strcmp>
c000e56f:	83 c4 10             	add    esp,0x10
c000e572:	85 c0                	test   eax,eax
c000e574:	0f 94 c0             	sete   al
c000e577:	84 c0                	test   al,al
c000e579:	74 0a                	je     c000e585 <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e57b:	b8 88 f2 02 c0       	mov    eax,0xc002f288
c000e580:	e9 e3 00 00 00       	jmp    c000e668 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e585:	83 ec 08             	sub    esp,0x8
c000e588:	68 af ac 02 c0       	push   0xc002acaf
c000e58d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e591:	e8 1e 23 ff ff       	call   c00008b4 <strcmp>
c000e596:	83 c4 10             	add    esp,0x10
c000e599:	85 c0                	test   eax,eax
c000e59b:	0f 94 c0             	sete   al
c000e59e:	84 c0                	test   al,al
c000e5a0:	74 0a                	je     c000e5ac <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e5a2:	b8 e4 75 02 c0       	mov    eax,0xc00275e4
c000e5a7:	e9 bc 00 00 00       	jmp    c000e668 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5ac:	83 ec 08             	sub    esp,0x8
c000e5af:	68 b9 ac 02 c0       	push   0xc002acb9
c000e5b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5b8:	e8 f7 22 ff ff       	call   c00008b4 <strcmp>
c000e5bd:	83 c4 10             	add    esp,0x10
c000e5c0:	85 c0                	test   eax,eax
c000e5c2:	0f 94 c0             	sete   al
c000e5c5:	84 c0                	test   al,al
c000e5c7:	74 0a                	je     c000e5d3 <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e5c9:	b8 18 73 02 c0       	mov    eax,0xc0027318
c000e5ce:	e9 95 00 00 00       	jmp    c000e668 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5d3:	83 ec 08             	sub    esp,0x8
c000e5d6:	68 c2 ac 02 c0       	push   0xc002acc2
c000e5db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5df:	e8 d0 22 ff ff       	call   c00008b4 <strcmp>
c000e5e4:	83 c4 10             	add    esp,0x10
c000e5e7:	85 c0                	test   eax,eax
c000e5e9:	0f 94 c0             	sete   al
c000e5ec:	84 c0                	test   al,al
c000e5ee:	74 07                	je     c000e5f7 <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e5f0:	b8 e4 76 02 c0       	mov    eax,0xc00276e4
c000e5f5:	eb 71                	jmp    c000e668 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5f7:	83 ec 08             	sub    esp,0x8
c000e5fa:	68 cc ac 02 c0       	push   0xc002accc
c000e5ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e603:	e8 ac 22 ff ff       	call   c00008b4 <strcmp>
c000e608:	83 c4 10             	add    esp,0x10
c000e60b:	85 c0                	test   eax,eax
c000e60d:	0f 94 c0             	sete   al
c000e610:	84 c0                	test   al,al
c000e612:	74 07                	je     c000e61b <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e614:	b8 64 74 02 c0       	mov    eax,0xc0027464
c000e619:	eb 4d                	jmp    c000e668 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e61b:	83 ec 08             	sub    esp,0x8
c000e61e:	68 d5 ac 02 c0       	push   0xc002acd5
c000e623:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e627:	e8 88 22 ff ff       	call   c00008b4 <strcmp>
c000e62c:	83 c4 10             	add    esp,0x10
c000e62f:	85 c0                	test   eax,eax
c000e631:	0f 94 c0             	sete   al
c000e634:	84 c0                	test   al,al
c000e636:	74 07                	je     c000e63f <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e638:	b8 8c f2 02 c0       	mov    eax,0xc002f28c
c000e63d:	eb 29                	jmp    c000e668 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e63f:	83 ec 08             	sub    esp,0x8
c000e642:	68 e2 ac 02 c0       	push   0xc002ace2
c000e647:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e64b:	e8 64 22 ff ff       	call   c00008b4 <strcmp>
c000e650:	83 c4 10             	add    esp,0x10
c000e653:	85 c0                	test   eax,eax
c000e655:	0f 94 c0             	sete   al
c000e658:	84 c0                	test   al,al
c000e65a:	74 07                	je     c000e663 <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e65c:	b8 8d f2 02 c0       	mov    eax,0xc002f28d
c000e661:	eb 05                	jmp    c000e668 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e663:	b8 00 00 00 00       	mov    eax,0x0
c000e668:	83 c4 0c             	add    esp,0xc
c000e66b:	c3                   	ret    

c000e66c <Computer::close(int, int, void*)>:
c000e66c:	57                   	push   edi
c000e66d:	56                   	push   esi
c000e66e:	53                   	push   ebx
c000e66f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e673:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e677:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e67b:	83 ec 0c             	sub    esp,0xc
c000e67e:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e684:	e8 61 5d 00 00       	call   c00143ea <Device::closeAll()>
c000e689:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e68f:	83 c4 10             	add    esp,0x10
c000e692:	8b 10                	mov    edx,DWORD PTR [eax]
c000e694:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e698:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e6a0:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e6a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e6a8:	5b                   	pop    ebx
c000e6a9:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e6ac:	5e                   	pop    esi
c000e6ad:	5f                   	pop    edi
c000e6ae:	ff e0                	jmp    eax

c000e6b0 <Krnl::firstTask()>:
c000e6b0:	53                   	push   ebx
c000e6b1:	83 ec 14             	sub    esp,0x14
c000e6b4:	fb                   	sti    
c000e6b5:	68 3f 07 00 00       	push   0x73f
c000e6ba:	e8 e9 11 00 00       	call   c000f8a8 <malloc>
c000e6bf:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e6c6:	89 c3                	mov    ebx,eax
c000e6c8:	ff 35 f0 27 03 c0    	push   DWORD PTR ds:0xc00327f0
c000e6ce:	68 ef ac 02 c0       	push   0xc002acef
c000e6d3:	6a 01                	push   0x1
c000e6d5:	50                   	push   eax
c000e6d6:	e8 89 fb 00 00       	call   c001e264 <Process::Process(bool, char const*, Process*, char**)>
c000e6db:	83 c4 20             	add    esp,0x20
c000e6de:	68 ff 00 00 00       	push   0xff
c000e6e3:	6a 00                	push   0x0
c000e6e5:	68 3b f2 00 c0       	push   0xc000f23b
c000e6ea:	53                   	push   ebx
c000e6eb:	e8 6c fd 00 00       	call   c001e45c <Process::createThread(void (*)(void*), void*, int)>
c000e6f0:	6a 7a                	push   0x7a
c000e6f2:	6a 00                	push   0x0
c000e6f4:	68 da ee 01 c0       	push   0xc001eeda
c000e6f9:	ff 35 f0 27 03 c0    	push   DWORD PTR ds:0xc00327f0
c000e6ff:	e8 58 fd 00 00       	call   c001e45c <Process::createThread(void (*)(void*), void*, int)>
c000e704:	83 c4 20             	add    esp,0x20
c000e707:	a3 a8 27 03 c0       	mov    ds:0xc00327a8,eax
c000e70c:	c6 05 8d f2 02 c0 01 	mov    BYTE PTR ds:0xc002f28d,0x1
c000e713:	e8 16 0c 01 00       	call   c001f32e <Vm::initialise8086()>
c000e718:	e8 c1 4a 00 00       	call   c00131de <Fs::initVFS()>
c000e71d:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c000e722:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e728:	8b 10                	mov    edx,DWORD PTR [eax]
c000e72a:	6a 00                	push   0x0
c000e72c:	6a 00                	push   0x0
c000e72e:	6a 00                	push   0x0
c000e730:	50                   	push   eax
c000e731:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e734:	e8 b8 e3 00 00       	call   c001caf1 <Sys::loadSyscalls()>
c000e739:	e8 76 c0 00 00       	call   c001a7b4 <Krnl::loadSystemEnv()>
c000e73e:	83 c4 0c             	add    esp,0xc
c000e741:	6a 3a                	push   0x3a
c000e743:	68 fc ac 02 c0       	push   0xc002acfc
c000e748:	68 05 ad 02 c0       	push   0xc002ad05
c000e74d:	e8 51 cf 00 00       	call   c001b6a3 <Reg::readIntWithDefault(char*, char*, int)>
c000e752:	89 04 24             	mov    DWORD PTR [esp],eax
c000e755:	e8 74 55 00 00       	call   c0013cce <User::loadClockSettings(int)>
c000e75a:	58                   	pop    eax
c000e75b:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c000e760:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e766:	e8 53 5c 00 00       	call   c00143be <Device::loadDriversForAll()>
c000e76b:	e8 90 bb 00 00       	call   c001a300 <Krnl::startCPUs()>
c000e770:	5a                   	pop    edx
c000e771:	8b 1d 88 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f288
c000e777:	59                   	pop    ecx
c000e778:	6a 01                	push   0x1
c000e77a:	68 0d ad 02 c0       	push   0xc002ad0d
c000e77f:	e8 3d f5 00 00       	call   c001dcc1 <Thr::loadDLL(char const*, bool)>
c000e784:	5a                   	pop    edx
c000e785:	59                   	pop    ecx
c000e786:	53                   	push   ebx
c000e787:	50                   	push   eax
c000e788:	e8 5f f7 00 00       	call   c001deec <Thr::executeDLL(unsigned long, void*)>
c000e78d:	83 c4 10             	add    esp,0x10
c000e790:	83 ec 0c             	sub    esp,0xc
c000e793:	6a 02                	push   0x2
c000e795:	e8 05 01 01 00       	call   c001e89f <blockTask(TaskState)>
c000e79a:	83 c4 10             	add    esp,0x10
c000e79d:	eb f1                	jmp    c000e790 <Krnl::firstTask()+0xe0>
c000e79f:	90                   	nop

c000e7a0 <Computer::Computer()>:
c000e7a0:	83 ec 0c             	sub    esp,0xc
c000e7a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a7:	83 ec 08             	sub    esp,0x8
c000e7aa:	68 29 ad 02 c0       	push   0xc002ad29
c000e7af:	50                   	push   eax
c000e7b0:	e8 af 5c 00 00       	call   c0014464 <Device::Device(char const*)>
c000e7b5:	83 c4 10             	add    esp,0x10
c000e7b8:	ba c8 ae 02 c0       	mov    edx,0xc002aec8
c000e7bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7c1:	89 10                	mov    DWORD PTR [eax],edx
c000e7c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7c7:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e7d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7d5:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e7df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e3:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e7e9:	83 ca 04             	or     edx,0x4
c000e7ec:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e7f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7fc:	0f b6 d0             	movzx  edx,al
c000e7ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e803:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e80a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e814:	0f b6 d0             	movzx  edx,al
c000e817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e81b:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e820:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e824:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e82a:	8d 50 01             	lea    edx,[eax+0x1]
c000e82d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e831:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e837:	0f b6 d0             	movzx  edx,al
c000e83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e83e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e842:	83 e1 3f             	and    ecx,0x3f
c000e845:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e849:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e84d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e853:	0f b6 d0             	movzx  edx,al
c000e856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e85a:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e861:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e865:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e86b:	0f b6 d0             	movzx  edx,al
c000e86e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e872:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e877:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e87b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e881:	8d 50 01             	lea    edx,[eax+0x1]
c000e884:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e888:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e88e:	0f b6 d0             	movzx  edx,al
c000e891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e895:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e899:	83 e1 3f             	and    ecx,0x3f
c000e89c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e8a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8a4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8aa:	0f b6 d0             	movzx  edx,al
c000e8ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8b1:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e8b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8bc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8c2:	0f b6 d0             	movzx  edx,al
c000e8c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8c9:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e8ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8d2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8d8:	8d 50 01             	lea    edx,[eax+0x1]
c000e8db:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e8df:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e8e5:	0f b6 d0             	movzx  edx,al
c000e8e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8ec:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e8f0:	83 e1 3f             	and    ecx,0x3f
c000e8f3:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e8f7:	90                   	nop
c000e8f8:	83 c4 0c             	add    esp,0xc
c000e8fb:	c3                   	ret    

c000e8fc <Computer::setBootMessage(char const*)>:
c000e8fc:	c3                   	ret    
c000e8fd:	90                   	nop

c000e8fe <Computer::detectFeatures()>:
c000e8fe:	55                   	push   ebp
c000e8ff:	57                   	push   edi
c000e900:	56                   	push   esi
c000e901:	53                   	push   ebx
c000e902:	83 ec 1c             	sub    esp,0x1c
c000e905:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e909:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e913:	e8 cc 19 ff ff       	call   c00002e4 <detectCPUID>
c000e918:	85 c0                	test   eax,eax
c000e91a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e920:	0f 95 c2             	setne  dl
c000e923:	83 e0 fd             	and    eax,0xfffffffd
c000e926:	d1 e2                	shl    edx,1
c000e928:	09 d0                	or     eax,edx
c000e92a:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e930:	a8 02                	test   al,0x2
c000e932:	75 46                	jne    c000e97a <Computer::detectFeatures()+0x7c>
c000e934:	f6 05 a1 f2 02 c0 04 	test   BYTE PTR ds:0xc002f2a1,0x4
c000e93b:	74 07                	je     c000e944 <Computer::detectFeatures()+0x46>
c000e93d:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e944:	e8 5d 89 01 00       	call   c00272a6 <x87Detect>
c000e949:	83 e0 01             	and    eax,0x1
c000e94c:	c1 e0 04             	shl    eax,0x4
c000e94f:	88 c2                	mov    dl,al
c000e951:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e957:	83 e0 ef             	and    eax,0xffffffef
c000e95a:	09 d0                	or     eax,edx
c000e95c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e962:	a8 10                	test   al,0x10
c000e964:	0f 85 2a 01 00 00    	jne    c000ea94 <Computer::detectFeatures()+0x196>
c000e96a:	84 c0                	test   al,al
c000e96c:	0f 88 45 01 00 00    	js     c000eab7 <Computer::detectFeatures()+0x1b9>
c000e972:	83 c4 1c             	add    esp,0x1c
c000e975:	5b                   	pop    ebx
c000e976:	5e                   	pop    esi
c000e977:	5f                   	pop    edi
c000e978:	5d                   	pop    ebp
c000e979:	c3                   	ret    
c000e97a:	83 ec 0c             	sub    esp,0xc
c000e97d:	6a 20                	push   0x20
c000e97f:	e8 8c a6 00 00       	call   c0019010 <CPU::cpuidCheckEDX(unsigned int)>
c000e984:	83 e0 01             	and    eax,0x1
c000e987:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e98e:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e994:	83 e0 f7             	and    eax,0xfffffff7
c000e997:	09 d0                	or     eax,edx
c000e999:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e99f:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e9a6:	e8 65 a6 00 00       	call   c0019010 <CPU::cpuidCheckEDX(unsigned int)>
c000e9ab:	83 e0 01             	and    eax,0x1
c000e9ae:	88 c2                	mov    dl,al
c000e9b0:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e9b6:	83 e0 fe             	and    eax,0xfffffffe
c000e9b9:	09 d0                	or     eax,edx
c000e9bb:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e9c1:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e9c8:	e8 43 a6 00 00       	call   c0019010 <CPU::cpuidCheckEDX(unsigned int)>
c000e9cd:	c1 e0 07             	shl    eax,0x7
c000e9d0:	88 c2                	mov    dl,al
c000e9d2:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e9d8:	83 e0 7f             	and    eax,0x7f
c000e9db:	09 d0                	or     eax,edx
c000e9dd:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e9e3:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e9ea:	e8 21 a6 00 00       	call   c0019010 <CPU::cpuidCheckEDX(unsigned int)>
c000e9ef:	83 c4 10             	add    esp,0x10
c000e9f2:	83 e0 01             	and    eax,0x1
c000e9f5:	c1 e0 05             	shl    eax,0x5
c000e9f8:	88 c2                	mov    dl,al
c000e9fa:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea00:	83 e0 df             	and    eax,0xffffffdf
c000ea03:	09 d0                	or     eax,edx
c000ea05:	f7 05 a0 f2 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002f2a0,0x401
c000ea0f:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea15:	0f 84 c2 00 00 00    	je     c000eadd <Computer::detectFeatures()+0x1df>
c000ea1b:	83 e0 fe             	and    eax,0xfffffffe
c000ea1e:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea24:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea2a:	88 c2                	mov    dl,al
c000ea2c:	83 e2 09             	and    edx,0x9
c000ea2f:	fe ca                	dec    dl
c000ea31:	75 09                	jne    c000ea3c <Computer::detectFeatures()+0x13e>
c000ea33:	83 e0 fe             	and    eax,0xfffffffe
c000ea36:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea3c:	83 ec 0c             	sub    esp,0xc
c000ea3f:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ea43:	50                   	push   eax
c000ea44:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000ea48:	55                   	push   ebp
c000ea49:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ea4d:	57                   	push   edi
c000ea4e:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ea52:	56                   	push   esi
c000ea53:	68 00 00 00 80       	push   0x80000000
c000ea58:	e8 2f a5 00 00       	call   c0018f8c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea5d:	83 c4 20             	add    esp,0x20
c000ea60:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea67:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ea6b:	0f 86 c3 fe ff ff    	jbe    c000e934 <Computer::detectFeatures()+0x36>
c000ea71:	83 ec 0c             	sub    esp,0xc
c000ea74:	50                   	push   eax
c000ea75:	55                   	push   ebp
c000ea76:	57                   	push   edi
c000ea77:	56                   	push   esi
c000ea78:	68 01 00 00 80       	push   0x80000001
c000ea7d:	e8 0a a5 00 00       	call   c0018f8c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea82:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ea8c:	83 c4 20             	add    esp,0x20
c000ea8f:	e9 a0 fe ff ff       	jmp    c000e934 <Computer::detectFeatures()+0x36>
c000ea94:	e8 c7 87 01 00       	call   c0027260 <absolutelyNoChanceInHell>
c000ea99:	88 c2                	mov    dl,al
c000ea9b:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eaa1:	c1 e2 07             	shl    edx,0x7
c000eaa4:	83 e0 7f             	and    eax,0x7f
c000eaa7:	09 d0                	or     eax,edx
c000eaa9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eaaf:	84 c0                	test   al,al
c000eab1:	0f 89 bb fe ff ff    	jns    c000e972 <Computer::detectFeatures()+0x74>
c000eab7:	e8 84 87 01 00       	call   c0027240 <avxDetect>
c000eabc:	83 e0 01             	and    eax,0x1
c000eabf:	c1 e0 05             	shl    eax,0x5
c000eac2:	88 c2                	mov    dl,al
c000eac4:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000eaca:	83 e0 df             	and    eax,0xffffffdf
c000eacd:	09 d0                	or     eax,edx
c000eacf:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ead5:	83 c4 1c             	add    esp,0x1c
c000ead8:	5b                   	pop    ebx
c000ead9:	5e                   	pop    esi
c000eada:	5f                   	pop    edi
c000eadb:	5d                   	pop    ebp
c000eadc:	c3                   	ret    
c000eadd:	83 ec 0c             	sub    esp,0xc
c000eae0:	68 00 02 00 00       	push   0x200
c000eae5:	e8 26 a5 00 00       	call   c0019010 <CPU::cpuidCheckEDX(unsigned int)>
c000eaea:	83 c4 10             	add    esp,0x10
c000eaed:	83 e0 01             	and    eax,0x1
c000eaf0:	88 c2                	mov    dl,al
c000eaf2:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eaf8:	83 e0 fe             	and    eax,0xfffffffe
c000eafb:	09 d0                	or     eax,edx
c000eafd:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eb03:	e9 1c ff ff ff       	jmp    c000ea24 <Computer::detectFeatures()+0x126>

c000eb08 <Computer::displayFeatures()>:
c000eb08:	53                   	push   ebx
c000eb09:	83 ec 14             	sub    esp,0x14
c000eb0c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eb10:	68 39 ad 02 c0       	push   0xc002ad39
c000eb15:	e8 39 43 00 00       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c000eb1a:	83 c4 10             	add    esp,0x10
c000eb1d:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eb24:	0f 85 73 02 00 00    	jne    c000ed9d <Computer::displayFeatures()+0x295>
c000eb2a:	b8 36 ad 02 c0       	mov    eax,0xc002ad36
c000eb2f:	83 ec 08             	sub    esp,0x8
c000eb32:	50                   	push   eax
c000eb33:	68 4c ad 02 c0       	push   0xc002ad4c
c000eb38:	e8 16 43 00 00       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c000eb3d:	83 c4 10             	add    esp,0x10
c000eb40:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eb47:	0f 85 8c 02 00 00    	jne    c000edd9 <Computer::displayFeatures()+0x2d1>
c000eb4d:	b8 36 ad 02 c0       	mov    eax,0xc002ad36
c000eb52:	83 ec 08             	sub    esp,0x8
c000eb55:	50                   	push   eax
c000eb56:	68 5d ad 02 c0       	push   0xc002ad5d
c000eb5b:	e8 f3 42 00 00       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c000eb60:	83 c4 10             	add    esp,0x10
c000eb63:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000eb6a:	0f 85 5f 02 00 00    	jne    c000edcf <Computer::displayFeatures()+0x2c7>
c000eb70:	b8 36 ad 02 c0       	mov    eax,0xc002ad36
c000eb75:	83 ec 08             	sub    esp,0x8
c000eb78:	50                   	push   eax
c000eb79:	68 6e ad 02 c0       	push   0xc002ad6e
c000eb7e:	e8 d0 42 00 00       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c000eb83:	83 c4 10             	add    esp,0x10
c000eb86:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000eb8d:	0f 85 32 02 00 00    	jne    c000edc5 <Computer::displayFeatures()+0x2bd>
c000eb93:	b8 36 ad 02 c0       	mov    eax,0xc002ad36
c000eb98:	83 ec 08             	sub    esp,0x8
c000eb9b:	50                   	push   eax
c000eb9c:	68 7f ad 02 c0       	push   0xc002ad7f
c000eba1:	e8 ad 42 00 00       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c000eba6:	83 c4 10             	add    esp,0x10
c000eba9:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000ebb0:	0f 85 05 02 00 00    	jne    c000edbb <Computer::displayFeatures()+0x2b3>
c000ebb6:	b8 36 ad 02 c0       	mov    eax,0xc002ad36
c000ebbb:	83 ec 08             	sub    esp,0x8
c000ebbe:	50                   	push   eax
c000ebbf:	68 90 ad 02 c0       	push   0xc002ad90
c000ebc4:	e8 8a 42 00 00       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c000ebc9:	83 c4 10             	add    esp,0x10
c000ebcc:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000ebd3:	0f 85 d8 01 00 00    	jne    c000edb1 <Computer::displayFeatures()+0x2a9>
c000ebd9:	b8 36 ad 02 c0       	mov    eax,0xc002ad36
c000ebde:	83 ec 08             	sub    esp,0x8
c000ebe1:	50                   	push   eax
c000ebe2:	68 a1 ad 02 c0       	push   0xc002ada1
c000ebe7:	e8 67 42 00 00       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c000ebec:	83 c4 10             	add    esp,0x10
c000ebef:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000ebf6:	0f 85 ab 01 00 00    	jne    c000eda7 <Computer::displayFeatures()+0x29f>
c000ebfc:	b8 36 ad 02 c0       	mov    eax,0xc002ad36
c000ec01:	83 ec 08             	sub    esp,0x8
c000ec04:	50                   	push   eax
c000ec05:	68 b2 ad 02 c0       	push   0xc002adb2
c000ec0a:	e8 44 42 00 00       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c000ec0f:	83 c4 10             	add    esp,0x10
c000ec12:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ec19:	0f 88 1b 02 00 00    	js     c000ee3a <Computer::displayFeatures()+0x332>
c000ec1f:	b8 36 ad 02 c0       	mov    eax,0xc002ad36
c000ec24:	83 ec 08             	sub    esp,0x8
c000ec27:	50                   	push   eax
c000ec28:	68 c3 ad 02 c0       	push   0xc002adc3
c000ec2d:	e8 21 42 00 00       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c000ec32:	83 c4 10             	add    esp,0x10
c000ec35:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ec3c:	0f 85 a1 01 00 00    	jne    c000ede3 <Computer::displayFeatures()+0x2db>
c000ec42:	b8 36 ad 02 c0       	mov    eax,0xc002ad36
c000ec47:	83 ec 08             	sub    esp,0x8
c000ec4a:	50                   	push   eax
c000ec4b:	68 d4 ad 02 c0       	push   0xc002add4
c000ec50:	e8 fe 41 00 00       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c000ec55:	83 c4 10             	add    esp,0x10
c000ec58:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ec5f:	0f 85 cb 01 00 00    	jne    c000ee30 <Computer::displayFeatures()+0x328>
c000ec65:	b8 36 ad 02 c0       	mov    eax,0xc002ad36
c000ec6a:	83 ec 08             	sub    esp,0x8
c000ec6d:	50                   	push   eax
c000ec6e:	68 e5 ad 02 c0       	push   0xc002ade5
c000ec73:	e8 db 41 00 00       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c000ec78:	83 c4 10             	add    esp,0x10
c000ec7b:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ec82:	0f 85 9e 01 00 00    	jne    c000ee26 <Computer::displayFeatures()+0x31e>
c000ec88:	b8 36 ad 02 c0       	mov    eax,0xc002ad36
c000ec8d:	83 ec 08             	sub    esp,0x8
c000ec90:	50                   	push   eax
c000ec91:	68 f6 ad 02 c0       	push   0xc002adf6
c000ec96:	e8 b8 41 00 00       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c000ec9b:	83 c4 10             	add    esp,0x10
c000ec9e:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000eca5:	0f 85 71 01 00 00    	jne    c000ee1c <Computer::displayFeatures()+0x314>
c000ecab:	b8 36 ad 02 c0       	mov    eax,0xc002ad36
c000ecb0:	83 ec 08             	sub    esp,0x8
c000ecb3:	50                   	push   eax
c000ecb4:	68 07 ae 02 c0       	push   0xc002ae07
c000ecb9:	e8 95 41 00 00       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c000ecbe:	83 c4 10             	add    esp,0x10
c000ecc1:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ecc8:	0f 85 44 01 00 00    	jne    c000ee12 <Computer::displayFeatures()+0x30a>
c000ecce:	b8 36 ad 02 c0       	mov    eax,0xc002ad36
c000ecd3:	83 ec 08             	sub    esp,0x8
c000ecd6:	50                   	push   eax
c000ecd7:	68 18 ae 02 c0       	push   0xc002ae18
c000ecdc:	e8 72 41 00 00       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c000ece1:	83 c4 10             	add    esp,0x10
c000ece4:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000eceb:	0f 85 17 01 00 00    	jne    c000ee08 <Computer::displayFeatures()+0x300>
c000ecf1:	b8 36 ad 02 c0       	mov    eax,0xc002ad36
c000ecf6:	83 ec 08             	sub    esp,0x8
c000ecf9:	50                   	push   eax
c000ecfa:	68 29 ae 02 c0       	push   0xc002ae29
c000ecff:	e8 4f 41 00 00       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c000ed04:	83 c4 10             	add    esp,0x10
c000ed07:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000ed0e:	0f 85 ea 00 00 00    	jne    c000edfe <Computer::displayFeatures()+0x2f6>
c000ed14:	b8 36 ad 02 c0       	mov    eax,0xc002ad36
c000ed19:	83 ec 08             	sub    esp,0x8
c000ed1c:	50                   	push   eax
c000ed1d:	68 3a ae 02 c0       	push   0xc002ae3a
c000ed22:	e8 2c 41 00 00       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c000ed27:	83 c4 10             	add    esp,0x10
c000ed2a:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000ed31:	0f 88 0d 01 00 00    	js     c000ee44 <Computer::displayFeatures()+0x33c>
c000ed37:	b8 36 ad 02 c0       	mov    eax,0xc002ad36
c000ed3c:	83 ec 08             	sub    esp,0x8
c000ed3f:	50                   	push   eax
c000ed40:	68 4b ae 02 c0       	push   0xc002ae4b
c000ed45:	e8 09 41 00 00       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c000ed4a:	83 c4 10             	add    esp,0x10
c000ed4d:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ed54:	0f 85 9a 00 00 00    	jne    c000edf4 <Computer::displayFeatures()+0x2ec>
c000ed5a:	b8 36 ad 02 c0       	mov    eax,0xc002ad36
c000ed5f:	83 ec 08             	sub    esp,0x8
c000ed62:	50                   	push   eax
c000ed63:	68 5c ae 02 c0       	push   0xc002ae5c
c000ed68:	e8 e6 40 00 00       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c000ed6d:	83 c4 10             	add    esp,0x10
c000ed70:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000ed77:	75 74                	jne    c000eded <Computer::displayFeatures()+0x2e5>
c000ed79:	b8 36 ad 02 c0       	mov    eax,0xc002ad36
c000ed7e:	83 ec 08             	sub    esp,0x8
c000ed81:	50                   	push   eax
c000ed82:	68 6d ae 02 c0       	push   0xc002ae6d
c000ed87:	e8 c7 40 00 00       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c000ed8c:	c7 44 24 20 d4 c8 02 c0 	mov    DWORD PTR [esp+0x20],0xc002c8d4
c000ed94:	83 c4 18             	add    esp,0x18
c000ed97:	5b                   	pop    ebx
c000ed98:	e9 b6 40 00 00       	jmp    c0012e53 <Dbg::kprintf(char const*, ...)>
c000ed9d:	b8 32 ad 02 c0       	mov    eax,0xc002ad32
c000eda2:	e9 88 fd ff ff       	jmp    c000eb2f <Computer::displayFeatures()+0x27>
c000eda7:	b8 32 ad 02 c0       	mov    eax,0xc002ad32
c000edac:	e9 50 fe ff ff       	jmp    c000ec01 <Computer::displayFeatures()+0xf9>
c000edb1:	b8 32 ad 02 c0       	mov    eax,0xc002ad32
c000edb6:	e9 23 fe ff ff       	jmp    c000ebde <Computer::displayFeatures()+0xd6>
c000edbb:	b8 32 ad 02 c0       	mov    eax,0xc002ad32
c000edc0:	e9 f6 fd ff ff       	jmp    c000ebbb <Computer::displayFeatures()+0xb3>
c000edc5:	b8 32 ad 02 c0       	mov    eax,0xc002ad32
c000edca:	e9 c9 fd ff ff       	jmp    c000eb98 <Computer::displayFeatures()+0x90>
c000edcf:	b8 32 ad 02 c0       	mov    eax,0xc002ad32
c000edd4:	e9 9c fd ff ff       	jmp    c000eb75 <Computer::displayFeatures()+0x6d>
c000edd9:	b8 32 ad 02 c0       	mov    eax,0xc002ad32
c000edde:	e9 6f fd ff ff       	jmp    c000eb52 <Computer::displayFeatures()+0x4a>
c000ede3:	b8 32 ad 02 c0       	mov    eax,0xc002ad32
c000ede8:	e9 5a fe ff ff       	jmp    c000ec47 <Computer::displayFeatures()+0x13f>
c000eded:	b8 32 ad 02 c0       	mov    eax,0xc002ad32
c000edf2:	eb 8a                	jmp    c000ed7e <Computer::displayFeatures()+0x276>
c000edf4:	b8 32 ad 02 c0       	mov    eax,0xc002ad32
c000edf9:	e9 61 ff ff ff       	jmp    c000ed5f <Computer::displayFeatures()+0x257>
c000edfe:	b8 32 ad 02 c0       	mov    eax,0xc002ad32
c000ee03:	e9 11 ff ff ff       	jmp    c000ed19 <Computer::displayFeatures()+0x211>
c000ee08:	b8 32 ad 02 c0       	mov    eax,0xc002ad32
c000ee0d:	e9 e4 fe ff ff       	jmp    c000ecf6 <Computer::displayFeatures()+0x1ee>
c000ee12:	b8 32 ad 02 c0       	mov    eax,0xc002ad32
c000ee17:	e9 b7 fe ff ff       	jmp    c000ecd3 <Computer::displayFeatures()+0x1cb>
c000ee1c:	b8 32 ad 02 c0       	mov    eax,0xc002ad32
c000ee21:	e9 8a fe ff ff       	jmp    c000ecb0 <Computer::displayFeatures()+0x1a8>
c000ee26:	b8 32 ad 02 c0       	mov    eax,0xc002ad32
c000ee2b:	e9 5d fe ff ff       	jmp    c000ec8d <Computer::displayFeatures()+0x185>
c000ee30:	b8 32 ad 02 c0       	mov    eax,0xc002ad32
c000ee35:	e9 30 fe ff ff       	jmp    c000ec6a <Computer::displayFeatures()+0x162>
c000ee3a:	b8 32 ad 02 c0       	mov    eax,0xc002ad32
c000ee3f:	e9 e0 fd ff ff       	jmp    c000ec24 <Computer::displayFeatures()+0x11c>
c000ee44:	b8 32 ad 02 c0       	mov    eax,0xc002ad32
c000ee49:	e9 ee fe ff ff       	jmp    c000ed3c <Computer::displayFeatures()+0x234>

c000ee4e <Computer::rdmsr(unsigned int)>:
c000ee4e:	83 ec 0c             	sub    esp,0xc
c000ee51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee55:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee5c:	74 0a                	je     c000ee68 <Computer::rdmsr(unsigned int)+0x1a>
c000ee5e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee62:	0f 32                	rdmsr  
c000ee64:	83 c4 0c             	add    esp,0xc
c000ee67:	c3                   	ret    
c000ee68:	83 ec 0c             	sub    esp,0xc
c000ee6b:	68 7e ae 02 c0       	push   0xc002ae7e
c000ee70:	e8 78 ba 00 00       	call   c001a8ed <Krnl::panic(char const*)>
c000ee75:	83 c4 10             	add    esp,0x10
c000ee78:	eb e4                	jmp    c000ee5e <Computer::rdmsr(unsigned int)+0x10>

c000ee7a <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ee7a:	57                   	push   edi
c000ee7b:	56                   	push   esi
c000ee7c:	52                   	push   edx
c000ee7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee81:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ee85:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ee89:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee90:	74 0e                	je     c000eea0 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ee92:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee96:	89 f0                	mov    eax,esi
c000ee98:	89 fa                	mov    edx,edi
c000ee9a:	0f 30                	wrmsr  
c000ee9c:	58                   	pop    eax
c000ee9d:	5e                   	pop    esi
c000ee9e:	5f                   	pop    edi
c000ee9f:	c3                   	ret    
c000eea0:	83 ec 0c             	sub    esp,0xc
c000eea3:	68 84 ae 02 c0       	push   0xc002ae84
c000eea8:	e8 40 ba 00 00       	call   c001a8ed <Krnl::panic(char const*)>
c000eead:	83 c4 10             	add    esp,0x10
c000eeb0:	eb e0                	jmp    c000ee92 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000eeb2 <Computer::nmiEnabled()>:
c000eeb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eeb6:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000eebc:	c3                   	ret    
c000eebd:	90                   	nop

c000eebe <Computer::readCMOS(unsigned char)>:
c000eebe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eec2:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000eec9:	19 c0                	sbb    eax,eax
c000eecb:	83 e0 80             	and    eax,0xffffff80
c000eece:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000eed2:	e6 70                	out    0x70,al
c000eed4:	e4 71                	in     al,0x71
c000eed6:	c3                   	ret    
c000eed7:	90                   	nop

c000eed8 <Computer::enableNMI(bool)>:
c000eed8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eedc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eee0:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000eee6:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000eeee:	eb ce                	jmp    c000eebe <Computer::readCMOS(unsigned char)>

c000eef0 <Computer::open(int, int, void*)>:
c000eef0:	56                   	push   esi
c000eef1:	53                   	push   ebx
c000eef2:	83 ec 10             	sub    esp,0x10
c000eef5:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eef9:	f6 05 a0 f2 02 c0 04 	test   BYTE PTR ds:0xc002f2a0,0x4
c000ef00:	68 68 12 00 00       	push   0x1268
c000ef05:	0f 94 05 c4 e1 02 c0 	sete   BYTE PTR ds:0xc002e1c4
c000ef0c:	e8 97 09 00 00       	call   c000f8a8 <malloc>
c000ef11:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef14:	89 c6                	mov    esi,eax
c000ef16:	e8 c7 93 00 00       	call   c00182e2 <ACPI::ACPI()>
c000ef1b:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000ef21:	58                   	pop    eax
c000ef22:	5a                   	pop    edx
c000ef23:	56                   	push   esi
c000ef24:	53                   	push   ebx
c000ef25:	e8 4a 53 00 00       	call   c0014274 <Device::addChild(Device*)>
c000ef2a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef2d:	e8 cc f9 ff ff       	call   c000e8fe <Computer::detectFeatures()>
c000ef32:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef35:	e8 ce fb ff ff       	call   c000eb08 <Computer::displayFeatures()>
c000ef3a:	59                   	pop    ecx
c000ef3b:	5e                   	pop    esi
c000ef3c:	6a 01                	push   0x1
c000ef3e:	53                   	push   ebx
c000ef3f:	e8 94 ff ff ff       	call   c000eed8 <Computer::enableNMI(bool)>
c000ef44:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000ef4b:	e8 58 09 00 00       	call   c000f8a8 <malloc>
c000ef50:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef53:	89 c6                	mov    esi,eax
c000ef55:	e8 6e a1 00 00       	call   c00190c8 <CPU::CPU()>
c000ef5a:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000ef60:	58                   	pop    eax
c000ef61:	5a                   	pop    edx
c000ef62:	56                   	push   esi
c000ef63:	53                   	push   ebx
c000ef64:	e8 0b 53 00 00       	call   c0014274 <Device::addChild(Device*)>
c000ef69:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef6f:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef71:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef75:	6a 00                	push   0x0
c000ef77:	6a 00                	push   0x0
c000ef79:	50                   	push   eax
c000ef7a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef7d:	83 c4 20             	add    esp,0x20
c000ef80:	e8 83 58 00 00       	call   c0014808 <setupFPU()>
c000ef85:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef8b:	85 c0                	test   eax,eax
c000ef8d:	74 1f                	je     c000efae <Computer::open(int, int, void*)+0xbe>
c000ef8f:	83 ec 08             	sub    esp,0x8
c000ef92:	50                   	push   eax
c000ef93:	53                   	push   ebx
c000ef94:	e8 db 52 00 00       	call   c0014274 <Device::addChild(Device*)>
c000ef99:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef9f:	8b 10                	mov    edx,DWORD PTR [eax]
c000efa1:	6a 00                	push   0x0
c000efa3:	6a 00                	push   0x0
c000efa5:	6a 00                	push   0x0
c000efa7:	50                   	push   eax
c000efa8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000efab:	83 c4 20             	add    esp,0x20
c000efae:	83 ec 0c             	sub    esp,0xc
c000efb1:	68 b0 e6 00 c0       	push   0xc000e6b0
c000efb6:	e8 c3 f5 00 00       	call   c001e57e <setupMultitasking(void (*)())>
c000efbb:	83 c4 14             	add    esp,0x14
c000efbe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000efc3:	5b                   	pop    ebx
c000efc4:	5e                   	pop    esi
c000efc5:	c3                   	ret    

c000efc6 <Computer::disableNMI()>:
c000efc6:	6a 00                	push   0x0
c000efc8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000efcc:	e8 07 ff ff ff       	call   c000eed8 <Computer::enableNMI(bool)>
c000efd1:	58                   	pop    eax
c000efd2:	5a                   	pop    edx
c000efd3:	c3                   	ret    

c000efd4 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000efd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000efd8:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000efdf:	19 c0                	sbb    eax,eax
c000efe1:	83 e0 80             	and    eax,0xffffff80
c000efe4:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000efe8:	e6 70                	out    0x70,al
c000efea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efee:	e6 71                	out    0x71,al
c000eff0:	c3                   	ret    
c000eff1:	90                   	nop

c000eff2 <Computer::handleNMI()>:
c000eff2:	56                   	push   esi
c000eff3:	53                   	push   ebx
c000eff4:	83 ec 10             	sub    esp,0x10
c000eff7:	e4 92                	in     al,0x92
c000eff9:	89 c6                	mov    esi,eax
c000effb:	e4 61                	in     al,0x61
c000effd:	68 8a ae 02 c0       	push   0xc002ae8a
c000f002:	88 c3                	mov    bl,al
c000f004:	e8 4a 3e 00 00       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c000f009:	83 c4 10             	add    esp,0x10
c000f00c:	83 e6 10             	and    esi,0x10
c000f00f:	75 0d                	jne    c000f01e <Computer::handleNMI()+0x2c>
c000f011:	f6 c3 40             	test   bl,0x40
c000f014:	75 1d                	jne    c000f033 <Computer::handleNMI()+0x41>
c000f016:	84 db                	test   bl,bl
c000f018:	78 2d                	js     c000f047 <Computer::handleNMI()+0x55>
c000f01a:	58                   	pop    eax
c000f01b:	5b                   	pop    ebx
c000f01c:	5e                   	pop    esi
c000f01d:	c3                   	ret    
c000f01e:	83 ec 0c             	sub    esp,0xc
c000f021:	68 9b ae 02 c0       	push   0xc002ae9b
c000f026:	e8 c2 b8 00 00       	call   c001a8ed <Krnl::panic(char const*)>
c000f02b:	83 c4 10             	add    esp,0x10
c000f02e:	f6 c3 40             	test   bl,0x40
c000f031:	74 e3                	je     c000f016 <Computer::handleNMI()+0x24>
c000f033:	83 ec 0c             	sub    esp,0xc
c000f036:	68 a8 ae 02 c0       	push   0xc002aea8
c000f03b:	e8 ad b8 00 00       	call   c001a8ed <Krnl::panic(char const*)>
c000f040:	83 c4 10             	add    esp,0x10
c000f043:	84 db                	test   bl,bl
c000f045:	79 d3                	jns    c000f01a <Computer::handleNMI()+0x28>
c000f047:	c7 44 24 10 b2 ae 02 c0 	mov    DWORD PTR [esp+0x10],0xc002aeb2
c000f04f:	5a                   	pop    edx
c000f050:	5b                   	pop    ebx
c000f051:	5e                   	pop    esi
c000f052:	e9 96 b8 00 00       	jmp    c001a8ed <Krnl::panic(char const*)>
c000f057:	90                   	nop

c000f058 <Computer::setDiskActivityLight(int, bool)>:
c000f058:	56                   	push   esi
c000f059:	53                   	push   ebx
c000f05a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f05e:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f063:	77 1b                	ja     c000f080 <Computer::setDiskActivityLight(int, bool)+0x28>
c000f065:	e4 92                	in     al,0x92
c000f067:	bb 40 00 00 00       	mov    ebx,0x40
c000f06c:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f070:	89 da                	mov    edx,ebx
c000f072:	d3 e2                	shl    edx,cl
c000f074:	89 f1                	mov    ecx,esi
c000f076:	f7 d2                	not    edx
c000f078:	d3 e3                	shl    ebx,cl
c000f07a:	21 d0                	and    eax,edx
c000f07c:	09 d8                	or     eax,ebx
c000f07e:	e6 92                	out    0x92,al
c000f080:	5b                   	pop    ebx
c000f081:	5e                   	pop    esi
c000f082:	c3                   	ret    
c000f083:	90                   	nop

c000f084 <GDTEntry::setBase(unsigned int)>:
c000f084:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f088:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f08c:	89 c1                	mov    ecx,eax
c000f08e:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f092:	c1 e9 10             	shr    ecx,0x10
c000f095:	c1 e8 18             	shr    eax,0x18
c000f098:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f09b:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f09e:	c3                   	ret    
c000f09f:	90                   	nop

c000f0a0 <GDTEntry::setLimit(unsigned int)>:
c000f0a0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f0a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0a8:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f0ab:	66 89 01             	mov    WORD PTR [ecx],ax
c000f0ae:	83 e2 f0             	and    edx,0xfffffff0
c000f0b1:	c1 e8 10             	shr    eax,0x10
c000f0b4:	83 e0 0f             	and    eax,0xf
c000f0b7:	09 d0                	or     eax,edx
c000f0b9:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f0bc:	c3                   	ret    
c000f0bd:	90                   	nop

c000f0be <GDT::GDT()>:
c000f0be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0c2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f0c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0cc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f0d2:	90                   	nop
c000f0d3:	c3                   	ret    

c000f0d4 <GDT::addEntry(GDTEntry)>:
c000f0d4:	53                   	push   ebx
c000f0d5:	83 ec 0c             	sub    esp,0xc
c000f0d8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f0dc:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f0de:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f0e5:	52                   	push   edx
c000f0e6:	50                   	push   eax
c000f0e7:	68 ec ae 02 c0       	push   0xc002aeec
c000f0ec:	e8 62 3d 00 00       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c000f0f1:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f0f3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f0f7:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f0fb:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f0ff:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f103:	8d 50 01             	lea    edx,[eax+0x1]
c000f106:	c1 e0 03             	shl    eax,0x3
c000f109:	89 13                	mov    DWORD PTR [ebx],edx
c000f10b:	83 c4 18             	add    esp,0x18
c000f10e:	5b                   	pop    ebx
c000f10f:	c3                   	ret    

c000f110 <GDT::getNumberOfEntries()>:
c000f110:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f114:	8b 00                	mov    eax,DWORD PTR [eax]
c000f116:	c3                   	ret    
c000f117:	90                   	nop

c000f118 <GDT::flush()>:
c000f118:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f11c:	8b 10                	mov    edx,DWORD PTR [eax]
c000f11e:	83 c0 04             	add    eax,0x4
c000f121:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f128:	a3 92 f2 02 c0       	mov    ds:0xc002f292,eax
c000f12d:	66 89 15 90 f2 02 c0 	mov    WORD PTR ds:0xc002f290,dx
c000f134:	e9 17 13 ff ff       	jmp    c0000450 <loadGDT>
c000f139:	90                   	nop

c000f13a <GDT::setup()>:
c000f13a:	55                   	push   ebp
c000f13b:	57                   	push   edi
c000f13c:	56                   	push   esi
c000f13d:	53                   	push   ebx
c000f13e:	83 ec 3c             	sub    esp,0x3c
c000f141:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f145:	6a 00                	push   0x0
c000f147:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f14b:	53                   	push   ebx
c000f14c:	e8 33 ff ff ff       	call   c000f084 <GDTEntry::setBase(unsigned int)>
c000f151:	6a 00                	push   0x0
c000f153:	53                   	push   ebx
c000f154:	e8 47 ff ff ff       	call   c000f0a0 <GDTEntry::setLimit(unsigned int)>
c000f159:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f161:	6a 00                	push   0x0
c000f163:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f167:	53                   	push   ebx
c000f168:	e8 17 ff ff ff       	call   c000f084 <GDTEntry::setBase(unsigned int)>
c000f16d:	68 ff ff ff 00       	push   0xffffff
c000f172:	53                   	push   ebx
c000f173:	e8 28 ff ff ff       	call   c000f0a0 <GDTEntry::setLimit(unsigned int)>
c000f178:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f17c:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f181:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f186:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f18a:	83 c4 20             	add    esp,0x20
c000f18d:	6a 00                	push   0x0
c000f18f:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f193:	53                   	push   ebx
c000f194:	e8 eb fe ff ff       	call   c000f084 <GDTEntry::setBase(unsigned int)>
c000f199:	68 ff ff ff 00       	push   0xffffff
c000f19e:	53                   	push   ebx
c000f19f:	e8 fc fe ff ff       	call   c000f0a0 <GDTEntry::setLimit(unsigned int)>
c000f1a4:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f1a8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f1ac:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f1b0:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f1b4:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f1b8:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f1bd:	0d 00 92 c0 00       	or     eax,0xc09200
c000f1c2:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f1c6:	89 d8                	mov    eax,ebx
c000f1c8:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f1cc:	80 cc 60             	or     ah,0x60
c000f1cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f1d3:	83 c4 0c             	add    esp,0xc
c000f1d6:	89 f8                	mov    eax,edi
c000f1d8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f1dc:	80 cc 60             	or     ah,0x60
c000f1df:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f1e3:	89 c7                	mov    edi,eax
c000f1e5:	55                   	push   ebp
c000f1e6:	e8 e9 fe ff ff       	call   c000f0d4 <GDT::addEntry(GDTEntry)>
c000f1eb:	83 c4 0c             	add    esp,0xc
c000f1ee:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f1f2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f1f6:	55                   	push   ebp
c000f1f7:	e8 d8 fe ff ff       	call   c000f0d4 <GDT::addEntry(GDTEntry)>
c000f1fc:	83 c4 0c             	add    esp,0xc
c000f1ff:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f203:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f207:	55                   	push   ebp
c000f208:	e8 c7 fe ff ff       	call   c000f0d4 <GDT::addEntry(GDTEntry)>
c000f20d:	83 c4 0c             	add    esp,0xc
c000f210:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f214:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f218:	53                   	push   ebx
c000f219:	51                   	push   ecx
c000f21a:	55                   	push   ebp
c000f21b:	e8 b4 fe ff ff       	call   c000f0d4 <GDT::addEntry(GDTEntry)>
c000f220:	83 c4 0c             	add    esp,0xc
c000f223:	57                   	push   edi
c000f224:	56                   	push   esi
c000f225:	55                   	push   ebp
c000f226:	e8 a9 fe ff ff       	call   c000f0d4 <GDT::addEntry(GDTEntry)>
c000f22b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f22e:	e8 e5 fe ff ff       	call   c000f118 <GDT::flush()>
c000f233:	83 c4 4c             	add    esp,0x4c
c000f236:	5b                   	pop    ebx
c000f237:	5e                   	pop    esi
c000f238:	5f                   	pop    edi
c000f239:	5d                   	pop    ebp
c000f23a:	c3                   	ret    

c000f23b <idleFunction(void*)>:
c000f23b:	53                   	push   ebx
c000f23c:	83 ec 08             	sub    esp,0x8
c000f23f:	a1 c8 27 03 c0       	mov    eax,ds:0xc00327c8
c000f244:	48                   	dec    eax
c000f245:	a3 c8 27 03 c0       	mov    ds:0xc00327c8,eax
c000f24a:	75 01                	jne    c000f24d <idleFunction(void*)+0x12>
c000f24c:	fb                   	sti    
c000f24d:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c000f252:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f258:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f25f:	74 3c                	je     c000f29d <idleFunction(void*)+0x62>
c000f261:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f268:	74 33                	je     c000f29d <idleFunction(void*)+0x62>
c000f26a:	31 db                	xor    ebx,ebx
c000f26c:	52                   	push   edx
c000f26d:	52                   	push   edx
c000f26e:	68 e1 00 00 00       	push   0xe1
c000f273:	50                   	push   eax
c000f274:	e8 d5 fb ff ff       	call   c000ee4e <Computer::rdmsr(unsigned int)>
c000f279:	53                   	push   ebx
c000f27a:	83 e0 02             	and    eax,0x2
c000f27d:	50                   	push   eax
c000f27e:	68 e1 00 00 00       	push   0xe1
c000f283:	ff 35 88 f2 02 c0    	push   DWORD PTR ds:0xc002f288
c000f289:	e8 ec fb ff ff       	call   c000ee7a <Computer::wrmsr(unsigned int, unsigned long long)>
c000f28e:	83 c4 20             	add    esp,0x20
c000f291:	e8 e9 0f ff ff       	call   c000027f <doTPAUSE>
c000f296:	e8 55 a0 01 00       	call   c00292f0 <idleCommon()>
c000f29b:	eb f4                	jmp    c000f291 <idleFunction(void*)+0x56>
c000f29d:	fb                   	sti    
c000f29e:	f4                   	hlt    
c000f29f:	e8 4c a0 01 00       	call   c00292f0 <idleCommon()>
c000f2a4:	eb f7                	jmp    c000f29d <idleFunction(void*)+0x62>

c000f2a6 <IDTEntry::IDTEntry(bool)>:
c000f2a6:	83 ec 04             	sub    esp,0x4
c000f2a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f2ad:	88 04 24             	mov    BYTE PTR [esp],al
c000f2b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2b4:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f2ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2be:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f2c2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2c6:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2c9:	83 e2 f0             	and    edx,0xfffffff0
c000f2cc:	83 ca 0e             	or     edx,0xe
c000f2cf:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2d6:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2d9:	83 e2 ef             	and    edx,0xffffffef
c000f2dc:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2df:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f2e3:	74 04                	je     c000f2e9 <IDTEntry::IDTEntry(bool)+0x43>
c000f2e5:	b2 03                	mov    dl,0x3
c000f2e7:	eb 02                	jmp    c000f2eb <IDTEntry::IDTEntry(bool)+0x45>
c000f2e9:	b2 00                	mov    dl,0x0
c000f2eb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ef:	83 e2 03             	and    edx,0x3
c000f2f2:	88 d1                	mov    cl,dl
c000f2f4:	c1 e1 05             	shl    ecx,0x5
c000f2f7:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2fa:	83 e2 9f             	and    edx,0xffffff9f
c000f2fd:	09 ca                	or     edx,ecx
c000f2ff:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f302:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f306:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f309:	83 ca 80             	or     edx,0xffffff80
c000f30c:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f30f:	90                   	nop
c000f310:	83 c4 04             	add    esp,0x4
c000f313:	c3                   	ret    

c000f314 <IDTEntry::setOffset(unsigned int)>:
c000f314:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f318:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f31c:	66 89 02             	mov    WORD PTR [edx],ax
c000f31f:	c1 e8 10             	shr    eax,0x10
c000f322:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f326:	c3                   	ret    
c000f327:	90                   	nop

c000f328 <IDT::IDT()>:
c000f328:	90                   	nop
c000f329:	c3                   	ret    

c000f32a <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f32a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f32e:	83 c0 30             	add    eax,0x30
c000f331:	c3                   	ret    

c000f332 <IDT::addEntry(IDTEntry, int)>:
c000f332:	53                   	push   ebx
c000f333:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f337:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f33b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f33f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f343:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f346:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f34a:	5b                   	pop    ebx
c000f34b:	c3                   	ret    

c000f34c <IDT::addEntry(int, void (*)(), bool)>:
c000f34c:	53                   	push   ebx
c000f34d:	83 ec 10             	sub    esp,0x10
c000f350:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f355:	50                   	push   eax
c000f356:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f35a:	53                   	push   ebx
c000f35b:	e8 46 ff ff ff       	call   c000f2a6 <IDTEntry::IDTEntry(bool)>
c000f360:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f364:	53                   	push   ebx
c000f365:	e8 aa ff ff ff       	call   c000f314 <IDTEntry::setOffset(unsigned int)>
c000f36a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f36e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f372:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f376:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f37a:	e8 b3 ff ff ff       	call   c000f332 <IDT::addEntry(IDTEntry, int)>
c000f37f:	83 c4 30             	add    esp,0x30
c000f382:	5b                   	pop    ebx
c000f383:	c3                   	ret    

c000f384 <IDT::flush()>:
c000f384:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f388:	66 c7 05 98 f2 02 c0 ff 07 	mov    WORD PTR ds:0xc002f298,0x7ff
c000f391:	a3 9a f2 02 c0       	mov    ds:0xc002f29a,eax
c000f396:	0f 01 1d 98 f2 02 c0 	lidtd  ds:0xc002f298
c000f39d:	c3                   	ret    

c000f39e <IDT::setup()>:
c000f39e:	57                   	push   edi
c000f39f:	56                   	push   esi
c000f3a0:	53                   	push   ebx
c000f3a1:	83 ec 10             	sub    esp,0x10
c000f3a4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f3a8:	6a 00                	push   0x0
c000f3aa:	68 70 04 00 c0       	push   0xc0000470
c000f3af:	6a 00                	push   0x0
c000f3b1:	53                   	push   ebx
c000f3b2:	e8 95 ff ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f3b7:	6a 00                	push   0x0
c000f3b9:	68 80 04 00 c0       	push   0xc0000480
c000f3be:	6a 01                	push   0x1
c000f3c0:	53                   	push   ebx
c000f3c1:	e8 86 ff ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f3c6:	83 c4 20             	add    esp,0x20
c000f3c9:	6a 00                	push   0x0
c000f3cb:	68 8a 04 00 c0       	push   0xc000048a
c000f3d0:	6a 02                	push   0x2
c000f3d2:	53                   	push   ebx
c000f3d3:	e8 74 ff ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f3d8:	6a 00                	push   0x0
c000f3da:	68 94 04 00 c0       	push   0xc0000494
c000f3df:	6a 03                	push   0x3
c000f3e1:	53                   	push   ebx
c000f3e2:	e8 65 ff ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f3e7:	83 c4 20             	add    esp,0x20
c000f3ea:	6a 00                	push   0x0
c000f3ec:	68 9e 04 00 c0       	push   0xc000049e
c000f3f1:	6a 04                	push   0x4
c000f3f3:	53                   	push   ebx
c000f3f4:	e8 53 ff ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f3f9:	6a 00                	push   0x0
c000f3fb:	68 a8 04 00 c0       	push   0xc00004a8
c000f400:	6a 05                	push   0x5
c000f402:	53                   	push   ebx
c000f403:	e8 44 ff ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f408:	83 c4 20             	add    esp,0x20
c000f40b:	6a 00                	push   0x0
c000f40d:	68 b2 04 00 c0       	push   0xc00004b2
c000f412:	6a 06                	push   0x6
c000f414:	53                   	push   ebx
c000f415:	e8 32 ff ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f41a:	6a 00                	push   0x0
c000f41c:	68 bc 04 00 c0       	push   0xc00004bc
c000f421:	6a 07                	push   0x7
c000f423:	53                   	push   ebx
c000f424:	e8 23 ff ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f429:	83 c4 20             	add    esp,0x20
c000f42c:	6a 00                	push   0x0
c000f42e:	68 c6 04 00 c0       	push   0xc00004c6
c000f433:	6a 08                	push   0x8
c000f435:	53                   	push   ebx
c000f436:	e8 11 ff ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f43b:	6a 00                	push   0x0
c000f43d:	68 ce 04 00 c0       	push   0xc00004ce
c000f442:	6a 09                	push   0x9
c000f444:	53                   	push   ebx
c000f445:	e8 02 ff ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f44a:	83 c4 20             	add    esp,0x20
c000f44d:	6a 00                	push   0x0
c000f44f:	68 d8 04 00 c0       	push   0xc00004d8
c000f454:	6a 0a                	push   0xa
c000f456:	53                   	push   ebx
c000f457:	e8 f0 fe ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f45c:	6a 00                	push   0x0
c000f45e:	68 e0 04 00 c0       	push   0xc00004e0
c000f463:	6a 0b                	push   0xb
c000f465:	53                   	push   ebx
c000f466:	e8 e1 fe ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f46b:	83 c4 20             	add    esp,0x20
c000f46e:	6a 00                	push   0x0
c000f470:	68 e8 04 00 c0       	push   0xc00004e8
c000f475:	6a 0c                	push   0xc
c000f477:	53                   	push   ebx
c000f478:	e8 cf fe ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f47d:	6a 00                	push   0x0
c000f47f:	68 f0 04 00 c0       	push   0xc00004f0
c000f484:	6a 0d                	push   0xd
c000f486:	53                   	push   ebx
c000f487:	e8 c0 fe ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f48c:	83 c4 20             	add    esp,0x20
c000f48f:	6a 00                	push   0x0
c000f491:	68 f8 04 00 c0       	push   0xc00004f8
c000f496:	6a 0e                	push   0xe
c000f498:	53                   	push   ebx
c000f499:	e8 ae fe ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f49e:	6a 00                	push   0x0
c000f4a0:	68 00 05 00 c0       	push   0xc0000500
c000f4a5:	6a 0f                	push   0xf
c000f4a7:	53                   	push   ebx
c000f4a8:	e8 9f fe ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f4ad:	83 c4 20             	add    esp,0x20
c000f4b0:	6a 00                	push   0x0
c000f4b2:	68 0a 05 00 c0       	push   0xc000050a
c000f4b7:	6a 10                	push   0x10
c000f4b9:	53                   	push   ebx
c000f4ba:	e8 8d fe ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f4bf:	6a 00                	push   0x0
c000f4c1:	68 14 05 00 c0       	push   0xc0000514
c000f4c6:	6a 11                	push   0x11
c000f4c8:	53                   	push   ebx
c000f4c9:	e8 7e fe ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f4ce:	83 c4 20             	add    esp,0x20
c000f4d1:	6a 00                	push   0x0
c000f4d3:	68 1e 05 00 c0       	push   0xc000051e
c000f4d8:	6a 12                	push   0x12
c000f4da:	53                   	push   ebx
c000f4db:	e8 6c fe ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f4e0:	6a 01                	push   0x1
c000f4e2:	68 b8 05 00 c0       	push   0xc00005b8
c000f4e7:	6a 60                	push   0x60
c000f4e9:	53                   	push   ebx
c000f4ea:	e8 5d fe ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f4ef:	83 c4 20             	add    esp,0x20
c000f4f2:	6a 00                	push   0x0
c000f4f4:	68 bf 05 00 c0       	push   0xc00005bf
c000f4f9:	6a 20                	push   0x20
c000f4fb:	53                   	push   ebx
c000f4fc:	e8 4b fe ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f501:	6a 00                	push   0x0
c000f503:	68 aa 05 00 c0       	push   0xc00005aa
c000f508:	6a 21                	push   0x21
c000f50a:	53                   	push   ebx
c000f50b:	e8 3c fe ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f510:	83 c4 20             	add    esp,0x20
c000f513:	6a 00                	push   0x0
c000f515:	68 b1 05 00 c0       	push   0xc00005b1
c000f51a:	6a 22                	push   0x22
c000f51c:	53                   	push   ebx
c000f51d:	e8 2a fe ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f522:	6a 00                	push   0x0
c000f524:	68 28 05 00 c0       	push   0xc0000528
c000f529:	6a 23                	push   0x23
c000f52b:	53                   	push   ebx
c000f52c:	e8 1b fe ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f531:	83 c4 20             	add    esp,0x20
c000f534:	6a 00                	push   0x0
c000f536:	68 32 05 00 c0       	push   0xc0000532
c000f53b:	6a 24                	push   0x24
c000f53d:	53                   	push   ebx
c000f53e:	e8 09 fe ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f543:	6a 00                	push   0x0
c000f545:	68 3c 05 00 c0       	push   0xc000053c
c000f54a:	6a 25                	push   0x25
c000f54c:	53                   	push   ebx
c000f54d:	e8 fa fd ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f552:	83 c4 20             	add    esp,0x20
c000f555:	6a 00                	push   0x0
c000f557:	68 46 05 00 c0       	push   0xc0000546
c000f55c:	6a 26                	push   0x26
c000f55e:	53                   	push   ebx
c000f55f:	e8 e8 fd ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f564:	6a 00                	push   0x0
c000f566:	68 50 05 00 c0       	push   0xc0000550
c000f56b:	6a 27                	push   0x27
c000f56d:	53                   	push   ebx
c000f56e:	e8 d9 fd ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f573:	83 c4 20             	add    esp,0x20
c000f576:	6a 00                	push   0x0
c000f578:	68 5a 05 00 c0       	push   0xc000055a
c000f57d:	6a 28                	push   0x28
c000f57f:	53                   	push   ebx
c000f580:	e8 c7 fd ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f585:	6a 00                	push   0x0
c000f587:	68 64 05 00 c0       	push   0xc0000564
c000f58c:	6a 29                	push   0x29
c000f58e:	53                   	push   ebx
c000f58f:	e8 b8 fd ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f594:	83 c4 20             	add    esp,0x20
c000f597:	6a 00                	push   0x0
c000f599:	68 6e 05 00 c0       	push   0xc000056e
c000f59e:	6a 2a                	push   0x2a
c000f5a0:	53                   	push   ebx
c000f5a1:	e8 a6 fd ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f5a6:	6a 00                	push   0x0
c000f5a8:	68 78 05 00 c0       	push   0xc0000578
c000f5ad:	6a 2b                	push   0x2b
c000f5af:	53                   	push   ebx
c000f5b0:	e8 97 fd ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f5b5:	83 c4 20             	add    esp,0x20
c000f5b8:	6a 00                	push   0x0
c000f5ba:	68 82 05 00 c0       	push   0xc0000582
c000f5bf:	6a 2c                	push   0x2c
c000f5c1:	53                   	push   ebx
c000f5c2:	e8 85 fd ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f5c7:	6a 00                	push   0x0
c000f5c9:	68 8c 05 00 c0       	push   0xc000058c
c000f5ce:	6a 2d                	push   0x2d
c000f5d0:	53                   	push   ebx
c000f5d1:	e8 76 fd ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f5d6:	83 c4 20             	add    esp,0x20
c000f5d9:	6a 00                	push   0x0
c000f5db:	68 96 05 00 c0       	push   0xc0000596
c000f5e0:	6a 2e                	push   0x2e
c000f5e2:	53                   	push   ebx
c000f5e3:	e8 64 fd ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f5e8:	6a 00                	push   0x0
c000f5ea:	68 a0 05 00 c0       	push   0xc00005a0
c000f5ef:	6a 2f                	push   0x2f
c000f5f1:	53                   	push   ebx
c000f5f2:	e8 55 fd ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f5f7:	83 c4 20             	add    esp,0x20
c000f5fa:	6a 00                	push   0x0
c000f5fc:	68 f6 05 00 c0       	push   0xc00005f6
c000f601:	6a 30                	push   0x30
c000f603:	53                   	push   ebx
c000f604:	e8 43 fd ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f609:	6a 00                	push   0x0
c000f60b:	68 00 06 00 c0       	push   0xc0000600
c000f610:	6a 31                	push   0x31
c000f612:	53                   	push   ebx
c000f613:	e8 34 fd ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f618:	83 c4 20             	add    esp,0x20
c000f61b:	6a 00                	push   0x0
c000f61d:	68 0a 06 00 c0       	push   0xc000060a
c000f622:	6a 32                	push   0x32
c000f624:	53                   	push   ebx
c000f625:	e8 22 fd ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f62a:	6a 00                	push   0x0
c000f62c:	68 14 06 00 c0       	push   0xc0000614
c000f631:	6a 33                	push   0x33
c000f633:	53                   	push   ebx
c000f634:	e8 13 fd ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f639:	83 c4 20             	add    esp,0x20
c000f63c:	6a 00                	push   0x0
c000f63e:	68 1e 06 00 c0       	push   0xc000061e
c000f643:	6a 34                	push   0x34
c000f645:	53                   	push   ebx
c000f646:	e8 01 fd ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f64b:	6a 00                	push   0x0
c000f64d:	68 28 06 00 c0       	push   0xc0000628
c000f652:	6a 35                	push   0x35
c000f654:	53                   	push   ebx
c000f655:	e8 f2 fc ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f65a:	83 c4 20             	add    esp,0x20
c000f65d:	6a 00                	push   0x0
c000f65f:	68 32 06 00 c0       	push   0xc0000632
c000f664:	6a 36                	push   0x36
c000f666:	53                   	push   ebx
c000f667:	e8 e0 fc ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f66c:	6a 00                	push   0x0
c000f66e:	68 3c 06 00 c0       	push   0xc000063c
c000f673:	6a 37                	push   0x37
c000f675:	53                   	push   ebx
c000f676:	e8 d1 fc ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f67b:	83 c4 1c             	add    esp,0x1c
c000f67e:	6a 03                	push   0x3
c000f680:	6a 02                	push   0x2
c000f682:	ff 35 10 f4 02 c0    	push   DWORD PTR ds:0xc002f410
c000f688:	e8 f9 2c 00 00       	call   c0012386 <VAS::allocatePages(int, int)>
c000f68d:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f694:	89 c6                	mov    esi,eax
c000f696:	e8 0d 02 00 00       	call   c000f8a8 <malloc>
c000f69b:	81 c6 00 20 00 00    	add    esi,0x2000
c000f6a1:	89 04 24             	mov    DWORD PTR [esp],eax
c000f6a4:	89 c7                	mov    edi,eax
c000f6a6:	e8 d3 1c 00 00       	call   c001137e <TSS::TSS()>
c000f6ab:	83 c4 0c             	add    esp,0xc
c000f6ae:	68 c6 04 00 c0       	push   0xc00004c6
c000f6b3:	56                   	push   esi
c000f6b4:	57                   	push   edi
c000f6b5:	e8 04 1d 00 00       	call   c00113be <TSS::setup(unsigned long, unsigned long)>
c000f6ba:	89 c6                	mov    esi,eax
c000f6bc:	58                   	pop    eax
c000f6bd:	5a                   	pop    edx
c000f6be:	6a 00                	push   0x0
c000f6c0:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f6c4:	50                   	push   eax
c000f6c5:	e8 dc fb ff ff       	call   c000f2a6 <IDTEntry::IDTEntry(bool)>
c000f6ca:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f6ce:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f6d3:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f6da:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f6e0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f6e4:	80 ce 05             	or     dh,0x5
c000f6e7:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f6ea:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f6ee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f6f2:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f6f5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f6f8:	e8 87 fc ff ff       	call   c000f384 <IDT::flush()>
c000f6fd:	83 c4 20             	add    esp,0x20
c000f700:	5b                   	pop    ebx
c000f701:	5e                   	pop    esi
c000f702:	5f                   	pop    edi
c000f703:	c3                   	ret    

c000f704 <sbrk>:
c000f704:	55                   	push   ebp
c000f705:	57                   	push   edi
c000f706:	56                   	push   esi
c000f707:	53                   	push   ebx
c000f708:	83 ec 1c             	sub    esp,0x1c
c000f70b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f70f:	85 c0                	test   eax,eax
c000f711:	74 3e                	je     c000f751 <sbrk+0x4d>
c000f713:	78 43                	js     c000f758 <sbrk+0x54>
c000f715:	8b 15 88 f2 02 c0    	mov    edx,DWORD PTR ds:0xc002f288
c000f71b:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f721:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f727:	83 e2 01             	and    edx,0x1
c000f72a:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f72e:	8b 0d ac e1 02 c0    	mov    ecx,DWORD PTR ds:0xc002e1ac
c000f734:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f738:	05 ff 0f 00 00       	add    eax,0xfff
c000f73d:	89 c2                	mov    edx,eax
c000f73f:	78 2f                	js     c000f770 <sbrk+0x6c>
c000f741:	c1 fa 0c             	sar    edx,0xc
c000f744:	89 d7                	mov    edi,edx
c000f746:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f74a:	be 00 00 00 00       	mov    esi,0x0
c000f74f:	eb 36                	jmp    c000f787 <sbrk+0x83>
c000f751:	a1 ac e1 02 c0       	mov    eax,ds:0xc002e1ac
c000f756:	eb 73                	jmp    c000f7cb <sbrk+0xc7>
c000f758:	83 ec 08             	sub    esp,0x8
c000f75b:	50                   	push   eax
c000f75c:	68 08 af 02 c0       	push   0xc002af08
c000f761:	e8 ed 36 00 00       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c000f766:	83 c4 10             	add    esp,0x10
c000f769:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f76e:	eb 5b                	jmp    c000f7cb <sbrk+0xc7>
c000f770:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f776:	eb c9                	jmp    c000f741 <sbrk+0x3d>
c000f778:	81 05 ac e1 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002e1ac,0x1000
c000f782:	46                   	inc    esi
c000f783:	39 f7                	cmp    edi,esi
c000f785:	74 33                	je     c000f7ba <sbrk+0xb6>
c000f787:	8b 1d 10 f4 02 c0    	mov    ebx,DWORD PTR ds:0xc002f410
c000f78d:	8b 2d ac e1 02 c0    	mov    ebp,DWORD PTR ds:0xc002e1ac
c000f793:	e8 7c 07 00 00       	call   c000ff14 <Phys::allocatePage()>
c000f798:	68 01 0c 00 00       	push   0xc01
c000f79d:	55                   	push   ebp
c000f79e:	50                   	push   eax
c000f79f:	53                   	push   ebx
c000f7a0:	e8 df 2a 00 00       	call   c0012284 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f7a5:	83 c4 10             	add    esp,0x10
c000f7a8:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f7ad:	74 c9                	je     c000f778 <sbrk+0x74>
c000f7af:	8b 1d ac e1 02 c0    	mov    ebx,DWORD PTR ds:0xc002e1ac
c000f7b5:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f7b8:	eb be                	jmp    c000f778 <sbrk+0x74>
c000f7ba:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f7bf:	75 12                	jne    c000f7d3 <sbrk+0xcf>
c000f7c1:	0f 20 d8             	mov    eax,cr3
c000f7c4:	0f 22 d8             	mov    cr3,eax
c000f7c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f7cb:	83 c4 1c             	add    esp,0x1c
c000f7ce:	5b                   	pop    ebx
c000f7cf:	5e                   	pop    esi
c000f7d0:	5f                   	pop    edi
c000f7d1:	5d                   	pop    ebp
c000f7d2:	c3                   	ret    
c000f7d3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f7d7:	89 cb                	mov    ebx,ecx
c000f7d9:	c1 eb 0a             	shr    ebx,0xa
c000f7dc:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f7e2:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f7e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f7ec:	c1 e0 0c             	shl    eax,0xc
c000f7ef:	01 c8                	add    eax,ecx
c000f7f1:	c1 e8 0a             	shr    eax,0xa
c000f7f4:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f7f9:	2d 00 00 40 00       	sub    eax,0x400000
c000f7fe:	39 c3                	cmp    ebx,eax
c000f800:	77 c5                	ja     c000f7c7 <sbrk+0xc3>
c000f802:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f805:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f80b:	39 d8                	cmp    eax,ebx
c000f80d:	73 f3                	jae    c000f802 <sbrk+0xfe>
c000f80f:	eb b6                	jmp    c000f7c7 <sbrk+0xc3>

c000f811 <mmap>:
c000f811:	83 ec 18             	sub    esp,0x18
c000f814:	68 38 af 02 c0       	push   0xc002af38
c000f819:	e8 cf b0 00 00       	call   c001a8ed <Krnl::panic(char const*)>
c000f81e:	b8 00 00 00 00       	mov    eax,0x0
c000f823:	83 c4 1c             	add    esp,0x1c
c000f826:	c3                   	ret    

c000f827 <munmap>:
c000f827:	83 ec 18             	sub    esp,0x18
c000f82a:	68 3d af 02 c0       	push   0xc002af3d
c000f82f:	e8 b9 b0 00 00       	call   c001a8ed <Krnl::panic(char const*)>
c000f834:	b8 00 00 00 00       	mov    eax,0x0
c000f839:	83 c4 1c             	add    esp,0x1c
c000f83c:	c3                   	ret    

c000f83d <liballoc_lock()>:
c000f83d:	fa                   	cli    
c000f83e:	ff 05 c8 27 03 c0    	inc    DWORD PTR ds:0xc00327c8
c000f844:	b8 00 00 00 00       	mov    eax,0x0
c000f849:	c3                   	ret    

c000f84a <liballoc_unlock()>:
c000f84a:	a1 c8 27 03 c0       	mov    eax,ds:0xc00327c8
c000f84f:	48                   	dec    eax
c000f850:	a3 c8 27 03 c0       	mov    ds:0xc00327c8,eax
c000f855:	75 01                	jne    c000f858 <liballoc_unlock()+0xe>
c000f857:	fb                   	sti    
c000f858:	b8 00 00 00 00       	mov    eax,0x0
c000f85d:	c3                   	ret    

c000f85e <liballoc_alloc(int)>:
c000f85e:	83 ec 10             	sub    esp,0x10
c000f861:	68 01 08 00 00       	push   0x801
c000f866:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f86a:	ff 35 10 f4 02 c0    	push   DWORD PTR ds:0xc002f410
c000f870:	e8 11 2b 00 00       	call   c0012386 <VAS::allocatePages(int, int)>
c000f875:	83 c4 1c             	add    esp,0x1c
c000f878:	c3                   	ret    

c000f879 <liballoc_free(void*, int)>:
c000f879:	83 ec 14             	sub    esp,0x14
c000f87c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f880:	ff 35 10 f4 02 c0    	push   DWORD PTR ds:0xc002f410
c000f886:	e8 a5 27 00 00       	call   c0012030 <VAS::freeAllocatedPages(unsigned long)>
c000f88b:	b8 00 00 00 00       	mov    eax,0x0
c000f890:	83 c4 1c             	add    esp,0x1c
c000f893:	c3                   	ret    

c000f894 <realloc>:
c000f894:	83 ec 14             	sub    esp,0x14
c000f897:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f89b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f89f:	e8 a4 1d ff ff       	call   c0001648 <dlrealloc>
c000f8a4:	83 c4 1c             	add    esp,0x1c
c000f8a7:	c3                   	ret    

c000f8a8 <malloc>:
c000f8a8:	83 ec 18             	sub    esp,0x18
c000f8ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8af:	e8 57 18 ff ff       	call   c000110b <dlmalloc>
c000f8b4:	83 c4 1c             	add    esp,0x1c
c000f8b7:	c3                   	ret    

c000f8b8 <free>:
c000f8b8:	83 ec 18             	sub    esp,0x18
c000f8bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8bf:	e8 ec 14 ff ff       	call   c0000db0 <dlfree>
c000f8c4:	83 c4 1c             	add    esp,0x1c
c000f8c7:	c3                   	ret    

c000f8c8 <rfree>:
c000f8c8:	83 ec 18             	sub    esp,0x18
c000f8cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8cf:	e8 dc 14 ff ff       	call   c0000db0 <dlfree>
c000f8d4:	83 c4 1c             	add    esp,0x1c
c000f8d7:	c3                   	ret    

c000f8d8 <calloc>:
c000f8d8:	56                   	push   esi
c000f8d9:	53                   	push   ebx
c000f8da:	83 ec 10             	sub    esp,0x10
c000f8dd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f8e1:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f8e6:	53                   	push   ebx
c000f8e7:	e8 bc ff ff ff       	call   c000f8a8 <malloc>
c000f8ec:	89 c6                	mov    esi,eax
c000f8ee:	83 c4 0c             	add    esp,0xc
c000f8f1:	53                   	push   ebx
c000f8f2:	6a 00                	push   0x0
c000f8f4:	50                   	push   eax
c000f8f5:	e8 72 0e ff ff       	call   c000076c <memset>
c000f8fa:	89 f0                	mov    eax,esi
c000f8fc:	83 c4 14             	add    esp,0x14
c000f8ff:	5b                   	pop    ebx
c000f900:	5e                   	pop    esi
c000f901:	c3                   	ret    

c000f902 <hwTextMode_loadInData(VgaText*)>:
c000f902:	55                   	push   ebp
c000f903:	a1 c0 e1 02 c0       	mov    eax,ds:0xc002e1c0
c000f908:	57                   	push   edi
c000f909:	56                   	push   esi
c000f90a:	53                   	push   ebx
c000f90b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f90f:	8b 57 10             	mov    edx,DWORD PTR [edi+0x10]
c000f912:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c000f915:	85 d2                	test   edx,edx
c000f917:	7e 29                	jle    c000f942 <hwTextMode_loadInData(VgaText*)+0x40>
c000f919:	8d a8 a0 00 00 00    	lea    ebp,[eax+0xa0]
c000f91f:	31 f6                	xor    esi,esi
c000f921:	29 cd                	sub    ebp,ecx
c000f923:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f926:	31 c0                	xor    eax,eax
c000f928:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f92c:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f930:	40                   	inc    eax
c000f931:	83 f8 50             	cmp    eax,0x50
c000f934:	75 f2                	jne    c000f928 <hwTextMode_loadInData(VgaText*)+0x26>
c000f936:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f93c:	46                   	inc    esi
c000f93d:	39 77 10             	cmp    DWORD PTR [edi+0x10],esi
c000f940:	7f e1                	jg     c000f923 <hwTextMode_loadInData(VgaText*)+0x21>
c000f942:	5b                   	pop    ebx
c000f943:	5e                   	pop    esi
c000f944:	5f                   	pop    edi
c000f945:	5d                   	pop    ebp
c000f946:	c3                   	ret    

c000f947 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f947:	55                   	push   ebp
c000f948:	80 3d 20 f3 02 c0 00 	cmp    BYTE PTR ds:0xc002f320,0x0
c000f94f:	57                   	push   edi
c000f950:	56                   	push   esi
c000f951:	53                   	push   ebx
c000f952:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f956:	75 44                	jne    c000f99c <hwTextMode_loadInTitle(VgaText*, char*)+0x55>
c000f958:	8b 6e 3c             	mov    ebp,DWORD PTR [esi+0x3c]
c000f95b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c000f95e:	8b 15 c0 e1 02 c0    	mov    edx,DWORD PTR ds:0xc002e1c0
c000f964:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f968:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f96e:	eb 08                	jmp    c000f978 <hwTextMode_loadInTitle(VgaText*, char*)+0x31>
c000f970:	8b 6e 3c             	mov    ebp,DWORD PTR [esi+0x3c]
c000f973:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c000f976:	89 da                	mov    edx,ebx
c000f978:	83 e5 0f             	and    ebp,0xf
c000f97b:	c1 e0 04             	shl    eax,0x4
c000f97e:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f981:	0f b6 c0             	movzx  eax,al
c000f984:	41                   	inc    ecx
c000f985:	09 e8                	or     eax,ebp
c000f987:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f98b:	c1 e0 08             	shl    eax,0x8
c000f98e:	09 e8                	or     eax,ebp
c000f990:	39 fb                	cmp    ebx,edi
c000f992:	66 89 02             	mov    WORD PTR [edx],ax
c000f995:	75 d9                	jne    c000f970 <hwTextMode_loadInTitle(VgaText*, char*)+0x29>
c000f997:	5b                   	pop    ebx
c000f998:	5e                   	pop    esi
c000f999:	5f                   	pop    edi
c000f99a:	5d                   	pop    ebp
c000f99b:	c3                   	ret    
c000f99c:	c7 46 3c 02 00 00 00 	mov    DWORD PTR [esi+0x3c],0x2
c000f9a3:	c7 46 38 00 00 00 00 	mov    DWORD PTR [esi+0x38],0x0
c000f9aa:	31 c0                	xor    eax,eax
c000f9ac:	bd 02 00 00 00       	mov    ebp,0x2
c000f9b1:	eb ab                	jmp    c000f95e <hwTextMode_loadInTitle(VgaText*, char*)+0x17>

c000f9b3 <hwTextMode_showCursor(VgaText*, bool)>:
c000f9b3:	56                   	push   esi
c000f9b4:	80 3d 20 f3 02 c0 00 	cmp    BYTE PTR ds:0xc002f320,0x0
c000f9bb:	53                   	push   ebx
c000f9bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f9c0:	75 36                	jne    c000f9f8 <hwTextMode_showCursor(VgaText*, bool)+0x45>
c000f9c2:	84 c0                	test   al,al
c000f9c4:	74 35                	je     c000f9fb <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000f9c6:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f9cb:	b0 0a                	mov    al,0xa
c000f9cd:	89 da                	mov    edx,ebx
c000f9cf:	ee                   	out    dx,al
c000f9d0:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f9d5:	89 ca                	mov    edx,ecx
c000f9d7:	ec                   	in     al,dx
c000f9d8:	b2 0f                	mov    dl,0xf
c000f9da:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f9de:	83 e0 c0             	and    eax,0xffffffc0
c000f9e1:	2b 56 1c             	sub    edx,DWORD PTR [esi+0x1c]
c000f9e4:	09 d0                	or     eax,edx
c000f9e6:	89 ca                	mov    edx,ecx
c000f9e8:	ee                   	out    dx,al
c000f9e9:	b0 0b                	mov    al,0xb
c000f9eb:	89 da                	mov    edx,ebx
c000f9ed:	ee                   	out    dx,al
c000f9ee:	89 ca                	mov    edx,ecx
c000f9f0:	ec                   	in     al,dx
c000f9f1:	83 e0 e0             	and    eax,0xffffffe0
c000f9f4:	83 c8 0f             	or     eax,0xf
c000f9f7:	ee                   	out    dx,al
c000f9f8:	5b                   	pop    ebx
c000f9f9:	5e                   	pop    esi
c000f9fa:	c3                   	ret    
c000f9fb:	b0 0a                	mov    al,0xa
c000f9fd:	ba d4 03 00 00       	mov    edx,0x3d4
c000fa02:	ee                   	out    dx,al
c000fa03:	b0 20                	mov    al,0x20
c000fa05:	ba d5 03 00 00       	mov    edx,0x3d5
c000fa0a:	ee                   	out    dx,al
c000fa0b:	5b                   	pop    ebx
c000fa0c:	5e                   	pop    esi
c000fa0d:	c3                   	ret    

c000fa0e <hwTextMode_update(VgaText*)>:
c000fa0e:	c3                   	ret    

c000fa0f <hwTextMode_updateCursor(VgaText*)>:
c000fa0f:	56                   	push   esi
c000fa10:	80 3d 20 f3 02 c0 00 	cmp    BYTE PTR ds:0xc002f320,0x0
c000fa17:	53                   	push   ebx
c000fa18:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa1c:	75 36                	jne    c000fa54 <hwTextMode_updateCursor(VgaText*)+0x45>
c000fa1e:	be d4 03 00 00       	mov    esi,0x3d4
c000fa23:	b9 19 00 00 00       	mov    ecx,0x19
c000fa28:	89 f2                	mov    edx,esi
c000fa2a:	2b 48 10             	sub    ecx,DWORD PTR [eax+0x10]
c000fa2d:	03 48 18             	add    ecx,DWORD PTR [eax+0x18]
c000fa30:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000fa33:	c1 e1 04             	shl    ecx,0x4
c000fa36:	03 48 14             	add    ecx,DWORD PTR [eax+0x14]
c000fa39:	b0 0f                	mov    al,0xf
c000fa3b:	ee                   	out    dx,al
c000fa3c:	bb d5 03 00 00       	mov    ebx,0x3d5
c000fa41:	88 c8                	mov    al,cl
c000fa43:	89 da                	mov    edx,ebx
c000fa45:	ee                   	out    dx,al
c000fa46:	b0 0e                	mov    al,0xe
c000fa48:	89 f2                	mov    edx,esi
c000fa4a:	ee                   	out    dx,al
c000fa4b:	89 c8                	mov    eax,ecx
c000fa4d:	89 da                	mov    edx,ebx
c000fa4f:	66 c1 e8 08          	shr    ax,0x8
c000fa53:	ee                   	out    dx,al
c000fa54:	5b                   	pop    ebx
c000fa55:	5e                   	pop    esi
c000fa56:	c3                   	ret    

c000fa57 <hwTextMode_disableBlink(VgaText*, bool)>:
c000fa57:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa5b:	80 3d 20 f3 02 c0 00 	cmp    BYTE PTR ds:0xc002f320,0x0
c000fa62:	75 38                	jne    c000fa9c <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000fa64:	ba da 03 00 00       	mov    edx,0x3da
c000fa69:	84 c0                	test   al,al
c000fa6b:	75 18                	jne    c000fa85 <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000fa6d:	ec                   	in     al,dx
c000fa6e:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa73:	b0 30                	mov    al,0x30
c000fa75:	89 ca                	mov    edx,ecx
c000fa77:	ee                   	out    dx,al
c000fa78:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa7d:	ec                   	in     al,dx
c000fa7e:	83 c8 08             	or     eax,0x8
c000fa81:	89 ca                	mov    edx,ecx
c000fa83:	ee                   	out    dx,al
c000fa84:	c3                   	ret    
c000fa85:	ec                   	in     al,dx
c000fa86:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa8b:	b0 30                	mov    al,0x30
c000fa8d:	89 ca                	mov    edx,ecx
c000fa8f:	ee                   	out    dx,al
c000fa90:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa95:	ec                   	in     al,dx
c000fa96:	83 e0 f7             	and    eax,0xfffffff7
c000fa99:	89 ca                	mov    edx,ecx
c000fa9b:	ee                   	out    dx,al
c000fa9c:	c3                   	ret    

c000fa9d <hwTextMode_scrollScreen(VgaText*)>:
c000fa9d:	55                   	push   ebp
c000fa9e:	57                   	push   edi
c000fa9f:	56                   	push   esi
c000faa0:	53                   	push   ebx
c000faa1:	83 ec 1c             	sub    esp,0x1c
c000faa4:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000faa8:	80 3d 20 f3 02 c0 00 	cmp    BYTE PTR ds:0xc002f320,0x0
c000faaf:	74 0e                	je     c000fabf <hwTextMode_scrollScreen(VgaText*)+0x22>
c000fab1:	c7 41 34 02 00 00 00 	mov    DWORD PTR [ecx+0x34],0x2
c000fab8:	c7 41 30 00 00 00 00 	mov    DWORD PTR [ecx+0x30],0x0
c000fabf:	a1 c0 e1 02 c0       	mov    eax,ds:0xc002e1c0
c000fac4:	bd 02 00 00 00       	mov    ebp,0x2
c000fac9:	05 a0 00 00 00       	add    eax,0xa0
c000face:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fad2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fad6:	31 c0                	xor    eax,eax
c000fad8:	eb 0b                	jmp    c000fae5 <hwTextMode_scrollScreen(VgaText*)+0x48>
c000fada:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000fae0:	74 51                	je     c000fb33 <hwTextMode_scrollScreen(VgaText*)+0x96>
c000fae2:	43                   	inc    ebx
c000fae3:	89 f0                	mov    eax,esi
c000fae5:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000faeb:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000faf1:	88 13                	mov    BYTE PTR [ebx],dl
c000faf3:	8d 70 01             	lea    esi,[eax+0x1]
c000faf6:	83 fd 18             	cmp    ebp,0x18
c000faf9:	75 df                	jne    c000fada <hwTextMode_scrollScreen(VgaText*)+0x3d>
c000fafb:	a8 01                	test   al,0x1
c000fafd:	75 13                	jne    c000fb12 <hwTextMode_scrollScreen(VgaText*)+0x75>
c000faff:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000fb02:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000fb08:	75 d8                	jne    c000fae2 <hwTextMode_scrollScreen(VgaText*)+0x45>
c000fb0a:	83 c4 1c             	add    esp,0x1c
c000fb0d:	5b                   	pop    ebx
c000fb0e:	5e                   	pop    esi
c000fb0f:	5f                   	pop    edi
c000fb10:	5d                   	pop    ebp
c000fb11:	c3                   	ret    
c000fb12:	83 ec 08             	sub    esp,0x8
c000fb15:	0f b6 41 30          	movzx  eax,BYTE PTR [ecx+0x30]
c000fb19:	50                   	push   eax
c000fb1a:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000fb1e:	0f b6 41 34          	movzx  eax,BYTE PTR [ecx+0x34]
c000fb22:	50                   	push   eax
c000fb23:	e8 0c 0c 00 00       	call   c0010734 <VgaText::combineColours(unsigned char, unsigned char)>
c000fb28:	83 c4 10             	add    esp,0x10
c000fb2b:	88 07                	mov    BYTE PTR [edi],al
c000fb2d:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fb31:	eb cf                	jmp    c000fb02 <hwTextMode_scrollScreen(VgaText*)+0x65>
c000fb33:	45                   	inc    ebp
c000fb34:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000fb3c:	eb 94                	jmp    c000fad2 <hwTextMode_scrollScreen(VgaText*)+0x35>

c000fb3e <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000fb3e:	57                   	push   edi
c000fb3f:	80 3d 20 f3 02 c0 00 	cmp    BYTE PTR ds:0xc002f320,0x0
c000fb46:	56                   	push   esi
c000fb47:	53                   	push   ebx
c000fb48:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fb4c:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000fb50:	75 62                	jne    c000fbb4 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x76>
c000fb52:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000fb57:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000fb5c:	83 ec 08             	sub    esp,0x8
c000fb5f:	52                   	push   edx
c000fb60:	50                   	push   eax
c000fb61:	e8 ce 0b 00 00       	call   c0010734 <VgaText::combineColours(unsigned char, unsigned char)>
c000fb66:	5a                   	pop    edx
c000fb67:	0f b6 c0             	movzx  eax,al
c000fb6a:	59                   	pop    ecx
c000fb6b:	50                   	push   eax
c000fb6c:	0f be c3             	movsx  eax,bl
c000fb6f:	50                   	push   eax
c000fb70:	e8 65 0c 00 00       	call   c00107da <VgaText::combineCharAndColour(char, unsigned char)>
c000fb75:	83 c4 10             	add    esp,0x10
c000fb78:	8b 35 c0 e1 02 c0    	mov    esi,DWORD PTR ds:0xc002e1c0
c000fb7e:	80 3d 20 f3 02 c0 00 	cmp    BYTE PTR ds:0xc002f320,0x0
c000fb85:	74 07                	je     c000fb8e <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000fb87:	66 0f be c3          	movsx  ax,bl
c000fb8b:	80 cc 02             	or     ah,0x2
c000fb8e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fb92:	ba 19 00 00 00       	mov    edx,0x19
c000fb97:	2b 51 10             	sub    edx,DWORD PTR [ecx+0x10]
c000fb9a:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000fb9d:	8d 14 92             	lea    edx,[edx+edx*4]
c000fba0:	c1 e1 04             	shl    ecx,0x4
c000fba3:	c1 e2 04             	shl    edx,0x4
c000fba6:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000fbaa:	01 ca                	add    edx,ecx
c000fbac:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000fbb0:	5b                   	pop    ebx
c000fbb1:	5e                   	pop    esi
c000fbb2:	5f                   	pop    edi
c000fbb3:	c3                   	ret    
c000fbb4:	b8 02 00 00 00       	mov    eax,0x2
c000fbb9:	31 d2                	xor    edx,edx
c000fbbb:	eb 9f                	jmp    c000fb5c <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000fbbd <setupTextMode()>:
c000fbbd:	a1 10 04 00 00       	mov    eax,ds:0x410
c000fbc2:	83 e0 30             	and    eax,0x30
c000fbc5:	66 83 f8 30          	cmp    ax,0x30
c000fbc9:	75 11                	jne    c000fbdc <setupTextMode()+0x1f>
c000fbcb:	81 2d c0 e1 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002e1c0,0x8000
c000fbd5:	c6 05 20 f3 02 c0 01 	mov    BYTE PTR ds:0xc002f320,0x1
c000fbdc:	c7 05 58 f3 02 c0 57 fa 00 c0 	mov    DWORD PTR ds:0xc002f358,0xc000fa57
c000fbe6:	c7 05 44 f3 02 c0 02 f9 00 c0 	mov    DWORD PTR ds:0xc002f344,0xc000f902
c000fbf0:	c7 05 40 f3 02 c0 47 f9 00 c0 	mov    DWORD PTR ds:0xc002f340,0xc000f947
c000fbfa:	c7 05 4c f3 02 c0 9d fa 00 c0 	mov    DWORD PTR ds:0xc002f34c,0xc000fa9d
c000fc04:	c7 05 54 f3 02 c0 b3 f9 00 c0 	mov    DWORD PTR ds:0xc002f354,0xc000f9b3
c000fc0e:	c7 05 48 f3 02 c0 0e fa 00 c0 	mov    DWORD PTR ds:0xc002f348,0xc000fa0e
c000fc18:	c7 05 50 f3 02 c0 0f fa 00 c0 	mov    DWORD PTR ds:0xc002f350,0xc000fa0f
c000fc22:	c7 05 5c f3 02 c0 3e fb 00 c0 	mov    DWORD PTR ds:0xc002f35c,0xc000fb3e
c000fc2c:	c3                   	ret    

c000fc2d <kernel_main>:
c000fc2d:	57                   	push   edi
c000fc2e:	bf f9 03 00 00       	mov    edi,0x3f9
c000fc33:	56                   	push   esi
c000fc34:	89 fa                	mov    edx,edi
c000fc36:	53                   	push   ebx
c000fc37:	31 f6                	xor    esi,esi
c000fc39:	83 ec 2c             	sub    esp,0x2c
c000fc3c:	89 f0                	mov    eax,esi
c000fc3e:	ee                   	out    dx,al
c000fc3f:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fc44:	b0 80                	mov    al,0x80
c000fc46:	89 da                	mov    edx,ebx
c000fc48:	ee                   	out    dx,al
c000fc49:	b1 03                	mov    cl,0x3
c000fc4b:	ba f8 03 00 00       	mov    edx,0x3f8
c000fc50:	88 c8                	mov    al,cl
c000fc52:	ee                   	out    dx,al
c000fc53:	89 f0                	mov    eax,esi
c000fc55:	89 fa                	mov    edx,edi
c000fc57:	ee                   	out    dx,al
c000fc58:	88 c8                	mov    al,cl
c000fc5a:	89 da                	mov    edx,ebx
c000fc5c:	ee                   	out    dx,al
c000fc5d:	b0 c7                	mov    al,0xc7
c000fc5f:	ba fa 03 00 00       	mov    edx,0x3fa
c000fc64:	ee                   	out    dx,al
c000fc65:	b0 0b                	mov    al,0xb
c000fc67:	ba fc 03 00 00       	mov    edx,0x3fc
c000fc6c:	ee                   	out    dx,al
c000fc6d:	68 44 af 02 c0       	push   0xc002af44
c000fc72:	e8 dc 31 00 00       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c000fc77:	e8 4a 09 00 00       	call   c00105c6 <installVgaTextImplementation()>
c000fc7c:	e8 3c ff ff ff       	call   c000fbbd <setupTextMode()>
c000fc81:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fc86:	05 ff 0f 00 00       	add    eax,0xfff
c000fc8b:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fc90:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc93:	e8 f5 03 00 00       	call   c001008d <Phys::physicalMemorySetup(unsigned int)>
c000fc98:	e8 6f 1f 00 00       	call   c0011c0c <Virt::virtualMemorySetup()>
c000fc9d:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fca3:	83 c4 10             	add    esp,0x10
c000fca6:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fcac:	75 0e                	jne    c000fcbc <kernel_main+0x8f>
c000fcae:	89 d8                	mov    eax,ebx
c000fcb0:	25 48 03 00 00       	and    eax,0x348
c000fcb5:	3d 00 03 00 00       	cmp    eax,0x300
c000fcba:	74 10                	je     c000fccc <kernel_main+0x9f>
c000fcbc:	83 ec 0c             	sub    esp,0xc
c000fcbf:	68 d5 c8 02 c0       	push   0xc002c8d5
c000fcc4:	e8 24 ac 00 00       	call   c001a8ed <Krnl::panic(char const*)>
c000fcc9:	83 c4 10             	add    esp,0x10
c000fccc:	83 ec 0c             	sub    esp,0xc
c000fccf:	89 1d a0 f2 02 c0    	mov    DWORD PTR ds:0xc002f2a0,ebx
c000fcd5:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000fcd9:	53                   	push   ebx
c000fcda:	e8 79 21 00 00       	call   c0011e58 <VAS::VAS()>
c000fcdf:	89 1d 10 f4 02 c0    	mov    DWORD PTR ds:0xc002f410,ebx
c000fce5:	e8 36 03 ff ff       	call   c0000020 <callGlobalConstructors>
c000fcea:	c7 04 24 5b af 02 c0 	mov    DWORD PTR [esp],0xc002af5b
c000fcf1:	e8 5d 31 00 00       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c000fcf6:	e8 90 1f 00 00       	call   c0011c8b <Virt::swappingSetup()>
c000fcfb:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fd02:	e8 a1 fb ff ff       	call   c000f8a8 <malloc>
c000fd07:	89 04 24             	mov    DWORD PTR [esp],eax
c000fd0a:	89 c6                	mov    esi,eax
c000fd0c:	e8 8f ea ff ff       	call   c000e7a0 <Computer::Computer()>
c000fd11:	58                   	pop    eax
c000fd12:	89 35 88 f2 02 c0    	mov    DWORD PTR ds:0xc002f288,esi
c000fd18:	5a                   	pop    edx
c000fd19:	56                   	push   esi
c000fd1a:	68 78 af 02 c0       	push   0xc002af78
c000fd1f:	e8 2f 31 00 00       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c000fd24:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c000fd29:	8b 10                	mov    edx,DWORD PTR [eax]
c000fd2b:	6a 00                	push   0x0
c000fd2d:	6a 00                	push   0x0
c000fd2f:	6a 00                	push   0x0
c000fd31:	50                   	push   eax
c000fd32:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fd35:	83 c4 14             	add    esp,0x14
c000fd38:	53                   	push   ebx
c000fd39:	e8 ca 23 00 00       	call   c0012108 <VAS::~VAS()>
c000fd3e:	c7 04 24 8b af 02 c0 	mov    DWORD PTR [esp],0xc002af8b
c000fd45:	e8 a3 ab 00 00       	call   c001a8ed <Krnl::panic(char const*)>
c000fd4a:	83 c4 30             	add    esp,0x30
c000fd4d:	5b                   	pop    ebx
c000fd4e:	5e                   	pop    esi
c000fd4f:	5f                   	pop    edi
c000fd50:	c3                   	ret    

c000fd51 <Phys::allocateDMA(unsigned long)>:
c000fd51:	55                   	push   ebp
c000fd52:	31 d2                	xor    edx,edx
c000fd54:	57                   	push   edi
c000fd55:	31 ed                	xor    ebp,ebp
c000fd57:	56                   	push   esi
c000fd58:	31 c9                	xor    ecx,ecx
c000fd5a:	53                   	push   ebx
c000fd5b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd5f:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fd65:	31 c0                	xor    eax,eax
c000fd67:	c1 ee 0c             	shr    esi,0xc
c000fd6a:	eb 17                	jmp    c000fd83 <Phys::allocateDMA(unsigned long)+0x32>
c000fd6c:	85 c9                	test   ecx,ecx
c000fd6e:	75 04                	jne    c000fd74 <Phys::allocateDMA(unsigned long)+0x23>
c000fd70:	89 d5                	mov    ebp,edx
c000fd72:	89 d0                	mov    eax,edx
c000fd74:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fd77:	39 de                	cmp    esi,ebx
c000fd79:	74 20                	je     c000fd9b <Phys::allocateDMA(unsigned long)+0x4a>
c000fd7b:	42                   	inc    edx
c000fd7c:	89 d9                	mov    ecx,ebx
c000fd7e:	83 fa 2f             	cmp    edx,0x2f
c000fd81:	7f 11                	jg     c000fd94 <Phys::allocateDMA(unsigned long)+0x43>
c000fd83:	80 ba e0 f2 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd0d20],0x0
c000fd8a:	74 e0                	je     c000fd6c <Phys::allocateDMA(unsigned long)+0x1b>
c000fd8c:	31 c9                	xor    ecx,ecx
c000fd8e:	42                   	inc    edx
c000fd8f:	83 fa 2f             	cmp    edx,0x2f
c000fd92:	7e ef                	jle    c000fd83 <Phys::allocateDMA(unsigned long)+0x32>
c000fd94:	5b                   	pop    ebx
c000fd95:	31 c0                	xor    eax,eax
c000fd97:	5e                   	pop    esi
c000fd98:	5f                   	pop    edi
c000fd99:	5d                   	pop    ebp
c000fd9a:	c3                   	ret    
c000fd9b:	8d 14 30             	lea    edx,[eax+esi*1]
c000fd9e:	89 d7                	mov    edi,edx
c000fda0:	4f                   	dec    edi
c000fda1:	79 03                	jns    c000fda6 <Phys::allocateDMA(unsigned long)+0x55>
c000fda3:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fda6:	c1 ff 04             	sar    edi,0x4
c000fda9:	89 c2                	mov    edx,eax
c000fdab:	c1 fa 04             	sar    edx,0x4
c000fdae:	39 fa                	cmp    edx,edi
c000fdb0:	75 2f                	jne    c000fde1 <Phys::allocateDMA(unsigned long)+0x90>
c000fdb2:	85 db                	test   ebx,ebx
c000fdb4:	74 1a                	je     c000fdd0 <Phys::allocateDMA(unsigned long)+0x7f>
c000fdb6:	be e0 f2 02 c0       	mov    esi,0xc002f2e0
c000fdbb:	8d 90 e0 f2 02 c0    	lea    edx,[eax-0x3ffd0d20]
c000fdc1:	f7 d6                	not    esi
c000fdc3:	29 c6                	sub    esi,eax
c000fdc5:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fdc8:	42                   	inc    edx
c000fdc9:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fdcc:	39 d9                	cmp    ecx,ebx
c000fdce:	7f f5                	jg     c000fdc5 <Phys::allocateDMA(unsigned long)+0x74>
c000fdd0:	85 ff                	test   edi,edi
c000fdd2:	74 13                	je     c000fde7 <Phys::allocateDMA(unsigned long)+0x96>
c000fdd4:	5b                   	pop    ebx
c000fdd5:	05 50 20 0c 00       	add    eax,0xc2050
c000fdda:	5e                   	pop    esi
c000fddb:	c1 e0 0c             	shl    eax,0xc
c000fdde:	5f                   	pop    edi
c000fddf:	5d                   	pop    ebp
c000fde0:	c3                   	ret    
c000fde1:	89 ea                	mov    edx,ebp
c000fde3:	31 c9                	xor    ecx,ecx
c000fde5:	eb a7                	jmp    c000fd8e <Phys::allocateDMA(unsigned long)+0x3d>
c000fde7:	5b                   	pop    ebx
c000fde8:	c1 e0 0c             	shl    eax,0xc
c000fdeb:	5e                   	pop    esi
c000fdec:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fdf1:	5f                   	pop    edi
c000fdf2:	5d                   	pop    ebp
c000fdf3:	c3                   	ret    

c000fdf4 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fdf4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdf8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fdfc:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fe02:	c1 e9 0c             	shr    ecx,0xc
c000fe05:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fe0a:	76 25                	jbe    c000fe31 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fe0c:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fe11:	c1 e8 0c             	shr    eax,0xc
c000fe14:	8d 50 10             	lea    edx,[eax+0x10]
c000fe17:	85 c9                	test   ecx,ecx
c000fe19:	74 15                	je     c000fe30 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fe1b:	8d 82 e0 f2 02 c0    	lea    eax,[edx-0x3ffd0d20]
c000fe21:	8d 94 11 e0 f2 02 c0 	lea    edx,[ecx+edx*1-0x3ffd0d20]
c000fe28:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fe2b:	40                   	inc    eax
c000fe2c:	39 d0                	cmp    eax,edx
c000fe2e:	75 f8                	jne    c000fe28 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fe30:	c3                   	ret    
c000fe31:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fe37:	c1 ea 0c             	shr    edx,0xc
c000fe3a:	eb db                	jmp    c000fe17 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fe3c <Phys::setPageState(unsigned long, bool)>:
c000fe3c:	56                   	push   esi
c000fe3d:	ba 01 00 00 00       	mov    edx,0x1
c000fe42:	53                   	push   ebx
c000fe43:	8b 35 b0 e1 02 c0    	mov    esi,DWORD PTR ds:0xc002e1b0
c000fe49:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe4d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe51:	89 c8                	mov    eax,ecx
c000fe53:	83 e1 07             	and    ecx,0x7
c000fe56:	c1 e8 03             	shr    eax,0x3
c000fe59:	d3 e3                	shl    ebx,cl
c000fe5b:	01 c6                	add    esi,eax
c000fe5d:	d3 e2                	shl    edx,cl
c000fe5f:	f7 d2                	not    edx
c000fe61:	20 16                	and    BYTE PTR [esi],dl
c000fe63:	03 05 b0 e1 02 c0    	add    eax,DWORD PTR ds:0xc002e1b0
c000fe69:	08 18                	or     BYTE PTR [eax],bl
c000fe6b:	5b                   	pop    ebx
c000fe6c:	5e                   	pop    esi
c000fe6d:	c3                   	ret    

c000fe6e <Phys::getPageState(unsigned long)>:
c000fe6e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe72:	8b 15 b0 e1 02 c0    	mov    edx,DWORD PTR ds:0xc002e1b0
c000fe78:	89 c8                	mov    eax,ecx
c000fe7a:	83 e1 07             	and    ecx,0x7
c000fe7d:	c1 e8 03             	shr    eax,0x3
c000fe80:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fe84:	d3 f8                	sar    eax,cl
c000fe86:	83 e0 01             	and    eax,0x1
c000fe89:	c3                   	ret    

c000fe8a <Phys::freePage(unsigned long)>:
c000fe8a:	53                   	push   ebx
c000fe8b:	83 ec 08             	sub    esp,0x8
c000fe8e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe92:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fe98:	76 57                	jbe    c000fef1 <Phys::freePage(unsigned long)+0x67>
c000fe9a:	c1 eb 0c             	shr    ebx,0xc
c000fe9d:	53                   	push   ebx
c000fe9e:	e8 cb ff ff ff       	call   c000fe6e <Phys::getPageState(unsigned long)>
c000fea3:	5a                   	pop    edx
c000fea4:	84 c0                	test   al,al
c000fea6:	74 5b                	je     c000ff03 <Phys::freePage(unsigned long)+0x79>
c000fea8:	a1 d0 f2 02 c0       	mov    eax,ds:0xc002f2d0
c000fead:	48                   	dec    eax
c000feae:	a3 d0 f2 02 c0       	mov    ds:0xc002f2d0,eax
c000feb3:	8d 04 80             	lea    eax,[eax+eax*4]
c000feb6:	8d 04 80             	lea    eax,[eax+eax*4]
c000feb9:	c1 e0 02             	shl    eax,0x2
c000febc:	99                   	cdq    
c000febd:	f7 3d d4 f2 02 c0    	idiv   DWORD PTR ds:0xc002f2d4
c000fec3:	39 05 cc f2 02 c0    	cmp    DWORD PTR ds:0xc002f2cc,eax
c000fec9:	75 13                	jne    c000fede <Phys::freePage(unsigned long)+0x54>
c000fecb:	83 ec 08             	sub    esp,0x8
c000fece:	6a 00                	push   0x0
c000fed0:	53                   	push   ebx
c000fed1:	e8 66 ff ff ff       	call   c000fe3c <Phys::setPageState(unsigned long, bool)>
c000fed6:	83 c4 10             	add    esp,0x10
c000fed9:	83 c4 08             	add    esp,0x8
c000fedc:	5b                   	pop    ebx
c000fedd:	c3                   	ret    
c000fede:	83 ec 0c             	sub    esp,0xc
c000fee1:	a3 cc f2 02 c0       	mov    ds:0xc002f2cc,eax
c000fee6:	50                   	push   eax
c000fee7:	e8 08 0a 00 00       	call   c00108f4 <VgaText::updateRAMUsageDisplay(int)>
c000feec:	83 c4 10             	add    esp,0x10
c000feef:	eb da                	jmp    c000fecb <Phys::freePage(unsigned long)+0x41>
c000fef1:	68 00 10 00 00       	push   0x1000
c000fef6:	53                   	push   ebx
c000fef7:	e8 f8 fe ff ff       	call   c000fdf4 <Phys::freeDMA(unsigned long, unsigned long)>
c000fefc:	59                   	pop    ecx
c000fefd:	5b                   	pop    ebx
c000fefe:	83 c4 08             	add    esp,0x8
c000ff01:	5b                   	pop    ebx
c000ff02:	c3                   	ret    
c000ff03:	c7 44 24 10 a6 af 02 c0 	mov    DWORD PTR [esp+0x10],0xc002afa6
c000ff0b:	83 c4 08             	add    esp,0x8
c000ff0e:	5b                   	pop    ebx
c000ff0f:	e9 d9 a9 00 00       	jmp    c001a8ed <Krnl::panic(char const*)>

c000ff14 <Phys::allocatePage()>:
c000ff14:	56                   	push   esi
c000ff15:	53                   	push   ebx
c000ff16:	51                   	push   ecx
c000ff17:	8b 35 c4 f2 02 c0    	mov    esi,DWORD PTR ds:0xc002f2c4
c000ff1d:	89 f3                	mov    ebx,esi
c000ff1f:	eb 0a                	jmp    c000ff2b <Phys::allocatePage()+0x17>
c000ff21:	89 1d c4 f2 02 c0    	mov    DWORD PTR ds:0xc002f2c4,ebx
c000ff27:	39 de                	cmp    esi,ebx
c000ff29:	74 24                	je     c000ff4f <Phys::allocatePage()+0x3b>
c000ff2b:	53                   	push   ebx
c000ff2c:	e8 3d ff ff ff       	call   c000fe6e <Phys::getPageState(unsigned long)>
c000ff31:	5a                   	pop    edx
c000ff32:	84 c0                	test   al,al
c000ff34:	74 77                	je     c000ffad <Phys::allocatePage()+0x99>
c000ff36:	43                   	inc    ebx
c000ff37:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ff3d:	75 e2                	jne    c000ff21 <Phys::allocatePage()+0xd>
c000ff3f:	31 db                	xor    ebx,ebx
c000ff41:	c7 05 c4 f2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f2c4,0x0
c000ff4b:	39 de                	cmp    esi,ebx
c000ff4d:	75 dc                	jne    c000ff2b <Phys::allocatePage()+0x17>
c000ff4f:	83 ec 0c             	sub    esp,0xc
c000ff52:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ff57:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ff5a:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000ff60:	e8 1b 2c 00 00       	call   c0012b80 <VAS::scanForEviction()>
c000ff65:	83 c4 10             	add    esp,0x10
c000ff68:	85 c0                	test   eax,eax
c000ff6a:	75 76                	jne    c000ffe2 <Phys::allocatePage()+0xce>
c000ff6c:	83 ec 0c             	sub    esp,0xc
c000ff6f:	68 bc af 02 c0       	push   0xc002afbc
c000ff74:	e8 da 2e 00 00       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c000ff79:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000ff80:	e8 cc fd ff ff       	call   c000fd51 <Phys::allocateDMA(unsigned long)>
c000ff85:	83 c4 10             	add    esp,0x10
c000ff88:	85 c0                	test   eax,eax
c000ff8a:	75 56                	jne    c000ffe2 <Phys::allocatePage()+0xce>
c000ff8c:	83 ec 0c             	sub    esp,0xc
c000ff8f:	68 cd af 02 c0       	push   0xc002afcd
c000ff94:	e8 54 a9 00 00       	call   c001a8ed <Krnl::panic(char const*)>
c000ff99:	83 c4 10             	add    esp,0x10
c000ff9c:	8b 1d c4 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f2c4
c000ffa2:	53                   	push   ebx
c000ffa3:	e8 c6 fe ff ff       	call   c000fe6e <Phys::getPageState(unsigned long)>
c000ffa8:	5a                   	pop    edx
c000ffa9:	84 c0                	test   al,al
c000ffab:	75 89                	jne    c000ff36 <Phys::allocatePage()+0x22>
c000ffad:	6a 01                	push   0x1
c000ffaf:	53                   	push   ebx
c000ffb0:	e8 87 fe ff ff       	call   c000fe3c <Phys::setPageState(unsigned long, bool)>
c000ffb5:	a1 d0 f2 02 c0       	mov    eax,ds:0xc002f2d0
c000ffba:	59                   	pop    ecx
c000ffbb:	40                   	inc    eax
c000ffbc:	5b                   	pop    ebx
c000ffbd:	a3 d0 f2 02 c0       	mov    ds:0xc002f2d0,eax
c000ffc2:	8d 04 80             	lea    eax,[eax+eax*4]
c000ffc5:	8d 04 80             	lea    eax,[eax+eax*4]
c000ffc8:	c1 e0 02             	shl    eax,0x2
c000ffcb:	99                   	cdq    
c000ffcc:	f7 3d d4 f2 02 c0    	idiv   DWORD PTR ds:0xc002f2d4
c000ffd2:	39 05 cc f2 02 c0    	cmp    DWORD PTR ds:0xc002f2cc,eax
c000ffd8:	75 0c                	jne    c000ffe6 <Phys::allocatePage()+0xd2>
c000ffda:	a1 c4 f2 02 c0       	mov    eax,ds:0xc002f2c4
c000ffdf:	c1 e0 0c             	shl    eax,0xc
c000ffe2:	5a                   	pop    edx
c000ffe3:	5b                   	pop    ebx
c000ffe4:	5e                   	pop    esi
c000ffe5:	c3                   	ret    
c000ffe6:	83 ec 0c             	sub    esp,0xc
c000ffe9:	a3 cc f2 02 c0       	mov    ds:0xc002f2cc,eax
c000ffee:	50                   	push   eax
c000ffef:	e8 00 09 00 00       	call   c00108f4 <VgaText::updateRAMUsageDisplay(int)>
c000fff4:	83 c4 10             	add    esp,0x10
c000fff7:	eb e1                	jmp    c000ffda <Phys::allocatePage()+0xc6>

c000fff9 <Phys::allocateContiguousPages(int)>:
c000fff9:	57                   	push   edi
c000fffa:	56                   	push   esi
c000fffb:	53                   	push   ebx
c000fffc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010000:	fa                   	cli    
c0010001:	ff 05 c8 27 03 c0    	inc    DWORD PTR ds:0xc00327c8
c0010007:	31 db                	xor    ebx,ebx
c0010009:	85 db                	test   ebx,ebx
c001000b:	75 11                	jne    c001001e <Phys::allocateContiguousPages(int)+0x25>
c001000d:	e8 02 ff ff ff       	call   c000ff14 <Phys::allocatePage()>
c0010012:	83 fe 01             	cmp    esi,0x1
c0010015:	89 c7                	mov    edi,eax
c0010017:	74 21                	je     c001003a <Phys::allocateContiguousPages(int)+0x41>
c0010019:	bb 01 00 00 00       	mov    ebx,0x1
c001001e:	e8 f1 fe ff ff       	call   c000ff14 <Phys::allocatePage()>
c0010023:	89 da                	mov    edx,ebx
c0010025:	c1 e2 0c             	shl    edx,0xc
c0010028:	01 fa                	add    edx,edi
c001002a:	39 c2                	cmp    edx,eax
c001002c:	74 20                	je     c001004e <Phys::allocateContiguousPages(int)+0x55>
c001002e:	bb 01 00 00 00       	mov    ebx,0x1
c0010033:	89 c7                	mov    edi,eax
c0010035:	83 fe 01             	cmp    esi,0x1
c0010038:	75 e4                	jne    c001001e <Phys::allocateContiguousPages(int)+0x25>
c001003a:	a1 c8 27 03 c0       	mov    eax,ds:0xc00327c8
c001003f:	48                   	dec    eax
c0010040:	a3 c8 27 03 c0       	mov    ds:0xc00327c8,eax
c0010045:	75 01                	jne    c0010048 <Phys::allocateContiguousPages(int)+0x4f>
c0010047:	fb                   	sti    
c0010048:	89 f8                	mov    eax,edi
c001004a:	5b                   	pop    ebx
c001004b:	5e                   	pop    esi
c001004c:	5f                   	pop    edi
c001004d:	c3                   	ret    
c001004e:	43                   	inc    ebx
c001004f:	39 f3                	cmp    ebx,esi
c0010051:	75 b6                	jne    c0010009 <Phys::allocateContiguousPages(int)+0x10>
c0010053:	eb e5                	jmp    c001003a <Phys::allocateContiguousPages(int)+0x41>

c0010055 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0010055:	56                   	push   esi
c0010056:	53                   	push   ebx
c0010057:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001005b:	39 1d c8 f2 02 c0    	cmp    DWORD PTR ds:0xc002f2c8,ebx
c0010061:	73 06                	jae    c0010069 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0010063:	89 1d c8 f2 02 c0    	mov    DWORD PTR ds:0xc002f2c8,ebx
c0010069:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001006d:	c1 eb 0c             	shr    ebx,0xc
c0010070:	c1 e8 0c             	shr    eax,0xc
c0010073:	39 d8                	cmp    eax,ebx
c0010075:	73 13                	jae    c001008a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0010077:	6a 00                	push   0x0
c0010079:	8d 70 01             	lea    esi,[eax+0x1]
c001007c:	50                   	push   eax
c001007d:	e8 ba fd ff ff       	call   c000fe3c <Phys::setPageState(unsigned long, bool)>
c0010082:	5a                   	pop    edx
c0010083:	89 f0                	mov    eax,esi
c0010085:	59                   	pop    ecx
c0010086:	39 f3                	cmp    ebx,esi
c0010088:	75 ed                	jne    c0010077 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c001008a:	5b                   	pop    ebx
c001008b:	5e                   	pop    esi
c001008c:	c3                   	ret    

c001008d <Phys::physicalMemorySetup(unsigned int)>:
c001008d:	55                   	push   ebp
c001008e:	57                   	push   edi
c001008f:	56                   	push   esi
c0010090:	53                   	push   ebx
c0010091:	31 db                	xor    ebx,ebx
c0010093:	83 ec 40             	sub    esp,0x40
c0010096:	6a 30                	push   0x30
c0010098:	6a 00                	push   0x0
c001009a:	68 e0 f2 02 c0       	push   0xc002f2e0
c001009f:	e8 c8 06 ff ff       	call   c000076c <memset>
c00100a4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00100a8:	25 00 f0 ff ff       	and    eax,0xfffff000
c00100ad:	05 00 10 00 00       	add    eax,0x1000
c00100b2:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00100b6:	83 c4 10             	add    esp,0x10
c00100b9:	83 ec 08             	sub    esp,0x8
c00100bc:	6a 01                	push   0x1
c00100be:	53                   	push   ebx
c00100bf:	43                   	inc    ebx
c00100c0:	e8 77 fd ff ff       	call   c000fe3c <Phys::setPageState(unsigned long, bool)>
c00100c5:	83 c4 10             	add    esp,0x10
c00100c8:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00100ce:	75 e9                	jne    c00100b9 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c00100d0:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c00100d7:	66 85 c0             	test   ax,ax
c00100da:	0f 84 8e 01 00 00    	je     c001026e <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c00100e0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00100e4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00100ec:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00100f0:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c00100f5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00100f9:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0010101:	eb 15                	jmp    c0010118 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c0010103:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0010107:	83 c3 18             	add    ebx,0x18
c001010a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001010e:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0010112:	0f 84 66 01 00 00    	je     c001027e <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c0010118:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001011b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001011e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0010121:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010125:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010129:	8b 33                	mov    esi,DWORD PTR [ebx]
c001012b:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c001012e:	01 f0                	add    eax,esi
c0010130:	55                   	push   ebp
c0010131:	11 fa                	adc    edx,edi
c0010133:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010137:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001013b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001013f:	56                   	push   esi
c0010140:	68 08 b0 02 c0       	push   0xc002b008
c0010145:	e8 09 2d 00 00       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001014a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001014e:	83 c4 10             	add    esp,0x10
c0010151:	09 f8                	or     eax,edi
c0010153:	0f 85 25 01 00 00    	jne    c001027e <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c0010159:	4d                   	dec    ebp
c001015a:	75 a7                	jne    c0010103 <Phys::physicalMemorySetup(unsigned int)+0x76>
c001015c:	ba 00 00 08 00       	mov    edx,0x80000
c0010161:	89 c1                	mov    ecx,eax
c0010163:	39 f2                	cmp    edx,esi
c0010165:	19 f9                	sbb    ecx,edi
c0010167:	0f 82 a7 00 00 00    	jb     c0010214 <Phys::physicalMemorySetup(unsigned int)+0x187>
c001016d:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0010171:	89 c1                	mov    ecx,eax
c0010173:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0010177:	0f 83 97 00 00 00    	jae    c0010214 <Phys::physicalMemorySetup(unsigned int)+0x187>
c001017d:	ba 00 00 0a 00       	mov    edx,0xa0000
c0010182:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010186:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c001018a:	39 fa                	cmp    edx,edi
c001018c:	19 e8                	sbb    eax,ebp
c001018e:	0f 82 14 01 00 00    	jb     c00102a8 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c0010194:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010198:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c001019c:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c00101a2:	ba ff 1f 00 00       	mov    edx,0x1fff
c00101a7:	83 d5 ff             	adc    ebp,0xffffffff
c00101aa:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00101ae:	31 c0                	xor    eax,eax
c00101b0:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00101b4:	39 fa                	cmp    edx,edi
c00101b6:	89 c1                	mov    ecx,eax
c00101b8:	19 e9                	sbb    ecx,ebp
c00101ba:	0f 83 43 ff ff ff    	jae    c0010103 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101c0:	be 00 00 08 00       	mov    esi,0x80000
c00101c5:	50                   	push   eax
c00101c6:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00101ca:	57                   	push   edi
c00101cb:	56                   	push   esi
c00101cc:	68 2c b0 02 c0       	push   0xc002b02c
c00101d1:	e8 7d 2c 00 00       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c00101d6:	5a                   	pop    edx
c00101d7:	59                   	pop    ecx
c00101d8:	57                   	push   edi
c00101d9:	56                   	push   esi
c00101da:	e8 76 fe ff ff       	call   c0010055 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00101df:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00101e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00101e7:	83 c4 0c             	add    esp,0xc
c00101ea:	0f ac d0 0c          	shrd   eax,edx,0xc
c00101ee:	03 05 d4 f2 02 c0    	add    eax,DWORD PTR ds:0xc002f2d4
c00101f4:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00101fb:	a3 d4 f2 02 c0       	mov    ds:0xc002f2d4,eax
c0010200:	52                   	push   edx
c0010201:	50                   	push   eax
c0010202:	68 e9 af 02 c0       	push   0xc002afe9
c0010207:	e8 47 2c 00 00       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001020c:	83 c4 10             	add    esp,0x10
c001020f:	e9 ef fe ff ff       	jmp    c0010103 <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010214:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0010218:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001021c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010220:	39 ea                	cmp    edx,ebp
c0010222:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0010226:	0f 82 d7 fe ff ff    	jb     c0010103 <Phys::physicalMemorySetup(unsigned int)+0x76>
c001022c:	ba ff 1f 00 00       	mov    edx,0x1fff
c0010231:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0010235:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0010239:	0f 83 c4 fe ff ff    	jae    c0010103 <Phys::physicalMemorySetup(unsigned int)+0x76>
c001023f:	39 ee                	cmp    esi,ebp
c0010241:	89 f8                	mov    eax,edi
c0010243:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0010247:	0f 83 78 ff ff ff    	jae    c00101c5 <Phys::physicalMemorySetup(unsigned int)+0x138>
c001024d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010251:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010255:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0010259:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001025d:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0010261:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010265:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010269:	e9 57 ff ff ff       	jmp    c00101c5 <Phys::physicalMemorySetup(unsigned int)+0x138>
c001026e:	83 ec 0c             	sub    esp,0xc
c0010271:	68 db af 02 c0       	push   0xc002afdb
c0010276:	e8 72 a6 00 00       	call   c001a8ed <Krnl::panic(char const*)>
c001027b:	83 c4 10             	add    esp,0x10
c001027e:	bb 40 01 00 00       	mov    ebx,0x140
c0010283:	83 ec 08             	sub    esp,0x8
c0010286:	6a 00                	push   0x0
c0010288:	53                   	push   ebx
c0010289:	43                   	inc    ebx
c001028a:	e8 ad fb ff ff       	call   c000fe3c <Phys::setPageState(unsigned long, bool)>
c001028f:	ff 05 d4 f2 02 c0    	inc    DWORD PTR ds:0xc002f2d4
c0010295:	83 c4 10             	add    esp,0x10
c0010298:	81 fb 80 01 00 00    	cmp    ebx,0x180
c001029e:	75 e3                	jne    c0010283 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c00102a0:	83 c4 3c             	add    esp,0x3c
c00102a3:	5b                   	pop    ebx
c00102a4:	5e                   	pop    esi
c00102a5:	5f                   	pop    edi
c00102a6:	5d                   	pop    ebp
c00102a7:	c3                   	ret    
c00102a8:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c00102b0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00102b8:	e9 d7 fe ff ff       	jmp    c0010194 <Phys::physicalMemorySetup(unsigned int)+0x107>
c00102bd:	90                   	nop

c00102be <Pipe::isAtty()>:
c00102be:	31 c0                	xor    eax,eax
c00102c0:	c3                   	ret    
c00102c1:	90                   	nop

c00102c2 <Pipe::~Pipe()>:
c00102c2:	83 ec 0c             	sub    esp,0xc
c00102c5:	ba 98 b0 02 c0       	mov    edx,0xc002b098
c00102ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102ce:	89 10                	mov    DWORD PTR [eax],edx
c00102d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102d4:	83 ec 0c             	sub    esp,0xc
c00102d7:	50                   	push   eax
c00102d8:	e8 0f 15 00 00       	call   c00117ec <UnixFile::~UnixFile()>
c00102dd:	83 c4 10             	add    esp,0x10
c00102e0:	90                   	nop
c00102e1:	83 c4 0c             	add    esp,0xc
c00102e4:	c3                   	ret    
c00102e5:	90                   	nop

c00102e6 <Pipe::~Pipe()>:
c00102e6:	83 ec 0c             	sub    esp,0xc
c00102e9:	83 ec 0c             	sub    esp,0xc
c00102ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102f0:	e8 cd ff ff ff       	call   c00102c2 <Pipe::~Pipe()>
c00102f5:	83 c4 10             	add    esp,0x10
c00102f8:	83 ec 08             	sub    esp,0x8
c00102fb:	6a 20                	push   0x20
c00102fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010301:	e8 6d 2a 00 00       	call   c0012d73 <operator delete(void*, unsigned long)>
c0010306:	83 c4 10             	add    esp,0x10
c0010309:	83 c4 0c             	add    esp,0xc
c001030c:	c3                   	ret    
c001030d:	90                   	nop

c001030e <Pipe::read(unsigned long long, void*, int*)>:
c001030e:	55                   	push   ebp
c001030f:	57                   	push   edi
c0010310:	56                   	push   esi
c0010311:	53                   	push   ebx
c0010312:	83 ec 1c             	sub    esp,0x1c
c0010315:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010319:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001031d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010321:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0010324:	89 c8                	mov    eax,ecx
c0010326:	99                   	cdq    
c0010327:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c001032b:	74 24                	je     c0010351 <Pipe::read(unsigned long long, void*, int*)+0x43>
c001032d:	39 f9                	cmp    ecx,edi
c001032f:	89 d1                	mov    ecx,edx
c0010331:	19 f1                	sbb    ecx,esi
c0010333:	73 1c                	jae    c0010351 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0010335:	fa                   	cli    
c0010336:	ff 05 c8 27 03 c0    	inc    DWORD PTR ds:0xc00327c8
c001033c:	e8 5f e3 00 00       	call   c001e6a0 <schedule()>
c0010341:	a1 c8 27 03 c0       	mov    eax,ds:0xc00327c8
c0010346:	48                   	dec    eax
c0010347:	a3 c8 27 03 c0       	mov    ds:0xc00327c8,eax
c001034c:	75 d3                	jne    c0010321 <Pipe::read(unsigned long long, void*, int*)+0x13>
c001034e:	fb                   	sti    
c001034f:	eb d0                	jmp    c0010321 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0010351:	39 f8                	cmp    eax,edi
c0010353:	89 d1                	mov    ecx,edx
c0010355:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010358:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c001035c:	19 f1                	sbb    ecx,esi
c001035e:	73 07                	jae    c0010367 <Pipe::read(unsigned long long, void*, int*)+0x59>
c0010360:	89 04 24             	mov    DWORD PTR [esp],eax
c0010363:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010367:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c001036a:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c001036d:	29 f7                	sub    edi,esi
c001036f:	89 f8                	mov    eax,edi
c0010371:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0010375:	99                   	cdq    
c0010376:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0010379:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001037d:	19 d0                	sbb    eax,edx
c001037f:	73 07                	jae    c0010388 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c0010381:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0010384:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010388:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c001038b:	89 ea                	mov    edx,ebp
c001038d:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0010391:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0010396:	74 0d                	je     c00103a5 <Pipe::read(unsigned long long, void*, int*)+0x97>
c0010398:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001039b:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001039f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00103a3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00103a5:	85 d2                	test   edx,edx
c00103a7:	74 11                	je     c00103ba <Pipe::read(unsigned long long, void*, int*)+0xac>
c00103a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00103ad:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00103b0:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00103b4:	89 d1                	mov    ecx,edx
c00103b6:	89 c7                	mov    edi,eax
c00103b8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00103ba:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00103bd:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00103c0:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00103c3:	99                   	cdq    
c00103c4:	89 f7                	mov    edi,esi
c00103c6:	03 04 24             	add    eax,DWORD PTR [esp]
c00103c9:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c00103cd:	c1 ff 1f             	sar    edi,0x1f
c00103d0:	57                   	push   edi
c00103d1:	56                   	push   esi
c00103d2:	52                   	push   edx
c00103d3:	50                   	push   eax
c00103d4:	e8 0b 73 01 00       	call   c00276e4 <__umoddi3>
c00103d9:	83 c4 10             	add    esp,0x10
c00103dc:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00103df:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00103e4:	75 10                	jne    c00103f6 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c00103e6:	83 ec 0c             	sub    esp,0xc
c00103e9:	68 55 b0 02 c0       	push   0xc002b055
c00103ee:	e8 fa a4 00 00       	call   c001a8ed <Krnl::panic(char const*)>
c00103f3:	83 c4 10             	add    esp,0x10
c00103f6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00103fa:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00103fd:	89 10                	mov    DWORD PTR [eax],edx
c00103ff:	83 c4 1c             	add    esp,0x1c
c0010402:	31 c0                	xor    eax,eax
c0010404:	5b                   	pop    ebx
c0010405:	5e                   	pop    esi
c0010406:	5f                   	pop    edi
c0010407:	5d                   	pop    ebp
c0010408:	c3                   	ret    
c0010409:	90                   	nop

c001040a <Pipe::write(unsigned long long, void*, int*)>:
c001040a:	55                   	push   ebp
c001040b:	57                   	push   edi
c001040c:	56                   	push   esi
c001040d:	53                   	push   ebx
c001040e:	83 ec 1c             	sub    esp,0x1c
c0010411:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010415:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010419:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001041c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0010420:	89 04 24             	mov    DWORD PTR [esp],eax
c0010423:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010427:	89 d8                	mov    eax,ebx
c0010429:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c001042c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0010430:	89 d6                	mov    esi,edx
c0010432:	89 d7                	mov    edi,edx
c0010434:	c1 ff 1f             	sar    edi,0x1f
c0010437:	03 34 24             	add    esi,DWORD PTR [esp]
c001043a:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c001043e:	c1 f8 1f             	sar    eax,0x1f
c0010441:	39 f3                	cmp    ebx,esi
c0010443:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010447:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001044b:	19 f8                	sbb    eax,edi
c001044d:	b8 01 00 00 00       	mov    eax,0x1
c0010452:	72 6e                	jb     c00104c2 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c0010454:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0010457:	01 d0                	add    eax,edx
c0010459:	99                   	cdq    
c001045a:	f7 fb                	idiv   ebx
c001045c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010460:	29 d3                	sub    ebx,edx
c0010462:	89 d7                	mov    edi,edx
c0010464:	89 de                	mov    esi,ebx
c0010466:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0010469:	c1 fb 1f             	sar    ebx,0x1f
c001046c:	39 f2                	cmp    edx,esi
c001046e:	19 d8                	sbb    eax,ebx
c0010470:	b8 00 00 00 00       	mov    eax,0x0
c0010475:	72 04                	jb     c001047b <Pipe::write(unsigned long long, void*, int*)+0x71>
c0010477:	89 d0                	mov    eax,edx
c0010479:	29 f0                	sub    eax,esi
c001047b:	89 d3                	mov    ebx,edx
c001047d:	29 c3                	sub    ebx,eax
c001047f:	74 0b                	je     c001048c <Pipe::write(unsigned long long, void*, int*)+0x82>
c0010481:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0010484:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0010488:	89 d9                	mov    ecx,ebx
c001048a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001048c:	85 c0                	test   eax,eax
c001048e:	74 0d                	je     c001049d <Pipe::write(unsigned long long, void*, int*)+0x93>
c0010490:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0010494:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0010497:	89 de                	mov    esi,ebx
c0010499:	89 c1                	mov    ecx,eax
c001049b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001049d:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c00104a0:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00104a5:	75 10                	jne    c00104b7 <Pipe::write(unsigned long long, void*, int*)+0xad>
c00104a7:	83 ec 0c             	sub    esp,0xc
c00104aa:	68 71 b0 02 c0       	push   0xc002b071
c00104af:	e8 39 a4 00 00       	call   c001a8ed <Krnl::panic(char const*)>
c00104b4:	83 c4 10             	add    esp,0x10
c00104b7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00104bb:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00104be:	89 08                	mov    DWORD PTR [eax],ecx
c00104c0:	31 c0                	xor    eax,eax
c00104c2:	83 c4 1c             	add    esp,0x1c
c00104c5:	5b                   	pop    ebx
c00104c6:	5e                   	pop    esi
c00104c7:	5f                   	pop    edi
c00104c8:	5d                   	pop    ebp
c00104c9:	c3                   	ret    

c00104ca <Pipe::Pipe(int)>:
c00104ca:	83 ec 0c             	sub    esp,0xc
c00104cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104d1:	83 ec 08             	sub    esp,0x8
c00104d4:	6a 00                	push   0x0
c00104d6:	50                   	push   eax
c00104d7:	e8 2e 11 00 00       	call   c001160a <UnixFile::UnixFile(int)>
c00104dc:	83 c4 10             	add    esp,0x10
c00104df:	ba 98 b0 02 c0       	mov    edx,0xc002b098
c00104e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104e8:	89 10                	mov    DWORD PTR [eax],edx
c00104ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104ee:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00104f2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00104f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104f9:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0010500:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010504:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001050b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001050f:	83 ec 0c             	sub    esp,0xc
c0010512:	50                   	push   eax
c0010513:	e8 90 f3 ff ff       	call   c000f8a8 <malloc>
c0010518:	83 c4 10             	add    esp,0x10
c001051b:	89 c2                	mov    edx,eax
c001051d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010521:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010524:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010528:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c001052c:	90                   	nop
c001052d:	83 c4 0c             	add    esp,0xc
c0010530:	c3                   	ret    
c0010531:	90                   	nop

c0010532 <VgaText::isAtty()>:
c0010532:	b0 01                	mov    al,0x1
c0010534:	c3                   	ret    
c0010535:	90                   	nop

c0010536 <VgaText::~VgaText()>:
c0010536:	83 ec 0c             	sub    esp,0xc
c0010539:	ba 54 b1 02 c0       	mov    edx,0xc002b154
c001053e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010542:	89 10                	mov    DWORD PTR [eax],edx
c0010544:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010548:	83 ec 0c             	sub    esp,0xc
c001054b:	50                   	push   eax
c001054c:	e8 9b 12 00 00       	call   c00117ec <UnixFile::~UnixFile()>
c0010551:	83 c4 10             	add    esp,0x10
c0010554:	90                   	nop
c0010555:	83 c4 0c             	add    esp,0xc
c0010558:	c3                   	ret    
c0010559:	90                   	nop

c001055a <VgaText::~VgaText()>:
c001055a:	83 ec 0c             	sub    esp,0xc
c001055d:	83 ec 0c             	sub    esp,0xc
c0010560:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010564:	e8 cd ff ff ff       	call   c0010536 <VgaText::~VgaText()>
c0010569:	83 c4 10             	add    esp,0x10
c001056c:	83 ec 08             	sub    esp,0x8
c001056f:	68 c4 02 00 00       	push   0x2c4
c0010574:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010578:	e8 f6 27 00 00       	call   c0012d73 <operator delete(void*, unsigned long)>
c001057d:	83 c4 10             	add    esp,0x10
c0010580:	83 c4 0c             	add    esp,0xc
c0010583:	c3                   	ret    

c0010584 <VgaText::read(unsigned long long, void*, int*)>:
c0010584:	83 ec 10             	sub    esp,0x10
c0010587:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001058b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001058f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010593:	e8 6a 5d 00 00       	call   c0016302 <readKeyboard(VgaText*, char*, unsigned long)>
c0010598:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001059c:	89 02                	mov    DWORD PTR [edx],eax
c001059e:	31 c0                	xor    eax,eax
c00105a0:	83 c4 1c             	add    esp,0x1c
c00105a3:	c3                   	ret    

c00105a4 <setTerminalScrollLock(bool)>:
c00105a4:	c3                   	ret    

c00105a5 <addToTerminalCycle(VgaText*)>:
c00105a5:	8b 15 60 f3 02 c0    	mov    edx,DWORD PTR ds:0xc002f360
c00105ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105af:	85 d2                	test   edx,edx
c00105b1:	75 09                	jne    c00105bc <addToTerminalCycle(VgaText*)+0x17>
c00105b3:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c00105b6:	a3 60 f3 02 c0       	mov    ds:0xc002f360,eax
c00105bb:	c3                   	ret    
c00105bc:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c00105bf:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c00105c2:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c00105c5:	c3                   	ret    

c00105c6 <installVgaTextImplementation()>:
c00105c6:	83 ec 10             	sub    esp,0x10
c00105c9:	6a 20                	push   0x20
c00105cb:	6a 00                	push   0x0
c00105cd:	68 40 f3 02 c0       	push   0xc002f340
c00105d2:	e8 95 01 ff ff       	call   c000076c <memset>
c00105d7:	83 c4 1c             	add    esp,0x1c
c00105da:	c3                   	ret    

c00105db <scrollTerminalScrollLock(int)>:
c00105db:	c3                   	ret    

c00105dc <VgaText::load()>:
c00105dc:	53                   	push   ebx
c00105dd:	31 c0                	xor    eax,eax
c00105df:	83 ec 58             	sub    esp,0x58
c00105e2:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00105e6:	89 e2                	mov    edx,esp
c00105e8:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c00105ec:	40                   	inc    eax
c00105ed:	83 f8 50             	cmp    eax,0x50
c00105f0:	75 f6                	jne    c00105e8 <VgaText::load()+0xc>
c00105f2:	31 c0                	xor    eax,eax
c00105f4:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c00105fb:	84 c9                	test   cl,cl
c00105fd:	74 06                	je     c0010605 <VgaText::load()+0x29>
c00105ff:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0010602:	40                   	inc    eax
c0010603:	eb ef                	jmp    c00105f4 <VgaText::load()+0x18>
c0010605:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c0010608:	85 c0                	test   eax,eax
c001060a:	74 09                	je     c0010615 <VgaText::load()+0x39>
c001060c:	51                   	push   ecx
c001060d:	51                   	push   ecx
c001060e:	52                   	push   edx
c001060f:	53                   	push   ebx
c0010610:	ff d0                	call   eax
c0010612:	83 c4 10             	add    esp,0x10
c0010615:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c0010618:	85 c0                	test   eax,eax
c001061a:	74 09                	je     c0010625 <VgaText::load()+0x49>
c001061c:	83 ec 0c             	sub    esp,0xc
c001061f:	53                   	push   ebx
c0010620:	ff d0                	call   eax
c0010622:	83 c4 10             	add    esp,0x10
c0010625:	83 c4 58             	add    esp,0x58
c0010628:	5b                   	pop    ebx
c0010629:	c3                   	ret    

c001062a <VgaText::updateCursor()>:
c001062a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001062e:	39 05 64 f3 02 c0    	cmp    DWORD PTR ds:0xc002f364,eax
c0010634:	75 09                	jne    c001063f <VgaText::updateCursor()+0x15>
c0010636:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c0010639:	85 c0                	test   eax,eax
c001063b:	74 02                	je     c001063f <VgaText::updateCursor()+0x15>
c001063d:	ff e0                	jmp    eax
c001063f:	c3                   	ret    

c0010640 <VgaText::showCursor(bool)>:
c0010640:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010644:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010648:	88 50 20             	mov    BYTE PTR [eax+0x20],dl
c001064b:	c3                   	ret    

c001064c <VgaText::disableBlink(bool)>:
c001064c:	56                   	push   esi
c001064d:	53                   	push   ebx
c001064e:	51                   	push   ecx
c001064f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010653:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010657:	39 1d 64 f3 02 c0    	cmp    DWORD PTR ds:0xc002f364,ebx
c001065d:	75 15                	jne    c0010674 <VgaText::disableBlink(bool)+0x28>
c001065f:	8b 43 78             	mov    eax,DWORD PTR [ebx+0x78]
c0010662:	85 c0                	test   eax,eax
c0010664:	74 0e                	je     c0010674 <VgaText::disableBlink(bool)+0x28>
c0010666:	89 f1                	mov    ecx,esi
c0010668:	52                   	push   edx
c0010669:	52                   	push   edx
c001066a:	0f b6 d1             	movzx  edx,cl
c001066d:	52                   	push   edx
c001066e:	53                   	push   ebx
c001066f:	ff d0                	call   eax
c0010671:	83 c4 10             	add    esp,0x10
c0010674:	89 f0                	mov    eax,esi
c0010676:	83 f0 01             	xor    eax,0x1
c0010679:	88 43 21             	mov    BYTE PTR [ebx+0x21],al
c001067c:	58                   	pop    eax
c001067d:	5b                   	pop    ebx
c001067e:	5e                   	pop    esi
c001067f:	c3                   	ret    

c0010680 <VgaText::doANSI_SGR(int)>:
c0010680:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010684:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010688:	85 d2                	test   edx,edx
c001068a:	75 0b                	jne    c0010697 <VgaText::doANSI_SGR(int)+0x17>
c001068c:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c001068f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010692:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010695:	eb 59                	jmp    c00106f0 <VgaText::doANSI_SGR(int)+0x70>
c0010697:	83 fa 07             	cmp    edx,0x7
c001069a:	75 0b                	jne    c00106a7 <VgaText::doANSI_SGR(int)+0x27>
c001069c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001069f:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00106a2:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c00106a5:	eb 49                	jmp    c00106f0 <VgaText::doANSI_SGR(int)+0x70>
c00106a7:	83 fa 1b             	cmp    edx,0x1b
c00106aa:	74 e0                	je     c001068c <VgaText::doANSI_SGR(int)+0xc>
c00106ac:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00106af:	83 f9 07             	cmp    ecx,0x7
c00106b2:	77 09                	ja     c00106bd <VgaText::doANSI_SGR(int)+0x3d>
c00106b4:	8b 14 8d e0 e1 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd1e20]
c00106bb:	eb 20                	jmp    c00106dd <VgaText::doANSI_SGR(int)+0x5d>
c00106bd:	8d 4a d8             	lea    ecx,[edx-0x28]
c00106c0:	83 f9 07             	cmp    ecx,0x7
c00106c3:	77 09                	ja     c00106ce <VgaText::doANSI_SGR(int)+0x4e>
c00106c5:	8b 14 8d e0 e1 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd1e20]
c00106cc:	eb 22                	jmp    c00106f0 <VgaText::doANSI_SGR(int)+0x70>
c00106ce:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00106d1:	83 f9 07             	cmp    ecx,0x7
c00106d4:	77 0b                	ja     c00106e1 <VgaText::doANSI_SGR(int)+0x61>
c00106d6:	8b 14 95 98 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1f68]
c00106dd:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00106e0:	c3                   	ret    
c00106e1:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00106e4:	83 f9 07             	cmp    ecx,0x7
c00106e7:	77 0a                	ja     c00106f3 <VgaText::doANSI_SGR(int)+0x73>
c00106e9:	8b 14 95 70 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1f90]
c00106f0:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00106f3:	c3                   	ret    

c00106f4 <VgaText::setDefaultBgColour(VgaColour)>:
c00106f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106fc:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00106ff:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010702:	c3                   	ret    
c0010703:	90                   	nop

c0010704 <VgaText::setDefaultFgColour(VgaColour)>:
c0010704:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010708:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001070c:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001070f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010712:	c3                   	ret    
c0010713:	90                   	nop

c0010714 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0010714:	53                   	push   ebx
c0010715:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010719:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001071d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010721:	51                   	push   ecx
c0010722:	e8 cd ff ff ff       	call   c00106f4 <VgaText::setDefaultBgColour(VgaColour)>
c0010727:	58                   	pop    eax
c0010728:	5a                   	pop    edx
c0010729:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001072d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010731:	5b                   	pop    ebx
c0010732:	eb d0                	jmp    c0010704 <VgaText::setDefaultFgColour(VgaColour)>

c0010734 <VgaText::combineColours(unsigned char, unsigned char)>:
c0010734:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0010738:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001073d:	83 e0 0f             	and    eax,0xf
c0010740:	c1 e2 04             	shl    edx,0x4
c0010743:	09 d0                	or     eax,edx
c0010745:	c3                   	ret    

c0010746 <VgaText::scrollScreen()>:
c0010746:	55                   	push   ebp
c0010747:	b9 01 00 00 00       	mov    ecx,0x1
c001074c:	57                   	push   edi
c001074d:	56                   	push   esi
c001074e:	53                   	push   ebx
c001074f:	83 ec 0c             	sub    esp,0xc
c0010752:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010756:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c001075c:	31 ff                	xor    edi,edi
c001075e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0010761:	83 f9 17             	cmp    ecx,0x17
c0010764:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c0010767:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c001076e:	75 27                	jne    c0010797 <VgaText::scrollScreen()+0x51>
c0010770:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0010773:	01 f5                	add    ebp,esi
c0010775:	f7 c7 01 00 00 00    	test   edi,0x1
c001077b:	74 16                	je     c0010793 <VgaText::scrollScreen()+0x4d>
c001077d:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0010781:	50                   	push   eax
c0010782:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0010786:	50                   	push   eax
c0010787:	e8 a8 ff ff ff       	call   c0010734 <VgaText::combineColours(unsigned char, unsigned char)>
c001078c:	5a                   	pop    edx
c001078d:	5a                   	pop    edx
c001078e:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0010791:	eb 04                	jmp    c0010797 <VgaText::scrollScreen()+0x51>
c0010793:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c0010797:	47                   	inc    edi
c0010798:	46                   	inc    esi
c0010799:	81 ff a0 00 00 00    	cmp    edi,0xa0
c001079f:	75 bd                	jne    c001075e <VgaText::scrollScreen()+0x18>
c00107a1:	41                   	inc    ecx
c00107a2:	83 f9 18             	cmp    ecx,0x18
c00107a5:	75 af                	jne    c0010756 <VgaText::scrollScreen()+0x10>
c00107a7:	39 1d 64 f3 02 c0    	cmp    DWORD PTR ds:0xc002f364,ebx
c00107ad:	75 1b                	jne    c00107ca <VgaText::scrollScreen()+0x84>
c00107af:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c00107b3:	74 05                	je     c00107ba <VgaText::scrollScreen()+0x74>
c00107b5:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c00107b8:	eb 10                	jmp    c00107ca <VgaText::scrollScreen()+0x84>
c00107ba:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c00107bd:	85 c0                	test   eax,eax
c00107bf:	74 09                	je     c00107ca <VgaText::scrollScreen()+0x84>
c00107c1:	83 ec 0c             	sub    esp,0xc
c00107c4:	53                   	push   ebx
c00107c5:	ff d0                	call   eax
c00107c7:	83 c4 10             	add    esp,0x10
c00107ca:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00107ce:	83 c4 0c             	add    esp,0xc
c00107d1:	5b                   	pop    ebx
c00107d2:	5e                   	pop    esi
c00107d3:	5f                   	pop    edi
c00107d4:	5d                   	pop    ebp
c00107d5:	e9 50 fe ff ff       	jmp    c001062a <VgaText::updateCursor()>

c00107da <VgaText::combineCharAndColour(char, unsigned char)>:
c00107da:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00107df:	c1 e0 08             	shl    eax,0x8
c00107e2:	89 c2                	mov    edx,eax
c00107e4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00107e9:	09 d0                	or     eax,edx
c00107eb:	c3                   	ret    

c00107ec <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00107ec:	56                   	push   esi
c00107ed:	53                   	push   ebx
c00107ee:	51                   	push   ecx
c00107ef:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00107f3:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00107f8:	50                   	push   eax
c00107f9:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00107fe:	50                   	push   eax
c00107ff:	e8 30 ff ff ff       	call   c0010734 <VgaText::combineColours(unsigned char, unsigned char)>
c0010804:	5b                   	pop    ebx
c0010805:	0f b6 c0             	movzx  eax,al
c0010808:	5e                   	pop    esi
c0010809:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c001080e:	50                   	push   eax
c001080f:	53                   	push   ebx
c0010810:	e8 c5 ff ff ff       	call   c00107da <VgaText::combineCharAndColour(char, unsigned char)>
c0010815:	5a                   	pop    edx
c0010816:	5e                   	pop    esi
c0010817:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c001081a:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c0010820:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0010824:	0f b7 d2             	movzx  edx,dx
c0010827:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c001082b:	39 0d 64 f3 02 c0    	cmp    DWORD PTR ds:0xc002f364,ecx
c0010831:	75 10                	jne    c0010843 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c0010833:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c0010836:	85 c0                	test   eax,eax
c0010838:	74 09                	je     c0010843 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c001083a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001083e:	5a                   	pop    edx
c001083f:	5b                   	pop    ebx
c0010840:	5e                   	pop    esi
c0010841:	ff e0                	jmp    eax
c0010843:	58                   	pop    eax
c0010844:	5b                   	pop    ebx
c0010845:	5e                   	pop    esi
c0010846:	c3                   	ret    
c0010847:	90                   	nop

c0010848 <VgaText::getCursorX()>:
c0010848:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001084c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001084f:	c3                   	ret    

c0010850 <VgaText::getCursorY()>:
c0010850:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010854:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0010857:	c3                   	ret    

c0010858 <VgaText::setCursor(int, int)>:
c0010858:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001085c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010860:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0010863:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010867:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001086a:	e9 bb fd ff ff       	jmp    c001062a <VgaText::updateCursor()>
c001086f:	90                   	nop

c0010870 <VgaText::setCursorX(int)>:
c0010870:	83 ec 10             	sub    esp,0x10
c0010873:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010877:	ff 70 18             	push   DWORD PTR [eax+0x18]
c001087a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001087e:	50                   	push   eax
c001087f:	e8 d4 ff ff ff       	call   c0010858 <VgaText::setCursor(int, int)>
c0010884:	83 c4 1c             	add    esp,0x1c
c0010887:	c3                   	ret    

c0010888 <VgaText::setCursorY(int)>:
c0010888:	83 ec 10             	sub    esp,0x10
c001088b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001088f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010893:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0010896:	50                   	push   eax
c0010897:	e8 bc ff ff ff       	call   c0010858 <VgaText::setCursor(int, int)>
c001089c:	83 c4 1c             	add    esp,0x1c
c001089f:	c3                   	ret    

c00108a0 <VgaText::incrementCursor(bool)>:
c00108a0:	56                   	push   esi
c00108a1:	53                   	push   ebx
c00108a2:	51                   	push   ecx
c00108a3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00108a7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00108ab:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00108ae:	40                   	inc    eax
c00108af:	83 f8 50             	cmp    eax,0x50
c00108b2:	74 05                	je     c00108b9 <VgaText::incrementCursor(bool)+0x19>
c00108b4:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00108b7:	eb 24                	jmp    c00108dd <VgaText::incrementCursor(bool)+0x3d>
c00108b9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00108bc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00108c3:	8d 50 01             	lea    edx,[eax+0x1]
c00108c6:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00108c9:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00108cc:	75 0f                	jne    c00108dd <VgaText::incrementCursor(bool)+0x3d>
c00108ce:	83 ec 0c             	sub    esp,0xc
c00108d1:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00108d4:	53                   	push   ebx
c00108d5:	e8 6c fe ff ff       	call   c0010746 <VgaText::scrollScreen()>
c00108da:	83 c4 10             	add    esp,0x10
c00108dd:	89 f0                	mov    eax,esi
c00108df:	84 c0                	test   al,al
c00108e1:	74 0c                	je     c00108ef <VgaText::incrementCursor(bool)+0x4f>
c00108e3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00108e7:	5a                   	pop    edx
c00108e8:	5b                   	pop    ebx
c00108e9:	5e                   	pop    esi
c00108ea:	e9 3b fd ff ff       	jmp    c001062a <VgaText::updateCursor()>
c00108ef:	58                   	pop    eax
c00108f0:	5b                   	pop    ebx
c00108f1:	5e                   	pop    esi
c00108f2:	c3                   	ret    
c00108f3:	90                   	nop

c00108f4 <VgaText::updateRAMUsageDisplay(int)>:
c00108f4:	56                   	push   esi
c00108f5:	8b 35 c0 e1 02 c0    	mov    esi,DWORD PTR ds:0xc002e1c0
c00108fb:	53                   	push   ebx
c00108fc:	bb 0a 00 00 00       	mov    ebx,0xa
c0010901:	6a 0f                	push   0xf
c0010903:	6a 00                	push   0x0
c0010905:	e8 2a fe ff ff       	call   c0010734 <VgaText::combineColours(unsigned char, unsigned char)>
c001090a:	5a                   	pop    edx
c001090b:	59                   	pop    ecx
c001090c:	0f b6 c8             	movzx  ecx,al
c001090f:	51                   	push   ecx
c0010910:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010914:	99                   	cdq    
c0010915:	f7 fb                	idiv   ebx
c0010917:	89 d3                	mov    ebx,edx
c0010919:	83 c0 30             	add    eax,0x30
c001091c:	83 c3 30             	add    ebx,0x30
c001091f:	0f be c0             	movsx  eax,al
c0010922:	0f b6 db             	movzx  ebx,bl
c0010925:	50                   	push   eax
c0010926:	e8 af fe ff ff       	call   c00107da <VgaText::combineCharAndColour(char, unsigned char)>
c001092b:	5a                   	pop    edx
c001092c:	5a                   	pop    edx
c001092d:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c0010934:	51                   	push   ecx
c0010935:	53                   	push   ebx
c0010936:	e8 9f fe ff ff       	call   c00107da <VgaText::combineCharAndColour(char, unsigned char)>
c001093b:	5b                   	pop    ebx
c001093c:	5a                   	pop    edx
c001093d:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c0010944:	51                   	push   ecx
c0010945:	6a 25                	push   0x25
c0010947:	e8 8e fe ff ff       	call   c00107da <VgaText::combineCharAndColour(char, unsigned char)>
c001094c:	59                   	pop    ecx
c001094d:	5b                   	pop    ebx
c001094e:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c0010955:	5b                   	pop    ebx
c0010956:	5e                   	pop    esi
c0010957:	c3                   	ret    

c0010958 <VgaText::updateDiskUsage()>:
c0010958:	55                   	push   ebp
c0010959:	bd 10 27 00 00       	mov    ebp,0x2710
c001095e:	57                   	push   edi
c001095f:	8b 3d c0 e1 02 c0    	mov    edi,DWORD PTR ds:0xc002e1c0
c0010965:	56                   	push   esi
c0010966:	53                   	push   ebx
c0010967:	6a 0f                	push   0xf
c0010969:	6a 00                	push   0x0
c001096b:	e8 c4 fd ff ff       	call   c0010734 <VgaText::combineColours(unsigned char, unsigned char)>
c0010970:	5a                   	pop    edx
c0010971:	0f b6 d8             	movzx  ebx,al
c0010974:	59                   	pop    ecx
c0010975:	8b 35 f4 35 03 c0    	mov    esi,DWORD PTR ds:0xc00335f4
c001097b:	53                   	push   ebx
c001097c:	b9 0a 00 00 00       	mov    ecx,0xa
c0010981:	89 f0                	mov    eax,esi
c0010983:	99                   	cdq    
c0010984:	f7 fd                	idiv   ebp
c0010986:	99                   	cdq    
c0010987:	f7 f9                	idiv   ecx
c0010989:	8d 42 30             	lea    eax,[edx+0x30]
c001098c:	0f b6 c0             	movzx  eax,al
c001098f:	50                   	push   eax
c0010990:	e8 45 fe ff ff       	call   c00107da <VgaText::combineCharAndColour(char, unsigned char)>
c0010995:	5d                   	pop    ebp
c0010996:	bd e8 03 00 00       	mov    ebp,0x3e8
c001099b:	5a                   	pop    edx
c001099c:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c00109a0:	53                   	push   ebx
c00109a1:	89 f0                	mov    eax,esi
c00109a3:	99                   	cdq    
c00109a4:	f7 fd                	idiv   ebp
c00109a6:	99                   	cdq    
c00109a7:	f7 f9                	idiv   ecx
c00109a9:	8d 42 30             	lea    eax,[edx+0x30]
c00109ac:	0f b6 c0             	movzx  eax,al
c00109af:	50                   	push   eax
c00109b0:	e8 25 fe ff ff       	call   c00107da <VgaText::combineCharAndColour(char, unsigned char)>
c00109b5:	5d                   	pop    ebp
c00109b6:	bd 64 00 00 00       	mov    ebp,0x64
c00109bb:	5a                   	pop    edx
c00109bc:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c00109c3:	53                   	push   ebx
c00109c4:	89 f0                	mov    eax,esi
c00109c6:	99                   	cdq    
c00109c7:	f7 fd                	idiv   ebp
c00109c9:	99                   	cdq    
c00109ca:	f7 f9                	idiv   ecx
c00109cc:	8d 42 30             	lea    eax,[edx+0x30]
c00109cf:	0f b6 c0             	movzx  eax,al
c00109d2:	50                   	push   eax
c00109d3:	e8 02 fe ff ff       	call   c00107da <VgaText::combineCharAndColour(char, unsigned char)>
c00109d8:	5d                   	pop    ebp
c00109d9:	5a                   	pop    edx
c00109da:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c00109e1:	53                   	push   ebx
c00109e2:	89 f0                	mov    eax,esi
c00109e4:	99                   	cdq    
c00109e5:	f7 f9                	idiv   ecx
c00109e7:	89 d6                	mov    esi,edx
c00109e9:	99                   	cdq    
c00109ea:	f7 f9                	idiv   ecx
c00109ec:	8d 42 30             	lea    eax,[edx+0x30]
c00109ef:	0f b6 c0             	movzx  eax,al
c00109f2:	50                   	push   eax
c00109f3:	e8 e2 fd ff ff       	call   c00107da <VgaText::combineCharAndColour(char, unsigned char)>
c00109f8:	5d                   	pop    ebp
c00109f9:	5a                   	pop    edx
c00109fa:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c0010a01:	53                   	push   ebx
c0010a02:	8d 46 30             	lea    eax,[esi+0x30]
c0010a05:	0f b6 f0             	movzx  esi,al
c0010a08:	56                   	push   esi
c0010a09:	e8 cc fd ff ff       	call   c00107da <VgaText::combineCharAndColour(char, unsigned char)>
c0010a0e:	5e                   	pop    esi
c0010a0f:	8b 35 f0 35 03 c0    	mov    esi,DWORD PTR ds:0xc00335f0
c0010a15:	5d                   	pop    ebp
c0010a16:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c0010a1d:	bd 10 27 00 00       	mov    ebp,0x2710
c0010a22:	53                   	push   ebx
c0010a23:	89 f0                	mov    eax,esi
c0010a25:	99                   	cdq    
c0010a26:	f7 fd                	idiv   ebp
c0010a28:	99                   	cdq    
c0010a29:	f7 f9                	idiv   ecx
c0010a2b:	8d 42 30             	lea    eax,[edx+0x30]
c0010a2e:	0f b6 c0             	movzx  eax,al
c0010a31:	50                   	push   eax
c0010a32:	e8 a3 fd ff ff       	call   c00107da <VgaText::combineCharAndColour(char, unsigned char)>
c0010a37:	5a                   	pop    edx
c0010a38:	5d                   	pop    ebp
c0010a39:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010a40:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010a45:	53                   	push   ebx
c0010a46:	89 f0                	mov    eax,esi
c0010a48:	99                   	cdq    
c0010a49:	f7 fd                	idiv   ebp
c0010a4b:	99                   	cdq    
c0010a4c:	f7 f9                	idiv   ecx
c0010a4e:	8d 42 30             	lea    eax,[edx+0x30]
c0010a51:	0f b6 c0             	movzx  eax,al
c0010a54:	50                   	push   eax
c0010a55:	e8 80 fd ff ff       	call   c00107da <VgaText::combineCharAndColour(char, unsigned char)>
c0010a5a:	5a                   	pop    edx
c0010a5b:	5d                   	pop    ebp
c0010a5c:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010a63:	bd 64 00 00 00       	mov    ebp,0x64
c0010a68:	53                   	push   ebx
c0010a69:	89 f0                	mov    eax,esi
c0010a6b:	99                   	cdq    
c0010a6c:	f7 fd                	idiv   ebp
c0010a6e:	99                   	cdq    
c0010a6f:	f7 f9                	idiv   ecx
c0010a71:	83 c2 30             	add    edx,0x30
c0010a74:	0f b6 d2             	movzx  edx,dl
c0010a77:	52                   	push   edx
c0010a78:	e8 5d fd ff ff       	call   c00107da <VgaText::combineCharAndColour(char, unsigned char)>
c0010a7d:	5a                   	pop    edx
c0010a7e:	5d                   	pop    ebp
c0010a7f:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010a86:	53                   	push   ebx
c0010a87:	89 f0                	mov    eax,esi
c0010a89:	99                   	cdq    
c0010a8a:	f7 f9                	idiv   ecx
c0010a8c:	89 d6                	mov    esi,edx
c0010a8e:	99                   	cdq    
c0010a8f:	f7 f9                	idiv   ecx
c0010a91:	8d 42 30             	lea    eax,[edx+0x30]
c0010a94:	0f b6 c0             	movzx  eax,al
c0010a97:	50                   	push   eax
c0010a98:	e8 3d fd ff ff       	call   c00107da <VgaText::combineCharAndColour(char, unsigned char)>
c0010a9d:	5a                   	pop    edx
c0010a9e:	59                   	pop    ecx
c0010a9f:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010aa6:	53                   	push   ebx
c0010aa7:	8d 46 30             	lea    eax,[esi+0x30]
c0010aaa:	0f b6 f0             	movzx  esi,al
c0010aad:	56                   	push   esi
c0010aae:	e8 27 fd ff ff       	call   c00107da <VgaText::combineCharAndColour(char, unsigned char)>
c0010ab3:	5b                   	pop    ebx
c0010ab4:	5e                   	pop    esi
c0010ab5:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010abc:	5b                   	pop    ebx
c0010abd:	5e                   	pop    esi
c0010abe:	5f                   	pop    edi
c0010abf:	5d                   	pop    ebp
c0010ac0:	c3                   	ret    
c0010ac1:	90                   	nop

c0010ac2 <VgaText::updateTitle()>:
c0010ac2:	53                   	push   ebx
c0010ac3:	31 c0                	xor    eax,eax
c0010ac5:	83 ec 58             	sub    esp,0x58
c0010ac8:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010acc:	89 e1                	mov    ecx,esp
c0010ace:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010ad2:	40                   	inc    eax
c0010ad3:	83 f8 50             	cmp    eax,0x50
c0010ad6:	75 f6                	jne    c0010ace <VgaText::updateTitle()+0xc>
c0010ad8:	31 c0                	xor    eax,eax
c0010ada:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c0010ae1:	84 db                	test   bl,bl
c0010ae3:	74 06                	je     c0010aeb <VgaText::updateTitle()+0x29>
c0010ae5:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010ae8:	40                   	inc    eax
c0010ae9:	eb ef                	jmp    c0010ada <VgaText::updateTitle()+0x18>
c0010aeb:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c0010aee:	85 c0                	test   eax,eax
c0010af0:	74 09                	je     c0010afb <VgaText::updateTitle()+0x39>
c0010af2:	53                   	push   ebx
c0010af3:	53                   	push   ebx
c0010af4:	51                   	push   ecx
c0010af5:	52                   	push   edx
c0010af6:	ff d0                	call   eax
c0010af8:	83 c4 10             	add    esp,0x10
c0010afb:	e8 58 fe ff ff       	call   c0010958 <VgaText::updateDiskUsage()>
c0010b00:	83 c4 58             	add    esp,0x58
c0010b03:	5b                   	pop    ebx
c0010b04:	c3                   	ret    
c0010b05:	90                   	nop

c0010b06 <VgaText::setTitleTextColour(VgaColour)>:
c0010b06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b0a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b0e:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0010b11:	eb af                	jmp    c0010ac2 <VgaText::updateTitle()>
c0010b13:	90                   	nop

c0010b14 <VgaText::setTitleColour(VgaColour)>:
c0010b14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b18:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b1c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010b1f:	eb a1                	jmp    c0010ac2 <VgaText::updateTitle()>
c0010b21:	90                   	nop

c0010b22 <VgaText::setTitle(char*)>:
c0010b22:	53                   	push   ebx
c0010b23:	83 ec 10             	sub    esp,0x10
c0010b26:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010b2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b2e:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c0010b34:	50                   	push   eax
c0010b35:	e8 ee fc fe ff       	call   c0000828 <strcpy>
c0010b3a:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010b3e:	83 c4 18             	add    esp,0x18
c0010b41:	5b                   	pop    ebx
c0010b42:	e9 7b ff ff ff       	jmp    c0010ac2 <VgaText::updateTitle()>
c0010b47:	90                   	nop

c0010b48 <VgaText::decrementCursor(bool)>:
c0010b48:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010b4c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010b50:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0010b53:	85 c0                	test   eax,eax
c0010b55:	74 04                	je     c0010b5b <VgaText::decrementCursor(bool)+0x13>
c0010b57:	48                   	dec    eax
c0010b58:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0010b5b:	84 c9                	test   cl,cl
c0010b5d:	74 09                	je     c0010b68 <VgaText::decrementCursor(bool)+0x20>
c0010b5f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010b63:	e9 c2 fa ff ff       	jmp    c001062a <VgaText::updateCursor()>
c0010b68:	c3                   	ret    
c0010b69:	90                   	nop

c0010b6a <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010b6a:	53                   	push   ebx
c0010b6b:	83 ec 08             	sub    esp,0x8
c0010b6e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010b72:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010b76:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010b7a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010b7e:	3c 07                	cmp    al,0x7
c0010b80:	75 2a                	jne    c0010bac <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010b82:	a1 18 f4 02 c0       	mov    eax,ds:0xc002f418
c0010b87:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010b8f:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010b97:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010b9f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010ba3:	83 c4 08             	add    esp,0x8
c0010ba6:	5b                   	pop    ebx
c0010ba7:	e9 b4 30 00 00       	jmp    c0013c60 <Buzzer::beep(int, int, bool)>
c0010bac:	3c 0d                	cmp    al,0xd
c0010bae:	75 09                	jne    c0010bb9 <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c0010bb0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010bb7:	eb 2c                	jmp    c0010be5 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0010bb9:	3c 0a                	cmp    al,0xa
c0010bbb:	75 31                	jne    c0010bee <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c0010bbd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010bc0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010bc7:	8d 50 01             	lea    edx,[eax+0x1]
c0010bca:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0010bcd:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0010bd0:	75 0f                	jne    c0010be1 <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c0010bd2:	83 ec 0c             	sub    esp,0xc
c0010bd5:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010bd8:	53                   	push   ebx
c0010bd9:	e8 68 fb ff ff       	call   c0010746 <VgaText::scrollScreen()>
c0010bde:	83 c4 10             	add    esp,0x10
c0010be1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010be5:	83 c4 08             	add    esp,0x8
c0010be8:	5b                   	pop    ebx
c0010be9:	e9 3c fa ff ff       	jmp    c001062a <VgaText::updateCursor()>
c0010bee:	3c 08                	cmp    al,0x8
c0010bf0:	75 25                	jne    c0010c17 <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c0010bf2:	50                   	push   eax
c0010bf3:	50                   	push   eax
c0010bf4:	6a 01                	push   0x1
c0010bf6:	53                   	push   ebx
c0010bf7:	e8 4c ff ff ff       	call   c0010b48 <VgaText::decrementCursor(bool)>
c0010bfc:	5a                   	pop    edx
c0010bfd:	59                   	pop    ecx
c0010bfe:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010c01:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010c04:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010c07:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010c0a:	6a 20                	push   0x20
c0010c0c:	53                   	push   ebx
c0010c0d:	e8 da fb ff ff       	call   c00107ec <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010c12:	83 c4 28             	add    esp,0x28
c0010c15:	5b                   	pop    ebx
c0010c16:	c3                   	ret    
c0010c17:	83 ec 08             	sub    esp,0x8
c0010c1a:	0f be c0             	movsx  eax,al
c0010c1d:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010c20:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010c23:	51                   	push   ecx
c0010c24:	52                   	push   edx
c0010c25:	50                   	push   eax
c0010c26:	53                   	push   ebx
c0010c27:	e8 c0 fb ff ff       	call   c00107ec <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010c2c:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010c30:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010c38:	83 c4 28             	add    esp,0x28
c0010c3b:	5b                   	pop    ebx
c0010c3c:	e9 5f fc ff ff       	jmp    c00108a0 <VgaText::incrementCursor(bool)>
c0010c41:	90                   	nop

c0010c42 <VgaText::isShowingCursor()>:
c0010c42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c46:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0010c49:	c3                   	ret    

c0010c4a <VgaText::isBlinkDisabled()>:
c0010c4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c4e:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0010c51:	83 f0 01             	xor    eax,0x1
c0010c54:	c3                   	ret    
c0010c55:	90                   	nop

c0010c56 <VgaText::setCursorHeight(int)>:
c0010c56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c5a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010c5e:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0010c61:	0f b6 40 20          	movzx  eax,BYTE PTR [eax+0x20]
c0010c65:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010c69:	e9 d2 f9 ff ff       	jmp    c0010640 <VgaText::showCursor(bool)>

c0010c6e <VgaText::getCursorHeight()>:
c0010c6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c72:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0010c75:	c3                   	ret    

c0010c76 <setActiveTerminal(VgaText*)>:
c0010c76:	53                   	push   ebx
c0010c77:	83 ec 08             	sub    esp,0x8
c0010c7a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c7e:	85 db                	test   ebx,ebx
c0010c80:	75 11                	jne    c0010c93 <setActiveTerminal(VgaText*)+0x1d>
c0010c82:	c7 44 24 10 ac b0 02 c0 	mov    DWORD PTR [esp+0x10],0xc002b0ac
c0010c8a:	83 c4 08             	add    esp,0x8
c0010c8d:	5b                   	pop    ebx
c0010c8e:	e9 5a 9c 00 00       	jmp    c001a8ed <Krnl::panic(char const*)>
c0010c93:	50                   	push   eax
c0010c94:	50                   	push   eax
c0010c95:	53                   	push   ebx
c0010c96:	68 ba b0 02 c0       	push   0xc002b0ba
c0010c9b:	e8 b3 21 00 00       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0010ca0:	a1 64 f3 02 c0       	mov    eax,ds:0xc002f364
c0010ca5:	83 c4 10             	add    esp,0x10
c0010ca8:	85 c0                	test   eax,eax
c0010caa:	74 0c                	je     c0010cb8 <setActiveTerminal(VgaText*)+0x42>
c0010cac:	83 ec 0c             	sub    esp,0xc
c0010caf:	50                   	push   eax
c0010cb0:	e8 75 f9 ff ff       	call   c001062a <VgaText::updateCursor()>
c0010cb5:	83 c4 10             	add    esp,0x10
c0010cb8:	89 1d 64 f3 02 c0    	mov    DWORD PTR ds:0xc002f364,ebx
c0010cbe:	51                   	push   ecx
c0010cbf:	51                   	push   ecx
c0010cc0:	53                   	push   ebx
c0010cc1:	68 d2 b0 02 c0       	push   0xc002b0d2
c0010cc6:	e8 88 21 00 00       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0010ccb:	83 c4 0c             	add    esp,0xc
c0010cce:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010cd1:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010cd4:	53                   	push   ebx
c0010cd5:	e8 7e fb ff ff       	call   c0010858 <VgaText::setCursor(int, int)>
c0010cda:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010cdd:	e8 68 ff ff ff       	call   c0010c4a <VgaText::isBlinkDisabled()>
c0010ce2:	5a                   	pop    edx
c0010ce3:	0f b6 c0             	movzx  eax,al
c0010ce6:	59                   	pop    ecx
c0010ce7:	50                   	push   eax
c0010ce8:	53                   	push   ebx
c0010ce9:	e8 5e f9 ff ff       	call   c001064c <VgaText::disableBlink(bool)>
c0010cee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010cf1:	e8 78 ff ff ff       	call   c0010c6e <VgaText::getCursorHeight()>
c0010cf6:	5a                   	pop    edx
c0010cf7:	59                   	pop    ecx
c0010cf8:	50                   	push   eax
c0010cf9:	53                   	push   ebx
c0010cfa:	e8 57 ff ff ff       	call   c0010c56 <VgaText::setCursorHeight(int)>
c0010cff:	83 c4 10             	add    esp,0x10
c0010d02:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010d06:	75 07                	jne    c0010d0f <setActiveTerminal(VgaText*)+0x99>
c0010d08:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c0010d0f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010d13:	83 c4 08             	add    esp,0x8
c0010d16:	5b                   	pop    ebx
c0010d17:	e9 c0 f8 ff ff       	jmp    c00105dc <VgaText::load()>

c0010d1c <doTerminalCycle()>:
c0010d1c:	83 ec 18             	sub    esp,0x18
c0010d1f:	a1 60 f3 02 c0       	mov    eax,ds:0xc002f360
c0010d24:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010d27:	50                   	push   eax
c0010d28:	a3 60 f3 02 c0       	mov    ds:0xc002f360,eax
c0010d2d:	e8 44 ff ff ff       	call   c0010c76 <setActiveTerminal(VgaText*)>
c0010d32:	83 c4 1c             	add    esp,0x1c
c0010d35:	c3                   	ret    

c0010d36 <VgaText::doUpdate()>:
c0010d36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d3a:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c0010d3d:	85 c0                	test   eax,eax
c0010d3f:	74 02                	je     c0010d43 <VgaText::doUpdate()+0xd>
c0010d41:	ff e0                	jmp    eax
c0010d43:	c3                   	ret    

c0010d44 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010d44:	55                   	push   ebp
c0010d45:	31 ed                	xor    ebp,ebp
c0010d47:	57                   	push   edi
c0010d48:	56                   	push   esi
c0010d49:	53                   	push   ebx
c0010d4a:	83 ec 1c             	sub    esp,0x1c
c0010d4d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010d51:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010d56:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010d5d:	50                   	push   eax
c0010d5e:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010d63:	50                   	push   eax
c0010d64:	e8 cb f9 ff ff       	call   c0010734 <VgaText::combineColours(unsigned char, unsigned char)>
c0010d69:	59                   	pop    ecx
c0010d6a:	0f b6 c0             	movzx  eax,al
c0010d6d:	5e                   	pop    esi
c0010d6e:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010d73:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010d77:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010d7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010d7e:	0f b7 f6             	movzx  esi,si
c0010d81:	01 f6                	add    esi,esi
c0010d83:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010d86:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0010d89:	84 c0                	test   al,al
c0010d8b:	0f 84 fd 00 00 00    	je     c0010e8e <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c0010d91:	3c 0d                	cmp    al,0xd
c0010d93:	75 0c                	jne    c0010da1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c0010d95:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010d9c:	e9 e7 00 00 00       	jmp    c0010e88 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010da1:	3c 0a                	cmp    al,0xa
c0010da3:	75 47                	jne    c0010dec <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c0010da5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010da8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010daf:	8d 48 01             	lea    ecx,[eax+0x1]
c0010db2:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0010db5:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0010db8:	75 0f                	jne    c0010dc9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c0010dba:	83 ec 0c             	sub    esp,0xc
c0010dbd:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010dc0:	53                   	push   ebx
c0010dc1:	e8 80 f9 ff ff       	call   c0010746 <VgaText::scrollScreen()>
c0010dc6:	83 c4 10             	add    esp,0x10
c0010dc9:	83 ec 0c             	sub    esp,0xc
c0010dcc:	31 ed                	xor    ebp,ebp
c0010dce:	53                   	push   ebx
c0010dcf:	e8 56 f8 ff ff       	call   c001062a <VgaText::updateCursor()>
c0010dd4:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010dd9:	83 c4 10             	add    esp,0x10
c0010ddc:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010ddf:	0f b7 f6             	movzx  esi,si
c0010de2:	01 f6                	add    esi,esi
c0010de4:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010de7:	e9 9c 00 00 00       	jmp    c0010e88 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010dec:	3c 08                	cmp    al,0x8
c0010dee:	75 35                	jne    c0010e25 <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c0010df0:	56                   	push   esi
c0010df1:	56                   	push   esi
c0010df2:	6a 01                	push   0x1
c0010df4:	53                   	push   ebx
c0010df5:	e8 4e fd ff ff       	call   c0010b48 <VgaText::decrementCursor(bool)>
c0010dfa:	58                   	pop    eax
c0010dfb:	5a                   	pop    edx
c0010dfc:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010dff:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010e02:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010e05:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010e08:	6a 20                	push   0x20
c0010e0a:	53                   	push   ebx
c0010e0b:	e8 dc f9 ff ff       	call   c00107ec <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010e10:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010e15:	83 c4 20             	add    esp,0x20
c0010e18:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010e1b:	0f b7 f6             	movzx  esi,si
c0010e1e:	01 f6                	add    esi,esi
c0010e20:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010e23:	eb 63                	jmp    c0010e88 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010e25:	51                   	push   ecx
c0010e26:	51                   	push   ecx
c0010e27:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010e2b:	50                   	push   eax
c0010e2c:	e8 a9 f9 ff ff       	call   c00107da <VgaText::combineCharAndColour(char, unsigned char)>
c0010e31:	83 c4 10             	add    esp,0x10
c0010e34:	66 89 06             	mov    WORD PTR [esi],ax
c0010e37:	39 1d 64 f3 02 c0    	cmp    DWORD PTR ds:0xc002f364,ebx
c0010e3d:	75 21                	jne    c0010e60 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010e3f:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c0010e42:	85 c0                	test   eax,eax
c0010e44:	74 1a                	je     c0010e60 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010e46:	52                   	push   edx
c0010e47:	52                   	push   edx
c0010e48:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010e4b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010e4e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010e52:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010e56:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c0010e59:	51                   	push   ecx
c0010e5a:	53                   	push   ebx
c0010e5b:	ff d0                	call   eax
c0010e5d:	83 c4 20             	add    esp,0x20
c0010e60:	83 c6 02             	add    esi,0x2
c0010e63:	50                   	push   eax
c0010e64:	50                   	push   eax
c0010e65:	6a 00                	push   0x0
c0010e67:	53                   	push   ebx
c0010e68:	e8 33 fa ff ff       	call   c00108a0 <VgaText::incrementCursor(bool)>
c0010e6d:	83 c4 10             	add    esp,0x10
c0010e70:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0010e74:	75 0d                	jne    c0010e83 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c0010e76:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010e7b:	0f b7 f6             	movzx  esi,si
c0010e7e:	01 f6                	add    esi,esi
c0010e80:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010e83:	bd 01 00 00 00       	mov    ebp,0x1
c0010e88:	47                   	inc    edi
c0010e89:	e9 f8 fe ff ff       	jmp    c0010d86 <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c0010e8e:	83 ec 0c             	sub    esp,0xc
c0010e91:	53                   	push   ebx
c0010e92:	e8 93 f7 ff ff       	call   c001062a <VgaText::updateCursor()>
c0010e97:	83 c4 10             	add    esp,0x10
c0010e9a:	89 e8                	mov    eax,ebp
c0010e9c:	84 c0                	test   al,al
c0010e9e:	74 0c                	je     c0010eac <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c0010ea0:	83 ec 0c             	sub    esp,0xc
c0010ea3:	53                   	push   ebx
c0010ea4:	e8 8d fe ff ff       	call   c0010d36 <VgaText::doUpdate()>
c0010ea9:	83 c4 10             	add    esp,0x10
c0010eac:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010eb3:	83 c4 1c             	add    esp,0x1c
c0010eb6:	5b                   	pop    ebx
c0010eb7:	5e                   	pop    esi
c0010eb8:	5f                   	pop    edi
c0010eb9:	5d                   	pop    ebp
c0010eba:	c3                   	ret    
c0010ebb:	90                   	nop

c0010ebc <VgaText::clearScreen()>:
c0010ebc:	57                   	push   edi
c0010ebd:	56                   	push   esi
c0010ebe:	31 f6                	xor    esi,esi
c0010ec0:	53                   	push   ebx
c0010ec1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010ec5:	52                   	push   edx
c0010ec6:	6a 00                	push   0x0
c0010ec8:	6a 00                	push   0x0
c0010eca:	53                   	push   ebx
c0010ecb:	e8 88 f9 ff ff       	call   c0010858 <VgaText::setCursor(int, int)>
c0010ed0:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010ed7:	83 c4 10             	add    esp,0x10
c0010eda:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0010edd:	7e 20                	jle    c0010eff <VgaText::clearScreen()+0x43>
c0010edf:	31 ff                	xor    edi,edi
c0010ee1:	50                   	push   eax
c0010ee2:	50                   	push   eax
c0010ee3:	56                   	push   esi
c0010ee4:	57                   	push   edi
c0010ee5:	47                   	inc    edi
c0010ee6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010ee9:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010eec:	6a 20                	push   0x20
c0010eee:	53                   	push   ebx
c0010eef:	e8 f8 f8 ff ff       	call   c00107ec <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010ef4:	83 c4 20             	add    esp,0x20
c0010ef7:	83 ff 50             	cmp    edi,0x50
c0010efa:	75 e5                	jne    c0010ee1 <VgaText::clearScreen()+0x25>
c0010efc:	46                   	inc    esi
c0010efd:	eb db                	jmp    c0010eda <VgaText::clearScreen()+0x1e>
c0010eff:	83 ec 0c             	sub    esp,0xc
c0010f02:	53                   	push   ebx
c0010f03:	e8 2e fe ff ff       	call   c0010d36 <VgaText::doUpdate()>
c0010f08:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010f0f:	83 c4 10             	add    esp,0x10
c0010f12:	5b                   	pop    ebx
c0010f13:	5e                   	pop    esi
c0010f14:	5f                   	pop    edi
c0010f15:	c3                   	ret    

c0010f16 <VgaText::putchar(char)>:
c0010f16:	56                   	push   esi
c0010f17:	53                   	push   ebx
c0010f18:	83 ec 14             	sub    esp,0x14
c0010f1b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010f1f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010f23:	3c 5b                	cmp    al,0x5b
c0010f25:	75 18                	jne    c0010f3f <VgaText::putchar(char)+0x29>
c0010f27:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0010f2b:	74 1f                	je     c0010f4c <VgaText::putchar(char)+0x36>
c0010f2d:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0010f33:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0010f3a:	e9 bd 00 00 00       	jmp    c0010ffc <VgaText::putchar(char)+0xe6>
c0010f3f:	3c 1b                	cmp    al,0x1b
c0010f41:	75 09                	jne    c0010f4c <VgaText::putchar(char)+0x36>
c0010f43:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0010f47:	e9 b0 00 00 00       	jmp    c0010ffc <VgaText::putchar(char)+0xe6>
c0010f4c:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0010f4f:	84 c9                	test   cl,cl
c0010f51:	0f 84 92 00 00 00    	je     c0010fe9 <VgaText::putchar(char)+0xd3>
c0010f57:	8d 50 c0             	lea    edx,[eax-0x40]
c0010f5a:	80 fa 3e             	cmp    dl,0x3e
c0010f5d:	77 76                	ja     c0010fd5 <VgaText::putchar(char)+0xbf>
c0010f5f:	3c 6d                	cmp    al,0x6d
c0010f61:	75 47                	jne    c0010faa <VgaText::putchar(char)+0x94>
c0010f63:	31 f6                	xor    esi,esi
c0010f65:	31 d2                	xor    edx,edx
c0010f67:	31 c0                	xor    eax,eax
c0010f69:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0010f6c:	7e 2d                	jle    c0010f9b <VgaText::putchar(char)+0x85>
c0010f6e:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0010f73:	80 fa 3b             	cmp    dl,0x3b
c0010f76:	75 17                	jne    c0010f8f <VgaText::putchar(char)+0x79>
c0010f78:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010f7c:	50                   	push   eax
c0010f7d:	53                   	push   ebx
c0010f7e:	e8 fd f6 ff ff       	call   c0010680 <VgaText::doANSI_SGR(int)>
c0010f83:	59                   	pop    ecx
c0010f84:	31 d2                	xor    edx,edx
c0010f86:	58                   	pop    eax
c0010f87:	31 c0                	xor    eax,eax
c0010f89:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010f8d:	eb 09                	jmp    c0010f98 <VgaText::putchar(char)+0x82>
c0010f8f:	6b c0 0a             	imul   eax,eax,0xa
c0010f92:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010f96:	88 ca                	mov    dl,cl
c0010f98:	46                   	inc    esi
c0010f99:	eb ce                	jmp    c0010f69 <VgaText::putchar(char)+0x53>
c0010f9b:	84 d2                	test   dl,dl
c0010f9d:	74 2e                	je     c0010fcd <VgaText::putchar(char)+0xb7>
c0010f9f:	50                   	push   eax
c0010fa0:	53                   	push   ebx
c0010fa1:	e8 da f6 ff ff       	call   c0010680 <VgaText::doANSI_SGR(int)>
c0010fa6:	58                   	pop    eax
c0010fa7:	5a                   	pop    edx
c0010fa8:	eb 23                	jmp    c0010fcd <VgaText::putchar(char)+0xb7>
c0010faa:	3c 4a                	cmp    al,0x4a
c0010fac:	75 1f                	jne    c0010fcd <VgaText::putchar(char)+0xb7>
c0010fae:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0010fb2:	75 19                	jne    c0010fcd <VgaText::putchar(char)+0xb7>
c0010fb4:	83 ec 0c             	sub    esp,0xc
c0010fb7:	53                   	push   ebx
c0010fb8:	e8 ff fe ff ff       	call   c0010ebc <VgaText::clearScreen()>
c0010fbd:	83 c4 0c             	add    esp,0xc
c0010fc0:	6a 00                	push   0x0
c0010fc2:	6a 00                	push   0x0
c0010fc4:	53                   	push   ebx
c0010fc5:	e8 8e f8 ff ff       	call   c0010858 <VgaText::setCursor(int, int)>
c0010fca:	83 c4 10             	add    esp,0x10
c0010fcd:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0010fd3:	eb 27                	jmp    c0010ffc <VgaText::putchar(char)+0xe6>
c0010fd5:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0010fd8:	83 fa 0e             	cmp    edx,0xe
c0010fdb:	7f 1f                	jg     c0010ffc <VgaText::putchar(char)+0xe6>
c0010fdd:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010fe0:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0010fe3:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c0010fe7:	eb 13                	jmp    c0010ffc <VgaText::putchar(char)+0xe6>
c0010fe9:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010fec:	0f be c0             	movsx  eax,al
c0010fef:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010ff2:	50                   	push   eax
c0010ff3:	53                   	push   ebx
c0010ff4:	e8 71 fb ff ff       	call   c0010b6a <VgaText::putchar(char, VgaColour, VgaColour)>
c0010ff9:	83 c4 10             	add    esp,0x10
c0010ffc:	83 c4 14             	add    esp,0x14
c0010fff:	5b                   	pop    ebx
c0011000:	5e                   	pop    esi
c0011001:	c3                   	ret    

c0011002 <VgaText::puts(char const*)>:
c0011002:	53                   	push   ebx
c0011003:	83 ec 08             	sub    esp,0x8
c0011006:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001100a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001100d:	84 c0                	test   al,al
c001100f:	74 12                	je     c0011023 <VgaText::puts(char const*)+0x21>
c0011011:	43                   	inc    ebx
c0011012:	51                   	push   ecx
c0011013:	51                   	push   ecx
c0011014:	50                   	push   eax
c0011015:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011019:	e8 f8 fe ff ff       	call   c0010f16 <VgaText::putchar(char)>
c001101e:	83 c4 10             	add    esp,0x10
c0011021:	eb e7                	jmp    c001100a <VgaText::puts(char const*)+0x8>
c0011023:	83 c4 08             	add    esp,0x8
c0011026:	5b                   	pop    ebx
c0011027:	c3                   	ret    

c0011028 <VgaText::putx(unsigned int)>:
c0011028:	57                   	push   edi
c0011029:	b9 11 00 00 00       	mov    ecx,0x11
c001102e:	56                   	push   esi
c001102f:	be ee b0 02 c0       	mov    esi,0xc002b0ee
c0011034:	53                   	push   ebx
c0011035:	83 ec 20             	sub    esp,0x20
c0011038:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001103c:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0011040:	fc                   	cld    
c0011041:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011043:	be 08 00 00 00       	mov    esi,0x8
c0011048:	50                   	push   eax
c0011049:	50                   	push   eax
c001104a:	89 d8                	mov    eax,ebx
c001104c:	c1 e3 04             	shl    ebx,0x4
c001104f:	c1 e8 1c             	shr    eax,0x1c
c0011052:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0011057:	50                   	push   eax
c0011058:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001105c:	e8 b5 fe ff ff       	call   c0010f16 <VgaText::putchar(char)>
c0011061:	83 c4 10             	add    esp,0x10
c0011064:	4e                   	dec    esi
c0011065:	75 e1                	jne    c0011048 <VgaText::putx(unsigned int)+0x20>
c0011067:	83 c4 20             	add    esp,0x20
c001106a:	5b                   	pop    ebx
c001106b:	5e                   	pop    esi
c001106c:	5f                   	pop    edi
c001106d:	c3                   	ret    

c001106e <VgaText::VgaText(char const*)>:
c001106e:	57                   	push   edi
c001106f:	56                   	push   esi
c0011070:	53                   	push   ebx
c0011071:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011075:	83 ec 08             	sub    esp,0x8
c0011078:	6a 00                	push   0x0
c001107a:	50                   	push   eax
c001107b:	e8 8a 05 00 00       	call   c001160a <UnixFile::UnixFile(int)>
c0011080:	83 c4 10             	add    esp,0x10
c0011083:	ba 54 b1 02 c0       	mov    edx,0xc002b154
c0011088:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001108c:	89 10                	mov    DWORD PTR [eax],edx
c001108e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011092:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0011099:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001109d:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c00110a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110a8:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c00110ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110b0:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c00110b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110b8:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c00110bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110c3:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c00110ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110ce:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c00110d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110d9:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c00110e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110e4:	8d 50 60             	lea    edx,[eax+0x60]
c00110e7:	bb 40 f3 02 c0       	mov    ebx,0xc002f340
c00110ec:	b8 08 00 00 00       	mov    eax,0x8
c00110f1:	fc                   	cld    
c00110f2:	89 d7                	mov    edi,edx
c00110f4:	89 de                	mov    esi,ebx
c00110f6:	89 c1                	mov    ecx,eax
c00110f8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00110fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110fe:	05 82 00 00 00       	add    eax,0x82
c0011103:	83 ec 08             	sub    esp,0x8
c0011106:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001110a:	50                   	push   eax
c001110b:	e8 18 f7 fe ff       	call   c0000828 <strcpy>
c0011110:	83 c4 10             	add    esp,0x10
c0011113:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011117:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c001111e:	83 ec 0c             	sub    esp,0xc
c0011121:	6a 01                	push   0x1
c0011123:	e8 25 09 00 00       	call   c0011a4d <Virt::allocateKernelVirtualPages(int)>
c0011128:	83 c4 10             	add    esp,0x10
c001112b:	89 c2                	mov    edx,eax
c001112d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011131:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011134:	8b 1d 10 f4 02 c0    	mov    ebx,DWORD PTR ds:0xc002f410
c001113a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001113e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011141:	89 c6                	mov    esi,eax
c0011143:	e8 cc ed ff ff       	call   c000ff14 <Phys::allocatePage()>
c0011148:	6a 05                	push   0x5
c001114a:	56                   	push   esi
c001114b:	50                   	push   eax
c001114c:	53                   	push   ebx
c001114d:	e8 32 11 00 00       	call   c0012284 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011152:	83 c4 10             	add    esp,0x10
c0011155:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011159:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001115c:	83 ec 04             	sub    esp,0x4
c001115f:	68 00 0f 00 00       	push   0xf00
c0011164:	6a 00                	push   0x0
c0011166:	50                   	push   eax
c0011167:	e8 00 f6 fe ff       	call   c000076c <memset>
c001116c:	83 c4 10             	add    esp,0x10
c001116f:	83 ec 04             	sub    esp,0x4
c0011172:	6a 00                	push   0x0
c0011174:	6a 07                	push   0x7
c0011176:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001117a:	e8 95 f5 ff ff       	call   c0010714 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001117f:	83 c4 10             	add    esp,0x10
c0011182:	83 ec 08             	sub    esp,0x8
c0011185:	6a 02                	push   0x2
c0011187:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001118b:	e8 c6 fa ff ff       	call   c0010c56 <VgaText::setCursorHeight(int)>
c0011190:	83 c4 10             	add    esp,0x10
c0011193:	83 ec 04             	sub    esp,0x4
c0011196:	6a 00                	push   0x0
c0011198:	6a 00                	push   0x0
c001119a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001119e:	e8 b5 f6 ff ff       	call   c0010858 <VgaText::setCursor(int, int)>
c00111a3:	83 c4 10             	add    esp,0x10
c00111a6:	83 ec 08             	sub    esp,0x8
c00111a9:	6a 01                	push   0x1
c00111ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111af:	e8 8c f4 ff ff       	call   c0010640 <VgaText::showCursor(bool)>
c00111b4:	83 c4 10             	add    esp,0x10
c00111b7:	83 ec 08             	sub    esp,0x8
c00111ba:	6a 01                	push   0x1
c00111bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111c0:	e8 87 f4 ff ff       	call   c001064c <VgaText::disableBlink(bool)>
c00111c5:	83 c4 10             	add    esp,0x10
c00111c8:	83 ec 0c             	sub    esp,0xc
c00111cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111cf:	e8 e8 fc ff ff       	call   c0010ebc <VgaText::clearScreen()>
c00111d4:	83 c4 10             	add    esp,0x10
c00111d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111db:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c00111df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111e3:	05 02 01 00 00       	add    eax,0x102
c00111e8:	83 ec 04             	sub    esp,0x4
c00111eb:	68 96 00 00 00       	push   0x96
c00111f0:	6a 00                	push   0x0
c00111f2:	50                   	push   eax
c00111f3:	e8 74 f5 fe ff       	call   c000076c <memset>
c00111f8:	83 c4 10             	add    esp,0x10
c00111fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111ff:	05 98 01 00 00       	add    eax,0x198
c0011204:	83 ec 04             	sub    esp,0x4
c0011207:	68 2c 01 00 00       	push   0x12c
c001120c:	6a 00                	push   0x0
c001120e:	50                   	push   eax
c001120f:	e8 58 f5 fe ff       	call   c000076c <memset>
c0011214:	83 c4 10             	add    esp,0x10
c0011217:	90                   	nop
c0011218:	5b                   	pop    ebx
c0011219:	5e                   	pop    esi
c001121a:	5f                   	pop    edi
c001121b:	c3                   	ret    

c001121c <VgaText::receiveKey(unsigned char)>:
c001121c:	55                   	push   ebp
c001121d:	57                   	push   edi
c001121e:	56                   	push   esi
c001121f:	53                   	push   ebx
c0011220:	83 ec 1c             	sub    esp,0x1c
c0011223:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011227:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001122b:	84 db                	test   bl,bl
c001122d:	0f 84 c9 00 00 00    	je     c00112fc <VgaText::receiveKey(unsigned char)+0xe0>
c0011233:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c0011239:	80 fb 08             	cmp    bl,0x8
c001123c:	75 2c                	jne    c001126a <VgaText::receiveKey(unsigned char)+0x4e>
c001123e:	83 ec 0c             	sub    esp,0xc
c0011241:	57                   	push   edi
c0011242:	e8 41 f5 fe ff       	call   c0000788 <strlen>
c0011247:	83 c4 10             	add    esp,0x10
c001124a:	85 c0                	test   eax,eax
c001124c:	74 41                	je     c001128f <VgaText::receiveKey(unsigned char)+0x73>
c001124e:	50                   	push   eax
c001124f:	50                   	push   eax
c0011250:	6a 08                	push   0x8
c0011252:	56                   	push   esi
c0011253:	e8 be fc ff ff       	call   c0010f16 <VgaText::putchar(char)>
c0011258:	89 3c 24             	mov    DWORD PTR [esp],edi
c001125b:	e8 28 f5 fe ff       	call   c0000788 <strlen>
c0011260:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c0011268:	eb 22                	jmp    c001128c <VgaText::receiveKey(unsigned char)+0x70>
c001126a:	0f be c3             	movsx  eax,bl
c001126d:	52                   	push   edx
c001126e:	52                   	push   edx
c001126f:	50                   	push   eax
c0011270:	56                   	push   esi
c0011271:	e8 a0 fc ff ff       	call   c0010f16 <VgaText::putchar(char)>
c0011276:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c001127a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001127f:	59                   	pop    ecx
c0011280:	5d                   	pop    ebp
c0011281:	8d 44 24 16          	lea    eax,[esp+0x16]
c0011285:	50                   	push   eax
c0011286:	57                   	push   edi
c0011287:	e8 dc f6 fe ff       	call   c0000968 <strcat>
c001128c:	83 c4 10             	add    esp,0x10
c001128f:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0011296:	75 05                	jne    c001129d <VgaText::receiveKey(unsigned char)+0x81>
c0011298:	80 fb 0a             	cmp    bl,0xa
c001129b:	75 53                	jne    c00112f0 <VgaText::receiveKey(unsigned char)+0xd4>
c001129d:	83 ec 0c             	sub    esp,0xc
c00112a0:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c00112a6:	53                   	push   ebx
c00112a7:	e8 dc f4 fe ff       	call   c0000788 <strlen>
c00112ac:	89 3c 24             	mov    DWORD PTR [esp],edi
c00112af:	89 c5                	mov    ebp,eax
c00112b1:	e8 d2 f4 fe ff       	call   c0000788 <strlen>
c00112b6:	83 c4 10             	add    esp,0x10
c00112b9:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c00112bd:	3d 2c 01 00 00       	cmp    eax,0x12c
c00112c2:	76 10                	jbe    c00112d4 <VgaText::receiveKey(unsigned char)+0xb8>
c00112c4:	83 ec 0c             	sub    esp,0xc
c00112c7:	68 ff b0 02 c0       	push   0xc002b0ff
c00112cc:	e8 1c 96 00 00       	call   c001a8ed <Krnl::panic(char const*)>
c00112d1:	83 c4 10             	add    esp,0x10
c00112d4:	50                   	push   eax
c00112d5:	50                   	push   eax
c00112d6:	57                   	push   edi
c00112d7:	53                   	push   ebx
c00112d8:	e8 8b f6 fe ff       	call   c0000968 <strcat>
c00112dd:	83 c4 0c             	add    esp,0xc
c00112e0:	68 96 00 00 00       	push   0x96
c00112e5:	6a 00                	push   0x0
c00112e7:	57                   	push   edi
c00112e8:	e8 7f f4 fe ff       	call   c000076c <memset>
c00112ed:	83 c4 10             	add    esp,0x10
c00112f0:	83 ec 0c             	sub    esp,0xc
c00112f3:	56                   	push   esi
c00112f4:	e8 3d fa ff ff       	call   c0010d36 <VgaText::doUpdate()>
c00112f9:	83 c4 10             	add    esp,0x10
c00112fc:	83 c4 1c             	add    esp,0x1c
c00112ff:	5b                   	pop    ebx
c0011300:	5e                   	pop    esi
c0011301:	5f                   	pop    edi
c0011302:	5d                   	pop    ebp
c0011303:	c3                   	ret    

c0011304 <VgaText::write(unsigned long long, void*, int*)>:
c0011304:	55                   	push   ebp
c0011305:	57                   	push   edi
c0011306:	56                   	push   esi
c0011307:	53                   	push   ebx
c0011308:	83 ec 0c             	sub    esp,0xc
c001130b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001130f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0011313:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011317:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c001131e:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0011321:	39 eb                	cmp    ebx,ebp
c0011323:	74 13                	je     c0011338 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0011325:	43                   	inc    ebx
c0011326:	50                   	push   eax
c0011327:	50                   	push   eax
c0011328:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c001132c:	50                   	push   eax
c001132d:	56                   	push   esi
c001132e:	e8 e3 fb ff ff       	call   c0010f16 <VgaText::putchar(char)>
c0011333:	83 c4 10             	add    esp,0x10
c0011336:	eb e9                	jmp    c0011321 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0011338:	83 ec 0c             	sub    esp,0xc
c001133b:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0011342:	56                   	push   esi
c0011343:	e8 ee f9 ff ff       	call   c0010d36 <VgaText::doUpdate()>
c0011348:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001134c:	89 38                	mov    DWORD PTR [eax],edi
c001134e:	83 c4 1c             	add    esp,0x1c
c0011351:	31 c0                	xor    eax,eax
c0011353:	5b                   	pop    ebx
c0011354:	5e                   	pop    esi
c0011355:	5f                   	pop    edi
c0011356:	5d                   	pop    ebp
c0011357:	c3                   	ret    

c0011358 <newTerminal(char*)>:
c0011358:	83 ec 28             	sub    esp,0x28
c001135b:	68 c4 02 00 00       	push   0x2c4
c0011360:	e8 43 e5 ff ff       	call   c000f8a8 <malloc>
c0011365:	5a                   	pop    edx
c0011366:	59                   	pop    ecx
c0011367:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001136b:	50                   	push   eax
c001136c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011370:	e8 f9 fc ff ff       	call   c001106e <VgaText::VgaText(char const*)>
c0011375:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011379:	83 c4 2c             	add    esp,0x2c
c001137c:	c3                   	ret    
c001137d:	90                   	nop

c001137e <TSS::TSS()>:
c001137e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011382:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011389:	90                   	nop
c001138a:	c3                   	ret    
c001138b:	90                   	nop

c001138c <TSS::setESP(unsigned long)>:
c001138c:	55                   	push   ebp
c001138d:	89 e5                	mov    ebp,esp
c001138f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011392:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011395:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011398:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001139b:	90                   	nop
c001139c:	5d                   	pop    ebp
c001139d:	c3                   	ret    

c001139e <TSS::flush()>:
c001139e:	55                   	push   ebp
c001139f:	89 e5                	mov    ebp,esp
c00113a1:	83 ec 10             	sub    esp,0x10
c00113a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00113a9:	83 c8 03             	or     eax,0x3
c00113ac:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00113b0:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00113b4:	66 89 d0             	mov    ax,dx
c00113b7:	0f 00 d8             	ltr    ax
c00113ba:	90                   	nop
c00113bb:	c9                   	leave  
c00113bc:	c3                   	ret    
c00113bd:	90                   	nop

c00113be <TSS::setup(unsigned long, unsigned long)>:
c00113be:	55                   	push   ebp
c00113bf:	89 e5                	mov    ebp,esp
c00113c1:	83 ec 18             	sub    esp,0x18
c00113c4:	83 ec 0c             	sub    esp,0xc
c00113c7:	6a 68                	push   0x68
c00113c9:	e8 da e4 ff ff       	call   c000f8a8 <malloc>
c00113ce:	83 c4 10             	add    esp,0x10
c00113d1:	89 c2                	mov    edx,eax
c00113d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113d6:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00113d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113df:	83 ec 04             	sub    esp,0x4
c00113e2:	6a 68                	push   0x68
c00113e4:	6a 00                	push   0x0
c00113e6:	50                   	push   eax
c00113e7:	e8 80 f3 fe ff       	call   c000076c <memset>
c00113ec:	83 c4 10             	add    esp,0x10
c00113ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113f2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113f5:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c00113fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011401:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0011407:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001140a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001140d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011410:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011413:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011416:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011419:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c001141f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011422:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011425:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c001142b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001142e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011431:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0011437:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001143a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001143d:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0011443:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011446:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011449:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c001144f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011452:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011455:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c001145b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001145e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011461:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0011464:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0011467:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001146a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001146d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011470:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011473:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011476:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011479:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0011480:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011483:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011486:	0f 20 da             	mov    edx,cr3
c0011489:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001148c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001148f:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0011492:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011495:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011498:	83 ec 08             	sub    esp,0x8
c001149b:	50                   	push   eax
c001149c:	8d 45 ec             	lea    eax,[ebp-0x14]
c001149f:	50                   	push   eax
c00114a0:	e8 df db ff ff       	call   c000f084 <GDTEntry::setBase(unsigned int)>
c00114a5:	83 c4 10             	add    esp,0x10
c00114a8:	83 ec 08             	sub    esp,0x8
c00114ab:	6a 68                	push   0x68
c00114ad:	8d 45 ec             	lea    eax,[ebp-0x14]
c00114b0:	50                   	push   eax
c00114b1:	e8 ea db ff ff       	call   c000f0a0 <GDTEntry::setLimit(unsigned int)>
c00114b6:	83 c4 10             	add    esp,0x10
c00114b9:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c00114bd:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00114c0:	83 e0 0f             	and    eax,0xf
c00114c3:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00114c6:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00114c9:	83 c8 40             	or     eax,0x40
c00114cc:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00114cf:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c00114d4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00114da:	05 78 01 00 00       	add    eax,0x178
c00114df:	83 ec 04             	sub    esp,0x4
c00114e2:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00114e5:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00114e8:	50                   	push   eax
c00114e9:	e8 e6 db ff ff       	call   c000f0d4 <GDT::addEntry(GDTEntry)>
c00114ee:	83 c4 10             	add    esp,0x10
c00114f1:	89 c2                	mov    edx,eax
c00114f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114f6:	89 10                	mov    DWORD PTR [eax],edx
c00114f8:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c00114fd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011503:	05 78 01 00 00       	add    eax,0x178
c0011508:	83 ec 0c             	sub    esp,0xc
c001150b:	50                   	push   eax
c001150c:	e8 07 dc ff ff       	call   c000f118 <GDT::flush()>
c0011511:	83 c4 10             	add    esp,0x10
c0011514:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011517:	8b 00                	mov    eax,DWORD PTR [eax]
c0011519:	83 ec 08             	sub    esp,0x8
c001151c:	50                   	push   eax
c001151d:	68 68 b1 02 c0       	push   0xc002b168
c0011522:	e8 2c 19 00 00       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0011527:	83 c4 10             	add    esp,0x10
c001152a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001152d:	8b 00                	mov    eax,DWORD PTR [eax]
c001152f:	c9                   	leave  
c0011530:	c3                   	ret    
c0011531:	90                   	nop

c0011532 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0011532:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011536:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001153a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001153d:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011542:	75 08                	jne    c001154c <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0011544:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c001154a:	eb 38                	jmp    c0011584 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c001154c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011551:	75 17                	jne    c001156a <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0011553:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011558:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001155b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011561:	8b 10                	mov    edx,DWORD PTR [eax]
c0011563:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011567:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c001156a:	89 c1                	mov    ecx,eax
c001156c:	83 e1 fd             	and    ecx,0xfffffffd
c001156f:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0011575:	74 cd                	je     c0011544 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011577:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c001157c:	83 e0 ef             	and    eax,0xffffffef
c001157f:	83 f8 08             	cmp    eax,0x8
c0011582:	76 c0                	jbe    c0011544 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011584:	31 c0                	xor    eax,eax
c0011586:	c3                   	ret    
c0011587:	90                   	nop

c0011588 <ReservedFilename::isAtty()>:
c0011588:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001158c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001158f:	31 c0                	xor    eax,eax
c0011591:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0011597:	74 09                	je     c00115a2 <ReservedFilename::isAtty()+0x1a>
c0011599:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c001159f:	0f 94 c0             	sete   al
c00115a2:	c3                   	ret    
c00115a3:	90                   	nop

c00115a4 <ReservedFilename::write(unsigned long long, void*, int*)>:
c00115a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115a8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00115ac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115af:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00115b3:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00115b8:	75 08                	jne    c00115c2 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c00115ba:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00115c0:	eb 3d                	jmp    c00115ff <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00115c2:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00115c7:	75 17                	jne    c00115e0 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c00115c9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00115ce:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00115d1:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00115d7:	8b 10                	mov    edx,DWORD PTR [eax]
c00115d9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00115dd:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c00115e0:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00115e5:	75 04                	jne    c00115eb <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c00115e7:	89 0a                	mov    DWORD PTR [edx],ecx
c00115e9:	eb 14                	jmp    c00115ff <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00115eb:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00115f0:	74 c8                	je     c00115ba <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00115f2:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00115f7:	83 e0 ef             	and    eax,0xffffffef
c00115fa:	83 f8 08             	cmp    eax,0x8
c00115fd:	76 bb                	jbe    c00115ba <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00115ff:	31 c0                	xor    eax,eax
c0011601:	c3                   	ret    

c0011602 <UnixFile::getFileDescriptor()>:
c0011602:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011606:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011609:	c3                   	ret    

c001160a <UnixFile::UnixFile(int)>:
c001160a:	53                   	push   ebx
c001160b:	83 ec 28             	sub    esp,0x28
c001160e:	ba 54 b2 02 c0       	mov    edx,0xc002b254
c0011613:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011617:	89 10                	mov    DWORD PTR [eax],edx
c0011619:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0011621:	0f 8f 8c 01 00 00    	jg     c00117b3 <UnixFile::UnixFile(int)+0x1a9>
c0011627:	a1 20 e2 02 c0       	mov    eax,ds:0xc002e220
c001162c:	8d 50 01             	lea    edx,[eax+0x1]
c001162f:	89 15 20 e2 02 c0    	mov    DWORD PTR ds:0xc002e220,edx
c0011635:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011639:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001163c:	83 ec 08             	sub    esp,0x8
c001163f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011643:	68 f8 f3 02 c0       	push   0xc002f3f8
c0011648:	e8 1f 7d 01 00       	call   c002936c <LinkedList<UnixFile>::addElement(UnixFile*)>
c001164d:	83 c4 10             	add    esp,0x10
c0011650:	a0 f4 f3 02 c0       	mov    al,ds:0xc002f3f4
c0011655:	83 f0 01             	xor    eax,0x1
c0011658:	84 c0                	test   al,al
c001165a:	0f 84 54 01 00 00    	je     c00117b4 <UnixFile::UnixFile(int)+0x1aa>
c0011660:	c6 05 f4 f3 02 c0 01 	mov    BYTE PTR ds:0xc002f3f4,0x1
c0011667:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c001166f:	83 ec 0c             	sub    esp,0xc
c0011672:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011676:	e8 2d e2 ff ff       	call   c000f8a8 <malloc>
c001167b:	83 c4 10             	add    esp,0x10
c001167e:	89 c3                	mov    ebx,eax
c0011680:	83 ec 08             	sub    esp,0x8
c0011683:	68 03 ff ff 0f       	push   0xfffff03
c0011688:	53                   	push   ebx
c0011689:	e8 2c 01 00 00       	call   c00117ba <ReservedFilename::ReservedFilename(int)>
c001168e:	83 c4 10             	add    esp,0x10
c0011691:	89 1d ec f3 02 c0    	mov    DWORD PTR ds:0xc002f3ec,ebx
c0011697:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c001169f:	83 ec 0c             	sub    esp,0xc
c00116a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00116a6:	e8 fd e1 ff ff       	call   c000f8a8 <malloc>
c00116ab:	83 c4 10             	add    esp,0x10
c00116ae:	89 c3                	mov    ebx,eax
c00116b0:	83 ec 08             	sub    esp,0x8
c00116b3:	68 01 ff ff 0f       	push   0xfffff01
c00116b8:	53                   	push   ebx
c00116b9:	e8 fc 00 00 00       	call   c00117ba <ReservedFilename::ReservedFilename(int)>
c00116be:	83 c4 10             	add    esp,0x10
c00116c1:	89 1d f0 f3 02 c0    	mov    DWORD PTR ds:0xc002f3f0,ebx
c00116c7:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c00116cf:	83 ec 0c             	sub    esp,0xc
c00116d2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00116d6:	e8 cd e1 ff ff       	call   c000f8a8 <malloc>
c00116db:	83 c4 10             	add    esp,0x10
c00116de:	89 c3                	mov    ebx,eax
c00116e0:	83 ec 08             	sub    esp,0x8
c00116e3:	68 00 ff ff 0f       	push   0xfffff00
c00116e8:	53                   	push   ebx
c00116e9:	e8 cc 00 00 00       	call   c00117ba <ReservedFilename::ReservedFilename(int)>
c00116ee:	83 c4 10             	add    esp,0x10
c00116f1:	89 1d e4 f3 02 c0    	mov    DWORD PTR ds:0xc002f3e4,ebx
c00116f7:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00116ff:	83 ec 0c             	sub    esp,0xc
c0011702:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011706:	e8 9d e1 ff ff       	call   c000f8a8 <malloc>
c001170b:	83 c4 10             	add    esp,0x10
c001170e:	89 c3                	mov    ebx,eax
c0011710:	83 ec 08             	sub    esp,0x8
c0011713:	68 02 ff ff 0f       	push   0xfffff02
c0011718:	53                   	push   ebx
c0011719:	e8 9c 00 00 00       	call   c00117ba <ReservedFilename::ReservedFilename(int)>
c001171e:	83 c4 10             	add    esp,0x10
c0011721:	89 1d e8 f3 02 c0    	mov    DWORD PTR ds:0xc002f3e8,ebx
c0011727:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001172f:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0011734:	7f 7e                	jg     c00117b4 <UnixFile::UnixFile(int)+0x1aa>
c0011736:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c001173e:	83 ec 0c             	sub    esp,0xc
c0011741:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011745:	e8 5e e1 ff ff       	call   c000f8a8 <malloc>
c001174a:	83 c4 10             	add    esp,0x10
c001174d:	89 c3                	mov    ebx,eax
c001174f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011753:	05 10 ff ff 0f       	add    eax,0xfffff10
c0011758:	83 ec 08             	sub    esp,0x8
c001175b:	50                   	push   eax
c001175c:	53                   	push   ebx
c001175d:	e8 58 00 00 00       	call   c00117ba <ReservedFilename::ReservedFilename(int)>
c0011762:	83 c4 10             	add    esp,0x10
c0011765:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011769:	89 1c 85 c0 f3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0c40],ebx
c0011770:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0011778:	83 ec 0c             	sub    esp,0xc
c001177b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001177f:	e8 24 e1 ff ff       	call   c000f8a8 <malloc>
c0011784:	83 c4 10             	add    esp,0x10
c0011787:	89 c3                	mov    ebx,eax
c0011789:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001178d:	05 20 ff ff 0f       	add    eax,0xfffff20
c0011792:	83 ec 08             	sub    esp,0x8
c0011795:	50                   	push   eax
c0011796:	53                   	push   ebx
c0011797:	e8 1e 00 00 00       	call   c00117ba <ReservedFilename::ReservedFilename(int)>
c001179c:	83 c4 10             	add    esp,0x10
c001179f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00117a3:	89 1c 85 80 f3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0c80],ebx
c00117aa:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00117ae:	e9 7c ff ff ff       	jmp    c001172f <UnixFile::UnixFile(int)+0x125>
c00117b3:	90                   	nop
c00117b4:	83 c4 28             	add    esp,0x28
c00117b7:	5b                   	pop    ebx
c00117b8:	c3                   	ret    
c00117b9:	90                   	nop

c00117ba <ReservedFilename::ReservedFilename(int)>:
c00117ba:	83 ec 0c             	sub    esp,0xc
c00117bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117c1:	83 ec 08             	sub    esp,0x8
c00117c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00117c8:	50                   	push   eax
c00117c9:	e8 3c fe ff ff       	call   c001160a <UnixFile::UnixFile(int)>
c00117ce:	83 c4 10             	add    esp,0x10
c00117d1:	ba 70 b2 02 c0       	mov    edx,0xc002b270
c00117d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117da:	89 10                	mov    DWORD PTR [eax],edx
c00117dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00117e4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00117e7:	90                   	nop
c00117e8:	83 c4 0c             	add    esp,0xc
c00117eb:	c3                   	ret    

c00117ec <UnixFile::~UnixFile()>:
c00117ec:	83 ec 1c             	sub    esp,0x1c
c00117ef:	ba 54 b2 02 c0       	mov    edx,0xc002b254
c00117f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00117f8:	89 10                	mov    DWORD PTR [eax],edx
c00117fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00117fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011801:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0011806:	7f 73                	jg     c001187b <UnixFile::~UnixFile()+0x8f>
c0011808:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011810:	83 ec 0c             	sub    esp,0xc
c0011813:	68 f8 f3 02 c0       	push   0xc002f3f8
c0011818:	e8 23 7c 01 00       	call   c0029440 <LinkedList<UnixFile>::getFirstElement()>
c001181d:	83 c4 10             	add    esp,0x10
c0011820:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011824:	83 ec 0c             	sub    esp,0xc
c0011827:	68 f8 f3 02 c0       	push   0xc002f3f8
c001182c:	e8 17 7c 01 00       	call   c0029448 <LinkedList<UnixFile>::removeFirst()>
c0011831:	83 c4 10             	add    esp,0x10
c0011834:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011838:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001183c:	74 40                	je     c001187e <UnixFile::~UnixFile()+0x92>
c001183e:	83 ec 08             	sub    esp,0x8
c0011841:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011845:	68 f8 f3 02 c0       	push   0xc002f3f8
c001184a:	e8 1d 7b 01 00       	call   c002936c <LinkedList<UnixFile>::addElement(UnixFile*)>
c001184f:	83 c4 10             	add    esp,0x10
c0011852:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011856:	8d 50 01             	lea    edx,[eax+0x1]
c0011859:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001185d:	3d 88 13 00 00       	cmp    eax,0x1388
c0011862:	0f 94 c0             	sete   al
c0011865:	84 c0                	test   al,al
c0011867:	74 a7                	je     c0011810 <UnixFile::~UnixFile()+0x24>
c0011869:	83 ec 0c             	sub    esp,0xc
c001186c:	68 2c b2 02 c0       	push   0xc002b22c
c0011871:	e8 77 90 00 00       	call   c001a8ed <Krnl::panic(char const*)>
c0011876:	83 c4 10             	add    esp,0x10
c0011879:	eb 95                	jmp    c0011810 <UnixFile::~UnixFile()+0x24>
c001187b:	90                   	nop
c001187c:	eb 01                	jmp    c001187f <UnixFile::~UnixFile()+0x93>
c001187e:	90                   	nop
c001187f:	90                   	nop
c0011880:	83 c4 1c             	add    esp,0x1c
c0011883:	c3                   	ret    

c0011884 <UnixFile::~UnixFile()>:
c0011884:	83 ec 0c             	sub    esp,0xc
c0011887:	83 ec 0c             	sub    esp,0xc
c001188a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001188e:	e8 59 ff ff ff       	call   c00117ec <UnixFile::~UnixFile()>
c0011893:	83 c4 10             	add    esp,0x10
c0011896:	83 ec 08             	sub    esp,0x8
c0011899:	6a 0c                	push   0xc
c001189b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001189f:	e8 cf 14 00 00       	call   c0012d73 <operator delete(void*, unsigned long)>
c00118a4:	83 c4 10             	add    esp,0x10
c00118a7:	83 c4 0c             	add    esp,0xc
c00118aa:	c3                   	ret    
c00118ab:	90                   	nop

c00118ac <ReservedFilename::~ReservedFilename()>:
c00118ac:	83 ec 0c             	sub    esp,0xc
c00118af:	ba 70 b2 02 c0       	mov    edx,0xc002b270
c00118b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118b8:	89 10                	mov    DWORD PTR [eax],edx
c00118ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118be:	83 ec 0c             	sub    esp,0xc
c00118c1:	50                   	push   eax
c00118c2:	e8 25 ff ff ff       	call   c00117ec <UnixFile::~UnixFile()>
c00118c7:	83 c4 10             	add    esp,0x10
c00118ca:	90                   	nop
c00118cb:	83 c4 0c             	add    esp,0xc
c00118ce:	c3                   	ret    
c00118cf:	90                   	nop

c00118d0 <ReservedFilename::~ReservedFilename()>:
c00118d0:	83 ec 0c             	sub    esp,0xc
c00118d3:	83 ec 0c             	sub    esp,0xc
c00118d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118da:	e8 cd ff ff ff       	call   c00118ac <ReservedFilename::~ReservedFilename()>
c00118df:	83 c4 10             	add    esp,0x10
c00118e2:	83 ec 08             	sub    esp,0x8
c00118e5:	6a 0c                	push   0xc
c00118e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118eb:	e8 83 14 00 00       	call   c0012d73 <operator delete(void*, unsigned long)>
c00118f0:	83 c4 10             	add    esp,0x10
c00118f3:	83 c4 0c             	add    esp,0xc
c00118f6:	c3                   	ret    

c00118f7 <getFromFileDescriptor(int)>:
c00118f7:	53                   	push   ebx
c00118f8:	83 ec 08             	sub    esp,0x8
c00118fb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00118ff:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011905:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c001190b:	7f 2c                	jg     c0011939 <getFromFileDescriptor(int)+0x42>
c001190d:	83 ec 0c             	sub    esp,0xc
c0011910:	68 f8 f3 02 c0       	push   0xc002f3f8
c0011915:	e8 26 7b 01 00       	call   c0029440 <LinkedList<UnixFile>::getFirstElement()>
c001191a:	83 c4 10             	add    esp,0x10
c001191d:	85 c0                	test   eax,eax
c001191f:	75 04                	jne    c0011925 <getFromFileDescriptor(int)+0x2e>
c0011921:	31 c0                	xor    eax,eax
c0011923:	eb 6e                	jmp    c0011993 <getFromFileDescriptor(int)+0x9c>
c0011925:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011928:	74 69                	je     c0011993 <getFromFileDescriptor(int)+0x9c>
c001192a:	52                   	push   edx
c001192b:	52                   	push   edx
c001192c:	50                   	push   eax
c001192d:	68 f8 f3 02 c0       	push   0xc002f3f8
c0011932:	e8 b3 7b 01 00       	call   c00294ea <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011937:	eb e1                	jmp    c001191a <getFromFileDescriptor(int)+0x23>
c0011939:	a1 ec f3 02 c0       	mov    eax,ds:0xc002f3ec
c001193e:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011944:	74 4d                	je     c0011993 <getFromFileDescriptor(int)+0x9c>
c0011946:	a1 f0 f3 02 c0       	mov    eax,ds:0xc002f3f0
c001194b:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011951:	74 40                	je     c0011993 <getFromFileDescriptor(int)+0x9c>
c0011953:	a1 e8 f3 02 c0       	mov    eax,ds:0xc002f3e8
c0011958:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c001195e:	74 33                	je     c0011993 <getFromFileDescriptor(int)+0x9c>
c0011960:	a1 e4 f3 02 c0       	mov    eax,ds:0xc002f3e4
c0011965:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001196b:	74 26                	je     c0011993 <getFromFileDescriptor(int)+0x9c>
c001196d:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011973:	83 f8 08             	cmp    eax,0x8
c0011976:	77 09                	ja     c0011981 <getFromFileDescriptor(int)+0x8a>
c0011978:	8b 04 85 c0 f3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0c40]
c001197f:	eb 12                	jmp    c0011993 <getFromFileDescriptor(int)+0x9c>
c0011981:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011987:	83 fb 08             	cmp    ebx,0x8
c001198a:	77 95                	ja     c0011921 <getFromFileDescriptor(int)+0x2a>
c001198c:	8b 04 9d 80 f3 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd0c80]
c0011993:	83 c4 08             	add    esp,0x8
c0011996:	5b                   	pop    ebx
c0011997:	c3                   	ret    

c0011998 <__static_initialization_and_destruction_0(int, int)>:
c0011998:	83 ec 0c             	sub    esp,0xc
c001199b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00119a0:	75 34                	jne    c00119d6 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00119a2:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00119aa:	75 2a                	jne    c00119d6 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00119ac:	83 ec 0c             	sub    esp,0xc
c00119af:	68 f8 f3 02 c0       	push   0xc002f3f8
c00119b4:	e8 5b 79 01 00       	call   c0029314 <LinkedList<UnixFile>::LinkedList()>
c00119b9:	83 c4 10             	add    esp,0x10
c00119bc:	83 ec 04             	sub    esp,0x4
c00119bf:	68 a8 e1 02 c0       	push   0xc002e1a8
c00119c4:	68 f8 f3 02 c0       	push   0xc002f3f8
c00119c9:	68 12 93 02 c0       	push   0xc0029312
c00119ce:	e8 1a 13 00 00       	call   c0012ced <__cxa_atexit>
c00119d3:	83 c4 10             	add    esp,0x10
c00119d6:	90                   	nop
c00119d7:	83 c4 0c             	add    esp,0xc
c00119da:	c3                   	ret    

c00119db <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00119db:	83 ec 0c             	sub    esp,0xc
c00119de:	83 ec 08             	sub    esp,0x8
c00119e1:	68 ff ff 00 00       	push   0xffff
c00119e6:	6a 01                	push   0x1
c00119e8:	e8 ab ff ff ff       	call   c0011998 <__static_initialization_and_destruction_0(int, int)>
c00119ed:	83 c4 10             	add    esp,0x10
c00119f0:	83 c4 0c             	add    esp,0xc
c00119f3:	c3                   	ret    

c00119f4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00119f4:	53                   	push   ebx
c00119f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00119f9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00119fd:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011a03:	89 c8                	mov    eax,ecx
c0011a05:	d1 e8                	shr    eax,1
c0011a07:	03 05 28 e2 02 c0    	add    eax,DWORD PTR ds:0xc002e228
c0011a0d:	83 e1 01             	and    ecx,0x1
c0011a10:	8a 10                	mov    dl,BYTE PTR [eax]
c0011a12:	75 09                	jne    c0011a1d <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011a14:	83 e2 f0             	and    edx,0xfffffff0
c0011a17:	09 da                	or     edx,ebx
c0011a19:	88 10                	mov    BYTE PTR [eax],dl
c0011a1b:	5b                   	pop    ebx
c0011a1c:	c3                   	ret    
c0011a1d:	c1 e3 04             	shl    ebx,0x4
c0011a20:	83 e2 0f             	and    edx,0xf
c0011a23:	09 da                	or     edx,ebx
c0011a25:	88 10                	mov    BYTE PTR [eax],dl
c0011a27:	5b                   	pop    ebx
c0011a28:	c3                   	ret    

c0011a29 <Virt::getPageState(unsigned long)>:
c0011a29:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a2d:	8b 0d 28 e2 02 c0    	mov    ecx,DWORD PTR ds:0xc002e228
c0011a33:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011a39:	89 d0                	mov    eax,edx
c0011a3b:	d1 e8                	shr    eax,1
c0011a3d:	83 e2 01             	and    edx,0x1
c0011a40:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011a43:	75 04                	jne    c0011a49 <Virt::getPageState(unsigned long)+0x20>
c0011a45:	83 e0 0f             	and    eax,0xf
c0011a48:	c3                   	ret    
c0011a49:	c0 e8 04             	shr    al,0x4
c0011a4c:	c3                   	ret    

c0011a4d <Virt::allocateKernelVirtualPages(int)>:
c0011a4d:	55                   	push   ebp
c0011a4e:	31 ed                	xor    ebp,ebp
c0011a50:	57                   	push   edi
c0011a51:	56                   	push   esi
c0011a52:	53                   	push   ebx
c0011a53:	31 db                	xor    ebx,ebx
c0011a55:	83 ec 1c             	sub    esp,0x1c
c0011a58:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011a5c:	8b 3d 24 e2 02 c0    	mov    edi,DWORD PTR ds:0xc002e224
c0011a62:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011a67:	57                   	push   edi
c0011a68:	e8 bc ff ff ff       	call   c0011a29 <Virt::getPageState(unsigned long)>
c0011a6d:	5a                   	pop    edx
c0011a6e:	84 c0                	test   al,al
c0011a70:	75 3a                	jne    c0011aac <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011a72:	85 db                	test   ebx,ebx
c0011a74:	75 02                	jne    c0011a78 <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011a76:	89 fd                	mov    ebp,edi
c0011a78:	43                   	inc    ebx
c0011a79:	39 f3                	cmp    ebx,esi
c0011a7b:	74 5a                	je     c0011ad7 <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011a7d:	47                   	inc    edi
c0011a7e:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011a84:	76 31                	jbe    c0011ab7 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011a86:	c7 05 24 e2 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002e224,0xc8000
c0011a90:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011a95:	75 28                	jne    c0011abf <Virt::allocateKernelVirtualPages(int)+0x72>
c0011a97:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011a9c:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011aa1:	57                   	push   edi
c0011aa2:	e8 82 ff ff ff       	call   c0011a29 <Virt::getPageState(unsigned long)>
c0011aa7:	5a                   	pop    edx
c0011aa8:	84 c0                	test   al,al
c0011aaa:	74 c6                	je     c0011a72 <Virt::allocateKernelVirtualPages(int)+0x25>
c0011aac:	31 db                	xor    ebx,ebx
c0011aae:	47                   	inc    edi
c0011aaf:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011ab5:	77 cf                	ja     c0011a86 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011ab7:	89 3d 24 e2 02 c0    	mov    DWORD PTR ds:0xc002e224,edi
c0011abd:	eb a8                	jmp    c0011a67 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011abf:	83 ec 0c             	sub    esp,0xc
c0011ac2:	68 84 b2 02 c0       	push   0xc002b284
c0011ac7:	e8 21 8e 00 00       	call   c001a8ed <Krnl::panic(char const*)>
c0011acc:	8b 3d 24 e2 02 c0    	mov    edi,DWORD PTR ds:0xc002e224
c0011ad2:	83 c4 10             	add    esp,0x10
c0011ad5:	eb 90                	jmp    c0011a67 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011ad7:	89 2d 24 e2 02 c0    	mov    DWORD PTR ds:0xc002e224,ebp
c0011add:	4b                   	dec    ebx
c0011ade:	74 5f                	je     c0011b3f <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011ae0:	85 f6                	test   esi,esi
c0011ae2:	74 3d                	je     c0011b21 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011ae4:	89 e8                	mov    eax,ebp
c0011ae6:	31 db                	xor    ebx,ebx
c0011ae8:	8d 7e ff             	lea    edi,[esi-0x1]
c0011aeb:	eb 14                	jmp    c0011b01 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011aed:	6a 01                	push   0x1
c0011aef:	43                   	inc    ebx
c0011af0:	50                   	push   eax
c0011af1:	e8 fe fe ff ff       	call   c00119f4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011af6:	58                   	pop    eax
c0011af7:	39 f3                	cmp    ebx,esi
c0011af9:	5a                   	pop    edx
c0011afa:	74 25                	je     c0011b21 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011afc:	a1 24 e2 02 c0       	mov    eax,ds:0xc002e224
c0011b01:	8d 50 01             	lea    edx,[eax+0x1]
c0011b04:	85 db                	test   ebx,ebx
c0011b06:	89 15 24 e2 02 c0    	mov    DWORD PTR ds:0xc002e224,edx
c0011b0c:	74 20                	je     c0011b2e <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011b0e:	39 df                	cmp    edi,ebx
c0011b10:	75 db                	jne    c0011aed <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011b12:	6a 03                	push   0x3
c0011b14:	43                   	inc    ebx
c0011b15:	50                   	push   eax
c0011b16:	e8 d9 fe ff ff       	call   c00119f4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011b1b:	59                   	pop    ecx
c0011b1c:	39 f3                	cmp    ebx,esi
c0011b1e:	58                   	pop    eax
c0011b1f:	75 db                	jne    c0011afc <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011b21:	83 c4 1c             	add    esp,0x1c
c0011b24:	89 e8                	mov    eax,ebp
c0011b26:	5b                   	pop    ebx
c0011b27:	c1 e0 0c             	shl    eax,0xc
c0011b2a:	5e                   	pop    esi
c0011b2b:	5f                   	pop    edi
c0011b2c:	5d                   	pop    ebp
c0011b2d:	c3                   	ret    
c0011b2e:	6a 02                	push   0x2
c0011b30:	bb 01 00 00 00       	mov    ebx,0x1
c0011b35:	50                   	push   eax
c0011b36:	e8 b9 fe ff ff       	call   c00119f4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011b3b:	58                   	pop    eax
c0011b3c:	5a                   	pop    edx
c0011b3d:	eb bd                	jmp    c0011afc <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011b3f:	6a 04                	push   0x4
c0011b41:	8d 45 01             	lea    eax,[ebp+0x1]
c0011b44:	55                   	push   ebp
c0011b45:	a3 24 e2 02 c0       	mov    ds:0xc002e224,eax
c0011b4a:	e8 a5 fe ff ff       	call   c00119f4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011b4f:	59                   	pop    ecx
c0011b50:	89 e8                	mov    eax,ebp
c0011b52:	5b                   	pop    ebx
c0011b53:	c1 e0 0c             	shl    eax,0xc
c0011b56:	83 c4 1c             	add    esp,0x1c
c0011b59:	5b                   	pop    ebx
c0011b5a:	5e                   	pop    esi
c0011b5b:	5f                   	pop    edi
c0011b5c:	5d                   	pop    ebp
c0011b5d:	c3                   	ret    

c0011b5e <Virt::freeSwapfilePage(unsigned long)>:
c0011b5e:	53                   	push   ebx
c0011b5f:	8b 15 0c f4 02 c0    	mov    edx,DWORD PTR ds:0xc002f40c
c0011b65:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011b69:	b8 01 00 00 00       	mov    eax,0x1
c0011b6e:	89 cb                	mov    ebx,ecx
c0011b70:	d3 e0                	shl    eax,cl
c0011b72:	c1 eb 05             	shr    ebx,0x5
c0011b75:	f7 d0                	not    eax
c0011b77:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0011b7a:	5b                   	pop    ebx
c0011b7b:	c3                   	ret    

c0011b7c <Virt::swapIDToSector(unsigned long)>:
c0011b7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b80:	0f af 05 2c e2 02 c0 	imul   eax,DWORD PTR ds:0xc002e22c
c0011b87:	03 05 34 e2 02 c0    	add    eax,DWORD PTR ds:0xc002e234
c0011b8d:	c3                   	ret    

c0011b8e <Virt::allocateSwapfilePage()>:
c0011b8e:	55                   	push   ebp
c0011b8f:	31 d2                	xor    edx,edx
c0011b91:	57                   	push   edi
c0011b92:	56                   	push   esi
c0011b93:	53                   	push   ebx
c0011b94:	83 ec 0c             	sub    esp,0xc
c0011b97:	8b 0d 2c e2 02 c0    	mov    ecx,DWORD PTR ds:0xc002e22c
c0011b9d:	a1 30 e2 02 c0       	mov    eax,ds:0xc002e230
c0011ba2:	f7 f1                	div    ecx
c0011ba4:	39 0d 30 e2 02 c0    	cmp    DWORD PTR ds:0xc002e230,ecx
c0011baa:	72 2d                	jb     c0011bd9 <Virt::allocateSwapfilePage()+0x4b>
c0011bac:	8b 35 0c f4 02 c0    	mov    esi,DWORD PTR ds:0xc002f40c
c0011bb2:	8b 16                	mov    edx,DWORD PTR [esi]
c0011bb4:	f6 c2 01             	test   dl,0x1
c0011bb7:	74 3c                	je     c0011bf5 <Virt::allocateSwapfilePage()+0x67>
c0011bb9:	31 c9                	xor    ecx,ecx
c0011bbb:	bf 01 00 00 00       	mov    edi,0x1
c0011bc0:	eb 12                	jmp    c0011bd4 <Virt::allocateSwapfilePage()+0x46>
c0011bc2:	89 fd                	mov    ebp,edi
c0011bc4:	89 ca                	mov    edx,ecx
c0011bc6:	d3 e5                	shl    ebp,cl
c0011bc8:	c1 ea 05             	shr    edx,0x5
c0011bcb:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011bce:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011bd0:	85 ea                	test   edx,ebp
c0011bd2:	74 2a                	je     c0011bfe <Virt::allocateSwapfilePage()+0x70>
c0011bd4:	41                   	inc    ecx
c0011bd5:	39 c8                	cmp    eax,ecx
c0011bd7:	77 e9                	ja     c0011bc2 <Virt::allocateSwapfilePage()+0x34>
c0011bd9:	83 ec 0c             	sub    esp,0xc
c0011bdc:	68 0b b4 02 c0       	push   0xc002b40b
c0011be1:	e8 07 8d 00 00       	call   c001a8ed <Krnl::panic(char const*)>
c0011be6:	83 c4 10             	add    esp,0x10
c0011be9:	31 c9                	xor    ecx,ecx
c0011beb:	83 c4 0c             	add    esp,0xc
c0011bee:	89 c8                	mov    eax,ecx
c0011bf0:	5b                   	pop    ebx
c0011bf1:	5e                   	pop    esi
c0011bf2:	5f                   	pop    edi
c0011bf3:	5d                   	pop    ebp
c0011bf4:	c3                   	ret    
c0011bf5:	89 f3                	mov    ebx,esi
c0011bf7:	bd 01 00 00 00       	mov    ebp,0x1
c0011bfc:	31 c9                	xor    ecx,ecx
c0011bfe:	09 ea                	or     edx,ebp
c0011c00:	89 c8                	mov    eax,ecx
c0011c02:	89 13                	mov    DWORD PTR [ebx],edx
c0011c04:	83 c4 0c             	add    esp,0xc
c0011c07:	5b                   	pop    ebx
c0011c08:	5e                   	pop    esi
c0011c09:	5f                   	pop    edi
c0011c0a:	5d                   	pop    ebp
c0011c0b:	c3                   	ret    

c0011c0c <Virt::virtualMemorySetup()>:
c0011c0c:	53                   	push   ebx
c0011c0d:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011c12:	83 ec 08             	sub    esp,0x8
c0011c15:	6a 0f                	push   0xf
c0011c17:	53                   	push   ebx
c0011c18:	43                   	inc    ebx
c0011c19:	e8 d6 fd ff ff       	call   c00119f4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c1e:	59                   	pop    ecx
c0011c1f:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011c25:	58                   	pop    eax
c0011c26:	75 ed                	jne    c0011c15 <Virt::virtualMemorySetup()+0x9>
c0011c28:	83 ec 08             	sub    esp,0x8
c0011c2b:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011c30:	68 00 00 00 c8       	push   0xc8000000
c0011c35:	68 22 b4 02 c0       	push   0xc002b422
c0011c3a:	e8 14 12 00 00       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0011c3f:	58                   	pop    eax
c0011c40:	5a                   	pop    edx
c0011c41:	68 00 f0 ff ef       	push   0xeffff000
c0011c46:	68 36 b4 02 c0       	push   0xc002b436
c0011c4b:	e8 03 12 00 00       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0011c50:	83 c4 10             	add    esp,0x10
c0011c53:	83 ec 08             	sub    esp,0x8
c0011c56:	6a 00                	push   0x0
c0011c58:	53                   	push   ebx
c0011c59:	43                   	inc    ebx
c0011c5a:	e8 95 fd ff ff       	call   c00119f4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c5f:	83 c4 10             	add    esp,0x10
c0011c62:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011c68:	75 e9                	jne    c0011c53 <Virt::virtualMemorySetup()+0x47>
c0011c6a:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011c6f:	83 ec 08             	sub    esp,0x8
c0011c72:	6a 0f                	push   0xf
c0011c74:	53                   	push   ebx
c0011c75:	43                   	inc    ebx
c0011c76:	e8 79 fd ff ff       	call   c00119f4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c7b:	83 c4 10             	add    esp,0x10
c0011c7e:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011c84:	75 e9                	jne    c0011c6f <Virt::virtualMemorySetup()+0x63>
c0011c86:	83 c4 08             	add    esp,0x8
c0011c89:	5b                   	pop    ebx
c0011c8a:	c3                   	ret    

c0011c8b <Virt::swappingSetup()>:
c0011c8b:	c3                   	ret    

c0011c8c <Virt::setupPageSwapping(int)>:
c0011c8c:	57                   	push   edi
c0011c8d:	56                   	push   esi
c0011c8e:	53                   	push   ebx
c0011c8f:	83 ec 1c             	sub    esp,0x1c
c0011c92:	68 4a b4 02 c0       	push   0xc002b44a
c0011c97:	e8 b7 11 00 00       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0011c9c:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011ca3:	e8 00 dc ff ff       	call   c000f8a8 <malloc>
c0011ca8:	83 c4 0c             	add    esp,0xc
c0011cab:	89 c6                	mov    esi,eax
c0011cad:	ff 35 f0 27 03 c0    	push   DWORD PTR ds:0xc00327f0
c0011cb3:	68 5e b4 02 c0       	push   0xc002b45e
c0011cb8:	50                   	push   eax
c0011cb9:	e8 f4 16 00 00       	call   c00133b2 <File::File(char const*, Process*)>
c0011cbe:	89 34 24             	mov    DWORD PTR [esp],esi
c0011cc1:	e8 c8 18 00 00       	call   c001358e <File::unlink()>
c0011cc6:	59                   	pop    ecx
c0011cc7:	5b                   	pop    ebx
c0011cc8:	6a 12                	push   0x12
c0011cca:	56                   	push   esi
c0011ccb:	e8 46 17 00 00       	call   c0013416 <File::open(FileOpenMode)>
c0011cd0:	83 c4 10             	add    esp,0x10
c0011cd3:	85 c0                	test   eax,eax
c0011cd5:	0f 85 5b 01 00 00    	jne    c0011e36 <Virt::setupPageSwapping(int)+0x1aa>
c0011cdb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011cdf:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011ce7:	c1 e3 08             	shl    ebx,0x8
c0011cea:	83 ec 0c             	sub    esp,0xc
c0011ced:	68 00 00 01 00       	push   0x10000
c0011cf2:	e8 b1 db ff ff       	call   c000f8a8 <malloc>
c0011cf7:	83 c4 0c             	add    esp,0xc
c0011cfa:	89 c7                	mov    edi,eax
c0011cfc:	68 00 00 01 00       	push   0x10000
c0011d01:	68 ee 00 00 00       	push   0xee
c0011d06:	50                   	push   eax
c0011d07:	e8 60 ea fe ff       	call   c000076c <memset>
c0011d0c:	83 c4 10             	add    esp,0x10
c0011d0f:	85 db                	test   ebx,ebx
c0011d11:	79 03                	jns    c0011d16 <Virt::setupPageSwapping(int)+0x8a>
c0011d13:	83 c3 0f             	add    ebx,0xf
c0011d16:	c1 fb 04             	sar    ebx,0x4
c0011d19:	4b                   	dec    ebx
c0011d1a:	83 fb ff             	cmp    ebx,0xffffffff
c0011d1d:	74 4f                	je     c0011d6e <Virt::setupPageSwapping(int)+0xe2>
c0011d1f:	83 ec 0c             	sub    esp,0xc
c0011d22:	8b 06                	mov    eax,DWORD PTR [esi]
c0011d24:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011d28:	52                   	push   edx
c0011d29:	57                   	push   edi
c0011d2a:	6a 00                	push   0x0
c0011d2c:	68 00 00 01 00       	push   0x10000
c0011d31:	56                   	push   esi
c0011d32:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011d35:	83 c4 20             	add    esp,0x20
c0011d38:	85 c0                	test   eax,eax
c0011d3a:	0f 85 e0 00 00 00    	jne    c0011e20 <Virt::setupPageSwapping(int)+0x194>
c0011d40:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d44:	3d 00 00 01 00       	cmp    eax,0x10000
c0011d49:	74 ce                	je     c0011d19 <Virt::setupPageSwapping(int)+0x8d>
c0011d4b:	83 ec 08             	sub    esp,0x8
c0011d4e:	4b                   	dec    ebx
c0011d4f:	50                   	push   eax
c0011d50:	68 b1 b4 02 c0       	push   0xc002b4b1
c0011d55:	e8 f9 10 00 00       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0011d5a:	c7 04 24 ba b4 02 c0 	mov    DWORD PTR [esp],0xc002b4ba
c0011d61:	e8 87 8b 00 00       	call   c001a8ed <Krnl::panic(char const*)>
c0011d66:	83 c4 10             	add    esp,0x10
c0011d69:	83 fb ff             	cmp    ebx,0xffffffff
c0011d6c:	75 b1                	jne    c0011d1f <Virt::setupPageSwapping(int)+0x93>
c0011d6e:	83 ec 0c             	sub    esp,0xc
c0011d71:	56                   	push   esi
c0011d72:	e8 fd 16 00 00       	call   c0013474 <File::close()>
c0011d77:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011d7a:	e8 49 db ff ff       	call   c000f8c8 <rfree>
c0011d7f:	83 c4 10             	add    esp,0x10
c0011d82:	85 f6                	test   esi,esi
c0011d84:	74 0c                	je     c0011d92 <Virt::setupPageSwapping(int)+0x106>
c0011d86:	83 ec 0c             	sub    esp,0xc
c0011d89:	8b 06                	mov    eax,DWORD PTR [esi]
c0011d8b:	56                   	push   esi
c0011d8c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011d8f:	83 c4 10             	add    esp,0x10
c0011d92:	83 ec 08             	sub    esp,0x8
c0011d95:	a1 a8 f8 02 c0       	mov    eax,ds:0xc002f8a8
c0011d9a:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0011da0:	8b 10                	mov    edx,DWORD PTR [eax]
c0011da2:	68 5e b4 02 c0       	push   0xc002b45e
c0011da7:	50                   	push   eax
c0011da8:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c0011dab:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011daf:	c6 05 38 e2 02 c0 43 	mov    BYTE PTR ds:0xc002e238,0x43
c0011db6:	c1 e2 0b             	shl    edx,0xb
c0011db9:	a3 34 e2 02 c0       	mov    ds:0xc002e234,eax
c0011dbe:	89 15 30 e2 02 c0    	mov    DWORD PTR ds:0xc002e230,edx
c0011dc4:	c7 05 2c e2 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002e22c,0x8
c0011dce:	c1 ea 08             	shr    edx,0x8
c0011dd1:	89 14 24             	mov    DWORD PTR [esp],edx
c0011dd4:	e8 cf da ff ff       	call   c000f8a8 <malloc>
c0011dd9:	83 c4 0c             	add    esp,0xc
c0011ddc:	89 c1                	mov    ecx,eax
c0011dde:	a3 0c f4 02 c0       	mov    ds:0xc002f40c,eax
c0011de3:	31 d2                	xor    edx,edx
c0011de5:	a1 30 e2 02 c0       	mov    eax,ds:0xc002e230
c0011dea:	f7 35 2c e2 02 c0    	div    DWORD PTR ds:0xc002e22c
c0011df0:	c1 e8 05             	shr    eax,0x5
c0011df3:	50                   	push   eax
c0011df4:	6a 00                	push   0x0
c0011df6:	51                   	push   ecx
c0011df7:	e8 70 e9 fe ff       	call   c000076c <memset>
c0011dfc:	58                   	pop    eax
c0011dfd:	a1 30 e2 02 c0       	mov    eax,ds:0xc002e230
c0011e02:	5a                   	pop    edx
c0011e03:	31 d2                	xor    edx,edx
c0011e05:	f7 35 2c e2 02 c0    	div    DWORD PTR ds:0xc002e22c
c0011e0b:	c1 e8 05             	shr    eax,0x5
c0011e0e:	50                   	push   eax
c0011e0f:	68 c0 b4 02 c0       	push   0xc002b4c0
c0011e14:	e8 3a 10 00 00       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0011e19:	83 c4 20             	add    esp,0x20
c0011e1c:	5b                   	pop    ebx
c0011e1d:	5e                   	pop    esi
c0011e1e:	5f                   	pop    edi
c0011e1f:	c3                   	ret    
c0011e20:	83 ec 08             	sub    esp,0x8
c0011e23:	50                   	push   eax
c0011e24:	68 99 b4 02 c0       	push   0xc002b499
c0011e29:	e8 25 10 00 00       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0011e2e:	83 c4 10             	add    esp,0x10
c0011e31:	e9 0a ff ff ff       	jmp    c0011d40 <Virt::setupPageSwapping(int)+0xb4>
c0011e36:	83 ec 08             	sub    esp,0x8
c0011e39:	50                   	push   eax
c0011e3a:	68 75 b4 02 c0       	push   0xc002b475
c0011e3f:	e8 0f 10 00 00       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0011e44:	c7 04 24 7e b4 02 c0 	mov    DWORD PTR [esp],0xc002b47e
c0011e4b:	e8 9d 8a 00 00       	call   c001a8ed <Krnl::panic(char const*)>
c0011e50:	83 c4 10             	add    esp,0x10
c0011e53:	e9 83 fe ff ff       	jmp    c0011cdb <Virt::setupPageSwapping(int)+0x4f>

c0011e58 <VAS::VAS()>:
c0011e58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e5c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e63:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e67:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011e6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e72:	a3 10 f4 02 c0       	mov    ds:0xc002f410,eax
c0011e77:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e7b:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011e7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e83:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011e86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e8a:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0011e91:	90                   	nop
c0011e92:	c3                   	ret    
c0011e93:	90                   	nop

c0011e94 <VAS::VAS(VAS*)>:
c0011e94:	83 ec 0c             	sub    esp,0xc
c0011e97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e9b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011ea2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ea6:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011ead:	83 ec 0c             	sub    esp,0xc
c0011eb0:	68 a4 b2 02 c0       	push   0xc002b2a4
c0011eb5:	e8 33 8a 00 00       	call   c001a8ed <Krnl::panic(char const*)>
c0011eba:	83 c4 10             	add    esp,0x10
c0011ebd:	90                   	nop
c0011ebe:	83 c4 0c             	add    esp,0xc
c0011ec1:	c3                   	ret    

c0011ec2 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011ec2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ec6:	89 c2                	mov    edx,eax
c0011ec8:	c1 e8 0a             	shr    eax,0xa
c0011ecb:	c1 ea 16             	shr    edx,0x16
c0011ece:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011ed3:	19 c9                	sbb    ecx,ecx
c0011ed5:	c1 e2 0c             	shl    edx,0xc
c0011ed8:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011ede:	25 fc 0f 00 00       	and    eax,0xffc
c0011ee3:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011eea:	01 d0                	add    eax,edx
c0011eec:	c3                   	ret    
c0011eed:	90                   	nop

c0011eee <VAS::getPageTableEntry(unsigned long)>:
c0011eee:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011ef2:	89 ca                	mov    edx,ecx
c0011ef4:	c1 e9 0a             	shr    ecx,0xa
c0011ef7:	c1 ea 16             	shr    edx,0x16
c0011efa:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011f00:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011f06:	c1 e0 0c             	shl    eax,0xc
c0011f09:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011f0c:	c3                   	ret    

c0011f0d <Virt::freeKernelVirtualPages(unsigned long)>:
c0011f0d:	57                   	push   edi
c0011f0e:	56                   	push   esi
c0011f0f:	be 01 00 00 00       	mov    esi,0x1
c0011f14:	53                   	push   ebx
c0011f15:	83 ec 10             	sub    esp,0x10
c0011f18:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011f1c:	c1 eb 0c             	shr    ebx,0xc
c0011f1f:	eb 3f                	jmp    c0011f60 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011f21:	83 ec 08             	sub    esp,0x8
c0011f24:	57                   	push   edi
c0011f25:	ff 35 10 f4 02 c0    	push   DWORD PTR ds:0xc002f410
c0011f2b:	e8 be ff ff ff       	call   c0011eee <VAS::getPageTableEntry(unsigned long)>
c0011f30:	83 c4 10             	add    esp,0x10
c0011f33:	8b 00                	mov    eax,DWORD PTR [eax]
c0011f35:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011f39:	f6 c4 04             	test   ah,0x4
c0011f3c:	75 5f                	jne    c0011f9d <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011f3e:	80 fa 04             	cmp    dl,0x4
c0011f41:	74 78                	je     c0011fbb <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011f43:	80 fa 02             	cmp    dl,0x2
c0011f46:	0f 84 88 00 00 00    	je     c0011fd4 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011f4c:	80 fa 03             	cmp    dl,0x3
c0011f4f:	0f 84 ad 00 00 00    	je     c0012002 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011f55:	fe ca                	dec    dl
c0011f57:	0f 84 92 00 00 00    	je     c0011fef <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011f5d:	43                   	inc    ebx
c0011f5e:	31 f6                	xor    esi,esi
c0011f60:	53                   	push   ebx
c0011f61:	89 df                	mov    edi,ebx
c0011f63:	e8 c1 fa ff ff       	call   c0011a29 <Virt::getPageState(unsigned long)>
c0011f68:	c1 e7 0c             	shl    edi,0xc
c0011f6b:	59                   	pop    ecx
c0011f6c:	84 c0                	test   al,al
c0011f6e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011f72:	75 ad                	jne    c0011f21 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011f74:	83 ec 0c             	sub    esp,0xc
c0011f77:	68 db b4 02 c0       	push   0xc002b4db
c0011f7c:	e8 6c 89 00 00       	call   c001a8ed <Krnl::panic(char const*)>
c0011f81:	58                   	pop    eax
c0011f82:	5a                   	pop    edx
c0011f83:	57                   	push   edi
c0011f84:	ff 35 10 f4 02 c0    	push   DWORD PTR ds:0xc002f410
c0011f8a:	e8 5f ff ff ff       	call   c0011eee <VAS::getPageTableEntry(unsigned long)>
c0011f8f:	83 c4 10             	add    esp,0x10
c0011f92:	8b 00                	mov    eax,DWORD PTR [eax]
c0011f94:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011f98:	f6 c4 04             	test   ah,0x4
c0011f9b:	74 c0                	je     c0011f5d <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011f9d:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011fa1:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011fa6:	83 ec 0c             	sub    esp,0xc
c0011fa9:	50                   	push   eax
c0011faa:	e8 db de ff ff       	call   c000fe8a <Phys::freePage(unsigned long)>
c0011faf:	83 c4 10             	add    esp,0x10
c0011fb2:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011fb6:	80 fa 04             	cmp    dl,0x4
c0011fb9:	75 88                	jne    c0011f43 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011fbb:	89 f0                	mov    eax,esi
c0011fbd:	84 c0                	test   al,al
c0011fbf:	75 47                	jne    c0012008 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011fc1:	c7 44 24 20 c8 b2 02 c0 	mov    DWORD PTR [esp+0x20],0xc002b2c8
c0011fc9:	83 c4 10             	add    esp,0x10
c0011fcc:	5b                   	pop    ebx
c0011fcd:	5e                   	pop    esi
c0011fce:	5f                   	pop    edi
c0011fcf:	e9 19 89 00 00       	jmp    c001a8ed <Krnl::panic(char const*)>
c0011fd4:	89 f0                	mov    eax,esi
c0011fd6:	84 c0                	test   al,al
c0011fd8:	75 15                	jne    c0011fef <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011fda:	83 ec 0c             	sub    esp,0xc
c0011fdd:	68 f7 b4 02 c0       	push   0xc002b4f7
c0011fe2:	e8 06 89 00 00       	call   c001a8ed <Krnl::panic(char const*)>
c0011fe7:	83 c4 10             	add    esp,0x10
c0011fea:	e9 6e ff ff ff       	jmp    c0011f5d <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011fef:	83 ec 08             	sub    esp,0x8
c0011ff2:	6a 00                	push   0x0
c0011ff4:	53                   	push   ebx
c0011ff5:	e8 fa f9 ff ff       	call   c00119f4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011ffa:	83 c4 10             	add    esp,0x10
c0011ffd:	e9 5b ff ff ff       	jmp    c0011f5d <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0012002:	89 f0                	mov    eax,esi
c0012004:	84 c0                	test   al,al
c0012006:	75 15                	jne    c001201d <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0012008:	83 ec 08             	sub    esp,0x8
c001200b:	6a 00                	push   0x0
c001200d:	53                   	push   ebx
c001200e:	e8 e1 f9 ff ff       	call   c00119f4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012013:	83 c4 10             	add    esp,0x10
c0012016:	83 c4 10             	add    esp,0x10
c0012019:	5b                   	pop    ebx
c001201a:	5e                   	pop    esi
c001201b:	5f                   	pop    edi
c001201c:	c3                   	ret    
c001201d:	c7 44 24 20 13 b5 02 c0 	mov    DWORD PTR [esp+0x20],0xc002b513
c0012025:	83 c4 10             	add    esp,0x10
c0012028:	5b                   	pop    ebx
c0012029:	5e                   	pop    esi
c001202a:	5f                   	pop    edi
c001202b:	e9 bd 88 00 00       	jmp    c001a8ed <Krnl::panic(char const*)>

c0012030 <VAS::freeAllocatedPages(unsigned long)>:
c0012030:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012034:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012038:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c001203c:	74 09                	je     c0012047 <VAS::freeAllocatedPages(unsigned long)+0x17>
c001203e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012042:	e9 c6 fe ff ff       	jmp    c0011f0d <Virt::freeKernelVirtualPages(unsigned long)>
c0012047:	c7 44 24 04 ec b2 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b2ec
c001204f:	e9 ff 0d 00 00       	jmp    c0012e53 <Dbg::kprintf(char const*, ...)>

c0012054 <VAS::virtualToPhysical(unsigned long)>:
c0012054:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0012058:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001205c:	e8 8d fe ff ff       	call   c0011eee <VAS::getPageTableEntry(unsigned long)>
c0012061:	5a                   	pop    edx
c0012062:	8b 00                	mov    eax,DWORD PTR [eax]
c0012064:	59                   	pop    ecx
c0012065:	25 00 f0 ff ff       	and    eax,0xfffff000
c001206a:	c3                   	ret    
c001206b:	90                   	nop

c001206c <VAS::reflagRange(unsigned long, int, int, int)>:
c001206c:	55                   	push   ebp
c001206d:	57                   	push   edi
c001206e:	56                   	push   esi
c001206f:	53                   	push   ebx
c0012070:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012074:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0012078:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001207c:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012080:	85 db                	test   ebx,ebx
c0012082:	7e 22                	jle    c00120a6 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0012084:	c1 e3 0c             	shl    ebx,0xc
c0012087:	01 f3                	add    ebx,esi
c0012089:	56                   	push   esi
c001208a:	81 c6 00 10 00 00    	add    esi,0x1000
c0012090:	55                   	push   ebp
c0012091:	e8 58 fe ff ff       	call   c0011eee <VAS::getPageTableEntry(unsigned long)>
c0012096:	5a                   	pop    edx
c0012097:	59                   	pop    ecx
c0012098:	8b 08                	mov    ecx,DWORD PTR [eax]
c001209a:	21 f9                	and    ecx,edi
c001209c:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c00120a0:	39 f3                	cmp    ebx,esi
c00120a2:	89 08                	mov    DWORD PTR [eax],ecx
c00120a4:	75 e3                	jne    c0012089 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c00120a6:	5b                   	pop    ebx
c00120a7:	5e                   	pop    esi
c00120a8:	5f                   	pop    edi
c00120a9:	5d                   	pop    ebp
c00120aa:	c3                   	ret    
c00120ab:	90                   	nop

c00120ac <VAS::setToWriteCombining(unsigned long, int)>:
c00120ac:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c00120b1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00120b7:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c00120be:	75 01                	jne    c00120c1 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c00120c0:	c3                   	ret    
c00120c1:	68 80 00 00 00       	push   0x80
c00120c6:	6a ff                	push   0xffffffff
c00120c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00120cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00120d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00120d4:	e8 93 ff ff ff       	call   c001206c <VAS::reflagRange(unsigned long, int, int, int)>
c00120d9:	83 c4 14             	add    esp,0x14
c00120dc:	c3                   	ret    
c00120dd:	90                   	nop

c00120de <VAS::mapOtherVASIn(bool, VAS*)>:
c00120de:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00120e3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00120e7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00120ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00120ee:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00120f1:	19 c0                	sbb    eax,eax
c00120f3:	83 ca 03             	or     edx,0x3
c00120f6:	83 e0 fc             	and    eax,0xfffffffc
c00120f9:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0012100:	0f 20 d8             	mov    eax,cr3
c0012103:	0f 22 d8             	mov    cr3,eax
c0012106:	c3                   	ret    
c0012107:	90                   	nop

c0012108 <VAS::~VAS()>:
c0012108:	83 ec 2c             	sub    esp,0x2c
c001210b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012113:	fa                   	cli    
c0012114:	a1 c8 27 03 c0       	mov    eax,ds:0xc00327c8
c0012119:	40                   	inc    eax
c001211a:	a3 c8 27 03 c0       	mov    ds:0xc00327c8,eax
c001211f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012124:	8b 00                	mov    eax,DWORD PTR [eax]
c0012126:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012129:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001212f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012133:	6a 01                	push   0x1
c0012135:	50                   	push   eax
c0012136:	e8 a3 ff ff ff       	call   c00120de <VAS::mapOtherVASIn(bool, VAS*)>
c001213b:	83 c4 0c             	add    esp,0xc
c001213e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012146:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c001214e:	0f 8f d4 00 00 00    	jg     c0012228 <VAS::~VAS()+0x120>
c0012154:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012158:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001215b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001215f:	c1 e2 02             	shl    edx,0x2
c0012162:	01 d0                	add    eax,edx
c0012164:	8b 00                	mov    eax,DWORD PTR [eax]
c0012166:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001216a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001216e:	83 e0 01             	and    eax,0x1
c0012171:	0f 84 a8 00 00 00    	je     c001221f <VAS::~VAS()+0x117>
c0012177:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001217f:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0012187:	7f 72                	jg     c00121fb <VAS::~VAS()+0xf3>
c0012189:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001218d:	c1 e0 0a             	shl    eax,0xa
c0012190:	89 c2                	mov    edx,eax
c0012192:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012196:	01 d0                	add    eax,edx
c0012198:	c1 e0 0c             	shl    eax,0xc
c001219b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001219f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00121a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00121a6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00121a9:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c00121af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00121b3:	6a 01                	push   0x1
c00121b5:	50                   	push   eax
c00121b6:	e8 07 fd ff ff       	call   c0011ec2 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c00121bb:	83 c4 0c             	add    esp,0xc
c00121be:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00121c2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00121c6:	8b 00                	mov    eax,DWORD PTR [eax]
c00121c8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00121cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121d0:	25 01 04 00 00       	and    eax,0x401
c00121d5:	3d 01 04 00 00       	cmp    eax,0x401
c00121da:	75 19                	jne    c00121f5 <VAS::~VAS()+0xed>
c00121dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121e0:	25 00 f0 ff ff       	and    eax,0xfffff000
c00121e5:	83 ec 0c             	sub    esp,0xc
c00121e8:	50                   	push   eax
c00121e9:	e8 9c dc ff ff       	call   c000fe8a <Phys::freePage(unsigned long)>
c00121ee:	83 c4 10             	add    esp,0x10
c00121f1:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00121f5:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00121f9:	eb 84                	jmp    c001217f <VAS::~VAS()+0x77>
c00121fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00121ff:	25 00 04 00 00       	and    eax,0x400
c0012204:	74 19                	je     c001221f <VAS::~VAS()+0x117>
c0012206:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001220a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001220f:	83 ec 0c             	sub    esp,0xc
c0012212:	50                   	push   eax
c0012213:	e8 72 dc ff ff       	call   c000fe8a <Phys::freePage(unsigned long)>
c0012218:	83 c4 10             	add    esp,0x10
c001221b:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001221f:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012223:	e9 1e ff ff ff       	jmp    c0012146 <VAS::~VAS()+0x3e>
c0012228:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001222c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001222f:	83 ec 0c             	sub    esp,0xc
c0012232:	50                   	push   eax
c0012233:	e8 d5 fc ff ff       	call   c0011f0d <Virt::freeKernelVirtualPages(unsigned long)>
c0012238:	83 c4 10             	add    esp,0x10
c001223b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001223f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0012242:	83 ec 0c             	sub    esp,0xc
c0012245:	50                   	push   eax
c0012246:	e8 3f dc ff ff       	call   c000fe8a <Phys::freePage(unsigned long)>
c001224b:	83 c4 10             	add    esp,0x10
c001224e:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012252:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012256:	c1 e0 02             	shl    eax,0x2
c0012259:	83 ec 08             	sub    esp,0x8
c001225c:	50                   	push   eax
c001225d:	68 10 b3 02 c0       	push   0xc002b310
c0012262:	e8 ec 0b 00 00       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0012267:	83 c4 10             	add    esp,0x10
c001226a:	a1 c8 27 03 c0       	mov    eax,ds:0xc00327c8
c001226f:	48                   	dec    eax
c0012270:	a3 c8 27 03 c0       	mov    ds:0xc00327c8,eax
c0012275:	a1 c8 27 03 c0       	mov    eax,ds:0xc00327c8
c001227a:	85 c0                	test   eax,eax
c001227c:	75 01                	jne    c001227f <VAS::~VAS()+0x177>
c001227e:	fb                   	sti    
c001227f:	90                   	nop
c0012280:	83 c4 2c             	add    esp,0x2c
c0012283:	c3                   	ret    

c0012284 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0012284:	55                   	push   ebp
c0012285:	57                   	push   edi
c0012286:	56                   	push   esi
c0012287:	53                   	push   ebx
c0012288:	83 ec 1c             	sub    esp,0x1c
c001228b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001228f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012293:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0012299:	77 08                	ja     c00122a3 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c001229b:	0f 20 d8             	mov    eax,cr3
c001229e:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c00122a1:	75 47                	jne    c00122ea <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c00122a3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00122a7:	09 d8                	or     eax,ebx
c00122a9:	a9 ff 0f 00 00       	test   eax,0xfff
c00122ae:	75 57                	jne    c0012307 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c00122b0:	89 de                	mov    esi,ebx
c00122b2:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00122b5:	c1 ee 16             	shr    esi,0x16
c00122b8:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c00122bf:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c00122c3:	74 54                	je     c0012319 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c00122c5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00122c9:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c00122cf:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00122d3:	c1 e6 0c             	shl    esi,0xc
c00122d6:	c1 eb 0a             	shr    ebx,0xa
c00122d9:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00122df:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c00122e2:	83 c4 1c             	add    esp,0x1c
c00122e5:	5b                   	pop    ebx
c00122e6:	5e                   	pop    esi
c00122e7:	5f                   	pop    edi
c00122e8:	5d                   	pop    ebp
c00122e9:	c3                   	ret    
c00122ea:	83 ec 0c             	sub    esp,0xc
c00122ed:	68 30 b3 02 c0       	push   0xc002b330
c00122f2:	e8 5c 0b 00 00       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c00122f7:	83 c4 10             	add    esp,0x10
c00122fa:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00122fe:	09 d8                	or     eax,ebx
c0012300:	a9 ff 0f 00 00       	test   eax,0xfff
c0012305:	74 a9                	je     c00122b0 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0012307:	83 ec 0c             	sub    esp,0xc
c001230a:	68 98 b3 02 c0       	push   0xc002b398
c001230f:	e8 d9 85 00 00       	call   c001a8ed <Krnl::panic(char const*)>
c0012314:	83 c4 10             	add    esp,0x10
c0012317:	eb 97                	jmp    c00122b0 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0012319:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001231d:	e8 f2 db ff ff       	call   c000ff14 <Phys::allocatePage()>
c0012322:	83 ec 0c             	sub    esp,0xc
c0012325:	89 c5                	mov    ebp,eax
c0012327:	8b 0d 10 f4 02 c0    	mov    ecx,DWORD PTR ds:0xc002f410
c001232d:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0012331:	6a 01                	push   0x1
c0012333:	e8 15 f7 ff ff       	call   c0011a4d <Virt::allocateKernelVirtualPages(int)>
c0012338:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001233f:	6a 01                	push   0x1
c0012341:	50                   	push   eax
c0012342:	55                   	push   ebp
c0012343:	81 cd 07 04 00 00    	or     ebp,0x407
c0012349:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001234d:	51                   	push   ecx
c001234e:	e8 27 02 00 00       	call   c001257a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012353:	83 c4 1c             	add    esp,0x1c
c0012356:	68 00 10 00 00       	push   0x1000
c001235b:	6a 00                	push   0x0
c001235d:	50                   	push   eax
c001235e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012362:	e8 05 e4 fe ff       	call   c000076c <memset>
c0012367:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001236b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001236e:	e8 9a fb ff ff       	call   c0011f0d <Virt::freeKernelVirtualPages(unsigned long)>
c0012373:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012377:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c001237a:	83 c4 10             	add    esp,0x10
c001237d:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0012380:	e9 40 ff ff ff       	jmp    c00122c5 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0012385:	90                   	nop

c0012386 <VAS::allocatePages(int, int)>:
c0012386:	55                   	push   ebp
c0012387:	57                   	push   edi
c0012388:	56                   	push   esi
c0012389:	53                   	push   ebx
c001238a:	83 ec 1c             	sub    esp,0x1c
c001238d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012391:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c0012396:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001239c:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c00123a2:	83 e0 01             	and    eax,0x1
c00123a5:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c00123a9:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00123ad:	0f 85 cc 00 00 00    	jne    c001247f <VAS::allocatePages(int, int)+0xf9>
c00123b3:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00123b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00123ba:	85 c0                	test   eax,eax
c00123bc:	0f 84 a1 00 00 00    	je     c0012463 <VAS::allocatePages(int, int)+0xdd>
c00123c2:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00123c6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00123ca:	c1 e6 0c             	shl    esi,0xc
c00123cd:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c00123d1:	85 c0                	test   eax,eax
c00123d3:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00123d6:	7e 33                	jle    c001240b <VAS::allocatePages(int, int)+0x85>
c00123d8:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00123dc:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00123e0:	81 cd 00 04 00 00    	or     ebp,0x400
c00123e6:	e8 29 db ff ff       	call   c000ff14 <Phys::allocatePage()>
c00123eb:	55                   	push   ebp
c00123ec:	53                   	push   ebx
c00123ed:	50                   	push   eax
c00123ee:	57                   	push   edi
c00123ef:	e8 90 fe ff ff       	call   c0012284 <VAS::mapPage(unsigned long, unsigned long, int)>
c00123f4:	83 c4 10             	add    esp,0x10
c00123f7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00123fc:	74 03                	je     c0012401 <VAS::allocatePages(int, int)+0x7b>
c00123fe:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012401:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012407:	39 de                	cmp    esi,ebx
c0012409:	75 db                	jne    c00123e6 <VAS::allocatePages(int, int)+0x60>
c001240b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012410:	75 12                	jne    c0012424 <VAS::allocatePages(int, int)+0x9e>
c0012412:	0f 20 d8             	mov    eax,cr3
c0012415:	0f 22 d8             	mov    cr3,eax
c0012418:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001241c:	83 c4 1c             	add    esp,0x1c
c001241f:	5b                   	pop    ebx
c0012420:	5e                   	pop    esi
c0012421:	5f                   	pop    edi
c0012422:	5d                   	pop    ebp
c0012423:	c3                   	ret    
c0012424:	c1 ee 0a             	shr    esi,0xa
c0012427:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001242b:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012431:	c1 eb 0a             	shr    ebx,0xa
c0012434:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c001243a:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012440:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012446:	39 c3                	cmp    ebx,eax
c0012448:	77 ce                	ja     c0012418 <VAS::allocatePages(int, int)+0x92>
c001244a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001244d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012453:	39 d8                	cmp    eax,ebx
c0012455:	73 f3                	jae    c001244a <VAS::allocatePages(int, int)+0xc4>
c0012457:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001245b:	83 c4 1c             	add    esp,0x1c
c001245e:	5b                   	pop    ebx
c001245f:	5e                   	pop    esi
c0012460:	5f                   	pop    edi
c0012461:	5d                   	pop    ebp
c0012462:	c3                   	ret    
c0012463:	83 ec 0c             	sub    esp,0xc
c0012466:	68 bc b3 02 c0       	push   0xc002b3bc
c001246b:	e8 7d 84 00 00       	call   c001a8ed <Krnl::panic(char const*)>
c0012470:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012473:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012477:	83 c4 10             	add    esp,0x10
c001247a:	e9 43 ff ff ff       	jmp    c00123c2 <VAS::allocatePages(int, int)+0x3c>
c001247f:	83 ec 0c             	sub    esp,0xc
c0012482:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012486:	e8 c2 f5 ff ff       	call   c0011a4d <Virt::allocateKernelVirtualPages(int)>
c001248b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001248f:	83 c4 10             	add    esp,0x10
c0012492:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0012497:	0f 87 9b 00 00 00    	ja     c0012538 <VAS::allocatePages(int, int)+0x1b2>
c001249d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00124a1:	85 d2                	test   edx,edx
c00124a3:	7e 3c                	jle    c00124e1 <VAS::allocatePages(int, int)+0x15b>
c00124a5:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00124a9:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00124ad:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00124b1:	c1 e5 0c             	shl    ebp,0xc
c00124b4:	81 ce 00 04 00 00    	or     esi,0x400
c00124ba:	01 dd                	add    ebp,ebx
c00124bc:	e8 53 da ff ff       	call   c000ff14 <Phys::allocatePage()>
c00124c1:	56                   	push   esi
c00124c2:	53                   	push   ebx
c00124c3:	50                   	push   eax
c00124c4:	57                   	push   edi
c00124c5:	e8 ba fd ff ff       	call   c0012284 <VAS::mapPage(unsigned long, unsigned long, int)>
c00124ca:	83 c4 10             	add    esp,0x10
c00124cd:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00124d2:	74 03                	je     c00124d7 <VAS::allocatePages(int, int)+0x151>
c00124d4:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00124d7:	81 c3 00 10 00 00    	add    ebx,0x1000
c00124dd:	39 dd                	cmp    ebp,ebx
c00124df:	75 db                	jne    c00124bc <VAS::allocatePages(int, int)+0x136>
c00124e1:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00124e6:	0f 84 26 ff ff ff    	je     c0012412 <VAS::allocatePages(int, int)+0x8c>
c00124ec:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00124f0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00124f4:	89 d3                	mov    ebx,edx
c00124f6:	c1 e0 0c             	shl    eax,0xc
c00124f9:	c1 eb 0a             	shr    ebx,0xa
c00124fc:	01 d0                	add    eax,edx
c00124fe:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012504:	c1 e8 0a             	shr    eax,0xa
c0012507:	81 eb 00 00 40 00    	sub    ebx,0x400000
c001250d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012512:	2d 00 00 40 00       	sub    eax,0x400000
c0012517:	39 c3                	cmp    ebx,eax
c0012519:	0f 87 f9 fe ff ff    	ja     c0012418 <VAS::allocatePages(int, int)+0x92>
c001251f:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012522:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012528:	39 d8                	cmp    eax,ebx
c001252a:	73 f3                	jae    c001251f <VAS::allocatePages(int, int)+0x199>
c001252c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012530:	83 c4 1c             	add    esp,0x1c
c0012533:	5b                   	pop    ebx
c0012534:	5e                   	pop    esi
c0012535:	5f                   	pop    edi
c0012536:	5d                   	pop    ebp
c0012537:	c3                   	ret    
c0012538:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c001253d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012543:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c001254a:	0f 84 4d ff ff ff    	je     c001249d <VAS::allocatePages(int, int)+0x117>
c0012550:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0012558:	e9 40 ff ff ff       	jmp    c001249d <VAS::allocatePages(int, int)+0x117>
c001255d:	90                   	nop

c001255e <VAS::setCPUSpecific(unsigned long)>:
c001255e:	83 ec 0c             	sub    esp,0xc
c0012561:	6a 05                	push   0x5
c0012563:	68 00 00 40 c2       	push   0xc2400000
c0012568:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001256c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012570:	e8 0f fd ff ff       	call   c0012284 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012575:	83 c4 1c             	add    esp,0x1c
c0012578:	c3                   	ret    
c0012579:	90                   	nop

c001257a <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c001257a:	55                   	push   ebp
c001257b:	57                   	push   edi
c001257c:	56                   	push   esi
c001257d:	53                   	push   ebx
c001257e:	83 ec 1c             	sub    esp,0x1c
c0012581:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c0012586:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001258a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012590:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012594:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c001259a:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001259e:	83 e0 01             	and    eax,0x1
c00125a1:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00125a5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00125a9:	85 c0                	test   eax,eax
c00125ab:	7e 39                	jle    c00125e6 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c00125ad:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00125b1:	89 f3                	mov    ebx,esi
c00125b3:	c1 e0 0c             	shl    eax,0xc
c00125b6:	01 f0                	add    eax,esi
c00125b8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00125bc:	55                   	push   ebp
c00125bd:	53                   	push   ebx
c00125be:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00125c2:	29 f0                	sub    eax,esi
c00125c4:	01 d8                	add    eax,ebx
c00125c6:	50                   	push   eax
c00125c7:	57                   	push   edi
c00125c8:	e8 b7 fc ff ff       	call   c0012284 <VAS::mapPage(unsigned long, unsigned long, int)>
c00125cd:	83 c4 10             	add    esp,0x10
c00125d0:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00125d5:	74 03                	je     c00125da <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c00125d7:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00125da:	81 c3 00 10 00 00    	add    ebx,0x1000
c00125e0:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c00125e4:	75 d6                	jne    c00125bc <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c00125e6:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00125eb:	75 10                	jne    c00125fd <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c00125ed:	0f 20 d8             	mov    eax,cr3
c00125f0:	0f 22 d8             	mov    cr3,eax
c00125f3:	83 c4 1c             	add    esp,0x1c
c00125f6:	89 f0                	mov    eax,esi
c00125f8:	5b                   	pop    ebx
c00125f9:	5e                   	pop    esi
c00125fa:	5f                   	pop    edi
c00125fb:	5d                   	pop    ebp
c00125fc:	c3                   	ret    
c00125fd:	89 f3                	mov    ebx,esi
c00125ff:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012603:	c1 eb 0a             	shr    ebx,0xa
c0012606:	c1 e0 0c             	shl    eax,0xc
c0012609:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001260f:	01 f0                	add    eax,esi
c0012611:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012617:	c1 e8 0a             	shr    eax,0xa
c001261a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001261f:	2d 00 00 40 00       	sub    eax,0x400000
c0012624:	39 c3                	cmp    ebx,eax
c0012626:	77 cb                	ja     c00125f3 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0012628:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001262b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012631:	39 d8                	cmp    eax,ebx
c0012633:	73 f3                	jae    c0012628 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0012635:	83 c4 1c             	add    esp,0x1c
c0012638:	89 f0                	mov    eax,esi
c001263a:	5b                   	pop    ebx
c001263b:	5e                   	pop    esi
c001263c:	5f                   	pop    edi
c001263d:	5d                   	pop    ebp
c001263e:	c3                   	ret    
c001263f:	90                   	nop

c0012640 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0012640:	55                   	push   ebp
c0012641:	57                   	push   edi
c0012642:	56                   	push   esi
c0012643:	53                   	push   ebx
c0012644:	83 ec 1c             	sub    esp,0x1c
c0012647:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001264b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001264f:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0012653:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0012657:	a9 ff 0f 00 00       	test   eax,0xfff
c001265c:	75 4a                	jne    c00126a8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c001265e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012662:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012665:	c1 eb 16             	shr    ebx,0x16
c0012668:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c001266f:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0012673:	74 4d                	je     c00126c2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0012675:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012679:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001267d:	c1 e8 0a             	shr    eax,0xa
c0012680:	80 fa 01             	cmp    dl,0x1
c0012683:	19 d2                	sbb    edx,edx
c0012685:	c1 e3 0c             	shl    ebx,0xc
c0012688:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c001268c:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0012692:	25 fc 0f 00 00       	and    eax,0xffc
c0012697:	01 d8                	add    eax,ebx
c0012699:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c00126a0:	83 c4 1c             	add    esp,0x1c
c00126a3:	5b                   	pop    ebx
c00126a4:	5e                   	pop    esi
c00126a5:	5f                   	pop    edi
c00126a6:	5d                   	pop    ebp
c00126a7:	c3                   	ret    
c00126a8:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00126ac:	83 ec 0c             	sub    esp,0xc
c00126af:	68 e8 b3 02 c0       	push   0xc002b3e8
c00126b4:	e8 34 82 00 00       	call   c001a8ed <Krnl::panic(char const*)>
c00126b9:	83 c4 10             	add    esp,0x10
c00126bc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00126c0:	eb 9c                	jmp    c001265e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c00126c2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00126c6:	e8 49 d8 ff ff       	call   c000ff14 <Phys::allocatePage()>
c00126cb:	83 ec 0c             	sub    esp,0xc
c00126ce:	89 c5                	mov    ebp,eax
c00126d0:	8b 0d 10 f4 02 c0    	mov    ecx,DWORD PTR ds:0xc002f410
c00126d6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00126da:	6a 01                	push   0x1
c00126dc:	e8 6c f3 ff ff       	call   c0011a4d <Virt::allocateKernelVirtualPages(int)>
c00126e1:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00126e8:	6a 01                	push   0x1
c00126ea:	50                   	push   eax
c00126eb:	55                   	push   ebp
c00126ec:	81 cd 07 04 00 00    	or     ebp,0x407
c00126f2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00126f6:	51                   	push   ecx
c00126f7:	e8 7e fe ff ff       	call   c001257a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00126fc:	83 c4 1c             	add    esp,0x1c
c00126ff:	68 00 10 00 00       	push   0x1000
c0012704:	6a 00                	push   0x0
c0012706:	50                   	push   eax
c0012707:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001270b:	e8 5c e0 fe ff       	call   c000076c <memset>
c0012710:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012714:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012717:	e8 f1 f7 ff ff       	call   c0011f0d <Virt::freeKernelVirtualPages(unsigned long)>
c001271c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c001271f:	83 c4 10             	add    esp,0x10
c0012722:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0012725:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012729:	e9 47 ff ff ff       	jmp    c0012675 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c001272e <VAS::VAS(bool)>:
c001272e:	53                   	push   ebx
c001272f:	83 ec 28             	sub    esp,0x28
c0012732:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012736:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001273a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001273e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012745:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012749:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0012750:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012754:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0012758:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c001275b:	e8 b4 d7 ff ff       	call   c000ff14 <Phys::allocatePage()>
c0012760:	89 c2                	mov    edx,eax
c0012762:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012766:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0012769:	8b 1d 10 f4 02 c0    	mov    ebx,DWORD PTR ds:0xc002f410
c001276f:	83 ec 0c             	sub    esp,0xc
c0012772:	6a 01                	push   0x1
c0012774:	e8 d4 f2 ff ff       	call   c0011a4d <Virt::allocateKernelVirtualPages(int)>
c0012779:	83 c4 10             	add    esp,0x10
c001277c:	89 c2                	mov    edx,eax
c001277e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012782:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0012785:	83 ec 0c             	sub    esp,0xc
c0012788:	6a 03                	push   0x3
c001278a:	6a 01                	push   0x1
c001278c:	52                   	push   edx
c001278d:	50                   	push   eax
c001278e:	53                   	push   ebx
c001278f:	e8 e6 fd ff ff       	call   c001257a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012794:	83 c4 20             	add    esp,0x20
c0012797:	89 c2                	mov    edx,eax
c0012799:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001279d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00127a0:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00127a8:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c00127b0:	7f 1c                	jg     c00127ce <VAS::VAS(bool)+0xa0>
c00127b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127b6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00127b9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00127bd:	c1 e2 02             	shl    edx,0x2
c00127c0:	01 d0                	add    eax,edx
c00127c2:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00127c8:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00127cc:	eb da                	jmp    c00127a8 <VAS::VAS(bool)+0x7a>
c00127ce:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c00127d6:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c00127de:	7f 7a                	jg     c001285a <VAS::VAS(bool)+0x12c>
c00127e0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00127e4:	2d 00 02 00 00       	sub    eax,0x200
c00127e9:	c1 e0 0c             	shl    eax,0xc
c00127ec:	83 c8 03             	or     eax,0x3
c00127ef:	89 c2                	mov    edx,eax
c00127f1:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c00127f6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00127fc:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012802:	83 e0 10             	and    eax,0x10
c0012805:	84 c0                	test   al,al
c0012807:	74 07                	je     c0012810 <VAS::VAS(bool)+0xe2>
c0012809:	b8 00 01 00 00       	mov    eax,0x100
c001280e:	eb 05                	jmp    c0012815 <VAS::VAS(bool)+0xe7>
c0012810:	b8 00 00 00 00       	mov    eax,0x0
c0012815:	09 d0                	or     eax,edx
c0012817:	89 c1                	mov    ecx,eax
c0012819:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001281d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012820:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012824:	c1 e2 02             	shl    edx,0x2
c0012827:	01 d0                	add    eax,edx
c0012829:	89 ca                	mov    edx,ecx
c001282b:	89 10                	mov    DWORD PTR [eax],edx
c001282d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012831:	2d 40 03 00 00       	sub    eax,0x340
c0012836:	83 f8 7f             	cmp    eax,0x7f
c0012839:	77 16                	ja     c0012851 <VAS::VAS(bool)+0x123>
c001283b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001283f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012842:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012846:	c1 e2 02             	shl    edx,0x2
c0012849:	01 d0                	add    eax,edx
c001284b:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012851:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012855:	e9 7c ff ff ff       	jmp    c00127d6 <VAS::VAS(bool)+0xa8>
c001285a:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c001285f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012865:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001286b:	83 e0 10             	and    eax,0x10
c001286e:	84 c0                	test   al,al
c0012870:	74 07                	je     c0012879 <VAS::VAS(bool)+0x14b>
c0012872:	b8 03 41 00 00       	mov    eax,0x4103
c0012877:	eb 05                	jmp    c001287e <VAS::VAS(bool)+0x150>
c0012879:	b8 03 40 00 00       	mov    eax,0x4003
c001287e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012882:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0012885:	81 c2 20 0c 00 00    	add    edx,0xc20
c001288b:	89 02                	mov    DWORD PTR [edx],eax
c001288d:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c0012892:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012898:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001289e:	83 ec 08             	sub    esp,0x8
c00128a1:	50                   	push   eax
c00128a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00128a6:	e8 b3 fc ff ff       	call   c001255e <VAS::setCPUSpecific(unsigned long)>
c00128ab:	83 c4 10             	add    esp,0x10
c00128ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00128b2:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00128b5:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c00128ba:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128c0:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00128c6:	83 e0 10             	and    eax,0x10
c00128c9:	84 c0                	test   al,al
c00128cb:	74 07                	je     c00128d4 <VAS::VAS(bool)+0x1a6>
c00128cd:	b8 00 01 00 00       	mov    eax,0x100
c00128d2:	eb 05                	jmp    c00128d9 <VAS::VAS(bool)+0x1ab>
c00128d4:	b8 00 00 00 00       	mov    eax,0x0
c00128d9:	09 c2                	or     edx,eax
c00128db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00128df:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00128e2:	05 fc 0f 00 00       	add    eax,0xffc
c00128e7:	83 ca 03             	or     edx,0x3
c00128ea:	89 10                	mov    DWORD PTR [eax],edx
c00128ec:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c00128f1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128f7:	83 ec 0c             	sub    esp,0xc
c00128fa:	50                   	push   eax
c00128fb:	e8 60 1c 00 00       	call   c0014560 <Device::getName()>
c0012900:	83 c4 10             	add    esp,0x10
c0012903:	83 ec 08             	sub    esp,0x8
c0012906:	68 2d b5 02 c0       	push   0xc002b52d
c001290b:	50                   	push   eax
c001290c:	e8 a3 df fe ff       	call   c00008b4 <strcmp>
c0012911:	83 c4 10             	add    esp,0x10
c0012914:	85 c0                	test   eax,eax
c0012916:	0f 94 c0             	sete   al
c0012919:	84 c0                	test   al,al
c001291b:	0f 84 87 00 00 00    	je     c00129a8 <VAS::VAS(bool)+0x27a>
c0012921:	fa                   	cli    
c0012922:	a1 c8 27 03 c0       	mov    eax,ds:0xc00327c8
c0012927:	40                   	inc    eax
c0012928:	a3 c8 27 03 c0       	mov    ds:0xc00327c8,eax
c001292d:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c0012932:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012938:	05 7c 09 00 00       	add    eax,0x97c
c001293d:	83 ec 0c             	sub    esp,0xc
c0012940:	50                   	push   eax
c0012941:	e8 e4 c9 ff ff       	call   c000f32a <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012946:	83 c4 10             	add    esp,0x10
c0012949:	25 00 f0 ff ff       	and    eax,0xfffff000
c001294e:	89 c3                	mov    ebx,eax
c0012950:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c0012955:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001295b:	05 7c 09 00 00       	add    eax,0x97c
c0012960:	83 ec 0c             	sub    esp,0xc
c0012963:	50                   	push   eax
c0012964:	e8 c1 c9 ff ff       	call   c000f32a <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012969:	83 c4 10             	add    esp,0x10
c001296c:	83 ec 08             	sub    esp,0x8
c001296f:	50                   	push   eax
c0012970:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012974:	e8 75 f5 ff ff       	call   c0011eee <VAS::getPageTableEntry(unsigned long)>
c0012979:	83 c4 10             	add    esp,0x10
c001297c:	8b 00                	mov    eax,DWORD PTR [eax]
c001297e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012983:	6a 11                	push   0x11
c0012985:	53                   	push   ebx
c0012986:	50                   	push   eax
c0012987:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001298b:	e8 f4 f8 ff ff       	call   c0012284 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012990:	83 c4 10             	add    esp,0x10
c0012993:	a1 c8 27 03 c0       	mov    eax,ds:0xc00327c8
c0012998:	48                   	dec    eax
c0012999:	a3 c8 27 03 c0       	mov    ds:0xc00327c8,eax
c001299e:	a1 c8 27 03 c0       	mov    eax,ds:0xc00327c8
c00129a3:	85 c0                	test   eax,eax
c00129a5:	75 01                	jne    c00129a8 <VAS::VAS(bool)+0x27a>
c00129a7:	fb                   	sti    
c00129a8:	90                   	nop
c00129a9:	83 c4 28             	add    esp,0x28
c00129ac:	5b                   	pop    ebx
c00129ad:	c3                   	ret    

c00129ae <VAS::evict(unsigned long)>:
c00129ae:	55                   	push   ebp
c00129af:	57                   	push   edi
c00129b0:	56                   	push   esi
c00129b1:	53                   	push   ebx
c00129b2:	83 ec 1c             	sub    esp,0x1c
c00129b5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00129b9:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00129bd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00129c1:	e8 c8 f1 ff ff       	call   c0011b8e <Virt::allocateSwapfilePage()>
c00129c6:	89 c7                	mov    edi,eax
c00129c8:	a1 2c e2 02 c0       	mov    eax,ds:0xc002e22c
c00129cd:	85 c0                	test   eax,eax
c00129cf:	7e 3d                	jle    c0012a0e <VAS::evict(unsigned long)+0x60>
c00129d1:	89 ee                	mov    esi,ebp
c00129d3:	31 db                	xor    ebx,ebx
c00129d5:	83 ec 0c             	sub    esp,0xc
c00129d8:	57                   	push   edi
c00129d9:	e8 9e f1 ff ff       	call   c0011b7c <Virt::swapIDToSector(unsigned long)>
c00129de:	89 34 24             	mov    DWORD PTR [esp],esi
c00129e1:	01 d8                	add    eax,ebx
c00129e3:	6a 01                	push   0x1
c00129e5:	31 d2                	xor    edx,edx
c00129e7:	43                   	inc    ebx
c00129e8:	52                   	push   edx
c00129e9:	81 c6 00 02 00 00    	add    esi,0x200
c00129ef:	50                   	push   eax
c00129f0:	0f be 05 38 e2 02 c0 	movsx  eax,BYTE PTR ds:0xc002e238
c00129f7:	ff 34 85 9c f7 02 c0 	push   DWORD PTR [eax*4-0x3ffd0864]
c00129fe:	e8 33 3e 00 00       	call   c0016836 <LogicalDisk::write(unsigned long long, int, void*)>
c0012a03:	83 c4 20             	add    esp,0x20
c0012a06:	39 1d 2c e2 02 c0    	cmp    DWORD PTR ds:0xc002e22c,ebx
c0012a0c:	7f c7                	jg     c00129d5 <VAS::evict(unsigned long)+0x27>
c0012a0e:	83 ec 08             	sub    esp,0x8
c0012a11:	c1 e7 0b             	shl    edi,0xb
c0012a14:	55                   	push   ebp
c0012a15:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012a19:	e8 d0 f4 ff ff       	call   c0011eee <VAS::getPageTableEntry(unsigned long)>
c0012a1e:	83 c4 0c             	add    esp,0xc
c0012a21:	8b 10                	mov    edx,DWORD PTR [eax]
c0012a23:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012a29:	09 d7                	or     edi,edx
c0012a2b:	89 38                	mov    DWORD PTR [eax],edi
c0012a2d:	a1 08 f4 02 c0       	mov    eax,ds:0xc002f408
c0012a32:	40                   	inc    eax
c0012a33:	a3 08 f4 02 c0       	mov    ds:0xc002f408,eax
c0012a38:	0f 20 da             	mov    edx,cr3
c0012a3b:	0f 22 da             	mov    cr3,edx
c0012a3e:	50                   	push   eax
c0012a3f:	55                   	push   ebp
c0012a40:	68 3b b5 02 c0       	push   0xc002b53b
c0012a45:	e8 09 04 00 00       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0012a4a:	a1 04 f4 02 c0       	mov    eax,ds:0xc002f404
c0012a4f:	c7 44 24 40 50 b5 02 c0 	mov    DWORD PTR [esp+0x40],0xc002b550
c0012a57:	8d 50 01             	lea    edx,[eax+0x1]
c0012a5a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0012a5e:	89 15 04 f4 02 c0    	mov    DWORD PTR ds:0xc002f404,edx
c0012a64:	83 c4 2c             	add    esp,0x2c
c0012a67:	5b                   	pop    ebx
c0012a68:	5e                   	pop    esi
c0012a69:	5f                   	pop    edi
c0012a6a:	5d                   	pop    ebp
c0012a6b:	e9 e3 03 00 00       	jmp    c0012e53 <Dbg::kprintf(char const*, ...)>

c0012a70 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012a70:	55                   	push   ebp
c0012a71:	57                   	push   edi
c0012a72:	56                   	push   esi
c0012a73:	53                   	push   ebx
c0012a74:	83 ec 0c             	sub    esp,0xc
c0012a77:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0012a7b:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012a81:	0f 84 dc 00 00 00    	je     c0012b63 <VAS::tryLoadBackOffDisk(unsigned long)+0xf3>
c0012a87:	56                   	push   esi
c0012a88:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012a8c:	e8 5d f4 ff ff       	call   c0011eee <VAS::getPageTableEntry(unsigned long)>
c0012a91:	5b                   	pop    ebx
c0012a92:	85 c0                	test   eax,eax
c0012a94:	5f                   	pop    edi
c0012a95:	89 c3                	mov    ebx,eax
c0012a97:	0f 84 c6 00 00 00    	je     c0012b63 <VAS::tryLoadBackOffDisk(unsigned long)+0xf3>
c0012a9d:	8b 38                	mov    edi,DWORD PTR [eax]
c0012a9f:	31 c0                	xor    eax,eax
c0012aa1:	89 fa                	mov    edx,edi
c0012aa3:	81 e2 01 04 00 00    	and    edx,0x401
c0012aa9:	81 fa 00 04 00 00    	cmp    edx,0x400
c0012aaf:	0f 85 b0 00 00 00    	jne    c0012b65 <VAS::tryLoadBackOffDisk(unsigned long)+0xf5>
c0012ab5:	e8 5a d4 ff ff       	call   c000ff14 <Phys::allocatePage()>
c0012aba:	c1 ef 0b             	shr    edi,0xb
c0012abd:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012abf:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012ac5:	09 c2                	or     edx,eax
c0012ac7:	81 ca 01 08 00 00    	or     edx,0x801
c0012acd:	89 13                	mov    DWORD PTR [ebx],edx
c0012acf:	8b 0d 2c e2 02 c0    	mov    ecx,DWORD PTR ds:0xc002e22c
c0012ad5:	85 c9                	test   ecx,ecx
c0012ad7:	7e 3d                	jle    c0012b16 <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c0012ad9:	89 f5                	mov    ebp,esi
c0012adb:	31 db                	xor    ebx,ebx
c0012add:	83 ec 0c             	sub    esp,0xc
c0012ae0:	57                   	push   edi
c0012ae1:	e8 96 f0 ff ff       	call   c0011b7c <Virt::swapIDToSector(unsigned long)>
c0012ae6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012ae9:	01 d8                	add    eax,ebx
c0012aeb:	6a 01                	push   0x1
c0012aed:	31 d2                	xor    edx,edx
c0012aef:	43                   	inc    ebx
c0012af0:	52                   	push   edx
c0012af1:	81 c5 00 02 00 00    	add    ebp,0x200
c0012af7:	50                   	push   eax
c0012af8:	0f be 05 38 e2 02 c0 	movsx  eax,BYTE PTR ds:0xc002e238
c0012aff:	ff 34 85 9c f7 02 c0 	push   DWORD PTR [eax*4-0x3ffd0864]
c0012b06:	e8 bf 3c 00 00       	call   c00167ca <LogicalDisk::read(unsigned long long, int, void*)>
c0012b0b:	83 c4 20             	add    esp,0x20
c0012b0e:	39 1d 2c e2 02 c0    	cmp    DWORD PTR ds:0xc002e22c,ebx
c0012b14:	7f c7                	jg     c0012add <VAS::tryLoadBackOffDisk(unsigned long)+0x6d>
c0012b16:	a1 08 f4 02 c0       	mov    eax,ds:0xc002f408
c0012b1b:	48                   	dec    eax
c0012b1c:	52                   	push   edx
c0012b1d:	a3 08 f4 02 c0       	mov    ds:0xc002f408,eax
c0012b22:	50                   	push   eax
c0012b23:	56                   	push   esi
c0012b24:	68 61 b5 02 c0       	push   0xc002b561
c0012b29:	e8 25 03 00 00       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0012b2e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012b31:	e8 28 f0 ff ff       	call   c0011b5e <Virt::freeSwapfilePage(unsigned long)>
c0012b36:	a1 c8 27 03 c0       	mov    eax,ds:0xc00327c8
c0012b3b:	83 c4 10             	add    esp,0x10
c0012b3e:	48                   	dec    eax
c0012b3f:	a3 c8 27 03 c0       	mov    ds:0xc00327c8,eax
c0012b44:	85 c0                	test   eax,eax
c0012b46:	75 01                	jne    c0012b49 <VAS::tryLoadBackOffDisk(unsigned long)+0xd9>
c0012b48:	fb                   	sti    
c0012b49:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012b4d:	25 ff 0f 00 00       	and    eax,0xfff
c0012b52:	3d e0 0f 00 00       	cmp    eax,0xfe0
c0012b57:	77 14                	ja     c0012b6d <VAS::tryLoadBackOffDisk(unsigned long)+0xfd>
c0012b59:	0f 20 d8             	mov    eax,cr3
c0012b5c:	0f 22 d8             	mov    cr3,eax
c0012b5f:	b0 01                	mov    al,0x1
c0012b61:	eb 02                	jmp    c0012b65 <VAS::tryLoadBackOffDisk(unsigned long)+0xf5>
c0012b63:	31 c0                	xor    eax,eax
c0012b65:	83 c4 0c             	add    esp,0xc
c0012b68:	5b                   	pop    ebx
c0012b69:	5e                   	pop    esi
c0012b6a:	5f                   	pop    edi
c0012b6b:	5d                   	pop    ebp
c0012b6c:	c3                   	ret    
c0012b6d:	83 ec 0c             	sub    esp,0xc
c0012b70:	68 76 b5 02 c0       	push   0xc002b576
c0012b75:	e8 d9 02 00 00       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0012b7a:	83 c4 10             	add    esp,0x10
c0012b7d:	eb da                	jmp    c0012b59 <VAS::tryLoadBackOffDisk(unsigned long)+0xe9>
c0012b7f:	90                   	nop

c0012b80 <VAS::scanForEviction()>:
c0012b80:	57                   	push   edi
c0012b81:	56                   	push   esi
c0012b82:	53                   	push   ebx
c0012b83:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012b87:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012b8a:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012b90:	75 0e                	jne    c0012ba0 <VAS::scanForEviction()+0x20>
c0012b92:	89 da                	mov    edx,ebx
c0012b94:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012b97:	c1 ea 16             	shr    edx,0x16
c0012b9a:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012b9e:	74 48                	je     c0012be8 <VAS::scanForEviction()+0x68>
c0012ba0:	53                   	push   ebx
c0012ba1:	56                   	push   esi
c0012ba2:	e8 47 f3 ff ff       	call   c0011eee <VAS::getPageTableEntry(unsigned long)>
c0012ba7:	5a                   	pop    edx
c0012ba8:	8b 38                	mov    edi,DWORD PTR [eax]
c0012baa:	59                   	pop    ecx
c0012bab:	89 fa                	mov    edx,edi
c0012bad:	81 e2 00 0c 00 00    	and    edx,0xc00
c0012bb3:	81 fa 00 0c 00 00    	cmp    edx,0xc00
c0012bb9:	74 3d                	je     c0012bf8 <VAS::scanForEviction()+0x78>
c0012bbb:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012bc1:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c0012bc7:	76 2a                	jbe    c0012bf3 <VAS::scanForEviction()+0x73>
c0012bc9:	31 db                	xor    ebx,ebx
c0012bcb:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0012bd2:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012bd8:	75 c6                	jne    c0012ba0 <VAS::scanForEviction()+0x20>
c0012bda:	89 da                	mov    edx,ebx
c0012bdc:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012bdf:	c1 ea 16             	shr    edx,0x16
c0012be2:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012be6:	75 b8                	jne    c0012ba0 <VAS::scanForEviction()+0x20>
c0012be8:	81 c3 00 00 40 00    	add    ebx,0x400000
c0012bee:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012bf1:	eb 97                	jmp    c0012b8a <VAS::scanForEviction()+0xa>
c0012bf3:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012bf6:	eb 92                	jmp    c0012b8a <VAS::scanForEviction()+0xa>
c0012bf8:	f7 c7 01 00 00 00    	test   edi,0x1
c0012bfe:	74 bb                	je     c0012bbb <VAS::scanForEviction()+0x3b>
c0012c00:	f7 c7 20 00 00 00    	test   edi,0x20
c0012c06:	74 0a                	je     c0012c12 <VAS::scanForEviction()+0x92>
c0012c08:	83 e7 df             	and    edi,0xffffffdf
c0012c0b:	89 38                	mov    DWORD PTR [eax],edi
c0012c0d:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012c10:	eb a9                	jmp    c0012bbb <VAS::scanForEviction()+0x3b>
c0012c12:	83 ec 08             	sub    esp,0x8
c0012c15:	53                   	push   ebx
c0012c16:	56                   	push   esi
c0012c17:	e8 92 fd ff ff       	call   c00129ae <VAS::evict(unsigned long)>
c0012c1c:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c0012c23:	83 c4 10             	add    esp,0x10
c0012c26:	89 f8                	mov    eax,edi
c0012c28:	5b                   	pop    ebx
c0012c29:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012c2e:	5e                   	pop    esi
c0012c2f:	5f                   	pop    edi
c0012c30:	c3                   	ret    

c0012c31 <mapVASFirstTime>:
c0012c31:	55                   	push   ebp
c0012c32:	57                   	push   edi
c0012c33:	56                   	push   esi
c0012c34:	53                   	push   ebx
c0012c35:	83 ec 0c             	sub    esp,0xc
c0012c38:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012c3d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012c40:	4a                   	dec    edx
c0012c41:	0f 84 8e 00 00 00    	je     c0012cd5 <mapVASFirstTime+0xa4>
c0012c47:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012c4a:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012c4d:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012c52:	c1 e5 15             	shl    ebp,0x15
c0012c55:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012c5a:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012c60:	29 eb                	sub    ebx,ebp
c0012c62:	29 ee                	sub    esi,ebp
c0012c64:	e8 ab d2 ff ff       	call   c000ff14 <Phys::allocatePage()>
c0012c69:	83 ec 0c             	sub    esp,0xc
c0012c6c:	68 03 04 00 00       	push   0x403
c0012c71:	6a 01                	push   0x1
c0012c73:	53                   	push   ebx
c0012c74:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012c7a:	50                   	push   eax
c0012c7b:	57                   	push   edi
c0012c7c:	e8 f9 f8 ff ff       	call   c001257a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012c81:	83 c4 20             	add    esp,0x20
c0012c84:	39 f3                	cmp    ebx,esi
c0012c86:	75 dc                	jne    c0012c64 <mapVASFirstTime+0x33>
c0012c88:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012c8d:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012c92:	29 ee                	sub    esi,ebp
c0012c94:	29 e8                	sub    eax,ebp
c0012c96:	89 c5                	mov    ebp,eax
c0012c98:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012c9c:	19 db                	sbb    ebx,ebx
c0012c9e:	e8 71 d2 ff ff       	call   c000ff14 <Phys::allocatePage()>
c0012ca3:	83 e3 04             	and    ebx,0x4
c0012ca6:	83 ec 0c             	sub    esp,0xc
c0012ca9:	81 c3 03 04 00 00    	add    ebx,0x403
c0012caf:	53                   	push   ebx
c0012cb0:	6a 01                	push   0x1
c0012cb2:	56                   	push   esi
c0012cb3:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012cb9:	50                   	push   eax
c0012cba:	57                   	push   edi
c0012cbb:	e8 ba f8 ff ff       	call   c001257a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012cc0:	83 c4 20             	add    esp,0x20
c0012cc3:	39 f5                	cmp    ebp,esi
c0012cc5:	75 d1                	jne    c0012c98 <mapVASFirstTime+0x67>
c0012cc7:	0f 20 d8             	mov    eax,cr3
c0012cca:	0f 22 d8             	mov    cr3,eax
c0012ccd:	83 c4 0c             	add    esp,0xc
c0012cd0:	5b                   	pop    ebx
c0012cd1:	5e                   	pop    esi
c0012cd2:	5f                   	pop    edi
c0012cd3:	5d                   	pop    ebp
c0012cd4:	c3                   	ret    
c0012cd5:	83 ec 0c             	sub    esp,0xc
c0012cd8:	68 86 b5 02 c0       	push   0xc002b586
c0012cdd:	e8 71 01 00 00       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0012ce2:	83 c4 10             	add    esp,0x10
c0012ce5:	83 c4 0c             	add    esp,0xc
c0012ce8:	5b                   	pop    ebx
c0012ce9:	5e                   	pop    esi
c0012cea:	5f                   	pop    edi
c0012ceb:	5d                   	pop    ebp
c0012cec:	c3                   	ret    

c0012ced <__cxa_atexit>:
c0012ced:	31 c0                	xor    eax,eax
c0012cef:	c3                   	ret    

c0012cf0 <__cxa_finalize>:
c0012cf0:	c3                   	ret    

c0012cf1 <__stack_chk_fail>:
c0012cf1:	55                   	push   ebp
c0012cf2:	89 e5                	mov    ebp,esp
c0012cf4:	83 ec 14             	sub    esp,0x14
c0012cf7:	68 9f b5 02 c0       	push   0xc002b59f
c0012cfc:	e8 52 01 00 00       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0012d01:	58                   	pop    eax
c0012d02:	5a                   	pop    edx
c0012d03:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012d06:	68 ef b5 02 c0       	push   0xc002b5ef
c0012d0b:	e8 43 01 00 00       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0012d10:	59                   	pop    ecx
c0012d11:	58                   	pop    eax
c0012d12:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012d15:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012d18:	68 ef b5 02 c0       	push   0xc002b5ef
c0012d1d:	e8 31 01 00 00       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0012d22:	5a                   	pop    edx
c0012d23:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012d26:	59                   	pop    ecx
c0012d27:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d29:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012d2c:	68 ef b5 02 c0       	push   0xc002b5ef
c0012d31:	e8 1d 01 00 00       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0012d36:	5a                   	pop    edx
c0012d37:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012d3a:	59                   	pop    ecx
c0012d3b:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d3d:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d3f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012d42:	68 ef b5 02 c0       	push   0xc002b5ef
c0012d47:	e8 07 01 00 00       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0012d4c:	c7 04 24 f7 b5 02 c0 	mov    DWORD PTR [esp],0xc002b5f7
c0012d53:	e8 95 7b 00 00       	call   c001a8ed <Krnl::panic(char const*)>
c0012d58:	83 c4 10             	add    esp,0x10
c0012d5b:	c9                   	leave  
c0012d5c:	c3                   	ret    

c0012d5d <__cxa_pure_virtual>:
c0012d5d:	83 ec 18             	sub    esp,0x18
c0012d60:	68 0f b6 02 c0       	push   0xc002b60f
c0012d65:	e8 83 7b 00 00       	call   c001a8ed <Krnl::panic(char const*)>
c0012d6a:	83 c4 1c             	add    esp,0x1c
c0012d6d:	c3                   	ret    

c0012d6e <operator new[](unsigned long)>:
c0012d6e:	e9 35 cb ff ff       	jmp    c000f8a8 <malloc>

c0012d73 <operator delete(void*, unsigned long)>:
c0012d73:	e9 50 cb ff ff       	jmp    c000f8c8 <rfree>

c0012d78 <operator delete[](void*)>:
c0012d78:	e9 4b cb ff ff       	jmp    c000f8c8 <rfree>

c0012d7d <operator delete[](void*, unsigned long)>:
c0012d7d:	e9 46 cb ff ff       	jmp    c000f8c8 <rfree>

c0012d82 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012d82:	57                   	push   edi
c0012d83:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012d88:	56                   	push   esi
c0012d89:	be 24 b6 02 c0       	mov    esi,0xc002b624
c0012d8e:	53                   	push   ebx
c0012d8f:	83 ec 40             	sub    esp,0x40
c0012d92:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012d96:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012d9a:	fc                   	cld    
c0012d9b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012d9d:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012da1:	83 f9 3e             	cmp    ecx,0x3e
c0012da4:	7e 05                	jle    c0012dab <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012da6:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012dab:	89 df                	mov    edi,ebx
c0012dad:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012db1:	eb 02                	jmp    c0012db5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012db3:	89 c7                	mov    edi,eax
c0012db5:	31 d2                	xor    edx,edx
c0012db7:	46                   	inc    esi
c0012db8:	89 f8                	mov    eax,edi
c0012dba:	f7 f1                	div    ecx
c0012dbc:	39 cf                	cmp    edi,ecx
c0012dbe:	73 f3                	jae    c0012db3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012dc0:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012dc3:	eb 02                	jmp    c0012dc7 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012dc5:	89 c3                	mov    ebx,eax
c0012dc7:	31 d2                	xor    edx,edx
c0012dc9:	4e                   	dec    esi
c0012dca:	89 d8                	mov    eax,ebx
c0012dcc:	f7 f1                	div    ecx
c0012dce:	39 cb                	cmp    ebx,ecx
c0012dd0:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012dd4:	88 16                	mov    BYTE PTR [esi],dl
c0012dd6:	73 ed                	jae    c0012dc5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012dd8:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012ddc:	83 c4 40             	add    esp,0x40
c0012ddf:	5b                   	pop    ebx
c0012de0:	5e                   	pop    esi
c0012de1:	5f                   	pop    edi
c0012de2:	c3                   	ret    

c0012de3 <Dbg::logc(char)>:
c0012de3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012de7:	ba fd 03 00 00       	mov    edx,0x3fd
c0012dec:	ec                   	in     al,dx
c0012ded:	a8 20                	test   al,0x20
c0012def:	74 fb                	je     c0012dec <Dbg::logc(char)+0x9>
c0012df1:	ba f8 03 00 00       	mov    edx,0x3f8
c0012df6:	88 c8                	mov    al,cl
c0012df8:	ee                   	out    dx,al
c0012df9:	c3                   	ret    

c0012dfa <Dbg::logs(char*)>:
c0012dfa:	53                   	push   ebx
c0012dfb:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012dff:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012e02:	84 c0                	test   al,al
c0012e04:	74 0f                	je     c0012e15 <Dbg::logs(char*)+0x1b>
c0012e06:	50                   	push   eax
c0012e07:	43                   	inc    ebx
c0012e08:	e8 d6 ff ff ff       	call   c0012de3 <Dbg::logc(char)>
c0012e0d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012e10:	5a                   	pop    edx
c0012e11:	84 c0                	test   al,al
c0012e13:	75 f1                	jne    c0012e06 <Dbg::logs(char*)+0xc>
c0012e15:	5b                   	pop    ebx
c0012e16:	c3                   	ret    

c0012e17 <Dbg::logWriteInt(unsigned int)>:
c0012e17:	83 ec 10             	sub    esp,0x10
c0012e1a:	6a 0a                	push   0xa
c0012e1c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012e20:	50                   	push   eax
c0012e21:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e25:	e8 58 ff ff ff       	call   c0012d82 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012e2a:	50                   	push   eax
c0012e2b:	e8 ca ff ff ff       	call   c0012dfa <Dbg::logs(char*)>
c0012e30:	83 c4 20             	add    esp,0x20
c0012e33:	c3                   	ret    

c0012e34 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012e34:	83 ec 10             	sub    esp,0x10
c0012e37:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012e3b:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012e3f:	50                   	push   eax
c0012e40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e44:	e8 39 ff ff ff       	call   c0012d82 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012e49:	50                   	push   eax
c0012e4a:	e8 ab ff ff ff       	call   c0012dfa <Dbg::logs(char*)>
c0012e4f:	83 c4 20             	add    esp,0x20
c0012e52:	c3                   	ret    

c0012e53 <Dbg::kprintf(char const*, ...)>:
c0012e53:	55                   	push   ebp
c0012e54:	57                   	push   edi
c0012e55:	56                   	push   esi
c0012e56:	53                   	push   ebx
c0012e57:	83 ec 0c             	sub    esp,0xc
c0012e5a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012e5e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012e62:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012e66:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012e69:	84 c0                	test   al,al
c0012e6b:	74 4a                	je     c0012eb7 <Dbg::kprintf(char const*, ...)+0x64>
c0012e6d:	31 db                	xor    ebx,ebx
c0012e6f:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012e72:	3c 25                	cmp    al,0x25
c0012e74:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012e77:	0f 85 e4 00 00 00    	jne    c0012f61 <Dbg::kprintf(char const*, ...)+0x10e>
c0012e7d:	83 c3 02             	add    ebx,0x2
c0012e80:	8a 07                	mov    al,BYTE PTR [edi]
c0012e82:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012e85:	83 e8 25             	sub    eax,0x25
c0012e88:	3c 53                	cmp    al,0x53
c0012e8a:	0f 87 ba 00 00 00    	ja     c0012f4a <Dbg::kprintf(char const*, ...)+0xf7>
c0012e90:	0f b6 c0             	movzx  eax,al
c0012e93:	ff 24 85 64 b6 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd499c]
c0012e9a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012e9e:	89 c8                	mov    eax,ecx
c0012ea0:	83 c1 04             	add    ecx,0x4
c0012ea3:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012ea7:	ff 30                	push   DWORD PTR [eax]
c0012ea9:	e8 4c ff ff ff       	call   c0012dfa <Dbg::logs(char*)>
c0012eae:	58                   	pop    eax
c0012eaf:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012eb3:	84 c0                	test   al,al
c0012eb5:	75 b8                	jne    c0012e6f <Dbg::kprintf(char const*, ...)+0x1c>
c0012eb7:	83 c4 0c             	add    esp,0xc
c0012eba:	5b                   	pop    ebx
c0012ebb:	5e                   	pop    esi
c0012ebc:	5f                   	pop    edi
c0012ebd:	5d                   	pop    ebp
c0012ebe:	c3                   	ret    
c0012ebf:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012ec3:	89 d0                	mov    eax,edx
c0012ec5:	83 c2 04             	add    edx,0x4
c0012ec8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012ecc:	ff 30                	push   DWORD PTR [eax]
c0012ece:	e8 44 ff ff ff       	call   c0012e17 <Dbg::logWriteInt(unsigned int)>
c0012ed3:	58                   	pop    eax
c0012ed4:	eb d9                	jmp    c0012eaf <Dbg::kprintf(char const*, ...)+0x5c>
c0012ed6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012eda:	89 d0                	mov    eax,edx
c0012edc:	83 c2 04             	add    edx,0x4
c0012edf:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012ee2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012ee6:	50                   	push   eax
c0012ee7:	e8 f7 fe ff ff       	call   c0012de3 <Dbg::logc(char)>
c0012eec:	58                   	pop    eax
c0012eed:	eb c0                	jmp    c0012eaf <Dbg::kprintf(char const*, ...)+0x5c>
c0012eef:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012ef3:	89 c8                	mov    eax,ecx
c0012ef5:	83 c1 04             	add    ecx,0x4
c0012ef8:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012efc:	ff 30                	push   DWORD PTR [eax]
c0012efe:	e8 14 ff ff ff       	call   c0012e17 <Dbg::logWriteInt(unsigned int)>
c0012f03:	5f                   	pop    edi
c0012f04:	eb a9                	jmp    c0012eaf <Dbg::kprintf(char const*, ...)+0x5c>
c0012f06:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f0a:	89 c8                	mov    eax,ecx
c0012f0c:	83 c1 04             	add    ecx,0x4
c0012f0f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012f13:	6a 10                	push   0x10
c0012f15:	ff 30                	push   DWORD PTR [eax]
c0012f17:	e8 18 ff ff ff       	call   c0012e34 <Dbg::logWriteIntBase(unsigned int, int)>
c0012f1c:	59                   	pop    ecx
c0012f1d:	5f                   	pop    edi
c0012f1e:	eb 8f                	jmp    c0012eaf <Dbg::kprintf(char const*, ...)+0x5c>
c0012f20:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012f24:	89 d0                	mov    eax,edx
c0012f26:	83 c2 08             	add    edx,0x8
c0012f29:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012f2d:	6a 10                	push   0x10
c0012f2f:	ff 30                	push   DWORD PTR [eax]
c0012f31:	e8 fe fe ff ff       	call   c0012e34 <Dbg::logWriteIntBase(unsigned int, int)>
c0012f36:	58                   	pop    eax
c0012f37:	5a                   	pop    edx
c0012f38:	e9 72 ff ff ff       	jmp    c0012eaf <Dbg::kprintf(char const*, ...)+0x5c>
c0012f3d:	6a 25                	push   0x25
c0012f3f:	e8 9f fe ff ff       	call   c0012de3 <Dbg::logc(char)>
c0012f44:	58                   	pop    eax
c0012f45:	e9 65 ff ff ff       	jmp    c0012eaf <Dbg::kprintf(char const*, ...)+0x5c>
c0012f4a:	6a 25                	push   0x25
c0012f4c:	e8 92 fe ff ff       	call   c0012de3 <Dbg::logc(char)>
c0012f51:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012f54:	50                   	push   eax
c0012f55:	e8 89 fe ff ff       	call   c0012de3 <Dbg::logc(char)>
c0012f5a:	5a                   	pop    edx
c0012f5b:	59                   	pop    ecx
c0012f5c:	e9 4e ff ff ff       	jmp    c0012eaf <Dbg::kprintf(char const*, ...)+0x5c>
c0012f61:	50                   	push   eax
c0012f62:	89 eb                	mov    ebx,ebp
c0012f64:	e8 7a fe ff ff       	call   c0012de3 <Dbg::logc(char)>
c0012f69:	89 fd                	mov    ebp,edi
c0012f6b:	58                   	pop    eax
c0012f6c:	e9 3e ff ff ff       	jmp    c0012eaf <Dbg::kprintf(char const*, ...)+0x5c>
c0012f71:	90                   	nop

c0012f72 <File::read(unsigned long long, void*, int*)>:
c0012f72:	53                   	push   ebx
c0012f73:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012f77:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012f7b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012f82:	3c 19                	cmp    al,0x19
c0012f84:	77 35                	ja     c0012fbb <File::read(unsigned long long, void*, int*)+0x49>
c0012f86:	8b 04 85 a0 f8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0760]
c0012f8d:	85 c0                	test   eax,eax
c0012f8f:	74 2a                	je     c0012fbb <File::read(unsigned long long, void*, int*)+0x49>
c0012f91:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012f97:	85 c0                	test   eax,eax
c0012f99:	74 20                	je     c0012fbb <File::read(unsigned long long, void*, int*)+0x49>
c0012f9b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f9f:	74 21                	je     c0012fc2 <File::read(unsigned long long, void*, int*)+0x50>
c0012fa1:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012fa3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012fa7:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012fad:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012fb1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012fb5:	5b                   	pop    ebx
c0012fb6:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012fb9:	ff e0                	jmp    eax
c0012fbb:	b8 0b 00 00 00       	mov    eax,0xb
c0012fc0:	eb 05                	jmp    c0012fc7 <File::read(unsigned long long, void*, int*)+0x55>
c0012fc2:	b8 05 00 00 00       	mov    eax,0x5
c0012fc7:	5b                   	pop    ebx
c0012fc8:	c3                   	ret    
c0012fc9:	90                   	nop

c0012fca <File::write(unsigned long long, void*, int*)>:
c0012fca:	53                   	push   ebx
c0012fcb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012fcf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012fd3:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012fda:	3c 19                	cmp    al,0x19
c0012fdc:	77 35                	ja     c0013013 <File::write(unsigned long long, void*, int*)+0x49>
c0012fde:	8b 04 85 a0 f8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0760]
c0012fe5:	85 c0                	test   eax,eax
c0012fe7:	74 2a                	je     c0013013 <File::write(unsigned long long, void*, int*)+0x49>
c0012fe9:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012fef:	85 c0                	test   eax,eax
c0012ff1:	74 20                	je     c0013013 <File::write(unsigned long long, void*, int*)+0x49>
c0012ff3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012ff7:	74 21                	je     c001301a <File::write(unsigned long long, void*, int*)+0x50>
c0012ff9:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012ffb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012fff:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0013005:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013009:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001300d:	5b                   	pop    ebx
c001300e:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0013011:	ff e0                	jmp    eax
c0013013:	b8 0b 00 00 00       	mov    eax,0xb
c0013018:	eb 05                	jmp    c001301f <File::write(unsigned long long, void*, int*)+0x55>
c001301a:	b8 05 00 00 00       	mov    eax,0x5
c001301f:	5b                   	pop    ebx
c0013020:	c3                   	ret    
c0013021:	90                   	nop

c0013022 <Directory::read(unsigned long long, void*, int*)>:
c0013022:	53                   	push   ebx
c0013023:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013027:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001302b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0013032:	3c 19                	cmp    al,0x19
c0013034:	77 35                	ja     c001306b <Directory::read(unsigned long long, void*, int*)+0x49>
c0013036:	8b 04 85 a0 f8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0760]
c001303d:	85 c0                	test   eax,eax
c001303f:	74 2a                	je     c001306b <Directory::read(unsigned long long, void*, int*)+0x49>
c0013041:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013047:	85 c0                	test   eax,eax
c0013049:	74 20                	je     c001306b <Directory::read(unsigned long long, void*, int*)+0x49>
c001304b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001304f:	74 21                	je     c0013072 <Directory::read(unsigned long long, void*, int*)+0x50>
c0013051:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013053:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013057:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001305d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013061:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013065:	5b                   	pop    ebx
c0013066:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0013069:	ff e0                	jmp    eax
c001306b:	b8 0b 00 00 00       	mov    eax,0xb
c0013070:	eb 05                	jmp    c0013077 <Directory::read(unsigned long long, void*, int*)+0x55>
c0013072:	b8 05 00 00 00       	mov    eax,0x5
c0013077:	5b                   	pop    ebx
c0013078:	c3                   	ret    
c0013079:	90                   	nop

c001307a <Directory::write(unsigned long long, void*, int*)>:
c001307a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001307e:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0013085:	b8 0b 00 00 00       	mov    eax,0xb
c001308a:	80 fa 19             	cmp    dl,0x19
c001308d:	77 18                	ja     c00130a7 <Directory::write(unsigned long long, void*, int*)+0x2d>
c001308f:	8b 14 95 a0 f8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0760]
c0013096:	85 d2                	test   edx,edx
c0013098:	74 0d                	je     c00130a7 <Directory::write(unsigned long long, void*, int*)+0x2d>
c001309a:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c00130a1:	19 c0                	sbb    eax,eax
c00130a3:	83 e0 0a             	and    eax,0xa
c00130a6:	40                   	inc    eax
c00130a7:	c3                   	ret    

c00130a8 <File::isAtty()>:
c00130a8:	31 c0                	xor    eax,eax
c00130aa:	c3                   	ret    
c00130ab:	90                   	nop

c00130ac <Directory::isAtty()>:
c00130ac:	31 c0                	xor    eax,eax
c00130ae:	c3                   	ret    
c00130af:	90                   	nop

c00130b0 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00130b0:	b8 0a 00 00 00       	mov    eax,0xa
c00130b5:	c3                   	ret    

c00130b6 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c00130b6:	b8 0a 00 00 00       	mov    eax,0xa
c00130bb:	c3                   	ret    

c00130bc <Filesystem::getFileFirstSector(char const*)>:
c00130bc:	31 c0                	xor    eax,eax
c00130be:	31 d2                	xor    edx,edx
c00130c0:	c3                   	ret    
c00130c1:	90                   	nop

c00130c2 <File::~File()>:
c00130c2:	83 ec 0c             	sub    esp,0xc
c00130c5:	ba 24 b8 02 c0       	mov    edx,0xc002b824
c00130ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130ce:	89 10                	mov    DWORD PTR [eax],edx
c00130d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130d4:	83 ec 0c             	sub    esp,0xc
c00130d7:	50                   	push   eax
c00130d8:	e8 0f e7 ff ff       	call   c00117ec <UnixFile::~UnixFile()>
c00130dd:	83 c4 10             	add    esp,0x10
c00130e0:	90                   	nop
c00130e1:	83 c4 0c             	add    esp,0xc
c00130e4:	c3                   	ret    
c00130e5:	90                   	nop

c00130e6 <File::~File()>:
c00130e6:	83 ec 0c             	sub    esp,0xc
c00130e9:	83 ec 0c             	sub    esp,0xc
c00130ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130f0:	e8 cd ff ff ff       	call   c00130c2 <File::~File()>
c00130f5:	83 c4 10             	add    esp,0x10
c00130f8:	83 ec 08             	sub    esp,0x8
c00130fb:	68 14 01 00 00       	push   0x114
c0013100:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013104:	e8 6a fc ff ff       	call   c0012d73 <operator delete(void*, unsigned long)>
c0013109:	83 c4 10             	add    esp,0x10
c001310c:	83 c4 0c             	add    esp,0xc
c001310f:	c3                   	ret    

c0013110 <Directory::~Directory()>:
c0013110:	83 ec 0c             	sub    esp,0xc
c0013113:	ba 40 b8 02 c0       	mov    edx,0xc002b840
c0013118:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001311c:	89 10                	mov    DWORD PTR [eax],edx
c001311e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013122:	83 ec 0c             	sub    esp,0xc
c0013125:	50                   	push   eax
c0013126:	e8 c1 e6 ff ff       	call   c00117ec <UnixFile::~UnixFile()>
c001312b:	83 c4 10             	add    esp,0x10
c001312e:	90                   	nop
c001312f:	83 c4 0c             	add    esp,0xc
c0013132:	c3                   	ret    
c0013133:	90                   	nop

c0013134 <Directory::~Directory()>:
c0013134:	83 ec 0c             	sub    esp,0xc
c0013137:	83 ec 0c             	sub    esp,0xc
c001313a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001313e:	e8 cd ff ff ff       	call   c0013110 <Directory::~Directory()>
c0013143:	83 c4 10             	add    esp,0x10
c0013146:	83 ec 08             	sub    esp,0x8
c0013149:	68 14 01 00 00       	push   0x114
c001314e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013152:	e8 1c fc ff ff       	call   c0012d73 <operator delete(void*, unsigned long)>
c0013157:	83 c4 10             	add    esp,0x10
c001315a:	83 c4 0c             	add    esp,0xc
c001315d:	c3                   	ret    

c001315e <Filesystem::Filesystem()>:
c001315e:	ba bc b7 02 c0       	mov    edx,0xc002b7bc
c0013163:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013167:	89 10                	mov    DWORD PTR [eax],edx
c0013169:	8b 15 14 f4 02 c0    	mov    edx,DWORD PTR ds:0xc002f414
c001316f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013173:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0013176:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001317a:	a3 14 f4 02 c0       	mov    ds:0xc002f414,eax
c001317f:	90                   	nop
c0013180:	c3                   	ret    
c0013181:	90                   	nop

c0013182 <Filesystem::~Filesystem()>:
c0013182:	ba bc b7 02 c0       	mov    edx,0xc002b7bc
c0013187:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001318b:	89 10                	mov    DWORD PTR [eax],edx
c001318d:	90                   	nop
c001318e:	c3                   	ret    
c001318f:	90                   	nop

c0013190 <Filesystem::~Filesystem()>:
c0013190:	83 ec 0c             	sub    esp,0xc
c0013193:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013197:	e8 e6 ff ff ff       	call   c0013182 <Filesystem::~Filesystem()>
c001319c:	83 c4 04             	add    esp,0x4
c001319f:	83 ec 08             	sub    esp,0x8
c00131a2:	6a 08                	push   0x8
c00131a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131a8:	e8 c6 fb ff ff       	call   c0012d73 <operator delete(void*, unsigned long)>
c00131ad:	83 c4 10             	add    esp,0x10
c00131b0:	83 c4 0c             	add    esp,0xc
c00131b3:	c3                   	ret    

c00131b4 <Fs::getcwd(Process*, char*, int)>:
c00131b4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00131b8:	31 c0                	xor    eax,eax
c00131ba:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00131bd:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00131c1:	7d 15                	jge    c00131d8 <Fs::getcwd(Process*, char*, int)+0x24>
c00131c3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00131c7:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c00131ce:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00131d1:	84 c9                	test   cl,cl
c00131d3:	74 06                	je     c00131db <Fs::getcwd(Process*, char*, int)+0x27>
c00131d5:	40                   	inc    eax
c00131d6:	eb e2                	jmp    c00131ba <Fs::getcwd(Process*, char*, int)+0x6>
c00131d8:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00131db:	31 c0                	xor    eax,eax
c00131dd:	c3                   	ret    

c00131de <Fs::initVFS()>:
c00131de:	83 ec 18             	sub    esp,0x18
c00131e1:	6a 08                	push   0x8
c00131e3:	e8 c0 c6 ff ff       	call   c000f8a8 <malloc>
c00131e8:	89 04 24             	mov    DWORD PTR [esp],eax
c00131eb:	e8 e6 e6 00 00       	call   c00218d6 <FAT::FAT()>
c00131f0:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00131f7:	e8 ac c6 ff ff       	call   c000f8a8 <malloc>
c00131fc:	89 04 24             	mov    DWORD PTR [esp],eax
c00131ff:	e8 0e f9 00 00       	call   c0022b12 <ISO9660::ISO9660()>
c0013204:	83 c4 1c             	add    esp,0x1c
c0013207:	c3                   	ret    

c0013208 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0013208:	55                   	push   ebp
c0013209:	57                   	push   edi
c001320a:	56                   	push   esi
c001320b:	53                   	push   ebx
c001320c:	81 ec 10 04 00 00    	sub    esp,0x410
c0013212:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0013219:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0013220:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0013227:	68 00 04 00 00       	push   0x400
c001322c:	6a 00                	push   0x0
c001322e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0013232:	56                   	push   esi
c0013233:	e8 34 d5 fe ff       	call   c000076c <memset>
c0013238:	83 c4 10             	add    esp,0x10
c001323b:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c001323f:	75 0b                	jne    c001324c <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0013241:	50                   	push   eax
c0013242:	50                   	push   eax
c0013243:	57                   	push   edi
c0013244:	56                   	push   esi
c0013245:	e8 de d5 fe ff       	call   c0000828 <strcpy>
c001324a:	eb 41                	jmp    c001328d <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c001324c:	8a 07                	mov    al,BYTE PTR [edi]
c001324e:	3c 5c                	cmp    al,0x5c
c0013250:	74 04                	je     c0013256 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0013252:	3c 2f                	cmp    al,0x2f
c0013254:	75 18                	jne    c001326e <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0013256:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0013259:	3c 60                	cmp    al,0x60
c001325b:	7e 03                	jle    c0013260 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c001325d:	83 e8 20             	sub    eax,0x20
c0013260:	88 04 24             	mov    BYTE PTR [esp],al
c0013263:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c001326a:	50                   	push   eax
c001326b:	50                   	push   eax
c001326c:	eb 18                	jmp    c0013286 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c001326e:	50                   	push   eax
c001326f:	50                   	push   eax
c0013270:	55                   	push   ebp
c0013271:	56                   	push   esi
c0013272:	e8 b1 d5 fe ff       	call   c0000828 <strcpy>
c0013277:	5a                   	pop    edx
c0013278:	59                   	pop    ecx
c0013279:	68 d1 cf 02 c0       	push   0xc002cfd1
c001327e:	56                   	push   esi
c001327f:	e8 e4 d6 fe ff       	call   c0000968 <strcat>
c0013284:	5d                   	pop    ebp
c0013285:	58                   	pop    eax
c0013286:	57                   	push   edi
c0013287:	56                   	push   esi
c0013288:	e8 db d6 fe ff       	call   c0000968 <strcat>
c001328d:	83 c4 10             	add    esp,0x10
c0013290:	8a 04 24             	mov    al,BYTE PTR [esp]
c0013293:	3c 60                	cmp    al,0x60
c0013295:	7e 03                	jle    c001329a <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0013297:	83 e8 20             	sub    eax,0x20
c001329a:	88 04 24             	mov    BYTE PTR [esp],al
c001329d:	88 03                	mov    BYTE PTR [ebx],al
c001329f:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c00132a6:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c00132ac:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00132b0:	bf 03 00 00 00       	mov    edi,0x3
c00132b5:	b8 03 00 00 00       	mov    eax,0x3
c00132ba:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c00132bd:	84 d2                	test   dl,dl
c00132bf:	0f 84 91 00 00 00    	je     c0013356 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c00132c5:	8d 4f 01             	lea    ecx,[edi+0x1]
c00132c8:	80 fa 5c             	cmp    dl,0x5c
c00132cb:	74 05                	je     c00132d2 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c00132cd:	80 fa 2f             	cmp    dl,0x2f
c00132d0:	75 12                	jne    c00132e4 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c00132d2:	89 c5                	mov    ebp,eax
c00132d4:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c00132d9:	74 09                	je     c00132e4 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c00132db:	40                   	inc    eax
c00132dc:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c00132e0:	89 cf                	mov    edi,ecx
c00132e2:	eb d6                	jmp    c00132ba <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c00132e4:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c00132e9:	75 5b                	jne    c0013346 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c00132eb:	80 fa 2e             	cmp    dl,0x2e
c00132ee:	75 56                	jne    c0013346 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c00132f0:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c00132f4:	74 19                	je     c001330f <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c00132f6:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00132fb:	74 53                	je     c0013350 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c00132fd:	89 f9                	mov    ecx,edi
c00132ff:	41                   	inc    ecx
c0013300:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0013303:	80 fa 2f             	cmp    dl,0x2f
c0013306:	74 f7                	je     c00132ff <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0013308:	80 fa 5c             	cmp    dl,0x5c
c001330b:	74 f2                	je     c00132ff <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c001330d:	eb d1                	jmp    c00132e0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001330f:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0013314:	74 3a                	je     c0013350 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0013316:	83 f8 03             	cmp    eax,0x3
c0013319:	74 c5                	je     c00132e0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001331b:	41                   	inc    ecx
c001331c:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c001331f:	80 fa 2f             	cmp    dl,0x2f
c0013322:	74 f7                	je     c001331b <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0013324:	80 fa 5c             	cmp    dl,0x5c
c0013327:	74 f2                	je     c001331b <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0013329:	48                   	dec    eax
c001332a:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001332e:	75 06                	jne    c0013336 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0013330:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013334:	eb f3                	jmp    c0013329 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0013336:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001333a:	74 07                	je     c0013343 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c001333c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013340:	48                   	dec    eax
c0013341:	eb f3                	jmp    c0013336 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0013343:	40                   	inc    eax
c0013344:	eb 9a                	jmp    c00132e0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013346:	80 fa 2f             	cmp    dl,0x2f
c0013349:	74 95                	je     c00132e0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001334b:	80 fa 5c             	cmp    dl,0x5c
c001334e:	74 90                	je     c00132e0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013350:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0013353:	40                   	inc    eax
c0013354:	eb 8a                	jmp    c00132e0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013356:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001335a:	83 ec 0c             	sub    esp,0xc
c001335d:	53                   	push   ebx
c001335e:	e8 25 d4 fe ff       	call   c0000788 <strlen>
c0013363:	83 c4 10             	add    esp,0x10
c0013366:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c001336b:	75 26                	jne    c0013393 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c001336d:	83 ec 0c             	sub    esp,0xc
c0013370:	53                   	push   ebx
c0013371:	e8 12 d4 fe ff       	call   c0000788 <strlen>
c0013376:	83 c4 10             	add    esp,0x10
c0013379:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c001337e:	74 26                	je     c00133a6 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0013380:	83 ec 0c             	sub    esp,0xc
c0013383:	53                   	push   ebx
c0013384:	e8 ff d3 fe ff       	call   c0000788 <strlen>
c0013389:	83 c4 10             	add    esp,0x10
c001338c:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0013391:	eb c7                	jmp    c001335a <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0013393:	83 ec 0c             	sub    esp,0xc
c0013396:	53                   	push   ebx
c0013397:	e8 ec d3 fe ff       	call   c0000788 <strlen>
c001339c:	83 c4 10             	add    esp,0x10
c001339f:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c00133a4:	74 c7                	je     c001336d <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c00133a6:	81 c4 0c 04 00 00    	add    esp,0x40c
c00133ac:	5b                   	pop    ebx
c00133ad:	5e                   	pop    esi
c00133ae:	5f                   	pop    edi
c00133af:	5d                   	pop    ebp
c00133b0:	c3                   	ret    
c00133b1:	90                   	nop

c00133b2 <File::File(char const*, Process*)>:
c00133b2:	83 ec 0c             	sub    esp,0xc
c00133b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133b9:	83 ec 08             	sub    esp,0x8
c00133bc:	6a 00                	push   0x0
c00133be:	50                   	push   eax
c00133bf:	e8 46 e2 ff ff       	call   c001160a <UnixFile::UnixFile(int)>
c00133c4:	83 c4 10             	add    esp,0x10
c00133c7:	ba 24 b8 02 c0       	mov    edx,0xc002b824
c00133cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133d0:	89 10                	mov    DWORD PTR [eax],edx
c00133d2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00133d6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00133dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133e0:	83 c0 0d             	add    eax,0xd
c00133e3:	83 ec 04             	sub    esp,0x4
c00133e6:	52                   	push   edx
c00133e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133eb:	50                   	push   eax
c00133ec:	e8 17 fe ff ff       	call   c0013208 <Fs::standardiseFiles(char*, char const*, char const*)>
c00133f1:	83 c4 10             	add    esp,0x10
c00133f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133f8:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00133fb:	8d 50 bf             	lea    edx,[eax-0x41]
c00133fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013402:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013408:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001340c:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013410:	90                   	nop
c0013411:	83 c4 0c             	add    esp,0xc
c0013414:	c3                   	ret    
c0013415:	90                   	nop

c0013416 <File::open(FileOpenMode)>:
c0013416:	53                   	push   ebx
c0013417:	b8 0b 00 00 00       	mov    eax,0xb
c001341c:	83 ec 08             	sub    esp,0x8
c001341f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013423:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001342a:	80 fa 19             	cmp    dl,0x19
c001342d:	77 40                	ja     c001346f <File::open(FileOpenMode)+0x59>
c001342f:	8b 14 95 a0 f8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0760]
c0013436:	85 d2                	test   edx,edx
c0013438:	74 35                	je     c001346f <File::open(FileOpenMode)+0x59>
c001343a:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013440:	85 d2                	test   edx,edx
c0013442:	74 2b                	je     c001346f <File::open(FileOpenMode)+0x59>
c0013444:	b8 06 00 00 00       	mov    eax,0x6
c0013449:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001344d:	75 20                	jne    c001346f <File::open(FileOpenMode)+0x59>
c001344f:	8b 02                	mov    eax,DWORD PTR [edx]
c0013451:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013457:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001345b:	51                   	push   ecx
c001345c:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001345f:	51                   	push   ecx
c0013460:	52                   	push   edx
c0013461:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013464:	83 c4 10             	add    esp,0x10
c0013467:	85 c0                	test   eax,eax
c0013469:	75 04                	jne    c001346f <File::open(FileOpenMode)+0x59>
c001346b:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001346f:	83 c4 08             	add    esp,0x8
c0013472:	5b                   	pop    ebx
c0013473:	c3                   	ret    

c0013474 <File::close()>:
c0013474:	53                   	push   ebx
c0013475:	b8 0b 00 00 00       	mov    eax,0xb
c001347a:	83 ec 08             	sub    esp,0x8
c001347d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013481:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013488:	80 fa 19             	cmp    dl,0x19
c001348b:	77 41                	ja     c00134ce <File::close()+0x5a>
c001348d:	8b 1c 95 a0 f8 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd0760]
c0013494:	85 db                	test   ebx,ebx
c0013496:	74 36                	je     c00134ce <File::close()+0x5a>
c0013498:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c001349f:	74 2d                	je     c00134ce <File::close()+0x5a>
c00134a1:	b8 05 00 00 00       	mov    eax,0x5
c00134a6:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00134aa:	74 22                	je     c00134ce <File::close()+0x5a>
c00134ac:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00134b0:	8b 04 95 a0 f8 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0760]
c00134b7:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00134bd:	53                   	push   ebx
c00134be:	53                   	push   ebx
c00134bf:	8b 10                	mov    edx,DWORD PTR [eax]
c00134c1:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00134c7:	50                   	push   eax
c00134c8:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c00134cb:	83 c4 10             	add    esp,0x10
c00134ce:	83 c4 08             	add    esp,0x8
c00134d1:	5b                   	pop    ebx
c00134d2:	c3                   	ret    
c00134d3:	90                   	nop

c00134d4 <File::seek(unsigned long long)>:
c00134d4:	56                   	push   esi
c00134d5:	53                   	push   ebx
c00134d6:	b8 0b 00 00 00       	mov    eax,0xb
c00134db:	51                   	push   ecx
c00134dc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00134e0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00134e4:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c00134eb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00134ef:	80 fa 19             	cmp    dl,0x19
c00134f2:	77 31                	ja     c0013525 <File::seek(unsigned long long)+0x51>
c00134f4:	8b 14 95 a0 f8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0760]
c00134fb:	85 d2                	test   edx,edx
c00134fd:	74 26                	je     c0013525 <File::seek(unsigned long long)+0x51>
c00134ff:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013505:	85 d2                	test   edx,edx
c0013507:	74 1c                	je     c0013525 <File::seek(unsigned long long)+0x51>
c0013509:	b8 05 00 00 00       	mov    eax,0x5
c001350e:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0013512:	74 11                	je     c0013525 <File::seek(unsigned long long)+0x51>
c0013514:	8b 02                	mov    eax,DWORD PTR [edx]
c0013516:	53                   	push   ebx
c0013517:	51                   	push   ecx
c0013518:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c001351e:	52                   	push   edx
c001351f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013522:	83 c4 10             	add    esp,0x10
c0013525:	5a                   	pop    edx
c0013526:	5b                   	pop    ebx
c0013527:	5e                   	pop    esi
c0013528:	c3                   	ret    
c0013529:	90                   	nop

c001352a <File::tell(unsigned long long*)>:
c001352a:	83 ec 0c             	sub    esp,0xc
c001352d:	b8 0b 00 00 00       	mov    eax,0xb
c0013532:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013536:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001353d:	80 fa 19             	cmp    dl,0x19
c0013540:	77 34                	ja     c0013576 <File::tell(unsigned long long*)+0x4c>
c0013542:	8b 14 95 a0 f8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0760]
c0013549:	85 d2                	test   edx,edx
c001354b:	74 29                	je     c0013576 <File::tell(unsigned long long*)+0x4c>
c001354d:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013553:	85 d2                	test   edx,edx
c0013555:	74 1f                	je     c0013576 <File::tell(unsigned long long*)+0x4c>
c0013557:	b8 05 00 00 00       	mov    eax,0x5
c001355c:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013560:	74 14                	je     c0013576 <File::tell(unsigned long long*)+0x4c>
c0013562:	50                   	push   eax
c0013563:	8b 02                	mov    eax,DWORD PTR [edx]
c0013565:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013569:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001356f:	52                   	push   edx
c0013570:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0013573:	83 c4 10             	add    esp,0x10
c0013576:	83 c4 0c             	add    esp,0xc
c0013579:	c3                   	ret    

c001357a <File::rewind()>:
c001357a:	83 ec 10             	sub    esp,0x10
c001357d:	6a 00                	push   0x0
c001357f:	6a 00                	push   0x0
c0013581:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013585:	e8 4a ff ff ff       	call   c00134d4 <File::seek(unsigned long long)>
c001358a:	83 c4 1c             	add    esp,0x1c
c001358d:	c3                   	ret    

c001358e <File::unlink()>:
c001358e:	83 ec 0c             	sub    esp,0xc
c0013591:	b8 0b 00 00 00       	mov    eax,0xb
c0013596:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001359a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00135a1:	80 f9 19             	cmp    cl,0x19
c00135a4:	77 2f                	ja     c00135d5 <File::unlink()+0x47>
c00135a6:	8b 0c 8d a0 f8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0760]
c00135ad:	85 c9                	test   ecx,ecx
c00135af:	74 24                	je     c00135d5 <File::unlink()+0x47>
c00135b1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00135b7:	85 c9                	test   ecx,ecx
c00135b9:	74 1a                	je     c00135d5 <File::unlink()+0x47>
c00135bb:	b8 06 00 00 00       	mov    eax,0x6
c00135c0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00135c4:	75 0f                	jne    c00135d5 <File::unlink()+0x47>
c00135c6:	83 c2 0d             	add    edx,0xd
c00135c9:	50                   	push   eax
c00135ca:	50                   	push   eax
c00135cb:	8b 01                	mov    eax,DWORD PTR [ecx]
c00135cd:	52                   	push   edx
c00135ce:	51                   	push   ecx
c00135cf:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00135d2:	83 c4 10             	add    esp,0x10
c00135d5:	83 c4 0c             	add    esp,0xc
c00135d8:	c3                   	ret    
c00135d9:	90                   	nop

c00135da <File::rename(char const*)>:
c00135da:	83 ec 0c             	sub    esp,0xc
c00135dd:	b8 0b 00 00 00       	mov    eax,0xb
c00135e2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00135e6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00135ed:	80 f9 19             	cmp    cl,0x19
c00135f0:	77 32                	ja     c0013624 <File::rename(char const*)+0x4a>
c00135f2:	8b 0c 8d a0 f8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0760]
c00135f9:	85 c9                	test   ecx,ecx
c00135fb:	74 27                	je     c0013624 <File::rename(char const*)+0x4a>
c00135fd:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013603:	85 c9                	test   ecx,ecx
c0013605:	74 1d                	je     c0013624 <File::rename(char const*)+0x4a>
c0013607:	b8 06 00 00 00       	mov    eax,0x6
c001360c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013610:	75 12                	jne    c0013624 <File::rename(char const*)+0x4a>
c0013612:	83 c2 0d             	add    edx,0xd
c0013615:	50                   	push   eax
c0013616:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013618:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001361c:	52                   	push   edx
c001361d:	51                   	push   ecx
c001361e:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013621:	83 c4 10             	add    esp,0x10
c0013624:	83 c4 0c             	add    esp,0xc
c0013627:	c3                   	ret    

c0013628 <File::chfatattr(unsigned char, unsigned char)>:
c0013628:	57                   	push   edi
c0013629:	b8 0b 00 00 00       	mov    eax,0xb
c001362e:	56                   	push   esi
c001362f:	53                   	push   ebx
c0013630:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013634:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013638:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001363f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013643:	80 f9 19             	cmp    cl,0x19
c0013646:	77 37                	ja     c001367f <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013648:	8b 0c 8d a0 f8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0760]
c001364f:	85 c9                	test   ecx,ecx
c0013651:	74 2c                	je     c001367f <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013653:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013659:	85 c9                	test   ecx,ecx
c001365b:	74 22                	je     c001367f <File::chfatattr(unsigned char, unsigned char)+0x57>
c001365d:	b8 06 00 00 00       	mov    eax,0x6
c0013662:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013666:	75 17                	jne    c001367f <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013668:	8b 39                	mov    edi,DWORD PTR [ecx]
c001366a:	89 f0                	mov    eax,esi
c001366c:	83 c2 0d             	add    edx,0xd
c001366f:	0f b6 f0             	movzx  esi,al
c0013672:	0f b6 db             	movzx  ebx,bl
c0013675:	56                   	push   esi
c0013676:	53                   	push   ebx
c0013677:	52                   	push   edx
c0013678:	51                   	push   ecx
c0013679:	ff 57 34             	call   DWORD PTR [edi+0x34]
c001367c:	83 c4 10             	add    esp,0x10
c001367f:	5b                   	pop    ebx
c0013680:	5e                   	pop    esi
c0013681:	5f                   	pop    edi
c0013682:	c3                   	ret    
c0013683:	90                   	nop

c0013684 <File::exists()>:
c0013684:	83 ec 0c             	sub    esp,0xc
c0013687:	31 c0                	xor    eax,eax
c0013689:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001368d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013694:	80 f9 19             	cmp    cl,0x19
c0013697:	77 24                	ja     c00136bd <File::exists()+0x39>
c0013699:	8b 0c 8d a0 f8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0760]
c00136a0:	85 c9                	test   ecx,ecx
c00136a2:	74 19                	je     c00136bd <File::exists()+0x39>
c00136a4:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00136aa:	85 c9                	test   ecx,ecx
c00136ac:	74 0f                	je     c00136bd <File::exists()+0x39>
c00136ae:	83 c2 0d             	add    edx,0xd
c00136b1:	50                   	push   eax
c00136b2:	50                   	push   eax
c00136b3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00136b5:	52                   	push   edx
c00136b6:	51                   	push   ecx
c00136b7:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00136ba:	83 c4 10             	add    esp,0x10
c00136bd:	83 c4 0c             	add    esp,0xc
c00136c0:	c3                   	ret    
c00136c1:	90                   	nop

c00136c2 <File::stat(unsigned long long*, bool*)>:
c00136c2:	56                   	push   esi
c00136c3:	53                   	push   ebx
c00136c4:	50                   	push   eax
c00136c5:	b8 0b 00 00 00       	mov    eax,0xb
c00136ca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00136ce:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00136d2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00136d9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00136dd:	80 f9 19             	cmp    cl,0x19
c00136e0:	77 3d                	ja     c001371f <File::stat(unsigned long long*, bool*)+0x5d>
c00136e2:	8b 0c 8d a0 f8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0760]
c00136e9:	85 c9                	test   ecx,ecx
c00136eb:	74 32                	je     c001371f <File::stat(unsigned long long*, bool*)+0x5d>
c00136ed:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00136f3:	85 c9                	test   ecx,ecx
c00136f5:	74 28                	je     c001371f <File::stat(unsigned long long*, bool*)+0x5d>
c00136f7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00136f9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00136fd:	74 13                	je     c0013712 <File::stat(unsigned long long*, bool*)+0x50>
c00136ff:	83 ec 04             	sub    esp,0x4
c0013702:	56                   	push   esi
c0013703:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0013709:	51                   	push   ecx
c001370a:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c001370d:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0013710:	eb 0a                	jmp    c001371c <File::stat(unsigned long long*, bool*)+0x5a>
c0013712:	53                   	push   ebx
c0013713:	83 c2 0d             	add    edx,0xd
c0013716:	56                   	push   esi
c0013717:	52                   	push   edx
c0013718:	51                   	push   ecx
c0013719:	ff 50 30             	call   DWORD PTR [eax+0x30]
c001371c:	83 c4 10             	add    esp,0x10
c001371f:	5a                   	pop    edx
c0013720:	5b                   	pop    ebx
c0013721:	5e                   	pop    esi
c0013722:	c3                   	ret    

c0013723 <Fs::setcwd(Process*, char*)>:
c0013723:	55                   	push   ebp
c0013724:	57                   	push   edi
c0013725:	56                   	push   esi
c0013726:	53                   	push   ebx
c0013727:	81 ec 20 02 00 00    	sub    esp,0x220
c001372d:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0013734:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c001373a:	57                   	push   edi
c001373b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0013742:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0013746:	56                   	push   esi
c0013747:	e8 bc fa ff ff       	call   c0013208 <Fs::standardiseFiles(char*, char const*, char const*)>
c001374c:	89 34 24             	mov    DWORD PTR [esp],esi
c001374f:	e8 34 d0 fe ff       	call   c0000788 <strlen>
c0013754:	83 c4 10             	add    esp,0x10
c0013757:	83 f8 02             	cmp    eax,0x2
c001375a:	77 17                	ja     c0013773 <Fs::setcwd(Process*, char*)+0x50>
c001375c:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0013761:	83 e8 41             	sub    eax,0x41
c0013764:	83 f8 19             	cmp    eax,0x19
c0013767:	76 24                	jbe    c001378d <Fs::setcwd(Process*, char*)+0x6a>
c0013769:	b8 03 00 00 00       	mov    eax,0x3
c001376e:	e9 e0 00 00 00       	jmp    c0013853 <Fs::setcwd(Process*, char*)+0x130>
c0013773:	83 ec 0c             	sub    esp,0xc
c0013776:	56                   	push   esi
c0013777:	e8 0c d0 fe ff       	call   c0000788 <strlen>
c001377c:	83 c4 10             	add    esp,0x10
c001377f:	83 f8 03             	cmp    eax,0x3
c0013782:	75 34                	jne    c00137b8 <Fs::setcwd(Process*, char*)+0x95>
c0013784:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0013789:	75 2d                	jne    c00137b8 <Fs::setcwd(Process*, char*)+0x95>
c001378b:	eb cf                	jmp    c001375c <Fs::setcwd(Process*, char*)+0x39>
c001378d:	8b 14 85 a0 f8 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0760]
c0013794:	b8 05 00 00 00       	mov    eax,0x5
c0013799:	85 d2                	test   edx,edx
c001379b:	0f 84 b2 00 00 00    	je     c0013853 <Fs::setcwd(Process*, char*)+0x130>
c00137a1:	b8 06 00 00 00       	mov    eax,0x6
c00137a6:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00137ad:	0f 85 92 00 00 00    	jne    c0013845 <Fs::setcwd(Process*, char*)+0x122>
c00137b3:	e9 9b 00 00 00       	jmp    c0013853 <Fs::setcwd(Process*, char*)+0x130>
c00137b8:	83 ec 0c             	sub    esp,0xc
c00137bb:	68 14 01 00 00       	push   0x114
c00137c0:	e8 e3 c0 ff ff       	call   c000f8a8 <malloc>
c00137c5:	83 c4 0c             	add    esp,0xc
c00137c8:	89 c3                	mov    ebx,eax
c00137ca:	55                   	push   ebp
c00137cb:	56                   	push   esi
c00137cc:	50                   	push   eax
c00137cd:	e8 e0 fb ff ff       	call   c00133b2 <File::File(char const*, Process*)>
c00137d2:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00137d7:	83 c4 0c             	add    esp,0xc
c00137da:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00137de:	50                   	push   eax
c00137df:	8d 44 24 10          	lea    eax,[esp+0x10]
c00137e3:	50                   	push   eax
c00137e4:	53                   	push   ebx
c00137e5:	e8 d8 fe ff ff       	call   c00136c2 <File::stat(unsigned long long*, bool*)>
c00137ea:	83 c4 10             	add    esp,0x10
c00137ed:	83 f8 02             	cmp    eax,0x2
c00137f0:	74 04                	je     c00137f6 <Fs::setcwd(Process*, char*)+0xd3>
c00137f2:	85 c0                	test   eax,eax
c00137f4:	74 1c                	je     c0013812 <Fs::setcwd(Process*, char*)+0xef>
c00137f6:	b8 01 00 00 00       	mov    eax,0x1
c00137fb:	85 db                	test   ebx,ebx
c00137fd:	74 54                	je     c0013853 <Fs::setcwd(Process*, char*)+0x130>
c00137ff:	83 ec 0c             	sub    esp,0xc
c0013802:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013804:	53                   	push   ebx
c0013805:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013808:	83 c4 10             	add    esp,0x10
c001380b:	b8 01 00 00 00       	mov    eax,0x1
c0013810:	eb 41                	jmp    c0013853 <Fs::setcwd(Process*, char*)+0x130>
c0013812:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0013817:	75 1c                	jne    c0013835 <Fs::setcwd(Process*, char*)+0x112>
c0013819:	b8 02 00 00 00       	mov    eax,0x2
c001381e:	85 db                	test   ebx,ebx
c0013820:	74 31                	je     c0013853 <Fs::setcwd(Process*, char*)+0x130>
c0013822:	83 ec 0c             	sub    esp,0xc
c0013825:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013827:	53                   	push   ebx
c0013828:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001382b:	83 c4 10             	add    esp,0x10
c001382e:	b8 02 00 00 00       	mov    eax,0x2
c0013833:	eb 1e                	jmp    c0013853 <Fs::setcwd(Process*, char*)+0x130>
c0013835:	85 db                	test   ebx,ebx
c0013837:	74 0c                	je     c0013845 <Fs::setcwd(Process*, char*)+0x122>
c0013839:	83 ec 0c             	sub    esp,0xc
c001383c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001383e:	53                   	push   ebx
c001383f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013842:	83 c4 10             	add    esp,0x10
c0013845:	50                   	push   eax
c0013846:	50                   	push   eax
c0013847:	56                   	push   esi
c0013848:	57                   	push   edi
c0013849:	e8 da cf fe ff       	call   c0000828 <strcpy>
c001384e:	83 c4 10             	add    esp,0x10
c0013851:	31 c0                	xor    eax,eax
c0013853:	81 c4 1c 02 00 00    	add    esp,0x21c
c0013859:	5b                   	pop    ebx
c001385a:	5e                   	pop    esi
c001385b:	5f                   	pop    edi
c001385c:	5d                   	pop    ebp
c001385d:	c3                   	ret    

c001385e <Directory::Directory(char const*, Process*)>:
c001385e:	83 ec 0c             	sub    esp,0xc
c0013861:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013865:	83 ec 08             	sub    esp,0x8
c0013868:	6a 00                	push   0x0
c001386a:	50                   	push   eax
c001386b:	e8 9a dd ff ff       	call   c001160a <UnixFile::UnixFile(int)>
c0013870:	83 c4 10             	add    esp,0x10
c0013873:	ba 40 b8 02 c0       	mov    edx,0xc002b840
c0013878:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001387c:	89 10                	mov    DWORD PTR [eax],edx
c001387e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013882:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013888:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001388c:	83 c0 0d             	add    eax,0xd
c001388f:	83 ec 04             	sub    esp,0x4
c0013892:	52                   	push   edx
c0013893:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013897:	50                   	push   eax
c0013898:	e8 6b f9 ff ff       	call   c0013208 <Fs::standardiseFiles(char*, char const*, char const*)>
c001389d:	83 c4 10             	add    esp,0x10
c00138a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138a4:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00138a7:	8d 50 bf             	lea    edx,[eax-0x41]
c00138aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138ae:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00138b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138b8:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00138bc:	90                   	nop
c00138bd:	83 c4 0c             	add    esp,0xc
c00138c0:	c3                   	ret    
c00138c1:	90                   	nop

c00138c2 <Directory::open()>:
c00138c2:	53                   	push   ebx
c00138c3:	b8 0b 00 00 00       	mov    eax,0xb
c00138c8:	83 ec 08             	sub    esp,0x8
c00138cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00138cf:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00138d6:	80 fa 19             	cmp    dl,0x19
c00138d9:	77 3d                	ja     c0013918 <Directory::open()+0x56>
c00138db:	8b 14 95 a0 f8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0760]
c00138e2:	85 d2                	test   edx,edx
c00138e4:	74 32                	je     c0013918 <Directory::open()+0x56>
c00138e6:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00138ec:	85 d2                	test   edx,edx
c00138ee:	74 28                	je     c0013918 <Directory::open()+0x56>
c00138f0:	b8 06 00 00 00       	mov    eax,0x6
c00138f5:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00138f9:	75 1d                	jne    c0013918 <Directory::open()+0x56>
c00138fb:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013901:	50                   	push   eax
c0013902:	8b 02                	mov    eax,DWORD PTR [edx]
c0013904:	51                   	push   ecx
c0013905:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013908:	51                   	push   ecx
c0013909:	52                   	push   edx
c001390a:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c001390d:	83 c4 10             	add    esp,0x10
c0013910:	85 c0                	test   eax,eax
c0013912:	75 04                	jne    c0013918 <Directory::open()+0x56>
c0013914:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013918:	83 c4 08             	add    esp,0x8
c001391b:	5b                   	pop    ebx
c001391c:	c3                   	ret    
c001391d:	90                   	nop

c001391e <Directory::close()>:
c001391e:	53                   	push   ebx
c001391f:	b8 0b 00 00 00       	mov    eax,0xb
c0013924:	83 ec 08             	sub    esp,0x8
c0013927:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001392b:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013932:	80 fa 19             	cmp    dl,0x19
c0013935:	77 41                	ja     c0013978 <Directory::close()+0x5a>
c0013937:	8b 1c 95 a0 f8 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd0760]
c001393e:	85 db                	test   ebx,ebx
c0013940:	74 36                	je     c0013978 <Directory::close()+0x5a>
c0013942:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013949:	74 2d                	je     c0013978 <Directory::close()+0x5a>
c001394b:	b8 05 00 00 00       	mov    eax,0x5
c0013950:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013954:	74 22                	je     c0013978 <Directory::close()+0x5a>
c0013956:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c001395a:	8b 04 95 a0 f8 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0760]
c0013961:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013967:	53                   	push   ebx
c0013968:	53                   	push   ebx
c0013969:	8b 10                	mov    edx,DWORD PTR [eax]
c001396b:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013971:	50                   	push   eax
c0013972:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0013975:	83 c4 10             	add    esp,0x10
c0013978:	83 c4 08             	add    esp,0x8
c001397b:	5b                   	pop    ebx
c001397c:	c3                   	ret    
c001397d:	90                   	nop

c001397e <Directory::unlink()>:
c001397e:	83 ec 0c             	sub    esp,0xc
c0013981:	b8 0b 00 00 00       	mov    eax,0xb
c0013986:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001398a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013991:	80 f9 19             	cmp    cl,0x19
c0013994:	77 2f                	ja     c00139c5 <Directory::unlink()+0x47>
c0013996:	8b 0c 8d a0 f8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0760]
c001399d:	85 c9                	test   ecx,ecx
c001399f:	74 24                	je     c00139c5 <Directory::unlink()+0x47>
c00139a1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00139a7:	85 c9                	test   ecx,ecx
c00139a9:	74 1a                	je     c00139c5 <Directory::unlink()+0x47>
c00139ab:	b8 06 00 00 00       	mov    eax,0x6
c00139b0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00139b4:	75 0f                	jne    c00139c5 <Directory::unlink()+0x47>
c00139b6:	83 c2 0d             	add    edx,0xd
c00139b9:	50                   	push   eax
c00139ba:	50                   	push   eax
c00139bb:	8b 01                	mov    eax,DWORD PTR [ecx]
c00139bd:	52                   	push   edx
c00139be:	51                   	push   ecx
c00139bf:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00139c2:	83 c4 10             	add    esp,0x10
c00139c5:	83 c4 0c             	add    esp,0xc
c00139c8:	c3                   	ret    
c00139c9:	90                   	nop

c00139ca <Directory::rename(char const*)>:
c00139ca:	83 ec 0c             	sub    esp,0xc
c00139cd:	b8 0b 00 00 00       	mov    eax,0xb
c00139d2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00139d6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00139dd:	80 f9 19             	cmp    cl,0x19
c00139e0:	77 32                	ja     c0013a14 <Directory::rename(char const*)+0x4a>
c00139e2:	8b 0c 8d a0 f8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0760]
c00139e9:	85 c9                	test   ecx,ecx
c00139eb:	74 27                	je     c0013a14 <Directory::rename(char const*)+0x4a>
c00139ed:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00139f3:	85 c9                	test   ecx,ecx
c00139f5:	74 1d                	je     c0013a14 <Directory::rename(char const*)+0x4a>
c00139f7:	b8 06 00 00 00       	mov    eax,0x6
c00139fc:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013a00:	75 12                	jne    c0013a14 <Directory::rename(char const*)+0x4a>
c0013a02:	83 c2 0d             	add    edx,0xd
c0013a05:	50                   	push   eax
c0013a06:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a08:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013a0c:	52                   	push   edx
c0013a0d:	51                   	push   ecx
c0013a0e:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013a11:	83 c4 10             	add    esp,0x10
c0013a14:	83 c4 0c             	add    esp,0xc
c0013a17:	c3                   	ret    

c0013a18 <Directory::exists()>:
c0013a18:	83 ec 0c             	sub    esp,0xc
c0013a1b:	31 c0                	xor    eax,eax
c0013a1d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a21:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013a28:	80 f9 19             	cmp    cl,0x19
c0013a2b:	77 24                	ja     c0013a51 <Directory::exists()+0x39>
c0013a2d:	8b 0c 8d a0 f8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0760]
c0013a34:	85 c9                	test   ecx,ecx
c0013a36:	74 19                	je     c0013a51 <Directory::exists()+0x39>
c0013a38:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013a3e:	85 c9                	test   ecx,ecx
c0013a40:	74 0f                	je     c0013a51 <Directory::exists()+0x39>
c0013a42:	83 c2 0d             	add    edx,0xd
c0013a45:	50                   	push   eax
c0013a46:	50                   	push   eax
c0013a47:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a49:	52                   	push   edx
c0013a4a:	51                   	push   ecx
c0013a4b:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013a4e:	83 c4 10             	add    esp,0x10
c0013a51:	83 c4 0c             	add    esp,0xc
c0013a54:	c3                   	ret    
c0013a55:	90                   	nop

c0013a56 <Directory::read(dirent*)>:
c0013a56:	83 ec 1c             	sub    esp,0x1c
c0013a59:	b8 0b 00 00 00       	mov    eax,0xb
c0013a5e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013a62:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013a69:	80 fa 19             	cmp    dl,0x19
c0013a6c:	77 30                	ja     c0013a9e <Directory::read(dirent*)+0x48>
c0013a6e:	8b 14 95 a0 f8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0760]
c0013a75:	85 d2                	test   edx,edx
c0013a77:	74 25                	je     c0013a9e <Directory::read(dirent*)+0x48>
c0013a79:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013a80:	74 1c                	je     c0013a9e <Directory::read(dirent*)+0x48>
c0013a82:	83 ec 0c             	sub    esp,0xc
c0013a85:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a87:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013a8b:	52                   	push   edx
c0013a8c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013a90:	6a 00                	push   0x0
c0013a92:	68 10 01 00 00       	push   0x110
c0013a97:	51                   	push   ecx
c0013a98:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013a9b:	83 c4 20             	add    esp,0x20
c0013a9e:	83 c4 1c             	add    esp,0x1c
c0013aa1:	c3                   	ret    

c0013aa2 <Directory::create()>:
c0013aa2:	83 ec 0c             	sub    esp,0xc
c0013aa5:	b8 0b 00 00 00       	mov    eax,0xb
c0013aaa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013aae:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013ab5:	80 f9 19             	cmp    cl,0x19
c0013ab8:	77 2f                	ja     c0013ae9 <Directory::create()+0x47>
c0013aba:	8b 0c 8d a0 f8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0760]
c0013ac1:	85 c9                	test   ecx,ecx
c0013ac3:	74 24                	je     c0013ae9 <Directory::create()+0x47>
c0013ac5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013acb:	85 c9                	test   ecx,ecx
c0013acd:	74 1a                	je     c0013ae9 <Directory::create()+0x47>
c0013acf:	b8 06 00 00 00       	mov    eax,0x6
c0013ad4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013ad8:	75 0f                	jne    c0013ae9 <Directory::create()+0x47>
c0013ada:	83 c2 0d             	add    edx,0xd
c0013add:	50                   	push   eax
c0013ade:	50                   	push   eax
c0013adf:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013ae1:	52                   	push   edx
c0013ae2:	51                   	push   ecx
c0013ae3:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013ae6:	83 c4 10             	add    esp,0x10
c0013ae9:	83 c4 0c             	add    esp,0xc
c0013aec:	c3                   	ret    
c0013aed:	90                   	nop

c0013aee <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013aee:	b8 0a 00 00 00       	mov    eax,0xa
c0013af3:	c3                   	ret    

c0013af4 <Bus::Bus(char const*)>:
c0013af4:	83 ec 0c             	sub    esp,0xc
c0013af7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013afb:	83 ec 08             	sub    esp,0x8
c0013afe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b02:	50                   	push   eax
c0013b03:	e8 5c 09 00 00       	call   c0014464 <Device::Device(char const*)>
c0013b08:	83 c4 10             	add    esp,0x10
c0013b0b:	ba 5c b8 02 c0       	mov    edx,0xc002b85c
c0013b10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b14:	89 10                	mov    DWORD PTR [eax],edx
c0013b16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b1a:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013b24:	90                   	nop
c0013b25:	83 c4 0c             	add    esp,0xc
c0013b28:	c3                   	ret    
c0013b29:	90                   	nop

c0013b2a <Bus::~Bus()>:
c0013b2a:	83 ec 0c             	sub    esp,0xc
c0013b2d:	ba 5c b8 02 c0       	mov    edx,0xc002b85c
c0013b32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b36:	89 10                	mov    DWORD PTR [eax],edx
c0013b38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b3c:	83 ec 0c             	sub    esp,0xc
c0013b3f:	50                   	push   eax
c0013b40:	e8 15 06 00 00       	call   c001415a <Device::~Device()>
c0013b45:	83 c4 10             	add    esp,0x10
c0013b48:	90                   	nop
c0013b49:	83 c4 0c             	add    esp,0xc
c0013b4c:	c3                   	ret    
c0013b4d:	90                   	nop

c0013b4e <Bus::~Bus()>:
c0013b4e:	83 ec 0c             	sub    esp,0xc
c0013b51:	83 ec 0c             	sub    esp,0xc
c0013b54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b58:	e8 cd ff ff ff       	call   c0013b2a <Bus::~Bus()>
c0013b5d:	83 c4 10             	add    esp,0x10
c0013b60:	83 ec 08             	sub    esp,0x8
c0013b63:	68 58 01 00 00       	push   0x158
c0013b68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b6c:	e8 02 f2 ff ff       	call   c0012d73 <operator delete(void*, unsigned long)>
c0013b71:	83 c4 10             	add    esp,0x10
c0013b74:	83 c4 0c             	add    esp,0xc
c0013b77:	c3                   	ret    

c0013b78 <Buzzer::Buzzer(char const*)>:
c0013b78:	83 ec 0c             	sub    esp,0xc
c0013b7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b7f:	83 ec 08             	sub    esp,0x8
c0013b82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b86:	50                   	push   eax
c0013b87:	e8 d8 08 00 00       	call   c0014464 <Device::Device(char const*)>
c0013b8c:	83 c4 10             	add    esp,0x10
c0013b8f:	ba 88 b8 02 c0       	mov    edx,0xc002b888
c0013b94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b98:	89 10                	mov    DWORD PTR [eax],edx
c0013b9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b9e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013ba8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bac:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013bb6:	90                   	nop
c0013bb7:	83 c4 0c             	add    esp,0xc
c0013bba:	c3                   	ret    
c0013bbb:	90                   	nop

c0013bbc <Buzzer::~Buzzer()>:
c0013bbc:	83 ec 0c             	sub    esp,0xc
c0013bbf:	ba 88 b8 02 c0       	mov    edx,0xc002b888
c0013bc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bc8:	89 10                	mov    DWORD PTR [eax],edx
c0013bca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bce:	83 ec 0c             	sub    esp,0xc
c0013bd1:	50                   	push   eax
c0013bd2:	e8 83 05 00 00       	call   c001415a <Device::~Device()>
c0013bd7:	83 c4 10             	add    esp,0x10
c0013bda:	90                   	nop
c0013bdb:	83 c4 0c             	add    esp,0xc
c0013bde:	c3                   	ret    
c0013bdf:	90                   	nop

c0013be0 <Buzzer::~Buzzer()>:
c0013be0:	83 ec 0c             	sub    esp,0xc
c0013be3:	83 ec 0c             	sub    esp,0xc
c0013be6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bea:	e8 cd ff ff ff       	call   c0013bbc <Buzzer::~Buzzer()>
c0013bef:	83 c4 10             	add    esp,0x10
c0013bf2:	83 ec 08             	sub    esp,0x8
c0013bf5:	68 5c 01 00 00       	push   0x15c
c0013bfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bfe:	e8 70 f1 ff ff       	call   c0012d73 <operator delete(void*, unsigned long)>
c0013c03:	83 c4 10             	add    esp,0x10
c0013c06:	83 c4 0c             	add    esp,0xc
c0013c09:	c3                   	ret    

c0013c0a <Buzzer::stop()>:
c0013c0a:	83 ec 14             	sub    esp,0x14
c0013c0d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c11:	8b 10                	mov    edx,DWORD PTR [eax]
c0013c13:	6a 00                	push   0x0
c0013c15:	50                   	push   eax
c0013c16:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013c19:	83 c4 1c             	add    esp,0x1c
c0013c1c:	c3                   	ret    

c0013c1d <beepThread(void*)>:
c0013c1d:	53                   	push   ebx
c0013c1e:	83 ec 08             	sub    esp,0x8
c0013c21:	a1 c8 27 03 c0       	mov    eax,ds:0xc00327c8
c0013c26:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013c2a:	48                   	dec    eax
c0013c2b:	a3 c8 27 03 c0       	mov    ds:0xc00327c8,eax
c0013c30:	75 01                	jne    c0013c33 <beepThread(void*)+0x16>
c0013c32:	fb                   	sti    
c0013c33:	50                   	push   eax
c0013c34:	50                   	push   eax
c0013c35:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013c3a:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013c40:	52                   	push   edx
c0013c41:	50                   	push   eax
c0013c42:	e8 5c ad 00 00       	call   c001e9a3 <nanoSleep(unsigned long long)>
c0013c47:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013c4a:	e8 bb ff ff ff       	call   c0013c0a <Buzzer::stop()>
c0013c4f:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013c57:	83 c4 18             	add    esp,0x18
c0013c5a:	5b                   	pop    ebx
c0013c5b:	e9 3f ac 00 00       	jmp    c001e89f <blockTask(TaskState)>

c0013c60 <Buzzer::beep(int, int, bool)>:
c0013c60:	57                   	push   edi
c0013c61:	56                   	push   esi
c0013c62:	53                   	push   ebx
c0013c63:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013c67:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013c6b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013c6f:	52                   	push   edx
c0013c70:	52                   	push   edx
c0013c71:	8b 06                	mov    eax,DWORD PTR [esi]
c0013c73:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c77:	56                   	push   esi
c0013c78:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013c7b:	83 c4 10             	add    esp,0x10
c0013c7e:	89 f8                	mov    eax,edi
c0013c80:	84 c0                	test   al,al
c0013c82:	74 1f                	je     c0013ca3 <Buzzer::beep(int, int, bool)+0x43>
c0013c84:	50                   	push   eax
c0013c85:	50                   	push   eax
c0013c86:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013c8c:	99                   	cdq    
c0013c8d:	52                   	push   edx
c0013c8e:	50                   	push   eax
c0013c8f:	e8 0f ad 00 00       	call   c001e9a3 <nanoSleep(unsigned long long)>
c0013c94:	83 c4 10             	add    esp,0x10
c0013c97:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013c9b:	5b                   	pop    ebx
c0013c9c:	5e                   	pop    esi
c0013c9d:	5f                   	pop    edi
c0013c9e:	e9 67 ff ff ff       	jmp    c0013c0a <Buzzer::stop()>
c0013ca3:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013ca9:	a1 f0 27 03 c0       	mov    eax,ds:0xc00327f0
c0013cae:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013cb6:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013cba:	c7 44 24 14 1d 3c 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013c1d
c0013cc2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013cc6:	5b                   	pop    ebx
c0013cc7:	5e                   	pop    esi
c0013cc8:	5f                   	pop    edi
c0013cc9:	e9 8e a7 00 00       	jmp    c001e45c <Process::createThread(void (*)(void*), void*, int)>

c0013cce <User::loadClockSettings(int)>:
c0013cce:	53                   	push   ebx
c0013ccf:	83 ec 14             	sub    esp,0x14
c0013cd2:	68 14 01 00 00       	push   0x114
c0013cd7:	e8 cc bb ff ff       	call   c000f8a8 <malloc>
c0013cdc:	83 c4 0c             	add    esp,0xc
c0013cdf:	89 c3                	mov    ebx,eax
c0013ce1:	ff 35 f0 27 03 c0    	push   DWORD PTR ds:0xc00327f0
c0013ce7:	68 b0 b8 02 c0       	push   0xc002b8b0
c0013cec:	50                   	push   eax
c0013ced:	e8 c0 f6 ff ff       	call   c00133b2 <File::File(char const*, Process*)>
c0013cf2:	58                   	pop    eax
c0013cf3:	5a                   	pop    edx
c0013cf4:	6a 01                	push   0x1
c0013cf6:	53                   	push   ebx
c0013cf7:	e8 1a f7 ff ff       	call   c0013416 <File::open(FileOpenMode)>
c0013cfc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013cff:	e8 70 f7 ff ff       	call   c0013474 <File::close()>
c0013d04:	83 c4 10             	add    esp,0x10
c0013d07:	85 db                	test   ebx,ebx
c0013d09:	74 0f                	je     c0013d1a <User::loadClockSettings(int)+0x4c>
c0013d0b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d0d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013d11:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013d14:	83 c4 08             	add    esp,0x8
c0013d17:	5b                   	pop    ebx
c0013d18:	ff e0                	jmp    eax
c0013d1a:	83 c4 08             	add    esp,0x8
c0013d1d:	5b                   	pop    ebx
c0013d1e:	c3                   	ret    
c0013d1f:	90                   	nop

c0013d20 <Clock::Clock(char const*)>:
c0013d20:	83 ec 0c             	sub    esp,0xc
c0013d23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d27:	83 ec 08             	sub    esp,0x8
c0013d2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d2e:	50                   	push   eax
c0013d2f:	e8 30 07 00 00       	call   c0014464 <Device::Device(char const*)>
c0013d34:	83 c4 10             	add    esp,0x10
c0013d37:	ba d8 b8 02 c0       	mov    edx,0xc002b8d8
c0013d3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d40:	89 10                	mov    DWORD PTR [eax],edx
c0013d42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d46:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013d50:	90                   	nop
c0013d51:	83 c4 0c             	add    esp,0xc
c0013d54:	c3                   	ret    
c0013d55:	90                   	nop

c0013d56 <Clock::~Clock()>:
c0013d56:	83 ec 0c             	sub    esp,0xc
c0013d59:	ba d8 b8 02 c0       	mov    edx,0xc002b8d8
c0013d5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d62:	89 10                	mov    DWORD PTR [eax],edx
c0013d64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d68:	83 ec 0c             	sub    esp,0xc
c0013d6b:	50                   	push   eax
c0013d6c:	e8 e9 03 00 00       	call   c001415a <Device::~Device()>
c0013d71:	83 c4 10             	add    esp,0x10
c0013d74:	90                   	nop
c0013d75:	83 c4 0c             	add    esp,0xc
c0013d78:	c3                   	ret    
c0013d79:	90                   	nop

c0013d7a <Clock::~Clock()>:
c0013d7a:	83 ec 0c             	sub    esp,0xc
c0013d7d:	83 ec 0c             	sub    esp,0xc
c0013d80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d84:	e8 cd ff ff ff       	call   c0013d56 <Clock::~Clock()>
c0013d89:	83 c4 10             	add    esp,0x10
c0013d8c:	83 ec 08             	sub    esp,0x8
c0013d8f:	68 58 01 00 00       	push   0x158
c0013d94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d98:	e8 d6 ef ff ff       	call   c0012d73 <operator delete(void*, unsigned long)>
c0013d9d:	83 c4 10             	add    esp,0x10
c0013da0:	83 c4 0c             	add    esp,0xc
c0013da3:	c3                   	ret    

c0013da4 <Clock::timeInSecondsLocal()>:
c0013da4:	53                   	push   ebx
c0013da5:	83 ec 14             	sub    esp,0x14
c0013da8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013dac:	8b 10                	mov    edx,DWORD PTR [eax]
c0013dae:	50                   	push   eax
c0013daf:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013db2:	0f b6 0d 1c f4 02 c0 	movzx  ecx,BYTE PTR ds:0xc002f41c
c0013db9:	03 0d 20 f4 02 c0    	add    ecx,DWORD PTR ds:0xc002f420
c0013dbf:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013dc5:	89 cb                	mov    ebx,ecx
c0013dc7:	c1 fb 1f             	sar    ebx,0x1f
c0013dca:	01 c8                	add    eax,ecx
c0013dcc:	11 da                	adc    edx,ebx
c0013dce:	83 c4 10             	add    esp,0x10
c0013dd1:	31 c9                	xor    ecx,ecx
c0013dd3:	80 3d 1d f4 02 c0 00 	cmp    BYTE PTR ds:0xc002f41d,0x0
c0013dda:	74 05                	je     c0013de1 <Clock::timeInSecondsLocal()+0x3d>
c0013ddc:	b9 08 07 00 00       	mov    ecx,0x708
c0013de1:	31 db                	xor    ebx,ebx
c0013de3:	01 c8                	add    eax,ecx
c0013de5:	11 da                	adc    edx,ebx
c0013de7:	83 c4 08             	add    esp,0x8
c0013dea:	5b                   	pop    ebx
c0013deb:	c3                   	ret    

c0013dec <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013dec:	57                   	push   edi
c0013ded:	56                   	push   esi
c0013dee:	53                   	push   ebx
c0013def:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013df3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013df7:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013df9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013dfd:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013e00:	0f b6 05 1c f4 02 c0 	movzx  eax,BYTE PTR ds:0xc002f41c
c0013e07:	03 05 20 f4 02 c0    	add    eax,DWORD PTR ds:0xc002f420
c0013e0d:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013e13:	99                   	cdq    
c0013e14:	29 c6                	sub    esi,eax
c0013e16:	19 d7                	sbb    edi,edx
c0013e18:	89 f0                	mov    eax,esi
c0013e1a:	89 fa                	mov    edx,edi
c0013e1c:	31 f6                	xor    esi,esi
c0013e1e:	80 3d 1d f4 02 c0 00 	cmp    BYTE PTR ds:0xc002f41d,0x0
c0013e25:	74 05                	je     c0013e2c <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013e27:	be 08 07 00 00       	mov    esi,0x708
c0013e2c:	31 ff                	xor    edi,edi
c0013e2e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013e32:	29 f0                	sub    eax,esi
c0013e34:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013e38:	19 fa                	sbb    edx,edi
c0013e3a:	89 d8                	mov    eax,ebx
c0013e3c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013e40:	5b                   	pop    ebx
c0013e41:	5e                   	pop    esi
c0013e42:	5f                   	pop    edi
c0013e43:	ff e0                	jmp    eax

c0013e45 <datetimeToSeconds(datetime_t)>:
c0013e45:	55                   	push   ebp
c0013e46:	57                   	push   edi
c0013e47:	56                   	push   esi
c0013e48:	53                   	push   ebx
c0013e49:	83 ec 14             	sub    esp,0x14
c0013e4c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013e50:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013e54:	89 d3                	mov    ebx,edx
c0013e56:	0f b6 c6             	movzx  eax,dh
c0013e59:	c1 eb 10             	shr    ebx,0x10
c0013e5c:	48                   	dec    eax
c0013e5d:	66 81 eb 6c 07       	sub    bx,0x76c
c0013e62:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013e66:	0f b6 f5             	movzx  esi,ch
c0013e69:	89 cf                	mov    edi,ecx
c0013e6b:	6b f6 3c             	imul   esi,esi,0x3c
c0013e6e:	c1 ef 10             	shr    edi,0x10
c0013e71:	0f b6 c9             	movzx  ecx,cl
c0013e74:	89 f8                	mov    eax,edi
c0013e76:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013e7c:	0f b6 f8             	movzx  edi,al
c0013e7f:	0f b6 d2             	movzx  edx,dl
c0013e82:	01 fe                	add    esi,edi
c0013e84:	01 f1                	add    ecx,esi
c0013e86:	0f b7 f3             	movzx  esi,bx
c0013e89:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013e8d:	c1 f9 1f             	sar    ecx,0x1f
c0013e90:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013e95:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013e99:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013e9e:	8b 0c 8d 20 b9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd46e0]
c0013ea5:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013ea9:	76 29                	jbe    c0013ed4 <datetimeToSeconds(datetime_t)+0x8f>
c0013eab:	f6 c3 03             	test   bl,0x3
c0013eae:	75 24                	jne    c0013ed4 <datetimeToSeconds(datetime_t)+0x8f>
c0013eb0:	31 d2                	xor    edx,edx
c0013eb2:	bf 64 00 00 00       	mov    edi,0x64
c0013eb7:	89 d8                	mov    eax,ebx
c0013eb9:	66 f7 f7             	div    di
c0013ebc:	66 85 d2             	test   dx,dx
c0013ebf:	75 12                	jne    c0013ed3 <datetimeToSeconds(datetime_t)+0x8e>
c0013ec1:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013ec7:	bf 90 01 00 00       	mov    edi,0x190
c0013ecc:	99                   	cdq    
c0013ecd:	f7 ff                	idiv   edi
c0013ecf:	85 d2                	test   edx,edx
c0013ed1:	75 01                	jne    c0013ed4 <datetimeToSeconds(datetime_t)+0x8f>
c0013ed3:	41                   	inc    ecx
c0013ed4:	66 83 fb 46          	cmp    bx,0x46
c0013ed8:	76 45                	jbe    c0013f1f <datetimeToSeconds(datetime_t)+0xda>
c0013eda:	bb 46 00 00 00       	mov    ebx,0x46
c0013edf:	bf 64 00 00 00       	mov    edi,0x64
c0013ee4:	bd 90 01 00 00       	mov    ebp,0x190
c0013ee9:	b8 6d 01 00 00       	mov    eax,0x16d
c0013eee:	f6 c3 03             	test   bl,0x3
c0013ef1:	75 23                	jne    c0013f16 <datetimeToSeconds(datetime_t)+0xd1>
c0013ef3:	89 d8                	mov    eax,ebx
c0013ef5:	99                   	cdq    
c0013ef6:	f7 ff                	idiv   edi
c0013ef8:	b8 6e 01 00 00       	mov    eax,0x16e
c0013efd:	85 d2                	test   edx,edx
c0013eff:	75 15                	jne    c0013f16 <datetimeToSeconds(datetime_t)+0xd1>
c0013f01:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013f07:	99                   	cdq    
c0013f08:	f7 fd                	idiv   ebp
c0013f0a:	83 fa 01             	cmp    edx,0x1
c0013f0d:	19 c0                	sbb    eax,eax
c0013f0f:	f7 d0                	not    eax
c0013f11:	05 6e 01 00 00       	add    eax,0x16e
c0013f16:	01 c1                	add    ecx,eax
c0013f18:	43                   	inc    ebx
c0013f19:	39 f3                	cmp    ebx,esi
c0013f1b:	7c cc                	jl     c0013ee9 <datetimeToSeconds(datetime_t)+0xa4>
c0013f1d:	eb 35                	jmp    c0013f54 <datetimeToSeconds(datetime_t)+0x10f>
c0013f1f:	74 33                	je     c0013f54 <datetimeToSeconds(datetime_t)+0x10f>
c0013f21:	b8 45 00 00 00       	mov    eax,0x45
c0013f26:	89 c2                	mov    edx,eax
c0013f28:	83 e2 03             	and    edx,0x3
c0013f2b:	39 f0                	cmp    eax,esi
c0013f2d:	7e 0f                	jle    c0013f3e <datetimeToSeconds(datetime_t)+0xf9>
c0013f2f:	83 fa 01             	cmp    edx,0x1
c0013f32:	19 d2                	sbb    edx,edx
c0013f34:	48                   	dec    eax
c0013f35:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013f3c:	eb e8                	jmp    c0013f26 <datetimeToSeconds(datetime_t)+0xe1>
c0013f3e:	b8 6d 01 00 00       	mov    eax,0x16d
c0013f43:	85 d2                	test   edx,edx
c0013f45:	75 0b                	jne    c0013f52 <datetimeToSeconds(datetime_t)+0x10d>
c0013f47:	66 83 fb 01          	cmp    bx,0x1
c0013f4b:	19 c0                	sbb    eax,eax
c0013f4d:	05 6e 01 00 00       	add    eax,0x16e
c0013f52:	29 c1                	sub    ecx,eax
c0013f54:	b8 80 51 01 00       	mov    eax,0x15180
c0013f59:	f7 e9                	imul   ecx
c0013f5b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013f5f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013f63:	83 c4 14             	add    esp,0x14
c0013f66:	5b                   	pop    ebx
c0013f67:	5e                   	pop    esi
c0013f68:	5f                   	pop    edi
c0013f69:	5d                   	pop    ebp
c0013f6a:	c3                   	ret    
c0013f6b:	90                   	nop

c0013f6c <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013f6c:	57                   	push   edi
c0013f6d:	56                   	push   esi
c0013f6e:	53                   	push   ebx
c0013f6f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013f73:	8b 06                	mov    eax,DWORD PTR [esi]
c0013f75:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013f78:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013f7c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013f80:	e8 c0 fe ff ff       	call   c0013e45 <datetimeToSeconds(datetime_t)>
c0013f85:	59                   	pop    ecx
c0013f86:	0f b6 0d 1c f4 02 c0 	movzx  ecx,BYTE PTR ds:0xc002f41c
c0013f8d:	5b                   	pop    ebx
c0013f8e:	03 0d 20 f4 02 c0    	add    ecx,DWORD PTR ds:0xc002f420
c0013f94:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013f9a:	89 cb                	mov    ebx,ecx
c0013f9c:	c1 fb 1f             	sar    ebx,0x1f
c0013f9f:	29 c8                	sub    eax,ecx
c0013fa1:	19 da                	sbb    edx,ebx
c0013fa3:	31 c9                	xor    ecx,ecx
c0013fa5:	80 3d 1d f4 02 c0 00 	cmp    BYTE PTR ds:0xc002f41d,0x0
c0013fac:	74 05                	je     c0013fb3 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013fae:	b9 08 07 00 00       	mov    ecx,0x708
c0013fb3:	31 db                	xor    ebx,ebx
c0013fb5:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013fb9:	29 c8                	sub    eax,ecx
c0013fbb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013fbf:	19 da                	sbb    edx,ebx
c0013fc1:	89 f8                	mov    eax,edi
c0013fc3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013fc7:	5b                   	pop    ebx
c0013fc8:	5e                   	pop    esi
c0013fc9:	5f                   	pop    edi
c0013fca:	ff e0                	jmp    eax

c0013fcc <secondsToDatetime(unsigned long long)>:
c0013fcc:	55                   	push   ebp
c0013fcd:	57                   	push   edi
c0013fce:	56                   	push   esi
c0013fcf:	53                   	push   ebx
c0013fd0:	83 ec 1c             	sub    esp,0x1c
c0013fd3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013fd7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013fdb:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013fdf:	6a 00                	push   0x0
c0013fe1:	68 80 51 01 00       	push   0x15180
c0013fe6:	55                   	push   ebp
c0013fe7:	57                   	push   edi
c0013fe8:	e8 f7 35 01 00       	call   c00275e4 <__udivdi3>
c0013fed:	83 c4 10             	add    esp,0x10
c0013ff0:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013ff6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013ffa:	6a 00                	push   0x0
c0013ffc:	68 80 51 01 00       	push   0x15180
c0014001:	55                   	push   ebp
c0014002:	57                   	push   edi
c0014003:	bf 10 0e 00 00       	mov    edi,0xe10
c0014008:	e8 d7 36 01 00       	call   c00276e4 <__umoddi3>
c001400d:	83 c4 10             	add    esp,0x10
c0014010:	99                   	cdq    
c0014011:	f7 ff                	idiv   edi
c0014013:	bf 3c 00 00 00       	mov    edi,0x3c
c0014018:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c001401b:	89 d0                	mov    eax,edx
c001401d:	99                   	cdq    
c001401e:	f7 ff                	idiv   edi
c0014020:	85 db                	test   ebx,ebx
c0014022:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0014025:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0014028:	79 11                	jns    c001403b <secondsToDatetime(unsigned long long)+0x6f>
c001402a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001402e:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0014034:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0014039:	eb 07                	jmp    c0014042 <secondsToDatetime(unsigned long long)+0x76>
c001403b:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0014040:	89 d8                	mov    eax,ebx
c0014042:	bf b4 05 00 00       	mov    edi,0x5b4
c0014047:	99                   	cdq    
c0014048:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c001404d:	f7 f9                	idiv   ecx
c001404f:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0014054:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014058:	31 d2                	xor    edx,edx
c001405a:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0014062:	01 c3                	add    ebx,eax
c0014064:	89 d8                	mov    eax,ebx
c0014066:	f7 f1                	div    ecx
c0014068:	31 d2                	xor    edx,edx
c001406a:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c001406d:	89 d8                	mov    eax,ebx
c001406f:	f7 f7                	div    edi
c0014071:	31 d2                	xor    edx,edx
c0014073:	29 c1                	sub    ecx,eax
c0014075:	89 d8                	mov    eax,ebx
c0014077:	f7 f5                	div    ebp
c0014079:	bd 6d 01 00 00       	mov    ebp,0x16d
c001407e:	29 c1                	sub    ecx,eax
c0014080:	31 d2                	xor    edx,edx
c0014082:	89 c8                	mov    eax,ecx
c0014084:	f7 f5                	div    ebp
c0014086:	bd 94 8e 00 00       	mov    ebp,0x8e94
c001408b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001408f:	31 d2                	xor    edx,edx
c0014091:	89 c8                	mov    eax,ecx
c0014093:	f7 f5                	div    ebp
c0014095:	31 d2                	xor    edx,edx
c0014097:	01 c3                	add    ebx,eax
c0014099:	89 c8                	mov    eax,ecx
c001409b:	f7 f7                	div    edi
c001409d:	bf 99 00 00 00       	mov    edi,0x99
c00140a2:	29 c3                	sub    ebx,eax
c00140a4:	31 d2                	xor    edx,edx
c00140a6:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c00140ae:	29 c3                	sub    ebx,eax
c00140b0:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00140b3:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c00140b6:	bb 05 00 00 00       	mov    ebx,0x5
c00140bb:	83 c1 02             	add    ecx,0x2
c00140be:	89 c8                	mov    eax,ecx
c00140c0:	f7 f7                	div    edi
c00140c2:	31 d2                	xor    edx,edx
c00140c4:	89 c7                	mov    edi,eax
c00140c6:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c00140cc:	83 c0 02             	add    eax,0x2
c00140cf:	f7 f3                	div    ebx
c00140d1:	89 eb                	mov    ebx,ebp
c00140d3:	29 c3                	sub    ebx,eax
c00140d5:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c00140db:	88 1e                	mov    BYTE PTR [esi],bl
c00140dd:	19 c0                	sbb    eax,eax
c00140df:	31 d2                	xor    edx,edx
c00140e1:	83 e0 0c             	and    eax,0xc
c00140e4:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c00140e8:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c00140f0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00140f4:	83 f9 01             	cmp    ecx,0x1
c00140f7:	0f 96 c2             	setbe  dl
c00140fa:	41                   	inc    ecx
c00140fb:	01 d0                	add    eax,edx
c00140fd:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0014100:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0014104:	83 c4 1c             	add    esp,0x1c
c0014107:	89 f0                	mov    eax,esi
c0014109:	5b                   	pop    ebx
c001410a:	5e                   	pop    esi
c001410b:	5f                   	pop    edi
c001410c:	5d                   	pop    ebp
c001410d:	c2 04 00             	ret    0x4

c0014110 <Clock::timeInDatetimeLocal()>:
c0014110:	53                   	push   ebx
c0014111:	83 ec 14             	sub    esp,0x14
c0014114:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014118:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001411c:	e8 83 fc ff ff       	call   c0013da4 <Clock::timeInSecondsLocal()>
c0014121:	83 c4 0c             	add    esp,0xc
c0014124:	52                   	push   edx
c0014125:	50                   	push   eax
c0014126:	53                   	push   ebx
c0014127:	e8 a0 fe ff ff       	call   c0013fcc <secondsToDatetime(unsigned long long)>
c001412c:	89 d8                	mov    eax,ebx
c001412e:	83 c4 14             	add    esp,0x14
c0014131:	5b                   	pop    ebx
c0014132:	c2 04 00             	ret    0x4
c0014135:	90                   	nop

c0014136 <Device::hibernate()>:
c0014136:	c3                   	ret    
c0014137:	90                   	nop

c0014138 <Device::wake()>:
c0014138:	c3                   	ret    
c0014139:	90                   	nop

c001413a <Device::detect()>:
c001413a:	c3                   	ret    
c001413b:	90                   	nop

c001413c <Device::disableLegacy()>:
c001413c:	c3                   	ret    
c001413d:	90                   	nop

c001413e <Device::powerSaving(PowerSavingLevel)>:
c001413e:	c3                   	ret    
c001413f:	90                   	nop

c0014140 <DriverlessDevice::close(int, int, void*)>:
c0014140:	31 c0                	xor    eax,eax
c0014142:	c3                   	ret    
c0014143:	90                   	nop

c0014144 <DriverlessDevice::detect()>:
c0014144:	c3                   	ret    
c0014145:	90                   	nop

c0014146 <DriverlessDevice::open(int, int, void*)>:
c0014146:	83 ec 18             	sub    esp,0x18
c0014149:	68 50 b9 02 c0       	push   0xc002b950
c001414e:	e8 9a 67 00 00       	call   c001a8ed <Krnl::panic(char const*)>
c0014153:	83 c8 ff             	or     eax,0xffffffff
c0014156:	83 c4 1c             	add    esp,0x1c
c0014159:	c3                   	ret    

c001415a <Device::~Device()>:
c001415a:	ba 78 b9 02 c0       	mov    edx,0xc002b978
c001415f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014163:	89 10                	mov    DWORD PTR [eax],edx
c0014165:	90                   	nop
c0014166:	c3                   	ret    
c0014167:	90                   	nop

c0014168 <Device::~Device()>:
c0014168:	83 ec 0c             	sub    esp,0xc
c001416b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001416f:	e8 e6 ff ff ff       	call   c001415a <Device::~Device()>
c0014174:	83 c4 04             	add    esp,0x4
c0014177:	83 ec 08             	sub    esp,0x8
c001417a:	68 58 01 00 00       	push   0x158
c001417f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014183:	e8 eb eb ff ff       	call   c0012d73 <operator delete(void*, unsigned long)>
c0014188:	83 c4 10             	add    esp,0x10
c001418b:	83 c4 0c             	add    esp,0xc
c001418e:	c3                   	ret    
c001418f:	90                   	nop

c0014190 <Device::findAndLoadDriver()>:
c0014190:	c3                   	ret    
c0014191:	90                   	nop

c0014192 <Device::preOpenPCI(PCIDeviceInfo)>:
c0014192:	57                   	push   edi
c0014193:	b9 09 00 00 00       	mov    ecx,0x9
c0014198:	56                   	push   esi
c0014199:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001419d:	8d 74 24 10          	lea    esi,[esp+0x10]
c00141a1:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c00141ab:	81 c7 18 01 00 00    	add    edi,0x118
c00141b1:	fc                   	cld    
c00141b2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00141b4:	5e                   	pop    esi
c00141b5:	5f                   	pop    edi
c00141b6:	c3                   	ret    
c00141b7:	90                   	nop

c00141b8 <Device::preOpenACPI(void*, char*, char*)>:
c00141b8:	57                   	push   edi
c00141b9:	b9 1e 00 00 00       	mov    ecx,0x1e
c00141be:	56                   	push   esi
c00141bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00141c3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00141c7:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c00141d1:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c00141d7:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c00141dd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00141e1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00141e3:	b9 0e 00 00 00       	mov    ecx,0xe
c00141e8:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c00141ee:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00141f2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00141f4:	5e                   	pop    esi
c00141f5:	5f                   	pop    edi
c00141f6:	c3                   	ret    
c00141f7:	90                   	nop

c00141f8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00141f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00141fc:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0014201:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0014208:	75 0b                	jne    c0014215 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c001420a:	8b 00                	mov    eax,DWORD PTR [eax]
c001420c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014210:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014213:	eb 1e                	jmp    c0014233 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0014215:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c001421a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014220:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0014226:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014228:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001422c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014230:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0014233:	ff e0                	jmp    eax
c0014235:	90                   	nop

c0014236 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014236:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001423a:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001423f:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0014246:	75 0b                	jne    c0014253 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0014248:	8b 00                	mov    eax,DWORD PTR [eax]
c001424a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001424e:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0014251:	eb 1e                	jmp    c0014271 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0014253:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c0014258:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001425e:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0014264:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014266:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001426a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001426e:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0014271:	ff e0                	jmp    eax
c0014273:	90                   	nop

c0014274 <Device::addChild(Device*)>:
c0014274:	53                   	push   ebx
c0014275:	83 ec 08             	sub    esp,0x8
c0014278:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001427c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014280:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0014286:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c001428c:	8b 13                	mov    edx,DWORD PTR [ebx]
c001428e:	85 d2                	test   edx,edx
c0014290:	74 04                	je     c0014296 <Device::addChild(Device*)+0x22>
c0014292:	89 d3                	mov    ebx,edx
c0014294:	eb f6                	jmp    c001428c <Device::addChild(Device*)+0x18>
c0014296:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0014299:	83 ec 0c             	sub    esp,0xc
c001429c:	6a 08                	push   0x8
c001429e:	e8 05 b6 ff ff       	call   c000f8a8 <malloc>
c00142a3:	89 03                	mov    DWORD PTR [ebx],eax
c00142a5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00142ab:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00142b2:	83 c4 18             	add    esp,0x18
c00142b5:	5b                   	pop    ebx
c00142b6:	c3                   	ret    
c00142b7:	90                   	nop

c00142b8 <Device::removeAllChildren()>:
c00142b8:	56                   	push   esi
c00142b9:	53                   	push   ebx
c00142ba:	52                   	push   edx
c00142bb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00142bf:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c00142c5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00142c8:	74 17                	je     c00142e1 <Device::removeAllChildren()+0x29>
c00142ca:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00142cd:	85 c0                	test   eax,eax
c00142cf:	74 0c                	je     c00142dd <Device::removeAllChildren()+0x25>
c00142d1:	83 ec 0c             	sub    esp,0xc
c00142d4:	8b 10                	mov    edx,DWORD PTR [eax]
c00142d6:	50                   	push   eax
c00142d7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00142da:	83 c4 10             	add    esp,0x10
c00142dd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00142df:	eb e4                	jmp    c00142c5 <Device::removeAllChildren()+0xd>
c00142e1:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00142e7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00142ed:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00142f3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00142fa:	58                   	pop    eax
c00142fb:	5b                   	pop    ebx
c00142fc:	5e                   	pop    esi
c00142fd:	c3                   	ret    

c00142fe <Device::hibernateAll()>:
c00142fe:	53                   	push   ebx
c00142ff:	83 ec 14             	sub    esp,0x14
c0014302:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014306:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014308:	53                   	push   ebx
c0014309:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001430c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014312:	83 c4 10             	add    esp,0x10
c0014315:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014318:	74 0f                	je     c0014329 <Device::hibernateAll()+0x2b>
c001431a:	83 ec 0c             	sub    esp,0xc
c001431d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014320:	e8 d9 ff ff ff       	call   c00142fe <Device::hibernateAll()>
c0014325:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014327:	eb e9                	jmp    c0014312 <Device::hibernateAll()+0x14>
c0014329:	83 c4 08             	add    esp,0x8
c001432c:	5b                   	pop    ebx
c001432d:	c3                   	ret    

c001432e <Device::wakeAll()>:
c001432e:	53                   	push   ebx
c001432f:	83 ec 14             	sub    esp,0x14
c0014332:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014336:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014338:	53                   	push   ebx
c0014339:	ff 50 14             	call   DWORD PTR [eax+0x14]
c001433c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014342:	83 c4 10             	add    esp,0x10
c0014345:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014348:	74 0f                	je     c0014359 <Device::wakeAll()+0x2b>
c001434a:	83 ec 0c             	sub    esp,0xc
c001434d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014350:	e8 d9 ff ff ff       	call   c001432e <Device::wakeAll()>
c0014355:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014357:	eb e9                	jmp    c0014342 <Device::wakeAll()+0x14>
c0014359:	83 c4 08             	add    esp,0x8
c001435c:	5b                   	pop    ebx
c001435d:	c3                   	ret    

c001435e <Device::detectAll()>:
c001435e:	53                   	push   ebx
c001435f:	83 ec 14             	sub    esp,0x14
c0014362:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014366:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014368:	53                   	push   ebx
c0014369:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001436c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014372:	83 c4 10             	add    esp,0x10
c0014375:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014378:	74 0f                	je     c0014389 <Device::detectAll()+0x2b>
c001437a:	83 ec 0c             	sub    esp,0xc
c001437d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014380:	e8 d9 ff ff ff       	call   c001435e <Device::detectAll()>
c0014385:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014387:	eb e9                	jmp    c0014372 <Device::detectAll()+0x14>
c0014389:	83 c4 08             	add    esp,0x8
c001438c:	5b                   	pop    ebx
c001438d:	c3                   	ret    

c001438e <Device::disableLegacyAll()>:
c001438e:	53                   	push   ebx
c001438f:	83 ec 14             	sub    esp,0x14
c0014392:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014396:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014398:	53                   	push   ebx
c0014399:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c001439c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00143a2:	83 c4 10             	add    esp,0x10
c00143a5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00143a8:	74 0f                	je     c00143b9 <Device::disableLegacyAll()+0x2b>
c00143aa:	83 ec 0c             	sub    esp,0xc
c00143ad:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00143b0:	e8 d9 ff ff ff       	call   c001438e <Device::disableLegacyAll()>
c00143b5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00143b7:	eb e9                	jmp    c00143a2 <Device::disableLegacyAll()+0x14>
c00143b9:	83 c4 08             	add    esp,0x8
c00143bc:	5b                   	pop    ebx
c00143bd:	c3                   	ret    

c00143be <Device::loadDriversForAll()>:
c00143be:	53                   	push   ebx
c00143bf:	83 ec 08             	sub    esp,0x8
c00143c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00143c6:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00143cc:	8b 18                	mov    ebx,DWORD PTR [eax]
c00143ce:	85 db                	test   ebx,ebx
c00143d0:	74 12                	je     c00143e4 <Device::loadDriversForAll()+0x26>
c00143d2:	83 ec 0c             	sub    esp,0xc
c00143d5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00143d8:	e8 e1 ff ff ff       	call   c00143be <Device::loadDriversForAll()>
c00143dd:	83 c4 10             	add    esp,0x10
c00143e0:	89 d8                	mov    eax,ebx
c00143e2:	eb e8                	jmp    c00143cc <Device::loadDriversForAll()+0xe>
c00143e4:	83 c4 08             	add    esp,0x8
c00143e7:	5b                   	pop    ebx
c00143e8:	c3                   	ret    
c00143e9:	90                   	nop

c00143ea <Device::closeAll()>:
c00143ea:	53                   	push   ebx
c00143eb:	83 ec 08             	sub    esp,0x8
c00143ee:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00143f2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143f4:	6a 00                	push   0x0
c00143f6:	6a 00                	push   0x0
c00143f8:	6a 00                	push   0x0
c00143fa:	53                   	push   ebx
c00143fb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00143fe:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014404:	83 c4 10             	add    esp,0x10
c0014407:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001440a:	74 0f                	je     c001441b <Device::closeAll()+0x31>
c001440c:	83 ec 0c             	sub    esp,0xc
c001440f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014412:	e8 d3 ff ff ff       	call   c00143ea <Device::closeAll()>
c0014417:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014419:	eb e9                	jmp    c0014404 <Device::closeAll()+0x1a>
c001441b:	83 c4 08             	add    esp,0x8
c001441e:	5b                   	pop    ebx
c001441f:	c3                   	ret    

c0014420 <Device::powerSavingAll(PowerSavingLevel)>:
c0014420:	56                   	push   esi
c0014421:	53                   	push   ebx
c0014422:	83 ec 0c             	sub    esp,0xc
c0014425:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014429:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001442d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001442f:	56                   	push   esi
c0014430:	53                   	push   ebx
c0014431:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0014434:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001443a:	83 c4 10             	add    esp,0x10
c001443d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014440:	74 0f                	je     c0014451 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0014442:	52                   	push   edx
c0014443:	52                   	push   edx
c0014444:	56                   	push   esi
c0014445:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014448:	e8 d3 ff ff ff       	call   c0014420 <Device::powerSavingAll(PowerSavingLevel)>
c001444d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001444f:	eb e9                	jmp    c001443a <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0014451:	58                   	pop    eax
c0014452:	5b                   	pop    ebx
c0014453:	5e                   	pop    esi
c0014454:	c3                   	ret    
c0014455:	90                   	nop

c0014456 <Device::setName(char const*)>:
c0014456:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c001445e:	e9 c5 c3 fe ff       	jmp    c0000828 <strcpy>
c0014463:	90                   	nop

c0014464 <Device::Device(char const*)>:
c0014464:	83 ec 1c             	sub    esp,0x1c
c0014467:	ba 78 b9 02 c0       	mov    edx,0xc002b978
c001446c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014470:	89 10                	mov    DWORD PTR [eax],edx
c0014472:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014476:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0014480:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014484:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001448e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014492:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001449c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144a0:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00144aa:	83 ec 08             	sub    esp,0x8
c00144ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00144b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00144b5:	e8 9c ff ff ff       	call   c0014456 <Device::setName(char const*)>
c00144ba:	83 c4 10             	add    esp,0x10
c00144bd:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c00144c5:	83 ec 0c             	sub    esp,0xc
c00144c8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00144cc:	e8 d7 b3 ff ff       	call   c000f8a8 <malloc>
c00144d1:	83 c4 10             	add    esp,0x10
c00144d4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00144da:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00144e1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00144e5:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c00144eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144ef:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00144f5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00144fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144ff:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014505:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001450c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014510:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0014517:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001451b:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0014522:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014526:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0014530:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014534:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001453e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014542:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001454c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014550:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c001455a:	90                   	nop
c001455b:	83 c4 1c             	add    esp,0x1c
c001455e:	c3                   	ret    
c001455f:	90                   	nop

c0014560 <Device::getName()>:
c0014560:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014564:	05 d0 00 00 00       	add    eax,0xd0
c0014569:	c3                   	ret    

c001456a <DriverlessDevice::DriverlessDevice(char const*)>:
c001456a:	83 ec 0c             	sub    esp,0xc
c001456d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014571:	83 ec 08             	sub    esp,0x8
c0014574:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014578:	50                   	push   eax
c0014579:	e8 e6 fe ff ff       	call   c0014464 <Device::Device(char const*)>
c001457e:	83 c4 10             	add    esp,0x10
c0014581:	ba a4 b9 02 c0       	mov    edx,0xc002b9a4
c0014586:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001458a:	89 10                	mov    DWORD PTR [eax],edx
c001458c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014590:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c001459a:	90                   	nop
c001459b:	83 c4 0c             	add    esp,0xc
c001459e:	c3                   	ret    
c001459f:	90                   	nop

c00145a0 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c00145a0:	57                   	push   edi
c00145a1:	56                   	push   esi
c00145a2:	53                   	push   ebx
c00145a3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00145a7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00145ab:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00145af:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c00145b5:	75 0c                	jne    c00145c3 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c00145b7:	52                   	push   edx
c00145b8:	52                   	push   edx
c00145b9:	53                   	push   ebx
c00145ba:	56                   	push   esi
c00145bb:	e8 76 4f 01 00       	call   c0029536 <LinkedList<Device>::addElement(Device*)>
c00145c0:	83 c4 10             	add    esp,0x10
c00145c3:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00145c9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00145cc:	74 12                	je     c00145e0 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c00145ce:	50                   	push   eax
c00145cf:	57                   	push   edi
c00145d0:	56                   	push   esi
c00145d1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00145d4:	e8 c7 ff ff ff       	call   c00145a0 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00145d9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00145db:	83 c4 10             	add    esp,0x10
c00145de:	eb e9                	jmp    c00145c9 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c00145e0:	5b                   	pop    ebx
c00145e1:	5e                   	pop    esi
c00145e2:	5f                   	pop    edi
c00145e3:	c3                   	ret    

c00145e4 <getDevicesOfType(DeviceType)>:
c00145e4:	53                   	push   ebx
c00145e5:	83 ec 14             	sub    esp,0x14
c00145e8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00145ec:	53                   	push   ebx
c00145ed:	e8 20 50 01 00       	call   c0029612 <LinkedList<Device>::LinkedList()>
c00145f2:	83 c4 0c             	add    esp,0xc
c00145f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00145f9:	53                   	push   ebx
c00145fa:	ff 35 88 f2 02 c0    	push   DWORD PTR ds:0xc002f288
c0014600:	e8 9b ff ff ff       	call   c00145a0 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014605:	89 d8                	mov    eax,ebx
c0014607:	83 c4 18             	add    esp,0x18
c001460a:	5b                   	pop    ebx
c001460b:	c2 04 00             	ret    0x4

c001460e <HardDiskController::HardDiskController(char const*)>:
c001460e:	83 ec 0c             	sub    esp,0xc
c0014611:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014615:	83 ec 08             	sub    esp,0x8
c0014618:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001461c:	50                   	push   eax
c001461d:	e8 42 fe ff ff       	call   c0014464 <Device::Device(char const*)>
c0014622:	83 c4 10             	add    esp,0x10
c0014625:	ba d0 b9 02 c0       	mov    edx,0xc002b9d0
c001462a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001462e:	89 10                	mov    DWORD PTR [eax],edx
c0014630:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014634:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c001463e:	90                   	nop
c001463f:	83 c4 0c             	add    esp,0xc
c0014642:	c3                   	ret    
c0014643:	90                   	nop

c0014644 <HardDiskController::~HardDiskController()>:
c0014644:	83 ec 0c             	sub    esp,0xc
c0014647:	ba d0 b9 02 c0       	mov    edx,0xc002b9d0
c001464c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014650:	89 10                	mov    DWORD PTR [eax],edx
c0014652:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014656:	83 ec 0c             	sub    esp,0xc
c0014659:	50                   	push   eax
c001465a:	e8 fb fa ff ff       	call   c001415a <Device::~Device()>
c001465f:	83 c4 10             	add    esp,0x10
c0014662:	90                   	nop
c0014663:	83 c4 0c             	add    esp,0xc
c0014666:	c3                   	ret    
c0014667:	90                   	nop

c0014668 <HardDiskController::~HardDiskController()>:
c0014668:	83 ec 0c             	sub    esp,0xc
c001466b:	83 ec 0c             	sub    esp,0xc
c001466e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014672:	e8 cd ff ff ff       	call   c0014644 <HardDiskController::~HardDiskController()>
c0014677:	83 c4 10             	add    esp,0x10
c001467a:	83 ec 08             	sub    esp,0x8
c001467d:	68 58 01 00 00       	push   0x158
c0014682:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014686:	e8 e8 e6 ff ff       	call   c0012d73 <operator delete(void*, unsigned long)>
c001468b:	83 c4 10             	add    esp,0x10
c001468e:	83 c4 0c             	add    esp,0xc
c0014691:	c3                   	ret    

c0014692 <PhysicalDisk::eject()>:
c0014692:	83 ec 18             	sub    esp,0x18
c0014695:	68 f4 b9 02 c0       	push   0xc002b9f4
c001469a:	e8 b4 e7 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001469f:	83 c8 ff             	or     eax,0xffffffff
c00146a2:	83 c4 1c             	add    esp,0x1c
c00146a5:	c3                   	ret    

c00146a6 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c00146a6:	83 ec 0c             	sub    esp,0xc
c00146a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146ad:	83 ec 08             	sub    esp,0x8
c00146b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146b4:	50                   	push   eax
c00146b5:	e8 aa fd ff ff       	call   c0014464 <Device::Device(char const*)>
c00146ba:	83 c4 10             	add    esp,0x10
c00146bd:	ba 24 ba 02 c0       	mov    edx,0xc002ba24
c00146c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146c6:	89 10                	mov    DWORD PTR [eax],edx
c00146c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146cc:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00146d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146d7:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c00146de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146e2:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c00146ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146f0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00146f4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00146fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146fe:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014708:	90                   	nop
c0014709:	83 c4 0c             	add    esp,0xc
c001470c:	c3                   	ret    
c001470d:	90                   	nop

c001470e <PhysicalDisk::startCache()>:
c001470e:	56                   	push   esi
c001470f:	53                   	push   ebx
c0014710:	83 ec 10             	sub    esp,0x10
c0014713:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014717:	6a 44                	push   0x44
c0014719:	e8 8a b1 ff ff       	call   c000f8a8 <malloc>
c001471e:	89 c6                	mov    esi,eax
c0014720:	58                   	pop    eax
c0014721:	5a                   	pop    edx
c0014722:	53                   	push   ebx
c0014723:	56                   	push   esi
c0014724:	e8 cf 28 00 00       	call   c0016ff8 <VCache::VCache(PhysicalDisk*)>
c0014729:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c001472f:	83 c4 14             	add    esp,0x14
c0014732:	5b                   	pop    ebx
c0014733:	5e                   	pop    esi
c0014734:	c3                   	ret    
c0014735:	90                   	nop

c0014736 <PhysicalDisk::~PhysicalDisk()>:
c0014736:	83 ec 0c             	sub    esp,0xc
c0014739:	ba 24 ba 02 c0       	mov    edx,0xc002ba24
c001473e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014742:	89 10                	mov    DWORD PTR [eax],edx
c0014744:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014748:	83 ec 0c             	sub    esp,0xc
c001474b:	50                   	push   eax
c001474c:	e8 09 fa ff ff       	call   c001415a <Device::~Device()>
c0014751:	83 c4 10             	add    esp,0x10
c0014754:	90                   	nop
c0014755:	83 c4 0c             	add    esp,0xc
c0014758:	c3                   	ret    
c0014759:	90                   	nop

c001475a <PhysicalDisk::~PhysicalDisk()>:
c001475a:	83 ec 0c             	sub    esp,0xc
c001475d:	83 ec 0c             	sub    esp,0xc
c0014760:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014764:	e8 cd ff ff ff       	call   c0014736 <PhysicalDisk::~PhysicalDisk()>
c0014769:	83 c4 10             	add    esp,0x10
c001476c:	83 ec 08             	sub    esp,0x8
c001476f:	68 6c 01 00 00       	push   0x16c
c0014774:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014778:	e8 f6 e5 ff ff       	call   c0012d73 <operator delete(void*, unsigned long)>
c001477d:	83 c4 10             	add    esp,0x10
c0014780:	83 c4 0c             	add    esp,0xc
c0014783:	c3                   	ret    

c0014784 <FPU::FPU(char const*)>:
c0014784:	83 ec 0c             	sub    esp,0xc
c0014787:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001478b:	83 ec 08             	sub    esp,0x8
c001478e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014792:	50                   	push   eax
c0014793:	e8 cc fc ff ff       	call   c0014464 <Device::Device(char const*)>
c0014798:	83 c4 10             	add    esp,0x10
c001479b:	ba 68 ba 02 c0       	mov    edx,0xc002ba68
c00147a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147a4:	89 10                	mov    DWORD PTR [eax],edx
c00147a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147aa:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c00147b4:	90                   	nop
c00147b5:	83 c4 0c             	add    esp,0xc
c00147b8:	c3                   	ret    
c00147b9:	90                   	nop

c00147ba <FPU::~FPU()>:
c00147ba:	83 ec 0c             	sub    esp,0xc
c00147bd:	ba 68 ba 02 c0       	mov    edx,0xc002ba68
c00147c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147c6:	89 10                	mov    DWORD PTR [eax],edx
c00147c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147cc:	83 ec 0c             	sub    esp,0xc
c00147cf:	50                   	push   eax
c00147d0:	e8 85 f9 ff ff       	call   c001415a <Device::~Device()>
c00147d5:	83 c4 10             	add    esp,0x10
c00147d8:	90                   	nop
c00147d9:	83 c4 0c             	add    esp,0xc
c00147dc:	c3                   	ret    
c00147dd:	90                   	nop

c00147de <FPU::~FPU()>:
c00147de:	83 ec 0c             	sub    esp,0xc
c00147e1:	83 ec 0c             	sub    esp,0xc
c00147e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147e8:	e8 cd ff ff ff       	call   c00147ba <FPU::~FPU()>
c00147ed:	83 c4 10             	add    esp,0x10
c00147f0:	83 ec 08             	sub    esp,0x8
c00147f3:	68 58 01 00 00       	push   0x158
c00147f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147fc:	e8 72 e5 ff ff       	call   c0012d73 <operator delete(void*, unsigned long)>
c0014801:	83 c4 10             	add    esp,0x10
c0014804:	83 c4 0c             	add    esp,0xc
c0014807:	c3                   	ret    

c0014808 <setupFPU()>:
c0014808:	53                   	push   ebx
c0014809:	83 ec 08             	sub    esp,0x8
c001480c:	8b 15 88 f2 02 c0    	mov    edx,DWORD PTR ds:0xc002f288
c0014812:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c0014819:	74 19                	je     c0014834 <setupFPU()+0x2c>
c001481b:	83 ec 0c             	sub    esp,0xc
c001481e:	68 58 01 00 00       	push   0x158
c0014823:	e8 80 b0 ff ff       	call   c000f8a8 <malloc>
c0014828:	89 c3                	mov    ebx,eax
c001482a:	89 04 24             	mov    DWORD PTR [esp],eax
c001482d:	e8 38 19 01 00       	call   c002616a <AVX::AVX()>
c0014832:	eb 5b                	jmp    c001488f <setupFPU()+0x87>
c0014834:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c001483a:	84 c0                	test   al,al
c001483c:	79 19                	jns    c0014857 <setupFPU()+0x4f>
c001483e:	83 ec 0c             	sub    esp,0xc
c0014841:	68 58 01 00 00       	push   0x158
c0014846:	e8 5d b0 ff ff       	call   c000f8a8 <malloc>
c001484b:	89 c3                	mov    ebx,eax
c001484d:	89 04 24             	mov    DWORD PTR [esp],eax
c0014850:	e8 3b 1a 01 00       	call   c0026290 <SSE::SSE()>
c0014855:	eb 38                	jmp    c001488f <setupFPU()+0x87>
c0014857:	a8 20                	test   al,0x20
c0014859:	74 19                	je     c0014874 <setupFPU()+0x6c>
c001485b:	83 ec 0c             	sub    esp,0xc
c001485e:	68 58 01 00 00       	push   0x158
c0014863:	e8 40 b0 ff ff       	call   c000f8a8 <malloc>
c0014868:	89 c3                	mov    ebx,eax
c001486a:	89 04 24             	mov    DWORD PTR [esp],eax
c001486d:	e8 88 19 01 00       	call   c00261fa <MMX::MMX()>
c0014872:	eb 1b                	jmp    c001488f <setupFPU()+0x87>
c0014874:	a8 10                	test   al,0x10
c0014876:	74 1c                	je     c0014894 <setupFPU()+0x8c>
c0014878:	83 ec 0c             	sub    esp,0xc
c001487b:	68 58 01 00 00       	push   0x158
c0014880:	e8 23 b0 ff ff       	call   c000f8a8 <malloc>
c0014885:	89 c3                	mov    ebx,eax
c0014887:	89 04 24             	mov    DWORD PTR [esp],eax
c001488a:	e8 8f 1a 01 00       	call   c002631e <x87::x87()>
c001488f:	83 c4 10             	add    esp,0x10
c0014892:	eb 24                	jmp    c00148b8 <setupFPU()+0xb0>
c0014894:	83 e0 ef             	and    eax,0xffffffef
c0014897:	83 ec 0c             	sub    esp,0xc
c001489a:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00148a0:	68 54 ba 02 c0       	push   0xc002ba54
c00148a5:	e8 a9 e5 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c00148aa:	0f 20 c0             	mov    eax,cr0
c00148ad:	83 c8 04             	or     eax,0x4
c00148b0:	0f 22 c0             	mov    cr0,eax
c00148b3:	31 db                	xor    ebx,ebx
c00148b5:	83 c4 10             	add    esp,0x10
c00148b8:	89 d8                	mov    eax,ebx
c00148ba:	83 c4 08             	add    esp,0x8
c00148bd:	5b                   	pop    ebx
c00148be:	c3                   	ret    
c00148bf:	90                   	nop

c00148c0 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c00148c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00148c4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00148c8:	c1 e0 04             	shl    eax,0x4
c00148cb:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00148cf:	8d 50 10             	lea    edx,[eax+0x10]
c00148d2:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c00148d8:	74 08                	je     c00148e2 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c00148da:	83 c0 04             	add    eax,0x4
c00148dd:	39 d0                	cmp    eax,edx
c00148df:	75 f1                	jne    c00148d2 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c00148e1:	c3                   	ret    
c00148e2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00148ec:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00148f6:	eb e2                	jmp    c00148da <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c00148f8 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c00148f8:	57                   	push   edi
c00148f9:	31 c0                	xor    eax,eax
c00148fb:	56                   	push   esi
c00148fc:	53                   	push   ebx
c00148fd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014901:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014905:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014909:	89 da                	mov    edx,ebx
c001490b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001490f:	c1 e2 04             	shl    edx,0x4
c0014912:	01 ca                	add    edx,ecx
c0014914:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001491c:	74 16                	je     c0014934 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c001491e:	40                   	inc    eax
c001491f:	83 f8 04             	cmp    eax,0x4
c0014922:	75 f0                	jne    c0014914 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0014924:	c7 44 24 10 98 ba 02 c0 	mov    DWORD PTR [esp+0x10],0xc002ba98
c001492c:	5b                   	pop    ebx
c001492d:	5e                   	pop    esi
c001492e:	5f                   	pop    edi
c001492f:	e9 b9 5f 00 00       	jmp    c001a8ed <Krnl::panic(char const*)>
c0014934:	8d 04 98             	lea    eax,[eax+ebx*4]
c0014937:	8d 04 81             	lea    eax,[ecx+eax*4]
c001493a:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0014940:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0014946:	5b                   	pop    ebx
c0014947:	5e                   	pop    esi
c0014948:	5f                   	pop    edi
c0014949:	c3                   	ret    

c001494a <doubleFault(regs*, void*)>:
c001494a:	55                   	push   ebp
c001494b:	89 e5                	mov    ebp,esp
c001494d:	83 ec 08             	sub    esp,0x8
c0014950:	83 ec 0c             	sub    esp,0xc
c0014953:	68 d3 ba 02 c0       	push   0xc002bad3
c0014958:	e8 90 5f 00 00       	call   c001a8ed <Krnl::panic(char const*)>
c001495d:	83 c4 10             	add    esp,0x10
c0014960:	90                   	nop
c0014961:	c9                   	leave  
c0014962:	c3                   	ret    
c0014963:	90                   	nop

c0014964 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014964:	56                   	push   esi
c0014965:	53                   	push   ebx
c0014966:	50                   	push   eax
c0014967:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001496b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001496f:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014974:	75 35                	jne    c00149ab <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014976:	8d 43 20             	lea    eax,[ebx+0x20]
c0014979:	31 d2                	xor    edx,edx
c001497b:	89 c1                	mov    ecx,eax
c001497d:	c1 e1 04             	shl    ecx,0x4
c0014980:	01 f1                	add    ecx,esi
c0014982:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c001498a:	74 3e                	je     c00149ca <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c001498c:	42                   	inc    edx
c001498d:	83 fa 04             	cmp    edx,0x4
c0014990:	75 f0                	jne    c0014982 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014992:	83 ec 0c             	sub    esp,0xc
c0014995:	68 18 bb 02 c0       	push   0xc002bb18
c001499a:	e8 4e 5f 00 00       	call   c001a8ed <Krnl::panic(char const*)>
c001499f:	83 c4 10             	add    esp,0x10
c00149a2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00149a7:	5a                   	pop    edx
c00149a8:	5b                   	pop    ebx
c00149a9:	5e                   	pop    esi
c00149aa:	c3                   	ret    
c00149ab:	83 ec 0c             	sub    esp,0xc
c00149ae:	56                   	push   esi
c00149af:	e8 ac fb ff ff       	call   c0014560 <Device::getName()>
c00149b4:	83 c4 10             	add    esp,0x10
c00149b7:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00149ba:	75 ba                	jne    c0014976 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00149bc:	83 fb 0f             	cmp    ebx,0xf
c00149bf:	7f 29                	jg     c00149ea <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c00149c1:	0f b6 9b e0 e4 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd1b20]
c00149c8:	eb ac                	jmp    c0014976 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00149ca:	8d 04 82             	lea    eax,[edx+eax*4]
c00149cd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00149d1:	8d 04 86             	lea    eax,[esi+eax*4]
c00149d4:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00149da:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00149de:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c00149e4:	89 d8                	mov    eax,ebx
c00149e6:	5a                   	pop    edx
c00149e7:	5b                   	pop    ebx
c00149e8:	5e                   	pop    esi
c00149e9:	c3                   	ret    
c00149ea:	83 ec 0c             	sub    esp,0xc
c00149ed:	68 e0 ba 02 c0       	push   0xc002bae0
c00149f2:	e8 f6 5e 00 00       	call   c001a8ed <Krnl::panic(char const*)>
c00149f7:	83 c4 10             	add    esp,0x10
c00149fa:	e9 77 ff ff ff       	jmp    c0014976 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00149ff:	90                   	nop

c0014a00 <InterruptController::clearAllHandlers(int, bool)>:
c0014a00:	56                   	push   esi
c0014a01:	53                   	push   ebx
c0014a02:	52                   	push   edx
c0014a03:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014a07:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014a0b:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014a10:	75 61                	jne    c0014a73 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014a12:	8d 46 20             	lea    eax,[esi+0x20]
c0014a15:	c1 e6 04             	shl    esi,0x4
c0014a18:	c1 e0 04             	shl    eax,0x4
c0014a1b:	01 de                	add    esi,ebx
c0014a1d:	01 d8                	add    eax,ebx
c0014a1f:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014a29:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014a33:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014a3d:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014a47:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014a51:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014a5b:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014a65:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014a6f:	58                   	pop    eax
c0014a70:	5b                   	pop    ebx
c0014a71:	5e                   	pop    esi
c0014a72:	c3                   	ret    
c0014a73:	83 ec 0c             	sub    esp,0xc
c0014a76:	53                   	push   ebx
c0014a77:	e8 e4 fa ff ff       	call   c0014560 <Device::getName()>
c0014a7c:	83 c4 10             	add    esp,0x10
c0014a7f:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014a82:	75 8e                	jne    c0014a12 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014a84:	83 fe 0f             	cmp    esi,0xf
c0014a87:	7f 09                	jg     c0014a92 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014a89:	0f b6 b6 e0 e4 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd1b20]
c0014a90:	eb 80                	jmp    c0014a12 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014a92:	83 ec 0c             	sub    esp,0xc
c0014a95:	68 54 bb 02 c0       	push   0xc002bb54
c0014a9a:	e8 4e 5e 00 00       	call   c001a8ed <Krnl::panic(char const*)>
c0014a9f:	83 c4 10             	add    esp,0x10
c0014aa2:	e9 6b ff ff ff       	jmp    c0014a12 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014aa7:	90                   	nop

c0014aa8 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014aa8:	56                   	push   esi
c0014aa9:	53                   	push   ebx
c0014aaa:	52                   	push   edx
c0014aab:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014aaf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014ab3:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014ab8:	75 3a                	jne    c0014af4 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014aba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014abe:	8d 50 20             	lea    edx,[eax+0x20]
c0014ac1:	c1 e2 04             	shl    edx,0x4
c0014ac4:	8d 04 16             	lea    eax,[esi+edx*1]
c0014ac7:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014acb:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014ad1:	74 0b                	je     c0014ade <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014ad3:	83 c0 04             	add    eax,0x4
c0014ad6:	39 d0                	cmp    eax,edx
c0014ad8:	75 f1                	jne    c0014acb <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014ada:	58                   	pop    eax
c0014adb:	5b                   	pop    ebx
c0014adc:	5e                   	pop    esi
c0014add:	c3                   	ret    
c0014ade:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014ae8:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014af2:	eb df                	jmp    c0014ad3 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014af4:	83 ec 0c             	sub    esp,0xc
c0014af7:	56                   	push   esi
c0014af8:	e8 63 fa ff ff       	call   c0014560 <Device::getName()>
c0014afd:	83 c4 10             	add    esp,0x10
c0014b00:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014b03:	75 b5                	jne    c0014aba <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014b05:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014b0a:	7f 11                	jg     c0014b1d <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014b0c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014b10:	0f b6 80 e0 e4 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd1b20]
c0014b17:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014b1b:	eb 9d                	jmp    c0014aba <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014b1d:	83 ec 0c             	sub    esp,0xc
c0014b20:	68 54 bb 02 c0       	push   0xc002bb54
c0014b25:	e8 c3 5d 00 00       	call   c001a8ed <Krnl::panic(char const*)>
c0014b2a:	83 c4 10             	add    esp,0x10
c0014b2d:	eb 8b                	jmp    c0014aba <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014b2f <nmiHandler(regs*, void*)>:
c0014b2f:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c0014b34:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014b38:	e9 b5 a4 ff ff       	jmp    c000eff2 <Computer::handleNMI()>

c0014b3d <int_handler>:
c0014b3d:	55                   	push   ebp
c0014b3e:	57                   	push   edi
c0014b3f:	56                   	push   esi
c0014b40:	53                   	push   ebx
c0014b41:	83 ec 0c             	sub    esp,0xc
c0014b44:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014b48:	80 3d e4 1d 03 c0 00 	cmp    BYTE PTR ds:0xc0031de4,0x0
c0014b4f:	74 0b                	je     c0014b5c <int_handler+0x1f>
c0014b51:	fa                   	cli    
c0014b52:	f4                   	hlt    
c0014b53:	80 3d e4 1d 03 c0 00 	cmp    BYTE PTR ds:0xc0031de4,0x0
c0014b5a:	75 f5                	jne    c0014b51 <int_handler+0x14>
c0014b5c:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c0014b61:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014b64:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014b6a:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014b70:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014b73:	83 f8 17             	cmp    eax,0x17
c0014b76:	77 13                	ja     c0014b8b <int_handler+0x4e>
c0014b78:	83 ec 08             	sub    esp,0x8
c0014b7b:	8b 17                	mov    edx,DWORD PTR [edi]
c0014b7d:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014b80:	0f b6 c0             	movzx  eax,al
c0014b83:	50                   	push   eax
c0014b84:	57                   	push   edi
c0014b85:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014b88:	83 c4 10             	add    esp,0x10
c0014b8b:	83 c3 15             	add    ebx,0x15
c0014b8e:	c1 e3 04             	shl    ebx,0x4
c0014b91:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014b95:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014b9c:	31 db                	xor    ebx,ebx
c0014b9e:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014ba2:	85 c0                	test   eax,eax
c0014ba4:	74 13                	je     c0014bb9 <int_handler+0x7c>
c0014ba6:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014ba9:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014bad:	74 1c                	je     c0014bcb <int_handler+0x8e>
c0014baf:	83 ec 08             	sub    esp,0x8
c0014bb2:	52                   	push   edx
c0014bb3:	56                   	push   esi
c0014bb4:	ff d0                	call   eax
c0014bb6:	83 c4 10             	add    esp,0x10
c0014bb9:	43                   	inc    ebx
c0014bba:	83 fb 04             	cmp    ebx,0x4
c0014bbd:	75 df                	jne    c0014b9e <int_handler+0x61>
c0014bbf:	83 c4 0c             	add    esp,0xc
c0014bc2:	31 c0                	xor    eax,eax
c0014bc4:	5b                   	pop    ebx
c0014bc5:	31 d2                	xor    edx,edx
c0014bc7:	5e                   	pop    esi
c0014bc8:	5f                   	pop    edi
c0014bc9:	5d                   	pop    ebp
c0014bca:	c3                   	ret    
c0014bcb:	83 ec 08             	sub    esp,0x8
c0014bce:	52                   	push   edx
c0014bcf:	56                   	push   esi
c0014bd0:	ff d0                	call   eax
c0014bd2:	83 c4 10             	add    esp,0x10
c0014bd5:	83 c4 0c             	add    esp,0xc
c0014bd8:	5b                   	pop    ebx
c0014bd9:	5e                   	pop    esi
c0014bda:	5f                   	pop    edi
c0014bdb:	5d                   	pop    ebp
c0014bdc:	c3                   	ret    
c0014bdd:	90                   	nop

c0014bde <InterruptController::InterruptController(char const*)>:
c0014bde:	83 ec 1c             	sub    esp,0x1c
c0014be1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014be5:	83 ec 08             	sub    esp,0x8
c0014be8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014bec:	50                   	push   eax
c0014bed:	e8 72 f8 ff ff       	call   c0014464 <Device::Device(char const*)>
c0014bf2:	83 c4 10             	add    esp,0x10
c0014bf5:	ba 14 be 02 c0       	mov    edx,0xc002be14
c0014bfa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014bfe:	89 10                	mov    DWORD PTR [eax],edx
c0014c00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c04:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014c0e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014c16:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014c1e:	7f 5e                	jg     c0014c7e <InterruptController::InterruptController(char const*)+0xa0>
c0014c20:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014c28:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014c2d:	7f 49                	jg     c0014c78 <InterruptController::InterruptController(char const*)+0x9a>
c0014c2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c33:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014c37:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014c3e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014c42:	01 ca                	add    edx,ecx
c0014c44:	83 c2 54             	add    edx,0x54
c0014c47:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014c4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c53:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014c57:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014c5e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014c62:	01 ca                	add    edx,ecx
c0014c64:	81 c2 54 04 00 00    	add    edx,0x454
c0014c6a:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014c72:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014c76:	eb b0                	jmp    c0014c28 <InterruptController::InterruptController(char const*)+0x4a>
c0014c78:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014c7c:	eb 98                	jmp    c0014c16 <InterruptController::InterruptController(char const*)+0x38>
c0014c7e:	90                   	nop
c0014c7f:	83 c4 1c             	add    esp,0x1c
c0014c82:	c3                   	ret    
c0014c83:	90                   	nop

c0014c84 <InterruptController::~InterruptController()>:
c0014c84:	83 ec 0c             	sub    esp,0xc
c0014c87:	ba 14 be 02 c0       	mov    edx,0xc002be14
c0014c8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014c90:	89 10                	mov    DWORD PTR [eax],edx
c0014c92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014c96:	83 ec 0c             	sub    esp,0xc
c0014c99:	50                   	push   eax
c0014c9a:	e8 bb f4 ff ff       	call   c001415a <Device::~Device()>
c0014c9f:	83 c4 10             	add    esp,0x10
c0014ca2:	90                   	nop
c0014ca3:	83 c4 0c             	add    esp,0xc
c0014ca6:	c3                   	ret    
c0014ca7:	90                   	nop

c0014ca8 <InterruptController::~InterruptController()>:
c0014ca8:	83 ec 0c             	sub    esp,0xc
c0014cab:	83 ec 0c             	sub    esp,0xc
c0014cae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014cb2:	e8 cd ff ff ff       	call   c0014c84 <InterruptController::~InterruptController()>
c0014cb7:	83 c4 10             	add    esp,0x10
c0014cba:	83 ec 08             	sub    esp,0x8
c0014cbd:	68 58 21 00 00       	push   0x2158
c0014cc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014cc6:	e8 a8 e0 ff ff       	call   c0012d73 <operator delete(void*, unsigned long)>
c0014ccb:	83 c4 10             	add    esp,0x10
c0014cce:	83 c4 0c             	add    esp,0xc
c0014cd1:	c3                   	ret    

c0014cd2 <displayDebugInfo(regs*)>:
c0014cd2:	55                   	push   ebp
c0014cd3:	57                   	push   edi
c0014cd4:	56                   	push   esi
c0014cd5:	53                   	push   ebx
c0014cd6:	83 ec 24             	sub    esp,0x24
c0014cd9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014cdd:	0f 20 c2             	mov    edx,cr0
c0014ce0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014ce4:	0f 20 d7             	mov    edi,cr2
c0014ce7:	0f 20 de             	mov    esi,cr3
c0014cea:	0f 20 e5             	mov    ebp,cr4
c0014ced:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014cf0:	68 8e bb 02 c0       	push   0xc002bb8e
c0014cf5:	e8 59 e1 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0014cfa:	59                   	pop    ecx
c0014cfb:	58                   	pop    eax
c0014cfc:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014cff:	68 99 bb 02 c0       	push   0xc002bb99
c0014d04:	e8 4a e1 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0014d09:	58                   	pop    eax
c0014d0a:	5a                   	pop    edx
c0014d0b:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014d0e:	68 a4 bb 02 c0       	push   0xc002bba4
c0014d13:	e8 3b e1 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0014d18:	59                   	pop    ecx
c0014d19:	58                   	pop    eax
c0014d1a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014d1d:	68 af bb 02 c0       	push   0xc002bbaf
c0014d22:	e8 2c e1 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0014d27:	58                   	pop    eax
c0014d28:	5a                   	pop    edx
c0014d29:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014d2c:	68 ba bb 02 c0       	push   0xc002bbba
c0014d31:	e8 1d e1 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0014d36:	59                   	pop    ecx
c0014d37:	58                   	pop    eax
c0014d38:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014d3b:	68 c5 bb 02 c0       	push   0xc002bbc5
c0014d40:	e8 0e e1 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0014d45:	58                   	pop    eax
c0014d46:	5a                   	pop    edx
c0014d47:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014d4a:	68 d0 bb 02 c0       	push   0xc002bbd0
c0014d4f:	e8 ff e0 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0014d54:	59                   	pop    ecx
c0014d55:	58                   	pop    eax
c0014d56:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014d59:	68 db bb 02 c0       	push   0xc002bbdb
c0014d5e:	e8 f0 e0 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0014d63:	58                   	pop    eax
c0014d64:	5a                   	pop    edx
c0014d65:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014d68:	68 e6 bb 02 c0       	push   0xc002bbe6
c0014d6d:	e8 e1 e0 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0014d72:	59                   	pop    ecx
c0014d73:	58                   	pop    eax
c0014d74:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014d77:	68 f5 bb 02 c0       	push   0xc002bbf5
c0014d7c:	e8 d2 e0 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0014d81:	58                   	pop    eax
c0014d82:	5a                   	pop    edx
c0014d83:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014d86:	68 00 bc 02 c0       	push   0xc002bc00
c0014d8b:	e8 c3 e0 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0014d90:	59                   	pop    ecx
c0014d91:	58                   	pop    eax
c0014d92:	57                   	push   edi
c0014d93:	68 0b bc 02 c0       	push   0xc002bc0b
c0014d98:	e8 b6 e0 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0014d9d:	58                   	pop    eax
c0014d9e:	5a                   	pop    edx
c0014d9f:	56                   	push   esi
c0014da0:	68 16 bc 02 c0       	push   0xc002bc16
c0014da5:	e8 a9 e0 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0014daa:	59                   	pop    ecx
c0014dab:	a1 f0 27 03 c0       	mov    eax,ds:0xc00327f0
c0014db0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014db6:	e8 bb be ff ff       	call   c0010c76 <setActiveTerminal(VgaText*)>
c0014dbb:	58                   	pop    eax
c0014dbc:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014dbf:	5a                   	pop    edx
c0014dc0:	c1 e0 05             	shl    eax,0x5
c0014dc3:	05 40 e2 02 c0       	add    eax,0xc002e240
c0014dc8:	50                   	push   eax
c0014dc9:	a1 f0 27 03 c0       	mov    eax,ds:0xc00327f0
c0014dce:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014dd4:	e8 29 c2 ff ff       	call   c0011002 <VgaText::puts(char const*)>
c0014dd9:	59                   	pop    ecx
c0014dda:	58                   	pop    eax
c0014ddb:	a1 f0 27 03 c0       	mov    eax,ds:0xc00327f0
c0014de0:	68 21 bc 02 c0       	push   0xc002bc21
c0014de5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014deb:	e8 12 c2 ff ff       	call   c0011002 <VgaText::puts(char const*)>
c0014df0:	58                   	pop    eax
c0014df1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014df6:	5a                   	pop    edx
c0014df7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014dfa:	83 c0 0c             	add    eax,0xc
c0014dfd:	50                   	push   eax
c0014dfe:	a1 f0 27 03 c0       	mov    eax,ds:0xc00327f0
c0014e03:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e09:	e8 f4 c1 ff ff       	call   c0011002 <VgaText::puts(char const*)>
c0014e0e:	59                   	pop    ecx
c0014e0f:	58                   	pop    eax
c0014e10:	a1 f0 27 03 c0       	mov    eax,ds:0xc00327f0
c0014e15:	68 2a bc 02 c0       	push   0xc002bc2a
c0014e1a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e20:	e8 dd c1 ff ff       	call   c0011002 <VgaText::puts(char const*)>
c0014e25:	58                   	pop    eax
c0014e26:	a1 f0 27 03 c0       	mov    eax,ds:0xc00327f0
c0014e2b:	5a                   	pop    edx
c0014e2c:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014e2f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e35:	e8 ee c1 ff ff       	call   c0011028 <VgaText::putx(unsigned int)>
c0014e3a:	59                   	pop    ecx
c0014e3b:	58                   	pop    eax
c0014e3c:	a1 f0 27 03 c0       	mov    eax,ds:0xc00327f0
c0014e41:	68 32 bc 02 c0       	push   0xc002bc32
c0014e46:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e4c:	e8 b1 c1 ff ff       	call   c0011002 <VgaText::puts(char const*)>
c0014e51:	58                   	pop    eax
c0014e52:	a1 f0 27 03 c0       	mov    eax,ds:0xc00327f0
c0014e57:	5a                   	pop    edx
c0014e58:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014e5b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e61:	e8 c2 c1 ff ff       	call   c0011028 <VgaText::putx(unsigned int)>
c0014e66:	59                   	pop    ecx
c0014e67:	58                   	pop    eax
c0014e68:	a1 f0 27 03 c0       	mov    eax,ds:0xc00327f0
c0014e6d:	68 3a bc 02 c0       	push   0xc002bc3a
c0014e72:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e78:	e8 85 c1 ff ff       	call   c0011002 <VgaText::puts(char const*)>
c0014e7d:	58                   	pop    eax
c0014e7e:	a1 f0 27 03 c0       	mov    eax,ds:0xc00327f0
c0014e83:	5a                   	pop    edx
c0014e84:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014e87:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e8d:	e8 96 c1 ff ff       	call   c0011028 <VgaText::putx(unsigned int)>
c0014e92:	59                   	pop    ecx
c0014e93:	58                   	pop    eax
c0014e94:	a1 f0 27 03 c0       	mov    eax,ds:0xc00327f0
c0014e99:	68 42 bc 02 c0       	push   0xc002bc42
c0014e9e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ea4:	e8 59 c1 ff ff       	call   c0011002 <VgaText::puts(char const*)>
c0014ea9:	58                   	pop    eax
c0014eaa:	a1 f0 27 03 c0       	mov    eax,ds:0xc00327f0
c0014eaf:	5a                   	pop    edx
c0014eb0:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014eb3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014eb9:	e8 6a c1 ff ff       	call   c0011028 <VgaText::putx(unsigned int)>
c0014ebe:	59                   	pop    ecx
c0014ebf:	58                   	pop    eax
c0014ec0:	a1 f0 27 03 c0       	mov    eax,ds:0xc00327f0
c0014ec5:	68 4a bc 02 c0       	push   0xc002bc4a
c0014eca:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ed0:	e8 2d c1 ff ff       	call   c0011002 <VgaText::puts(char const*)>
c0014ed5:	58                   	pop    eax
c0014ed6:	a1 f0 27 03 c0       	mov    eax,ds:0xc00327f0
c0014edb:	5a                   	pop    edx
c0014edc:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014edf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ee5:	e8 3e c1 ff ff       	call   c0011028 <VgaText::putx(unsigned int)>
c0014eea:	59                   	pop    ecx
c0014eeb:	58                   	pop    eax
c0014eec:	a1 f0 27 03 c0       	mov    eax,ds:0xc00327f0
c0014ef1:	68 52 bc 02 c0       	push   0xc002bc52
c0014ef6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014efc:	e8 01 c1 ff ff       	call   c0011002 <VgaText::puts(char const*)>
c0014f01:	58                   	pop    eax
c0014f02:	a1 f0 27 03 c0       	mov    eax,ds:0xc00327f0
c0014f07:	5a                   	pop    edx
c0014f08:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014f0b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f11:	e8 12 c1 ff ff       	call   c0011028 <VgaText::putx(unsigned int)>
c0014f16:	59                   	pop    ecx
c0014f17:	58                   	pop    eax
c0014f18:	a1 f0 27 03 c0       	mov    eax,ds:0xc00327f0
c0014f1d:	68 5a bc 02 c0       	push   0xc002bc5a
c0014f22:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f28:	e8 d5 c0 ff ff       	call   c0011002 <VgaText::puts(char const*)>
c0014f2d:	58                   	pop    eax
c0014f2e:	a1 f0 27 03 c0       	mov    eax,ds:0xc00327f0
c0014f33:	5a                   	pop    edx
c0014f34:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014f38:	52                   	push   edx
c0014f39:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f3f:	e8 e4 c0 ff ff       	call   c0011028 <VgaText::putx(unsigned int)>
c0014f44:	59                   	pop    ecx
c0014f45:	58                   	pop    eax
c0014f46:	a1 f0 27 03 c0       	mov    eax,ds:0xc00327f0
c0014f4b:	68 63 bc 02 c0       	push   0xc002bc63
c0014f50:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f56:	e8 a7 c0 ff ff       	call   c0011002 <VgaText::puts(char const*)>
c0014f5b:	58                   	pop    eax
c0014f5c:	a1 f0 27 03 c0       	mov    eax,ds:0xc00327f0
c0014f61:	5a                   	pop    edx
c0014f62:	57                   	push   edi
c0014f63:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f69:	e8 ba c0 ff ff       	call   c0011028 <VgaText::putx(unsigned int)>
c0014f6e:	59                   	pop    ecx
c0014f6f:	a1 f0 27 03 c0       	mov    eax,ds:0xc00327f0
c0014f74:	5f                   	pop    edi
c0014f75:	68 6b bc 02 c0       	push   0xc002bc6b
c0014f7a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f80:	e8 7d c0 ff ff       	call   c0011002 <VgaText::puts(char const*)>
c0014f85:	58                   	pop    eax
c0014f86:	a1 f0 27 03 c0       	mov    eax,ds:0xc00327f0
c0014f8b:	5a                   	pop    edx
c0014f8c:	56                   	push   esi
c0014f8d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f93:	e8 90 c0 ff ff       	call   c0011028 <VgaText::putx(unsigned int)>
c0014f98:	59                   	pop    ecx
c0014f99:	a1 f0 27 03 c0       	mov    eax,ds:0xc00327f0
c0014f9e:	5e                   	pop    esi
c0014f9f:	68 73 bc 02 c0       	push   0xc002bc73
c0014fa4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014faa:	e8 53 c0 ff ff       	call   c0011002 <VgaText::puts(char const*)>
c0014faf:	5f                   	pop    edi
c0014fb0:	58                   	pop    eax
c0014fb1:	a1 f0 27 03 c0       	mov    eax,ds:0xc00327f0
c0014fb6:	55                   	push   ebp
c0014fb7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fbd:	e8 66 c0 ff ff       	call   c0011028 <VgaText::putx(unsigned int)>
c0014fc2:	58                   	pop    eax
c0014fc3:	a1 f0 27 03 c0       	mov    eax,ds:0xc00327f0
c0014fc8:	5a                   	pop    edx
c0014fc9:	68 7b bc 02 c0       	push   0xc002bc7b
c0014fce:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fd4:	e8 29 c0 ff ff       	call   c0011002 <VgaText::puts(char const*)>
c0014fd9:	0f 21 c0             	mov    eax,db0
c0014fdc:	59                   	pop    ecx
c0014fdd:	5e                   	pop    esi
c0014fde:	50                   	push   eax
c0014fdf:	a1 f0 27 03 c0       	mov    eax,ds:0xc00327f0
c0014fe4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fea:	e8 39 c0 ff ff       	call   c0011028 <VgaText::putx(unsigned int)>
c0014fef:	5f                   	pop    edi
c0014ff0:	a1 f0 27 03 c0       	mov    eax,ds:0xc00327f0
c0014ff5:	5d                   	pop    ebp
c0014ff6:	68 84 bc 02 c0       	push   0xc002bc84
c0014ffb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015001:	e8 fc bf ff ff       	call   c0011002 <VgaText::puts(char const*)>
c0015006:	0f 21 c8             	mov    eax,db1
c0015009:	5a                   	pop    edx
c001500a:	59                   	pop    ecx
c001500b:	50                   	push   eax
c001500c:	a1 f0 27 03 c0       	mov    eax,ds:0xc00327f0
c0015011:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015017:	e8 0c c0 ff ff       	call   c0011028 <VgaText::putx(unsigned int)>
c001501c:	5e                   	pop    esi
c001501d:	a1 f0 27 03 c0       	mov    eax,ds:0xc00327f0
c0015022:	5f                   	pop    edi
c0015023:	68 8c bc 02 c0       	push   0xc002bc8c
c0015028:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001502e:	e8 cf bf ff ff       	call   c0011002 <VgaText::puts(char const*)>
c0015033:	0f 21 d0             	mov    eax,db2
c0015036:	5d                   	pop    ebp
c0015037:	5a                   	pop    edx
c0015038:	50                   	push   eax
c0015039:	a1 f0 27 03 c0       	mov    eax,ds:0xc00327f0
c001503e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015044:	e8 df bf ff ff       	call   c0011028 <VgaText::putx(unsigned int)>
c0015049:	59                   	pop    ecx
c001504a:	a1 f0 27 03 c0       	mov    eax,ds:0xc00327f0
c001504f:	5e                   	pop    esi
c0015050:	68 94 bc 02 c0       	push   0xc002bc94
c0015055:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001505b:	e8 a2 bf ff ff       	call   c0011002 <VgaText::puts(char const*)>
c0015060:	0f 21 d8             	mov    eax,db3
c0015063:	5f                   	pop    edi
c0015064:	5d                   	pop    ebp
c0015065:	50                   	push   eax
c0015066:	a1 f0 27 03 c0       	mov    eax,ds:0xc00327f0
c001506b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015071:	e8 b2 bf ff ff       	call   c0011028 <VgaText::putx(unsigned int)>
c0015076:	58                   	pop    eax
c0015077:	a1 f0 27 03 c0       	mov    eax,ds:0xc00327f0
c001507c:	5a                   	pop    edx
c001507d:	68 9c bc 02 c0       	push   0xc002bc9c
c0015082:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015088:	e8 75 bf ff ff       	call   c0011002 <VgaText::puts(char const*)>
c001508d:	0f 21 f0             	mov    eax,db6
c0015090:	59                   	pop    ecx
c0015091:	5e                   	pop    esi
c0015092:	50                   	push   eax
c0015093:	a1 f0 27 03 c0       	mov    eax,ds:0xc00327f0
c0015098:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001509e:	e8 85 bf ff ff       	call   c0011028 <VgaText::putx(unsigned int)>
c00150a3:	5f                   	pop    edi
c00150a4:	a1 f0 27 03 c0       	mov    eax,ds:0xc00327f0
c00150a9:	5d                   	pop    ebp
c00150aa:	68 a4 bc 02 c0       	push   0xc002bca4
c00150af:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150b5:	e8 48 bf ff ff       	call   c0011002 <VgaText::puts(char const*)>
c00150ba:	0f 21 f8             	mov    eax,db7
c00150bd:	5a                   	pop    edx
c00150be:	59                   	pop    ecx
c00150bf:	50                   	push   eax
c00150c0:	a1 f0 27 03 c0       	mov    eax,ds:0xc00327f0
c00150c5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150cb:	e8 58 bf ff ff       	call   c0011028 <VgaText::putx(unsigned int)>
c00150d0:	5e                   	pop    esi
c00150d1:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00150d4:	e8 97 8b 00 00       	call   c001dc70 <Thr::getDriverNameFromAddress(unsigned long)>
c00150d9:	83 c4 10             	add    esp,0x10
c00150dc:	85 c0                	test   eax,eax
c00150de:	74 7d                	je     c001515d <displayDebugInfo(regs*)+0x48b>
c00150e0:	89 c6                	mov    esi,eax
c00150e2:	50                   	push   eax
c00150e3:	50                   	push   eax
c00150e4:	56                   	push   esi
c00150e5:	68 ac bc 02 c0       	push   0xc002bcac
c00150ea:	e8 64 dd ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c00150ef:	5a                   	pop    edx
c00150f0:	a1 f0 27 03 c0       	mov    eax,ds:0xc00327f0
c00150f5:	59                   	pop    ecx
c00150f6:	68 ba bc 02 c0       	push   0xc002bcba
c00150fb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015101:	e8 fc be ff ff       	call   c0011002 <VgaText::puts(char const*)>
c0015106:	5f                   	pop    edi
c0015107:	a1 f0 27 03 c0       	mov    eax,ds:0xc00327f0
c001510c:	5d                   	pop    ebp
c001510d:	56                   	push   esi
c001510e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015114:	e8 e9 be ff ff       	call   c0011002 <VgaText::puts(char const*)>
c0015119:	58                   	pop    eax
c001511a:	a1 f0 27 03 c0       	mov    eax,ds:0xc00327f0
c001511f:	5a                   	pop    edx
c0015120:	68 c6 bc 02 c0       	push   0xc002bcc6
c0015125:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001512b:	e8 d2 be ff ff       	call   c0011002 <VgaText::puts(char const*)>
c0015130:	59                   	pop    ecx
c0015131:	a1 f0 27 03 c0       	mov    eax,ds:0xc00327f0
c0015136:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c001513c:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001513f:	e8 63 8b 00 00       	call   c001dca7 <Thr::getDriverOffsetFromAddress(unsigned long)>
c0015144:	5b                   	pop    ebx
c0015145:	5d                   	pop    ebp
c0015146:	50                   	push   eax
c0015147:	57                   	push   edi
c0015148:	e8 db be ff ff       	call   c0011028 <VgaText::putx(unsigned int)>
c001514d:	58                   	pop    eax
c001514e:	5a                   	pop    edx
c001514f:	56                   	push   esi
c0015150:	68 d2 bc 02 c0       	push   0xc002bcd2
c0015155:	e8 f9 dc ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001515a:	83 c4 10             	add    esp,0x10
c001515d:	fa                   	cli    
c001515e:	f4                   	hlt    
c001515f:	eb fe                	jmp    c001515f <displayDebugInfo(regs*)+0x48d>

c0015161 <x87EmulHandler(regs*, void*)>:
c0015161:	83 ec 0c             	sub    esp,0xc
c0015164:	0f 20 c2             	mov    edx,cr0
c0015167:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001516c:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c0015170:	75 4b                	jne    c00151bd <x87EmulHandler(regs*, void*)+0x5c>
c0015172:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c0015177:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c001517d:	85 c0                	test   eax,eax
c001517f:	74 05                	je     c0015186 <x87EmulHandler(regs*, void*)+0x25>
c0015181:	83 e2 08             	and    edx,0x8
c0015184:	75 17                	jne    c001519d <x87EmulHandler(regs*, void*)+0x3c>
c0015186:	83 ec 0c             	sub    esp,0xc
c0015189:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001518d:	e8 4e b1 00 00       	call   c00202e0 <Vm::x87Handler(regs*)>
c0015192:	83 c4 10             	add    esp,0x10
c0015195:	84 c0                	test   al,al
c0015197:	74 24                	je     c00151bd <x87EmulHandler(regs*, void*)+0x5c>
c0015199:	83 c4 0c             	add    esp,0xc
c001519c:	c3                   	ret    
c001519d:	83 ec 0c             	sub    esp,0xc
c00151a0:	68 f8 bc 02 c0       	push   0xc002bcf8
c00151a5:	e8 a9 dc ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c00151aa:	0f 06                	clts   
c00151ac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00151b1:	83 c4 10             	add    esp,0x10
c00151b4:	a3 28 f4 02 c0       	mov    ds:0xc002f428,eax
c00151b9:	83 c4 0c             	add    esp,0xc
c00151bc:	c3                   	ret    
c00151bd:	83 ec 0c             	sub    esp,0xc
c00151c0:	68 e2 bc 02 c0       	push   0xc002bce2
c00151c5:	e8 89 dc ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c00151ca:	5a                   	pop    edx
c00151cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00151cf:	e8 fe fa ff ff       	call   c0014cd2 <displayDebugInfo(regs*)>

c00151d4 <gpFault(regs*, void*)>:
c00151d4:	53                   	push   ebx
c00151d5:	83 ec 14             	sub    esp,0x14
c00151d8:	c7 05 24 f4 02 c0 5d f6 01 c0 	mov    DWORD PTR ds:0xc002f424,0xc001f65d
c00151e2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00151e6:	53                   	push   ebx
c00151e7:	e8 71 a4 00 00       	call   c001f65d <Vm::faultHandler(regs*)>
c00151ec:	83 c4 10             	add    esp,0x10
c00151ef:	84 c0                	test   al,al
c00151f1:	74 05                	je     c00151f8 <gpFault(regs*, void*)+0x24>
c00151f3:	83 c4 08             	add    esp,0x8
c00151f6:	5b                   	pop    ebx
c00151f7:	c3                   	ret    
c00151f8:	83 ec 0c             	sub    esp,0xc
c00151fb:	68 05 bd 02 c0       	push   0xc002bd05
c0015200:	e8 4e dc ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0015205:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015208:	e8 c5 fa ff ff       	call   c0014cd2 <displayDebugInfo(regs*)>

c001520d <pgFault(regs*, void*)>:
c001520d:	83 ec 14             	sub    esp,0x14
c0015210:	0f 20 d0             	mov    eax,cr2
c0015213:	50                   	push   eax
c0015214:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015219:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001521c:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0015222:	e8 49 d8 ff ff       	call   c0012a70 <VAS::tryLoadBackOffDisk(unsigned long)>
c0015227:	83 c4 10             	add    esp,0x10
c001522a:	84 c0                	test   al,al
c001522c:	74 04                	je     c0015232 <pgFault(regs*, void*)+0x25>
c001522e:	83 c4 0c             	add    esp,0xc
c0015231:	c3                   	ret    
c0015232:	83 ec 0c             	sub    esp,0xc
c0015235:	68 20 bd 02 c0       	push   0xc002bd20
c001523a:	e8 14 dc ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001523f:	58                   	pop    eax
c0015240:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015244:	e8 89 fa ff ff       	call   c0014cd2 <displayDebugInfo(regs*)>

c0015249 <otherISRHandler(regs*, void*)>:
c0015249:	53                   	push   ebx
c001524a:	83 ec 0c             	sub    esp,0xc
c001524d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015251:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0015254:	50                   	push   eax
c0015255:	50                   	push   eax
c0015256:	68 2d bd 02 c0       	push   0xc002bd2d
c001525b:	e8 f3 db ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0015260:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015263:	e8 6a fa ff ff       	call   c0014cd2 <displayDebugInfo(regs*)>

c0015268 <opcodeFault(regs*, void*)>:
c0015268:	55                   	push   ebp
c0015269:	89 e5                	mov    ebp,esp
c001526b:	56                   	push   esi
c001526c:	53                   	push   ebx
c001526d:	83 ec 40             	sub    esp,0x40
c0015270:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c0015275:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001527b:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0015281:	84 c0                	test   al,al
c0015283:	74 24                	je     c00152a9 <opcodeFault(regs*, void*)+0x41>
c0015285:	83 ec 0c             	sub    esp,0xc
c0015288:	68 4c bd 02 c0       	push   0xc002bd4c
c001528d:	e8 c1 db ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0015292:	83 c4 10             	add    esp,0x10
c0015295:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015298:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001529b:	8d 50 19             	lea    edx,[eax+0x19]
c001529e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152a1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00152a4:	e9 d5 05 00 00       	jmp    c001587e <opcodeFault(regs*, void*)+0x616>
c00152a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152ac:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152af:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00152b2:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c00152b6:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c00152ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152bd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152c0:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00152c3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152c6:	8a 00                	mov    al,BYTE PTR [eax]
c00152c8:	3c f0                	cmp    al,0xf0
c00152ca:	75 17                	jne    c00152e3 <opcodeFault(regs*, void*)+0x7b>
c00152cc:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00152cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152d2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152d5:	8d 50 01             	lea    edx,[eax+0x1]
c00152d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152db:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00152de:	e9 da 00 00 00       	jmp    c00153bd <opcodeFault(regs*, void*)+0x155>
c00152e3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152e6:	8a 00                	mov    al,BYTE PTR [eax]
c00152e8:	3c f2                	cmp    al,0xf2
c00152ea:	74 09                	je     c00152f5 <opcodeFault(regs*, void*)+0x8d>
c00152ec:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152ef:	8a 00                	mov    al,BYTE PTR [eax]
c00152f1:	3c f3                	cmp    al,0xf3
c00152f3:	75 1b                	jne    c0015310 <opcodeFault(regs*, void*)+0xa8>
c00152f5:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00152f9:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00152fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152ff:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015302:	8d 50 01             	lea    edx,[eax+0x1]
c0015305:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015308:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001530b:	e9 ad 00 00 00       	jmp    c00153bd <opcodeFault(regs*, void*)+0x155>
c0015310:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015313:	8a 00                	mov    al,BYTE PTR [eax]
c0015315:	3c 66                	cmp    al,0x66
c0015317:	75 1f                	jne    c0015338 <opcodeFault(regs*, void*)+0xd0>
c0015319:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001531d:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0015321:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015324:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015327:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001532a:	8d 50 01             	lea    edx,[eax+0x1]
c001532d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015330:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015333:	e9 85 00 00 00       	jmp    c00153bd <opcodeFault(regs*, void*)+0x155>
c0015338:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001533b:	8a 00                	mov    al,BYTE PTR [eax]
c001533d:	3c 67                	cmp    al,0x67
c001533f:	75 18                	jne    c0015359 <opcodeFault(regs*, void*)+0xf1>
c0015341:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015345:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015348:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001534b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001534e:	8d 50 01             	lea    edx,[eax+0x1]
c0015351:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015354:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015357:	eb 64                	jmp    c00153bd <opcodeFault(regs*, void*)+0x155>
c0015359:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001535c:	8a 00                	mov    al,BYTE PTR [eax]
c001535e:	3c 2e                	cmp    al,0x2e
c0015360:	74 09                	je     c001536b <opcodeFault(regs*, void*)+0x103>
c0015362:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015365:	8a 00                	mov    al,BYTE PTR [eax]
c0015367:	3c 3e                	cmp    al,0x3e
c0015369:	75 18                	jne    c0015383 <opcodeFault(regs*, void*)+0x11b>
c001536b:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001536f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015372:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015375:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015378:	8d 50 01             	lea    edx,[eax+0x1]
c001537b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001537e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015381:	eb 3a                	jmp    c00153bd <opcodeFault(regs*, void*)+0x155>
c0015383:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015386:	8a 00                	mov    al,BYTE PTR [eax]
c0015388:	3c 36                	cmp    al,0x36
c001538a:	74 1b                	je     c00153a7 <opcodeFault(regs*, void*)+0x13f>
c001538c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001538f:	8a 00                	mov    al,BYTE PTR [eax]
c0015391:	3c 26                	cmp    al,0x26
c0015393:	74 12                	je     c00153a7 <opcodeFault(regs*, void*)+0x13f>
c0015395:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015398:	8a 00                	mov    al,BYTE PTR [eax]
c001539a:	3c 64                	cmp    al,0x64
c001539c:	74 09                	je     c00153a7 <opcodeFault(regs*, void*)+0x13f>
c001539e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153a1:	8a 00                	mov    al,BYTE PTR [eax]
c00153a3:	3c 65                	cmp    al,0x65
c00153a5:	75 16                	jne    c00153bd <opcodeFault(regs*, void*)+0x155>
c00153a7:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00153ab:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153b1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153b4:	8d 50 01             	lea    edx,[eax+0x1]
c00153b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153ba:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153bd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153c0:	8a 00                	mov    al,BYTE PTR [eax]
c00153c2:	3c 0f                	cmp    al,0xf
c00153c4:	0f 85 ad 00 00 00    	jne    c0015477 <opcodeFault(regs*, void*)+0x20f>
c00153ca:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153cd:	40                   	inc    eax
c00153ce:	8a 00                	mov    al,BYTE PTR [eax]
c00153d0:	3c c2                	cmp    al,0xc2
c00153d2:	74 0e                	je     c00153e2 <opcodeFault(regs*, void*)+0x17a>
c00153d4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153d7:	40                   	inc    eax
c00153d8:	8a 00                	mov    al,BYTE PTR [eax]
c00153da:	3c c3                	cmp    al,0xc3
c00153dc:	0f 85 95 00 00 00    	jne    c0015477 <opcodeFault(regs*, void*)+0x20f>
c00153e2:	83 ec 0c             	sub    esp,0xc
c00153e5:	68 6f bd 02 c0       	push   0xc002bd6f
c00153ea:	e8 64 da ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c00153ef:	83 c4 10             	add    esp,0x10
c00153f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153f5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153f8:	8d 50 01             	lea    edx,[eax+0x1]
c00153fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153fe:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015401:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015404:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015407:	8a 00                	mov    al,BYTE PTR [eax]
c0015409:	8d 50 fe             	lea    edx,[eax-0x2]
c001540c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001540f:	88 10                	mov    BYTE PTR [eax],dl
c0015411:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0015414:	50                   	push   eax
c0015415:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0015418:	50                   	push   eax
c0015419:	8d 45 c4             	lea    eax,[ebp-0x3c]
c001541c:	50                   	push   eax
c001541d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015420:	e8 95 4b 00 00       	call   c0019fba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0015425:	83 c4 10             	add    esp,0x10
c0015428:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001542b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001542e:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0015431:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0015434:	01 d0                	add    eax,edx
c0015436:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0015439:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001543c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001543f:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0015442:	48                   	dec    eax
c0015443:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0015446:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015449:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001544c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001544f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015452:	83 ec 04             	sub    esp,0x4
c0015455:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015458:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c001545b:	50                   	push   eax
c001545c:	e8 53 ad fe ff       	call   c00001b4 <voodooXADD>
c0015461:	83 c4 10             	add    esp,0x10
c0015464:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0015467:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001546a:	01 c2                	add    edx,eax
c001546c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001546f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015472:	e9 07 04 00 00       	jmp    c001587e <opcodeFault(regs*, void*)+0x616>
c0015477:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001547a:	8a 00                	mov    al,BYTE PTR [eax]
c001547c:	3c 0f                	cmp    al,0xf
c001547e:	0f 85 8b 01 00 00    	jne    c001560f <opcodeFault(regs*, void*)+0x3a7>
c0015484:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015487:	40                   	inc    eax
c0015488:	8a 00                	mov    al,BYTE PTR [eax]
c001548a:	3c c7                	cmp    al,0xc7
c001548c:	0f 86 7d 01 00 00    	jbe    c001560f <opcodeFault(regs*, void*)+0x3a7>
c0015492:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015495:	40                   	inc    eax
c0015496:	8a 00                	mov    al,BYTE PTR [eax]
c0015498:	3c cf                	cmp    al,0xcf
c001549a:	0f 87 6f 01 00 00    	ja     c001560f <opcodeFault(regs*, void*)+0x3a7>
c00154a0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154a3:	40                   	inc    eax
c00154a4:	8a 00                	mov    al,BYTE PTR [eax]
c00154a6:	83 c0 38             	add    eax,0x38
c00154a9:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c00154ac:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c00154b0:	75 0b                	jne    c00154bd <opcodeFault(regs*, void*)+0x255>
c00154b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154b5:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00154b8:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00154bb:	eb 75                	jmp    c0015532 <opcodeFault(regs*, void*)+0x2ca>
c00154bd:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00154c1:	75 0b                	jne    c00154ce <opcodeFault(regs*, void*)+0x266>
c00154c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154c6:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00154c9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00154cc:	eb 64                	jmp    c0015532 <opcodeFault(regs*, void*)+0x2ca>
c00154ce:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00154d2:	75 0b                	jne    c00154df <opcodeFault(regs*, void*)+0x277>
c00154d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154d7:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00154da:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00154dd:	eb 53                	jmp    c0015532 <opcodeFault(regs*, void*)+0x2ca>
c00154df:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00154e3:	75 0b                	jne    c00154f0 <opcodeFault(regs*, void*)+0x288>
c00154e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154e8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00154eb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00154ee:	eb 42                	jmp    c0015532 <opcodeFault(regs*, void*)+0x2ca>
c00154f0:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00154f4:	75 0b                	jne    c0015501 <opcodeFault(regs*, void*)+0x299>
c00154f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154f9:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00154fc:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00154ff:	eb 31                	jmp    c0015532 <opcodeFault(regs*, void*)+0x2ca>
c0015501:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0015505:	75 0b                	jne    c0015512 <opcodeFault(regs*, void*)+0x2aa>
c0015507:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001550a:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001550d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015510:	eb 20                	jmp    c0015532 <opcodeFault(regs*, void*)+0x2ca>
c0015512:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0015516:	75 0b                	jne    c0015523 <opcodeFault(regs*, void*)+0x2bb>
c0015518:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001551b:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001551e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015521:	eb 0f                	jmp    c0015532 <opcodeFault(regs*, void*)+0x2ca>
c0015523:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0015527:	75 09                	jne    c0015532 <opcodeFault(regs*, void*)+0x2ca>
c0015529:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001552c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001552f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015532:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0015536:	74 10                	je     c0015548 <opcodeFault(regs*, void*)+0x2e0>
c0015538:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c001553f:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0015546:	eb 2d                	jmp    c0015575 <opcodeFault(regs*, void*)+0x30d>
c0015548:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001554b:	c1 e0 18             	shl    eax,0x18
c001554e:	89 c2                	mov    edx,eax
c0015550:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015553:	c1 e0 08             	shl    eax,0x8
c0015556:	25 00 00 ff 00       	and    eax,0xff0000
c001555b:	09 c2                	or     edx,eax
c001555d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015560:	c1 e8 08             	shr    eax,0x8
c0015563:	25 00 ff 00 00       	and    eax,0xff00
c0015568:	09 c2                	or     edx,eax
c001556a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001556d:	c1 e8 18             	shr    eax,0x18
c0015570:	09 d0                	or     eax,edx
c0015572:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015575:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0015579:	75 0b                	jne    c0015586 <opcodeFault(regs*, void*)+0x31e>
c001557b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001557e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015581:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015584:	eb 75                	jmp    c00155fb <opcodeFault(regs*, void*)+0x393>
c0015586:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001558a:	75 0b                	jne    c0015597 <opcodeFault(regs*, void*)+0x32f>
c001558c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001558f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015592:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0015595:	eb 64                	jmp    c00155fb <opcodeFault(regs*, void*)+0x393>
c0015597:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c001559b:	75 0b                	jne    c00155a8 <opcodeFault(regs*, void*)+0x340>
c001559d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155a0:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155a3:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00155a6:	eb 53                	jmp    c00155fb <opcodeFault(regs*, void*)+0x393>
c00155a8:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00155ac:	75 0b                	jne    c00155b9 <opcodeFault(regs*, void*)+0x351>
c00155ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155b1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155b4:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00155b7:	eb 42                	jmp    c00155fb <opcodeFault(regs*, void*)+0x393>
c00155b9:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00155bd:	75 0b                	jne    c00155ca <opcodeFault(regs*, void*)+0x362>
c00155bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155c2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155c5:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c00155c8:	eb 31                	jmp    c00155fb <opcodeFault(regs*, void*)+0x393>
c00155ca:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00155ce:	75 0b                	jne    c00155db <opcodeFault(regs*, void*)+0x373>
c00155d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155d3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155d6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00155d9:	eb 20                	jmp    c00155fb <opcodeFault(regs*, void*)+0x393>
c00155db:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00155df:	75 0b                	jne    c00155ec <opcodeFault(regs*, void*)+0x384>
c00155e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155e4:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155e7:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00155ea:	eb 0f                	jmp    c00155fb <opcodeFault(regs*, void*)+0x393>
c00155ec:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00155f0:	75 09                	jne    c00155fb <opcodeFault(regs*, void*)+0x393>
c00155f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155f5:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155f8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00155fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155fe:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015601:	8d 50 02             	lea    edx,[eax+0x2]
c0015604:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015607:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001560a:	e9 6f 02 00 00       	jmp    c001587e <opcodeFault(regs*, void*)+0x616>
c001560f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015612:	8a 00                	mov    al,BYTE PTR [eax]
c0015614:	3c 0f                	cmp    al,0xf
c0015616:	0f 85 8d 01 00 00    	jne    c00157a9 <opcodeFault(regs*, void*)+0x541>
c001561c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001561f:	40                   	inc    eax
c0015620:	8a 00                	mov    al,BYTE PTR [eax]
c0015622:	3c c7                	cmp    al,0xc7
c0015624:	0f 85 7f 01 00 00    	jne    c00157a9 <opcodeFault(regs*, void*)+0x541>
c001562a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001562d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015630:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015633:	8d 50 01             	lea    edx,[eax+0x1]
c0015636:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015639:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001563c:	8d 45 ba             	lea    eax,[ebp-0x46]
c001563f:	50                   	push   eax
c0015640:	8d 45 bb             	lea    eax,[ebp-0x45]
c0015643:	50                   	push   eax
c0015644:	8d 45 bc             	lea    eax,[ebp-0x44]
c0015647:	50                   	push   eax
c0015648:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001564b:	e8 6a 49 00 00       	call   c0019fba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0015650:	83 c4 10             	add    esp,0x10
c0015653:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0015656:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0015659:	83 f0 01             	xor    eax,0x1
c001565c:	84 c0                	test   al,al
c001565e:	0f 84 45 01 00 00    	je     c00157a9 <opcodeFault(regs*, void*)+0x541>
c0015664:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0015667:	3c 01                	cmp    al,0x1
c0015669:	0f 85 3a 01 00 00    	jne    c00157a9 <opcodeFault(regs*, void*)+0x541>
c001566f:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0015672:	83 f0 01             	xor    eax,0x1
c0015675:	84 c0                	test   al,al
c0015677:	0f 84 2c 01 00 00    	je     c00157a9 <opcodeFault(regs*, void*)+0x541>
c001567d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015680:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015683:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015686:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c001568d:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015690:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015693:	89 c2                	mov    edx,eax
c0015695:	b8 00 00 00 00       	mov    eax,0x0
c001569a:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001569d:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00156a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156a3:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00156a6:	ba 00 00 00 00       	mov    edx,0x0
c00156ab:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c00156ae:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c00156b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156b4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00156b7:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00156ba:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c00156c1:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00156c4:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00156c7:	89 c2                	mov    edx,eax
c00156c9:	b8 00 00 00 00       	mov    eax,0x0
c00156ce:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00156d1:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c00156d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156d7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00156da:	ba 00 00 00 00       	mov    edx,0x0
c00156df:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c00156e2:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c00156e5:	fa                   	cli    
c00156e6:	a1 c8 27 03 c0       	mov    eax,ds:0xc00327c8
c00156eb:	40                   	inc    eax
c00156ec:	a3 c8 27 03 c0       	mov    ds:0xc00327c8,eax
c00156f1:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00156f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00156f7:	8b 00                	mov    eax,DWORD PTR [eax]
c00156f9:	89 c1                	mov    ecx,eax
c00156fb:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c00156fe:	89 cb                	mov    ebx,ecx
c0015700:	89 d0                	mov    eax,edx
c0015702:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0015705:	89 c6                	mov    esi,eax
c0015707:	89 f0                	mov    eax,esi
c0015709:	09 d8                	or     eax,ebx
c001570b:	85 c0                	test   eax,eax
c001570d:	75 21                	jne    c0015730 <opcodeFault(regs*, void*)+0x4c8>
c001570f:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0015712:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015715:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015718:	89 01                	mov    DWORD PTR [ecx],eax
c001571a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001571d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015720:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015723:	83 c8 40             	or     eax,0x40
c0015726:	89 c2                	mov    edx,eax
c0015728:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001572b:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001572e:	eb 3e                	jmp    c001576e <opcodeFault(regs*, void*)+0x506>
c0015730:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015733:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015736:	8b 00                	mov    eax,DWORD PTR [eax]
c0015738:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001573b:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c001573e:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0015741:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015744:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015747:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001574a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001574d:	89 d0                	mov    eax,edx
c001574f:	31 d2                	xor    edx,edx
c0015751:	89 c3                	mov    ebx,eax
c0015753:	89 d6                	mov    esi,edx
c0015755:	89 da                	mov    edx,ebx
c0015757:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001575a:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c001575d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015760:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015763:	83 e0 bf             	and    eax,0xffffffbf
c0015766:	89 c2                	mov    edx,eax
c0015768:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001576b:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001576e:	a1 c8 27 03 c0       	mov    eax,ds:0xc00327c8
c0015773:	48                   	dec    eax
c0015774:	a3 c8 27 03 c0       	mov    ds:0xc00327c8,eax
c0015779:	a1 c8 27 03 c0       	mov    eax,ds:0xc00327c8
c001577e:	85 c0                	test   eax,eax
c0015780:	75 01                	jne    c0015783 <opcodeFault(regs*, void*)+0x51b>
c0015782:	fb                   	sti    
c0015783:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015786:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015789:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c001578c:	01 c2                	add    edx,eax
c001578e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015791:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015794:	83 ec 0c             	sub    esp,0xc
c0015797:	68 7e bd 02 c0       	push   0xc002bd7e
c001579c:	e8 b2 d6 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c00157a1:	83 c4 10             	add    esp,0x10
c00157a4:	e9 d5 00 00 00       	jmp    c001587e <opcodeFault(regs*, void*)+0x616>
c00157a9:	83 ec 0c             	sub    esp,0xc
c00157ac:	68 91 bd 02 c0       	push   0xc002bd91
c00157b1:	e8 9d d6 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c00157b6:	83 c4 10             	add    esp,0x10
c00157b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157bc:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00157bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157c2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00157c5:	c1 e0 04             	shl    eax,0x4
c00157c8:	01 d0                	add    eax,edx
c00157ca:	83 c0 03             	add    eax,0x3
c00157cd:	8a 00                	mov    al,BYTE PTR [eax]
c00157cf:	0f b6 d8             	movzx  ebx,al
c00157d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157d5:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00157d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157db:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00157de:	c1 e0 04             	shl    eax,0x4
c00157e1:	01 d0                	add    eax,edx
c00157e3:	83 c0 02             	add    eax,0x2
c00157e6:	8a 00                	mov    al,BYTE PTR [eax]
c00157e8:	0f b6 c8             	movzx  ecx,al
c00157eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157ee:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00157f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157f4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00157f7:	c1 e0 04             	shl    eax,0x4
c00157fa:	01 d0                	add    eax,edx
c00157fc:	40                   	inc    eax
c00157fd:	8a 00                	mov    al,BYTE PTR [eax]
c00157ff:	0f b6 d0             	movzx  edx,al
c0015802:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015805:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0015808:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001580b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001580e:	c1 e0 04             	shl    eax,0x4
c0015811:	01 f0                	add    eax,esi
c0015813:	8a 00                	mov    al,BYTE PTR [eax]
c0015815:	0f b6 c0             	movzx  eax,al
c0015818:	83 ec 0c             	sub    esp,0xc
c001581b:	53                   	push   ebx
c001581c:	51                   	push   ecx
c001581d:	52                   	push   edx
c001581e:	50                   	push   eax
c001581f:	68 a4 bd 02 c0       	push   0xc002bda4
c0015824:	e8 2a d6 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0015829:	83 c4 20             	add    esp,0x20
c001582c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001582f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015832:	83 c0 03             	add    eax,0x3
c0015835:	8a 00                	mov    al,BYTE PTR [eax]
c0015837:	0f b6 d8             	movzx  ebx,al
c001583a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001583d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015840:	83 c0 02             	add    eax,0x2
c0015843:	8a 00                	mov    al,BYTE PTR [eax]
c0015845:	0f b6 c8             	movzx  ecx,al
c0015848:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001584b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001584e:	40                   	inc    eax
c001584f:	8a 00                	mov    al,BYTE PTR [eax]
c0015851:	0f b6 d0             	movzx  edx,al
c0015854:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015857:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001585a:	8a 00                	mov    al,BYTE PTR [eax]
c001585c:	0f b6 c0             	movzx  eax,al
c001585f:	83 ec 0c             	sub    esp,0xc
c0015862:	53                   	push   ebx
c0015863:	51                   	push   ecx
c0015864:	52                   	push   edx
c0015865:	50                   	push   eax
c0015866:	68 cc bd 02 c0       	push   0xc002bdcc
c001586b:	e8 e3 d5 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0015870:	83 c4 20             	add    esp,0x20
c0015873:	83 ec 0c             	sub    esp,0xc
c0015876:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015879:	e8 54 f4 ff ff       	call   c0014cd2 <displayDebugInfo(regs*)>
c001587e:	8d 65 f8             	lea    esp,[ebp-0x8]
c0015881:	5b                   	pop    ebx
c0015882:	5e                   	pop    esi
c0015883:	5d                   	pop    ebp
c0015884:	c3                   	ret    

c0015885 <displayProgramFault(char const*)>:
c0015885:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001588a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001588d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015893:	85 c0                	test   eax,eax
c0015895:	74 15                	je     c00158ac <displayProgramFault(char const*)+0x27>
c0015897:	83 ec 0c             	sub    esp,0xc
c001589a:	6a 04                	push   0x4
c001589c:	6a 0f                	push   0xf
c001589e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00158a2:	50                   	push   eax
c00158a3:	e8 9c b4 ff ff       	call   c0010d44 <VgaText::puts(char const*, VgaColour, VgaColour)>
c00158a8:	83 c4 1c             	add    esp,0x1c
c00158ab:	c3                   	ret    
c00158ac:	c3                   	ret    

c00158ad <setupInterruptController()>:
c00158ad:	55                   	push   ebp
c00158ae:	89 e5                	mov    ebp,esp
c00158b0:	53                   	push   ebx
c00158b1:	83 ec 24             	sub    esp,0x24
c00158b4:	b8 00 00 00 00       	mov    eax,0x0
c00158b9:	85 c0                	test   eax,eax
c00158bb:	0f 95 c0             	setne  al
c00158be:	84 c0                	test   al,al
c00158c0:	74 5b                	je     c001591d <setupInterruptController()+0x70>
c00158c2:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c00158c9:	83 ec 0c             	sub    esp,0xc
c00158cc:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c00158cf:	e8 d4 9f ff ff       	call   c000f8a8 <malloc>
c00158d4:	83 c4 10             	add    esp,0x10
c00158d7:	89 c3                	mov    ebx,eax
c00158d9:	83 ec 0c             	sub    esp,0xc
c00158dc:	53                   	push   ebx
c00158dd:	e8 7a 0c 01 00       	call   c002655c <APIC::APIC()>
c00158e2:	83 c4 10             	add    esp,0x10
c00158e5:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c00158e8:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c00158eb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00158ee:	8b 00                	mov    eax,DWORD PTR [eax]
c00158f0:	83 c0 08             	add    eax,0x8
c00158f3:	8b 00                	mov    eax,DWORD PTR [eax]
c00158f5:	6a 00                	push   0x0
c00158f7:	6a 00                	push   0x0
c00158f9:	6a 00                	push   0x0
c00158fb:	52                   	push   edx
c00158fc:	ff d0                	call   eax
c00158fe:	83 c4 10             	add    esp,0x10
c0015901:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c0015906:	83 ec 08             	sub    esp,0x8
c0015909:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001590c:	50                   	push   eax
c001590d:	e8 62 e9 ff ff       	call   c0014274 <Device::addChild(Device*)>
c0015912:	83 c4 10             	add    esp,0x10
c0015915:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015918:	e9 89 03 00 00       	jmp    c0015ca6 <setupInterruptController()+0x3f9>
c001591d:	a0 20 1c 03 c0       	mov    al,ds:0xc0031c20
c0015922:	84 c0                	test   al,al
c0015924:	75 24                	jne    c001594a <setupInterruptController()+0x9d>
c0015926:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c001592b:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0015931:	83 e2 fe             	and    edx,0xfffffffe
c0015934:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001593a:	83 ec 0c             	sub    esp,0xc
c001593d:	68 f1 bd 02 c0       	push   0xc002bdf1
c0015942:	e8 0c d5 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0015947:	83 c4 10             	add    esp,0x10
c001594a:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c001594f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0015955:	83 e0 01             	and    eax,0x1
c0015958:	84 c0                	test   al,al
c001595a:	0f 95 c0             	setne  al
c001595d:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0015960:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c0015967:	83 ec 0c             	sub    esp,0xc
c001596a:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c001596d:	e8 36 9f ff ff       	call   c000f8a8 <malloc>
c0015972:	83 c4 10             	add    esp,0x10
c0015975:	89 c3                	mov    ebx,eax
c0015977:	83 ec 0c             	sub    esp,0xc
c001597a:	53                   	push   ebx
c001597b:	e8 34 11 01 00       	call   c0026ab4 <PIC::PIC()>
c0015980:	83 c4 10             	add    esp,0x10
c0015983:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015986:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015989:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001598c:	8b 00                	mov    eax,DWORD PTR [eax]
c001598e:	83 c0 08             	add    eax,0x8
c0015991:	8b 00                	mov    eax,DWORD PTR [eax]
c0015993:	6a 00                	push   0x0
c0015995:	6a 00                	push   0x0
c0015997:	6a 00                	push   0x0
c0015999:	52                   	push   edx
c001599a:	ff d0                	call   eax
c001599c:	83 c4 10             	add    esp,0x10
c001599f:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c00159a3:	74 73                	je     c0015a18 <setupInterruptController()+0x16b>
c00159a5:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00159a8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00159ad:	83 c0 0c             	add    eax,0xc
c00159b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00159b2:	6a 00                	push   0x0
c00159b4:	6a 00                	push   0x0
c00159b6:	6a 00                	push   0x0
c00159b8:	52                   	push   edx
c00159b9:	ff d0                	call   eax
c00159bb:	83 c4 10             	add    esp,0x10
c00159be:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00159c2:	74 15                	je     c00159d9 <setupInterruptController()+0x12c>
c00159c4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00159c9:	83 c0 04             	add    eax,0x4
c00159cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00159ce:	83 ec 0c             	sub    esp,0xc
c00159d1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00159d4:	ff d0                	call   eax
c00159d6:	83 c4 10             	add    esp,0x10
c00159d9:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c00159e0:	83 ec 0c             	sub    esp,0xc
c00159e3:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00159e6:	e8 bd 9e ff ff       	call   c000f8a8 <malloc>
c00159eb:	83 c4 10             	add    esp,0x10
c00159ee:	89 c3                	mov    ebx,eax
c00159f0:	83 ec 0c             	sub    esp,0xc
c00159f3:	53                   	push   ebx
c00159f4:	e8 63 0b 01 00       	call   c002655c <APIC::APIC()>
c00159f9:	83 c4 10             	add    esp,0x10
c00159fc:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00159ff:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015a02:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a05:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a07:	83 c0 08             	add    eax,0x8
c0015a0a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a0c:	6a 00                	push   0x0
c0015a0e:	6a 00                	push   0x0
c0015a10:	6a 00                	push   0x0
c0015a12:	52                   	push   edx
c0015a13:	ff d0                	call   eax
c0015a15:	83 c4 10             	add    esp,0x10
c0015a18:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c0015a1d:	83 ec 08             	sub    esp,0x8
c0015a20:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a23:	50                   	push   eax
c0015a24:	e8 4b e8 ff ff       	call   c0014274 <Device::addChild(Device*)>
c0015a29:	83 c4 10             	add    esp,0x10
c0015a2c:	c7 05 28 f4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f428,0x0
c0015a36:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a39:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a3b:	83 c0 24             	add    eax,0x24
c0015a3e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a40:	6a 00                	push   0x0
c0015a42:	68 49 52 01 c0       	push   0xc0015249
c0015a47:	6a 00                	push   0x0
c0015a49:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a4c:	ff d0                	call   eax
c0015a4e:	83 c4 10             	add    esp,0x10
c0015a51:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a54:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a56:	83 c0 24             	add    eax,0x24
c0015a59:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a5b:	6a 00                	push   0x0
c0015a5d:	68 49 52 01 c0       	push   0xc0015249
c0015a62:	6a 01                	push   0x1
c0015a64:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a67:	ff d0                	call   eax
c0015a69:	83 c4 10             	add    esp,0x10
c0015a6c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a6f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a71:	83 c0 24             	add    eax,0x24
c0015a74:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a76:	6a 00                	push   0x0
c0015a78:	68 2f 4b 01 c0       	push   0xc0014b2f
c0015a7d:	6a 02                	push   0x2
c0015a7f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a82:	ff d0                	call   eax
c0015a84:	83 c4 10             	add    esp,0x10
c0015a87:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a8a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a8c:	83 c0 24             	add    eax,0x24
c0015a8f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a91:	6a 00                	push   0x0
c0015a93:	68 49 52 01 c0       	push   0xc0015249
c0015a98:	6a 03                	push   0x3
c0015a9a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a9d:	ff d0                	call   eax
c0015a9f:	83 c4 10             	add    esp,0x10
c0015aa2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015aa5:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aa7:	83 c0 24             	add    eax,0x24
c0015aaa:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aac:	6a 00                	push   0x0
c0015aae:	68 49 52 01 c0       	push   0xc0015249
c0015ab3:	6a 04                	push   0x4
c0015ab5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ab8:	ff d0                	call   eax
c0015aba:	83 c4 10             	add    esp,0x10
c0015abd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ac0:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ac2:	83 c0 24             	add    eax,0x24
c0015ac5:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ac7:	6a 00                	push   0x0
c0015ac9:	68 49 52 01 c0       	push   0xc0015249
c0015ace:	6a 05                	push   0x5
c0015ad0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ad3:	ff d0                	call   eax
c0015ad5:	83 c4 10             	add    esp,0x10
c0015ad8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015adb:	8b 00                	mov    eax,DWORD PTR [eax]
c0015add:	83 c0 24             	add    eax,0x24
c0015ae0:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ae2:	6a 00                	push   0x0
c0015ae4:	68 68 52 01 c0       	push   0xc0015268
c0015ae9:	6a 06                	push   0x6
c0015aeb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015aee:	ff d0                	call   eax
c0015af0:	83 c4 10             	add    esp,0x10
c0015af3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015af6:	8b 00                	mov    eax,DWORD PTR [eax]
c0015af8:	83 c0 24             	add    eax,0x24
c0015afb:	8b 00                	mov    eax,DWORD PTR [eax]
c0015afd:	6a 00                	push   0x0
c0015aff:	68 61 51 01 c0       	push   0xc0015161
c0015b04:	6a 07                	push   0x7
c0015b06:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b09:	ff d0                	call   eax
c0015b0b:	83 c4 10             	add    esp,0x10
c0015b0e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b11:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b13:	83 c0 24             	add    eax,0x24
c0015b16:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b18:	6a 00                	push   0x0
c0015b1a:	68 4a 49 01 c0       	push   0xc001494a
c0015b1f:	6a 08                	push   0x8
c0015b21:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b24:	ff d0                	call   eax
c0015b26:	83 c4 10             	add    esp,0x10
c0015b29:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b2c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b2e:	83 c0 24             	add    eax,0x24
c0015b31:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b33:	6a 00                	push   0x0
c0015b35:	68 49 52 01 c0       	push   0xc0015249
c0015b3a:	6a 09                	push   0x9
c0015b3c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b3f:	ff d0                	call   eax
c0015b41:	83 c4 10             	add    esp,0x10
c0015b44:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b47:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b49:	83 c0 24             	add    eax,0x24
c0015b4c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b4e:	6a 00                	push   0x0
c0015b50:	68 49 52 01 c0       	push   0xc0015249
c0015b55:	6a 0a                	push   0xa
c0015b57:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b5a:	ff d0                	call   eax
c0015b5c:	83 c4 10             	add    esp,0x10
c0015b5f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b62:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b64:	83 c0 24             	add    eax,0x24
c0015b67:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b69:	6a 00                	push   0x0
c0015b6b:	68 49 52 01 c0       	push   0xc0015249
c0015b70:	6a 0b                	push   0xb
c0015b72:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b75:	ff d0                	call   eax
c0015b77:	83 c4 10             	add    esp,0x10
c0015b7a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b7d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b7f:	83 c0 24             	add    eax,0x24
c0015b82:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b84:	6a 00                	push   0x0
c0015b86:	68 49 52 01 c0       	push   0xc0015249
c0015b8b:	6a 0c                	push   0xc
c0015b8d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b90:	ff d0                	call   eax
c0015b92:	83 c4 10             	add    esp,0x10
c0015b95:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b98:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b9a:	83 c0 24             	add    eax,0x24
c0015b9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b9f:	6a 00                	push   0x0
c0015ba1:	68 d4 51 01 c0       	push   0xc00151d4
c0015ba6:	6a 0d                	push   0xd
c0015ba8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bab:	ff d0                	call   eax
c0015bad:	83 c4 10             	add    esp,0x10
c0015bb0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bb3:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bb5:	83 c0 24             	add    eax,0x24
c0015bb8:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bba:	6a 00                	push   0x0
c0015bbc:	68 0d 52 01 c0       	push   0xc001520d
c0015bc1:	6a 0e                	push   0xe
c0015bc3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bc6:	ff d0                	call   eax
c0015bc8:	83 c4 10             	add    esp,0x10
c0015bcb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bce:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bd0:	83 c0 24             	add    eax,0x24
c0015bd3:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bd5:	6a 00                	push   0x0
c0015bd7:	68 49 52 01 c0       	push   0xc0015249
c0015bdc:	6a 0f                	push   0xf
c0015bde:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015be1:	ff d0                	call   eax
c0015be3:	83 c4 10             	add    esp,0x10
c0015be6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015be9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015beb:	83 c0 24             	add    eax,0x24
c0015bee:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bf0:	6a 00                	push   0x0
c0015bf2:	68 49 52 01 c0       	push   0xc0015249
c0015bf7:	6a 10                	push   0x10
c0015bf9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bfc:	ff d0                	call   eax
c0015bfe:	83 c4 10             	add    esp,0x10
c0015c01:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c04:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c06:	83 c0 24             	add    eax,0x24
c0015c09:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c0b:	6a 00                	push   0x0
c0015c0d:	68 49 52 01 c0       	push   0xc0015249
c0015c12:	6a 11                	push   0x11
c0015c14:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c17:	ff d0                	call   eax
c0015c19:	83 c4 10             	add    esp,0x10
c0015c1c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c1f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c21:	83 c0 24             	add    eax,0x24
c0015c24:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c26:	6a 00                	push   0x0
c0015c28:	68 49 52 01 c0       	push   0xc0015249
c0015c2d:	6a 12                	push   0x12
c0015c2f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c32:	ff d0                	call   eax
c0015c34:	83 c4 10             	add    esp,0x10
c0015c37:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c3a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c3c:	83 c0 24             	add    eax,0x24
c0015c3f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c41:	6a 00                	push   0x0
c0015c43:	68 49 52 01 c0       	push   0xc0015249
c0015c48:	6a 13                	push   0x13
c0015c4a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c4d:	ff d0                	call   eax
c0015c4f:	83 c4 10             	add    esp,0x10
c0015c52:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c55:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c57:	83 c0 24             	add    eax,0x24
c0015c5a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c5c:	6a 00                	push   0x0
c0015c5e:	68 49 52 01 c0       	push   0xc0015249
c0015c63:	6a 14                	push   0x14
c0015c65:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c68:	ff d0                	call   eax
c0015c6a:	83 c4 10             	add    esp,0x10
c0015c6d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c70:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c72:	83 c0 24             	add    eax,0x24
c0015c75:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c77:	6a 00                	push   0x0
c0015c79:	68 49 52 01 c0       	push   0xc0015249
c0015c7e:	6a 1e                	push   0x1e
c0015c80:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c83:	ff d0                	call   eax
c0015c85:	83 c4 10             	add    esp,0x10
c0015c88:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c8b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c8d:	83 c0 24             	add    eax,0x24
c0015c90:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c92:	6a 00                	push   0x0
c0015c94:	68 e6 cc 01 c0       	push   0xc001cce6
c0015c99:	6a 60                	push   0x60
c0015c9b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c9e:	ff d0                	call   eax
c0015ca0:	83 c4 10             	add    esp,0x10
c0015ca3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ca6:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015ca9:	c9                   	leave  
c0015caa:	c3                   	ret    
c0015cab:	90                   	nop

c0015cac <InterruptController::convertLegacyIRQNumber(int)>:
c0015cac:	55                   	push   ebp
c0015cad:	89 e5                	mov    ebp,esp
c0015caf:	83 ec 08             	sub    esp,0x8
c0015cb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cb5:	83 ec 0c             	sub    esp,0xc
c0015cb8:	50                   	push   eax
c0015cb9:	e8 a2 e8 ff ff       	call   c0014560 <Device::getName()>
c0015cbe:	83 c4 10             	add    esp,0x10
c0015cc1:	8a 00                	mov    al,BYTE PTR [eax]
c0015cc3:	3c 41                	cmp    al,0x41
c0015cc5:	0f 94 c0             	sete   al
c0015cc8:	84 c0                	test   al,al
c0015cca:	74 28                	je     c0015cf4 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015ccc:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015cd0:	7f 12                	jg     c0015ce4 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015cd2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015cd5:	05 e0 e4 02 c0       	add    eax,0xc002e4e0
c0015cda:	8a 00                	mov    al,BYTE PTR [eax]
c0015cdc:	0f b6 c0             	movzx  eax,al
c0015cdf:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015ce2:	eb 10                	jmp    c0015cf4 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015ce4:	83 ec 0c             	sub    esp,0xc
c0015ce7:	68 e0 ba 02 c0       	push   0xc002bae0
c0015cec:	e8 fc 4b 00 00       	call   c001a8ed <Krnl::panic(char const*)>
c0015cf1:	83 c4 10             	add    esp,0x10
c0015cf4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015cf7:	c9                   	leave  
c0015cf8:	c3                   	ret    
c0015cf9:	90                   	nop

c0015cfa <startGUI(void*)>:
c0015cfa:	55                   	push   ebp
c0015cfb:	89 e5                	mov    ebp,esp
c0015cfd:	53                   	push   ebx
c0015cfe:	83 ec 04             	sub    esp,0x4
c0015d01:	a1 c8 27 03 c0       	mov    eax,ds:0xc00327c8
c0015d06:	48                   	dec    eax
c0015d07:	a3 c8 27 03 c0       	mov    ds:0xc00327c8,eax
c0015d0c:	a1 c8 27 03 c0       	mov    eax,ds:0xc00327c8
c0015d11:	85 c0                	test   eax,eax
c0015d13:	75 01                	jne    c0015d16 <startGUI(void*)+0x1c>
c0015d15:	fb                   	sti    
c0015d16:	8b 1d 88 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f288
c0015d1c:	83 ec 08             	sub    esp,0x8
c0015d1f:	6a 01                	push   0x1
c0015d21:	68 54 be 02 c0       	push   0xc002be54
c0015d26:	e8 96 7f 00 00       	call   c001dcc1 <Thr::loadDLL(char const*, bool)>
c0015d2b:	83 c4 10             	add    esp,0x10
c0015d2e:	83 ec 08             	sub    esp,0x8
c0015d31:	53                   	push   ebx
c0015d32:	50                   	push   eax
c0015d33:	e8 b4 81 00 00       	call   c001deec <Thr::executeDLL(unsigned long, void*)>
c0015d38:	83 c4 10             	add    esp,0x10
c0015d3b:	8b 1d 88 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f288
c0015d41:	83 ec 08             	sub    esp,0x8
c0015d44:	6a 01                	push   0x1
c0015d46:	68 6e be 02 c0       	push   0xc002be6e
c0015d4b:	e8 71 7f 00 00       	call   c001dcc1 <Thr::loadDLL(char const*, bool)>
c0015d50:	83 c4 10             	add    esp,0x10
c0015d53:	83 ec 08             	sub    esp,0x8
c0015d56:	53                   	push   ebx
c0015d57:	50                   	push   eax
c0015d58:	e8 8f 81 00 00       	call   c001deec <Thr::executeDLL(unsigned long, void*)>
c0015d5d:	83 c4 10             	add    esp,0x10
c0015d60:	90                   	nop
c0015d61:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015d64:	c9                   	leave  
c0015d65:	c3                   	ret    

c0015d66 <startGUIVESA(void*)>:
c0015d66:	55                   	push   ebp
c0015d67:	89 e5                	mov    ebp,esp
c0015d69:	53                   	push   ebx
c0015d6a:	83 ec 04             	sub    esp,0x4
c0015d6d:	a1 c8 27 03 c0       	mov    eax,ds:0xc00327c8
c0015d72:	48                   	dec    eax
c0015d73:	a3 c8 27 03 c0       	mov    ds:0xc00327c8,eax
c0015d78:	a1 c8 27 03 c0       	mov    eax,ds:0xc00327c8
c0015d7d:	85 c0                	test   eax,eax
c0015d7f:	75 01                	jne    c0015d82 <startGUIVESA(void*)+0x1c>
c0015d81:	fb                   	sti    
c0015d82:	8b 1d 88 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f288
c0015d88:	83 ec 08             	sub    esp,0x8
c0015d8b:	6a 01                	push   0x1
c0015d8d:	68 88 be 02 c0       	push   0xc002be88
c0015d92:	e8 2a 7f 00 00       	call   c001dcc1 <Thr::loadDLL(char const*, bool)>
c0015d97:	83 c4 10             	add    esp,0x10
c0015d9a:	83 ec 08             	sub    esp,0x8
c0015d9d:	53                   	push   ebx
c0015d9e:	50                   	push   eax
c0015d9f:	e8 48 81 00 00       	call   c001deec <Thr::executeDLL(unsigned long, void*)>
c0015da4:	83 c4 10             	add    esp,0x10
c0015da7:	8b 1d 88 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f288
c0015dad:	83 ec 08             	sub    esp,0x8
c0015db0:	6a 01                	push   0x1
c0015db2:	68 6e be 02 c0       	push   0xc002be6e
c0015db7:	e8 05 7f 00 00       	call   c001dcc1 <Thr::loadDLL(char const*, bool)>
c0015dbc:	83 c4 10             	add    esp,0x10
c0015dbf:	83 ec 08             	sub    esp,0x8
c0015dc2:	53                   	push   ebx
c0015dc3:	50                   	push   eax
c0015dc4:	e8 23 81 00 00       	call   c001deec <Thr::executeDLL(unsigned long, void*)>
c0015dc9:	83 c4 10             	add    esp,0x10
c0015dcc:	90                   	nop
c0015dcd:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015dd0:	c9                   	leave  
c0015dd1:	c3                   	ret    

c0015dd2 <sendKeyToTerminal(unsigned char)>:
c0015dd2:	55                   	push   ebp
c0015dd3:	89 e5                	mov    ebp,esp
c0015dd5:	83 ec 28             	sub    esp,0x28
c0015dd8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ddb:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015dde:	a1 64 f3 02 c0       	mov    eax,ds:0xc002f364
c0015de3:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015de7:	83 ec 08             	sub    esp,0x8
c0015dea:	52                   	push   edx
c0015deb:	50                   	push   eax
c0015dec:	e8 2b b4 ff ff       	call   c001121c <VgaText::receiveKey(unsigned char)>
c0015df1:	83 c4 10             	add    esp,0x10
c0015df4:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015df8:	0f 85 8f 00 00 00    	jne    c0015e8d <sendKeyToTerminal(unsigned char)+0xbb>
c0015dfe:	fa                   	cli    
c0015dff:	a1 c8 27 03 c0       	mov    eax,ds:0xc00327c8
c0015e04:	40                   	inc    eax
c0015e05:	a3 c8 27 03 c0       	mov    ds:0xc00327c8,eax
c0015e0a:	a1 c4 27 03 c0       	mov    eax,ds:0xc00327c4
c0015e0f:	40                   	inc    eax
c0015e10:	a3 c4 27 03 c0       	mov    ds:0xc00327c4,eax
c0015e15:	a1 40 f4 02 c0       	mov    eax,ds:0xc002f440
c0015e1a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015e1d:	c7 05 40 f4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f440,0x0
c0015e27:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015e2b:	74 1f                	je     c0015e4c <sendKeyToTerminal(unsigned char)+0x7a>
c0015e2d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015e30:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015e33:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015e36:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015e39:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015e3c:	83 ec 0c             	sub    esp,0xc
c0015e3f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015e42:	e8 1d 8d 00 00       	call   c001eb64 <unblockTask(ThreadControlBlock*)>
c0015e47:	83 c4 10             	add    esp,0x10
c0015e4a:	eb db                	jmp    c0015e27 <sendKeyToTerminal(unsigned char)+0x55>
c0015e4c:	a1 c4 27 03 c0       	mov    eax,ds:0xc00327c4
c0015e51:	48                   	dec    eax
c0015e52:	a3 c4 27 03 c0       	mov    ds:0xc00327c4,eax
c0015e57:	a1 c4 27 03 c0       	mov    eax,ds:0xc00327c4
c0015e5c:	85 c0                	test   eax,eax
c0015e5e:	75 18                	jne    c0015e78 <sendKeyToTerminal(unsigned char)+0xa6>
c0015e60:	a1 c0 27 03 c0       	mov    eax,ds:0xc00327c0
c0015e65:	85 c0                	test   eax,eax
c0015e67:	74 0f                	je     c0015e78 <sendKeyToTerminal(unsigned char)+0xa6>
c0015e69:	c7 05 c0 27 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00327c0,0x0
c0015e73:	e8 28 88 00 00       	call   c001e6a0 <schedule()>
c0015e78:	a1 c8 27 03 c0       	mov    eax,ds:0xc00327c8
c0015e7d:	48                   	dec    eax
c0015e7e:	a3 c8 27 03 c0       	mov    ds:0xc00327c8,eax
c0015e83:	a1 c8 27 03 c0       	mov    eax,ds:0xc00327c8
c0015e88:	85 c0                	test   eax,eax
c0015e8a:	75 01                	jne    c0015e8d <sendKeyToTerminal(unsigned char)+0xbb>
c0015e8c:	fb                   	sti    
c0015e8d:	90                   	nop
c0015e8e:	c9                   	leave  
c0015e8f:	c3                   	ret    

c0015e90 <sendKeyboardToken(KeyboardToken)>:
c0015e90:	55                   	push   ebp
c0015e91:	89 e5                	mov    ebp,esp
c0015e93:	83 ec 18             	sub    esp,0x18
c0015e96:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015e99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e9c:	0f b7 c0             	movzx  eax,ax
c0015e9f:	83 f2 01             	xor    edx,0x1
c0015ea2:	88 90 60 f4 02 c0    	mov    BYTE PTR [eax-0x3ffd0ba0],dl
c0015ea8:	a1 48 f4 02 c0       	mov    eax,ds:0xc002f448
c0015ead:	85 c0                	test   eax,eax
c0015eaf:	74 24                	je     c0015ed5 <sendKeyboardToken(KeyboardToken)+0x45>
c0015eb1:	8b 0d 48 f4 02 c0    	mov    ecx,DWORD PTR ds:0xc002f448
c0015eb7:	83 ec 04             	sub    esp,0x4
c0015eba:	68 60 f4 02 c0       	push   0xc002f460
c0015ebf:	83 ec 08             	sub    esp,0x8
c0015ec2:	89 e2                	mov    edx,esp
c0015ec4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ec7:	89 02                	mov    DWORD PTR [edx],eax
c0015ec9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015ecc:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015ed0:	ff d1                	call   ecx
c0015ed2:	83 c4 10             	add    esp,0x10
c0015ed5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ed8:	66 3d 03 02          	cmp    ax,0x203
c0015edc:	75 07                	jne    c0015ee5 <sendKeyboardToken(KeyboardToken)+0x55>
c0015ede:	a0 60 f5 02 c0       	mov    al,ds:0xc002f560
c0015ee3:	84 c0                	test   al,al
c0015ee5:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015ee9:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015eec:	a0 68 f8 02 c0       	mov    al,ds:0xc002f868
c0015ef1:	38 c2                	cmp    dl,al
c0015ef3:	74 1c                	je     c0015f11 <sendKeyboardToken(KeyboardToken)+0x81>
c0015ef5:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015ef8:	a2 68 f8 02 c0       	mov    ds:0xc002f868,al
c0015efd:	a0 68 f8 02 c0       	mov    al,ds:0xc002f868
c0015f02:	0f b6 c0             	movzx  eax,al
c0015f05:	83 ec 0c             	sub    esp,0xc
c0015f08:	50                   	push   eax
c0015f09:	e8 96 a6 ff ff       	call   c00105a4 <setTerminalScrollLock(bool)>
c0015f0e:	83 c4 10             	add    esp,0x10
c0015f11:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015f14:	84 c0                	test   al,al
c0015f16:	0f 84 ae 00 00 00    	je     c0015fca <sendKeyboardToken(KeyboardToken)+0x13a>
c0015f1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f1f:	66 3d 10 03          	cmp    ax,0x310
c0015f23:	75 06                	jne    c0015f2b <sendKeyboardToken(KeyboardToken)+0x9b>
c0015f25:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015f2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f2e:	66 3d 11 03          	cmp    ax,0x311
c0015f32:	75 06                	jne    c0015f3a <sendKeyboardToken(KeyboardToken)+0xaa>
c0015f34:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015f3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f3d:	66 3d 12 03          	cmp    ax,0x312
c0015f41:	75 06                	jne    c0015f49 <sendKeyboardToken(KeyboardToken)+0xb9>
c0015f43:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015f49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f4c:	66 3d 13 03          	cmp    ax,0x313
c0015f50:	75 06                	jne    c0015f58 <sendKeyboardToken(KeyboardToken)+0xc8>
c0015f52:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015f58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f5b:	66 3d 14 03          	cmp    ax,0x314
c0015f5f:	75 06                	jne    c0015f67 <sendKeyboardToken(KeyboardToken)+0xd7>
c0015f61:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015f67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f6a:	66 3d 15 03          	cmp    ax,0x315
c0015f6e:	75 06                	jne    c0015f76 <sendKeyboardToken(KeyboardToken)+0xe6>
c0015f70:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015f76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f79:	66 3d 16 03          	cmp    ax,0x316
c0015f7d:	75 06                	jne    c0015f85 <sendKeyboardToken(KeyboardToken)+0xf5>
c0015f7f:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015f85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f88:	66 3d 17 03          	cmp    ax,0x317
c0015f8c:	75 06                	jne    c0015f94 <sendKeyboardToken(KeyboardToken)+0x104>
c0015f8e:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015f94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f97:	66 3d 18 03          	cmp    ax,0x318
c0015f9b:	75 06                	jne    c0015fa3 <sendKeyboardToken(KeyboardToken)+0x113>
c0015f9d:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015fa3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fa6:	66 3d 19 03          	cmp    ax,0x319
c0015faa:	75 06                	jne    c0015fb2 <sendKeyboardToken(KeyboardToken)+0x122>
c0015fac:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015fb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fb5:	66 3d 1a 03          	cmp    ax,0x31a
c0015fb9:	0f 85 c9 00 00 00    	jne    c0016088 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015fbf:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015fc5:	e9 be 00 00 00       	jmp    c0016088 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015fca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fcd:	66 3d 10 03          	cmp    ax,0x310
c0015fd1:	75 0a                	jne    c0015fdd <sendKeyboardToken(KeyboardToken)+0x14d>
c0015fd3:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015fd9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015fdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fe0:	66 3d 11 03          	cmp    ax,0x311
c0015fe4:	75 0a                	jne    c0015ff0 <sendKeyboardToken(KeyboardToken)+0x160>
c0015fe6:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015fec:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ff0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ff3:	66 3d 12 03          	cmp    ax,0x312
c0015ff7:	75 0a                	jne    c0016003 <sendKeyboardToken(KeyboardToken)+0x173>
c0015ff9:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015fff:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016003:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016006:	66 3d 13 03          	cmp    ax,0x313
c001600a:	75 0a                	jne    c0016016 <sendKeyboardToken(KeyboardToken)+0x186>
c001600c:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0016012:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016016:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016019:	66 3d 14 03          	cmp    ax,0x314
c001601d:	75 0a                	jne    c0016029 <sendKeyboardToken(KeyboardToken)+0x199>
c001601f:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0016025:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016029:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001602c:	66 3d 15 03          	cmp    ax,0x315
c0016030:	75 0a                	jne    c001603c <sendKeyboardToken(KeyboardToken)+0x1ac>
c0016032:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0016038:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001603c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001603f:	66 3d 16 03          	cmp    ax,0x316
c0016043:	75 0a                	jne    c001604f <sendKeyboardToken(KeyboardToken)+0x1bf>
c0016045:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c001604b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001604f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016052:	66 3d 17 03          	cmp    ax,0x317
c0016056:	75 0a                	jne    c0016062 <sendKeyboardToken(KeyboardToken)+0x1d2>
c0016058:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c001605e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016062:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016065:	66 3d 18 03          	cmp    ax,0x318
c0016069:	75 0a                	jne    c0016075 <sendKeyboardToken(KeyboardToken)+0x1e5>
c001606b:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0016071:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016075:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016078:	66 3d 19 03          	cmp    ax,0x319
c001607c:	75 0a                	jne    c0016088 <sendKeyboardToken(KeyboardToken)+0x1f8>
c001607e:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0016084:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016088:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001608b:	66 3d 00 02          	cmp    ax,0x200
c001608f:	75 2c                	jne    c00160bd <sendKeyboardToken(KeyboardToken)+0x22d>
c0016091:	a0 60 f8 02 c0       	mov    al,ds:0xc002f860
c0016096:	83 f0 01             	xor    eax,0x1
c0016099:	84 c0                	test   al,al
c001609b:	74 20                	je     c00160bd <sendKeyboardToken(KeyboardToken)+0x22d>
c001609d:	a1 f0 27 03 c0       	mov    eax,ds:0xc00327f0
c00160a2:	6a 01                	push   0x1
c00160a4:	6a 00                	push   0x0
c00160a6:	68 fa 5c 01 c0       	push   0xc0015cfa
c00160ab:	50                   	push   eax
c00160ac:	e8 ab 83 00 00       	call   c001e45c <Process::createThread(void (*)(void*), void*, int)>
c00160b1:	83 c4 10             	add    esp,0x10
c00160b4:	c6 05 60 f8 02 c0 01 	mov    BYTE PTR ds:0xc002f860,0x1
c00160bb:	eb 33                	jmp    c00160f0 <sendKeyboardToken(KeyboardToken)+0x260>
c00160bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160c0:	66 3d 01 02          	cmp    ax,0x201
c00160c4:	75 2a                	jne    c00160f0 <sendKeyboardToken(KeyboardToken)+0x260>
c00160c6:	a0 60 f8 02 c0       	mov    al,ds:0xc002f860
c00160cb:	83 f0 01             	xor    eax,0x1
c00160ce:	84 c0                	test   al,al
c00160d0:	74 1e                	je     c00160f0 <sendKeyboardToken(KeyboardToken)+0x260>
c00160d2:	a1 f0 27 03 c0       	mov    eax,ds:0xc00327f0
c00160d7:	6a 01                	push   0x1
c00160d9:	6a 00                	push   0x0
c00160db:	68 66 5d 01 c0       	push   0xc0015d66
c00160e0:	50                   	push   eax
c00160e1:	e8 76 83 00 00       	call   c001e45c <Process::createThread(void (*)(void*), void*, int)>
c00160e6:	83 c4 10             	add    esp,0x10
c00160e9:	c6 05 60 f8 02 c0 01 	mov    BYTE PTR ds:0xc002f860,0x1
c00160f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160f3:	66 3d 1d 03          	cmp    ax,0x31d
c00160f7:	75 06                	jne    c00160ff <sendKeyboardToken(KeyboardToken)+0x26f>
c00160f9:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c00160ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016102:	66 3d 1c 03          	cmp    ax,0x31c
c0016106:	75 06                	jne    c001610e <sendKeyboardToken(KeyboardToken)+0x27e>
c0016108:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c001610e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016111:	66 3d 1b 03          	cmp    ax,0x31b
c0016115:	75 06                	jne    c001611d <sendKeyboardToken(KeyboardToken)+0x28d>
c0016117:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c001611d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016120:	66 3d 1e 03          	cmp    ax,0x31e
c0016124:	75 06                	jne    c001612c <sendKeyboardToken(KeyboardToken)+0x29c>
c0016126:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c001612c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001612f:	66 3d 1f 03          	cmp    ax,0x31f
c0016133:	75 06                	jne    c001613b <sendKeyboardToken(KeyboardToken)+0x2ab>
c0016135:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c001613b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001613e:	66 3d 1a 03          	cmp    ax,0x31a
c0016142:	75 06                	jne    c001614a <sendKeyboardToken(KeyboardToken)+0x2ba>
c0016144:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c001614a:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c001614e:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016151:	83 f0 01             	xor    eax,0x1
c0016154:	84 c0                	test   al,al
c0016156:	74 77                	je     c00161cf <sendKeyboardToken(KeyboardToken)+0x33f>
c0016158:	a0 61 f5 02 c0       	mov    al,ds:0xc002f561
c001615d:	84 c0                	test   al,al
c001615f:	74 41                	je     c00161a2 <sendKeyboardToken(KeyboardToken)+0x312>
c0016161:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0016165:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0016169:	74 2b                	je     c0016196 <sendKeyboardToken(KeyboardToken)+0x306>
c001616b:	8b 15 64 f8 02 c0    	mov    edx,DWORD PTR ds:0xc002f864
c0016171:	89 d0                	mov    eax,edx
c0016173:	c1 e0 02             	shl    eax,0x2
c0016176:	01 d0                	add    eax,edx
c0016178:	01 c0                	add    eax,eax
c001617a:	a3 64 f8 02 c0       	mov    ds:0xc002f864,eax
c001617f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016182:	0f b7 c0             	movzx  eax,ax
c0016185:	8d 50 d0             	lea    edx,[eax-0x30]
c0016188:	a1 64 f8 02 c0       	mov    eax,ds:0xc002f864
c001618d:	01 d0                	add    eax,edx
c001618f:	a3 64 f8 02 c0       	mov    ds:0xc002f864,eax
c0016194:	eb 6d                	jmp    c0016203 <sendKeyboardToken(KeyboardToken)+0x373>
c0016196:	c7 05 64 f8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f864,0x0
c00161a0:	eb 61                	jmp    c0016203 <sendKeyboardToken(KeyboardToken)+0x373>
c00161a2:	a1 64 f8 02 c0       	mov    eax,ds:0xc002f864
c00161a7:	85 c0                	test   eax,eax
c00161a9:	74 18                	je     c00161c3 <sendKeyboardToken(KeyboardToken)+0x333>
c00161ab:	a1 64 f8 02 c0       	mov    eax,ds:0xc002f864
c00161b0:	0f b6 c0             	movzx  eax,al
c00161b3:	83 ec 0c             	sub    esp,0xc
c00161b6:	50                   	push   eax
c00161b7:	e8 16 fc ff ff       	call   c0015dd2 <sendKeyToTerminal(unsigned char)>
c00161bc:	83 c4 10             	add    esp,0x10
c00161bf:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00161c3:	c7 05 64 f8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f864,0x0
c00161cd:	eb 34                	jmp    c0016203 <sendKeyboardToken(KeyboardToken)+0x373>
c00161cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161d2:	66 3d 01 01          	cmp    ax,0x101
c00161d6:	75 2b                	jne    c0016203 <sendKeyboardToken(KeyboardToken)+0x373>
c00161d8:	a1 64 f8 02 c0       	mov    eax,ds:0xc002f864
c00161dd:	85 c0                	test   eax,eax
c00161df:	74 18                	je     c00161f9 <sendKeyboardToken(KeyboardToken)+0x369>
c00161e1:	a1 64 f8 02 c0       	mov    eax,ds:0xc002f864
c00161e6:	0f b6 c0             	movzx  eax,al
c00161e9:	83 ec 0c             	sub    esp,0xc
c00161ec:	50                   	push   eax
c00161ed:	e8 e0 fb ff ff       	call   c0015dd2 <sendKeyToTerminal(unsigned char)>
c00161f2:	83 c4 10             	add    esp,0x10
c00161f5:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00161f9:	c7 05 64 f8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f864,0x0
c0016203:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0016206:	83 f0 01             	xor    eax,0x1
c0016209:	84 c0                	test   al,al
c001620b:	74 4c                	je     c0016259 <sendKeyboardToken(KeyboardToken)+0x3c9>
c001620d:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016210:	83 f0 01             	xor    eax,0x1
c0016213:	84 c0                	test   al,al
c0016215:	74 42                	je     c0016259 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016217:	a0 60 f5 02 c0       	mov    al,ds:0xc002f560
c001621c:	83 f0 01             	xor    eax,0x1
c001621f:	84 c0                	test   al,al
c0016221:	74 36                	je     c0016259 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016223:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016226:	66 83 f8 1f          	cmp    ax,0x1f
c001622a:	76 09                	jbe    c0016235 <sendKeyboardToken(KeyboardToken)+0x3a5>
c001622c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001622f:	66 83 f8 7e          	cmp    ax,0x7e
c0016233:	76 12                	jbe    c0016247 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0016235:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016238:	66 83 f8 0a          	cmp    ax,0xa
c001623c:	74 09                	je     c0016247 <sendKeyboardToken(KeyboardToken)+0x3b7>
c001623e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016241:	66 83 f8 08          	cmp    ax,0x8
c0016245:	75 12                	jne    c0016259 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016247:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001624a:	0f b6 c0             	movzx  eax,al
c001624d:	83 ec 0c             	sub    esp,0xc
c0016250:	50                   	push   eax
c0016251:	e8 7c fb ff ff       	call   c0015dd2 <sendKeyToTerminal(unsigned char)>
c0016256:	83 c4 10             	add    esp,0x10
c0016259:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001625c:	83 f0 01             	xor    eax,0x1
c001625f:	84 c0                	test   al,al
c0016261:	74 4f                	je     c00162b2 <sendKeyboardToken(KeyboardToken)+0x422>
c0016263:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016266:	83 f0 01             	xor    eax,0x1
c0016269:	84 c0                	test   al,al
c001626b:	74 45                	je     c00162b2 <sendKeyboardToken(KeyboardToken)+0x422>
c001626d:	a0 60 f5 02 c0       	mov    al,ds:0xc002f560
c0016272:	84 c0                	test   al,al
c0016274:	74 3c                	je     c00162b2 <sendKeyboardToken(KeyboardToken)+0x422>
c0016276:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016279:	66 83 f8 3f          	cmp    ax,0x3f
c001627d:	76 33                	jbe    c00162b2 <sendKeyboardToken(KeyboardToken)+0x422>
c001627f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016282:	66 83 f8 7f          	cmp    ax,0x7f
c0016286:	77 2a                	ja     c00162b2 <sendKeyboardToken(KeyboardToken)+0x422>
c0016288:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001628b:	88 c2                	mov    dl,al
c001628d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016290:	66 83 f8 5f          	cmp    ax,0x5f
c0016294:	76 04                	jbe    c001629a <sendKeyboardToken(KeyboardToken)+0x40a>
c0016296:	b0 20                	mov    al,0x20
c0016298:	eb 02                	jmp    c001629c <sendKeyboardToken(KeyboardToken)+0x40c>
c001629a:	b0 00                	mov    al,0x0
c001629c:	29 c2                	sub    edx,eax
c001629e:	88 d0                	mov    al,dl
c00162a0:	83 e8 40             	sub    eax,0x40
c00162a3:	0f b6 c0             	movzx  eax,al
c00162a6:	83 ec 0c             	sub    esp,0xc
c00162a9:	50                   	push   eax
c00162aa:	e8 23 fb ff ff       	call   c0015dd2 <sendKeyToTerminal(unsigned char)>
c00162af:	83 c4 10             	add    esp,0x10
c00162b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162b5:	66 3d 00 03          	cmp    ax,0x300
c00162b9:	75 0f                	jne    c00162ca <sendKeyboardToken(KeyboardToken)+0x43a>
c00162bb:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00162be:	83 f0 01             	xor    eax,0x1
c00162c1:	84 c0                	test   al,al
c00162c3:	74 05                	je     c00162ca <sendKeyboardToken(KeyboardToken)+0x43a>
c00162c5:	e8 52 aa ff ff       	call   c0010d1c <doTerminalCycle()>
c00162ca:	90                   	nop
c00162cb:	c9                   	leave  
c00162cc:	c3                   	ret    

c00162cd <clearInternalKeybuffer(VgaText*)>:
c00162cd:	55                   	push   ebp
c00162ce:	89 e5                	mov    ebp,esp
c00162d0:	83 ec 08             	sub    esp,0x8
c00162d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162d6:	05 98 01 00 00       	add    eax,0x198
c00162db:	83 ec 0c             	sub    esp,0xc
c00162de:	50                   	push   eax
c00162df:	e8 a4 a4 fe ff       	call   c0000788 <strlen>
c00162e4:	83 c4 10             	add    esp,0x10
c00162e7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00162ea:	81 c2 98 01 00 00    	add    edx,0x198
c00162f0:	83 ec 04             	sub    esp,0x4
c00162f3:	50                   	push   eax
c00162f4:	6a 00                	push   0x0
c00162f6:	52                   	push   edx
c00162f7:	e8 70 a4 fe ff       	call   c000076c <memset>
c00162fc:	83 c4 10             	add    esp,0x10
c00162ff:	90                   	nop
c0016300:	c9                   	leave  
c0016301:	c3                   	ret    

c0016302 <readKeyboard(VgaText*, char*, unsigned long)>:
c0016302:	55                   	push   ebp
c0016303:	89 e5                	mov    ebp,esp
c0016305:	83 ec 18             	sub    esp,0x18
c0016308:	a1 48 f4 02 c0       	mov    eax,ds:0xc002f448
c001630d:	85 c0                	test   eax,eax
c001630f:	74 2a                	je     c001633b <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0016311:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c0016317:	8b 0d 48 f4 02 c0    	mov    ecx,DWORD PTR ds:0xc002f448
c001631d:	83 ec 04             	sub    esp,0x4
c0016320:	68 60 f4 02 c0       	push   0xc002f460
c0016325:	83 ec 08             	sub    esp,0x8
c0016328:	89 e2                	mov    edx,esp
c001632a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001632d:	89 02                	mov    DWORD PTR [edx],eax
c001632f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0016332:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0016336:	ff d1                	call   ecx
c0016338:	83 c4 10             	add    esp,0x10
c001633b:	83 ec 0c             	sub    esp,0xc
c001633e:	68 a3 be 02 c0       	push   0xc002bea3
c0016343:	e8 0b cb ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0016348:	83 c4 10             	add    esp,0x10
c001634b:	fb                   	sti    
c001634c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0016353:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0016357:	0f 84 a1 00 00 00    	je     c00163fe <readKeyboard(VgaText*, char*, unsigned long)+0xfc>
c001635d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016360:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0016366:	84 c0                	test   al,al
c0016368:	75 28                	jne    c0016392 <readKeyboard(VgaText*, char*, unsigned long)+0x90>
c001636a:	fa                   	cli    
c001636b:	a1 c8 27 03 c0       	mov    eax,ds:0xc00327c8
c0016370:	40                   	inc    eax
c0016371:	a3 c8 27 03 c0       	mov    ds:0xc00327c8,eax
c0016376:	e8 25 83 00 00       	call   c001e6a0 <schedule()>
c001637b:	a1 c8 27 03 c0       	mov    eax,ds:0xc00327c8
c0016380:	48                   	dec    eax
c0016381:	a3 c8 27 03 c0       	mov    ds:0xc00327c8,eax
c0016386:	a1 c8 27 03 c0       	mov    eax,ds:0xc00327c8
c001638b:	85 c0                	test   eax,eax
c001638d:	75 ce                	jne    c001635d <readKeyboard(VgaText*, char*, unsigned long)+0x5b>
c001638f:	fb                   	sti    
c0016390:	eb cb                	jmp    c001635d <readKeyboard(VgaText*, char*, unsigned long)+0x5b>
c0016392:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0016395:	8d 50 01             	lea    edx,[eax+0x1]
c0016398:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001639b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001639e:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c00163a4:	88 10                	mov    BYTE PTR [eax],dl
c00163a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00163a9:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c00163af:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c00163b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00163b5:	05 98 01 00 00       	add    eax,0x198
c00163ba:	83 ec 0c             	sub    esp,0xc
c00163bd:	50                   	push   eax
c00163be:	e8 c5 a3 fe ff       	call   c0000788 <strlen>
c00163c3:	83 c4 10             	add    esp,0x10
c00163c6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00163c9:	81 c2 98 01 00 00    	add    edx,0x198
c00163cf:	8d 4a 01             	lea    ecx,[edx+0x1]
c00163d2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00163d5:	81 c2 98 01 00 00    	add    edx,0x198
c00163db:	83 ec 04             	sub    esp,0x4
c00163de:	50                   	push   eax
c00163df:	51                   	push   ecx
c00163e0:	52                   	push   edx
c00163e1:	e8 be a2 fe ff       	call   c00006a4 <memmove>
c00163e6:	83 c4 10             	add    esp,0x10
c00163e9:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c00163ec:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00163ef:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c00163f3:	0f 85 5a ff ff ff    	jne    c0016353 <readKeyboard(VgaText*, char*, unsigned long)+0x51>
c00163f9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00163fc:	eb 03                	jmp    c0016401 <readKeyboard(VgaText*, char*, unsigned long)+0xff>
c00163fe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0016401:	c9                   	leave  
c0016402:	c3                   	ret    
c0016403:	90                   	nop

c0016404 <Keyboard::Keyboard(char const*)>:
c0016404:	83 ec 0c             	sub    esp,0xc
c0016407:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001640b:	83 ec 08             	sub    esp,0x8
c001640e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016412:	50                   	push   eax
c0016413:	e8 4c e0 ff ff       	call   c0014464 <Device::Device(char const*)>
c0016418:	83 c4 10             	add    esp,0x10
c001641b:	ba c4 be 02 c0       	mov    edx,0xc002bec4
c0016420:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016424:	89 10                	mov    DWORD PTR [eax],edx
c0016426:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001642a:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0016434:	c6 05 44 f4 02 c0 01 	mov    BYTE PTR ds:0xc002f444,0x1
c001643b:	90                   	nop
c001643c:	83 c4 0c             	add    esp,0xc
c001643f:	c3                   	ret    

c0016440 <Keyboard::~Keyboard()>:
c0016440:	83 ec 0c             	sub    esp,0xc
c0016443:	ba c4 be 02 c0       	mov    edx,0xc002bec4
c0016448:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001644c:	89 10                	mov    DWORD PTR [eax],edx
c001644e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016452:	83 ec 0c             	sub    esp,0xc
c0016455:	50                   	push   eax
c0016456:	e8 ff dc ff ff       	call   c001415a <Device::~Device()>
c001645b:	83 c4 10             	add    esp,0x10
c001645e:	90                   	nop
c001645f:	83 c4 0c             	add    esp,0xc
c0016462:	c3                   	ret    
c0016463:	90                   	nop

c0016464 <Keyboard::~Keyboard()>:
c0016464:	83 ec 0c             	sub    esp,0xc
c0016467:	83 ec 0c             	sub    esp,0xc
c001646a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001646e:	e8 cd ff ff ff       	call   c0016440 <Keyboard::~Keyboard()>
c0016473:	83 c4 10             	add    esp,0x10
c0016476:	83 ec 08             	sub    esp,0x8
c0016479:	68 5c 01 00 00       	push   0x15c
c001647e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016482:	e8 ec c8 ff ff       	call   c0012d73 <operator delete(void*, unsigned long)>
c0016487:	83 c4 10             	add    esp,0x10
c001648a:	83 c4 0c             	add    esp,0xc
c001648d:	c3                   	ret    

c001648e <LogicalDisk::close(int, int, void*)>:
c001648e:	83 c8 ff             	or     eax,0xffffffff
c0016491:	c3                   	ret    

c0016492 <LogicalDisk::~LogicalDisk()>:
c0016492:	83 ec 0c             	sub    esp,0xc
c0016495:	ba 74 bf 02 c0       	mov    edx,0xc002bf74
c001649a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001649e:	89 10                	mov    DWORD PTR [eax],edx
c00164a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164a4:	83 ec 0c             	sub    esp,0xc
c00164a7:	50                   	push   eax
c00164a8:	e8 ad dc ff ff       	call   c001415a <Device::~Device()>
c00164ad:	83 c4 10             	add    esp,0x10
c00164b0:	90                   	nop
c00164b1:	83 c4 0c             	add    esp,0xc
c00164b4:	c3                   	ret    
c00164b5:	90                   	nop

c00164b6 <LogicalDisk::~LogicalDisk()>:
c00164b6:	83 ec 0c             	sub    esp,0xc
c00164b9:	83 ec 0c             	sub    esp,0xc
c00164bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164c0:	e8 cd ff ff ff       	call   c0016492 <LogicalDisk::~LogicalDisk()>
c00164c5:	83 c4 10             	add    esp,0x10
c00164c8:	83 ec 08             	sub    esp,0x8
c00164cb:	68 74 01 00 00       	push   0x174
c00164d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164d4:	e8 9a c8 ff ff       	call   c0012d73 <operator delete(void*, unsigned long)>
c00164d9:	83 c4 10             	add    esp,0x10
c00164dc:	83 c4 0c             	add    esp,0xc
c00164df:	c3                   	ret    

c00164e0 <LogicalDisk::open(int, int, void*)>:
c00164e0:	83 ec 18             	sub    esp,0x18
c00164e3:	68 f0 be 02 c0       	push   0xc002bef0
c00164e8:	e8 00 44 00 00       	call   c001a8ed <Krnl::panic(char const*)>
c00164ed:	83 c8 ff             	or     eax,0xffffffff
c00164f0:	83 c4 1c             	add    esp,0x1c
c00164f3:	c3                   	ret    

c00164f4 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c00164f4:	53                   	push   ebx
c00164f5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00164f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00164fd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016501:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0016507:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c001650d:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0016513:	77 10                	ja     c0016525 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0016515:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c001651b:	89 d3                	mov    ebx,edx
c001651d:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0016523:	72 05                	jb     c001652a <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0016525:	83 c8 ff             	or     eax,0xffffffff
c0016528:	89 c2                	mov    edx,eax
c001652a:	5b                   	pop    ebx
c001652b:	c3                   	ret    

c001652c <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c001652c:	56                   	push   esi
c001652d:	83 c8 ff             	or     eax,0xffffffff
c0016530:	53                   	push   ebx
c0016531:	89 c2                	mov    edx,eax
c0016533:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0016537:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001653b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001653f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016545:	77 27                	ja     c001656e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0016547:	89 d8                	mov    eax,ebx
c0016549:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c001654f:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0016555:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001655a:	89 c2                	mov    edx,eax
c001655c:	73 10                	jae    c001656e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001655e:	89 c8                	mov    eax,ecx
c0016560:	89 da                	mov    edx,ebx
c0016562:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0016568:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c001656e:	5b                   	pop    ebx
c001656f:	5e                   	pop    esi
c0016570:	c3                   	ret    
c0016571:	90                   	nop

c0016572 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016572:	83 ec 1c             	sub    esp,0x1c
c0016575:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016579:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001657d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016581:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016585:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016589:	89 04 24             	mov    DWORD PTR [esp],eax
c001658c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016590:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016594:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016598:	83 ec 08             	sub    esp,0x8
c001659b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001659f:	50                   	push   eax
c00165a0:	e8 bf de ff ff       	call   c0014464 <Device::Device(char const*)>
c00165a5:	83 c4 10             	add    esp,0x10
c00165a8:	ba 74 bf 02 c0       	mov    edx,0xc002bf74
c00165ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165b1:	89 10                	mov    DWORD PTR [eax],edx
c00165b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165b7:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00165be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165c2:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00165c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165cd:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c00165d7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00165db:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00165df:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00165e3:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c00165e9:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c00165ef:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00165f3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00165f6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00165fa:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0016600:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0016606:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001660a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001660e:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0016614:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016618:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0016622:	90                   	nop
c0016623:	83 c4 1c             	add    esp,0x1c
c0016626:	c3                   	ret    
c0016627:	90                   	nop

c0016628 <LogicalDisk::assignDriveLetter()>:
c0016628:	55                   	push   ebp
c0016629:	57                   	push   edi
c001662a:	56                   	push   esi
c001662b:	53                   	push   ebx
c001662c:	83 ec 14             	sub    esp,0x14
c001662f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016633:	8b 3d 80 f8 02 c0    	mov    edi,DWORD PTR ds:0xc002f880
c0016639:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c001663f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0016643:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0016649:	8b 3d 84 f8 02 c0    	mov    edi,DWORD PTR ds:0xc002f884
c001664f:	3c 01                	cmp    al,0x1
c0016651:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0016655:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0016659:	19 c0                	sbb    eax,eax
c001665b:	83 e0 02             	and    eax,0x2
c001665e:	83 c0 41             	add    eax,0x41
c0016661:	0f be e8             	movsx  ebp,al
c0016664:	3c 43                	cmp    al,0x43
c0016666:	75 10                	jne    c0016678 <LogicalDisk::assignDriveLetter()+0x50>
c0016668:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c001666f:	75 5d                	jne    c00166ce <LogicalDisk::assignDriveLetter()+0xa6>
c0016671:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0016676:	75 56                	jne    c00166ce <LogicalDisk::assignDriveLetter()+0xa6>
c0016678:	8d 75 bf             	lea    esi,[ebp-0x41]
c001667b:	ba 01 00 00 00       	mov    edx,0x1
c0016680:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0016684:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0016688:	d3 e2                	shl    edx,cl
c001668a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001668e:	89 d7                	mov    edi,edx
c0016690:	89 d6                	mov    esi,edx
c0016692:	c1 ff 1f             	sar    edi,0x1f
c0016695:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0016699:	21 f9                	and    ecx,edi
c001669b:	09 d1                	or     ecx,edx
c001669d:	75 2f                	jne    c00166ce <LogicalDisk::assignDriveLetter()+0xa6>
c001669f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00166a3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00166a7:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c00166ad:	09 f2                	or     edx,esi
c00166af:	89 15 80 f8 02 c0    	mov    DWORD PTR ds:0xc002f880,edx
c00166b5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00166b9:	09 fa                	or     edx,edi
c00166bb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00166bf:	89 15 84 f8 02 c0    	mov    DWORD PTR ds:0xc002f884,edx
c00166c5:	89 1c bd a0 f8 02 c0 	mov    DWORD PTR [edi*4-0x3ffd0760],ebx
c00166cc:	eb 08                	jmp    c00166d6 <LogicalDisk::assignDriveLetter()+0xae>
c00166ce:	45                   	inc    ebp
c00166cf:	40                   	inc    eax
c00166d0:	3c 5b                	cmp    al,0x5b
c00166d2:	75 90                	jne    c0016664 <LogicalDisk::assignDriveLetter()+0x3c>
c00166d4:	31 c0                	xor    eax,eax
c00166d6:	83 c4 14             	add    esp,0x14
c00166d9:	5b                   	pop    ebx
c00166da:	5e                   	pop    esi
c00166db:	5f                   	pop    edi
c00166dc:	5d                   	pop    ebp
c00166dd:	c3                   	ret    

c00166de <LogicalDisk::mount()>:
c00166de:	56                   	push   esi
c00166df:	53                   	push   ebx
c00166e0:	50                   	push   eax
c00166e1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00166e5:	8b 1d 14 f4 02 c0    	mov    ebx,DWORD PTR ds:0xc002f414
c00166eb:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00166f5:	85 db                	test   ebx,ebx
c00166f7:	74 50                	je     c0016749 <LogicalDisk::mount()+0x6b>
c00166f9:	50                   	push   eax
c00166fa:	50                   	push   eax
c00166fb:	ff 35 c8 27 03 c0    	push   DWORD PTR ds:0xc00327c8
c0016701:	68 14 bf 02 c0       	push   0xc002bf14
c0016706:	e8 48 c7 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001670b:	83 c4 0c             	add    esp,0xc
c001670e:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0016715:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016717:	83 e8 41             	sub    eax,0x41
c001671a:	50                   	push   eax
c001671b:	56                   	push   esi
c001671c:	53                   	push   ebx
c001671d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016720:	83 c4 10             	add    esp,0x10
c0016723:	84 c0                	test   al,al
c0016725:	74 08                	je     c001672f <LogicalDisk::mount()+0x51>
c0016727:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c001672d:	eb 1c                	jmp    c001674b <LogicalDisk::mount()+0x6d>
c001672f:	51                   	push   ecx
c0016730:	51                   	push   ecx
c0016731:	ff 35 c8 27 03 c0    	push   DWORD PTR ds:0xc00327c8
c0016737:	68 2f bf 02 c0       	push   0xc002bf2f
c001673c:	e8 12 c7 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0016741:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0016744:	83 c4 10             	add    esp,0x10
c0016747:	eb ac                	jmp    c00166f5 <LogicalDisk::mount()+0x17>
c0016749:	31 c0                	xor    eax,eax
c001674b:	5a                   	pop    edx
c001674c:	5b                   	pop    ebx
c001674d:	5e                   	pop    esi
c001674e:	c3                   	ret    
c001674f:	90                   	nop

c0016750 <LogicalDisk::unmount()>:
c0016750:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016754:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001675e:	c3                   	ret    
c001675f:	90                   	nop

c0016760 <LogicalDisk::eject()>:
c0016760:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016764:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001676a:	8b 10                	mov    edx,DWORD PTR [eax]
c001676c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016770:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0016773:	90                   	nop

c0016774 <LogicalDisk::unassignDriveLetter()>:
c0016774:	57                   	push   edi
c0016775:	56                   	push   esi
c0016776:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001677a:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0016781:	84 c9                	test   cl,cl
c0016783:	75 0f                	jne    c0016794 <LogicalDisk::unassignDriveLetter()+0x20>
c0016785:	c7 44 24 0c 4a bf 02 c0 	mov    DWORD PTR [esp+0xc],0xc002bf4a
c001678d:	5e                   	pop    esi
c001678e:	5f                   	pop    edi
c001678f:	e9 59 41 00 00       	jmp    c001a8ed <Krnl::panic(char const*)>
c0016794:	83 e9 41             	sub    ecx,0x41
c0016797:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c001679e:	b8 01 00 00 00       	mov    eax,0x1
c00167a3:	c7 04 8d a0 f8 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd0760],0x0
c00167ae:	d3 e0                	shl    eax,cl
c00167b0:	89 c7                	mov    edi,eax
c00167b2:	f7 d0                	not    eax
c00167b4:	c1 ff 1f             	sar    edi,0x1f
c00167b7:	21 05 80 f8 02 c0    	and    DWORD PTR ds:0xc002f880,eax
c00167bd:	89 fe                	mov    esi,edi
c00167bf:	f7 d6                	not    esi
c00167c1:	21 35 84 f8 02 c0    	and    DWORD PTR ds:0xc002f884,esi
c00167c7:	5e                   	pop    esi
c00167c8:	5f                   	pop    edi
c00167c9:	c3                   	ret    

c00167ca <LogicalDisk::read(unsigned long long, int, void*)>:
c00167ca:	57                   	push   edi
c00167cb:	56                   	push   esi
c00167cc:	53                   	push   ebx
c00167cd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00167d1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00167d5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00167d9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00167dd:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00167e3:	77 41                	ja     c0016826 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c00167e5:	99                   	cdq    
c00167e6:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00167ec:	01 c8                	add    eax,ecx
c00167ee:	11 da                	adc    edx,ebx
c00167f0:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00167f6:	19 d7                	sbb    edi,edx
c00167f8:	72 33                	jb     c001682d <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c00167fa:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016800:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016806:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001680a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001680e:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016814:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001681a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001681e:	5b                   	pop    ebx
c001681f:	5e                   	pop    esi
c0016820:	5f                   	pop    edi
c0016821:	e9 ec 0a 00 00       	jmp    c0017312 <VCache::read(unsigned long long, int, void*)>
c0016826:	b8 05 00 00 00       	mov    eax,0x5
c001682b:	eb 05                	jmp    c0016832 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c001682d:	b8 07 00 00 00       	mov    eax,0x7
c0016832:	5b                   	pop    ebx
c0016833:	5e                   	pop    esi
c0016834:	5f                   	pop    edi
c0016835:	c3                   	ret    

c0016836 <LogicalDisk::write(unsigned long long, int, void*)>:
c0016836:	57                   	push   edi
c0016837:	56                   	push   esi
c0016838:	53                   	push   ebx
c0016839:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001683d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016841:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016845:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016849:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001684f:	77 41                	ja     c0016892 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0016851:	99                   	cdq    
c0016852:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016858:	01 c8                	add    eax,ecx
c001685a:	11 da                	adc    edx,ebx
c001685c:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016862:	19 d7                	sbb    edi,edx
c0016864:	72 33                	jb     c0016899 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0016866:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001686c:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016872:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016876:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001687a:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016880:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016886:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001688a:	5b                   	pop    ebx
c001688b:	5e                   	pop    esi
c001688c:	5f                   	pop    edi
c001688d:	e9 96 09 00 00       	jmp    c0017228 <VCache::write(unsigned long long, int, void*)>
c0016892:	b8 05 00 00 00       	mov    eax,0x5
c0016897:	eb 05                	jmp    c001689e <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0016899:	b8 07 00 00 00       	mov    eax,0x7
c001689e:	5b                   	pop    ebx
c001689f:	5e                   	pop    esi
c00168a0:	5f                   	pop    edi
c00168a1:	c3                   	ret    

c00168a2 <Mouse::Mouse(char const*)>:
c00168a2:	83 ec 0c             	sub    esp,0xc
c00168a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168a9:	83 ec 08             	sub    esp,0x8
c00168ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168b0:	50                   	push   eax
c00168b1:	e8 ae db ff ff       	call   c0014464 <Device::Device(char const*)>
c00168b6:	83 c4 10             	add    esp,0x10
c00168b9:	ba a0 bf 02 c0       	mov    edx,0xc002bfa0
c00168be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168c2:	89 10                	mov    DWORD PTR [eax],edx
c00168c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168c8:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c00168d2:	90                   	nop
c00168d3:	83 c4 0c             	add    esp,0xc
c00168d6:	c3                   	ret    
c00168d7:	90                   	nop

c00168d8 <Mouse::~Mouse()>:
c00168d8:	83 ec 0c             	sub    esp,0xc
c00168db:	ba a0 bf 02 c0       	mov    edx,0xc002bfa0
c00168e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168e4:	89 10                	mov    DWORD PTR [eax],edx
c00168e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168ea:	83 ec 0c             	sub    esp,0xc
c00168ed:	50                   	push   eax
c00168ee:	e8 67 d8 ff ff       	call   c001415a <Device::~Device()>
c00168f3:	83 c4 10             	add    esp,0x10
c00168f6:	90                   	nop
c00168f7:	83 c4 0c             	add    esp,0xc
c00168fa:	c3                   	ret    
c00168fb:	90                   	nop

c00168fc <Mouse::~Mouse()>:
c00168fc:	83 ec 0c             	sub    esp,0xc
c00168ff:	83 ec 0c             	sub    esp,0xc
c0016902:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016906:	e8 cd ff ff ff       	call   c00168d8 <Mouse::~Mouse()>
c001690b:	83 c4 10             	add    esp,0x10
c001690e:	83 ec 08             	sub    esp,0x8
c0016911:	68 58 01 00 00       	push   0x158
c0016916:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001691a:	e8 54 c4 ff ff       	call   c0012d73 <operator delete(void*, unsigned long)>
c001691f:	83 c4 10             	add    esp,0x10
c0016922:	83 c4 0c             	add    esp,0xc
c0016925:	c3                   	ret    

c0016926 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016926:	55                   	push   ebp
c0016927:	57                   	push   edi
c0016928:	56                   	push   esi
c0016929:	53                   	push   ebx
c001692a:	81 ec 20 01 00 00    	sub    esp,0x120
c0016930:	8b b4 24 38 01 00 00 	mov    esi,DWORD PTR [esp+0x138]
c0016937:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001693e:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0016945:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c001694c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016950:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016954:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016958:	56                   	push   esi
c0016959:	68 c4 bf 02 c0       	push   0xc002bfc4
c001695e:	e8 f0 c4 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0016963:	58                   	pop    eax
c0016964:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001696b:	e8 f0 db ff ff       	call   c0014560 <Device::getName()>
c0016970:	5a                   	pop    edx
c0016971:	59                   	pop    ecx
c0016972:	50                   	push   eax
c0016973:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c0016977:	53                   	push   ebx
c0016978:	e8 ab 9e fe ff       	call   c0000828 <strcpy>
c001697d:	5d                   	pop    ebp
c001697e:	58                   	pop    eax
c001697f:	68 f5 bf 02 c0       	push   0xc002bff5
c0016984:	53                   	push   ebx
c0016985:	e8 de 9f fe ff       	call   c0000968 <strcat>
c001698a:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0016991:	e8 12 8f ff ff       	call   c000f8a8 <malloc>
c0016996:	83 c4 0c             	add    esp,0xc
c0016999:	89 c5                	mov    ebp,eax
c001699b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001699f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00169a3:	57                   	push   edi
c00169a4:	56                   	push   esi
c00169a5:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00169ac:	53                   	push   ebx
c00169ad:	50                   	push   eax
c00169ae:	e8 bf fb ff ff       	call   c0016572 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00169b3:	83 c4 14             	add    esp,0x14
c00169b6:	55                   	push   ebp
c00169b7:	e8 6c fc ff ff       	call   c0016628 <LogicalDisk::assignDriveLetter()>
c00169bc:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00169bf:	0f be d8             	movsx  ebx,al
c00169c2:	e8 17 fd ff ff       	call   c00166de <LogicalDisk::mount()>
c00169c7:	58                   	pop    eax
c00169c8:	5a                   	pop    edx
c00169c9:	55                   	push   ebp
c00169ca:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00169d1:	e8 9e d8 ff ff       	call   c0014274 <Device::addChild(Device*)>
c00169d6:	59                   	pop    ecx
c00169d7:	5e                   	pop    esi
c00169d8:	53                   	push   ebx
c00169d9:	68 00 c0 02 c0       	push   0xc002c000
c00169de:	e8 70 c4 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c00169e3:	81 c4 2c 01 00 00    	add    esp,0x12c
c00169e9:	5b                   	pop    ebx
c00169ea:	5e                   	pop    esi
c00169eb:	5f                   	pop    edi
c00169ec:	5d                   	pop    ebp
c00169ed:	c3                   	ret    

c00169ee <createPartitionsForDisk(PhysicalDisk*)>:
c00169ee:	55                   	push   ebp
c00169ef:	57                   	push   edi
c00169f0:	56                   	push   esi
c00169f1:	53                   	push   ebx
c00169f2:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00169f8:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00169ff:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016a05:	3d 00 02 00 00       	cmp    eax,0x200
c0016a0a:	74 27                	je     c0016a33 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0016a0c:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0016a12:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0016a18:	83 ec 10             	sub    esp,0x10
c0016a1b:	0f a4 f7 0a          	shld   edi,esi,0xa
c0016a1f:	99                   	cdq    
c0016a20:	c1 e6 0a             	shl    esi,0xa
c0016a23:	52                   	push   edx
c0016a24:	89 fd                	mov    ebp,edi
c0016a26:	50                   	push   eax
c0016a27:	55                   	push   ebp
c0016a28:	56                   	push   esi
c0016a29:	e8 b6 0b 01 00       	call   c00275e4 <__udivdi3>
c0016a2e:	e9 b1 00 00 00       	jmp    c0016ae4 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016a33:	83 ec 0c             	sub    esp,0xc
c0016a36:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a38:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0016a3c:	56                   	push   esi
c0016a3d:	6a 01                	push   0x1
c0016a3f:	6a 00                	push   0x0
c0016a41:	6a 00                	push   0x0
c0016a43:	53                   	push   ebx
c0016a44:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0016a47:	83 c4 20             	add    esp,0x20
c0016a4a:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016a52:	75 0a                	jne    c0016a5e <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016a54:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0016a5c:	74 2c                	je     c0016a8a <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0016a5e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016a64:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016a6a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016a70:	83 ec 10             	sub    esp,0x10
c0016a73:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016a77:	89 f7                	mov    edi,esi
c0016a79:	c1 e0 0a             	shl    eax,0xa
c0016a7c:	c1 ff 1f             	sar    edi,0x1f
c0016a7f:	57                   	push   edi
c0016a80:	56                   	push   esi
c0016a81:	52                   	push   edx
c0016a82:	50                   	push   eax
c0016a83:	e8 5c 0b 01 00       	call   c00275e4 <__udivdi3>
c0016a88:	eb 5a                	jmp    c0016ae4 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016a8a:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016a91:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016a98:	83 e1 7f             	and    ecx,0x7f
c0016a9b:	83 e0 7f             	and    eax,0x7f
c0016a9e:	01 c1                	add    ecx,eax
c0016aa0:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016aa7:	83 e0 7f             	and    eax,0x7f
c0016aaa:	01 c1                	add    ecx,eax
c0016aac:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016ab3:	83 e0 7f             	and    eax,0x7f
c0016ab6:	00 c1                	add    cl,al
c0016ab8:	74 41                	je     c0016afb <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0016aba:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016ac0:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016ac6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016acc:	83 ec 10             	sub    esp,0x10
c0016acf:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016ad3:	89 f7                	mov    edi,esi
c0016ad5:	c1 e0 0a             	shl    eax,0xa
c0016ad8:	c1 ff 1f             	sar    edi,0x1f
c0016adb:	57                   	push   edi
c0016adc:	56                   	push   esi
c0016add:	52                   	push   edx
c0016ade:	50                   	push   eax
c0016adf:	e8 00 0b 01 00       	call   c00275e4 <__udivdi3>
c0016ae4:	83 c4 14             	add    esp,0x14
c0016ae7:	52                   	push   edx
c0016ae8:	50                   	push   eax
c0016ae9:	6a 00                	push   0x0
c0016aeb:	6a 00                	push   0x0
c0016aed:	53                   	push   ebx
c0016aee:	e8 33 fe ff ff       	call   c0016926 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016af3:	83 c4 20             	add    esp,0x20
c0016af6:	e9 79 01 00 00       	jmp    c0016c74 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016afb:	89 f0                	mov    eax,esi
c0016afd:	31 f6                	xor    esi,esi
c0016aff:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016b06:	75 02                	jne    c0016b0a <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016b08:	89 f1                	mov    ecx,esi
c0016b0a:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016b11:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016b18:	c1 e2 08             	shl    edx,0x8
c0016b1b:	c1 e7 10             	shl    edi,0x10
c0016b1e:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016b26:	09 fa                	or     edx,edi
c0016b28:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016b30:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016b37:	83 c0 10             	add    eax,0x10
c0016b3a:	09 fa                	or     edx,edi
c0016b3c:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016b43:	c1 e7 18             	shl    edi,0x18
c0016b46:	09 fa                	or     edx,edi
c0016b48:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016b4f:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016b53:	c1 e7 10             	shl    edi,0x10
c0016b56:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016b5d:	c1 e2 08             	shl    edx,0x8
c0016b60:	09 fa                	or     edx,edi
c0016b62:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016b69:	09 fa                	or     edx,edi
c0016b6b:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016b72:	c1 e7 18             	shl    edi,0x18
c0016b75:	09 fa                	or     edx,edi
c0016b77:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016b7b:	46                   	inc    esi
c0016b7c:	83 fe 04             	cmp    esi,0x4
c0016b7f:	0f 85 7a ff ff ff    	jne    c0016aff <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016b85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b89:	83 f0 01             	xor    eax,0x1
c0016b8c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016b90:	75 57                	jne    c0016be9 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016b92:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016b96:	83 f0 01             	xor    eax,0x1
c0016b99:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016b9d:	75 4a                	jne    c0016be9 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016b9f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016ba3:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016bab:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016bb3:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016bb9:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016bbf:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016bc5:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016bc9:	89 f7                	mov    edi,esi
c0016bcb:	c1 e0 0a             	shl    eax,0xa
c0016bce:	c1 ff 1f             	sar    edi,0x1f
c0016bd1:	57                   	push   edi
c0016bd2:	56                   	push   esi
c0016bd3:	52                   	push   edx
c0016bd4:	50                   	push   eax
c0016bd5:	e8 0a 0a 01 00       	call   c00275e4 <__udivdi3>
c0016bda:	83 c4 10             	add    esp,0x10
c0016bdd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016be1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016be5:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016be9:	84 c9                	test   cl,cl
c0016beb:	74 53                	je     c0016c40 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016bed:	0f b6 c9             	movzx  ecx,cl
c0016bf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bf4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016bf8:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016bfc:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016c00:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016c04:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016c08:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016c0c:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016c10:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016c14:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016c18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016c1c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016c20:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016c24:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016c28:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016c2c:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016c30:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016c34:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016c38:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016c3c:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016c40:	31 ed                	xor    ebp,ebp
c0016c42:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016c46:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016c4a:	89 f8                	mov    eax,edi
c0016c4c:	09 f0                	or     eax,esi
c0016c4e:	74 1e                	je     c0016c6e <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016c50:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016c54:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016c58:	89 d1                	mov    ecx,edx
c0016c5a:	09 c1                	or     ecx,eax
c0016c5c:	74 10                	je     c0016c6e <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016c5e:	83 ec 0c             	sub    esp,0xc
c0016c61:	57                   	push   edi
c0016c62:	56                   	push   esi
c0016c63:	52                   	push   edx
c0016c64:	50                   	push   eax
c0016c65:	53                   	push   ebx
c0016c66:	e8 bb fc ff ff       	call   c0016926 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016c6b:	83 c4 20             	add    esp,0x20
c0016c6e:	45                   	inc    ebp
c0016c6f:	83 fd 04             	cmp    ebp,0x4
c0016c72:	75 ce                	jne    c0016c42 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016c74:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016c7a:	5b                   	pop    ebx
c0016c7b:	5e                   	pop    esi
c0016c7c:	5f                   	pop    edi
c0016c7d:	5d                   	pop    ebp
c0016c7e:	c3                   	ret    
c0016c7f:	90                   	nop

c0016c80 <Serial::Serial(char const*)>:
c0016c80:	83 ec 0c             	sub    esp,0xc
c0016c83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c87:	83 ec 08             	sub    esp,0x8
c0016c8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c8e:	50                   	push   eax
c0016c8f:	e8 d0 d7 ff ff       	call   c0014464 <Device::Device(char const*)>
c0016c94:	83 c4 10             	add    esp,0x10
c0016c97:	ba 2c c0 02 c0       	mov    edx,0xc002c02c
c0016c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ca0:	89 10                	mov    DWORD PTR [eax],edx
c0016ca2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ca6:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016cb0:	90                   	nop
c0016cb1:	83 c4 0c             	add    esp,0xc
c0016cb4:	c3                   	ret    
c0016cb5:	90                   	nop

c0016cb6 <Serial::~Serial()>:
c0016cb6:	83 ec 0c             	sub    esp,0xc
c0016cb9:	ba 2c c0 02 c0       	mov    edx,0xc002c02c
c0016cbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cc2:	89 10                	mov    DWORD PTR [eax],edx
c0016cc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cc8:	83 ec 0c             	sub    esp,0xc
c0016ccb:	50                   	push   eax
c0016ccc:	e8 89 d4 ff ff       	call   c001415a <Device::~Device()>
c0016cd1:	83 c4 10             	add    esp,0x10
c0016cd4:	90                   	nop
c0016cd5:	83 c4 0c             	add    esp,0xc
c0016cd8:	c3                   	ret    
c0016cd9:	90                   	nop

c0016cda <Serial::~Serial()>:
c0016cda:	83 ec 0c             	sub    esp,0xc
c0016cdd:	83 ec 0c             	sub    esp,0xc
c0016ce0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016ce4:	e8 cd ff ff ff       	call   c0016cb6 <Serial::~Serial()>
c0016ce9:	83 c4 10             	add    esp,0x10
c0016cec:	83 ec 08             	sub    esp,0x8
c0016cef:	68 58 01 00 00       	push   0x158
c0016cf4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cf8:	e8 76 c0 ff ff       	call   c0012d73 <operator delete(void*, unsigned long)>
c0016cfd:	83 c4 10             	add    esp,0x10
c0016d00:	83 c4 0c             	add    esp,0xc
c0016d03:	c3                   	ret    

c0016d04 <Timer::Timer(char const*)>:
c0016d04:	83 ec 0c             	sub    esp,0xc
c0016d07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d0b:	83 ec 08             	sub    esp,0x8
c0016d0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d12:	50                   	push   eax
c0016d13:	e8 4c d7 ff ff       	call   c0014464 <Device::Device(char const*)>
c0016d18:	83 c4 10             	add    esp,0x10
c0016d1b:	ba 70 c0 02 c0       	mov    edx,0xc002c070
c0016d20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d24:	89 10                	mov    DWORD PTR [eax],edx
c0016d26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d2a:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016d34:	90                   	nop
c0016d35:	83 c4 0c             	add    esp,0xc
c0016d38:	c3                   	ret    
c0016d39:	90                   	nop

c0016d3a <Timer::~Timer()>:
c0016d3a:	83 ec 0c             	sub    esp,0xc
c0016d3d:	ba 70 c0 02 c0       	mov    edx,0xc002c070
c0016d42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d46:	89 10                	mov    DWORD PTR [eax],edx
c0016d48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d4c:	83 ec 0c             	sub    esp,0xc
c0016d4f:	50                   	push   eax
c0016d50:	e8 05 d4 ff ff       	call   c001415a <Device::~Device()>
c0016d55:	83 c4 10             	add    esp,0x10
c0016d58:	90                   	nop
c0016d59:	83 c4 0c             	add    esp,0xc
c0016d5c:	c3                   	ret    
c0016d5d:	90                   	nop

c0016d5e <Timer::~Timer()>:
c0016d5e:	83 ec 0c             	sub    esp,0xc
c0016d61:	83 ec 0c             	sub    esp,0xc
c0016d64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d68:	e8 cd ff ff ff       	call   c0016d3a <Timer::~Timer()>
c0016d6d:	83 c4 10             	add    esp,0x10
c0016d70:	83 ec 08             	sub    esp,0x8
c0016d73:	68 5c 01 00 00       	push   0x15c
c0016d78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d7c:	e8 f2 bf ff ff       	call   c0012d73 <operator delete(void*, unsigned long)>
c0016d81:	83 c4 10             	add    esp,0x10
c0016d84:	83 c4 0c             	add    esp,0xc
c0016d87:	c3                   	ret    

c0016d88 <Timer::read()>:
c0016d88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d8c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016d92:	c3                   	ret    

c0016d93 <timerHandler(unsigned long long)>:
c0016d93:	55                   	push   ebp
c0016d94:	57                   	push   edi
c0016d95:	56                   	push   esi
c0016d96:	53                   	push   ebx
c0016d97:	83 ec 0c             	sub    esp,0xc
c0016d9a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016d9e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016da2:	01 35 10 f9 02 c0    	add    DWORD PTR ds:0xc002f910,esi
c0016da8:	11 3d 14 f9 02 c0    	adc    DWORD PTR ds:0xc002f914,edi
c0016dae:	80 3d 8d f2 02 c0 00 	cmp    BYTE PTR ds:0xc002f28d,0x0
c0016db5:	0f 84 42 01 00 00    	je     c0016efd <timerHandler(unsigned long long)+0x16a>
c0016dbb:	fa                   	cli    
c0016dbc:	ff 05 c8 27 03 c0    	inc    DWORD PTR ds:0xc00327c8
c0016dc2:	83 ec 0c             	sub    esp,0xc
c0016dc5:	ff 05 c4 27 03 c0    	inc    DWORD PTR ds:0xc00327c4
c0016dcb:	68 d8 27 03 c0       	push   0xc00327d8
c0016dd0:	e8 95 28 01 00       	call   c002966a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016dd5:	83 c4 10             	add    esp,0x10
c0016dd8:	84 c0                	test   al,al
c0016dda:	0f 85 a2 00 00 00    	jne    c0016e82 <timerHandler(unsigned long long)+0xef>
c0016de0:	83 ec 0c             	sub    esp,0xc
c0016de3:	68 d8 27 03 c0       	push   0xc00327d8
c0016de8:	e8 99 28 01 00       	call   c0029686 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016ded:	83 c4 10             	add    esp,0x10
c0016df0:	89 c3                	mov    ebx,eax
c0016df2:	83 ec 0c             	sub    esp,0xc
c0016df5:	68 d8 27 03 c0       	push   0xc00327d8
c0016dfa:	e8 87 28 01 00       	call   c0029686 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016dff:	c7 04 24 d8 27 03 c0 	mov    DWORD PTR [esp],0xc00327d8
c0016e06:	89 c5                	mov    ebp,eax
c0016e08:	e8 81 28 01 00       	call   c002968e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016e0d:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016e10:	83 c4 10             	add    esp,0x10
c0016e13:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016e16:	39 15 10 f9 02 c0    	cmp    DWORD PTR ds:0xc002f910,edx
c0016e1c:	a1 14 f9 02 c0       	mov    eax,ds:0xc002f914
c0016e21:	19 c8                	sbb    eax,ecx
c0016e23:	72 21                	jb     c0016e46 <timerHandler(unsigned long long)+0xb3>
c0016e25:	83 ec 0c             	sub    esp,0xc
c0016e28:	55                   	push   ebp
c0016e29:	e8 36 7d 00 00       	call   c001eb64 <unblockTask(ThreadControlBlock*)>
c0016e2e:	83 c4 10             	add    esp,0x10
c0016e31:	39 eb                	cmp    ebx,ebp
c0016e33:	75 21                	jne    c0016e56 <timerHandler(unsigned long long)+0xc3>
c0016e35:	83 ec 0c             	sub    esp,0xc
c0016e38:	68 d8 27 03 c0       	push   0xc00327d8
c0016e3d:	e8 44 28 01 00       	call   c0029686 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e42:	89 c3                	mov    ebx,eax
c0016e44:	eb 0d                	jmp    c0016e53 <timerHandler(unsigned long long)+0xc0>
c0016e46:	50                   	push   eax
c0016e47:	50                   	push   eax
c0016e48:	55                   	push   ebp
c0016e49:	68 d8 27 03 c0       	push   0xc00327d8
c0016e4e:	e8 e9 28 01 00       	call   c002973c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016e53:	83 c4 10             	add    esp,0x10
c0016e56:	83 ec 0c             	sub    esp,0xc
c0016e59:	68 d8 27 03 c0       	push   0xc00327d8
c0016e5e:	e8 07 28 01 00       	call   c002966a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016e63:	83 c4 10             	add    esp,0x10
c0016e66:	84 c0                	test   al,al
c0016e68:	75 18                	jne    c0016e82 <timerHandler(unsigned long long)+0xef>
c0016e6a:	83 ec 0c             	sub    esp,0xc
c0016e6d:	68 d8 27 03 c0       	push   0xc00327d8
c0016e72:	e8 0f 28 01 00       	call   c0029686 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e77:	83 c4 10             	add    esp,0x10
c0016e7a:	39 d8                	cmp    eax,ebx
c0016e7c:	0f 85 70 ff ff ff    	jne    c0016df2 <timerHandler(unsigned long long)+0x5f>
c0016e82:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e87:	83 78 38 00          	cmp    DWORD PTR [eax+0x38],0x0
c0016e8b:	74 3d                	je     c0016eca <timerHandler(unsigned long long)+0x137>
c0016e8d:	80 3d 8c f2 02 c0 00 	cmp    BYTE PTR ds:0xc002f28c,0x0
c0016e94:	74 34                	je     c0016eca <timerHandler(unsigned long long)+0x137>
c0016e96:	fa                   	cli    
c0016e97:	ff 05 c8 27 03 c0    	inc    DWORD PTR ds:0xc00327c8
c0016e9d:	31 d2                	xor    edx,edx
c0016e9f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ea4:	89 f9                	mov    ecx,edi
c0016ea6:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016ea9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016eae:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016eb1:	39 c6                	cmp    esi,eax
c0016eb3:	19 d1                	sbb    ecx,edx
c0016eb5:	72 05                	jb     c0016ebc <timerHandler(unsigned long long)+0x129>
c0016eb7:	e8 e4 77 00 00       	call   c001e6a0 <schedule()>
c0016ebc:	a1 c8 27 03 c0       	mov    eax,ds:0xc00327c8
c0016ec1:	48                   	dec    eax
c0016ec2:	a3 c8 27 03 c0       	mov    ds:0xc00327c8,eax
c0016ec7:	75 01                	jne    c0016eca <timerHandler(unsigned long long)+0x137>
c0016ec9:	fb                   	sti    
c0016eca:	a1 c4 27 03 c0       	mov    eax,ds:0xc00327c4
c0016ecf:	48                   	dec    eax
c0016ed0:	a3 c4 27 03 c0       	mov    ds:0xc00327c4,eax
c0016ed5:	75 18                	jne    c0016eef <timerHandler(unsigned long long)+0x15c>
c0016ed7:	83 3d c0 27 03 c0 00 	cmp    DWORD PTR ds:0xc00327c0,0x0
c0016ede:	74 0f                	je     c0016eef <timerHandler(unsigned long long)+0x15c>
c0016ee0:	c7 05 c0 27 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00327c0,0x0
c0016eea:	e8 b1 77 00 00       	call   c001e6a0 <schedule()>
c0016eef:	a1 c8 27 03 c0       	mov    eax,ds:0xc00327c8
c0016ef4:	48                   	dec    eax
c0016ef5:	a3 c8 27 03 c0       	mov    ds:0xc00327c8,eax
c0016efa:	75 01                	jne    c0016efd <timerHandler(unsigned long long)+0x16a>
c0016efc:	fb                   	sti    
c0016efd:	83 c4 0c             	add    esp,0xc
c0016f00:	5b                   	pop    ebx
c0016f01:	5e                   	pop    esi
c0016f02:	5f                   	pop    edi
c0016f03:	5d                   	pop    ebp
c0016f04:	c3                   	ret    

c0016f05 <setupTimer(int)>:
c0016f05:	57                   	push   edi
c0016f06:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c0016f0b:	56                   	push   esi
c0016f0c:	53                   	push   ebx
c0016f0d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016f11:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016f17:	83 ec 0c             	sub    esp,0xc
c0016f1a:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016f20:	e8 3b d6 ff ff       	call   c0014560 <Device::getName()>
c0016f25:	83 c4 10             	add    esp,0x10
c0016f28:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016f2b:	0f 85 8d 00 00 00    	jne    c0016fbe <setupTimer(int)+0xb9>
c0016f31:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c0016f36:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016f3d:	74 7f                	je     c0016fbe <setupTimer(int)+0xb9>
c0016f3f:	83 ec 0c             	sub    esp,0xc
c0016f42:	68 5c 01 00 00       	push   0x15c
c0016f47:	e8 5c 89 ff ff       	call   c000f8a8 <malloc>
c0016f4c:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f4f:	89 c3                	mov    ebx,eax
c0016f51:	e8 68 02 01 00       	call   c00271be <PIT::PIT()>
c0016f56:	59                   	pop    ecx
c0016f57:	5f                   	pop    edi
c0016f58:	53                   	push   ebx
c0016f59:	ff 35 88 f2 02 c0    	push   DWORD PTR ds:0xc002f288
c0016f5f:	e8 10 d3 ff ff       	call   c0014274 <Device::addChild(Device*)>
c0016f64:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016f66:	6a 00                	push   0x0
c0016f68:	6a 00                	push   0x0
c0016f6a:	56                   	push   esi
c0016f6b:	53                   	push   ebx
c0016f6c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016f6f:	83 c4 14             	add    esp,0x14
c0016f72:	68 60 01 00 00       	push   0x160
c0016f77:	e8 2c 89 ff ff       	call   c000f8a8 <malloc>
c0016f7c:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f7f:	89 c7                	mov    edi,eax
c0016f81:	e8 e8 00 01 00       	call   c002706e <APICTimer::APICTimer()>
c0016f86:	6a 00                	push   0x0
c0016f88:	6a 00                	push   0x0
c0016f8a:	56                   	push   esi
c0016f8b:	57                   	push   edi
c0016f8c:	e8 df ff 00 00       	call   c0026f70 <APICTimer::open(int, int, void*)>
c0016f91:	83 c4 20             	add    esp,0x20
c0016f94:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016f96:	6a 00                	push   0x0
c0016f98:	6a 00                	push   0x0
c0016f9a:	6a 00                	push   0x0
c0016f9c:	53                   	push   ebx
c0016f9d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016fa0:	58                   	pop    eax
c0016fa1:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c0016fa6:	5a                   	pop    edx
c0016fa7:	57                   	push   edi
c0016fa8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016fae:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016fb4:	e8 bb d2 ff ff       	call   c0014274 <Device::addChild(Device*)>
c0016fb9:	83 c4 10             	add    esp,0x10
c0016fbc:	eb 33                	jmp    c0016ff1 <setupTimer(int)+0xec>
c0016fbe:	83 ec 0c             	sub    esp,0xc
c0016fc1:	68 5c 01 00 00       	push   0x15c
c0016fc6:	e8 dd 88 ff ff       	call   c000f8a8 <malloc>
c0016fcb:	89 04 24             	mov    DWORD PTR [esp],eax
c0016fce:	89 c3                	mov    ebx,eax
c0016fd0:	e8 e9 01 01 00       	call   c00271be <PIT::PIT()>
c0016fd5:	58                   	pop    eax
c0016fd6:	5a                   	pop    edx
c0016fd7:	53                   	push   ebx
c0016fd8:	ff 35 88 f2 02 c0    	push   DWORD PTR ds:0xc002f288
c0016fde:	e8 91 d2 ff ff       	call   c0014274 <Device::addChild(Device*)>
c0016fe3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016fe5:	6a 00                	push   0x0
c0016fe7:	6a 00                	push   0x0
c0016fe9:	56                   	push   esi
c0016fea:	53                   	push   ebx
c0016feb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016fee:	83 c4 20             	add    esp,0x20
c0016ff1:	89 d8                	mov    eax,ebx
c0016ff3:	5b                   	pop    ebx
c0016ff4:	5e                   	pop    esi
c0016ff5:	5f                   	pop    edi
c0016ff6:	c3                   	ret    
c0016ff7:	90                   	nop

c0016ff8 <VCache::VCache(PhysicalDisk*)>:
c0016ff8:	53                   	push   ebx
c0016ff9:	83 ec 18             	sub    esp,0x18
c0016ffc:	ba a0 c0 02 c0       	mov    edx,0xc002c0a0
c0017001:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017005:	89 10                	mov    DWORD PTR [eax],edx
c0017007:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001700b:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0017012:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017016:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c001701d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017021:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0017028:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001702f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017033:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001703a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0017041:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017045:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001704c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017050:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0017054:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017058:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c001705f:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0017066:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001706a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001706e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017072:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0017076:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001707a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001707e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017082:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0017089:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0017091:	83 ec 0c             	sub    esp,0xc
c0017094:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017098:	e8 0b 88 ff ff       	call   c000f8a8 <malloc>
c001709d:	83 c4 10             	add    esp,0x10
c00170a0:	89 c3                	mov    ebx,eax
c00170a2:	83 ec 0c             	sub    esp,0xc
c00170a5:	53                   	push   ebx
c00170a6:	e8 9f 73 00 00       	call   c001e44a <Mutex::Mutex()>
c00170ab:	83 c4 10             	add    esp,0x10
c00170ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170b2:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00170b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170b9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00170bd:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00170c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170c4:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c00170cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00170cf:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00170d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170d9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00170dc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00170e0:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c00170e6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00170ec:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00170f0:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00170f3:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c00170f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170fa:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c00170fe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017102:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017108:	05 00 01 00 00       	add    eax,0x100
c001710d:	c1 e0 04             	shl    eax,0x4
c0017110:	83 ec 0c             	sub    esp,0xc
c0017113:	50                   	push   eax
c0017114:	e8 8f 87 ff ff       	call   c000f8a8 <malloc>
c0017119:	83 c4 10             	add    esp,0x10
c001711c:	89 c2                	mov    edx,eax
c001711e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017122:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017125:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017129:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0017130:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017134:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0017138:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001713c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017142:	c1 e0 07             	shl    eax,0x7
c0017145:	83 ec 0c             	sub    esp,0xc
c0017148:	50                   	push   eax
c0017149:	e8 5a 87 ff ff       	call   c000f8a8 <malloc>
c001714e:	83 c4 10             	add    esp,0x10
c0017151:	89 c2                	mov    edx,eax
c0017153:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017157:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001715a:	90                   	nop
c001715b:	83 c4 18             	add    esp,0x18
c001715e:	5b                   	pop    ebx
c001715f:	c3                   	ret    

c0017160 <VCache::invalidateReadBuffer()>:
c0017160:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017164:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c001716a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001716e:	c3                   	ret    
c001716f:	90                   	nop

c0017170 <VCache::writeWriteBuffer()>:
c0017170:	53                   	push   ebx
c0017171:	83 ec 14             	sub    esp,0x14
c0017174:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0017178:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001717b:	8b 10                	mov    edx,DWORD PTR [eax]
c001717d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0017180:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0017183:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0017186:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0017189:	50                   	push   eax
c001718a:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001718d:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0017194:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c001719b:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c001719f:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c00171a6:	83 c4 28             	add    esp,0x28
c00171a9:	5b                   	pop    ebx
c00171aa:	c3                   	ret    
c00171ab:	90                   	nop

c00171ac <VCache::~VCache()>:
c00171ac:	83 ec 0c             	sub    esp,0xc
c00171af:	ba a0 c0 02 c0       	mov    edx,0xc002c0a0
c00171b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171b8:	89 10                	mov    DWORD PTR [eax],edx
c00171ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171be:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c00171c1:	84 c0                	test   al,al
c00171c3:	74 0f                	je     c00171d4 <VCache::~VCache()+0x28>
c00171c5:	83 ec 0c             	sub    esp,0xc
c00171c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00171cc:	e8 9f ff ff ff       	call   c0017170 <VCache::writeWriteBuffer()>
c00171d1:	83 c4 10             	add    esp,0x10
c00171d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171d8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00171db:	83 ec 0c             	sub    esp,0xc
c00171de:	50                   	push   eax
c00171df:	e8 d4 86 ff ff       	call   c000f8b8 <free>
c00171e4:	83 c4 10             	add    esp,0x10
c00171e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171eb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00171ee:	83 ec 0c             	sub    esp,0xc
c00171f1:	50                   	push   eax
c00171f2:	e8 c1 86 ff ff       	call   c000f8b8 <free>
c00171f7:	83 c4 10             	add    esp,0x10
c00171fa:	90                   	nop
c00171fb:	83 c4 0c             	add    esp,0xc
c00171fe:	c3                   	ret    
c00171ff:	90                   	nop

c0017200 <VCache::~VCache()>:
c0017200:	83 ec 0c             	sub    esp,0xc
c0017203:	83 ec 0c             	sub    esp,0xc
c0017206:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001720a:	e8 9d ff ff ff       	call   c00171ac <VCache::~VCache()>
c001720f:	83 c4 10             	add    esp,0x10
c0017212:	83 ec 08             	sub    esp,0x8
c0017215:	6a 44                	push   0x44
c0017217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001721b:	e8 53 bb ff ff       	call   c0012d73 <operator delete(void*, unsigned long)>
c0017220:	83 c4 10             	add    esp,0x10
c0017223:	83 c4 0c             	add    esp,0xc
c0017226:	c3                   	ret    
c0017227:	90                   	nop

c0017228 <VCache::write(unsigned long long, int, void*)>:
c0017228:	55                   	push   ebp
c0017229:	57                   	push   edi
c001722a:	56                   	push   esi
c001722b:	53                   	push   ebx
c001722c:	83 ec 18             	sub    esp,0x18
c001722f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0017233:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017237:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001723b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001723e:	e8 95 77 00 00       	call   c001e9d8 <Semaphore::acquire()>
c0017243:	83 c4 10             	add    esp,0x10
c0017246:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001724a:	74 0c                	je     c0017258 <VCache::write(unsigned long long, int, void*)+0x30>
c001724c:	83 ec 0c             	sub    esp,0xc
c001724f:	53                   	push   ebx
c0017250:	e8 0b ff ff ff       	call   c0017160 <VCache::invalidateReadBuffer()>
c0017255:	83 c4 10             	add    esp,0x10
c0017258:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001725c:	74 5c                	je     c00172ba <VCache::write(unsigned long long, int, void*)+0x92>
c001725e:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c0017261:	89 e8                	mov    eax,ebp
c0017263:	99                   	cdq    
c0017264:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0017267:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c001726a:	89 c1                	mov    ecx,eax
c001726c:	89 d0                	mov    eax,edx
c001726e:	31 f1                	xor    ecx,esi
c0017270:	31 f8                	xor    eax,edi
c0017272:	09 c1                	or     ecx,eax
c0017274:	75 38                	jne    c00172ae <VCache::write(unsigned long long, int, void*)+0x86>
c0017276:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c001727b:	75 31                	jne    c00172ae <VCache::write(unsigned long long, int, void*)+0x86>
c001727d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017280:	89 ef                	mov    edi,ebp
c0017282:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0017288:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001728c:	0f af f9             	imul   edi,ecx
c001728f:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c0017292:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017294:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0017297:	40                   	inc    eax
c0017298:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c001729b:	83 c0 80             	add    eax,0xffffff80
c001729e:	75 5c                	jne    c00172fc <VCache::write(unsigned long long, int, void*)+0xd4>
c00172a0:	83 ec 0c             	sub    esp,0xc
c00172a3:	53                   	push   ebx
c00172a4:	e8 c7 fe ff ff       	call   c0017170 <VCache::writeWriteBuffer()>
c00172a9:	83 c4 10             	add    esp,0x10
c00172ac:	eb 4e                	jmp    c00172fc <VCache::write(unsigned long long, int, void*)+0xd4>
c00172ae:	83 ec 0c             	sub    esp,0xc
c00172b1:	53                   	push   ebx
c00172b2:	e8 b9 fe ff ff       	call   c0017170 <VCache::writeWriteBuffer()>
c00172b7:	83 c4 10             	add    esp,0x10
c00172ba:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00172bd:	83 7c 24 2c 7f       	cmp    DWORD PTR [esp+0x2c],0x7f
c00172c2:	7f 22                	jg     c00172e6 <VCache::write(unsigned long long, int, void*)+0xbe>
c00172c4:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00172c7:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c00172ca:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00172ce:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c00172d2:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c00172d5:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c00172d8:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c00172de:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00172e2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00172e4:	eb 16                	jmp    c00172fc <VCache::write(unsigned long long, int, void*)+0xd4>
c00172e6:	83 ec 0c             	sub    esp,0xc
c00172e9:	8b 10                	mov    edx,DWORD PTR [eax]
c00172eb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00172ef:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00172f3:	57                   	push   edi
c00172f4:	56                   	push   esi
c00172f5:	50                   	push   eax
c00172f6:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00172f9:	83 c4 20             	add    esp,0x20
c00172fc:	83 ec 0c             	sub    esp,0xc
c00172ff:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017302:	e8 0b 7e 00 00       	call   c001f112 <Semaphore::release()>
c0017307:	83 c4 1c             	add    esp,0x1c
c001730a:	31 c0                	xor    eax,eax
c001730c:	5b                   	pop    ebx
c001730d:	5e                   	pop    esi
c001730e:	5f                   	pop    edi
c001730f:	5d                   	pop    ebp
c0017310:	c3                   	ret    
c0017311:	90                   	nop

c0017312 <VCache::read(unsigned long long, int, void*)>:
c0017312:	55                   	push   ebp
c0017313:	57                   	push   edi
c0017314:	56                   	push   esi
c0017315:	53                   	push   ebx
c0017316:	83 ec 28             	sub    esp,0x28
c0017319:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001731d:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017321:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017325:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0017329:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001732c:	e8 a7 76 00 00       	call   c001e9d8 <Semaphore::acquire()>
c0017331:	83 c4 10             	add    esp,0x10
c0017334:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0017338:	74 0c                	je     c0017346 <VCache::read(unsigned long long, int, void*)+0x34>
c001733a:	83 ec 0c             	sub    esp,0xc
c001733d:	53                   	push   ebx
c001733e:	e8 2d fe ff ff       	call   c0017170 <VCache::writeWriteBuffer()>
c0017343:	83 c4 10             	add    esp,0x10
c0017346:	83 fd 01             	cmp    ebp,0x1
c0017349:	0f 85 80 00 00 00    	jne    c00173cf <VCache::read(unsigned long long, int, void*)+0xbd>
c001734f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017352:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017356:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c001735d:	75 70                	jne    c00173cf <VCache::read(unsigned long long, int, void*)+0xbd>
c001735f:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c0017362:	89 e9                	mov    ecx,ebp
c0017364:	f7 d9                	neg    ecx
c0017366:	89 c8                	mov    eax,ecx
c0017368:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001736c:	c1 f8 1f             	sar    eax,0x1f
c001736f:	21 f1                	and    ecx,esi
c0017371:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017375:	89 c8                	mov    eax,ecx
c0017377:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001737b:	21 f9                	and    ecx,edi
c001737d:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0017381:	89 ca                	mov    edx,ecx
c0017383:	74 0a                	je     c001738f <VCache::read(unsigned long long, int, void*)+0x7d>
c0017385:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0017388:	75 05                	jne    c001738f <VCache::read(unsigned long long, int, void*)+0x7d>
c001738a:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c001738d:	74 23                	je     c00173b2 <VCache::read(unsigned long long, int, void*)+0xa0>
c001738f:	83 ec 0c             	sub    esp,0xc
c0017392:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0017396:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001739a:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c001739d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00173a0:	8b 09                	mov    ecx,DWORD PTR [ecx]
c00173a2:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00173a5:	55                   	push   ebp
c00173a6:	52                   	push   edx
c00173a7:	50                   	push   eax
c00173a8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00173ac:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c00173af:	83 c4 20             	add    esp,0x20
c00173b2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00173b5:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00173b9:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c00173bf:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00173c2:	48                   	dec    eax
c00173c3:	21 c6                	and    esi,eax
c00173c5:	0f af f1             	imul   esi,ecx
c00173c8:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c00173cb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00173cd:	eb 1d                	jmp    c00173ec <VCache::read(unsigned long long, int, void*)+0xda>
c00173cf:	83 ec 0c             	sub    esp,0xc
c00173d2:	53                   	push   ebx
c00173d3:	e8 88 fd ff ff       	call   c0017160 <VCache::invalidateReadBuffer()>
c00173d8:	5a                   	pop    edx
c00173d9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00173dc:	8b 10                	mov    edx,DWORD PTR [eax]
c00173de:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00173e2:	55                   	push   ebp
c00173e3:	57                   	push   edi
c00173e4:	56                   	push   esi
c00173e5:	50                   	push   eax
c00173e6:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00173e9:	83 c4 20             	add    esp,0x20
c00173ec:	83 ec 0c             	sub    esp,0xc
c00173ef:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00173f2:	e8 1b 7d 00 00       	call   c001f112 <Semaphore::release()>
c00173f7:	83 c4 2c             	add    esp,0x2c
c00173fa:	31 c0                	xor    eax,eax
c00173fc:	5b                   	pop    ebx
c00173fd:	5e                   	pop    esi
c00173fe:	5f                   	pop    edi
c00173ff:	5d                   	pop    ebp
c0017400:	c3                   	ret    
c0017401:	90                   	nop

c0017402 <Video::putrect(int, int, int, int, unsigned int)>:
c0017402:	55                   	push   ebp
c0017403:	57                   	push   edi
c0017404:	56                   	push   esi
c0017405:	53                   	push   ebx
c0017406:	83 ec 1c             	sub    esp,0x1c
c0017409:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001740d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017411:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0017415:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0017419:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001741d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017421:	01 df                	add    edi,ebx
c0017423:	39 fb                	cmp    ebx,edi
c0017425:	7d 1f                	jge    c0017446 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0017427:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001742b:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c001742f:	7d 12                	jge    c0017443 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0017431:	8b 16                	mov    edx,DWORD PTR [esi]
c0017433:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0017437:	53                   	push   ebx
c0017438:	55                   	push   ebp
c0017439:	45                   	inc    ebp
c001743a:	56                   	push   esi
c001743b:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001743e:	83 c4 10             	add    esp,0x10
c0017441:	eb e8                	jmp    c001742b <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0017443:	43                   	inc    ebx
c0017444:	eb dd                	jmp    c0017423 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0017446:	83 c4 1c             	add    esp,0x1c
c0017449:	5b                   	pop    ebx
c001744a:	5e                   	pop    esi
c001744b:	5f                   	pop    edi
c001744c:	5d                   	pop    ebp
c001744d:	c3                   	ret    

c001744e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c001744e:	55                   	push   ebp
c001744f:	57                   	push   edi
c0017450:	31 ff                	xor    edi,edi
c0017452:	56                   	push   esi
c0017453:	53                   	push   ebx
c0017454:	83 ec 1c             	sub    esp,0x1c
c0017457:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001745b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001745f:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0017466:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c001746b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001746f:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0017473:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017477:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c001747a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001747e:	01 f9                	add    ecx,edi
c0017480:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0017484:	7d 2f                	jge    c00174b5 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0017486:	31 f6                	xor    esi,esi
c0017488:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001748c:	01 f2                	add    edx,esi
c001748e:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0017492:	7d 1a                	jge    c00174ae <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0017494:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017497:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c001749a:	46                   	inc    esi
c001749b:	51                   	push   ecx
c001749c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00174a0:	52                   	push   edx
c00174a1:	55                   	push   ebp
c00174a2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00174a5:	83 c4 10             	add    esp,0x10
c00174a8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00174ac:	eb da                	jmp    c0017488 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c00174ae:	47                   	inc    edi
c00174af:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00174b3:	eb c5                	jmp    c001747a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c00174b5:	83 c4 1c             	add    esp,0x1c
c00174b8:	5b                   	pop    ebx
c00174b9:	5e                   	pop    esi
c00174ba:	5f                   	pop    edi
c00174bb:	5d                   	pop    ebp
c00174bc:	c3                   	ret    
c00174bd:	90                   	nop

c00174be <Video::blit(unsigned int*, int, int, int, int)>:
c00174be:	55                   	push   ebp
c00174bf:	57                   	push   edi
c00174c0:	56                   	push   esi
c00174c1:	53                   	push   ebx
c00174c2:	83 ec 1c             	sub    esp,0x1c
c00174c5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00174c9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00174cd:	85 c0                	test   eax,eax
c00174cf:	79 02                	jns    c00174d3 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c00174d1:	31 c0                	xor    eax,eax
c00174d3:	c1 e0 02             	shl    eax,0x2
c00174d6:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00174da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00174de:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00174e2:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00174e6:	39 d8                	cmp    eax,ebx
c00174e8:	7e 49                	jle    c0017533 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00174ea:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00174f0:	7c 41                	jl     c0017533 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00174f2:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00174f6:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00174fa:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00174fe:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0017502:	39 f9                	cmp    ecx,edi
c0017504:	7e 22                	jle    c0017528 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0017506:	83 c5 04             	add    ebp,0x4
c0017509:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001750f:	7c 14                	jl     c0017525 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0017511:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0017513:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0017516:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001751a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001751e:	56                   	push   esi
c001751f:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0017522:	83 c4 10             	add    esp,0x10
c0017525:	47                   	inc    edi
c0017526:	eb d2                	jmp    c00174fa <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0017528:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001752c:	43                   	inc    ebx
c001752d:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0017531:	eb ab                	jmp    c00174de <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0017533:	83 c4 1c             	add    esp,0x1c
c0017536:	5b                   	pop    ebx
c0017537:	5e                   	pop    esi
c0017538:	5f                   	pop    edi
c0017539:	5d                   	pop    ebp
c001753a:	c3                   	ret    
c001753b:	90                   	nop

c001753c <Video::clearScreen(unsigned int)>:
c001753c:	57                   	push   edi
c001753d:	56                   	push   esi
c001753e:	53                   	push   ebx
c001753f:	31 db                	xor    ebx,ebx
c0017541:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017545:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001754b:	7e 1f                	jle    c001756c <Video::clearScreen(unsigned int)+0x30>
c001754d:	31 ff                	xor    edi,edi
c001754f:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0017555:	7e 12                	jle    c0017569 <Video::clearScreen(unsigned int)+0x2d>
c0017557:	8b 06                	mov    eax,DWORD PTR [esi]
c0017559:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001755d:	53                   	push   ebx
c001755e:	57                   	push   edi
c001755f:	47                   	inc    edi
c0017560:	56                   	push   esi
c0017561:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017564:	83 c4 10             	add    esp,0x10
c0017567:	eb e6                	jmp    c001754f <Video::clearScreen(unsigned int)+0x13>
c0017569:	43                   	inc    ebx
c001756a:	eb d9                	jmp    c0017545 <Video::clearScreen(unsigned int)+0x9>
c001756c:	5b                   	pop    ebx
c001756d:	5e                   	pop    esi
c001756e:	5f                   	pop    edi
c001756f:	c3                   	ret    

c0017570 <Video::putpixel(int, int, unsigned int)>:
c0017570:	c7 44 24 04 a8 c0 02 c0 	mov    DWORD PTR [esp+0x4],0xc002c0a8
c0017578:	e9 70 33 00 00       	jmp    c001a8ed <Krnl::panic(char const*)>
c001757d:	90                   	nop

c001757e <Video::Video(char const*)>:
c001757e:	83 ec 0c             	sub    esp,0xc
c0017581:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017585:	83 ec 08             	sub    esp,0x8
c0017588:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001758c:	50                   	push   eax
c001758d:	e8 d2 ce ff ff       	call   c0014464 <Device::Device(char const*)>
c0017592:	83 c4 10             	add    esp,0x10
c0017595:	ba 2c c1 02 c0       	mov    edx,0xc002c12c
c001759a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001759e:	89 10                	mov    DWORD PTR [eax],edx
c00175a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175a4:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c00175ae:	90                   	nop
c00175af:	83 c4 0c             	add    esp,0xc
c00175b2:	c3                   	ret    
c00175b3:	90                   	nop

c00175b4 <Video::~Video()>:
c00175b4:	83 ec 0c             	sub    esp,0xc
c00175b7:	ba 2c c1 02 c0       	mov    edx,0xc002c12c
c00175bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175c0:	89 10                	mov    DWORD PTR [eax],edx
c00175c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175c6:	83 ec 0c             	sub    esp,0xc
c00175c9:	50                   	push   eax
c00175ca:	e8 8b cb ff ff       	call   c001415a <Device::~Device()>
c00175cf:	83 c4 10             	add    esp,0x10
c00175d2:	90                   	nop
c00175d3:	83 c4 0c             	add    esp,0xc
c00175d6:	c3                   	ret    
c00175d7:	90                   	nop

c00175d8 <Video::~Video()>:
c00175d8:	83 ec 0c             	sub    esp,0xc
c00175db:	83 ec 0c             	sub    esp,0xc
c00175de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00175e2:	e8 cd ff ff ff       	call   c00175b4 <Video::~Video()>
c00175e7:	83 c4 10             	add    esp,0x10
c00175ea:	83 ec 08             	sub    esp,0x8
c00175ed:	68 64 01 00 00       	push   0x164
c00175f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00175f6:	e8 78 b7 ff ff       	call   c0012d73 <operator delete(void*, unsigned long)>
c00175fb:	83 c4 10             	add    esp,0x10
c00175fe:	83 c4 0c             	add    esp,0xc
c0017601:	c3                   	ret    

c0017602 <Video::isMonochrome()>:
c0017602:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017606:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c001760c:	c3                   	ret    
c001760d:	90                   	nop

c001760e <Video::getWidth()>:
c001760e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017612:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0017618:	c3                   	ret    
c0017619:	90                   	nop

c001761a <Video::getHeight()>:
c001761a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001761e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017624:	c3                   	ret    
c0017625:	90                   	nop

c0017626 <Video::drawCursor(int, int, unsigned char*, int)>:
c0017626:	55                   	push   ebp
c0017627:	57                   	push   edi
c0017628:	56                   	push   esi
c0017629:	53                   	push   ebx
c001762a:	83 ec 2c             	sub    esp,0x2c
c001762d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017631:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017635:	83 f8 01             	cmp    eax,0x1
c0017638:	19 c9                	sbb    ecx,ecx
c001763a:	31 db                	xor    ebx,ebx
c001763c:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0017640:	89 cd                	mov    ebp,ecx
c0017642:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c001764a:	f7 d5                	not    ebp
c001764c:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0017652:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017656:	01 d8                	add    eax,ebx
c0017658:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001765c:	56                   	push   esi
c001765d:	e8 b8 ff ff ff       	call   c001761a <Video::getHeight()>
c0017662:	59                   	pop    ecx
c0017663:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0017667:	7e 70                	jle    c00176d9 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0017669:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001766d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017671:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0017674:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017678:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001767c:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0017683:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017687:	89 f8                	mov    eax,edi
c0017689:	83 c0 20             	add    eax,0x20
c001768c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017690:	56                   	push   esi
c0017691:	e8 78 ff ff ff       	call   c001760e <Video::getWidth()>
c0017696:	5a                   	pop    edx
c0017697:	39 c7                	cmp    edi,eax
c0017699:	7d 34                	jge    c00176cf <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c001769b:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c00176a0:	74 05                	je     c00176a7 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c00176a2:	8b 06                	mov    eax,DWORD PTR [esi]
c00176a4:	55                   	push   ebp
c00176a5:	eb 0d                	jmp    c00176b4 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c00176a7:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c00176ac:	74 12                	je     c00176c0 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c00176ae:	8b 06                	mov    eax,DWORD PTR [esi]
c00176b0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00176b4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00176b8:	57                   	push   edi
c00176b9:	56                   	push   esi
c00176ba:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00176bd:	83 c4 10             	add    esp,0x10
c00176c0:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c00176c4:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c00176c8:	47                   	inc    edi
c00176c9:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00176cd:	75 c1                	jne    c0017690 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c00176cf:	43                   	inc    ebx
c00176d0:	83 fb 20             	cmp    ebx,0x20
c00176d3:	0f 85 79 ff ff ff    	jne    c0017652 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c00176d9:	83 c4 2c             	add    esp,0x2c
c00176dc:	5b                   	pop    ebx
c00176dd:	5e                   	pop    esi
c00176de:	5f                   	pop    edi
c00176df:	5d                   	pop    ebp
c00176e0:	c3                   	ret    
c00176e1:	90                   	nop

c00176e2 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c00176e2:	55                   	push   ebp
c00176e3:	57                   	push   edi
c00176e4:	56                   	push   esi
c00176e5:	53                   	push   ebx
c00176e6:	83 ec 28             	sub    esp,0x28
c00176e9:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00176ed:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c00176f1:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c00176f5:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c00176f9:	c1 e7 08             	shl    edi,0x8
c00176fc:	01 c7                	add    edi,eax
c00176fe:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0017702:	c1 e0 08             	shl    eax,0x8
c0017705:	01 d0                	add    eax,edx
c0017707:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001770b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001770f:	0f af c7             	imul   eax,edi
c0017712:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0017719:	50                   	push   eax
c001771a:	e8 89 81 ff ff       	call   c000f8a8 <malloc>
c001771f:	83 c4 10             	add    esp,0x10
c0017722:	89 c5                	mov    ebp,eax
c0017724:	85 c0                	test   eax,eax
c0017726:	75 15                	jne    c001773d <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c0017728:	83 ec 0c             	sub    esp,0xc
c001772b:	68 c9 c0 02 c0       	push   0xc002c0c9
c0017730:	e8 1e b7 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0017735:	83 c4 10             	add    esp,0x10
c0017738:	e9 1c 01 00 00       	jmp    c0017859 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c001773d:	be 12 00 00 00       	mov    esi,0x12
c0017742:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0017746:	74 11                	je     c0017759 <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c0017748:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c001774c:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c0017750:	c1 fe 03             	sar    esi,0x3
c0017753:	0f af f0             	imul   esi,eax
c0017756:	83 c6 12             	add    esi,0x12
c0017759:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c001775d:	74 04                	je     c0017763 <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c001775f:	85 ff                	test   edi,edi
c0017761:	75 12                	jne    c0017775 <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c0017763:	83 ec 0c             	sub    esp,0xc
c0017766:	68 e0 c0 02 c0       	push   0xc002c0e0
c001776b:	e8 e3 b6 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0017770:	e9 ce 00 00 00       	jmp    c0017843 <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c0017775:	52                   	push   edx
c0017776:	52                   	push   edx
c0017777:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c001777b:	50                   	push   eax
c001777c:	68 f5 c0 02 c0       	push   0xc002c0f5
c0017781:	e8 cd b6 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0017786:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c001778a:	83 c4 10             	add    esp,0x10
c001778d:	80 fa 02             	cmp    dl,0x2
c0017790:	0f 85 98 00 00 00    	jne    c001782e <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c0017796:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001779b:	75 10                	jne    c00177ad <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c001779d:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c00177a1:	75 0a                	jne    c00177ad <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00177a3:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00177a6:	83 e8 18             	sub    eax,0x18
c00177a9:	a8 f7                	test   al,0xf7
c00177ab:	74 0a                	je     c00177b7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c00177ad:	83 ec 0c             	sub    esp,0xc
c00177b0:	68 02 c1 02 c0       	push   0xc002c102
c00177b5:	eb 7f                	jmp    c0017836 <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c00177b7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00177bf:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00177c7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00177cb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00177d3:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c00177d7:	75 0c                	jne    c00177e5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c00177d9:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c00177de:	c1 e0 18             	shl    eax,0x18
c00177e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00177e5:	41                   	inc    ecx
c00177e6:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c00177eb:	c1 e2 10             	shl    edx,0x10
c00177ee:	89 d0                	mov    eax,edx
c00177f0:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c00177f5:	c1 e2 08             	shl    edx,0x8
c00177f8:	09 c2                	or     edx,eax
c00177fa:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c00177fe:	09 c2                	or     edx,eax
c0017800:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c0017804:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c0017808:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001780c:	c1 f8 03             	sar    eax,0x3
c001780f:	01 c6                	add    esi,eax
c0017811:	89 c8                	mov    eax,ecx
c0017813:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0017817:	39 c7                	cmp    edi,eax
c0017819:	7f b0                	jg     c00177cb <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c001781b:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001781f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017823:	39 14 24             	cmp    DWORD PTR [esp],edx
c0017826:	7e 22                	jle    c001784a <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c0017828:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001782c:	eb 99                	jmp    c00177c7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c001782e:	50                   	push   eax
c001782f:	50                   	push   eax
c0017830:	52                   	push   edx
c0017831:	68 10 c1 02 c0       	push   0xc002c110
c0017836:	e8 18 b6 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001783b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001783e:	e8 75 80 ff ff       	call   c000f8b8 <free>
c0017843:	83 c4 10             	add    esp,0x10
c0017846:	31 ed                	xor    ebp,ebp
c0017848:	eb 0f                	jmp    c0017859 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c001784a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001784e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0017851:	89 38                	mov    DWORD PTR [eax],edi
c0017853:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017857:	89 08                	mov    DWORD PTR [eax],ecx
c0017859:	83 c4 1c             	add    esp,0x1c
c001785c:	89 e8                	mov    eax,ebp
c001785e:	5b                   	pop    ebx
c001785f:	5e                   	pop    esi
c0017860:	5f                   	pop    edi
c0017861:	5d                   	pop    ebp
c0017862:	c3                   	ret    
c0017863:	90                   	nop

c0017864 <Video::putTGA(int, int, unsigned char*, int)>:
c0017864:	55                   	push   ebp
c0017865:	57                   	push   edi
c0017866:	56                   	push   esi
c0017867:	53                   	push   ebx
c0017868:	83 ec 28             	sub    esp,0x28
c001786b:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001786f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017873:	50                   	push   eax
c0017874:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017878:	50                   	push   eax
c0017879:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001787d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017881:	56                   	push   esi
c0017882:	e8 5b fe ff ff       	call   c00176e2 <Video::tgaParse(unsigned char*, int, int*, int*)>
c0017887:	83 c4 20             	add    esp,0x20
c001788a:	85 c0                	test   eax,eax
c001788c:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0017890:	74 35                	je     c00178c7 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017892:	89 c7                	mov    edi,eax
c0017894:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017898:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001789c:	39 d8                	cmp    eax,ebx
c001789e:	7e 27                	jle    c00178c7 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00178a0:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00178a4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00178a8:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00178ac:	39 e8                	cmp    eax,ebp
c00178ae:	7e 14                	jle    c00178c4 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c00178b0:	8b 06                	mov    eax,DWORD PTR [esi]
c00178b2:	83 c7 04             	add    edi,0x4
c00178b5:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c00178b8:	53                   	push   ebx
c00178b9:	55                   	push   ebp
c00178ba:	45                   	inc    ebp
c00178bb:	56                   	push   esi
c00178bc:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00178bf:	83 c4 10             	add    esp,0x10
c00178c2:	eb e0                	jmp    c00178a4 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c00178c4:	43                   	inc    ebx
c00178c5:	eb cd                	jmp    c0017894 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c00178c7:	83 c4 1c             	add    esp,0x1c
c00178ca:	5b                   	pop    ebx
c00178cb:	5e                   	pop    esi
c00178cc:	5f                   	pop    edi
c00178cd:	5d                   	pop    ebp
c00178ce:	c3                   	ret    
c00178cf:	90                   	nop

c00178d0 <ACPI::close(int, int, void*)>:
c00178d0:	83 ec 1c             	sub    esp,0x1c
c00178d3:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c00178db:	74 0a                	je     c00178e7 <ACPI::close(int, int, void*)+0x17>
c00178dd:	b8 00 00 00 00       	mov    eax,0x0
c00178e2:	e9 9a 00 00 00       	jmp    c0017981 <ACPI::close(int, int, void*)+0xb1>
c00178e7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00178ec:	75 37                	jne    c0017925 <ACPI::close(int, int, void*)+0x55>
c00178ee:	83 ec 0c             	sub    esp,0xc
c00178f1:	68 6c c1 02 c0       	push   0xc002c16c
c00178f6:	e8 58 b5 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c00178fb:	83 c4 10             	add    esp,0x10
c00178fe:	a1 48 19 03 c0       	mov    eax,ds:0xc0031948
c0017903:	85 c0                	test   eax,eax
c0017905:	74 07                	je     c001790e <ACPI::close(int, int, void*)+0x3e>
c0017907:	a1 48 19 03 c0       	mov    eax,ds:0xc0031948
c001790c:	ff d0                	call   eax
c001790e:	83 ec 0c             	sub    esp,0xc
c0017911:	68 e0 c2 02 c0       	push   0xc002c2e0
c0017916:	e8 d2 2f 00 00       	call   c001a8ed <Krnl::panic(char const*)>
c001791b:	83 c4 10             	add    esp,0x10
c001791e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017923:	eb 5c                	jmp    c0017981 <ACPI::close(int, int, void*)+0xb1>
c0017925:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c001792a:	75 50                	jne    c001797c <ACPI::close(int, int, void*)+0xac>
c001792c:	a1 44 19 03 c0       	mov    eax,ds:0xc0031944
c0017931:	85 c0                	test   eax,eax
c0017933:	74 07                	je     c001793c <ACPI::close(int, int, void*)+0x6c>
c0017935:	a1 44 19 03 c0       	mov    eax,ds:0xc0031944
c001793a:	ff d0                	call   eax
c001793c:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0017941:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017946:	83 e0 02             	and    eax,0x2
c0017949:	74 1c                	je     c0017967 <ACPI::close(int, int, void*)+0x97>
c001794b:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0017952:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017956:	89 c2                	mov    edx,eax
c0017958:	ec                   	in     al,dx
c0017959:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001795d:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0017961:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017965:	eb da                	jmp    c0017941 <ACPI::close(int, int, void*)+0x71>
c0017967:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c001796e:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0017973:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0017977:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001797b:	ee                   	out    dx,al
c001797c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017981:	83 c4 1c             	add    esp,0x1c
c0017984:	c3                   	ret    

c0017985 <findRSDP()>:
c0017985:	83 ec 1c             	sub    esp,0x1c
c0017988:	83 ec 0c             	sub    esp,0xc
c001798b:	68 79 c1 02 c0       	push   0xc002c179
c0017990:	e8 be b4 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0017995:	83 c4 10             	add    esp,0x10
c0017998:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c001799d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00179a3:	83 e0 04             	and    eax,0x4
c00179a6:	84 c0                	test   al,al
c00179a8:	75 07                	jne    c00179b1 <findRSDP()+0x2c>
c00179aa:	b8 00 00 00 00       	mov    eax,0x0
c00179af:	eb 6a                	jmp    c0017a1b <findRSDP()+0x96>
c00179b1:	a1 d4 f2 02 c0       	mov    eax,ds:0xc002f2d4
c00179b6:	3d ff 07 00 00       	cmp    eax,0x7ff
c00179bb:	7f 1b                	jg     c00179d8 <findRSDP()+0x53>
c00179bd:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c00179c2:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00179c8:	83 e2 fb             	and    edx,0xfffffffb
c00179cb:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00179d1:	b8 00 00 00 00       	mov    eax,0x0
c00179d6:	eb 43                	jmp    c0017a1b <findRSDP()+0x96>
c00179d8:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c00179e0:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c00179e8:	77 2c                	ja     c0017a16 <findRSDP()+0x91>
c00179ea:	83 ec 04             	sub    esp,0x4
c00179ed:	6a 08                	push   0x8
c00179ef:	68 87 c1 02 c0       	push   0xc002c187
c00179f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00179f8:	e8 6b 8c fe ff       	call   c0000668 <memcmp>
c00179fd:	83 c4 10             	add    esp,0x10
c0017a00:	85 c0                	test   eax,eax
c0017a02:	0f 94 c0             	sete   al
c0017a05:	84 c0                	test   al,al
c0017a07:	74 06                	je     c0017a0f <findRSDP()+0x8a>
c0017a09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017a0d:	eb 0c                	jmp    c0017a1b <findRSDP()+0x96>
c0017a0f:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0017a14:	eb ca                	jmp    c00179e0 <findRSDP()+0x5b>
c0017a16:	b8 00 00 00 00       	mov    eax,0x0
c0017a1b:	83 c4 1c             	add    esp,0x1c
c0017a1e:	c3                   	ret    

c0017a1f <loadACPITables(unsigned char*)>:
c0017a1f:	57                   	push   edi
c0017a20:	56                   	push   esi
c0017a21:	53                   	push   ebx
c0017a22:	83 ec 60             	sub    esp,0x60
c0017a25:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c0017a2a:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017a30:	83 e0 04             	and    eax,0x4
c0017a33:	84 c0                	test   al,al
c0017a35:	0f 84 33 02 00 00    	je     c0017c6e <loadACPITables(unsigned char*)+0x24f>
c0017a3b:	a0 60 1b 03 c0       	mov    al,ds:0xc0031b60
c0017a40:	84 c0                	test   al,al
c0017a42:	74 75                	je     c0017ab9 <loadACPITables(unsigned char*)+0x9a>
c0017a44:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017a48:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0017a4c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017a50:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017a53:	83 e8 24             	sub    eax,0x24
c0017a56:	c1 e8 03             	shr    eax,0x3
c0017a59:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017a5d:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c0017a65:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0017a69:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c0017a6d:	0f 8d b2 00 00 00    	jge    c0017b25 <loadACPITables(unsigned char*)+0x106>
c0017a73:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017a77:	83 c0 24             	add    eax,0x24
c0017a7a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0017a7e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017a82:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017a86:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0017a8a:	c1 e0 03             	shl    eax,0x3
c0017a8d:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c0017a91:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017a95:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017a98:	8b 00                	mov    eax,DWORD PTR [eax]
c0017a9a:	89 c1                	mov    ecx,eax
c0017a9c:	a1 4c 19 03 c0       	mov    eax,ds:0xc003194c
c0017aa1:	8d 50 01             	lea    edx,[eax+0x1]
c0017aa4:	89 15 4c 19 03 c0    	mov    DWORD PTR ds:0xc003194c,edx
c0017aaa:	89 ca                	mov    edx,ecx
c0017aac:	89 14 c5 64 19 03 c0 	mov    DWORD PTR [eax*8-0x3ffce69c],edx
c0017ab3:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c0017ab7:	eb ac                	jmp    c0017a65 <loadACPITables(unsigned char*)+0x46>
c0017ab9:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017abd:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017ac1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017ac5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017ac8:	83 e8 24             	sub    eax,0x24
c0017acb:	c1 e8 02             	shr    eax,0x2
c0017ace:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017ad2:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0017ada:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0017ade:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c0017ae2:	7d 41                	jge    c0017b25 <loadACPITables(unsigned char*)+0x106>
c0017ae4:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017ae8:	83 c0 24             	add    eax,0x24
c0017aeb:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017aef:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017af3:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017af7:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0017afb:	c1 e0 02             	shl    eax,0x2
c0017afe:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0017b02:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b06:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017b08:	a1 4c 19 03 c0       	mov    eax,ds:0xc003194c
c0017b0d:	8d 50 01             	lea    edx,[eax+0x1]
c0017b10:	89 15 4c 19 03 c0    	mov    DWORD PTR ds:0xc003194c,edx
c0017b16:	89 ca                	mov    edx,ecx
c0017b18:	89 14 c5 64 19 03 c0 	mov    DWORD PTR [eax*8-0x3ffce69c],edx
c0017b1f:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c0017b23:	eb b5                	jmp    c0017ada <loadACPITables(unsigned char*)+0xbb>
c0017b25:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0017b2d:	a1 4c 19 03 c0       	mov    eax,ds:0xc003194c
c0017b32:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0017b36:	0f 8d 33 01 00 00    	jge    c0017c6f <loadACPITables(unsigned char*)+0x250>
c0017b3c:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017b40:	8b 04 c5 64 19 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffce69c]
c0017b47:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017b4b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b4f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017b53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b57:	25 ff 0f 00 00       	and    eax,0xfff
c0017b5c:	89 c6                	mov    esi,eax
c0017b5e:	8b 1d 10 f4 02 c0    	mov    ebx,DWORD PTR ds:0xc002f410
c0017b64:	83 ec 0c             	sub    esp,0xc
c0017b67:	6a 01                	push   0x1
c0017b69:	e8 df 9e ff ff       	call   c0011a4d <Virt::allocateKernelVirtualPages(int)>
c0017b6e:	83 c4 10             	add    esp,0x10
c0017b71:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017b75:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017b7b:	83 ec 0c             	sub    esp,0xc
c0017b7e:	6a 01                	push   0x1
c0017b80:	6a 01                	push   0x1
c0017b82:	50                   	push   eax
c0017b83:	52                   	push   edx
c0017b84:	53                   	push   ebx
c0017b85:	e8 f0 a9 ff ff       	call   c001257a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017b8a:	83 c4 20             	add    esp,0x20
c0017b8d:	09 f0                	or     eax,esi
c0017b8f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017b93:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017b97:	c1 e0 03             	shl    eax,0x3
c0017b9a:	05 60 19 03 c0       	add    eax,0xc0031960
c0017b9f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017ba3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017ba7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017bab:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c0017bb3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017bb7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017bbb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017bbf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017bc3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017bc7:	89 c6                	mov    esi,eax
c0017bc9:	89 d7                	mov    edi,edx
c0017bcb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017bcd:	89 c8                	mov    eax,ecx
c0017bcf:	89 fa                	mov    edx,edi
c0017bd1:	89 f3                	mov    ebx,esi
c0017bd3:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0017bd7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0017bdb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017bdf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017be3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017be6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017bea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017bee:	05 00 10 00 00       	add    eax,0x1000
c0017bf3:	c1 e8 0c             	shr    eax,0xc
c0017bf6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017bfa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017bfe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017c02:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c06:	25 ff 0f 00 00       	and    eax,0xfff
c0017c0b:	89 c6                	mov    esi,eax
c0017c0d:	8b 1d 10 f4 02 c0    	mov    ebx,DWORD PTR ds:0xc002f410
c0017c13:	83 ec 0c             	sub    esp,0xc
c0017c16:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017c1a:	e8 2e 9e ff ff       	call   c0011a4d <Virt::allocateKernelVirtualPages(int)>
c0017c1f:	83 c4 10             	add    esp,0x10
c0017c22:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017c26:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017c2c:	83 ec 0c             	sub    esp,0xc
c0017c2f:	6a 01                	push   0x1
c0017c31:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017c35:	50                   	push   eax
c0017c36:	52                   	push   edx
c0017c37:	53                   	push   ebx
c0017c38:	e8 3d a9 ff ff       	call   c001257a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017c3d:	83 c4 20             	add    esp,0x20
c0017c40:	09 f0                	or     eax,esi
c0017c42:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017c46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c4a:	83 ec 0c             	sub    esp,0xc
c0017c4d:	50                   	push   eax
c0017c4e:	e8 ba a2 ff ff       	call   c0011f0d <Virt::freeKernelVirtualPages(unsigned long)>
c0017c53:	83 c4 10             	add    esp,0x10
c0017c56:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017c5a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017c5e:	89 14 c5 64 19 03 c0 	mov    DWORD PTR [eax*8-0x3ffce69c],edx
c0017c65:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c0017c69:	e9 bf fe ff ff       	jmp    c0017b2d <loadACPITables(unsigned char*)+0x10e>
c0017c6e:	90                   	nop
c0017c6f:	83 c4 60             	add    esp,0x60
c0017c72:	5b                   	pop    ebx
c0017c73:	5e                   	pop    esi
c0017c74:	5f                   	pop    edi
c0017c75:	c3                   	ret    

c0017c76 <findRSDT(unsigned char*)>:
c0017c76:	57                   	push   edi
c0017c77:	56                   	push   esi
c0017c78:	53                   	push   ebx
c0017c79:	83 ec 50             	sub    esp,0x50
c0017c7c:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c0017c81:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017c87:	83 e0 04             	and    eax,0x4
c0017c8a:	84 c0                	test   al,al
c0017c8c:	75 0a                	jne    c0017c98 <findRSDT(unsigned char*)+0x22>
c0017c8e:	b8 00 00 00 00       	mov    eax,0x0
c0017c93:	e9 21 01 00 00       	jmp    c0017db9 <findRSDT(unsigned char*)+0x143>
c0017c98:	89 e0                	mov    eax,esp
c0017c9a:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017c9e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0017ca2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017ca6:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c0017cae:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017cb2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017cb6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017cba:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017cbe:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0017cc2:	89 c6                	mov    esi,eax
c0017cc4:	89 d7                	mov    edi,edx
c0017cc6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017cc8:	89 c8                	mov    eax,ecx
c0017cca:	89 fa                	mov    edx,edi
c0017ccc:	89 f3                	mov    ebx,esi
c0017cce:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0017cd2:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0017cd6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017cda:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017cde:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c0017ce2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0017cea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017cee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017cf2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017cf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017cfa:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017cfe:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017d02:	25 ff 0f 00 00       	and    eax,0xfff
c0017d07:	89 c6                	mov    esi,eax
c0017d09:	8b 1d 10 f4 02 c0    	mov    ebx,DWORD PTR ds:0xc002f410
c0017d0f:	83 ec 0c             	sub    esp,0xc
c0017d12:	6a 02                	push   0x2
c0017d14:	e8 34 9d ff ff       	call   c0011a4d <Virt::allocateKernelVirtualPages(int)>
c0017d19:	83 c4 10             	add    esp,0x10
c0017d1c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017d20:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017d26:	83 ec 0c             	sub    esp,0xc
c0017d29:	6a 01                	push   0x1
c0017d2b:	6a 02                	push   0x2
c0017d2d:	50                   	push   eax
c0017d2e:	52                   	push   edx
c0017d2f:	53                   	push   ebx
c0017d30:	e8 45 a8 ff ff       	call   c001257a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017d35:	83 c4 20             	add    esp,0x20
c0017d38:	09 f0                	or     eax,esi
c0017d3a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017d3e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017d42:	25 ff 0f 00 00       	and    eax,0xfff
c0017d47:	89 c6                	mov    esi,eax
c0017d49:	8b 1d 10 f4 02 c0    	mov    ebx,DWORD PTR ds:0xc002f410
c0017d4f:	83 ec 0c             	sub    esp,0xc
c0017d52:	6a 02                	push   0x2
c0017d54:	e8 f4 9c ff ff       	call   c0011a4d <Virt::allocateKernelVirtualPages(int)>
c0017d59:	83 c4 10             	add    esp,0x10
c0017d5c:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017d60:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017d66:	83 ec 0c             	sub    esp,0xc
c0017d69:	6a 01                	push   0x1
c0017d6b:	6a 02                	push   0x2
c0017d6d:	50                   	push   eax
c0017d6e:	52                   	push   edx
c0017d6f:	53                   	push   ebx
c0017d70:	e8 05 a8 ff ff       	call   c001257a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017d75:	83 c4 20             	add    esp,0x20
c0017d78:	09 f0                	or     eax,esi
c0017d7a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017d7e:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0017d83:	75 11                	jne    c0017d96 <findRSDT(unsigned char*)+0x120>
c0017d85:	c6 05 60 1b 03 c0 00 	mov    BYTE PTR ds:0xc0031b60,0x0
c0017d8c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017d90:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017d94:	eb 1f                	jmp    c0017db5 <findRSDT(unsigned char*)+0x13f>
c0017d96:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c0017d9b:	75 11                	jne    c0017dae <findRSDT(unsigned char*)+0x138>
c0017d9d:	c6 05 60 1b 03 c0 01 	mov    BYTE PTR ds:0xc0031b60,0x1
c0017da4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017da8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017dac:	eb 07                	jmp    c0017db5 <findRSDT(unsigned char*)+0x13f>
c0017dae:	b8 00 00 00 00       	mov    eax,0x0
c0017db3:	eb 04                	jmp    c0017db9 <findRSDT(unsigned char*)+0x143>
c0017db5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017db9:	83 c4 50             	add    esp,0x50
c0017dbc:	5b                   	pop    ebx
c0017dbd:	5e                   	pop    esi
c0017dbe:	5f                   	pop    edi
c0017dbf:	c3                   	ret    

c0017dc0 <findDataTable(unsigned char*, char*)>:
c0017dc0:	83 ec 1c             	sub    esp,0x1c
c0017dc3:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c0017dc8:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017dce:	83 e0 04             	and    eax,0x4
c0017dd1:	84 c0                	test   al,al
c0017dd3:	75 07                	jne    c0017ddc <findDataTable(unsigned char*, char*)+0x1c>
c0017dd5:	b8 00 00 00 00       	mov    eax,0x0
c0017dda:	eb 7c                	jmp    c0017e58 <findDataTable(unsigned char*, char*)+0x98>
c0017ddc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017de4:	a1 4c 19 03 c0       	mov    eax,ds:0xc003194c
c0017de9:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017ded:	7d 3a                	jge    c0017e29 <findDataTable(unsigned char*, char*)+0x69>
c0017def:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017df3:	c1 e0 03             	shl    eax,0x3
c0017df6:	05 60 19 03 c0       	add    eax,0xc0031960
c0017dfb:	83 ec 04             	sub    esp,0x4
c0017dfe:	6a 04                	push   0x4
c0017e00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017e04:	50                   	push   eax
c0017e05:	e8 5e 88 fe ff       	call   c0000668 <memcmp>
c0017e0a:	83 c4 10             	add    esp,0x10
c0017e0d:	85 c0                	test   eax,eax
c0017e0f:	0f 94 c0             	sete   al
c0017e12:	84 c0                	test   al,al
c0017e14:	74 0d                	je     c0017e23 <findDataTable(unsigned char*, char*)+0x63>
c0017e16:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017e1a:	8b 04 c5 64 19 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffce69c]
c0017e21:	eb 35                	jmp    c0017e58 <findDataTable(unsigned char*, char*)+0x98>
c0017e23:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017e27:	eb bb                	jmp    c0017de4 <findDataTable(unsigned char*, char*)+0x24>
c0017e29:	a0 60 1b 03 c0       	mov    al,ds:0xc0031b60
c0017e2e:	84 c0                	test   al,al
c0017e30:	74 07                	je     c0017e39 <findDataTable(unsigned char*, char*)+0x79>
c0017e32:	b8 58 00 00 00       	mov    eax,0x58
c0017e37:	eb 05                	jmp    c0017e3e <findDataTable(unsigned char*, char*)+0x7e>
c0017e39:	b8 52 00 00 00       	mov    eax,0x52
c0017e3e:	83 ec 04             	sub    esp,0x4
c0017e41:	50                   	push   eax
c0017e42:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017e46:	68 04 c3 02 c0       	push   0xc002c304
c0017e4b:	e8 03 b0 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0017e50:	83 c4 10             	add    esp,0x10
c0017e53:	b8 00 00 00 00       	mov    eax,0x0
c0017e58:	83 c4 1c             	add    esp,0x1c
c0017e5b:	c3                   	ret    

c0017e5c <scanMADT()>:
c0017e5c:	53                   	push   ebx
c0017e5d:	83 ec 38             	sub    esp,0x38
c0017e60:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c0017e65:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017e6b:	83 e0 04             	and    eax,0x4
c0017e6e:	84 c0                	test   al,al
c0017e70:	0f 84 63 04 00 00    	je     c00182d9 <scanMADT()+0x47d>
c0017e76:	e8 0a fb ff ff       	call   c0017985 <findRSDP()>
c0017e7b:	a3 6c 1b 03 c0       	mov    ds:0xc0031b6c,eax
c0017e80:	a1 6c 1b 03 c0       	mov    eax,ds:0xc0031b6c
c0017e85:	85 c0                	test   eax,eax
c0017e87:	75 19                	jne    c0017ea2 <scanMADT()+0x46>
c0017e89:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c0017e8e:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017e94:	83 e2 fb             	and    edx,0xfffffffb
c0017e97:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017e9d:	e9 3b 04 00 00       	jmp    c00182dd <scanMADT()+0x481>
c0017ea2:	a1 6c 1b 03 c0       	mov    eax,ds:0xc0031b6c
c0017ea7:	83 ec 0c             	sub    esp,0xc
c0017eaa:	50                   	push   eax
c0017eab:	e8 c6 fd ff ff       	call   c0017c76 <findRSDT(unsigned char*)>
c0017eb0:	83 c4 10             	add    esp,0x10
c0017eb3:	a3 68 1b 03 c0       	mov    ds:0xc0031b68,eax
c0017eb8:	a1 68 1b 03 c0       	mov    eax,ds:0xc0031b68
c0017ebd:	85 c0                	test   eax,eax
c0017ebf:	75 19                	jne    c0017eda <scanMADT()+0x7e>
c0017ec1:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c0017ec6:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017ecc:	83 e2 fb             	and    edx,0xfffffffb
c0017ecf:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017ed5:	e9 03 04 00 00       	jmp    c00182dd <scanMADT()+0x481>
c0017eda:	a1 68 1b 03 c0       	mov    eax,ds:0xc0031b68
c0017edf:	83 ec 0c             	sub    esp,0xc
c0017ee2:	50                   	push   eax
c0017ee3:	e8 37 fb ff ff       	call   c0017a1f <loadACPITables(unsigned char*)>
c0017ee8:	83 c4 10             	add    esp,0x10
c0017eeb:	a1 68 1b 03 c0       	mov    eax,ds:0xc0031b68
c0017ef0:	83 ec 08             	sub    esp,0x8
c0017ef3:	68 90 c1 02 c0       	push   0xc002c190
c0017ef8:	50                   	push   eax
c0017ef9:	e8 c2 fe ff ff       	call   c0017dc0 <findDataTable(unsigned char*, char*)>
c0017efe:	83 c4 10             	add    esp,0x10
c0017f01:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017f05:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017f0a:	75 19                	jne    c0017f25 <scanMADT()+0xc9>
c0017f0c:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c0017f11:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017f17:	83 e2 fe             	and    edx,0xfffffffe
c0017f1a:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017f20:	e9 b8 03 00 00       	jmp    c00182dd <scanMADT()+0x481>
c0017f25:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017f2d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f31:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017f34:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017f38:	0f 87 9f 03 00 00    	ja     c00182dd <scanMADT()+0x481>
c0017f3e:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017f46:	0f 87 91 03 00 00    	ja     c00182dd <scanMADT()+0x481>
c0017f4c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f50:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017f54:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f58:	8d 50 01             	lea    edx,[eax+0x1]
c0017f5b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f5f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f63:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017f67:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017f6b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f6f:	8d 50 01             	lea    edx,[eax+0x1]
c0017f72:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f76:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f7a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017f7e:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017f82:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017f87:	0f 86 4f 03 00 00    	jbe    c00182dc <scanMADT()+0x480>
c0017f8d:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017f92:	75 57                	jne    c0017feb <scanMADT()+0x18f>
c0017f94:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f98:	8d 50 01             	lea    edx,[eax+0x1]
c0017f9b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f9f:	8a 15 60 1d 03 c0    	mov    dl,BYTE PTR ds:0xc0031d60
c0017fa5:	0f b6 d2             	movzx  edx,dl
c0017fa8:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017fac:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017fb0:	88 82 a0 1d 03 c0    	mov    BYTE PTR [edx-0x3ffce260],al
c0017fb6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fba:	8d 50 01             	lea    edx,[eax+0x1]
c0017fbd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017fc1:	8a 15 60 1d 03 c0    	mov    dl,BYTE PTR ds:0xc0031d60
c0017fc7:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017fca:	88 0d 60 1d 03 c0    	mov    BYTE PTR ds:0xc0031d60,cl
c0017fd0:	0f b6 d2             	movzx  edx,dl
c0017fd3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017fd7:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017fdb:	88 82 80 1d 03 c0    	mov    BYTE PTR [edx-0x3ffce280],al
c0017fe1:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017fe6:	e9 da 02 00 00       	jmp    c00182c5 <scanMADT()+0x469>
c0017feb:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017ff0:	0f 85 14 01 00 00    	jne    c001810a <scanMADT()+0x2ae>
c0017ff6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ffa:	8d 50 01             	lea    edx,[eax+0x1]
c0017ffd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018001:	8a 15 20 1c 03 c0    	mov    dl,BYTE PTR ds:0xc0031c20
c0018007:	0f b6 d2             	movzx  edx,dl
c001800a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001800e:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0018012:	88 82 40 1c 03 c0    	mov    BYTE PTR [edx-0x3ffce3c0],al
c0018018:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c001801c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018020:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018024:	01 d0                	add    eax,edx
c0018026:	83 c0 2c             	add    eax,0x2c
c0018029:	8a 00                	mov    al,BYTE PTR [eax]
c001802b:	0f b6 d0             	movzx  edx,al
c001802e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018032:	8d 48 01             	lea    ecx,[eax+0x1]
c0018035:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018039:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001803d:	0f b6 c0             	movzx  eax,al
c0018040:	c1 e0 08             	shl    eax,0x8
c0018043:	89 d1                	mov    ecx,edx
c0018045:	09 c1                	or     ecx,eax
c0018047:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001804b:	8d 50 02             	lea    edx,[eax+0x2]
c001804e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018052:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018056:	0f b6 c0             	movzx  eax,al
c0018059:	c1 e0 10             	shl    eax,0x10
c001805c:	09 c1                	or     ecx,eax
c001805e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018062:	8d 50 03             	lea    edx,[eax+0x3]
c0018065:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018069:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001806d:	0f b6 c0             	movzx  eax,al
c0018070:	c1 e0 18             	shl    eax,0x18
c0018073:	09 c1                	or     ecx,eax
c0018075:	89 ca                	mov    edx,ecx
c0018077:	a0 20 1c 03 c0       	mov    al,ds:0xc0031c20
c001807c:	0f b6 c0             	movzx  eax,al
c001807f:	89 14 85 60 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce3a0],edx
c0018086:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001808b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001808f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018093:	01 d0                	add    eax,edx
c0018095:	83 c0 2c             	add    eax,0x2c
c0018098:	8a 00                	mov    al,BYTE PTR [eax]
c001809a:	0f b6 d0             	movzx  edx,al
c001809d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180a1:	8d 48 01             	lea    ecx,[eax+0x1]
c00180a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180a8:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00180ac:	0f b6 c0             	movzx  eax,al
c00180af:	c1 e0 08             	shl    eax,0x8
c00180b2:	89 d1                	mov    ecx,edx
c00180b4:	09 c1                	or     ecx,eax
c00180b6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180ba:	8d 50 02             	lea    edx,[eax+0x2]
c00180bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180c1:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00180c5:	0f b6 c0             	movzx  eax,al
c00180c8:	c1 e0 10             	shl    eax,0x10
c00180cb:	09 c1                	or     ecx,eax
c00180cd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180d1:	8d 50 03             	lea    edx,[eax+0x3]
c00180d4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180d8:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00180dc:	0f b6 c0             	movzx  eax,al
c00180df:	c1 e0 18             	shl    eax,0x18
c00180e2:	09 c1                	or     ecx,eax
c00180e4:	89 ca                	mov    edx,ecx
c00180e6:	a0 20 1c 03 c0       	mov    al,ds:0xc0031c20
c00180eb:	0f b6 c0             	movzx  eax,al
c00180ee:	89 14 85 e0 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce320],edx
c00180f5:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00180fa:	a0 20 1c 03 c0       	mov    al,ds:0xc0031c20
c00180ff:	40                   	inc    eax
c0018100:	a2 20 1c 03 c0       	mov    ds:0xc0031c20,al
c0018105:	e9 bb 01 00 00       	jmp    c00182c5 <scanMADT()+0x469>
c001810a:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c001810f:	0f 85 e9 00 00 00    	jne    c00181fe <scanMADT()+0x3a2>
c0018115:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018119:	8d 50 01             	lea    edx,[eax+0x1]
c001811c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018120:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018124:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018128:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c001812c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018130:	8d 50 01             	lea    edx,[eax+0x1]
c0018133:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018137:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001813b:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001813f:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0018143:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018147:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001814b:	01 d0                	add    eax,edx
c001814d:	83 c0 2c             	add    eax,0x2c
c0018150:	8a 00                	mov    al,BYTE PTR [eax]
c0018152:	0f b6 d0             	movzx  edx,al
c0018155:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018159:	8d 48 01             	lea    ecx,[eax+0x1]
c001815c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018160:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0018164:	0f b6 c0             	movzx  eax,al
c0018167:	c1 e0 08             	shl    eax,0x8
c001816a:	89 d1                	mov    ecx,edx
c001816c:	09 c1                	or     ecx,eax
c001816e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018172:	8d 50 02             	lea    edx,[eax+0x2]
c0018175:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018179:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001817d:	0f b6 c0             	movzx  eax,al
c0018180:	c1 e0 10             	shl    eax,0x10
c0018183:	09 c1                	or     ecx,eax
c0018185:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018189:	8d 50 03             	lea    edx,[eax+0x3]
c001818c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018190:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018194:	0f b6 c0             	movzx  eax,al
c0018197:	c1 e0 18             	shl    eax,0x18
c001819a:	09 c8                	or     eax,ecx
c001819c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00181a0:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00181a5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00181a9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181ad:	01 d0                	add    eax,edx
c00181af:	83 c0 2c             	add    eax,0x2c
c00181b2:	8a 00                	mov    al,BYTE PTR [eax]
c00181b4:	0f b6 c0             	movzx  eax,al
c00181b7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00181bb:	8d 4a 01             	lea    ecx,[edx+0x1]
c00181be:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00181c2:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c00181c6:	0f b6 d2             	movzx  edx,dl
c00181c9:	c1 e2 08             	shl    edx,0x8
c00181cc:	09 d0                	or     eax,edx
c00181ce:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00181d3:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00181d8:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c00181dd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00181e1:	88 90 e0 e4 02 c0    	mov    BYTE PTR [eax-0x3ffd1b20],dl
c00181e7:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c00181ec:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00181f1:	66 89 84 12 00 1c 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffce400],ax
c00181f9:	e9 c7 00 00 00       	jmp    c00182c5 <scanMADT()+0x469>
c00181fe:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0018203:	0f 85 b0 00 00 00    	jne    c00182b9 <scanMADT()+0x45d>
c0018209:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001820d:	8d 50 01             	lea    edx,[eax+0x1]
c0018210:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018214:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018218:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001821c:	0f b6 c0             	movzx  eax,al
c001821f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018223:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018227:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001822b:	01 d0                	add    eax,edx
c001822d:	83 c0 2c             	add    eax,0x2c
c0018230:	8a 00                	mov    al,BYTE PTR [eax]
c0018232:	0f b6 d0             	movzx  edx,al
c0018235:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018239:	8d 48 01             	lea    ecx,[eax+0x1]
c001823c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018240:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0018244:	0f b6 c0             	movzx  eax,al
c0018247:	c1 e0 08             	shl    eax,0x8
c001824a:	09 d0                	or     eax,edx
c001824c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018250:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0018255:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018259:	8d 50 01             	lea    edx,[eax+0x1]
c001825c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018260:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018264:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018268:	0f b6 c0             	movzx  eax,al
c001826b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001826f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018273:	c1 e0 08             	shl    eax,0x8
c0018276:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001827a:	89 c1                	mov    ecx,eax
c001827c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018280:	c1 e0 18             	shl    eax,0x18
c0018283:	89 c3                	mov    ebx,eax
c0018285:	a1 70 1b 03 c0       	mov    eax,ds:0xc0031b70
c001828a:	8d 50 01             	lea    edx,[eax+0x1]
c001828d:	89 15 70 1b 03 c0    	mov    DWORD PTR ds:0xc0031b70,edx
c0018293:	09 d9                	or     ecx,ebx
c0018295:	89 ca                	mov    edx,ecx
c0018297:	89 14 85 80 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce480],edx
c001829e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00182a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00182a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00182aa:	68 34 c3 02 c0       	push   0xc002c334
c00182af:	e8 9f ab ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c00182b4:	83 c4 10             	add    esp,0x10
c00182b7:	eb 0c                	jmp    c00182c5 <scanMADT()+0x469>
c00182b9:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c00182be:	75 05                	jne    c00182c5 <scanMADT()+0x469>
c00182c0:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c00182c5:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c00182ca:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00182ce:	01 d0                	add    eax,edx
c00182d0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00182d4:	e9 54 fc ff ff       	jmp    c0017f2d <scanMADT()+0xd1>
c00182d9:	90                   	nop
c00182da:	eb 01                	jmp    c00182dd <scanMADT()+0x481>
c00182dc:	90                   	nop
c00182dd:	83 c4 38             	add    esp,0x38
c00182e0:	5b                   	pop    ebx
c00182e1:	c3                   	ret    

c00182e2 <ACPI::ACPI()>:
c00182e2:	83 ec 0c             	sub    esp,0xc
c00182e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182e9:	83 ec 08             	sub    esp,0x8
c00182ec:	68 95 c1 02 c0       	push   0xc002c195
c00182f1:	50                   	push   eax
c00182f2:	e8 6d c1 ff ff       	call   c0014464 <Device::Device(char const*)>
c00182f7:	83 c4 10             	add    esp,0x10
c00182fa:	ba d0 c3 02 c0       	mov    edx,0xc002c3d0
c00182ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018303:	89 10                	mov    DWORD PTR [eax],edx
c0018305:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018309:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0018310:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018314:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c001831e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018322:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c001832c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018330:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0018337:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001833b:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c0018342:	e8 15 fb ff ff       	call   c0017e5c <scanMADT()>
c0018347:	90                   	nop
c0018348:	83 c4 0c             	add    esp,0xc
c001834b:	c3                   	ret    

c001834c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c001834c:	83 ec 2c             	sub    esp,0x2c
c001834f:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0018353:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018357:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001835b:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001835f:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0018364:	88 d0                	mov    al,dl
c0018366:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001836a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001836f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0018377:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001837b:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018381:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0018385:	0f 8d 97 00 00 00    	jge    c0018422 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c001838b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001838f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018393:	83 c2 2a             	add    edx,0x2a
c0018396:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c001839a:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c001839f:	75 78                	jne    c0018419 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00183a1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00183a5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00183a9:	83 c2 2a             	add    edx,0x2a
c00183ac:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c00183b0:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c00183b4:	75 63                	jne    c0018419 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00183b6:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00183bb:	74 3a                	je     c00183f7 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c00183bd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00183c1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00183c5:	83 c2 2a             	add    edx,0x2a
c00183c8:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c00183cc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00183d3:	39 c2                	cmp    edx,eax
c00183d5:	74 10                	je     c00183e7 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c00183d7:	83 ec 0c             	sub    esp,0xc
c00183da:	68 70 c3 02 c0       	push   0xc002c370
c00183df:	e8 09 25 00 00       	call   c001a8ed <Krnl::panic(char const*)>
c00183e4:	83 c4 10             	add    esp,0x10
c00183e7:	83 ec 0c             	sub    esp,0xc
c00183ea:	68 9a c1 02 c0       	push   0xc002c19a
c00183ef:	e8 f9 24 00 00       	call   c001a8ed <Krnl::panic(char const*)>
c00183f4:	83 c4 10             	add    esp,0x10
c00183f7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00183fb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00183ff:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018403:	83 c2 2a             	add    edx,0x2a
c0018406:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c001840a:	8b 02                	mov    eax,DWORD PTR [edx]
c001840c:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001840f:	89 01                	mov    DWORD PTR [ecx],eax
c0018411:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018414:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0018419:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001841d:	e9 55 ff ff ff       	jmp    c0018377 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0018422:	90                   	nop
c0018423:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018427:	83 c4 2c             	add    esp,0x2c
c001842a:	c2 04 00             	ret    0x4
c001842d:	90                   	nop

c001842e <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c001842e:	83 ec 1c             	sub    esp,0x1c
c0018431:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018435:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0018439:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001843d:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0018442:	88 c8                	mov    al,cl
c0018444:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018448:	88 d0                	mov    al,dl
c001844a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001844e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018452:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018458:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001845c:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001845f:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0018463:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0018467:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001846b:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018471:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018475:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0018478:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001847c:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0018481:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018485:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001848b:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001848f:	8d 48 01             	lea    ecx,[eax+0x1]
c0018492:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018496:	83 c2 2a             	add    edx,0x2a
c0018499:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c001849d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184a1:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00184a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184ab:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00184ae:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00184b2:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c00184b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184ba:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00184c0:	8d 50 01             	lea    edx,[eax+0x1]
c00184c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184c7:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c00184cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184d1:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00184d7:	3d 00 02 00 00       	cmp    eax,0x200
c00184dc:	75 10                	jne    c00184ee <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c00184de:	83 ec 0c             	sub    esp,0xc
c00184e1:	68 a9 c1 02 c0       	push   0xc002c1a9
c00184e6:	e8 02 24 00 00       	call   c001a8ed <Krnl::panic(char const*)>
c00184eb:	83 c4 10             	add    esp,0x10
c00184ee:	90                   	nop
c00184ef:	83 c4 1c             	add    esp,0x1c
c00184f2:	c3                   	ret    
c00184f3:	90                   	nop

c00184f4 <ACPI::setScreenBrightnessLevel(void*, int)>:
c00184f4:	b8 00 00 00 00       	mov    eax,0x0
c00184f9:	c3                   	ret    

c00184fa <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c00184fa:	83 ec 1c             	sub    esp,0x1c
c00184fd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018501:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0018504:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018508:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c001850d:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0018512:	83 ec 08             	sub    esp,0x8
c0018515:	52                   	push   edx
c0018516:	50                   	push   eax
c0018517:	e8 a2 69 ff ff       	call   c000eebe <Computer::readCMOS(unsigned char)>
c001851c:	83 c4 10             	add    esp,0x10
c001851f:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018523:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c0018528:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001852d:	83 ec 04             	sub    esp,0x4
c0018530:	6a 01                	push   0x1
c0018532:	52                   	push   edx
c0018533:	50                   	push   eax
c0018534:	e8 9b 6a ff ff       	call   c000efd4 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018539:	83 c4 10             	add    esp,0x10
c001853c:	90                   	nop
c001853d:	83 c4 1c             	add    esp,0x1c
c0018540:	c3                   	ret    
c0018541:	90                   	nop

c0018542 <ACPI::sleep()>:
c0018542:	83 ec 0c             	sub    esp,0xc
c0018545:	a1 40 19 03 c0       	mov    eax,ds:0xc0031940
c001854a:	85 c0                	test   eax,eax
c001854c:	74 07                	je     c0018555 <ACPI::sleep()+0x13>
c001854e:	a1 40 19 03 c0       	mov    eax,ds:0xc0031940
c0018553:	ff d0                	call   eax
c0018555:	90                   	nop
c0018556:	83 c4 0c             	add    esp,0xc
c0018559:	c3                   	ret    

c001855a <ACPI::open(int, int, void*)>:
c001855a:	57                   	push   edi
c001855b:	56                   	push   esi
c001855c:	53                   	push   ebx
c001855d:	81 ec 60 01 00 00    	sub    esp,0x160
c0018563:	8b 84 24 70 01 00 00 	mov    eax,DWORD PTR [esp+0x170]
c001856a:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0018571:	8b 84 24 70 01 00 00 	mov    eax,DWORD PTR [esp+0x170]
c0018578:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c001857f:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c0018584:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001858a:	83 e0 04             	and    eax,0x4
c001858d:	84 c0                	test   al,al
c001858f:	74 53                	je     c00185e4 <ACPI::open(int, int, void*)+0x8a>
c0018591:	a1 68 1b 03 c0       	mov    eax,ds:0xc0031b68
c0018596:	83 ec 08             	sub    esp,0x8
c0018599:	68 c6 c1 02 c0       	push   0xc002c1c6
c001859e:	50                   	push   eax
c001859f:	e8 1c f8 ff ff       	call   c0017dc0 <findDataTable(unsigned char*, char*)>
c00185a4:	83 c4 10             	add    esp,0x10
c00185a7:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c00185ae:	83 bc 24 5c 01 00 00 00 	cmp    DWORD PTR [esp+0x15c],0x0
c00185b6:	74 2c                	je     c00185e4 <ACPI::open(int, int, void*)+0x8a>
c00185b8:	83 ec 0c             	sub    esp,0xc
c00185bb:	68 cb c1 02 c0       	push   0xc002c1cb
c00185c0:	e8 8e a8 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c00185c5:	83 c4 10             	add    esp,0x10
c00185c8:	8b 84 24 70 01 00 00 	mov    eax,DWORD PTR [esp+0x170]
c00185cf:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00185d6:	8b 84 24 70 01 00 00 	mov    eax,DWORD PTR [esp+0x170]
c00185dd:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00185e4:	c7 84 24 58 01 00 00 5f 0c 00 00 	mov    DWORD PTR [esp+0x158],0xc5f
c00185ef:	8b 84 24 58 01 00 00 	mov    eax,DWORD PTR [esp+0x158]
c00185f6:	8a 00                	mov    al,BYTE PTR [eax]
c00185f8:	3c 01                	cmp    al,0x1
c00185fa:	75 2e                	jne    c001862a <ACPI::open(int, int, void*)+0xd0>
c00185fc:	8b 84 24 70 01 00 00 	mov    eax,DWORD PTR [esp+0x170]
c0018603:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001860a:	8b 84 24 70 01 00 00 	mov    eax,DWORD PTR [esp+0x170]
c0018611:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018618:	83 ec 0c             	sub    esp,0xc
c001861b:	68 dc c1 02 c0       	push   0xc002c1dc
c0018620:	e8 2e a8 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0018625:	83 c4 10             	add    esp,0x10
c0018628:	eb 2b                	jmp    c0018655 <ACPI::open(int, int, void*)+0xfb>
c001862a:	8b 84 24 58 01 00 00 	mov    eax,DWORD PTR [esp+0x158]
c0018631:	8a 00                	mov    al,BYTE PTR [eax]
c0018633:	3c 02                	cmp    al,0x2
c0018635:	75 1e                	jne    c0018655 <ACPI::open(int, int, void*)+0xfb>
c0018637:	8b 84 24 70 01 00 00 	mov    eax,DWORD PTR [esp+0x170]
c001863e:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018645:	83 ec 0c             	sub    esp,0xc
c0018648:	68 e4 c1 02 c0       	push   0xc002c1e4
c001864d:	e8 01 a8 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0018652:	83 c4 10             	add    esp,0x10
c0018655:	8b 84 24 70 01 00 00 	mov    eax,DWORD PTR [esp+0x170]
c001865c:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018662:	83 f0 01             	xor    eax,0x1
c0018665:	84 c0                	test   al,al
c0018667:	74 7c                	je     c00186e5 <ACPI::open(int, int, void*)+0x18b>
c0018669:	83 ec 0c             	sub    esp,0xc
c001866c:	68 ec c1 02 c0       	push   0xc002c1ec
c0018671:	e8 dd a7 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0018676:	83 c4 10             	add    esp,0x10
c0018679:	e8 d2 7a fe ff       	call   c0000150 <manualPCIProbe>
c001867e:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c0018685:	83 bc 24 54 01 00 00 01 	cmp    DWORD PTR [esp+0x154],0x1
c001868d:	75 2e                	jne    c00186bd <ACPI::open(int, int, void*)+0x163>
c001868f:	8b 84 24 70 01 00 00 	mov    eax,DWORD PTR [esp+0x170]
c0018696:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001869d:	8b 84 24 70 01 00 00 	mov    eax,DWORD PTR [esp+0x170]
c00186a4:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00186ab:	83 ec 0c             	sub    esp,0xc
c00186ae:	68 fa c1 02 c0       	push   0xc002c1fa
c00186b3:	e8 9b a7 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c00186b8:	83 c4 10             	add    esp,0x10
c00186bb:	eb 28                	jmp    c00186e5 <ACPI::open(int, int, void*)+0x18b>
c00186bd:	83 bc 24 54 01 00 00 02 	cmp    DWORD PTR [esp+0x154],0x2
c00186c5:	75 1e                	jne    c00186e5 <ACPI::open(int, int, void*)+0x18b>
c00186c7:	8b 84 24 70 01 00 00 	mov    eax,DWORD PTR [esp+0x170]
c00186ce:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00186d5:	83 ec 0c             	sub    esp,0xc
c00186d8:	68 04 c2 02 c0       	push   0xc002c204
c00186dd:	e8 71 a7 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c00186e2:	83 c4 10             	add    esp,0x10
c00186e5:	8b 84 24 70 01 00 00 	mov    eax,DWORD PTR [esp+0x170]
c00186ec:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c00186f2:	84 c0                	test   al,al
c00186f4:	74 16                	je     c001870c <ACPI::open(int, int, void*)+0x1b2>
c00186f6:	8b 84 24 70 01 00 00 	mov    eax,DWORD PTR [esp+0x170]
c00186fd:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c0018703:	83 f0 01             	xor    eax,0x1
c0018706:	0f b6 c0             	movzx  eax,al
c0018709:	40                   	inc    eax
c001870a:	eb 05                	jmp    c0018711 <ACPI::open(int, int, void*)+0x1b7>
c001870c:	b8 00 00 00 00       	mov    eax,0x0
c0018711:	83 ec 08             	sub    esp,0x8
c0018714:	50                   	push   eax
c0018715:	68 0e c2 02 c0       	push   0xc002c20e
c001871a:	e8 34 a7 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001871f:	83 c4 10             	add    esp,0x10
c0018722:	8b 84 24 70 01 00 00 	mov    eax,DWORD PTR [esp+0x170]
c0018729:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c001872f:	84 c0                	test   al,al
c0018731:	74 7c                	je     c00187af <ACPI::open(int, int, void*)+0x255>
c0018733:	c7 84 24 38 01 00 00 58 01 00 00 	mov    DWORD PTR [esp+0x138],0x158
c001873e:	83 ec 0c             	sub    esp,0xc
c0018741:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0018748:	e8 5b 71 ff ff       	call   c000f8a8 <malloc>
c001874d:	83 c4 10             	add    esp,0x10
c0018750:	89 c3                	mov    ebx,eax
c0018752:	83 ec 0c             	sub    esp,0xc
c0018755:	53                   	push   ebx
c0018756:	e8 ef aa 00 00       	call   c002324a <PCI::PCI()>
c001875b:	83 c4 10             	add    esp,0x10
c001875e:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c0018765:	8b 84 24 70 01 00 00 	mov    eax,DWORD PTR [esp+0x170]
c001876c:	83 ec 08             	sub    esp,0x8
c001876f:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0018776:	50                   	push   eax
c0018777:	e8 f8 ba ff ff       	call   c0014274 <Device::addChild(Device*)>
c001877c:	83 c4 10             	add    esp,0x10
c001877f:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c0018786:	8b 00                	mov    eax,DWORD PTR [eax]
c0018788:	83 c0 08             	add    eax,0x8
c001878b:	8b 00                	mov    eax,DWORD PTR [eax]
c001878d:	6a 00                	push   0x0
c001878f:	6a 00                	push   0x0
c0018791:	6a 00                	push   0x0
c0018793:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c001879a:	ff d0                	call   eax
c001879c:	83 c4 10             	add    esp,0x10
c001879f:	83 ec 0c             	sub    esp,0xc
c00187a2:	68 17 c2 02 c0       	push   0xc002c217
c00187a7:	e8 a7 a6 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c00187ac:	83 c4 10             	add    esp,0x10
c00187af:	83 ec 0c             	sub    esp,0xc
c00187b2:	68 22 c2 02 c0       	push   0xc002c222
c00187b7:	e8 8e 4a 00 00       	call   c001d24a <Thr::loadKernelSymbolTable(char const*)>
c00187bc:	83 c4 10             	add    esp,0x10
c00187bf:	83 ec 0c             	sub    esp,0xc
c00187c2:	6a 0c                	push   0xc
c00187c4:	e8 c3 94 ff ff       	call   c0011c8c <Virt::setupPageSwapping(int)>
c00187c9:	83 c4 10             	add    esp,0x10
c00187cc:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00187d3:	83 ec 08             	sub    esp,0x8
c00187d6:	6a 12                	push   0x12
c00187d8:	50                   	push   eax
c00187d9:	e8 06 be ff ff       	call   c00145e4 <getDevicesOfType(DeviceType)>
c00187de:	83 c4 0c             	add    esp,0xc
c00187e1:	83 ec 0c             	sub    esp,0xc
c00187e4:	8d 84 24 34 01 00 00 	lea    eax,[esp+0x134]
c00187eb:	50                   	push   eax
c00187ec:	e8 6f 10 01 00       	call   c0029860 <LinkedList<Device>::isEmpty()>
c00187f1:	83 c4 10             	add    esp,0x10
c00187f4:	83 f0 01             	xor    eax,0x1
c00187f7:	84 c0                	test   al,al
c00187f9:	0f 84 20 01 00 00    	je     c001891f <ACPI::open(int, int, void*)+0x3c5>
c00187ff:	83 ec 0c             	sub    esp,0xc
c0018802:	8d 84 24 34 01 00 00 	lea    eax,[esp+0x134]
c0018809:	50                   	push   eax
c001880a:	e8 6d 10 01 00       	call   c002987c <LinkedList<Device>::getFirstElement()>
c001880f:	83 c4 10             	add    esp,0x10
c0018812:	89 84 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],eax
c0018819:	83 ec 0c             	sub    esp,0xc
c001881c:	8d 84 24 34 01 00 00 	lea    eax,[esp+0x134]
c0018823:	50                   	push   eax
c0018824:	e8 5b 10 01 00       	call   c0029884 <LinkedList<Device>::removeFirst()>
c0018829:	83 c4 10             	add    esp,0x10
c001882c:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c0018833:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c001883a:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c0018841:	83 ec 0c             	sub    esp,0xc
c0018844:	50                   	push   eax
c0018845:	e8 16 bd ff ff       	call   c0014560 <Device::getName()>
c001884a:	83 c4 10             	add    esp,0x10
c001884d:	83 ec 08             	sub    esp,0x8
c0018850:	50                   	push   eax
c0018851:	68 a0 c3 02 c0       	push   0xc002c3a0
c0018856:	e8 f8 a5 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001885b:	83 c4 10             	add    esp,0x10
c001885e:	8b 94 24 48 01 00 00 	mov    edx,DWORD PTR [esp+0x148]
c0018865:	8d 44 24 04          	lea    eax,[esp+0x4]
c0018869:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c001886f:	ba 09 00 00 00       	mov    edx,0x9
c0018874:	fc                   	cld    
c0018875:	89 c7                	mov    edi,eax
c0018877:	89 de                	mov    esi,ebx
c0018879:	89 d1                	mov    ecx,edx
c001887b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001887d:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0018881:	0f b6 c0             	movzx  eax,al
c0018884:	83 ec 08             	sub    esp,0x8
c0018887:	50                   	push   eax
c0018888:	68 40 c2 02 c0       	push   0xc002c240
c001888d:	e8 c1 a5 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0018892:	83 c4 10             	add    esp,0x10
c0018895:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0018899:	0f b6 c0             	movzx  eax,al
c001889c:	83 ec 08             	sub    esp,0x8
c001889f:	50                   	push   eax
c00188a0:	68 52 c2 02 c0       	push   0xc002c252
c00188a5:	e8 a9 a5 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c00188aa:	83 c4 10             	add    esp,0x10
c00188ad:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00188b2:	0f b7 c0             	movzx  eax,ax
c00188b5:	83 ec 08             	sub    esp,0x8
c00188b8:	50                   	push   eax
c00188b9:	68 64 c2 02 c0       	push   0xc002c264
c00188be:	e8 90 a5 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c00188c3:	83 c4 10             	add    esp,0x10
c00188c6:	83 ec 08             	sub    esp,0x8
c00188c9:	8d 44 24 30          	lea    eax,[esp+0x30]
c00188cd:	50                   	push   eax
c00188ce:	83 ec 24             	sub    esp,0x24
c00188d1:	89 e0                	mov    eax,esp
c00188d3:	89 c3                	mov    ebx,eax
c00188d5:	8d 44 24 34          	lea    eax,[esp+0x34]
c00188d9:	ba 09 00 00 00       	mov    edx,0x9
c00188de:	89 df                	mov    edi,ebx
c00188e0:	89 c6                	mov    esi,eax
c00188e2:	89 d1                	mov    ecx,edx
c00188e4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00188e6:	e8 c1 ac 00 00       	call   c00235ac <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c00188eb:	83 c4 30             	add    esp,0x30
c00188ee:	89 84 24 44 01 00 00 	mov    DWORD PTR [esp+0x144],eax
c00188f5:	83 bc 24 44 01 00 00 00 	cmp    DWORD PTR [esp+0x144],0x0
c00188fd:	0f 84 de fe ff ff    	je     c00187e1 <ACPI::open(int, int, void*)+0x287>
c0018903:	83 ec 08             	sub    esp,0x8
c0018906:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001890d:	68 76 c2 02 c0       	push   0xc002c276
c0018912:	e8 3c a5 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0018917:	83 c4 10             	add    esp,0x10
c001891a:	e9 c2 fe ff ff       	jmp    c00187e1 <ACPI::open(int, int, void*)+0x287>
c001891f:	83 ec 0c             	sub    esp,0xc
c0018922:	8d 84 24 34 01 00 00 	lea    eax,[esp+0x134]
c0018929:	50                   	push   eax
c001892a:	e8 2f 0f 01 00       	call   c002985e <LinkedList<Device>::~LinkedList()>
c001892f:	83 c4 10             	add    esp,0x10
c0018932:	8b 1d 88 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f288
c0018938:	83 ec 08             	sub    esp,0x8
c001893b:	6a 01                	push   0x1
c001893d:	68 82 c2 02 c0       	push   0xc002c282
c0018942:	e8 7a 53 00 00       	call   c001dcc1 <Thr::loadDLL(char const*, bool)>
c0018947:	83 c4 10             	add    esp,0x10
c001894a:	83 ec 08             	sub    esp,0x8
c001894d:	53                   	push   ebx
c001894e:	50                   	push   eax
c001894f:	e8 98 55 00 00       	call   c001deec <Thr::executeDLL(unsigned long, void*)>
c0018954:	83 c4 10             	add    esp,0x10
c0018957:	8b 1d 88 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f288
c001895d:	83 ec 08             	sub    esp,0x8
c0018960:	6a 01                	push   0x1
c0018962:	68 9f c2 02 c0       	push   0xc002c29f
c0018967:	e8 55 53 00 00       	call   c001dcc1 <Thr::loadDLL(char const*, bool)>
c001896c:	83 c4 10             	add    esp,0x10
c001896f:	83 ec 08             	sub    esp,0x8
c0018972:	53                   	push   ebx
c0018973:	50                   	push   eax
c0018974:	e8 73 55 00 00       	call   c001deec <Thr::executeDLL(unsigned long, void*)>
c0018979:	83 c4 10             	add    esp,0x10
c001897c:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c0018981:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018987:	83 e0 04             	and    eax,0x4
c001898a:	84 c0                	test   al,al
c001898c:	0f 84 fd 00 00 00    	je     c0018a8f <ACPI::open(int, int, void*)+0x535>
c0018992:	c7 84 24 34 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x134],0x114
c001899d:	83 ec 0c             	sub    esp,0xc
c00189a0:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00189a7:	e8 fc 6e ff ff       	call   c000f8a8 <malloc>
c00189ac:	83 c4 10             	add    esp,0x10
c00189af:	89 c3                	mov    ebx,eax
c00189b1:	a1 f0 27 03 c0       	mov    eax,ds:0xc00327f0
c00189b6:	83 ec 04             	sub    esp,0x4
c00189b9:	50                   	push   eax
c00189ba:	68 bc c2 02 c0       	push   0xc002c2bc
c00189bf:	53                   	push   ebx
c00189c0:	e8 ed a9 ff ff       	call   c00133b2 <File::File(char const*, Process*)>
c00189c5:	83 c4 10             	add    esp,0x10
c00189c8:	89 9c 24 40 01 00 00 	mov    DWORD PTR [esp+0x140],ebx
c00189cf:	83 bc 24 40 01 00 00 00 	cmp    DWORD PTR [esp+0x140],0x0
c00189d7:	74 1a                	je     c00189f3 <ACPI::open(int, int, void*)+0x499>
c00189d9:	83 ec 0c             	sub    esp,0xc
c00189dc:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00189e3:	e8 9c ac ff ff       	call   c0013684 <File::exists()>
c00189e8:	83 c4 10             	add    esp,0x10
c00189eb:	84 c0                	test   al,al
c00189ed:	74 04                	je     c00189f3 <ACPI::open(int, int, void*)+0x499>
c00189ef:	b0 01                	mov    al,0x1
c00189f1:	eb 02                	jmp    c00189f5 <ACPI::open(int, int, void*)+0x49b>
c00189f3:	b0 00                	mov    al,0x0
c00189f5:	84 c0                	test   al,al
c00189f7:	74 25                	je     c0018a1e <ACPI::open(int, int, void*)+0x4c4>
c00189f9:	83 ec 08             	sub    esp,0x8
c00189fc:	6a 01                	push   0x1
c00189fe:	68 bc c2 02 c0       	push   0xc002c2bc
c0018a03:	e8 b9 52 00 00       	call   c001dcc1 <Thr::loadDLL(char const*, bool)>
c0018a08:	83 c4 10             	add    esp,0x10
c0018a0b:	83 ec 08             	sub    esp,0x8
c0018a0e:	ff b4 24 78 01 00 00 	push   DWORD PTR [esp+0x178]
c0018a15:	50                   	push   eax
c0018a16:	e8 d1 54 00 00       	call   c001deec <Thr::executeDLL(unsigned long, void*)>
c0018a1b:	83 c4 10             	add    esp,0x10
c0018a1e:	83 bc 24 40 01 00 00 00 	cmp    DWORD PTR [esp+0x140],0x0
c0018a26:	74 27                	je     c0018a4f <ACPI::open(int, int, void*)+0x4f5>
c0018a28:	83 bc 24 40 01 00 00 00 	cmp    DWORD PTR [esp+0x140],0x0
c0018a30:	74 1d                	je     c0018a4f <ACPI::open(int, int, void*)+0x4f5>
c0018a32:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0018a39:	8b 00                	mov    eax,DWORD PTR [eax]
c0018a3b:	83 c0 08             	add    eax,0x8
c0018a3e:	8b 00                	mov    eax,DWORD PTR [eax]
c0018a40:	83 ec 0c             	sub    esp,0xc
c0018a43:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0018a4a:	ff d0                	call   eax
c0018a4c:	83 c4 10             	add    esp,0x10
c0018a4f:	a1 68 1b 03 c0       	mov    eax,ds:0xc0031b68
c0018a54:	83 ec 08             	sub    esp,0x8
c0018a57:	68 d9 c2 02 c0       	push   0xc002c2d9
c0018a5c:	50                   	push   eax
c0018a5d:	e8 5e f3 ff ff       	call   c0017dc0 <findDataTable(unsigned char*, char*)>
c0018a62:	83 c4 10             	add    esp,0x10
c0018a65:	89 84 24 3c 01 00 00 	mov    DWORD PTR [esp+0x13c],eax
c0018a6c:	83 bc 24 3c 01 00 00 00 	cmp    DWORD PTR [esp+0x13c],0x0
c0018a74:	74 19                	je     c0018a8f <ACPI::open(int, int, void*)+0x535>
c0018a76:	83 ec 08             	sub    esp,0x8
c0018a79:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0018a80:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c0018a87:	e8 6e fa ff ff       	call   c00184fa <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0018a8c:	83 c4 10             	add    esp,0x10
c0018a8f:	b8 00 00 00 00       	mov    eax,0x0
c0018a94:	81 c4 60 01 00 00    	add    esp,0x160
c0018a9a:	5b                   	pop    ebx
c0018a9b:	5e                   	pop    esi
c0018a9c:	5f                   	pop    edi
c0018a9d:	c3                   	ret    

c0018a9e <CPU::close(int, int, void*)>:
c0018a9e:	31 c0                	xor    eax,eax
c0018aa0:	c3                   	ret    
c0018aa1:	90                   	nop

c0018aa2 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0018aa2:	55                   	push   ebp
c0018aa3:	57                   	push   edi
c0018aa4:	56                   	push   esi
c0018aa5:	53                   	push   ebx
c0018aa6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018aaa:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018aae:	89 ce                	mov    esi,ecx
c0018ab0:	89 d5                	mov    ebp,edx
c0018ab2:	80 f9 04             	cmp    cl,0x4
c0018ab5:	75 28                	jne    c0018adf <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0018ab7:	8d 42 f9             	lea    eax,[edx-0x7]
c0018aba:	3c 03                	cmp    al,0x3
c0018abc:	0f 86 63 01 00 00    	jbe    c0018c25 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018ac2:	80 fa 03             	cmp    dl,0x3
c0018ac5:	0f 84 5a 01 00 00    	je     c0018c25 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018acb:	8d 7a f2             	lea    edi,[edx-0xe]
c0018ace:	b8 b0 e6 02 c0       	mov    eax,0xc002e6b0
c0018ad3:	89 fb                	mov    ebx,edi
c0018ad5:	80 fb 01             	cmp    bl,0x1
c0018ad8:	77 4e                	ja     c0018b28 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0018ada:	e9 52 01 00 00       	jmp    c0018c31 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018adf:	80 f9 05             	cmp    cl,0x5
c0018ae2:	75 4d                	jne    c0018b31 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0018ae4:	b8 c0 e6 02 c0       	mov    eax,0xc002e6c0
c0018ae9:	80 fa 03             	cmp    dl,0x3
c0018aec:	0f 86 3f 01 00 00    	jbe    c0018c31 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018af2:	8d 7a fa             	lea    edi,[edx-0x6]
c0018af5:	b8 d0 e6 02 c0       	mov    eax,0xc002e6d0
c0018afa:	89 fb                	mov    ebx,edi
c0018afc:	80 fb 01             	cmp    bl,0x1
c0018aff:	0f 86 2c 01 00 00    	jbe    c0018c31 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b05:	b8 e0 e6 02 c0       	mov    eax,0xc002e6e0
c0018b0a:	80 fa 08             	cmp    dl,0x8
c0018b0d:	0f 84 1e 01 00 00    	je     c0018c31 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b13:	89 d7                	mov    edi,edx
c0018b15:	b8 f0 e6 02 c0       	mov    eax,0xc002e6f0
c0018b1a:	83 e7 fb             	and    edi,0xfffffffb
c0018b1d:	89 fb                	mov    ebx,edi
c0018b1f:	80 fb 09             	cmp    bl,0x9
c0018b22:	0f 84 09 01 00 00    	je     c0018c31 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b28:	31 c0                	xor    eax,eax
c0018b2a:	89 eb                	mov    ebx,ebp
c0018b2c:	0f b6 fb             	movzx  edi,bl
c0018b2f:	eb 30                	jmp    c0018b61 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0018b31:	31 c0                	xor    eax,eax
c0018b33:	80 f9 06             	cmp    cl,0x6
c0018b36:	75 f2                	jne    c0018b2a <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018b38:	80 fa 0a             	cmp    dl,0xa
c0018b3b:	77 ed                	ja     c0018b2a <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018b3d:	bf de 05 00 00       	mov    edi,0x5de
c0018b42:	0f a3 d7             	bt     edi,edx
c0018b45:	73 e3                	jae    c0018b2a <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018b47:	b8 00 e7 02 c0       	mov    eax,0xc002e700
c0018b4c:	e9 e0 00 00 00       	jmp    c0018c31 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b51:	39 c7                	cmp    edi,eax
c0018b53:	0f 84 d3 00 00 00    	je     c0018c2c <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018b59:	40                   	inc    eax
c0018b5a:	3d d0 00 00 00       	cmp    eax,0xd0
c0018b5f:	74 09                	je     c0018b6a <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0018b61:	89 f3                	mov    ebx,esi
c0018b63:	80 fb 0f             	cmp    bl,0xf
c0018b66:	75 f1                	jne    c0018b59 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0018b68:	eb e7                	jmp    c0018b51 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0018b6a:	80 f9 10             	cmp    cl,0x10
c0018b6d:	75 14                	jne    c0018b83 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0018b6f:	8d 42 fc             	lea    eax,[edx-0x4]
c0018b72:	83 e0 fb             	and    eax,0xfffffffb
c0018b75:	3c 02                	cmp    al,0x2
c0018b77:	76 34                	jbe    c0018bad <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0018b79:	b8 e6 c6 02 c0       	mov    eax,0xc002c6e6
c0018b7e:	80 fa 02             	cmp    dl,0x2
c0018b81:	eb 24                	jmp    c0018ba7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0018b83:	80 f9 11             	cmp    cl,0x11
c0018b86:	75 13                	jne    c0018b9b <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0018b88:	b8 e6 c6 02 c0       	mov    eax,0xc002c6e6
c0018b8d:	80 fa 03             	cmp    dl,0x3
c0018b90:	0f 85 9b 00 00 00    	jne    c0018c31 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b96:	e9 91 00 00 00       	jmp    c0018c2c <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018b9b:	80 f9 12             	cmp    cl,0x12
c0018b9e:	75 14                	jne    c0018bb4 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0018ba0:	b8 e6 c6 02 c0       	mov    eax,0xc002c6e6
c0018ba5:	fe ca                	dec    dl
c0018ba7:	0f 85 84 00 00 00    	jne    c0018c31 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018bad:	b8 20 e7 02 c0       	mov    eax,0xc002e720
c0018bb2:	eb 7d                	jmp    c0018c31 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018bb4:	80 f9 14             	cmp    cl,0x14
c0018bb7:	75 12                	jne    c0018bcb <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0018bb9:	4a                   	dec    edx
c0018bba:	b8 e6 c6 02 c0       	mov    eax,0xc002c6e6
c0018bbf:	80 fa 01             	cmp    dl,0x1
c0018bc2:	77 6d                	ja     c0018c31 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018bc4:	b8 30 e7 02 c0       	mov    eax,0xc002e730
c0018bc9:	eb 66                	jmp    c0018c31 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018bcb:	80 f9 15             	cmp    cl,0x15
c0018bce:	75 31                	jne    c0018c01 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0018bd0:	b8 40 e7 02 c0       	mov    eax,0xc002e740
c0018bd5:	80 fa 01             	cmp    dl,0x1
c0018bd8:	74 57                	je     c0018c31 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018bda:	b8 e6 c6 02 c0       	mov    eax,0xc002c6e6
c0018bdf:	80 fa 13             	cmp    dl,0x13
c0018be2:	76 0c                	jbe    c0018bf0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0018be4:	80 fa 30             	cmp    dl,0x30
c0018be7:	75 48                	jne    c0018c31 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018be9:	b8 60 e7 02 c0       	mov    eax,0xc002e760
c0018bee:	eb 41                	jmp    c0018c31 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018bf0:	b9 04 00 09 00       	mov    ecx,0x90004
c0018bf5:	0f a3 d1             	bt     ecx,edx
c0018bf8:	73 37                	jae    c0018c31 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018bfa:	b8 50 e7 02 c0       	mov    eax,0xc002e750
c0018bff:	eb 30                	jmp    c0018c31 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018c01:	b8 e6 c6 02 c0       	mov    eax,0xc002c6e6
c0018c06:	80 f9 16             	cmp    cl,0x16
c0018c09:	75 26                	jne    c0018c31 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018c0b:	b8 70 e7 02 c0       	mov    eax,0xc002e770
c0018c10:	84 d2                	test   dl,dl
c0018c12:	74 1d                	je     c0018c31 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018c14:	b8 e6 c6 02 c0       	mov    eax,0xc002c6e6
c0018c19:	80 fa 30             	cmp    dl,0x30
c0018c1c:	75 13                	jne    c0018c31 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018c1e:	b8 80 e7 02 c0       	mov    eax,0xc002e780
c0018c23:	eb 0c                	jmp    c0018c31 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018c25:	b8 a0 e6 02 c0       	mov    eax,0xc002e6a0
c0018c2a:	eb 05                	jmp    c0018c31 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018c2c:	b8 10 e7 02 c0       	mov    eax,0xc002e710
c0018c31:	5b                   	pop    ebx
c0018c32:	5e                   	pop    esi
c0018c33:	5f                   	pop    edi
c0018c34:	5d                   	pop    ebp
c0018c35:	c3                   	ret    

c0018c36 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0018c36:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018c3a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018c3e:	80 f9 04             	cmp    cl,0x4
c0018c41:	75 6b                	jne    c0018cae <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0018c43:	b8 00 e5 02 c0       	mov    eax,0xc002e500
c0018c48:	80 fa 01             	cmp    dl,0x1
c0018c4b:	0f 86 92 02 00 00    	jbe    c0018ee3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c51:	b8 10 e5 02 c0       	mov    eax,0xc002e510
c0018c56:	80 fa 02             	cmp    dl,0x2
c0018c59:	0f 84 84 02 00 00    	je     c0018ee3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c5f:	b8 20 e5 02 c0       	mov    eax,0xc002e520
c0018c64:	80 fa 03             	cmp    dl,0x3
c0018c67:	0f 84 76 02 00 00    	je     c0018ee3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c6d:	b8 30 e5 02 c0       	mov    eax,0xc002e530
c0018c72:	80 fa 04             	cmp    dl,0x4
c0018c75:	0f 84 68 02 00 00    	je     c0018ee3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c7b:	b8 40 e5 02 c0       	mov    eax,0xc002e540
c0018c80:	80 fa 05             	cmp    dl,0x5
c0018c83:	0f 84 5a 02 00 00    	je     c0018ee3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c89:	b8 20 e5 02 c0       	mov    eax,0xc002e520
c0018c8e:	80 fa 07             	cmp    dl,0x7
c0018c91:	0f 84 4c 02 00 00    	je     c0018ee3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c97:	83 ea 08             	sub    edx,0x8
c0018c9a:	b8 e6 c6 02 c0       	mov    eax,0xc002c6e6
c0018c9f:	80 fa 01             	cmp    dl,0x1
c0018ca2:	0f 87 3b 02 00 00    	ja     c0018ee3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ca8:	b8 50 e5 02 c0       	mov    eax,0xc002e550
c0018cad:	c3                   	ret    
c0018cae:	80 f9 05             	cmp    cl,0x5
c0018cb1:	75 45                	jne    c0018cf8 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0018cb3:	8d 4a ff             	lea    ecx,[edx-0x1]
c0018cb6:	b8 60 e5 02 c0       	mov    eax,0xc002e560
c0018cbb:	80 f9 02             	cmp    cl,0x2
c0018cbe:	0f 86 1f 02 00 00    	jbe    c0018ee3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018cc4:	80 fa 04             	cmp    dl,0x4
c0018cc7:	0f 84 f3 01 00 00    	je     c0018ec0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0018ccd:	80 fa 07             	cmp    dl,0x7
c0018cd0:	0f 84 0d 02 00 00    	je     c0018ee3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018cd6:	b8 70 e5 02 c0       	mov    eax,0xc002e570
c0018cdb:	80 fa 08             	cmp    dl,0x8
c0018cde:	0f 84 ff 01 00 00    	je     c0018ee3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ce4:	b8 e6 c6 02 c0       	mov    eax,0xc002c6e6
c0018ce9:	80 fa 09             	cmp    dl,0x9
c0018cec:	0f 85 f1 01 00 00    	jne    c0018ee3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018cf2:	b8 80 e5 02 c0       	mov    eax,0xc002e580
c0018cf7:	c3                   	ret    
c0018cf8:	80 f9 06             	cmp    cl,0x6
c0018cfb:	0f 85 85 01 00 00    	jne    c0018e86 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018d01:	b8 90 e5 02 c0       	mov    eax,0xc002e590
c0018d06:	80 fa 01             	cmp    dl,0x1
c0018d09:	0f 84 d4 01 00 00    	je     c0018ee3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d0f:	8d 42 fb             	lea    eax,[edx-0x5]
c0018d12:	3c 01                	cmp    al,0x1
c0018d14:	0f 86 ac 01 00 00    	jbe    c0018ec6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018d1a:	80 fa 03             	cmp    dl,0x3
c0018d1d:	0f 84 a3 01 00 00    	je     c0018ec6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018d23:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018d26:	b8 b0 e5 02 c0       	mov    eax,0xc002e5b0
c0018d2b:	80 f9 01             	cmp    cl,0x1
c0018d2e:	0f 86 af 01 00 00    	jbe    c0018ee3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d34:	80 fa 09             	cmp    dl,0x9
c0018d37:	0f 84 8f 01 00 00    	je     c0018ecc <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018d3d:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018d40:	80 f9 01             	cmp    cl,0x1
c0018d43:	0f 86 9a 01 00 00    	jbe    c0018ee3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d49:	b8 c0 e5 02 c0       	mov    eax,0xc002e5c0
c0018d4e:	80 fa 0d             	cmp    dl,0xd
c0018d51:	0f 84 8c 01 00 00    	je     c0018ee3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d57:	b8 d0 e5 02 c0       	mov    eax,0xc002e5d0
c0018d5c:	80 fa 0e             	cmp    dl,0xe
c0018d5f:	0f 84 7e 01 00 00    	je     c0018ee3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d65:	b8 e0 e5 02 c0       	mov    eax,0xc002e5e0
c0018d6a:	80 fa 0f             	cmp    dl,0xf
c0018d6d:	0f 84 70 01 00 00    	je     c0018ee3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d73:	b8 c0 e5 02 c0       	mov    eax,0xc002e5c0
c0018d78:	80 fa 15             	cmp    dl,0x15
c0018d7b:	0f 84 62 01 00 00    	je     c0018ee3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d81:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018d84:	b8 e0 e5 02 c0       	mov    eax,0xc002e5e0
c0018d89:	80 f9 01             	cmp    cl,0x1
c0018d8c:	0f 86 51 01 00 00    	jbe    c0018ee3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d92:	80 fa 1a             	cmp    dl,0x1a
c0018d95:	0f 84 37 01 00 00    	je     c0018ed2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018d9b:	80 fa 1c             	cmp    dl,0x1c
c0018d9e:	0f 84 34 01 00 00    	je     c0018ed8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018da4:	80 fa 1d             	cmp    dl,0x1d
c0018da7:	0f 84 36 01 00 00    	je     c0018ee3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018dad:	b8 10 e6 02 c0       	mov    eax,0xc002e610
c0018db2:	80 fa 25             	cmp    dl,0x25
c0018db5:	0f 84 28 01 00 00    	je     c0018ee3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018dbb:	8d 4a da             	lea    ecx,[edx-0x26]
c0018dbe:	b8 00 e6 02 c0       	mov    eax,0xc002e600
c0018dc3:	80 f9 01             	cmp    cl,0x1
c0018dc6:	0f 86 17 01 00 00    	jbe    c0018ee3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018dcc:	b8 20 e6 02 c0       	mov    eax,0xc002e620
c0018dd1:	80 fa 2a             	cmp    dl,0x2a
c0018dd4:	0f 84 09 01 00 00    	je     c0018ee3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018dda:	b8 10 e6 02 c0       	mov    eax,0xc002e610
c0018ddf:	80 fa 2c             	cmp    dl,0x2c
c0018de2:	0f 84 fb 00 00 00    	je     c0018ee3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018de8:	b8 20 e6 02 c0       	mov    eax,0xc002e620
c0018ded:	80 fa 2d             	cmp    dl,0x2d
c0018df0:	0f 84 ed 00 00 00    	je     c0018ee3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018df6:	b8 f0 e5 02 c0       	mov    eax,0xc002e5f0
c0018dfb:	80 fa 2e             	cmp    dl,0x2e
c0018dfe:	0f 84 df 00 00 00    	je     c0018ee3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e04:	b8 10 e6 02 c0       	mov    eax,0xc002e610
c0018e09:	80 fa 2f             	cmp    dl,0x2f
c0018e0c:	0f 84 d1 00 00 00    	je     c0018ee3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e12:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018e15:	b8 00 e6 02 c0       	mov    eax,0xc002e600
c0018e1a:	80 f9 01             	cmp    cl,0x1
c0018e1d:	0f 86 c0 00 00 00    	jbe    c0018ee3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e23:	b8 30 e6 02 c0       	mov    eax,0xc002e630
c0018e28:	80 fa 37             	cmp    dl,0x37
c0018e2b:	0f 84 b2 00 00 00    	je     c0018ee3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e31:	b8 40 e6 02 c0       	mov    eax,0xc002e640
c0018e36:	80 fa 3a             	cmp    dl,0x3a
c0018e39:	0f 84 a4 00 00 00    	je     c0018ee3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e3f:	b8 50 e6 02 c0       	mov    eax,0xc002e650
c0018e44:	80 fa 3c             	cmp    dl,0x3c
c0018e47:	0f 84 96 00 00 00    	je     c0018ee3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e4d:	b8 60 e6 02 c0       	mov    eax,0xc002e660
c0018e52:	80 fa 3d             	cmp    dl,0x3d
c0018e55:	0f 84 88 00 00 00    	je     c0018ee3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e5b:	b8 40 e6 02 c0       	mov    eax,0xc002e640
c0018e60:	80 fa 3e             	cmp    dl,0x3e
c0018e63:	74 7e                	je     c0018ee3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e65:	8d 42 bb             	lea    eax,[edx-0x45]
c0018e68:	3c 01                	cmp    al,0x1
c0018e6a:	76 72                	jbe    c0018ede <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018e6c:	80 fa 3f             	cmp    dl,0x3f
c0018e6f:	74 6d                	je     c0018ede <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018e71:	80 fa 4a             	cmp    dl,0x4a
c0018e74:	74 0a                	je     c0018e80 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018e76:	b8 e6 c6 02 c0       	mov    eax,0xc002c6e6
c0018e7b:	80 fa 4d             	cmp    dl,0x4d
c0018e7e:	75 63                	jne    c0018ee3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e80:	b8 30 e6 02 c0       	mov    eax,0xc002e630
c0018e85:	c3                   	ret    
c0018e86:	b8 e6 c6 02 c0       	mov    eax,0xc002c6e6
c0018e8b:	80 f9 0b             	cmp    cl,0xb
c0018e8e:	75 0a                	jne    c0018e9a <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018e90:	fe ca                	dec    dl
c0018e92:	75 4f                	jne    c0018ee3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e94:	b8 70 e6 02 c0       	mov    eax,0xc002e670
c0018e99:	c3                   	ret    
c0018e9a:	80 f9 0f             	cmp    cl,0xf
c0018e9d:	75 44                	jne    c0018ee3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e9f:	b8 80 e6 02 c0       	mov    eax,0xc002e680
c0018ea4:	80 fa 02             	cmp    dl,0x2
c0018ea7:	76 3a                	jbe    c0018ee3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ea9:	8d 42 fd             	lea    eax,[edx-0x3]
c0018eac:	3c 01                	cmp    al,0x1
c0018eae:	76 0a                	jbe    c0018eba <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018eb0:	b8 e6 c6 02 c0       	mov    eax,0xc002c6e6
c0018eb5:	80 fa 06             	cmp    dl,0x6
c0018eb8:	75 29                	jne    c0018ee3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018eba:	b8 90 e6 02 c0       	mov    eax,0xc002e690
c0018ebf:	c3                   	ret    
c0018ec0:	b8 70 e5 02 c0       	mov    eax,0xc002e570
c0018ec5:	c3                   	ret    
c0018ec6:	b8 a0 e5 02 c0       	mov    eax,0xc002e5a0
c0018ecb:	c3                   	ret    
c0018ecc:	b8 c0 e5 02 c0       	mov    eax,0xc002e5c0
c0018ed1:	c3                   	ret    
c0018ed2:	b8 f0 e5 02 c0       	mov    eax,0xc002e5f0
c0018ed7:	c3                   	ret    
c0018ed8:	b8 00 e6 02 c0       	mov    eax,0xc002e600
c0018edd:	c3                   	ret    
c0018ede:	b8 50 e6 02 c0       	mov    eax,0xc002e650
c0018ee3:	c3                   	ret    

c0018ee4 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018ee4:	60                   	pusha  
c0018ee5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018ee9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018eed:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018ef1:	9c                   	pushf  
c0018ef2:	fa                   	cli    
c0018ef3:	0f 09                	wbinvd 
c0018ef5:	0f 30                	wrmsr  
c0018ef7:	9d                   	popf   
c0018ef8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018efc:	89 02                	mov    DWORD PTR [edx],eax
c0018efe:	61                   	popa   
c0018eff:	c3                   	ret    

c0018f00 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018f00:	60                   	pusha  
c0018f01:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018f05:	9c                   	pushf  
c0018f06:	fa                   	cli    
c0018f07:	0f 09                	wbinvd 
c0018f09:	31 c0                	xor    eax,eax
c0018f0b:	31 d2                	xor    edx,edx
c0018f0d:	0f 32                	rdmsr  
c0018f0f:	9d                   	popf   
c0018f10:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018f14:	89 02                	mov    DWORD PTR [edx],eax
c0018f16:	61                   	popa   
c0018f17:	c3                   	ret    

c0018f18 <CPU::AMD_K6_writeback(int, int, int)>:
c0018f18:	56                   	push   esi
c0018f19:	53                   	push   ebx
c0018f1a:	83 ec 10             	sub    esp,0x10
c0018f1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018f21:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018f26:	75 5d                	jne    c0018f85 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018f28:	83 f8 08             	cmp    eax,0x8
c0018f2b:	75 09                	jne    c0018f36 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018f2d:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018f32:	7e 13                	jle    c0018f47 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018f34:	eb 30                	jmp    c0018f66 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018f36:	83 f8 06             	cmp    eax,0x6
c0018f39:	7c 4a                	jl     c0018f85 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018f3b:	83 f8 07             	cmp    eax,0x7
c0018f3e:	7e 07                	jle    c0018f47 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018f40:	83 f8 09             	cmp    eax,0x9
c0018f43:	74 21                	je     c0018f66 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018f45:	eb 3e                	jmp    c0018f85 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018f47:	89 e6                	mov    esi,esp
c0018f49:	8b 1d c8 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f2c8
c0018f4f:	56                   	push   esi
c0018f50:	c1 eb 15             	shr    ebx,0x15
c0018f53:	68 82 00 00 c0       	push   0xc0000082
c0018f58:	83 e3 7e             	and    ebx,0x7e
c0018f5b:	e8 a0 ff ff ff       	call   c0018f00 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018f60:	56                   	push   esi
c0018f61:	6a 00                	push   0x0
c0018f63:	53                   	push   ebx
c0018f64:	eb 12                	jmp    c0018f78 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018f66:	89 e3                	mov    ebx,esp
c0018f68:	53                   	push   ebx
c0018f69:	68 82 00 00 c0       	push   0xc0000082
c0018f6e:	e8 8d ff ff ff       	call   c0018f00 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018f73:	53                   	push   ebx
c0018f74:	6a 00                	push   0x0
c0018f76:	6a 00                	push   0x0
c0018f78:	68 82 00 00 c0       	push   0xc0000082
c0018f7d:	e8 62 ff ff ff       	call   c0018ee4 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018f82:	83 c4 18             	add    esp,0x18
c0018f85:	83 c4 10             	add    esp,0x10
c0018f88:	5b                   	pop    ebx
c0018f89:	5e                   	pop    esi
c0018f8a:	c3                   	ret    
c0018f8b:	90                   	nop

c0018f8c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018f8c:	55                   	push   ebp
c0018f8d:	57                   	push   edi
c0018f8e:	56                   	push   esi
c0018f8f:	53                   	push   ebx
c0018f90:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018f94:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018f98:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018f9c:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018fa0:	39 05 a0 e7 02 c0    	cmp    DWORD PTR ds:0xc002e7a0,eax
c0018fa6:	75 23                	jne    c0018fcb <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018fa8:	a1 cc 1d 03 c0       	mov    eax,ds:0xc0031dcc
c0018fad:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018fb1:	89 06                	mov    DWORD PTR [esi],eax
c0018fb3:	a1 c8 1d 03 c0       	mov    eax,ds:0xc0031dc8
c0018fb8:	89 07                	mov    DWORD PTR [edi],eax
c0018fba:	a1 c4 1d 03 c0       	mov    eax,ds:0xc0031dc4
c0018fbf:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018fc2:	a1 c0 1d 03 c0       	mov    eax,ds:0xc0031dc0
c0018fc7:	89 02                	mov    DWORD PTR [edx],eax
c0018fc9:	eb 3f                	jmp    c001900a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018fcb:	31 c9                	xor    ecx,ecx
c0018fcd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018fd1:	0f a2                	cpuid  
c0018fd3:	89 06                	mov    DWORD PTR [esi],eax
c0018fd5:	89 1f                	mov    DWORD PTR [edi],ebx
c0018fd7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018fdb:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018fde:	89 10                	mov    DWORD PTR [eax],edx
c0018fe0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018fe4:	a3 a0 e7 02 c0       	mov    ds:0xc002e7a0,eax
c0018fe9:	8b 06                	mov    eax,DWORD PTR [esi]
c0018feb:	a3 cc 1d 03 c0       	mov    ds:0xc0031dcc,eax
c0018ff0:	8b 07                	mov    eax,DWORD PTR [edi]
c0018ff2:	a3 c8 1d 03 c0       	mov    ds:0xc0031dc8,eax
c0018ff7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018ffa:	a3 c4 1d 03 c0       	mov    ds:0xc0031dc4,eax
c0018fff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019003:	8b 00                	mov    eax,DWORD PTR [eax]
c0019005:	a3 c0 1d 03 c0       	mov    ds:0xc0031dc0,eax
c001900a:	5b                   	pop    ebx
c001900b:	5e                   	pop    esi
c001900c:	5f                   	pop    edi
c001900d:	5d                   	pop    ebp
c001900e:	c3                   	ret    
c001900f:	90                   	nop

c0019010 <CPU::cpuidCheckEDX(unsigned int)>:
c0019010:	83 ec 10             	sub    esp,0x10
c0019013:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019017:	50                   	push   eax
c0019018:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001901c:	50                   	push   eax
c001901d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019021:	50                   	push   eax
c0019022:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019026:	50                   	push   eax
c0019027:	6a 01                	push   0x1
c0019029:	e8 5e ff ff ff       	call   c0018f8c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001902e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019032:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0019036:	0f 95 c0             	setne  al
c0019039:	83 c4 24             	add    esp,0x24
c001903c:	c3                   	ret    
c001903d:	90                   	nop

c001903e <CPU::cpuidCheckECX(unsigned int)>:
c001903e:	83 ec 10             	sub    esp,0x10
c0019041:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019045:	50                   	push   eax
c0019046:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001904a:	50                   	push   eax
c001904b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001904f:	50                   	push   eax
c0019050:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019054:	50                   	push   eax
c0019055:	6a 01                	push   0x1
c0019057:	e8 30 ff ff ff       	call   c0018f8c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001905c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019060:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0019064:	0f 95 c0             	setne  al
c0019067:	83 c4 24             	add    esp,0x24
c001906a:	c3                   	ret    
c001906b:	90                   	nop

c001906c <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c001906c:	83 ec 10             	sub    esp,0x10
c001906f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019073:	50                   	push   eax
c0019074:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019078:	50                   	push   eax
c0019079:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001907d:	50                   	push   eax
c001907e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019082:	50                   	push   eax
c0019083:	6a 07                	push   0x7
c0019085:	e8 02 ff ff ff       	call   c0018f8c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001908a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001908e:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0019092:	0f 95 c0             	setne  al
c0019095:	83 c4 24             	add    esp,0x24
c0019098:	c3                   	ret    
c0019099:	90                   	nop

c001909a <CPU::cpuidCheckExtendedECX(unsigned int)>:
c001909a:	83 ec 10             	sub    esp,0x10
c001909d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00190a1:	50                   	push   eax
c00190a2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00190a6:	50                   	push   eax
c00190a7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00190ab:	50                   	push   eax
c00190ac:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00190b0:	50                   	push   eax
c00190b1:	6a 07                	push   0x7
c00190b3:	e8 d4 fe ff ff       	call   c0018f8c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00190b8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00190bc:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00190c0:	0f 95 c0             	setne  al
c00190c3:	83 c4 24             	add    esp,0x24
c00190c6:	c3                   	ret    
c00190c7:	90                   	nop

c00190c8 <CPU::CPU()>:
c00190c8:	83 ec 0c             	sub    esp,0xc
c00190cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190cf:	83 ec 08             	sub    esp,0x8
c00190d2:	68 e6 c6 02 c0       	push   0xc002c6e6
c00190d7:	50                   	push   eax
c00190d8:	e8 87 b3 ff ff       	call   c0014464 <Device::Device(char const*)>
c00190dd:	83 c4 10             	add    esp,0x10
c00190e0:	ba c0 c7 02 c0       	mov    edx,0xc002c7c0
c00190e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190e9:	89 10                	mov    DWORD PTR [eax],edx
c00190eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190ef:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c00190f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190fd:	05 78 01 00 00       	add    eax,0x178
c0019102:	83 ec 0c             	sub    esp,0xc
c0019105:	50                   	push   eax
c0019106:	e8 b3 5f ff ff       	call   c000f0be <GDT::GDT()>
c001910b:	83 c4 10             	add    esp,0x10
c001910e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019112:	05 7c 09 00 00       	add    eax,0x97c
c0019117:	83 ec 0c             	sub    esp,0xc
c001911a:	50                   	push   eax
c001911b:	e8 08 62 ff ff       	call   c000f328 <IDT::IDT()>
c0019120:	83 c4 10             	add    esp,0x10
c0019123:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019127:	05 7c 11 00 00       	add    eax,0x117c
c001912c:	83 ec 0c             	sub    esp,0xc
c001912f:	50                   	push   eax
c0019130:	e8 49 82 ff ff       	call   c001137e <TSS::TSS()>
c0019135:	83 c4 10             	add    esp,0x10
c0019138:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001913c:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0019143:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019147:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0019151:	90                   	nop
c0019152:	83 c4 0c             	add    esp,0xc
c0019155:	c3                   	ret    

c0019156 <CPU::displayFeatures()>:
c0019156:	53                   	push   ebx
c0019157:	83 ec 10             	sub    esp,0x10
c001915a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001915e:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0019164:	68 f4 c3 02 c0       	push   0xc002c3f4
c0019169:	e8 e5 9c ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001916e:	59                   	pop    ecx
c001916f:	58                   	pop    eax
c0019170:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0019176:	50                   	push   eax
c0019177:	68 05 c4 02 c0       	push   0xc002c405
c001917c:	e8 d2 9c ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0019181:	58                   	pop    eax
c0019182:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019188:	5a                   	pop    edx
c0019189:	c1 e8 0e             	shr    eax,0xe
c001918c:	0f b6 c0             	movzx  eax,al
c001918f:	50                   	push   eax
c0019190:	68 16 c4 02 c0       	push   0xc002c416
c0019195:	e8 b9 9c ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001919a:	59                   	pop    ecx
c001919b:	58                   	pop    eax
c001919c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00191a2:	66 c1 e8 06          	shr    ax,0x6
c00191a6:	0f b6 c0             	movzx  eax,al
c00191a9:	50                   	push   eax
c00191aa:	68 27 c4 02 c0       	push   0xc002c427
c00191af:	e8 9f 9c ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c00191b4:	c7 04 24 d4 c8 02 c0 	mov    DWORD PTR [esp],0xc002c8d4
c00191bb:	e8 93 9c ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c00191c0:	83 c4 10             	add    esp,0x10
c00191c3:	b8 36 ad 02 c0       	mov    eax,0xc002ad36
c00191c8:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c00191cf:	74 05                	je     c00191d6 <CPU::displayFeatures()+0x80>
c00191d1:	b8 32 ad 02 c0       	mov    eax,0xc002ad32
c00191d6:	52                   	push   edx
c00191d7:	52                   	push   edx
c00191d8:	50                   	push   eax
c00191d9:	68 38 c4 02 c0       	push   0xc002c438
c00191de:	e8 70 9c ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c00191e3:	83 c4 10             	add    esp,0x10
c00191e6:	b8 32 ad 02 c0       	mov    eax,0xc002ad32
c00191eb:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c00191f2:	78 05                	js     c00191f9 <CPU::displayFeatures()+0xa3>
c00191f4:	b8 36 ad 02 c0       	mov    eax,0xc002ad36
c00191f9:	51                   	push   ecx
c00191fa:	51                   	push   ecx
c00191fb:	50                   	push   eax
c00191fc:	68 4f c4 02 c0       	push   0xc002c44f
c0019201:	e8 4d 9c ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0019206:	83 c4 10             	add    esp,0x10
c0019209:	b8 32 ad 02 c0       	mov    eax,0xc002ad32
c001920e:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0019215:	75 05                	jne    c001921c <CPU::displayFeatures()+0xc6>
c0019217:	b8 36 ad 02 c0       	mov    eax,0xc002ad36
c001921c:	52                   	push   edx
c001921d:	52                   	push   edx
c001921e:	50                   	push   eax
c001921f:	68 66 c4 02 c0       	push   0xc002c466
c0019224:	e8 2a 9c ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0019229:	83 c4 10             	add    esp,0x10
c001922c:	b8 32 ad 02 c0       	mov    eax,0xc002ad32
c0019231:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0019238:	75 05                	jne    c001923f <CPU::displayFeatures()+0xe9>
c001923a:	b8 36 ad 02 c0       	mov    eax,0xc002ad36
c001923f:	51                   	push   ecx
c0019240:	51                   	push   ecx
c0019241:	50                   	push   eax
c0019242:	68 7d c4 02 c0       	push   0xc002c47d
c0019247:	e8 07 9c ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001924c:	83 c4 10             	add    esp,0x10
c001924f:	b8 32 ad 02 c0       	mov    eax,0xc002ad32
c0019254:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c001925b:	75 05                	jne    c0019262 <CPU::displayFeatures()+0x10c>
c001925d:	b8 36 ad 02 c0       	mov    eax,0xc002ad36
c0019262:	52                   	push   edx
c0019263:	52                   	push   edx
c0019264:	50                   	push   eax
c0019265:	68 94 c4 02 c0       	push   0xc002c494
c001926a:	e8 e4 9b ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001926f:	83 c4 10             	add    esp,0x10
c0019272:	b8 32 ad 02 c0       	mov    eax,0xc002ad32
c0019277:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c001927e:	75 05                	jne    c0019285 <CPU::displayFeatures()+0x12f>
c0019280:	b8 36 ad 02 c0       	mov    eax,0xc002ad36
c0019285:	51                   	push   ecx
c0019286:	51                   	push   ecx
c0019287:	50                   	push   eax
c0019288:	68 ab c4 02 c0       	push   0xc002c4ab
c001928d:	e8 c1 9b ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0019292:	83 c4 10             	add    esp,0x10
c0019295:	b8 32 ad 02 c0       	mov    eax,0xc002ad32
c001929a:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c00192a1:	75 05                	jne    c00192a8 <CPU::displayFeatures()+0x152>
c00192a3:	b8 36 ad 02 c0       	mov    eax,0xc002ad36
c00192a8:	52                   	push   edx
c00192a9:	52                   	push   edx
c00192aa:	50                   	push   eax
c00192ab:	68 c2 c4 02 c0       	push   0xc002c4c2
c00192b0:	e8 9e 9b ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c00192b5:	83 c4 10             	add    esp,0x10
c00192b8:	b8 32 ad 02 c0       	mov    eax,0xc002ad32
c00192bd:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c00192c4:	75 05                	jne    c00192cb <CPU::displayFeatures()+0x175>
c00192c6:	b8 36 ad 02 c0       	mov    eax,0xc002ad36
c00192cb:	51                   	push   ecx
c00192cc:	51                   	push   ecx
c00192cd:	50                   	push   eax
c00192ce:	68 d9 c4 02 c0       	push   0xc002c4d9
c00192d3:	e8 7b 9b ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c00192d8:	83 c4 10             	add    esp,0x10
c00192db:	b8 32 ad 02 c0       	mov    eax,0xc002ad32
c00192e0:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c00192e7:	75 05                	jne    c00192ee <CPU::displayFeatures()+0x198>
c00192e9:	b8 36 ad 02 c0       	mov    eax,0xc002ad36
c00192ee:	52                   	push   edx
c00192ef:	52                   	push   edx
c00192f0:	50                   	push   eax
c00192f1:	68 f0 c4 02 c0       	push   0xc002c4f0
c00192f6:	e8 58 9b ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c00192fb:	83 c4 10             	add    esp,0x10
c00192fe:	b8 32 ad 02 c0       	mov    eax,0xc002ad32
c0019303:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c001930a:	75 05                	jne    c0019311 <CPU::displayFeatures()+0x1bb>
c001930c:	b8 36 ad 02 c0       	mov    eax,0xc002ad36
c0019311:	51                   	push   ecx
c0019312:	51                   	push   ecx
c0019313:	50                   	push   eax
c0019314:	68 07 c5 02 c0       	push   0xc002c507
c0019319:	e8 35 9b ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001931e:	83 c4 10             	add    esp,0x10
c0019321:	b8 32 ad 02 c0       	mov    eax,0xc002ad32
c0019326:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c001932d:	75 05                	jne    c0019334 <CPU::displayFeatures()+0x1de>
c001932f:	b8 36 ad 02 c0       	mov    eax,0xc002ad36
c0019334:	52                   	push   edx
c0019335:	52                   	push   edx
c0019336:	50                   	push   eax
c0019337:	68 1e c5 02 c0       	push   0xc002c51e
c001933c:	e8 12 9b ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0019341:	83 c4 10             	add    esp,0x10
c0019344:	b8 32 ad 02 c0       	mov    eax,0xc002ad32
c0019349:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0019350:	75 05                	jne    c0019357 <CPU::displayFeatures()+0x201>
c0019352:	b8 36 ad 02 c0       	mov    eax,0xc002ad36
c0019357:	51                   	push   ecx
c0019358:	51                   	push   ecx
c0019359:	50                   	push   eax
c001935a:	68 35 c5 02 c0       	push   0xc002c535
c001935f:	e8 ef 9a ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0019364:	83 c4 10             	add    esp,0x10
c0019367:	b8 32 ad 02 c0       	mov    eax,0xc002ad32
c001936c:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0019373:	75 05                	jne    c001937a <CPU::displayFeatures()+0x224>
c0019375:	b8 36 ad 02 c0       	mov    eax,0xc002ad36
c001937a:	52                   	push   edx
c001937b:	52                   	push   edx
c001937c:	50                   	push   eax
c001937d:	68 4c c5 02 c0       	push   0xc002c54c
c0019382:	e8 cc 9a ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0019387:	83 c4 10             	add    esp,0x10
c001938a:	b8 32 ad 02 c0       	mov    eax,0xc002ad32
c001938f:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0019396:	78 05                	js     c001939d <CPU::displayFeatures()+0x247>
c0019398:	b8 36 ad 02 c0       	mov    eax,0xc002ad36
c001939d:	51                   	push   ecx
c001939e:	51                   	push   ecx
c001939f:	50                   	push   eax
c00193a0:	68 63 c5 02 c0       	push   0xc002c563
c00193a5:	e8 a9 9a ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c00193aa:	83 c4 10             	add    esp,0x10
c00193ad:	b8 32 ad 02 c0       	mov    eax,0xc002ad32
c00193b2:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c00193b9:	75 05                	jne    c00193c0 <CPU::displayFeatures()+0x26a>
c00193bb:	b8 36 ad 02 c0       	mov    eax,0xc002ad36
c00193c0:	52                   	push   edx
c00193c1:	52                   	push   edx
c00193c2:	50                   	push   eax
c00193c3:	68 7a c5 02 c0       	push   0xc002c57a
c00193c8:	e8 86 9a ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c00193cd:	83 c4 18             	add    esp,0x18
c00193d0:	5b                   	pop    ebx
c00193d1:	c3                   	ret    

c00193d2 <CPU::detectFeatures()>:
c00193d2:	55                   	push   ebp
c00193d3:	57                   	push   edi
c00193d4:	56                   	push   esi
c00193d5:	53                   	push   ebx
c00193d6:	83 ec 50             	sub    esp,0x50
c00193d9:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00193dd:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c00193e7:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c00193ee:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c00193f4:	6a 0d                	push   0xd
c00193f6:	6a 00                	push   0x0
c00193f8:	55                   	push   ebp
c00193f9:	e8 6e 73 fe ff       	call   c000076c <memset>
c00193fe:	83 c4 10             	add    esp,0x10
c0019401:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c0019406:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c001940d:	0f 84 22 09 00 00    	je     c0019d35 <CPU::detectFeatures()+0x963>
c0019413:	83 ec 0c             	sub    esp,0xc
c0019416:	89 ef                	mov    edi,ebp
c0019418:	6a 10                	push   0x10
c001941a:	e8 f1 fb ff ff       	call   c0019010 <CPU::cpuidCheckEDX(unsigned int)>
c001941f:	83 e0 01             	and    eax,0x1
c0019422:	8d 14 00             	lea    edx,[eax+eax*1]
c0019425:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001942b:	83 e0 fd             	and    eax,0xfffffffd
c001942e:	09 d0                	or     eax,edx
c0019430:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019436:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c001943d:	e8 ce fb ff ff       	call   c0019010 <CPU::cpuidCheckEDX(unsigned int)>
c0019442:	83 e0 01             	and    eax,0x1
c0019445:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001944c:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019452:	83 e0 fb             	and    eax,0xfffffffb
c0019455:	09 d0                	or     eax,edx
c0019457:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001945d:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0019464:	e8 a7 fb ff ff       	call   c0019010 <CPU::cpuidCheckEDX(unsigned int)>
c0019469:	83 e0 01             	and    eax,0x1
c001946c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0019473:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019479:	83 e0 f7             	and    eax,0xfffffff7
c001947c:	09 d0                	or     eax,edx
c001947e:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019484:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c001948b:	e8 80 fb ff ff       	call   c0019010 <CPU::cpuidCheckEDX(unsigned int)>
c0019490:	83 e0 01             	and    eax,0x1
c0019493:	c1 e0 04             	shl    eax,0x4
c0019496:	88 c2                	mov    dl,al
c0019498:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001949e:	83 e0 ef             	and    eax,0xffffffef
c00194a1:	09 d0                	or     eax,edx
c00194a3:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00194a9:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c00194b0:	e8 5b fb ff ff       	call   c0019010 <CPU::cpuidCheckEDX(unsigned int)>
c00194b5:	83 e0 01             	and    eax,0x1
c00194b8:	c1 e0 05             	shl    eax,0x5
c00194bb:	88 c2                	mov    dl,al
c00194bd:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00194c3:	83 e0 df             	and    eax,0xffffffdf
c00194c6:	09 d0                	or     eax,edx
c00194c8:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00194ce:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00194d5:	e8 36 fb ff ff       	call   c0019010 <CPU::cpuidCheckEDX(unsigned int)>
c00194da:	83 e0 01             	and    eax,0x1
c00194dd:	8d 14 00             	lea    edx,[eax+eax*1]
c00194e0:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00194e6:	83 e0 fd             	and    eax,0xfffffffd
c00194e9:	09 d0                	or     eax,edx
c00194eb:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00194f1:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c00194f8:	e8 13 fb ff ff       	call   c0019010 <CPU::cpuidCheckEDX(unsigned int)>
c00194fd:	83 e0 01             	and    eax,0x1
c0019500:	c1 e0 06             	shl    eax,0x6
c0019503:	88 c2                	mov    dl,al
c0019505:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001950b:	83 e0 bf             	and    eax,0xffffffbf
c001950e:	09 d0                	or     eax,edx
c0019510:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019516:	58                   	pop    eax
c0019517:	8d 44 24 28          	lea    eax,[esp+0x28]
c001951b:	50                   	push   eax
c001951c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019520:	50                   	push   eax
c0019521:	8d 74 24 28          	lea    esi,[esp+0x28]
c0019525:	56                   	push   esi
c0019526:	8d 44 24 28          	lea    eax,[esp+0x28]
c001952a:	50                   	push   eax
c001952b:	6a 00                	push   0x0
c001952d:	e8 5a fa ff ff       	call   c0018f8c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019532:	b8 04 00 00 00       	mov    eax,0x4
c0019537:	89 c1                	mov    ecx,eax
c0019539:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001953b:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0019541:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0019545:	89 c1                	mov    ecx,eax
c0019547:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019549:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c001954f:	8d 74 24 38          	lea    esi,[esp+0x38]
c0019553:	89 c1                	mov    ecx,eax
c0019555:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019557:	83 c4 18             	add    esp,0x18
c001955a:	68 91 c5 02 c0       	push   0xc002c591
c001955f:	55                   	push   ebp
c0019560:	e8 4f 73 fe ff       	call   c00008b4 <strcmp>
c0019565:	83 c4 10             	add    esp,0x10
c0019568:	85 c0                	test   eax,eax
c001956a:	75 0f                	jne    c001957b <CPU::detectFeatures()+0x1a9>
c001956c:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0019576:	e9 22 02 00 00       	jmp    c001979d <CPU::detectFeatures()+0x3cb>
c001957b:	50                   	push   eax
c001957c:	50                   	push   eax
c001957d:	68 9e c5 02 c0       	push   0xc002c59e
c0019582:	55                   	push   ebp
c0019583:	e8 2c 73 fe ff       	call   c00008b4 <strcmp>
c0019588:	83 c4 10             	add    esp,0x10
c001958b:	85 c0                	test   eax,eax
c001958d:	74 dd                	je     c001956c <CPU::detectFeatures()+0x19a>
c001958f:	50                   	push   eax
c0019590:	50                   	push   eax
c0019591:	68 ab c5 02 c0       	push   0xc002c5ab
c0019596:	55                   	push   ebp
c0019597:	e8 18 73 fe ff       	call   c00008b4 <strcmp>
c001959c:	83 c4 10             	add    esp,0x10
c001959f:	85 c0                	test   eax,eax
c00195a1:	74 2a                	je     c00195cd <CPU::detectFeatures()+0x1fb>
c00195a3:	50                   	push   eax
c00195a4:	50                   	push   eax
c00195a5:	68 b8 c5 02 c0       	push   0xc002c5b8
c00195aa:	55                   	push   ebp
c00195ab:	e8 04 73 fe ff       	call   c00008b4 <strcmp>
c00195b0:	83 c4 10             	add    esp,0x10
c00195b3:	85 c0                	test   eax,eax
c00195b5:	74 16                	je     c00195cd <CPU::detectFeatures()+0x1fb>
c00195b7:	50                   	push   eax
c00195b8:	50                   	push   eax
c00195b9:	68 c5 c5 02 c0       	push   0xc002c5c5
c00195be:	55                   	push   ebp
c00195bf:	e8 f0 72 fe ff       	call   c00008b4 <strcmp>
c00195c4:	83 c4 10             	add    esp,0x10
c00195c7:	85 c0                	test   eax,eax
c00195c9:	74 48                	je     c0019613 <CPU::detectFeatures()+0x241>
c00195cb:	eb 0f                	jmp    c00195dc <CPU::detectFeatures()+0x20a>
c00195cd:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c00195d7:	e9 c1 01 00 00       	jmp    c001979d <CPU::detectFeatures()+0x3cb>
c00195dc:	50                   	push   eax
c00195dd:	50                   	push   eax
c00195de:	68 d2 c5 02 c0       	push   0xc002c5d2
c00195e3:	55                   	push   ebp
c00195e4:	e8 cb 72 fe ff       	call   c00008b4 <strcmp>
c00195e9:	83 c4 10             	add    esp,0x10
c00195ec:	85 c0                	test   eax,eax
c00195ee:	74 23                	je     c0019613 <CPU::detectFeatures()+0x241>
c00195f0:	57                   	push   edi
c00195f1:	57                   	push   edi
c00195f2:	68 df c5 02 c0       	push   0xc002c5df
c00195f7:	55                   	push   ebp
c00195f8:	e8 b7 72 fe ff       	call   c00008b4 <strcmp>
c00195fd:	83 c4 10             	add    esp,0x10
c0019600:	85 c0                	test   eax,eax
c0019602:	75 1e                	jne    c0019622 <CPU::detectFeatures()+0x250>
c0019604:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001960e:	e9 8a 01 00 00       	jmp    c001979d <CPU::detectFeatures()+0x3cb>
c0019613:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c001961d:	e9 7b 01 00 00       	jmp    c001979d <CPU::detectFeatures()+0x3cb>
c0019622:	56                   	push   esi
c0019623:	56                   	push   esi
c0019624:	68 ec c5 02 c0       	push   0xc002c5ec
c0019629:	55                   	push   ebp
c001962a:	e8 85 72 fe ff       	call   c00008b4 <strcmp>
c001962f:	83 c4 10             	add    esp,0x10
c0019632:	85 c0                	test   eax,eax
c0019634:	75 0f                	jne    c0019645 <CPU::detectFeatures()+0x273>
c0019636:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0019640:	e9 58 01 00 00       	jmp    c001979d <CPU::detectFeatures()+0x3cb>
c0019645:	51                   	push   ecx
c0019646:	51                   	push   ecx
c0019647:	68 ab c5 02 c0       	push   0xc002c5ab
c001964c:	55                   	push   ebp
c001964d:	e8 62 72 fe ff       	call   c00008b4 <strcmp>
c0019652:	83 c4 10             	add    esp,0x10
c0019655:	85 c0                	test   eax,eax
c0019657:	75 0f                	jne    c0019668 <CPU::detectFeatures()+0x296>
c0019659:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0019663:	e9 35 01 00 00       	jmp    c001979d <CPU::detectFeatures()+0x3cb>
c0019668:	52                   	push   edx
c0019669:	52                   	push   edx
c001966a:	68 f9 c5 02 c0       	push   0xc002c5f9
c001966f:	55                   	push   ebp
c0019670:	e8 3f 72 fe ff       	call   c00008b4 <strcmp>
c0019675:	83 c4 10             	add    esp,0x10
c0019678:	85 c0                	test   eax,eax
c001967a:	75 0f                	jne    c001968b <CPU::detectFeatures()+0x2b9>
c001967c:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0019686:	e9 12 01 00 00       	jmp    c001979d <CPU::detectFeatures()+0x3cb>
c001968b:	50                   	push   eax
c001968c:	50                   	push   eax
c001968d:	68 06 c6 02 c0       	push   0xc002c606
c0019692:	55                   	push   ebp
c0019693:	e8 1c 72 fe ff       	call   c00008b4 <strcmp>
c0019698:	83 c4 10             	add    esp,0x10
c001969b:	85 c0                	test   eax,eax
c001969d:	75 0f                	jne    c00196ae <CPU::detectFeatures()+0x2dc>
c001969f:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00196a9:	e9 ef 00 00 00       	jmp    c001979d <CPU::detectFeatures()+0x3cb>
c00196ae:	50                   	push   eax
c00196af:	50                   	push   eax
c00196b0:	68 13 c6 02 c0       	push   0xc002c613
c00196b5:	55                   	push   ebp
c00196b6:	e8 f9 71 fe ff       	call   c00008b4 <strcmp>
c00196bb:	83 c4 10             	add    esp,0x10
c00196be:	85 c0                	test   eax,eax
c00196c0:	75 0f                	jne    c00196d1 <CPU::detectFeatures()+0x2ff>
c00196c2:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c00196cc:	e9 cc 00 00 00       	jmp    c001979d <CPU::detectFeatures()+0x3cb>
c00196d1:	50                   	push   eax
c00196d2:	50                   	push   eax
c00196d3:	68 20 c6 02 c0       	push   0xc002c620
c00196d8:	55                   	push   ebp
c00196d9:	e8 d6 71 fe ff       	call   c00008b4 <strcmp>
c00196de:	83 c4 10             	add    esp,0x10
c00196e1:	85 c0                	test   eax,eax
c00196e3:	75 0f                	jne    c00196f4 <CPU::detectFeatures()+0x322>
c00196e5:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c00196ef:	e9 a9 00 00 00       	jmp    c001979d <CPU::detectFeatures()+0x3cb>
c00196f4:	50                   	push   eax
c00196f5:	50                   	push   eax
c00196f6:	68 2d c6 02 c0       	push   0xc002c62d
c00196fb:	55                   	push   ebp
c00196fc:	e8 b3 71 fe ff       	call   c00008b4 <strcmp>
c0019701:	83 c4 10             	add    esp,0x10
c0019704:	85 c0                	test   eax,eax
c0019706:	75 0f                	jne    c0019717 <CPU::detectFeatures()+0x345>
c0019708:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0019712:	e9 86 00 00 00       	jmp    c001979d <CPU::detectFeatures()+0x3cb>
c0019717:	50                   	push   eax
c0019718:	50                   	push   eax
c0019719:	68 3a c6 02 c0       	push   0xc002c63a
c001971e:	55                   	push   ebp
c001971f:	e8 90 71 fe ff       	call   c00008b4 <strcmp>
c0019724:	83 c4 10             	add    esp,0x10
c0019727:	85 c0                	test   eax,eax
c0019729:	75 0c                	jne    c0019737 <CPU::detectFeatures()+0x365>
c001972b:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0019735:	eb 66                	jmp    c001979d <CPU::detectFeatures()+0x3cb>
c0019737:	50                   	push   eax
c0019738:	50                   	push   eax
c0019739:	68 47 c6 02 c0       	push   0xc002c647
c001973e:	55                   	push   ebp
c001973f:	e8 70 71 fe ff       	call   c00008b4 <strcmp>
c0019744:	83 c4 10             	add    esp,0x10
c0019747:	85 c0                	test   eax,eax
c0019749:	75 0c                	jne    c0019757 <CPU::detectFeatures()+0x385>
c001974b:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0019755:	eb 46                	jmp    c001979d <CPU::detectFeatures()+0x3cb>
c0019757:	57                   	push   edi
c0019758:	57                   	push   edi
c0019759:	68 54 c6 02 c0       	push   0xc002c654
c001975e:	55                   	push   ebp
c001975f:	e8 50 71 fe ff       	call   c00008b4 <strcmp>
c0019764:	83 c4 10             	add    esp,0x10
c0019767:	85 c0                	test   eax,eax
c0019769:	74 e0                	je     c001974b <CPU::detectFeatures()+0x379>
c001976b:	56                   	push   esi
c001976c:	56                   	push   esi
c001976d:	68 61 c6 02 c0       	push   0xc002c661
c0019772:	55                   	push   ebp
c0019773:	e8 3c 71 fe ff       	call   c00008b4 <strcmp>
c0019778:	83 c4 10             	add    esp,0x10
c001977b:	85 c0                	test   eax,eax
c001977d:	74 cc                	je     c001974b <CPU::detectFeatures()+0x379>
c001977f:	51                   	push   ecx
c0019780:	51                   	push   ecx
c0019781:	68 6e c6 02 c0       	push   0xc002c66e
c0019786:	55                   	push   ebp
c0019787:	e8 28 71 fe ff       	call   c00008b4 <strcmp>
c001978c:	83 c4 10             	add    esp,0x10
c001978f:	85 c0                	test   eax,eax
c0019791:	74 b8                	je     c001974b <CPU::detectFeatures()+0x379>
c0019793:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c001979d:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00197a2:	0f 86 be 00 00 00    	jbe    c0019866 <CPU::detectFeatures()+0x494>
c00197a8:	83 ec 0c             	sub    esp,0xc
c00197ab:	68 80 00 00 00       	push   0x80
c00197b0:	e8 b7 f8 ff ff       	call   c001906c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00197b5:	83 e0 01             	and    eax,0x1
c00197b8:	c1 e0 06             	shl    eax,0x6
c00197bb:	88 c2                	mov    dl,al
c00197bd:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00197c3:	83 e0 bf             	and    eax,0xffffffbf
c00197c6:	09 d0                	or     eax,edx
c00197c8:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00197ce:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00197d5:	e8 92 f8 ff ff       	call   c001906c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00197da:	83 e0 01             	and    eax,0x1
c00197dd:	c1 e0 04             	shl    eax,0x4
c00197e0:	88 c2                	mov    dl,al
c00197e2:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00197e8:	83 e0 ef             	and    eax,0xffffffef
c00197eb:	09 d0                	or     eax,edx
c00197ed:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00197f3:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00197fa:	e8 6d f8 ff ff       	call   c001906c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00197ff:	c1 e0 07             	shl    eax,0x7
c0019802:	88 c2                	mov    dl,al
c0019804:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001980a:	83 e0 7f             	and    eax,0x7f
c001980d:	09 d0                	or     eax,edx
c001980f:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019815:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001981c:	e8 79 f8 ff ff       	call   c001909a <CPU::cpuidCheckExtendedECX(unsigned int)>
c0019821:	83 e0 01             	and    eax,0x1
c0019824:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001982b:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019831:	83 e0 f7             	and    eax,0xfffffff7
c0019834:	09 d0                	or     eax,edx
c0019836:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001983c:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0019843:	e8 52 f8 ff ff       	call   c001909a <CPU::cpuidCheckExtendedECX(unsigned int)>
c0019848:	83 c4 10             	add    esp,0x10
c001984b:	83 e0 01             	and    eax,0x1
c001984e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0019855:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001985b:	83 e0 fb             	and    eax,0xfffffffb
c001985e:	09 d0                	or     eax,edx
c0019860:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019866:	83 ec 0c             	sub    esp,0xc
c0019869:	8d 44 24 28          	lea    eax,[esp+0x28]
c001986d:	50                   	push   eax
c001986e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019872:	50                   	push   eax
c0019873:	8d 74 24 28          	lea    esi,[esp+0x28]
c0019877:	56                   	push   esi
c0019878:	8d 44 24 28          	lea    eax,[esp+0x28]
c001987c:	50                   	push   eax
c001987d:	6a 01                	push   0x1
c001987f:	e8 08 f7 ff ff       	call   c0018f8c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019884:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0019888:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001988e:	88 ca                	mov    dl,cl
c0019890:	83 e0 f0             	and    eax,0xfffffff0
c0019893:	83 e2 0f             	and    edx,0xf
c0019896:	09 d0                	or     eax,edx
c0019898:	88 ca                	mov    dl,cl
c001989a:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c00198a0:	c0 ea 04             	shr    dl,0x4
c00198a3:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c00198a7:	0f b6 c2             	movzx  eax,dl
c00198aa:	83 c4 20             	add    esp,0x20
c00198ad:	c1 e0 06             	shl    eax,0x6
c00198b0:	89 c7                	mov    edi,eax
c00198b2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00198b8:	66 25 3f c0          	and    ax,0xc03f
c00198bc:	09 f8                	or     eax,edi
c00198be:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00198c5:	89 c8                	mov    eax,ecx
c00198c7:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c00198ce:	c1 e8 08             	shr    eax,0x8
c00198d1:	83 e5 3f             	and    ebp,0x3f
c00198d4:	83 e0 0f             	and    eax,0xf
c00198d7:	89 c7                	mov    edi,eax
c00198d9:	c1 e7 06             	shl    edi,0x6
c00198dc:	09 ef                	or     edi,ebp
c00198de:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c00198e5:	89 fa                	mov    edx,edi
c00198e7:	83 e5 c0             	and    ebp,0xffffffc0
c00198ea:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00198f0:	88 c2                	mov    dl,al
c00198f2:	c0 ea 02             	shr    dl,0x2
c00198f5:	89 d7                	mov    edi,edx
c00198f7:	09 ef                	or     edi,ebp
c00198f9:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00198ff:	89 fa                	mov    edx,edi
c0019901:	83 e5 cf             	and    ebp,0xffffffcf
c0019904:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c001990a:	89 cf                	mov    edi,ecx
c001990c:	c1 ef 0c             	shr    edi,0xc
c001990f:	83 e7 03             	and    edi,0x3
c0019912:	c1 e7 04             	shl    edi,0x4
c0019915:	09 ef                	or     edi,ebp
c0019917:	3c 06                	cmp    al,0x6
c0019919:	89 fa                	mov    edx,edi
c001991b:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0019921:	74 04                	je     c0019927 <CPU::detectFeatures()+0x555>
c0019923:	3c 0f                	cmp    al,0xf
c0019925:	75 5c                	jne    c0019983 <CPU::detectFeatures()+0x5b1>
c0019927:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001992b:	89 cf                	mov    edi,ecx
c001992d:	c1 ef 10             	shr    edi,0x10
c0019930:	c1 e7 04             	shl    edi,0x4
c0019933:	09 fa                	or     edx,edi
c0019935:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c001993b:	0f b6 d2             	movzx  edx,dl
c001993e:	66 81 e7 3f c0       	and    di,0xc03f
c0019943:	c1 e2 06             	shl    edx,0x6
c0019946:	09 fa                	or     edx,edi
c0019948:	3c 0f                	cmp    al,0xf
c001994a:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0019951:	75 30                	jne    c0019983 <CPU::detectFeatures()+0x5b1>
c0019953:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0019959:	c1 e9 14             	shr    ecx,0x14
c001995c:	83 e0 3f             	and    eax,0x3f
c001995f:	83 c1 0f             	add    ecx,0xf
c0019962:	88 ca                	mov    dl,cl
c0019964:	c0 e9 02             	shr    cl,0x2
c0019967:	c1 e2 06             	shl    edx,0x6
c001996a:	09 d0                	or     eax,edx
c001996c:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0019972:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0019978:	83 e0 c0             	and    eax,0xffffffc0
c001997b:	09 c1                	or     ecx,eax
c001997d:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0019983:	83 ec 0c             	sub    esp,0xc
c0019986:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001998d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019991:	50                   	push   eax
c0019992:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019996:	55                   	push   ebp
c0019997:	56                   	push   esi
c0019998:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001999c:	57                   	push   edi
c001999d:	68 00 00 00 80       	push   0x80000000
c00199a2:	e8 e5 f5 ff ff       	call   c0018f8c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00199a7:	83 c4 20             	add    esp,0x20
c00199aa:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00199b2:	76 22                	jbe    c00199d6 <CPU::detectFeatures()+0x604>
c00199b4:	83 ec 0c             	sub    esp,0xc
c00199b7:	8d 44 24 28          	lea    eax,[esp+0x28]
c00199bb:	50                   	push   eax
c00199bc:	55                   	push   ebp
c00199bd:	56                   	push   esi
c00199be:	57                   	push   edi
c00199bf:	68 01 00 00 80       	push   0x80000001
c00199c4:	e8 c3 f5 ff ff       	call   c0018f8c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00199c9:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c00199d3:	83 c4 20             	add    esp,0x20
c00199d6:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00199dc:	83 f8 01             	cmp    eax,0x1
c00199df:	75 6f                	jne    c0019a50 <CPU::detectFeatures()+0x67e>
c00199e1:	51                   	push   ecx
c00199e2:	51                   	push   ecx
c00199e3:	68 7a c6 02 c0       	push   0xc002c67a
c00199e8:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00199ec:	56                   	push   esi
c00199ed:	e8 36 6e fe ff       	call   c0000828 <strcpy>
c00199f2:	5f                   	pop    edi
c00199f3:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00199f9:	5d                   	pop    ebp
c00199fa:	66 c1 e8 06          	shr    ax,0x6
c00199fe:	0f b6 c0             	movzx  eax,al
c0019a01:	50                   	push   eax
c0019a02:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019a08:	c1 e8 0e             	shr    eax,0xe
c0019a0b:	0f b6 c0             	movzx  eax,al
c0019a0e:	50                   	push   eax
c0019a0f:	e8 22 f2 ff ff       	call   c0018c36 <CPU::lookupIntelName(unsigned char, unsigned char)>
c0019a14:	5a                   	pop    edx
c0019a15:	59                   	pop    ecx
c0019a16:	50                   	push   eax
c0019a17:	56                   	push   esi
c0019a18:	e8 4b 6f fe ff       	call   c0000968 <strcat>
c0019a1d:	5f                   	pop    edi
c0019a1e:	5d                   	pop    ebp
c0019a1f:	56                   	push   esi
c0019a20:	53                   	push   ebx
c0019a21:	e8 30 aa ff ff       	call   c0014456 <Device::setName(char const*)>
c0019a26:	58                   	pop    eax
c0019a27:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019a2d:	5a                   	pop    edx
c0019a2e:	68 81 c6 02 c0       	push   0xc002c681
c0019a33:	50                   	push   eax
c0019a34:	e8 7b 6e fe ff       	call   c00008b4 <strcmp>
c0019a39:	83 c4 10             	add    esp,0x10
c0019a3c:	85 c0                	test   eax,eax
c0019a3e:	0f 85 71 03 00 00    	jne    c0019db5 <CPU::detectFeatures()+0x9e3>
c0019a44:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0019a4b:	e9 65 03 00 00       	jmp    c0019db5 <CPU::detectFeatures()+0x9e3>
c0019a50:	83 f8 02             	cmp    eax,0x2
c0019a53:	0f 85 b5 00 00 00    	jne    c0019b0e <CPU::detectFeatures()+0x73c>
c0019a59:	57                   	push   edi
c0019a5a:	57                   	push   edi
c0019a5b:	68 93 c6 02 c0       	push   0xc002c693
c0019a60:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019a64:	56                   	push   esi
c0019a65:	e8 be 6d fe ff       	call   c0000828 <strcpy>
c0019a6a:	5d                   	pop    ebp
c0019a6b:	58                   	pop    eax
c0019a6c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019a72:	66 c1 e8 06          	shr    ax,0x6
c0019a76:	0f b6 c0             	movzx  eax,al
c0019a79:	50                   	push   eax
c0019a7a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019a80:	c1 e8 0e             	shr    eax,0xe
c0019a83:	0f b6 c0             	movzx  eax,al
c0019a86:	50                   	push   eax
c0019a87:	e8 16 f0 ff ff       	call   c0018aa2 <CPU::lookupAMDName(unsigned char, unsigned char)>
c0019a8c:	5a                   	pop    edx
c0019a8d:	59                   	pop    ecx
c0019a8e:	50                   	push   eax
c0019a8f:	56                   	push   esi
c0019a90:	e8 d3 6e fe ff       	call   c0000968 <strcat>
c0019a95:	5f                   	pop    edi
c0019a96:	5d                   	pop    ebp
c0019a97:	56                   	push   esi
c0019a98:	53                   	push   ebx
c0019a99:	e8 b8 a9 ff ff       	call   c0014456 <Device::setName(char const*)>
c0019a9e:	58                   	pop    eax
c0019a9f:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019aa5:	5a                   	pop    edx
c0019aa6:	68 98 c6 02 c0       	push   0xc002c698
c0019aab:	50                   	push   eax
c0019aac:	e8 03 6e fe ff       	call   c00008b4 <strcmp>
c0019ab1:	83 c4 10             	add    esp,0x10
c0019ab4:	85 c0                	test   eax,eax
c0019ab6:	75 20                	jne    c0019ad8 <CPU::detectFeatures()+0x706>
c0019ab8:	8b 15 88 f2 02 c0    	mov    edx,DWORD PTR ds:0xc002f288
c0019abe:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0019ac4:	a8 01                	test   al,0x1
c0019ac6:	74 10                	je     c0019ad8 <CPU::detectFeatures()+0x706>
c0019ac8:	83 e0 fe             	and    eax,0xfffffffe
c0019acb:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0019ad1:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0019ad8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019ade:	c1 e8 0e             	shr    eax,0xe
c0019ae1:	3c 05                	cmp    al,0x5
c0019ae3:	0f 85 cc 02 00 00    	jne    c0019db5 <CPU::detectFeatures()+0x9e3>
c0019ae9:	56                   	push   esi
c0019aea:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019af0:	83 e0 0f             	and    eax,0xf
c0019af3:	50                   	push   eax
c0019af4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019afa:	66 c1 e8 06          	shr    ax,0x6
c0019afe:	0f b6 c0             	movzx  eax,al
c0019b01:	50                   	push   eax
c0019b02:	6a 05                	push   0x5
c0019b04:	e8 0f f4 ff ff       	call   c0018f18 <CPU::AMD_K6_writeback(int, int, int)>
c0019b09:	e9 1f 02 00 00       	jmp    c0019d2d <CPU::detectFeatures()+0x95b>
c0019b0e:	8d 50 fd             	lea    edx,[eax-0x3]
c0019b11:	83 fa 01             	cmp    edx,0x1
c0019b14:	76 09                	jbe    c0019b1f <CPU::detectFeatures()+0x74d>
c0019b16:	83 f8 06             	cmp    eax,0x6
c0019b19:	0f 85 91 01 00 00    	jne    c0019cb0 <CPU::detectFeatures()+0x8de>
c0019b1f:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019b25:	c1 ea 0e             	shr    edx,0xe
c0019b28:	80 fa 05             	cmp    dl,0x5
c0019b2b:	75 7b                	jne    c0019ba8 <CPU::detectFeatures()+0x7d6>
c0019b2d:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019b33:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019b38:	66 81 fa 00 01       	cmp    dx,0x100
c0019b3d:	75 0c                	jne    c0019b4b <CPU::detectFeatures()+0x779>
c0019b3f:	51                   	push   ecx
c0019b40:	51                   	push   ecx
c0019b41:	68 9f c6 02 c0       	push   0xc002c69f
c0019b46:	e9 dc 01 00 00       	jmp    c0019d27 <CPU::detectFeatures()+0x955>
c0019b4b:	66 81 fa 00 02       	cmp    dx,0x200
c0019b50:	75 0c                	jne    c0019b5e <CPU::detectFeatures()+0x78c>
c0019b52:	52                   	push   edx
c0019b53:	52                   	push   edx
c0019b54:	68 b2 c6 02 c0       	push   0xc002c6b2
c0019b59:	e9 c9 01 00 00       	jmp    c0019d27 <CPU::detectFeatures()+0x955>
c0019b5e:	66 81 fa 40 02       	cmp    dx,0x240
c0019b63:	75 0c                	jne    c0019b71 <CPU::detectFeatures()+0x79f>
c0019b65:	50                   	push   eax
c0019b66:	50                   	push   eax
c0019b67:	68 c4 c6 02 c0       	push   0xc002c6c4
c0019b6c:	e9 b6 01 00 00       	jmp    c0019d27 <CPU::detectFeatures()+0x955>
c0019b71:	83 f8 06             	cmp    eax,0x6
c0019b74:	75 0c                	jne    c0019b82 <CPU::detectFeatures()+0x7b0>
c0019b76:	50                   	push   eax
c0019b77:	50                   	push   eax
c0019b78:	68 d6 c6 02 c0       	push   0xc002c6d6
c0019b7d:	e9 a5 01 00 00       	jmp    c0019d27 <CPU::detectFeatures()+0x955>
c0019b82:	83 f8 04             	cmp    eax,0x4
c0019b85:	75 0c                	jne    c0019b93 <CPU::detectFeatures()+0x7c1>
c0019b87:	50                   	push   eax
c0019b88:	50                   	push   eax
c0019b89:	68 e2 c6 02 c0       	push   0xc002c6e2
c0019b8e:	e9 94 01 00 00       	jmp    c0019d27 <CPU::detectFeatures()+0x955>
c0019b93:	83 f8 03             	cmp    eax,0x3
c0019b96:	0f 85 19 02 00 00    	jne    c0019db5 <CPU::detectFeatures()+0x9e3>
c0019b9c:	50                   	push   eax
c0019b9d:	50                   	push   eax
c0019b9e:	68 ea c6 02 c0       	push   0xc002c6ea
c0019ba3:	e9 7f 01 00 00       	jmp    c0019d27 <CPU::detectFeatures()+0x955>
c0019ba8:	80 fa 06             	cmp    dl,0x6
c0019bab:	0f 85 db 00 00 00    	jne    c0019c8c <CPU::detectFeatures()+0x8ba>
c0019bb1:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019bb7:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019bbc:	66 81 fa 80 01       	cmp    dx,0x180
c0019bc1:	75 0c                	jne    c0019bcf <CPU::detectFeatures()+0x7fd>
c0019bc3:	50                   	push   eax
c0019bc4:	50                   	push   eax
c0019bc5:	68 f5 c6 02 c0       	push   0xc002c6f5
c0019bca:	e9 58 01 00 00       	jmp    c0019d27 <CPU::detectFeatures()+0x955>
c0019bcf:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0019bd5:	66 f7 c1 80 ff       	test   cx,0xff80
c0019bda:	75 0c                	jne    c0019be8 <CPU::detectFeatures()+0x816>
c0019bdc:	50                   	push   eax
c0019bdd:	50                   	push   eax
c0019bde:	68 05 c7 02 c0       	push   0xc002c705
c0019be3:	e9 3f 01 00 00       	jmp    c0019d27 <CPU::detectFeatures()+0x955>
c0019be8:	66 81 fa 40 02       	cmp    dx,0x240
c0019bed:	75 0c                	jne    c0019bfb <CPU::detectFeatures()+0x829>
c0019bef:	55                   	push   ebp
c0019bf0:	55                   	push   ebp
c0019bf1:	68 0c c7 02 c0       	push   0xc002c70c
c0019bf6:	e9 2c 01 00 00       	jmp    c0019d27 <CPU::detectFeatures()+0x955>
c0019bfb:	66 81 fa 80 02       	cmp    dx,0x280
c0019c00:	75 0c                	jne    c0019c0e <CPU::detectFeatures()+0x83c>
c0019c02:	57                   	push   edi
c0019c03:	57                   	push   edi
c0019c04:	68 15 c7 02 c0       	push   0xc002c715
c0019c09:	e9 19 01 00 00       	jmp    c0019d27 <CPU::detectFeatures()+0x955>
c0019c0e:	66 81 fa 40 03       	cmp    dx,0x340
c0019c13:	74 ed                	je     c0019c02 <CPU::detectFeatures()+0x830>
c0019c15:	66 81 fa c0 03       	cmp    dx,0x3c0
c0019c1a:	75 0c                	jne    c0019c28 <CPU::detectFeatures()+0x856>
c0019c1c:	56                   	push   esi
c0019c1d:	56                   	push   esi
c0019c1e:	68 1c c7 02 c0       	push   0xc002c71c
c0019c23:	e9 ff 00 00 00       	jmp    c0019d27 <CPU::detectFeatures()+0x955>
c0019c28:	83 f8 06             	cmp    eax,0x6
c0019c2b:	0f 84 45 ff ff ff    	je     c0019b76 <CPU::detectFeatures()+0x7a4>
c0019c31:	83 f8 04             	cmp    eax,0x4
c0019c34:	0f 84 4d ff ff ff    	je     c0019b87 <CPU::detectFeatures()+0x7b5>
c0019c3a:	83 f8 03             	cmp    eax,0x3
c0019c3d:	0f 85 72 01 00 00    	jne    c0019db5 <CPU::detectFeatures()+0x9e3>
c0019c43:	51                   	push   ecx
c0019c44:	51                   	push   ecx
c0019c45:	68 25 c7 02 c0       	push   0xc002c725
c0019c4a:	53                   	push   ebx
c0019c4b:	e8 06 a8 ff ff       	call   c0014456 <Device::setName(char const*)>
c0019c50:	b1 c1                	mov    cl,0xc1
c0019c52:	88 c8                	mov    al,cl
c0019c54:	e6 22                	out    0x22,al
c0019c56:	e4 23                	in     al,0x23
c0019c58:	88 c2                	mov    dl,al
c0019c5a:	88 c8                	mov    al,cl
c0019c5c:	e6 22                	out    0x22,al
c0019c5e:	88 d0                	mov    al,dl
c0019c60:	83 c8 10             	or     eax,0x10
c0019c63:	e6 23                	out    0x23,al
c0019c65:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019c6c:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019c6f:	89 d0                	mov    eax,edx
c0019c71:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0019c77:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0019c7b:	40                   	inc    eax
c0019c7c:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019c82:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019c87:	e9 a1 00 00 00       	jmp    c0019d2d <CPU::detectFeatures()+0x95b>
c0019c8c:	83 f8 06             	cmp    eax,0x6
c0019c8f:	0f 84 e1 fe ff ff    	je     c0019b76 <CPU::detectFeatures()+0x7a4>
c0019c95:	83 f8 04             	cmp    eax,0x4
c0019c98:	0f 84 e9 fe ff ff    	je     c0019b87 <CPU::detectFeatures()+0x7b5>
c0019c9e:	83 f8 03             	cmp    eax,0x3
c0019ca1:	0f 85 0e 01 00 00    	jne    c0019db5 <CPU::detectFeatures()+0x9e3>
c0019ca7:	52                   	push   edx
c0019ca8:	52                   	push   edx
c0019ca9:	68 30 c7 02 c0       	push   0xc002c730
c0019cae:	eb 77                	jmp    c0019d27 <CPU::detectFeatures()+0x955>
c0019cb0:	83 f8 07             	cmp    eax,0x7
c0019cb3:	75 09                	jne    c0019cbe <CPU::detectFeatures()+0x8ec>
c0019cb5:	50                   	push   eax
c0019cb6:	50                   	push   eax
c0019cb7:	68 3a c7 02 c0       	push   0xc002c73a
c0019cbc:	eb 69                	jmp    c0019d27 <CPU::detectFeatures()+0x955>
c0019cbe:	83 f8 0a             	cmp    eax,0xa
c0019cc1:	75 09                	jne    c0019ccc <CPU::detectFeatures()+0x8fa>
c0019cc3:	50                   	push   eax
c0019cc4:	50                   	push   eax
c0019cc5:	68 45 c7 02 c0       	push   0xc002c745
c0019cca:	eb 5b                	jmp    c0019d27 <CPU::detectFeatures()+0x955>
c0019ccc:	83 f8 0b             	cmp    eax,0xb
c0019ccf:	75 09                	jne    c0019cda <CPU::detectFeatures()+0x908>
c0019cd1:	50                   	push   eax
c0019cd2:	50                   	push   eax
c0019cd3:	68 4d c7 02 c0       	push   0xc002c74d
c0019cd8:	eb 4d                	jmp    c0019d27 <CPU::detectFeatures()+0x955>
c0019cda:	83 f8 08             	cmp    eax,0x8
c0019cdd:	75 09                	jne    c0019ce8 <CPU::detectFeatures()+0x916>
c0019cdf:	50                   	push   eax
c0019ce0:	50                   	push   eax
c0019ce1:	68 56 c7 02 c0       	push   0xc002c756
c0019ce6:	eb 3f                	jmp    c0019d27 <CPU::detectFeatures()+0x955>
c0019ce8:	83 f8 09             	cmp    eax,0x9
c0019ceb:	75 09                	jne    c0019cf6 <CPU::detectFeatures()+0x924>
c0019ced:	50                   	push   eax
c0019cee:	50                   	push   eax
c0019cef:	68 5e c7 02 c0       	push   0xc002c75e
c0019cf4:	eb 31                	jmp    c0019d27 <CPU::detectFeatures()+0x955>
c0019cf6:	83 f8 05             	cmp    eax,0x5
c0019cf9:	75 09                	jne    c0019d04 <CPU::detectFeatures()+0x932>
c0019cfb:	50                   	push   eax
c0019cfc:	50                   	push   eax
c0019cfd:	68 66 c7 02 c0       	push   0xc002c766
c0019d02:	eb 23                	jmp    c0019d27 <CPU::detectFeatures()+0x955>
c0019d04:	83 f8 0c             	cmp    eax,0xc
c0019d07:	75 09                	jne    c0019d12 <CPU::detectFeatures()+0x940>
c0019d09:	55                   	push   ebp
c0019d0a:	55                   	push   ebp
c0019d0b:	68 74 c7 02 c0       	push   0xc002c774
c0019d10:	eb 15                	jmp    c0019d27 <CPU::detectFeatures()+0x955>
c0019d12:	83 f8 0d             	cmp    eax,0xd
c0019d15:	75 09                	jne    c0019d20 <CPU::detectFeatures()+0x94e>
c0019d17:	57                   	push   edi
c0019d18:	57                   	push   edi
c0019d19:	68 7f c7 02 c0       	push   0xc002c77f
c0019d1e:	eb 07                	jmp    c0019d27 <CPU::detectFeatures()+0x955>
c0019d20:	56                   	push   esi
c0019d21:	56                   	push   esi
c0019d22:	68 93 c7 02 c0       	push   0xc002c793
c0019d27:	53                   	push   ebx
c0019d28:	e8 29 a7 ff ff       	call   c0014456 <Device::setName(char const*)>
c0019d2d:	83 c4 10             	add    esp,0x10
c0019d30:	e9 80 00 00 00       	jmp    c0019db5 <CPU::detectFeatures()+0x9e3>
c0019d35:	51                   	push   ecx
c0019d36:	51                   	push   ecx
c0019d37:	68 df c5 02 c0       	push   0xc002c5df
c0019d3c:	55                   	push   ebp
c0019d3d:	e8 e6 6a fe ff       	call   c0000828 <strcpy>
c0019d42:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019d4c:	e8 5d 65 fe ff       	call   c00002ae <is486>
c0019d51:	83 c4 10             	add    esp,0x10
c0019d54:	85 c0                	test   eax,eax
c0019d56:	74 2b                	je     c0019d83 <CPU::detectFeatures()+0x9b1>
c0019d58:	52                   	push   edx
c0019d59:	52                   	push   edx
c0019d5a:	68 9f c7 02 c0       	push   0xc002c79f
c0019d5f:	53                   	push   ebx
c0019d60:	e8 f1 a6 ff ff       	call   c0014456 <Device::setName(char const*)>
c0019d65:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019d6c:	0f 20 c0             	mov    eax,cr0
c0019d6f:	83 e0 14             	and    eax,0x14
c0019d72:	83 c4 10             	add    esp,0x10
c0019d75:	83 f8 04             	cmp    eax,0x4
c0019d78:	75 1f                	jne    c0019d99 <CPU::detectFeatures()+0x9c7>
c0019d7a:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019d81:	eb 32                	jmp    c0019db5 <CPU::detectFeatures()+0x9e3>
c0019d83:	50                   	push   eax
c0019d84:	50                   	push   eax
c0019d85:	68 aa c7 02 c0       	push   0xc002c7aa
c0019d8a:	53                   	push   ebx
c0019d8b:	e8 c6 a6 ff ff       	call   c0014456 <Device::setName(char const*)>
c0019d90:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019d97:	eb d3                	jmp    c0019d6c <CPU::detectFeatures()+0x99a>
c0019d99:	e8 eb 64 fe ff       	call   c0000289 <hasLegacyFPU>
c0019d9e:	83 e0 01             	and    eax,0x1
c0019da1:	8d 14 00             	lea    edx,[eax+eax*1]
c0019da4:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019daa:	83 e0 fd             	and    eax,0xfffffffd
c0019dad:	09 d0                	or     eax,edx
c0019daf:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019db5:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019dbc:	83 c4 4c             	add    esp,0x4c
c0019dbf:	5b                   	pop    ebx
c0019dc0:	5e                   	pop    esi
c0019dc1:	5f                   	pop    edi
c0019dc2:	5d                   	pop    ebp
c0019dc3:	c3                   	ret    

c0019dc4 <CPU::setupSMEP()>:
c0019dc4:	0f 20 e0             	mov    eax,cr4
c0019dc7:	0d 00 00 10 00       	or     eax,0x100000
c0019dcc:	0f 22 e0             	mov    cr4,eax
c0019dcf:	c3                   	ret    

c0019dd0 <CPU::setupUMIP()>:
c0019dd0:	0f 20 e0             	mov    eax,cr4
c0019dd3:	80 cc 08             	or     ah,0x8
c0019dd6:	0f 22 e0             	mov    cr4,eax
c0019dd9:	c3                   	ret    

c0019dda <CPU::setupTSC()>:
c0019dda:	0f 20 e0             	mov    eax,cr4
c0019ddd:	83 c8 04             	or     eax,0x4
c0019de0:	0f 22 e0             	mov    cr4,eax
c0019de3:	c3                   	ret    

c0019de4 <CPU::setupLargePages()>:
c0019de4:	0f 20 e0             	mov    eax,cr4
c0019de7:	83 c8 10             	or     eax,0x10
c0019dea:	0f 22 e0             	mov    cr4,eax
c0019ded:	c3                   	ret    

c0019dee <CPU::setupPAT()>:
c0019dee:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c0019df3:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019dfa:	74 2c                	je     c0019e28 <CPU::setupPAT()+0x3a>
c0019dfc:	53                   	push   ebx
c0019dfd:	83 ec 10             	sub    esp,0x10
c0019e00:	68 77 02 00 00       	push   0x277
c0019e05:	50                   	push   eax
c0019e06:	e8 43 50 ff ff       	call   c000ee4e <Computer::rdmsr(unsigned int)>
c0019e0b:	83 e2 f8             	and    edx,0xfffffff8
c0019e0e:	83 ca 01             	or     edx,0x1
c0019e11:	52                   	push   edx
c0019e12:	50                   	push   eax
c0019e13:	68 77 02 00 00       	push   0x277
c0019e18:	ff 35 88 f2 02 c0    	push   DWORD PTR ds:0xc002f288
c0019e1e:	e8 57 50 ff ff       	call   c000ee7a <Computer::wrmsr(unsigned int, unsigned long long)>
c0019e23:	83 c4 28             	add    esp,0x28
c0019e26:	5b                   	pop    ebx
c0019e27:	c3                   	ret    
c0019e28:	c3                   	ret    
c0019e29:	90                   	nop

c0019e2a <CPU::setupMTRR()>:
c0019e2a:	c3                   	ret    
c0019e2b:	90                   	nop

c0019e2c <CPU::setupGlobalPages()>:
c0019e2c:	0f 20 e0             	mov    eax,cr4
c0019e2f:	0c 80                	or     al,0x80
c0019e31:	0f 22 e0             	mov    cr4,eax
c0019e34:	c3                   	ret    
c0019e35:	90                   	nop

c0019e36 <CPU::allowUsermodeDataAccess()>:
c0019e36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019e3a:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019e41:	74 03                	je     c0019e46 <CPU::allowUsermodeDataAccess()+0x10>
c0019e43:	0f 01 cb             	stac   
c0019e46:	c3                   	ret    
c0019e47:	90                   	nop

c0019e48 <CPU::prohibitUsermodeDataAccess()>:
c0019e48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019e4c:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019e53:	74 03                	je     c0019e58 <CPU::prohibitUsermodeDataAccess()+0x10>
c0019e55:	0f 01 ca             	clac   
c0019e58:	c3                   	ret    
c0019e59:	90                   	nop

c0019e5a <CPU::setupSMAP()>:
c0019e5a:	0f 20 e0             	mov    eax,cr4
c0019e5d:	0d 00 00 20 00       	or     eax,0x200000
c0019e62:	0f 22 e0             	mov    cr4,eax
c0019e65:	eb e1                	jmp    c0019e48 <CPU::prohibitUsermodeDataAccess()>
c0019e67:	90                   	nop

c0019e68 <CPU::setupFeatures()>:
c0019e68:	83 ec 0c             	sub    esp,0xc
c0019e6b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019e6f:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019e76:	74 07                	je     c0019e7f <CPU::setupFeatures()+0x17>
c0019e78:	52                   	push   edx
c0019e79:	e8 46 ff ff ff       	call   c0019dc4 <CPU::setupSMEP()>
c0019e7e:	58                   	pop    eax
c0019e7f:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019e86:	74 07                	je     c0019e8f <CPU::setupFeatures()+0x27>
c0019e88:	52                   	push   edx
c0019e89:	e8 cc ff ff ff       	call   c0019e5a <CPU::setupSMAP()>
c0019e8e:	58                   	pop    eax
c0019e8f:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019e96:	74 07                	je     c0019e9f <CPU::setupFeatures()+0x37>
c0019e98:	52                   	push   edx
c0019e99:	e8 32 ff ff ff       	call   c0019dd0 <CPU::setupUMIP()>
c0019e9e:	58                   	pop    eax
c0019e9f:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019ea6:	74 07                	je     c0019eaf <CPU::setupFeatures()+0x47>
c0019ea8:	52                   	push   edx
c0019ea9:	e8 2c ff ff ff       	call   c0019dda <CPU::setupTSC()>
c0019eae:	58                   	pop    eax
c0019eaf:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019eb6:	74 07                	je     c0019ebf <CPU::setupFeatures()+0x57>
c0019eb8:	52                   	push   edx
c0019eb9:	e8 26 ff ff ff       	call   c0019de4 <CPU::setupLargePages()>
c0019ebe:	59                   	pop    ecx
c0019ebf:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019ec6:	74 07                	je     c0019ecf <CPU::setupFeatures()+0x67>
c0019ec8:	52                   	push   edx
c0019ec9:	e8 5e ff ff ff       	call   c0019e2c <CPU::setupGlobalPages()>
c0019ece:	58                   	pop    eax
c0019ecf:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019ed6:	74 0c                	je     c0019ee4 <CPU::setupFeatures()+0x7c>
c0019ed8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019edc:	83 c4 0c             	add    esp,0xc
c0019edf:	e9 0a ff ff ff       	jmp    c0019dee <CPU::setupPAT()>
c0019ee4:	83 c4 0c             	add    esp,0xc
c0019ee7:	c3                   	ret    

c0019ee8 <CPU::open(int, int, void*)>:
c0019ee8:	57                   	push   edi
c0019ee9:	56                   	push   esi
c0019eea:	53                   	push   ebx
c0019eeb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019eef:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019ef3:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019ef9:	83 ec 0c             	sub    esp,0xc
c0019efc:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019f02:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019f08:	50                   	push   eax
c0019f09:	e8 2c 52 ff ff       	call   c000f13a <GDT::setup()>
c0019f0e:	83 c4 0c             	add    esp,0xc
c0019f11:	6a 00                	push   0x0
c0019f13:	68 ef be ad de       	push   0xdeadbeef
c0019f18:	57                   	push   edi
c0019f19:	e8 a0 74 ff ff       	call   c00113be <TSS::setup(unsigned long, unsigned long)>
c0019f1e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019f21:	e8 78 74 ff ff       	call   c001139e <TSS::flush()>
c0019f26:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019f2c:	89 04 24             	mov    DWORD PTR [esp],eax
c0019f2f:	e8 6a 54 ff ff       	call   c000f39e <IDT::setup()>
c0019f34:	b8 00 04 00 00       	mov    eax,0x400
c0019f39:	0f 23 f8             	mov    db7,eax
c0019f3c:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019f46:	e8 c9 5f ff ff       	call   c000ff14 <Phys::allocatePage()>
c0019f4b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019f51:	89 30                	mov    DWORD PTR [eax],esi
c0019f53:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019f59:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019f5c:	58                   	pop    eax
c0019f5d:	5a                   	pop    edx
c0019f5e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019f64:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019f68:	e8 f1 85 ff ff       	call   c001255e <VAS::setCPUSpecific(unsigned long)>
c0019f6d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019f70:	e8 5d f4 ff ff       	call   c00193d2 <CPU::detectFeatures()>
c0019f75:	e8 33 b9 ff ff       	call   c00158ad <setupInterruptController()>
c0019f7a:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019f80:	a1 a0 f2 02 c0       	mov    eax,ds:0xc002f2a0
c0019f85:	83 e0 10             	and    eax,0x10
c0019f88:	83 f8 01             	cmp    eax,0x1
c0019f8b:	19 c0                	sbb    eax,eax
c0019f8d:	83 e0 46             	and    eax,0x46
c0019f90:	83 c0 1e             	add    eax,0x1e
c0019f93:	89 04 24             	mov    DWORD PTR [esp],eax
c0019f96:	e8 6a cf ff ff       	call   c0016f05 <setupTimer(int)>
c0019f9b:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019fa1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019fa4:	e8 bf fe ff ff       	call   c0019e68 <CPU::setupFeatures()>
c0019fa9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019fac:	e8 a5 f1 ff ff       	call   c0019156 <CPU::displayFeatures()>
c0019fb1:	83 c4 10             	add    esp,0x10
c0019fb4:	31 c0                	xor    eax,eax
c0019fb6:	5b                   	pop    ebx
c0019fb7:	5e                   	pop    esi
c0019fb8:	5f                   	pop    edi
c0019fb9:	c3                   	ret    

c0019fba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019fba:	57                   	push   edi
c0019fbb:	56                   	push   esi
c0019fbc:	53                   	push   ebx
c0019fbd:	51                   	push   ecx
c0019fbe:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019fc2:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019fc5:	0f 02 c0             	lar    eax,ax
c0019fc8:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019fcb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019fcf:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019fd2:	88 ca                	mov    dl,cl
c0019fd4:	c0 ea 06             	shr    dl,0x6
c0019fd7:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019fdb:	89 ca                	mov    edx,ecx
c0019fdd:	66 c1 ea 03          	shr    dx,0x3
c0019fe1:	83 e2 07             	and    edx,0x7
c0019fe4:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019fe9:	88 17                	mov    BYTE PTR [edi],dl
c0019feb:	0f 84 a6 01 00 00    	je     c001a197 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019ff1:	83 e1 07             	and    ecx,0x7
c0019ff4:	80 f9 04             	cmp    cl,0x4
c0019ff7:	0f 84 98 00 00 00    	je     c001a095 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019ffd:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001a002:	0f 95 c0             	setne  al
c001a005:	80 f9 05             	cmp    cl,0x5
c001a008:	0f 95 c2             	setne  dl
c001a00b:	08 c2                	or     dl,al
c001a00d:	74 79                	je     c001a088 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c001a00f:	84 c9                	test   cl,cl
c001a011:	75 05                	jne    c001a018 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c001a013:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c001a016:	eb 3c                	jmp    c001a054 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001a018:	80 f9 01             	cmp    cl,0x1
c001a01b:	75 05                	jne    c001a022 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c001a01d:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001a020:	eb 32                	jmp    c001a054 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001a022:	80 f9 02             	cmp    cl,0x2
c001a025:	75 05                	jne    c001a02c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c001a027:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001a02a:	eb 28                	jmp    c001a054 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001a02c:	31 c0                	xor    eax,eax
c001a02e:	80 f9 03             	cmp    cl,0x3
c001a031:	75 05                	jne    c001a038 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c001a033:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001a036:	eb 1c                	jmp    c001a054 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001a038:	80 f9 05             	cmp    cl,0x5
c001a03b:	75 05                	jne    c001a042 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c001a03d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c001a040:	eb 12                	jmp    c001a054 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001a042:	80 f9 06             	cmp    cl,0x6
c001a045:	75 05                	jne    c001a04c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c001a047:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001a04a:	eb 08                	jmp    c001a054 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001a04c:	80 f9 07             	cmp    cl,0x7
c001a04f:	75 03                	jne    c001a054 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001a051:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a054:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c001a059:	75 10                	jne    c001a06b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c001a05b:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c001a05f:	b9 03 00 00 00       	mov    ecx,0x3
c001a064:	01 d0                	add    eax,edx
c001a066:	e9 37 01 00 00       	jmp    c001a1a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001a06b:	b9 02 00 00 00       	mov    ecx,0x2
c001a070:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c001a075:	0f 85 27 01 00 00    	jne    c001a1a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001a07b:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c001a07e:	b9 06 00 00 00       	mov    ecx,0x6
c001a083:	e9 1a 01 00 00       	jmp    c001a1a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001a088:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c001a08b:	b9 06 00 00 00       	mov    ecx,0x6
c001a090:	e9 0f 01 00 00       	jmp    c001a1a4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a095:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c001a098:	88 ca                	mov    dl,cl
c001a09a:	c0 ea 06             	shr    dl,0x6
c001a09d:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c001a0a1:	89 ca                	mov    edx,ecx
c001a0a3:	66 c1 ea 03          	shr    dx,0x3
c001a0a7:	83 e2 07             	and    edx,0x7
c001a0aa:	80 e1 07             	and    cl,0x7
c001a0ad:	75 05                	jne    c001a0b4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c001a0af:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c001a0b2:	eb 4c                	jmp    c001a100 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a0b4:	80 f9 01             	cmp    cl,0x1
c001a0b7:	75 05                	jne    c001a0be <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c001a0b9:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c001a0bc:	eb 42                	jmp    c001a100 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a0be:	80 f9 02             	cmp    cl,0x2
c001a0c1:	75 05                	jne    c001a0c8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c001a0c3:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001a0c6:	eb 38                	jmp    c001a100 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a0c8:	80 f9 03             	cmp    cl,0x3
c001a0cb:	75 05                	jne    c001a0d2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c001a0cd:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001a0d0:	eb 2e                	jmp    c001a100 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a0d2:	80 f9 04             	cmp    cl,0x4
c001a0d5:	75 12                	jne    c001a0e9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c001a0d7:	f6 c4 60             	test   ah,0x60
c001a0da:	75 08                	jne    c001a0e4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c001a0dc:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c001a0df:	8d 78 14             	lea    edi,[eax+0x14]
c001a0e2:	eb 1c                	jmp    c001a100 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a0e4:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c001a0e7:	eb 17                	jmp    c001a100 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a0e9:	80 f9 05             	cmp    cl,0x5
c001a0ec:	75 05                	jne    c001a0f3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c001a0ee:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c001a0f1:	eb 0d                	jmp    c001a100 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a0f3:	80 f9 06             	cmp    cl,0x6
c001a0f6:	75 05                	jne    c001a0fd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c001a0f8:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001a0fb:	eb 03                	jmp    c001a100 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a0fd:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001a100:	84 d2                	test   dl,dl
c001a102:	75 05                	jne    c001a109 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c001a104:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c001a107:	eb 3c                	jmp    c001a145 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a109:	80 fa 01             	cmp    dl,0x1
c001a10c:	75 05                	jne    c001a113 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c001a10e:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001a111:	eb 32                	jmp    c001a145 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a113:	80 fa 02             	cmp    dl,0x2
c001a116:	75 05                	jne    c001a11d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c001a118:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001a11b:	eb 28                	jmp    c001a145 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a11d:	80 fa 03             	cmp    dl,0x3
c001a120:	75 05                	jne    c001a127 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c001a122:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001a125:	eb 1e                	jmp    c001a145 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a127:	31 c0                	xor    eax,eax
c001a129:	80 fa 04             	cmp    dl,0x4
c001a12c:	74 17                	je     c001a145 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a12e:	80 fa 05             	cmp    dl,0x5
c001a131:	75 05                	jne    c001a138 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c001a133:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c001a136:	eb 0d                	jmp    c001a145 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a138:	80 fa 06             	cmp    dl,0x6
c001a13b:	75 05                	jne    c001a142 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c001a13d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001a140:	eb 03                	jmp    c001a145 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a142:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a145:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001a14a:	0f 94 c2             	sete   dl
c001a14d:	80 f9 05             	cmp    cl,0x5
c001a150:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c001a154:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c001a159:	d3 e0                	shl    eax,cl
c001a15b:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c001a15f:	74 0a                	je     c001a16b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c001a161:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001a164:	b9 07 00 00 00       	mov    ecx,0x7
c001a169:	eb 37                	jmp    c001a1a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001a16b:	01 f8                	add    eax,edi
c001a16d:	b9 03 00 00 00       	mov    ecx,0x3
c001a172:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001a177:	74 2b                	je     c001a1a4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a179:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c001a17e:	75 0d                	jne    c001a18d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c001a180:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c001a184:	01 c8                	add    eax,ecx
c001a186:	b9 04 00 00 00       	mov    ecx,0x4
c001a18b:	eb 17                	jmp    c001a1a4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a18d:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001a190:	b9 07 00 00 00       	mov    ecx,0x7
c001a195:	eb 0d                	jmp    c001a1a4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a197:	b9 02 00 00 00       	mov    ecx,0x2
c001a19c:	b2 01                	mov    dl,0x1
c001a19e:	31 c0                	xor    eax,eax
c001a1a0:	eb 02                	jmp    c001a1a4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a1a2:	31 d2                	xor    edx,edx
c001a1a4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a1a8:	89 0b                	mov    DWORD PTR [ebx],ecx
c001a1aa:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a1ae:	88 11                	mov    BYTE PTR [ecx],dl
c001a1b0:	5a                   	pop    edx
c001a1b1:	5b                   	pop    ebx
c001a1b2:	5e                   	pop    esi
c001a1b3:	5f                   	pop    edi
c001a1b4:	c3                   	ret    

c001a1b5 <Krnl::smpEntry()>:
c001a1b5:	eb fe                	jmp    c001a1b5 <Krnl::smpEntry()>

c001a1b7 <Krnl::startCPU(int)>:
c001a1b7:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c001a1bc:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c001a1c3:	0f 84 36 01 00 00    	je     c001a2ff <Krnl::startCPU(int)+0x148>
c001a1c9:	53                   	push   ebx
c001a1ca:	83 ec 10             	sub    esp,0x10
c001a1cd:	fa                   	cli    
c001a1ce:	ff 05 c8 27 03 c0    	inc    DWORD PTR ds:0xc00327c8
c001a1d4:	6a 1b                	push   0x1b
c001a1d6:	ff 35 88 f2 02 c0    	push   DWORD PTR ds:0xc002f288
c001a1dc:	e8 6d 4c ff ff       	call   c000ee4e <Computer::rdmsr(unsigned int)>
c001a1e1:	25 00 f0 ff ff       	and    eax,0xfffff000
c001a1e6:	89 c3                	mov    ebx,eax
c001a1e8:	58                   	pop    eax
c001a1e9:	5a                   	pop    edx
c001a1ea:	53                   	push   ebx
c001a1eb:	68 e4 c7 02 c0       	push   0xc002c7e4
c001a1f0:	e8 5e 8c ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001a1f5:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a1ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a203:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a20d:	c1 e0 18             	shl    eax,0x18
c001a210:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c001a216:	83 c4 10             	add    esp,0x10
c001a219:	81 e2 ff ff ff 00    	and    edx,0xffffff
c001a21f:	09 c2                	or     edx,eax
c001a221:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c001a227:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c001a22d:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a233:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c001a239:	80 cd c5             	or     ch,0xc5
c001a23c:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a242:	f3 90                	pause  
c001a244:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a246:	0f ba e1 0c          	bt     ecx,0xc
c001a24a:	72 f6                	jb     c001a242 <Krnl::startCPU(int)+0x8b>
c001a24c:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a252:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a258:	09 c1                	or     ecx,eax
c001a25a:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001a260:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a266:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c001a26c:	80 cd 85             	or     ch,0x85
c001a26f:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a275:	f3 90                	pause  
c001a277:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a279:	0f ba e1 0c          	bt     ecx,0xc
c001a27d:	72 f6                	jb     c001a275 <Krnl::startCPU(int)+0xbe>
c001a27f:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a289:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a28f:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a295:	09 c1                	or     ecx,eax
c001a297:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001a29d:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a2a3:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c001a2a9:	81 c9 02 06 00 00    	or     ecx,0x602
c001a2af:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a2b5:	f3 90                	pause  
c001a2b7:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a2b9:	0f ba e1 0c          	bt     ecx,0xc
c001a2bd:	72 f6                	jb     c001a2b5 <Krnl::startCPU(int)+0xfe>
c001a2bf:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a2c9:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a2cf:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a2d5:	09 c8                	or     eax,ecx
c001a2d7:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c001a2dd:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c001a2e3:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c001a2e8:	0d 02 06 00 00       	or     eax,0x602
c001a2ed:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c001a2f3:	f3 90                	pause  
c001a2f5:	8b 02                	mov    eax,DWORD PTR [edx]
c001a2f7:	0f ba e0 0c          	bt     eax,0xc
c001a2fb:	72 f6                	jb     c001a2f3 <Krnl::startCPU(int)+0x13c>
c001a2fd:	eb fe                	jmp    c001a2fd <Krnl::startCPU(int)+0x146>
c001a2ff:	c3                   	ret    

c001a300 <Krnl::startCPUs()>:
c001a300:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c001a305:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001a30b:	88 c2                	mov    dl,al
c001a30d:	83 e2 0a             	and    edx,0xa
c001a310:	80 fa 0a             	cmp    dl,0xa
c001a313:	75 09                	jne    c001a31e <Krnl::startCPUs()+0x1e>
c001a315:	a8 01                	test   al,0x1
c001a317:	74 05                	je     c001a31e <Krnl::startCPUs()+0x1e>
c001a319:	e9 7d 5e fe ff       	jmp    c000019b <prepareTramp>
c001a31e:	c3                   	ret    
c001a31f:	90                   	nop

c001a320 <EnvVarContainer::getEnv(char const*)>:
c001a320:	57                   	push   edi
c001a321:	56                   	push   esi
c001a322:	53                   	push   ebx
c001a323:	31 db                	xor    ebx,ebx
c001a325:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a329:	39 1e                	cmp    DWORD PTR [esi],ebx
c001a32b:	7e 2b                	jle    c001a358 <EnvVarContainer::getEnv(char const*)+0x38>
c001a32d:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001a334:	50                   	push   eax
c001a335:	50                   	push   eax
c001a336:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a339:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001a33c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a340:	e8 6f 65 fe ff       	call   c00008b4 <strcmp>
c001a345:	83 c4 10             	add    esp,0x10
c001a348:	85 c0                	test   eax,eax
c001a34a:	75 09                	jne    c001a355 <EnvVarContainer::getEnv(char const*)+0x35>
c001a34c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a34f:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001a353:	eb 05                	jmp    c001a35a <EnvVarContainer::getEnv(char const*)+0x3a>
c001a355:	43                   	inc    ebx
c001a356:	eb d1                	jmp    c001a329 <EnvVarContainer::getEnv(char const*)+0x9>
c001a358:	31 c0                	xor    eax,eax
c001a35a:	5b                   	pop    ebx
c001a35b:	5e                   	pop    esi
c001a35c:	5f                   	pop    edi
c001a35d:	c3                   	ret    

c001a35e <EnvVarContainer::setEnv(char const*, char const*)>:
c001a35e:	55                   	push   ebp
c001a35f:	57                   	push   edi
c001a360:	56                   	push   esi
c001a361:	53                   	push   ebx
c001a362:	83 ec 28             	sub    esp,0x28
c001a365:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001a369:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001a36d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001a371:	56                   	push   esi
c001a372:	e8 11 64 fe ff       	call   c0000788 <strlen>
c001a377:	40                   	inc    eax
c001a378:	89 04 24             	mov    DWORD PTR [esp],eax
c001a37b:	e8 28 55 ff ff       	call   c000f8a8 <malloc>
c001a380:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a383:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a387:	e8 fc 63 fe ff       	call   c0000788 <strlen>
c001a38c:	40                   	inc    eax
c001a38d:	89 04 24             	mov    DWORD PTR [esp],eax
c001a390:	e8 13 55 ff ff       	call   c000f8a8 <malloc>
c001a395:	89 34 24             	mov    DWORD PTR [esp],esi
c001a398:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a39c:	e8 e7 63 fe ff       	call   c0000788 <strlen>
c001a3a1:	83 c4 0c             	add    esp,0xc
c001a3a4:	40                   	inc    eax
c001a3a5:	50                   	push   eax
c001a3a6:	6a 00                	push   0x0
c001a3a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a3ac:	e8 bb 63 fe ff       	call   c000076c <memset>
c001a3b1:	89 34 24             	mov    DWORD PTR [esp],esi
c001a3b4:	e8 cf 63 fe ff       	call   c0000788 <strlen>
c001a3b9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001a3bd:	8d 48 01             	lea    ecx,[eax+0x1]
c001a3c0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a3c2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a3c5:	89 de                	mov    esi,ebx
c001a3c7:	e8 bc 63 fe ff       	call   c0000788 <strlen>
c001a3cc:	83 c4 0c             	add    esp,0xc
c001a3cf:	40                   	inc    eax
c001a3d0:	50                   	push   eax
c001a3d1:	6a 00                	push   0x0
c001a3d3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a3d7:	e8 90 63 fe ff       	call   c000076c <memset>
c001a3dc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a3df:	e8 a4 63 fe ff       	call   c0000788 <strlen>
c001a3e4:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a3e8:	8d 48 01             	lea    ecx,[eax+0x1]
c001a3eb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a3ed:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a3f0:	40                   	inc    eax
c001a3f1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001a3f4:	c1 e0 03             	shl    eax,0x3
c001a3f7:	5a                   	pop    edx
c001a3f8:	59                   	pop    ecx
c001a3f9:	50                   	push   eax
c001a3fa:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a3fd:	e8 92 54 ff ff       	call   c000f894 <realloc>
c001a402:	8d 74 24 18          	lea    esi,[esp+0x18]
c001a406:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a409:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001a40c:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001a410:	b9 08 00 00 00       	mov    ecx,0x8
c001a415:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a417:	83 c4 2c             	add    esp,0x2c
c001a41a:	5b                   	pop    ebx
c001a41b:	5e                   	pop    esi
c001a41c:	5f                   	pop    edi
c001a41d:	5d                   	pop    ebp
c001a41e:	c3                   	ret    
c001a41f:	90                   	nop

c001a420 <EnvVarContainer::deleteEnv(char const*)>:
c001a420:	c3                   	ret    
c001a421:	90                   	nop

c001a422 <EnvVarContainer::loadFrom(char const*, char const*)>:
c001a422:	55                   	push   ebp
c001a423:	57                   	push   edi
c001a424:	56                   	push   esi
c001a425:	53                   	push   ebx
c001a426:	81 ec 38 01 00 00    	sub    esp,0x138
c001a42c:	8b 9c 24 4c 01 00 00 	mov    ebx,DWORD PTR [esp+0x14c]
c001a433:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c001a43a:	68 14 01 00 00       	push   0x114
c001a43f:	e8 64 54 ff ff       	call   c000f8a8 <malloc>
c001a444:	83 c4 0c             	add    esp,0xc
c001a447:	89 c5                	mov    ebp,eax
c001a449:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c001a44c:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a453:	50                   	push   eax
c001a454:	e8 59 8f ff ff       	call   c00133b2 <File::File(char const*, Process*)>
c001a459:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a45c:	e8 23 92 ff ff       	call   c0013684 <File::exists()>
c001a461:	83 c4 10             	add    esp,0x10
c001a464:	84 c0                	test   al,al
c001a466:	75 32                	jne    c001a49a <EnvVarContainer::loadFrom(char const*, char const*)+0x78>
c001a468:	51                   	push   ecx
c001a469:	51                   	push   ecx
c001a46a:	6a 12                	push   0x12
c001a46c:	55                   	push   ebp
c001a46d:	e8 a4 8f ff ff       	call   c0013416 <File::open(FileOpenMode)>
c001a472:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a475:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001a478:	89 34 24             	mov    DWORD PTR [esp],esi
c001a47b:	e8 08 63 fe ff       	call   c0000788 <strlen>
c001a480:	5a                   	pop    edx
c001a481:	31 d2                	xor    edx,edx
c001a483:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a487:	51                   	push   ecx
c001a488:	56                   	push   esi
c001a489:	52                   	push   edx
c001a48a:	50                   	push   eax
c001a48b:	55                   	push   ebp
c001a48c:	ff d7                	call   edi
c001a48e:	83 c4 14             	add    esp,0x14
c001a491:	55                   	push   ebp
c001a492:	e8 dd 8f ff ff       	call   c0013474 <File::close()>
c001a497:	83 c4 10             	add    esp,0x10
c001a49a:	31 f6                	xor    esi,esi
c001a49c:	50                   	push   eax
c001a49d:	68 00 01 00 00       	push   0x100
c001a4a2:	6a 00                	push   0x0
c001a4a4:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a4a8:	50                   	push   eax
c001a4a9:	e8 be 62 fe ff       	call   c000076c <memset>
c001a4ae:	58                   	pop    eax
c001a4af:	5a                   	pop    edx
c001a4b0:	6a 01                	push   0x1
c001a4b2:	55                   	push   ebp
c001a4b3:	e8 5e 8f ff ff       	call   c0013416 <File::open(FileOpenMode)>
c001a4b8:	83 c4 10             	add    esp,0x10
c001a4bb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a4c3:	83 ec 0c             	sub    esp,0xc
c001a4c6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a4c9:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a4cd:	51                   	push   ecx
c001a4ce:	8d 54 24 23          	lea    edx,[esp+0x23]
c001a4d2:	52                   	push   edx
c001a4d3:	6a 00                	push   0x0
c001a4d5:	6a 01                	push   0x1
c001a4d7:	55                   	push   ebp
c001a4d8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a4db:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001a4df:	83 c4 20             	add    esp,0x20
c001a4e2:	3c 0d                	cmp    al,0xd
c001a4e4:	0f 84 16 01 00 00    	je     c001a600 <EnvVarContainer::loadFrom(char const*, char const*)+0x1de>
c001a4ea:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001a4ef:	0f 84 fc 00 00 00    	je     c001a5f1 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c001a4f5:	3c 0a                	cmp    al,0xa
c001a4f7:	74 13                	je     c001a50c <EnvVarContainer::loadFrom(char const*, char const*)+0xea>
c001a4f9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a4fe:	74 0c                	je     c001a50c <EnvVarContainer::loadFrom(char const*, char const*)+0xea>
c001a500:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001a506:	0f 8e e5 00 00 00    	jle    c001a5f1 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c001a50c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a510:	83 ec 0c             	sub    esp,0xc
c001a513:	8d 78 01             	lea    edi,[eax+0x1]
c001a516:	57                   	push   edi
c001a517:	e8 8c 53 ff ff       	call   c000f8a8 <malloc>
c001a51c:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c001a520:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a524:	8d 56 04             	lea    edx,[esi+0x4]
c001a527:	89 14 24             	mov    DWORD PTR [esp],edx
c001a52a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a52e:	e8 75 53 ff ff       	call   c000f8a8 <malloc>
c001a533:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a537:	83 c4 0c             	add    esp,0xc
c001a53a:	57                   	push   edi
c001a53b:	6a 00                	push   0x0
c001a53d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a541:	e8 26 62 fe ff       	call   c000076c <memset>
c001a546:	8d 74 24 30          	lea    esi,[esp+0x30]
c001a54a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001a54e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001a552:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a554:	83 c4 0c             	add    esp,0xc
c001a557:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a55b:	52                   	push   edx
c001a55c:	6a 00                	push   0x0
c001a55e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a562:	e8 05 62 fe ff       	call   c000076c <memset>
c001a567:	8d 74 24 30          	lea    esi,[esp+0x30]
c001a56b:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c001a56f:	89 34 24             	mov    DWORD PTR [esp],esi
c001a572:	e8 11 62 fe ff       	call   c0000788 <strlen>
c001a577:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001a57b:	89 c1                	mov    ecx,eax
c001a57d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a57f:	5e                   	pop    esi
c001a580:	5f                   	pop    edi
c001a581:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a585:	68 f5 c7 02 c0       	push   0xc002c7f5
c001a58a:	e8 c4 88 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001a58f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a591:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c001a594:	40                   	inc    eax
c001a595:	83 c4 10             	add    esp,0x10
c001a598:	89 03                	mov    DWORD PTR [ebx],eax
c001a59a:	85 d2                	test   edx,edx
c001a59c:	75 0c                	jne    c001a5aa <EnvVarContainer::loadFrom(char const*, char const*)+0x188>
c001a59e:	83 ec 0c             	sub    esp,0xc
c001a5a1:	6a 08                	push   0x8
c001a5a3:	e8 00 53 ff ff       	call   c000f8a8 <malloc>
c001a5a8:	eb 0c                	jmp    c001a5b6 <EnvVarContainer::loadFrom(char const*, char const*)+0x194>
c001a5aa:	c1 e0 03             	shl    eax,0x3
c001a5ad:	51                   	push   ecx
c001a5ae:	51                   	push   ecx
c001a5af:	50                   	push   eax
c001a5b0:	52                   	push   edx
c001a5b1:	e8 de 52 ff ff       	call   c000f894 <realloc>
c001a5b6:	83 c4 10             	add    esp,0x10
c001a5b9:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a5bc:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a5be:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001a5c1:	8d 74 24 18          	lea    esi,[esp+0x18]
c001a5c5:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001a5c9:	b9 08 00 00 00       	mov    ecx,0x8
c001a5ce:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a5d0:	31 f6                	xor    esi,esi
c001a5d2:	52                   	push   edx
c001a5d3:	68 00 01 00 00       	push   0x100
c001a5d8:	6a 00                	push   0x0
c001a5da:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a5de:	50                   	push   eax
c001a5df:	e8 88 61 fe ff       	call   c000076c <memset>
c001a5e4:	83 c4 10             	add    esp,0x10
c001a5e7:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a5ef:	eb 0f                	jmp    c001a600 <EnvVarContainer::loadFrom(char const*, char const*)+0x1de>
c001a5f1:	3c 3d                	cmp    al,0x3d
c001a5f3:	74 07                	je     c001a5fc <EnvVarContainer::loadFrom(char const*, char const*)+0x1da>
c001a5f5:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c001a5f9:	46                   	inc    esi
c001a5fa:	eb 04                	jmp    c001a600 <EnvVarContainer::loadFrom(char const*, char const*)+0x1de>
c001a5fc:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001a600:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a605:	0f 85 b8 fe ff ff    	jne    c001a4c3 <EnvVarContainer::loadFrom(char const*, char const*)+0xa1>
c001a60b:	50                   	push   eax
c001a60c:	50                   	push   eax
c001a60d:	ff 33                	push   DWORD PTR [ebx]
c001a60f:	68 03 c8 02 c0       	push   0xc002c803
c001a614:	e8 3a 88 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001a619:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a61f:	5b                   	pop    ebx
c001a620:	5e                   	pop    esi
c001a621:	5f                   	pop    edi
c001a622:	5d                   	pop    ebp
c001a623:	c3                   	ret    

c001a624 <EnvVarContainer::__loadSystem()>:
c001a624:	83 ec 10             	sub    esp,0x10
c001a627:	68 c0 e7 02 c0       	push   0xc002e7c0
c001a62c:	68 2e c8 02 c0       	push   0xc002c82e
c001a631:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a635:	e8 e8 fd ff ff       	call   c001a422 <EnvVarContainer::loadFrom(char const*, char const*)>
c001a63a:	83 c4 1c             	add    esp,0x1c
c001a63d:	c3                   	ret    

c001a63e <EnvVarContainer::__loadUser()>:
c001a63e:	c3                   	ret    
c001a63f:	90                   	nop

c001a640 <EnvVarContainer::EnvVarContainer(Process*)>:
c001a640:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a644:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a64a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a64e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a652:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a655:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a659:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a660:	90                   	nop
c001a661:	c3                   	ret    

c001a662 <EnvVarContainer::~EnvVarContainer()>:
c001a662:	83 ec 0c             	sub    esp,0xc
c001a665:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a669:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a66c:	85 c0                	test   eax,eax
c001a66e:	74 1d                	je     c001a68d <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a670:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a674:	8b 00                	mov    eax,DWORD PTR [eax]
c001a676:	85 c0                	test   eax,eax
c001a678:	74 13                	je     c001a68d <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a67a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a67e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a681:	83 ec 0c             	sub    esp,0xc
c001a684:	50                   	push   eax
c001a685:	e8 2e 52 ff ff       	call   c000f8b8 <free>
c001a68a:	83 c4 10             	add    esp,0x10
c001a68d:	90                   	nop
c001a68e:	83 c4 0c             	add    esp,0xc
c001a691:	c3                   	ret    

c001a692 <Krnl::getEnv(Process*, char const*)>:
c001a692:	53                   	push   ebx
c001a693:	83 ec 08             	sub    esp,0x8
c001a696:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a69a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a69e:	39 05 f0 27 03 c0    	cmp    DWORD PTR ds:0xc00327f0,eax
c001a6a4:	74 04                	je     c001a6aa <Krnl::getEnv(Process*, char const*)+0x18>
c001a6a6:	85 c0                	test   eax,eax
c001a6a8:	75 0b                	jne    c001a6b5 <Krnl::getEnv(Process*, char const*)+0x23>
c001a6aa:	a1 d4 1d 03 c0       	mov    eax,ds:0xc0031dd4
c001a6af:	85 c0                	test   eax,eax
c001a6b1:	75 19                	jne    c001a6cc <Krnl::getEnv(Process*, char const*)+0x3a>
c001a6b3:	eb 27                	jmp    c001a6dc <Krnl::getEnv(Process*, char const*)+0x4a>
c001a6b5:	52                   	push   edx
c001a6b6:	52                   	push   edx
c001a6b7:	53                   	push   ebx
c001a6b8:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001a6be:	e8 5d fc ff ff       	call   c001a320 <EnvVarContainer::getEnv(char const*)>
c001a6c3:	83 c4 10             	add    esp,0x10
c001a6c6:	85 c0                	test   eax,eax
c001a6c8:	75 28                	jne    c001a6f2 <Krnl::getEnv(Process*, char const*)+0x60>
c001a6ca:	eb de                	jmp    c001a6aa <Krnl::getEnv(Process*, char const*)+0x18>
c001a6cc:	52                   	push   edx
c001a6cd:	52                   	push   edx
c001a6ce:	53                   	push   ebx
c001a6cf:	50                   	push   eax
c001a6d0:	e8 4b fc ff ff       	call   c001a320 <EnvVarContainer::getEnv(char const*)>
c001a6d5:	83 c4 10             	add    esp,0x10
c001a6d8:	85 c0                	test   eax,eax
c001a6da:	75 16                	jne    c001a6f2 <Krnl::getEnv(Process*, char const*)+0x60>
c001a6dc:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a6e0:	a1 d8 1d 03 c0       	mov    eax,ds:0xc0031dd8
c001a6e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a6e9:	83 c4 08             	add    esp,0x8
c001a6ec:	5b                   	pop    ebx
c001a6ed:	e9 2e fc ff ff       	jmp    c001a320 <EnvVarContainer::getEnv(char const*)>
c001a6f2:	83 c4 08             	add    esp,0x8
c001a6f5:	5b                   	pop    ebx
c001a6f6:	c3                   	ret    

c001a6f7 <Krnl::setEnvSystem(char const*, char const*)>:
c001a6f7:	83 ec 10             	sub    esp,0x10
c001a6fa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a6fe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a702:	ff 35 d8 1d 03 c0    	push   DWORD PTR ds:0xc0031dd8
c001a708:	e8 51 fc ff ff       	call   c001a35e <EnvVarContainer::setEnv(char const*, char const*)>
c001a70d:	83 c4 1c             	add    esp,0x1c
c001a710:	c3                   	ret    

c001a711 <Krnl::setEnvUser(char const*, char const*)>:
c001a711:	a1 d4 1d 03 c0       	mov    eax,ds:0xc0031dd4
c001a716:	85 c0                	test   eax,eax
c001a718:	74 15                	je     c001a72f <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a71a:	83 ec 10             	sub    esp,0x10
c001a71d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a721:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a725:	50                   	push   eax
c001a726:	e8 33 fc ff ff       	call   c001a35e <EnvVarContainer::setEnv(char const*, char const*)>
c001a72b:	83 c4 1c             	add    esp,0x1c
c001a72e:	c3                   	ret    
c001a72f:	c3                   	ret    

c001a730 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a730:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a734:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a73a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a73e:	e9 1b fc ff ff       	jmp    c001a35e <EnvVarContainer::setEnv(char const*, char const*)>

c001a743 <Krnl::deleteEnvSystem(char const*)>:
c001a743:	c3                   	ret    

c001a744 <Krnl::deleteEnvUser(char const*)>:
c001a744:	c3                   	ret    

c001a745 <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a745:	c3                   	ret    

c001a746 <Krnl::newProcessEnv(Process*)>:
c001a746:	83 ec 28             	sub    esp,0x28
c001a749:	6a 0c                	push   0xc
c001a74b:	e8 58 51 ff ff       	call   c000f8a8 <malloc>
c001a750:	5a                   	pop    edx
c001a751:	59                   	pop    ecx
c001a752:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a756:	50                   	push   eax
c001a757:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a75b:	e8 e0 fe ff ff       	call   c001a640 <EnvVarContainer::EnvVarContainer(Process*)>
c001a760:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a764:	83 c4 2c             	add    esp,0x2c
c001a767:	c3                   	ret    

c001a768 <Krnl::copyProcessEnv(Process*, Process*)>:
c001a768:	57                   	push   edi
c001a769:	56                   	push   esi
c001a76a:	53                   	push   ebx
c001a76b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a76f:	83 ec 0c             	sub    esp,0xc
c001a772:	8b b8 3a 07 00 00    	mov    edi,DWORD PTR [eax+0x73a]
c001a778:	6a 0c                	push   0xc
c001a77a:	e8 29 51 ff ff       	call   c000f8a8 <malloc>
c001a77f:	89 c3                	mov    ebx,eax
c001a781:	58                   	pop    eax
c001a782:	5a                   	pop    edx
c001a783:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a787:	53                   	push   ebx
c001a788:	e8 b3 fe ff ff       	call   c001a640 <EnvVarContainer::EnvVarContainer(Process*)>
c001a78d:	8b 07                	mov    eax,DWORD PTR [edi]
c001a78f:	89 03                	mov    DWORD PTR [ebx],eax
c001a791:	c1 e0 03             	shl    eax,0x3
c001a794:	89 04 24             	mov    DWORD PTR [esp],eax
c001a797:	e8 0c 51 ff ff       	call   c000f8a8 <malloc>
c001a79c:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a79f:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001a7a1:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001a7a4:	c1 e1 03             	shl    ecx,0x3
c001a7a7:	89 c7                	mov    edi,eax
c001a7a9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a7ab:	83 c4 10             	add    esp,0x10
c001a7ae:	89 d8                	mov    eax,ebx
c001a7b0:	5b                   	pop    ebx
c001a7b1:	5e                   	pop    esi
c001a7b2:	5f                   	pop    edi
c001a7b3:	c3                   	ret    

c001a7b4 <Krnl::loadSystemEnv()>:
c001a7b4:	53                   	push   ebx
c001a7b5:	83 ec 14             	sub    esp,0x14
c001a7b8:	6a 0c                	push   0xc
c001a7ba:	e8 e9 50 ff ff       	call   c000f8a8 <malloc>
c001a7bf:	89 c3                	mov    ebx,eax
c001a7c1:	58                   	pop    eax
c001a7c2:	5a                   	pop    edx
c001a7c3:	ff 35 f0 27 03 c0    	push   DWORD PTR ds:0xc00327f0
c001a7c9:	53                   	push   ebx
c001a7ca:	e8 71 fe ff ff       	call   c001a640 <EnvVarContainer::EnvVarContainer(Process*)>
c001a7cf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a7d2:	89 1d d8 1d 03 c0    	mov    DWORD PTR ds:0xc0031dd8,ebx
c001a7d8:	e8 47 fe ff ff       	call   c001a624 <EnvVarContainer::__loadSystem()>
c001a7dd:	83 c4 18             	add    esp,0x18
c001a7e0:	5b                   	pop    ebx
c001a7e1:	c3                   	ret    

c001a7e2 <Krnl::loadUserEnv()>:
c001a7e2:	53                   	push   ebx
c001a7e3:	83 ec 14             	sub    esp,0x14
c001a7e6:	6a 0c                	push   0xc
c001a7e8:	e8 bb 50 ff ff       	call   c000f8a8 <malloc>
c001a7ed:	89 c3                	mov    ebx,eax
c001a7ef:	58                   	pop    eax
c001a7f0:	5a                   	pop    edx
c001a7f1:	ff 35 f0 27 03 c0    	push   DWORD PTR ds:0xc00327f0
c001a7f7:	53                   	push   ebx
c001a7f8:	e8 43 fe ff ff       	call   c001a640 <EnvVarContainer::EnvVarContainer(Process*)>
c001a7fd:	89 1d d4 1d 03 c0    	mov    DWORD PTR ds:0xc0031dd4,ebx
c001a803:	83 c4 18             	add    esp,0x18
c001a806:	5b                   	pop    ebx
c001a807:	c3                   	ret    

c001a808 <Krnl::flushEnv()>:
c001a808:	c3                   	ret    

c001a809 <Krnl::getProcessTotalEnvCount(Process*)>:
c001a809:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a80d:	8b 15 d4 1d 03 c0    	mov    edx,DWORD PTR ds:0xc0031dd4
c001a813:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a819:	a1 d8 1d 03 c0       	mov    eax,ds:0xc0031dd8
c001a81e:	8b 00                	mov    eax,DWORD PTR [eax]
c001a820:	03 01                	add    eax,DWORD PTR [ecx]
c001a822:	85 d2                	test   edx,edx
c001a824:	74 02                	je     c001a828 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a826:	03 02                	add    eax,DWORD PTR [edx]
c001a828:	c3                   	ret    

c001a829 <Krnl::getProcessEnvPair(Process*, int)>:
c001a829:	57                   	push   edi
c001a82a:	8b 0d d4 1d 03 c0    	mov    ecx,DWORD PTR ds:0xc0031dd4
c001a830:	56                   	push   esi
c001a831:	85 c9                	test   ecx,ecx
c001a833:	53                   	push   ebx
c001a834:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a838:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a83c:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c001a842:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a846:	8b 02                	mov    eax,DWORD PTR [edx]
c001a848:	75 47                	jne    c001a891 <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a84a:	39 c3                	cmp    ebx,eax
c001a84c:	7c 47                	jl     c001a895 <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a84e:	8b 15 d8 1d 03 c0    	mov    edx,DWORD PTR ds:0xc0031dd8
c001a854:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a856:	01 c1                	add    ecx,eax
c001a858:	39 d9                	cmp    ecx,ebx
c001a85a:	7e 6c                	jle    c001a8c8 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a85c:	51                   	push   ecx
c001a85d:	89 d9                	mov    ecx,ebx
c001a85f:	29 c1                	sub    ecx,eax
c001a861:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a864:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a868:	53                   	push   ebx
c001a869:	68 50 c8 02 c0       	push   0xc002c850
c001a86e:	e8 e0 85 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001a873:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001a879:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a87b:	a1 d8 1d 03 c0       	mov    eax,ds:0xc0031dd8
c001a880:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a883:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a887:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a88a:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a88d:	89 06                	mov    DWORD PTR [esi],eax
c001a88f:	eb 51                	jmp    c001a8e2 <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a891:	39 c3                	cmp    ebx,eax
c001a893:	7d 05                	jge    c001a89a <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a895:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a898:	eb 20                	jmp    c001a8ba <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a89a:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a89c:	8d 14 07             	lea    edx,[edi+eax*1]
c001a89f:	39 da                	cmp    edx,ebx
c001a8a1:	7e 04                	jle    c001a8a7 <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a8a3:	29 c3                	sub    ebx,eax
c001a8a5:	eb 10                	jmp    c001a8b7 <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a8a7:	8b 0d d8 1d 03 c0    	mov    ecx,DWORD PTR ds:0xc0031dd8
c001a8ad:	03 11                	add    edx,DWORD PTR [ecx]
c001a8af:	39 da                	cmp    edx,ebx
c001a8b1:	7e 15                	jle    c001a8c8 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a8b3:	29 c3                	sub    ebx,eax
c001a8b5:	29 fb                	sub    ebx,edi
c001a8b7:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a8ba:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a8be:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a8c1:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a8c4:	89 06                	mov    DWORD PTR [esi],eax
c001a8c6:	eb 1d                	jmp    c001a8e5 <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a8c8:	83 ec 0c             	sub    esp,0xc
c001a8cb:	68 64 c8 02 c0       	push   0xc002c864
c001a8d0:	e8 18 00 00 00       	call   c001a8ed <Krnl::panic(char const*)>
c001a8d5:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a8db:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a8e2:	83 c4 10             	add    esp,0x10
c001a8e5:	89 f0                	mov    eax,esi
c001a8e7:	5b                   	pop    ebx
c001a8e8:	5e                   	pop    esi
c001a8e9:	5f                   	pop    edi
c001a8ea:	c2 04 00             	ret    0x4

c001a8ed <Krnl::panic(char const*)>:
c001a8ed:	55                   	push   ebp
c001a8ee:	89 e5                	mov    ebp,esp
c001a8f0:	53                   	push   ebx
c001a8f1:	83 ec 0c             	sub    esp,0xc
c001a8f4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a8f7:	fa                   	cli    
c001a8f8:	c6 05 e4 1d 03 c0 01 	mov    BYTE PTR ds:0xc0031de4,0x1
c001a8ff:	53                   	push   ebx
c001a900:	c6 05 c4 e1 02 c0 00 	mov    BYTE PTR ds:0xc002e1c4,0x0
c001a907:	68 7e c8 02 c0       	push   0xc002c87e
c001a90c:	e8 42 85 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001a911:	58                   	pop    eax
c001a912:	a1 f0 27 03 c0       	mov    eax,ds:0xc00327f0
c001a917:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a91d:	e8 54 63 ff ff       	call   c0010c76 <setActiveTerminal(VgaText*)>
c001a922:	83 c4 0c             	add    esp,0xc
c001a925:	a1 f0 27 03 c0       	mov    eax,ds:0xc00327f0
c001a92a:	6a 01                	push   0x1
c001a92c:	6a 0f                	push   0xf
c001a92e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a934:	e8 db 5d ff ff       	call   c0010714 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a939:	58                   	pop    eax
c001a93a:	a1 f0 27 03 c0       	mov    eax,ds:0xc00327f0
c001a93f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a945:	e8 72 65 ff ff       	call   c0010ebc <VgaText::clearScreen()>
c001a94a:	58                   	pop    eax
c001a94b:	a1 f0 27 03 c0       	mov    eax,ds:0xc00327f0
c001a950:	5a                   	pop    edx
c001a951:	68 97 c8 02 c0       	push   0xc002c897
c001a956:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a95c:	e8 a1 66 ff ff       	call   c0011002 <VgaText::puts(char const*)>
c001a961:	59                   	pop    ecx
c001a962:	58                   	pop    eax
c001a963:	a1 f0 27 03 c0       	mov    eax,ds:0xc00327f0
c001a968:	68 3c c9 02 c0       	push   0xc002c93c
c001a96d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a973:	e8 8a 66 ff ff       	call   c0011002 <VgaText::puts(char const*)>
c001a978:	58                   	pop    eax
c001a979:	a1 f0 27 03 c0       	mov    eax,ds:0xc00327f0
c001a97e:	5a                   	pop    edx
c001a97f:	68 b3 c8 02 c0       	push   0xc002c8b3
c001a984:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a98a:	e8 73 66 ff ff       	call   c0011002 <VgaText::puts(char const*)>
c001a98f:	59                   	pop    ecx
c001a990:	58                   	pop    eax
c001a991:	a1 f0 27 03 c0       	mov    eax,ds:0xc00327f0
c001a996:	53                   	push   ebx
c001a997:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a99d:	e8 60 66 ff ff       	call   c0011002 <VgaText::puts(char const*)>
c001a9a2:	58                   	pop    eax
c001a9a3:	a1 f0 27 03 c0       	mov    eax,ds:0xc00327f0
c001a9a8:	5a                   	pop    edx
c001a9a9:	68 d3 c8 02 c0       	push   0xc002c8d3
c001a9ae:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9b4:	e8 49 66 ff ff       	call   c0011002 <VgaText::puts(char const*)>
c001a9b9:	a1 e0 1d 03 c0       	mov    eax,ds:0xc0031de0
c001a9be:	83 c4 10             	add    esp,0x10
c001a9c1:	85 c0                	test   eax,eax
c001a9c3:	74 02                	je     c001a9c7 <Krnl::panic(char const*)+0xda>
c001a9c5:	ff d0                	call   eax
c001a9c7:	83 ec 0c             	sub    esp,0xc
c001a9ca:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a9cd:	e8 9e 32 00 00       	call   c001dc70 <Thr::getDriverNameFromAddress(unsigned long)>
c001a9d2:	83 c4 10             	add    esp,0x10
c001a9d5:	89 c3                	mov    ebx,eax
c001a9d7:	85 c0                	test   eax,eax
c001a9d9:	0f 84 50 02 00 00    	je     c001ac2f <Krnl::panic(char const*)+0x342>
c001a9df:	83 ec 08             	sub    esp,0x8
c001a9e2:	8b 15 f0 27 03 c0    	mov    edx,DWORD PTR ds:0xc00327f0
c001a9e8:	68 78 c9 02 c0       	push   0xc002c978
c001a9ed:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a9f3:	e8 0a 66 ff ff       	call   c0011002 <VgaText::puts(char const*)>
c001a9f8:	58                   	pop    eax
c001a9f9:	5a                   	pop    edx
c001a9fa:	8b 15 f0 27 03 c0    	mov    edx,DWORD PTR ds:0xc00327f0
c001aa00:	68 b3 c8 02 c0       	push   0xc002c8b3
c001aa05:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001aa0b:	e8 f2 65 ff ff       	call   c0011002 <VgaText::puts(char const*)>
c001aa10:	59                   	pop    ecx
c001aa11:	58                   	pop    eax
c001aa12:	a1 f0 27 03 c0       	mov    eax,ds:0xc00327f0
c001aa17:	53                   	push   ebx
c001aa18:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa1e:	e8 df 65 ff ff       	call   c0011002 <VgaText::puts(char const*)>
c001aa23:	83 c4 10             	add    esp,0x10
c001aa26:	83 ec 08             	sub    esp,0x8
c001aa29:	a1 f0 27 03 c0       	mov    eax,ds:0xc00327f0
c001aa2e:	68 d2 c8 02 c0       	push   0xc002c8d2
c001aa33:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa39:	e8 c4 65 ff ff       	call   c0011002 <VgaText::puts(char const*)>
c001aa3e:	58                   	pop    eax
c001aa3f:	a1 f0 27 03 c0       	mov    eax,ds:0xc00327f0
c001aa44:	5a                   	pop    edx
c001aa45:	68 d0 c9 02 c0       	push   0xc002c9d0
c001aa4a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa50:	e8 ad 65 ff ff       	call   c0011002 <VgaText::puts(char const*)>
c001aa55:	59                   	pop    ecx
c001aa56:	a1 f0 27 03 c0       	mov    eax,ds:0xc00327f0
c001aa5b:	5b                   	pop    ebx
c001aa5c:	68 10 ca 02 c0       	push   0xc002ca10
c001aa61:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa67:	e8 96 65 ff ff       	call   c0011002 <VgaText::puts(char const*)>
c001aa6c:	58                   	pop    eax
c001aa6d:	a1 f0 27 03 c0       	mov    eax,ds:0xc00327f0
c001aa72:	5a                   	pop    edx
c001aa73:	68 be c8 02 c0       	push   0xc002c8be
c001aa78:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa7e:	e8 7f 65 ff ff       	call   c0011002 <VgaText::puts(char const*)>
c001aa83:	59                   	pop    ecx
c001aa84:	5b                   	pop    ebx
c001aa85:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001aa88:	68 d6 c8 02 c0       	push   0xc002c8d6
c001aa8d:	e8 c1 83 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001aa92:	58                   	pop    eax
c001aa93:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001aa96:	5a                   	pop    edx
c001aa97:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001aa9a:	68 df c8 02 c0       	push   0xc002c8df
c001aa9f:	e8 af 83 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001aaa4:	59                   	pop    ecx
c001aaa5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001aaa8:	5b                   	pop    ebx
c001aaa9:	8b 00                	mov    eax,DWORD PTR [eax]
c001aaab:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001aaae:	68 e8 c8 02 c0       	push   0xc002c8e8
c001aab3:	e8 9b 83 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001aab8:	58                   	pop    eax
c001aab9:	a1 f0 27 03 c0       	mov    eax,ds:0xc00327f0
c001aabe:	5a                   	pop    edx
c001aabf:	68 54 ca 02 c0       	push   0xc002ca54
c001aac4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aaca:	e8 33 65 ff ff       	call   c0011002 <VgaText::puts(char const*)>
c001aacf:	59                   	pop    ecx
c001aad0:	a1 f0 27 03 c0       	mov    eax,ds:0xc00327f0
c001aad5:	5b                   	pop    ebx
c001aad6:	68 f1 c8 02 c0       	push   0xc002c8f1
c001aadb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aae1:	e8 1c 65 ff ff       	call   c0011002 <VgaText::puts(char const*)>
c001aae6:	0f 20 c0             	mov    eax,cr0
c001aae9:	5a                   	pop    edx
c001aaea:	59                   	pop    ecx
c001aaeb:	50                   	push   eax
c001aaec:	a1 f0 27 03 c0       	mov    eax,ds:0xc00327f0
c001aaf1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aaf7:	e8 2c 65 ff ff       	call   c0011028 <VgaText::putx(unsigned int)>
c001aafc:	5b                   	pop    ebx
c001aafd:	58                   	pop    eax
c001aafe:	a1 f0 27 03 c0       	mov    eax,ds:0xc00327f0
c001ab03:	68 fb c8 02 c0       	push   0xc002c8fb
c001ab08:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab0e:	e8 ef 64 ff ff       	call   c0011002 <VgaText::puts(char const*)>
c001ab13:	0f 20 d0             	mov    eax,cr2
c001ab16:	5a                   	pop    edx
c001ab17:	59                   	pop    ecx
c001ab18:	50                   	push   eax
c001ab19:	a1 f0 27 03 c0       	mov    eax,ds:0xc00327f0
c001ab1e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab24:	e8 ff 64 ff ff       	call   c0011028 <VgaText::putx(unsigned int)>
c001ab29:	5b                   	pop    ebx
c001ab2a:	58                   	pop    eax
c001ab2b:	a1 f0 27 03 c0       	mov    eax,ds:0xc00327f0
c001ab30:	68 05 c9 02 c0       	push   0xc002c905
c001ab35:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab3b:	e8 c2 64 ff ff       	call   c0011002 <VgaText::puts(char const*)>
c001ab40:	0f 20 d8             	mov    eax,cr3
c001ab43:	5a                   	pop    edx
c001ab44:	59                   	pop    ecx
c001ab45:	50                   	push   eax
c001ab46:	a1 f0 27 03 c0       	mov    eax,ds:0xc00327f0
c001ab4b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab51:	e8 d2 64 ff ff       	call   c0011028 <VgaText::putx(unsigned int)>
c001ab56:	5b                   	pop    ebx
c001ab57:	58                   	pop    eax
c001ab58:	a1 f0 27 03 c0       	mov    eax,ds:0xc00327f0
c001ab5d:	68 18 c9 02 c0       	push   0xc002c918
c001ab62:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab68:	e8 95 64 ff ff       	call   c0011002 <VgaText::puts(char const*)>
c001ab6d:	0f 20 e0             	mov    eax,cr4
c001ab70:	5a                   	pop    edx
c001ab71:	59                   	pop    ecx
c001ab72:	50                   	push   eax
c001ab73:	a1 f0 27 03 c0       	mov    eax,ds:0xc00327f0
c001ab78:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab7e:	e8 a5 64 ff ff       	call   c0011028 <VgaText::putx(unsigned int)>
c001ab83:	5b                   	pop    ebx
c001ab84:	58                   	pop    eax
c001ab85:	a1 f0 27 03 c0       	mov    eax,ds:0xc00327f0
c001ab8a:	68 22 c9 02 c0       	push   0xc002c922
c001ab8f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab95:	e8 68 64 ff ff       	call   c0011002 <VgaText::puts(char const*)>
c001ab9a:	5a                   	pop    edx
c001ab9b:	a1 f0 27 03 c0       	mov    eax,ds:0xc00327f0
c001aba0:	59                   	pop    ecx
c001aba1:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001aba7:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001abaa:	50                   	push   eax
c001abab:	e8 78 64 ff ff       	call   c0011028 <VgaText::putx(unsigned int)>
c001abb0:	5b                   	pop    ebx
c001abb1:	58                   	pop    eax
c001abb2:	a1 f0 27 03 c0       	mov    eax,ds:0xc00327f0
c001abb7:	68 39 c9 02 c0       	push   0xc002c939
c001abbc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001abc2:	e8 3b 64 ff ff       	call   c0011002 <VgaText::puts(char const*)>
c001abc7:	5a                   	pop    edx
c001abc8:	a1 f0 27 03 c0       	mov    eax,ds:0xc00327f0
c001abcd:	59                   	pop    ecx
c001abce:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001abd4:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001abd7:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001abda:	50                   	push   eax
c001abdb:	e8 48 64 ff ff       	call   c0011028 <VgaText::putx(unsigned int)>
c001abe0:	5b                   	pop    ebx
c001abe1:	58                   	pop    eax
c001abe2:	a1 f0 27 03 c0       	mov    eax,ds:0xc00327f0
c001abe7:	68 39 c9 02 c0       	push   0xc002c939
c001abec:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001abf2:	e8 0b 64 ff ff       	call   c0011002 <VgaText::puts(char const*)>
c001abf7:	a1 f0 27 03 c0       	mov    eax,ds:0xc00327f0
c001abfc:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001abff:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ac05:	8b 12                	mov    edx,DWORD PTR [edx]
c001ac07:	59                   	pop    ecx
c001ac08:	5b                   	pop    ebx
c001ac09:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001ac0c:	50                   	push   eax
c001ac0d:	e8 16 64 ff ff       	call   c0011028 <VgaText::putx(unsigned int)>
c001ac12:	83 c4 10             	add    esp,0x10
c001ac15:	b2 fe                	mov    dl,0xfe
c001ac17:	e4 60                	in     al,0x60
c001ac19:	3c 1c                	cmp    al,0x1c
c001ac1b:	74 04                	je     c001ac21 <Krnl::panic(char const*)+0x334>
c001ac1d:	3c 5a                	cmp    al,0x5a
c001ac1f:	75 f6                	jne    c001ac17 <Krnl::panic(char const*)+0x32a>
c001ac21:	e4 64                	in     al,0x64
c001ac23:	a8 02                	test   al,0x2
c001ac25:	75 fa                	jne    c001ac21 <Krnl::panic(char const*)+0x334>
c001ac27:	88 d0                	mov    al,dl
c001ac29:	e6 64                	out    0x64,al
c001ac2b:	fa                   	cli    
c001ac2c:	f4                   	hlt    
c001ac2d:	eb e8                	jmp    c001ac17 <Krnl::panic(char const*)+0x32a>
c001ac2f:	50                   	push   eax
c001ac30:	50                   	push   eax
c001ac31:	a1 f0 27 03 c0       	mov    eax,ds:0xc00327f0
c001ac36:	68 a4 c9 02 c0       	push   0xc002c9a4
c001ac3b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ac41:	e8 bc 63 ff ff       	call   c0011002 <VgaText::puts(char const*)>
c001ac46:	58                   	pop    eax
c001ac47:	a1 f0 27 03 c0       	mov    eax,ds:0xc00327f0
c001ac4c:	5a                   	pop    edx
c001ac4d:	68 b3 c8 02 c0       	push   0xc002c8b3
c001ac52:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ac58:	e8 a5 63 ff ff       	call   c0011002 <VgaText::puts(char const*)>
c001ac5d:	59                   	pop    ecx
c001ac5e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ac63:	5b                   	pop    ebx
c001ac64:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ac67:	83 c0 0c             	add    eax,0xc
c001ac6a:	50                   	push   eax
c001ac6b:	a1 f0 27 03 c0       	mov    eax,ds:0xc00327f0
c001ac70:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ac76:	e8 87 63 ff ff       	call   c0011002 <VgaText::puts(char const*)>
c001ac7b:	83 c4 10             	add    esp,0x10
c001ac7e:	e9 a3 fd ff ff       	jmp    c001aa26 <Krnl::panic(char const*)+0x139>

c001ac83 <Net::switchEndian16(unsigned short)>:
c001ac83:	83 ec 04             	sub    esp,0x4
c001ac86:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ac8a:	66 89 04 24          	mov    WORD PTR [esp],ax
c001ac8e:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001ac92:	c1 f8 08             	sar    eax,0x8
c001ac95:	89 c2                	mov    edx,eax
c001ac97:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001ac9b:	c1 e0 08             	shl    eax,0x8
c001ac9e:	09 d0                	or     eax,edx
c001aca0:	83 c4 04             	add    esp,0x4
c001aca3:	c3                   	ret    

c001aca4 <Net::switchEndian32(unsigned int)>:
c001aca4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aca8:	c1 e8 18             	shr    eax,0x18
c001acab:	89 c2                	mov    edx,eax
c001acad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001acb1:	c1 e0 08             	shl    eax,0x8
c001acb4:	25 00 00 ff 00       	and    eax,0xff0000
c001acb9:	09 c2                	or     edx,eax
c001acbb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001acbf:	c1 e8 08             	shr    eax,0x8
c001acc2:	25 00 ff 00 00       	and    eax,0xff00
c001acc7:	09 c2                	or     edx,eax
c001acc9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001accd:	c1 e0 18             	shl    eax,0x18
c001acd0:	09 d0                	or     eax,edx
c001acd2:	c3                   	ret    

c001acd3 <Net::crc32Calc(unsigned char*, int)>:
c001acd3:	83 ec 10             	sub    esp,0x10
c001acd6:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001acdb:	75 07                	jne    c001ace4 <Net::crc32Calc(unsigned char*, int)+0x11>
c001acdd:	b8 00 00 00 00       	mov    eax,0x0
c001ace2:	eb 7c                	jmp    c001ad60 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001ace4:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001ace9:	7f 07                	jg     c001acf2 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001aceb:	b8 00 00 00 00       	mov    eax,0x0
c001acf0:	eb 6e                	jmp    c001ad60 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001acf2:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001acfa:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001ad02:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ad06:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001ad0a:	7d 4e                	jge    c001ad5a <Net::crc32Calc(unsigned char*, int)+0x87>
c001ad0c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ad10:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ad14:	01 d0                	add    eax,edx
c001ad16:	8a 00                	mov    al,BYTE PTR [eax]
c001ad18:	0f b6 c0             	movzx  eax,al
c001ad1b:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001ad1f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ad27:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001ad2c:	7f 26                	jg     c001ad54 <Net::crc32Calc(unsigned char*, int)+0x81>
c001ad2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ad32:	83 e0 01             	and    eax,0x1
c001ad35:	74 0d                	je     c001ad44 <Net::crc32Calc(unsigned char*, int)+0x71>
c001ad37:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ad3b:	d1 e8                	shr    eax,1
c001ad3d:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001ad42:	eb 06                	jmp    c001ad4a <Net::crc32Calc(unsigned char*, int)+0x77>
c001ad44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ad48:	d1 e8                	shr    eax,1
c001ad4a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ad4e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001ad52:	eb d3                	jmp    c001ad27 <Net::crc32Calc(unsigned char*, int)+0x54>
c001ad54:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001ad58:	eb a8                	jmp    c001ad02 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001ad5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ad5e:	f7 d0                	not    eax
c001ad60:	83 c4 10             	add    esp,0x10
c001ad63:	c3                   	ret    

c001ad64 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001ad64:	57                   	push   edi
c001ad65:	56                   	push   esi
c001ad66:	53                   	push   ebx
c001ad67:	83 ec 60             	sub    esp,0x60
c001ad6a:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ad71:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001ad75:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001ad7d:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c001ad82:	7f 1a                	jg     c001ad9e <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x3a>
c001ad84:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ad8b:	8d 50 01             	lea    edx,[eax+0x1]
c001ad8e:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001ad95:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001ad98:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001ad9c:	eb df                	jmp    c001ad7d <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x19>
c001ad9e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ada5:	8d 50 01             	lea    edx,[eax+0x1]
c001ada8:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001adaf:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001adb2:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001adb9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001adbd:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c001adc1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001adc5:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c001adcd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001add1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001add5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001add9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001addd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ade1:	89 c6                	mov    esi,eax
c001ade3:	89 d7                	mov    edi,edx
c001ade5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ade7:	89 c8                	mov    eax,ecx
c001ade9:	89 fa                	mov    edx,edi
c001adeb:	89 f3                	mov    ebx,esi
c001aded:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001adf1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001adf5:	89 04 24             	mov    DWORD PTR [esp],eax
c001adf8:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001ae00:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ae07:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001ae0b:	8d 44 24 78          	lea    eax,[esp+0x78]
c001ae0f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001ae13:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001ae1b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ae1f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001ae23:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ae27:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ae2b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001ae2f:	89 c6                	mov    esi,eax
c001ae31:	89 d7                	mov    edi,edx
c001ae33:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ae35:	89 c8                	mov    eax,ecx
c001ae37:	89 fa                	mov    edx,edi
c001ae39:	89 f3                	mov    ebx,esi
c001ae3b:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001ae3f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001ae43:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ae47:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001ae4f:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ae56:	0f b7 c0             	movzx  eax,ax
c001ae59:	c1 f8 08             	sar    eax,0x8
c001ae5c:	89 c1                	mov    ecx,eax
c001ae5e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ae65:	8d 50 01             	lea    edx,[eax+0x1]
c001ae68:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001ae6f:	88 ca                	mov    dl,cl
c001ae71:	88 10                	mov    BYTE PTR [eax],dl
c001ae73:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001ae7a:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ae81:	8d 48 01             	lea    ecx,[eax+0x1]
c001ae84:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c001ae8b:	88 10                	mov    BYTE PTR [eax],dl
c001ae8d:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001ae91:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c001ae95:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001ae9c:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c001aea0:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c001aea4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001aea8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001aeac:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001aeb0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001aeb4:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001aeb8:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001aebc:	89 c6                	mov    esi,eax
c001aebe:	89 d7                	mov    edi,edx
c001aec0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aec2:	89 c8                	mov    eax,ecx
c001aec4:	89 fa                	mov    edx,edi
c001aec6:	89 f3                	mov    ebx,esi
c001aec8:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001aecc:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001aed0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001aed4:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001aed8:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c001aedf:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001aee6:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c001aeea:	50                   	push   eax
c001aeeb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001aeef:	e8 df fd ff ff       	call   c001acd3 <Net::crc32Calc(unsigned char*, int)>
c001aef4:	83 c4 08             	add    esp,0x8
c001aef7:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001aefb:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001aeff:	c1 e8 18             	shr    eax,0x18
c001af02:	89 c1                	mov    ecx,eax
c001af04:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001af0b:	8d 50 01             	lea    edx,[eax+0x1]
c001af0e:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001af15:	88 ca                	mov    dl,cl
c001af17:	88 10                	mov    BYTE PTR [eax],dl
c001af19:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001af1d:	c1 e8 10             	shr    eax,0x10
c001af20:	89 c1                	mov    ecx,eax
c001af22:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001af29:	8d 50 01             	lea    edx,[eax+0x1]
c001af2c:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001af33:	88 ca                	mov    dl,cl
c001af35:	88 10                	mov    BYTE PTR [eax],dl
c001af37:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001af3b:	c1 e8 08             	shr    eax,0x8
c001af3e:	89 c1                	mov    ecx,eax
c001af40:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001af47:	8d 50 01             	lea    edx,[eax+0x1]
c001af4a:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001af51:	88 ca                	mov    dl,cl
c001af53:	88 10                	mov    BYTE PTR [eax],dl
c001af55:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001af5c:	8d 50 01             	lea    edx,[eax+0x1]
c001af5f:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001af66:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001af6a:	88 10                	mov    BYTE PTR [eax],dl
c001af6c:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001af70:	83 c4 60             	add    esp,0x60
c001af73:	5b                   	pop    ebx
c001af74:	5e                   	pop    esi
c001af75:	5f                   	pop    edi
c001af76:	c3                   	ret    

c001af77 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001af77:	57                   	push   edi
c001af78:	56                   	push   esi
c001af79:	53                   	push   ebx
c001af7a:	83 ec 70             	sub    esp,0x70
c001af7d:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001af84:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c001af88:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c001af90:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001af97:	83 c0 0e             	add    eax,0xe
c001af9a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001af9e:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001afa5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001afa9:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001afb1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001afb5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001afb9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001afbd:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001afc1:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001afc5:	89 c6                	mov    esi,eax
c001afc7:	89 d7                	mov    edi,edx
c001afc9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001afcb:	89 c8                	mov    eax,ecx
c001afcd:	89 fa                	mov    edx,edi
c001afcf:	89 f3                	mov    ebx,esi
c001afd1:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001afd5:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001afd9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001afdd:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001afe5:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001afec:	83 c0 08             	add    eax,0x8
c001afef:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001aff3:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001affa:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001affe:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c001b006:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b00a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001b00e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b012:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001b016:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001b01a:	89 c6                	mov    esi,eax
c001b01c:	89 d7                	mov    edi,edx
c001b01e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b020:	89 c8                	mov    eax,ecx
c001b022:	89 fa                	mov    edx,edi
c001b024:	89 f3                	mov    ebx,esi
c001b026:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001b02a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001b02e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001b032:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001b03a:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b041:	8d 50 01             	lea    edx,[eax+0x1]
c001b044:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001b04b:	8a 00                	mov    al,BYTE PTR [eax]
c001b04d:	0f b6 c0             	movzx  eax,al
c001b050:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c001b055:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b05c:	8d 50 01             	lea    edx,[eax+0x1]
c001b05f:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001b066:	8a 00                	mov    al,BYTE PTR [eax]
c001b068:	0f b6 c0             	movzx  eax,al
c001b06b:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c001b070:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c001b075:	c1 e0 08             	shl    eax,0x8
c001b078:	89 c2                	mov    edx,eax
c001b07a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b07e:	09 d0                	or     eax,edx
c001b080:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001b087:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001b08b:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c001b093:	75 46                	jne    c001b0db <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001b095:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001b09c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001b09f:	66 3d dc 05          	cmp    ax,0x5dc
c001b0a3:	77 16                	ja     c001b0bb <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c001b0a5:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001b0ac:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001b0af:	0f b7 c0             	movzx  eax,ax
c001b0b2:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c001b0b9:	eb 20                	jmp    c001b0db <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001b0bb:	83 ec 0c             	sub    esp,0xc
c001b0be:	68 7c ca 02 c0       	push   0xc002ca7c
c001b0c3:	e8 8b 7d ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001b0c8:	83 c4 10             	add    esp,0x10
c001b0cb:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001b0d2:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001b0d6:	e9 17 01 00 00       	jmp    c001b1f2 <Net::unwrapEthernetFrame(unsigned char*, int)+0x27b>
c001b0db:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001b0e2:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001b0e9:	8b 12                	mov    edx,DWORD PTR [edx]
c001b0eb:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001b0ef:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001b0f6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001b0fa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b0fe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b102:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b106:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b10a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b10e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b112:	89 c6                	mov    esi,eax
c001b114:	89 d7                	mov    edi,edx
c001b116:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b118:	89 c8                	mov    eax,ecx
c001b11a:	89 fa                	mov    edx,edi
c001b11c:	89 f3                	mov    ebx,esi
c001b11e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001b122:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b126:	89 04 24             	mov    DWORD PTR [esp],eax
c001b129:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001b130:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c001b137:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b13e:	8d 50 01             	lea    edx,[eax+0x1]
c001b141:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001b148:	8a 00                	mov    al,BYTE PTR [eax]
c001b14a:	0f b6 c0             	movzx  eax,al
c001b14d:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c001b151:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b158:	8d 50 01             	lea    edx,[eax+0x1]
c001b15b:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001b162:	8a 00                	mov    al,BYTE PTR [eax]
c001b164:	0f b6 c0             	movzx  eax,al
c001b167:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c001b16b:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b172:	8d 50 01             	lea    edx,[eax+0x1]
c001b175:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001b17c:	8a 00                	mov    al,BYTE PTR [eax]
c001b17e:	0f b6 c0             	movzx  eax,al
c001b181:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c001b185:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b18c:	8d 50 01             	lea    edx,[eax+0x1]
c001b18f:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001b196:	8a 00                	mov    al,BYTE PTR [eax]
c001b198:	0f b6 c0             	movzx  eax,al
c001b19b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001b19f:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001b1a3:	c1 e0 18             	shl    eax,0x18
c001b1a6:	89 c2                	mov    edx,eax
c001b1a8:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001b1ac:	c1 e0 10             	shl    eax,0x10
c001b1af:	09 c2                	or     edx,eax
c001b1b1:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001b1b5:	c1 e0 08             	shl    eax,0x8
c001b1b8:	09 d0                	or     eax,edx
c001b1ba:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c001b1be:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001b1c2:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b1c9:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c001b1cd:	83 e8 04             	sub    eax,0x4
c001b1d0:	83 ec 08             	sub    esp,0x8
c001b1d3:	50                   	push   eax
c001b1d4:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001b1d8:	e8 f6 fa ff ff       	call   c001acd3 <Net::crc32Calc(unsigned char*, int)>
c001b1dd:	83 c4 10             	add    esp,0x10
c001b1e0:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001b1e4:	0f 94 c2             	sete   dl
c001b1e7:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001b1ee:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001b1f1:	90                   	nop
c001b1f2:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001b1f9:	83 c4 70             	add    esp,0x70
c001b1fc:	5b                   	pop    ebx
c001b1fd:	5e                   	pop    esi
c001b1fe:	5f                   	pop    edi
c001b1ff:	c2 04 00             	ret    0x4

c001b202 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001b202:	55                   	push   ebp
c001b203:	57                   	push   edi
c001b204:	56                   	push   esi
c001b205:	53                   	push   ebx
c001b206:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001b20c:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001b213:	8a 1e                	mov    bl,BYTE PTR [esi]
c001b215:	8d 6e 01             	lea    ebp,[esi+0x1]
c001b218:	80 fb 40             	cmp    bl,0x40
c001b21b:	75 1b                	jne    c001b238 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001b21d:	8a 16                	mov    dl,BYTE PTR [esi]
c001b21f:	84 d2                	test   dl,dl
c001b221:	0f 84 f1 00 00 00    	je     c001b318 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b227:	8d 46 01             	lea    eax,[esi+0x1]
c001b22a:	80 fa 3a             	cmp    dl,0x3a
c001b22d:	74 04                	je     c001b233 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001b22f:	89 c6                	mov    esi,eax
c001b231:	eb ea                	jmp    c001b21d <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001b233:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b236:	89 c6                	mov    esi,eax
c001b238:	50                   	push   eax
c001b239:	6a 40                	push   0x40
c001b23b:	6a 00                	push   0x0
c001b23d:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b241:	50                   	push   eax
c001b242:	e8 25 55 fe ff       	call   c000076c <memset>
c001b247:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001b24e:	31 c0                	xor    eax,eax
c001b250:	83 c4 10             	add    esp,0x10
c001b253:	8a 0f                	mov    cl,BYTE PTR [edi]
c001b255:	84 c9                	test   cl,cl
c001b257:	0f 84 bb 00 00 00    	je     c001b318 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b25d:	3d c7 00 00 00       	cmp    eax,0xc7
c001b262:	0f 8f b0 00 00 00    	jg     c001b318 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b268:	80 f9 0a             	cmp    cl,0xa
c001b26b:	0f 85 98 00 00 00    	jne    c001b309 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001b271:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001b276:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001b27a:	a8 df                	test   al,0xdf
c001b27c:	0f 94 c1             	sete   cl
c001b27f:	3c 23                	cmp    al,0x23
c001b281:	0f 94 c2             	sete   dl
c001b284:	08 d1                	or     cl,dl
c001b286:	75 4a                	jne    c001b2d2 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b288:	8d 50 f7             	lea    edx,[eax-0x9]
c001b28b:	80 fa 01             	cmp    dl,0x1
c001b28e:	76 42                	jbe    c001b2d2 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b290:	3c 5b                	cmp    al,0x5b
c001b292:	75 42                	jne    c001b2d6 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001b294:	80 fb 40             	cmp    bl,0x40
c001b297:	75 39                	jne    c001b2d2 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b299:	83 ec 0c             	sub    esp,0xc
c001b29c:	8d 54 24 65          	lea    edx,[esp+0x65]
c001b2a0:	52                   	push   edx
c001b2a1:	e8 e2 54 fe ff       	call   c0000788 <strlen>
c001b2a6:	83 c4 10             	add    esp,0x10
c001b2a9:	83 f8 3f             	cmp    eax,0x3f
c001b2ac:	77 6a                	ja     c001b318 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b2ae:	50                   	push   eax
c001b2af:	50                   	push   eax
c001b2b0:	8d 54 24 61          	lea    edx,[esp+0x61]
c001b2b4:	52                   	push   edx
c001b2b5:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b2b9:	52                   	push   edx
c001b2ba:	e8 69 55 fe ff       	call   c0000828 <strcpy>
c001b2bf:	58                   	pop    eax
c001b2c0:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b2c4:	52                   	push   edx
c001b2c5:	e8 be 54 fe ff       	call   c0000788 <strlen>
c001b2ca:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001b2cf:	83 c4 10             	add    esp,0x10
c001b2d2:	31 d2                	xor    edx,edx
c001b2d4:	eb 3a                	jmp    c001b310 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001b2d6:	80 fb 40             	cmp    bl,0x40
c001b2d9:	74 06                	je     c001b2e1 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001b2db:	8d 44 24 58          	lea    eax,[esp+0x58]
c001b2df:	eb 20                	jmp    c001b301 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001b2e1:	50                   	push   eax
c001b2e2:	50                   	push   eax
c001b2e3:	55                   	push   ebp
c001b2e4:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b2e8:	50                   	push   eax
c001b2e9:	e8 c6 55 fe ff       	call   c00008b4 <strcmp>
c001b2ee:	83 c4 10             	add    esp,0x10
c001b2f1:	85 c0                	test   eax,eax
c001b2f3:	75 dd                	jne    c001b2d2 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b2f5:	eb e4                	jmp    c001b2db <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001b2f7:	8d 50 01             	lea    edx,[eax+0x1]
c001b2fa:	80 f9 3d             	cmp    cl,0x3d
c001b2fd:	74 1d                	je     c001b31c <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001b2ff:	89 d0                	mov    eax,edx
c001b301:	8a 08                	mov    cl,BYTE PTR [eax]
c001b303:	84 c9                	test   cl,cl
c001b305:	75 f0                	jne    c001b2f7 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001b307:	eb 0f                	jmp    c001b318 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b309:	8d 50 01             	lea    edx,[eax+0x1]
c001b30c:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001b310:	47                   	inc    edi
c001b311:	89 d0                	mov    eax,edx
c001b313:	e9 3b ff ff ff       	jmp    c001b253 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001b318:	31 c0                	xor    eax,eax
c001b31a:	eb 33                	jmp    c001b34f <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001b31c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b320:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001b323:	50                   	push   eax
c001b324:	50                   	push   eax
c001b325:	8d 44 24 60          	lea    eax,[esp+0x60]
c001b329:	50                   	push   eax
c001b32a:	56                   	push   esi
c001b32b:	e8 84 55 fe ff       	call   c00008b4 <strcmp>
c001b330:	83 c4 10             	add    esp,0x10
c001b333:	85 c0                	test   eax,eax
c001b335:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b339:	75 97                	jne    c001b2d2 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b33b:	51                   	push   ecx
c001b33c:	51                   	push   ecx
c001b33d:	52                   	push   edx
c001b33e:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001b345:	e8 de 54 fe ff       	call   c0000828 <strcpy>
c001b34a:	83 c4 10             	add    esp,0x10
c001b34d:	b0 01                	mov    al,0x1
c001b34f:	81 c4 2c 01 00 00    	add    esp,0x12c
c001b355:	5b                   	pop    ebx
c001b356:	5e                   	pop    esi
c001b357:	5f                   	pop    edi
c001b358:	5d                   	pop    ebp
c001b359:	c3                   	ret    

c001b35a <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001b35a:	57                   	push   edi
c001b35b:	56                   	push   esi
c001b35c:	53                   	push   ebx
c001b35d:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001b363:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001b36a:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001b371:	53                   	push   ebx
c001b372:	e8 11 54 fe ff       	call   c0000788 <strlen>
c001b377:	89 34 24             	mov    DWORD PTR [esp],esi
c001b37a:	89 c7                	mov    edi,eax
c001b37c:	e8 07 54 fe ff       	call   c0000788 <strlen>
c001b381:	83 c4 10             	add    esp,0x10
c001b384:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001b388:	3d ff 00 00 00       	cmp    eax,0xff
c001b38d:	0f 87 d3 00 00 00    	ja     c001b466 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001b393:	57                   	push   edi
c001b394:	57                   	push   edi
c001b395:	56                   	push   esi
c001b396:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001b39a:	56                   	push   esi
c001b39b:	e8 88 54 fe ff       	call   c0000828 <strcpy>
c001b3a0:	58                   	pop    eax
c001b3a1:	5a                   	pop    edx
c001b3a2:	68 d1 cf 02 c0       	push   0xc002cfd1
c001b3a7:	56                   	push   esi
c001b3a8:	e8 bb 55 fe ff       	call   c0000968 <strcat>
c001b3ad:	59                   	pop    ecx
c001b3ae:	5f                   	pop    edi
c001b3af:	53                   	push   ebx
c001b3b0:	56                   	push   esi
c001b3b1:	e8 b2 55 fe ff       	call   c0000968 <strcat>
c001b3b6:	58                   	pop    eax
c001b3b7:	5a                   	pop    edx
c001b3b8:	68 c8 ca 02 c0       	push   0xc002cac8
c001b3bd:	56                   	push   esi
c001b3be:	e8 a5 55 fe ff       	call   c0000968 <strcat>
c001b3c3:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001b3ca:	e8 d9 44 ff ff       	call   c000f8a8 <malloc>
c001b3cf:	83 c4 0c             	add    esp,0xc
c001b3d2:	89 c3                	mov    ebx,eax
c001b3d4:	ff 35 f0 27 03 c0    	push   DWORD PTR ds:0xc00327f0
c001b3da:	56                   	push   esi
c001b3db:	50                   	push   eax
c001b3dc:	e8 d1 7f ff ff       	call   c00133b2 <File::File(char const*, Process*)>
c001b3e1:	83 c4 10             	add    esp,0x10
c001b3e4:	85 db                	test   ebx,ebx
c001b3e6:	74 7e                	je     c001b466 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001b3e8:	51                   	push   ecx
c001b3e9:	51                   	push   ecx
c001b3ea:	6a 01                	push   0x1
c001b3ec:	53                   	push   ebx
c001b3ed:	e8 24 80 ff ff       	call   c0013416 <File::open(FileOpenMode)>
c001b3f2:	83 c4 10             	add    esp,0x10
c001b3f5:	85 c0                	test   eax,eax
c001b3f7:	74 08                	je     c001b401 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001b3f9:	83 ec 0c             	sub    esp,0xc
c001b3fc:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b3fe:	53                   	push   ebx
c001b3ff:	eb 5f                	jmp    c001b460 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001b401:	52                   	push   edx
c001b402:	8d 44 24 17          	lea    eax,[esp+0x17]
c001b406:	50                   	push   eax
c001b407:	8d 44 24 20          	lea    eax,[esp+0x20]
c001b40b:	50                   	push   eax
c001b40c:	53                   	push   ebx
c001b40d:	e8 b0 82 ff ff       	call   c00136c2 <File::stat(unsigned long long*, bool*)>
c001b412:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b416:	83 c4 10             	add    esp,0x10
c001b419:	89 c1                	mov    ecx,eax
c001b41b:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001b41f:	74 31                	je     c001b452 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001b421:	83 ec 0c             	sub    esp,0xc
c001b424:	50                   	push   eax
c001b425:	e8 7e 44 ff ff       	call   c000f8a8 <malloc>
c001b42a:	89 c6                	mov    esi,eax
c001b42c:	58                   	pop    eax
c001b42d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b42f:	8d 54 24 20          	lea    edx,[esp+0x20]
c001b433:	52                   	push   edx
c001b434:	56                   	push   esi
c001b435:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b439:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b43d:	53                   	push   ebx
c001b43e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b441:	83 c4 20             	add    esp,0x20
c001b444:	85 c0                	test   eax,eax
c001b446:	75 0a                	jne    c001b452 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001b448:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b44c:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001b450:	74 18                	je     c001b46a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001b452:	83 ec 0c             	sub    esp,0xc
c001b455:	53                   	push   ebx
c001b456:	e8 19 80 ff ff       	call   c0013474 <File::close()>
c001b45b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b45d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b460:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b463:	83 c4 10             	add    esp,0x10
c001b466:	31 c0                	xor    eax,eax
c001b468:	eb 3b                	jmp    c001b4a5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001b46a:	83 ec 0c             	sub    esp,0xc
c001b46d:	53                   	push   ebx
c001b46e:	e8 01 80 ff ff       	call   c0013474 <File::close()>
c001b473:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b475:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b478:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b47b:	83 c4 0c             	add    esp,0xc
c001b47e:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b485:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b48c:	56                   	push   esi
c001b48d:	e8 70 fd ff ff       	call   c001b202 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001b492:	89 34 24             	mov    DWORD PTR [esp],esi
c001b495:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001b499:	e8 1a 44 ff ff       	call   c000f8b8 <free>
c001b49e:	83 c4 10             	add    esp,0x10
c001b4a1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b4a5:	81 c4 20 01 00 00    	add    esp,0x120
c001b4ab:	5b                   	pop    ebx
c001b4ac:	5e                   	pop    esi
c001b4ad:	5f                   	pop    edi
c001b4ae:	c3                   	ret    

c001b4af <Reg::getLine(char*, char*, char*)>:
c001b4af:	57                   	push   edi
c001b4b0:	56                   	push   esi
c001b4b1:	53                   	push   ebx
c001b4b2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b4b6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b4ba:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b4be:	57                   	push   edi
c001b4bf:	56                   	push   esi
c001b4c0:	53                   	push   ebx
c001b4c1:	68 cd ca 02 c0       	push   0xc002cacd
c001b4c6:	e8 8f fe ff ff       	call   c001b35a <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b4cb:	83 c4 10             	add    esp,0x10
c001b4ce:	84 c0                	test   al,al
c001b4d0:	75 10                	jne    c001b4e2 <Reg::getLine(char*, char*, char*)+0x33>
c001b4d2:	57                   	push   edi
c001b4d3:	56                   	push   esi
c001b4d4:	53                   	push   ebx
c001b4d5:	68 f2 ca 02 c0       	push   0xc002caf2
c001b4da:	e8 7b fe ff ff       	call   c001b35a <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b4df:	83 c4 10             	add    esp,0x10
c001b4e2:	5b                   	pop    ebx
c001b4e3:	5e                   	pop    esi
c001b4e4:	5f                   	pop    edi
c001b4e5:	c3                   	ret    

c001b4e6 <Reg::readInt(char*, char*, int*)>:
c001b4e6:	55                   	push   ebp
c001b4e7:	57                   	push   edi
c001b4e8:	56                   	push   esi
c001b4e9:	53                   	push   ebx
c001b4ea:	81 ec f0 00 00 00    	sub    esp,0xf0
c001b4f0:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001b4f4:	57                   	push   edi
c001b4f5:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b4fc:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b503:	e8 a7 ff ff ff       	call   c001b4af <Reg::getLine(char*, char*, char*)>
c001b508:	83 c4 10             	add    esp,0x10
c001b50b:	84 c0                	test   al,al
c001b50d:	0f 84 b3 00 00 00    	je     c001b5c6 <Reg::readInt(char*, char*, int*)+0xe0>
c001b513:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001b517:	80 fa 2b             	cmp    dl,0x2b
c001b51a:	74 0c                	je     c001b528 <Reg::readInt(char*, char*, int*)+0x42>
c001b51c:	80 fa 2d             	cmp    dl,0x2d
c001b51f:	75 0e                	jne    c001b52f <Reg::readInt(char*, char*, int*)+0x49>
c001b521:	ba 01 00 00 00       	mov    edx,0x1
c001b526:	eb 0b                	jmp    c001b533 <Reg::readInt(char*, char*, int*)+0x4d>
c001b528:	ba 01 00 00 00       	mov    edx,0x1
c001b52d:	eb 02                	jmp    c001b531 <Reg::readInt(char*, char*, int*)+0x4b>
c001b52f:	31 d2                	xor    edx,edx
c001b531:	31 c0                	xor    eax,eax
c001b533:	be 0a 00 00 00       	mov    esi,0xa
c001b538:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001b53d:	75 20                	jne    c001b55f <Reg::readInt(char*, char*, int*)+0x79>
c001b53f:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001b543:	80 f9 78             	cmp    cl,0x78
c001b546:	75 0a                	jne    c001b552 <Reg::readInt(char*, char*, int*)+0x6c>
c001b548:	83 c2 02             	add    edx,0x2
c001b54b:	be 10 00 00 00       	mov    esi,0x10
c001b550:	eb 0d                	jmp    c001b55f <Reg::readInt(char*, char*, int*)+0x79>
c001b552:	80 f9 62             	cmp    cl,0x62
c001b555:	75 08                	jne    c001b55f <Reg::readInt(char*, char*, int*)+0x79>
c001b557:	83 c2 02             	add    edx,0x2
c001b55a:	be 02 00 00 00       	mov    esi,0x2
c001b55f:	01 d7                	add    edi,edx
c001b561:	31 d2                	xor    edx,edx
c001b563:	8a 1f                	mov    bl,BYTE PTR [edi]
c001b565:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001b569:	80 fb 0d             	cmp    bl,0xd
c001b56c:	0f 94 c3             	sete   bl
c001b56f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001b574:	0f 94 c1             	sete   cl
c001b577:	08 cb                	or     bl,cl
c001b579:	75 3a                	jne    c001b5b5 <Reg::readInt(char*, char*, int*)+0xcf>
c001b57b:	0f af d6             	imul   edx,esi
c001b57e:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001b583:	83 fe 10             	cmp    esi,0x10
c001b586:	75 26                	jne    c001b5ae <Reg::readInt(char*, char*, int*)+0xc8>
c001b588:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b58c:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001b58f:	89 e9                	mov    ecx,ebp
c001b591:	80 f9 05             	cmp    cl,0x5
c001b594:	77 06                	ja     c001b59c <Reg::readInt(char*, char*, int*)+0xb6>
c001b596:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001b59a:	eb 16                	jmp    c001b5b2 <Reg::readInt(char*, char*, int*)+0xcc>
c001b59c:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b5a0:	83 e9 61             	sub    ecx,0x61
c001b5a3:	80 f9 05             	cmp    cl,0x5
c001b5a6:	77 06                	ja     c001b5ae <Reg::readInt(char*, char*, int*)+0xc8>
c001b5a8:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001b5ac:	eb 04                	jmp    c001b5b2 <Reg::readInt(char*, char*, int*)+0xcc>
c001b5ae:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001b5b2:	47                   	inc    edi
c001b5b3:	eb ae                	jmp    c001b563 <Reg::readInt(char*, char*, int*)+0x7d>
c001b5b5:	84 c0                	test   al,al
c001b5b7:	74 02                	je     c001b5bb <Reg::readInt(char*, char*, int*)+0xd5>
c001b5b9:	f7 da                	neg    edx
c001b5bb:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001b5c2:	89 10                	mov    DWORD PTR [eax],edx
c001b5c4:	88 d8                	mov    al,bl
c001b5c6:	81 c4 ec 00 00 00    	add    esp,0xec
c001b5cc:	5b                   	pop    ebx
c001b5cd:	5e                   	pop    esi
c001b5ce:	5f                   	pop    edi
c001b5cf:	5d                   	pop    ebp
c001b5d0:	c3                   	ret    

c001b5d1 <Reg::readString(char*, char*, char*, int)>:
c001b5d1:	57                   	push   edi
c001b5d2:	56                   	push   esi
c001b5d3:	53                   	push   ebx
c001b5d4:	81 ec d4 00 00 00    	sub    esp,0xd4
c001b5da:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001b5e1:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001b5e5:	57                   	push   edi
c001b5e6:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b5ed:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b5f4:	e8 b6 fe ff ff       	call   c001b4af <Reg::getLine(char*, char*, char*)>
c001b5f9:	83 c4 10             	add    esp,0x10
c001b5fc:	89 c6                	mov    esi,eax
c001b5fe:	84 c0                	test   al,al
c001b600:	74 44                	je     c001b646 <Reg::readString(char*, char*, char*, int)+0x75>
c001b602:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001b609:	31 c0                	xor    eax,eax
c001b60b:	4a                   	dec    edx
c001b60c:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001b60f:	84 c9                	test   cl,cl
c001b611:	74 0f                	je     c001b622 <Reg::readString(char*, char*, char*, int)+0x51>
c001b613:	39 c2                	cmp    edx,eax
c001b615:	7e 0b                	jle    c001b622 <Reg::readString(char*, char*, char*, int)+0x51>
c001b617:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001b61a:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001b61f:	40                   	inc    eax
c001b620:	eb ea                	jmp    c001b60c <Reg::readString(char*, char*, char*, int)+0x3b>
c001b622:	83 ec 0c             	sub    esp,0xc
c001b625:	53                   	push   ebx
c001b626:	e8 5d 51 fe ff       	call   c0000788 <strlen>
c001b62b:	83 c4 10             	add    esp,0x10
c001b62e:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001b633:	75 11                	jne    c001b646 <Reg::readString(char*, char*, char*, int)+0x75>
c001b635:	83 ec 0c             	sub    esp,0xc
c001b638:	53                   	push   ebx
c001b639:	e8 4a 51 fe ff       	call   c0000788 <strlen>
c001b63e:	83 c4 10             	add    esp,0x10
c001b641:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b646:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b64c:	89 f0                	mov    eax,esi
c001b64e:	5b                   	pop    ebx
c001b64f:	5e                   	pop    esi
c001b650:	5f                   	pop    edi
c001b651:	c3                   	ret    

c001b652 <Reg::readBool(char*, char*, bool*)>:
c001b652:	83 ec 20             	sub    esp,0x20
c001b655:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b659:	50                   	push   eax
c001b65a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b65e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b662:	e8 7f fe ff ff       	call   c001b4e6 <Reg::readInt(char*, char*, int*)>
c001b667:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b66c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b670:	0f 95 02             	setne  BYTE PTR [edx]
c001b673:	83 c4 2c             	add    esp,0x2c
c001b676:	c3                   	ret    

c001b677 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b677:	53                   	push   ebx
c001b678:	83 ec 1c             	sub    esp,0x1c
c001b67b:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b67f:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b683:	50                   	push   eax
c001b684:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b688:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b68c:	e8 c1 ff ff ff       	call   c001b652 <Reg::readBool(char*, char*, bool*)>
c001b691:	83 c4 10             	add    esp,0x10
c001b694:	84 c0                	test   al,al
c001b696:	74 04                	je     c001b69c <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b698:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b69c:	88 d8                	mov    al,bl
c001b69e:	83 c4 18             	add    esp,0x18
c001b6a1:	5b                   	pop    ebx
c001b6a2:	c3                   	ret    

c001b6a3 <Reg::readIntWithDefault(char*, char*, int)>:
c001b6a3:	53                   	push   ebx
c001b6a4:	83 ec 1c             	sub    esp,0x1c
c001b6a7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b6ab:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b6af:	50                   	push   eax
c001b6b0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b6b4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b6b8:	e8 29 fe ff ff       	call   c001b4e6 <Reg::readInt(char*, char*, int*)>
c001b6bd:	83 c4 10             	add    esp,0x10
c001b6c0:	84 c0                	test   al,al
c001b6c2:	74 04                	je     c001b6c8 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b6c4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b6c8:	89 d8                	mov    eax,ebx
c001b6ca:	83 c4 18             	add    esp,0x18
c001b6cd:	5b                   	pop    ebx
c001b6ce:	c3                   	ret    

c001b6cf <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b6cf:	57                   	push   edi
c001b6d0:	56                   	push   esi
c001b6d1:	56                   	push   esi
c001b6d2:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b6d6:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b6da:	56                   	push   esi
c001b6db:	57                   	push   edi
c001b6dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b6e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b6e4:	e8 e8 fe ff ff       	call   c001b5d1 <Reg::readString(char*, char*, char*, int)>
c001b6e9:	83 c4 10             	add    esp,0x10
c001b6ec:	84 c0                	test   al,al
c001b6ee:	75 1a                	jne    c001b70a <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001b6f0:	51                   	push   ecx
c001b6f1:	56                   	push   esi
c001b6f2:	6a 00                	push   0x0
c001b6f4:	57                   	push   edi
c001b6f5:	e8 72 50 fe ff       	call   c000076c <memset>
c001b6fa:	8d 4e ff             	lea    ecx,[esi-0x1]
c001b6fd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b701:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b703:	83 c4 10             	add    esp,0x10
c001b706:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b70a:	89 f8                	mov    eax,edi
c001b70c:	5a                   	pop    edx
c001b70d:	5e                   	pop    esi
c001b70e:	5f                   	pop    edi
c001b70f:	c3                   	ret    

c001b710 <Sys::eject(regs*)>:
c001b710:	83 ec 0c             	sub    esp,0xc
c001b713:	83 ca ff             	or     edx,0xffffffff
c001b716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b71a:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b71d:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b722:	83 e9 41             	sub    ecx,0x41
c001b725:	83 f9 19             	cmp    ecx,0x19
c001b728:	77 18                	ja     c001b742 <Sys::eject(regs*)+0x32>
c001b72a:	8b 0c 8d a0 f8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0760]
c001b731:	85 c9                	test   ecx,ecx
c001b733:	74 0d                	je     c001b742 <Sys::eject(regs*)+0x32>
c001b735:	83 ec 0c             	sub    esp,0xc
c001b738:	51                   	push   ecx
c001b739:	e8 22 b0 ff ff       	call   c0016760 <LogicalDisk::eject()>
c001b73e:	83 c4 10             	add    esp,0x10
c001b741:	99                   	cdq    
c001b742:	83 c4 0c             	add    esp,0xc
c001b745:	c3                   	ret    

c001b746 <Sys::exit(regs*)>:
c001b746:	83 ec 18             	sub    esp,0x18
c001b749:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b74d:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b750:	e8 7e 38 00 00       	call   c001efd3 <terminateTask(int)>
c001b755:	83 c8 ff             	or     eax,0xffffffff
c001b758:	83 c4 1c             	add    esp,0x1c
c001b75b:	89 c2                	mov    edx,eax
c001b75d:	c3                   	ret    

c001b75e <Sys::getCwd(regs*)>:
c001b75e:	83 ec 10             	sub    esp,0x10
c001b761:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b765:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b768:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b76b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b770:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b773:	e8 3c 7a ff ff       	call   c00131b4 <Fs::getcwd(Process*, char*, int)>
c001b778:	83 c4 1c             	add    esp,0x1c
c001b77b:	99                   	cdq    
c001b77c:	c3                   	ret    

c001b77d <Sys::getPID(regs*)>:
c001b77d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b782:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b785:	8b 00                	mov    eax,DWORD PTR [eax]
c001b787:	99                   	cdq    
c001b788:	c3                   	ret    

c001b789 <Sys::getRAMData(regs*)>:
c001b789:	8b 0d d4 f2 02 c0    	mov    ecx,DWORD PTR ds:0xc002f2d4
c001b78f:	6b 05 d0 f2 02 c0 64 	imul   eax,DWORD PTR ds:0xc002f2d0,0x64
c001b796:	99                   	cdq    
c001b797:	f7 f9                	idiv   ecx
c001b799:	c1 e0 18             	shl    eax,0x18
c001b79c:	09 c8                	or     eax,ecx
c001b79e:	99                   	cdq    
c001b79f:	c3                   	ret    

c001b7a0 <Sys::getVGAPtr(regs*)>:
c001b7a0:	55                   	push   ebp
c001b7a1:	57                   	push   edi
c001b7a2:	56                   	push   esi
c001b7a3:	53                   	push   ebx
c001b7a4:	83 ec 18             	sub    esp,0x18
c001b7a7:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b7ab:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001b7ae:	e8 02 33 00 00       	call   c001eab5 <Thr::processFromPID(int)>
c001b7b3:	83 c4 10             	add    esp,0x10
c001b7b6:	89 c1                	mov    ecx,eax
c001b7b8:	b8 01 00 00 00       	mov    eax,0x1
c001b7bd:	85 c9                	test   ecx,ecx
c001b7bf:	74 59                	je     c001b81a <Sys::getVGAPtr(regs*)+0x7a>
c001b7c1:	8b 99 26 05 00 00    	mov    ebx,DWORD PTR [ecx+0x526]
c001b7c7:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c001b7cb:	74 0c                	je     c001b7d9 <Sys::getVGAPtr(regs*)+0x39>
c001b7cd:	83 ec 0c             	sub    esp,0xc
c001b7d0:	53                   	push   ebx
c001b7d1:	e8 a0 54 ff ff       	call   c0010c76 <setActiveTerminal(VgaText*)>
c001b7d6:	83 c4 10             	add    esp,0x10
c001b7d9:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001b7dc:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001b7df:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001b7e4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b7e6:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001b7e9:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b7ec:	81 c3 82 00 00 00    	add    ebx,0x82
c001b7f2:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001b7f8:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b7fb:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c001b7fe:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001b804:	50                   	push   eax
c001b805:	50                   	push   eax
c001b806:	53                   	push   ebx
c001b807:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b80a:	05 a8 0f 00 00       	add    eax,0xfa8
c001b80f:	50                   	push   eax
c001b810:	e8 13 50 fe ff       	call   c0000828 <strcpy>
c001b815:	83 c4 10             	add    esp,0x10
c001b818:	31 c0                	xor    eax,eax
c001b81a:	83 c4 0c             	add    esp,0xc
c001b81d:	31 d2                	xor    edx,edx
c001b81f:	5b                   	pop    ebx
c001b820:	5e                   	pop    esi
c001b821:	5f                   	pop    edi
c001b822:	5d                   	pop    ebp
c001b823:	c3                   	ret    

c001b824 <Sys::loadDLL(regs*)>:
c001b824:	56                   	push   esi
c001b825:	53                   	push   ebx
c001b826:	31 d2                	xor    edx,edx
c001b828:	51                   	push   ecx
c001b829:	b8 01 00 00 00       	mov    eax,0x1
c001b82e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b832:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b836:	0f 84 8c 00 00 00    	je     c001b8c8 <Sys::loadDLL(regs*)+0xa4>
c001b83c:	83 ec 0c             	sub    esp,0xc
c001b83f:	68 14 01 00 00       	push   0x114
c001b844:	e8 5f 40 ff ff       	call   c000f8a8 <malloc>
c001b849:	83 c4 0c             	add    esp,0xc
c001b84c:	89 c3                	mov    ebx,eax
c001b84e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b853:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b856:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b859:	53                   	push   ebx
c001b85a:	e8 53 7b ff ff       	call   c00133b2 <File::File(char const*, Process*)>
c001b85f:	83 c4 10             	add    esp,0x10
c001b862:	31 d2                	xor    edx,edx
c001b864:	b8 02 00 00 00       	mov    eax,0x2
c001b869:	85 db                	test   ebx,ebx
c001b86b:	74 5b                	je     c001b8c8 <Sys::loadDLL(regs*)+0xa4>
c001b86d:	83 ec 0c             	sub    esp,0xc
c001b870:	53                   	push   ebx
c001b871:	e8 0e 7e ff ff       	call   c0013684 <File::exists()>
c001b876:	83 c4 10             	add    esp,0x10
c001b879:	84 c0                	test   al,al
c001b87b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b87d:	75 11                	jne    c001b890 <Sys::loadDLL(regs*)+0x6c>
c001b87f:	83 ec 0c             	sub    esp,0xc
c001b882:	53                   	push   ebx
c001b883:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b886:	83 c4 10             	add    esp,0x10
c001b889:	b8 03 00 00 00       	mov    eax,0x3
c001b88e:	eb 36                	jmp    c001b8c6 <Sys::loadDLL(regs*)+0xa2>
c001b890:	83 ec 0c             	sub    esp,0xc
c001b893:	53                   	push   ebx
c001b894:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b897:	58                   	pop    eax
c001b898:	5a                   	pop    edx
c001b899:	6a 00                	push   0x0
c001b89b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b89e:	e8 1e 24 00 00       	call   c001dcc1 <Thr::loadDLL(char const*, bool)>
c001b8a3:	83 c4 10             	add    esp,0x10
c001b8a6:	89 c1                	mov    ecx,eax
c001b8a8:	31 d2                	xor    edx,edx
c001b8aa:	b8 04 00 00 00       	mov    eax,0x4
c001b8af:	85 c9                	test   ecx,ecx
c001b8b1:	74 15                	je     c001b8c8 <Sys::loadDLL(regs*)+0xa4>
c001b8b3:	53                   	push   ebx
c001b8b4:	53                   	push   ebx
c001b8b5:	ff 35 88 f2 02 c0    	push   DWORD PTR ds:0xc002f288
c001b8bb:	51                   	push   ecx
c001b8bc:	e8 2b 26 00 00       	call   c001deec <Thr::executeDLL(unsigned long, void*)>
c001b8c1:	83 c4 10             	add    esp,0x10
c001b8c4:	31 c0                	xor    eax,eax
c001b8c6:	31 d2                	xor    edx,edx
c001b8c8:	59                   	pop    ecx
c001b8c9:	5b                   	pop    ebx
c001b8ca:	5e                   	pop    esi
c001b8cb:	c3                   	ret    

c001b8cc <Sys::read(regs*)>:
c001b8cc:	57                   	push   edi
c001b8cd:	56                   	push   esi
c001b8ce:	53                   	push   ebx
c001b8cf:	83 ec 10             	sub    esp,0x10
c001b8d2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b8d6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b8d9:	83 f8 02             	cmp    eax,0x2
c001b8dc:	77 10                	ja     c001b8ee <Sys::read(regs*)+0x22>
c001b8de:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8e3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b8e6:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b8ec:	eb 0e                	jmp    c001b8fc <Sys::read(regs*)+0x30>
c001b8ee:	83 ec 0c             	sub    esp,0xc
c001b8f1:	50                   	push   eax
c001b8f2:	e8 00 60 ff ff       	call   c00118f7 <getFromFileDescriptor(int)>
c001b8f7:	83 c4 10             	add    esp,0x10
c001b8fa:	89 c1                	mov    ecx,eax
c001b8fc:	83 c8 ff             	or     eax,0xffffffff
c001b8ff:	85 c9                	test   ecx,ecx
c001b901:	89 c2                	mov    edx,eax
c001b903:	74 28                	je     c001b92d <Sys::read(regs*)+0x61>
c001b905:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b90d:	31 ff                	xor    edi,edi
c001b90f:	83 ec 0c             	sub    esp,0xc
c001b912:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b914:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b918:	52                   	push   edx
c001b919:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b91c:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b91f:	57                   	push   edi
c001b920:	56                   	push   esi
c001b921:	51                   	push   ecx
c001b922:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b925:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b929:	83 c4 20             	add    esp,0x20
c001b92c:	99                   	cdq    
c001b92d:	83 c4 10             	add    esp,0x10
c001b930:	5b                   	pop    ebx
c001b931:	5e                   	pop    esi
c001b932:	5f                   	pop    edi
c001b933:	c3                   	ret    

c001b934 <Sys::sbrk(regs*)>:
c001b934:	56                   	push   esi
c001b935:	53                   	push   ebx
c001b936:	50                   	push   eax
c001b937:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b93c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b940:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b943:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001b946:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001b94c:	85 db                	test   ebx,ebx
c001b94e:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001b951:	74 02                	je     c001b955 <Sys::sbrk(regs*)+0x21>
c001b953:	79 06                	jns    c001b95b <Sys::sbrk(regs*)+0x27>
c001b955:	89 f0                	mov    eax,esi
c001b957:	31 d2                	xor    edx,edx
c001b959:	eb 2a                	jmp    c001b985 <Sys::sbrk(regs*)+0x51>
c001b95b:	83 c8 ff             	or     eax,0xffffffff
c001b95e:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001b964:	89 c2                	mov    edx,eax
c001b966:	77 1d                	ja     c001b985 <Sys::sbrk(regs*)+0x51>
c001b968:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001b96e:	50                   	push   eax
c001b96f:	c1 ea 0c             	shr    edx,0xc
c001b972:	68 07 0c 00 00       	push   0xc07
c001b977:	52                   	push   edx
c001b978:	51                   	push   ecx
c001b979:	e8 08 6a ff ff       	call   c0012386 <VAS::allocatePages(int, int)>
c001b97e:	89 f0                	mov    eax,esi
c001b980:	31 d2                	xor    edx,edx
c001b982:	83 c4 10             	add    esp,0x10
c001b985:	59                   	pop    ecx
c001b986:	5b                   	pop    ebx
c001b987:	5e                   	pop    esi
c001b988:	c3                   	ret    

c001b989 <Sys::setCwd(regs*)>:
c001b989:	83 ec 14             	sub    esp,0x14
c001b98c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b990:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b993:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b998:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b99b:	e8 83 7d ff ff       	call   c0013723 <Fs::setcwd(Process*, char*)>
c001b9a0:	83 c4 1c             	add    esp,0x1c
c001b9a3:	99                   	cdq    
c001b9a4:	c3                   	ret    

c001b9a5 <Sys::setTime(regs*)>:
c001b9a5:	55                   	push   ebp
c001b9a6:	31 d2                	xor    edx,edx
c001b9a8:	57                   	push   edi
c001b9a9:	bf 18 00 00 00       	mov    edi,0x18
c001b9ae:	56                   	push   esi
c001b9af:	53                   	push   ebx
c001b9b0:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b9b5:	83 ec 30             	sub    esp,0x30
c001b9b8:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b9bc:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b9bf:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b9c2:	f7 f3                	div    ebx
c001b9c4:	89 d6                	mov    esi,edx
c001b9c6:	31 d2                	xor    edx,edx
c001b9c8:	f7 f3                	div    ebx
c001b9ca:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b9cd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b9d1:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b9d6:	31 d2                	xor    edx,edx
c001b9d8:	f7 f3                	div    ebx
c001b9da:	31 d2                	xor    edx,edx
c001b9dc:	bb 0c 00 00 00       	mov    ebx,0xc
c001b9e1:	f7 f7                	div    edi
c001b9e3:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b9e6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b9ea:	0f b7 cd             	movzx  ecx,bp
c001b9ed:	56                   	push   esi
c001b9ee:	89 c7                	mov    edi,eax
c001b9f0:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b9f4:	c1 e6 10             	shl    esi,0x10
c001b9f7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b9fb:	83 e7 1f             	and    edi,0x1f
c001b9fe:	51                   	push   ecx
c001b9ff:	47                   	inc    edi
c001ba00:	c1 e8 05             	shr    eax,0x5
c001ba03:	31 d2                	xor    edx,edx
c001ba05:	f7 f3                	div    ebx
c001ba07:	31 db                	xor    ebx,ebx
c001ba09:	52                   	push   edx
c001ba0a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001ba0e:	57                   	push   edi
c001ba0f:	68 0d cb 02 c0       	push   0xc002cb0d
c001ba14:	e8 3a 74 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001ba19:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ba1d:	89 f8                	mov    eax,edi
c001ba1f:	31 c9                	xor    ecx,ecx
c001ba21:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001ba25:	88 c1                	mov    cl,al
c001ba27:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001ba2d:	88 d5                	mov    ch,dl
c001ba2f:	c1 e0 10             	shl    eax,0x10
c001ba32:	0f b7 d1             	movzx  edx,cx
c001ba35:	09 c2                	or     edx,eax
c001ba37:	89 d8                	mov    eax,ebx
c001ba39:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001ba3e:	09 f0                	or     eax,esi
c001ba40:	89 c3                	mov    ebx,eax
c001ba42:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001ba46:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001ba4a:	83 c4 18             	add    esp,0x18
c001ba4d:	53                   	push   ebx
c001ba4e:	52                   	push   edx
c001ba4f:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001ba53:	8d 74 24 28          	lea    esi,[esp+0x28]
c001ba57:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001ba5b:	e8 e5 83 ff ff       	call   c0013e45 <datetimeToSeconds(datetime_t)>
c001ba60:	83 c4 0c             	add    esp,0xc
c001ba63:	52                   	push   edx
c001ba64:	50                   	push   eax
c001ba65:	56                   	push   esi
c001ba66:	e8 61 85 ff ff       	call   c0013fcc <secondsToDatetime(unsigned long long)>
c001ba6b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ba6f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ba73:	51                   	push   ecx
c001ba74:	89 d6                	mov    esi,edx
c001ba76:	51                   	push   ecx
c001ba77:	c1 ee 10             	shr    esi,0x10
c001ba7a:	89 f3                	mov    ebx,esi
c001ba7c:	0f b6 f3             	movzx  esi,bl
c001ba7f:	56                   	push   esi
c001ba80:	0f b6 f6             	movzx  esi,dh
c001ba83:	0f b6 d2             	movzx  edx,dl
c001ba86:	56                   	push   esi
c001ba87:	52                   	push   edx
c001ba88:	89 c2                	mov    edx,eax
c001ba8a:	c1 ea 10             	shr    edx,0x10
c001ba8d:	52                   	push   edx
c001ba8e:	0f b6 d4             	movzx  edx,ah
c001ba91:	0f b6 c0             	movzx  eax,al
c001ba94:	52                   	push   edx
c001ba95:	50                   	push   eax
c001ba96:	68 29 cb 02 c0       	push   0xc002cb29
c001ba9b:	e8 b3 73 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001baa0:	83 c4 2c             	add    esp,0x2c
c001baa3:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c001baa8:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001baac:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001bab0:	53                   	push   ebx
c001bab1:	51                   	push   ecx
c001bab2:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001bab8:	e8 af 84 ff ff       	call   c0013f6c <Clock::setTimeInDatetimeLocal(datetime_t)>
c001babd:	83 f0 01             	xor    eax,0x1
c001bac0:	31 d2                	xor    edx,edx
c001bac2:	0f b6 c0             	movzx  eax,al
c001bac5:	83 c4 3c             	add    esp,0x3c
c001bac8:	5b                   	pop    ebx
c001bac9:	5e                   	pop    esi
c001baca:	5f                   	pop    edi
c001bacb:	5d                   	pop    ebp
c001bacc:	c3                   	ret    

c001bacd <Sys::timezone(regs*)>:
c001bacd:	53                   	push   ebx
c001bace:	83 ec 08             	sub    esp,0x8
c001bad1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bad5:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001bad9:	75 17                	jne    c001baf2 <Sys::timezone(regs*)+0x25>
c001badb:	83 ec 0c             	sub    esp,0xc
c001bade:	68 45 cb 02 c0       	push   0xc002cb45
c001bae3:	e8 6b 73 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001bae8:	83 c8 ff             	or     eax,0xffffffff
c001baeb:	83 c4 10             	add    esp,0x10
c001baee:	89 c2                	mov    edx,eax
c001baf0:	eb 20                	jmp    c001bb12 <Sys::timezone(regs*)+0x45>
c001baf2:	83 ec 0c             	sub    esp,0xc
c001baf5:	68 7d cb 02 c0       	push   0xc002cb7d
c001bafa:	e8 54 73 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001baff:	58                   	pop    eax
c001bb00:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001bb03:	e8 c6 81 ff ff       	call   c0013cce <User::loadClockSettings(int)>
c001bb08:	83 c4 10             	add    esp,0x10
c001bb0b:	b8 01 00 00 00       	mov    eax,0x1
c001bb10:	31 d2                	xor    edx,edx
c001bb12:	83 c4 08             	add    esp,0x8
c001bb15:	5b                   	pop    ebx
c001bb16:	c3                   	ret    

c001bb17 <Sys::write(regs*)>:
c001bb17:	57                   	push   edi
c001bb18:	56                   	push   esi
c001bb19:	53                   	push   ebx
c001bb1a:	83 ec 10             	sub    esp,0x10
c001bb1d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bb21:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bb24:	83 f8 02             	cmp    eax,0x2
c001bb27:	77 10                	ja     c001bb39 <Sys::write(regs*)+0x22>
c001bb29:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb2e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bb31:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001bb37:	eb 0e                	jmp    c001bb47 <Sys::write(regs*)+0x30>
c001bb39:	83 ec 0c             	sub    esp,0xc
c001bb3c:	50                   	push   eax
c001bb3d:	e8 b5 5d ff ff       	call   c00118f7 <getFromFileDescriptor(int)>
c001bb42:	83 c4 10             	add    esp,0x10
c001bb45:	89 c1                	mov    ecx,eax
c001bb47:	83 c8 ff             	or     eax,0xffffffff
c001bb4a:	85 c9                	test   ecx,ecx
c001bb4c:	89 c2                	mov    edx,eax
c001bb4e:	74 28                	je     c001bb78 <Sys::write(regs*)+0x61>
c001bb50:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001bb58:	31 ff                	xor    edi,edi
c001bb5a:	83 ec 0c             	sub    esp,0xc
c001bb5d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001bb5f:	8d 54 24 18          	lea    edx,[esp+0x18]
c001bb63:	52                   	push   edx
c001bb64:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bb67:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001bb6a:	57                   	push   edi
c001bb6b:	56                   	push   esi
c001bb6c:	51                   	push   ecx
c001bb6d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001bb70:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bb74:	83 c4 20             	add    esp,0x20
c001bb77:	99                   	cdq    
c001bb78:	83 c4 10             	add    esp,0x10
c001bb7b:	5b                   	pop    ebx
c001bb7c:	5e                   	pop    esi
c001bb7d:	5f                   	pop    edi
c001bb7e:	c3                   	ret    

c001bb7f <Sys::wsbe(regs*)>:
c001bb7f:	57                   	push   edi
c001bb80:	b9 0b 00 00 00       	mov    ecx,0xb
c001bb85:	56                   	push   esi
c001bb86:	be bc cb 02 c0       	mov    esi,0xc002cbbc
c001bb8b:	53                   	push   ebx
c001bb8c:	83 ec 30             	sub    esp,0x30
c001bb8f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001bb93:	fc                   	cld    
c001bb94:	83 ec 0c             	sub    esp,0xc
c001bb97:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001bb99:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001bb9d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bba2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bba5:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001bbab:	8b 06                	mov    eax,DWORD PTR [esi]
c001bbad:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001bbb0:	57                   	push   edi
c001bbb1:	e8 d2 4b fe ff       	call   c0000788 <strlen>
c001bbb6:	5a                   	pop    edx
c001bbb7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001bbbb:	52                   	push   edx
c001bbbc:	31 d2                	xor    edx,edx
c001bbbe:	57                   	push   edi
c001bbbf:	52                   	push   edx
c001bbc0:	50                   	push   eax
c001bbc1:	56                   	push   esi
c001bbc2:	ff d3                	call   ebx
c001bbc4:	83 c4 14             	add    esp,0x14
c001bbc7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001bbcb:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bbce:	e8 00 34 00 00       	call   c001efd3 <terminateTask(int)>
c001bbd3:	83 c4 40             	add    esp,0x40
c001bbd6:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001bbdb:	5b                   	pop    ebx
c001bbdc:	31 d2                	xor    edx,edx
c001bbde:	5e                   	pop    esi
c001bbdf:	5f                   	pop    edi
c001bbe0:	c3                   	ret    

c001bbe1 <Sys::yield(regs*)>:
c001bbe1:	57                   	push   edi
c001bbe2:	56                   	push   esi
c001bbe3:	53                   	push   ebx
c001bbe4:	fa                   	cli    
c001bbe5:	ff 05 c8 27 03 c0    	inc    DWORD PTR ds:0xc00327c8
c001bbeb:	e8 b0 2a 00 00       	call   c001e6a0 <schedule()>
c001bbf0:	a1 c8 27 03 c0       	mov    eax,ds:0xc00327c8
c001bbf5:	48                   	dec    eax
c001bbf6:	a3 c8 27 03 c0       	mov    ds:0xc00327c8,eax
c001bbfb:	75 01                	jne    c001bbfe <Sys::yield(regs*)+0x1d>
c001bbfd:	fb                   	sti    
c001bbfe:	8b 35 10 f9 02 c0    	mov    esi,DWORD PTR ds:0xc002f910
c001bc04:	8b 3d 14 f9 02 c0    	mov    edi,DWORD PTR ds:0xc002f914
c001bc0a:	89 f0                	mov    eax,esi
c001bc0c:	89 fb                	mov    ebx,edi
c001bc0e:	89 f1                	mov    ecx,esi
c001bc10:	c1 e0 07             	shl    eax,0x7
c001bc13:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001bc17:	25 80 30 0f 00       	and    eax,0xf3080
c001bc1c:	c1 eb 17             	shr    ebx,0x17
c001bc1f:	31 c8                	xor    eax,ecx
c001bc21:	89 da                	mov    edx,ebx
c001bc23:	5b                   	pop    ebx
c001bc24:	5e                   	pop    esi
c001bc25:	5f                   	pop    edi
c001bc26:	c3                   	ret    

c001bc27 <sysCallSeekDir(regs*)>:
c001bc27:	31 c0                	xor    eax,eax
c001bc29:	31 d2                	xor    edx,edx
c001bc2b:	c3                   	ret    

c001bc2c <sysCallTellDir(regs*)>:
c001bc2c:	31 c0                	xor    eax,eax
c001bc2e:	31 d2                	xor    edx,edx
c001bc30:	c3                   	ret    

c001bc31 <sysCallVerify(regs*)>:
c001bc31:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc35:	31 d2                	xor    edx,edx
c001bc37:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bc3a:	c3                   	ret    

c001bc3b <sysFormatDisk(regs*)>:
c001bc3b:	56                   	push   esi
c001bc3c:	53                   	push   ebx
c001bc3d:	53                   	push   ebx
c001bc3e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bc42:	8b 1d 14 f4 02 c0    	mov    ebx,DWORD PTR ds:0xc002f414
c001bc48:	eb 25                	jmp    c001bc6f <sysFormatDisk(regs*)+0x34>
c001bc4a:	83 ec 0c             	sub    esp,0xc
c001bc4d:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001bc50:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bc52:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001bc55:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001bc58:	50                   	push   eax
c001bc59:	ff 34 85 a0 f8 02 c0 	push   DWORD PTR [eax*4-0x3ffd0760]
c001bc60:	53                   	push   ebx
c001bc61:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001bc64:	83 c4 20             	add    esp,0x20
c001bc67:	83 f8 08             	cmp    eax,0x8
c001bc6a:	75 12                	jne    c001bc7e <sysFormatDisk(regs*)+0x43>
c001bc6c:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001bc6f:	85 db                	test   ebx,ebx
c001bc71:	75 d7                	jne    c001bc4a <sysFormatDisk(regs*)+0xf>
c001bc73:	59                   	pop    ecx
c001bc74:	b8 03 00 00 00       	mov    eax,0x3
c001bc79:	31 d2                	xor    edx,edx
c001bc7b:	5b                   	pop    ebx
c001bc7c:	5e                   	pop    esi
c001bc7d:	c3                   	ret    
c001bc7e:	85 c0                	test   eax,eax
c001bc80:	74 1b                	je     c001bc9d <sysFormatDisk(regs*)+0x62>
c001bc82:	83 f8 09             	cmp    eax,0x9
c001bc85:	74 0b                	je     c001bc92 <sysFormatDisk(regs*)+0x57>
c001bc87:	59                   	pop    ecx
c001bc88:	b8 02 00 00 00       	mov    eax,0x2
c001bc8d:	31 d2                	xor    edx,edx
c001bc8f:	5b                   	pop    ebx
c001bc90:	5e                   	pop    esi
c001bc91:	c3                   	ret    
c001bc92:	59                   	pop    ecx
c001bc93:	b8 01 00 00 00       	mov    eax,0x1
c001bc98:	31 d2                	xor    edx,edx
c001bc9a:	5b                   	pop    ebx
c001bc9b:	5e                   	pop    esi
c001bc9c:	c3                   	ret    
c001bc9d:	59                   	pop    ecx
c001bc9e:	31 c0                	xor    eax,eax
c001bca0:	31 d2                	xor    edx,edx
c001bca2:	5b                   	pop    ebx
c001bca3:	5e                   	pop    esi
c001bca4:	c3                   	ret    

c001bca5 <sysSetDiskVolumeLabel(regs*)>:
c001bca5:	56                   	push   esi
c001bca6:	53                   	push   ebx
c001bca7:	53                   	push   ebx
c001bca8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bcac:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001bcaf:	83 f8 19             	cmp    eax,0x19
c001bcb2:	77 29                	ja     c001bcdd <sysSetDiskVolumeLabel(regs*)+0x38>
c001bcb4:	8b 0c 85 a0 f8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd0760]
c001bcbb:	85 c9                	test   ecx,ecx
c001bcbd:	74 1e                	je     c001bcdd <sysSetDiskVolumeLabel(regs*)+0x38>
c001bcbf:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001bcc2:	85 d2                	test   edx,edx
c001bcc4:	74 17                	je     c001bcdd <sysSetDiskVolumeLabel(regs*)+0x38>
c001bcc6:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001bccc:	8b 33                	mov    esi,DWORD PTR [ebx]
c001bcce:	52                   	push   edx
c001bccf:	50                   	push   eax
c001bcd0:	51                   	push   ecx
c001bcd1:	53                   	push   ebx
c001bcd2:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001bcd5:	83 c4 10             	add    esp,0x10
c001bcd8:	99                   	cdq    
c001bcd9:	59                   	pop    ecx
c001bcda:	5b                   	pop    ebx
c001bcdb:	5e                   	pop    esi
c001bcdc:	c3                   	ret    
c001bcdd:	59                   	pop    ecx
c001bcde:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001bce3:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bce8:	5b                   	pop    ebx
c001bce9:	5e                   	pop    esi
c001bcea:	c3                   	ret    

c001bceb <sysGetDiskVolumeLabel(regs*)>:
c001bceb:	57                   	push   edi
c001bcec:	56                   	push   esi
c001bced:	53                   	push   ebx
c001bcee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcf2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001bcf5:	83 fa 19             	cmp    edx,0x19
c001bcf8:	77 34                	ja     c001bd2e <sysGetDiskVolumeLabel(regs*)+0x43>
c001bcfa:	8b 0c 95 a0 f8 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd0760]
c001bd01:	85 c9                	test   ecx,ecx
c001bd03:	74 29                	je     c001bd2e <sysGetDiskVolumeLabel(regs*)+0x43>
c001bd05:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001bd08:	85 db                	test   ebx,ebx
c001bd0a:	74 22                	je     c001bd2e <sysGetDiskVolumeLabel(regs*)+0x43>
c001bd0c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001bd0f:	85 c0                	test   eax,eax
c001bd11:	74 1b                	je     c001bd2e <sysGetDiskVolumeLabel(regs*)+0x43>
c001bd13:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001bd19:	83 ec 0c             	sub    esp,0xc
c001bd1c:	8b 3e                	mov    edi,DWORD PTR [esi]
c001bd1e:	50                   	push   eax
c001bd1f:	53                   	push   ebx
c001bd20:	52                   	push   edx
c001bd21:	51                   	push   ecx
c001bd22:	56                   	push   esi
c001bd23:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001bd26:	83 c4 20             	add    esp,0x20
c001bd29:	99                   	cdq    
c001bd2a:	5b                   	pop    ebx
c001bd2b:	5e                   	pop    esi
c001bd2c:	5f                   	pop    edi
c001bd2d:	c3                   	ret    
c001bd2e:	5b                   	pop    ebx
c001bd2f:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001bd34:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd39:	5e                   	pop    esi
c001bd3a:	5f                   	pop    edi
c001bd3b:	c3                   	ret    

c001bd3c <sysShutdown(regs*)>:
c001bd3c:	83 ec 0c             	sub    esp,0xc
c001bd3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd43:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bd46:	85 c0                	test   eax,eax
c001bd48:	74 18                	je     c001bd62 <sysShutdown(regs*)+0x26>
c001bd4a:	83 f8 01             	cmp    eax,0x1
c001bd4d:	74 38                	je     c001bd87 <sysShutdown(regs*)+0x4b>
c001bd4f:	83 f8 02             	cmp    eax,0x2
c001bd52:	74 24                	je     c001bd78 <sysShutdown(regs*)+0x3c>
c001bd54:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd59:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd5e:	83 c4 0c             	add    esp,0xc
c001bd61:	c3                   	ret    
c001bd62:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c001bd67:	8b 10                	mov    edx,DWORD PTR [eax]
c001bd69:	6a 00                	push   0x0
c001bd6b:	6a 00                	push   0x0
c001bd6d:	6a 00                	push   0x0
c001bd6f:	50                   	push   eax
c001bd70:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001bd73:	83 c4 10             	add    esp,0x10
c001bd76:	eb dc                	jmp    c001bd54 <sysShutdown(regs*)+0x18>
c001bd78:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c001bd7d:	8b 10                	mov    edx,DWORD PTR [eax]
c001bd7f:	6a 00                	push   0x0
c001bd81:	6a 00                	push   0x0
c001bd83:	6a 01                	push   0x1
c001bd85:	eb e8                	jmp    c001bd6f <sysShutdown(regs*)+0x33>
c001bd87:	a1 40 19 03 c0       	mov    eax,ds:0xc0031940
c001bd8c:	85 c0                	test   eax,eax
c001bd8e:	74 02                	je     c001bd92 <sysShutdown(regs*)+0x56>
c001bd90:	ff d0                	call   eax
c001bd92:	31 c0                	xor    eax,eax
c001bd94:	31 d2                	xor    edx,edx
c001bd96:	83 c4 0c             	add    esp,0xc
c001bd99:	c3                   	ret    

c001bd9a <sysCallRealpath(regs*)>:
c001bd9a:	83 ec 0c             	sub    esp,0xc
c001bd9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bda1:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001bda4:	85 d2                	test   edx,edx
c001bda6:	74 07                	je     c001bdaf <sysCallRealpath(regs*)+0x15>
c001bda8:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001bdab:	85 c0                	test   eax,eax
c001bdad:	75 0b                	jne    c001bdba <sysCallRealpath(regs*)+0x20>
c001bdaf:	b8 01 00 00 00       	mov    eax,0x1
c001bdb4:	31 d2                	xor    edx,edx
c001bdb6:	83 c4 0c             	add    esp,0xc
c001bdb9:	c3                   	ret    
c001bdba:	51                   	push   ecx
c001bdbb:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bdc1:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001bdc4:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001bdca:	51                   	push   ecx
c001bdcb:	52                   	push   edx
c001bdcc:	50                   	push   eax
c001bdcd:	e8 36 74 ff ff       	call   c0013208 <Fs::standardiseFiles(char*, char const*, char const*)>
c001bdd2:	83 c4 10             	add    esp,0x10
c001bdd5:	31 c0                	xor    eax,eax
c001bdd7:	31 d2                	xor    edx,edx
c001bdd9:	83 c4 0c             	add    esp,0xc
c001bddc:	c3                   	ret    

c001bddd <sysCallGetArgc(regs*)>:
c001bddd:	83 ec 14             	sub    esp,0x14
c001bde0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bde5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bde8:	ff b0 36 05 00 00    	push   DWORD PTR [eax+0x536]
c001bdee:	68 e8 cb 02 c0       	push   0xc002cbe8
c001bdf3:	e8 5b 70 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001bdf8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bdfd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001be00:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001be06:	83 c4 1c             	add    esp,0x1c
c001be09:	99                   	cdq    
c001be0a:	c3                   	ret    

c001be0b <sysCallReadDir(regs*)>:
c001be0b:	53                   	push   ebx
c001be0c:	83 ec 18             	sub    esp,0x18
c001be0f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001be13:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001be16:	83 f8 02             	cmp    eax,0x2
c001be19:	76 53                	jbe    c001be6e <sysCallReadDir(regs*)+0x63>
c001be1b:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001be1e:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001be24:	77 4f                	ja     c001be75 <sysCallReadDir(regs*)+0x6a>
c001be26:	83 ec 0c             	sub    esp,0xc
c001be29:	50                   	push   eax
c001be2a:	e8 c8 5a ff ff       	call   c00118f7 <getFromFileDescriptor(int)>
c001be2f:	83 c4 10             	add    esp,0x10
c001be32:	85 c0                	test   eax,eax
c001be34:	74 50                	je     c001be86 <sysCallReadDir(regs*)+0x7b>
c001be36:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001be3e:	83 ec 0c             	sub    esp,0xc
c001be41:	8b 10                	mov    edx,DWORD PTR [eax]
c001be43:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001be47:	51                   	push   ecx
c001be48:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001be4b:	6a 00                	push   0x0
c001be4d:	68 10 01 00 00       	push   0x110
c001be52:	50                   	push   eax
c001be53:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001be56:	83 c4 20             	add    esp,0x20
c001be59:	85 c0                	test   eax,eax
c001be5b:	74 38                	je     c001be95 <sysCallReadDir(regs*)+0x8a>
c001be5d:	83 f8 07             	cmp    eax,0x7
c001be60:	74 0c                	je     c001be6e <sysCallReadDir(regs*)+0x63>
c001be62:	b8 02 00 00 00       	mov    eax,0x2
c001be67:	31 d2                	xor    edx,edx
c001be69:	83 c4 18             	add    esp,0x18
c001be6c:	5b                   	pop    ebx
c001be6d:	c3                   	ret    
c001be6e:	b8 01 00 00 00       	mov    eax,0x1
c001be73:	eb f2                	jmp    c001be67 <sysCallReadDir(regs*)+0x5c>
c001be75:	83 ec 08             	sub    esp,0x8
c001be78:	52                   	push   edx
c001be79:	68 0c cd 02 c0       	push   0xc002cd0c
c001be7e:	e8 d0 6f ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001be83:	83 c4 10             	add    esp,0x10
c001be86:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001be8b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001be90:	83 c4 18             	add    esp,0x18
c001be93:	5b                   	pop    ebx
c001be94:	c3                   	ret    
c001be95:	31 c0                	xor    eax,eax
c001be97:	eb ce                	jmp    c001be67 <sysCallReadDir(regs*)+0x5c>

c001be99 <sysCallIsATTY(regs*)>:
c001be99:	83 ec 0c             	sub    esp,0xc
c001be9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bea0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bea3:	83 f8 02             	cmp    eax,0x2
c001bea6:	76 07                	jbe    c001beaf <sysCallIsATTY(regs*)+0x16>
c001bea8:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bead:	75 26                	jne    c001bed5 <sysCallIsATTY(regs*)+0x3c>
c001beaf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001beb4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001beb7:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001bebd:	85 c0                	test   eax,eax
c001bebf:	74 24                	je     c001bee5 <sysCallIsATTY(regs*)+0x4c>
c001bec1:	83 ec 0c             	sub    esp,0xc
c001bec4:	8b 10                	mov    edx,DWORD PTR [eax]
c001bec6:	50                   	push   eax
c001bec7:	ff 12                	call   DWORD PTR [edx]
c001bec9:	31 d2                	xor    edx,edx
c001becb:	0f b6 c0             	movzx  eax,al
c001bece:	83 c4 10             	add    esp,0x10
c001bed1:	83 c4 0c             	add    esp,0xc
c001bed4:	c3                   	ret    
c001bed5:	83 ec 0c             	sub    esp,0xc
c001bed8:	50                   	push   eax
c001bed9:	e8 19 5a ff ff       	call   c00118f7 <getFromFileDescriptor(int)>
c001bede:	83 c4 10             	add    esp,0x10
c001bee1:	85 c0                	test   eax,eax
c001bee3:	75 dc                	jne    c001bec1 <sysCallIsATTY(regs*)+0x28>
c001bee5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001beea:	ba ff ff ff ff       	mov    edx,0xffffffff
c001beef:	83 c4 0c             	add    esp,0xc
c001bef2:	c3                   	ret    

c001bef3 <sysCallSeek(regs*)>:
c001bef3:	53                   	push   ebx
c001bef4:	83 ec 08             	sub    esp,0x8
c001bef7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001befb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001befe:	83 f8 02             	cmp    eax,0x2
c001bf01:	76 4a                	jbe    c001bf4d <sysCallSeek(regs*)+0x5a>
c001bf03:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bf08:	77 32                	ja     c001bf3c <sysCallSeek(regs*)+0x49>
c001bf0a:	83 ec 0c             	sub    esp,0xc
c001bf0d:	50                   	push   eax
c001bf0e:	e8 e4 59 ff ff       	call   c00118f7 <getFromFileDescriptor(int)>
c001bf13:	83 c4 0c             	add    esp,0xc
c001bf16:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001bf19:	31 db                	xor    ebx,ebx
c001bf1b:	53                   	push   ebx
c001bf1c:	51                   	push   ecx
c001bf1d:	50                   	push   eax
c001bf1e:	e8 b1 75 ff ff       	call   c00134d4 <File::seek(unsigned long long)>
c001bf23:	83 c4 10             	add    esp,0x10
c001bf26:	85 c0                	test   eax,eax
c001bf28:	0f 95 c0             	setne  al
c001bf2b:	31 d2                	xor    edx,edx
c001bf2d:	0f b6 c0             	movzx  eax,al
c001bf30:	f7 d8                	neg    eax
c001bf32:	83 d2 00             	adc    edx,0x0
c001bf35:	83 c4 08             	add    esp,0x8
c001bf38:	f7 da                	neg    edx
c001bf3a:	5b                   	pop    ebx
c001bf3b:	c3                   	ret    
c001bf3c:	83 ec 08             	sub    esp,0x8
c001bf3f:	50                   	push   eax
c001bf40:	68 f3 cb 02 c0       	push   0xc002cbf3
c001bf45:	e8 09 6f ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001bf4a:	83 c4 10             	add    esp,0x10
c001bf4d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bf52:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bf57:	83 c4 08             	add    esp,0x8
c001bf5a:	5b                   	pop    ebx
c001bf5b:	c3                   	ret    

c001bf5c <sysCallTell(regs*)>:
c001bf5c:	53                   	push   ebx
c001bf5d:	83 ec 08             	sub    esp,0x8
c001bf60:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bf64:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bf67:	83 f8 02             	cmp    eax,0x2
c001bf6a:	76 5e                	jbe    c001bfca <sysCallTell(regs*)+0x6e>
c001bf6c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bf71:	77 2d                	ja     c001bfa0 <sysCallTell(regs*)+0x44>
c001bf73:	83 ec 0c             	sub    esp,0xc
c001bf76:	50                   	push   eax
c001bf77:	e8 7b 59 ff ff       	call   c00118f7 <getFromFileDescriptor(int)>
c001bf7c:	5a                   	pop    edx
c001bf7d:	59                   	pop    ecx
c001bf7e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bf81:	50                   	push   eax
c001bf82:	e8 a3 75 ff ff       	call   c001352a <File::tell(unsigned long long*)>
c001bf87:	83 c4 10             	add    esp,0x10
c001bf8a:	85 c0                	test   eax,eax
c001bf8c:	0f 95 c0             	setne  al
c001bf8f:	31 d2                	xor    edx,edx
c001bf91:	0f b6 c0             	movzx  eax,al
c001bf94:	f7 d8                	neg    eax
c001bf96:	83 d2 00             	adc    edx,0x0
c001bf99:	83 c4 08             	add    esp,0x8
c001bf9c:	f7 da                	neg    edx
c001bf9e:	5b                   	pop    ebx
c001bf9f:	c3                   	ret    
c001bfa0:	83 ec 08             	sub    esp,0x8
c001bfa3:	50                   	push   eax
c001bfa4:	68 0d cc 02 c0       	push   0xc002cc0d
c001bfa9:	e8 a5 6e ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001bfae:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bfb1:	83 c4 10             	add    esp,0x10
c001bfb4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bfba:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bfc1:	31 d2                	xor    edx,edx
c001bfc3:	31 c0                	xor    eax,eax
c001bfc5:	83 c4 08             	add    esp,0x8
c001bfc8:	5b                   	pop    ebx
c001bfc9:	c3                   	ret    
c001bfca:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bfcf:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bfd4:	83 c4 08             	add    esp,0x8
c001bfd7:	5b                   	pop    ebx
c001bfd8:	c3                   	ret    

c001bfd9 <sysCallSize(regs*)>:
c001bfd9:	53                   	push   ebx
c001bfda:	83 ec 18             	sub    esp,0x18
c001bfdd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bfe1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bfe4:	83 f8 02             	cmp    eax,0x2
c001bfe7:	76 64                	jbe    c001c04d <sysCallSize(regs*)+0x74>
c001bfe9:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bfee:	77 33                	ja     c001c023 <sysCallSize(regs*)+0x4a>
c001bff0:	83 ec 0c             	sub    esp,0xc
c001bff3:	50                   	push   eax
c001bff4:	e8 fe 58 ff ff       	call   c00118f7 <getFromFileDescriptor(int)>
c001bff9:	83 c4 0c             	add    esp,0xc
c001bffc:	8d 54 24 13          	lea    edx,[esp+0x13]
c001c000:	52                   	push   edx
c001c001:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001c004:	50                   	push   eax
c001c005:	e8 b8 76 ff ff       	call   c00136c2 <File::stat(unsigned long long*, bool*)>
c001c00a:	83 c4 10             	add    esp,0x10
c001c00d:	85 c0                	test   eax,eax
c001c00f:	0f 95 c0             	setne  al
c001c012:	31 d2                	xor    edx,edx
c001c014:	0f b6 c0             	movzx  eax,al
c001c017:	f7 d8                	neg    eax
c001c019:	83 d2 00             	adc    edx,0x0
c001c01c:	83 c4 18             	add    esp,0x18
c001c01f:	f7 da                	neg    edx
c001c021:	5b                   	pop    ebx
c001c022:	c3                   	ret    
c001c023:	83 ec 08             	sub    esp,0x8
c001c026:	50                   	push   eax
c001c027:	68 27 cc 02 c0       	push   0xc002cc27
c001c02c:	e8 22 6e ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001c031:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001c034:	83 c4 10             	add    esp,0x10
c001c037:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c03d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c044:	31 d2                	xor    edx,edx
c001c046:	31 c0                	xor    eax,eax
c001c048:	83 c4 18             	add    esp,0x18
c001c04b:	5b                   	pop    ebx
c001c04c:	c3                   	ret    
c001c04d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c052:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c057:	83 c4 18             	add    esp,0x18
c001c05a:	5b                   	pop    ebx
c001c05b:	c3                   	ret    

c001c05c <sysCallSizeFromFilename(regs*)>:
c001c05c:	57                   	push   edi
c001c05d:	56                   	push   esi
c001c05e:	53                   	push   ebx
c001c05f:	83 ec 20             	sub    esp,0x20
c001c062:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c066:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001c069:	83 fb 02             	cmp    ebx,0x2
c001c06c:	0f 86 99 00 00 00    	jbe    c001c10b <sysCallSizeFromFilename(regs*)+0xaf>
c001c072:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001c078:	77 65                	ja     c001c0df <sysCallSizeFromFilename(regs*)+0x83>
c001c07a:	83 ec 0c             	sub    esp,0xc
c001c07d:	68 14 01 00 00       	push   0x114
c001c082:	e8 21 38 ff ff       	call   c000f8a8 <malloc>
c001c087:	83 c4 0c             	add    esp,0xc
c001c08a:	89 c6                	mov    esi,eax
c001c08c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c091:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c094:	53                   	push   ebx
c001c095:	56                   	push   esi
c001c096:	e8 17 73 ff ff       	call   c00133b2 <File::File(char const*, Process*)>
c001c09b:	83 c4 0c             	add    esp,0xc
c001c09e:	8d 44 24 23          	lea    eax,[esp+0x23]
c001c0a2:	50                   	push   eax
c001c0a3:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001c0a6:	56                   	push   esi
c001c0a7:	e8 16 76 ff ff       	call   c00136c2 <File::stat(unsigned long long*, bool*)>
c001c0ac:	83 c4 10             	add    esp,0x10
c001c0af:	85 f6                	test   esi,esi
c001c0b1:	74 14                	je     c001c0c7 <sysCallSizeFromFilename(regs*)+0x6b>
c001c0b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c0b7:	8b 16                	mov    edx,DWORD PTR [esi]
c001c0b9:	83 ec 0c             	sub    esp,0xc
c001c0bc:	56                   	push   esi
c001c0bd:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c0c0:	83 c4 10             	add    esp,0x10
c001c0c3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c0c7:	85 c0                	test   eax,eax
c001c0c9:	0f 95 c0             	setne  al
c001c0cc:	31 d2                	xor    edx,edx
c001c0ce:	0f b6 c0             	movzx  eax,al
c001c0d1:	f7 d8                	neg    eax
c001c0d3:	83 d2 00             	adc    edx,0x0
c001c0d6:	83 c4 20             	add    esp,0x20
c001c0d9:	f7 da                	neg    edx
c001c0db:	5b                   	pop    ebx
c001c0dc:	5e                   	pop    esi
c001c0dd:	5f                   	pop    edi
c001c0de:	c3                   	ret    
c001c0df:	83 ec 08             	sub    esp,0x8
c001c0e2:	53                   	push   ebx
c001c0e3:	68 27 cc 02 c0       	push   0xc002cc27
c001c0e8:	e8 66 6d ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001c0ed:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001c0f0:	83 c4 10             	add    esp,0x10
c001c0f3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c0f9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c100:	31 d2                	xor    edx,edx
c001c102:	83 c4 20             	add    esp,0x20
c001c105:	31 c0                	xor    eax,eax
c001c107:	5b                   	pop    ebx
c001c108:	5e                   	pop    esi
c001c109:	5f                   	pop    edi
c001c10a:	c3                   	ret    
c001c10b:	83 c4 20             	add    esp,0x20
c001c10e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c113:	5b                   	pop    ebx
c001c114:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c119:	5e                   	pop    esi
c001c11a:	5f                   	pop    edi
c001c11b:	c3                   	ret    

c001c11c <sysCallClose(regs*)>:
c001c11c:	53                   	push   ebx
c001c11d:	83 ec 08             	sub    esp,0x8
c001c120:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c124:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c127:	83 f8 02             	cmp    eax,0x2
c001c12a:	76 50                	jbe    c001c17c <sysCallClose(regs*)+0x60>
c001c12c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001c131:	74 58                	je     c001c18b <sysCallClose(regs*)+0x6f>
c001c133:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001c138:	74 60                	je     c001c19a <sysCallClose(regs*)+0x7e>
c001c13a:	77 2f                	ja     c001c16b <sysCallClose(regs*)+0x4f>
c001c13c:	83 ec 0c             	sub    esp,0xc
c001c13f:	50                   	push   eax
c001c140:	e8 b2 57 ff ff       	call   c00118f7 <getFromFileDescriptor(int)>
c001c145:	89 c3                	mov    ebx,eax
c001c147:	89 04 24             	mov    DWORD PTR [esp],eax
c001c14a:	e8 25 73 ff ff       	call   c0013474 <File::close()>
c001c14f:	83 c4 10             	add    esp,0x10
c001c152:	85 db                	test   ebx,ebx
c001c154:	74 0c                	je     c001c162 <sysCallClose(regs*)+0x46>
c001c156:	83 ec 0c             	sub    esp,0xc
c001c159:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c15b:	53                   	push   ebx
c001c15c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c15f:	83 c4 10             	add    esp,0x10
c001c162:	31 c0                	xor    eax,eax
c001c164:	31 d2                	xor    edx,edx
c001c166:	83 c4 08             	add    esp,0x8
c001c169:	5b                   	pop    ebx
c001c16a:	c3                   	ret    
c001c16b:	83 ec 08             	sub    esp,0x8
c001c16e:	50                   	push   eax
c001c16f:	68 30 cd 02 c0       	push   0xc002cd30
c001c174:	e8 da 6c ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001c179:	83 c4 10             	add    esp,0x10
c001c17c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c181:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c186:	83 c4 08             	add    esp,0x8
c001c189:	5b                   	pop    ebx
c001c18a:	c3                   	ret    
c001c18b:	83 ec 0c             	sub    esp,0xc
c001c18e:	68 42 cc 02 c0       	push   0xc002cc42
c001c193:	e8 bb 6c ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001c198:	eb c5                	jmp    c001c15f <sysCallClose(regs*)+0x43>
c001c19a:	83 ec 0c             	sub    esp,0xc
c001c19d:	68 50 cc 02 c0       	push   0xc002cc50
c001c1a2:	eb ef                	jmp    c001c193 <sysCallClose(regs*)+0x77>

c001c1a4 <sysCallOpenDir(regs*)>:
c001c1a4:	56                   	push   esi
c001c1a5:	53                   	push   ebx
c001c1a6:	53                   	push   ebx
c001c1a7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c1ab:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001c1ae:	85 f6                	test   esi,esi
c001c1b0:	74 59                	je     c001c20b <sysCallOpenDir(regs*)+0x67>
c001c1b2:	83 ec 0c             	sub    esp,0xc
c001c1b5:	68 14 01 00 00       	push   0x114
c001c1ba:	e8 e9 36 ff ff       	call   c000f8a8 <malloc>
c001c1bf:	83 c4 0c             	add    esp,0xc
c001c1c2:	89 c6                	mov    esi,eax
c001c1c4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1c9:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c1cc:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c1cf:	56                   	push   esi
c001c1d0:	e8 89 76 ff ff       	call   c001385e <Directory::Directory(char const*, Process*)>
c001c1d5:	83 c4 10             	add    esp,0x10
c001c1d8:	85 f6                	test   esi,esi
c001c1da:	74 2f                	je     c001c20b <sysCallOpenDir(regs*)+0x67>
c001c1dc:	83 ec 0c             	sub    esp,0xc
c001c1df:	56                   	push   esi
c001c1e0:	e8 dd 76 ff ff       	call   c00138c2 <Directory::open()>
c001c1e5:	83 c4 10             	add    esp,0x10
c001c1e8:	85 c0                	test   eax,eax
c001c1ea:	75 1f                	jne    c001c20b <sysCallOpenDir(regs*)+0x67>
c001c1ec:	83 ec 0c             	sub    esp,0xc
c001c1ef:	56                   	push   esi
c001c1f0:	e8 0d 54 ff ff       	call   c0011602 <UnixFile::getFileDescriptor()>
c001c1f5:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c1f8:	83 c4 10             	add    esp,0x10
c001c1fb:	89 02                	mov    DWORD PTR [edx],eax
c001c1fd:	c1 f8 1f             	sar    eax,0x1f
c001c200:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c203:	31 c0                	xor    eax,eax
c001c205:	59                   	pop    ecx
c001c206:	31 d2                	xor    edx,edx
c001c208:	5b                   	pop    ebx
c001c209:	5e                   	pop    esi
c001c20a:	c3                   	ret    
c001c20b:	59                   	pop    ecx
c001c20c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c211:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c216:	5b                   	pop    ebx
c001c217:	5e                   	pop    esi
c001c218:	c3                   	ret    

c001c219 <sysCallCloseDir(regs*)>:
c001c219:	53                   	push   ebx
c001c21a:	83 ec 08             	sub    esp,0x8
c001c21d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c221:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c224:	83 f8 02             	cmp    eax,0x2
c001c227:	76 47                	jbe    c001c270 <sysCallCloseDir(regs*)+0x57>
c001c229:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001c22e:	77 2f                	ja     c001c25f <sysCallCloseDir(regs*)+0x46>
c001c230:	83 ec 0c             	sub    esp,0xc
c001c233:	50                   	push   eax
c001c234:	e8 be 56 ff ff       	call   c00118f7 <getFromFileDescriptor(int)>
c001c239:	89 c3                	mov    ebx,eax
c001c23b:	89 04 24             	mov    DWORD PTR [esp],eax
c001c23e:	e8 db 76 ff ff       	call   c001391e <Directory::close()>
c001c243:	83 c4 10             	add    esp,0x10
c001c246:	85 db                	test   ebx,ebx
c001c248:	74 0c                	je     c001c256 <sysCallCloseDir(regs*)+0x3d>
c001c24a:	83 ec 0c             	sub    esp,0xc
c001c24d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c24f:	53                   	push   ebx
c001c250:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c253:	83 c4 10             	add    esp,0x10
c001c256:	31 c0                	xor    eax,eax
c001c258:	31 d2                	xor    edx,edx
c001c25a:	83 c4 08             	add    esp,0x8
c001c25d:	5b                   	pop    ebx
c001c25e:	c3                   	ret    
c001c25f:	83 ec 08             	sub    esp,0x8
c001c262:	50                   	push   eax
c001c263:	68 58 cd 02 c0       	push   0xc002cd58
c001c268:	e8 e6 6b ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001c26d:	83 c4 10             	add    esp,0x10
c001c270:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c275:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c27a:	83 c4 08             	add    esp,0x8
c001c27d:	5b                   	pop    ebx
c001c27e:	c3                   	ret    

c001c27f <sysCallMakeDir(regs*)>:
c001c27f:	56                   	push   esi
c001c280:	53                   	push   ebx
c001c281:	83 ec 10             	sub    esp,0x10
c001c284:	68 14 01 00 00       	push   0x114
c001c289:	e8 1a 36 ff ff       	call   c000f8a8 <malloc>
c001c28e:	83 c4 0c             	add    esp,0xc
c001c291:	89 c3                	mov    ebx,eax
c001c293:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c298:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c29b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c29f:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001c2a2:	53                   	push   ebx
c001c2a3:	e8 b6 75 ff ff       	call   c001385e <Directory::Directory(char const*, Process*)>
c001c2a8:	83 c4 10             	add    esp,0x10
c001c2ab:	85 db                	test   ebx,ebx
c001c2ad:	74 32                	je     c001c2e1 <sysCallMakeDir(regs*)+0x62>
c001c2af:	83 ec 0c             	sub    esp,0xc
c001c2b2:	53                   	push   ebx
c001c2b3:	e8 ea 77 ff ff       	call   c0013aa2 <Directory::create()>
c001c2b8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c2bb:	89 c6                	mov    esi,eax
c001c2bd:	e8 5c 76 ff ff       	call   c001391e <Directory::close()>
c001c2c2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c2c4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c2c7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c2ca:	83 c4 10             	add    esp,0x10
c001c2cd:	31 c0                	xor    eax,eax
c001c2cf:	59                   	pop    ecx
c001c2d0:	85 f6                	test   esi,esi
c001c2d2:	5b                   	pop    ebx
c001c2d3:	0f 95 c0             	setne  al
c001c2d6:	5e                   	pop    esi
c001c2d7:	31 d2                	xor    edx,edx
c001c2d9:	f7 d8                	neg    eax
c001c2db:	83 d2 00             	adc    edx,0x0
c001c2de:	f7 da                	neg    edx
c001c2e0:	c3                   	ret    
c001c2e1:	59                   	pop    ecx
c001c2e2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c2e7:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c2ec:	5b                   	pop    ebx
c001c2ed:	5e                   	pop    esi
c001c2ee:	c3                   	ret    

c001c2ef <sysCallWait(regs*)>:
c001c2ef:	83 ec 10             	sub    esp,0x10
c001c2f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c2f6:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001c2f9:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001c2fc:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001c2ff:	e8 c8 25 00 00       	call   c001e8cc <waitTask(int, int*, int)>
c001c304:	83 c4 1c             	add    esp,0x1c
c001c307:	99                   	cdq    
c001c308:	c3                   	ret    

c001c309 <sysCallNotImpl(regs*)>:
c001c309:	83 ec 18             	sub    esp,0x18
c001c30c:	68 5e cc 02 c0       	push   0xc002cc5e
c001c311:	e8 d7 e5 ff ff       	call   c001a8ed <Krnl::panic(char const*)>
c001c316:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c31b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c320:	83 c4 1c             	add    esp,0x1c
c001c323:	c3                   	ret    

c001c324 <sysPanic(regs*)>:
c001c324:	83 ec 18             	sub    esp,0x18
c001c327:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c32b:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001c32e:	e8 ba e5 ff ff       	call   c001a8ed <Krnl::panic(char const*)>
c001c333:	c7 04 24 78 cc 02 c0 	mov    DWORD PTR [esp],0xc002cc78
c001c33a:	e8 ae e5 ff ff       	call   c001a8ed <Krnl::panic(char const*)>
c001c33f:	b8 01 00 00 00       	mov    eax,0x1
c001c344:	31 d2                	xor    edx,edx
c001c346:	83 c4 1c             	add    esp,0x1c
c001c349:	c3                   	ret    

c001c34a <sysCallRmdir(regs*)>:
c001c34a:	56                   	push   esi
c001c34b:	53                   	push   ebx
c001c34c:	83 ec 20             	sub    esp,0x20
c001c34f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c353:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001c356:	68 14 01 00 00       	push   0x114
c001c35b:	e8 48 35 ff ff       	call   c000f8a8 <malloc>
c001c360:	83 c4 0c             	add    esp,0xc
c001c363:	89 c3                	mov    ebx,eax
c001c365:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c36a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c36d:	56                   	push   esi
c001c36e:	53                   	push   ebx
c001c36f:	e8 3e 70 ff ff       	call   c00133b2 <File::File(char const*, Process*)>
c001c374:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c377:	e8 12 72 ff ff       	call   c001358e <File::unlink()>
c001c37c:	83 c4 10             	add    esp,0x10
c001c37f:	85 db                	test   ebx,ebx
c001c381:	74 14                	je     c001c397 <sysCallRmdir(regs*)+0x4d>
c001c383:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c387:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c389:	83 ec 0c             	sub    esp,0xc
c001c38c:	53                   	push   ebx
c001c38d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c390:	83 c4 10             	add    esp,0x10
c001c393:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c397:	85 c0                	test   eax,eax
c001c399:	0f 95 c0             	setne  al
c001c39c:	31 d2                	xor    edx,edx
c001c39e:	0f b6 c0             	movzx  eax,al
c001c3a1:	f7 d8                	neg    eax
c001c3a3:	83 d2 00             	adc    edx,0x0
c001c3a6:	83 c4 14             	add    esp,0x14
c001c3a9:	f7 da                	neg    edx
c001c3ab:	5b                   	pop    ebx
c001c3ac:	5e                   	pop    esi
c001c3ad:	c3                   	ret    

c001c3ae <sysCallUnlink(regs*)>:
c001c3ae:	56                   	push   esi
c001c3af:	53                   	push   ebx
c001c3b0:	83 ec 20             	sub    esp,0x20
c001c3b3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c3b7:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001c3ba:	68 14 01 00 00       	push   0x114
c001c3bf:	e8 e4 34 ff ff       	call   c000f8a8 <malloc>
c001c3c4:	83 c4 0c             	add    esp,0xc
c001c3c7:	89 c3                	mov    ebx,eax
c001c3c9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c3ce:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c3d1:	56                   	push   esi
c001c3d2:	53                   	push   ebx
c001c3d3:	e8 da 6f ff ff       	call   c00133b2 <File::File(char const*, Process*)>
c001c3d8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c3db:	e8 ae 71 ff ff       	call   c001358e <File::unlink()>
c001c3e0:	83 c4 10             	add    esp,0x10
c001c3e3:	85 db                	test   ebx,ebx
c001c3e5:	74 14                	je     c001c3fb <sysCallUnlink(regs*)+0x4d>
c001c3e7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c3eb:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c3ed:	83 ec 0c             	sub    esp,0xc
c001c3f0:	53                   	push   ebx
c001c3f1:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c3f4:	83 c4 10             	add    esp,0x10
c001c3f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c3fb:	85 c0                	test   eax,eax
c001c3fd:	0f 95 c0             	setne  al
c001c400:	31 d2                	xor    edx,edx
c001c402:	0f b6 c0             	movzx  eax,al
c001c405:	f7 d8                	neg    eax
c001c407:	83 d2 00             	adc    edx,0x0
c001c40a:	83 c4 14             	add    esp,0x14
c001c40d:	f7 da                	neg    edx
c001c40f:	5b                   	pop    ebx
c001c410:	5e                   	pop    esi
c001c411:	c3                   	ret    

c001c412 <sysCallGetArgv(regs*)>:
c001c412:	83 ec 0c             	sub    esp,0xc
c001c415:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c419:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001c41c:	85 c0                	test   eax,eax
c001c41e:	78 2b                	js     c001c44b <sysCallGetArgv(regs*)+0x39>
c001c420:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001c426:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001c429:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001c42f:	7d 1a                	jge    c001c44b <sysCallGetArgv(regs*)+0x39>
c001c431:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001c438:	85 c0                	test   eax,eax
c001c43a:	74 17                	je     c001c453 <sysCallGetArgv(regs*)+0x41>
c001c43c:	83 ec 08             	sub    esp,0x8
c001c43f:	50                   	push   eax
c001c440:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001c443:	e8 e0 43 fe ff       	call   c0000828 <strcpy>
c001c448:	83 c4 10             	add    esp,0x10
c001c44b:	31 c0                	xor    eax,eax
c001c44d:	31 d2                	xor    edx,edx
c001c44f:	83 c4 0c             	add    esp,0xc
c001c452:	c3                   	ret    
c001c453:	b8 01 00 00 00       	mov    eax,0x1
c001c458:	31 d2                	xor    edx,edx
c001c45a:	83 c4 0c             	add    esp,0xc
c001c45d:	c3                   	ret    

c001c45e <sysCallTTYName(regs*)>:
c001c45e:	56                   	push   esi
c001c45f:	53                   	push   ebx
c001c460:	53                   	push   ebx
c001c461:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c465:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001c468:	85 c0                	test   eax,eax
c001c46a:	74 5f                	je     c001c4cb <sysCallTTYName(regs*)+0x6d>
c001c46c:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001c46f:	83 f8 02             	cmp    eax,0x2
c001c472:	77 3e                	ja     c001c4b2 <sysCallTTYName(regs*)+0x54>
c001c474:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c479:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c47c:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001c482:	85 db                	test   ebx,ebx
c001c484:	74 45                	je     c001c4cb <sysCallTTYName(regs*)+0x6d>
c001c486:	83 ec 0c             	sub    esp,0xc
c001c489:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c48b:	53                   	push   ebx
c001c48c:	ff 10                	call   DWORD PTR [eax]
c001c48e:	83 c4 10             	add    esp,0x10
c001c491:	84 c0                	test   al,al
c001c493:	74 41                	je     c001c4d6 <sysCallTTYName(regs*)+0x78>
c001c495:	83 ec 08             	sub    esp,0x8
c001c498:	81 c3 82 00 00 00    	add    ebx,0x82
c001c49e:	53                   	push   ebx
c001c49f:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001c4a2:	e8 81 43 fe ff       	call   c0000828 <strcpy>
c001c4a7:	83 c4 10             	add    esp,0x10
c001c4aa:	31 c0                	xor    eax,eax
c001c4ac:	59                   	pop    ecx
c001c4ad:	31 d2                	xor    edx,edx
c001c4af:	5b                   	pop    ebx
c001c4b0:	5e                   	pop    esi
c001c4b1:	c3                   	ret    
c001c4b2:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001c4b7:	74 bb                	je     c001c474 <sysCallTTYName(regs*)+0x16>
c001c4b9:	83 ec 0c             	sub    esp,0xc
c001c4bc:	50                   	push   eax
c001c4bd:	e8 35 54 ff ff       	call   c00118f7 <getFromFileDescriptor(int)>
c001c4c2:	83 c4 10             	add    esp,0x10
c001c4c5:	89 c3                	mov    ebx,eax
c001c4c7:	85 db                	test   ebx,ebx
c001c4c9:	75 bb                	jne    c001c486 <sysCallTTYName(regs*)+0x28>
c001c4cb:	59                   	pop    ecx
c001c4cc:	b8 01 00 00 00       	mov    eax,0x1
c001c4d1:	31 d2                	xor    edx,edx
c001c4d3:	5b                   	pop    ebx
c001c4d4:	5e                   	pop    esi
c001c4d5:	c3                   	ret    
c001c4d6:	59                   	pop    ecx
c001c4d7:	b8 02 00 00 00       	mov    eax,0x2
c001c4dc:	31 d2                	xor    edx,edx
c001c4de:	5b                   	pop    ebx
c001c4df:	5e                   	pop    esi
c001c4e0:	c3                   	ret    

c001c4e1 <sysCallUSleep(regs*)>:
c001c4e1:	83 ec 14             	sub    esp,0x14
c001c4e4:	b8 e8 03 00 00       	mov    eax,0x3e8
c001c4e9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c4ed:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001c4f4:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001c4f7:	01 ca                	add    edx,ecx
c001c4f9:	52                   	push   edx
c001c4fa:	50                   	push   eax
c001c4fb:	e8 a3 24 00 00       	call   c001e9a3 <nanoSleep(unsigned long long)>
c001c500:	31 c0                	xor    eax,eax
c001c502:	31 d2                	xor    edx,edx
c001c504:	83 c4 1c             	add    esp,0x1c
c001c507:	c3                   	ret    

c001c508 <sysCallSpawn(regs*)>:
c001c508:	56                   	push   esi
c001c509:	53                   	push   ebx
c001c50a:	50                   	push   eax
c001c50b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c50f:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c512:	85 c0                	test   eax,eax
c001c514:	75 08                	jne    c001c51e <sysCallSpawn(regs*)+0x16>
c001c516:	59                   	pop    ecx
c001c517:	31 c0                	xor    eax,eax
c001c519:	31 d2                	xor    edx,edx
c001c51b:	5b                   	pop    ebx
c001c51c:	5e                   	pop    esi
c001c51d:	c3                   	ret    
c001c51e:	83 ec 08             	sub    esp,0x8
c001c521:	50                   	push   eax
c001c522:	68 87 cc 02 c0       	push   0xc002cc87
c001c527:	e8 27 69 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001c52c:	c7 04 24 3f 07 00 00 	mov    DWORD PTR [esp],0x73f
c001c533:	e8 70 33 ff ff       	call   c000f8a8 <malloc>
c001c538:	83 c4 10             	add    esp,0x10
c001c53b:	89 c6                	mov    esi,eax
c001c53d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c540:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c543:	85 c0                	test   eax,eax
c001c545:	75 32                	jne    c001c579 <sysCallSpawn(regs*)+0x71>
c001c547:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c54c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c54f:	52                   	push   edx
c001c550:	50                   	push   eax
c001c551:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c554:	56                   	push   esi
c001c555:	e8 26 1b 00 00       	call   c001e080 <Process::Process(char const*, Process*, char**)>
c001c55a:	83 c4 10             	add    esp,0x10
c001c55d:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001c564:	75 b0                	jne    c001c516 <sysCallSpawn(regs*)+0xe>
c001c566:	83 ec 0c             	sub    esp,0xc
c001c569:	56                   	push   esi
c001c56a:	e8 f3 1f 00 00       	call   c001e562 <Process::createUserThread()>
c001c56f:	8b 06                	mov    eax,DWORD PTR [esi]
c001c571:	83 c4 10             	add    esp,0x10
c001c574:	99                   	cdq    
c001c575:	59                   	pop    ecx
c001c576:	5b                   	pop    ebx
c001c577:	5e                   	pop    esi
c001c578:	c3                   	ret    
c001c579:	31 c0                	xor    eax,eax
c001c57b:	eb d2                	jmp    c001c54f <sysCallSpawn(regs*)+0x47>

c001c57d <sysCallGetEnv(regs*)>:
c001c57d:	55                   	push   ebp
c001c57e:	57                   	push   edi
c001c57f:	56                   	push   esi
c001c580:	53                   	push   ebx
c001c581:	83 ec 28             	sub    esp,0x28
c001c584:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c588:	68 95 cc 02 c0       	push   0xc002cc95
c001c58d:	e8 c1 68 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001c592:	5f                   	pop    edi
c001c593:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001c596:	5d                   	pop    ebp
c001c597:	53                   	push   ebx
c001c598:	68 c2 cf 02 c0       	push   0xc002cfc2
c001c59d:	e8 b1 68 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001c5a2:	58                   	pop    eax
c001c5a3:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001c5a6:	5a                   	pop    edx
c001c5a7:	57                   	push   edi
c001c5a8:	68 9e cc 02 c0       	push   0xc002cc9e
c001c5ad:	e8 a1 68 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001c5b2:	59                   	pop    ecx
c001c5b3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c5b8:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c5bb:	e8 49 e2 ff ff       	call   c001a809 <Krnl::getProcessTotalEnvCount(Process*)>
c001c5c0:	5a                   	pop    edx
c001c5c1:	89 c5                	mov    ebp,eax
c001c5c3:	59                   	pop    ecx
c001c5c4:	50                   	push   eax
c001c5c5:	68 a8 cc 02 c0       	push   0xc002cca8
c001c5ca:	e8 84 68 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001c5cf:	83 c4 10             	add    esp,0x10
c001c5d2:	39 ef                	cmp    edi,ebp
c001c5d4:	7c 15                	jl     c001c5eb <sysCallGetEnv(regs*)+0x6e>
c001c5d6:	85 db                	test   ebx,ebx
c001c5d8:	75 0c                	jne    c001c5e6 <sysCallGetEnv(regs*)+0x69>
c001c5da:	83 c4 1c             	add    esp,0x1c
c001c5dd:	31 c0                	xor    eax,eax
c001c5df:	5b                   	pop    ebx
c001c5e0:	31 d2                	xor    edx,edx
c001c5e2:	5e                   	pop    esi
c001c5e3:	5f                   	pop    edi
c001c5e4:	5d                   	pop    ebp
c001c5e5:	c3                   	ret    
c001c5e6:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c5e9:	eb ef                	jmp    c001c5da <sysCallGetEnv(regs*)+0x5d>
c001c5eb:	83 ec 0c             	sub    esp,0xc
c001c5ee:	68 b4 cc 02 c0       	push   0xc002ccb4
c001c5f3:	e8 5b 68 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001c5f8:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c5fc:	83 c4 0c             	add    esp,0xc
c001c5ff:	57                   	push   edi
c001c600:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c606:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001c609:	50                   	push   eax
c001c60a:	e8 1a e2 ff ff       	call   c001a829 <Krnl::getProcessEnvPair(Process*, int)>
c001c60f:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c613:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c617:	68 73 d0 02 c0       	push   0xc002d073
c001c61c:	e8 32 68 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001c621:	83 c4 10             	add    esp,0x10
c001c624:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001c627:	85 f6                	test   esi,esi
c001c629:	75 47                	jne    c001c672 <sysCallGetEnv(regs*)+0xf5>
c001c62b:	83 ec 0c             	sub    esp,0xc
c001c62e:	55                   	push   ebp
c001c62f:	e8 54 41 fe ff       	call   c0000788 <strlen>
c001c634:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c637:	89 c3                	mov    ebx,eax
c001c639:	e8 4a 41 fe ff       	call   c0000788 <strlen>
c001c63e:	5a                   	pop    edx
c001c63f:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c643:	59                   	pop    ecx
c001c644:	50                   	push   eax
c001c645:	68 b7 cc 02 c0       	push   0xc002ccb7
c001c64a:	e8 04 68 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001c64f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c652:	e8 31 41 fe ff       	call   c0000788 <strlen>
c001c657:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c65a:	89 c3                	mov    ebx,eax
c001c65c:	e8 27 41 fe ff       	call   c0000788 <strlen>
c001c661:	83 c4 10             	add    esp,0x10
c001c664:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c668:	83 c4 1c             	add    esp,0x1c
c001c66b:	31 d2                	xor    edx,edx
c001c66d:	5b                   	pop    ebx
c001c66e:	5e                   	pop    esi
c001c66f:	5f                   	pop    edi
c001c670:	5d                   	pop    ebp
c001c671:	c3                   	ret    
c001c672:	83 ec 0c             	sub    esp,0xc
c001c675:	68 8d d0 02 c0       	push   0xc002d08d
c001c67a:	e8 d4 67 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001c67f:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c682:	58                   	pop    eax
c001c683:	5a                   	pop    edx
c001c684:	55                   	push   ebp
c001c685:	53                   	push   ebx
c001c686:	e8 9d 41 fe ff       	call   c0000828 <strcpy>
c001c68b:	59                   	pop    ecx
c001c68c:	5e                   	pop    esi
c001c68d:	68 c1 cc 02 c0       	push   0xc002ccc1
c001c692:	53                   	push   ebx
c001c693:	e8 d0 42 fe ff       	call   c0000968 <strcat>
c001c698:	5d                   	pop    ebp
c001c699:	58                   	pop    eax
c001c69a:	57                   	push   edi
c001c69b:	53                   	push   ebx
c001c69c:	e8 c7 42 fe ff       	call   c0000968 <strcat>
c001c6a1:	c7 04 24 a7 d0 02 c0 	mov    DWORD PTR [esp],0xc002d0a7
c001c6a8:	e8 a6 67 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001c6ad:	83 c4 10             	add    esp,0x10
c001c6b0:	e9 25 ff ff ff       	jmp    c001c5da <sysCallGetEnv(regs*)+0x5d>

c001c6b5 <sysAppSettings(regs*)>:
c001c6b5:	57                   	push   edi
c001c6b6:	56                   	push   esi
c001c6b7:	56                   	push   esi
c001c6b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6bc:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001c6bf:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c001c6c5:	25 e0 1f 00 00       	and    eax,0x1fe0
c001c6ca:	66 3d c0 09          	cmp    ax,0x9c0
c001c6ce:	75 2e                	jne    c001c6fe <sysAppSettings(regs*)+0x49>
c001c6d0:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c001c6d6:	83 e0 1f             	and    eax,0x1f
c001c6d9:	3c 01                	cmp    al,0x1
c001c6db:	74 2c                	je     c001c709 <sysAppSettings(regs*)+0x54>
c001c6dd:	3c 07                	cmp    al,0x7
c001c6df:	0f 84 b3 00 00 00    	je     c001c798 <sysAppSettings(regs*)+0xe3>
c001c6e5:	84 c0                	test   al,al
c001c6e7:	0f 84 d2 00 00 00    	je     c001c7bf <sysAppSettings(regs*)+0x10a>
c001c6ed:	3c 08                	cmp    al,0x8
c001c6ef:	74 63                	je     c001c754 <sysAppSettings(regs*)+0x9f>
c001c6f1:	59                   	pop    ecx
c001c6f2:	0f b6 c0             	movzx  eax,al
c001c6f5:	5e                   	pop    esi
c001c6f6:	05 e8 03 00 00       	add    eax,0x3e8
c001c6fb:	5f                   	pop    edi
c001c6fc:	99                   	cdq    
c001c6fd:	c3                   	ret    
c001c6fe:	b8 01 00 00 00       	mov    eax,0x1
c001c703:	59                   	pop    ecx
c001c704:	31 d2                	xor    edx,edx
c001c706:	5e                   	pop    esi
c001c707:	5f                   	pop    edi
c001c708:	c3                   	ret    
c001c709:	50                   	push   eax
c001c70a:	68 00 01 00 00       	push   0x100
c001c70f:	6a 00                	push   0x0
c001c711:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c716:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c719:	83 c0 0c             	add    eax,0xc
c001c71c:	50                   	push   eax
c001c71d:	e8 4a 40 fe ff       	call   c000076c <memset>
c001c722:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c727:	b9 ff 00 00 00       	mov    ecx,0xff
c001c72c:	8b 78 40             	mov    edi,DWORD PTR [eax+0x40]
c001c72f:	83 c7 0c             	add    edi,0xc
c001c732:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c734:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c739:	5a                   	pop    edx
c001c73a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c73d:	59                   	pop    ecx
c001c73e:	8d 50 0c             	lea    edx,[eax+0xc]
c001c741:	52                   	push   edx
c001c742:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c748:	e8 d5 43 ff ff       	call   c0010b22 <VgaText::setTitle(char*)>
c001c74d:	83 c4 10             	add    esp,0x10
c001c750:	31 c0                	xor    eax,eax
c001c752:	eb af                	jmp    c001c703 <sysAppSettings(regs*)+0x4e>
c001c754:	83 ec 08             	sub    esp,0x8
c001c757:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001c75d:	83 e0 0f             	and    eax,0xf
c001c760:	50                   	push   eax
c001c761:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c766:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c769:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c76f:	e8 a0 43 ff ff       	call   c0010b14 <VgaText::setTitleColour(VgaColour)>
c001c774:	5f                   	pop    edi
c001c775:	58                   	pop    eax
c001c776:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001c77c:	c1 e8 04             	shr    eax,0x4
c001c77f:	83 e0 0f             	and    eax,0xf
c001c782:	50                   	push   eax
c001c783:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c788:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c78b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c791:	e8 70 43 ff ff       	call   c0010b06 <VgaText::setTitleTextColour(VgaColour)>
c001c796:	eb b5                	jmp    c001c74d <sysAppSettings(regs*)+0x98>
c001c798:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c79d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c7a0:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c7a6:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c001c7ac:	c0 e8 06             	shr    al,0x6
c001c7af:	83 e0 01             	and    eax,0x1
c001c7b2:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001c7b8:	31 c0                	xor    eax,eax
c001c7ba:	e9 44 ff ff ff       	jmp    c001c703 <sysAppSettings(regs*)+0x4e>
c001c7bf:	b8 02 00 00 00       	mov    eax,0x2
c001c7c4:	e9 3a ff ff ff       	jmp    c001c703 <sysAppSettings(regs*)+0x4e>

c001c7c9 <sysSetFatAttrib(regs*)>:
c001c7c9:	57                   	push   edi
c001c7ca:	56                   	push   esi
c001c7cb:	53                   	push   ebx
c001c7cc:	83 ec 1c             	sub    esp,0x1c
c001c7cf:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c7d3:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c7d6:	68 14 01 00 00       	push   0x114
c001c7db:	e8 c8 30 ff ff       	call   c000f8a8 <malloc>
c001c7e0:	83 c4 0c             	add    esp,0xc
c001c7e3:	89 c3                	mov    ebx,eax
c001c7e5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c7ea:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c7ed:	57                   	push   edi
c001c7ee:	53                   	push   ebx
c001c7ef:	e8 be 6b ff ff       	call   c00133b2 <File::File(char const*, Process*)>
c001c7f4:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c7f7:	83 c4 0c             	add    esp,0xc
c001c7fa:	0f b6 d4             	movzx  edx,ah
c001c7fd:	0f b6 c0             	movzx  eax,al
c001c800:	52                   	push   edx
c001c801:	50                   	push   eax
c001c802:	53                   	push   ebx
c001c803:	e8 20 6e ff ff       	call   c0013628 <File::chfatattr(unsigned char, unsigned char)>
c001c808:	83 c4 10             	add    esp,0x10
c001c80b:	85 db                	test   ebx,ebx
c001c80d:	74 14                	je     c001c823 <sysSetFatAttrib(regs*)+0x5a>
c001c80f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c813:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c815:	83 ec 0c             	sub    esp,0xc
c001c818:	53                   	push   ebx
c001c819:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c81c:	83 c4 10             	add    esp,0x10
c001c81f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c823:	85 c0                	test   eax,eax
c001c825:	0f 95 c0             	setne  al
c001c828:	31 d2                	xor    edx,edx
c001c82a:	0f b6 c0             	movzx  eax,al
c001c82d:	f7 d8                	neg    eax
c001c82f:	83 d2 00             	adc    edx,0x0
c001c832:	83 c4 10             	add    esp,0x10
c001c835:	f7 da                	neg    edx
c001c837:	5b                   	pop    ebx
c001c838:	5e                   	pop    esi
c001c839:	5f                   	pop    edi
c001c83a:	c3                   	ret    

c001c83b <sysPipe(regs*)>:
c001c83b:	57                   	push   edi
c001c83c:	56                   	push   esi
c001c83d:	53                   	push   ebx
c001c83e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c842:	83 ec 0c             	sub    esp,0xc
c001c845:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c848:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c84b:	6a 20                	push   0x20
c001c84d:	e8 56 30 ff ff       	call   c000f8a8 <malloc>
c001c852:	89 c3                	mov    ebx,eax
c001c854:	58                   	pop    eax
c001c855:	5a                   	pop    edx
c001c856:	68 00 50 00 00       	push   0x5000
c001c85b:	53                   	push   ebx
c001c85c:	e8 69 3c ff ff       	call   c00104ca <Pipe::Pipe(int)>
c001c861:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c864:	e8 99 4d ff ff       	call   c0011602 <UnixFile::getFileDescriptor()>
c001c869:	89 07                	mov    DWORD PTR [edi],eax
c001c86b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c86e:	e8 8f 4d ff ff       	call   c0011602 <UnixFile::getFileDescriptor()>
c001c873:	83 c4 10             	add    esp,0x10
c001c876:	89 06                	mov    DWORD PTR [esi],eax
c001c878:	31 d2                	xor    edx,edx
c001c87a:	5b                   	pop    ebx
c001c87b:	31 c0                	xor    eax,eax
c001c87d:	5e                   	pop    esi
c001c87e:	5f                   	pop    edi
c001c87f:	c3                   	ret    

c001c880 <sysGetUnixTime(regs*)>:
c001c880:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c001c885:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c88b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c88f:	e9 10 75 ff ff       	jmp    c0013da4 <Clock::timeInSecondsLocal()>

c001c894 <string_ends_with(char const*, char const*)>:
c001c894:	57                   	push   edi
c001c895:	56                   	push   esi
c001c896:	53                   	push   ebx
c001c897:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c89b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c89f:	83 ec 0c             	sub    esp,0xc
c001c8a2:	53                   	push   ebx
c001c8a3:	e8 e0 3e fe ff       	call   c0000788 <strlen>
c001c8a8:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c8ab:	89 c6                	mov    esi,eax
c001c8ad:	e8 d6 3e fe ff       	call   c0000788 <strlen>
c001c8b2:	83 c4 10             	add    esp,0x10
c001c8b5:	39 c6                	cmp    esi,eax
c001c8b7:	7d 06                	jge    c001c8bf <string_ends_with(char const*, char const*)+0x2b>
c001c8b9:	5b                   	pop    ebx
c001c8ba:	31 c0                	xor    eax,eax
c001c8bc:	5e                   	pop    esi
c001c8bd:	5f                   	pop    edi
c001c8be:	c3                   	ret    
c001c8bf:	83 ec 08             	sub    esp,0x8
c001c8c2:	29 c6                	sub    esi,eax
c001c8c4:	57                   	push   edi
c001c8c5:	01 f3                	add    ebx,esi
c001c8c7:	53                   	push   ebx
c001c8c8:	e8 e7 3f fe ff       	call   c00008b4 <strcmp>
c001c8cd:	83 c4 10             	add    esp,0x10
c001c8d0:	85 c0                	test   eax,eax
c001c8d2:	5b                   	pop    ebx
c001c8d3:	0f 94 c0             	sete   al
c001c8d6:	5e                   	pop    esi
c001c8d7:	0f b6 c0             	movzx  eax,al
c001c8da:	5f                   	pop    edi
c001c8db:	c3                   	ret    

c001c8dc <sysCallOpen(regs*)>:
c001c8dc:	56                   	push   esi
c001c8dd:	53                   	push   ebx
c001c8de:	81 ec 04 01 00 00    	sub    esp,0x104
c001c8e4:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c8eb:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c8ee:	85 c9                	test   ecx,ecx
c001c8f0:	0f 84 b3 00 00 00    	je     c001c9a9 <sysCallOpen(regs*)+0xcd>
c001c8f6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c8f9:	85 c0                	test   eax,eax
c001c8fb:	0f 84 a8 00 00 00    	je     c001c9a9 <sysCallOpen(regs*)+0xcd>
c001c901:	52                   	push   edx
c001c902:	68 c3 cc 02 c0       	push   0xc002ccc3
c001c907:	50                   	push   eax
c001c908:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c90c:	56                   	push   esi
c001c90d:	e8 f6 68 ff ff       	call   c0013208 <Fs::standardiseFiles(char*, char const*, char const*)>
c001c912:	89 34 24             	mov    DWORD PTR [esp],esi
c001c915:	e8 6e 3e fe ff       	call   c0000788 <strlen>
c001c91a:	83 c4 10             	add    esp,0x10
c001c91d:	48                   	dec    eax
c001c91e:	74 1d                	je     c001c93d <sysCallOpen(regs*)+0x61>
c001c920:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c923:	eb 0f                	jmp    c001c934 <sysCallOpen(regs*)+0x58>
c001c925:	80 fa 3a             	cmp    dl,0x3a
c001c928:	74 0f                	je     c001c939 <sysCallOpen(regs*)+0x5d>
c001c92a:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c92e:	48                   	dec    eax
c001c92f:	74 0c                	je     c001c93d <sysCallOpen(regs*)+0x61>
c001c931:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c934:	80 fa 2e             	cmp    dl,0x2e
c001c937:	75 ec                	jne    c001c925 <sysCallOpen(regs*)+0x49>
c001c939:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c93d:	83 ec 08             	sub    esp,0x8
c001c940:	68 c7 cc 02 c0       	push   0xc002ccc7
c001c945:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c948:	e8 47 ff ff ff       	call   c001c894 <string_ends_with(char const*, char const*)>
c001c94d:	83 c4 10             	add    esp,0x10
c001c950:	85 c0                	test   eax,eax
c001c952:	75 17                	jne    c001c96b <sysCallOpen(regs*)+0x8f>
c001c954:	83 ec 08             	sub    esp,0x8
c001c957:	68 e8 cc 02 c0       	push   0xc002cce8
c001c95c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c95f:	e8 30 ff ff ff       	call   c001c894 <string_ends_with(char const*, char const*)>
c001c964:	83 c4 10             	add    esp,0x10
c001c967:	85 c0                	test   eax,eax
c001c969:	74 51                	je     c001c9bc <sysCallOpen(regs*)+0xe0>
c001c96b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c96e:	83 ec 08             	sub    esp,0x8
c001c971:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c977:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c97e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c981:	ff 30                	push   DWORD PTR [eax]
c001c983:	68 cc cc 02 c0       	push   0xc002cccc
c001c988:	e8 c6 64 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001c98d:	c7 04 24 db cc 02 c0 	mov    DWORD PTR [esp],0xc002ccdb
c001c994:	e8 ba 64 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001c999:	83 c4 10             	add    esp,0x10
c001c99c:	81 c4 04 01 00 00    	add    esp,0x104
c001c9a2:	31 c0                	xor    eax,eax
c001c9a4:	31 d2                	xor    edx,edx
c001c9a6:	5b                   	pop    ebx
c001c9a7:	5e                   	pop    esi
c001c9a8:	c3                   	ret    
c001c9a9:	81 c4 04 01 00 00    	add    esp,0x104
c001c9af:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c9b4:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c9b9:	5b                   	pop    ebx
c001c9ba:	5e                   	pop    esi
c001c9bb:	c3                   	ret    
c001c9bc:	83 ec 08             	sub    esp,0x8
c001c9bf:	68 c8 cc 02 c0       	push   0xc002ccc8
c001c9c4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c9c7:	e8 e8 3e fe ff       	call   c00008b4 <strcmp>
c001c9cc:	83 c4 10             	add    esp,0x10
c001c9cf:	85 c0                	test   eax,eax
c001c9d1:	74 98                	je     c001c96b <sysCallOpen(regs*)+0x8f>
c001c9d3:	83 ec 08             	sub    esp,0x8
c001c9d6:	68 c7 cc 02 c0       	push   0xc002ccc7
c001c9db:	56                   	push   esi
c001c9dc:	e8 b3 fe ff ff       	call   c001c894 <string_ends_with(char const*, char const*)>
c001c9e1:	83 c4 10             	add    esp,0x10
c001c9e4:	85 c0                	test   eax,eax
c001c9e6:	75 83                	jne    c001c96b <sysCallOpen(regs*)+0x8f>
c001c9e8:	83 ec 08             	sub    esp,0x8
c001c9eb:	68 ed cc 02 c0       	push   0xc002cced
c001c9f0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c9f3:	e8 9c fe ff ff       	call   c001c894 <string_ends_with(char const*, char const*)>
c001c9f8:	83 c4 10             	add    esp,0x10
c001c9fb:	85 c0                	test   eax,eax
c001c9fd:	0f 85 d9 00 00 00    	jne    c001cadc <sysCallOpen(regs*)+0x200>
c001ca03:	83 ec 08             	sub    esp,0x8
c001ca06:	68 f2 cc 02 c0       	push   0xc002ccf2
c001ca0b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ca0e:	e8 81 fe ff ff       	call   c001c894 <string_ends_with(char const*, char const*)>
c001ca13:	83 c4 10             	add    esp,0x10
c001ca16:	85 c0                	test   eax,eax
c001ca18:	0f 85 be 00 00 00    	jne    c001cadc <sysCallOpen(regs*)+0x200>
c001ca1e:	83 ec 08             	sub    esp,0x8
c001ca21:	68 ee cc 02 c0       	push   0xc002ccee
c001ca26:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ca29:	e8 86 3e fe ff       	call   c00008b4 <strcmp>
c001ca2e:	83 c4 10             	add    esp,0x10
c001ca31:	85 c0                	test   eax,eax
c001ca33:	0f 84 a3 00 00 00    	je     c001cadc <sysCallOpen(regs*)+0x200>
c001ca39:	83 ec 08             	sub    esp,0x8
c001ca3c:	68 ed cc 02 c0       	push   0xc002cced
c001ca41:	56                   	push   esi
c001ca42:	e8 4d fe ff ff       	call   c001c894 <string_ends_with(char const*, char const*)>
c001ca47:	83 c4 10             	add    esp,0x10
c001ca4a:	85 c0                	test   eax,eax
c001ca4c:	0f 85 8a 00 00 00    	jne    c001cadc <sysCallOpen(regs*)+0x200>
c001ca52:	83 ec 0c             	sub    esp,0xc
c001ca55:	68 14 01 00 00       	push   0x114
c001ca5a:	e8 49 2e ff ff       	call   c000f8a8 <malloc>
c001ca5f:	83 c4 0c             	add    esp,0xc
c001ca62:	89 c6                	mov    esi,eax
c001ca64:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca69:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ca6c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ca6f:	56                   	push   esi
c001ca70:	e8 3d 69 ff ff       	call   c00133b2 <File::File(char const*, Process*)>
c001ca75:	83 c4 10             	add    esp,0x10
c001ca78:	85 f6                	test   esi,esi
c001ca7a:	0f 84 29 ff ff ff    	je     c001c9a9 <sysCallOpen(regs*)+0xcd>
c001ca80:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001ca83:	0f b6 c2             	movzx  eax,dl
c001ca86:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001ca89:	89 d0                	mov    eax,edx
c001ca8b:	83 e0 01             	and    eax,0x1
c001ca8e:	f6 c2 02             	test   dl,0x2
c001ca91:	74 03                	je     c001ca96 <sysCallOpen(regs*)+0x1ba>
c001ca93:	83 c8 02             	or     eax,0x2
c001ca96:	f6 c2 04             	test   dl,0x4
c001ca99:	74 03                	je     c001ca9e <sysCallOpen(regs*)+0x1c2>
c001ca9b:	83 c8 04             	or     eax,0x4
c001ca9e:	f6 c2 08             	test   dl,0x8
c001caa1:	74 03                	je     c001caa6 <sysCallOpen(regs*)+0x1ca>
c001caa3:	83 c8 0a             	or     eax,0xa
c001caa6:	83 e2 10             	and    edx,0x10
c001caa9:	74 03                	je     c001caae <sysCallOpen(regs*)+0x1d2>
c001caab:	83 c8 12             	or     eax,0x12
c001caae:	83 ec 08             	sub    esp,0x8
c001cab1:	50                   	push   eax
c001cab2:	56                   	push   esi
c001cab3:	e8 5e 69 ff ff       	call   c0013416 <File::open(FileOpenMode)>
c001cab8:	83 c4 10             	add    esp,0x10
c001cabb:	85 c0                	test   eax,eax
c001cabd:	0f 85 e6 fe ff ff    	jne    c001c9a9 <sysCallOpen(regs*)+0xcd>
c001cac3:	83 ec 0c             	sub    esp,0xc
c001cac6:	56                   	push   esi
c001cac7:	e8 36 4b ff ff       	call   c0011602 <UnixFile::getFileDescriptor()>
c001cacc:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001cacf:	89 02                	mov    DWORD PTR [edx],eax
c001cad1:	c1 f8 1f             	sar    eax,0x1f
c001cad4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001cad7:	e9 bd fe ff ff       	jmp    c001c999 <sysCallOpen(regs*)+0xbd>
c001cadc:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001cadf:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001cae5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001caec:	e9 ab fe ff ff       	jmp    c001c99c <sysCallOpen(regs*)+0xc0>

c001caf1 <Sys::loadSyscalls()>:
c001caf1:	c7 05 00 1e 03 c0 e1 bb 01 c0 	mov    DWORD PTR ds:0xc0031e00,0xc001bbe1
c001cafb:	c7 05 04 1e 03 c0 46 b7 01 c0 	mov    DWORD PTR ds:0xc0031e04,0xc001b746
c001cb05:	c7 05 08 1e 03 c0 34 b9 01 c0 	mov    DWORD PTR ds:0xc0031e08,0xc001b934
c001cb0f:	c7 05 0c 1e 03 c0 17 bb 01 c0 	mov    DWORD PTR ds:0xc0031e0c,0xc001bb17
c001cb19:	c7 05 10 1e 03 c0 cc b8 01 c0 	mov    DWORD PTR ds:0xc0031e10,0xc001b8cc
c001cb23:	c7 05 14 1e 03 c0 7d b7 01 c0 	mov    DWORD PTR ds:0xc0031e14,0xc001b77d
c001cb2d:	c7 05 18 1e 03 c0 5e b7 01 c0 	mov    DWORD PTR ds:0xc0031e18,0xc001b75e
c001cb37:	c7 05 1c 1e 03 c0 89 b9 01 c0 	mov    DWORD PTR ds:0xc0031e1c,0xc001b989
c001cb41:	c7 05 24 1e 03 c0 1c c1 01 c0 	mov    DWORD PTR ds:0xc0031e24,0xc001c11c
c001cb4b:	c7 05 20 1e 03 c0 dc c8 01 c0 	mov    DWORD PTR ds:0xc0031e20,0xc001c8dc
c001cb55:	c7 05 28 1e 03 c0 a4 c1 01 c0 	mov    DWORD PTR ds:0xc0031e28,0xc001c1a4
c001cb5f:	c7 05 2c 1e 03 c0 0b be 01 c0 	mov    DWORD PTR ds:0xc0031e2c,0xc001be0b
c001cb69:	c7 05 30 1e 03 c0 27 bc 01 c0 	mov    DWORD PTR ds:0xc0031e30,0xc001bc27
c001cb73:	c7 05 34 1e 03 c0 2c bc 01 c0 	mov    DWORD PTR ds:0xc0031e34,0xc001bc2c
c001cb7d:	c7 05 38 1e 03 c0 7f c2 01 c0 	mov    DWORD PTR ds:0xc0031e38,0xc001c27f
c001cb87:	c7 05 3c 1e 03 c0 19 c2 01 c0 	mov    DWORD PTR ds:0xc0031e3c,0xc001c219
c001cb91:	c7 05 40 1e 03 c0 f3 be 01 c0 	mov    DWORD PTR ds:0xc0031e40,0xc001bef3
c001cb9b:	c7 05 44 1e 03 c0 5c bf 01 c0 	mov    DWORD PTR ds:0xc0031e44,0xc001bf5c
c001cba5:	c7 05 48 1e 03 c0 d9 bf 01 c0 	mov    DWORD PTR ds:0xc0031e48,0xc001bfd9
c001cbaf:	c7 05 4c 1e 03 c0 31 bc 01 c0 	mov    DWORD PTR ds:0xc0031e4c,0xc001bc31
c001cbb9:	c7 05 50 1e 03 c0 ef c2 01 c0 	mov    DWORD PTR ds:0xc0031e50,0xc001c2ef
c001cbc3:	c7 05 54 1e 03 c0 09 c3 01 c0 	mov    DWORD PTR ds:0xc0031e54,0xc001c309
c001cbcd:	c7 05 58 1e 03 c0 09 c3 01 c0 	mov    DWORD PTR ds:0xc0031e58,0xc001c309
c001cbd7:	c7 05 5c 1e 03 c0 4a c3 01 c0 	mov    DWORD PTR ds:0xc0031e5c,0xc001c34a
c001cbe1:	c7 05 60 1e 03 c0 ae c3 01 c0 	mov    DWORD PTR ds:0xc0031e60,0xc001c3ae
c001cbeb:	c7 05 64 1e 03 c0 dd bd 01 c0 	mov    DWORD PTR ds:0xc0031e64,0xc001bddd
c001cbf5:	c7 05 68 1e 03 c0 12 c4 01 c0 	mov    DWORD PTR ds:0xc0031e68,0xc001c412
c001cbff:	c7 05 6c 1e 03 c0 9a bd 01 c0 	mov    DWORD PTR ds:0xc0031e6c,0xc001bd9a
c001cc09:	c7 05 70 1e 03 c0 5e c4 01 c0 	mov    DWORD PTR ds:0xc0031e70,0xc001c45e
c001cc13:	c7 05 74 1e 03 c0 99 be 01 c0 	mov    DWORD PTR ds:0xc0031e74,0xc001be99
c001cc1d:	c7 05 78 1e 03 c0 e1 c4 01 c0 	mov    DWORD PTR ds:0xc0031e78,0xc001c4e1
c001cc27:	c7 05 7c 1e 03 c0 5c c0 01 c0 	mov    DWORD PTR ds:0xc0031e7c,0xc001c05c
c001cc31:	c7 05 80 1e 03 c0 08 c5 01 c0 	mov    DWORD PTR ds:0xc0031e80,0xc001c508
c001cc3b:	c7 05 84 1e 03 c0 7d c5 01 c0 	mov    DWORD PTR ds:0xc0031e84,0xc001c57d
c001cc45:	c7 05 88 1e 03 c0 b5 c6 01 c0 	mov    DWORD PTR ds:0xc0031e88,0xc001c6b5
c001cc4f:	c7 05 8c 1e 03 c0 3b bc 01 c0 	mov    DWORD PTR ds:0xc0031e8c,0xc001bc3b
c001cc59:	c7 05 90 1e 03 c0 a5 bc 01 c0 	mov    DWORD PTR ds:0xc0031e90,0xc001bca5
c001cc63:	c7 05 94 1e 03 c0 eb bc 01 c0 	mov    DWORD PTR ds:0xc0031e94,0xc001bceb
c001cc6d:	c7 05 98 1e 03 c0 c9 c7 01 c0 	mov    DWORD PTR ds:0xc0031e98,0xc001c7c9
c001cc77:	c7 05 9c 1e 03 c0 24 c3 01 c0 	mov    DWORD PTR ds:0xc0031e9c,0xc001c324
c001cc81:	c7 05 a0 1e 03 c0 3c bd 01 c0 	mov    DWORD PTR ds:0xc0031ea0,0xc001bd3c
c001cc8b:	c7 05 a4 1e 03 c0 3b c8 01 c0 	mov    DWORD PTR ds:0xc0031ea4,0xc001c83b
c001cc95:	c7 05 a8 1e 03 c0 80 c8 01 c0 	mov    DWORD PTR ds:0xc0031ea8,0xc001c880
c001cc9f:	c7 05 ac 1e 03 c0 24 b8 01 c0 	mov    DWORD PTR ds:0xc0031eac,0xc001b824
c001cca9:	c7 05 b0 1e 03 c0 a5 b9 01 c0 	mov    DWORD PTR ds:0xc0031eb0,0xc001b9a5
c001ccb3:	c7 05 b4 1e 03 c0 cd ba 01 c0 	mov    DWORD PTR ds:0xc0031eb4,0xc001bacd
c001ccbd:	c7 05 b8 1e 03 c0 10 b7 01 c0 	mov    DWORD PTR ds:0xc0031eb8,0xc001b710
c001ccc7:	c7 05 bc 1e 03 c0 7f bb 01 c0 	mov    DWORD PTR ds:0xc0031ebc,0xc001bb7f
c001ccd1:	c7 05 c0 1e 03 c0 89 b7 01 c0 	mov    DWORD PTR ds:0xc0031ec0,0xc001b789
c001ccdb:	c7 05 c4 1e 03 c0 a0 b7 01 c0 	mov    DWORD PTR ds:0xc0031ec4,0xc001b7a0
c001cce5:	c3                   	ret    

c001cce6 <Sys::systemCall(regs*, void*)>:
c001cce6:	53                   	push   ebx
c001cce7:	83 ec 08             	sub    esp,0x8
c001ccea:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ccee:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001ccf1:	83 f8 7f             	cmp    eax,0x7f
c001ccf4:	77 16                	ja     c001cd0c <Sys::systemCall(regs*, void*)+0x26>
c001ccf6:	8b 14 85 00 1e 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce200]
c001ccfd:	85 d2                	test   edx,edx
c001ccff:	74 0b                	je     c001cd0c <Sys::systemCall(regs*, void*)+0x26>
c001cd01:	83 ec 0c             	sub    esp,0xc
c001cd04:	53                   	push   ebx
c001cd05:	ff d2                	call   edx
c001cd07:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001cd0a:	eb 0d                	jmp    c001cd19 <Sys::systemCall(regs*, void*)+0x33>
c001cd0c:	52                   	push   edx
c001cd0d:	52                   	push   edx
c001cd0e:	50                   	push   eax
c001cd0f:	68 f7 cc 02 c0       	push   0xc002ccf7
c001cd14:	e8 3a 61 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001cd19:	83 c4 10             	add    esp,0x10
c001cd1c:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001cd21:	31 d2                	xor    edx,edx
c001cd23:	83 c4 08             	add    esp,0x8
c001cd26:	5b                   	pop    ebx
c001cd27:	c3                   	ret    

c001cd28 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001cd28:	55                   	push   ebp
c001cd29:	57                   	push   edi
c001cd2a:	56                   	push   esi
c001cd2b:	53                   	push   ebx
c001cd2c:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001cd32:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001cd39:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001cd40:	85 c0                	test   eax,eax
c001cd42:	0f 95 c1             	setne  cl
c001cd45:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001cd4d:	0f 94 c2             	sete   dl
c001cd50:	84 d1                	test   cl,dl
c001cd52:	74 23                	je     c001cd77 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001cd54:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001cd5a:	74 1b                	je     c001cd77 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001cd5c:	81 c3 00 10 00 00    	add    ebx,0x1000
c001cd62:	89 da                	mov    edx,ebx
c001cd64:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001cd6a:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001cd70:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001cd77:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c001cd7e:	05 ff 0f 00 00       	add    eax,0xfff
c001cd83:	83 ec 0c             	sub    esp,0xc
c001cd86:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cd8a:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c001cd90:	c1 e8 0c             	shr    eax,0xc
c001cd93:	89 fe                	mov    esi,edi
c001cd95:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cd99:	c1 ee 0c             	shr    esi,0xc
c001cd9c:	6a 01                	push   0x1
c001cd9e:	e8 aa 4c ff ff       	call   c0011a4d <Virt::allocateKernelVirtualPages(int)>
c001cda3:	89 c5                	mov    ebp,eax
c001cda5:	58                   	pop    eax
c001cda6:	5a                   	pop    edx
c001cda7:	56                   	push   esi
c001cda8:	68 7b cd 02 c0       	push   0xc002cd7b
c001cdad:	e8 a1 60 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001cdb2:	59                   	pop    ecx
c001cdb3:	58                   	pop    eax
c001cdb4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cdb8:	68 8d cd 02 c0       	push   0xc002cd8d
c001cdbd:	e8 91 60 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001cdc2:	83 c4 10             	add    esp,0x10
c001cdc5:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c001cdcb:	0f 86 31 01 00 00    	jbe    c001cf02 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c001cdd1:	c1 e6 0c             	shl    esi,0xc
c001cdd4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cdd7:	8d 04 1e             	lea    eax,[esi+ebx*1]
c001cdda:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cdde:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001cde5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001cde8:	01 df                	add    edi,ebx
c001cdea:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c001cded:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001cdf1:	0f 84 08 01 00 00    	je     c001ceff <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c001cdf7:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001cdfd:	76 05                	jbe    c001ce04 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c001cdff:	bf 00 10 00 00       	mov    edi,0x1000
c001ce04:	83 ec 0c             	sub    esp,0xc
c001ce07:	31 d2                	xor    edx,edx
c001ce09:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001ce10:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ce12:	8d 44 24 28          	lea    eax,[esp+0x28]
c001ce16:	50                   	push   eax
c001ce17:	8d 74 24 30          	lea    esi,[esp+0x30]
c001ce1b:	56                   	push   esi
c001ce1c:	52                   	push   edx
c001ce1d:	57                   	push   edi
c001ce1e:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001ce25:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ce28:	83 c4 20             	add    esp,0x20
c001ce2b:	85 c0                	test   eax,eax
c001ce2d:	74 0a                	je     c001ce39 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c001ce2f:	53                   	push   ebx
c001ce30:	53                   	push   ebx
c001ce31:	50                   	push   eax
c001ce32:	68 9f cd 02 c0       	push   0xc002cd9f
c001ce37:	eb 0f                	jmp    c001ce48 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c001ce39:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001ce3d:	74 20                	je     c001ce5f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c001ce3f:	51                   	push   ecx
c001ce40:	51                   	push   ecx
c001ce41:	6a 00                	push   0x0
c001ce43:	68 ca cd 02 c0       	push   0xc002cdca
c001ce48:	e8 06 60 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001ce4d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001ce50:	e8 b8 50 ff ff       	call   c0011f0d <Virt::freeKernelVirtualPages(unsigned long)>
c001ce55:	83 c4 10             	add    esp,0x10
c001ce58:	31 c0                	xor    eax,eax
c001ce5a:	e9 68 01 00 00       	jmp    c001cfc7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c001ce5f:	fa                   	cli    
c001ce60:	ff 05 c8 27 03 c0    	inc    DWORD PTR ds:0xc00327c8
c001ce66:	e8 a9 30 ff ff       	call   c000ff14 <Phys::allocatePage()>
c001ce6b:	6a 07                	push   0x7
c001ce6d:	89 c7                	mov    edi,eax
c001ce6f:	55                   	push   ebp
c001ce70:	50                   	push   eax
c001ce71:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ce76:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ce79:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ce7f:	e8 00 54 ff ff       	call   c0012284 <VAS::mapPage(unsigned long, unsigned long, int)>
c001ce84:	83 c4 0c             	add    esp,0xc
c001ce87:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001ce8e:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ce94:	6a 00                	push   0x0
c001ce96:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ce9b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ce9e:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cea4:	e8 35 52 ff ff       	call   c00120de <VAS::mapOtherVASIn(bool, VAS*)>
c001cea9:	58                   	pop    eax
c001ceaa:	5a                   	pop    edx
c001ceab:	68 07 0c 00 00       	push   0xc07
c001ceb0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001ceb4:	57                   	push   edi
c001ceb5:	89 ef                	mov    edi,ebp
c001ceb7:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001cebe:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cec4:	6a 00                	push   0x0
c001cec6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cecb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cece:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ced4:	e8 67 57 ff ff       	call   c0012640 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001ced9:	b9 00 10 00 00       	mov    ecx,0x1000
c001cede:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cee0:	a1 c8 27 03 c0       	mov    eax,ds:0xc00327c8
c001cee5:	83 c4 20             	add    esp,0x20
c001cee8:	48                   	dec    eax
c001cee9:	a3 c8 27 03 c0       	mov    ds:0xc00327c8,eax
c001ceee:	85 c0                	test   eax,eax
c001cef0:	75 01                	jne    c001cef3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001cef2:	fb                   	sti    
c001cef3:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c001cefa:	e9 df fe ff ff       	jmp    c001cdde <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c001ceff:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c001cf02:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001cf0a:	0f 86 a9 00 00 00    	jbe    c001cfb9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001cf10:	fa                   	cli    
c001cf11:	ff 05 c8 27 03 c0    	inc    DWORD PTR ds:0xc00327c8
c001cf17:	51                   	push   ecx
c001cf18:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001cf1f:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cf25:	6a 00                	push   0x0
c001cf27:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cf2c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cf2f:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cf35:	e8 a4 51 ff ff       	call   c00120de <VAS::mapOtherVASIn(bool, VAS*)>
c001cf3a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001cf3e:	c1 e6 0c             	shl    esi,0xc
c001cf41:	01 de                	add    esi,ebx
c001cf43:	83 c4 10             	add    esp,0x10
c001cf46:	39 de                	cmp    esi,ebx
c001cf48:	74 61                	je     c001cfab <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c001cf4a:	e8 c5 2f ff ff       	call   c000ff14 <Phys::allocatePage()>
c001cf4f:	6a 07                	push   0x7
c001cf51:	89 c7                	mov    edi,eax
c001cf53:	55                   	push   ebp
c001cf54:	50                   	push   eax
c001cf55:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cf5a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cf5d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cf63:	e8 1c 53 ff ff       	call   c0012284 <VAS::mapPage(unsigned long, unsigned long, int)>
c001cf68:	58                   	pop    eax
c001cf69:	5a                   	pop    edx
c001cf6a:	68 07 0c 00 00       	push   0xc07
c001cf6f:	53                   	push   ebx
c001cf70:	81 c3 00 10 00 00    	add    ebx,0x1000
c001cf76:	57                   	push   edi
c001cf77:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001cf7e:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cf84:	6a 00                	push   0x0
c001cf86:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cf8b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cf8e:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cf94:	e8 a7 56 ff ff       	call   c0012640 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001cf99:	83 c4 1c             	add    esp,0x1c
c001cf9c:	68 00 10 00 00       	push   0x1000
c001cfa1:	6a 00                	push   0x0
c001cfa3:	55                   	push   ebp
c001cfa4:	e8 c3 37 fe ff       	call   c000076c <memset>
c001cfa9:	eb 98                	jmp    c001cf43 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c001cfab:	a1 c8 27 03 c0       	mov    eax,ds:0xc00327c8
c001cfb0:	48                   	dec    eax
c001cfb1:	a3 c8 27 03 c0       	mov    ds:0xc00327c8,eax
c001cfb6:	75 01                	jne    c001cfb9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001cfb8:	fb                   	sti    
c001cfb9:	83 ec 0c             	sub    esp,0xc
c001cfbc:	55                   	push   ebp
c001cfbd:	e8 4b 4f ff ff       	call   c0011f0d <Virt::freeKernelVirtualPages(unsigned long)>
c001cfc2:	83 c4 10             	add    esp,0x10
c001cfc5:	b0 01                	mov    al,0x1
c001cfc7:	81 c4 2c 10 00 00    	add    esp,0x102c
c001cfcd:	5b                   	pop    ebx
c001cfce:	5e                   	pop    esi
c001cfcf:	5f                   	pop    edi
c001cfd0:	5d                   	pop    ebp
c001cfd1:	c3                   	ret    

c001cfd2 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001cfd2:	55                   	push   ebp
c001cfd3:	57                   	push   edi
c001cfd4:	56                   	push   esi
c001cfd5:	53                   	push   ebx
c001cfd6:	83 ec 48             	sub    esp,0x48
c001cfd9:	68 14 01 00 00       	push   0x114
c001cfde:	e8 c5 28 ff ff       	call   c000f8a8 <malloc>
c001cfe3:	83 c4 0c             	add    esp,0xc
c001cfe6:	89 c6                	mov    esi,eax
c001cfe8:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001cfec:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001cff0:	50                   	push   eax
c001cff1:	e8 bc 63 ff ff       	call   c00133b2 <File::File(char const*, Process*)>
c001cff6:	58                   	pop    eax
c001cff7:	5a                   	pop    edx
c001cff8:	6a 01                	push   0x1
c001cffa:	56                   	push   esi
c001cffb:	e8 16 64 ff ff       	call   c0013416 <File::open(FileOpenMode)>
c001d000:	83 c4 10             	add    esp,0x10
c001d003:	85 c0                	test   eax,eax
c001d005:	0f 85 47 01 00 00    	jne    c001d152 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001d00b:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001d013:	83 ec 0c             	sub    esp,0xc
c001d016:	6a 34                	push   0x34
c001d018:	e8 8b 28 ff ff       	call   c000f8a8 <malloc>
c001d01d:	89 c3                	mov    ebx,eax
c001d01f:	58                   	pop    eax
c001d020:	8b 06                	mov    eax,DWORD PTR [esi]
c001d022:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001d026:	57                   	push   edi
c001d027:	53                   	push   ebx
c001d028:	6a 00                	push   0x0
c001d02a:	6a 34                	push   0x34
c001d02c:	56                   	push   esi
c001d02d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d030:	83 c4 20             	add    esp,0x20
c001d033:	85 c0                	test   eax,eax
c001d035:	0f 85 17 01 00 00    	jne    c001d152 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001d03b:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001d041:	0f 85 0b 01 00 00    	jne    c001d152 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001d047:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001d04a:	85 c0                	test   eax,eax
c001d04c:	0f 84 00 01 00 00    	je     c001d152 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001d052:	31 d2                	xor    edx,edx
c001d054:	55                   	push   ebp
c001d055:	52                   	push   edx
c001d056:	50                   	push   eax
c001d057:	56                   	push   esi
c001d058:	e8 77 64 ff ff       	call   c00134d4 <File::seek(unsigned long long)>
c001d05d:	83 c4 10             	add    esp,0x10
c001d060:	85 c0                	test   eax,eax
c001d062:	0f 85 ea 00 00 00    	jne    c001d152 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001d068:	83 ec 0c             	sub    esp,0xc
c001d06b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001d06e:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001d072:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d076:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001d07a:	0f af c2             	imul   eax,edx
c001d07d:	50                   	push   eax
c001d07e:	e8 25 28 ff ff       	call   c000f8a8 <malloc>
c001d083:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001d085:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d089:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d08c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d090:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001d094:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001d098:	0f af c2             	imul   eax,edx
c001d09b:	99                   	cdq    
c001d09c:	52                   	push   edx
c001d09d:	50                   	push   eax
c001d09e:	56                   	push   esi
c001d09f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d0a2:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001d0a5:	83 c4 20             	add    esp,0x20
c001d0a8:	85 c0                	test   eax,eax
c001d0aa:	0f 84 a2 00 00 00    	je     c001d152 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001d0b0:	31 d2                	xor    edx,edx
c001d0b2:	51                   	push   ecx
c001d0b3:	52                   	push   edx
c001d0b4:	50                   	push   eax
c001d0b5:	56                   	push   esi
c001d0b6:	e8 19 64 ff ff       	call   c00134d4 <File::seek(unsigned long long)>
c001d0bb:	83 c4 10             	add    esp,0x10
c001d0be:	85 c0                	test   eax,eax
c001d0c0:	0f 85 8c 00 00 00    	jne    c001d152 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001d0c6:	83 ec 0c             	sub    esp,0xc
c001d0c9:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001d0cd:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001d0d1:	31 ed                	xor    ebp,ebp
c001d0d3:	0f af c2             	imul   eax,edx
c001d0d6:	50                   	push   eax
c001d0d7:	e8 cc 27 ff ff       	call   c000f8a8 <malloc>
c001d0dc:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001d0de:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d0e2:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d0e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d0e9:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001d0ed:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001d0f1:	0f af c2             	imul   eax,edx
c001d0f4:	99                   	cdq    
c001d0f5:	52                   	push   edx
c001d0f6:	50                   	push   eax
c001d0f7:	56                   	push   esi
c001d0f8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d0fb:	83 c4 20             	add    esp,0x20
c001d0fe:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001d106:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001d10a:	0f 86 80 00 00 00    	jbe    c001d190 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001d110:	0f b7 fd             	movzx  edi,bp
c001d113:	c1 e7 05             	shl    edi,0x5
c001d116:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001d11a:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001d11d:	75 6b                	jne    c001d18a <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001d11f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001d122:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d126:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001d129:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d12d:	52                   	push   edx
c001d12e:	31 d2                	xor    edx,edx
c001d130:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001d133:	52                   	push   edx
c001d134:	50                   	push   eax
c001d135:	56                   	push   esi
c001d136:	e8 99 63 ff ff       	call   c00134d4 <File::seek(unsigned long long)>
c001d13b:	83 c4 10             	add    esp,0x10
c001d13e:	85 c0                	test   eax,eax
c001d140:	74 17                	je     c001d159 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001d142:	83 ec 0c             	sub    esp,0xc
c001d145:	68 f6 cd 02 c0       	push   0xc002cdf6
c001d14a:	e8 04 5d ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001d14f:	83 c4 10             	add    esp,0x10
c001d152:	31 c0                	xor    eax,eax
c001d154:	e9 87 00 00 00       	jmp    c001d1e0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001d159:	83 ec 0c             	sub    esp,0xc
c001d15c:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001d15f:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001d162:	50                   	push   eax
c001d163:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001d167:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d16b:	56                   	push   esi
c001d16c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001d170:	e8 b3 fb ff ff       	call   c001cd28 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001d175:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d179:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001d17d:	83 c4 20             	add    esp,0x20
c001d180:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001d184:	73 04                	jae    c001d18a <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001d186:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d18a:	45                   	inc    ebp
c001d18b:	e9 76 ff ff ff       	jmp    c001d106 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001d190:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001d194:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d198:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d19c:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001d1a2:	83 ec 0c             	sub    esp,0xc
c001d1a5:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001d1ab:	25 00 f0 ff ff       	and    eax,0xfffff000
c001d1b0:	05 00 10 00 00       	add    eax,0x1000
c001d1b5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001d1b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d1bc:	e8 f7 26 ff ff       	call   c000f8b8 <free>
c001d1c1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d1c4:	e8 ef 26 ff ff       	call   c000f8b8 <free>
c001d1c9:	58                   	pop    eax
c001d1ca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d1ce:	e8 e5 26 ff ff       	call   c000f8b8 <free>
c001d1d3:	89 34 24             	mov    DWORD PTR [esp],esi
c001d1d6:	e8 99 62 ff ff       	call   c0013474 <File::close()>
c001d1db:	83 c4 10             	add    esp,0x10
c001d1de:	b0 01                	mov    al,0x1
c001d1e0:	83 c4 3c             	add    esp,0x3c
c001d1e3:	5b                   	pop    ebx
c001d1e4:	5e                   	pop    esi
c001d1e5:	5f                   	pop    edi
c001d1e6:	5d                   	pop    ebp
c001d1e7:	c3                   	ret    

c001d1e8 <Thr::runtimeReferenceHelper()>:
c001d1e8:	83 ec 18             	sub    esp,0x18
c001d1eb:	68 fe cd 02 c0       	push   0xc002cdfe
c001d1f0:	e8 5e 5c ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001d1f5:	fa                   	cli    
c001d1f6:	83 c4 10             	add    esp,0x10
c001d1f9:	eb fe                	jmp    c001d1f9 <Thr::runtimeReferenceHelper()+0x11>

c001d1fb <Thr::getAddressOfKernelSymbol(char const*)>:
c001d1fb:	57                   	push   edi
c001d1fc:	56                   	push   esi
c001d1fd:	53                   	push   ebx
c001d1fe:	31 db                	xor    ebx,ebx
c001d200:	39 1d a0 27 03 c0    	cmp    DWORD PTR ds:0xc00327a0,ebx
c001d206:	7e 3c                	jle    c001d244 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001d208:	8b 34 9d 20 27 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffcd8e0]
c001d20f:	31 ff                	xor    edi,edi
c001d211:	39 3c 9d 20 26 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffcd9e0],edi
c001d218:	7e 27                	jle    c001d241 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001d21a:	50                   	push   eax
c001d21b:	50                   	push   eax
c001d21c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d220:	8b 06                	mov    eax,DWORD PTR [esi]
c001d222:	03 04 9d a0 26 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffcd960]
c001d229:	50                   	push   eax
c001d22a:	e8 85 36 fe ff       	call   c00008b4 <strcmp>
c001d22f:	83 c4 10             	add    esp,0x10
c001d232:	85 c0                	test   eax,eax
c001d234:	75 05                	jne    c001d23b <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001d236:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001d239:	eb 0b                	jmp    c001d246 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001d23b:	83 c6 10             	add    esi,0x10
c001d23e:	47                   	inc    edi
c001d23f:	eb d0                	jmp    c001d211 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001d241:	43                   	inc    ebx
c001d242:	eb bc                	jmp    c001d200 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001d244:	31 c0                	xor    eax,eax
c001d246:	5b                   	pop    ebx
c001d247:	5e                   	pop    esi
c001d248:	5f                   	pop    edi
c001d249:	c3                   	ret    

c001d24a <Thr::loadKernelSymbolTable(char const*)>:
c001d24a:	55                   	push   ebp
c001d24b:	57                   	push   edi
c001d24c:	56                   	push   esi
c001d24d:	53                   	push   ebx
c001d24e:	83 ec 68             	sub    esp,0x68
c001d251:	8b 35 f0 27 03 c0    	mov    esi,DWORD PTR ds:0xc00327f0
c001d257:	68 14 01 00 00       	push   0x114
c001d25c:	e8 47 26 ff ff       	call   c000f8a8 <malloc>
c001d261:	83 c4 0c             	add    esp,0xc
c001d264:	89 c3                	mov    ebx,eax
c001d266:	56                   	push   esi
c001d267:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001d26b:	50                   	push   eax
c001d26c:	e8 41 61 ff ff       	call   c00133b2 <File::File(char const*, Process*)>
c001d271:	5e                   	pop    esi
c001d272:	5f                   	pop    edi
c001d273:	6a 01                	push   0x1
c001d275:	53                   	push   ebx
c001d276:	e8 9b 61 ff ff       	call   c0013416 <File::open(FileOpenMode)>
c001d27b:	83 c4 10             	add    esp,0x10
c001d27e:	85 c0                	test   eax,eax
c001d280:	74 0a                	je     c001d28c <Thr::loadKernelSymbolTable(char const*)+0x42>
c001d282:	83 ec 0c             	sub    esp,0xc
c001d285:	68 20 ce 02 c0       	push   0xc002ce20
c001d28a:	eb 34                	jmp    c001d2c0 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001d28c:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001d294:	83 ec 0c             	sub    esp,0xc
c001d297:	6a 34                	push   0x34
c001d299:	e8 0a 26 ff ff       	call   c000f8a8 <malloc>
c001d29e:	59                   	pop    ecx
c001d29f:	89 c7                	mov    edi,eax
c001d2a1:	8d 74 24 34          	lea    esi,[esp+0x34]
c001d2a5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d2a7:	56                   	push   esi
c001d2a8:	57                   	push   edi
c001d2a9:	6a 00                	push   0x0
c001d2ab:	6a 34                	push   0x34
c001d2ad:	53                   	push   ebx
c001d2ae:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d2b1:	83 c4 20             	add    esp,0x20
c001d2b4:	85 c0                	test   eax,eax
c001d2b6:	74 17                	je     c001d2cf <Thr::loadKernelSymbolTable(char const*)+0x85>
c001d2b8:	83 ec 0c             	sub    esp,0xc
c001d2bb:	68 37 ce 02 c0       	push   0xc002ce37
c001d2c0:	e8 28 d6 ff ff       	call   c001a8ed <Krnl::panic(char const*)>
c001d2c5:	83 c4 10             	add    esp,0x10
c001d2c8:	31 c0                	xor    eax,eax
c001d2ca:	e9 31 02 00 00       	jmp    c001d500 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001d2cf:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001d2d5:	75 e1                	jne    c001d2b8 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001d2d7:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001d2da:	85 c0                	test   eax,eax
c001d2dc:	74 da                	je     c001d2b8 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001d2de:	52                   	push   edx
c001d2df:	31 d2                	xor    edx,edx
c001d2e1:	52                   	push   edx
c001d2e2:	50                   	push   eax
c001d2e3:	53                   	push   ebx
c001d2e4:	e8 eb 61 ff ff       	call   c00134d4 <File::seek(unsigned long long)>
c001d2e9:	83 c4 10             	add    esp,0x10
c001d2ec:	85 c0                	test   eax,eax
c001d2ee:	75 c8                	jne    c001d2b8 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001d2f0:	83 ec 0c             	sub    esp,0xc
c001d2f3:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d2f7:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d2fb:	31 ed                	xor    ebp,ebp
c001d2fd:	0f af c2             	imul   eax,edx
c001d300:	50                   	push   eax
c001d301:	e8 a2 25 ff ff       	call   c000f8a8 <malloc>
c001d306:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001d308:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d30c:	89 34 24             	mov    DWORD PTR [esp],esi
c001d30f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d313:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d317:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d31b:	0f af c2             	imul   eax,edx
c001d31e:	99                   	cdq    
c001d31f:	52                   	push   edx
c001d320:	50                   	push   eax
c001d321:	53                   	push   ebx
c001d322:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d325:	83 c4 20             	add    esp,0x20
c001d328:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d330:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001d338:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d340:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d348:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001d34c:	0f 86 aa 00 00 00    	jbe    c001d3fc <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001d352:	0f b7 f5             	movzx  esi,bp
c001d355:	6b f6 28             	imul   esi,esi,0x28
c001d358:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d35c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d35f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d363:	50                   	push   eax
c001d364:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d368:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001d36c:	8b 16                	mov    edx,DWORD PTR [esi]
c001d36e:	6b c0 28             	imul   eax,eax,0x28
c001d371:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001d375:	89 d0                	mov    eax,edx
c001d377:	31 d2                	xor    edx,edx
c001d379:	52                   	push   edx
c001d37a:	50                   	push   eax
c001d37b:	53                   	push   ebx
c001d37c:	e8 53 61 ff ff       	call   c00134d4 <File::seek(unsigned long long)>
c001d381:	83 c4 0c             	add    esp,0xc
c001d384:	6a 20                	push   0x20
c001d386:	6a 00                	push   0x0
c001d388:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001d38c:	52                   	push   edx
c001d38d:	e8 da 33 fe ff       	call   c000076c <memset>
c001d392:	58                   	pop    eax
c001d393:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d395:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001d399:	51                   	push   ecx
c001d39a:	8d 54 24 40          	lea    edx,[esp+0x40]
c001d39e:	52                   	push   edx
c001d39f:	6a 00                	push   0x0
c001d3a1:	6a 1f                	push   0x1f
c001d3a3:	53                   	push   ebx
c001d3a4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d3a7:	83 c4 18             	add    esp,0x18
c001d3aa:	68 4e ce 02 c0       	push   0xc002ce4e
c001d3af:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001d3b3:	52                   	push   edx
c001d3b4:	e8 fb 34 fe ff       	call   c00008b4 <strcmp>
c001d3b9:	83 c4 10             	add    esp,0x10
c001d3bc:	85 c0                	test   eax,eax
c001d3be:	75 0f                	jne    c001d3cf <Thr::loadKernelSymbolTable(char const*)+0x185>
c001d3c0:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d3c3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d3c7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d3cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d3cf:	50                   	push   eax
c001d3d0:	50                   	push   eax
c001d3d1:	68 56 ce 02 c0       	push   0xc002ce56
c001d3d6:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001d3da:	50                   	push   eax
c001d3db:	e8 d4 34 fe ff       	call   c00008b4 <strcmp>
c001d3e0:	83 c4 10             	add    esp,0x10
c001d3e3:	85 c0                	test   eax,eax
c001d3e5:	75 0f                	jne    c001d3f6 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001d3e7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d3ea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d3ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d3f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d3f6:	45                   	inc    ebp
c001d3f7:	e9 4c ff ff ff       	jmp    c001d348 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001d3fc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001d401:	75 10                	jne    c001d413 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001d403:	83 ec 0c             	sub    esp,0xc
c001d406:	68 5e ce 02 c0       	push   0xc002ce5e
c001d40b:	e8 dd d4 ff ff       	call   c001a8ed <Krnl::panic(char const*)>
c001d410:	83 c4 10             	add    esp,0x10
c001d413:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001d418:	75 10                	jne    c001d42a <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001d41a:	83 ec 0c             	sub    esp,0xc
c001d41d:	68 5e ce 02 c0       	push   0xc002ce5e
c001d422:	e8 c6 d4 ff ff       	call   c001a8ed <Krnl::panic(char const*)>
c001d427:	83 c4 10             	add    esp,0x10
c001d42a:	31 d2                	xor    edx,edx
c001d42c:	50                   	push   eax
c001d42d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d431:	52                   	push   edx
c001d432:	50                   	push   eax
c001d433:	53                   	push   ebx
c001d434:	e8 9b 60 ff ff       	call   c00134d4 <File::seek(unsigned long long)>
c001d439:	5a                   	pop    edx
c001d43a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d43e:	e8 65 24 ff ff       	call   c000f8a8 <malloc>
c001d443:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d447:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d44b:	31 c9                	xor    ecx,ecx
c001d44d:	5e                   	pop    esi
c001d44e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d450:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001d454:	55                   	push   ebp
c001d455:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d459:	51                   	push   ecx
c001d45a:	52                   	push   edx
c001d45b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001d45f:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001d463:	53                   	push   ebx
c001d464:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d467:	83 c4 14             	add    esp,0x14
c001d46a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d46e:	e8 35 24 ff ff       	call   c000f8a8 <malloc>
c001d473:	89 c6                	mov    esi,eax
c001d475:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d477:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d47a:	56                   	push   esi
c001d47b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d47f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001d483:	51                   	push   ecx
c001d484:	52                   	push   edx
c001d485:	53                   	push   ebx
c001d486:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d489:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d48d:	8b 15 a0 27 03 c0    	mov    edx,DWORD PTR ds:0xc00327a0
c001d493:	83 c4 1c             	add    esp,0x1c
c001d496:	c1 e8 04             	shr    eax,0x4
c001d499:	89 04 95 20 26 03 c0 	mov    DWORD PTR [edx*4-0x3ffcd9e0],eax
c001d4a0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d4a4:	31 d2                	xor    edx,edx
c001d4a6:	52                   	push   edx
c001d4a7:	50                   	push   eax
c001d4a8:	53                   	push   ebx
c001d4a9:	e8 26 60 ff ff       	call   c00134d4 <File::seek(unsigned long long)>
c001d4ae:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001d4b0:	31 d2                	xor    edx,edx
c001d4b2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d4b5:	56                   	push   esi
c001d4b6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d4ba:	52                   	push   edx
c001d4bb:	50                   	push   eax
c001d4bc:	53                   	push   ebx
c001d4bd:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d4c0:	83 c4 14             	add    esp,0x14
c001d4c3:	53                   	push   ebx
c001d4c4:	e8 ab 5f ff ff       	call   c0013474 <File::close()>
c001d4c9:	5d                   	pop    ebp
c001d4ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d4ce:	e8 e5 23 ff ff       	call   c000f8b8 <free>
c001d4d3:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d4d6:	e8 dd 23 ff ff       	call   c000f8b8 <free>
c001d4db:	a1 a0 27 03 c0       	mov    eax,ds:0xc00327a0
c001d4e0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d4e4:	8d 50 01             	lea    edx,[eax+0x1]
c001d4e7:	89 0c 85 20 27 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd8e0],ecx
c001d4ee:	89 34 85 a0 26 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd960],esi
c001d4f5:	89 15 a0 27 03 c0    	mov    DWORD PTR ds:0xc00327a0,edx
c001d4fb:	83 c4 10             	add    esp,0x10
c001d4fe:	b0 01                	mov    al,0x1
c001d500:	83 c4 5c             	add    esp,0x5c
c001d503:	5b                   	pop    ebx
c001d504:	5e                   	pop    esi
c001d505:	5f                   	pop    edi
c001d506:	5d                   	pop    ebp
c001d507:	c3                   	ret    

c001d508 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001d508:	55                   	push   ebp
c001d509:	57                   	push   edi
c001d50a:	56                   	push   esi
c001d50b:	53                   	push   ebx
c001d50c:	81 ec 68 03 00 00    	sub    esp,0x368
c001d512:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001d519:	8b 1d f0 27 03 c0    	mov    ebx,DWORD PTR ds:0xc00327f0
c001d51f:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001d523:	68 14 01 00 00       	push   0x114
c001d528:	e8 7b 23 ff ff       	call   c000f8a8 <malloc>
c001d52d:	83 c4 0c             	add    esp,0xc
c001d530:	89 c5                	mov    ebp,eax
c001d532:	53                   	push   ebx
c001d533:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001d53a:	50                   	push   eax
c001d53b:	e8 72 5e ff ff       	call   c00133b2 <File::File(char const*, Process*)>
c001d540:	5e                   	pop    esi
c001d541:	5f                   	pop    edi
c001d542:	6a 01                	push   0x1
c001d544:	55                   	push   ebp
c001d545:	e8 cc 5e ff ff       	call   c0013416 <File::open(FileOpenMode)>
c001d54a:	83 c4 10             	add    esp,0x10
c001d54d:	85 c0                	test   eax,eax
c001d54f:	0f 85 a7 06 00 00    	jne    c001dbfc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d555:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001d55d:	83 ec 0c             	sub    esp,0xc
c001d560:	6a 34                	push   0x34
c001d562:	e8 41 23 ff ff       	call   c000f8a8 <malloc>
c001d567:	5b                   	pop    ebx
c001d568:	89 c7                	mov    edi,eax
c001d56a:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d56e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d571:	53                   	push   ebx
c001d572:	57                   	push   edi
c001d573:	6a 00                	push   0x0
c001d575:	6a 34                	push   0x34
c001d577:	55                   	push   ebp
c001d578:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d57b:	83 c4 20             	add    esp,0x20
c001d57e:	85 c0                	test   eax,eax
c001d580:	0f 85 76 06 00 00    	jne    c001dbfc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d586:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001d58c:	0f 85 6a 06 00 00    	jne    c001dbfc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d592:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001d595:	85 c0                	test   eax,eax
c001d597:	0f 84 5f 06 00 00    	je     c001dbfc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d59d:	31 d2                	xor    edx,edx
c001d59f:	51                   	push   ecx
c001d5a0:	52                   	push   edx
c001d5a1:	50                   	push   eax
c001d5a2:	55                   	push   ebp
c001d5a3:	e8 2c 5f ff ff       	call   c00134d4 <File::seek(unsigned long long)>
c001d5a8:	83 c4 10             	add    esp,0x10
c001d5ab:	85 c0                	test   eax,eax
c001d5ad:	0f 85 49 06 00 00    	jne    c001dbfc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d5b3:	83 ec 0c             	sub    esp,0xc
c001d5b6:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001d5b9:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d5bd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001d5c1:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d5c5:	0f af c2             	imul   eax,edx
c001d5c8:	50                   	push   eax
c001d5c9:	e8 da 22 ff ff       	call   c000f8a8 <malloc>
c001d5ce:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d5d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d5d5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d5d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d5dc:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d5e0:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d5e4:	0f af c2             	imul   eax,edx
c001d5e7:	99                   	cdq    
c001d5e8:	52                   	push   edx
c001d5e9:	50                   	push   eax
c001d5ea:	55                   	push   ebp
c001d5eb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d5ee:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001d5f1:	83 c4 20             	add    esp,0x20
c001d5f4:	85 c0                	test   eax,eax
c001d5f6:	0f 84 00 06 00 00    	je     c001dbfc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d5fc:	52                   	push   edx
c001d5fd:	31 d2                	xor    edx,edx
c001d5ff:	52                   	push   edx
c001d600:	50                   	push   eax
c001d601:	55                   	push   ebp
c001d602:	e8 cd 5e ff ff       	call   c00134d4 <File::seek(unsigned long long)>
c001d607:	83 c4 10             	add    esp,0x10
c001d60a:	85 c0                	test   eax,eax
c001d60c:	0f 85 ea 05 00 00    	jne    c001dbfc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d612:	83 ec 0c             	sub    esp,0xc
c001d615:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d619:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d61d:	31 f6                	xor    esi,esi
c001d61f:	0f af c2             	imul   eax,edx
c001d622:	50                   	push   eax
c001d623:	e8 80 22 ff ff       	call   c000f8a8 <malloc>
c001d628:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d62b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d62f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d632:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d636:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d63a:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d63e:	0f af c2             	imul   eax,edx
c001d641:	99                   	cdq    
c001d642:	52                   	push   edx
c001d643:	50                   	push   eax
c001d644:	55                   	push   ebp
c001d645:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d648:	83 c4 20             	add    esp,0x20
c001d64b:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001d64f:	0f 86 8a 00 00 00    	jbe    c001d6df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001d655:	0f b7 de             	movzx  ebx,si
c001d658:	c1 e3 05             	shl    ebx,0x5
c001d65b:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001d65f:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001d662:	75 75                	jne    c001d6d9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001d664:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d667:	31 d2                	xor    edx,edx
c001d669:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d66d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d670:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d674:	50                   	push   eax
c001d675:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001d678:	52                   	push   edx
c001d679:	50                   	push   eax
c001d67a:	55                   	push   ebp
c001d67b:	e8 54 5e ff ff       	call   c00134d4 <File::seek(unsigned long long)>
c001d680:	83 c4 10             	add    esp,0x10
c001d683:	85 c0                	test   eax,eax
c001d685:	0f 85 71 05 00 00    	jne    c001dbfc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d68b:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001d692:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d695:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001d699:	31 d2                	xor    edx,edx
c001d69b:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d69f:	83 ec 0c             	sub    esp,0xc
c001d6a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d6a6:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d6ad:	50                   	push   eax
c001d6ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d6b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d6b6:	52                   	push   edx
c001d6b7:	50                   	push   eax
c001d6b8:	55                   	push   ebp
c001d6b9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d6bc:	83 c4 1c             	add    esp,0x1c
c001d6bf:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d6c2:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001d6c5:	50                   	push   eax
c001d6c6:	6a 00                	push   0x0
c001d6c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6cc:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001d6d0:	50                   	push   eax
c001d6d1:	e8 96 30 fe ff       	call   c000076c <memset>
c001d6d6:	83 c4 10             	add    esp,0x10
c001d6d9:	46                   	inc    esi
c001d6da:	e9 6c ff ff ff       	jmp    c001d64b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001d6df:	53                   	push   ebx
c001d6e0:	31 db                	xor    ebx,ebx
c001d6e2:	68 00 01 00 00       	push   0x100
c001d6e7:	6a 00                	push   0x0
c001d6e9:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001d6ed:	50                   	push   eax
c001d6ee:	e8 79 30 fe ff       	call   c000076c <memset>
c001d6f3:	83 c4 0c             	add    esp,0xc
c001d6f6:	68 00 01 00 00       	push   0x100
c001d6fb:	6a 00                	push   0x0
c001d6fd:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001d704:	50                   	push   eax
c001d705:	e8 62 30 fe ff       	call   c000076c <memset>
c001d70a:	83 c4 10             	add    esp,0x10
c001d70d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d715:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d71d:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001d725:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d72d:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d735:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d739:	0f 86 30 01 00 00    	jbe    c001d86f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d73f:	0f b7 f3             	movzx  esi,bx
c001d742:	6b f6 28             	imul   esi,esi,0x28
c001d745:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d749:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d74c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d750:	52                   	push   edx
c001d751:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d755:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d759:	8b 06                	mov    eax,DWORD PTR [esi]
c001d75b:	6b d2 28             	imul   edx,edx,0x28
c001d75e:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d762:	31 d2                	xor    edx,edx
c001d764:	52                   	push   edx
c001d765:	50                   	push   eax
c001d766:	55                   	push   ebp
c001d767:	e8 68 5d ff ff       	call   c00134d4 <File::seek(unsigned long long)>
c001d76c:	83 c4 0c             	add    esp,0xc
c001d76f:	6a 20                	push   0x20
c001d771:	6a 00                	push   0x0
c001d773:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d77a:	51                   	push   ecx
c001d77b:	e8 ec 2f fe ff       	call   c000076c <memset>
c001d780:	59                   	pop    ecx
c001d781:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d784:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d788:	52                   	push   edx
c001d789:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d790:	51                   	push   ecx
c001d791:	6a 00                	push   0x0
c001d793:	6a 1f                	push   0x1f
c001d795:	55                   	push   ebp
c001d796:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d799:	83 c4 1c             	add    esp,0x1c
c001d79c:	6a 09                	push   0x9
c001d79e:	68 78 ce 02 c0       	push   0xc002ce78
c001d7a3:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d7aa:	51                   	push   ecx
c001d7ab:	e8 b8 2e fe ff       	call   c0000668 <memcmp>
c001d7b0:	83 c4 10             	add    esp,0x10
c001d7b3:	85 c0                	test   eax,eax
c001d7b5:	75 21                	jne    c001d7d8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d7b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d7bb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d7bf:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d7c3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d7c7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d7ca:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d7d1:	89 d0                	mov    eax,edx
c001d7d3:	40                   	inc    eax
c001d7d4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d7d8:	50                   	push   eax
c001d7d9:	6a 09                	push   0x9
c001d7db:	68 82 ce 02 c0       	push   0xc002ce82
c001d7e0:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d7e7:	50                   	push   eax
c001d7e8:	e8 7b 2e fe ff       	call   c0000668 <memcmp>
c001d7ed:	83 c4 10             	add    esp,0x10
c001d7f0:	85 c0                	test   eax,eax
c001d7f2:	75 21                	jne    c001d815 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d7f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d7f8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d7fc:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d800:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d804:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d807:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d80e:	89 d0                	mov    eax,edx
c001d810:	40                   	inc    eax
c001d811:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d815:	50                   	push   eax
c001d816:	50                   	push   eax
c001d817:	68 4e ce 02 c0       	push   0xc002ce4e
c001d81c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d823:	50                   	push   eax
c001d824:	e8 8b 30 fe ff       	call   c00008b4 <strcmp>
c001d829:	83 c4 10             	add    esp,0x10
c001d82c:	85 c0                	test   eax,eax
c001d82e:	75 0f                	jne    c001d83f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d830:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d833:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d837:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d83b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d83f:	50                   	push   eax
c001d840:	50                   	push   eax
c001d841:	68 56 ce 02 c0       	push   0xc002ce56
c001d846:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d84d:	50                   	push   eax
c001d84e:	e8 61 30 fe ff       	call   c00008b4 <strcmp>
c001d853:	83 c4 10             	add    esp,0x10
c001d856:	85 c0                	test   eax,eax
c001d858:	75 0f                	jne    c001d869 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d85a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d85d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d861:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d865:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d869:	43                   	inc    ebx
c001d86a:	e9 c6 fe ff ff       	jmp    c001d735 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d86f:	31 d2                	xor    edx,edx
c001d871:	50                   	push   eax
c001d872:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d876:	52                   	push   edx
c001d877:	50                   	push   eax
c001d878:	55                   	push   ebp
c001d879:	e8 56 5c ff ff       	call   c00134d4 <File::seek(unsigned long long)>
c001d87e:	58                   	pop    eax
c001d87f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d883:	e8 20 20 ff ff       	call   c000f8a8 <malloc>
c001d888:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d88b:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d88f:	31 d2                	xor    edx,edx
c001d891:	58                   	pop    eax
c001d892:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d896:	53                   	push   ebx
c001d897:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d89b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d89f:	52                   	push   edx
c001d8a0:	50                   	push   eax
c001d8a1:	55                   	push   ebp
c001d8a2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d8a5:	83 c4 14             	add    esp,0x14
c001d8a8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d8ac:	e8 f7 1f ff ff       	call   c000f8a8 <malloc>
c001d8b1:	31 d2                	xor    edx,edx
c001d8b3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d8b7:	83 c4 0c             	add    esp,0xc
c001d8ba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d8be:	52                   	push   edx
c001d8bf:	50                   	push   eax
c001d8c0:	55                   	push   ebp
c001d8c1:	e8 0e 5c ff ff       	call   c00134d4 <File::seek(unsigned long long)>
c001d8c6:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d8c9:	31 d2                	xor    edx,edx
c001d8cb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d8ce:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d8d2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d8d6:	52                   	push   edx
c001d8d7:	50                   	push   eax
c001d8d8:	55                   	push   ebp
c001d8d9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d8dc:	83 c4 20             	add    esp,0x20
c001d8df:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d8e7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d8eb:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d8ef:	0f 84 0b 03 00 00    	je     c001dc00 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001d8f5:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d8fc:	31 d2                	xor    edx,edx
c001d8fe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d902:	c1 e8 03             	shr    eax,0x3
c001d905:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d909:	51                   	push   ecx
c001d90a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d90e:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d912:	52                   	push   edx
c001d913:	50                   	push   eax
c001d914:	55                   	push   ebp
c001d915:	e8 ba 5b ff ff       	call   c00134d4 <File::seek(unsigned long long)>
c001d91a:	5b                   	pop    ebx
c001d91b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d91f:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d926:	e8 7d 1f ff ff       	call   c000f8a8 <malloc>
c001d92b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d92e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d932:	31 d2                	xor    edx,edx
c001d934:	5e                   	pop    esi
c001d935:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d939:	50                   	push   eax
c001d93a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d93e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d942:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d949:	52                   	push   edx
c001d94a:	50                   	push   eax
c001d94b:	55                   	push   ebp
c001d94c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d94f:	83 c4 20             	add    esp,0x20
c001d952:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d95a:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d95e:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d962:	0f 8d 7c 02 00 00    	jge    c001dbe4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c001d968:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d96c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d970:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d975:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d978:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d97c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d980:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d984:	89 d8                	mov    eax,ebx
c001d986:	c1 e8 08             	shr    eax,0x8
c001d989:	89 c6                	mov    esi,eax
c001d98b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d98f:	c1 e6 04             	shl    esi,0x4
c001d992:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d996:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d999:	85 d2                	test   edx,edx
c001d99b:	0f 85 bf 00 00 00    	jne    c001da60 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d9a1:	83 ec 0c             	sub    esp,0xc
c001d9a4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d9a8:	03 06                	add    eax,DWORD PTR [esi]
c001d9aa:	50                   	push   eax
c001d9ab:	e8 4b f8 ff ff       	call   c001d1fb <Thr::getAddressOfKernelSymbol(char const*)>
c001d9b0:	83 c4 10             	add    esp,0x10
c001d9b3:	89 c2                	mov    edx,eax
c001d9b5:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d9ba:	85 c0                	test   eax,eax
c001d9bc:	0f 85 9e 00 00 00    	jne    c001da60 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d9c2:	83 ec 0c             	sub    esp,0xc
c001d9c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d9c9:	03 06                	add    eax,DWORD PTR [esi]
c001d9cb:	50                   	push   eax
c001d9cc:	e8 8a 0b ff ff       	call   c000e55b <Krnl::resolveCompatibilitySymbol(char*)>
c001d9d1:	83 c4 10             	add    esp,0x10
c001d9d4:	89 c2                	mov    edx,eax
c001d9d6:	85 c0                	test   eax,eax
c001d9d8:	0f 85 82 00 00 00    	jne    c001da60 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d9de:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d9e2:	50                   	push   eax
c001d9e3:	50                   	push   eax
c001d9e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9e8:	03 06                	add    eax,DWORD PTR [esi]
c001d9ea:	50                   	push   eax
c001d9eb:	68 8c ce 02 c0       	push   0xc002ce8c
c001d9f0:	e8 5e 54 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001d9f5:	58                   	pop    eax
c001d9f6:	5a                   	pop    edx
c001d9f7:	68 a6 ce 02 c0       	push   0xc002cea6
c001d9fc:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001da03:	50                   	push   eax
c001da04:	e8 1f 2e fe ff       	call   c0000828 <strcpy>
c001da09:	59                   	pop    ecx
c001da0a:	58                   	pop    eax
c001da0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da0f:	03 06                	add    eax,DWORD PTR [esi]
c001da11:	50                   	push   eax
c001da12:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001da19:	50                   	push   eax
c001da1a:	e8 49 2f fe ff       	call   c0000968 <strcat>
c001da1f:	58                   	pop    eax
c001da20:	5a                   	pop    edx
c001da21:	68 3c cf 02 c0       	push   0xc002cf3c
c001da26:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001da2d:	50                   	push   eax
c001da2e:	e8 35 2f fe ff       	call   c0000968 <strcat>
c001da33:	83 c4 10             	add    esp,0x10
c001da36:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001da3b:	0f 84 5d 01 00 00    	je     c001db9e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001da41:	83 ec 0c             	sub    esp,0xc
c001da44:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001da4b:	50                   	push   eax
c001da4c:	e8 9c ce ff ff       	call   c001a8ed <Krnl::panic(char const*)>
c001da51:	83 c4 10             	add    esp,0x10
c001da54:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001da58:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001da5c:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001da60:	80 fb 01             	cmp    bl,0x1
c001da63:	0f 85 88 00 00 00    	jne    c001daf1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001da69:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001da70:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001da74:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001da78:	01 ce                	add    esi,ecx
c001da7a:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001da80:	0f 94 c0             	sete   al
c001da83:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001da89:	0f 94 c3             	sete   bl
c001da8c:	09 c3                	or     ebx,eax
c001da8e:	8b 06                	mov    eax,DWORD PTR [esi]
c001da90:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001da95:	74 41                	je     c001dad8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c001da97:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001da9a:	84 db                	test   bl,bl
c001da9c:	75 15                	jne    c001dab3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001da9e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001daa2:	66 83 f8 0c          	cmp    ax,0xc
c001daa6:	76 05                	jbe    c001daad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c001daa8:	b8 0c 00 00 00       	mov    eax,0xc
c001daad:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001dab1:	76 37                	jbe    c001daea <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001dab3:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001dab7:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001dabc:	0f 84 dc 00 00 00    	je     c001db9e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001dac2:	83 ec 0c             	sub    esp,0xc
c001dac5:	68 bd ce 02 c0       	push   0xc002cebd
c001daca:	e8 1e ce ff ff       	call   c001a8ed <Krnl::panic(char const*)>
c001dacf:	83 c4 10             	add    esp,0x10
c001dad2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001dad6:	eb 12                	jmp    c001daea <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001dad8:	01 c1                	add    ecx,eax
c001dada:	84 db                	test   bl,bl
c001dadc:	75 0c                	jne    c001daea <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001dade:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001dae2:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001dae6:	77 02                	ja     c001daea <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001dae8:	01 d1                	add    ecx,edx
c001daea:	89 0e                	mov    DWORD PTR [esi],ecx
c001daec:	e9 ea 00 00 00       	jmp    c001dbdb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001daf1:	80 fb 02             	cmp    bl,0x2
c001daf4:	75 7c                	jne    c001db72 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001daf6:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001dafd:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001db01:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001db05:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001db0b:	74 20                	je     c001db2d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001db0d:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001db13:	74 18                	je     c001db2d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001db15:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001db19:	b9 0a 00 00 00       	mov    ecx,0xa
c001db1e:	66 83 f8 0e          	cmp    ax,0xe
c001db22:	77 03                	ja     c001db27 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001db24:	8d 48 fc             	lea    ecx,[eax-0x4]
c001db27:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001db2b:	76 1f                	jbe    c001db4c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001db2d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001db31:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001db36:	74 66                	je     c001db9e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001db38:	83 ec 0c             	sub    esp,0xc
c001db3b:	68 d9 ce 02 c0       	push   0xc002ced9
c001db40:	e8 a8 cd ff ff       	call   c001a8ed <Krnl::panic(char const*)>
c001db45:	83 c4 10             	add    esp,0x10
c001db48:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001db4c:	8b 06                	mov    eax,DWORD PTR [esi]
c001db4e:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001db53:	74 13                	je     c001db68 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001db55:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001db59:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001db60:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001db64:	01 c8                	add    eax,ecx
c001db66:	eb 04                	jmp    c001db6c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c001db68:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001db6c:	01 c2                	add    edx,eax
c001db6e:	89 16                	mov    DWORD PTR [esi],edx
c001db70:	eb 69                	jmp    c001dbdb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001db72:	0f b6 db             	movzx  ebx,bl
c001db75:	50                   	push   eax
c001db76:	50                   	push   eax
c001db77:	53                   	push   ebx
c001db78:	68 f5 ce 02 c0       	push   0xc002cef5
c001db7d:	e8 d1 52 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001db82:	83 c4 10             	add    esp,0x10
c001db85:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001db8a:	74 12                	je     c001db9e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001db8c:	83 ec 0c             	sub    esp,0xc
c001db8f:	68 00 cf 02 c0       	push   0xc002cf00
c001db94:	e8 54 cd ff ff       	call   c001a8ed <Krnl::panic(char const*)>
c001db99:	83 c4 10             	add    esp,0x10
c001db9c:	eb 3d                	jmp    c001dbdb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001db9e:	83 ec 0c             	sub    esp,0xc
c001dba1:	55                   	push   ebp
c001dba2:	e8 cd 58 ff ff       	call   c0013474 <File::close()>
c001dba7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001dbaa:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001dbad:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001dbb0:	59                   	pop    ecx
c001dbb1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001dbb5:	e8 fe 1c ff ff       	call   c000f8b8 <free>
c001dbba:	5b                   	pop    ebx
c001dbbb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001dbbf:	e8 f4 1c ff ff       	call   c000f8b8 <free>
c001dbc4:	89 3c 24             	mov    DWORD PTR [esp],edi
c001dbc7:	e8 ec 1c ff ff       	call   c000f8b8 <free>
c001dbcc:	5e                   	pop    esi
c001dbcd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dbd1:	e8 e2 1c ff ff       	call   c000f8b8 <free>
c001dbd6:	83 c4 10             	add    esp,0x10
c001dbd9:	eb 21                	jmp    c001dbfc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001dbdb:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001dbdf:	e9 76 fd ff ff       	jmp    c001d95a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001dbe4:	83 ec 0c             	sub    esp,0xc
c001dbe7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001dbeb:	e8 c8 1c ff ff       	call   c000f8b8 <free>
c001dbf0:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001dbf4:	83 c4 10             	add    esp,0x10
c001dbf7:	e9 eb fc ff ff       	jmp    c001d8e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001dbfc:	31 c0                	xor    eax,eax
c001dbfe:	eb 33                	jmp    c001dc33 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c001dc00:	83 ec 0c             	sub    esp,0xc
c001dc03:	55                   	push   ebp
c001dc04:	e8 6b 58 ff ff       	call   c0013474 <File::close()>
c001dc09:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001dc0c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001dc0f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001dc12:	58                   	pop    eax
c001dc13:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001dc17:	e8 9c 1c ff ff       	call   c000f8b8 <free>
c001dc1c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001dc1f:	e8 94 1c ff ff       	call   c000f8b8 <free>
c001dc24:	5a                   	pop    edx
c001dc25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dc29:	e8 8a 1c ff ff       	call   c000f8b8 <free>
c001dc2e:	83 c4 10             	add    esp,0x10
c001dc31:	b0 01                	mov    al,0x1
c001dc33:	81 c4 5c 03 00 00    	add    esp,0x35c
c001dc39:	5b                   	pop    ebx
c001dc3a:	5e                   	pop    esi
c001dc3b:	5f                   	pop    edi
c001dc3c:	5d                   	pop    ebp
c001dc3d:	c3                   	ret    

c001dc3e <Thr::getDriverBaseFromAddress(unsigned long)>:
c001dc3e:	56                   	push   esi
c001dc3f:	31 d2                	xor    edx,edx
c001dc41:	53                   	push   ebx
c001dc42:	8b 1d 00 20 03 c0    	mov    ebx,DWORD PTR ds:0xc0032000
c001dc48:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dc4c:	39 d3                	cmp    ebx,edx
c001dc4e:	7e 1b                	jle    c001dc6b <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001dc50:	8b 04 95 20 22 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcdde0]
c001dc57:	39 c8                	cmp    eax,ecx
c001dc59:	77 0d                	ja     c001dc68 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001dc5b:	8b 34 95 20 20 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffcdfe0]
c001dc62:	01 c6                	add    esi,eax
c001dc64:	39 ce                	cmp    esi,ecx
c001dc66:	77 05                	ja     c001dc6d <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001dc68:	42                   	inc    edx
c001dc69:	eb e1                	jmp    c001dc4c <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001dc6b:	31 c0                	xor    eax,eax
c001dc6d:	5b                   	pop    ebx
c001dc6e:	5e                   	pop    esi
c001dc6f:	c3                   	ret    

c001dc70 <Thr::getDriverNameFromAddress(unsigned long)>:
c001dc70:	53                   	push   ebx
c001dc71:	31 c0                	xor    eax,eax
c001dc73:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001dc77:	8b 1d 00 20 03 c0    	mov    ebx,DWORD PTR ds:0xc0032000
c001dc7d:	39 c3                	cmp    ebx,eax
c001dc7f:	7e 22                	jle    c001dca3 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001dc81:	8b 14 85 20 22 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcdde0]
c001dc88:	39 ca                	cmp    edx,ecx
c001dc8a:	77 14                	ja     c001dca0 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001dc8c:	03 14 85 20 20 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffcdfe0]
c001dc93:	39 ca                	cmp    edx,ecx
c001dc95:	76 09                	jbe    c001dca0 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001dc97:	8b 04 85 20 24 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdbe0]
c001dc9e:	eb 05                	jmp    c001dca5 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001dca0:	40                   	inc    eax
c001dca1:	eb da                	jmp    c001dc7d <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001dca3:	31 c0                	xor    eax,eax
c001dca5:	5b                   	pop    ebx
c001dca6:	c3                   	ret    

c001dca7 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001dca7:	53                   	push   ebx
c001dca8:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001dcac:	53                   	push   ebx
c001dcad:	e8 8c ff ff ff       	call   c001dc3e <Thr::getDriverBaseFromAddress(unsigned long)>
c001dcb2:	5a                   	pop    edx
c001dcb3:	31 d2                	xor    edx,edx
c001dcb5:	85 c0                	test   eax,eax
c001dcb7:	74 04                	je     c001dcbd <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001dcb9:	89 da                	mov    edx,ebx
c001dcbb:	29 c2                	sub    edx,eax
c001dcbd:	89 d0                	mov    eax,edx
c001dcbf:	5b                   	pop    ebx
c001dcc0:	c3                   	ret    

c001dcc1 <Thr::loadDLL(char const*, bool)>:
c001dcc1:	55                   	push   ebp
c001dcc2:	57                   	push   edi
c001dcc3:	56                   	push   esi
c001dcc4:	53                   	push   ebx
c001dcc5:	81 ec 34 01 00 00    	sub    esp,0x134
c001dccb:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001dcd2:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001dcd9:	56                   	push   esi
c001dcda:	68 18 cf 02 c0       	push   0xc002cf18
c001dcdf:	e8 6f 51 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001dce4:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001dceb:	e8 b8 1b ff ff       	call   c000f8a8 <malloc>
c001dcf0:	83 c4 0c             	add    esp,0xc
c001dcf3:	89 c3                	mov    ebx,eax
c001dcf5:	ff 35 f0 27 03 c0    	push   DWORD PTR ds:0xc00327f0
c001dcfb:	56                   	push   esi
c001dcfc:	50                   	push   eax
c001dcfd:	e8 b0 56 ff ff       	call   c00133b2 <File::File(char const*, Process*)>
c001dd02:	83 c4 10             	add    esp,0x10
c001dd05:	85 db                	test   ebx,ebx
c001dd07:	75 3c                	jne    c001dd45 <Thr::loadDLL(char const*, bool)+0x84>
c001dd09:	89 f8                	mov    eax,edi
c001dd0b:	84 c0                	test   al,al
c001dd0d:	0f 84 cc 01 00 00    	je     c001dedf <Thr::loadDLL(char const*, bool)+0x21e>
c001dd13:	55                   	push   ebp
c001dd14:	55                   	push   ebp
c001dd15:	68 29 cf 02 c0       	push   0xc002cf29
c001dd1a:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001dd1e:	55                   	push   ebp
c001dd1f:	e8 04 2b fe ff       	call   c0000828 <strcpy>
c001dd24:	58                   	pop    eax
c001dd25:	5a                   	pop    edx
c001dd26:	56                   	push   esi
c001dd27:	55                   	push   ebp
c001dd28:	e8 3b 2c fe ff       	call   c0000968 <strcat>
c001dd2d:	59                   	pop    ecx
c001dd2e:	58                   	pop    eax
c001dd2f:	68 3c cf 02 c0       	push   0xc002cf3c
c001dd34:	55                   	push   ebp
c001dd35:	e8 2e 2c fe ff       	call   c0000968 <strcat>
c001dd3a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001dd3d:	e8 ab cb ff ff       	call   c001a8ed <Krnl::panic(char const*)>
c001dd42:	83 c4 10             	add    esp,0x10
c001dd45:	51                   	push   ecx
c001dd46:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001dd4a:	50                   	push   eax
c001dd4b:	8d 44 24 20          	lea    eax,[esp+0x20]
c001dd4f:	50                   	push   eax
c001dd50:	53                   	push   ebx
c001dd51:	e8 6c 59 ff ff       	call   c00136c2 <File::stat(unsigned long long*, bool*)>
c001dd56:	83 c4 10             	add    esp,0x10
c001dd59:	85 db                	test   ebx,ebx
c001dd5b:	74 0c                	je     c001dd69 <Thr::loadDLL(char const*, bool)+0xa8>
c001dd5d:	83 ec 0c             	sub    esp,0xc
c001dd60:	8b 03                	mov    eax,DWORD PTR [ebx]
c001dd62:	53                   	push   ebx
c001dd63:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001dd66:	83 c4 10             	add    esp,0x10
c001dd69:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001dd6e:	75 0a                	jne    c001dd7a <Thr::loadDLL(char const*, bool)+0xb9>
c001dd70:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dd74:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001dd78:	75 3c                	jne    c001ddb6 <Thr::loadDLL(char const*, bool)+0xf5>
c001dd7a:	89 f8                	mov    eax,edi
c001dd7c:	84 c0                	test   al,al
c001dd7e:	0f 84 43 01 00 00    	je     c001dec7 <Thr::loadDLL(char const*, bool)+0x206>
c001dd84:	51                   	push   ecx
c001dd85:	51                   	push   ecx
c001dd86:	68 29 cf 02 c0       	push   0xc002cf29
c001dd8b:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001dd8f:	53                   	push   ebx
c001dd90:	e8 93 2a fe ff       	call   c0000828 <strcpy>
c001dd95:	5d                   	pop    ebp
c001dd96:	58                   	pop    eax
c001dd97:	56                   	push   esi
c001dd98:	53                   	push   ebx
c001dd99:	e8 ca 2b fe ff       	call   c0000968 <strcat>
c001dd9e:	58                   	pop    eax
c001dd9f:	5a                   	pop    edx
c001dda0:	68 3c cf 02 c0       	push   0xc002cf3c
c001dda5:	53                   	push   ebx
c001dda6:	e8 bd 2b fe ff       	call   c0000968 <strcat>
c001ddab:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ddae:	e8 3a cb ff ff       	call   c001a8ed <Krnl::panic(char const*)>
c001ddb3:	83 c4 10             	add    esp,0x10
c001ddb6:	52                   	push   edx
c001ddb7:	6a 03                	push   0x3
c001ddb9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ddbd:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ddc1:	05 ff 0f 00 00       	add    eax,0xfff
c001ddc6:	83 d2 00             	adc    edx,0x0
c001ddc9:	0f ac d0 0c          	shrd   eax,edx,0xc
c001ddcd:	50                   	push   eax
c001ddce:	ff 35 10 f4 02 c0    	push   DWORD PTR ds:0xc002f410
c001ddd4:	e8 ad 45 ff ff       	call   c0012386 <VAS::allocatePages(int, int)>
c001ddd9:	59                   	pop    ecx
c001ddda:	89 c3                	mov    ebx,eax
c001dddc:	5d                   	pop    ebp
c001dddd:	50                   	push   eax
c001ddde:	68 3e cf 02 c0       	push   0xc002cf3e
c001dde3:	e8 6b 50 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001dde8:	89 34 24             	mov    DWORD PTR [esp],esi
c001ddeb:	e8 98 29 fe ff       	call   c0000788 <strlen>
c001ddf0:	8b 2d 00 20 03 c0    	mov    ebp,DWORD PTR ds:0xc0032000
c001ddf6:	40                   	inc    eax
c001ddf7:	89 04 24             	mov    DWORD PTR [esp],eax
c001ddfa:	e8 a9 1a ff ff       	call   c000f8a8 <malloc>
c001ddff:	89 04 ad 20 24 03 c0 	mov    DWORD PTR [ebp*4-0x3ffcdbe0],eax
c001de06:	58                   	pop    eax
c001de07:	a1 00 20 03 c0       	mov    eax,ds:0xc0032000
c001de0c:	5a                   	pop    edx
c001de0d:	56                   	push   esi
c001de0e:	ff 34 85 20 24 03 c0 	push   DWORD PTR [eax*4-0x3ffcdbe0]
c001de15:	e8 0e 2a fe ff       	call   c0000828 <strcpy>
c001de1a:	a1 00 20 03 c0       	mov    eax,ds:0xc0032000
c001de1f:	8d 50 01             	lea    edx,[eax+0x1]
c001de22:	89 1c 85 20 22 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdde0],ebx
c001de29:	89 15 00 20 03 c0    	mov    DWORD PTR ds:0xc0032000,edx
c001de2f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001de33:	83 c4 0c             	add    esp,0xc
c001de36:	89 14 85 20 20 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdfe0],edx
c001de3d:	6a 01                	push   0x1
c001de3f:	53                   	push   ebx
c001de40:	56                   	push   esi
c001de41:	e8 c2 f6 ff ff       	call   c001d508 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001de46:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001de4a:	83 c4 10             	add    esp,0x10
c001de4d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001de52:	0f 85 83 00 00 00    	jne    c001dedb <Thr::loadDLL(char const*, bool)+0x21a>
c001de58:	89 f8                	mov    eax,edi
c001de5a:	84 c0                	test   al,al
c001de5c:	74 6d                	je     c001decb <Thr::loadDLL(char const*, bool)+0x20a>
c001de5e:	83 ec 0c             	sub    esp,0xc
c001de61:	68 4b cf 02 c0       	push   0xc002cf4b
c001de66:	e8 82 ca ff ff       	call   c001a8ed <Krnl::panic(char const*)>
c001de6b:	83 c4 10             	add    esp,0x10
c001de6e:	eb 5b                	jmp    c001decb <Thr::loadDLL(char const*, bool)+0x20a>
c001de70:	89 ee                	mov    esi,ebp
c001de72:	50                   	push   eax
c001de73:	c1 e6 0c             	shl    esi,0xc
c001de76:	50                   	push   eax
c001de77:	01 de                	add    esi,ebx
c001de79:	56                   	push   esi
c001de7a:	ff 35 10 f4 02 c0    	push   DWORD PTR ds:0xc002f410
c001de80:	e8 69 40 ff ff       	call   c0011eee <VAS::getPageTableEntry(unsigned long)>
c001de85:	83 c4 10             	add    esp,0x10
c001de88:	f6 00 60             	test   BYTE PTR [eax],0x60
c001de8b:	75 0c                	jne    c001de99 <Thr::loadDLL(char const*, bool)+0x1d8>
c001de8d:	83 ec 0c             	sub    esp,0xc
c001de90:	56                   	push   esi
c001de91:	e8 f4 1f ff ff       	call   c000fe8a <Phys::freePage(unsigned long)>
c001de96:	83 c4 10             	add    esp,0x10
c001de99:	45                   	inc    ebp
c001de9a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001de9e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dea2:	05 ff 0f 00 00       	add    eax,0xfff
c001dea7:	bf 00 00 00 00       	mov    edi,0x0
c001deac:	83 d2 00             	adc    edx,0x0
c001deaf:	0f ac d0 0c          	shrd   eax,edx,0xc
c001deb3:	c1 ea 0c             	shr    edx,0xc
c001deb6:	39 c5                	cmp    ebp,eax
c001deb8:	89 d1                	mov    ecx,edx
c001deba:	89 f8                	mov    eax,edi
c001debc:	19 c8                	sbb    eax,ecx
c001debe:	72 b0                	jb     c001de70 <Thr::loadDLL(char const*, bool)+0x1af>
c001dec0:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001dec5:	75 18                	jne    c001dedf <Thr::loadDLL(char const*, bool)+0x21e>
c001dec7:	31 db                	xor    ebx,ebx
c001dec9:	eb 14                	jmp    c001dedf <Thr::loadDLL(char const*, bool)+0x21e>
c001decb:	83 ec 0c             	sub    esp,0xc
c001dece:	68 6a cf 02 c0       	push   0xc002cf6a
c001ded3:	e8 15 ca ff ff       	call   c001a8ed <Krnl::panic(char const*)>
c001ded8:	83 c4 10             	add    esp,0x10
c001dedb:	31 ed                	xor    ebp,ebp
c001dedd:	eb bb                	jmp    c001de9a <Thr::loadDLL(char const*, bool)+0x1d9>
c001dedf:	81 c4 2c 01 00 00    	add    esp,0x12c
c001dee5:	89 d8                	mov    eax,ebx
c001dee7:	5b                   	pop    ebx
c001dee8:	5e                   	pop    esi
c001dee9:	5f                   	pop    edi
c001deea:	5d                   	pop    ebp
c001deeb:	c3                   	ret    

c001deec <Thr::executeDLL(unsigned long, void*)>:
c001deec:	56                   	push   esi
c001deed:	53                   	push   ebx
c001deee:	52                   	push   edx
c001deef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001def3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001def7:	85 db                	test   ebx,ebx
c001def9:	75 10                	jne    c001df0b <Thr::executeDLL(unsigned long, void*)+0x1f>
c001defb:	83 ec 0c             	sub    esp,0xc
c001defe:	68 86 cf 02 c0       	push   0xc002cf86
c001df03:	e8 e5 c9 ff ff       	call   c001a8ed <Krnl::panic(char const*)>
c001df08:	83 c4 10             	add    esp,0x10
c001df0b:	50                   	push   eax
c001df0c:	50                   	push   eax
c001df0d:	53                   	push   ebx
c001df0e:	68 b0 cf 02 c0       	push   0xc002cfb0
c001df13:	e8 3b 4f ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001df18:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001df1c:	89 d8                	mov    eax,ebx
c001df1e:	83 c4 14             	add    esp,0x14
c001df21:	5b                   	pop    ebx
c001df22:	5e                   	pop    esi
c001df23:	ff e0                	jmp    eax
c001df25:	90                   	nop

c001df26 <userModeEntryPoint(void*)>:
c001df26:	a1 c8 27 03 c0       	mov    eax,ds:0xc00327c8
c001df2b:	48                   	dec    eax
c001df2c:	a3 c8 27 03 c0       	mov    ds:0xc00327c8,eax
c001df31:	75 01                	jne    c001df34 <userModeEntryPoint(void*)+0xe>
c001df33:	fb                   	sti    
c001df34:	fb                   	sti    
c001df35:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001df3a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001df3d:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001df43:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001df47:	e9 de 23 fe ff       	jmp    c000032a <goToUsermode>

c001df4c <changeTSS>:
c001df4c:	83 ec 14             	sub    esp,0x14
c001df4f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001df54:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001df57:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001df5c:	c1 e2 15             	shl    edx,0x15
c001df5f:	29 d0                	sub    eax,edx
c001df61:	50                   	push   eax
c001df62:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c001df67:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001df6d:	05 7c 11 00 00       	add    eax,0x117c
c001df72:	50                   	push   eax
c001df73:	e8 14 34 ff ff       	call   c001138c <TSS::setESP(unsigned long)>
c001df78:	83 c4 1c             	add    esp,0x1c
c001df7b:	c3                   	ret    

c001df7c <switchToThread(ThreadControlBlock*)>:
c001df7c:	57                   	push   edi
c001df7d:	a1 c4 27 03 c0       	mov    eax,ds:0xc00327c4
c001df82:	56                   	push   esi
c001df83:	85 c0                	test   eax,eax
c001df85:	53                   	push   ebx
c001df86:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001df8a:	0f 85 88 00 00 00    	jne    c001e018 <switchToThread(ThreadControlBlock*)+0x9c>
c001df90:	8a 41 44             	mov    al,BYTE PTR [ecx+0x44]
c001df93:	3c ff                	cmp    al,0xff
c001df95:	74 7d                	je     c001e014 <switchToThread(ThreadControlBlock*)+0x98>
c001df97:	0f b6 d0             	movzx  edx,al
c001df9a:	b8 84 03 00 00       	mov    eax,0x384
c001df9f:	29 d0                	sub    eax,edx
c001dfa1:	c1 e0 10             	shl    eax,0x10
c001dfa4:	03 41 38             	add    eax,DWORD PTR [ecx+0x38]
c001dfa7:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001dfaa:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c001dfaf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001dfb5:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001dfbc:	74 4a                	je     c001e008 <switchToThread(ThreadControlBlock*)+0x8c>
c001dfbe:	0f 31                	rdtsc  
c001dfc0:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c001dfc5:	89 c6                	mov    esi,eax
c001dfc7:	89 d7                	mov    edi,edx
c001dfc9:	2b 35 f8 27 03 c0    	sub    esi,DWORD PTR ds:0xc00327f8
c001dfcf:	89 15 0c 28 03 c0    	mov    DWORD PTR ds:0xc003280c,edx
c001dfd5:	1b 3d fc 27 03 c0    	sbb    edi,DWORD PTR ds:0xc00327fc
c001dfdb:	89 35 00 28 03 c0    	mov    DWORD PTR ds:0xc0032800,esi
c001dfe1:	a3 f8 27 03 c0       	mov    ds:0xc00327f8,eax
c001dfe6:	89 3d 04 28 03 c0    	mov    DWORD PTR ds:0xc0032804,edi
c001dfec:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001dff2:	89 15 fc 27 03 c0    	mov    DWORD PTR ds:0xc00327fc,edx
c001dff8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001dffb:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001dffe:	01 c6                	add    esi,eax
c001e000:	11 d7                	adc    edi,edx
c001e002:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001e005:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c001e008:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001e00c:	5b                   	pop    ebx
c001e00d:	5e                   	pop    esi
c001e00e:	5f                   	pop    edi
c001e00f:	e9 4e 23 fe ff       	jmp    c0000362 <switchToThreadASM>
c001e014:	31 c0                	xor    eax,eax
c001e016:	eb 8f                	jmp    c001dfa7 <switchToThread(ThreadControlBlock*)+0x2b>
c001e018:	5b                   	pop    ebx
c001e019:	c7 05 c0 27 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00327c0,0x1
c001e023:	5e                   	pop    esi
c001e024:	5f                   	pop    edi
c001e025:	c3                   	ret    

c001e026 <Process::addArgs(char**)>:
c001e026:	57                   	push   edi
c001e027:	56                   	push   esi
c001e028:	53                   	push   ebx
c001e029:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e02d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001e031:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001e03b:	85 ff                	test   edi,edi
c001e03d:	74 3d                	je     c001e07c <Process::addArgs(char**)+0x56>
c001e03f:	8b 07                	mov    eax,DWORD PTR [edi]
c001e041:	85 c0                	test   eax,eax
c001e043:	74 37                	je     c001e07c <Process::addArgs(char**)+0x56>
c001e045:	31 db                	xor    ebx,ebx
c001e047:	83 ec 0c             	sub    esp,0xc
c001e04a:	50                   	push   eax
c001e04b:	e8 38 27 fe ff       	call   c0000788 <strlen>
c001e050:	40                   	inc    eax
c001e051:	89 04 24             	mov    DWORD PTR [esp],eax
c001e054:	e8 4f 18 ff ff       	call   c000f8a8 <malloc>
c001e059:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001e060:	5a                   	pop    edx
c001e061:	59                   	pop    ecx
c001e062:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001e065:	43                   	inc    ebx
c001e066:	50                   	push   eax
c001e067:	e8 bc 27 fe ff       	call   c0000828 <strcpy>
c001e06c:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001e072:	83 c4 10             	add    esp,0x10
c001e075:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001e078:	85 c0                	test   eax,eax
c001e07a:	75 cb                	jne    c001e047 <Process::addArgs(char**)+0x21>
c001e07c:	5b                   	pop    ebx
c001e07d:	5e                   	pop    esi
c001e07e:	5f                   	pop    edi
c001e07f:	c3                   	ret    

c001e080 <Process::Process(char const*, Process*, char**)>:
c001e080:	56                   	push   esi
c001e081:	53                   	push   ebx
c001e082:	83 ec 14             	sub    esp,0x14
c001e085:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e089:	05 0c 02 00 00       	add    eax,0x20c
c001e08e:	bb 07 00 00 00       	mov    ebx,0x7
c001e093:	89 c6                	mov    esi,eax
c001e095:	85 db                	test   ebx,ebx
c001e097:	78 12                	js     c001e0ab <Process::Process(char const*, Process*, char**)+0x2b>
c001e099:	83 ec 0c             	sub    esp,0xc
c001e09c:	56                   	push   esi
c001e09d:	e8 e0 b8 00 00       	call   c0029982 <ThreadControlBlock::ThreadControlBlock()>
c001e0a2:	83 c4 10             	add    esp,0x10
c001e0a5:	83 c6 63             	add    esi,0x63
c001e0a8:	4b                   	dec    ebx
c001e0a9:	eb ea                	jmp    c001e095 <Process::Process(char const*, Process*, char**)+0x15>
c001e0ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e0af:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001e0b6:	83 ec 0c             	sub    esp,0xc
c001e0b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e0bd:	e8 84 c6 ff ff       	call   c001a746 <Krnl::newProcessEnv(Process*)>
c001e0c2:	83 c4 10             	add    esp,0x10
c001e0c5:	89 c2                	mov    edx,eax
c001e0c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e0cb:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001e0d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e0d5:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001e0de:	a1 10 e8 02 c0       	mov    eax,ds:0xc002e810
c001e0e3:	8d 50 01             	lea    edx,[eax+0x1]
c001e0e6:	89 15 10 e8 02 c0    	mov    DWORD PTR ds:0xc002e810,edx
c001e0ec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e0f0:	89 02                	mov    DWORD PTR [edx],eax
c001e0f2:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001e0fa:	83 ec 0c             	sub    esp,0xc
c001e0fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001e101:	e8 a2 17 ff ff       	call   c000f8a8 <malloc>
c001e106:	83 c4 10             	add    esp,0x10
c001e109:	89 c3                	mov    ebx,eax
c001e10b:	83 ec 08             	sub    esp,0x8
c001e10e:	6a 00                	push   0x0
c001e110:	53                   	push   ebx
c001e111:	e8 18 46 ff ff       	call   c001272e <VAS::VAS(bool)>
c001e116:	83 c4 10             	add    esp,0x10
c001e119:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e11d:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001e123:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e127:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e131:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e135:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e139:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001e13f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e143:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e149:	85 c0                	test   eax,eax
c001e14b:	74 42                	je     c001e18f <Process::Process(char const*, Process*, char**)+0x10f>
c001e14d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e151:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e157:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e15d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e161:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001e167:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e16b:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e171:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001e177:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e17b:	05 0c 01 00 00       	add    eax,0x10c
c001e180:	83 ec 08             	sub    esp,0x8
c001e183:	52                   	push   edx
c001e184:	50                   	push   eax
c001e185:	e8 9e 26 fe ff       	call   c0000828 <strcpy>
c001e18a:	83 c4 10             	add    esp,0x10
c001e18d:	eb 63                	jmp    c001e1f2 <Process::Process(char const*, Process*, char**)+0x172>
c001e18f:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c001e197:	83 ec 0c             	sub    esp,0xc
c001e19a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e19e:	e8 05 17 ff ff       	call   c000f8a8 <malloc>
c001e1a3:	83 c4 10             	add    esp,0x10
c001e1a6:	89 c3                	mov    ebx,eax
c001e1a8:	83 ec 08             	sub    esp,0x8
c001e1ab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e1af:	53                   	push   ebx
c001e1b0:	e8 b9 2e ff ff       	call   c001106e <VgaText::VgaText(char const*)>
c001e1b5:	83 c4 10             	add    esp,0x10
c001e1b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e1bc:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001e1c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e1c6:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e1cc:	83 ec 0c             	sub    esp,0xc
c001e1cf:	50                   	push   eax
c001e1d0:	e8 d0 23 ff ff       	call   c00105a5 <addToTerminalCycle(VgaText*)>
c001e1d5:	83 c4 10             	add    esp,0x10
c001e1d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e1dc:	05 0c 01 00 00       	add    eax,0x10c
c001e1e1:	83 ec 08             	sub    esp,0x8
c001e1e4:	68 cf cf 02 c0       	push   0xc002cfcf
c001e1e9:	50                   	push   eax
c001e1ea:	e8 39 26 fe ff       	call   c0000828 <strcpy>
c001e1ef:	83 c4 10             	add    esp,0x10
c001e1f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e1f6:	83 c0 0c             	add    eax,0xc
c001e1f9:	83 ec 08             	sub    esp,0x8
c001e1fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e200:	50                   	push   eax
c001e201:	e8 22 26 fe ff       	call   c0000828 <strcpy>
c001e206:	83 c4 10             	add    esp,0x10
c001e209:	83 ec 08             	sub    esp,0x8
c001e20c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001e210:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e214:	e8 0d fe ff ff       	call   c001e026 <Process::addArgs(char**)>
c001e219:	83 c4 10             	add    esp,0x10
c001e21c:	83 ec 08             	sub    esp,0x8
c001e21f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e223:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e227:	e8 a6 ed ff ff       	call   c001cfd2 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001e22c:	83 c4 10             	add    esp,0x10
c001e22f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001e233:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e237:	83 f0 01             	xor    eax,0x1
c001e23a:	88 c2                	mov    dl,al
c001e23c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e240:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001e246:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001e24b:	83 ec 08             	sub    esp,0x8
c001e24e:	50                   	push   eax
c001e24f:	68 fc d0 02 c0       	push   0xc002d0fc
c001e254:	e8 fa 4b ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001e259:	83 c4 10             	add    esp,0x10
c001e25c:	90                   	nop
c001e25d:	83 c4 14             	add    esp,0x14
c001e260:	5b                   	pop    ebx
c001e261:	5e                   	pop    esi
c001e262:	c3                   	ret    
c001e263:	90                   	nop

c001e264 <Process::Process(bool, char const*, Process*, char**)>:
c001e264:	56                   	push   esi
c001e265:	53                   	push   ebx
c001e266:	83 ec 24             	sub    esp,0x24
c001e269:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e26d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001e271:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e275:	05 0c 02 00 00       	add    eax,0x20c
c001e27a:	bb 07 00 00 00       	mov    ebx,0x7
c001e27f:	89 c6                	mov    esi,eax
c001e281:	85 db                	test   ebx,ebx
c001e283:	78 12                	js     c001e297 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001e285:	83 ec 0c             	sub    esp,0xc
c001e288:	56                   	push   esi
c001e289:	e8 f4 b6 00 00       	call   c0029982 <ThreadControlBlock::ThreadControlBlock()>
c001e28e:	83 c4 10             	add    esp,0x10
c001e291:	83 c6 63             	add    esi,0x63
c001e294:	4b                   	dec    ebx
c001e295:	eb ea                	jmp    c001e281 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001e297:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e29b:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001e2a2:	83 ec 0c             	sub    esp,0xc
c001e2a5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e2a9:	e8 98 c4 ff ff       	call   c001a746 <Krnl::newProcessEnv(Process*)>
c001e2ae:	83 c4 10             	add    esp,0x10
c001e2b1:	89 c2                	mov    edx,eax
c001e2b3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e2b7:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001e2bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e2c1:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001e2ca:	a1 10 e8 02 c0       	mov    eax,ds:0xc002e810
c001e2cf:	8d 50 01             	lea    edx,[eax+0x1]
c001e2d2:	89 15 10 e8 02 c0    	mov    DWORD PTR ds:0xc002e810,edx
c001e2d8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e2dc:	89 02                	mov    DWORD PTR [edx],eax
c001e2de:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001e2e6:	83 ec 0c             	sub    esp,0xc
c001e2e9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001e2ed:	e8 b6 15 ff ff       	call   c000f8a8 <malloc>
c001e2f2:	83 c4 10             	add    esp,0x10
c001e2f5:	89 c3                	mov    ebx,eax
c001e2f7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e2fc:	83 ec 08             	sub    esp,0x8
c001e2ff:	50                   	push   eax
c001e300:	53                   	push   ebx
c001e301:	e8 28 44 ff ff       	call   c001272e <VAS::VAS(bool)>
c001e306:	83 c4 10             	add    esp,0x10
c001e309:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e30d:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001e313:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e317:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e321:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e325:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e329:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001e32f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e333:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e339:	85 c0                	test   eax,eax
c001e33b:	74 42                	je     c001e37f <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001e33d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e341:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e347:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e34d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e351:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001e357:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e35b:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e361:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001e367:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e36b:	05 0c 01 00 00       	add    eax,0x10c
c001e370:	83 ec 08             	sub    esp,0x8
c001e373:	52                   	push   edx
c001e374:	50                   	push   eax
c001e375:	e8 ae 24 fe ff       	call   c0000828 <strcpy>
c001e37a:	83 c4 10             	add    esp,0x10
c001e37d:	eb 63                	jmp    c001e3e2 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001e37f:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c001e387:	83 ec 0c             	sub    esp,0xc
c001e38a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001e38e:	e8 15 15 ff ff       	call   c000f8a8 <malloc>
c001e393:	83 c4 10             	add    esp,0x10
c001e396:	89 c3                	mov    ebx,eax
c001e398:	83 ec 08             	sub    esp,0x8
c001e39b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001e39f:	53                   	push   ebx
c001e3a0:	e8 c9 2c ff ff       	call   c001106e <VgaText::VgaText(char const*)>
c001e3a5:	83 c4 10             	add    esp,0x10
c001e3a8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e3ac:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001e3b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e3b6:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e3bc:	83 ec 0c             	sub    esp,0xc
c001e3bf:	50                   	push   eax
c001e3c0:	e8 e0 21 ff ff       	call   c00105a5 <addToTerminalCycle(VgaText*)>
c001e3c5:	83 c4 10             	add    esp,0x10
c001e3c8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e3cc:	05 0c 01 00 00       	add    eax,0x10c
c001e3d1:	83 ec 08             	sub    esp,0x8
c001e3d4:	68 cf cf 02 c0       	push   0xc002cfcf
c001e3d9:	50                   	push   eax
c001e3da:	e8 49 24 fe ff       	call   c0000828 <strcpy>
c001e3df:	83 c4 10             	add    esp,0x10
c001e3e2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e3e6:	83 c0 0c             	add    eax,0xc
c001e3e9:	83 ec 08             	sub    esp,0x8
c001e3ec:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001e3f0:	50                   	push   eax
c001e3f1:	e8 32 24 fe ff       	call   c0000828 <strcpy>
c001e3f6:	83 c4 10             	add    esp,0x10
c001e3f9:	83 ec 08             	sub    esp,0x8
c001e3fc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e400:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e404:	e8 1d fc ff ff       	call   c001e026 <Process::addArgs(char**)>
c001e409:	83 c4 10             	add    esp,0x10
c001e40c:	90                   	nop
c001e40d:	83 c4 24             	add    esp,0x24
c001e410:	5b                   	pop    ebx
c001e411:	5e                   	pop    esi
c001e412:	c3                   	ret    

c001e413 <taskStartupFunction>:
c001e413:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e418:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001e41b:	c3                   	ret    

c001e41c <Semaphore::Semaphore(int)>:
c001e41c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e420:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e424:	89 10                	mov    DWORD PTR [eax],edx
c001e426:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e42a:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001e431:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e435:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e43c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e440:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e447:	90                   	nop
c001e448:	c3                   	ret    
c001e449:	90                   	nop

c001e44a <Mutex::Mutex()>:
c001e44a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e44e:	6a 01                	push   0x1
c001e450:	50                   	push   eax
c001e451:	e8 c6 ff ff ff       	call   c001e41c <Semaphore::Semaphore(int)>
c001e456:	83 c4 08             	add    esp,0x8
c001e459:	90                   	nop
c001e45a:	c3                   	ret    
c001e45b:	90                   	nop

c001e45c <Process::createThread(void (*)(void*), void*, int)>:
c001e45c:	55                   	push   ebp
c001e45d:	31 c9                	xor    ecx,ecx
c001e45f:	57                   	push   edi
c001e460:	56                   	push   esi
c001e461:	53                   	push   ebx
c001e462:	83 ec 1c             	sub    esp,0x1c
c001e465:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e469:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001e470:	89 f2                	mov    edx,esi
c001e472:	0f b7 c2             	movzx  eax,dx
c001e475:	83 e2 01             	and    edx,0x1
c001e478:	74 16                	je     c001e490 <Process::createThread(void (*)(void*), void*, int)+0x34>
c001e47a:	d1 f8                	sar    eax,1
c001e47c:	41                   	inc    ecx
c001e47d:	89 c2                	mov    edx,eax
c001e47f:	83 f9 10             	cmp    ecx,0x10
c001e482:	75 ee                	jne    c001e472 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001e484:	83 c4 1c             	add    esp,0x1c
c001e487:	31 db                	xor    ebx,ebx
c001e489:	89 d8                	mov    eax,ebx
c001e48b:	5b                   	pop    ebx
c001e48c:	5e                   	pop    esi
c001e48d:	5f                   	pop    edi
c001e48e:	5d                   	pop    ebp
c001e48f:	c3                   	ret    
c001e490:	b8 01 00 00 00       	mov    eax,0x1
c001e495:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e498:	d3 e0                	shl    eax,cl
c001e49a:	09 c6                	or     esi,eax
c001e49c:	8d 04 0a             	lea    eax,[edx+ecx*1]
c001e49f:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001e4a6:	89 c6                	mov    esi,eax
c001e4a8:	c1 e6 05             	shl    esi,0x5
c001e4ab:	01 f0                	add    eax,esi
c001e4ad:	01 d8                	add    eax,ebx
c001e4af:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c001e4b6:	75 0a                	jne    c001e4c2 <Process::createThread(void (*)(void*), void*, int)+0x66>
c001e4b8:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c001e4c2:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e4c8:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001e4cc:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001e4cf:	01 ca                	add    edx,ecx
c001e4d1:	83 ec 08             	sub    esp,0x8
c001e4d4:	89 d0                	mov    eax,edx
c001e4d6:	c1 e0 05             	shl    eax,0x5
c001e4d9:	01 d0                	add    eax,edx
c001e4db:	8a 54 24 44          	mov    dl,BYTE PTR [esp+0x44]
c001e4df:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e4e3:	01 d8                	add    eax,ebx
c001e4e5:	89 b8 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edi
c001e4eb:	89 a8 51 02 00 00    	mov    DWORD PTR [eax+0x251],ebp
c001e4f1:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001e4f7:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001e4fd:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001e503:	89 cd                	mov    ebp,ecx
c001e505:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001e509:	f7 dd                	neg    ebp
c001e50b:	c1 e5 15             	shl    ebp,0x15
c001e50e:	81 c5 e0 ff ff 01    	add    ebp,0x1ffffe0
c001e514:	89 a8 10 02 00 00    	mov    DWORD PTR [eax+0x210],ebp
c001e51a:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001e524:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001e52a:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001e534:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001e53e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e542:	8d 9c 03 0c 02 00 00 	lea    ebx,[ebx+eax*1+0x20c]
c001e549:	53                   	push   ebx
c001e54a:	68 e4 27 03 c0       	push   0xc00327e4
c001e54f:	e8 e8 b1 00 00       	call   c002973c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e554:	89 d8                	mov    eax,ebx
c001e556:	83 c4 10             	add    esp,0x10
c001e559:	83 c4 1c             	add    esp,0x1c
c001e55c:	5b                   	pop    ebx
c001e55d:	5e                   	pop    esi
c001e55e:	5f                   	pop    edi
c001e55f:	5d                   	pop    ebp
c001e560:	c3                   	ret    
c001e561:	90                   	nop

c001e562 <Process::createUserThread()>:
c001e562:	83 ec 0c             	sub    esp,0xc
c001e565:	68 80 00 00 00       	push   0x80
c001e56a:	6a 00                	push   0x0
c001e56c:	68 26 df 01 c0       	push   0xc001df26
c001e571:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e575:	e8 e2 fe ff ff       	call   c001e45c <Process::createThread(void (*)(void*), void*, int)>
c001e57a:	83 c4 1c             	add    esp,0x1c
c001e57d:	c3                   	ret    

c001e57e <setupMultitasking(void (*)())>:
c001e57e:	56                   	push   esi
c001e57f:	53                   	push   ebx
c001e580:	51                   	push   ecx
c001e581:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e585:	eb 10                	jmp    c001e597 <setupMultitasking(void (*)())+0x19>
c001e587:	83 ec 0c             	sub    esp,0xc
c001e58a:	68 e4 27 03 c0       	push   0xc00327e4
c001e58f:	e8 fa b0 00 00       	call   c002968e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e594:	83 c4 10             	add    esp,0x10
c001e597:	83 ec 0c             	sub    esp,0xc
c001e59a:	68 e4 27 03 c0       	push   0xc00327e4
c001e59f:	e8 c6 b0 00 00       	call   c002966a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e5a4:	83 c4 10             	add    esp,0x10
c001e5a7:	84 c0                	test   al,al
c001e5a9:	74 dc                	je     c001e587 <setupMultitasking(void (*)())+0x9>
c001e5ab:	83 ec 0c             	sub    esp,0xc
c001e5ae:	68 3f 07 00 00       	push   0x73f
c001e5b3:	e8 f0 12 ff ff       	call   c000f8a8 <malloc>
c001e5b8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e5bf:	89 c3                	mov    ebx,eax
c001e5c1:	6a 00                	push   0x0
c001e5c3:	68 d3 cf 02 c0       	push   0xc002cfd3
c001e5c8:	6a 01                	push   0x1
c001e5ca:	50                   	push   eax
c001e5cb:	e8 94 fc ff ff       	call   c001e264 <Process::Process(bool, char const*, Process*, char**)>
c001e5d0:	83 c4 18             	add    esp,0x18
c001e5d3:	89 1d f0 27 03 c0    	mov    DWORD PTR ds:0xc00327f0,ebx
c001e5d9:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e5df:	68 24 d1 02 c0       	push   0xc002d124
c001e5e4:	e8 6a 48 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001e5e9:	58                   	pop    eax
c001e5ea:	5a                   	pop    edx
c001e5eb:	6a 63                	push   0x63
c001e5ed:	68 58 d1 02 c0       	push   0xc002d158
c001e5f2:	e8 5c 48 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001e5f7:	59                   	pop    ecx
c001e5f8:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e5fe:	e8 73 26 ff ff       	call   c0010c76 <setActiveTerminal(VgaText*)>
c001e603:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001e60b:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c001e615:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e61b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001e61e:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001e628:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001e62e:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001e634:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001e63e:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001e648:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001e652:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001e658:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001e662:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001e668:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001e672:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001e678:	58                   	pop    eax
c001e679:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001e67f:	5a                   	pop    edx
c001e680:	68 cf cf 02 c0       	push   0xc002cfcf
c001e685:	50                   	push   eax
c001e686:	e8 9d 21 fe ff       	call   c0000828 <strcpy>
c001e68b:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001e692:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001e696:	83 c4 14             	add    esp,0x14
c001e699:	5b                   	pop    ebx
c001e69a:	5e                   	pop    esi
c001e69b:	e9 b4 1c fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001e6a0 <schedule()>:
c001e6a0:	a1 c4 27 03 c0       	mov    eax,ds:0xc00327c4
c001e6a5:	85 c0                	test   eax,eax
c001e6a7:	74 0b                	je     c001e6b4 <schedule()+0x14>
c001e6a9:	c7 05 c0 27 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00327c0,0x1
c001e6b3:	c3                   	ret    
c001e6b4:	53                   	push   ebx
c001e6b5:	83 ec 14             	sub    esp,0x14
c001e6b8:	68 e4 27 03 c0       	push   0xc00327e4
c001e6bd:	e8 a8 af 00 00       	call   c002966a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e6c2:	83 c4 10             	add    esp,0x10
c001e6c5:	84 c0                	test   al,al
c001e6c7:	75 38                	jne    c001e701 <schedule()+0x61>
c001e6c9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e6ce:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e6d1:	4a                   	dec    edx
c001e6d2:	74 32                	je     c001e706 <schedule()+0x66>
c001e6d4:	83 ec 0c             	sub    esp,0xc
c001e6d7:	68 e4 27 03 c0       	push   0xc00327e4
c001e6dc:	e8 a5 af 00 00       	call   c0029686 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e6e1:	c7 04 24 e4 27 03 c0 	mov    DWORD PTR [esp],0xc00327e4
c001e6e8:	89 c3                	mov    ebx,eax
c001e6ea:	e8 9f af 00 00       	call   c002968e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e6ef:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001e6f6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e6f9:	e8 7e f8 ff ff       	call   c001df7c <switchToThread(ThreadControlBlock*)>
c001e6fe:	83 c4 10             	add    esp,0x10
c001e701:	83 c4 08             	add    esp,0x8
c001e704:	5b                   	pop    ebx
c001e705:	c3                   	ret    
c001e706:	83 ec 08             	sub    esp,0x8
c001e709:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001e710:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e716:	68 e4 27 03 c0       	push   0xc00327e4
c001e71b:	e8 1c b0 00 00       	call   c002973c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e720:	83 c4 10             	add    esp,0x10
c001e723:	eb af                	jmp    c001e6d4 <schedule()+0x34>
c001e725:	90                   	nop

c001e726 <Semaphore::tryAcquire()>:
c001e726:	53                   	push   ebx
c001e727:	83 ec 08             	sub    esp,0x8
c001e72a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e72e:	fa                   	cli    
c001e72f:	a1 c8 27 03 c0       	mov    eax,ds:0xc00327c8
c001e734:	8d 50 01             	lea    edx,[eax+0x1]
c001e737:	89 15 c8 27 03 c0    	mov    DWORD PTR ds:0xc00327c8,edx
c001e73d:	8b 15 c4 27 03 c0    	mov    edx,DWORD PTR ds:0xc00327c4
c001e743:	8d 5a 01             	lea    ebx,[edx+0x1]
c001e746:	89 1d c4 27 03 c0    	mov    DWORD PTR ds:0xc00327c4,ebx
c001e74c:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001e74f:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001e751:	7c 2a                	jl     c001e77d <Semaphore::tryAcquire()+0x57>
c001e753:	89 15 c4 27 03 c0    	mov    DWORD PTR ds:0xc00327c4,edx
c001e759:	85 d2                	test   edx,edx
c001e75b:	75 0a                	jne    c001e767 <Semaphore::tryAcquire()+0x41>
c001e75d:	8b 15 c0 27 03 c0    	mov    edx,DWORD PTR ds:0xc00327c0
c001e763:	85 d2                	test   edx,edx
c001e765:	75 5b                	jne    c001e7c2 <Semaphore::tryAcquire()+0x9c>
c001e767:	a3 c8 27 03 c0       	mov    ds:0xc00327c8,eax
c001e76c:	85 c0                	test   eax,eax
c001e76e:	74 07                	je     c001e777 <Semaphore::tryAcquire()+0x51>
c001e770:	31 c0                	xor    eax,eax
c001e772:	83 c4 08             	add    esp,0x8
c001e775:	5b                   	pop    ebx
c001e776:	c3                   	ret    
c001e777:	fb                   	sti    
c001e778:	83 c4 08             	add    esp,0x8
c001e77b:	5b                   	pop    ebx
c001e77c:	c3                   	ret    
c001e77d:	43                   	inc    ebx
c001e77e:	89 15 c4 27 03 c0    	mov    DWORD PTR ds:0xc00327c4,edx
c001e784:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001e787:	85 d2                	test   edx,edx
c001e789:	75 1f                	jne    c001e7aa <Semaphore::tryAcquire()+0x84>
c001e78b:	8b 0d c0 27 03 c0    	mov    ecx,DWORD PTR ds:0xc00327c0
c001e791:	85 c9                	test   ecx,ecx
c001e793:	74 15                	je     c001e7aa <Semaphore::tryAcquire()+0x84>
c001e795:	c7 05 c0 27 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00327c0,0x0
c001e79f:	e8 fc fe ff ff       	call   c001e6a0 <schedule()>
c001e7a4:	a1 c8 27 03 c0       	mov    eax,ds:0xc00327c8
c001e7a9:	48                   	dec    eax
c001e7aa:	a3 c8 27 03 c0       	mov    ds:0xc00327c8,eax
c001e7af:	85 c0                	test   eax,eax
c001e7b1:	75 08                	jne    c001e7bb <Semaphore::tryAcquire()+0x95>
c001e7b3:	fb                   	sti    
c001e7b4:	b0 01                	mov    al,0x1
c001e7b6:	83 c4 08             	add    esp,0x8
c001e7b9:	5b                   	pop    ebx
c001e7ba:	c3                   	ret    
c001e7bb:	b0 01                	mov    al,0x1
c001e7bd:	83 c4 08             	add    esp,0x8
c001e7c0:	5b                   	pop    ebx
c001e7c1:	c3                   	ret    
c001e7c2:	c7 05 c0 27 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00327c0,0x0
c001e7cc:	e8 cf fe ff ff       	call   c001e6a0 <schedule()>
c001e7d1:	a1 c8 27 03 c0       	mov    eax,ds:0xc00327c8
c001e7d6:	48                   	dec    eax
c001e7d7:	a3 c8 27 03 c0       	mov    ds:0xc00327c8,eax
c001e7dc:	85 c0                	test   eax,eax
c001e7de:	75 90                	jne    c001e770 <Semaphore::tryAcquire()+0x4a>
c001e7e0:	eb 95                	jmp    c001e777 <Semaphore::tryAcquire()+0x51>

c001e7e2 <Semaphore::assertLocked(char const*)>:
c001e7e2:	83 ec 0c             	sub    esp,0xc
c001e7e5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e7e9:	fa                   	cli    
c001e7ea:	ff 05 c8 27 03 c0    	inc    DWORD PTR ds:0xc00327c8
c001e7f0:	a1 c4 27 03 c0       	mov    eax,ds:0xc00327c4
c001e7f5:	8d 48 01             	lea    ecx,[eax+0x1]
c001e7f8:	89 0d c4 27 03 c0    	mov    DWORD PTR ds:0xc00327c4,ecx
c001e7fe:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001e800:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001e803:	7c 24                	jl     c001e829 <Semaphore::assertLocked(char const*)+0x47>
c001e805:	a3 c4 27 03 c0       	mov    ds:0xc00327c4,eax
c001e80a:	85 c0                	test   eax,eax
c001e80c:	75 09                	jne    c001e817 <Semaphore::assertLocked(char const*)+0x35>
c001e80e:	a1 c0 27 03 c0       	mov    eax,ds:0xc00327c0
c001e813:	85 c0                	test   eax,eax
c001e815:	75 29                	jne    c001e840 <Semaphore::assertLocked(char const*)+0x5e>
c001e817:	a1 c8 27 03 c0       	mov    eax,ds:0xc00327c8
c001e81c:	48                   	dec    eax
c001e81d:	a3 c8 27 03 c0       	mov    ds:0xc00327c8,eax
c001e822:	75 01                	jne    c001e825 <Semaphore::assertLocked(char const*)+0x43>
c001e824:	fb                   	sti    
c001e825:	83 c4 0c             	add    esp,0xc
c001e828:	c3                   	ret    
c001e829:	83 ec 0c             	sub    esp,0xc
c001e82c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001e830:	e8 b8 c0 ff ff       	call   c001a8ed <Krnl::panic(char const*)>
c001e835:	a1 c4 27 03 c0       	mov    eax,ds:0xc00327c4
c001e83a:	83 c4 10             	add    esp,0x10
c001e83d:	48                   	dec    eax
c001e83e:	eb c5                	jmp    c001e805 <Semaphore::assertLocked(char const*)+0x23>
c001e840:	c7 05 c0 27 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00327c0,0x0
c001e84a:	e8 51 fe ff ff       	call   c001e6a0 <schedule()>
c001e84f:	eb c6                	jmp    c001e817 <Semaphore::assertLocked(char const*)+0x35>

c001e851 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e851:	83 ec 14             	sub    esp,0x14
c001e854:	ff 35 c8 27 03 c0    	push   DWORD PTR ds:0xc00327c8
c001e85a:	68 7c d1 02 c0       	push   0xc002d17c
c001e85f:	e8 ef 45 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001e864:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e869:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e86d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e870:	e8 2b fe ff ff       	call   c001e6a0 <schedule()>
c001e875:	a1 c8 27 03 c0       	mov    eax,ds:0xc00327c8
c001e87a:	83 c4 10             	add    esp,0x10
c001e87d:	48                   	dec    eax
c001e87e:	a3 c8 27 03 c0       	mov    ds:0xc00327c8,eax
c001e883:	85 c0                	test   eax,eax
c001e885:	75 06                	jne    c001e88d <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x3c>
c001e887:	fb                   	sti    
c001e888:	a1 c8 27 03 c0       	mov    eax,ds:0xc00327c8
c001e88d:	83 ec 08             	sub    esp,0x8
c001e890:	50                   	push   eax
c001e891:	68 b0 d1 02 c0       	push   0xc002d1b0
c001e896:	e8 b8 45 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001e89b:	83 c4 1c             	add    esp,0x1c
c001e89e:	c3                   	ret    

c001e89f <blockTask(TaskState)>:
c001e89f:	83 ec 0c             	sub    esp,0xc
c001e8a2:	fa                   	cli    
c001e8a3:	ff 05 c8 27 03 c0    	inc    DWORD PTR ds:0xc00327c8
c001e8a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e8ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e8b2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e8b5:	e8 e6 fd ff ff       	call   c001e6a0 <schedule()>
c001e8ba:	a1 c8 27 03 c0       	mov    eax,ds:0xc00327c8
c001e8bf:	48                   	dec    eax
c001e8c0:	a3 c8 27 03 c0       	mov    ds:0xc00327c8,eax
c001e8c5:	75 01                	jne    c001e8c8 <blockTask(TaskState)+0x29>
c001e8c7:	fb                   	sti    
c001e8c8:	83 c4 0c             	add    esp,0xc
c001e8cb:	c3                   	ret    

c001e8cc <waitTask(int, int*, int)>:
c001e8cc:	83 ec 18             	sub    esp,0x18
c001e8cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e8d4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e8d8:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e8db:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e8df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e8e4:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e8e7:	6a 07                	push   0x7
c001e8e9:	e8 b1 ff ff ff       	call   c001e89f <blockTask(TaskState)>
c001e8ee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e8f3:	83 c4 10             	add    esp,0x10
c001e8f6:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e8f9:	85 d2                	test   edx,edx
c001e8fb:	74 0a                	je     c001e907 <waitTask(int, int*, int)+0x3b>
c001e8fd:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e900:	89 02                	mov    DWORD PTR [edx],eax
c001e902:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e907:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e90a:	83 c4 0c             	add    esp,0xc
c001e90d:	c3                   	ret    

c001e90e <nanoSleepUntil(unsigned long long)>:
c001e90e:	83 ec 0c             	sub    esp,0xc
c001e911:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e915:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e919:	3b 05 10 f9 02 c0    	cmp    eax,DWORD PTR ds:0xc002f910
c001e91f:	89 d1                	mov    ecx,edx
c001e921:	1b 0d 14 f9 02 c0    	sbb    ecx,DWORD PTR ds:0xc002f914
c001e927:	73 04                	jae    c001e92d <nanoSleepUntil(unsigned long long)+0x1f>
c001e929:	83 c4 0c             	add    esp,0xc
c001e92c:	c3                   	ret    
c001e92d:	fa                   	cli    
c001e92e:	ff 05 c8 27 03 c0    	inc    DWORD PTR ds:0xc00327c8
c001e934:	83 ec 08             	sub    esp,0x8
c001e937:	ff 05 c4 27 03 c0    	inc    DWORD PTR ds:0xc00327c4
c001e93d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e943:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e946:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e949:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e94f:	68 d8 27 03 c0       	push   0xc00327d8
c001e954:	e8 e3 ad 00 00       	call   c002973c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e959:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e960:	e8 3a ff ff ff       	call   c001e89f <blockTask(TaskState)>
c001e965:	a1 c4 27 03 c0       	mov    eax,ds:0xc00327c4
c001e96a:	83 c4 10             	add    esp,0x10
c001e96d:	48                   	dec    eax
c001e96e:	a3 c4 27 03 c0       	mov    ds:0xc00327c4,eax
c001e973:	85 c0                	test   eax,eax
c001e975:	75 09                	jne    c001e980 <nanoSleepUntil(unsigned long long)+0x72>
c001e977:	a1 c0 27 03 c0       	mov    eax,ds:0xc00327c0
c001e97c:	85 c0                	test   eax,eax
c001e97e:	75 12                	jne    c001e992 <nanoSleepUntil(unsigned long long)+0x84>
c001e980:	a1 c8 27 03 c0       	mov    eax,ds:0xc00327c8
c001e985:	48                   	dec    eax
c001e986:	a3 c8 27 03 c0       	mov    ds:0xc00327c8,eax
c001e98b:	75 9c                	jne    c001e929 <nanoSleepUntil(unsigned long long)+0x1b>
c001e98d:	fb                   	sti    
c001e98e:	83 c4 0c             	add    esp,0xc
c001e991:	c3                   	ret    
c001e992:	c7 05 c0 27 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00327c0,0x0
c001e99c:	e8 ff fc ff ff       	call   c001e6a0 <schedule()>
c001e9a1:	eb dd                	jmp    c001e980 <nanoSleepUntil(unsigned long long)+0x72>

c001e9a3 <nanoSleep(unsigned long long)>:
c001e9a3:	a1 10 f9 02 c0       	mov    eax,ds:0xc002f910
c001e9a8:	8b 15 14 f9 02 c0    	mov    edx,DWORD PTR ds:0xc002f914
c001e9ae:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e9b2:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e9b6:	e9 53 ff ff ff       	jmp    c001e90e <nanoSleepUntil(unsigned long long)>

c001e9bb <sleep(unsigned long long)>:
c001e9bb:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e9c3:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e9c8:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e9cc:	01 ca                	add    edx,ecx
c001e9ce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e9d2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e9d6:	eb cb                	jmp    c001e9a3 <nanoSleep(unsigned long long)>

c001e9d8 <Semaphore::acquire()>:
c001e9d8:	83 ec 0c             	sub    esp,0xc
c001e9db:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e9df:	fa                   	cli    
c001e9e0:	a1 c4 27 03 c0       	mov    eax,ds:0xc00327c4
c001e9e5:	ff 05 c8 27 03 c0    	inc    DWORD PTR ds:0xc00327c8
c001e9eb:	8d 48 01             	lea    ecx,[eax+0x1]
c001e9ee:	89 0d c4 27 03 c0    	mov    DWORD PTR ds:0xc00327c4,ecx
c001e9f4:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001e9f7:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001e9f9:	7d 28                	jge    c001ea23 <Semaphore::acquire()+0x4b>
c001e9fb:	41                   	inc    ecx
c001e9fc:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001e9ff:	a3 c4 27 03 c0       	mov    ds:0xc00327c4,eax
c001ea04:	85 c0                	test   eax,eax
c001ea06:	75 09                	jne    c001ea11 <Semaphore::acquire()+0x39>
c001ea08:	a1 c0 27 03 c0       	mov    eax,ds:0xc00327c0
c001ea0d:	85 c0                	test   eax,eax
c001ea0f:	75 4e                	jne    c001ea5f <Semaphore::acquire()+0x87>
c001ea11:	a1 c8 27 03 c0       	mov    eax,ds:0xc00327c8
c001ea16:	48                   	dec    eax
c001ea17:	a3 c8 27 03 c0       	mov    ds:0xc00327c8,eax
c001ea1c:	75 01                	jne    c001ea1f <Semaphore::acquire()+0x47>
c001ea1e:	fb                   	sti    
c001ea1f:	83 c4 0c             	add    esp,0xc
c001ea22:	c3                   	ret    
c001ea23:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ea28:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ea2f:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001ea32:	85 c9                	test   ecx,ecx
c001ea34:	74 3a                	je     c001ea70 <Semaphore::acquire()+0x98>
c001ea36:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001ea39:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001ea3f:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001ea42:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ea47:	83 ec 0c             	sub    esp,0xc
c001ea4a:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001ea4d:	6a 05                	push   0x5
c001ea4f:	e8 4b fe ff ff       	call   c001e89f <blockTask(TaskState)>
c001ea54:	a1 c4 27 03 c0       	mov    eax,ds:0xc00327c4
c001ea59:	83 c4 10             	add    esp,0x10
c001ea5c:	48                   	dec    eax
c001ea5d:	eb a0                	jmp    c001e9ff <Semaphore::acquire()+0x27>
c001ea5f:	c7 05 c0 27 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00327c0,0x0
c001ea69:	e8 32 fc ff ff       	call   c001e6a0 <schedule()>
c001ea6e:	eb a1                	jmp    c001ea11 <Semaphore::acquire()+0x39>
c001ea70:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ea75:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001ea78:	eb c8                	jmp    c001ea42 <Semaphore::acquire()+0x6a>

c001ea7a <taskReturned>:
c001ea7a:	83 ec 18             	sub    esp,0x18
c001ea7d:	68 e4 d1 02 c0       	push   0xc002d1e4
c001ea82:	e8 66 be ff ff       	call   c001a8ed <Krnl::panic(char const*)>
c001ea87:	83 c4 10             	add    esp,0x10
c001ea8a:	83 ec 0c             	sub    esp,0xc
c001ea8d:	6a 02                	push   0x2
c001ea8f:	e8 0b fe ff ff       	call   c001e89f <blockTask(TaskState)>
c001ea94:	fa                   	cli    
c001ea95:	ff 05 c8 27 03 c0    	inc    DWORD PTR ds:0xc00327c8
c001ea9b:	e8 00 fc ff ff       	call   c001e6a0 <schedule()>
c001eaa0:	a1 c8 27 03 c0       	mov    eax,ds:0xc00327c8
c001eaa5:	83 c4 10             	add    esp,0x10
c001eaa8:	48                   	dec    eax
c001eaa9:	a3 c8 27 03 c0       	mov    ds:0xc00327c8,eax
c001eaae:	85 c0                	test   eax,eax
c001eab0:	75 d8                	jne    c001ea8a <taskReturned+0x10>
c001eab2:	fb                   	sti    
c001eab3:	eb d5                	jmp    c001ea8a <taskReturned+0x10>

c001eab5 <Thr::processFromPID(int)>:
c001eab5:	57                   	push   edi
c001eab6:	56                   	push   esi
c001eab7:	53                   	push   ebx
c001eab8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001eabc:	83 ec 0c             	sub    esp,0xc
c001eabf:	68 da cf 02 c0       	push   0xc002cfda
c001eac4:	e8 8a 43 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001eac9:	fa                   	cli    
c001eaca:	ff 05 c8 27 03 c0    	inc    DWORD PTR ds:0xc00327c8
c001ead0:	c7 04 24 e4 27 03 c0 	mov    DWORD PTR [esp],0xc00327e4
c001ead7:	e8 aa ab 00 00       	call   c0029686 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001eadc:	83 c4 10             	add    esp,0x10
c001eadf:	89 c7                	mov    edi,eax
c001eae1:	eb 14                	jmp    c001eaf7 <Thr::processFromPID(int)+0x42>
c001eae3:	83 ec 0c             	sub    esp,0xc
c001eae6:	68 e4 27 03 c0       	push   0xc00327e4
c001eaeb:	e8 96 ab 00 00       	call   c0029686 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001eaf0:	83 c4 10             	add    esp,0x10
c001eaf3:	39 f8                	cmp    eax,edi
c001eaf5:	74 49                	je     c001eb40 <Thr::processFromPID(int)+0x8b>
c001eaf7:	83 ec 0c             	sub    esp,0xc
c001eafa:	68 e4 27 03 c0       	push   0xc00327e4
c001eaff:	e8 82 ab 00 00       	call   c0029686 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001eb04:	c7 04 24 e4 27 03 c0 	mov    DWORD PTR [esp],0xc00327e4
c001eb0b:	89 c3                	mov    ebx,eax
c001eb0d:	e8 7c ab 00 00       	call   c002968e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001eb12:	58                   	pop    eax
c001eb13:	5a                   	pop    edx
c001eb14:	53                   	push   ebx
c001eb15:	68 e4 27 03 c0       	push   0xc00327e4
c001eb1a:	e8 1d ac 00 00       	call   c002973c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001eb1f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001eb22:	83 c4 10             	add    esp,0x10
c001eb25:	39 30                	cmp    DWORD PTR [eax],esi
c001eb27:	75 ba                	jne    c001eae3 <Thr::processFromPID(int)+0x2e>
c001eb29:	a1 c8 27 03 c0       	mov    eax,ds:0xc00327c8
c001eb2e:	48                   	dec    eax
c001eb2f:	a3 c8 27 03 c0       	mov    ds:0xc00327c8,eax
c001eb34:	74 07                	je     c001eb3d <Thr::processFromPID(int)+0x88>
c001eb36:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001eb39:	5b                   	pop    ebx
c001eb3a:	5e                   	pop    esi
c001eb3b:	5f                   	pop    edi
c001eb3c:	c3                   	ret    
c001eb3d:	fb                   	sti    
c001eb3e:	eb f6                	jmp    c001eb36 <Thr::processFromPID(int)+0x81>
c001eb40:	a1 c8 27 03 c0       	mov    eax,ds:0xc00327c8
c001eb45:	48                   	dec    eax
c001eb46:	a3 c8 27 03 c0       	mov    ds:0xc00327c8,eax
c001eb4b:	75 01                	jne    c001eb4e <Thr::processFromPID(int)+0x99>
c001eb4d:	fb                   	sti    
c001eb4e:	83 ec 0c             	sub    esp,0xc
c001eb51:	68 f5 cf 02 c0       	push   0xc002cff5
c001eb56:	e8 f8 42 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001eb5b:	83 c4 10             	add    esp,0x10
c001eb5e:	31 c0                	xor    eax,eax
c001eb60:	5b                   	pop    ebx
c001eb61:	5e                   	pop    esi
c001eb62:	5f                   	pop    edi
c001eb63:	c3                   	ret    

c001eb64 <unblockTask(ThreadControlBlock*)>:
c001eb64:	53                   	push   ebx
c001eb65:	83 ec 08             	sub    esp,0x8
c001eb68:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001eb6c:	fa                   	cli    
c001eb6d:	ff 05 c8 27 03 c0    	inc    DWORD PTR ds:0xc00327c8
c001eb73:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001eb76:	85 c0                	test   eax,eax
c001eb78:	74 66                	je     c001ebe0 <unblockTask(ThreadControlBlock*)+0x7c>
c001eb7a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001eb7d:	48                   	dec    eax
c001eb7e:	74 31                	je     c001ebb1 <unblockTask(ThreadControlBlock*)+0x4d>
c001eb80:	83 ec 0c             	sub    esp,0xc
c001eb83:	68 e4 27 03 c0       	push   0xc00327e4
c001eb88:	e8 f9 aa 00 00       	call   c0029686 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001eb8d:	83 c4 10             	add    esp,0x10
c001eb90:	85 c0                	test   eax,eax
c001eb92:	75 17                	jne    c001ebab <unblockTask(ThreadControlBlock*)+0x47>
c001eb94:	eb 68                	jmp    c001ebfe <unblockTask(ThreadControlBlock*)+0x9a>
c001eb96:	83 ec 08             	sub    esp,0x8
c001eb99:	50                   	push   eax
c001eb9a:	68 e4 27 03 c0       	push   0xc00327e4
c001eb9f:	e8 80 ae 00 00       	call   c0029a24 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001eba4:	83 c4 10             	add    esp,0x10
c001eba7:	85 c0                	test   eax,eax
c001eba9:	74 53                	je     c001ebfe <unblockTask(ThreadControlBlock*)+0x9a>
c001ebab:	39 c3                	cmp    ebx,eax
c001ebad:	75 e7                	jne    c001eb96 <unblockTask(ThreadControlBlock*)+0x32>
c001ebaf:	eb 1c                	jmp    c001ebcd <unblockTask(ThreadControlBlock*)+0x69>
c001ebb1:	83 ec 0c             	sub    esp,0xc
c001ebb4:	68 d4 d2 02 c0       	push   0xc002d2d4
c001ebb9:	e8 95 42 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001ebbe:	c7 04 24 60 d2 02 c0 	mov    DWORD PTR [esp],0xc002d260
c001ebc5:	e8 89 42 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001ebca:	83 c4 10             	add    esp,0x10
c001ebcd:	a1 c8 27 03 c0       	mov    eax,ds:0xc00327c8
c001ebd2:	48                   	dec    eax
c001ebd3:	a3 c8 27 03 c0       	mov    ds:0xc00327c8,eax
c001ebd8:	75 01                	jne    c001ebdb <unblockTask(ThreadControlBlock*)+0x77>
c001ebda:	fb                   	sti    
c001ebdb:	83 c4 08             	add    esp,0x8
c001ebde:	5b                   	pop    ebx
c001ebdf:	c3                   	ret    
c001ebe0:	83 ec 0c             	sub    esp,0xc
c001ebe3:	68 18 d2 02 c0       	push   0xc002d218
c001ebe8:	e8 66 42 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001ebed:	c7 04 24 60 d2 02 c0 	mov    DWORD PTR [esp],0xc002d260
c001ebf4:	e8 5a 42 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001ebf9:	83 c4 10             	add    esp,0x10
c001ebfc:	eb cf                	jmp    c001ebcd <unblockTask(ThreadControlBlock*)+0x69>
c001ebfe:	83 ec 08             	sub    esp,0x8
c001ec01:	53                   	push   ebx
c001ec02:	68 e4 27 03 c0       	push   0xc00327e4
c001ec07:	e8 30 ab 00 00       	call   c002973c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001ec0c:	83 c4 10             	add    esp,0x10
c001ec0f:	eb bc                	jmp    c001ebcd <unblockTask(ThreadControlBlock*)+0x69>

c001ec11 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001ec11:	55                   	push   ebp
c001ec12:	57                   	push   edi
c001ec13:	56                   	push   esi
c001ec14:	53                   	push   ebx
c001ec15:	83 ec 1c             	sub    esp,0x1c
c001ec18:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ec1c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ec1f:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001ec25:	85 ff                	test   edi,edi
c001ec27:	7e 20                	jle    c001ec49 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001ec29:	31 f6                	xor    esi,esi
c001ec2b:	83 ec 0c             	sub    esp,0xc
c001ec2e:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001ec35:	46                   	inc    esi
c001ec36:	e8 7d 0c ff ff       	call   c000f8b8 <free>
c001ec3b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ec3e:	83 c4 10             	add    esp,0x10
c001ec41:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001ec47:	7f e2                	jg     c001ec2b <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001ec49:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001ec53:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001ec58:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001ec5b:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001ec5e:	d3 c0                	rol    eax,cl
c001ec60:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001ec67:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001ec6a:	89 f7                	mov    edi,esi
c001ec6c:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001ec74:	0f 85 74 01 00 00    	jne    c001edee <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001ec7a:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001ec80:	85 ed                	test   ebp,ebp
c001ec82:	74 1b                	je     c001ec9f <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001ec84:	83 ec 0c             	sub    esp,0xc
c001ec87:	55                   	push   ebp
c001ec88:	e8 d5 b9 ff ff       	call   c001a662 <EnvVarContainer::~EnvVarContainer()>
c001ec8d:	59                   	pop    ecx
c001ec8e:	5e                   	pop    esi
c001ec8f:	6a 0c                	push   0xc
c001ec91:	55                   	push   ebp
c001ec92:	e8 dc 40 ff ff       	call   c0012d73 <operator delete(void*, unsigned long)>
c001ec97:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001ec9a:	83 c4 10             	add    esp,0x10
c001ec9d:	89 f7                	mov    edi,esi
c001ec9f:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001eca5:	85 c0                	test   eax,eax
c001eca7:	0f 84 aa 00 00 00    	je     c001ed57 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001ecad:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001ecb0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001ecb4:	31 c9                	xor    ecx,ecx
c001ecb6:	eb 10                	jmp    c001ecc8 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001ecb8:	41                   	inc    ecx
c001ecb9:	83 f9 10             	cmp    ecx,0x10
c001ecbc:	0f 84 95 00 00 00    	je     c001ed57 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001ecc2:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001ecc8:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001eccf:	d3 fa                	sar    edx,cl
c001ecd1:	83 e2 01             	and    edx,0x1
c001ecd4:	74 e2                	je     c001ecb8 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001ecd6:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001ecd9:	01 ca                	add    edx,ecx
c001ecdb:	89 d5                	mov    ebp,edx
c001ecdd:	c1 e5 05             	shl    ebp,0x5
c001ece0:	01 ea                	add    edx,ebp
c001ece2:	01 d0                	add    eax,edx
c001ece4:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001ecea:	83 fd 07             	cmp    ebp,0x7
c001eced:	75 c9                	jne    c001ecb8 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001ecef:	05 40 02 00 00       	add    eax,0x240
c001ecf4:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001ecf7:	83 fd ff             	cmp    ebp,0xffffffff
c001ecfa:	0f 8c 08 01 00 00    	jl     c001ee08 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001ed00:	0f 84 b9 01 00 00    	je     c001eebf <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001ed06:	85 ed                	test   ebp,ebp
c001ed08:	0f 84 a0 01 00 00    	je     c001eeae <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001ed0e:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001ed10:	75 a6                	jne    c001ecb8 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001ed12:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001ed18:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ed1c:	01 d0                	add    eax,edx
c001ed1e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001ed22:	83 ec 0c             	sub    esp,0xc
c001ed25:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001ed2b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ed2e:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001ed34:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001ed3b:	50                   	push   eax
c001ed3c:	e8 23 fe ff ff       	call   c001eb64 <unblockTask(ThreadControlBlock*)>
c001ed41:	83 c4 10             	add    esp,0x10
c001ed44:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001ed47:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ed4b:	89 f7                	mov    edi,esi
c001ed4d:	41                   	inc    ecx
c001ed4e:	83 f9 10             	cmp    ecx,0x10
c001ed51:	0f 85 6b ff ff ff    	jne    c001ecc2 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001ed57:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001ed5d:	85 c0                	test   eax,eax
c001ed5f:	74 5d                	je     c001edbe <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001ed61:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001ed67:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001ed6d:	74 4f                	je     c001edbe <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001ed6f:	83 ec 0c             	sub    esp,0xc
c001ed72:	68 e4 27 03 c0       	push   0xc00327e4
c001ed77:	e8 0a a9 00 00       	call   c0029686 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ed7c:	c7 04 24 e4 27 03 c0 	mov    DWORD PTR [esp],0xc00327e4
c001ed83:	89 c7                	mov    edi,eax
c001ed85:	e8 e0 a8 00 00       	call   c002966a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001ed8a:	83 c4 10             	add    esp,0x10
c001ed8d:	84 c0                	test   al,al
c001ed8f:	0f 84 e4 00 00 00    	je     c001ee79 <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001ed95:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ed98:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001ed9e:	85 d2                	test   edx,edx
c001eda0:	74 0f                	je     c001edb1 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001eda2:	83 ec 0c             	sub    esp,0xc
c001eda5:	8b 02                	mov    eax,DWORD PTR [edx]
c001eda7:	52                   	push   edx
c001eda8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001edab:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001edae:	83 c4 10             	add    esp,0x10
c001edb1:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001edbb:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001edbe:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001edc4:	85 db                	test   ebx,ebx
c001edc6:	74 16                	je     c001edde <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001edc8:	83 ec 0c             	sub    esp,0xc
c001edcb:	53                   	push   ebx
c001edcc:	e8 37 33 ff ff       	call   c0012108 <VAS::~VAS()>
c001edd1:	58                   	pop    eax
c001edd2:	5a                   	pop    edx
c001edd3:	6a 14                	push   0x14
c001edd5:	53                   	push   ebx
c001edd6:	e8 98 3f ff ff       	call   c0012d73 <operator delete(void*, unsigned long)>
c001eddb:	83 c4 10             	add    esp,0x10
c001edde:	83 ec 0c             	sub    esp,0xc
c001ede1:	68 0c d0 02 c0       	push   0xc002d00c
c001ede6:	e8 68 40 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001edeb:	83 c4 10             	add    esp,0x10
c001edee:	83 ec 08             	sub    esp,0x8
c001edf1:	68 3f 07 00 00       	push   0x73f
c001edf6:	68 1a d0 02 c0       	push   0xc002d01a
c001edfb:	e8 53 40 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001ee00:	83 c4 2c             	add    esp,0x2c
c001ee03:	5b                   	pop    ebx
c001ee04:	5e                   	pop    esi
c001ee05:	5f                   	pop    edi
c001ee06:	5d                   	pop    ebp
c001ee07:	c3                   	ret    
c001ee08:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ee0c:	83 ec 0c             	sub    esp,0xc
c001ee0f:	68 18 d3 02 c0       	push   0xc002d318
c001ee14:	e8 d4 ba ff ff       	call   c001a8ed <Krnl::panic(char const*)>
c001ee19:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001ee1c:	83 c4 10             	add    esp,0x10
c001ee1f:	89 f7                	mov    edi,esi
c001ee21:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ee25:	e9 8e fe ff ff       	jmp    c001ecb8 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001ee2a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ee30:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001ee36:	75 1c                	jne    c001ee54 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001ee38:	83 ec 0c             	sub    esp,0xc
c001ee3b:	68 80 d3 02 c0       	push   0xc002d380
c001ee40:	e8 0e 40 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001ee45:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001ee4c:	e8 4e fa ff ff       	call   c001e89f <blockTask(TaskState)>
c001ee51:	83 c4 10             	add    esp,0x10
c001ee54:	83 ec 08             	sub    esp,0x8
c001ee57:	56                   	push   esi
c001ee58:	68 e4 27 03 c0       	push   0xc00327e4
c001ee5d:	e8 da a8 00 00       	call   c002973c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001ee62:	c7 04 24 e4 27 03 c0 	mov    DWORD PTR [esp],0xc00327e4
c001ee69:	e8 18 a8 00 00       	call   c0029686 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ee6e:	83 c4 10             	add    esp,0x10
c001ee71:	39 f8                	cmp    eax,edi
c001ee73:	0f 84 1c ff ff ff    	je     c001ed95 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001ee79:	83 ec 0c             	sub    esp,0xc
c001ee7c:	68 e4 27 03 c0       	push   0xc00327e4
c001ee81:	e8 00 a8 00 00       	call   c0029686 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ee86:	c7 04 24 e4 27 03 c0 	mov    DWORD PTR [esp],0xc00327e4
c001ee8d:	89 c6                	mov    esi,eax
c001ee8f:	e8 fa a7 00 00       	call   c002968e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001ee94:	83 c4 10             	add    esp,0x10
c001ee97:	39 f3                	cmp    ebx,esi
c001ee99:	74 b9                	je     c001ee54 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001ee9b:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001ee9e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001eea1:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001eea7:	75 ab                	jne    c001ee54 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001eea9:	e9 7c ff ff ff       	jmp    c001ee2a <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001eeae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001eeb2:	83 ec 0c             	sub    esp,0xc
c001eeb5:	68 4c d3 02 c0       	push   0xc002d34c
c001eeba:	e9 55 ff ff ff       	jmp    c001ee14 <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001eebf:	8b 36                	mov    esi,DWORD PTR [esi]
c001eec1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001eec5:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001eec8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001eecb:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001eed1:	01 d7                	add    edi,edx
c001eed3:	89 f8                	mov    eax,edi
c001eed5:	e9 44 fe ff ff       	jmp    c001ed1e <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001eeda <cleanerTaskFunction(void*)>:
c001eeda:	53                   	push   ebx
c001eedb:	83 ec 08             	sub    esp,0x8
c001eede:	a1 c8 27 03 c0       	mov    eax,ds:0xc00327c8
c001eee3:	48                   	dec    eax
c001eee4:	a3 c8 27 03 c0       	mov    ds:0xc00327c8,eax
c001eee9:	75 01                	jne    c001eeec <cleanerTaskFunction(void*)+0x12>
c001eeeb:	fb                   	sti    
c001eeec:	fa                   	cli    
c001eeed:	a1 c8 27 03 c0       	mov    eax,ds:0xc00327c8
c001eef2:	80 3d ac 27 03 c0 00 	cmp    BYTE PTR ds:0xc00327ac,0x0
c001eef9:	8d 50 01             	lea    edx,[eax+0x1]
c001eefc:	89 15 c8 27 03 c0    	mov    DWORD PTR ds:0xc00327c8,edx
c001ef02:	0f 84 b9 00 00 00    	je     c001efc1 <cleanerTaskFunction(void*)+0xe7>
c001ef08:	a3 c8 27 03 c0       	mov    ds:0xc00327c8,eax
c001ef0d:	85 c0                	test   eax,eax
c001ef0f:	75 01                	jne    c001ef12 <cleanerTaskFunction(void*)+0x38>
c001ef11:	fb                   	sti    
c001ef12:	c6 05 ac 27 03 c0 00 	mov    BYTE PTR ds:0xc00327ac,0x0
c001ef19:	fa                   	cli    
c001ef1a:	ff 05 c8 27 03 c0    	inc    DWORD PTR ds:0xc00327c8
c001ef20:	ff 05 c4 27 03 c0    	inc    DWORD PTR ds:0xc00327c4
c001ef26:	fa                   	cli    
c001ef27:	ff 05 c8 27 03 c0    	inc    DWORD PTR ds:0xc00327c8
c001ef2d:	eb 3e                	jmp    c001ef6d <cleanerTaskFunction(void*)+0x93>
c001ef2f:	83 ec 0c             	sub    esp,0xc
c001ef32:	68 cc 27 03 c0       	push   0xc00327cc
c001ef37:	e8 4a a7 00 00       	call   c0029686 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ef3c:	c7 04 24 cc 27 03 c0 	mov    DWORD PTR [esp],0xc00327cc
c001ef43:	89 c3                	mov    ebx,eax
c001ef45:	e8 44 a7 00 00       	call   c002968e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001ef4a:	c7 04 24 30 d0 02 c0 	mov    DWORD PTR [esp],0xc002d030
c001ef51:	e8 fd 3e ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001ef56:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ef59:	e8 b3 fc ff ff       	call   c001ec11 <cleanupTerminatedTask(ThreadControlBlock*)>
c001ef5e:	c7 04 24 49 d0 02 c0 	mov    DWORD PTR [esp],0xc002d049
c001ef65:	e8 e9 3e ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001ef6a:	83 c4 10             	add    esp,0x10
c001ef6d:	83 ec 0c             	sub    esp,0xc
c001ef70:	68 cc 27 03 c0       	push   0xc00327cc
c001ef75:	e8 f0 a6 00 00       	call   c002966a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001ef7a:	83 c4 10             	add    esp,0x10
c001ef7d:	84 c0                	test   al,al
c001ef7f:	74 ae                	je     c001ef2f <cleanerTaskFunction(void*)+0x55>
c001ef81:	a1 c8 27 03 c0       	mov    eax,ds:0xc00327c8
c001ef86:	48                   	dec    eax
c001ef87:	a3 c8 27 03 c0       	mov    ds:0xc00327c8,eax
c001ef8c:	75 01                	jne    c001ef8f <cleanerTaskFunction(void*)+0xb5>
c001ef8e:	fb                   	sti    
c001ef8f:	a1 c4 27 03 c0       	mov    eax,ds:0xc00327c4
c001ef94:	48                   	dec    eax
c001ef95:	a3 c4 27 03 c0       	mov    ds:0xc00327c4,eax
c001ef9a:	0f 85 3e ff ff ff    	jne    c001eede <cleanerTaskFunction(void*)+0x4>
c001efa0:	a1 c0 27 03 c0       	mov    eax,ds:0xc00327c0
c001efa5:	85 c0                	test   eax,eax
c001efa7:	0f 84 31 ff ff ff    	je     c001eede <cleanerTaskFunction(void*)+0x4>
c001efad:	c7 05 c0 27 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00327c0,0x0
c001efb7:	e8 e4 f6 ff ff       	call   c001e6a0 <schedule()>
c001efbc:	e9 1d ff ff ff       	jmp    c001eede <cleanerTaskFunction(void*)+0x4>
c001efc1:	83 ec 0c             	sub    esp,0xc
c001efc4:	6a 02                	push   0x2
c001efc6:	e8 86 f8 ff ff       	call   c001e851 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001efcb:	83 c4 10             	add    esp,0x10
c001efce:	e9 3f ff ff ff       	jmp    c001ef12 <cleanerTaskFunction(void*)+0x38>

c001efd3 <terminateTask(int)>:
c001efd3:	83 ec 14             	sub    esp,0x14
c001efd6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001efdb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001efde:	83 c0 0c             	add    eax,0xc
c001efe1:	50                   	push   eax
c001efe2:	68 a8 d3 02 c0       	push   0xc002d3a8
c001efe7:	e8 67 3e ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001efec:	fa                   	cli    
c001efed:	ff 05 c8 27 03 c0    	inc    DWORD PTR ds:0xc00327c8
c001eff3:	ff 05 c4 27 03 c0    	inc    DWORD PTR ds:0xc00327c4
c001eff9:	fa                   	cli    
c001effa:	ff 05 c8 27 03 c0    	inc    DWORD PTR ds:0xc00327c8
c001f000:	c7 04 24 5c d0 02 c0 	mov    DWORD PTR [esp],0xc002d05c
c001f007:	e8 47 3e ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001f00c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001f010:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f015:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001f018:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f01d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001f020:	5a                   	pop    edx
c001f021:	59                   	pop    ecx
c001f022:	50                   	push   eax
c001f023:	68 cc 27 03 c0       	push   0xc00327cc
c001f028:	e8 0f a7 00 00       	call   c002973c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001f02d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f032:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001f039:	c7 04 24 76 d0 02 c0 	mov    DWORD PTR [esp],0xc002d076
c001f040:	e8 0e 3e ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001f045:	83 c4 10             	add    esp,0x10
c001f048:	a1 a8 27 03 c0       	mov    eax,ds:0xc00327a8
c001f04d:	85 c0                	test   eax,eax
c001f04f:	0f 84 8d 00 00 00    	je     c001f0e2 <terminateTask(int)+0x10f>
c001f055:	83 ec 0c             	sub    esp,0xc
c001f058:	68 90 d0 02 c0       	push   0xc002d090
c001f05d:	e8 f1 3d ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001f062:	58                   	pop    eax
c001f063:	c6 05 ac 27 03 c0 01 	mov    BYTE PTR ds:0xc00327ac,0x1
c001f06a:	ff 35 a8 27 03 c0    	push   DWORD PTR ds:0xc00327a8
c001f070:	e8 ef fa ff ff       	call   c001eb64 <unblockTask(ThreadControlBlock*)>
c001f075:	c7 04 24 aa d0 02 c0 	mov    DWORD PTR [esp],0xc002d0aa
c001f07c:	e8 d2 3d ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001f081:	83 c4 10             	add    esp,0x10
c001f084:	a1 c8 27 03 c0       	mov    eax,ds:0xc00327c8
c001f089:	48                   	dec    eax
c001f08a:	a3 c8 27 03 c0       	mov    ds:0xc00327c8,eax
c001f08f:	75 01                	jne    c001f092 <terminateTask(int)+0xbf>
c001f091:	fb                   	sti    
c001f092:	a1 c4 27 03 c0       	mov    eax,ds:0xc00327c4
c001f097:	48                   	dec    eax
c001f098:	a3 c4 27 03 c0       	mov    ds:0xc00327c4,eax
c001f09d:	75 09                	jne    c001f0a8 <terminateTask(int)+0xd5>
c001f09f:	83 3d c0 27 03 c0 00 	cmp    DWORD PTR ds:0xc00327c0,0x0
c001f0a6:	75 4c                	jne    c001f0f4 <terminateTask(int)+0x121>
c001f0a8:	a1 c8 27 03 c0       	mov    eax,ds:0xc00327c8
c001f0ad:	48                   	dec    eax
c001f0ae:	a3 c8 27 03 c0       	mov    ds:0xc00327c8,eax
c001f0b3:	75 01                	jne    c001f0b6 <terminateTask(int)+0xe3>
c001f0b5:	fb                   	sti    
c001f0b6:	83 ec 0c             	sub    esp,0xc
c001f0b9:	68 e2 d0 02 c0       	push   0xc002d0e2
c001f0be:	e8 90 3d ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001f0c3:	83 c4 10             	add    esp,0x10
c001f0c6:	fa                   	cli    
c001f0c7:	ff 05 c8 27 03 c0    	inc    DWORD PTR ds:0xc00327c8
c001f0cd:	e8 ce f5 ff ff       	call   c001e6a0 <schedule()>
c001f0d2:	a1 c8 27 03 c0       	mov    eax,ds:0xc00327c8
c001f0d7:	48                   	dec    eax
c001f0d8:	a3 c8 27 03 c0       	mov    ds:0xc00327c8,eax
c001f0dd:	75 e7                	jne    c001f0c6 <terminateTask(int)+0xf3>
c001f0df:	fb                   	sti    
c001f0e0:	eb e4                	jmp    c001f0c6 <terminateTask(int)+0xf3>
c001f0e2:	83 ec 0c             	sub    esp,0xc
c001f0e5:	68 c4 d0 02 c0       	push   0xc002d0c4
c001f0ea:	e8 64 3d ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001f0ef:	83 c4 10             	add    esp,0x10
c001f0f2:	eb 90                	jmp    c001f084 <terminateTask(int)+0xb1>
c001f0f4:	c7 05 c0 27 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00327c0,0x0
c001f0fe:	e8 9d f5 ff ff       	call   c001e6a0 <schedule()>
c001f103:	eb a3                	jmp    c001f0a8 <terminateTask(int)+0xd5>

c001f105 <Thr::terminateFromIRQ(int)>:
c001f105:	83 ec 18             	sub    esp,0x18
c001f108:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f10c:	e8 c2 fe ff ff       	call   c001efd3 <terminateTask(int)>
c001f111:	90                   	nop

c001f112 <Semaphore::release()>:
c001f112:	83 ec 0c             	sub    esp,0xc
c001f115:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f119:	fa                   	cli    
c001f11a:	a1 c4 27 03 c0       	mov    eax,ds:0xc00327c4
c001f11f:	ff 05 c8 27 03 c0    	inc    DWORD PTR ds:0xc00327c8
c001f125:	8d 48 01             	lea    ecx,[eax+0x1]
c001f128:	89 0d c4 27 03 c0    	mov    DWORD PTR ds:0xc00327c4,ecx
c001f12e:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001f131:	85 c9                	test   ecx,ecx
c001f133:	74 3c                	je     c001f171 <Semaphore::release()+0x5f>
c001f135:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001f138:	83 ec 0c             	sub    esp,0xc
c001f13b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001f13e:	51                   	push   ecx
c001f13f:	e8 20 fa ff ff       	call   c001eb64 <unblockTask(ThreadControlBlock*)>
c001f144:	a1 c4 27 03 c0       	mov    eax,ds:0xc00327c4
c001f149:	83 c4 10             	add    esp,0x10
c001f14c:	48                   	dec    eax
c001f14d:	a3 c4 27 03 c0       	mov    ds:0xc00327c4,eax
c001f152:	85 c0                	test   eax,eax
c001f154:	75 09                	jne    c001f15f <Semaphore::release()+0x4d>
c001f156:	a1 c0 27 03 c0       	mov    eax,ds:0xc00327c0
c001f15b:	85 c0                	test   eax,eax
c001f15d:	75 17                	jne    c001f176 <Semaphore::release()+0x64>
c001f15f:	a1 c8 27 03 c0       	mov    eax,ds:0xc00327c8
c001f164:	48                   	dec    eax
c001f165:	a3 c8 27 03 c0       	mov    ds:0xc00327c8,eax
c001f16a:	75 01                	jne    c001f16d <Semaphore::release()+0x5b>
c001f16c:	fb                   	sti    
c001f16d:	83 c4 0c             	add    esp,0xc
c001f170:	c3                   	ret    
c001f171:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001f174:	eb d7                	jmp    c001f14d <Semaphore::release()+0x3b>
c001f176:	c7 05 c0 27 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00327c0,0x0
c001f180:	e8 1b f5 ff ff       	call   c001e6a0 <schedule()>
c001f185:	eb d8                	jmp    c001f15f <Semaphore::release()+0x4d>

c001f187 <__static_initialization_and_destruction_0(int, int)>:
c001f187:	83 ec 0c             	sub    esp,0xc
c001f18a:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001f18f:	0f 85 88 00 00 00    	jne    c001f21d <__static_initialization_and_destruction_0(int, int)+0x96>
c001f195:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001f19d:	75 7e                	jne    c001f21d <__static_initialization_and_destruction_0(int, int)+0x96>
c001f19f:	83 ec 0c             	sub    esp,0xc
c001f1a2:	68 e4 27 03 c0       	push   0xc00327e4
c001f1a7:	e8 20 a8 00 00       	call   c00299cc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001f1ac:	83 c4 10             	add    esp,0x10
c001f1af:	83 ec 04             	sub    esp,0x4
c001f1b2:	68 a8 e1 02 c0       	push   0xc002e1a8
c001f1b7:	68 e4 27 03 c0       	push   0xc00327e4
c001f1bc:	68 80 99 02 c0       	push   0xc0029980
c001f1c1:	e8 27 3b ff ff       	call   c0012ced <__cxa_atexit>
c001f1c6:	83 c4 10             	add    esp,0x10
c001f1c9:	83 ec 0c             	sub    esp,0xc
c001f1cc:	68 d8 27 03 c0       	push   0xc00327d8
c001f1d1:	e8 f6 a7 00 00       	call   c00299cc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001f1d6:	83 c4 10             	add    esp,0x10
c001f1d9:	83 ec 04             	sub    esp,0x4
c001f1dc:	68 a8 e1 02 c0       	push   0xc002e1a8
c001f1e1:	68 d8 27 03 c0       	push   0xc00327d8
c001f1e6:	68 80 99 02 c0       	push   0xc0029980
c001f1eb:	e8 fd 3a ff ff       	call   c0012ced <__cxa_atexit>
c001f1f0:	83 c4 10             	add    esp,0x10
c001f1f3:	83 ec 0c             	sub    esp,0xc
c001f1f6:	68 cc 27 03 c0       	push   0xc00327cc
c001f1fb:	e8 cc a7 00 00       	call   c00299cc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001f200:	83 c4 10             	add    esp,0x10
c001f203:	83 ec 04             	sub    esp,0x4
c001f206:	68 a8 e1 02 c0       	push   0xc002e1a8
c001f20b:	68 cc 27 03 c0       	push   0xc00327cc
c001f210:	68 80 99 02 c0       	push   0xc0029980
c001f215:	e8 d3 3a ff ff       	call   c0012ced <__cxa_atexit>
c001f21a:	83 c4 10             	add    esp,0x10
c001f21d:	90                   	nop
c001f21e:	83 c4 0c             	add    esp,0xc
c001f221:	c3                   	ret    

c001f222 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001f222:	83 ec 0c             	sub    esp,0xc
c001f225:	83 ec 08             	sub    esp,0x8
c001f228:	68 ff ff 00 00       	push   0xffff
c001f22d:	6a 01                	push   0x1
c001f22f:	e8 53 ff ff ff       	call   c001f187 <__static_initialization_and_destruction_0(int, int)>
c001f234:	83 c4 10             	add    esp,0x10
c001f237:	83 c4 0c             	add    esp,0xc
c001f23a:	c3                   	ret    

c001f23b <Vm::inbv(unsigned short)>:
c001f23b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f23f:	66 81 fa fe fe       	cmp    dx,0xfefe
c001f244:	75 06                	jne    c001f24c <Vm::inbv(unsigned short)+0x11>
c001f246:	a0 2c 28 03 c0       	mov    al,ds:0xc003282c
c001f24b:	c3                   	ret    
c001f24c:	ec                   	in     al,dx
c001f24d:	c3                   	ret    

c001f24e <Vm::outbv(unsigned short, unsigned char)>:
c001f24e:	53                   	push   ebx
c001f24f:	83 ec 08             	sub    esp,0x8
c001f252:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f256:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f25a:	66 81 fa fe fe       	cmp    dx,0xfefe
c001f25f:	75 38                	jne    c001f299 <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001f261:	0f b6 c3             	movzx  eax,bl
c001f264:	51                   	push   ecx
c001f265:	51                   	push   ecx
c001f266:	50                   	push   eax
c001f267:	68 c7 d3 02 c0       	push   0xc002d3c7
c001f26c:	e8 e2 3b ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001f271:	8b 15 2c 28 03 c0    	mov    edx,DWORD PTR ds:0xc003282c
c001f277:	83 c4 10             	add    esp,0x10
c001f27a:	8d 42 01             	lea    eax,[edx+0x1]
c001f27d:	88 9a 40 28 03 c0    	mov    BYTE PTR [edx-0x3ffcd7c0],bl
c001f283:	a3 2c 28 03 c0       	mov    ds:0xc003282c,eax
c001f288:	83 f8 20             	cmp    eax,0x20
c001f28b:	75 0f                	jne    c001f29c <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001f28d:	c7 05 2c 28 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc003282c,0x1f
c001f297:	eb 03                	jmp    c001f29c <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001f299:	88 d8                	mov    al,bl
c001f29b:	ee                   	out    dx,al
c001f29c:	83 c4 08             	add    esp,0x8
c001f29f:	5b                   	pop    ebx
c001f2a0:	c3                   	ret    

c001f2a1 <Vm::realToLinear(unsigned short, unsigned short)>:
c001f2a1:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f2a6:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f2ab:	c1 e0 04             	shl    eax,0x4
c001f2ae:	01 d0                	add    eax,edx
c001f2b0:	c3                   	ret    

c001f2b1 <Vm::getSegment(unsigned int)>:
c001f2b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f2b5:	c1 e8 10             	shr    eax,0x10
c001f2b8:	c3                   	ret    

c001f2b9 <Vm::getOffset(unsigned int)>:
c001f2b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f2bd:	c3                   	ret    

c001f2be <Vm::mainloop2()>:
c001f2be:	83 ec 18             	sub    esp,0x18
c001f2c1:	fa                   	cli    
c001f2c2:	ff 05 c8 27 03 c0    	inc    DWORD PTR ds:0xc00327c8
c001f2c8:	6a 02                	push   0x2
c001f2ca:	c6 05 25 28 03 c0 01 	mov    BYTE PTR ds:0xc0032825,0x1
c001f2d1:	e8 7b f5 ff ff       	call   c001e851 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001f2d6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f2db:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001f2df:	52                   	push   edx
c001f2e0:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001f2e4:	52                   	push   edx
c001f2e5:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001f2e9:	52                   	push   edx
c001f2ea:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001f2ee:	50                   	push   eax
c001f2ef:	e8 06 10 fe ff       	call   c00002fa <goToVM86>
c001f2f4:	83 c4 2c             	add    esp,0x2c
c001f2f7:	c3                   	ret    

c001f2f8 <Vm::mainVm8086Loop(void*)>:
c001f2f8:	a1 c8 27 03 c0       	mov    eax,ds:0xc00327c8
c001f2fd:	48                   	dec    eax
c001f2fe:	a3 c8 27 03 c0       	mov    ds:0xc00327c8,eax
c001f303:	75 01                	jne    c001f306 <Vm::mainVm8086Loop(void*)+0xe>
c001f305:	fb                   	sti    
c001f306:	eb b6                	jmp    c001f2be <Vm::mainloop2()>

c001f308 <Vm::mainloop3(unsigned long)>:
c001f308:	83 ec 18             	sub    esp,0x18
c001f30b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f30f:	fa                   	cli    
c001f310:	ff 05 c8 27 03 c0    	inc    DWORD PTR ds:0xc00327c8
c001f316:	6a 02                	push   0x2
c001f318:	c6 05 24 28 03 c0 01 	mov    BYTE PTR ds:0xc0032824,0x1
c001f31f:	a3 20 28 03 c0       	mov    ds:0xc0032820,eax
c001f324:	e8 28 f5 ff ff       	call   c001e851 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001f329:	83 c4 1c             	add    esp,0x1c
c001f32c:	eb 90                	jmp    c001f2be <Vm::mainloop2()>

c001f32e <Vm::initialise8086()>:
c001f32e:	83 ec 0c             	sub    esp,0xc
c001f331:	68 80 00 00 00       	push   0x80
c001f336:	6a 00                	push   0x0
c001f338:	68 f8 f2 01 c0       	push   0xc001f2f8
c001f33d:	ff 35 f0 27 03 c0    	push   DWORD PTR ds:0xc00327f0
c001f343:	e8 14 f1 ff ff       	call   c001e45c <Process::createThread(void (*)(void*), void*, int)>
c001f348:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001f34f:	a3 28 28 03 c0       	mov    ds:0xc0032828,eax
c001f354:	68 00 01 00 00       	push   0x100
c001f359:	a1 f0 27 03 c0       	mov    eax,ds:0xc00327f0
c001f35e:	6a 00                	push   0x0
c001f360:	6a 00                	push   0x0
c001f362:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001f368:	e8 0d 32 ff ff       	call   c001257a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001f36d:	83 c4 2c             	add    esp,0x2c
c001f370:	c3                   	ret    

c001f371 <Vm::finish8086()>:
c001f371:	53                   	push   ebx
c001f372:	83 ec 08             	sub    esp,0x8
c001f375:	fa                   	cli    
c001f376:	ff 05 c8 27 03 c0    	inc    DWORD PTR ds:0xc00327c8
c001f37c:	80 3d 24 28 03 c0 00 	cmp    BYTE PTR ds:0xc0032824,0x0
c001f383:	75 15                	jne    c001f39a <Vm::finish8086()+0x29>
c001f385:	e8 16 f3 ff ff       	call   c001e6a0 <schedule()>
c001f38a:	a1 c8 27 03 c0       	mov    eax,ds:0xc00327c8
c001f38f:	48                   	dec    eax
c001f390:	a3 c8 27 03 c0       	mov    ds:0xc00327c8,eax
c001f395:	75 de                	jne    c001f375 <Vm::finish8086()+0x4>
c001f397:	fb                   	sti    
c001f398:	eb db                	jmp    c001f375 <Vm::finish8086()+0x4>
c001f39a:	83 ec 0c             	sub    esp,0xc
c001f39d:	8b 1d 20 28 03 c0    	mov    ebx,DWORD PTR ds:0xc0032820
c001f3a3:	ff 35 28 28 03 c0    	push   DWORD PTR ds:0xc0032828
c001f3a9:	c6 05 24 28 03 c0 00 	mov    BYTE PTR ds:0xc0032824,0x0
c001f3b0:	e8 af f7 ff ff       	call   c001eb64 <unblockTask(ThreadControlBlock*)>
c001f3b5:	a1 c8 27 03 c0       	mov    eax,ds:0xc00327c8
c001f3ba:	83 c4 10             	add    esp,0x10
c001f3bd:	8d 50 ff             	lea    edx,[eax-0x1]
c001f3c0:	89 15 c8 27 03 c0    	mov    DWORD PTR ds:0xc00327c8,edx
c001f3c6:	85 d2                	test   edx,edx
c001f3c8:	75 01                	jne    c001f3cb <Vm::finish8086()+0x5a>
c001f3ca:	fb                   	sti    
c001f3cb:	89 d8                	mov    eax,ebx
c001f3cd:	83 c4 08             	add    esp,0x8
c001f3d0:	5b                   	pop    ebx
c001f3d1:	c3                   	ret    

c001f3d2 <Vm::getOutput8086(unsigned char*)>:
c001f3d2:	57                   	push   edi
c001f3d3:	8b 0d 2c 28 03 c0    	mov    ecx,DWORD PTR ds:0xc003282c
c001f3d9:	56                   	push   esi
c001f3da:	be 40 28 03 c0       	mov    esi,0xc0032840
c001f3df:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f3e3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f3e5:	a1 2c 28 03 c0       	mov    eax,ds:0xc003282c
c001f3ea:	5e                   	pop    esi
c001f3eb:	c7 05 2c 28 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003282c,0x0
c001f3f5:	5f                   	pop    edi
c001f3f6:	c3                   	ret    

c001f3f7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001f3f7:	55                   	push   ebp
c001f3f8:	57                   	push   edi
c001f3f9:	56                   	push   esi
c001f3fa:	53                   	push   ebx
c001f3fb:	83 ec 2c             	sub    esp,0x2c
c001f3fe:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001f402:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001f406:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f40a:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001f40e:	fa                   	cli    
c001f40f:	ff 05 c8 27 03 c0    	inc    DWORD PTR ds:0xc00327c8
c001f415:	0f b6 35 25 28 03 c0 	movzx  esi,BYTE PTR ds:0xc0032825
c001f41c:	89 f0                	mov    eax,esi
c001f41e:	84 c0                	test   al,al
c001f420:	75 1d                	jne    c001f43f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001f422:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f426:	e8 75 f2 ff ff       	call   c001e6a0 <schedule()>
c001f42b:	a1 c8 27 03 c0       	mov    eax,ds:0xc00327c8
c001f430:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f434:	48                   	dec    eax
c001f435:	a3 c8 27 03 c0       	mov    ds:0xc00327c8,eax
c001f43a:	75 d2                	jne    c001f40e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001f43c:	fb                   	sti    
c001f43d:	eb cf                	jmp    c001f40e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001f43f:	a1 28 28 03 c0       	mov    eax,ds:0xc0032828
c001f444:	c7 05 2c 28 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003282c,0x0
c001f44e:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001f452:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001f456:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001f45a:	66 89 78 5b          	mov    WORD PTR [eax+0x5b],di
c001f45e:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001f462:	50                   	push   eax
c001f463:	6a 20                	push   0x20
c001f465:	6a 00                	push   0x0
c001f467:	68 40 28 03 c0       	push   0xc0032840
c001f46c:	e8 fb 12 fe ff       	call   c000076c <memset>
c001f471:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001f478:	e8 2b 04 ff ff       	call   c000f8a8 <malloc>
c001f47d:	83 c4 0c             	add    esp,0xc
c001f480:	89 c3                	mov    ebx,eax
c001f482:	ff 35 f0 27 03 c0    	push   DWORD PTR ds:0xc00327f0
c001f488:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f48c:	50                   	push   eax
c001f48d:	e8 20 3f ff ff       	call   c00133b2 <File::File(char const*, Process*)>
c001f492:	83 c4 10             	add    esp,0x10
c001f495:	85 db                	test   ebx,ebx
c001f497:	75 0a                	jne    c001f4a3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001f499:	83 ec 0c             	sub    esp,0xc
c001f49c:	68 e3 d3 02 c0       	push   0xc002d3e3
c001f4a1:	eb 3e                	jmp    c001f4e1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001f4a3:	50                   	push   eax
c001f4a4:	8d 44 24 17          	lea    eax,[esp+0x17]
c001f4a8:	50                   	push   eax
c001f4a9:	8d 44 24 20          	lea    eax,[esp+0x20]
c001f4ad:	50                   	push   eax
c001f4ae:	53                   	push   ebx
c001f4af:	e8 0e 42 ff ff       	call   c00136c2 <File::stat(unsigned long long*, bool*)>
c001f4b4:	83 c4 10             	add    esp,0x10
c001f4b7:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001f4bc:	74 0a                	je     c001f4c8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001f4be:	83 ec 0c             	sub    esp,0xc
c001f4c1:	68 f7 d3 02 c0       	push   0xc002d3f7
c001f4c6:	eb 19                	jmp    c001f4e1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001f4c8:	51                   	push   ecx
c001f4c9:	51                   	push   ecx
c001f4ca:	6a 01                	push   0x1
c001f4cc:	53                   	push   ebx
c001f4cd:	e8 44 3f ff ff       	call   c0013416 <File::open(FileOpenMode)>
c001f4d2:	83 c4 10             	add    esp,0x10
c001f4d5:	85 c0                	test   eax,eax
c001f4d7:	74 24                	je     c001f4fd <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001f4d9:	83 ec 0c             	sub    esp,0xc
c001f4dc:	68 10 d4 02 c0       	push   0xc002d410
c001f4e1:	e8 07 b4 ff ff       	call   c001a8ed <Krnl::panic(char const*)>
c001f4e6:	a1 c8 27 03 c0       	mov    eax,ds:0xc00327c8
c001f4eb:	83 c4 10             	add    esp,0x10
c001f4ee:	48                   	dec    eax
c001f4ef:	a3 c8 27 03 c0       	mov    ds:0xc00327c8,eax
c001f4f4:	85 c0                	test   eax,eax
c001f4f6:	75 01                	jne    c001f4f9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001f4f8:	fb                   	sti    
c001f4f9:	31 f6                	xor    esi,esi
c001f4fb:	eb 58                	jmp    c001f555 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001f4fd:	0f b7 ed             	movzx  ebp,bp
c001f500:	50                   	push   eax
c001f501:	0f b7 ff             	movzx  edi,di
c001f504:	50                   	push   eax
c001f505:	55                   	push   ebp
c001f506:	57                   	push   edi
c001f507:	e8 95 fd ff ff       	call   c001f2a1 <Vm::realToLinear(unsigned short, unsigned short)>
c001f50c:	5a                   	pop    edx
c001f50d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001f50f:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001f513:	51                   	push   ecx
c001f514:	50                   	push   eax
c001f515:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001f519:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001f51d:	53                   	push   ebx
c001f51e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001f521:	83 c4 14             	add    esp,0x14
c001f524:	53                   	push   ebx
c001f525:	e8 4a 3f ff ff       	call   c0013474 <File::close()>
c001f52a:	a1 c8 27 03 c0       	mov    eax,ds:0xc00327c8
c001f52f:	83 c4 10             	add    esp,0x10
c001f532:	48                   	dec    eax
c001f533:	c6 05 25 28 03 c0 00 	mov    BYTE PTR ds:0xc0032825,0x0
c001f53a:	a3 c8 27 03 c0       	mov    ds:0xc00327c8,eax
c001f53f:	85 c0                	test   eax,eax
c001f541:	75 01                	jne    c001f544 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001f543:	fb                   	sti    
c001f544:	83 ec 0c             	sub    esp,0xc
c001f547:	ff 35 28 28 03 c0    	push   DWORD PTR ds:0xc0032828
c001f54d:	e8 12 f6 ff ff       	call   c001eb64 <unblockTask(ThreadControlBlock*)>
c001f552:	83 c4 10             	add    esp,0x10
c001f555:	83 c4 2c             	add    esp,0x2c
c001f558:	89 f0                	mov    eax,esi
c001f55a:	5b                   	pop    ebx
c001f55b:	5e                   	pop    esi
c001f55c:	5f                   	pop    edi
c001f55d:	5d                   	pop    ebp
c001f55e:	c3                   	ret    

c001f55f <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001f55f:	57                   	push   edi
c001f560:	56                   	push   esi
c001f561:	53                   	push   ebx
c001f562:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f566:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f56a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f56e:	83 e8 06             	sub    eax,0x6
c001f571:	0f b7 c0             	movzx  eax,ax
c001f574:	50                   	push   eax
c001f575:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001f57a:	50                   	push   eax
c001f57b:	e8 21 fd ff ff       	call   c001f2a1 <Vm::realToLinear(unsigned short, unsigned short)>
c001f580:	5a                   	pop    edx
c001f581:	5e                   	pop    esi
c001f582:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001f585:	8d 56 fa             	lea    edx,[esi-0x6]
c001f588:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f58e:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001f591:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001f594:	83 c2 02             	add    edx,0x2
c001f597:	66 89 10             	mov    WORD PTR [eax],dx
c001f59a:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001f59d:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001f5a1:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001f5a4:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001f5a8:	89 d6                	mov    esi,edx
c001f5aa:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001f5b0:	66 81 e6 ff fd       	and    si,0xfdff
c001f5b5:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001f5b9:	74 07                	je     c001f5c2 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001f5bb:	89 d6                	mov    esi,edx
c001f5bd:	66 81 ce 00 02       	or     si,0x200
c001f5c2:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001f5c6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f5cb:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f5cf:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001f5d7:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001f5da:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001f5e2:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001f5e5:	5b                   	pop    ebx
c001f5e6:	5e                   	pop    esi
c001f5e7:	5f                   	pop    edi
c001f5e8:	c3                   	ret    

c001f5e9 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001f5e9:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f5ee:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f5f3:	c1 e0 04             	shl    eax,0x4
c001f5f6:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001f5f9:	c3                   	ret    

c001f5fa <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001f5fa:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f5ff:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f604:	c1 e0 04             	shl    eax,0x4
c001f607:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001f60b:	c3                   	ret    

c001f60c <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001f60c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f611:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f616:	c1 e0 04             	shl    eax,0x4
c001f619:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001f61c:	c3                   	ret    

c001f61d <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001f61d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f622:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f627:	c1 e0 04             	shl    eax,0x4
c001f62a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f62e:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001f631:	c3                   	ret    

c001f632 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001f632:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f637:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f63c:	c1 e0 04             	shl    eax,0x4
c001f63f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f643:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001f647:	c3                   	ret    

c001f648 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001f648:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f64d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f652:	c1 e0 04             	shl    eax,0x4
c001f655:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f659:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001f65c:	c3                   	ret    

c001f65d <Vm::faultHandler(regs*)>:
c001f65d:	55                   	push   ebp
c001f65e:	57                   	push   edi
c001f65f:	56                   	push   esi
c001f660:	53                   	push   ebx
c001f661:	83 ec 1c             	sub    esp,0x1c
c001f664:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001f668:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001f66b:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001f66e:	0f b7 c1             	movzx  eax,cx
c001f671:	50                   	push   eax
c001f672:	0f b7 c3             	movzx  eax,bx
c001f675:	c1 e3 04             	shl    ebx,0x4
c001f678:	50                   	push   eax
c001f679:	e8 23 fc ff ff       	call   c001f2a1 <Vm::realToLinear(unsigned short, unsigned short)>
c001f67e:	5a                   	pop    edx
c001f67f:	89 c5                	mov    ebp,eax
c001f681:	5e                   	pop    esi
c001f682:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001f686:	50                   	push   eax
c001f687:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f68b:	50                   	push   eax
c001f68c:	e8 10 fc ff ff       	call   c001f2a1 <Vm::realToLinear(unsigned short, unsigned short)>
c001f691:	01 cb                	add    ebx,ecx
c001f693:	89 c6                	mov    esi,eax
c001f695:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001f699:	50                   	push   eax
c001f69a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f69e:	50                   	push   eax
c001f69f:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f6a3:	50                   	push   eax
c001f6a4:	55                   	push   ebp
c001f6a5:	53                   	push   ebx
c001f6a6:	b3 06                	mov    bl,0x6
c001f6a8:	68 29 d4 02 c0       	push   0xc002d429
c001f6ad:	e8 a1 37 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001f6b2:	83 c4 20             	add    esp,0x20
c001f6b5:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001f6ba:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001f6bf:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f6c3:	3c 9d                	cmp    al,0x9d
c001f6c5:	0f 84 d7 02 00 00    	je     c001f9a2 <Vm::faultHandler(regs*)+0x345>
c001f6cb:	0f 87 a3 00 00 00    	ja     c001f774 <Vm::faultHandler(regs*)+0x117>
c001f6d1:	3c 66                	cmp    al,0x66
c001f6d3:	0f 84 15 02 00 00    	je     c001f8ee <Vm::faultHandler(regs*)+0x291>
c001f6d9:	77 5f                	ja     c001f73a <Vm::faultHandler(regs*)+0xdd>
c001f6db:	3c 36                	cmp    al,0x36
c001f6dd:	0f 84 f1 01 00 00    	je     c001f8d4 <Vm::faultHandler(regs*)+0x277>
c001f6e3:	77 28                	ja     c001f70d <Vm::faultHandler(regs*)+0xb0>
c001f6e5:	3c 26                	cmp    al,0x26
c001f6e7:	0f 84 99 01 00 00    	je     c001f886 <Vm::faultHandler(regs*)+0x229>
c001f6ed:	3c 2e                	cmp    al,0x2e
c001f6ef:	0f 85 3b 07 00 00    	jne    c001fe30 <Vm::faultHandler(regs*)+0x7d3>
c001f6f5:	83 ec 0c             	sub    esp,0xc
c001f6f8:	31 db                	xor    ebx,ebx
c001f6fa:	68 3e d4 02 c0       	push   0xc002d43e
c001f6ff:	e8 4f 37 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001f704:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f707:	83 c4 10             	add    esp,0x10
c001f70a:	45                   	inc    ebp
c001f70b:	eb b2                	jmp    c001f6bf <Vm::faultHandler(regs*)+0x62>
c001f70d:	3c 64                	cmp    al,0x64
c001f70f:	0f 84 8b 01 00 00    	je     c001f8a0 <Vm::faultHandler(regs*)+0x243>
c001f715:	0f 87 9f 01 00 00    	ja     c001f8ba <Vm::faultHandler(regs*)+0x25d>
c001f71b:	3c 3e                	cmp    al,0x3e
c001f71d:	0f 85 0d 07 00 00    	jne    c001fe30 <Vm::faultHandler(regs*)+0x7d3>
c001f723:	83 ec 0c             	sub    esp,0xc
c001f726:	b3 01                	mov    bl,0x1
c001f728:	68 42 d4 02 c0       	push   0xc002d442
c001f72d:	e8 21 37 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001f732:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f735:	83 c4 10             	add    esp,0x10
c001f738:	eb d0                	jmp    c001f70a <Vm::faultHandler(regs*)+0xad>
c001f73a:	3c 6d                	cmp    al,0x6d
c001f73c:	0f 84 af 03 00 00    	je     c001faf1 <Vm::faultHandler(regs*)+0x494>
c001f742:	77 15                	ja     c001f759 <Vm::faultHandler(regs*)+0xfc>
c001f744:	3c 67                	cmp    al,0x67
c001f746:	0f 84 bf 01 00 00    	je     c001f90b <Vm::faultHandler(regs*)+0x2ae>
c001f74c:	3c 6c                	cmp    al,0x6c
c001f74e:	0f 84 3f 03 00 00    	je     c001fa93 <Vm::faultHandler(regs*)+0x436>
c001f754:	e9 d7 06 00 00       	jmp    c001fe30 <Vm::faultHandler(regs*)+0x7d3>
c001f759:	3c 6f                	cmp    al,0x6f
c001f75b:	0f 84 a4 04 00 00    	je     c001fc05 <Vm::faultHandler(regs*)+0x5a8>
c001f761:	0f 82 11 04 00 00    	jb     c001fb78 <Vm::faultHandler(regs*)+0x51b>
c001f767:	3c 9c                	cmp    al,0x9c
c001f769:	0f 84 ba 01 00 00    	je     c001f929 <Vm::faultHandler(regs*)+0x2cc>
c001f76f:	e9 bc 06 00 00       	jmp    c001fe30 <Vm::faultHandler(regs*)+0x7d3>
c001f774:	3c ec                	cmp    al,0xec
c001f776:	0f 84 24 06 00 00    	je     c001fda0 <Vm::faultHandler(regs*)+0x743>
c001f77c:	0f 87 93 00 00 00    	ja     c001f815 <Vm::faultHandler(regs*)+0x1b8>
c001f782:	3c e4                	cmp    al,0xe4
c001f784:	0f 84 5c 05 00 00    	je     c001fce6 <Vm::faultHandler(regs*)+0x689>
c001f78a:	77 6a                	ja     c001f7f6 <Vm::faultHandler(regs*)+0x199>
c001f78c:	3c cd                	cmp    al,0xcd
c001f78e:	0f 84 7e 02 00 00    	je     c001fa12 <Vm::faultHandler(regs*)+0x3b5>
c001f794:	3c cf                	cmp    al,0xcf
c001f796:	0f 85 94 06 00 00    	jne    c001fe30 <Vm::faultHandler(regs*)+0x7d3>
c001f79c:	83 ec 0c             	sub    esp,0xc
c001f79f:	68 86 d4 02 c0       	push   0xc002d486
c001f7a4:	e8 aa 36 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001f7a9:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001f7ac:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001f7af:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001f7b3:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001f7b6:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001f7ba:	0d 00 02 02 00       	or     eax,0x20200
c001f7bf:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f7c2:	56                   	push   esi
c001f7c3:	53                   	push   ebx
c001f7c4:	52                   	push   edx
c001f7c5:	68 8c d4 02 c0       	push   0xc002d48c
c001f7ca:	e8 84 36 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001f7cf:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001f7d3:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f7d9:	66 c1 e8 09          	shr    ax,0x9
c001f7dd:	83 e0 01             	and    eax,0x1
c001f7e0:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f7e3:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f7e6:	83 c0 06             	add    eax,0x6
c001f7e9:	25 ff ff 00 00       	and    eax,0xffff
c001f7ee:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f7f1:	e9 95 02 00 00       	jmp    c001fa8b <Vm::faultHandler(regs*)+0x42e>
c001f7f6:	3c e6                	cmp    al,0xe6
c001f7f8:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001f7fc:	0f 84 4e 05 00 00    	je     c001fd50 <Vm::faultHandler(regs*)+0x6f3>
c001f802:	0f 82 0a 05 00 00    	jb     c001fd12 <Vm::faultHandler(regs*)+0x6b5>
c001f808:	3c e7                	cmp    al,0xe7
c001f80a:	0f 84 69 05 00 00    	je     c001fd79 <Vm::faultHandler(regs*)+0x71c>
c001f810:	e9 1b 06 00 00       	jmp    c001fe30 <Vm::faultHandler(regs*)+0x7d3>
c001f815:	3c ef                	cmp    al,0xef
c001f817:	0f 84 e6 05 00 00    	je     c001fe03 <Vm::faultHandler(regs*)+0x7a6>
c001f81d:	77 37                	ja     c001f856 <Vm::faultHandler(regs*)+0x1f9>
c001f81f:	3c ed                	cmp    al,0xed
c001f821:	0f 84 a3 05 00 00    	je     c001fdca <Vm::faultHandler(regs*)+0x76d>
c001f827:	3c ee                	cmp    al,0xee
c001f829:	0f 85 01 06 00 00    	jne    c001fe30 <Vm::faultHandler(regs*)+0x7d3>
c001f82f:	52                   	push   edx
c001f830:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f833:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f836:	68 27 d5 02 c0       	push   0xc002d527
c001f83b:	e8 13 36 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001f840:	59                   	pop    ecx
c001f841:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f845:	5b                   	pop    ebx
c001f846:	50                   	push   eax
c001f847:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f84b:	50                   	push   eax
c001f84c:	e8 fd f9 ff ff       	call   c001f24e <Vm::outbv(unsigned short, unsigned char)>
c001f851:	e9 a5 05 00 00       	jmp    c001fdfb <Vm::faultHandler(regs*)+0x79e>
c001f856:	3c fa                	cmp    al,0xfa
c001f858:	0f 84 f7 01 00 00    	je     c001fa55 <Vm::faultHandler(regs*)+0x3f8>
c001f85e:	3c fb                	cmp    al,0xfb
c001f860:	0f 84 0a 02 00 00    	je     c001fa70 <Vm::faultHandler(regs*)+0x413>
c001f866:	3c f3                	cmp    al,0xf3
c001f868:	0f 85 c2 05 00 00    	jne    c001fe30 <Vm::faultHandler(regs*)+0x7d3>
c001f86e:	83 ec 0c             	sub    esp,0xc
c001f871:	68 5f d4 02 c0       	push   0xc002d45f
c001f876:	e8 d8 35 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001f87b:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f87e:	83 c4 10             	add    esp,0x10
c001f881:	e9 84 fe ff ff       	jmp    c001f70a <Vm::faultHandler(regs*)+0xad>
c001f886:	83 ec 0c             	sub    esp,0xc
c001f889:	b3 02                	mov    bl,0x2
c001f88b:	68 3a d4 02 c0       	push   0xc002d43a
c001f890:	e8 be 35 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001f895:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f898:	83 c4 10             	add    esp,0x10
c001f89b:	e9 6a fe ff ff       	jmp    c001f70a <Vm::faultHandler(regs*)+0xad>
c001f8a0:	83 ec 0c             	sub    esp,0xc
c001f8a3:	b3 03                	mov    bl,0x3
c001f8a5:	68 46 d4 02 c0       	push   0xc002d446
c001f8aa:	e8 a4 35 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001f8af:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f8b2:	83 c4 10             	add    esp,0x10
c001f8b5:	e9 50 fe ff ff       	jmp    c001f70a <Vm::faultHandler(regs*)+0xad>
c001f8ba:	83 ec 0c             	sub    esp,0xc
c001f8bd:	b3 04                	mov    bl,0x4
c001f8bf:	68 4a d4 02 c0       	push   0xc002d44a
c001f8c4:	e8 8a 35 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001f8c9:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f8cc:	83 c4 10             	add    esp,0x10
c001f8cf:	e9 36 fe ff ff       	jmp    c001f70a <Vm::faultHandler(regs*)+0xad>
c001f8d4:	83 ec 0c             	sub    esp,0xc
c001f8d7:	b3 05                	mov    bl,0x5
c001f8d9:	68 4e d4 02 c0       	push   0xc002d44e
c001f8de:	e8 70 35 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001f8e3:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f8e6:	83 c4 10             	add    esp,0x10
c001f8e9:	e9 1c fe ff ff       	jmp    c001f70a <Vm::faultHandler(regs*)+0xad>
c001f8ee:	83 ec 0c             	sub    esp,0xc
c001f8f1:	68 52 d4 02 c0       	push   0xc002d452
c001f8f6:	e8 58 35 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001f8fb:	83 c4 10             	add    esp,0x10
c001f8fe:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f901:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001f906:	e9 ff fd ff ff       	jmp    c001f70a <Vm::faultHandler(regs*)+0xad>
c001f90b:	50                   	push   eax
c001f90c:	50                   	push   eax
c001f90d:	6a 01                	push   0x1
c001f90f:	68 57 d4 02 c0       	push   0xc002d457
c001f914:	e8 3a 35 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001f919:	83 c4 10             	add    esp,0x10
c001f91c:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f91f:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001f924:	e9 e1 fd ff ff       	jmp    c001f70a <Vm::faultHandler(regs*)+0xad>
c001f929:	83 ec 0c             	sub    esp,0xc
c001f92c:	68 65 d4 02 c0       	push   0xc002d465
c001f931:	e8 1d 35 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001f936:	83 c4 10             	add    esp,0x10
c001f939:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001f93c:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f941:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001f944:	74 2f                	je     c001f975 <Vm::faultHandler(regs*)+0x318>
c001f946:	83 ea 04             	sub    edx,0x4
c001f949:	25 ff 0d 00 00       	and    eax,0xdff
c001f94e:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f954:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f957:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f95a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f960:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f964:	0f 84 bf 04 00 00    	je     c001fe29 <Vm::faultHandler(regs*)+0x7cc>
c001f96a:	80 cc 02             	or     ah,0x2
c001f96d:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f970:	e9 b4 04 00 00       	jmp    c001fe29 <Vm::faultHandler(regs*)+0x7cc>
c001f975:	83 ea 02             	sub    edx,0x2
c001f978:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f97e:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f981:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f985:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f98b:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f98f:	74 05                	je     c001f996 <Vm::faultHandler(regs*)+0x339>
c001f991:	80 cc 02             	or     ah,0x2
c001f994:	eb 03                	jmp    c001f999 <Vm::faultHandler(regs*)+0x33c>
c001f996:	80 e4 fd             	and    ah,0xfd
c001f999:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f99d:	e9 87 04 00 00       	jmp    c001fe29 <Vm::faultHandler(regs*)+0x7cc>
c001f9a2:	83 ec 0c             	sub    esp,0xc
c001f9a5:	68 6c d4 02 c0       	push   0xc002d46c
c001f9aa:	e8 a4 34 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001f9af:	83 c4 10             	add    esp,0x10
c001f9b2:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f9b7:	74 28                	je     c001f9e1 <Vm::faultHandler(regs*)+0x384>
c001f9b9:	8b 06                	mov    eax,DWORD PTR [esi]
c001f9bb:	25 ff 0d 00 00       	and    eax,0xdff
c001f9c0:	0d 00 02 02 00       	or     eax,0x20200
c001f9c5:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f9c8:	8b 06                	mov    eax,DWORD PTR [esi]
c001f9ca:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f9d0:	c1 e8 09             	shr    eax,0x9
c001f9d3:	83 e0 01             	and    eax,0x1
c001f9d6:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f9d9:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f9dc:	83 c0 04             	add    eax,0x4
c001f9df:	eb 24                	jmp    c001fa05 <Vm::faultHandler(regs*)+0x3a8>
c001f9e1:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f9e4:	0d 00 02 02 00       	or     eax,0x20200
c001f9e9:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f9ec:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f9ef:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f9f5:	66 c1 e8 09          	shr    ax,0x9
c001f9f9:	83 e0 01             	and    eax,0x1
c001f9fc:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f9ff:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001fa02:	83 c0 02             	add    eax,0x2
c001fa05:	25 ff ff 00 00       	and    eax,0xffff
c001fa0a:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001fa0d:	e9 17 04 00 00       	jmp    c001fe29 <Vm::faultHandler(regs*)+0x7cc>
c001fa12:	53                   	push   ebx
c001fa13:	53                   	push   ebx
c001fa14:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fa18:	50                   	push   eax
c001fa19:	68 72 d4 02 c0       	push   0xc002d472
c001fa1e:	e8 30 34 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001fa23:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fa27:	83 c4 10             	add    esp,0x10
c001fa2a:	3c ee                	cmp    al,0xee
c001fa2c:	75 10                	jne    c001fa3e <Vm::faultHandler(regs*)+0x3e1>
c001fa2e:	83 ec 0c             	sub    esp,0xc
c001fa31:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001fa34:	e8 cf f8 ff ff       	call   c001f308 <Vm::mainloop3(unsigned long)>
c001fa39:	e9 c0 03 00 00       	jmp    c001fdfe <Vm::faultHandler(regs*)+0x7a1>
c001fa3e:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001fa42:	83 ec 0c             	sub    esp,0xc
c001fa45:	53                   	push   ebx
c001fa46:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001fa4a:	53                   	push   ebx
c001fa4b:	55                   	push   ebp
c001fa4c:	50                   	push   eax
c001fa4d:	57                   	push   edi
c001fa4e:	e8 0c fb ff ff       	call   c001f55f <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001fa53:	eb 36                	jmp    c001fa8b <Vm::faultHandler(regs*)+0x42e>
c001fa55:	83 ec 0c             	sub    esp,0xc
c001fa58:	68 7c d4 02 c0       	push   0xc002d47c
c001fa5d:	e8 f1 33 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001fa62:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001fa67:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001fa6b:	e9 8b 03 00 00       	jmp    c001fdfb <Vm::faultHandler(regs*)+0x79e>
c001fa70:	83 ec 0c             	sub    esp,0xc
c001fa73:	68 81 d4 02 c0       	push   0xc002d481
c001fa78:	e8 d6 33 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001fa7d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001fa82:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001fa86:	e9 70 03 00 00       	jmp    c001fdfb <Vm::faultHandler(regs*)+0x79e>
c001fa8b:	83 c4 20             	add    esp,0x20
c001fa8e:	e9 99 03 00 00       	jmp    c001fe2c <Vm::faultHandler(regs*)+0x7cf>
c001fa93:	83 ec 0c             	sub    esp,0xc
c001fa96:	68 bf d4 02 c0       	push   0xc002d4bf
c001fa9b:	e8 b3 33 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001faa0:	83 c4 10             	add    esp,0x10
c001faa3:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001faa6:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001faab:	74 0d                	je     c001faba <Vm::faultHandler(regs*)+0x45d>
c001faad:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001fab4:	0f 87 9e 01 00 00    	ja     c001fc58 <Vm::faultHandler(regs*)+0x5fb>
c001faba:	83 ec 0c             	sub    esp,0xc
c001fabd:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001fac1:	0f b7 db             	movzx  ebx,bx
c001fac4:	50                   	push   eax
c001fac5:	e8 71 f7 ff ff       	call   c001f23b <Vm::inbv(unsigned short)>
c001faca:	83 c4 0c             	add    esp,0xc
c001facd:	0f b6 c0             	movzx  eax,al
c001fad0:	50                   	push   eax
c001fad1:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001fad5:	50                   	push   eax
c001fad6:	53                   	push   ebx
c001fad7:	e8 41 fb ff ff       	call   c001f61d <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001fadc:	83 c4 10             	add    esp,0x10
c001fadf:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001fae2:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001fae6:	74 03                	je     c001faeb <Vm::faultHandler(regs*)+0x48e>
c001fae8:	48                   	dec    eax
c001fae9:	eb 01                	jmp    c001faec <Vm::faultHandler(regs*)+0x48f>
c001faeb:	40                   	inc    eax
c001faec:	0f b7 c0             	movzx  eax,ax
c001faef:	eb 7f                	jmp    c001fb70 <Vm::faultHandler(regs*)+0x513>
c001faf1:	83 ec 0c             	sub    esp,0xc
c001faf4:	68 f1 d4 02 c0       	push   0xc002d4f1
c001faf9:	e8 55 33 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001fafe:	83 c4 10             	add    esp,0x10
c001fb01:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001fb04:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001fb09:	74 0d                	je     c001fb18 <Vm::faultHandler(regs*)+0x4bb>
c001fb0b:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001fb12:	0f 87 40 01 00 00    	ja     c001fc58 <Vm::faultHandler(regs*)+0x5fb>
c001fb18:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001fb1b:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001fb1f:	0f b7 db             	movzx  ebx,bx
c001fb22:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fb27:	74 20                	je     c001fb49 <Vm::faultHandler(regs*)+0x4ec>
c001fb29:	ed                   	in     eax,dx
c001fb2a:	51                   	push   ecx
c001fb2b:	50                   	push   eax
c001fb2c:	56                   	push   esi
c001fb2d:	53                   	push   ebx
c001fb2e:	e8 15 fb ff ff       	call   c001f648 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001fb33:	83 c4 10             	add    esp,0x10
c001fb36:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001fb39:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001fb3d:	74 05                	je     c001fb44 <Vm::faultHandler(regs*)+0x4e7>
c001fb3f:	83 e8 04             	sub    eax,0x4
c001fb42:	eb 27                	jmp    c001fb6b <Vm::faultHandler(regs*)+0x50e>
c001fb44:	83 c0 04             	add    eax,0x4
c001fb47:	eb 22                	jmp    c001fb6b <Vm::faultHandler(regs*)+0x50e>
c001fb49:	66 ed                	in     ax,dx
c001fb4b:	0f b7 c0             	movzx  eax,ax
c001fb4e:	52                   	push   edx
c001fb4f:	50                   	push   eax
c001fb50:	56                   	push   esi
c001fb51:	53                   	push   ebx
c001fb52:	e8 db fa ff ff       	call   c001f632 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001fb57:	83 c4 10             	add    esp,0x10
c001fb5a:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001fb5d:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001fb61:	74 05                	je     c001fb68 <Vm::faultHandler(regs*)+0x50b>
c001fb63:	83 e8 02             	sub    eax,0x2
c001fb66:	eb 03                	jmp    c001fb6b <Vm::faultHandler(regs*)+0x50e>
c001fb68:	83 c0 02             	add    eax,0x2
c001fb6b:	25 ff ff 00 00       	and    eax,0xffff
c001fb70:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001fb73:	e9 b1 02 00 00       	jmp    c001fe29 <Vm::faultHandler(regs*)+0x7cc>
c001fb78:	83 ec 0c             	sub    esp,0xc
c001fb7b:	4b                   	dec    ebx
c001fb7c:	68 f7 d4 02 c0       	push   0xc002d4f7
c001fb81:	e8 cd 32 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001fb86:	83 c4 10             	add    esp,0x10
c001fb89:	80 fb 05             	cmp    bl,0x5
c001fb8c:	77 0a                	ja     c001fb98 <Vm::faultHandler(regs*)+0x53b>
c001fb8e:	0f b6 db             	movzx  ebx,bl
c001fb91:	ff 24 9d 68 d5 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd2a98]
c001fb98:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001fb9c:	eb 1b                	jmp    c001fbb9 <Vm::faultHandler(regs*)+0x55c>
c001fb9e:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001fba2:	eb 15                	jmp    c001fbb9 <Vm::faultHandler(regs*)+0x55c>
c001fba4:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001fba8:	eb 0f                	jmp    c001fbb9 <Vm::faultHandler(regs*)+0x55c>
c001fbaa:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001fbae:	eb 09                	jmp    c001fbb9 <Vm::faultHandler(regs*)+0x55c>
c001fbb0:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001fbb3:	eb 04                	jmp    c001fbb9 <Vm::faultHandler(regs*)+0x55c>
c001fbb5:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001fbb9:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001fbbe:	74 0d                	je     c001fbcd <Vm::faultHandler(regs*)+0x570>
c001fbc0:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001fbc7:	0f 87 8b 00 00 00    	ja     c001fc58 <Vm::faultHandler(regs*)+0x5fb>
c001fbcd:	53                   	push   ebx
c001fbce:	53                   	push   ebx
c001fbcf:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001fbd3:	52                   	push   edx
c001fbd4:	50                   	push   eax
c001fbd5:	e8 0f fa ff ff       	call   c001f5e9 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001fbda:	5e                   	pop    esi
c001fbdb:	0f b6 c0             	movzx  eax,al
c001fbde:	5d                   	pop    ebp
c001fbdf:	50                   	push   eax
c001fbe0:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001fbe4:	50                   	push   eax
c001fbe5:	e8 64 f6 ff ff       	call   c001f24e <Vm::outbv(unsigned short, unsigned char)>
c001fbea:	83 c4 10             	add    esp,0x10
c001fbed:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001fbf0:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001fbf4:	74 03                	je     c001fbf9 <Vm::faultHandler(regs*)+0x59c>
c001fbf6:	48                   	dec    eax
c001fbf7:	eb 01                	jmp    c001fbfa <Vm::faultHandler(regs*)+0x59d>
c001fbf9:	40                   	inc    eax
c001fbfa:	0f b7 c0             	movzx  eax,ax
c001fbfd:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001fc00:	e9 24 02 00 00       	jmp    c001fe29 <Vm::faultHandler(regs*)+0x7cc>
c001fc05:	83 ec 0c             	sub    esp,0xc
c001fc08:	4b                   	dec    ebx
c001fc09:	68 f7 d4 02 c0       	push   0xc002d4f7
c001fc0e:	e8 40 32 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001fc13:	83 c4 10             	add    esp,0x10
c001fc16:	80 fb 05             	cmp    bl,0x5
c001fc19:	77 0a                	ja     c001fc25 <Vm::faultHandler(regs*)+0x5c8>
c001fc1b:	0f b6 db             	movzx  ebx,bl
c001fc1e:	ff 24 9d 80 d5 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd2a80]
c001fc25:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001fc29:	eb 1b                	jmp    c001fc46 <Vm::faultHandler(regs*)+0x5e9>
c001fc2b:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001fc2f:	eb 15                	jmp    c001fc46 <Vm::faultHandler(regs*)+0x5e9>
c001fc31:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001fc35:	eb 0f                	jmp    c001fc46 <Vm::faultHandler(regs*)+0x5e9>
c001fc37:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001fc3b:	eb 09                	jmp    c001fc46 <Vm::faultHandler(regs*)+0x5e9>
c001fc3d:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001fc40:	eb 04                	jmp    c001fc46 <Vm::faultHandler(regs*)+0x5e9>
c001fc42:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001fc46:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001fc49:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001fc4e:	74 39                	je     c001fc89 <Vm::faultHandler(regs*)+0x62c>
c001fc50:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001fc56:	76 31                	jbe    c001fc89 <Vm::faultHandler(regs*)+0x62c>
c001fc58:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001fc5c:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001fc60:	51                   	push   ecx
c001fc61:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001fc65:	51                   	push   ecx
c001fc66:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001fc6a:	51                   	push   ecx
c001fc6b:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001fc6f:	51                   	push   ecx
c001fc70:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fc74:	52                   	push   edx
c001fc75:	50                   	push   eax
c001fc76:	50                   	push   eax
c001fc77:	68 c4 d4 02 c0       	push   0xc002d4c4
c001fc7c:	e8 d2 31 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001fc81:	83 c4 20             	add    esp,0x20
c001fc84:	e9 fb 01 00 00       	jmp    c001fe84 <Vm::faultHandler(regs*)+0x827>
c001fc89:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001fc8c:	0f b7 d3             	movzx  edx,bx
c001fc8f:	81 e6 00 04 00 00    	and    esi,0x400
c001fc95:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001fc98:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fc9d:	74 1d                	je     c001fcbc <Vm::faultHandler(regs*)+0x65f>
c001fc9f:	51                   	push   ecx
c001fca0:	51                   	push   ecx
c001fca1:	52                   	push   edx
c001fca2:	50                   	push   eax
c001fca3:	e8 64 f9 ff ff       	call   c001f60c <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001fca8:	83 c4 10             	add    esp,0x10
c001fcab:	89 ea                	mov    edx,ebp
c001fcad:	ef                   	out    dx,eax
c001fcae:	85 f6                	test   esi,esi
c001fcb0:	74 05                	je     c001fcb7 <Vm::faultHandler(regs*)+0x65a>
c001fcb2:	83 eb 04             	sub    ebx,0x4
c001fcb5:	eb 21                	jmp    c001fcd8 <Vm::faultHandler(regs*)+0x67b>
c001fcb7:	83 c3 04             	add    ebx,0x4
c001fcba:	eb 1c                	jmp    c001fcd8 <Vm::faultHandler(regs*)+0x67b>
c001fcbc:	51                   	push   ecx
c001fcbd:	51                   	push   ecx
c001fcbe:	52                   	push   edx
c001fcbf:	50                   	push   eax
c001fcc0:	e8 35 f9 ff ff       	call   c001f5fa <Vm::readWordFromReal(unsigned short, unsigned short)>
c001fcc5:	83 c4 10             	add    esp,0x10
c001fcc8:	89 ea                	mov    edx,ebp
c001fcca:	66 ef                	out    dx,ax
c001fccc:	85 f6                	test   esi,esi
c001fcce:	74 05                	je     c001fcd5 <Vm::faultHandler(regs*)+0x678>
c001fcd0:	83 eb 02             	sub    ebx,0x2
c001fcd3:	eb 03                	jmp    c001fcd8 <Vm::faultHandler(regs*)+0x67b>
c001fcd5:	83 c3 02             	add    ebx,0x2
c001fcd8:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001fcde:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001fce1:	e9 43 01 00 00       	jmp    c001fe29 <Vm::faultHandler(regs*)+0x7cc>
c001fce6:	53                   	push   ebx
c001fce7:	53                   	push   ebx
c001fce8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fcec:	50                   	push   eax
c001fced:	68 fd d4 02 c0       	push   0xc002d4fd
c001fcf2:	e8 5c 31 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001fcf7:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001fcfe:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd02:	89 04 24             	mov    DWORD PTR [esp],eax
c001fd05:	e8 31 f5 ff ff       	call   c001f23b <Vm::inbv(unsigned short)>
c001fd0a:	0f b6 c0             	movzx  eax,al
c001fd0d:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001fd10:	eb 5e                	jmp    c001fd70 <Vm::faultHandler(regs*)+0x713>
c001fd12:	51                   	push   ecx
c001fd13:	51                   	push   ecx
c001fd14:	53                   	push   ebx
c001fd15:	68 03 d5 02 c0       	push   0xc002d503
c001fd1a:	e8 34 31 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001fd1f:	83 c4 10             	add    esp,0x10
c001fd22:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fd27:	74 07                	je     c001fd30 <Vm::faultHandler(regs*)+0x6d3>
c001fd29:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fd2d:	ed                   	in     eax,dx
c001fd2e:	eb 14                	jmp    c001fd44 <Vm::faultHandler(regs*)+0x6e7>
c001fd30:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001fd33:	66 31 db             	xor    bx,bx
c001fd36:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001fd39:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fd3d:	66 ed                	in     ax,dx
c001fd3f:	0f b7 c0             	movzx  eax,ax
c001fd42:	09 d8                	or     eax,ebx
c001fd44:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001fd47:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001fd4b:	e9 dc 00 00 00       	jmp    c001fe2c <Vm::faultHandler(regs*)+0x7cf>
c001fd50:	50                   	push   eax
c001fd51:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001fd54:	53                   	push   ebx
c001fd55:	68 09 d5 02 c0       	push   0xc002d509
c001fd5a:	e8 f4 30 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001fd5f:	58                   	pop    eax
c001fd60:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001fd64:	5a                   	pop    edx
c001fd65:	50                   	push   eax
c001fd66:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd6a:	50                   	push   eax
c001fd6b:	e8 de f4 ff ff       	call   c001f24e <Vm::outbv(unsigned short, unsigned char)>
c001fd70:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001fd74:	e9 85 00 00 00       	jmp    c001fdfe <Vm::faultHandler(regs*)+0x7a1>
c001fd79:	50                   	push   eax
c001fd7a:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001fd7d:	53                   	push   ebx
c001fd7e:	68 12 d5 02 c0       	push   0xc002d512
c001fd83:	e8 cb 30 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001fd88:	83 c4 10             	add    esp,0x10
c001fd8b:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fd8f:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fd94:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001fd97:	74 03                	je     c001fd9c <Vm::faultHandler(regs*)+0x73f>
c001fd99:	ef                   	out    dx,eax
c001fd9a:	eb ab                	jmp    c001fd47 <Vm::faultHandler(regs*)+0x6ea>
c001fd9c:	66 ef                	out    dx,ax
c001fd9e:	eb a7                	jmp    c001fd47 <Vm::faultHandler(regs*)+0x6ea>
c001fda0:	55                   	push   ebp
c001fda1:	55                   	push   ebp
c001fda2:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001fda5:	68 1b d5 02 c0       	push   0xc002d51b
c001fdaa:	e8 a4 30 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001fdaf:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001fdb6:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001fdba:	89 04 24             	mov    DWORD PTR [esp],eax
c001fdbd:	e8 79 f4 ff ff       	call   c001f23b <Vm::inbv(unsigned short)>
c001fdc2:	0f b6 c0             	movzx  eax,al
c001fdc5:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001fdc8:	eb 31                	jmp    c001fdfb <Vm::faultHandler(regs*)+0x79e>
c001fdca:	56                   	push   esi
c001fdcb:	56                   	push   esi
c001fdcc:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001fdcf:	68 21 d5 02 c0       	push   0xc002d521
c001fdd4:	e8 7a 30 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001fdd9:	83 c4 10             	add    esp,0x10
c001fddc:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001fddf:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fde4:	74 03                	je     c001fde9 <Vm::faultHandler(regs*)+0x78c>
c001fde6:	ed                   	in     eax,dx
c001fde7:	eb 0d                	jmp    c001fdf6 <Vm::faultHandler(regs*)+0x799>
c001fde9:	66 ed                	in     ax,dx
c001fdeb:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001fdee:	0f b7 c0             	movzx  eax,ax
c001fdf1:	66 31 d2             	xor    dx,dx
c001fdf4:	09 d0                	or     eax,edx
c001fdf6:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001fdf9:	eb 2e                	jmp    c001fe29 <Vm::faultHandler(regs*)+0x7cc>
c001fdfb:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001fdfe:	83 c4 10             	add    esp,0x10
c001fe01:	eb 29                	jmp    c001fe2c <Vm::faultHandler(regs*)+0x7cf>
c001fe03:	50                   	push   eax
c001fe04:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001fe07:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001fe0a:	68 30 d5 02 c0       	push   0xc002d530
c001fe0f:	e8 3f 30 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001fe14:	83 c4 10             	add    esp,0x10
c001fe17:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001fe1a:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fe1f:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001fe22:	74 03                	je     c001fe27 <Vm::faultHandler(regs*)+0x7ca>
c001fe24:	ef                   	out    dx,eax
c001fe25:	eb 02                	jmp    c001fe29 <Vm::faultHandler(regs*)+0x7cc>
c001fe27:	66 ef                	out    dx,ax
c001fe29:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001fe2c:	b0 01                	mov    al,0x1
c001fe2e:	eb 56                	jmp    c001fe86 <Vm::faultHandler(regs*)+0x829>
c001fe30:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001fe34:	51                   	push   ecx
c001fe35:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001fe39:	51                   	push   ecx
c001fe3a:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001fe3e:	51                   	push   ecx
c001fe3f:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001fe43:	51                   	push   ecx
c001fe44:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fe48:	52                   	push   edx
c001fe49:	50                   	push   eax
c001fe4a:	50                   	push   eax
c001fe4b:	68 39 d5 02 c0       	push   0xc002d539
c001fe50:	e8 fe 2f ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c001fe55:	83 c4 20             	add    esp,0x20
c001fe58:	83 ec 0c             	sub    esp,0xc
c001fe5b:	6a 60                	push   0x60
c001fe5d:	e8 d9 f3 ff ff       	call   c001f23b <Vm::inbv(unsigned short)>
c001fe62:	83 c4 10             	add    esp,0x10
c001fe65:	3c 1c                	cmp    al,0x1c
c001fe67:	74 04                	je     c001fe6d <Vm::faultHandler(regs*)+0x810>
c001fe69:	3c 5a                	cmp    al,0x5a
c001fe6b:	75 eb                	jne    c001fe58 <Vm::faultHandler(regs*)+0x7fb>
c001fe6d:	3c 1c                	cmp    al,0x1c
c001fe6f:	74 04                	je     c001fe75 <Vm::faultHandler(regs*)+0x818>
c001fe71:	3c 5a                	cmp    al,0x5a
c001fe73:	75 0f                	jne    c001fe84 <Vm::faultHandler(regs*)+0x827>
c001fe75:	83 ec 0c             	sub    esp,0xc
c001fe78:	6a 60                	push   0x60
c001fe7a:	e8 bc f3 ff ff       	call   c001f23b <Vm::inbv(unsigned short)>
c001fe7f:	83 c4 10             	add    esp,0x10
c001fe82:	eb e9                	jmp    c001fe6d <Vm::faultHandler(regs*)+0x810>
c001fe84:	31 c0                	xor    eax,eax
c001fe86:	83 c4 1c             	add    esp,0x1c
c001fe89:	5b                   	pop    ebx
c001fe8a:	5e                   	pop    esi
c001fe8b:	5f                   	pop    edi
c001fe8c:	5d                   	pop    ebp
c001fe8d:	c3                   	ret    

c001fe8e <Vm::fpuInternalTo32(unsigned long long)>:
c001fe8e:	57                   	push   edi
c001fe8f:	56                   	push   esi
c001fe90:	53                   	push   ebx
c001fe91:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fe95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe99:	89 d6                	mov    esi,edx
c001fe9b:	89 d7                	mov    edi,edx
c001fe9d:	89 c1                	mov    ecx,eax
c001fe9f:	c1 ef 14             	shr    edi,0x14
c001fea2:	89 d3                	mov    ebx,edx
c001fea4:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001feaa:	31 d2                	xor    edx,edx
c001feac:	89 f8                	mov    eax,edi
c001feae:	81 e6 00 00 00 80    	and    esi,0x80000000
c001feb4:	bf ff 00 00 00       	mov    edi,0xff
c001feb9:	05 80 fc ff ff       	add    eax,0xfffffc80
c001febe:	83 d2 ff             	adc    edx,0xffffffff
c001fec1:	39 c7                	cmp    edi,eax
c001fec3:	bf 00 00 00 00       	mov    edi,0x0
c001fec8:	19 d7                	sbb    edi,edx
c001feca:	72 15                	jb     c001fee1 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001fecc:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001fed0:	c1 e0 17             	shl    eax,0x17
c001fed3:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001fed9:	09 f1                	or     ecx,esi
c001fedb:	09 c1                	or     ecx,eax
c001fedd:	89 cf                	mov    edi,ecx
c001fedf:	eb 02                	jmp    c001fee3 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001fee1:	31 ff                	xor    edi,edi
c001fee3:	89 f8                	mov    eax,edi
c001fee5:	5b                   	pop    ebx
c001fee6:	5e                   	pop    esi
c001fee7:	5f                   	pop    edi
c001fee8:	c3                   	ret    

c001fee9 <Vm::fpuInternalTo64(unsigned long long)>:
c001fee9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001feed:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fef1:	c3                   	ret    

c001fef2 <Vm::fpu32ToInternal(unsigned int)>:
c001fef2:	57                   	push   edi
c001fef3:	31 ff                	xor    edi,edi
c001fef5:	56                   	push   esi
c001fef6:	53                   	push   ebx
c001fef7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001fefb:	89 cb                	mov    ebx,ecx
c001fefd:	89 ce                	mov    esi,ecx
c001feff:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001ff05:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001ff0b:	c1 e9 17             	shr    ecx,0x17
c001ff0e:	89 f0                	mov    eax,esi
c001ff10:	0f b6 d1             	movzx  edx,cl
c001ff13:	81 c2 80 03 00 00    	add    edx,0x380
c001ff19:	89 d1                	mov    ecx,edx
c001ff1b:	89 fa                	mov    edx,edi
c001ff1d:	c1 e1 14             	shl    ecx,0x14
c001ff20:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001ff24:	c1 e0 1d             	shl    eax,0x1d
c001ff27:	89 d7                	mov    edi,edx
c001ff29:	89 c6                	mov    esi,eax
c001ff2b:	89 ca                	mov    edx,ecx
c001ff2d:	89 f0                	mov    eax,esi
c001ff2f:	09 fa                	or     edx,edi
c001ff31:	09 da                	or     edx,ebx
c001ff33:	5b                   	pop    ebx
c001ff34:	5e                   	pop    esi
c001ff35:	5f                   	pop    edi
c001ff36:	c3                   	ret    

c001ff37 <Vm::fpu64ToInternal(unsigned long long)>:
c001ff37:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ff3b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ff3f:	c3                   	ret    

c001ff40 <Vm::fpuFloatToLong(unsigned long long)>:
c001ff40:	57                   	push   edi
c001ff41:	31 c0                	xor    eax,eax
c001ff43:	56                   	push   esi
c001ff44:	31 d2                	xor    edx,edx
c001ff46:	53                   	push   ebx
c001ff47:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ff4b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ff4f:	89 d9                	mov    ecx,ebx
c001ff51:	c1 e9 14             	shr    ecx,0x14
c001ff54:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001ff5a:	89 cf                	mov    edi,ecx
c001ff5c:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001ff62:	78 33                	js     c001ff97 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001ff64:	89 d9                	mov    ecx,ebx
c001ff66:	89 f0                	mov    eax,esi
c001ff68:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001ff6e:	81 c9 00 00 10 00    	or     ecx,0x100000
c001ff74:	89 ca                	mov    edx,ecx
c001ff76:	b9 34 00 00 00       	mov    ecx,0x34
c001ff7b:	29 f9                	sub    ecx,edi
c001ff7d:	0f ad d0             	shrd   eax,edx,cl
c001ff80:	d3 fa                	sar    edx,cl
c001ff82:	f6 c1 20             	test   cl,0x20
c001ff85:	74 05                	je     c001ff8c <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001ff87:	89 d0                	mov    eax,edx
c001ff89:	c1 fa 1f             	sar    edx,0x1f
c001ff8c:	85 db                	test   ebx,ebx
c001ff8e:	79 07                	jns    c001ff97 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001ff90:	f7 d8                	neg    eax
c001ff92:	83 d2 00             	adc    edx,0x0
c001ff95:	f7 da                	neg    edx
c001ff97:	5b                   	pop    ebx
c001ff98:	5e                   	pop    esi
c001ff99:	5f                   	pop    edi
c001ff9a:	c3                   	ret    

c001ff9b <Vm::fpuULongToFloat(unsigned long long)>:
c001ff9b:	57                   	push   edi
c001ff9c:	31 c9                	xor    ecx,ecx
c001ff9e:	56                   	push   esi
c001ff9f:	53                   	push   ebx
c001ffa0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ffa4:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001ffa8:	0f ba e7 14          	bt     edi,0x14
c001ffac:	72 07                	jb     c001ffb5 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001ffae:	01 f6                	add    esi,esi
c001ffb0:	11 ff                	adc    edi,edi
c001ffb2:	41                   	inc    ecx
c001ffb3:	eb f3                	jmp    c001ffa8 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001ffb5:	89 fa                	mov    edx,edi
c001ffb7:	89 f0                	mov    eax,esi
c001ffb9:	bb 33 04 00 00       	mov    ebx,0x433
c001ffbe:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001ffc4:	29 cb                	sub    ebx,ecx
c001ffc6:	89 d9                	mov    ecx,ebx
c001ffc8:	5b                   	pop    ebx
c001ffc9:	c1 e1 14             	shl    ecx,0x14
c001ffcc:	5e                   	pop    esi
c001ffcd:	09 ca                	or     edx,ecx
c001ffcf:	5f                   	pop    edi
c001ffd0:	c3                   	ret    

c001ffd1 <Vm::fpuLongToFloat(long long)>:
c001ffd1:	56                   	push   esi
c001ffd2:	31 c0                	xor    eax,eax
c001ffd4:	53                   	push   ebx
c001ffd5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ffd9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ffdd:	39 c8                	cmp    eax,ecx
c001ffdf:	19 d8                	sbb    eax,ebx
c001ffe1:	7d 04                	jge    c001ffe7 <Vm::fpuLongToFloat(long long)+0x16>
c001ffe3:	31 f6                	xor    esi,esi
c001ffe5:	eb 0c                	jmp    c001fff3 <Vm::fpuLongToFloat(long long)+0x22>
c001ffe7:	f7 d9                	neg    ecx
c001ffe9:	be 01 00 00 00       	mov    esi,0x1
c001ffee:	83 d3 00             	adc    ebx,0x0
c001fff1:	f7 db                	neg    ebx
c001fff3:	31 c0                	xor    eax,eax
c001fff5:	0f ba e3 14          	bt     ebx,0x14
c001fff9:	72 07                	jb     c0020002 <Vm::fpuLongToFloat(long long)+0x31>
c001fffb:	01 c9                	add    ecx,ecx
c001fffd:	11 db                	adc    ebx,ebx
c001ffff:	40                   	inc    eax
c0020000:	eb f3                	jmp    c001fff5 <Vm::fpuLongToFloat(long long)+0x24>
c0020002:	ba 33 04 00 00       	mov    edx,0x433
c0020007:	29 c2                	sub    edx,eax
c0020009:	89 c8                	mov    eax,ecx
c002000b:	c1 e2 14             	shl    edx,0x14
c002000e:	89 d9                	mov    ecx,ebx
c0020010:	89 f3                	mov    ebx,esi
c0020012:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c0020018:	09 ca                	or     edx,ecx
c002001a:	84 db                	test   bl,bl
c002001c:	74 06                	je     c0020024 <Vm::fpuLongToFloat(long long)+0x53>
c002001e:	81 ca 00 00 00 80    	or     edx,0x80000000
c0020024:	5b                   	pop    ebx
c0020025:	5e                   	pop    esi
c0020026:	c3                   	ret    

c0020027 <Vm::fpuGet0()>:
c0020027:	31 c0                	xor    eax,eax
c0020029:	31 d2                	xor    edx,edx
c002002b:	c3                   	ret    

c002002c <Vm::fpuGet1()>:
c002002c:	b8 01 00 00 00       	mov    eax,0x1
c0020031:	31 d2                	xor    edx,edx
c0020033:	c3                   	ret    

c0020034 <Vm::fpuGetPi()>:
c0020034:	b8 03 00 00 00       	mov    eax,0x3
c0020039:	31 d2                	xor    edx,edx
c002003b:	c3                   	ret    

c002003c <Vm::fpuGetLog2E()>:
c002003c:	83 ec 18             	sub    esp,0x18
c002003f:	68 98 d5 02 c0       	push   0xc002d598
c0020044:	e8 a4 a8 ff ff       	call   c001a8ed <Krnl::panic(char const*)>
c0020049:	b8 ef be ad de       	mov    eax,0xdeadbeef
c002004e:	31 d2                	xor    edx,edx
c0020050:	83 c4 1c             	add    esp,0x1c
c0020053:	c3                   	ret    

c0020054 <Vm::fpuGetLogE2()>:
c0020054:	83 ec 18             	sub    esp,0x18
c0020057:	68 a4 d5 02 c0       	push   0xc002d5a4
c002005c:	e8 8c a8 ff ff       	call   c001a8ed <Krnl::panic(char const*)>
c0020061:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0020066:	31 d2                	xor    edx,edx
c0020068:	83 c4 1c             	add    esp,0x1c
c002006b:	c3                   	ret    

c002006c <Vm::fpuGetLog210()>:
c002006c:	83 ec 18             	sub    esp,0x18
c002006f:	68 b0 d5 02 c0       	push   0xc002d5b0
c0020074:	e8 74 a8 ff ff       	call   c001a8ed <Krnl::panic(char const*)>
c0020079:	b8 ef be ad de       	mov    eax,0xdeadbeef
c002007e:	31 d2                	xor    edx,edx
c0020080:	83 c4 1c             	add    esp,0x1c
c0020083:	c3                   	ret    

c0020084 <Vm::fpuGetLog102()>:
c0020084:	83 ec 18             	sub    esp,0x18
c0020087:	68 bd d5 02 c0       	push   0xc002d5bd
c002008c:	e8 5c a8 ff ff       	call   c001a8ed <Krnl::panic(char const*)>
c0020091:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0020096:	31 d2                	xor    edx,edx
c0020098:	83 c4 1c             	add    esp,0x1c
c002009b:	c3                   	ret    

c002009c <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c002009c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00200a0:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00200a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00200a8:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c00200ac:	0f 92 c0             	setb   al
c00200af:	c3                   	ret    

c00200b0 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c00200b0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00200b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200b8:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c00200bc:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c00200c0:	09 c2                	or     edx,eax
c00200c2:	0f 94 c0             	sete   al
c00200c5:	c3                   	ret    

c00200c6 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c00200c6:	57                   	push   edi
c00200c7:	56                   	push   esi
c00200c8:	53                   	push   ebx
c00200c9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00200cd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00200d1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00200d5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00200d9:	57                   	push   edi
c00200da:	56                   	push   esi
c00200db:	53                   	push   ebx
c00200dc:	51                   	push   ecx
c00200dd:	e8 ce ff ff ff       	call   c00200b0 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c00200e2:	83 c4 10             	add    esp,0x10
c00200e5:	88 c2                	mov    dl,al
c00200e7:	31 c0                	xor    eax,eax
c00200e9:	84 d2                	test   dl,dl
c00200eb:	75 0c                	jne    c00200f9 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c00200ed:	57                   	push   edi
c00200ee:	56                   	push   esi
c00200ef:	53                   	push   ebx
c00200f0:	51                   	push   ecx
c00200f1:	e8 a6 ff ff ff       	call   c002009c <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c00200f6:	83 c4 10             	add    esp,0x10
c00200f9:	83 e0 01             	and    eax,0x1
c00200fc:	5b                   	pop    ebx
c00200fd:	88 c1                	mov    cl,al
c00200ff:	83 e2 01             	and    edx,0x1
c0020102:	a0 61 28 03 c0       	mov    al,ds:0xc0032861
c0020107:	c1 e2 06             	shl    edx,0x6
c002010a:	83 e0 ba             	and    eax,0xffffffba
c002010d:	5e                   	pop    esi
c002010e:	09 c8                	or     eax,ecx
c0020110:	5f                   	pop    edi
c0020111:	09 d0                	or     eax,edx
c0020113:	a2 61 28 03 c0       	mov    ds:0xc0032861,al
c0020118:	c3                   	ret    

c0020119 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c0020119:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002011d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0020121:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0020125:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c0020129:	c3                   	ret    

c002012a <Vm::fpuAbs(unsigned long long)>:
c002012a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002012e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020132:	c3                   	ret    

c0020133 <Vm::fpuChs(unsigned long long)>:
c0020133:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020137:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002013b:	f7 d8                	neg    eax
c002013d:	83 d2 00             	adc    edx,0x0
c0020140:	f7 da                	neg    edx
c0020142:	c3                   	ret    

c0020143 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c0020143:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c0020147:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c002014c:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c0020150:	eb c7                	jmp    c0020119 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c0020152 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c0020152:	53                   	push   ebx
c0020153:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020157:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002015b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002015f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0020163:	0f af ca             	imul   ecx,edx
c0020166:	0f af d8             	imul   ebx,eax
c0020169:	f7 e2                	mul    edx
c002016b:	01 d9                	add    ecx,ebx
c002016d:	5b                   	pop    ebx
c002016e:	01 ca                	add    edx,ecx
c0020170:	c3                   	ret    

c0020171 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c0020171:	83 ec 0c             	sub    esp,0xc
c0020174:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020178:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002017c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020180:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020184:	e8 5b 74 00 00       	call   c00275e4 <__udivdi3>
c0020189:	83 c4 1c             	add    esp,0x1c
c002018c:	c3                   	ret    

c002018d <Vm::fpuSquare(unsigned long long)>:
c002018d:	50                   	push   eax
c002018e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020192:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020196:	52                   	push   edx
c0020197:	50                   	push   eax
c0020198:	52                   	push   edx
c0020199:	50                   	push   eax
c002019a:	e8 b3 ff ff ff       	call   c0020152 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c002019f:	83 c4 14             	add    esp,0x14
c00201a2:	c3                   	ret    

c00201a3 <Vm::fpuGetReg(int)>:
c00201a3:	83 ec 0c             	sub    esp,0xc
c00201a6:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c00201ab:	76 10                	jbe    c00201bd <Vm::fpuGetReg(int)+0x1a>
c00201ad:	83 ec 0c             	sub    esp,0xc
c00201b0:	68 ca d5 02 c0       	push   0xc002d5ca
c00201b5:	e8 33 a7 ff ff       	call   c001a8ed <Krnl::panic(char const*)>
c00201ba:	83 c4 10             	add    esp,0x10
c00201bd:	a0 61 28 03 c0       	mov    al,ds:0xc0032861
c00201c2:	b9 08 00 00 00       	mov    ecx,0x8
c00201c7:	c0 e8 03             	shr    al,0x3
c00201ca:	83 e0 07             	and    eax,0x7
c00201cd:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00201d1:	99                   	cdq    
c00201d2:	f7 f9                	idiv   ecx
c00201d4:	8b 04 d5 64 28 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffcd79c]
c00201db:	8b 14 d5 68 28 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffcd798]
c00201e2:	83 c4 0c             	add    esp,0xc
c00201e5:	c3                   	ret    

c00201e6 <Vm::fpuSetReg(int, unsigned long long)>:
c00201e6:	57                   	push   edi
c00201e7:	56                   	push   esi
c00201e8:	52                   	push   edx
c00201e9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00201ed:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00201f1:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c00201f6:	76 10                	jbe    c0020208 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c00201f8:	83 ec 0c             	sub    esp,0xc
c00201fb:	68 dd d5 02 c0       	push   0xc002d5dd
c0020200:	e8 e8 a6 ff ff       	call   c001a8ed <Krnl::panic(char const*)>
c0020205:	83 c4 10             	add    esp,0x10
c0020208:	a0 61 28 03 c0       	mov    al,ds:0xc0032861
c002020d:	b9 08 00 00 00       	mov    ecx,0x8
c0020212:	c0 e8 03             	shr    al,0x3
c0020215:	83 e0 07             	and    eax,0x7
c0020218:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c002021c:	99                   	cdq    
c002021d:	f7 f9                	idiv   ecx
c002021f:	89 34 d5 64 28 03 c0 	mov    DWORD PTR [edx*8-0x3ffcd79c],esi
c0020226:	89 3c d5 68 28 03 c0 	mov    DWORD PTR [edx*8-0x3ffcd798],edi
c002022d:	58                   	pop    eax
c002022e:	5e                   	pop    esi
c002022f:	5f                   	pop    edi
c0020230:	c3                   	ret    

c0020231 <Vm::fpuPush(unsigned long long)>:
c0020231:	a0 61 28 03 c0       	mov    al,ds:0xc0032861
c0020236:	c0 e8 03             	shr    al,0x3
c0020239:	83 e0 07             	and    eax,0x7
c002023c:	83 c0 07             	add    eax,0x7
c002023f:	88 c2                	mov    dl,al
c0020241:	83 e0 07             	and    eax,0x7
c0020244:	83 e2 07             	and    edx,0x7
c0020247:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c002024e:	8a 15 61 28 03 c0    	mov    dl,BYTE PTR ds:0xc0032861
c0020254:	83 e2 c7             	and    edx,0xffffffc7
c0020257:	09 ca                	or     edx,ecx
c0020259:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002025d:	88 15 61 28 03 c0    	mov    BYTE PTR ds:0xc0032861,dl
c0020263:	89 0c c5 68 28 03 c0 	mov    DWORD PTR [eax*8-0x3ffcd798],ecx
c002026a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002026e:	89 14 c5 64 28 03 c0 	mov    DWORD PTR [eax*8-0x3ffcd79c],edx
c0020275:	a1 a4 28 03 c0       	mov    eax,ds:0xc00328a4
c002027a:	83 f8 08             	cmp    eax,0x8
c002027d:	75 08                	jne    c0020287 <Vm::fpuPush(unsigned long long)+0x56>
c002027f:	80 0d 60 28 03 c0 40 	or     BYTE PTR ds:0xc0032860,0x40
c0020286:	c3                   	ret    
c0020287:	40                   	inc    eax
c0020288:	a3 a4 28 03 c0       	mov    ds:0xc00328a4,eax
c002028d:	c3                   	ret    

c002028e <Vm::fpuPop()>:
c002028e:	8a 0d 61 28 03 c0    	mov    cl,BYTE PTR ds:0xc0032861
c0020294:	53                   	push   ebx
c0020295:	c0 e9 03             	shr    cl,0x3
c0020298:	8a 1d 61 28 03 c0    	mov    bl,BYTE PTR ds:0xc0032861
c002029e:	83 e1 07             	and    ecx,0x7
c00202a1:	83 e3 c7             	and    ebx,0xffffffc7
c00202a4:	8b 04 cd 64 28 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffcd79c]
c00202ab:	8b 14 cd 68 28 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffcd798]
c00202b2:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c00202b9:	83 e1 38             	and    ecx,0x38
c00202bc:	09 d9                	or     ecx,ebx
c00202be:	88 0d 61 28 03 c0    	mov    BYTE PTR ds:0xc0032861,cl
c00202c4:	8b 0d a4 28 03 c0    	mov    ecx,DWORD PTR ds:0xc00328a4
c00202ca:	85 c9                	test   ecx,ecx
c00202cc:	74 09                	je     c00202d7 <Vm::fpuPop()+0x49>
c00202ce:	49                   	dec    ecx
c00202cf:	89 0d a4 28 03 c0    	mov    DWORD PTR ds:0xc00328a4,ecx
c00202d5:	eb 07                	jmp    c00202de <Vm::fpuPop()+0x50>
c00202d7:	80 0d 60 28 03 c0 40 	or     BYTE PTR ds:0xc0032860,0x40
c00202de:	5b                   	pop    ebx
c00202df:	c3                   	ret    

c00202e0 <Vm::x87Handler(regs*)>:
c00202e0:	55                   	push   ebp
c00202e1:	57                   	push   edi
c00202e2:	56                   	push   esi
c00202e3:	53                   	push   ebx
c00202e4:	83 ec 1c             	sub    esp,0x1c
c00202e7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00202eb:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c00202f0:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00202f3:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00202fb:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00202ff:	50                   	push   eax
c0020300:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0020304:	50                   	push   eax
c0020305:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020309:	50                   	push   eax
c002030a:	53                   	push   ebx
c002030b:	e8 aa 9c ff ff       	call   c0019fba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0020310:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0020313:	83 c4 10             	add    esp,0x10
c0020316:	89 c6                	mov    esi,eax
c0020318:	80 fa d9             	cmp    dl,0xd9
c002031b:	0f 85 52 01 00 00    	jne    c0020473 <Vm::x87Handler(regs*)+0x193>
c0020321:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020325:	8d 50 20             	lea    edx,[eax+0x20]
c0020328:	80 fa 0e             	cmp    dl,0xe
c002032b:	0f 87 86 00 00 00    	ja     c00203b7 <Vm::x87Handler(regs*)+0xd7>
c0020331:	0f b6 d2             	movzx  edx,dl
c0020334:	ff 24 95 f0 d5 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd2a10]
c002033b:	e8 e7 fc ff ff       	call   c0020027 <Vm::fpuGet0()>
c0020340:	eb 05                	jmp    c0020347 <Vm::x87Handler(regs*)+0x67>
c0020342:	e8 e5 fc ff ff       	call   c002002c <Vm::fpuGet1()>
c0020347:	57                   	push   edi
c0020348:	57                   	push   edi
c0020349:	52                   	push   edx
c002034a:	50                   	push   eax
c002034b:	e8 e1 fe ff ff       	call   c0020231 <Vm::fpuPush(unsigned long long)>
c0020350:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020354:	83 c4 10             	add    esp,0x10
c0020357:	b0 01                	mov    al,0x1
c0020359:	e9 e3 09 00 00       	jmp    c0020d41 <Vm::x87Handler(regs*)+0xa61>
c002035e:	83 ec 0c             	sub    esp,0xc
c0020361:	6a 00                	push   0x0
c0020363:	e8 3b fe ff ff       	call   c00201a3 <Vm::fpuGetReg(int)>
c0020368:	59                   	pop    ecx
c0020369:	5e                   	pop    esi
c002036a:	52                   	push   edx
c002036b:	50                   	push   eax
c002036c:	e8 c2 fd ff ff       	call   c0020133 <Vm::fpuChs(unsigned long long)>
c0020371:	eb 13                	jmp    c0020386 <Vm::x87Handler(regs*)+0xa6>
c0020373:	83 ec 0c             	sub    esp,0xc
c0020376:	6a 00                	push   0x0
c0020378:	e8 26 fe ff ff       	call   c00201a3 <Vm::fpuGetReg(int)>
c002037d:	5f                   	pop    edi
c002037e:	5d                   	pop    ebp
c002037f:	52                   	push   edx
c0020380:	50                   	push   eax
c0020381:	e8 a4 fd ff ff       	call   c002012a <Vm::fpuAbs(unsigned long long)>
c0020386:	83 c4 0c             	add    esp,0xc
c0020389:	52                   	push   edx
c002038a:	50                   	push   eax
c002038b:	6a 00                	push   0x0
c002038d:	e8 54 fe ff ff       	call   c00201e6 <Vm::fpuSetReg(int, unsigned long long)>
c0020392:	eb bc                	jmp    c0020350 <Vm::x87Handler(regs*)+0x70>
c0020394:	e8 d3 fc ff ff       	call   c002006c <Vm::fpuGetLog210()>
c0020399:	eb ac                	jmp    c0020347 <Vm::x87Handler(regs*)+0x67>
c002039b:	e8 9c fc ff ff       	call   c002003c <Vm::fpuGetLog2E()>
c00203a0:	eb a5                	jmp    c0020347 <Vm::x87Handler(regs*)+0x67>
c00203a2:	e8 8d fc ff ff       	call   c0020034 <Vm::fpuGetPi()>
c00203a7:	eb 9e                	jmp    c0020347 <Vm::x87Handler(regs*)+0x67>
c00203a9:	e8 d6 fc ff ff       	call   c0020084 <Vm::fpuGetLog102()>
c00203ae:	eb 97                	jmp    c0020347 <Vm::x87Handler(regs*)+0x67>
c00203b0:	e8 9f fc ff ff       	call   c0020054 <Vm::fpuGetLogE2()>
c00203b5:	eb 90                	jmp    c0020347 <Vm::x87Handler(regs*)+0x67>
c00203b7:	8d 50 40             	lea    edx,[eax+0x40]
c00203ba:	80 fa 07             	cmp    dl,0x7
c00203bd:	77 15                	ja     c00203d4 <Vm::x87Handler(regs*)+0xf4>
c00203bf:	83 ec 0c             	sub    esp,0xc
c00203c2:	2d c0 00 00 00       	sub    eax,0xc0
c00203c7:	50                   	push   eax
c00203c8:	e8 d6 fd ff ff       	call   c00201a3 <Vm::fpuGetReg(int)>
c00203cd:	59                   	pop    ecx
c00203ce:	5e                   	pop    esi
c00203cf:	e9 75 ff ff ff       	jmp    c0020349 <Vm::x87Handler(regs*)+0x69>
c00203d4:	8d 50 38             	lea    edx,[eax+0x38]
c00203d7:	80 fa 07             	cmp    dl,0x7
c00203da:	77 3c                	ja     c0020418 <Vm::x87Handler(regs*)+0x138>
c00203dc:	83 ec 0c             	sub    esp,0xc
c00203df:	2d c8 00 00 00       	sub    eax,0xc8
c00203e4:	50                   	push   eax
c00203e5:	e8 b9 fd ff ff       	call   c00201a3 <Vm::fpuGetReg(int)>
c00203ea:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00203f1:	89 c6                	mov    esi,eax
c00203f3:	89 d7                	mov    edi,edx
c00203f5:	e8 a9 fd ff ff       	call   c00201a3 <Vm::fpuGetReg(int)>
c00203fa:	83 c4 0c             	add    esp,0xc
c00203fd:	52                   	push   edx
c00203fe:	50                   	push   eax
c00203ff:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020403:	2d c8 00 00 00       	sub    eax,0xc8
c0020408:	50                   	push   eax
c0020409:	e8 d8 fd ff ff       	call   c00201e6 <Vm::fpuSetReg(int, unsigned long long)>
c002040e:	83 c4 0c             	add    esp,0xc
c0020411:	57                   	push   edi
c0020412:	56                   	push   esi
c0020413:	e9 73 ff ff ff       	jmp    c002038b <Vm::x87Handler(regs*)+0xab>
c0020418:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002041c:	84 d2                	test   dl,dl
c002041e:	75 0f                	jne    c002042f <Vm::x87Handler(regs*)+0x14f>
c0020420:	83 ec 0c             	sub    esp,0xc
c0020423:	ff 36                	push   DWORD PTR [esi]
c0020425:	e8 c8 fa ff ff       	call   c001fef2 <Vm::fpu32ToInternal(unsigned int)>
c002042a:	e9 bf 00 00 00       	jmp    c00204ee <Vm::x87Handler(regs*)+0x20e>
c002042f:	80 fa 03             	cmp    dl,0x3
c0020432:	75 13                	jne    c0020447 <Vm::x87Handler(regs*)+0x167>
c0020434:	e8 55 fe ff ff       	call   c002028e <Vm::fpuPop()>
c0020439:	55                   	push   ebp
c002043a:	55                   	push   ebp
c002043b:	52                   	push   edx
c002043c:	50                   	push   eax
c002043d:	e8 4c fa ff ff       	call   c001fe8e <Vm::fpuInternalTo32(unsigned long long)>
c0020442:	e9 88 00 00 00       	jmp    c00204cf <Vm::x87Handler(regs*)+0x1ef>
c0020447:	80 fa 05             	cmp    dl,0x5
c002044a:	75 0e                	jne    c002045a <Vm::x87Handler(regs*)+0x17a>
c002044c:	66 8b 06             	mov    ax,WORD PTR [esi]
c002044f:	66 a3 62 28 03 c0    	mov    ds:0xc0032862,ax
c0020455:	e9 df 00 00 00       	jmp    c0020539 <Vm::x87Handler(regs*)+0x259>
c002045a:	31 c0                	xor    eax,eax
c002045c:	80 fa 07             	cmp    dl,0x7
c002045f:	0f 85 dc 08 00 00    	jne    c0020d41 <Vm::x87Handler(regs*)+0xa61>
c0020465:	66 a1 62 28 03 c0    	mov    ax,ds:0xc0032862
c002046b:	66 89 06             	mov    WORD PTR [esi],ax
c002046e:	e9 c6 00 00 00       	jmp    c0020539 <Vm::x87Handler(regs*)+0x259>
c0020473:	80 fa d8             	cmp    dl,0xd8
c0020476:	0f 84 c9 00 00 00    	je     c0020545 <Vm::x87Handler(regs*)+0x265>
c002047c:	80 fa dc             	cmp    dl,0xdc
c002047f:	0f 84 0d 02 00 00    	je     c0020692 <Vm::x87Handler(regs*)+0x3b2>
c0020485:	80 fa de             	cmp    dl,0xde
c0020488:	0f 84 cd 02 00 00    	je     c002075b <Vm::x87Handler(regs*)+0x47b>
c002048e:	80 fa dd             	cmp    dl,0xdd
c0020491:	0f 84 5f 04 00 00    	je     c00208f6 <Vm::x87Handler(regs*)+0x616>
c0020497:	80 fa da             	cmp    dl,0xda
c002049a:	0f 84 24 05 00 00    	je     c00209c4 <Vm::x87Handler(regs*)+0x6e4>
c00204a0:	80 fa df             	cmp    dl,0xdf
c00204a3:	0f 84 68 05 00 00    	je     c0020a11 <Vm::x87Handler(regs*)+0x731>
c00204a9:	31 c0                	xor    eax,eax
c00204ab:	80 fa db             	cmp    dl,0xdb
c00204ae:	0f 85 8d 08 00 00    	jne    c0020d41 <Vm::x87Handler(regs*)+0xa61>
c00204b4:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00204b8:	80 fa 03             	cmp    dl,0x3
c00204bb:	0f 85 70 06 00 00    	jne    c0020b31 <Vm::x87Handler(regs*)+0x851>
c00204c1:	e8 c8 fd ff ff       	call   c002028e <Vm::fpuPop()>
c00204c6:	55                   	push   ebp
c00204c7:	55                   	push   ebp
c00204c8:	52                   	push   edx
c00204c9:	50                   	push   eax
c00204ca:	e8 71 fa ff ff       	call   c001ff40 <Vm::fpuFloatToLong(unsigned long long)>
c00204cf:	83 c4 10             	add    esp,0x10
c00204d2:	89 06                	mov    DWORD PTR [esi],eax
c00204d4:	eb 63                	jmp    c0020539 <Vm::x87Handler(regs*)+0x259>
c00204d6:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00204da:	84 d2                	test   dl,dl
c00204dc:	0f 85 e6 05 00 00    	jne    c0020ac8 <Vm::x87Handler(regs*)+0x7e8>
c00204e2:	57                   	push   edi
c00204e3:	57                   	push   edi
c00204e4:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00204e7:	ff 36                	push   DWORD PTR [esi]
c00204e9:	e8 49 fa ff ff       	call   c001ff37 <Vm::fpu64ToInternal(unsigned long long)>
c00204ee:	5e                   	pop    esi
c00204ef:	5f                   	pop    edi
c00204f0:	52                   	push   edx
c00204f1:	50                   	push   eax
c00204f2:	e8 3a fd ff ff       	call   c0020231 <Vm::fpuPush(unsigned long long)>
c00204f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00204fb:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c00204fe:	e9 51 fe ff ff       	jmp    c0020354 <Vm::x87Handler(regs*)+0x74>
c0020503:	80 fa 03             	cmp    dl,0x3
c0020506:	0f 85 d7 06 00 00    	jne    c0020be3 <Vm::x87Handler(regs*)+0x903>
c002050c:	57                   	push   edi
c002050d:	57                   	push   edi
c002050e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020511:	ff 36                	push   DWORD PTR [esi]
c0020513:	e8 1f fa ff ff       	call   c001ff37 <Vm::fpu64ToInternal(unsigned long long)>
c0020518:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002051f:	89 c6                	mov    esi,eax
c0020521:	89 d7                	mov    edi,edx
c0020523:	e8 7b fc ff ff       	call   c00201a3 <Vm::fpuGetReg(int)>
c0020528:	57                   	push   edi
c0020529:	56                   	push   esi
c002052a:	52                   	push   edx
c002052b:	50                   	push   eax
c002052c:	e8 95 fb ff ff       	call   c00200c6 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020531:	83 c4 20             	add    esp,0x20
c0020534:	e8 55 fd ff ff       	call   c002028e <Vm::fpuPop()>
c0020539:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002053d:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0020540:	e9 12 fe ff ff       	jmp    c0020357 <Vm::x87Handler(regs*)+0x77>
c0020545:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020549:	8d 50 40             	lea    edx,[eax+0x40]
c002054c:	80 fa 07             	cmp    dl,0x7
c002054f:	77 29                	ja     c002057a <Vm::x87Handler(regs*)+0x29a>
c0020551:	83 ec 0c             	sub    esp,0xc
c0020554:	2d c0 00 00 00       	sub    eax,0xc0
c0020559:	50                   	push   eax
c002055a:	e8 44 fc ff ff       	call   c00201a3 <Vm::fpuGetReg(int)>
c002055f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020566:	89 c6                	mov    esi,eax
c0020568:	89 d7                	mov    edi,edx
c002056a:	e8 34 fc ff ff       	call   c00201a3 <Vm::fpuGetReg(int)>
c002056f:	57                   	push   edi
c0020570:	56                   	push   esi
c0020571:	52                   	push   edx
c0020572:	50                   	push   eax
c0020573:	e8 a1 fb ff ff       	call   c0020119 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0020578:	eb 2f                	jmp    c00205a9 <Vm::x87Handler(regs*)+0x2c9>
c002057a:	8d 50 38             	lea    edx,[eax+0x38]
c002057d:	80 fa 07             	cmp    dl,0x7
c0020580:	77 2f                	ja     c00205b1 <Vm::x87Handler(regs*)+0x2d1>
c0020582:	83 ec 0c             	sub    esp,0xc
c0020585:	2d c8 00 00 00       	sub    eax,0xc8
c002058a:	50                   	push   eax
c002058b:	e8 13 fc ff ff       	call   c00201a3 <Vm::fpuGetReg(int)>
c0020590:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020597:	89 c6                	mov    esi,eax
c0020599:	89 d7                	mov    edi,edx
c002059b:	e8 03 fc ff ff       	call   c00201a3 <Vm::fpuGetReg(int)>
c00205a0:	57                   	push   edi
c00205a1:	56                   	push   esi
c00205a2:	52                   	push   edx
c00205a3:	50                   	push   eax
c00205a4:	e8 a9 fb ff ff       	call   c0020152 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c00205a9:	83 c4 1c             	add    esp,0x1c
c00205ac:	e9 d8 fd ff ff       	jmp    c0020389 <Vm::x87Handler(regs*)+0xa9>
c00205b1:	8d 50 30             	lea    edx,[eax+0x30]
c00205b4:	80 fa 07             	cmp    dl,0x7
c00205b7:	77 0d                	ja     c00205c6 <Vm::x87Handler(regs*)+0x2e6>
c00205b9:	83 ec 0c             	sub    esp,0xc
c00205bc:	2d d0 00 00 00       	sub    eax,0xd0
c00205c1:	e9 99 03 00 00       	jmp    c002095f <Vm::x87Handler(regs*)+0x67f>
c00205c6:	8d 50 28             	lea    edx,[eax+0x28]
c00205c9:	80 fa 07             	cmp    dl,0x7
c00205cc:	77 0d                	ja     c00205db <Vm::x87Handler(regs*)+0x2fb>
c00205ce:	83 ec 0c             	sub    esp,0xc
c00205d1:	2d d8 00 00 00       	sub    eax,0xd8
c00205d6:	e9 c0 03 00 00       	jmp    c002099b <Vm::x87Handler(regs*)+0x6bb>
c00205db:	8d 50 20             	lea    edx,[eax+0x20]
c00205de:	80 fa 07             	cmp    dl,0x7
c00205e1:	77 1b                	ja     c00205fe <Vm::x87Handler(regs*)+0x31e>
c00205e3:	83 ec 0c             	sub    esp,0xc
c00205e6:	2d e0 00 00 00       	sub    eax,0xe0
c00205eb:	50                   	push   eax
c00205ec:	e8 b2 fb ff ff       	call   c00201a3 <Vm::fpuGetReg(int)>
c00205f1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00205f8:	89 c6                	mov    esi,eax
c00205fa:	89 d7                	mov    edi,edx
c00205fc:	eb 22                	jmp    c0020620 <Vm::x87Handler(regs*)+0x340>
c00205fe:	8d 50 18             	lea    edx,[eax+0x18]
c0020601:	80 fa 07             	cmp    dl,0x7
c0020604:	77 2d                	ja     c0020633 <Vm::x87Handler(regs*)+0x353>
c0020606:	83 ec 0c             	sub    esp,0xc
c0020609:	6a 00                	push   0x0
c002060b:	e8 93 fb ff ff       	call   c00201a3 <Vm::fpuGetReg(int)>
c0020610:	89 c6                	mov    esi,eax
c0020612:	89 d7                	mov    edi,edx
c0020614:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020618:	2d e8 00 00 00       	sub    eax,0xe8
c002061d:	89 04 24             	mov    DWORD PTR [esp],eax
c0020620:	e8 7e fb ff ff       	call   c00201a3 <Vm::fpuGetReg(int)>
c0020625:	57                   	push   edi
c0020626:	56                   	push   esi
c0020627:	52                   	push   edx
c0020628:	50                   	push   eax
c0020629:	e8 15 fb ff ff       	call   c0020143 <Vm::fpuSub(unsigned long long, unsigned long long)>
c002062e:	e9 76 ff ff ff       	jmp    c00205a9 <Vm::x87Handler(regs*)+0x2c9>
c0020633:	8d 50 10             	lea    edx,[eax+0x10]
c0020636:	80 fa 07             	cmp    dl,0x7
c0020639:	77 1b                	ja     c0020656 <Vm::x87Handler(regs*)+0x376>
c002063b:	83 ec 0c             	sub    esp,0xc
c002063e:	2d f0 00 00 00       	sub    eax,0xf0
c0020643:	50                   	push   eax
c0020644:	e8 5a fb ff ff       	call   c00201a3 <Vm::fpuGetReg(int)>
c0020649:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020650:	89 c6                	mov    esi,eax
c0020652:	89 d7                	mov    edi,edx
c0020654:	eb 22                	jmp    c0020678 <Vm::x87Handler(regs*)+0x398>
c0020656:	3c f7                	cmp    al,0xf7
c0020658:	0f 86 d1 03 00 00    	jbe    c0020a2f <Vm::x87Handler(regs*)+0x74f>
c002065e:	83 ec 0c             	sub    esp,0xc
c0020661:	6a 00                	push   0x0
c0020663:	e8 3b fb ff ff       	call   c00201a3 <Vm::fpuGetReg(int)>
c0020668:	89 c6                	mov    esi,eax
c002066a:	89 d7                	mov    edi,edx
c002066c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020670:	2d f8 00 00 00       	sub    eax,0xf8
c0020675:	89 04 24             	mov    DWORD PTR [esp],eax
c0020678:	e8 26 fb ff ff       	call   c00201a3 <Vm::fpuGetReg(int)>
c002067d:	57                   	push   edi
c002067e:	56                   	push   esi
c002067f:	52                   	push   edx
c0020680:	50                   	push   eax
c0020681:	e8 eb fa ff ff       	call   c0020171 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020686:	83 c4 1c             	add    esp,0x1c
c0020689:	52                   	push   edx
c002068a:	50                   	push   eax
c002068b:	6a 00                	push   0x0
c002068d:	e9 51 02 00 00       	jmp    c00208e3 <Vm::x87Handler(regs*)+0x603>
c0020692:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020696:	8d 50 40             	lea    edx,[eax+0x40]
c0020699:	80 fa 07             	cmp    dl,0x7
c002069c:	77 37                	ja     c00206d5 <Vm::x87Handler(regs*)+0x3f5>
c002069e:	83 ec 0c             	sub    esp,0xc
c00206a1:	2d c0 00 00 00       	sub    eax,0xc0
c00206a6:	50                   	push   eax
c00206a7:	e8 f7 fa ff ff       	call   c00201a3 <Vm::fpuGetReg(int)>
c00206ac:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00206b3:	89 c6                	mov    esi,eax
c00206b5:	89 d7                	mov    edi,edx
c00206b7:	e8 e7 fa ff ff       	call   c00201a3 <Vm::fpuGetReg(int)>
c00206bc:	57                   	push   edi
c00206bd:	56                   	push   esi
c00206be:	52                   	push   edx
c00206bf:	50                   	push   eax
c00206c0:	e8 54 fa ff ff       	call   c0020119 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c00206c5:	83 c4 1c             	add    esp,0x1c
c00206c8:	52                   	push   edx
c00206c9:	50                   	push   eax
c00206ca:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00206ce:	2d c0 00 00 00       	sub    eax,0xc0
c00206d3:	eb 3d                	jmp    c0020712 <Vm::x87Handler(regs*)+0x432>
c00206d5:	8d 50 38             	lea    edx,[eax+0x38]
c00206d8:	80 fa 07             	cmp    dl,0x7
c00206db:	77 3b                	ja     c0020718 <Vm::x87Handler(regs*)+0x438>
c00206dd:	83 ec 0c             	sub    esp,0xc
c00206e0:	2d c8 00 00 00       	sub    eax,0xc8
c00206e5:	50                   	push   eax
c00206e6:	e8 b8 fa ff ff       	call   c00201a3 <Vm::fpuGetReg(int)>
c00206eb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00206f2:	89 c6                	mov    esi,eax
c00206f4:	89 d7                	mov    edi,edx
c00206f6:	e8 a8 fa ff ff       	call   c00201a3 <Vm::fpuGetReg(int)>
c00206fb:	57                   	push   edi
c00206fc:	56                   	push   esi
c00206fd:	52                   	push   edx
c00206fe:	50                   	push   eax
c00206ff:	e8 4e fa ff ff       	call   c0020152 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020704:	83 c4 1c             	add    esp,0x1c
c0020707:	52                   	push   edx
c0020708:	50                   	push   eax
c0020709:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002070d:	2d c8 00 00 00       	sub    eax,0xc8
c0020712:	50                   	push   eax
c0020713:	e9 75 fc ff ff       	jmp    c002038d <Vm::x87Handler(regs*)+0xad>
c0020718:	83 c0 18             	add    eax,0x18
c002071b:	3c 07                	cmp    al,0x7
c002071d:	0f 87 3b 04 00 00    	ja     c0020b5e <Vm::x87Handler(regs*)+0x87e>
c0020723:	83 ec 0c             	sub    esp,0xc
c0020726:	6a 00                	push   0x0
c0020728:	e8 76 fa ff ff       	call   c00201a3 <Vm::fpuGetReg(int)>
c002072d:	89 c6                	mov    esi,eax
c002072f:	89 d7                	mov    edi,edx
c0020731:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020735:	2d e8 00 00 00       	sub    eax,0xe8
c002073a:	89 04 24             	mov    DWORD PTR [esp],eax
c002073d:	e8 61 fa ff ff       	call   c00201a3 <Vm::fpuGetReg(int)>
c0020742:	57                   	push   edi
c0020743:	56                   	push   esi
c0020744:	52                   	push   edx
c0020745:	50                   	push   eax
c0020746:	e8 f8 f9 ff ff       	call   c0020143 <Vm::fpuSub(unsigned long long, unsigned long long)>
c002074b:	83 c4 1c             	add    esp,0x1c
c002074e:	52                   	push   edx
c002074f:	50                   	push   eax
c0020750:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020754:	2d e8 00 00 00       	sub    eax,0xe8
c0020759:	eb b7                	jmp    c0020712 <Vm::x87Handler(regs*)+0x432>
c002075b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002075f:	8d 50 40             	lea    edx,[eax+0x40]
c0020762:	80 fa 07             	cmp    dl,0x7
c0020765:	77 3a                	ja     c00207a1 <Vm::x87Handler(regs*)+0x4c1>
c0020767:	83 ec 0c             	sub    esp,0xc
c002076a:	2d c0 00 00 00       	sub    eax,0xc0
c002076f:	50                   	push   eax
c0020770:	e8 2e fa ff ff       	call   c00201a3 <Vm::fpuGetReg(int)>
c0020775:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002077c:	89 c6                	mov    esi,eax
c002077e:	89 d7                	mov    edi,edx
c0020780:	e8 1e fa ff ff       	call   c00201a3 <Vm::fpuGetReg(int)>
c0020785:	57                   	push   edi
c0020786:	56                   	push   esi
c0020787:	52                   	push   edx
c0020788:	50                   	push   eax
c0020789:	e8 8b f9 ff ff       	call   c0020119 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c002078e:	83 c4 1c             	add    esp,0x1c
c0020791:	52                   	push   edx
c0020792:	50                   	push   eax
c0020793:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020797:	2d c0 00 00 00       	sub    eax,0xc0
c002079c:	e9 9e 01 00 00       	jmp    c002093f <Vm::x87Handler(regs*)+0x65f>
c00207a1:	8d 50 20             	lea    edx,[eax+0x20]
c00207a4:	80 fa 07             	cmp    dl,0x7
c00207a7:	77 3a                	ja     c00207e3 <Vm::x87Handler(regs*)+0x503>
c00207a9:	83 ec 0c             	sub    esp,0xc
c00207ac:	2d e0 00 00 00       	sub    eax,0xe0
c00207b1:	50                   	push   eax
c00207b2:	e8 ec f9 ff ff       	call   c00201a3 <Vm::fpuGetReg(int)>
c00207b7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00207be:	89 c6                	mov    esi,eax
c00207c0:	89 d7                	mov    edi,edx
c00207c2:	e8 dc f9 ff ff       	call   c00201a3 <Vm::fpuGetReg(int)>
c00207c7:	57                   	push   edi
c00207c8:	56                   	push   esi
c00207c9:	52                   	push   edx
c00207ca:	50                   	push   eax
c00207cb:	e8 73 f9 ff ff       	call   c0020143 <Vm::fpuSub(unsigned long long, unsigned long long)>
c00207d0:	83 c4 1c             	add    esp,0x1c
c00207d3:	52                   	push   edx
c00207d4:	50                   	push   eax
c00207d5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00207d9:	2d e0 00 00 00       	sub    eax,0xe0
c00207de:	e9 5c 01 00 00       	jmp    c002093f <Vm::x87Handler(regs*)+0x65f>
c00207e3:	8d 50 18             	lea    edx,[eax+0x18]
c00207e6:	80 fa 07             	cmp    dl,0x7
c00207e9:	77 3b                	ja     c0020826 <Vm::x87Handler(regs*)+0x546>
c00207eb:	83 ec 0c             	sub    esp,0xc
c00207ee:	6a 00                	push   0x0
c00207f0:	e8 ae f9 ff ff       	call   c00201a3 <Vm::fpuGetReg(int)>
c00207f5:	89 c6                	mov    esi,eax
c00207f7:	89 d7                	mov    edi,edx
c00207f9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00207fd:	2d e8 00 00 00       	sub    eax,0xe8
c0020802:	89 04 24             	mov    DWORD PTR [esp],eax
c0020805:	e8 99 f9 ff ff       	call   c00201a3 <Vm::fpuGetReg(int)>
c002080a:	57                   	push   edi
c002080b:	56                   	push   esi
c002080c:	52                   	push   edx
c002080d:	50                   	push   eax
c002080e:	e8 30 f9 ff ff       	call   c0020143 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020813:	83 c4 1c             	add    esp,0x1c
c0020816:	52                   	push   edx
c0020817:	50                   	push   eax
c0020818:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002081c:	2d e8 00 00 00       	sub    eax,0xe8
c0020821:	e9 19 01 00 00       	jmp    c002093f <Vm::x87Handler(regs*)+0x65f>
c0020826:	8d 50 38             	lea    edx,[eax+0x38]
c0020829:	80 fa 07             	cmp    dl,0x7
c002082c:	77 37                	ja     c0020865 <Vm::x87Handler(regs*)+0x585>
c002082e:	83 ec 0c             	sub    esp,0xc
c0020831:	2d c8 00 00 00       	sub    eax,0xc8
c0020836:	50                   	push   eax
c0020837:	e8 67 f9 ff ff       	call   c00201a3 <Vm::fpuGetReg(int)>
c002083c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020843:	89 c6                	mov    esi,eax
c0020845:	89 d7                	mov    edi,edx
c0020847:	e8 57 f9 ff ff       	call   c00201a3 <Vm::fpuGetReg(int)>
c002084c:	57                   	push   edi
c002084d:	56                   	push   esi
c002084e:	52                   	push   edx
c002084f:	50                   	push   eax
c0020850:	e8 fd f8 ff ff       	call   c0020152 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020855:	83 c4 1c             	add    esp,0x1c
c0020858:	52                   	push   edx
c0020859:	50                   	push   eax
c002085a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002085e:	2d c8 00 00 00       	sub    eax,0xc8
c0020863:	eb 7d                	jmp    c00208e2 <Vm::x87Handler(regs*)+0x602>
c0020865:	3c f7                	cmp    al,0xf7
c0020867:	76 38                	jbe    c00208a1 <Vm::x87Handler(regs*)+0x5c1>
c0020869:	83 ec 0c             	sub    esp,0xc
c002086c:	6a 00                	push   0x0
c002086e:	e8 30 f9 ff ff       	call   c00201a3 <Vm::fpuGetReg(int)>
c0020873:	89 c6                	mov    esi,eax
c0020875:	89 d7                	mov    edi,edx
c0020877:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002087b:	2d f8 00 00 00       	sub    eax,0xf8
c0020880:	89 04 24             	mov    DWORD PTR [esp],eax
c0020883:	e8 1b f9 ff ff       	call   c00201a3 <Vm::fpuGetReg(int)>
c0020888:	57                   	push   edi
c0020889:	56                   	push   esi
c002088a:	52                   	push   edx
c002088b:	50                   	push   eax
c002088c:	e8 e0 f8 ff ff       	call   c0020171 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020891:	83 c4 1c             	add    esp,0x1c
c0020894:	52                   	push   edx
c0020895:	50                   	push   eax
c0020896:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002089a:	2d f8 00 00 00       	sub    eax,0xf8
c002089f:	eb 41                	jmp    c00208e2 <Vm::x87Handler(regs*)+0x602>
c00208a1:	8d 50 10             	lea    edx,[eax+0x10]
c00208a4:	80 fa 07             	cmp    dl,0x7
c00208a7:	0f 87 5a 01 00 00    	ja     c0020a07 <Vm::x87Handler(regs*)+0x727>
c00208ad:	83 ec 0c             	sub    esp,0xc
c00208b0:	2d f0 00 00 00       	sub    eax,0xf0
c00208b5:	50                   	push   eax
c00208b6:	e8 e8 f8 ff ff       	call   c00201a3 <Vm::fpuGetReg(int)>
c00208bb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00208c2:	89 c6                	mov    esi,eax
c00208c4:	89 d7                	mov    edi,edx
c00208c6:	e8 d8 f8 ff ff       	call   c00201a3 <Vm::fpuGetReg(int)>
c00208cb:	57                   	push   edi
c00208cc:	56                   	push   esi
c00208cd:	52                   	push   edx
c00208ce:	50                   	push   eax
c00208cf:	e8 9d f8 ff ff       	call   c0020171 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00208d4:	83 c4 1c             	add    esp,0x1c
c00208d7:	52                   	push   edx
c00208d8:	50                   	push   eax
c00208d9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00208dd:	2d f0 00 00 00       	sub    eax,0xf0
c00208e2:	50                   	push   eax
c00208e3:	e8 fe f8 ff ff       	call   c00201e6 <Vm::fpuSetReg(int, unsigned long long)>
c00208e8:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00208ec:	e8 9d f9 ff ff       	call   c002028e <Vm::fpuPop()>
c00208f1:	e9 5e fa ff ff       	jmp    c0020354 <Vm::x87Handler(regs*)+0x74>
c00208f6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00208fa:	8d 50 30             	lea    edx,[eax+0x30]
c00208fd:	80 fa 07             	cmp    dl,0x7
c0020900:	77 1d                	ja     c002091f <Vm::x87Handler(regs*)+0x63f>
c0020902:	83 ec 0c             	sub    esp,0xc
c0020905:	6a 00                	push   0x0
c0020907:	e8 97 f8 ff ff       	call   c00201a3 <Vm::fpuGetReg(int)>
c002090c:	83 c4 0c             	add    esp,0xc
c002090f:	52                   	push   edx
c0020910:	50                   	push   eax
c0020911:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020915:	2d d0 00 00 00       	sub    eax,0xd0
c002091a:	e9 f3 fd ff ff       	jmp    c0020712 <Vm::x87Handler(regs*)+0x432>
c002091f:	8d 50 28             	lea    edx,[eax+0x28]
c0020922:	80 fa 07             	cmp    dl,0x7
c0020925:	77 28                	ja     c002094f <Vm::x87Handler(regs*)+0x66f>
c0020927:	83 ec 0c             	sub    esp,0xc
c002092a:	6a 00                	push   0x0
c002092c:	e8 72 f8 ff ff       	call   c00201a3 <Vm::fpuGetReg(int)>
c0020931:	83 c4 0c             	add    esp,0xc
c0020934:	52                   	push   edx
c0020935:	50                   	push   eax
c0020936:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002093a:	2d d8 00 00 00       	sub    eax,0xd8
c002093f:	50                   	push   eax
c0020940:	e8 a1 f8 ff ff       	call   c00201e6 <Vm::fpuSetReg(int, unsigned long long)>
c0020945:	e8 44 f9 ff ff       	call   c002028e <Vm::fpuPop()>
c002094a:	e9 01 fa ff ff       	jmp    c0020350 <Vm::x87Handler(regs*)+0x70>
c002094f:	8d 50 20             	lea    edx,[eax+0x20]
c0020952:	80 fa 07             	cmp    dl,0x7
c0020955:	77 30                	ja     c0020987 <Vm::x87Handler(regs*)+0x6a7>
c0020957:	83 ec 0c             	sub    esp,0xc
c002095a:	2d e0 00 00 00       	sub    eax,0xe0
c002095f:	50                   	push   eax
c0020960:	e8 3e f8 ff ff       	call   c00201a3 <Vm::fpuGetReg(int)>
c0020965:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002096c:	89 c6                	mov    esi,eax
c002096e:	89 d7                	mov    edi,edx
c0020970:	e8 2e f8 ff ff       	call   c00201a3 <Vm::fpuGetReg(int)>
c0020975:	57                   	push   edi
c0020976:	56                   	push   esi
c0020977:	52                   	push   edx
c0020978:	50                   	push   eax
c0020979:	e8 48 f7 ff ff       	call   c00200c6 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002097e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020982:	e9 54 02 00 00       	jmp    c0020bdb <Vm::x87Handler(regs*)+0x8fb>
c0020987:	8d 50 18             	lea    edx,[eax+0x18]
c002098a:	80 fa 07             	cmp    dl,0x7
c002098d:	0f 87 43 fb ff ff    	ja     c00204d6 <Vm::x87Handler(regs*)+0x1f6>
c0020993:	83 ec 0c             	sub    esp,0xc
c0020996:	2d e8 00 00 00       	sub    eax,0xe8
c002099b:	50                   	push   eax
c002099c:	e8 02 f8 ff ff       	call   c00201a3 <Vm::fpuGetReg(int)>
c00209a1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00209a8:	89 c6                	mov    esi,eax
c00209aa:	89 d7                	mov    edi,edx
c00209ac:	e8 f2 f7 ff ff       	call   c00201a3 <Vm::fpuGetReg(int)>
c00209b1:	57                   	push   edi
c00209b2:	56                   	push   esi
c00209b3:	52                   	push   edx
c00209b4:	50                   	push   eax
c00209b5:	e8 0c f7 ff ff       	call   c00200c6 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00209ba:	83 c4 20             	add    esp,0x20
c00209bd:	e8 cc f8 ff ff       	call   c002028e <Vm::fpuPop()>
c00209c2:	eb 62                	jmp    c0020a26 <Vm::x87Handler(regs*)+0x746>
c00209c4:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c00209c8:	0f 85 0f 01 00 00    	jne    c0020add <Vm::x87Handler(regs*)+0x7fd>
c00209ce:	83 ec 0c             	sub    esp,0xc
c00209d1:	6a 01                	push   0x1
c00209d3:	e8 cb f7 ff ff       	call   c00201a3 <Vm::fpuGetReg(int)>
c00209d8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00209df:	89 c6                	mov    esi,eax
c00209e1:	89 d7                	mov    edi,edx
c00209e3:	e8 bb f7 ff ff       	call   c00201a3 <Vm::fpuGetReg(int)>
c00209e8:	57                   	push   edi
c00209e9:	56                   	push   esi
c00209ea:	52                   	push   edx
c00209eb:	50                   	push   eax
c00209ec:	e8 d5 f6 ff ff       	call   c00200c6 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00209f1:	83 c4 20             	add    esp,0x20
c00209f4:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00209f8:	e8 91 f8 ff ff       	call   c002028e <Vm::fpuPop()>
c00209fd:	e8 8c f8 ff ff       	call   c002028e <Vm::fpuPop()>
c0020a02:	e9 50 f9 ff ff       	jmp    c0020357 <Vm::x87Handler(regs*)+0x77>
c0020a07:	3c d9                	cmp    al,0xd9
c0020a09:	0f 85 b5 02 00 00    	jne    c0020cc4 <Vm::x87Handler(regs*)+0x9e4>
c0020a0f:	eb bd                	jmp    c00209ce <Vm::x87Handler(regs*)+0x6ee>
c0020a11:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c0020a15:	0f 85 ea 02 00 00    	jne    c0020d05 <Vm::x87Handler(regs*)+0xa25>
c0020a1b:	0f b7 05 60 28 03 c0 	movzx  eax,WORD PTR ds:0xc0032860
c0020a22:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c0020a26:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020a2a:	e9 28 f9 ff ff       	jmp    c0020357 <Vm::x87Handler(regs*)+0x77>
c0020a2f:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020a33:	84 d2                	test   dl,dl
c0020a35:	75 0f                	jne    c0020a46 <Vm::x87Handler(regs*)+0x766>
c0020a37:	83 ec 0c             	sub    esp,0xc
c0020a3a:	ff 36                	push   DWORD PTR [esi]
c0020a3c:	e8 b1 f4 ff ff       	call   c001fef2 <Vm::fpu32ToInternal(unsigned int)>
c0020a41:	e9 2c 01 00 00       	jmp    c0020b72 <Vm::x87Handler(regs*)+0x892>
c0020a46:	80 fa 01             	cmp    dl,0x1
c0020a49:	75 0f                	jne    c0020a5a <Vm::x87Handler(regs*)+0x77a>
c0020a4b:	83 ec 0c             	sub    esp,0xc
c0020a4e:	ff 36                	push   DWORD PTR [esi]
c0020a50:	e8 9d f4 ff ff       	call   c001fef2 <Vm::fpu32ToInternal(unsigned int)>
c0020a55:	e9 81 02 00 00       	jmp    c0020cdb <Vm::x87Handler(regs*)+0x9fb>
c0020a5a:	80 fa 04             	cmp    dl,0x4
c0020a5d:	75 0f                	jne    c0020a6e <Vm::x87Handler(regs*)+0x78e>
c0020a5f:	83 ec 0c             	sub    esp,0xc
c0020a62:	ff 36                	push   DWORD PTR [esi]
c0020a64:	e8 89 f4 ff ff       	call   c001fef2 <Vm::fpu32ToInternal(unsigned int)>
c0020a69:	e9 86 01 00 00       	jmp    c0020bf4 <Vm::x87Handler(regs*)+0x914>
c0020a6e:	80 fa 05             	cmp    dl,0x5
c0020a71:	75 1b                	jne    c0020a8e <Vm::x87Handler(regs*)+0x7ae>
c0020a73:	83 ec 0c             	sub    esp,0xc
c0020a76:	6a 00                	push   0x0
c0020a78:	e8 26 f7 ff ff       	call   c00201a3 <Vm::fpuGetReg(int)>
c0020a7d:	89 c7                	mov    edi,eax
c0020a7f:	89 d5                	mov    ebp,edx
c0020a81:	58                   	pop    eax
c0020a82:	ff 36                	push   DWORD PTR [esi]
c0020a84:	e8 69 f4 ff ff       	call   c001fef2 <Vm::fpu32ToInternal(unsigned int)>
c0020a89:	e9 a3 01 00 00       	jmp    c0020c31 <Vm::x87Handler(regs*)+0x951>
c0020a8e:	80 fa 06             	cmp    dl,0x6
c0020a91:	75 0f                	jne    c0020aa2 <Vm::x87Handler(regs*)+0x7c2>
c0020a93:	83 ec 0c             	sub    esp,0xc
c0020a96:	ff 36                	push   DWORD PTR [esi]
c0020a98:	e8 55 f4 ff ff       	call   c001fef2 <Vm::fpu32ToInternal(unsigned int)>
c0020a9d:	e9 ae 01 00 00       	jmp    c0020c50 <Vm::x87Handler(regs*)+0x970>
c0020aa2:	31 c0                	xor    eax,eax
c0020aa4:	80 fa 07             	cmp    dl,0x7
c0020aa7:	0f 85 94 02 00 00    	jne    c0020d41 <Vm::x87Handler(regs*)+0xa61>
c0020aad:	83 ec 0c             	sub    esp,0xc
c0020ab0:	6a 00                	push   0x0
c0020ab2:	e8 ec f6 ff ff       	call   c00201a3 <Vm::fpuGetReg(int)>
c0020ab7:	89 c7                	mov    edi,eax
c0020ab9:	89 d5                	mov    ebp,edx
c0020abb:	58                   	pop    eax
c0020abc:	ff 36                	push   DWORD PTR [esi]
c0020abe:	e8 2f f4 ff ff       	call   c001fef2 <Vm::fpu32ToInternal(unsigned int)>
c0020ac3:	e9 cb 01 00 00       	jmp    c0020c93 <Vm::x87Handler(regs*)+0x9b3>
c0020ac8:	80 fa 03             	cmp    dl,0x3
c0020acb:	0f 85 d3 01 00 00    	jne    c0020ca4 <Vm::x87Handler(regs*)+0x9c4>
c0020ad1:	e8 b8 f7 ff ff       	call   c002028e <Vm::fpuPop()>
c0020ad6:	51                   	push   ecx
c0020ad7:	51                   	push   ecx
c0020ad8:	e9 de 01 00 00       	jmp    c0020cbb <Vm::x87Handler(regs*)+0x9db>
c0020add:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020ae1:	80 fa 01             	cmp    dl,0x1
c0020ae4:	75 09                	jne    c0020aef <Vm::x87Handler(regs*)+0x80f>
c0020ae6:	57                   	push   edi
c0020ae7:	57                   	push   edi
c0020ae8:	8b 06                	mov    eax,DWORD PTR [esi]
c0020aea:	e9 e3 01 00 00       	jmp    c0020cd2 <Vm::x87Handler(regs*)+0x9f2>
c0020aef:	80 fa 04             	cmp    dl,0x4
c0020af2:	75 12                	jne    c0020b06 <Vm::x87Handler(regs*)+0x826>
c0020af4:	31 d2                	xor    edx,edx
c0020af6:	51                   	push   ecx
c0020af7:	51                   	push   ecx
c0020af8:	8b 06                	mov    eax,DWORD PTR [esi]
c0020afa:	52                   	push   edx
c0020afb:	50                   	push   eax
c0020afc:	e8 d0 f4 ff ff       	call   c001ffd1 <Vm::fpuLongToFloat(long long)>
c0020b01:	e9 ee 00 00 00       	jmp    c0020bf4 <Vm::x87Handler(regs*)+0x914>
c0020b06:	31 c0                	xor    eax,eax
c0020b08:	80 fa 07             	cmp    dl,0x7
c0020b0b:	0f 85 30 02 00 00    	jne    c0020d41 <Vm::x87Handler(regs*)+0xa61>
c0020b11:	83 ec 0c             	sub    esp,0xc
c0020b14:	6a 00                	push   0x0
c0020b16:	e8 88 f6 ff ff       	call   c00201a3 <Vm::fpuGetReg(int)>
c0020b1b:	89 c7                	mov    edi,eax
c0020b1d:	89 d5                	mov    ebp,edx
c0020b1f:	58                   	pop    eax
c0020b20:	8b 06                	mov    eax,DWORD PTR [esi]
c0020b22:	5a                   	pop    edx
c0020b23:	31 d2                	xor    edx,edx
c0020b25:	52                   	push   edx
c0020b26:	50                   	push   eax
c0020b27:	e8 a5 f4 ff ff       	call   c001ffd1 <Vm::fpuLongToFloat(long long)>
c0020b2c:	e9 62 01 00 00       	jmp    c0020c93 <Vm::x87Handler(regs*)+0x9b3>
c0020b31:	84 d2                	test   dl,dl
c0020b33:	75 0d                	jne    c0020b42 <Vm::x87Handler(regs*)+0x862>
c0020b35:	31 d2                	xor    edx,edx
c0020b37:	55                   	push   ebp
c0020b38:	55                   	push   ebp
c0020b39:	8b 06                	mov    eax,DWORD PTR [esi]
c0020b3b:	52                   	push   edx
c0020b3c:	50                   	push   eax
c0020b3d:	e9 d3 01 00 00       	jmp    c0020d15 <Vm::x87Handler(regs*)+0xa35>
c0020b42:	31 c0                	xor    eax,eax
c0020b44:	80 fa 02             	cmp    dl,0x2
c0020b47:	0f 85 f4 01 00 00    	jne    c0020d41 <Vm::x87Handler(regs*)+0xa61>
c0020b4d:	83 ec 0c             	sub    esp,0xc
c0020b50:	6a 00                	push   0x0
c0020b52:	e8 4c f6 ff ff       	call   c00201a3 <Vm::fpuGetReg(int)>
c0020b57:	59                   	pop    ecx
c0020b58:	5f                   	pop    edi
c0020b59:	e9 6a f9 ff ff       	jmp    c00204c8 <Vm::x87Handler(regs*)+0x1e8>
c0020b5e:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020b62:	84 d2                	test   dl,dl
c0020b64:	75 2a                	jne    c0020b90 <Vm::x87Handler(regs*)+0x8b0>
c0020b66:	50                   	push   eax
c0020b67:	50                   	push   eax
c0020b68:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020b6b:	ff 36                	push   DWORD PTR [esi]
c0020b6d:	e8 c5 f3 ff ff       	call   c001ff37 <Vm::fpu64ToInternal(unsigned long long)>
c0020b72:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020b79:	89 c6                	mov    esi,eax
c0020b7b:	89 d7                	mov    edi,edx
c0020b7d:	e8 21 f6 ff ff       	call   c00201a3 <Vm::fpuGetReg(int)>
c0020b82:	57                   	push   edi
c0020b83:	56                   	push   esi
c0020b84:	52                   	push   edx
c0020b85:	50                   	push   eax
c0020b86:	e8 8e f5 ff ff       	call   c0020119 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0020b8b:	e9 64 01 00 00       	jmp    c0020cf4 <Vm::x87Handler(regs*)+0xa14>
c0020b90:	80 fa 01             	cmp    dl,0x1
c0020b93:	75 11                	jne    c0020ba6 <Vm::x87Handler(regs*)+0x8c6>
c0020b95:	50                   	push   eax
c0020b96:	50                   	push   eax
c0020b97:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020b9a:	ff 36                	push   DWORD PTR [esi]
c0020b9c:	e8 96 f3 ff ff       	call   c001ff37 <Vm::fpu64ToInternal(unsigned long long)>
c0020ba1:	e9 35 01 00 00       	jmp    c0020cdb <Vm::x87Handler(regs*)+0x9fb>
c0020ba6:	80 fa 02             	cmp    dl,0x2
c0020ba9:	0f 85 54 f9 ff ff    	jne    c0020503 <Vm::x87Handler(regs*)+0x223>
c0020baf:	55                   	push   ebp
c0020bb0:	55                   	push   ebp
c0020bb1:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020bb4:	ff 36                	push   DWORD PTR [esi]
c0020bb6:	e8 7c f3 ff ff       	call   c001ff37 <Vm::fpu64ToInternal(unsigned long long)>
c0020bbb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020bc2:	89 c6                	mov    esi,eax
c0020bc4:	89 d7                	mov    edi,edx
c0020bc6:	e8 d8 f5 ff ff       	call   c00201a3 <Vm::fpuGetReg(int)>
c0020bcb:	57                   	push   edi
c0020bcc:	56                   	push   esi
c0020bcd:	52                   	push   edx
c0020bce:	50                   	push   eax
c0020bcf:	e8 f2 f4 ff ff       	call   c00200c6 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020bd4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020bd8:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0020bdb:	83 c4 20             	add    esp,0x20
c0020bde:	e9 74 f7 ff ff       	jmp    c0020357 <Vm::x87Handler(regs*)+0x77>
c0020be3:	80 fa 04             	cmp    dl,0x4
c0020be6:	75 2a                	jne    c0020c12 <Vm::x87Handler(regs*)+0x932>
c0020be8:	51                   	push   ecx
c0020be9:	51                   	push   ecx
c0020bea:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020bed:	ff 36                	push   DWORD PTR [esi]
c0020bef:	e8 43 f3 ff ff       	call   c001ff37 <Vm::fpu64ToInternal(unsigned long long)>
c0020bf4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020bfb:	89 c6                	mov    esi,eax
c0020bfd:	89 d7                	mov    edi,edx
c0020bff:	e8 9f f5 ff ff       	call   c00201a3 <Vm::fpuGetReg(int)>
c0020c04:	57                   	push   edi
c0020c05:	56                   	push   esi
c0020c06:	52                   	push   edx
c0020c07:	50                   	push   eax
c0020c08:	e8 36 f5 ff ff       	call   c0020143 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020c0d:	e9 e2 00 00 00       	jmp    c0020cf4 <Vm::x87Handler(regs*)+0xa14>
c0020c12:	80 fa 05             	cmp    dl,0x5
c0020c15:	75 28                	jne    c0020c3f <Vm::x87Handler(regs*)+0x95f>
c0020c17:	83 ec 0c             	sub    esp,0xc
c0020c1a:	6a 00                	push   0x0
c0020c1c:	e8 82 f5 ff ff       	call   c00201a3 <Vm::fpuGetReg(int)>
c0020c21:	89 c7                	mov    edi,eax
c0020c23:	89 d5                	mov    ebp,edx
c0020c25:	58                   	pop    eax
c0020c26:	5a                   	pop    edx
c0020c27:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020c2a:	ff 36                	push   DWORD PTR [esi]
c0020c2c:	e8 06 f3 ff ff       	call   c001ff37 <Vm::fpu64ToInternal(unsigned long long)>
c0020c31:	83 c4 10             	add    esp,0x10
c0020c34:	55                   	push   ebp
c0020c35:	57                   	push   edi
c0020c36:	52                   	push   edx
c0020c37:	50                   	push   eax
c0020c38:	e8 06 f5 ff ff       	call   c0020143 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020c3d:	eb 60                	jmp    c0020c9f <Vm::x87Handler(regs*)+0x9bf>
c0020c3f:	80 fa 06             	cmp    dl,0x6
c0020c42:	75 2a                	jne    c0020c6e <Vm::x87Handler(regs*)+0x98e>
c0020c44:	51                   	push   ecx
c0020c45:	51                   	push   ecx
c0020c46:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020c49:	ff 36                	push   DWORD PTR [esi]
c0020c4b:	e8 e7 f2 ff ff       	call   c001ff37 <Vm::fpu64ToInternal(unsigned long long)>
c0020c50:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020c57:	89 c6                	mov    esi,eax
c0020c59:	89 d7                	mov    edi,edx
c0020c5b:	e8 43 f5 ff ff       	call   c00201a3 <Vm::fpuGetReg(int)>
c0020c60:	57                   	push   edi
c0020c61:	56                   	push   esi
c0020c62:	52                   	push   edx
c0020c63:	50                   	push   eax
c0020c64:	e8 08 f5 ff ff       	call   c0020171 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020c69:	e9 86 00 00 00       	jmp    c0020cf4 <Vm::x87Handler(regs*)+0xa14>
c0020c6e:	31 c0                	xor    eax,eax
c0020c70:	80 fa 07             	cmp    dl,0x7
c0020c73:	0f 85 c8 00 00 00    	jne    c0020d41 <Vm::x87Handler(regs*)+0xa61>
c0020c79:	83 ec 0c             	sub    esp,0xc
c0020c7c:	6a 00                	push   0x0
c0020c7e:	e8 20 f5 ff ff       	call   c00201a3 <Vm::fpuGetReg(int)>
c0020c83:	89 c7                	mov    edi,eax
c0020c85:	89 d5                	mov    ebp,edx
c0020c87:	58                   	pop    eax
c0020c88:	5a                   	pop    edx
c0020c89:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020c8c:	ff 36                	push   DWORD PTR [esi]
c0020c8e:	e8 a4 f2 ff ff       	call   c001ff37 <Vm::fpu64ToInternal(unsigned long long)>
c0020c93:	83 c4 10             	add    esp,0x10
c0020c96:	55                   	push   ebp
c0020c97:	57                   	push   edi
c0020c98:	52                   	push   edx
c0020c99:	50                   	push   eax
c0020c9a:	e8 d2 f4 ff ff       	call   c0020171 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020c9f:	83 c4 0c             	add    esp,0xc
c0020ca2:	eb 53                	jmp    c0020cf7 <Vm::x87Handler(regs*)+0xa17>
c0020ca4:	31 c0                	xor    eax,eax
c0020ca6:	80 fa 02             	cmp    dl,0x2
c0020ca9:	0f 85 92 00 00 00    	jne    c0020d41 <Vm::x87Handler(regs*)+0xa61>
c0020caf:	83 ec 0c             	sub    esp,0xc
c0020cb2:	6a 00                	push   0x0
c0020cb4:	e8 ea f4 ff ff       	call   c00201a3 <Vm::fpuGetReg(int)>
c0020cb9:	59                   	pop    ecx
c0020cba:	5f                   	pop    edi
c0020cbb:	52                   	push   edx
c0020cbc:	50                   	push   eax
c0020cbd:	e8 27 f2 ff ff       	call   c001fee9 <Vm::fpuInternalTo64(unsigned long long)>
c0020cc2:	eb 70                	jmp    c0020d34 <Vm::x87Handler(regs*)+0xa54>
c0020cc4:	31 c0                	xor    eax,eax
c0020cc6:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c0020ccb:	75 74                	jne    c0020d41 <Vm::x87Handler(regs*)+0xa61>
c0020ccd:	50                   	push   eax
c0020cce:	50                   	push   eax
c0020ccf:	0f b7 06             	movzx  eax,WORD PTR [esi]
c0020cd2:	31 d2                	xor    edx,edx
c0020cd4:	52                   	push   edx
c0020cd5:	50                   	push   eax
c0020cd6:	e8 f6 f2 ff ff       	call   c001ffd1 <Vm::fpuLongToFloat(long long)>
c0020cdb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020ce2:	89 c6                	mov    esi,eax
c0020ce4:	89 d7                	mov    edi,edx
c0020ce6:	e8 b8 f4 ff ff       	call   c00201a3 <Vm::fpuGetReg(int)>
c0020ceb:	57                   	push   edi
c0020cec:	56                   	push   esi
c0020ced:	52                   	push   edx
c0020cee:	50                   	push   eax
c0020cef:	e8 5e f4 ff ff       	call   c0020152 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020cf4:	83 c4 1c             	add    esp,0x1c
c0020cf7:	52                   	push   edx
c0020cf8:	50                   	push   eax
c0020cf9:	6a 00                	push   0x0
c0020cfb:	e8 e6 f4 ff ff       	call   c00201e6 <Vm::fpuSetReg(int, unsigned long long)>
c0020d00:	e9 f2 f7 ff ff       	jmp    c00204f7 <Vm::x87Handler(regs*)+0x217>
c0020d05:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020d09:	80 fa 05             	cmp    dl,0x5
c0020d0c:	75 11                	jne    c0020d1f <Vm::x87Handler(regs*)+0xa3f>
c0020d0e:	55                   	push   ebp
c0020d0f:	55                   	push   ebp
c0020d10:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020d13:	ff 36                	push   DWORD PTR [esi]
c0020d15:	e8 81 f2 ff ff       	call   c001ff9b <Vm::fpuULongToFloat(unsigned long long)>
c0020d1a:	e9 cf f7 ff ff       	jmp    c00204ee <Vm::x87Handler(regs*)+0x20e>
c0020d1f:	31 c0                	xor    eax,eax
c0020d21:	80 fa 07             	cmp    dl,0x7
c0020d24:	75 1b                	jne    c0020d41 <Vm::x87Handler(regs*)+0xa61>
c0020d26:	e8 63 f5 ff ff       	call   c002028e <Vm::fpuPop()>
c0020d2b:	51                   	push   ecx
c0020d2c:	51                   	push   ecx
c0020d2d:	52                   	push   edx
c0020d2e:	50                   	push   eax
c0020d2f:	e8 0c f2 ff ff       	call   c001ff40 <Vm::fpuFloatToLong(unsigned long long)>
c0020d34:	83 c4 10             	add    esp,0x10
c0020d37:	89 06                	mov    DWORD PTR [esi],eax
c0020d39:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0020d3c:	e9 f8 f7 ff ff       	jmp    c0020539 <Vm::x87Handler(regs*)+0x259>
c0020d41:	83 c4 1c             	add    esp,0x1c
c0020d44:	5b                   	pop    ebx
c0020d45:	5e                   	pop    esi
c0020d46:	5f                   	pop    edi
c0020d47:	5d                   	pop    ebp
c0020d48:	c3                   	ret    

c0020d49 <__static_initialization_and_destruction_0(int, int)>:
c0020d49:	83 ec 0c             	sub    esp,0xc
c0020d4c:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0020d51:	75 1a                	jne    c0020d6d <__static_initialization_and_destruction_0(int, int)+0x24>
c0020d53:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0020d5b:	75 10                	jne    c0020d6d <__static_initialization_and_destruction_0(int, int)+0x24>
c0020d5d:	83 ec 0c             	sub    esp,0xc
c0020d60:	68 60 28 03 c0       	push   0xc0032860
c0020d65:	e8 c2 8c 00 00       	call   c0029a2c <Vm::_FPUState::_FPUState()>
c0020d6a:	83 c4 10             	add    esp,0x10
c0020d6d:	90                   	nop
c0020d6e:	83 c4 0c             	add    esp,0xc
c0020d71:	c3                   	ret    

c0020d72 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c0020d72:	83 ec 0c             	sub    esp,0xc
c0020d75:	83 ec 08             	sub    esp,0x8
c0020d78:	68 ff ff 00 00       	push   0xffff
c0020d7d:	6a 01                	push   0x1
c0020d7f:	e8 c5 ff ff ff       	call   c0020d49 <__static_initialization_and_destruction_0(int, int)>
c0020d84:	83 c4 10             	add    esp,0x10
c0020d87:	83 c4 0c             	add    esp,0xc
c0020d8a:	c3                   	ret    
c0020d8b:	90                   	nop

c0020d8c <FAT::getName()>:
c0020d8c:	b8 2c d6 02 c0       	mov    eax,0xc002d62c
c0020d91:	c3                   	ret    

c0020d92 <FAT::tell(void*, unsigned long long*)>:
c0020d92:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020d97:	75 06                	jne    c0020d9f <FAT::tell(void*, unsigned long long*)+0xd>
c0020d99:	b8 04 00 00 00       	mov    eax,0x4
c0020d9e:	c3                   	ret    
c0020d9f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020da4:	75 06                	jne    c0020dac <FAT::tell(void*, unsigned long long*)+0x1a>
c0020da6:	b8 04 00 00 00       	mov    eax,0x4
c0020dab:	c3                   	ret    
c0020dac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020db0:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0020db3:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0020db6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020dba:	89 01                	mov    DWORD PTR [ecx],eax
c0020dbc:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020dbf:	b8 00 00 00 00       	mov    eax,0x0
c0020dc4:	c3                   	ret    
c0020dc5:	90                   	nop

c0020dc6 <FAT::stat(void*, unsigned long long*)>:
c0020dc6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020dcb:	75 06                	jne    c0020dd3 <FAT::stat(void*, unsigned long long*)+0xd>
c0020dcd:	b8 04 00 00 00       	mov    eax,0x4
c0020dd2:	c3                   	ret    
c0020dd3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020dd8:	75 06                	jne    c0020de0 <FAT::stat(void*, unsigned long long*)+0x1a>
c0020dda:	b8 04 00 00 00       	mov    eax,0x4
c0020ddf:	c3                   	ret    
c0020de0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020de4:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0020de7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020dea:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020dee:	89 01                	mov    DWORD PTR [ecx],eax
c0020df0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020df3:	b8 00 00 00 00       	mov    eax,0x0
c0020df8:	c3                   	ret    
c0020df9:	90                   	nop

c0020dfa <FAT::~FAT()>:
c0020dfa:	83 ec 0c             	sub    esp,0xc
c0020dfd:	ba bc d6 02 c0       	mov    edx,0xc002d6bc
c0020e02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020e06:	89 10                	mov    DWORD PTR [eax],edx
c0020e08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020e0c:	83 ec 0c             	sub    esp,0xc
c0020e0f:	50                   	push   eax
c0020e10:	e8 6d 23 ff ff       	call   c0013182 <Filesystem::~Filesystem()>
c0020e15:	83 c4 10             	add    esp,0x10
c0020e18:	90                   	nop
c0020e19:	83 c4 0c             	add    esp,0xc
c0020e1c:	c3                   	ret    
c0020e1d:	90                   	nop

c0020e1e <FAT::~FAT()>:
c0020e1e:	83 ec 0c             	sub    esp,0xc
c0020e21:	83 ec 0c             	sub    esp,0xc
c0020e24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020e28:	e8 cd ff ff ff       	call   c0020dfa <FAT::~FAT()>
c0020e2d:	83 c4 10             	add    esp,0x10
c0020e30:	83 ec 08             	sub    esp,0x8
c0020e33:	6a 08                	push   0x8
c0020e35:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020e39:	e8 35 1f ff ff       	call   c0012d73 <operator delete(void*, unsigned long)>
c0020e3e:	83 c4 10             	add    esp,0x10
c0020e41:	83 c4 0c             	add    esp,0xc
c0020e44:	c3                   	ret    
c0020e45:	90                   	nop

c0020e46 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0020e46:	83 ec 1c             	sub    esp,0x1c
c0020e49:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0020e50:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0020e55:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020e59:	8b 04 85 e0 28 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd720]
c0020e60:	83 f8 ff             	cmp    eax,0xffffffff
c0020e63:	75 34                	jne    c0020e99 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0020e65:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020e69:	88 c2                	mov    dl,al
c0020e6b:	a1 c0 28 03 c0       	mov    eax,ds:0xc00328c0
c0020e70:	01 d0                	add    eax,edx
c0020e72:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020e76:	8b 15 c0 28 03 c0    	mov    edx,DWORD PTR ds:0xc00328c0
c0020e7c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020e80:	89 14 85 e0 28 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd720],edx
c0020e87:	a1 c0 28 03 c0       	mov    eax,ds:0xc00328c0
c0020e8c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0020e90:	89 14 85 60 29 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd6a0],edx
c0020e97:	eb 17                	jmp    c0020eb0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c0020e99:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020e9d:	88 c2                	mov    dl,al
c0020e9f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020ea3:	8b 04 85 e0 28 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd720]
c0020eaa:	01 d0                	add    eax,edx
c0020eac:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020eb0:	83 ec 04             	sub    esp,0x4
c0020eb3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020eb7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020ebb:	8d 44 24 15          	lea    eax,[esp+0x15]
c0020ebf:	50                   	push   eax
c0020ec0:	e8 55 5e fe ff       	call   c0006d1a <f_getlabel>
c0020ec5:	83 c4 10             	add    esp,0x10
c0020ec8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020ecc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020ed1:	75 07                	jne    c0020eda <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0020ed3:	b8 00 00 00 00       	mov    eax,0x0
c0020ed8:	eb 05                	jmp    c0020edf <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0020eda:	b8 01 00 00 00       	mov    eax,0x1
c0020edf:	83 c4 1c             	add    esp,0x1c
c0020ee2:	c3                   	ret    
c0020ee3:	90                   	nop

c0020ee4 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0020ee4:	57                   	push   edi
c0020ee5:	83 ec 58             	sub    esp,0x58
c0020ee8:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0020ef0:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020ef4:	b9 0f 00 00 00       	mov    ecx,0xf
c0020ef9:	b8 00 00 00 00       	mov    eax,0x0
c0020efe:	fc                   	cld    
c0020eff:	89 d7                	mov    edi,edx
c0020f01:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020f03:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020f07:	8b 04 85 e0 28 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd720]
c0020f0e:	83 f8 ff             	cmp    eax,0xffffffff
c0020f11:	75 34                	jne    c0020f47 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c0020f13:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020f17:	88 c2                	mov    dl,al
c0020f19:	a1 c0 28 03 c0       	mov    eax,ds:0xc00328c0
c0020f1e:	01 d0                	add    eax,edx
c0020f20:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020f24:	8b 15 c0 28 03 c0    	mov    edx,DWORD PTR ds:0xc00328c0
c0020f2a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020f2e:	89 14 85 e0 28 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd720],edx
c0020f35:	a1 c0 28 03 c0       	mov    eax,ds:0xc00328c0
c0020f3a:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0020f3e:	89 14 85 60 29 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd6a0],edx
c0020f45:	eb 17                	jmp    c0020f5e <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0020f47:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020f4b:	88 c2                	mov    dl,al
c0020f4d:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020f51:	8b 04 85 e0 28 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd720]
c0020f58:	01 d0                	add    eax,edx
c0020f5a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020f5e:	83 ec 08             	sub    esp,0x8
c0020f61:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0020f65:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020f69:	50                   	push   eax
c0020f6a:	e8 f9 f9 fd ff       	call   c0000968 <strcat>
c0020f6f:	83 c4 10             	add    esp,0x10
c0020f72:	83 ec 0c             	sub    esp,0xc
c0020f75:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020f79:	50                   	push   eax
c0020f7a:	e8 89 5f fe ff       	call   c0006f08 <f_setlabel>
c0020f7f:	83 c4 10             	add    esp,0x10
c0020f82:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0020f86:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0020f8b:	75 07                	jne    c0020f94 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0020f8d:	b8 00 00 00 00       	mov    eax,0x0
c0020f92:	eb 05                	jmp    c0020f99 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0020f94:	b8 01 00 00 00       	mov    eax,0x1
c0020f99:	83 c4 58             	add    esp,0x58
c0020f9c:	5f                   	pop    edi
c0020f9d:	c3                   	ret    

c0020f9e <FAT::format(LogicalDisk*, int, char const*, int)>:
c0020f9e:	83 ec 2c             	sub    esp,0x2c
c0020fa1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0020fa9:	83 ec 08             	sub    esp,0x8
c0020fac:	68 50 d6 02 c0       	push   0xc002d650
c0020fb1:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020fb5:	e8 fa f8 fd ff       	call   c00008b4 <strcmp>
c0020fba:	83 c4 10             	add    esp,0x10
c0020fbd:	85 c0                	test   eax,eax
c0020fbf:	0f 94 c0             	sete   al
c0020fc2:	84 c0                	test   al,al
c0020fc4:	74 0d                	je     c0020fd3 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0020fc6:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020fce:	e9 a6 00 00 00       	jmp    c0021079 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020fd3:	83 ec 08             	sub    esp,0x8
c0020fd6:	68 42 d6 02 c0       	push   0xc002d642
c0020fdb:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020fdf:	e8 d0 f8 fd ff       	call   c00008b4 <strcmp>
c0020fe4:	83 c4 10             	add    esp,0x10
c0020fe7:	85 c0                	test   eax,eax
c0020fe9:	0f 94 c0             	sete   al
c0020fec:	84 c0                	test   al,al
c0020fee:	74 0a                	je     c0020ffa <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c0020ff0:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020ff8:	eb 7f                	jmp    c0021079 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020ffa:	83 ec 08             	sub    esp,0x8
c0020ffd:	68 48 d6 02 c0       	push   0xc002d648
c0021002:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0021006:	e8 a9 f8 fd ff       	call   c00008b4 <strcmp>
c002100b:	83 c4 10             	add    esp,0x10
c002100e:	85 c0                	test   eax,eax
c0021010:	0f 94 c0             	sete   al
c0021013:	84 c0                	test   al,al
c0021015:	74 0a                	je     c0021021 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0021017:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c002101f:	eb 58                	jmp    c0021079 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0021021:	83 ec 08             	sub    esp,0x8
c0021024:	68 8c a1 02 c0       	push   0xc002a18c
c0021029:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002102d:	e8 82 f8 fd ff       	call   c00008b4 <strcmp>
c0021032:	83 c4 10             	add    esp,0x10
c0021035:	85 c0                	test   eax,eax
c0021037:	0f 94 c0             	sete   al
c002103a:	84 c0                	test   al,al
c002103c:	74 0a                	je     c0021048 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c002103e:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0021046:	eb 31                	jmp    c0021079 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0021048:	83 ec 08             	sub    esp,0x8
c002104b:	68 4e d6 02 c0       	push   0xc002d64e
c0021050:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0021054:	e8 5b f8 fd ff       	call   c00008b4 <strcmp>
c0021059:	83 c4 10             	add    esp,0x10
c002105c:	85 c0                	test   eax,eax
c002105e:	0f 94 c0             	sete   al
c0021061:	84 c0                	test   al,al
c0021063:	74 0a                	je     c002106f <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c0021065:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c002106d:	eb 0a                	jmp    c0021079 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002106f:	b8 08 00 00 00       	mov    eax,0x8
c0021074:	e9 04 01 00 00       	jmp    c002117d <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0021079:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0021080:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0021085:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021089:	8b 04 85 e0 28 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd720]
c0021090:	83 f8 ff             	cmp    eax,0xffffffff
c0021093:	75 34                	jne    c00210c9 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c0021095:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0021099:	88 c2                	mov    dl,al
c002109b:	a1 c0 28 03 c0       	mov    eax,ds:0xc00328c0
c00210a0:	01 d0                	add    eax,edx
c00210a2:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00210a6:	8b 15 c0 28 03 c0    	mov    edx,DWORD PTR ds:0xc00328c0
c00210ac:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00210b0:	89 14 85 e0 28 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd720],edx
c00210b7:	a1 c0 28 03 c0       	mov    eax,ds:0xc00328c0
c00210bc:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00210c0:	89 14 85 60 29 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd6a0],edx
c00210c7:	eb 17                	jmp    c00210e0 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c00210c9:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00210cd:	88 c2                	mov    dl,al
c00210cf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00210d3:	8b 04 85 e0 28 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd720]
c00210da:	01 d0                	add    eax,edx
c00210dc:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00210e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00210e4:	88 04 24             	mov    BYTE PTR [esp],al
c00210e7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00210eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00210ef:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00210f7:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00210fc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0021104:	83 ec 0c             	sub    esp,0xc
c0021107:	68 00 20 00 00       	push   0x2000
c002110c:	e8 97 e7 fe ff       	call   c000f8a8 <malloc>
c0021111:	83 c4 10             	add    esp,0x10
c0021114:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021118:	68 00 20 00 00       	push   0x2000
c002111d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021121:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021125:	50                   	push   eax
c0021126:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c002112a:	50                   	push   eax
c002112b:	e8 23 62 fe ff       	call   c0007353 <f_mkfs>
c0021130:	83 c4 10             	add    esp,0x10
c0021133:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021137:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002113c:	75 07                	jne    c0021145 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c002113e:	b8 00 00 00 00       	mov    eax,0x0
c0021143:	eb 38                	jmp    c002117d <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0021145:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c002114a:	75 17                	jne    c0021163 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c002114c:	83 ec 0c             	sub    esp,0xc
c002114f:	68 8c d6 02 c0       	push   0xc002d68c
c0021154:	e8 fa 1c ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0021159:	83 c4 10             	add    esp,0x10
c002115c:	b8 09 00 00 00       	mov    eax,0x9
c0021161:	eb 1a                	jmp    c002117d <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0021163:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021167:	83 ec 08             	sub    esp,0x8
c002116a:	50                   	push   eax
c002116b:	68 54 d6 02 c0       	push   0xc002d654
c0021170:	e8 de 1c ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0021175:	83 c4 10             	add    esp,0x10
c0021178:	b8 01 00 00 00       	mov    eax,0x1
c002117d:	83 c4 2c             	add    esp,0x2c
c0021180:	c3                   	ret    
c0021181:	90                   	nop

c0021182 <FAT::tryMount(LogicalDisk*, int)>:
c0021182:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0021188:	a1 c0 28 03 c0       	mov    eax,ds:0xc00328c0
c002118d:	83 f8 14             	cmp    eax,0x14
c0021190:	75 17                	jne    c00211a9 <FAT::tryMount(LogicalDisk*, int)+0x27>
c0021192:	83 ec 0c             	sub    esp,0xc
c0021195:	68 66 d6 02 c0       	push   0xc002d666
c002119a:	e8 4e 97 ff ff       	call   c001a8ed <Krnl::panic(char const*)>
c002119f:	83 c4 10             	add    esp,0x10
c00211a2:	b0 00                	mov    al,0x0
c00211a4:	e9 d7 01 00 00       	jmp    c0021380 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00211a9:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00211b0:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00211b6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00211bc:	3d 00 02 00 00       	cmp    eax,0x200
c00211c1:	74 07                	je     c00211ca <FAT::tryMount(LogicalDisk*, int)+0x48>
c00211c3:	b0 00                	mov    al,0x0
c00211c5:	e9 b6 01 00 00       	jmp    c0021380 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00211ca:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c00211d2:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00211d9:	8b 04 85 e0 28 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd720]
c00211e0:	83 f8 ff             	cmp    eax,0xffffffff
c00211e3:	74 07                	je     c00211ec <FAT::tryMount(LogicalDisk*, int)+0x6a>
c00211e5:	b0 01                	mov    al,0x1
c00211e7:	e9 94 01 00 00       	jmp    c0021380 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00211ec:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c00211f6:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c00211fe:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0021205:	88 c2                	mov    dl,al
c0021207:	a1 c0 28 03 c0       	mov    eax,ds:0xc00328c0
c002120c:	01 d0                	add    eax,edx
c002120e:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0021215:	8b 15 c0 28 03 c0    	mov    edx,DWORD PTR ds:0xc00328c0
c002121b:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0021222:	89 14 85 e0 28 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd720],edx
c0021229:	a1 c0 28 03 c0       	mov    eax,ds:0xc00328c0
c002122e:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c0021235:	89 14 85 60 29 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd6a0],edx
c002123c:	83 ec 0c             	sub    esp,0xc
c002123f:	68 54 02 00 00       	push   0x254
c0021244:	e8 5f e6 fe ff       	call   c000f8a8 <malloc>
c0021249:	83 c4 10             	add    esp,0x10
c002124c:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0021253:	83 ec 04             	sub    esp,0x4
c0021256:	6a 00                	push   0x0
c0021258:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c002125f:	50                   	push   eax
c0021260:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0021267:	e8 a5 3c fe ff       	call   c0004f11 <f_mount>
c002126c:	83 c4 10             	add    esp,0x10
c002126f:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0021276:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c002127e:	74 19                	je     c0021299 <FAT::tryMount(LogicalDisk*, int)+0x117>
c0021280:	83 ec 0c             	sub    esp,0xc
c0021283:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c002128a:	e8 39 e6 fe ff       	call   c000f8c8 <rfree>
c002128f:	83 c4 10             	add    esp,0x10
c0021292:	b0 00                	mov    al,0x0
c0021294:	e9 e7 00 00 00       	jmp    c0021380 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0021299:	83 ec 04             	sub    esp,0x4
c002129c:	68 00 01 00 00       	push   0x100
c00212a1:	6a 00                	push   0x0
c00212a3:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00212aa:	50                   	push   eax
c00212ab:	e8 bc f4 fd ff       	call   c000076c <memset>
c00212b0:	83 c4 10             	add    esp,0x10
c00212b3:	83 ec 08             	sub    esp,0x8
c00212b6:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00212bd:	50                   	push   eax
c00212be:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00212c5:	50                   	push   eax
c00212c6:	e8 9d f6 fd ff       	call   c0000968 <strcat>
c00212cb:	83 c4 10             	add    esp,0x10
c00212ce:	83 ec 08             	sub    esp,0x8
c00212d1:	68 74 d6 02 c0       	push   0xc002d674
c00212d6:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00212dd:	50                   	push   eax
c00212de:	e8 85 f6 fd ff       	call   c0000968 <strcat>
c00212e3:	83 c4 10             	add    esp,0x10
c00212e6:	83 ec 04             	sub    esp,0x4
c00212e9:	6a 01                	push   0x1
c00212eb:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c00212f2:	50                   	push   eax
c00212f3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00212f7:	50                   	push   eax
c00212f8:	e8 76 3c fe ff       	call   c0004f73 <f_open>
c00212fd:	83 c4 10             	add    esp,0x10
c0021300:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0021307:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c002130e:	85 c0                	test   eax,eax
c0021310:	74 0a                	je     c002131c <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0021312:	78 2d                	js     c0021341 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0021314:	83 e8 04             	sub    eax,0x4
c0021317:	83 f8 01             	cmp    eax,0x1
c002131a:	77 25                	ja     c0021341 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c002131c:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0021324:	83 ec 0c             	sub    esp,0xc
c0021327:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002132b:	50                   	push   eax
c002132c:	e8 94 47 fe ff       	call   c0005ac5 <f_close>
c0021331:	83 c4 10             	add    esp,0x10
c0021334:	90                   	nop
c0021335:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c002133d:	74 3a                	je     c0021379 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c002133f:	eb 2d                	jmp    c002136e <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0021341:	83 ec 0c             	sub    esp,0xc
c0021344:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c002134b:	e8 78 e5 fe ff       	call   c000f8c8 <rfree>
c0021350:	83 c4 10             	add    esp,0x10
c0021353:	83 ec 04             	sub    esp,0x4
c0021356:	6a 00                	push   0x0
c0021358:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c002135f:	50                   	push   eax
c0021360:	6a 00                	push   0x0
c0021362:	e8 aa 3b fe ff       	call   c0004f11 <f_mount>
c0021367:	83 c4 10             	add    esp,0x10
c002136a:	b0 00                	mov    al,0x0
c002136c:	eb 12                	jmp    c0021380 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002136e:	a1 c0 28 03 c0       	mov    eax,ds:0xc00328c0
c0021373:	40                   	inc    eax
c0021374:	a3 c0 28 03 c0       	mov    ds:0xc00328c0,eax
c0021379:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0021380:	81 c4 6c 03 00 00    	add    esp,0x36c
c0021386:	c3                   	ret    
c0021387:	90                   	nop

c0021388 <FAT::getFileFirstSector(char const*)>:
c0021388:	53                   	push   ebx
c0021389:	83 ec 28             	sub    esp,0x28
c002138c:	c7 44 24 10 14 01 00 00 	mov    DWORD PTR [esp+0x10],0x114
c0021394:	83 ec 0c             	sub    esp,0xc
c0021397:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002139b:	e8 08 e5 fe ff       	call   c000f8a8 <malloc>
c00213a0:	83 c4 10             	add    esp,0x10
c00213a3:	89 c3                	mov    ebx,eax
c00213a5:	a1 f0 27 03 c0       	mov    eax,ds:0xc00327f0
c00213aa:	83 ec 04             	sub    esp,0x4
c00213ad:	50                   	push   eax
c00213ae:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00213b2:	53                   	push   ebx
c00213b3:	e8 fa 1f ff ff       	call   c00133b2 <File::File(char const*, Process*)>
c00213b8:	83 c4 10             	add    esp,0x10
c00213bb:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c00213bf:	83 ec 08             	sub    esp,0x8
c00213c2:	6a 01                	push   0x1
c00213c4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00213c8:	e8 49 20 ff ff       	call   c0013416 <File::open(FileOpenMode)>
c00213cd:	83 c4 10             	add    esp,0x10
c00213d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00213d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00213d6:	83 c0 0c             	add    eax,0xc
c00213d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00213db:	83 ec 0c             	sub    esp,0xc
c00213de:	8d 54 24 14          	lea    edx,[esp+0x14]
c00213e2:	52                   	push   edx
c00213e3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00213e7:	52                   	push   edx
c00213e8:	6a 00                	push   0x0
c00213ea:	6a 04                	push   0x4
c00213ec:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00213f0:	ff d0                	call   eax
c00213f2:	83 c4 20             	add    esp,0x20
c00213f5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00213f9:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00213ff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021403:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021407:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c002140a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c002140d:	83 ec 04             	sub    esp,0x4
c0021410:	52                   	push   edx
c0021411:	50                   	push   eax
c0021412:	68 7f d6 02 c0       	push   0xc002d67f
c0021417:	e8 37 1a ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c002141c:	83 c4 10             	add    esp,0x10
c002141f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021423:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0021426:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0021429:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002142d:	83 ec 0c             	sub    esp,0xc
c0021430:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0021434:	e8 3b 20 ff ff       	call   c0013474 <File::close()>
c0021439:	83 c4 10             	add    esp,0x10
c002143c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021440:	ba 00 00 00 00       	mov    edx,0x0
c0021445:	83 c4 28             	add    esp,0x28
c0021448:	5b                   	pop    ebx
c0021449:	c3                   	ret    

c002144a <FAT::readDir(void*, unsigned long, void*, int*)>:
c002144a:	57                   	push   edi
c002144b:	56                   	push   esi
c002144c:	53                   	push   ebx
c002144d:	81 ec 50 02 00 00    	sub    esp,0x250
c0021453:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c002145b:	74 0a                	je     c0021467 <FAT::readDir(void*, unsigned long, void*, int*)+0x1d>
c002145d:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0021465:	75 0a                	jne    c0021471 <FAT::readDir(void*, unsigned long, void*, int*)+0x27>
c0021467:	b8 04 00 00 00       	mov    eax,0x4
c002146c:	e9 29 01 00 00       	jmp    c002159a <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0021471:	83 ec 08             	sub    esp,0x8
c0021474:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c002147b:	50                   	push   eax
c002147c:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0021483:	e8 47 4c fe ff       	call   c00060cf <f_readdir>
c0021488:	83 c4 10             	add    esp,0x10
c002148b:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0021492:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c0021499:	83 ec 0c             	sub    esp,0xc
c002149c:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00214a3:	83 c0 1a             	add    eax,0x1a
c00214a6:	50                   	push   eax
c00214a7:	e8 dc f2 fd ff       	call   c0000788 <strlen>
c00214ac:	83 c4 10             	add    esp,0x10
c00214af:	ba 00 00 00 00       	mov    edx,0x0
c00214b4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00214b8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00214bc:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c00214c3:	0f b6 c0             	movzx  eax,al
c00214c6:	83 e0 10             	and    eax,0x10
c00214c9:	74 07                	je     c00214d2 <FAT::readDir(void*, unsigned long, void*, int*)+0x88>
c00214cb:	b8 02 00 00 00       	mov    eax,0x2
c00214d0:	eb 05                	jmp    c00214d7 <FAT::readDir(void*, unsigned long, void*, int*)+0x8d>
c00214d2:	b8 01 00 00 00       	mov    eax,0x1
c00214d7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00214db:	83 ec 08             	sub    esp,0x8
c00214de:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c00214e5:	83 c0 1a             	add    eax,0x1a
c00214e8:	50                   	push   eax
c00214e9:	8d 44 24 10          	lea    eax,[esp+0x10]
c00214ed:	83 c0 10             	add    eax,0x10
c00214f0:	50                   	push   eax
c00214f1:	e8 32 f3 fd ff       	call   c0000828 <strcpy>
c00214f6:	83 c4 10             	add    esp,0x10
c00214f9:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0021500:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0021507:	8d 44 24 04          	lea    eax,[esp+0x4]
c002150b:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0021512:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0021519:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0021520:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0021527:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c002152e:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0021535:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c002153c:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0021543:	89 c6                	mov    esi,eax
c0021545:	89 d7                	mov    edi,edx
c0021547:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021549:	89 c8                	mov    eax,ecx
c002154b:	89 fa                	mov    edx,edi
c002154d:	89 f3                	mov    ebx,esi
c002154f:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0021556:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c002155d:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0021564:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c002156b:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021571:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0021578:	84 c0                	test   al,al
c002157a:	75 07                	jne    c0021583 <FAT::readDir(void*, unsigned long, void*, int*)+0x139>
c002157c:	b8 07 00 00 00       	mov    eax,0x7
c0021581:	eb 17                	jmp    c002159a <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0021583:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c002158a:	85 c0                	test   eax,eax
c002158c:	75 07                	jne    c0021595 <FAT::readDir(void*, unsigned long, void*, int*)+0x14b>
c002158e:	b8 00 00 00 00       	mov    eax,0x0
c0021593:	eb 05                	jmp    c002159a <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0021595:	b8 01 00 00 00       	mov    eax,0x1
c002159a:	81 c4 50 02 00 00    	add    esp,0x250
c00215a0:	5b                   	pop    ebx
c00215a1:	5e                   	pop    esi
c00215a2:	5f                   	pop    edi
c00215a3:	c3                   	ret    

c00215a4 <FAT::read(void*, unsigned long, void*, int*)>:
c00215a4:	83 ec 1c             	sub    esp,0x1c
c00215a7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00215ac:	74 07                	je     c00215b5 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c00215ae:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00215b3:	75 07                	jne    c00215bc <FAT::read(void*, unsigned long, void*, int*)+0x18>
c00215b5:	b8 04 00 00 00       	mov    eax,0x4
c00215ba:	eb 3d                	jmp    c00215f9 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c00215bc:	8d 44 24 08          	lea    eax,[esp+0x8]
c00215c0:	50                   	push   eax
c00215c1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00215c5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00215c9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00215cd:	e8 dd 3d fe ff       	call   c00053af <f_read>
c00215d2:	83 c4 10             	add    esp,0x10
c00215d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00215d9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00215dd:	89 c2                	mov    edx,eax
c00215df:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00215e3:	89 10                	mov    DWORD PTR [eax],edx
c00215e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00215e9:	85 c0                	test   eax,eax
c00215eb:	75 07                	jne    c00215f4 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c00215ed:	b8 00 00 00 00       	mov    eax,0x0
c00215f2:	eb 05                	jmp    c00215f9 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c00215f4:	b8 01 00 00 00       	mov    eax,0x1
c00215f9:	83 c4 1c             	add    esp,0x1c
c00215fc:	c3                   	ret    
c00215fd:	90                   	nop

c00215fe <FAT::write(void*, unsigned long, void*, int*)>:
c00215fe:	83 ec 1c             	sub    esp,0x1c
c0021601:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0021606:	74 07                	je     c002160f <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0021608:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c002160d:	75 07                	jne    c0021616 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c002160f:	b8 04 00 00 00       	mov    eax,0x4
c0021614:	eb 3d                	jmp    c0021653 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0021616:	8d 44 24 08          	lea    eax,[esp+0x8]
c002161a:	50                   	push   eax
c002161b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002161f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0021623:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021627:	e8 03 40 fe ff       	call   c000562f <f_write>
c002162c:	83 c4 10             	add    esp,0x10
c002162f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021633:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021637:	89 c2                	mov    edx,eax
c0021639:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002163d:	89 10                	mov    DWORD PTR [eax],edx
c002163f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021643:	85 c0                	test   eax,eax
c0021645:	75 07                	jne    c002164e <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0021647:	b8 00 00 00 00       	mov    eax,0x0
c002164c:	eb 05                	jmp    c0021653 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c002164e:	b8 01 00 00 00       	mov    eax,0x1
c0021653:	83 c4 1c             	add    esp,0x1c
c0021656:	c3                   	ret    
c0021657:	90                   	nop

c0021658 <FAT::close(void*)>:
c0021658:	83 ec 1c             	sub    esp,0x1c
c002165b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0021660:	75 07                	jne    c0021669 <FAT::close(void*)+0x11>
c0021662:	b8 04 00 00 00       	mov    eax,0x4
c0021667:	eb 36                	jmp    c002169f <FAT::close(void*)+0x47>
c0021669:	83 ec 0c             	sub    esp,0xc
c002166c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021670:	e8 50 44 fe ff       	call   c0005ac5 <f_close>
c0021675:	83 c4 10             	add    esp,0x10
c0021678:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002167c:	83 ec 0c             	sub    esp,0xc
c002167f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021683:	e8 30 e2 fe ff       	call   c000f8b8 <free>
c0021688:	83 c4 10             	add    esp,0x10
c002168b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002168f:	85 c0                	test   eax,eax
c0021691:	75 07                	jne    c002169a <FAT::close(void*)+0x42>
c0021693:	b8 00 00 00 00       	mov    eax,0x0
c0021698:	eb 05                	jmp    c002169f <FAT::close(void*)+0x47>
c002169a:	b8 01 00 00 00       	mov    eax,0x1
c002169f:	83 c4 1c             	add    esp,0x1c
c00216a2:	c3                   	ret    
c00216a3:	90                   	nop

c00216a4 <FAT::closeDir(void*)>:
c00216a4:	83 ec 1c             	sub    esp,0x1c
c00216a7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00216ac:	75 07                	jne    c00216b5 <FAT::closeDir(void*)+0x11>
c00216ae:	b8 04 00 00 00       	mov    eax,0x4
c00216b3:	eb 36                	jmp    c00216eb <FAT::closeDir(void*)+0x47>
c00216b5:	83 ec 0c             	sub    esp,0xc
c00216b8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00216bc:	e8 ec 49 fe ff       	call   c00060ad <f_closedir>
c00216c1:	83 c4 10             	add    esp,0x10
c00216c4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00216c8:	83 ec 0c             	sub    esp,0xc
c00216cb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00216cf:	e8 e4 e1 fe ff       	call   c000f8b8 <free>
c00216d4:	83 c4 10             	add    esp,0x10
c00216d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00216db:	85 c0                	test   eax,eax
c00216dd:	75 07                	jne    c00216e6 <FAT::closeDir(void*)+0x42>
c00216df:	b8 00 00 00 00       	mov    eax,0x0
c00216e4:	eb 05                	jmp    c00216eb <FAT::closeDir(void*)+0x47>
c00216e6:	b8 01 00 00 00       	mov    eax,0x1
c00216eb:	83 c4 1c             	add    esp,0x1c
c00216ee:	c3                   	ret    
c00216ef:	90                   	nop

c00216f0 <FAT::seek(void*, unsigned long long)>:
c00216f0:	83 ec 2c             	sub    esp,0x2c
c00216f3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00216f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00216fb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00216ff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021703:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0021708:	75 07                	jne    c0021711 <FAT::seek(void*, unsigned long long)+0x21>
c002170a:	b8 04 00 00 00       	mov    eax,0x4
c002170f:	eb 2f                	jmp    c0021740 <FAT::seek(void*, unsigned long long)+0x50>
c0021711:	83 ec 04             	sub    esp,0x4
c0021714:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021718:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002171c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0021720:	e8 cf 43 fe ff       	call   c0005af4 <f_lseek>
c0021725:	83 c4 10             	add    esp,0x10
c0021728:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002172c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021730:	85 c0                	test   eax,eax
c0021732:	75 07                	jne    c002173b <FAT::seek(void*, unsigned long long)+0x4b>
c0021734:	b8 00 00 00 00       	mov    eax,0x0
c0021739:	eb 05                	jmp    c0021740 <FAT::seek(void*, unsigned long long)+0x50>
c002173b:	b8 01 00 00 00       	mov    eax,0x1
c0021740:	83 c4 2c             	add    esp,0x2c
c0021743:	c3                   	ret    

c0021744 <fatWrapperReadDisk>:
c0021744:	83 ec 1c             	sub    esp,0x1c
c0021747:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002174b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002174f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0021753:	89 04 24             	mov    DWORD PTR [esp],eax
c0021756:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002175a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002175e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021763:	8b 04 85 a0 f8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0760]
c002176a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002176e:	83 ec 0c             	sub    esp,0xc
c0021771:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021775:	52                   	push   edx
c0021776:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002177a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002177e:	50                   	push   eax
c002177f:	e8 46 50 ff ff       	call   c00167ca <LogicalDisk::read(unsigned long long, int, void*)>
c0021784:	83 c4 20             	add    esp,0x20
c0021787:	83 c4 1c             	add    esp,0x1c
c002178a:	c3                   	ret    

c002178b <fatWrapperWriteDisk>:
c002178b:	83 ec 1c             	sub    esp,0x1c
c002178e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021792:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021796:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002179a:	89 04 24             	mov    DWORD PTR [esp],eax
c002179d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00217a1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00217a5:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00217aa:	8b 04 85 a0 f8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0760]
c00217b1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00217b5:	83 ec 0c             	sub    esp,0xc
c00217b8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00217bc:	52                   	push   edx
c00217bd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00217c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00217c5:	50                   	push   eax
c00217c6:	e8 6b 50 ff ff       	call   c0016836 <LogicalDisk::write(unsigned long long, int, void*)>
c00217cb:	83 c4 20             	add    esp,0x20
c00217ce:	83 c4 1c             	add    esp,0x1c
c00217d1:	c3                   	ret    

c00217d2 <fatWrapperIoctl>:
c00217d2:	53                   	push   ebx
c00217d3:	83 ec 28             	sub    esp,0x28
c00217d6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00217da:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00217de:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00217e2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00217e6:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c00217eb:	75 31                	jne    c002181e <fatWrapperIoctl+0x4c>
c00217ed:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00217f1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00217f5:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00217fa:	8b 04 85 a0 f8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0760]
c0021801:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0021807:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002180d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021811:	66 89 02             	mov    WORD PTR [edx],ax
c0021814:	b8 00 00 00 00       	mov    eax,0x0
c0021819:	e9 b2 00 00 00       	jmp    c00218d0 <fatWrapperIoctl+0xfe>
c002181e:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0021823:	75 6a                	jne    c002188f <fatWrapperIoctl+0xbd>
c0021825:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021829:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002182d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021832:	8b 04 85 a0 f8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0760]
c0021839:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c002183f:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0021845:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c002184b:	89 c8                	mov    eax,ecx
c002184d:	89 da                	mov    edx,ebx
c002184f:	0f a4 c2 0a          	shld   edx,eax,0xa
c0021853:	c1 e0 0a             	shl    eax,0xa
c0021856:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c002185b:	8b 0c 8d a0 f8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0760]
c0021862:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0021868:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c002186e:	89 cb                	mov    ebx,ecx
c0021870:	c1 fb 1f             	sar    ebx,0x1f
c0021873:	53                   	push   ebx
c0021874:	51                   	push   ecx
c0021875:	52                   	push   edx
c0021876:	50                   	push   eax
c0021877:	e8 68 5d 00 00       	call   c00275e4 <__udivdi3>
c002187c:	83 c4 10             	add    esp,0x10
c002187f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0021883:	89 01                	mov    DWORD PTR [ecx],eax
c0021885:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0021888:	b8 00 00 00 00       	mov    eax,0x0
c002188d:	eb 41                	jmp    c00218d0 <fatWrapperIoctl+0xfe>
c002188f:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0021894:	75 07                	jne    c002189d <fatWrapperIoctl+0xcb>
c0021896:	b8 00 00 00 00       	mov    eax,0x0
c002189b:	eb 33                	jmp    c00218d0 <fatWrapperIoctl+0xfe>
c002189d:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c00218a2:	75 19                	jne    c00218bd <fatWrapperIoctl+0xeb>
c00218a4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00218a8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00218ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00218b0:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00218b6:	b8 00 00 00 00       	mov    eax,0x0
c00218bb:	eb 13                	jmp    c00218d0 <fatWrapperIoctl+0xfe>
c00218bd:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c00218c2:	75 07                	jne    c00218cb <fatWrapperIoctl+0xf9>
c00218c4:	b8 00 00 00 00       	mov    eax,0x0
c00218c9:	eb 05                	jmp    c00218d0 <fatWrapperIoctl+0xfe>
c00218cb:	b8 04 00 00 00       	mov    eax,0x4
c00218d0:	83 c4 28             	add    esp,0x28
c00218d3:	5b                   	pop    ebx
c00218d4:	c3                   	ret    
c00218d5:	90                   	nop

c00218d6 <FAT::FAT()>:
c00218d6:	83 ec 1c             	sub    esp,0x1c
c00218d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00218dd:	83 ec 0c             	sub    esp,0xc
c00218e0:	50                   	push   eax
c00218e1:	e8 78 18 ff ff       	call   c001315e <Filesystem::Filesystem()>
c00218e6:	83 c4 10             	add    esp,0x10
c00218e9:	ba bc d6 02 c0       	mov    edx,0xc002d6bc
c00218ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00218f2:	89 10                	mov    DWORD PTR [eax],edx
c00218f4:	c7 05 c0 28 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00328c0,0x0
c00218fe:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021906:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c002190b:	7f 15                	jg     c0021922 <FAT::FAT()+0x4c>
c002190d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021911:	c7 04 85 e0 28 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffcd720],0xffffffff
c002191c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021920:	eb e4                	jmp    c0021906 <FAT::FAT()+0x30>
c0021922:	90                   	nop
c0021923:	83 c4 1c             	add    esp,0x1c
c0021926:	c3                   	ret    
c0021927:	90                   	nop

c0021928 <FAT::fixFilepath(char*)>:
c0021928:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002192c:	8a 00                	mov    al,BYTE PTR [eax]
c002192e:	3c 40                	cmp    al,0x40
c0021930:	7e 2c                	jle    c002195e <FAT::fixFilepath(char*)+0x36>
c0021932:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021936:	8a 00                	mov    al,BYTE PTR [eax]
c0021938:	83 e8 41             	sub    eax,0x41
c002193b:	88 c2                	mov    dl,al
c002193d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021941:	88 10                	mov    BYTE PTR [eax],dl
c0021943:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021947:	8a 00                	mov    al,BYTE PTR [eax]
c0021949:	0f be c0             	movsx  eax,al
c002194c:	8b 04 85 e0 28 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd720]
c0021953:	83 c0 30             	add    eax,0x30
c0021956:	88 c2                	mov    dl,al
c0021958:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002195c:	88 10                	mov    BYTE PTR [eax],dl
c002195e:	90                   	nop
c002195f:	c3                   	ret    

c0021960 <FAT::open(char const*, void**, FileOpenMode)>:
c0021960:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021966:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002196e:	74 0a                	je     c002197a <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0021970:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0021978:	75 0a                	jne    c0021984 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c002197a:	b8 04 00 00 00       	mov    eax,0x4
c002197f:	e9 fd 00 00 00       	jmp    c0021a81 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0021984:	83 ec 08             	sub    esp,0x8
c0021987:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002198e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021992:	50                   	push   eax
c0021993:	e8 90 ee fd ff       	call   c0000828 <strcpy>
c0021998:	83 c4 10             	add    esp,0x10
c002199b:	83 ec 08             	sub    esp,0x8
c002199e:	8d 44 24 10          	lea    eax,[esp+0x10]
c00219a2:	50                   	push   eax
c00219a3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00219aa:	e8 79 ff ff ff       	call   c0021928 <FAT::fixFilepath(char*)>
c00219af:	83 c4 10             	add    esp,0x10
c00219b2:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c00219ba:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00219c1:	83 e0 01             	and    eax,0x1
c00219c4:	74 08                	je     c00219ce <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c00219c6:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c00219ce:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00219d5:	83 e0 04             	and    eax,0x4
c00219d8:	74 10                	je     c00219ea <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c00219da:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c00219e2:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00219ea:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00219f1:	83 e0 02             	and    eax,0x2
c00219f4:	74 08                	je     c00219fe <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c00219f6:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00219fe:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021a05:	83 e0 08             	and    eax,0x8
c0021a08:	74 08                	je     c0021a12 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0021a0a:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0021a12:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021a19:	83 e0 10             	and    eax,0x10
c0021a1c:	74 08                	je     c0021a26 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0021a1e:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0021a26:	83 ec 0c             	sub    esp,0xc
c0021a29:	68 50 02 00 00       	push   0x250
c0021a2e:	e8 75 de fe ff       	call   c000f8a8 <malloc>
c0021a33:	83 c4 10             	add    esp,0x10
c0021a36:	89 c2                	mov    edx,eax
c0021a38:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021a3f:	89 10                	mov    DWORD PTR [eax],edx
c0021a41:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0021a49:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021a50:	8b 00                	mov    eax,DWORD PTR [eax]
c0021a52:	83 ec 04             	sub    esp,0x4
c0021a55:	52                   	push   edx
c0021a56:	8d 54 24 10          	lea    edx,[esp+0x10]
c0021a5a:	52                   	push   edx
c0021a5b:	50                   	push   eax
c0021a5c:	e8 12 35 fe ff       	call   c0004f73 <f_open>
c0021a61:	83 c4 10             	add    esp,0x10
c0021a64:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0021a6b:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0021a73:	74 07                	je     c0021a7c <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0021a75:	b8 01 00 00 00       	mov    eax,0x1
c0021a7a:	eb 05                	jmp    c0021a81 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0021a7c:	b8 00 00 00 00       	mov    eax,0x0
c0021a81:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021a87:	c3                   	ret    

c0021a88 <FAT::openDir(char const*, void**)>:
c0021a88:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021a8e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021a96:	74 0a                	je     c0021aa2 <FAT::openDir(char const*, void**)+0x1a>
c0021a98:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0021aa0:	75 07                	jne    c0021aa9 <FAT::openDir(char const*, void**)+0x21>
c0021aa2:	b8 04 00 00 00       	mov    eax,0x4
c0021aa7:	eb 7d                	jmp    c0021b26 <FAT::openDir(char const*, void**)+0x9e>
c0021aa9:	83 ec 08             	sub    esp,0x8
c0021aac:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021ab3:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021ab7:	50                   	push   eax
c0021ab8:	e8 6b ed fd ff       	call   c0000828 <strcpy>
c0021abd:	83 c4 10             	add    esp,0x10
c0021ac0:	83 ec 08             	sub    esp,0x8
c0021ac3:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021ac7:	50                   	push   eax
c0021ac8:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021acf:	e8 54 fe ff ff       	call   c0021928 <FAT::fixFilepath(char*)>
c0021ad4:	83 c4 10             	add    esp,0x10
c0021ad7:	83 ec 0c             	sub    esp,0xc
c0021ada:	6a 4c                	push   0x4c
c0021adc:	e8 c7 dd fe ff       	call   c000f8a8 <malloc>
c0021ae1:	83 c4 10             	add    esp,0x10
c0021ae4:	89 c2                	mov    edx,eax
c0021ae6:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021aed:	89 10                	mov    DWORD PTR [eax],edx
c0021aef:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021af6:	8b 00                	mov    eax,DWORD PTR [eax]
c0021af8:	83 ec 08             	sub    esp,0x8
c0021afb:	8d 54 24 14          	lea    edx,[esp+0x14]
c0021aff:	52                   	push   edx
c0021b00:	50                   	push   eax
c0021b01:	e8 a5 44 fe ff       	call   c0005fab <f_opendir>
c0021b06:	83 c4 10             	add    esp,0x10
c0021b09:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021b10:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0021b18:	74 07                	je     c0021b21 <FAT::openDir(char const*, void**)+0x99>
c0021b1a:	b8 01 00 00 00       	mov    eax,0x1
c0021b1f:	eb 05                	jmp    c0021b26 <FAT::openDir(char const*, void**)+0x9e>
c0021b21:	b8 00 00 00 00       	mov    eax,0x0
c0021b26:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021b2c:	c3                   	ret    
c0021b2d:	90                   	nop

c0021b2e <FAT::stat(char const*, unsigned long long*, bool*)>:
c0021b2e:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021b34:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0021b3c:	75 0a                	jne    c0021b48 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0021b3e:	b8 04 00 00 00       	mov    eax,0x4
c0021b43:	e9 c9 00 00 00       	jmp    c0021c11 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021b48:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0021b50:	75 0a                	jne    c0021b5c <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0021b52:	b8 04 00 00 00       	mov    eax,0x4
c0021b57:	e9 b5 00 00 00       	jmp    c0021c11 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021b5c:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0021b64:	75 0a                	jne    c0021b70 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0021b66:	b8 04 00 00 00       	mov    eax,0x4
c0021b6b:	e9 a1 00 00 00       	jmp    c0021c11 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021b70:	83 ec 08             	sub    esp,0x8
c0021b73:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021b7a:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021b81:	50                   	push   eax
c0021b82:	e8 a1 ec fd ff       	call   c0000828 <strcpy>
c0021b87:	83 c4 10             	add    esp,0x10
c0021b8a:	83 ec 08             	sub    esp,0x8
c0021b8d:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0021b94:	50                   	push   eax
c0021b95:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021b9c:	e8 87 fd ff ff       	call   c0021928 <FAT::fixFilepath(char*)>
c0021ba1:	83 c4 10             	add    esp,0x10
c0021ba4:	83 ec 08             	sub    esp,0x8
c0021ba7:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021bab:	50                   	push   eax
c0021bac:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021bb3:	50                   	push   eax
c0021bb4:	e8 b1 45 fe ff       	call   c000616a <f_stat>
c0021bb9:	83 c4 10             	add    esp,0x10
c0021bbc:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021bc3:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021bca:	85 c0                	test   eax,eax
c0021bcc:	74 07                	je     c0021bd5 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0021bce:	83 f8 04             	cmp    eax,0x4
c0021bd1:	74 32                	je     c0021c05 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0021bd3:	eb 37                	jmp    c0021c0c <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0021bd5:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0021bd9:	0f b6 c0             	movzx  eax,al
c0021bdc:	83 e0 10             	and    eax,0x10
c0021bdf:	0f 95 c2             	setne  dl
c0021be2:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0021be9:	88 10                	mov    BYTE PTR [eax],dl
c0021beb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021bee:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021bf2:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0021bf9:	89 01                	mov    DWORD PTR [ecx],eax
c0021bfb:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0021bfe:	b8 00 00 00 00       	mov    eax,0x0
c0021c03:	eb 0c                	jmp    c0021c11 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021c05:	b8 02 00 00 00       	mov    eax,0x2
c0021c0a:	eb 05                	jmp    c0021c11 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021c0c:	b8 01 00 00 00       	mov    eax,0x1
c0021c11:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021c17:	c3                   	ret    

c0021c18 <FAT::unlink(char const*)>:
c0021c18:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021c1e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021c26:	75 07                	jne    c0021c2f <FAT::unlink(char const*)+0x17>
c0021c28:	b8 04 00 00 00       	mov    eax,0x4
c0021c2d:	eb 5c                	jmp    c0021c8b <FAT::unlink(char const*)+0x73>
c0021c2f:	83 ec 08             	sub    esp,0x8
c0021c32:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021c39:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021c3d:	50                   	push   eax
c0021c3e:	e8 e5 eb fd ff       	call   c0000828 <strcpy>
c0021c43:	83 c4 10             	add    esp,0x10
c0021c46:	83 ec 08             	sub    esp,0x8
c0021c49:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021c4d:	50                   	push   eax
c0021c4e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021c55:	e8 ce fc ff ff       	call   c0021928 <FAT::fixFilepath(char*)>
c0021c5a:	83 c4 10             	add    esp,0x10
c0021c5d:	83 ec 0c             	sub    esp,0xc
c0021c60:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021c64:	50                   	push   eax
c0021c65:	e8 52 48 fe ff       	call   c00064bc <f_unlink>
c0021c6a:	83 c4 10             	add    esp,0x10
c0021c6d:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021c74:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021c7b:	85 c0                	test   eax,eax
c0021c7d:	75 07                	jne    c0021c86 <FAT::unlink(char const*)+0x6e>
c0021c7f:	b8 00 00 00 00       	mov    eax,0x0
c0021c84:	eb 05                	jmp    c0021c8b <FAT::unlink(char const*)+0x73>
c0021c86:	b8 01 00 00 00       	mov    eax,0x1
c0021c8b:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021c91:	c3                   	ret    

c0021c92 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0021c92:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0021c98:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0021c9f:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0021ca6:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0021caa:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0021cae:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0021cb6:	75 0a                	jne    c0021cc2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0021cb8:	b8 04 00 00 00       	mov    eax,0x4
c0021cbd:	e9 1c 01 00 00       	jmp    c0021dde <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021cc2:	83 ec 08             	sub    esp,0x8
c0021cc5:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021ccc:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021cd0:	50                   	push   eax
c0021cd1:	e8 52 eb fd ff       	call   c0000828 <strcpy>
c0021cd6:	83 c4 10             	add    esp,0x10
c0021cd9:	83 ec 08             	sub    esp,0x8
c0021cdc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0021ce0:	50                   	push   eax
c0021ce1:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021ce8:	e8 3b fc ff ff       	call   c0021928 <FAT::fixFilepath(char*)>
c0021ced:	83 c4 10             	add    esp,0x10
c0021cf0:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0021cf8:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0021d00:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021d05:	83 e0 01             	and    eax,0x1
c0021d08:	74 08                	je     c0021d12 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0021d0a:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0021d12:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021d17:	83 e0 02             	and    eax,0x2
c0021d1a:	74 08                	je     c0021d24 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0021d1c:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0021d24:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021d29:	83 e0 04             	and    eax,0x4
c0021d2c:	74 08                	je     c0021d36 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0021d2e:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0021d36:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021d3b:	83 e0 08             	and    eax,0x8
c0021d3e:	74 08                	je     c0021d48 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0021d40:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0021d48:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021d4d:	83 e0 01             	and    eax,0x1
c0021d50:	74 08                	je     c0021d5a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0021d52:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0021d5a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021d5f:	83 e0 02             	and    eax,0x2
c0021d62:	74 08                	je     c0021d6c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0021d64:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0021d6c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021d71:	83 e0 04             	and    eax,0x4
c0021d74:	74 08                	je     c0021d7e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0021d76:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0021d7e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021d83:	83 e0 08             	and    eax,0x8
c0021d86:	74 08                	je     c0021d90 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0021d88:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0021d90:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0021d97:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0021d9e:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0021da6:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0021dae:	83 ec 04             	sub    esp,0x4
c0021db1:	52                   	push   edx
c0021db2:	50                   	push   eax
c0021db3:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021db7:	50                   	push   eax
c0021db8:	e8 a1 4d fe ff       	call   c0006b5e <f_chmod>
c0021dbd:	83 c4 10             	add    esp,0x10
c0021dc0:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0021dc7:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0021dce:	85 c0                	test   eax,eax
c0021dd0:	75 07                	jne    c0021dd9 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0021dd2:	b8 00 00 00 00       	mov    eax,0x0
c0021dd7:	eb 05                	jmp    c0021dde <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021dd9:	b8 01 00 00 00       	mov    eax,0x1
c0021dde:	81 c4 2c 01 00 00    	add    esp,0x12c
c0021de4:	c3                   	ret    
c0021de5:	90                   	nop

c0021de6 <FAT::rename(char const*, char const*)>:
c0021de6:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0021dec:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0021df4:	74 0a                	je     c0021e00 <FAT::rename(char const*, char const*)+0x1a>
c0021df6:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0021dfe:	75 0a                	jne    c0021e0a <FAT::rename(char const*, char const*)+0x24>
c0021e00:	b8 04 00 00 00       	mov    eax,0x4
c0021e05:	e9 98 00 00 00       	jmp    c0021ea2 <FAT::rename(char const*, char const*)+0xbc>
c0021e0a:	83 ec 08             	sub    esp,0x8
c0021e0d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021e14:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021e1b:	50                   	push   eax
c0021e1c:	e8 07 ea fd ff       	call   c0000828 <strcpy>
c0021e21:	83 c4 10             	add    esp,0x10
c0021e24:	83 ec 08             	sub    esp,0x8
c0021e27:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0021e2e:	50                   	push   eax
c0021e2f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021e36:	e8 ed fa ff ff       	call   c0021928 <FAT::fixFilepath(char*)>
c0021e3b:	83 c4 10             	add    esp,0x10
c0021e3e:	83 ec 08             	sub    esp,0x8
c0021e41:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0021e48:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021e4c:	50                   	push   eax
c0021e4d:	e8 d6 e9 fd ff       	call   c0000828 <strcpy>
c0021e52:	83 c4 10             	add    esp,0x10
c0021e55:	83 ec 08             	sub    esp,0x8
c0021e58:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021e5c:	50                   	push   eax
c0021e5d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021e64:	e8 bf fa ff ff       	call   c0021928 <FAT::fixFilepath(char*)>
c0021e69:	83 c4 10             	add    esp,0x10
c0021e6c:	83 ec 08             	sub    esp,0x8
c0021e6f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021e73:	50                   	push   eax
c0021e74:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021e7b:	50                   	push   eax
c0021e7c:	e8 ea 49 fe ff       	call   c000686b <f_rename>
c0021e81:	83 c4 10             	add    esp,0x10
c0021e84:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0021e8b:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0021e92:	85 c0                	test   eax,eax
c0021e94:	75 07                	jne    c0021e9d <FAT::rename(char const*, char const*)+0xb7>
c0021e96:	b8 00 00 00 00       	mov    eax,0x0
c0021e9b:	eb 05                	jmp    c0021ea2 <FAT::rename(char const*, char const*)+0xbc>
c0021e9d:	b8 01 00 00 00       	mov    eax,0x1
c0021ea2:	81 c4 1c 02 00 00    	add    esp,0x21c
c0021ea8:	c3                   	ret    
c0021ea9:	90                   	nop

c0021eaa <FAT::mkdir(char const*)>:
c0021eaa:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021eb0:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021eb8:	75 07                	jne    c0021ec1 <FAT::mkdir(char const*)+0x17>
c0021eba:	b8 04 00 00 00       	mov    eax,0x4
c0021ebf:	eb 5c                	jmp    c0021f1d <FAT::mkdir(char const*)+0x73>
c0021ec1:	83 ec 08             	sub    esp,0x8
c0021ec4:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021ecb:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021ecf:	50                   	push   eax
c0021ed0:	e8 53 e9 fd ff       	call   c0000828 <strcpy>
c0021ed5:	83 c4 10             	add    esp,0x10
c0021ed8:	83 ec 08             	sub    esp,0x8
c0021edb:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021edf:	50                   	push   eax
c0021ee0:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021ee7:	e8 3c fa ff ff       	call   c0021928 <FAT::fixFilepath(char*)>
c0021eec:	83 c4 10             	add    esp,0x10
c0021eef:	83 ec 0c             	sub    esp,0xc
c0021ef2:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021ef6:	50                   	push   eax
c0021ef7:	e8 43 47 fe ff       	call   c000663f <f_mkdir>
c0021efc:	83 c4 10             	add    esp,0x10
c0021eff:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021f06:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021f0d:	85 c0                	test   eax,eax
c0021f0f:	75 07                	jne    c0021f18 <FAT::mkdir(char const*)+0x6e>
c0021f11:	b8 00 00 00 00       	mov    eax,0x0
c0021f16:	eb 05                	jmp    c0021f1d <FAT::mkdir(char const*)+0x73>
c0021f18:	b8 01 00 00 00       	mov    eax,0x1
c0021f1d:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021f23:	c3                   	ret    

c0021f24 <FAT::exists(char const*)>:
c0021f24:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021f2a:	83 ec 08             	sub    esp,0x8
c0021f2d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021f34:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021f38:	50                   	push   eax
c0021f39:	e8 ea e8 fd ff       	call   c0000828 <strcpy>
c0021f3e:	83 c4 10             	add    esp,0x10
c0021f41:	83 ec 08             	sub    esp,0x8
c0021f44:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021f48:	50                   	push   eax
c0021f49:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021f50:	e8 d3 f9 ff ff       	call   c0021928 <FAT::fixFilepath(char*)>
c0021f55:	83 c4 10             	add    esp,0x10
c0021f58:	83 ec 08             	sub    esp,0x8
c0021f5b:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0021f62:	50                   	push   eax
c0021f63:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021f67:	50                   	push   eax
c0021f68:	e8 fd 41 fe ff       	call   c000616a <f_stat>
c0021f6d:	83 c4 10             	add    esp,0x10
c0021f70:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021f77:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021f7e:	85 c0                	test   eax,eax
c0021f80:	75 04                	jne    c0021f86 <FAT::exists(char const*)+0x62>
c0021f82:	b0 01                	mov    al,0x1
c0021f84:	eb 02                	jmp    c0021f88 <FAT::exists(char const*)+0x64>
c0021f86:	b0 00                	mov    al,0x0
c0021f88:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021f8e:	c3                   	ret    
c0021f8f:	90                   	nop

c0021f90 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0021f90:	b8 08 00 00 00       	mov    eax,0x8
c0021f95:	c3                   	ret    

c0021f96 <ISO9660::seek(void*, unsigned long long)>:
c0021f96:	53                   	push   ebx
c0021f97:	b8 04 00 00 00       	mov    eax,0x4
c0021f9c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021fa0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021fa4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0021fa8:	85 d2                	test   edx,edx
c0021faa:	74 17                	je     c0021fc3 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021fac:	89 c8                	mov    eax,ecx
c0021fae:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0021fb1:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0021fb4:	b8 01 00 00 00       	mov    eax,0x1
c0021fb9:	73 08                	jae    c0021fc3 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021fbb:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0021fbe:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0021fc1:	31 c0                	xor    eax,eax
c0021fc3:	5b                   	pop    ebx
c0021fc4:	c3                   	ret    
c0021fc5:	90                   	nop

c0021fc6 <ISO9660::tell(void*, unsigned long long*)>:
c0021fc6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021fca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021fce:	85 d2                	test   edx,edx
c0021fd0:	74 12                	je     c0021fe4 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021fd2:	85 c0                	test   eax,eax
c0021fd4:	74 0e                	je     c0021fe4 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021fd6:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0021fd9:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0021fdc:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021fdf:	89 10                	mov    DWORD PTR [eax],edx
c0021fe1:	31 c0                	xor    eax,eax
c0021fe3:	c3                   	ret    
c0021fe4:	b8 04 00 00 00       	mov    eax,0x4
c0021fe9:	c3                   	ret    

c0021fea <ISO9660::getName()>:
c0021fea:	b8 1c d7 02 c0       	mov    eax,0xc002d71c
c0021fef:	c3                   	ret    

c0021ff0 <ISO9660::stat(void*, unsigned long long*)>:
c0021ff0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021ff4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021ff8:	85 d2                	test   edx,edx
c0021ffa:	74 12                	je     c002200e <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021ffc:	85 c0                	test   eax,eax
c0021ffe:	74 0e                	je     c002200e <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0022000:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0022003:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0022006:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0022009:	89 10                	mov    DWORD PTR [eax],edx
c002200b:	31 c0                	xor    eax,eax
c002200d:	c3                   	ret    
c002200e:	b8 04 00 00 00       	mov    eax,0x4
c0022013:	c3                   	ret    

c0022014 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0022014:	b8 01 00 00 00       	mov    eax,0x1
c0022019:	c3                   	ret    

c002201a <ISO9660::unlink(char const*)>:
c002201a:	b8 01 00 00 00       	mov    eax,0x1
c002201f:	c3                   	ret    

c0022020 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0022020:	b8 01 00 00 00       	mov    eax,0x1
c0022025:	c3                   	ret    

c0022026 <ISO9660::rename(char const*, char const*)>:
c0022026:	b8 01 00 00 00       	mov    eax,0x1
c002202b:	c3                   	ret    

c002202c <ISO9660::mkdir(char const*)>:
c002202c:	b8 01 00 00 00       	mov    eax,0x1
c0022031:	c3                   	ret    

c0022032 <ISO9660::close(void*)>:
c0022032:	83 ec 0c             	sub    esp,0xc
c0022035:	b8 04 00 00 00       	mov    eax,0x4
c002203a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002203e:	85 d2                	test   edx,edx
c0022040:	74 0e                	je     c0022050 <ISO9660::close(void*)+0x1e>
c0022042:	83 ec 0c             	sub    esp,0xc
c0022045:	52                   	push   edx
c0022046:	e8 6d d8 fe ff       	call   c000f8b8 <free>
c002204b:	83 c4 10             	add    esp,0x10
c002204e:	31 c0                	xor    eax,eax
c0022050:	83 c4 0c             	add    esp,0xc
c0022053:	c3                   	ret    

c0022054 <ISO9660::closeDir(void*)>:
c0022054:	83 ec 0c             	sub    esp,0xc
c0022057:	b8 04 00 00 00       	mov    eax,0x4
c002205c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022060:	85 d2                	test   edx,edx
c0022062:	74 0e                	je     c0022072 <ISO9660::closeDir(void*)+0x1e>
c0022064:	83 ec 0c             	sub    esp,0xc
c0022067:	52                   	push   edx
c0022068:	e8 4b d8 fe ff       	call   c000f8b8 <free>
c002206d:	83 c4 10             	add    esp,0x10
c0022070:	31 c0                	xor    eax,eax
c0022072:	83 c4 0c             	add    esp,0xc
c0022075:	c3                   	ret    

c0022076 <ISO9660::~ISO9660()>:
c0022076:	83 ec 0c             	sub    esp,0xc
c0022079:	ba 80 d7 02 c0       	mov    edx,0xc002d780
c002207e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022082:	89 10                	mov    DWORD PTR [eax],edx
c0022084:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022088:	83 ec 0c             	sub    esp,0xc
c002208b:	50                   	push   eax
c002208c:	e8 f1 10 ff ff       	call   c0013182 <Filesystem::~Filesystem()>
c0022091:	83 c4 10             	add    esp,0x10
c0022094:	90                   	nop
c0022095:	83 c4 0c             	add    esp,0xc
c0022098:	c3                   	ret    
c0022099:	90                   	nop

c002209a <ISO9660::~ISO9660()>:
c002209a:	83 ec 0c             	sub    esp,0xc
c002209d:	83 ec 0c             	sub    esp,0xc
c00220a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00220a4:	e8 cd ff ff ff       	call   c0022076 <ISO9660::~ISO9660()>
c00220a9:	83 c4 10             	add    esp,0x10
c00220ac:	83 ec 08             	sub    esp,0x8
c00220af:	6a 08                	push   0x8
c00220b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00220b5:	e8 b9 0c ff ff       	call   c0012d73 <operator delete(void*, unsigned long)>
c00220ba:	83 c4 10             	add    esp,0x10
c00220bd:	83 c4 0c             	add    esp,0xc
c00220c0:	c3                   	ret    

c00220c1 <__memmem(unsigned char*, int, unsigned char*, int)>:
c00220c1:	55                   	push   ebp
c00220c2:	31 c9                	xor    ecx,ecx
c00220c4:	57                   	push   edi
c00220c5:	56                   	push   esi
c00220c6:	53                   	push   ebx
c00220c7:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00220cb:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00220cf:	89 eb                	mov    ebx,ebp
c00220d1:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c00220d5:	39 ce                	cmp    esi,ecx
c00220d7:	7e 17                	jle    c00220f0 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c00220d9:	31 d2                	xor    edx,edx
c00220db:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c00220df:	7d 13                	jge    c00220f4 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c00220e1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00220e5:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00220e8:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c00220eb:	75 0d                	jne    c00220fa <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c00220ed:	42                   	inc    edx
c00220ee:	eb eb                	jmp    c00220db <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c00220f0:	31 c0                	xor    eax,eax
c00220f2:	eb 0a                	jmp    c00220fe <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00220f4:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00220f8:	eb 04                	jmp    c00220fe <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00220fa:	41                   	inc    ecx
c00220fb:	43                   	inc    ebx
c00220fc:	eb d7                	jmp    c00220d5 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c00220fe:	5b                   	pop    ebx
c00220ff:	5e                   	pop    esi
c0022100:	5f                   	pop    edi
c0022101:	5d                   	pop    ebp
c0022102:	c3                   	ret    

c0022103 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0022103:	57                   	push   edi
c0022104:	56                   	push   esi
c0022105:	53                   	push   ebx
c0022106:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002210a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002210e:	39 0d c0 29 03 c0    	cmp    DWORD PTR ds:0xc00329c0,ecx
c0022114:	75 08                	jne    c002211e <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c0022116:	38 05 14 e8 02 c0    	cmp    BYTE PTR ds:0xc002e814,al
c002211c:	74 2b                	je     c0022149 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c002211e:	83 ec 0c             	sub    esp,0xc
c0022121:	a2 14 e8 02 c0       	mov    ds:0xc002e814,al
c0022126:	68 e0 29 03 c0       	push   0xc00329e0
c002212b:	0f be c0             	movsx  eax,al
c002212e:	6a 01                	push   0x1
c0022130:	89 0d c0 29 03 c0    	mov    DWORD PTR ds:0xc00329c0,ecx
c0022136:	31 db                	xor    ebx,ebx
c0022138:	53                   	push   ebx
c0022139:	51                   	push   ecx
c002213a:	ff 34 85 9c f7 02 c0 	push   DWORD PTR [eax*4-0x3ffd0864]
c0022141:	e8 84 46 ff ff       	call   c00167ca <LogicalDisk::read(unsigned long long, int, void*)>
c0022146:	83 c4 20             	add    esp,0x20
c0022149:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c002214d:	be e0 29 03 c0       	mov    esi,0xc00329e0
c0022152:	b9 00 08 00 00       	mov    ecx,0x800
c0022157:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0022159:	5b                   	pop    ebx
c002215a:	5e                   	pop    esi
c002215b:	5f                   	pop    edi
c002215c:	c3                   	ret    
c002215d:	90                   	nop

c002215e <ISO9660::tryMount(LogicalDisk*, int)>:
c002215e:	81 ec 10 08 00 00    	sub    esp,0x810
c0022164:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c002216b:	83 c0 41             	add    eax,0x41
c002216e:	0f be c0             	movsx  eax,al
c0022171:	50                   	push   eax
c0022172:	8d 44 24 08          	lea    eax,[esp+0x8]
c0022176:	50                   	push   eax
c0022177:	6a 10                	push   0x10
c0022179:	e8 85 ff ff ff       	call   c0022103 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002217e:	83 c4 10             	add    esp,0x10
c0022181:	31 c0                	xor    eax,eax
c0022183:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0022188:	75 1d                	jne    c00221a7 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002218a:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c002218f:	75 16                	jne    c00221a7 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0022191:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0022196:	75 0f                	jne    c00221a7 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0022198:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c002219d:	75 08                	jne    c00221a7 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002219f:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c00221a4:	0f 94 c0             	sete   al
c00221a7:	81 c4 0c 08 00 00    	add    esp,0x80c
c00221ad:	c3                   	ret    

c00221ae <ISO9660::read(void*, unsigned long, void*, int*)>:
c00221ae:	55                   	push   ebp
c00221af:	57                   	push   edi
c00221b0:	56                   	push   esi
c00221b1:	53                   	push   ebx
c00221b2:	81 ec 2c 08 00 00    	sub    esp,0x82c
c00221b8:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c00221bf:	85 ed                	test   ebp,ebp
c00221c1:	0f 84 da 01 00 00    	je     c00223a1 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c00221c7:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c00221cf:	0f 84 cc 01 00 00    	je     c00223a1 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c00221d5:	b8 01 00 00 00       	mov    eax,0x1
c00221da:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c00221de:	0f 85 c2 01 00 00    	jne    c00223a6 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c00221e4:	31 d2                	xor    edx,edx
c00221e6:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c00221ed:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00221f0:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00221f3:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c00221f6:	89 04 24             	mov    DWORD PTR [esp],eax
c00221f9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00221fd:	01 c8                	add    eax,ecx
c00221ff:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0022202:	11 da                	adc    edx,ebx
c0022204:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0022208:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002220c:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0022210:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022214:	19 d7                	sbb    edi,edx
c0022216:	72 11                	jb     c0022229 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c0022218:	8b 34 24             	mov    esi,DWORD PTR [esp]
c002221b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c002221f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022223:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022227:	eb 0c                	jmp    c0022235 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0022229:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c002222d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022231:	29 ce                	sub    esi,ecx
c0022233:	19 df                	sbb    edi,ebx
c0022235:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022238:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c002223b:	0f a4 c2 0b          	shld   edx,eax,0xb
c002223f:	c1 e0 0b             	shl    eax,0xb
c0022242:	01 c8                	add    eax,ecx
c0022244:	11 da                	adc    edx,ebx
c0022246:	89 04 24             	mov    DWORD PTR [esp],eax
c0022249:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002224d:	51                   	push   ecx
c002224e:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0022252:	50                   	push   eax
c0022253:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c0022257:	53                   	push   ebx
c0022258:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002225c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022260:	0f ac d0 0b          	shrd   eax,edx,0xb
c0022264:	50                   	push   eax
c0022265:	e8 99 fe ff ff       	call   c0022103 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002226a:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c002226d:	b8 00 08 00 00       	mov    eax,0x800
c0022272:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0022278:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c002227c:	29 d0                	sub    eax,edx
c002227e:	83 c4 10             	add    esp,0x10
c0022281:	89 f9                	mov    ecx,edi
c0022283:	39 c6                	cmp    esi,eax
c0022285:	83 d9 00             	sbb    ecx,0x0
c0022288:	7d 1b                	jge    c00222a5 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c002228a:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c002228f:	75 12                	jne    c00222a3 <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c0022291:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0022298:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002229e:	e9 fa 00 00 00       	jmp    c002239d <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c00222a3:	89 f0                	mov    eax,esi
c00222a5:	01 d3                	add    ebx,edx
c00222a7:	31 d2                	xor    edx,edx
c00222a9:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00222ad:	39 c2                	cmp    edx,eax
c00222af:	7d 14                	jge    c00222c5 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c00222b1:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c00222b8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00222bc:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c00222bf:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00222c2:	42                   	inc    edx
c00222c3:	eb e8                	jmp    c00222ad <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c00222c5:	89 c2                	mov    edx,eax
c00222c7:	85 c0                	test   eax,eax
c00222c9:	79 02                	jns    c00222cd <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c00222cb:	31 d2                	xor    edx,edx
c00222cd:	01 c2                	add    edx,eax
c00222cf:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00222d2:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c00222d9:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00222dd:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00222e1:	99                   	cdq    
c00222e2:	01 c1                	add    ecx,eax
c00222e4:	11 d3                	adc    ebx,edx
c00222e6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00222ea:	29 c6                	sub    esi,eax
c00222ec:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00222f0:	19 d7                	sbb    edi,edx
c00222f2:	89 34 24             	mov    DWORD PTR [esp],esi
c00222f5:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00222f9:	b8 ff 07 00 00       	mov    eax,0x7ff
c00222fe:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0022301:	b8 00 00 00 00       	mov    eax,0x0
c0022306:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c002230a:	7d 43                	jge    c002234f <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c002230c:	52                   	push   edx
c002230d:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0022311:	50                   	push   eax
c0022312:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022316:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002231a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002231e:	0f ac d0 0b          	shrd   eax,edx,0xb
c0022322:	50                   	push   eax
c0022323:	e8 db fd ff ff       	call   c0022103 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0022328:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0022330:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0022335:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c002233d:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0022345:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c002234a:	83 c4 10             	add    esp,0x10
c002234d:	eb aa                	jmp    c00222f9 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c002234f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022353:	0b 04 24             	or     eax,DWORD PTR [esp]
c0022356:	74 2a                	je     c0022382 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c0022358:	50                   	push   eax
c0022359:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002235d:	50                   	push   eax
c002235e:	8d 74 24 28          	lea    esi,[esp+0x28]
c0022362:	56                   	push   esi
c0022363:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022367:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002236b:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c002236f:	51                   	push   ecx
c0022370:	e8 8e fd ff ff       	call   c0022103 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0022375:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0022379:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002237d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002237f:	83 c4 10             	add    esp,0x10
c0022382:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0022389:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002238d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022391:	89 18                	mov    DWORD PTR [eax],ebx
c0022393:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022397:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c002239a:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c002239d:	31 c0                	xor    eax,eax
c002239f:	eb 05                	jmp    c00223a6 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c00223a1:	b8 04 00 00 00       	mov    eax,0x4
c00223a6:	81 c4 2c 08 00 00    	add    esp,0x82c
c00223ac:	5b                   	pop    ebx
c00223ad:	5e                   	pop    esi
c00223ae:	5f                   	pop    edi
c00223af:	5d                   	pop    ebp
c00223b0:	c3                   	ret    
c00223b1:	90                   	nop

c00223b2 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c00223b2:	55                   	push   ebp
c00223b3:	57                   	push   edi
c00223b4:	56                   	push   esi
c00223b5:	53                   	push   ebx
c00223b6:	81 ec 5c 09 00 00    	sub    esp,0x95c
c00223bc:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c00223c3:	85 ed                	test   ebp,ebp
c00223c5:	0f 84 51 02 00 00    	je     c002261c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c00223cb:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c00223d3:	0f 84 43 02 00 00    	je     c002261c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c00223d9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00223dc:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c00223df:	75 0a                	jne    c00223eb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c00223e1:	b8 07 00 00 00       	mov    eax,0x7
c00223e6:	e9 36 02 00 00       	jmp    c0022621 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c00223eb:	50                   	push   eax
c00223ec:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00223f0:	50                   	push   eax
c00223f1:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c00223f8:	53                   	push   ebx
c00223f9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00223fc:	c1 e0 0b             	shl    eax,0xb
c00223ff:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c0022402:	c1 e8 0b             	shr    eax,0xb
c0022405:	50                   	push   eax
c0022406:	e8 f8 fc ff ff       	call   c0022103 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002240b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002240e:	83 c4 10             	add    esp,0x10
c0022411:	89 c1                	mov    ecx,eax
c0022413:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0022416:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c002241c:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c002241f:	84 db                	test   bl,bl
c0022421:	0f 85 8b 00 00 00    	jne    c00224b2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c0022427:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c002242d:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0022430:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0022436:	29 c6                	sub    esi,eax
c0022438:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c002243c:	89 f3                	mov    ebx,esi
c002243e:	89 f1                	mov    ecx,esi
c0022440:	c1 fb 1f             	sar    ebx,0x1f
c0022443:	01 f0                	add    eax,esi
c0022445:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0022448:	11 da                	adc    edx,ebx
c002244a:	89 04 24             	mov    DWORD PTR [esp],eax
c002244d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0022451:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0022454:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0022457:	89 d8                	mov    eax,ebx
c0022459:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c002245d:	ba 00 00 00 00       	mov    edx,0x0
c0022462:	19 f8                	sbb    eax,edi
c0022464:	b8 00 00 00 00       	mov    eax,0x0
c0022469:	73 08                	jae    c0022473 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c002246b:	89 f0                	mov    eax,esi
c002246d:	89 fa                	mov    edx,edi
c002246f:	29 c8                	sub    eax,ecx
c0022471:	19 da                	sbb    edx,ebx
c0022473:	89 d7                	mov    edi,edx
c0022475:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0022478:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c002247b:	09 c7                	or     edi,eax
c002247d:	0f 84 5e ff ff ff    	je     c00223e1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0022483:	57                   	push   edi
c0022484:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0022488:	50                   	push   eax
c0022489:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0022490:	53                   	push   ebx
c0022491:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022494:	c1 e0 0b             	shl    eax,0xb
c0022497:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c002249b:	c1 e8 0b             	shr    eax,0xb
c002249e:	50                   	push   eax
c002249f:	e8 5f fc ff ff       	call   c0022103 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00224a4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00224a7:	83 c4 10             	add    esp,0x10
c00224aa:	25 ff 07 00 00       	and    eax,0x7ff
c00224af:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c00224b2:	31 ff                	xor    edi,edi
c00224b4:	56                   	push   esi
c00224b5:	6a 28                	push   0x28
c00224b7:	6a 00                	push   0x0
c00224b9:	8d 44 24 24          	lea    eax,[esp+0x24]
c00224bd:	50                   	push   eax
c00224be:	e8 a9 e2 fd ff       	call   c000076c <memset>
c00224c3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00224c6:	25 ff 07 00 00       	and    eax,0x7ff
c00224cb:	89 c6                	mov    esi,eax
c00224cd:	83 c6 21             	add    esi,0x21
c00224d0:	83 d7 00             	adc    edi,0x0
c00224d3:	83 c4 10             	add    esp,0x10
c00224d6:	31 c9                	xor    ecx,ecx
c00224d8:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c00224df:	83 f9 28             	cmp    ecx,0x28
c00224e2:	88 04 24             	mov    BYTE PTR [esp],al
c00224e5:	0f 94 c2             	sete   dl
c00224e8:	88 d0                	mov    al,dl
c00224ea:	ba ff 07 00 00       	mov    edx,0x7ff
c00224ef:	39 f2                	cmp    edx,esi
c00224f1:	ba 00 00 00 00       	mov    edx,0x0
c00224f6:	19 fa                	sbb    edx,edi
c00224f8:	0f 92 c2             	setb   dl
c00224fb:	09 c2                	or     edx,eax
c00224fd:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0022501:	0f 94 c0             	sete   al
c0022504:	08 d0                	or     al,dl
c0022506:	75 16                	jne    c002251e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0022508:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c002250c:	74 10                	je     c002251e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c002250e:	8a 04 24             	mov    al,BYTE PTR [esp]
c0022511:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0022515:	41                   	inc    ecx
c0022516:	83 c6 01             	add    esi,0x1
c0022519:	83 d7 00             	adc    edi,0x0
c002251c:	eb ba                	jmp    c00224d8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c002251e:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0022525:	83 ec 0c             	sub    esp,0xc
c0022528:	8d 74 24 24          	lea    esi,[esp+0x24]
c002252c:	56                   	push   esi
c002252d:	e8 56 e2 fd ff       	call   c0000788 <strlen>
c0022532:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c0022539:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c002253d:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0022545:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0022548:	5a                   	pop    edx
c0022549:	25 ff 07 00 00       	and    eax,0x7ff
c002254e:	59                   	pop    ecx
c002254f:	01 f8                	add    eax,edi
c0022551:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0022557:	83 e0 02             	and    eax,0x2
c002255a:	3c 01                	cmp    al,0x1
c002255c:	19 c0                	sbb    eax,eax
c002255e:	83 c0 02             	add    eax,0x2
c0022561:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0022565:	56                   	push   esi
c0022566:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c002256a:	50                   	push   eax
c002256b:	e8 b8 e2 fd ff       	call   c0000828 <strcpy>
c0022570:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0022574:	83 c4 10             	add    esp,0x10
c0022577:	84 c0                	test   al,al
c0022579:	75 21                	jne    c002259c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c002257b:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0022583:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c002258b:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0022593:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c002259a:	eb 28                	jmp    c00225c4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c002259c:	fe c8                	dec    al
c002259e:	75 24                	jne    c00225c4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c00225a0:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c00225a8:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00225b0:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c00225b8:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c00225bf:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c00225c4:	8d 74 24 40          	lea    esi,[esp+0x40]
c00225c8:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c00225cf:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c00225d6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00225d8:	0f b6 f3             	movzx  esi,bl
c00225db:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c00225e2:	31 db                	xor    ebx,ebx
c00225e4:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00225ea:	89 df                	mov    edi,ebx
c00225ec:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c00225ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00225f2:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c00225f5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00225f8:	39 c6                	cmp    esi,eax
c00225fa:	19 d7                	sbb    edi,edx
c00225fc:	72 10                	jb     c002260e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c00225fe:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0022605:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c002260c:	eb 0a                	jmp    c0022618 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c002260e:	29 f0                	sub    eax,esi
c0022610:	19 da                	sbb    edx,ebx
c0022612:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0022615:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0022618:	31 c0                	xor    eax,eax
c002261a:	eb 05                	jmp    c0022621 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c002261c:	b8 04 00 00 00       	mov    eax,0x4
c0022621:	81 c4 5c 09 00 00    	add    esp,0x95c
c0022627:	5b                   	pop    ebx
c0022628:	5e                   	pop    esi
c0022629:	5f                   	pop    edi
c002262a:	5d                   	pop    ebp
c002262b:	c3                   	ret    

c002262c <readRoot(unsigned int*, unsigned int*, char)>:
c002262c:	57                   	push   edi
c002262d:	56                   	push   esi
c002262e:	81 ec 38 08 00 00    	sub    esp,0x838
c0022634:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c002263c:	50                   	push   eax
c002263d:	8d 44 24 38          	lea    eax,[esp+0x38]
c0022641:	50                   	push   eax
c0022642:	6a 10                	push   0x10
c0022644:	e8 ba fa ff ff       	call   c0022103 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0022649:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c0022650:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c0022654:	b9 22 00 00 00       	mov    ecx,0x22
c0022659:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002265b:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0022662:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0022666:	89 10                	mov    DWORD PTR [eax],edx
c0022668:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c002266f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022673:	89 10                	mov    DWORD PTR [eax],edx
c0022675:	81 c4 44 08 00 00    	add    esp,0x844
c002267b:	b0 01                	mov    al,0x1
c002267d:	5e                   	pop    esi
c002267e:	5f                   	pop    edi
c002267f:	c3                   	ret    

c0022680 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0022680:	55                   	push   ebp
c0022681:	57                   	push   edi
c0022682:	56                   	push   esi
c0022683:	53                   	push   ebx
c0022684:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002268a:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0022691:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0022698:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002269c:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c00226a0:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00226a4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00226a8:	75 03                	jne    c00226ad <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c00226aa:	83 c3 02             	add    ebx,0x2
c00226ad:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c00226b0:	75 03                	jne    c00226b5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c00226b2:	43                   	inc    ebx
c00226b3:	eb f8                	jmp    c00226ad <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c00226b5:	51                   	push   ecx
c00226b6:	68 00 01 00 00       	push   0x100
c00226bb:	6a 00                	push   0x0
c00226bd:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00226c1:	50                   	push   eax
c00226c2:	e8 a5 e0 fd ff       	call   c000076c <memset>
c00226c7:	83 c4 10             	add    esp,0x10
c00226ca:	31 d2                	xor    edx,edx
c00226cc:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00226cf:	84 c0                	test   al,al
c00226d1:	74 21                	je     c00226f4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c00226d3:	3c 2f                	cmp    al,0x2f
c00226d5:	75 0b                	jne    c00226e2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c00226d7:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c00226db:	bd 01 00 00 00       	mov    ebp,0x1
c00226e0:	eb 14                	jmp    c00226f6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c00226e2:	8d 48 9f             	lea    ecx,[eax-0x61]
c00226e5:	80 f9 19             	cmp    cl,0x19
c00226e8:	77 03                	ja     c00226ed <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c00226ea:	83 e8 20             	sub    eax,0x20
c00226ed:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c00226f1:	42                   	inc    edx
c00226f2:	eb d8                	jmp    c00226cc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c00226f4:	31 ed                	xor    ebp,ebp
c00226f6:	83 ec 0c             	sub    esp,0xc
c00226f9:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0022700:	e8 a3 d1 fe ff       	call   c000f8a8 <malloc>
c0022705:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c002270c:	89 c6                	mov    esi,eax
c002270e:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0022714:	c1 ef 0b             	shr    edi,0xb
c0022717:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c002271e:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0022722:	83 c4 10             	add    esp,0x10
c0022725:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c002272a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002272e:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0022735:	74 28                	je     c002275f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0022737:	52                   	push   edx
c0022738:	57                   	push   edi
c0022739:	50                   	push   eax
c002273a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002273e:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0022745:	e8 b9 f9 ff ff       	call   c0022103 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002274a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002274e:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0022755:	05 00 08 00 00       	add    eax,0x800
c002275a:	83 c4 10             	add    esp,0x10
c002275d:	eb cb                	jmp    c002272a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c002275f:	83 ec 0c             	sub    esp,0xc
c0022762:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0022766:	57                   	push   edi
c0022767:	e8 1c e0 fd ff       	call   c0000788 <strlen>
c002276c:	50                   	push   eax
c002276d:	57                   	push   edi
c002276e:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0022775:	56                   	push   esi
c0022776:	e8 46 f9 ff ff       	call   c00220c1 <__memmem(unsigned char*, int, unsigned char*, int)>
c002277b:	83 c4 20             	add    esp,0x20
c002277e:	85 c0                	test   eax,eax
c0022780:	75 13                	jne    c0022795 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0022782:	83 ec 0c             	sub    esp,0xc
c0022785:	56                   	push   esi
c0022786:	e8 2d d1 fe ff       	call   c000f8b8 <free>
c002278b:	83 c4 10             	add    esp,0x10
c002278e:	31 c0                	xor    eax,eax
c0022790:	e9 b3 00 00 00       	jmp    c0022848 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0022795:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0022799:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c002279d:	c1 e7 08             	shl    edi,0x8
c00227a0:	c1 e2 10             	shl    edx,0x10
c00227a3:	09 d7                	or     edi,edx
c00227a5:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c00227a9:	09 d7                	or     edi,edx
c00227ab:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c00227af:	c1 e2 18             	shl    edx,0x18
c00227b2:	09 d7                	or     edi,edx
c00227b4:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c00227b8:	89 d1                	mov    ecx,edx
c00227ba:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c00227be:	c1 e1 08             	shl    ecx,0x8
c00227c1:	c1 e2 10             	shl    edx,0x10
c00227c4:	09 ca                	or     edx,ecx
c00227c6:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c00227ca:	09 ca                	or     edx,ecx
c00227cc:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c00227d0:	c1 e1 18             	shl    ecx,0x18
c00227d3:	09 ca                	or     edx,ecx
c00227d5:	89 e9                	mov    ecx,ebp
c00227d7:	84 c9                	test   cl,cl
c00227d9:	74 3c                	je     c0022817 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c00227db:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00227df:	83 ec 0c             	sub    esp,0xc
c00227e2:	56                   	push   esi
c00227e3:	e8 d0 d0 fe ff       	call   c000f8b8 <free>
c00227e8:	83 c4 0c             	add    esp,0xc
c00227eb:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00227f2:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c00227f7:	50                   	push   eax
c00227f8:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00227ff:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0022806:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002280a:	52                   	push   edx
c002280b:	57                   	push   edi
c002280c:	53                   	push   ebx
c002280d:	e8 6e fe ff ff       	call   c0022680 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0022812:	83 c4 20             	add    esp,0x20
c0022815:	eb 31                	jmp    c0022848 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0022817:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c002281a:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0022821:	d0 e8                	shr    al,1
c0022823:	89 3b                	mov    DWORD PTR [ebx],edi
c0022825:	83 e0 01             	and    eax,0x1
c0022828:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c002282f:	83 ec 0c             	sub    esp,0xc
c0022832:	89 13                	mov    DWORD PTR [ebx],edx
c0022834:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c002283b:	89 03                	mov    DWORD PTR [ebx],eax
c002283d:	56                   	push   esi
c002283e:	e8 75 d0 fe ff       	call   c000f8b8 <free>
c0022843:	83 c4 10             	add    esp,0x10
c0022846:	b0 01                	mov    al,0x1
c0022848:	81 c4 1c 01 00 00    	add    esp,0x11c
c002284e:	5b                   	pop    ebx
c002284f:	5e                   	pop    esi
c0022850:	5f                   	pop    edi
c0022851:	5d                   	pop    ebp
c0022852:	c3                   	ret    

c0022853 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0022853:	55                   	push   ebp
c0022854:	57                   	push   edi
c0022855:	56                   	push   esi
c0022856:	53                   	push   ebx
c0022857:	83 ec 20             	sub    esp,0x20
c002285a:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002285e:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0022862:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0022866:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002286e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0022876:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c002287b:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0022881:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0022887:	57                   	push   edi
c0022888:	8d 44 24 14          	lea    eax,[esp+0x14]
c002288c:	50                   	push   eax
c002288d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0022891:	50                   	push   eax
c0022892:	e8 95 fd ff ff       	call   c002262c <readRoot(unsigned int*, unsigned int*, char)>
c0022897:	5a                   	pop    edx
c0022898:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002289c:	e8 e7 de fd ff       	call   c0000788 <strlen>
c00228a1:	83 c4 10             	add    esp,0x10
c00228a4:	83 f8 03             	cmp    eax,0x3
c00228a7:	77 17                	ja     c00228c0 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c00228a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00228ad:	89 03                	mov    DWORD PTR [ebx],eax
c00228af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00228b3:	89 06                	mov    DWORD PTR [esi],eax
c00228b5:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c00228bc:	b0 01                	mov    al,0x1
c00228be:	eb 19                	jmp    c00228d9 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c00228c0:	50                   	push   eax
c00228c1:	55                   	push   ebp
c00228c2:	57                   	push   edi
c00228c3:	56                   	push   esi
c00228c4:	53                   	push   ebx
c00228c5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00228c9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00228cd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00228d1:	e8 aa fd ff ff       	call   c0022680 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c00228d6:	83 c4 20             	add    esp,0x20
c00228d9:	83 c4 1c             	add    esp,0x1c
c00228dc:	5b                   	pop    ebx
c00228dd:	5e                   	pop    esi
c00228de:	5f                   	pop    edi
c00228df:	5d                   	pop    ebp
c00228e0:	c3                   	ret    
c00228e1:	90                   	nop

c00228e2 <ISO9660::open(char const*, void**, FileOpenMode)>:
c00228e2:	57                   	push   edi
c00228e3:	56                   	push   esi
c00228e4:	53                   	push   ebx
c00228e5:	83 ec 10             	sub    esp,0x10
c00228e8:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00228ec:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00228f0:	85 ff                	test   edi,edi
c00228f2:	0f 84 9d 00 00 00    	je     c0022995 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c00228f8:	85 f6                	test   esi,esi
c00228fa:	0f 84 95 00 00 00    	je     c0022995 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0022900:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0022905:	74 17                	je     c002291e <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c0022907:	83 ec 0c             	sub    esp,0xc
c002290a:	68 37 d7 02 c0       	push   0xc002d737
c002290f:	e8 3f 05 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0022914:	83 c4 10             	add    esp,0x10
c0022917:	b8 03 00 00 00       	mov    eax,0x3
c002291c:	eb 7c                	jmp    c002299a <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c002291e:	83 ec 0c             	sub    esp,0xc
c0022921:	6a 1c                	push   0x1c
c0022923:	e8 80 cf fe ff       	call   c000f8a8 <malloc>
c0022928:	89 07                	mov    DWORD PTR [edi],eax
c002292a:	89 c3                	mov    ebx,eax
c002292c:	58                   	pop    eax
c002292d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022931:	50                   	push   eax
c0022932:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0022935:	50                   	push   eax
c0022936:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002293a:	50                   	push   eax
c002293b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002293f:	50                   	push   eax
c0022940:	56                   	push   esi
c0022941:	e8 0d ff ff ff       	call   c0022853 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022946:	83 c4 20             	add    esp,0x20
c0022949:	84 c0                	test   al,al
c002294b:	74 07                	je     c0022954 <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c002294d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0022952:	74 0b                	je     c002295f <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c0022954:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0022958:	b8 01 00 00 00       	mov    eax,0x1
c002295d:	eb 3b                	jmp    c002299a <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c002295f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022963:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022967:	89 03                	mov    DWORD PTR [ebx],eax
c0022969:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0022970:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022974:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c002297b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022982:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022985:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002298c:	8a 06                	mov    al,BYTE PTR [esi]
c002298e:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0022991:	31 c0                	xor    eax,eax
c0022993:	eb 05                	jmp    c002299a <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0022995:	b8 04 00 00 00       	mov    eax,0x4
c002299a:	83 c4 10             	add    esp,0x10
c002299d:	5b                   	pop    ebx
c002299e:	5e                   	pop    esi
c002299f:	5f                   	pop    edi
c00229a0:	c3                   	ret    
c00229a1:	90                   	nop

c00229a2 <ISO9660::exists(char const*)>:
c00229a2:	83 ec 28             	sub    esp,0x28
c00229a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00229a9:	8d 54 24 18          	lea    edx,[esp+0x18]
c00229ad:	52                   	push   edx
c00229ae:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00229b1:	52                   	push   edx
c00229b2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00229b6:	52                   	push   edx
c00229b7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00229bb:	52                   	push   edx
c00229bc:	50                   	push   eax
c00229bd:	e8 91 fe ff ff       	call   c0022853 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00229c2:	83 c4 3c             	add    esp,0x3c
c00229c5:	c3                   	ret    

c00229c6 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c00229c6:	56                   	push   esi
c00229c7:	53                   	push   ebx
c00229c8:	83 ec 14             	sub    esp,0x14
c00229cb:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00229cf:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00229d3:	85 db                	test   ebx,ebx
c00229d5:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00229d9:	0f 94 c2             	sete   dl
c00229dc:	85 f6                	test   esi,esi
c00229de:	0f 94 c0             	sete   al
c00229e1:	08 c2                	or     dl,al
c00229e3:	75 68                	jne    c0022a4d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c00229e5:	85 c9                	test   ecx,ecx
c00229e7:	74 64                	je     c0022a4d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c00229e9:	83 ec 0c             	sub    esp,0xc
c00229ec:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00229ef:	8d 44 24 18          	lea    eax,[esp+0x18]
c00229f3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00229f9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022a00:	50                   	push   eax
c0022a01:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0022a04:	50                   	push   eax
c0022a05:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022a09:	50                   	push   eax
c0022a0a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022a0e:	50                   	push   eax
c0022a0f:	51                   	push   ecx
c0022a10:	e8 3e fe ff ff       	call   c0022853 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022a15:	83 c4 20             	add    esp,0x20
c0022a18:	ba 01 00 00 00       	mov    edx,0x1
c0022a1d:	84 c0                	test   al,al
c0022a1f:	74 31                	je     c0022a52 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0022a21:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022a25:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022a2c:	89 03                	mov    DWORD PTR [ebx],eax
c0022a2e:	ba 00 00 00 00       	mov    edx,0x0
c0022a33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022a37:	85 c0                	test   eax,eax
c0022a39:	0f 95 06             	setne  BYTE PTR [esi]
c0022a3c:	74 14                	je     c0022a52 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0022a3e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0022a44:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022a4b:	eb 05                	jmp    c0022a52 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0022a4d:	ba 04 00 00 00       	mov    edx,0x4
c0022a52:	83 c4 14             	add    esp,0x14
c0022a55:	89 d0                	mov    eax,edx
c0022a57:	5b                   	pop    ebx
c0022a58:	5e                   	pop    esi
c0022a59:	c3                   	ret    

c0022a5a <ISO9660::openDir(char const*, void**)>:
c0022a5a:	57                   	push   edi
c0022a5b:	56                   	push   esi
c0022a5c:	53                   	push   ebx
c0022a5d:	83 ec 10             	sub    esp,0x10
c0022a60:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0022a64:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0022a68:	85 ff                	test   edi,edi
c0022a6a:	0f 84 95 00 00 00    	je     c0022b05 <ISO9660::openDir(char const*, void**)+0xab>
c0022a70:	85 f6                	test   esi,esi
c0022a72:	0f 84 8d 00 00 00    	je     c0022b05 <ISO9660::openDir(char const*, void**)+0xab>
c0022a78:	83 ec 0c             	sub    esp,0xc
c0022a7b:	6a 1c                	push   0x1c
c0022a7d:	e8 26 ce fe ff       	call   c000f8a8 <malloc>
c0022a82:	89 07                	mov    DWORD PTR [edi],eax
c0022a84:	89 c3                	mov    ebx,eax
c0022a86:	59                   	pop    ecx
c0022a87:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022a8b:	50                   	push   eax
c0022a8c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0022a8f:	50                   	push   eax
c0022a90:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022a94:	50                   	push   eax
c0022a95:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022a99:	50                   	push   eax
c0022a9a:	56                   	push   esi
c0022a9b:	e8 b3 fd ff ff       	call   c0022853 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022aa0:	83 c4 20             	add    esp,0x20
c0022aa3:	84 c0                	test   al,al
c0022aa5:	74 07                	je     c0022aae <ISO9660::openDir(char const*, void**)+0x54>
c0022aa7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0022aac:	75 21                	jne    c0022acf <ISO9660::openDir(char const*, void**)+0x75>
c0022aae:	0f b6 c0             	movzx  eax,al
c0022ab1:	52                   	push   edx
c0022ab2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022ab6:	50                   	push   eax
c0022ab7:	68 5d d7 02 c0       	push   0xc002d75d
c0022abc:	e8 92 03 ff ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0022ac1:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0022ac5:	83 c4 10             	add    esp,0x10
c0022ac8:	b8 01 00 00 00       	mov    eax,0x1
c0022acd:	eb 3b                	jmp    c0022b0a <ISO9660::openDir(char const*, void**)+0xb0>
c0022acf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022ad3:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022ad7:	89 03                	mov    DWORD PTR [ebx],eax
c0022ad9:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0022ae0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022ae4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0022aeb:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022af2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022af5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022afc:	8a 06                	mov    al,BYTE PTR [esi]
c0022afe:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0022b01:	31 c0                	xor    eax,eax
c0022b03:	eb 05                	jmp    c0022b0a <ISO9660::openDir(char const*, void**)+0xb0>
c0022b05:	b8 04 00 00 00       	mov    eax,0x4
c0022b0a:	83 c4 10             	add    esp,0x10
c0022b0d:	5b                   	pop    ebx
c0022b0e:	5e                   	pop    esi
c0022b0f:	5f                   	pop    edi
c0022b10:	c3                   	ret    
c0022b11:	90                   	nop

c0022b12 <ISO9660::ISO9660()>:
c0022b12:	83 ec 0c             	sub    esp,0xc
c0022b15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b19:	83 ec 0c             	sub    esp,0xc
c0022b1c:	50                   	push   eax
c0022b1d:	e8 3c 06 ff ff       	call   c001315e <Filesystem::Filesystem()>
c0022b22:	83 c4 10             	add    esp,0x10
c0022b25:	ba 80 d7 02 c0       	mov    edx,0xc002d780
c0022b2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b2e:	89 10                	mov    DWORD PTR [eax],edx
c0022b30:	90                   	nop
c0022b31:	83 c4 0c             	add    esp,0xc
c0022b34:	c3                   	ret    
c0022b35:	90                   	nop

c0022b36 <SoundChannel::~SoundChannel()>:
c0022b36:	83 ec 0c             	sub    esp,0xc
c0022b39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b3d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0022b40:	83 ec 0c             	sub    esp,0xc
c0022b43:	50                   	push   eax
c0022b44:	e8 6f cd fe ff       	call   c000f8b8 <free>
c0022b49:	83 c4 10             	add    esp,0x10
c0022b4c:	90                   	nop
c0022b4d:	83 c4 0c             	add    esp,0xc
c0022b50:	c3                   	ret    
c0022b51:	90                   	nop

c0022b52 <SoundChannel::setSpeed(float)>:
c0022b52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022b56:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022b5a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0022b5d:	c3                   	ret    

c0022b5e <SoundChannel::getSpeed()>:
c0022b5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022b62:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0022b65:	c3                   	ret    

c0022b66 <SoundChannel::setVolume(int)>:
c0022b66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022b6a:	83 f8 64             	cmp    eax,0x64
c0022b6d:	7e 05                	jle    c0022b74 <SoundChannel::setVolume(int)+0xe>
c0022b6f:	b8 64 00 00 00       	mov    eax,0x64
c0022b74:	85 c0                	test   eax,eax
c0022b76:	79 02                	jns    c0022b7a <SoundChannel::setVolume(int)+0x14>
c0022b78:	31 c0                	xor    eax,eax
c0022b7a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022b7e:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0022b81:	c3                   	ret    

c0022b82 <SoundChannel::getVolume()>:
c0022b82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022b86:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0022b89:	c3                   	ret    

c0022b8a <SoundChannel::pause()>:
c0022b8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022b8e:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c0022b92:	c3                   	ret    
c0022b93:	90                   	nop

c0022b94 <SoundChannel::SoundChannel(int, int, int, int)>:
c0022b94:	83 ec 1c             	sub    esp,0x1c
c0022b97:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022b9b:	e8 ea ff ff ff       	call   c0022b8a <SoundChannel::pause()>
c0022ba0:	83 c4 04             	add    esp,0x4
c0022ba3:	6a 50                	push   0x50
c0022ba5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022ba9:	e8 b8 ff ff ff       	call   c0022b66 <SoundChannel::setVolume(int)>
c0022bae:	83 c4 08             	add    esp,0x8
c0022bb1:	a1 fc d7 02 c0       	mov    eax,ds:0xc002d7fc
c0022bb6:	50                   	push   eax
c0022bb7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022bbb:	e8 92 ff ff ff       	call   c0022b52 <SoundChannel::setSpeed(float)>
c0022bc0:	83 c4 08             	add    esp,0x8
c0022bc3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022bc7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0022bcb:	89 10                	mov    DWORD PTR [eax],edx
c0022bcd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022bd1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022bd5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022bd8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022bdc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022be0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022be3:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0022be8:	75 23                	jne    c0022c0d <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c0022bea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022bee:	8b 10                	mov    edx,DWORD PTR [eax]
c0022bf0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022bf4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022bf7:	0f af c2             	imul   eax,edx
c0022bfa:	85 c0                	test   eax,eax
c0022bfc:	79 03                	jns    c0022c01 <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c0022bfe:	83 c0 03             	add    eax,0x3
c0022c01:	c1 f8 02             	sar    eax,0x2
c0022c04:	05 a0 0f 00 00       	add    eax,0xfa0
c0022c09:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022c0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022c11:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022c15:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0022c18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022c1c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0022c23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022c27:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0022c2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022c32:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022c35:	c1 e0 02             	shl    eax,0x2
c0022c38:	83 ec 0c             	sub    esp,0xc
c0022c3b:	50                   	push   eax
c0022c3c:	e8 67 cc fe ff       	call   c000f8a8 <malloc>
c0022c41:	83 c4 10             	add    esp,0x10
c0022c44:	89 c2                	mov    edx,eax
c0022c46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022c4a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0022c4d:	83 ec 04             	sub    esp,0x4
c0022c50:	8d 44 24 08          	lea    eax,[esp+0x8]
c0022c54:	50                   	push   eax
c0022c55:	6a 01                	push   0x1
c0022c57:	6a 04                	push   0x4
c0022c59:	e8 23 5f fe ff       	call   c0008b81 <src_new>
c0022c5e:	83 c4 10             	add    esp,0x10
c0022c61:	89 c2                	mov    edx,eax
c0022c63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022c67:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0022c6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c6e:	85 c0                	test   eax,eax
c0022c70:	74 10                	je     c0022c82 <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c0022c72:	83 ec 0c             	sub    esp,0xc
c0022c75:	68 e0 d7 02 c0       	push   0xc002d7e0
c0022c7a:	e8 6e 7c ff ff       	call   c001a8ed <Krnl::panic(char const*)>
c0022c7f:	83 c4 10             	add    esp,0x10
c0022c82:	a0 e0 35 03 c0       	mov    al,ds:0xc00335e0
c0022c87:	83 f0 01             	xor    eax,0x1
c0022c8a:	84 c0                	test   al,al
c0022c8c:	74 57                	je     c0022ce5 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c0022c8e:	a1 00 d8 02 c0       	mov    eax,ds:0xc002d800
c0022c93:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022c97:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022c9f:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0022ca7:	7f 35                	jg     c0022cde <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c0022ca9:	83 ec 0c             	sub    esp,0xc
c0022cac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0022cb0:	e8 5a 52 00 00       	call   c0027f0f <__floatsisf>
c0022cb5:	83 c4 10             	add    esp,0x10
c0022cb8:	8b 15 00 d8 02 c0    	mov    edx,DWORD PTR ds:0xc002d800
c0022cbe:	83 ec 08             	sub    esp,0x8
c0022cc1:	52                   	push   edx
c0022cc2:	50                   	push   eax
c0022cc3:	e8 59 4e 00 00       	call   c0027b21 <__mulsf3>
c0022cc8:	83 c4 10             	add    esp,0x10
c0022ccb:	89 c2                	mov    edx,eax
c0022ccd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022cd1:	89 14 85 e0 31 03 c0 	mov    DWORD PTR [eax*4-0x3ffcce20],edx
c0022cd8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022cdc:	eb c1                	jmp    c0022c9f <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c0022cde:	c6 05 e0 35 03 c0 01 	mov    BYTE PTR ds:0xc00335e0,0x1
c0022ce5:	90                   	nop
c0022ce6:	83 c4 1c             	add    esp,0x1c
c0022ce9:	c3                   	ret    

c0022cea <SoundChannel::play()>:
c0022cea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022cee:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c0022cf2:	c3                   	ret    
c0022cf3:	90                   	nop

c0022cf4 <SoundChannel::paused()>:
c0022cf4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022cf8:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0022cfb:	c3                   	ret    

c0022cfc <SoundChannel::getSampleRate()>:
c0022cfc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d00:	8b 00                	mov    eax,DWORD PTR [eax]
c0022d02:	c3                   	ret    
c0022d03:	90                   	nop

c0022d04 <SoundChannel::getBits()>:
c0022d04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d08:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022d0b:	c3                   	ret    

c0022d0c <SoundChannel::getBufferUsed()>:
c0022d0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d10:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0022d13:	c3                   	ret    

c0022d14 <SoundChannel::getBufferSize()>:
c0022d14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d18:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022d1b:	c3                   	ret    

c0022d1c <SoundChannel::unbuffer(float*, int, int)>:
c0022d1c:	56                   	push   esi
c0022d1d:	53                   	push   ebx
c0022d1e:	83 ec 40             	sub    esp,0x40
c0022d21:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0022d25:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0022d28:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022d2c:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0022d2f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022d33:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0022d37:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0022d3b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0022d3f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022d43:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022d47:	e8 c3 51 00 00       	call   c0027f0f <__floatsisf>
c0022d4c:	5a                   	pop    edx
c0022d4d:	89 c6                	mov    esi,eax
c0022d4f:	ff 33                	push   DWORD PTR [ebx]
c0022d51:	e8 b9 51 00 00       	call   c0027f0f <__floatsisf>
c0022d56:	59                   	pop    ecx
c0022d57:	5a                   	pop    edx
c0022d58:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0022d5b:	50                   	push   eax
c0022d5c:	e8 c0 4d 00 00       	call   c0027b21 <__mulsf3>
c0022d61:	59                   	pop    ecx
c0022d62:	5a                   	pop    edx
c0022d63:	50                   	push   eax
c0022d64:	56                   	push   esi
c0022d65:	e8 7a 4f 00 00       	call   c0027ce4 <__divsf3>
c0022d6a:	89 04 24             	mov    DWORD PTR [esp],eax
c0022d6d:	e8 6d 64 00 00       	call   c00291df <__extendsfdf2>
c0022d72:	59                   	pop    ecx
c0022d73:	5e                   	pop    esi
c0022d74:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022d78:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0022d7c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0022d84:	8d 44 24 14          	lea    eax,[esp+0x14]
c0022d88:	50                   	push   eax
c0022d89:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0022d8c:	e8 e5 59 fe ff       	call   c0008776 <src_process>
c0022d91:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022d95:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0022d98:	83 c4 0c             	add    esp,0xc
c0022d9b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0022d9e:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0022da1:	29 d0                	sub    eax,edx
c0022da3:	c1 e0 02             	shl    eax,0x2
c0022da6:	50                   	push   eax
c0022da7:	8d 04 91             	lea    eax,[ecx+edx*4]
c0022daa:	50                   	push   eax
c0022dab:	51                   	push   ecx
c0022dac:	e8 f3 d8 fd ff       	call   c00006a4 <memmove>
c0022db1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022db5:	83 c4 44             	add    esp,0x44
c0022db8:	5b                   	pop    ebx
c0022db9:	5e                   	pop    esi
c0022dba:	c3                   	ret    
c0022dbb:	90                   	nop

c0022dbc <SoundChannel::buffer8(unsigned char*, int)>:
c0022dbc:	55                   	push   ebp
c0022dbd:	57                   	push   edi
c0022dbe:	56                   	push   esi
c0022dbf:	53                   	push   ebx
c0022dc0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022dc4:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0022dc8:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022dcb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0022dcf:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022dd2:	74 7a                	je     c0022e4e <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022dd4:	85 ff                	test   edi,edi
c0022dd6:	7e 76                	jle    c0022e4e <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022dd8:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0022ddc:	8d 70 01             	lea    esi,[eax+0x1]
c0022ddf:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022de2:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022de5:	8b 1c 9d e0 31 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcce20]
c0022dec:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022def:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022df2:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022df5:	74 5e                	je     c0022e55 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0022df7:	83 ff 01             	cmp    edi,0x1
c0022dfa:	74 4b                	je     c0022e47 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0022dfc:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0022e00:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022e03:	8d 70 01             	lea    esi,[eax+0x1]
c0022e06:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022e09:	8b 1c 9d e0 31 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcce20]
c0022e10:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022e13:	b8 02 00 00 00       	mov    eax,0x2
c0022e18:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022e1b:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022e1e:	75 23                	jne    c0022e43 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0022e20:	eb 27                	jmp    c0022e49 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022e22:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0022e27:	8d 71 01             	lea    esi,[ecx+0x1]
c0022e2a:	40                   	inc    eax
c0022e2b:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022e2e:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0022e31:	8b 1c 9d e0 31 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcce20]
c0022e38:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0022e3b:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022e3e:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022e41:	74 06                	je     c0022e49 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022e43:	39 c7                	cmp    edi,eax
c0022e45:	75 db                	jne    c0022e22 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0022e47:	89 f8                	mov    eax,edi
c0022e49:	5b                   	pop    ebx
c0022e4a:	5e                   	pop    esi
c0022e4b:	5f                   	pop    edi
c0022e4c:	5d                   	pop    ebp
c0022e4d:	c3                   	ret    
c0022e4e:	5b                   	pop    ebx
c0022e4f:	31 c0                	xor    eax,eax
c0022e51:	5e                   	pop    esi
c0022e52:	5f                   	pop    edi
c0022e53:	5d                   	pop    ebp
c0022e54:	c3                   	ret    
c0022e55:	b8 01 00 00 00       	mov    eax,0x1
c0022e5a:	eb ed                	jmp    c0022e49 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0022e5c <SoundDevice::SoundDevice(char const*)>:
c0022e5c:	83 ec 1c             	sub    esp,0x1c
c0022e5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022e63:	83 ec 08             	sub    esp,0x8
c0022e66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022e6a:	50                   	push   eax
c0022e6b:	e8 f4 15 ff ff       	call   c0014464 <Device::Device(char const*)>
c0022e70:	83 c4 10             	add    esp,0x10
c0022e73:	ba 0c d8 02 c0       	mov    edx,0xc002d80c
c0022e78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022e7c:	89 10                	mov    DWORD PTR [eax],edx
c0022e7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022e82:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0022e8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022e90:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0022e9a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022ea2:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022ea7:	7f 19                	jg     c0022ec2 <SoundDevice::SoundDevice(char const*)+0x66>
c0022ea9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022ead:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022eb1:	83 c2 54             	add    edx,0x54
c0022eb4:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0022ebc:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022ec0:	eb e0                	jmp    c0022ea2 <SoundDevice::SoundDevice(char const*)+0x46>
c0022ec2:	90                   	nop
c0022ec3:	83 c4 1c             	add    esp,0x1c
c0022ec6:	c3                   	ret    
c0022ec7:	90                   	nop

c0022ec8 <SoundDevice::~SoundDevice()>:
c0022ec8:	53                   	push   ebx
c0022ec9:	83 ec 18             	sub    esp,0x18
c0022ecc:	ba 0c d8 02 c0       	mov    edx,0xc002d80c
c0022ed1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022ed5:	89 10                	mov    DWORD PTR [eax],edx
c0022ed7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022edf:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022ee4:	7f 46                	jg     c0022f2c <SoundDevice::~SoundDevice()+0x64>
c0022ee6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022eea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022eee:	83 c2 54             	add    edx,0x54
c0022ef1:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0022ef5:	85 c0                	test   eax,eax
c0022ef7:	74 2d                	je     c0022f26 <SoundDevice::~SoundDevice()+0x5e>
c0022ef9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022efd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022f01:	83 c2 54             	add    edx,0x54
c0022f04:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0022f08:	85 db                	test   ebx,ebx
c0022f0a:	74 1a                	je     c0022f26 <SoundDevice::~SoundDevice()+0x5e>
c0022f0c:	83 ec 0c             	sub    esp,0xc
c0022f0f:	53                   	push   ebx
c0022f10:	e8 21 fc ff ff       	call   c0022b36 <SoundChannel::~SoundChannel()>
c0022f15:	83 c4 10             	add    esp,0x10
c0022f18:	83 ec 08             	sub    esp,0x8
c0022f1b:	6a 2c                	push   0x2c
c0022f1d:	53                   	push   ebx
c0022f1e:	e8 50 fe fe ff       	call   c0012d73 <operator delete(void*, unsigned long)>
c0022f23:	83 c4 10             	add    esp,0x10
c0022f26:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022f2a:	eb b3                	jmp    c0022edf <SoundDevice::~SoundDevice()+0x17>
c0022f2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022f30:	83 ec 0c             	sub    esp,0xc
c0022f33:	50                   	push   eax
c0022f34:	e8 21 12 ff ff       	call   c001415a <Device::~Device()>
c0022f39:	83 c4 10             	add    esp,0x10
c0022f3c:	90                   	nop
c0022f3d:	83 c4 18             	add    esp,0x18
c0022f40:	5b                   	pop    ebx
c0022f41:	c3                   	ret    

c0022f42 <SoundDevice::~SoundDevice()>:
c0022f42:	83 ec 0c             	sub    esp,0xc
c0022f45:	83 ec 0c             	sub    esp,0xc
c0022f48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022f4c:	e8 77 ff ff ff       	call   c0022ec8 <SoundDevice::~SoundDevice()>
c0022f51:	83 c4 10             	add    esp,0x10
c0022f54:	83 ec 08             	sub    esp,0x8
c0022f57:	68 e4 01 00 00       	push   0x1e4
c0022f5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022f60:	e8 0e fe fe ff       	call   c0012d73 <operator delete(void*, unsigned long)>
c0022f65:	83 c4 10             	add    esp,0x10
c0022f68:	83 c4 0c             	add    esp,0xc
c0022f6b:	c3                   	ret    

c0022f6c <SoundDevice::getFreeChannelNum()>:
c0022f6c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022f70:	31 c0                	xor    eax,eax
c0022f72:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0022f7a:	74 09                	je     c0022f85 <SoundDevice::getFreeChannelNum()+0x19>
c0022f7c:	40                   	inc    eax
c0022f7d:	83 f8 20             	cmp    eax,0x20
c0022f80:	75 f0                	jne    c0022f72 <SoundDevice::getFreeChannelNum()+0x6>
c0022f82:	83 c8 ff             	or     eax,0xffffffff
c0022f85:	c3                   	ret    

c0022f86 <SoundDevice::addChannel(SoundChannel*)>:
c0022f86:	56                   	push   esi
c0022f87:	53                   	push   ebx
c0022f88:	51                   	push   ecx
c0022f89:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022f8d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0022f91:	53                   	push   ebx
c0022f92:	e8 d5 ff ff ff       	call   c0022f6c <SoundDevice::getFreeChannelNum()>
c0022f97:	5a                   	pop    edx
c0022f98:	83 f8 ff             	cmp    eax,0xffffffff
c0022f9b:	74 51                	je     c0022fee <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022f9d:	85 f6                	test   esi,esi
c0022f9f:	74 4d                	je     c0022fee <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022fa1:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0022fa8:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0022faf:	75 30                	jne    c0022fe1 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0022fb1:	83 ec 0c             	sub    esp,0xc
c0022fb4:	56                   	push   esi
c0022fb5:	e8 42 fd ff ff       	call   c0022cfc <SoundChannel::getSampleRate()>
c0022fba:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0022fc0:	89 34 24             	mov    DWORD PTR [esp],esi
c0022fc3:	e8 3c fd ff ff       	call   c0022d04 <SoundChannel::getBits()>
c0022fc8:	83 c4 0c             	add    esp,0xc
c0022fcb:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0022fd1:	8b 13                	mov    edx,DWORD PTR [ebx]
c0022fd3:	50                   	push   eax
c0022fd4:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0022fda:	53                   	push   ebx
c0022fdb:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0022fde:	83 c4 10             	add    esp,0x10
c0022fe1:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0022fe7:	b8 01 00 00 00       	mov    eax,0x1
c0022fec:	eb 03                	jmp    c0022ff1 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0022fee:	83 c8 ff             	or     eax,0xffffffff
c0022ff1:	5a                   	pop    edx
c0022ff2:	5b                   	pop    ebx
c0022ff3:	5e                   	pop    esi
c0022ff4:	c3                   	ret    
c0022ff5:	90                   	nop

c0022ff6 <SoundDevice::removeChannel(int)>:
c0022ff6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022ffa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022ffe:	83 fa 1f             	cmp    edx,0x1f
c0023001:	77 23                	ja     c0023026 <SoundDevice::removeChannel(int)+0x30>
c0023003:	8d 14 90             	lea    edx,[eax+edx*4]
c0023006:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c002300d:	74 17                	je     c0023026 <SoundDevice::removeChannel(int)+0x30>
c002300f:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0023019:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c002301f:	75 05                	jne    c0023026 <SoundDevice::removeChannel(int)+0x30>
c0023021:	8b 00                	mov    eax,DWORD PTR [eax]
c0023023:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c0023026:	c3                   	ret    
c0023027:	90                   	nop

c0023028 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c0023028:	57                   	push   edi
c0023029:	56                   	push   esi
c002302a:	53                   	push   ebx
c002302b:	31 db                	xor    ebx,ebx
c002302d:	83 ec 10             	sub    esp,0x10
c0023030:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0023034:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0023038:	0f 8d cb 00 00 00    	jge    c0023109 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c002303e:	83 ec 0c             	sub    esp,0xc
c0023041:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0023045:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0023048:	e8 92 61 00 00       	call   c00291df <__extendsfdf2>
c002304d:	83 c4 10             	add    esp,0x10
c0023050:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023054:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0023058:	68 00 00 f0 3f       	push   0x3ff00000
c002305d:	6a 00                	push   0x0
c002305f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023063:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023067:	e8 ff 50 00 00       	call   c002816b <__adddf3>
c002306c:	83 c4 10             	add    esp,0x10
c002306f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023073:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0023077:	68 00 00 e0 3f       	push   0x3fe00000
c002307c:	6a 00                	push   0x0
c002307e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023082:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023086:	e8 5d 57 00 00       	call   c00287e8 <__muldf3>
c002308b:	83 c4 10             	add    esp,0x10
c002308e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023092:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0023096:	68 00 00 60 40       	push   0x40600000
c002309b:	6a 00                	push   0x0
c002309d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00230a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00230a5:	e8 3e 57 00 00       	call   c00287e8 <__muldf3>
c00230aa:	59                   	pop    ecx
c00230ab:	5f                   	pop    edi
c00230ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00230b0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00230b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00230b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00230bc:	e8 fa 5f 00 00       	call   c00290bb <__truncdfsf2>
c00230c1:	5a                   	pop    edx
c00230c2:	89 c7                	mov    edi,eax
c00230c4:	59                   	pop    ecx
c00230c5:	68 00 00 fe 42       	push   0x42fe0000
c00230ca:	50                   	push   eax
c00230cb:	e8 95 50 00 00       	call   c0028165 <__gesf2>
c00230d0:	83 c4 10             	add    esp,0x10
c00230d3:	85 c0                	test   eax,eax
c00230d5:	78 06                	js     c00230dd <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c00230d7:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c00230db:	eb 26                	jmp    c0023103 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00230dd:	50                   	push   eax
c00230de:	50                   	push   eax
c00230df:	6a 00                	push   0x0
c00230e1:	57                   	push   edi
c00230e2:	e8 82 50 00 00       	call   c0028169 <__lesf2>
c00230e7:	83 c4 10             	add    esp,0x10
c00230ea:	85 c0                	test   eax,eax
c00230ec:	7f 06                	jg     c00230f4 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c00230ee:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c00230f2:	eb 0f                	jmp    c0023103 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00230f4:	83 ec 0c             	sub    esp,0xc
c00230f7:	57                   	push   edi
c00230f8:	e8 7f 61 00 00       	call   c002927c <lrintf>
c00230fd:	83 c4 10             	add    esp,0x10
c0023100:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0023103:	43                   	inc    ebx
c0023104:	e9 2b ff ff ff       	jmp    c0023034 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0023109:	83 c4 10             	add    esp,0x10
c002310c:	5b                   	pop    ebx
c002310d:	5e                   	pop    esi
c002310e:	5f                   	pop    edi
c002310f:	c3                   	ret    

c0023110 <SoundDevice::getAudio(int, float*, float*)>:
c0023110:	55                   	push   ebp
c0023111:	57                   	push   edi
c0023112:	56                   	push   esi
c0023113:	53                   	push   ebx
c0023114:	31 db                	xor    ebx,ebx
c0023116:	83 ec 20             	sub    esp,0x20
c0023119:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002311d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0023121:	c1 e0 02             	shl    eax,0x2
c0023124:	50                   	push   eax
c0023125:	6a 00                	push   0x0
c0023127:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002312b:	e8 3c d6 fd ff       	call   c000076c <memset>
c0023130:	83 c4 10             	add    esp,0x10
c0023133:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0023137:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c002313e:	85 c0                	test   eax,eax
c0023140:	0f 84 d7 00 00 00    	je     c002321d <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0023146:	83 ec 0c             	sub    esp,0xc
c0023149:	50                   	push   eax
c002314a:	e8 a5 fb ff ff       	call   c0022cf4 <SoundChannel::paused()>
c002314f:	83 c4 10             	add    esp,0x10
c0023152:	84 c0                	test   al,al
c0023154:	0f 85 c3 00 00 00    	jne    c002321d <SoundDevice::getAudio(int, float*, float*)+0x10d>
c002315a:	83 ec 0c             	sub    esp,0xc
c002315d:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0023164:	e8 19 fa ff ff       	call   c0022b82 <SoundChannel::getVolume()>
c0023169:	83 c4 10             	add    esp,0x10
c002316c:	85 c0                	test   eax,eax
c002316e:	0f 84 a9 00 00 00    	je     c002321d <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0023174:	83 ec 0c             	sub    esp,0xc
c0023177:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c002317e:	e8 ff f9 ff ff       	call   c0022b82 <SoundChannel::getVolume()>
c0023183:	83 ec 0c             	sub    esp,0xc
c0023186:	50                   	push   eax
c0023187:	e8 83 4d 00 00       	call   c0027f0f <__floatsisf>
c002318c:	59                   	pop    ecx
c002318d:	5d                   	pop    ebp
c002318e:	31 ed                	xor    ebp,ebp
c0023190:	68 00 00 c8 42       	push   0x42c80000
c0023195:	50                   	push   eax
c0023196:	e8 49 4b 00 00       	call   c0027ce4 <__divsf3>
c002319b:	83 c4 10             	add    esp,0x10
c002319e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00231a2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00231a6:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c00231ac:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00231b0:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00231b7:	e8 60 fb ff ff       	call   c0022d1c <SoundChannel::unbuffer(float*, int, int)>
c00231bc:	83 c4 20             	add    esp,0x20
c00231bf:	89 c1                	mov    ecx,eax
c00231c1:	39 cd                	cmp    ebp,ecx
c00231c3:	7d 52                	jge    c0023217 <SoundDevice::getAudio(int, float*, float*)+0x107>
c00231c5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00231c9:	50                   	push   eax
c00231ca:	50                   	push   eax
c00231cb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00231cf:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c00231d2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00231d6:	e8 46 49 00 00       	call   c0027b21 <__mulsf3>
c00231db:	5a                   	pop    edx
c00231dc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00231e0:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c00231e6:	e8 24 4d 00 00       	call   c0027f0f <__floatsisf>
c00231eb:	59                   	pop    ecx
c00231ec:	5a                   	pop    edx
c00231ed:	50                   	push   eax
c00231ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00231f2:	e8 ed 4a 00 00       	call   c0027ce4 <__divsf3>
c00231f7:	59                   	pop    ecx
c00231f8:	5a                   	pop    edx
c00231f9:	50                   	push   eax
c00231fa:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00231fe:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0023201:	e8 f8 45 00 00       	call   c00277fe <__addsf3>
c0023206:	83 c4 10             	add    esp,0x10
c0023209:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002320d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0023211:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c0023214:	45                   	inc    ebp
c0023215:	eb aa                	jmp    c00231c1 <SoundDevice::getAudio(int, float*, float*)+0xb1>
c0023217:	39 cf                	cmp    edi,ecx
c0023219:	7e 02                	jle    c002321d <SoundDevice::getAudio(int, float*, float*)+0x10d>
c002321b:	89 cf                	mov    edi,ecx
c002321d:	43                   	inc    ebx
c002321e:	83 fb 20             	cmp    ebx,0x20
c0023221:	0f 85 10 ff ff ff    	jne    c0023137 <SoundDevice::getAudio(int, float*, float*)+0x27>
c0023227:	83 c4 1c             	add    esp,0x1c
c002322a:	89 f8                	mov    eax,edi
c002322c:	5b                   	pop    ebx
c002322d:	5e                   	pop    esi
c002322e:	5f                   	pop    edi
c002322f:	5d                   	pop    ebp
c0023230:	c3                   	ret    
c0023231:	90                   	nop

c0023232 <PCI::open(int, int, void*)>:
c0023232:	83 ec 18             	sub    esp,0x18
c0023235:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023239:	8b 10                	mov    edx,DWORD PTR [eax]
c002323b:	50                   	push   eax
c002323c:	ff 52 18             	call   DWORD PTR [edx+0x18]
c002323f:	31 c0                	xor    eax,eax
c0023241:	83 c4 1c             	add    esp,0x1c
c0023244:	c3                   	ret    
c0023245:	90                   	nop

c0023246 <PCI::close(int, int, void*)>:
c0023246:	31 c0                	xor    eax,eax
c0023248:	c3                   	ret    
c0023249:	90                   	nop

c002324a <PCI::PCI()>:
c002324a:	83 ec 0c             	sub    esp,0xc
c002324d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023251:	83 ec 08             	sub    esp,0x8
c0023254:	68 3c d8 02 c0       	push   0xc002d83c
c0023259:	50                   	push   eax
c002325a:	e8 95 08 ff ff       	call   c0013af4 <Bus::Bus(char const*)>
c002325f:	83 c4 10             	add    esp,0x10
c0023262:	ba dc d8 02 c0       	mov    edx,0xc002d8dc
c0023267:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002326b:	89 10                	mov    DWORD PTR [eax],edx
c002326d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023271:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0023277:	0f b6 d0             	movzx  edx,al
c002327a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002327e:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0023285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023289:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002328f:	0f b6 d0             	movzx  edx,al
c0023292:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023296:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c002329b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002329f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00232a5:	8d 50 01             	lea    edx,[eax+0x1]
c00232a8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00232ac:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00232b2:	0f b6 d0             	movzx  edx,al
c00232b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232b9:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00232bd:	83 c9 c0             	or     ecx,0xffffffc0
c00232c0:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00232c4:	90                   	nop
c00232c5:	83 c4 0c             	add    esp,0xc
c00232c8:	c3                   	ret    
c00232c9:	90                   	nop

c00232ca <PCI::readBAR8(unsigned int, int)>:
c00232ca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00232ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00232d2:	f6 c2 01             	test   dl,0x1
c00232d5:	74 07                	je     c00232de <PCI::readBAR8(unsigned int, int)+0x14>
c00232d7:	83 e2 fc             	and    edx,0xfffffffc
c00232da:	01 c2                	add    edx,eax
c00232dc:	ec                   	in     al,dx
c00232dd:	c3                   	ret    
c00232de:	83 e2 f0             	and    edx,0xfffffff0
c00232e1:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c00232e4:	c3                   	ret    
c00232e5:	90                   	nop

c00232e6 <PCI::readBAR16(unsigned int, int)>:
c00232e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00232ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00232ee:	f6 c2 01             	test   dl,0x1
c00232f1:	74 08                	je     c00232fb <PCI::readBAR16(unsigned int, int)+0x15>
c00232f3:	83 e2 fc             	and    edx,0xfffffffc
c00232f6:	01 c2                	add    edx,eax
c00232f8:	66 ed                	in     ax,dx
c00232fa:	c3                   	ret    
c00232fb:	83 e2 f0             	and    edx,0xfffffff0
c00232fe:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c0023302:	c3                   	ret    
c0023303:	90                   	nop

c0023304 <PCI::readBAR32(unsigned int, int)>:
c0023304:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0023308:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002330c:	f6 c2 01             	test   dl,0x1
c002330f:	74 07                	je     c0023318 <PCI::readBAR32(unsigned int, int)+0x14>
c0023311:	83 e2 fc             	and    edx,0xfffffffc
c0023314:	01 c2                	add    edx,eax
c0023316:	ed                   	in     eax,dx
c0023317:	c3                   	ret    
c0023318:	83 e2 f0             	and    edx,0xfffffff0
c002331b:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c002331e:	c3                   	ret    
c002331f:	90                   	nop

c0023320 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c0023320:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0023324:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023328:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002332c:	f6 c2 01             	test   dl,0x1
c002332f:	74 07                	je     c0023338 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c0023331:	83 e2 fc             	and    edx,0xfffffffc
c0023334:	01 ca                	add    edx,ecx
c0023336:	ee                   	out    dx,al
c0023337:	c3                   	ret    
c0023338:	83 e2 f0             	and    edx,0xfffffff0
c002333b:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c002333e:	c3                   	ret    
c002333f:	90                   	nop

c0023340 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c0023340:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0023344:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023348:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002334c:	f6 c2 01             	test   dl,0x1
c002334f:	74 08                	je     c0023359 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c0023351:	83 e2 fc             	and    edx,0xfffffffc
c0023354:	01 ca                	add    edx,ecx
c0023356:	66 ef                	out    dx,ax
c0023358:	c3                   	ret    
c0023359:	83 e2 f0             	and    edx,0xfffffff0
c002335c:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c0023360:	c3                   	ret    
c0023361:	90                   	nop

c0023362 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0023362:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0023366:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002336a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002336e:	f6 c2 01             	test   dl,0x1
c0023371:	74 07                	je     c002337a <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c0023373:	83 e2 fc             	and    edx,0xfffffffc
c0023376:	01 ca                	add    edx,ecx
c0023378:	ef                   	out    dx,eax
c0023379:	c3                   	ret    
c002337a:	83 e2 f0             	and    edx,0xfffffff0
c002337d:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c0023380:	c3                   	ret    
c0023381:	90                   	nop

c0023382 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0023382:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0023386:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002338b:	89 ca                	mov    edx,ecx
c002338d:	c1 e0 10             	shl    eax,0x10
c0023390:	81 e2 fc 00 00 00    	and    edx,0xfc
c0023396:	09 d0                	or     eax,edx
c0023398:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c002339d:	c1 e2 08             	shl    edx,0x8
c00233a0:	09 d0                	or     eax,edx
c00233a2:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c00233a7:	c1 e2 0b             	shl    edx,0xb
c00233aa:	09 d0                	or     eax,edx
c00233ac:	ba f8 0c 00 00       	mov    edx,0xcf8
c00233b1:	0d 00 00 00 80       	or     eax,0x80000000
c00233b6:	ef                   	out    dx,eax
c00233b7:	ba fc 0c 00 00       	mov    edx,0xcfc
c00233bc:	ed                   	in     eax,dx
c00233bd:	83 e1 02             	and    ecx,0x2
c00233c0:	0f b6 c9             	movzx  ecx,cl
c00233c3:	c1 e1 03             	shl    ecx,0x3
c00233c6:	d3 e8                	shr    eax,cl
c00233c8:	c3                   	ret    
c00233c9:	90                   	nop

c00233ca <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c00233ca:	6a 00                	push   0x0
c00233cc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00233d1:	50                   	push   eax
c00233d2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00233d7:	50                   	push   eax
c00233d8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00233dd:	50                   	push   eax
c00233de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00233e2:	e8 9b ff ff ff       	call   c0023382 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00233e7:	83 c4 14             	add    esp,0x14
c00233ea:	c3                   	ret    
c00233eb:	90                   	nop

c00233ec <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c00233ec:	6a 0e                	push   0xe
c00233ee:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00233f3:	50                   	push   eax
c00233f4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00233f9:	50                   	push   eax
c00233fa:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00233ff:	50                   	push   eax
c0023400:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023404:	e8 79 ff ff ff       	call   c0023382 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023409:	83 c4 14             	add    esp,0x14
c002340c:	0f b6 c0             	movzx  eax,al
c002340f:	c3                   	ret    

c0023410 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0023410:	55                   	push   ebp
c0023411:	57                   	push   edi
c0023412:	56                   	push   esi
c0023413:	53                   	push   ebx
c0023414:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c0023419:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c002341e:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c0023423:	6a 0a                	push   0xa
c0023425:	56                   	push   esi
c0023426:	55                   	push   ebp
c0023427:	57                   	push   edi
c0023428:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c002342c:	e8 51 ff ff ff       	call   c0023382 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023431:	6a 0a                	push   0xa
c0023433:	89 c3                	mov    ebx,eax
c0023435:	56                   	push   esi
c0023436:	0f b6 db             	movzx  ebx,bl
c0023439:	55                   	push   ebp
c002343a:	57                   	push   edi
c002343b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c002343f:	e8 3e ff ff ff       	call   c0023382 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023444:	83 c4 28             	add    esp,0x28
c0023447:	25 00 ff 00 00       	and    eax,0xff00
c002344c:	09 d8                	or     eax,ebx
c002344e:	5b                   	pop    ebx
c002344f:	5e                   	pop    esi
c0023450:	5f                   	pop    edi
c0023451:	5d                   	pop    ebp
c0023452:	c3                   	ret    
c0023453:	90                   	nop

c0023454 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0023454:	6a 08                	push   0x8
c0023456:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002345b:	50                   	push   eax
c002345c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023461:	50                   	push   eax
c0023462:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023467:	50                   	push   eax
c0023468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002346c:	e8 11 ff ff ff       	call   c0023382 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023471:	83 c4 14             	add    esp,0x14
c0023474:	0f b6 c4             	movzx  eax,ah
c0023477:	c3                   	ret    

c0023478 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0023478:	6a 08                	push   0x8
c002347a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002347f:	50                   	push   eax
c0023480:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023485:	50                   	push   eax
c0023486:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002348b:	50                   	push   eax
c002348c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023490:	e8 ed fe ff ff       	call   c0023382 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023495:	83 c4 14             	add    esp,0x14
c0023498:	c3                   	ret    
c0023499:	90                   	nop

c002349a <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c002349a:	6a 3c                	push   0x3c
c002349c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00234a1:	50                   	push   eax
c00234a2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00234a7:	50                   	push   eax
c00234a8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00234ad:	50                   	push   eax
c00234ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00234b2:	e8 cb fe ff ff       	call   c0023382 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00234b7:	83 c4 14             	add    esp,0x14
c00234ba:	c3                   	ret    
c00234bb:	90                   	nop

c00234bc <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c00234bc:	6a 18                	push   0x18
c00234be:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00234c3:	50                   	push   eax
c00234c4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00234c9:	50                   	push   eax
c00234ca:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00234cf:	50                   	push   eax
c00234d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00234d4:	e8 a9 fe ff ff       	call   c0023382 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00234d9:	83 c4 14             	add    esp,0x14
c00234dc:	0f b6 c4             	movzx  eax,ah
c00234df:	c3                   	ret    

c00234e0 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00234e0:	55                   	push   ebp
c00234e1:	57                   	push   edi
c00234e2:	56                   	push   esi
c00234e3:	53                   	push   ebx
c00234e4:	50                   	push   eax
c00234e5:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c00234e9:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c00234ee:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c00234f3:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c00234f8:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c00234ff:	8d 43 12             	lea    eax,[ebx+0x12]
c0023502:	83 c3 10             	add    ebx,0x10
c0023505:	0f b6 c0             	movzx  eax,al
c0023508:	0f b6 db             	movzx  ebx,bl
c002350b:	50                   	push   eax
c002350c:	51                   	push   ecx
c002350d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0023511:	57                   	push   edi
c0023512:	55                   	push   ebp
c0023513:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0023517:	e8 66 fe ff ff       	call   c0023382 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002351c:	53                   	push   ebx
c002351d:	89 c6                	mov    esi,eax
c002351f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0023523:	c1 e6 10             	shl    esi,0x10
c0023526:	51                   	push   ecx
c0023527:	57                   	push   edi
c0023528:	55                   	push   ebp
c0023529:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002352d:	e8 50 fe ff ff       	call   c0023382 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023532:	83 c4 2c             	add    esp,0x2c
c0023535:	0f b7 c0             	movzx  eax,ax
c0023538:	5b                   	pop    ebx
c0023539:	09 f0                	or     eax,esi
c002353b:	5e                   	pop    esi
c002353c:	5f                   	pop    edi
c002353d:	5d                   	pop    ebp
c002353e:	c3                   	ret    
c002353f:	90                   	nop

c0023540 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0023540:	53                   	push   ebx
c0023541:	ba f8 0c 00 00       	mov    edx,0xcf8
c0023546:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c002354b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002354f:	c1 e1 10             	shl    ecx,0x10
c0023552:	25 fc 00 00 00       	and    eax,0xfc
c0023557:	09 c1                	or     ecx,eax
c0023559:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002355e:	c1 e0 08             	shl    eax,0x8
c0023561:	09 c1                	or     ecx,eax
c0023563:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0023568:	c1 e0 0b             	shl    eax,0xb
c002356b:	09 c1                	or     ecx,eax
c002356d:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0023573:	89 c8                	mov    eax,ecx
c0023575:	ef                   	out    dx,eax
c0023576:	ba fc 0c 00 00       	mov    edx,0xcfc
c002357b:	ed                   	in     eax,dx
c002357c:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0023581:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0023586:	74 0a                	je     c0023592 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0023588:	0f b7 d8             	movzx  ebx,ax
c002358b:	89 d0                	mov    eax,edx
c002358d:	c1 e0 10             	shl    eax,0x10
c0023590:	eb 05                	jmp    c0023597 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0023592:	66 31 c0             	xor    ax,ax
c0023595:	89 d3                	mov    ebx,edx
c0023597:	09 c3                	or     ebx,eax
c0023599:	ba f8 0c 00 00       	mov    edx,0xcf8
c002359e:	89 c8                	mov    eax,ecx
c00235a0:	ef                   	out    dx,eax
c00235a1:	ba fc 0c 00 00       	mov    edx,0xcfc
c00235a6:	89 d8                	mov    eax,ebx
c00235a8:	ef                   	out    dx,eax
c00235a9:	5b                   	pop    ebx
c00235aa:	c3                   	ret    
c00235ab:	90                   	nop

c00235ac <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c00235ac:	55                   	push   ebp
c00235ad:	57                   	push   edi
c00235ae:	56                   	push   esi
c00235af:	53                   	push   ebx
c00235b0:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00235b6:	80 3d ec 35 03 c0 00 	cmp    BYTE PTR ds:0xc00335ec,0x0
c00235bd:	75 79                	jne    c0023638 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x8c>
c00235bf:	83 ec 0c             	sub    esp,0xc
c00235c2:	68 14 01 00 00       	push   0x114
c00235c7:	e8 dc c2 fe ff       	call   c000f8a8 <malloc>
c00235cc:	83 c4 0c             	add    esp,0xc
c00235cf:	89 c3                	mov    ebx,eax
c00235d1:	ff 35 f0 27 03 c0    	push   DWORD PTR ds:0xc00327f0
c00235d7:	68 44 d8 02 c0       	push   0xc002d844
c00235dc:	50                   	push   eax
c00235dd:	e8 d0 fd fe ff       	call   c00133b2 <File::File(char const*, Process*)>
c00235e2:	5a                   	pop    edx
c00235e3:	59                   	pop    ecx
c00235e4:	6a 01                	push   0x1
c00235e6:	53                   	push   ebx
c00235e7:	e8 2a fe fe ff       	call   c0013416 <File::open(FileOpenMode)>
c00235ec:	83 c4 0c             	add    esp,0xc
c00235ef:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c00235f3:	50                   	push   eax
c00235f4:	8d 44 24 28          	lea    eax,[esp+0x28]
c00235f8:	50                   	push   eax
c00235f9:	53                   	push   ebx
c00235fa:	e8 c3 00 ff ff       	call   c00136c2 <File::stat(unsigned long long*, bool*)>
c00235ff:	5e                   	pop    esi
c0023600:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0023604:	e8 9f c2 fe ff       	call   c000f8a8 <malloc>
c0023609:	5f                   	pop    edi
c002360a:	8b 13                	mov    edx,DWORD PTR [ebx]
c002360c:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0023610:	a3 e8 35 03 c0       	mov    ds:0xc00335e8,eax
c0023615:	51                   	push   ecx
c0023616:	50                   	push   eax
c0023617:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c002361b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c002361f:	53                   	push   ebx
c0023620:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0023623:	83 c4 14             	add    esp,0x14
c0023626:	53                   	push   ebx
c0023627:	e8 48 fe fe ff       	call   c0013474 <File::close()>
c002362c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0023630:	83 c4 10             	add    esp,0x10
c0023633:	a3 e4 35 03 c0       	mov    ds:0xc00335e4,eax
c0023638:	a1 e4 35 03 c0       	mov    eax,ds:0xc00335e4
c002363d:	8b 1d e8 35 03 c0    	mov    ebx,DWORD PTR ds:0xc00335e8
c0023643:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023647:	66 8b bc 24 42 01 00 00 	mov    di,WORD PTR [esp+0x142]
c002364f:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0023656:	31 f6                	xor    esi,esi
c0023658:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c002365c:	31 d2                	xor    edx,edx
c002365e:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c0023665:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0023669:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c002366d:	0f 8e 08 01 00 00    	jle    c002377b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c0023673:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c0023676:	d4 40                	aam    0x40
c0023678:	d5 39                	aad    0x39
c002367a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002367e:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c0023682:	d4 40                	aam    0x40
c0023684:	d5 39                	aad    0x39
c0023686:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002368a:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c002368e:	d4 40                	aam    0x40
c0023690:	d5 39                	aad    0x39
c0023692:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0023696:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c002369a:	d4 40                	aam    0x40
c002369c:	d5 39                	aad    0x39
c002369e:	8a 4c 33 06          	mov    cl,BYTE PTR [ebx+esi*1+0x6]
c00236a2:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00236a6:	80 f9 58             	cmp    cl,0x58
c00236a9:	74 47                	je     c00236f2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x146>
c00236ab:	88 c8                	mov    al,cl
c00236ad:	d4 40                	aam    0x40
c00236af:	d5 39                	aad    0x39
c00236b1:	83 e8 30             	sub    eax,0x30
c00236b4:	0f b6 e8             	movzx  ebp,al
c00236b7:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c00236bb:	c1 e5 04             	shl    ebp,0x4
c00236be:	d4 40                	aam    0x40
c00236c0:	d5 39                	aad    0x39
c00236c2:	8d 50 d0             	lea    edx,[eax-0x30]
c00236c5:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c00236c9:	0f b6 d2             	movzx  edx,dl
c00236cc:	09 ea                	or     edx,ebp
c00236ce:	c1 e2 04             	shl    edx,0x4
c00236d1:	d4 40                	aam    0x40
c00236d3:	d5 39                	aad    0x39
c00236d5:	83 e8 30             	sub    eax,0x30
c00236d8:	0f b6 e8             	movzx  ebp,al
c00236db:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c00236df:	09 ea                	or     edx,ebp
c00236e1:	c1 e2 04             	shl    edx,0x4
c00236e4:	89 d5                	mov    ebp,edx
c00236e6:	d4 40                	aam    0x40
c00236e8:	d5 39                	aad    0x39
c00236ea:	8d 50 d0             	lea    edx,[eax-0x30]
c00236ed:	0f b6 d2             	movzx  edx,dl
c00236f0:	09 ea                	or     edx,ebp
c00236f2:	83 c6 0b             	add    esi,0xb
c00236f5:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c00236f9:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c00236fc:	3c 0a                	cmp    al,0xa
c00236fe:	74 0b                	je     c002370b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x15f>
c0023700:	45                   	inc    ebp
c0023701:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c0023705:	75 15                	jne    c002371c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x170>
c0023707:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c002370b:	3c 0a                	cmp    al,0xa
c002370d:	0f 94 c0             	sete   al
c0023710:	0f b6 c0             	movzx  eax,al
c0023713:	01 c6                	add    esi,eax
c0023715:	80 f9 58             	cmp    cl,0x58
c0023718:	75 0c                	jne    c0023726 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x17a>
c002371a:	eb 13                	jmp    c002372f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x183>
c002371c:	46                   	inc    esi
c002371d:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0023720:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0023724:	eb d3                	jmp    c00236f9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x14d>
c0023726:	66 39 d7             	cmp    di,dx
c0023729:	0f 85 3a ff ff ff    	jne    c0023669 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xbd>
c002372f:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0023733:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0023737:	c1 e1 04             	shl    ecx,0x4
c002373a:	83 e8 30             	sub    eax,0x30
c002373d:	09 c8                	or     eax,ecx
c002373f:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0023743:	0f 85 20 ff ff ff    	jne    c0023669 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xbd>
c0023749:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c002374d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0023751:	c1 e1 04             	shl    ecx,0x4
c0023754:	83 e8 30             	sub    eax,0x30
c0023757:	09 c8                	or     eax,ecx
c0023759:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c002375d:	0f 85 06 ff ff ff    	jne    c0023669 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xbd>
c0023763:	50                   	push   eax
c0023764:	50                   	push   eax
c0023765:	8d 44 24 28          	lea    eax,[esp+0x28]
c0023769:	50                   	push   eax
c002376a:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0023771:	e8 b2 d0 fd ff       	call   c0000828 <strcpy>
c0023776:	83 c4 10             	add    esp,0x10
c0023779:	eb 15                	jmp    c0023790 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e4>
c002377b:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0023782:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c002378d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0023790:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0023797:	81 c4 2c 01 00 00    	add    esp,0x12c
c002379d:	5b                   	pop    ebx
c002379e:	5e                   	pop    esi
c002379f:	5f                   	pop    edi
c00237a0:	5d                   	pop    ebp
c00237a1:	c3                   	ret    

c00237a2 <PCI::checkBus(unsigned char)>:
c00237a2:	56                   	push   esi
c00237a3:	53                   	push   ebx
c00237a4:	31 db                	xor    ebx,ebx
c00237a6:	51                   	push   ecx
c00237a7:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c00237ac:	52                   	push   edx
c00237ad:	53                   	push   ebx
c00237ae:	43                   	inc    ebx
c00237af:	56                   	push   esi
c00237b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00237b4:	e8 41 03 00 00       	call   c0023afa <PCI::checkDevice(unsigned char, unsigned char)>
c00237b9:	83 c4 10             	add    esp,0x10
c00237bc:	83 fb 20             	cmp    ebx,0x20
c00237bf:	75 eb                	jne    c00237ac <PCI::checkBus(unsigned char)+0xa>
c00237c1:	58                   	pop    eax
c00237c2:	5b                   	pop    ebx
c00237c3:	5e                   	pop    esi
c00237c4:	c3                   	ret    
c00237c5:	90                   	nop

c00237c6 <PCI::foundDevice(PCIDeviceInfo)>:
c00237c6:	55                   	push   ebp
c00237c7:	57                   	push   edi
c00237c8:	56                   	push   esi
c00237c9:	53                   	push   ebx
c00237ca:	83 ec 1c             	sub    esp,0x1c
c00237cd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00237d1:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c00237d7:	0f 84 68 01 00 00    	je     c0023945 <PCI::foundDevice(PCIDeviceInfo)+0x17f>
c00237dd:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00237e1:	66 81 f9 06 04       	cmp    cx,0x406
c00237e6:	75 2c                	jne    c0023814 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c00237e8:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c00237ed:	50                   	push   eax
c00237ee:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c00237f3:	50                   	push   eax
c00237f4:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c00237f9:	50                   	push   eax
c00237fa:	56                   	push   esi
c00237fb:	e8 bc fc ff ff       	call   c00234bc <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0023800:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0023804:	0f b6 c0             	movzx  eax,al
c0023807:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c002380b:	83 c4 2c             	add    esp,0x2c
c002380e:	5b                   	pop    ebx
c002380f:	5e                   	pop    esi
c0023810:	5f                   	pop    edi
c0023811:	5d                   	pop    ebp
c0023812:	eb 8e                	jmp    c00237a2 <PCI::checkBus(unsigned char)>
c0023814:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0023818:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c002381e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0023822:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0023826:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c002382a:	88 d3                	mov    bl,dl
c002382c:	85 c0                	test   eax,eax
c002382e:	74 33                	je     c0023863 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0023830:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0023833:	85 d2                	test   edx,edx
c0023835:	74 28                	je     c002385f <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0023837:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c002383d:	31 ef                	xor    edi,ebp
c002383f:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0023845:	75 18                	jne    c002385f <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0023847:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002384b:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0023851:	75 0c                	jne    c002385f <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0023853:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0023859:	0f 84 e6 00 00 00    	je     c0023945 <PCI::foundDevice(PCIDeviceInfo)+0x17f>
c002385f:	8b 00                	mov    eax,DWORD PTR [eax]
c0023861:	eb c9                	jmp    c002382c <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0023863:	66 81 f9 01 06       	cmp    cx,0x601
c0023868:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c002386c:	75 19                	jne    c0023887 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c002386e:	83 ec 0c             	sub    esp,0xc
c0023871:	68 64 01 00 00       	push   0x164
c0023876:	e8 2d c0 fe ff       	call   c000f8a8 <malloc>
c002387b:	89 c5                	mov    ebp,eax
c002387d:	89 04 24             	mov    DWORD PTR [esp],eax
c0023880:	e8 ab 0f 00 00       	call   c0024830 <SATABus::SATABus()>
c0023885:	eb 1e                	jmp    c00238a5 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0023887:	66 81 f9 01 01       	cmp    cx,0x101
c002388c:	75 60                	jne    c00238ee <PCI::foundDevice(PCIDeviceInfo)+0x128>
c002388e:	83 ec 0c             	sub    esp,0xc
c0023891:	68 70 02 00 00       	push   0x270
c0023896:	e8 0d c0 fe ff       	call   c000f8a8 <malloc>
c002389b:	89 c5                	mov    ebp,eax
c002389d:	89 04 24             	mov    DWORD PTR [esp],eax
c00238a0:	e8 19 03 00 00       	call   c0023bbe <IDE::IDE()>
c00238a5:	58                   	pop    eax
c00238a6:	5a                   	pop    edx
c00238a7:	55                   	push   ebp
c00238a8:	56                   	push   esi
c00238a9:	e8 c6 09 ff ff       	call   c0014274 <Device::addChild(Device*)>
c00238ae:	83 ec 1c             	sub    esp,0x1c
c00238b1:	b9 09 00 00 00       	mov    ecx,0x9
c00238b6:	fc                   	cld    
c00238b7:	89 e7                	mov    edi,esp
c00238b9:	89 de                	mov    esi,ebx
c00238bb:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00238bd:	55                   	push   ebp
c00238be:	e8 cf 08 ff ff       	call   c0014192 <Device::preOpenPCI(PCIDeviceInfo)>
c00238c3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00238c6:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c00238ca:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c00238d2:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c00238da:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c00238e2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00238e5:	83 c4 4c             	add    esp,0x4c
c00238e8:	5b                   	pop    ebx
c00238e9:	5e                   	pop    esi
c00238ea:	5f                   	pop    edi
c00238eb:	5d                   	pop    ebp
c00238ec:	ff e0                	jmp    eax
c00238ee:	50                   	push   eax
c00238ef:	0f b6 44 24 39       	movzx  eax,BYTE PTR [esp+0x39]
c00238f4:	50                   	push   eax
c00238f5:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c00238fa:	50                   	push   eax
c00238fb:	68 5d d8 02 c0       	push   0xc002d85d
c0023900:	e8 4e f5 fe ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0023905:	c7 04 24 58 01 00 00 	mov    DWORD PTR [esp],0x158
c002390c:	e8 97 bf fe ff       	call   c000f8a8 <malloc>
c0023911:	5a                   	pop    edx
c0023912:	89 c5                	mov    ebp,eax
c0023914:	59                   	pop    ecx
c0023915:	68 79 d8 02 c0       	push   0xc002d879
c002391a:	50                   	push   eax
c002391b:	e8 4a 0c ff ff       	call   c001456a <DriverlessDevice::DriverlessDevice(char const*)>
c0023920:	5f                   	pop    edi
c0023921:	58                   	pop    eax
c0023922:	55                   	push   ebp
c0023923:	56                   	push   esi
c0023924:	e8 4b 09 ff ff       	call   c0014274 <Device::addChild(Device*)>
c0023929:	b9 09 00 00 00       	mov    ecx,0x9
c002392e:	fc                   	cld    
c002392f:	89 df                	mov    edi,ebx
c0023931:	89 de                	mov    esi,ebx
c0023933:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023935:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0023939:	83 c4 2c             	add    esp,0x2c
c002393c:	5b                   	pop    ebx
c002393d:	5e                   	pop    esi
c002393e:	5f                   	pop    edi
c002393f:	5d                   	pop    ebp
c0023940:	e9 4d 08 ff ff       	jmp    c0014192 <Device::preOpenPCI(PCIDeviceInfo)>
c0023945:	83 c4 1c             	add    esp,0x1c
c0023948:	5b                   	pop    ebx
c0023949:	5e                   	pop    esi
c002394a:	5f                   	pop    edi
c002394b:	5d                   	pop    ebp
c002394c:	c3                   	ret    
c002394d:	90                   	nop

c002394e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c002394e:	55                   	push   ebp
c002394f:	57                   	push   edi
c0023950:	56                   	push   esi
c0023951:	53                   	push   ebx
c0023952:	83 ec 5c             	sub    esp,0x5c
c0023955:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0023959:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002395d:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0023961:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0023966:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002396a:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c002396e:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0023973:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0023977:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c002397c:	6a 0c                	push   0xc
c002397e:	55                   	push   ebp
c002397f:	53                   	push   ebx
c0023980:	57                   	push   edi
c0023981:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0023988:	e8 f5 f9 ff ff       	call   c0023382 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002398d:	55                   	push   ebp
c002398e:	53                   	push   ebx
c002398f:	57                   	push   edi
c0023990:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0023997:	e8 74 fa ff ff       	call   c0023410 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c002399c:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c00239a1:	83 c4 24             	add    esp,0x24
c00239a4:	55                   	push   ebp
c00239a5:	53                   	push   ebx
c00239a6:	57                   	push   edi
c00239a7:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c00239ab:	e8 ea fa ff ff       	call   c002349a <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c00239b0:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c00239b4:	6a 3c                	push   0x3c
c00239b6:	55                   	push   ebp
c00239b7:	53                   	push   ebx
c00239b8:	57                   	push   edi
c00239b9:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c00239c0:	e8 bd f9 ff ff       	call   c0023382 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00239c5:	0f b6 c4             	movzx  eax,ah
c00239c8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00239cc:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c00239d0:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c00239d4:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c00239d9:	83 c4 24             	add    esp,0x24
c00239dc:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00239e2:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c00239e9:	74 6c                	je     c0023a57 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c00239eb:	31 f6                	xor    esi,esi
c00239ed:	8b 15 88 f2 02 c0    	mov    edx,DWORD PTR ds:0xc002f288
c00239f3:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c00239f9:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c00239ff:	7e 56                	jle    c0023a57 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0023a01:	8d 14 f2             	lea    edx,[edx+esi*8]
c0023a04:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0023a0b:	39 cb                	cmp    ebx,ecx
c0023a0d:	75 45                	jne    c0023a54 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0023a0f:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0023a16:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0023a1a:	75 38                	jne    c0023a54 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0023a1c:	83 ec 0c             	sub    esp,0xc
c0023a1f:	68 93 d8 02 c0       	push   0xc002d893
c0023a24:	e8 2a f4 fe ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0023a29:	8b 15 88 f2 02 c0    	mov    edx,DWORD PTR ds:0xc002f288
c0023a2f:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0023a35:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0023a3d:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0023a41:	52                   	push   edx
c0023a42:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0023a46:	53                   	push   ebx
c0023a47:	68 b8 d8 02 c0       	push   0xc002d8b8
c0023a4c:	e8 02 f4 fe ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0023a51:	83 c4 20             	add    esp,0x20
c0023a54:	46                   	inc    esi
c0023a55:	eb 96                	jmp    c00239ed <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0023a57:	31 d2                	xor    edx,edx
c0023a59:	83 ec 0c             	sub    esp,0xc
c0023a5c:	55                   	push   ebp
c0023a5d:	53                   	push   ebx
c0023a5e:	57                   	push   edi
c0023a5f:	52                   	push   edx
c0023a60:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0023a64:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0023a6b:	e8 70 fa ff ff       	call   c00234e0 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023a70:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0023a74:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0023a78:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0023a7c:	42                   	inc    edx
c0023a7d:	83 c4 20             	add    esp,0x20
c0023a80:	83 fa 06             	cmp    edx,0x6
c0023a83:	75 d4                	jne    c0023a59 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0023a85:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0023a89:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0023a8d:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0023a91:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0023a95:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0023a99:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0023a9d:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0023aa2:	86 e0                	xchg   al,ah
c0023aa4:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0023aa9:	55                   	push   ebp
c0023aaa:	53                   	push   ebx
c0023aab:	57                   	push   edi
c0023aac:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0023ab0:	e8 9f f9 ff ff       	call   c0023454 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0023ab5:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0023ab9:	55                   	push   ebp
c0023aba:	53                   	push   ebx
c0023abb:	57                   	push   edi
c0023abc:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0023ac3:	e8 02 f9 ff ff       	call   c00233ca <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023ac8:	83 ec 0c             	sub    esp,0xc
c0023acb:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0023ad0:	b9 09 00 00 00       	mov    ecx,0x9
c0023ad5:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0023ad9:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0023add:	fc                   	cld    
c0023ade:	89 e7                	mov    edi,esp
c0023ae0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023ae2:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0023ae9:	e8 d8 fc ff ff       	call   c00237c6 <PCI::foundDevice(PCIDeviceInfo)>
c0023aee:	81 c4 8c 00 00 00    	add    esp,0x8c
c0023af4:	5b                   	pop    ebx
c0023af5:	5e                   	pop    esi
c0023af6:	5f                   	pop    edi
c0023af7:	5d                   	pop    ebp
c0023af8:	c3                   	ret    
c0023af9:	90                   	nop

c0023afa <PCI::checkDevice(unsigned char, unsigned char)>:
c0023afa:	55                   	push   ebp
c0023afb:	57                   	push   edi
c0023afc:	56                   	push   esi
c0023afd:	53                   	push   ebx
c0023afe:	83 ec 0c             	sub    esp,0xc
c0023b01:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0023b05:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0023b0a:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0023b0f:	6a 00                	push   0x0
c0023b11:	56                   	push   esi
c0023b12:	57                   	push   edi
c0023b13:	55                   	push   ebp
c0023b14:	e8 b1 f8 ff ff       	call   c00233ca <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023b19:	6a 00                	push   0x0
c0023b1b:	56                   	push   esi
c0023b1c:	57                   	push   edi
c0023b1d:	55                   	push   ebp
c0023b1e:	e8 2b fe ff ff       	call   c002394e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0023b23:	83 c4 20             	add    esp,0x20
c0023b26:	6a 00                	push   0x0
c0023b28:	56                   	push   esi
c0023b29:	57                   	push   edi
c0023b2a:	55                   	push   ebp
c0023b2b:	e8 bc f8 ff ff       	call   c00233ec <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0023b30:	83 c4 10             	add    esp,0x10
c0023b33:	84 c0                	test   al,al
c0023b35:	79 27                	jns    c0023b5e <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0023b37:	bb 01 00 00 00       	mov    ebx,0x1
c0023b3c:	53                   	push   ebx
c0023b3d:	56                   	push   esi
c0023b3e:	57                   	push   edi
c0023b3f:	55                   	push   ebp
c0023b40:	e8 85 f8 ff ff       	call   c00233ca <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023b45:	83 c4 10             	add    esp,0x10
c0023b48:	66 40                	inc    ax
c0023b4a:	74 0c                	je     c0023b58 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0023b4c:	53                   	push   ebx
c0023b4d:	56                   	push   esi
c0023b4e:	57                   	push   edi
c0023b4f:	55                   	push   ebp
c0023b50:	e8 f9 fd ff ff       	call   c002394e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0023b55:	83 c4 10             	add    esp,0x10
c0023b58:	43                   	inc    ebx
c0023b59:	83 fb 08             	cmp    ebx,0x8
c0023b5c:	75 de                	jne    c0023b3c <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0023b5e:	83 c4 0c             	add    esp,0xc
c0023b61:	5b                   	pop    ebx
c0023b62:	5e                   	pop    esi
c0023b63:	5f                   	pop    edi
c0023b64:	5d                   	pop    ebp
c0023b65:	c3                   	ret    

c0023b66 <PCI::detect()>:
c0023b66:	56                   	push   esi
c0023b67:	53                   	push   ebx
c0023b68:	53                   	push   ebx
c0023b69:	31 db                	xor    ebx,ebx
c0023b6b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023b6f:	6a 00                	push   0x0
c0023b71:	6a 00                	push   0x0
c0023b73:	6a 00                	push   0x0
c0023b75:	56                   	push   esi
c0023b76:	e8 71 f8 ff ff       	call   c00233ec <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0023b7b:	83 c4 10             	add    esp,0x10
c0023b7e:	a8 80                	test   al,0x80
c0023b80:	75 21                	jne    c0023ba3 <PCI::detect()+0x3d>
c0023b82:	51                   	push   ecx
c0023b83:	51                   	push   ecx
c0023b84:	6a 00                	push   0x0
c0023b86:	56                   	push   esi
c0023b87:	e8 16 fc ff ff       	call   c00237a2 <PCI::checkBus(unsigned char)>
c0023b8c:	83 c4 10             	add    esp,0x10
c0023b8f:	eb 24                	jmp    c0023bb5 <PCI::detect()+0x4f>
c0023b91:	52                   	push   edx
c0023b92:	52                   	push   edx
c0023b93:	53                   	push   ebx
c0023b94:	43                   	inc    ebx
c0023b95:	56                   	push   esi
c0023b96:	e8 07 fc ff ff       	call   c00237a2 <PCI::checkBus(unsigned char)>
c0023b9b:	83 c4 10             	add    esp,0x10
c0023b9e:	83 fb 08             	cmp    ebx,0x8
c0023ba1:	74 12                	je     c0023bb5 <PCI::detect()+0x4f>
c0023ba3:	53                   	push   ebx
c0023ba4:	6a 00                	push   0x0
c0023ba6:	6a 00                	push   0x0
c0023ba8:	56                   	push   esi
c0023ba9:	e8 1c f8 ff ff       	call   c00233ca <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023bae:	83 c4 10             	add    esp,0x10
c0023bb1:	66 40                	inc    ax
c0023bb3:	74 dc                	je     c0023b91 <PCI::detect()+0x2b>
c0023bb5:	58                   	pop    eax
c0023bb6:	5b                   	pop    ebx
c0023bb7:	5e                   	pop    esi
c0023bb8:	c3                   	ret    
c0023bb9:	90                   	nop

c0023bba <IDE::close(int, int, void*)>:
c0023bba:	83 c8 ff             	or     eax,0xffffffff
c0023bbd:	c3                   	ret    

c0023bbe <IDE::IDE()>:
c0023bbe:	83 ec 0c             	sub    esp,0xc
c0023bc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023bc5:	83 ec 08             	sub    esp,0x8
c0023bc8:	68 00 d9 02 c0       	push   0xc002d900
c0023bcd:	50                   	push   eax
c0023bce:	e8 3b 0a ff ff       	call   c001460e <HardDiskController::HardDiskController(char const*)>
c0023bd3:	83 c4 10             	add    esp,0x10
c0023bd6:	ba 40 db 02 c0       	mov    edx,0xc002db40
c0023bdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023bdf:	89 10                	mov    DWORD PTR [eax],edx
c0023be1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023be5:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0023bec:	90                   	nop
c0023bed:	83 c4 0c             	add    esp,0xc
c0023bf0:	c3                   	ret    
c0023bf1:	90                   	nop

c0023bf2 <IDE::prepareInterrupt(unsigned char)>:
c0023bf2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0023bf7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023bfb:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0023c03:	c3                   	ret    

c0023c04 <selectDrive(unsigned char, unsigned char)>:
c0023c04:	c3                   	ret    
c0023c05:	90                   	nop

c0023c06 <IDE::getBase(unsigned char)>:
c0023c06:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0023c0b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023c0f:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0023c17:	c3                   	ret    

c0023c18 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0023c18:	55                   	push   ebp
c0023c19:	57                   	push   edi
c0023c1a:	56                   	push   esi
c0023c1b:	53                   	push   ebx
c0023c1c:	83 ec 1c             	sub    esp,0x1c
c0023c1f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0023c23:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023c27:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0023c2a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0023c2e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023c32:	80 f9 03             	cmp    cl,0x3
c0023c35:	77 51                	ja     c0023c88 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0023c37:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023c3b:	0f b6 f2             	movzx  esi,dl
c0023c3e:	0f b6 db             	movzx  ebx,bl
c0023c41:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023c44:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0023c48:	83 ca 80             	or     edx,0xffffff80
c0023c4b:	0f b6 d2             	movzx  edx,dl
c0023c4e:	52                   	push   edx
c0023c4f:	6a 0c                	push   0xc
c0023c51:	56                   	push   esi
c0023c52:	57                   	push   edi
c0023c53:	e8 c0 ff ff ff       	call   c0023c18 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023c58:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0023c5d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023c61:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0023c65:	ee                   	out    dx,al
c0023c66:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0023c6b:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0023c6f:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0023c73:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023c77:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023c7f:	83 c4 2c             	add    esp,0x2c
c0023c82:	5b                   	pop    ebx
c0023c83:	5e                   	pop    esi
c0023c84:	5f                   	pop    edi
c0023c85:	5d                   	pop    ebp
c0023c86:	eb 90                	jmp    c0023c18 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023c88:	80 fb 07             	cmp    bl,0x7
c0023c8b:	77 12                	ja     c0023c9f <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0023c8d:	0f b6 d2             	movzx  edx,dl
c0023c90:	0f b6 db             	movzx  ebx,bl
c0023c93:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0023c9b:	89 da                	mov    edx,ebx
c0023c9d:	eb 2f                	jmp    c0023cce <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023c9f:	80 fb 0d             	cmp    bl,0xd
c0023ca2:	77 13                	ja     c0023cb7 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0023ca4:	0f b6 d2             	movzx  edx,dl
c0023ca7:	0f b6 db             	movzx  ebx,bl
c0023caa:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0023cb1:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0023cb5:	eb 17                	jmp    c0023cce <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023cb7:	80 fb 15             	cmp    bl,0x15
c0023cba:	77 13                	ja     c0023ccf <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0023cbc:	0f b6 d2             	movzx  edx,dl
c0023cbf:	0f b6 db             	movzx  ebx,bl
c0023cc2:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0023cca:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0023cce:	ee                   	out    dx,al
c0023ccf:	83 c4 1c             	add    esp,0x1c
c0023cd2:	5b                   	pop    ebx
c0023cd3:	5e                   	pop    esi
c0023cd4:	5f                   	pop    edi
c0023cd5:	5d                   	pop    ebp
c0023cd6:	c3                   	ret    
c0023cd7:	90                   	nop

c0023cd8 <IDE::read(unsigned char, unsigned char)>:
c0023cd8:	55                   	push   ebp
c0023cd9:	57                   	push   edi
c0023cda:	56                   	push   esi
c0023cdb:	53                   	push   ebx
c0023cdc:	83 ec 1c             	sub    esp,0x1c
c0023cdf:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0023ce3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023ce7:	8d 43 f8             	lea    eax,[ebx-0x8]
c0023cea:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0023cee:	3c 03                	cmp    al,0x3
c0023cf0:	77 43                	ja     c0023d35 <IDE::read(unsigned char, unsigned char)+0x5d>
c0023cf2:	0f b6 f2             	movzx  esi,dl
c0023cf5:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023cf8:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0023cfc:	83 c8 80             	or     eax,0xffffff80
c0023cff:	0f b6 c0             	movzx  eax,al
c0023d02:	50                   	push   eax
c0023d03:	6a 0c                	push   0xc
c0023d05:	56                   	push   esi
c0023d06:	57                   	push   edi
c0023d07:	e8 0c ff ff ff       	call   c0023c18 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023d0c:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0023d11:	0f b6 c3             	movzx  eax,bl
c0023d14:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0023d18:	ec                   	in     al,dx
c0023d19:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023d1d:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0023d22:	52                   	push   edx
c0023d23:	6a 0c                	push   0xc
c0023d25:	56                   	push   esi
c0023d26:	57                   	push   edi
c0023d27:	e8 ec fe ff ff       	call   c0023c18 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023d2c:	83 c4 20             	add    esp,0x20
c0023d2f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0023d33:	eb 49                	jmp    c0023d7e <IDE::read(unsigned char, unsigned char)+0xa6>
c0023d35:	80 fb 07             	cmp    bl,0x7
c0023d38:	77 12                	ja     c0023d4c <IDE::read(unsigned char, unsigned char)+0x74>
c0023d3a:	0f b6 d2             	movzx  edx,dl
c0023d3d:	0f b6 c3             	movzx  eax,bl
c0023d40:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0023d48:	89 c2                	mov    edx,eax
c0023d4a:	eb 31                	jmp    c0023d7d <IDE::read(unsigned char, unsigned char)+0xa5>
c0023d4c:	80 fb 0d             	cmp    bl,0xd
c0023d4f:	77 13                	ja     c0023d64 <IDE::read(unsigned char, unsigned char)+0x8c>
c0023d51:	0f b6 d2             	movzx  edx,dl
c0023d54:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0023d5b:	0f b6 d3             	movzx  edx,bl
c0023d5e:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0023d62:	eb 19                	jmp    c0023d7d <IDE::read(unsigned char, unsigned char)+0xa5>
c0023d64:	31 c0                	xor    eax,eax
c0023d66:	80 fb 15             	cmp    bl,0x15
c0023d69:	77 13                	ja     c0023d7e <IDE::read(unsigned char, unsigned char)+0xa6>
c0023d6b:	0f b6 d2             	movzx  edx,dl
c0023d6e:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0023d76:	0f b6 d3             	movzx  edx,bl
c0023d79:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0023d7d:	ec                   	in     al,dx
c0023d7e:	83 c4 1c             	add    esp,0x1c
c0023d81:	5b                   	pop    ebx
c0023d82:	5e                   	pop    esi
c0023d83:	5f                   	pop    edi
c0023d84:	5d                   	pop    ebp
c0023d85:	c3                   	ret    

c0023d86 <IDE::waitInterrupt(unsigned char)>:
c0023d86:	55                   	push   ebp
c0023d87:	57                   	push   edi
c0023d88:	56                   	push   esi
c0023d89:	53                   	push   ebx
c0023d8a:	31 db                	xor    ebx,ebx
c0023d8c:	83 ec 0c             	sub    esp,0xc
c0023d8f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0023d93:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0023d98:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0023da0:	89 e8                	mov    eax,ebp
c0023da2:	84 c0                	test   al,al
c0023da4:	75 34                	jne    c0023dda <IDE::waitInterrupt(unsigned char)+0x54>
c0023da6:	52                   	push   edx
c0023da7:	6a 0c                	push   0xc
c0023da9:	56                   	push   esi
c0023daa:	57                   	push   edi
c0023dab:	e8 28 ff ff ff       	call   c0023cd8 <IDE::read(unsigned char, unsigned char)>
c0023db0:	83 c4 10             	add    esp,0x10
c0023db3:	a8 01                	test   al,0x1
c0023db5:	75 2b                	jne    c0023de2 <IDE::waitInterrupt(unsigned char)+0x5c>
c0023db7:	f6 c3 04             	test   bl,0x4
c0023dba:	75 16                	jne    c0023dd2 <IDE::waitInterrupt(unsigned char)+0x4c>
c0023dbc:	83 fb 32             	cmp    ebx,0x32
c0023dbf:	7e 11                	jle    c0023dd2 <IDE::waitInterrupt(unsigned char)+0x4c>
c0023dc1:	50                   	push   eax
c0023dc2:	50                   	push   eax
c0023dc3:	6a 00                	push   0x0
c0023dc5:	68 80 96 98 00       	push   0x989680
c0023dca:	e8 d4 ab ff ff       	call   c001e9a3 <nanoSleep(unsigned long long)>
c0023dcf:	83 c4 10             	add    esp,0x10
c0023dd2:	83 fb 3c             	cmp    ebx,0x3c
c0023dd5:	74 0b                	je     c0023de2 <IDE::waitInterrupt(unsigned char)+0x5c>
c0023dd7:	43                   	inc    ebx
c0023dd8:	eb be                	jmp    c0023d98 <IDE::waitInterrupt(unsigned char)+0x12>
c0023dda:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0023de2:	83 c4 0c             	add    esp,0xc
c0023de5:	89 e8                	mov    eax,ebp
c0023de7:	5b                   	pop    ebx
c0023de8:	5e                   	pop    esi
c0023de9:	5f                   	pop    edi
c0023dea:	5d                   	pop    ebp
c0023deb:	c3                   	ret    

c0023dec <ideChannel0IRQHandler(regs*, void*)>:
c0023dec:	83 ec 10             	sub    esp,0x10
c0023def:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023df3:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0023dfa:	6a 07                	push   0x7
c0023dfc:	6a 00                	push   0x0
c0023dfe:	50                   	push   eax
c0023dff:	e8 d4 fe ff ff       	call   c0023cd8 <IDE::read(unsigned char, unsigned char)>
c0023e04:	83 c4 1c             	add    esp,0x1c
c0023e07:	c3                   	ret    

c0023e08 <ideChannel1IRQHandler(regs*, void*)>:
c0023e08:	83 ec 10             	sub    esp,0x10
c0023e0b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023e0f:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0023e16:	6a 07                	push   0x7
c0023e18:	6a 01                	push   0x1
c0023e1a:	50                   	push   eax
c0023e1b:	e8 b8 fe ff ff       	call   c0023cd8 <IDE::read(unsigned char, unsigned char)>
c0023e20:	83 c4 1c             	add    esp,0x1c
c0023e23:	c3                   	ret    

c0023e24 <IDE::enableIRQs(unsigned char, bool)>:
c0023e24:	57                   	push   edi
c0023e25:	56                   	push   esi
c0023e26:	be 04 00 00 00       	mov    esi,0x4
c0023e2b:	53                   	push   ebx
c0023e2c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0023e31:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023e35:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0023e3a:	0f 94 c0             	sete   al
c0023e3d:	d1 e0                	shl    eax,1
c0023e3f:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0023e46:	0f b6 c0             	movzx  eax,al
c0023e49:	50                   	push   eax
c0023e4a:	6a 0c                	push   0xc
c0023e4c:	57                   	push   edi
c0023e4d:	53                   	push   ebx
c0023e4e:	e8 c5 fd ff ff       	call   c0023c18 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e53:	83 c4 10             	add    esp,0x10
c0023e56:	50                   	push   eax
c0023e57:	6a 0c                	push   0xc
c0023e59:	57                   	push   edi
c0023e5a:	53                   	push   ebx
c0023e5b:	e8 78 fe ff ff       	call   c0023cd8 <IDE::read(unsigned char, unsigned char)>
c0023e60:	83 c4 10             	add    esp,0x10
c0023e63:	4e                   	dec    esi
c0023e64:	75 f0                	jne    c0023e56 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0023e66:	5b                   	pop    ebx
c0023e67:	5e                   	pop    esi
c0023e68:	5f                   	pop    edi
c0023e69:	c3                   	ret    

c0023e6a <IDE::open(int, int, void*)>:
c0023e6a:	55                   	push   ebp
c0023e6b:	57                   	push   edi
c0023e6c:	56                   	push   esi
c0023e6d:	53                   	push   ebx
c0023e6e:	83 ec 1c             	sub    esp,0x1c
c0023e71:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0023e75:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0023e7e:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0023e87:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0023e8e:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0023e95:	0f 85 b0 02 00 00    	jne    c002414b <IDE::open(int, int, void*)+0x2e1>
c0023e9b:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0023ea1:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0023ea5:	83 e0 7f             	and    eax,0x7f
c0023ea8:	3c 05                	cmp    al,0x5
c0023eaa:	74 04                	je     c0023eb0 <IDE::open(int, int, void*)+0x46>
c0023eac:	3c 0f                	cmp    al,0xf
c0023eae:	75 32                	jne    c0023ee2 <IDE::open(int, int, void*)+0x78>
c0023eb0:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0023eb6:	83 e0 fc             	and    eax,0xfffffffc
c0023eb9:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023ec0:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0023ec6:	83 e0 fc             	and    eax,0xfffffffc
c0023ec9:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0023ed0:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0023ed6:	83 e0 fc             	and    eax,0xfffffffc
c0023ed9:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023ee0:	eb 14                	jmp    c0023ef6 <IDE::open(int, int, void*)+0x8c>
c0023ee2:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023eec:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023ef6:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0023efd:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0023f04:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023f08:	89 c6                	mov    esi,eax
c0023f0a:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023f0f:	c1 e6 10             	shl    esi,0x10
c0023f12:	89 e8                	mov    eax,ebp
c0023f14:	89 fa                	mov    edx,edi
c0023f16:	c1 e0 0b             	shl    eax,0xb
c0023f19:	09 f0                	or     eax,esi
c0023f1b:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0023f22:	c1 e6 08             	shl    esi,0x8
c0023f25:	09 c6                	or     esi,eax
c0023f27:	89 f0                	mov    eax,esi
c0023f29:	0d 08 00 00 80       	or     eax,0x80000008
c0023f2e:	ef                   	out    dx,eax
c0023f2f:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0023f34:	89 ca                	mov    edx,ecx
c0023f36:	ed                   	in     eax,dx
c0023f37:	c1 e8 10             	shr    eax,0x10
c0023f3a:	3d ff ff 00 00       	cmp    eax,0xffff
c0023f3f:	0f 84 f5 00 00 00    	je     c002403a <IDE::open(int, int, void*)+0x1d0>
c0023f45:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0023f4b:	89 fa                	mov    edx,edi
c0023f4d:	89 f0                	mov    eax,esi
c0023f4f:	ef                   	out    dx,eax
c0023f50:	b0 fe                	mov    al,0xfe
c0023f52:	89 ca                	mov    edx,ecx
c0023f54:	ee                   	out    dx,al
c0023f55:	89 f0                	mov    eax,esi
c0023f57:	89 fa                	mov    edx,edi
c0023f59:	ef                   	out    dx,eax
c0023f5a:	89 ca                	mov    edx,ecx
c0023f5c:	ed                   	in     eax,dx
c0023f5d:	3c fe                	cmp    al,0xfe
c0023f5f:	0f 85 a9 00 00 00    	jne    c002400e <IDE::open(int, int, void*)+0x1a4>
c0023f65:	8b 15 88 f2 02 c0    	mov    edx,DWORD PTR ds:0xc002f288
c0023f6b:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0023f72:	74 33                	je     c0023fa7 <IDE::open(int, int, void*)+0x13d>
c0023f74:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0023f7a:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0023f7e:	40                   	inc    eax
c0023f7f:	83 ec 0c             	sub    esp,0xc
c0023f82:	0f b6 c0             	movzx  eax,al
c0023f85:	50                   	push   eax
c0023f86:	55                   	push   ebp
c0023f87:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023f8b:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0023f91:	51                   	push   ecx
c0023f92:	e8 b5 43 ff ff       	call   c001834c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0023f97:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0023f9c:	83 c4 1c             	add    esp,0x1c
c0023f9f:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023fa5:	eb 0a                	jmp    c0023fb1 <IDE::open(int, int, void*)+0x147>
c0023fa7:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0023fb1:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0023fb8:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0023fbf:	c1 e1 10             	shl    ecx,0x10
c0023fc2:	c1 e0 08             	shl    eax,0x8
c0023fc5:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023fca:	09 c1                	or     ecx,eax
c0023fcc:	89 fa                	mov    edx,edi
c0023fce:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0023fd5:	c1 e0 0b             	shl    eax,0xb
c0023fd8:	09 c1                	or     ecx,eax
c0023fda:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0023fe0:	89 c8                	mov    eax,ecx
c0023fe2:	ef                   	out    dx,eax
c0023fe3:	be fc 0c 00 00       	mov    esi,0xcfc
c0023fe8:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0023fee:	89 f2                	mov    edx,esi
c0023ff0:	ee                   	out    dx,al
c0023ff1:	89 c8                	mov    eax,ecx
c0023ff3:	89 fa                	mov    edx,edi
c0023ff5:	ef                   	out    dx,eax
c0023ff6:	89 f2                	mov    edx,esi
c0023ff8:	ed                   	in     eax,dx
c0023ff9:	0f b6 c0             	movzx  eax,al
c0023ffc:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0024002:	74 46                	je     c002404a <IDE::open(int, int, void*)+0x1e0>
c0024004:	83 ec 0c             	sub    esp,0xc
c0024007:	68 18 d9 02 c0       	push   0xc002d918
c002400c:	eb 34                	jmp    c0024042 <IDE::open(int, int, void*)+0x1d8>
c002400e:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0024017:	75 17                	jne    c0024030 <IDE::open(int, int, void*)+0x1c6>
c0024019:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c002401e:	74 07                	je     c0024027 <IDE::open(int, int, void*)+0x1bd>
c0024020:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0024025:	75 09                	jne    c0024030 <IDE::open(int, int, void*)+0x1c6>
c0024027:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002402e:	eb 1a                	jmp    c002404a <IDE::open(int, int, void*)+0x1e0>
c0024030:	83 ec 0c             	sub    esp,0xc
c0024033:	68 20 d9 02 c0       	push   0xc002d920
c0024038:	eb 08                	jmp    c0024042 <IDE::open(int, int, void*)+0x1d8>
c002403a:	83 ec 0c             	sub    esp,0xc
c002403d:	68 51 d9 02 c0       	push   0xc002d951
c0024042:	e8 a6 68 ff ff       	call   c001a8ed <Krnl::panic(char const*)>
c0024047:	83 c4 10             	add    esp,0x10
c002404a:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0024051:	79 1a                	jns    c002406d <IDE::open(int, int, void*)+0x203>
c0024053:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0024059:	83 e0 fc             	and    eax,0xfffffffc
c002405c:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0024063:	83 c0 08             	add    eax,0x8
c0024066:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c002406d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0024073:	89 c2                	mov    edx,eax
c0024075:	83 e2 0f             	and    edx,0xf
c0024078:	66 83 fa 08          	cmp    dx,0x8
c002407c:	75 0a                	jne    c0024088 <IDE::open(int, int, void*)+0x21e>
c002407e:	83 e8 02             	sub    eax,0x2
c0024081:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0024088:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c002408e:	89 c2                	mov    edx,eax
c0024090:	83 e2 0f             	and    edx,0xf
c0024093:	66 83 fa 08          	cmp    dx,0x8
c0024097:	75 0a                	jne    c00240a3 <IDE::open(int, int, void*)+0x239>
c0024099:	83 e8 02             	sub    eax,0x2
c002409c:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00240a3:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00240aa:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c00240b1:	89 d0                	mov    eax,edx
c00240b3:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00240b6:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00240ba:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c00240be:	8d 4a 01             	lea    ecx,[edx+0x1]
c00240c1:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00240c6:	0f b6 c9             	movzx  ecx,cl
c00240c9:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c00240d0:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00240d3:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00240d7:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c00240db:	8d 50 02             	lea    edx,[eax+0x2]
c00240de:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00240e3:	0f b6 d2             	movzx  edx,dl
c00240e6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00240ec:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00240ef:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00240f3:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c00240f7:	8d 48 03             	lea    ecx,[eax+0x3]
c00240fa:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00240ff:	0f b6 c9             	movzx  ecx,cl
c0024102:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0024108:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002410b:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002410f:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0024113:	8d 50 04             	lea    edx,[eax+0x4]
c0024116:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c002411c:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0024121:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0024128:	66 85 f6             	test   si,si
c002412b:	74 3e                	je     c002416b <IDE::open(int, int, void*)+0x301>
c002412d:	0f b6 d2             	movzx  edx,dl
c0024130:	83 c0 05             	add    eax,0x5
c0024133:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0024136:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002413a:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c002413e:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0024144:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0024149:	eb 20                	jmp    c002416b <IDE::open(int, int, void*)+0x301>
c002414b:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0024155:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c002415f:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0024166:	e9 02 ff ff ff       	jmp    c002406d <IDE::open(int, int, void*)+0x203>
c002416b:	52                   	push   edx
c002416c:	52                   	push   edx
c002416d:	6a 00                	push   0x0
c002416f:	53                   	push   ebx
c0024170:	e8 7d fa ff ff       	call   c0023bf2 <IDE::prepareInterrupt(unsigned char)>
c0024175:	59                   	pop    ecx
c0024176:	5e                   	pop    esi
c0024177:	6a 01                	push   0x1
c0024179:	53                   	push   ebx
c002417a:	e8 73 fa ff ff       	call   c0023bf2 <IDE::prepareInterrupt(unsigned char)>
c002417f:	83 c4 0c             	add    esp,0xc
c0024182:	6a 00                	push   0x0
c0024184:	6a 00                	push   0x0
c0024186:	53                   	push   ebx
c0024187:	e8 98 fc ff ff       	call   c0023e24 <IDE::enableIRQs(unsigned char, bool)>
c002418c:	83 c4 0c             	add    esp,0xc
c002418f:	6a 00                	push   0x0
c0024191:	6a 01                	push   0x1
c0024193:	53                   	push   ebx
c0024194:	e8 8b fc ff ff       	call   c0023e24 <IDE::enableIRQs(unsigned char, bool)>
c0024199:	83 c4 10             	add    esp,0x10
c002419c:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c00241a3:	74 40                	je     c00241e5 <IDE::open(int, int, void*)+0x37b>
c00241a5:	83 ec 0c             	sub    esp,0xc
c00241a8:	68 7b d9 02 c0       	push   0xc002d97b
c00241ad:	e8 a1 ec fe ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c00241b2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00241b5:	6a 01                	push   0x1
c00241b7:	68 ec 3d 02 c0       	push   0xc0023dec
c00241bc:	6a 0e                	push   0xe
c00241be:	53                   	push   ebx
c00241bf:	e8 34 00 ff ff       	call   c00141f8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00241c4:	83 c4 14             	add    esp,0x14
c00241c7:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00241cd:	53                   	push   ebx
c00241ce:	6a 01                	push   0x1
c00241d0:	68 08 3e 02 c0       	push   0xc0023e08
c00241d5:	6a 0f                	push   0xf
c00241d7:	53                   	push   ebx
c00241d8:	e8 1b 00 ff ff       	call   c00141f8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00241dd:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c00241e3:	eb 4a                	jmp    c002422f <IDE::open(int, int, void*)+0x3c5>
c00241e5:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c00241ef:	50                   	push   eax
c00241f0:	6a 0f                	push   0xf
c00241f2:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00241f8:	68 97 d9 02 c0       	push   0xc002d997
c00241fd:	e8 51 ec fe ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0024202:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024205:	6a 00                	push   0x0
c0024207:	68 ec 3d 02 c0       	push   0xc0023dec
c002420c:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0024212:	53                   	push   ebx
c0024213:	e8 e0 ff fe ff       	call   c00141f8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0024218:	83 c4 14             	add    esp,0x14
c002421b:	53                   	push   ebx
c002421c:	6a 00                	push   0x0
c002421e:	68 08 3e 02 c0       	push   0xc0023e08
c0024223:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0024229:	53                   	push   ebx
c002422a:	e8 c9 ff fe ff       	call   c00141f8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002422f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024231:	83 c4 20             	add    esp,0x20
c0024234:	83 ec 0c             	sub    esp,0xc
c0024237:	53                   	push   ebx
c0024238:	ff 50 18             	call   DWORD PTR [eax+0x18]
c002423b:	83 c4 0c             	add    esp,0xc
c002423e:	6a 07                	push   0x7
c0024240:	6a 00                	push   0x0
c0024242:	53                   	push   ebx
c0024243:	e8 90 fa ff ff       	call   c0023cd8 <IDE::read(unsigned char, unsigned char)>
c0024248:	83 c4 0c             	add    esp,0xc
c002424b:	6a 07                	push   0x7
c002424d:	6a 01                	push   0x1
c002424f:	53                   	push   ebx
c0024250:	e8 83 fa ff ff       	call   c0023cd8 <IDE::read(unsigned char, unsigned char)>
c0024255:	83 c4 0c             	add    esp,0xc
c0024258:	6a 01                	push   0x1
c002425a:	6a 00                	push   0x0
c002425c:	53                   	push   ebx
c002425d:	e8 c2 fb ff ff       	call   c0023e24 <IDE::enableIRQs(unsigned char, bool)>
c0024262:	83 c4 0c             	add    esp,0xc
c0024265:	6a 01                	push   0x1
c0024267:	6a 01                	push   0x1
c0024269:	53                   	push   ebx
c002426a:	e8 b5 fb ff ff       	call   c0023e24 <IDE::enableIRQs(unsigned char, bool)>
c002426f:	83 c4 2c             	add    esp,0x2c
c0024272:	31 c0                	xor    eax,eax
c0024274:	5b                   	pop    ebx
c0024275:	5e                   	pop    esi
c0024276:	5f                   	pop    edi
c0024277:	5d                   	pop    ebp
c0024278:	c3                   	ret    
c0024279:	90                   	nop

c002427a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c002427a:	55                   	push   ebp
c002427b:	57                   	push   edi
c002427c:	56                   	push   esi
c002427d:	53                   	push   ebx
c002427e:	83 ec 1c             	sub    esp,0x1c
c0024281:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0024285:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024289:	8d 50 f8             	lea    edx,[eax-0x8]
c002428c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024290:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0024294:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0024298:	80 fa 03             	cmp    dl,0x3
c002429b:	77 5d                	ja     c00242fa <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c002429d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00242a1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00242a5:	0f b6 db             	movzx  ebx,bl
c00242a8:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c00242ab:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c00242af:	83 ca 80             	or     edx,0xffffff80
c00242b2:	0f b6 d2             	movzx  edx,dl
c00242b5:	52                   	push   edx
c00242b6:	6a 0c                	push   0xc
c00242b8:	53                   	push   ebx
c00242b9:	56                   	push   esi
c00242ba:	e8 59 f9 ff ff       	call   c0023c18 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242bf:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c00242c4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00242c8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00242cc:	0f b6 c0             	movzx  eax,al
c00242cf:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c00242d3:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00242d5:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c00242da:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c00242de:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00242e2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00242e6:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00242ee:	83 c4 2c             	add    esp,0x2c
c00242f1:	5b                   	pop    ebx
c00242f2:	5e                   	pop    esi
c00242f3:	5f                   	pop    edi
c00242f4:	5d                   	pop    ebp
c00242f5:	e9 1e f9 ff ff       	jmp    c0023c18 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242fa:	3c 07                	cmp    al,0x7
c00242fc:	77 10                	ja     c002430e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c00242fe:	0f b6 db             	movzx  ebx,bl
c0024301:	0f b6 d0             	movzx  edx,al
c0024304:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c002430c:	eb 2d                	jmp    c002433b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c002430e:	3c 0d                	cmp    al,0xd
c0024310:	77 13                	ja     c0024325 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0024312:	0f b6 db             	movzx  ebx,bl
c0024315:	0f b6 c0             	movzx  eax,al
c0024318:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c002431f:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0024323:	eb 16                	jmp    c002433b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0024325:	3c 15                	cmp    al,0x15
c0024327:	77 14                	ja     c002433d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0024329:	0f b6 db             	movzx  ebx,bl
c002432c:	0f b6 c0             	movzx  eax,al
c002432f:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0024337:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c002433b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002433d:	83 c4 1c             	add    esp,0x1c
c0024340:	5b                   	pop    ebx
c0024341:	5e                   	pop    esi
c0024342:	5f                   	pop    edi
c0024343:	5d                   	pop    ebp
c0024344:	c3                   	ret    
c0024345:	90                   	nop

c0024346 <IDE::detect()>:
c0024346:	55                   	push   ebp
c0024347:	57                   	push   edi
c0024348:	56                   	push   esi
c0024349:	53                   	push   ebx
c002434a:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0024350:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0024357:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c002435e:	0f 85 be 02 00 00    	jne    c0024622 <IDE::detect()+0x2dc>
c0024364:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c002436b:	31 f6                	xor    esi,esi
c002436d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0024375:	31 ed                	xor    ebp,ebp
c0024377:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002437b:	c1 e0 06             	shl    eax,0x6
c002437e:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0024386:	89 e8                	mov    eax,ebp
c0024388:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002438c:	c1 e0 04             	shl    eax,0x4
c002438f:	83 c8 a0             	or     eax,0xffffffa0
c0024392:	0f b6 c0             	movzx  eax,al
c0024395:	50                   	push   eax
c0024396:	6a 06                	push   0x6
c0024398:	56                   	push   esi
c0024399:	53                   	push   ebx
c002439a:	e8 79 f8 ff ff       	call   c0023c18 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002439f:	83 c4 0c             	add    esp,0xc
c00243a2:	6a 0c                	push   0xc
c00243a4:	56                   	push   esi
c00243a5:	53                   	push   ebx
c00243a6:	e8 2d f9 ff ff       	call   c0023cd8 <IDE::read(unsigned char, unsigned char)>
c00243ab:	83 c4 0c             	add    esp,0xc
c00243ae:	6a 0c                	push   0xc
c00243b0:	56                   	push   esi
c00243b1:	53                   	push   ebx
c00243b2:	e8 21 f9 ff ff       	call   c0023cd8 <IDE::read(unsigned char, unsigned char)>
c00243b7:	83 c4 0c             	add    esp,0xc
c00243ba:	6a 0c                	push   0xc
c00243bc:	56                   	push   esi
c00243bd:	53                   	push   ebx
c00243be:	e8 15 f9 ff ff       	call   c0023cd8 <IDE::read(unsigned char, unsigned char)>
c00243c3:	83 c4 0c             	add    esp,0xc
c00243c6:	6a 0c                	push   0xc
c00243c8:	56                   	push   esi
c00243c9:	53                   	push   ebx
c00243ca:	e8 09 f9 ff ff       	call   c0023cd8 <IDE::read(unsigned char, unsigned char)>
c00243cf:	68 ec 00 00 00       	push   0xec
c00243d4:	6a 07                	push   0x7
c00243d6:	56                   	push   esi
c00243d7:	53                   	push   ebx
c00243d8:	e8 3b f8 ff ff       	call   c0023c18 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00243dd:	83 c4 1c             	add    esp,0x1c
c00243e0:	6a 0c                	push   0xc
c00243e2:	56                   	push   esi
c00243e3:	53                   	push   ebx
c00243e4:	e8 ef f8 ff ff       	call   c0023cd8 <IDE::read(unsigned char, unsigned char)>
c00243e9:	83 c4 0c             	add    esp,0xc
c00243ec:	6a 0c                	push   0xc
c00243ee:	56                   	push   esi
c00243ef:	53                   	push   ebx
c00243f0:	e8 e3 f8 ff ff       	call   c0023cd8 <IDE::read(unsigned char, unsigned char)>
c00243f5:	83 c4 0c             	add    esp,0xc
c00243f8:	6a 0c                	push   0xc
c00243fa:	56                   	push   esi
c00243fb:	53                   	push   ebx
c00243fc:	e8 d7 f8 ff ff       	call   c0023cd8 <IDE::read(unsigned char, unsigned char)>
c0024401:	83 c4 0c             	add    esp,0xc
c0024404:	6a 0c                	push   0xc
c0024406:	56                   	push   esi
c0024407:	53                   	push   ebx
c0024408:	e8 cb f8 ff ff       	call   c0023cd8 <IDE::read(unsigned char, unsigned char)>
c002440d:	83 c4 0c             	add    esp,0xc
c0024410:	6a 0c                	push   0xc
c0024412:	56                   	push   esi
c0024413:	53                   	push   ebx
c0024414:	e8 bf f8 ff ff       	call   c0023cd8 <IDE::read(unsigned char, unsigned char)>
c0024419:	83 c4 10             	add    esp,0x10
c002441c:	84 c0                	test   al,al
c002441e:	0f 84 8b 01 00 00    	je     c00245af <IDE::detect()+0x269>
c0024424:	31 ff                	xor    edi,edi
c0024426:	50                   	push   eax
c0024427:	6a 0c                	push   0xc
c0024429:	56                   	push   esi
c002442a:	53                   	push   ebx
c002442b:	e8 a8 f8 ff ff       	call   c0023cd8 <IDE::read(unsigned char, unsigned char)>
c0024430:	83 c4 10             	add    esp,0x10
c0024433:	a8 01                	test   al,0x1
c0024435:	0f 85 8e 01 00 00    	jne    c00245c9 <IDE::detect()+0x283>
c002443b:	84 c0                	test   al,al
c002443d:	78 04                	js     c0024443 <IDE::detect()+0xfd>
c002443f:	a8 08                	test   al,0x8
c0024441:	75 27                	jne    c002446a <IDE::detect()+0x124>
c0024443:	47                   	inc    edi
c0024444:	81 ff 17 01 00 00    	cmp    edi,0x117
c002444a:	7e da                	jle    c0024426 <IDE::detect()+0xe0>
c002444c:	50                   	push   eax
c002444d:	50                   	push   eax
c002444e:	6a 00                	push   0x0
c0024450:	68 40 4b 4c 00       	push   0x4c4b40
c0024455:	e8 49 a5 ff ff       	call   c001e9a3 <nanoSleep(unsigned long long)>
c002445a:	83 c4 10             	add    esp,0x10
c002445d:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0024463:	75 c1                	jne    c0024426 <IDE::detect()+0xe0>
c0024465:	e9 5f 01 00 00       	jmp    c00245c9 <IDE::detect()+0x283>
c002446a:	31 c9                	xor    ecx,ecx
c002446c:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0024470:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0024474:	83 ec 0c             	sub    esp,0xc
c0024477:	68 80 00 00 00       	push   0x80
c002447c:	57                   	push   edi
c002447d:	6a 00                	push   0x0
c002447f:	56                   	push   esi
c0024480:	53                   	push   ebx
c0024481:	e8 f4 fd ff ff       	call   c002427a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0024486:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c002448b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002448f:	89 d1                	mov    ecx,edx
c0024491:	c1 e0 06             	shl    eax,0x6
c0024494:	01 d8                	add    eax,ebx
c0024496:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c002449d:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c00244a4:	89 f2                	mov    edx,esi
c00244a6:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c00244ac:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c00244b0:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c00244b6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00244ba:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c00244c1:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c00244c9:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c00244d0:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c00244d8:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c00244de:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c00244e5:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c00244eb:	8d 54 24 58          	lea    edx,[esp+0x58]
c00244ef:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00244f3:	83 c4 20             	add    esp,0x20
c00244f6:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c00244f9:	83 c0 02             	add    eax,0x2
c00244fc:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0024502:	83 c7 02             	add    edi,0x2
c0024505:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0024508:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c002450e:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0024512:	75 e2                	jne    c00244f6 <IDE::detect()+0x1b0>
c0024514:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0024518:	c1 e0 06             	shl    eax,0x6
c002451b:	01 d8                	add    eax,ebx
c002451d:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0024523:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c002452a:	66 c1 ea 09          	shr    dx,0x9
c002452e:	83 e2 01             	and    edx,0x1
c0024531:	84 c9                	test   cl,cl
c0024533:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0024539:	75 2f                	jne    c002456a <IDE::detect()+0x224>
c002453b:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c0024541:	85 c0                	test   eax,eax
c0024543:	74 66                	je     c00245ab <IDE::detect()+0x265>
c0024545:	50                   	push   eax
c0024546:	55                   	push   ebp
c0024547:	56                   	push   esi
c0024548:	68 b3 d9 02 c0       	push   0xc002d9b3
c002454d:	e8 01 e9 fe ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0024552:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0024559:	e8 4a b3 fe ff       	call   c000f8a8 <malloc>
c002455e:	89 c7                	mov    edi,eax
c0024560:	89 04 24             	mov    DWORD PTR [esp],eax
c0024563:	e8 78 06 00 00       	call   c0024be0 <ATA::ATA()>
c0024568:	eb 28                	jmp    c0024592 <IDE::detect()+0x24c>
c002456a:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c0024570:	55                   	push   ebp
c0024571:	56                   	push   esi
c0024572:	68 e2 d9 02 c0       	push   0xc002d9e2
c0024577:	e8 d7 e8 fe ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c002457c:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0024583:	e8 20 b3 fe ff       	call   c000f8a8 <malloc>
c0024588:	89 c7                	mov    edi,eax
c002458a:	89 04 24             	mov    DWORD PTR [esp],eax
c002458d:	e8 8e 0c 00 00       	call   c0025220 <ATAPI::ATAPI()>
c0024592:	5a                   	pop    edx
c0024593:	59                   	pop    ecx
c0024594:	57                   	push   edi
c0024595:	53                   	push   ebx
c0024596:	e8 d9 fc fe ff       	call   c0014274 <Device::addChild(Device*)>
c002459b:	8b 07                	mov    eax,DWORD PTR [edi]
c002459d:	53                   	push   ebx
c002459e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00245a2:	6a 00                	push   0x0
c00245a4:	57                   	push   edi
c00245a5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00245a8:	83 c4 20             	add    esp,0x20
c00245ab:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00245af:	4d                   	dec    ebp
c00245b0:	74 0a                	je     c00245bc <IDE::detect()+0x276>
c00245b2:	bd 01 00 00 00       	mov    ebp,0x1
c00245b7:	e9 bb fd ff ff       	jmp    c0024377 <IDE::detect()+0x31>
c00245bc:	4e                   	dec    esi
c00245bd:	74 63                	je     c0024622 <IDE::detect()+0x2dc>
c00245bf:	be 01 00 00 00       	mov    esi,0x1
c00245c4:	e9 ac fd ff ff       	jmp    c0024375 <IDE::detect()+0x2f>
c00245c9:	50                   	push   eax
c00245ca:	6a 04                	push   0x4
c00245cc:	56                   	push   esi
c00245cd:	53                   	push   ebx
c00245ce:	e8 05 f7 ff ff       	call   c0023cd8 <IDE::read(unsigned char, unsigned char)>
c00245d3:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00245d7:	83 c4 0c             	add    esp,0xc
c00245da:	6a 05                	push   0x5
c00245dc:	56                   	push   esi
c00245dd:	53                   	push   ebx
c00245de:	e8 f5 f6 ff ff       	call   c0023cd8 <IDE::read(unsigned char, unsigned char)>
c00245e3:	83 c4 10             	add    esp,0x10
c00245e6:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00245ea:	80 fa 14             	cmp    dl,0x14
c00245ed:	75 04                	jne    c00245f3 <IDE::detect()+0x2ad>
c00245ef:	3c eb                	cmp    al,0xeb
c00245f1:	eb 07                	jmp    c00245fa <IDE::detect()+0x2b4>
c00245f3:	3c 96                	cmp    al,0x96
c00245f5:	75 b8                	jne    c00245af <IDE::detect()+0x269>
c00245f7:	80 fa 69             	cmp    dl,0x69
c00245fa:	75 b3                	jne    c00245af <IDE::detect()+0x269>
c00245fc:	68 a1 00 00 00       	push   0xa1
c0024601:	6a 07                	push   0x7
c0024603:	56                   	push   esi
c0024604:	53                   	push   ebx
c0024605:	e8 0e f6 ff ff       	call   c0023c18 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002460a:	5f                   	pop    edi
c002460b:	58                   	pop    eax
c002460c:	6a 00                	push   0x0
c002460e:	68 40 42 0f 00       	push   0xf4240
c0024613:	e8 8b a3 ff ff       	call   c001e9a3 <nanoSleep(unsigned long long)>
c0024618:	83 c4 10             	add    esp,0x10
c002461b:	b1 01                	mov    cl,0x1
c002461d:	e9 4a fe ff ff       	jmp    c002446c <IDE::detect()+0x126>
c0024622:	81 c4 1c 02 00 00    	add    esp,0x21c
c0024628:	5b                   	pop    ebx
c0024629:	5e                   	pop    esi
c002462a:	5f                   	pop    edi
c002462b:	5d                   	pop    ebp
c002462c:	c3                   	ret    
c002462d:	90                   	nop

c002462e <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c002462e:	55                   	push   ebp
c002462f:	57                   	push   edi
c0024630:	56                   	push   esi
c0024631:	53                   	push   ebx
c0024632:	83 ec 1c             	sub    esp,0x1c
c0024635:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0024639:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002463d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0024641:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0024645:	88 c3                	mov    bl,al
c0024647:	84 c0                	test   al,al
c0024649:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002464d:	0f 84 67 01 00 00    	je     c00247ba <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c0024653:	83 ec 0c             	sub    esp,0xc
c0024656:	68 13 da 02 c0       	push   0xc002da13
c002465b:	e8 f3 e7 fe ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0024660:	83 c4 10             	add    esp,0x10
c0024663:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024667:	3c 01                	cmp    al,0x1
c0024669:	75 17                	jne    c0024682 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c002466b:	83 ec 0c             	sub    esp,0xc
c002466e:	b3 13                	mov    bl,0x13
c0024670:	68 1f da 02 c0       	push   0xc002da1f
c0024675:	e8 d9 e7 fe ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c002467a:	83 c4 10             	add    esp,0x10
c002467d:	e9 25 01 00 00       	jmp    c00247a7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0024682:	3c 02                	cmp    al,0x2
c0024684:	0f 85 ef 00 00 00    	jne    c0024779 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c002468a:	d1 e6                	shl    esi,1
c002468c:	09 ee                	or     esi,ebp
c002468e:	52                   	push   edx
c002468f:	89 f0                	mov    eax,esi
c0024691:	6a 01                	push   0x1
c0024693:	0f b6 f0             	movzx  esi,al
c0024696:	c1 e6 06             	shl    esi,0x6
c0024699:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c00246a1:	50                   	push   eax
c00246a2:	57                   	push   edi
c00246a3:	e8 30 f6 ff ff       	call   c0023cd8 <IDE::read(unsigned char, unsigned char)>
c00246a8:	83 c4 10             	add    esp,0x10
c00246ab:	89 c6                	mov    esi,eax
c00246ad:	a8 01                	test   al,0x1
c00246af:	74 12                	je     c00246c3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c00246b1:	83 ec 0c             	sub    esp,0xc
c00246b4:	b3 07                	mov    bl,0x7
c00246b6:	68 34 da 02 c0       	push   0xc002da34
c00246bb:	e8 93 e7 fe ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c00246c0:	83 c4 10             	add    esp,0x10
c00246c3:	f7 c6 02 00 00 00    	test   esi,0x2
c00246c9:	74 12                	je     c00246dd <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c00246cb:	83 ec 0c             	sub    esp,0xc
c00246ce:	b3 03                	mov    bl,0x3
c00246d0:	68 52 da 02 c0       	push   0xc002da52
c00246d5:	e8 79 e7 fe ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c00246da:	83 c4 10             	add    esp,0x10
c00246dd:	f7 c6 04 00 00 00    	test   esi,0x4
c00246e3:	74 12                	je     c00246f7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c00246e5:	83 ec 0c             	sub    esp,0xc
c00246e8:	b3 14                	mov    bl,0x14
c00246ea:	68 72 da 02 c0       	push   0xc002da72
c00246ef:	e8 5f e7 fe ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c00246f4:	83 c4 10             	add    esp,0x10
c00246f7:	f7 c6 08 00 00 00    	test   esi,0x8
c00246fd:	74 12                	je     c0024711 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c00246ff:	83 ec 0c             	sub    esp,0xc
c0024702:	b3 03                	mov    bl,0x3
c0024704:	68 52 da 02 c0       	push   0xc002da52
c0024709:	e8 45 e7 fe ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c002470e:	83 c4 10             	add    esp,0x10
c0024711:	f7 c6 10 00 00 00    	test   esi,0x10
c0024717:	74 12                	je     c002472b <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0024719:	83 ec 0c             	sub    esp,0xc
c002471c:	b3 15                	mov    bl,0x15
c002471e:	68 8a da 02 c0       	push   0xc002da8a
c0024723:	e8 2b e7 fe ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0024728:	83 c4 10             	add    esp,0x10
c002472b:	f7 c6 20 00 00 00    	test   esi,0x20
c0024731:	74 12                	je     c0024745 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0024733:	83 ec 0c             	sub    esp,0xc
c0024736:	b3 03                	mov    bl,0x3
c0024738:	68 52 da 02 c0       	push   0xc002da52
c002473d:	e8 11 e7 fe ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0024742:	83 c4 10             	add    esp,0x10
c0024745:	f7 c6 40 00 00 00    	test   esi,0x40
c002474b:	74 12                	je     c002475f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c002474d:	83 ec 0c             	sub    esp,0xc
c0024750:	b3 16                	mov    bl,0x16
c0024752:	68 a4 da 02 c0       	push   0xc002daa4
c0024757:	e8 f7 e6 fe ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c002475c:	83 c4 10             	add    esp,0x10
c002475f:	89 f0                	mov    eax,esi
c0024761:	84 c0                	test   al,al
c0024763:	79 42                	jns    c00247a7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0024765:	83 ec 0c             	sub    esp,0xc
c0024768:	b3 0d                	mov    bl,0xd
c002476a:	68 c5 da 02 c0       	push   0xc002dac5
c002476f:	e8 df e6 fe ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0024774:	83 c4 10             	add    esp,0x10
c0024777:	eb 2e                	jmp    c00247a7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0024779:	3c 03                	cmp    al,0x3
c002477b:	75 14                	jne    c0024791 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c002477d:	83 ec 0c             	sub    esp,0xc
c0024780:	b3 17                	mov    bl,0x17
c0024782:	68 d9 da 02 c0       	push   0xc002dad9
c0024787:	e8 c7 e6 fe ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c002478c:	83 c4 10             	add    esp,0x10
c002478f:	eb 16                	jmp    c00247a7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0024791:	3c 04                	cmp    al,0x4
c0024793:	75 12                	jne    c00247a7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0024795:	83 ec 0c             	sub    esp,0xc
c0024798:	b3 08                	mov    bl,0x8
c002479a:	68 ef da 02 c0       	push   0xc002daef
c002479f:	e8 af e6 fe ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c00247a4:	83 c4 10             	add    esp,0x10
c00247a7:	50                   	push   eax
c00247a8:	50                   	push   eax
c00247a9:	0f b6 c3             	movzx  eax,bl
c00247ac:	50                   	push   eax
c00247ad:	68 07 db 02 c0       	push   0xc002db07
c00247b2:	e8 9c e6 fe ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c00247b7:	83 c4 10             	add    esp,0x10
c00247ba:	83 c4 1c             	add    esp,0x1c
c00247bd:	88 d8                	mov    al,bl
c00247bf:	5b                   	pop    ebx
c00247c0:	5e                   	pop    esi
c00247c1:	5f                   	pop    edi
c00247c2:	5d                   	pop    ebp
c00247c3:	c3                   	ret    

c00247c4 <IDE::polling(unsigned char, unsigned int)>:
c00247c4:	57                   	push   edi
c00247c5:	56                   	push   esi
c00247c6:	53                   	push   ebx
c00247c7:	bb 04 00 00 00       	mov    ebx,0x4
c00247cc:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00247d0:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c00247d5:	52                   	push   edx
c00247d6:	6a 0c                	push   0xc
c00247d8:	56                   	push   esi
c00247d9:	57                   	push   edi
c00247da:	e8 f9 f4 ff ff       	call   c0023cd8 <IDE::read(unsigned char, unsigned char)>
c00247df:	83 c4 10             	add    esp,0x10
c00247e2:	4b                   	dec    ebx
c00247e3:	75 f0                	jne    c00247d5 <IDE::polling(unsigned char, unsigned int)+0x11>
c00247e5:	bb a0 86 01 00       	mov    ebx,0x186a0
c00247ea:	50                   	push   eax
c00247eb:	6a 0c                	push   0xc
c00247ed:	56                   	push   esi
c00247ee:	57                   	push   edi
c00247ef:	e8 e4 f4 ff ff       	call   c0023cd8 <IDE::read(unsigned char, unsigned char)>
c00247f4:	83 c4 10             	add    esp,0x10
c00247f7:	a8 01                	test   al,0x1
c00247f9:	74 12                	je     c002480d <IDE::polling(unsigned char, unsigned int)+0x49>
c00247fb:	83 ec 0c             	sub    esp,0xc
c00247fe:	68 21 db 02 c0       	push   0xc002db21
c0024803:	e8 4b e6 fe ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0024808:	83 c4 10             	add    esp,0x10
c002480b:	eb 17                	jmp    c0024824 <IDE::polling(unsigned char, unsigned int)+0x60>
c002480d:	a8 20                	test   al,0x20
c002480f:	75 0f                	jne    c0024820 <IDE::polling(unsigned char, unsigned int)+0x5c>
c0024811:	4b                   	dec    ebx
c0024812:	74 10                	je     c0024824 <IDE::polling(unsigned char, unsigned int)+0x60>
c0024814:	84 c0                	test   al,al
c0024816:	78 d2                	js     c00247ea <IDE::polling(unsigned char, unsigned int)+0x26>
c0024818:	a8 08                	test   al,0x8
c002481a:	74 ce                	je     c00247ea <IDE::polling(unsigned char, unsigned int)+0x26>
c002481c:	31 c0                	xor    eax,eax
c002481e:	eb 06                	jmp    c0024826 <IDE::polling(unsigned char, unsigned int)+0x62>
c0024820:	b0 01                	mov    al,0x1
c0024822:	eb 02                	jmp    c0024826 <IDE::polling(unsigned char, unsigned int)+0x62>
c0024824:	b0 02                	mov    al,0x2
c0024826:	5b                   	pop    ebx
c0024827:	5e                   	pop    esi
c0024828:	5f                   	pop    edi
c0024829:	c3                   	ret    

c002482a <SATABus::close(int, int, void*)>:
c002482a:	31 c0                	xor    eax,eax
c002482c:	c3                   	ret    
c002482d:	90                   	nop

c002482e <SATABus::detect()>:
c002482e:	c3                   	ret    
c002482f:	90                   	nop

c0024830 <SATABus::SATABus()>:
c0024830:	83 ec 0c             	sub    esp,0xc
c0024833:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024837:	83 ec 08             	sub    esp,0x8
c002483a:	68 64 db 02 c0       	push   0xc002db64
c002483f:	50                   	push   eax
c0024840:	e8 c9 fd fe ff       	call   c001460e <HardDiskController::HardDiskController(char const*)>
c0024845:	83 c4 10             	add    esp,0x10
c0024848:	ba 20 dc 02 c0       	mov    edx,0xc002dc20
c002484d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024851:	89 10                	mov    DWORD PTR [eax],edx
c0024853:	83 ec 0c             	sub    esp,0xc
c0024856:	6a 50                	push   0x50
c0024858:	e8 9c b7 fe ff       	call   c000fff9 <Phys::allocateContiguousPages(int)>
c002485d:	83 c4 10             	add    esp,0x10
c0024860:	89 c2                	mov    edx,eax
c0024862:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024866:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002486c:	83 ec 0c             	sub    esp,0xc
c002486f:	6a 50                	push   0x50
c0024871:	e8 d7 d1 fe ff       	call   c0011a4d <Virt::allocateKernelVirtualPages(int)>
c0024876:	83 c4 10             	add    esp,0x10
c0024879:	89 c2                	mov    edx,eax
c002487b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002487f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0024885:	a1 10 f4 02 c0       	mov    eax,ds:0xc002f410
c002488a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002488e:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0024894:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0024898:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002489e:	83 ec 0c             	sub    esp,0xc
c00248a1:	6a 03                	push   0x3
c00248a3:	6a 50                	push   0x50
c00248a5:	51                   	push   ecx
c00248a6:	52                   	push   edx
c00248a7:	50                   	push   eax
c00248a8:	e8 cd dc fe ff       	call   c001257a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00248ad:	83 c4 20             	add    esp,0x20
c00248b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248b4:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c00248ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248be:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00248c4:	83 ec 04             	sub    esp,0x4
c00248c7:	52                   	push   edx
c00248c8:	50                   	push   eax
c00248c9:	68 88 db 02 c0       	push   0xc002db88
c00248ce:	e8 80 e5 fe ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c00248d3:	83 c4 10             	add    esp,0x10
c00248d6:	90                   	nop
c00248d7:	83 c4 0c             	add    esp,0xc
c00248da:	c3                   	ret    
c00248db:	90                   	nop

c00248dc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c00248dc:	83 ec 0c             	sub    esp,0xc
c00248df:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00248e3:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00248e6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00248e9:	09 c2                	or     edx,eax
c00248eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248ef:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00248f5:	8b 08                	mov    ecx,DWORD PTR [eax]
c00248f7:	31 c0                	xor    eax,eax
c00248f9:	c1 e9 08             	shr    ecx,0x8
c00248fc:	83 e1 0f             	and    ecx,0xf
c00248ff:	39 c8                	cmp    eax,ecx
c0024901:	74 0a                	je     c002490d <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0024903:	f6 c2 01             	test   dl,0x1
c0024906:	74 18                	je     c0024920 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0024908:	d1 ea                	shr    edx,1
c002490a:	40                   	inc    eax
c002490b:	eb f2                	jmp    c00248ff <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c002490d:	83 ec 0c             	sub    esp,0xc
c0024910:	68 ac db 02 c0       	push   0xc002dbac
c0024915:	e8 d3 5f ff ff       	call   c001a8ed <Krnl::panic(char const*)>
c002491a:	83 c4 10             	add    esp,0x10
c002491d:	83 c8 ff             	or     eax,0xffffffff
c0024920:	83 c4 0c             	add    esp,0xc
c0024923:	c3                   	ret    

c0024924 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0024924:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024928:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c002492b:	89 c2                	mov    edx,eax
c002492d:	c1 ea 08             	shr    edx,0x8
c0024930:	83 e2 0f             	and    edx,0xf
c0024933:	fe ca                	dec    dl
c0024935:	75 31                	jne    c0024968 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0024937:	83 e0 0f             	and    eax,0xf
c002493a:	3c 03                	cmp    al,0x3
c002493c:	75 2a                	jne    c0024968 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c002493e:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0024941:	b8 02 00 00 00       	mov    eax,0x2
c0024946:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c002494c:	74 1c                	je     c002496a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c002494e:	b8 04 00 00 00       	mov    eax,0x4
c0024953:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0024959:	74 0f                	je     c002496a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c002495b:	31 c0                	xor    eax,eax
c002495d:	83 fa 03             	cmp    edx,0x3
c0024960:	0f 94 c0             	sete   al
c0024963:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0024967:	c3                   	ret    
c0024968:	31 c0                	xor    eax,eax
c002496a:	c3                   	ret    
c002496b:	90                   	nop

c002496c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c002496c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024970:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024973:	0f ba e2 0f          	bt     edx,0xf
c0024977:	72 f7                	jb     c0024970 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0024979:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002497c:	83 ca 10             	or     edx,0x10
c002497f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024982:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024985:	83 ca 01             	or     edx,0x1
c0024988:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002498b:	c3                   	ret    

c002498c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c002498c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024990:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024993:	83 e2 fe             	and    edx,0xfffffffe
c0024996:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024999:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002499c:	83 e2 ef             	and    edx,0xffffffef
c002499f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00249a2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00249a5:	0f ba e2 0e          	bt     edx,0xe
c00249a9:	72 f7                	jb     c00249a2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c00249ab:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00249ae:	0f ba e2 0f          	bt     edx,0xf
c00249b2:	72 ee                	jb     c00249a2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c00249b4:	c3                   	ret    
c00249b5:	90                   	nop

c00249b6 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c00249b6:	55                   	push   ebp
c00249b7:	57                   	push   edi
c00249b8:	56                   	push   esi
c00249b9:	53                   	push   ebx
c00249ba:	83 ec 1c             	sub    esp,0x1c
c00249bd:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00249c1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00249c5:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00249c9:	53                   	push   ebx
c00249ca:	89 fd                	mov    ebp,edi
c00249cc:	56                   	push   esi
c00249cd:	c1 e5 0a             	shl    ebp,0xa
c00249d0:	e8 b7 ff ff ff       	call   c002498c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c00249d5:	83 ec 0c             	sub    esp,0xc
c00249d8:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c00249de:	01 e8                	add    eax,ebp
c00249e0:	89 03                	mov    DWORD PTR [ebx],eax
c00249e2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00249e4:	68 00 04 00 00       	push   0x400
c00249e9:	6a 00                	push   0x0
c00249eb:	50                   	push   eax
c00249ec:	e8 7b bd fd ff       	call   c000076c <memset>
c00249f1:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c00249f7:	89 fa                	mov    edx,edi
c00249f9:	01 e8                	add    eax,ebp
c00249fb:	c1 e7 0d             	shl    edi,0xd
c00249fe:	89 03                	mov    DWORD PTR [ebx],eax
c0024a00:	c1 e2 08             	shl    edx,0x8
c0024a03:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0024a0a:	81 c2 00 80 00 00    	add    edx,0x8000
c0024a10:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0024a14:	89 d0                	mov    eax,edx
c0024a16:	83 c4 1c             	add    esp,0x1c
c0024a19:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0024a1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0024a22:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0024a25:	68 00 01 00 00       	push   0x100
c0024a2a:	6a 00                	push   0x0
c0024a2c:	50                   	push   eax
c0024a2d:	e8 3a bd fd ff       	call   c000076c <memset>
c0024a32:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024a36:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0024a3c:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0024a42:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024a46:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0024a49:	83 c4 10             	add    esp,0x10
c0024a4c:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0024a53:	31 ff                	xor    edi,edi
c0024a55:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0024a5b:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0024a61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024a65:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0024a6b:	83 c5 20             	add    ebp,0x20
c0024a6e:	01 f8                	add    eax,edi
c0024a70:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0024a73:	52                   	push   edx
c0024a74:	68 00 01 00 00       	push   0x100
c0024a79:	6a 00                	push   0x0
c0024a7b:	50                   	push   eax
c0024a7c:	e8 eb bc fd ff       	call   c000076c <memset>
c0024a81:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024a85:	83 c4 10             	add    esp,0x10
c0024a88:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0024a8e:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0024a95:	01 f8                	add    eax,edi
c0024a97:	81 c7 00 01 00 00    	add    edi,0x100
c0024a9d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0024aa0:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0024aa6:	75 b3                	jne    c0024a5b <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0024aa8:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0024aac:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0024ab0:	83 c4 1c             	add    esp,0x1c
c0024ab3:	5b                   	pop    ebx
c0024ab4:	5e                   	pop    esi
c0024ab5:	5f                   	pop    edi
c0024ab6:	5d                   	pop    ebp
c0024ab7:	e9 b0 fe ff ff       	jmp    c002496c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0024abc <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0024abc:	55                   	push   ebp
c0024abd:	57                   	push   edi
c0024abe:	56                   	push   esi
c0024abf:	53                   	push   ebx
c0024ac0:	31 db                	xor    ebx,ebx
c0024ac2:	83 ec 0c             	sub    esp,0xc
c0024ac5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024ac9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024acd:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0024ad0:	f7 c7 01 00 00 00    	test   edi,0x1
c0024ad6:	0f 84 aa 00 00 00    	je     c0024b86 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0024adc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024ae0:	89 d8                	mov    eax,ebx
c0024ae2:	c1 e0 07             	shl    eax,0x7
c0024ae5:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0024aec:	55                   	push   ebp
c0024aed:	56                   	push   esi
c0024aee:	e8 31 fe ff ff       	call   c0024924 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0024af3:	5a                   	pop    edx
c0024af4:	83 f8 01             	cmp    eax,0x1
c0024af7:	59                   	pop    ecx
c0024af8:	75 30                	jne    c0024b2a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c0024afa:	50                   	push   eax
c0024afb:	50                   	push   eax
c0024afc:	53                   	push   ebx
c0024afd:	68 d1 db 02 c0       	push   0xc002dbd1
c0024b02:	e8 4c e3 fe ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0024b07:	83 c4 0c             	add    esp,0xc
c0024b0a:	53                   	push   ebx
c0024b0b:	55                   	push   ebp
c0024b0c:	56                   	push   esi
c0024b0d:	e8 a4 fe ff ff       	call   c00249b6 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0024b12:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0024b19:	e8 8a ad fe ff       	call   c000f8a8 <malloc>
c0024b1e:	89 c5                	mov    ebp,eax
c0024b20:	89 04 24             	mov    DWORD PTR [esp],eax
c0024b23:	e8 5c 0d 00 00       	call   c0025884 <SATA::SATA()>
c0024b28:	eb 33                	jmp    c0024b5d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c0024b2a:	83 f8 04             	cmp    eax,0x4
c0024b2d:	75 47                	jne    c0024b76 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c0024b2f:	50                   	push   eax
c0024b30:	50                   	push   eax
c0024b31:	53                   	push   ebx
c0024b32:	68 e8 db 02 c0       	push   0xc002dbe8
c0024b37:	e8 17 e3 fe ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0024b3c:	83 c4 0c             	add    esp,0xc
c0024b3f:	53                   	push   ebx
c0024b40:	55                   	push   ebp
c0024b41:	56                   	push   esi
c0024b42:	e8 6f fe ff ff       	call   c00249b6 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0024b47:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0024b4e:	e8 55 ad fe ff       	call   c000f8a8 <malloc>
c0024b53:	89 c5                	mov    ebp,eax
c0024b55:	89 04 24             	mov    DWORD PTR [esp],eax
c0024b58:	e8 d3 10 00 00       	call   c0025c30 <SATAPI::SATAPI()>
c0024b5d:	5a                   	pop    edx
c0024b5e:	59                   	pop    ecx
c0024b5f:	55                   	push   ebp
c0024b60:	56                   	push   esi
c0024b61:	e8 0e f7 fe ff       	call   c0014274 <Device::addChild(Device*)>
c0024b66:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0024b69:	56                   	push   esi
c0024b6a:	6a 00                	push   0x0
c0024b6c:	53                   	push   ebx
c0024b6d:	55                   	push   ebp
c0024b6e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0024b71:	83 c4 20             	add    esp,0x20
c0024b74:	eb 10                	jmp    c0024b86 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0024b76:	50                   	push   eax
c0024b77:	50                   	push   eax
c0024b78:	53                   	push   ebx
c0024b79:	68 01 dc 02 c0       	push   0xc002dc01
c0024b7e:	e8 d0 e2 fe ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0024b83:	83 c4 10             	add    esp,0x10
c0024b86:	d1 ef                	shr    edi,1
c0024b88:	43                   	inc    ebx
c0024b89:	83 fb 20             	cmp    ebx,0x20
c0024b8c:	0f 85 3e ff ff ff    	jne    c0024ad0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0024b92:	83 c4 0c             	add    esp,0xc
c0024b95:	5b                   	pop    ebx
c0024b96:	5e                   	pop    esi
c0024b97:	5f                   	pop    edi
c0024b98:	5d                   	pop    ebp
c0024b99:	c3                   	ret    

c0024b9a <SATABus::open(int, int, void*)>:
c0024b9a:	83 ec 14             	sub    esp,0x14
c0024b9d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024ba1:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0024ba7:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0024bad:	52                   	push   edx
c0024bae:	50                   	push   eax
c0024baf:	e8 08 ff ff ff       	call   c0024abc <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0024bb4:	31 c0                	xor    eax,eax
c0024bb6:	83 c4 1c             	add    esp,0x1c
c0024bb9:	c3                   	ret    

c0024bba <ATA::close(int, int, void*)>:
c0024bba:	83 ec 0c             	sub    esp,0xc
c0024bbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024bc1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024bc7:	85 c0                	test   eax,eax
c0024bc9:	74 0c                	je     c0024bd7 <ATA::close(int, int, void*)+0x1d>
c0024bcb:	83 ec 0c             	sub    esp,0xc
c0024bce:	8b 10                	mov    edx,DWORD PTR [eax]
c0024bd0:	50                   	push   eax
c0024bd1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024bd4:	83 c4 10             	add    esp,0x10
c0024bd7:	31 c0                	xor    eax,eax
c0024bd9:	83 c4 0c             	add    esp,0xc
c0024bdc:	c3                   	ret    
c0024bdd:	90                   	nop

c0024bde <ATA::powerSaving(PowerSavingLevel)>:
c0024bde:	c3                   	ret    
c0024bdf:	90                   	nop

c0024be0 <ATA::ATA()>:
c0024be0:	83 ec 0c             	sub    esp,0xc
c0024be3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024be7:	83 ec 04             	sub    esp,0x4
c0024bea:	68 00 02 00 00       	push   0x200
c0024bef:	68 e9 dc 02 c0       	push   0xc002dce9
c0024bf4:	50                   	push   eax
c0024bf5:	e8 ac fa fe ff       	call   c00146a6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024bfa:	83 c4 10             	add    esp,0x10
c0024bfd:	ba 6c dc 02 c0       	mov    edx,0xc002dc6c
c0024c02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c06:	89 10                	mov    DWORD PTR [eax],edx
c0024c08:	90                   	nop
c0024c09:	83 c4 0c             	add    esp,0xc
c0024c0c:	c3                   	ret    
c0024c0d:	90                   	nop

c0024c0e <ATA::flush(bool)>:
c0024c0e:	53                   	push   ebx
c0024c0f:	83 ec 08             	sub    esp,0x8
c0024c12:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0024c17:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024c1b:	19 c0                	sbb    eax,eax
c0024c1d:	83 e0 fd             	and    eax,0xfffffffd
c0024c20:	05 ea 00 00 00       	add    eax,0xea
c0024c25:	50                   	push   eax
c0024c26:	6a 07                	push   0x7
c0024c28:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024c2f:	50                   	push   eax
c0024c30:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024c36:	e8 dd ef ff ff       	call   c0023c18 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024c3b:	83 c4 0c             	add    esp,0xc
c0024c3e:	6a 00                	push   0x0
c0024c40:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024c47:	50                   	push   eax
c0024c48:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024c4e:	e8 71 fb ff ff       	call   c00247c4 <IDE::polling(unsigned char, unsigned int)>
c0024c53:	83 c4 18             	add    esp,0x18
c0024c56:	5b                   	pop    ebx
c0024c57:	c3                   	ret    

c0024c58 <ATA::readyForCommand()>:
c0024c58:	56                   	push   esi
c0024c59:	53                   	push   ebx
c0024c5a:	31 db                	xor    ebx,ebx
c0024c5c:	50                   	push   eax
c0024c5d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024c61:	50                   	push   eax
c0024c62:	6a 0c                	push   0xc
c0024c64:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024c6b:	50                   	push   eax
c0024c6c:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024c72:	e8 61 f0 ff ff       	call   c0023cd8 <IDE::read(unsigned char, unsigned char)>
c0024c77:	83 c4 10             	add    esp,0x10
c0024c7a:	a8 88                	test   al,0x88
c0024c7c:	74 23                	je     c0024ca1 <ATA::readyForCommand()+0x49>
c0024c7e:	43                   	inc    ebx
c0024c7f:	83 fb 63             	cmp    ebx,0x63
c0024c82:	7e dd                	jle    c0024c61 <ATA::readyForCommand()+0x9>
c0024c84:	51                   	push   ecx
c0024c85:	51                   	push   ecx
c0024c86:	6a 00                	push   0x0
c0024c88:	68 40 42 0f 00       	push   0xf4240
c0024c8d:	e8 11 9d ff ff       	call   c001e9a3 <nanoSleep(unsigned long long)>
c0024c92:	83 c4 10             	add    esp,0x10
c0024c95:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024c9b:	75 c4                	jne    c0024c61 <ATA::readyForCommand()+0x9>
c0024c9d:	31 c0                	xor    eax,eax
c0024c9f:	eb 02                	jmp    c0024ca3 <ATA::readyForCommand()+0x4b>
c0024ca1:	b0 01                	mov    al,0x1
c0024ca3:	5a                   	pop    edx
c0024ca4:	5b                   	pop    ebx
c0024ca5:	5e                   	pop    esi
c0024ca6:	c3                   	ret    
c0024ca7:	90                   	nop

c0024ca8 <ATA::access(unsigned long long, int, void*, bool)>:
c0024ca8:	55                   	push   ebp
c0024ca9:	57                   	push   edi
c0024caa:	56                   	push   esi
c0024cab:	53                   	push   ebx
c0024cac:	83 ec 2c             	sub    esp,0x2c
c0024caf:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0024cb3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024cb7:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024cbb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024cbf:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0024cc3:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0024cc7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024ccb:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0024cd1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024cd5:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024cdb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024cdf:	c1 e0 06             	shl    eax,0x6
c0024ce2:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0024cea:	74 5d                	je     c0024d49 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0024cec:	89 fa                	mov    edx,edi
c0024cee:	89 f0                	mov    eax,esi
c0024cf0:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0024cf4:	c1 ea 1c             	shr    edx,0x1c
c0024cf7:	89 d1                	mov    ecx,edx
c0024cf9:	09 c1                	or     ecx,eax
c0024cfb:	74 25                	je     c0024d22 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0024cfd:	31 ed                	xor    ebp,ebp
c0024cff:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0024d06:	89 fa                	mov    edx,edi
c0024d08:	89 f0                	mov    eax,esi
c0024d0a:	0f ad d0             	shrd   eax,edx,cl
c0024d0d:	d3 ea                	shr    edx,cl
c0024d0f:	f6 c1 20             	test   cl,0x20
c0024d12:	74 02                	je     c0024d16 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0024d14:	89 d0                	mov    eax,edx
c0024d16:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0024d1a:	45                   	inc    ebp
c0024d1b:	83 fd 06             	cmp    ebp,0x6
c0024d1e:	75 df                	jne    c0024cff <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0024d20:	eb 76                	jmp    c0024d98 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0024d22:	89 f0                	mov    eax,esi
c0024d24:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0024d29:	89 fa                	mov    edx,edi
c0024d2b:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024d32:	0f ac d0 10          	shrd   eax,edx,0x10
c0024d36:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024d3b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0024d3f:	c1 ee 18             	shr    esi,0x18
c0024d42:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0024d47:	eb 56                	jmp    c0024d9f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024d49:	6a 00                	push   0x0
c0024d4b:	6a 3f                	push   0x3f
c0024d4d:	57                   	push   edi
c0024d4e:	56                   	push   esi
c0024d4f:	e8 90 29 00 00       	call   c00276e4 <__umoddi3>
c0024d54:	83 c4 10             	add    esp,0x10
c0024d57:	40                   	inc    eax
c0024d58:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0024d5c:	6a 00                	push   0x0
c0024d5e:	68 f0 03 00 00       	push   0x3f0
c0024d63:	57                   	push   edi
c0024d64:	56                   	push   esi
c0024d65:	e8 7a 28 00 00       	call   c00275e4 <__udivdi3>
c0024d6a:	83 c4 10             	add    esp,0x10
c0024d6d:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0024d72:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024d79:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024d7e:	6a 00                	push   0x0
c0024d80:	6a 3f                	push   0x3f
c0024d82:	57                   	push   edi
c0024d83:	56                   	push   esi
c0024d84:	e8 5b 28 00 00       	call   c00275e4 <__udivdi3>
c0024d89:	83 c4 10             	add    esp,0x10
c0024d8c:	89 c6                	mov    esi,eax
c0024d8e:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0024d93:	83 e6 0f             	and    esi,0xf
c0024d96:	eb 07                	jmp    c0024d9f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024d98:	31 f6                	xor    esi,esi
c0024d9a:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0024d9f:	bf 01 00 00 00       	mov    edi,0x1
c0024da4:	50                   	push   eax
c0024da5:	6a 00                	push   0x0
c0024da7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024dae:	50                   	push   eax
c0024daf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024db3:	e8 6c f0 ff ff       	call   c0023e24 <IDE::enableIRQs(unsigned char, bool)>
c0024db8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024dbb:	e8 98 fe ff ff       	call   c0024c58 <ATA::readyForCommand()>
c0024dc0:	83 c4 10             	add    esp,0x10
c0024dc3:	84 c0                	test   al,al
c0024dc5:	0f 84 5a 02 00 00    	je     c0025025 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024dcb:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0024dd1:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024dd7:	c1 e0 04             	shl    eax,0x4
c0024dda:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0024de1:	09 c6                	or     esi,eax
c0024de3:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0024de8:	75 05                	jne    c0024def <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0024dea:	83 ce a0             	or     esi,0xffffffa0
c0024ded:	eb 03                	jmp    c0024df2 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0024def:	83 ce e0             	or     esi,0xffffffe0
c0024df2:	89 f0                	mov    eax,esi
c0024df4:	0f b6 f0             	movzx  esi,al
c0024df7:	56                   	push   esi
c0024df8:	6a 06                	push   0x6
c0024dfa:	51                   	push   ecx
c0024dfb:	52                   	push   edx
c0024dfc:	e8 17 ee ff ff       	call   c0023c18 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024e01:	83 c4 10             	add    esp,0x10
c0024e04:	6a 00                	push   0x0
c0024e06:	6a 01                	push   0x1
c0024e08:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024e0f:	50                   	push   eax
c0024e10:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024e16:	e8 fd ed ff ff       	call   c0023c18 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024e1b:	83 c4 10             	add    esp,0x10
c0024e1e:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024e23:	75 6e                	jne    c0024e93 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0024e25:	6a 00                	push   0x0
c0024e27:	6a 08                	push   0x8
c0024e29:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024e30:	50                   	push   eax
c0024e31:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024e37:	e8 dc ed ff ff       	call   c0023c18 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024e3c:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0024e41:	50                   	push   eax
c0024e42:	6a 09                	push   0x9
c0024e44:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024e4b:	50                   	push   eax
c0024e4c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024e52:	e8 c1 ed ff ff       	call   c0023c18 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024e57:	83 c4 20             	add    esp,0x20
c0024e5a:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0024e5f:	50                   	push   eax
c0024e60:	6a 0a                	push   0xa
c0024e62:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024e69:	50                   	push   eax
c0024e6a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024e70:	e8 a3 ed ff ff       	call   c0023c18 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024e75:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0024e7a:	50                   	push   eax
c0024e7b:	6a 0b                	push   0xb
c0024e7d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024e84:	50                   	push   eax
c0024e85:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024e8b:	e8 88 ed ff ff       	call   c0023c18 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024e90:	83 c4 20             	add    esp,0x20
c0024e93:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0024e98:	50                   	push   eax
c0024e99:	6a 02                	push   0x2
c0024e9b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024ea2:	50                   	push   eax
c0024ea3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024ea9:	e8 6a ed ff ff       	call   c0023c18 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024eae:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0024eb3:	50                   	push   eax
c0024eb4:	6a 03                	push   0x3
c0024eb6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024ebd:	50                   	push   eax
c0024ebe:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024ec4:	e8 4f ed ff ff       	call   c0023c18 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024ec9:	83 c4 20             	add    esp,0x20
c0024ecc:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0024ed1:	50                   	push   eax
c0024ed2:	6a 04                	push   0x4
c0024ed4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024edb:	50                   	push   eax
c0024edc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024ee2:	e8 31 ed ff ff       	call   c0023c18 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024ee7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0024eec:	50                   	push   eax
c0024eed:	6a 05                	push   0x5
c0024eef:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024ef6:	50                   	push   eax
c0024ef7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024efd:	e8 16 ed ff ff       	call   c0023c18 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024f02:	83 c4 20             	add    esp,0x20
c0024f05:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024f0a:	0f 94 c0             	sete   al
c0024f0d:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024f12:	74 09                	je     c0024f1d <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0024f14:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0024f1b:	eb 07                	jmp    c0024f24 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0024f1d:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0024f24:	0f b6 c0             	movzx  eax,al
c0024f27:	50                   	push   eax
c0024f28:	6a 07                	push   0x7
c0024f2a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024f31:	50                   	push   eax
c0024f32:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024f38:	e8 db ec ff ff       	call   c0023c18 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024f3d:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0024f41:	83 c4 10             	add    esp,0x10
c0024f44:	85 f6                	test   esi,esi
c0024f46:	0f 84 ba 00 00 00    	je     c0025006 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c0024f4c:	50                   	push   eax
c0024f4d:	6a 01                	push   0x1
c0024f4f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024f56:	50                   	push   eax
c0024f57:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024f5d:	e8 62 f8 ff ff       	call   c00247c4 <IDE::polling(unsigned char, unsigned int)>
c0024f62:	83 c4 10             	add    esp,0x10
c0024f65:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0024f6b:	84 c0                	test   al,al
c0024f6d:	74 2c                	je     c0024f9b <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c0024f6f:	0f b6 f8             	movzx  edi,al
c0024f72:	0f b6 d2             	movzx  edx,dl
c0024f75:	57                   	push   edi
c0024f76:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0024f7d:	50                   	push   eax
c0024f7e:	52                   	push   edx
c0024f7f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024f85:	e8 a4 f6 ff ff       	call   c002462e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024f8a:	c7 04 24 44 dc 02 c0 	mov    DWORD PTR [esp],0xc002dc44
c0024f91:	e8 bd de fe ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0024f96:	e9 87 00 00 00       	jmp    c0025022 <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c0024f9b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0024fa0:	74 33                	je     c0024fd5 <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c0024fa2:	31 ed                	xor    ebp,ebp
c0024fa4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024fa8:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0024fac:	50                   	push   eax
c0024fad:	50                   	push   eax
c0024fae:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024fb5:	50                   	push   eax
c0024fb6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024fbc:	e8 45 ec ff ff       	call   c0023c06 <IDE::getBase(unsigned char)>
c0024fc1:	89 c2                	mov    edx,eax
c0024fc3:	89 f8                	mov    eax,edi
c0024fc5:	66 ef                	out    dx,ax
c0024fc7:	45                   	inc    ebp
c0024fc8:	83 c4 10             	add    esp,0x10
c0024fcb:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0024fd1:	75 d1                	jne    c0024fa4 <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c0024fd3:	eb 23                	jmp    c0024ff8 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c0024fd5:	0f b6 d2             	movzx  edx,dl
c0024fd8:	51                   	push   ecx
c0024fd9:	51                   	push   ecx
c0024fda:	52                   	push   edx
c0024fdb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024fe1:	e8 20 ec ff ff       	call   c0023c06 <IDE::getBase(unsigned char)>
c0024fe6:	b9 00 01 00 00       	mov    ecx,0x100
c0024feb:	89 c2                	mov    edx,eax
c0024fed:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0024ff1:	fc                   	cld    
c0024ff2:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0024ff5:	83 c4 10             	add    esp,0x10
c0024ff8:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0025000:	4e                   	dec    esi
c0025001:	e9 3e ff ff ff       	jmp    c0024f44 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0025006:	31 ff                	xor    edi,edi
c0025008:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002500d:	74 16                	je     c0025025 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c002500f:	50                   	push   eax
c0025010:	50                   	push   eax
c0025011:	31 c0                	xor    eax,eax
c0025013:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0025018:	0f 94 c0             	sete   al
c002501b:	50                   	push   eax
c002501c:	53                   	push   ebx
c002501d:	e8 ec fb ff ff       	call   c0024c0e <ATA::flush(bool)>
c0025022:	83 c4 10             	add    esp,0x10
c0025025:	83 c4 2c             	add    esp,0x2c
c0025028:	89 f8                	mov    eax,edi
c002502a:	5b                   	pop    ebx
c002502b:	5e                   	pop    esi
c002502c:	5f                   	pop    edi
c002502d:	5d                   	pop    ebp
c002502e:	c3                   	ret    
c002502f:	90                   	nop

c0025030 <ATA::read(unsigned long long, int, void*)>:
c0025030:	57                   	push   edi
c0025031:	b8 04 00 00 00       	mov    eax,0x4
c0025036:	56                   	push   esi
c0025037:	53                   	push   ebx
c0025038:	83 ec 10             	sub    esp,0x10
c002503b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002503f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0025043:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0025046:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002504a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002504e:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0025054:	77 3b                	ja     c0025091 <ATA::read(unsigned long long, int, void*)+0x61>
c0025056:	b8 06 00 00 00       	mov    eax,0x6
c002505b:	85 d2                	test   edx,edx
c002505d:	74 32                	je     c0025091 <ATA::read(unsigned long long, int, void*)+0x61>
c002505f:	50                   	push   eax
c0025060:	50                   	push   eax
c0025061:	6a 00                	push   0x0
c0025063:	52                   	push   edx
c0025064:	53                   	push   ebx
c0025065:	57                   	push   edi
c0025066:	56                   	push   esi
c0025067:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002506b:	e8 38 fc ff ff       	call   c0024ca8 <ATA::access(unsigned long long, int, void*, bool)>
c0025070:	83 c4 20             	add    esp,0x20
c0025073:	85 c0                	test   eax,eax
c0025075:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025079:	75 11                	jne    c002508c <ATA::read(unsigned long long, int, void*)+0x5c>
c002507b:	01 1d f4 35 03 c0    	add    DWORD PTR ds:0xc00335f4,ebx
c0025081:	e8 d2 b8 fe ff       	call   c0010958 <VgaText::updateDiskUsage()>
c0025086:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002508a:	eb 05                	jmp    c0025091 <ATA::read(unsigned long long, int, void*)+0x61>
c002508c:	b8 01 00 00 00       	mov    eax,0x1
c0025091:	83 c4 10             	add    esp,0x10
c0025094:	5b                   	pop    ebx
c0025095:	5e                   	pop    esi
c0025096:	5f                   	pop    edi
c0025097:	c3                   	ret    

c0025098 <ATA::write(unsigned long long, int, void*)>:
c0025098:	57                   	push   edi
c0025099:	b8 04 00 00 00       	mov    eax,0x4
c002509e:	56                   	push   esi
c002509f:	53                   	push   ebx
c00250a0:	83 ec 10             	sub    esp,0x10
c00250a3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00250a7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00250ab:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00250ae:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00250b2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00250b6:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00250bc:	77 3b                	ja     c00250f9 <ATA::write(unsigned long long, int, void*)+0x61>
c00250be:	b8 06 00 00 00       	mov    eax,0x6
c00250c3:	85 d2                	test   edx,edx
c00250c5:	74 32                	je     c00250f9 <ATA::write(unsigned long long, int, void*)+0x61>
c00250c7:	50                   	push   eax
c00250c8:	50                   	push   eax
c00250c9:	6a 01                	push   0x1
c00250cb:	52                   	push   edx
c00250cc:	53                   	push   ebx
c00250cd:	57                   	push   edi
c00250ce:	56                   	push   esi
c00250cf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00250d3:	e8 d0 fb ff ff       	call   c0024ca8 <ATA::access(unsigned long long, int, void*, bool)>
c00250d8:	83 c4 20             	add    esp,0x20
c00250db:	85 c0                	test   eax,eax
c00250dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00250e1:	75 11                	jne    c00250f4 <ATA::write(unsigned long long, int, void*)+0x5c>
c00250e3:	01 1d f0 35 03 c0    	add    DWORD PTR ds:0xc00335f0,ebx
c00250e9:	e8 6a b8 fe ff       	call   c0010958 <VgaText::updateDiskUsage()>
c00250ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00250f2:	eb 05                	jmp    c00250f9 <ATA::write(unsigned long long, int, void*)+0x61>
c00250f4:	b8 01 00 00 00       	mov    eax,0x1
c00250f9:	83 c4 10             	add    esp,0x10
c00250fc:	5b                   	pop    ebx
c00250fd:	5e                   	pop    esi
c00250fe:	5f                   	pop    edi
c00250ff:	c3                   	ret    

c0025100 <ATA::detectCHS()>:
c0025100:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0025104:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c002510a:	c1 e0 06             	shl    eax,0x6
c002510d:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0025113:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c002511d:	c7 44 24 04 4f dc 02 c0 	mov    DWORD PTR [esp+0x4],0xc002dc4f
c0025125:	e9 c3 57 ff ff       	jmp    c001a8ed <Krnl::panic(char const*)>

c002512a <ATA::open(int, int, void*)>:
c002512a:	53                   	push   ebx
c002512b:	83 ec 08             	sub    esp,0x8
c002512e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025132:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0025136:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002513a:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0025140:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025146:	c1 e0 06             	shl    eax,0x6
c0025149:	01 d0                	add    eax,edx
c002514b:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0025152:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0025158:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c002515f:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0025169:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c002516f:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0025176:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c002517d:	75 0c                	jne    c002518b <ATA::open(int, int, void*)+0x61>
c002517f:	83 ec 0c             	sub    esp,0xc
c0025182:	53                   	push   ebx
c0025183:	e8 78 ff ff ff       	call   c0025100 <ATA::detectCHS()>
c0025188:	83 c4 10             	add    esp,0x10
c002518b:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0025191:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0025197:	c1 e0 06             	shl    eax,0x6
c002519a:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c00251a1:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00251ab:	d1 e8                	shr    eax,1
c00251ad:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c00251b3:	6a 04                	push   0x4
c00251b5:	6a 0c                	push   0xc
c00251b7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00251be:	50                   	push   eax
c00251bf:	52                   	push   edx
c00251c0:	e8 53 ea ff ff       	call   c0023c18 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00251c5:	90                   	nop
c00251c6:	90                   	nop
c00251c7:	6a 00                	push   0x0
c00251c9:	6a 0c                	push   0xc
c00251cb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00251d2:	50                   	push   eax
c00251d3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00251d9:	e8 3a ea ff ff       	call   c0023c18 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00251de:	83 c4 14             	add    esp,0x14
c00251e1:	53                   	push   ebx
c00251e2:	e8 27 f5 fe ff       	call   c001470e <PhysicalDisk::startCache()>
c00251e7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00251ea:	e8 ff 17 ff ff       	call   c00169ee <createPartitionsForDisk(PhysicalDisk*)>
c00251ef:	31 c0                	xor    eax,eax
c00251f1:	83 c4 18             	add    esp,0x18
c00251f4:	5b                   	pop    ebx
c00251f5:	c3                   	ret    

c00251f6 <ATAPI::write(unsigned long long, int, void*)>:
c00251f6:	b8 03 00 00 00       	mov    eax,0x3
c00251fb:	c3                   	ret    

c00251fc <ATAPI::close(int, int, void*)>:
c00251fc:	83 ec 0c             	sub    esp,0xc
c00251ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025203:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025209:	85 c0                	test   eax,eax
c002520b:	74 0c                	je     c0025219 <ATAPI::close(int, int, void*)+0x1d>
c002520d:	83 ec 0c             	sub    esp,0xc
c0025210:	8b 10                	mov    edx,DWORD PTR [eax]
c0025212:	50                   	push   eax
c0025213:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0025216:	83 c4 10             	add    esp,0x10
c0025219:	31 c0                	xor    eax,eax
c002521b:	83 c4 0c             	add    esp,0xc
c002521e:	c3                   	ret    
c002521f:	90                   	nop

c0025220 <ATAPI::ATAPI()>:
c0025220:	83 ec 0c             	sub    esp,0xc
c0025223:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025227:	83 ec 04             	sub    esp,0x4
c002522a:	68 00 08 00 00       	push   0x800
c002522f:	68 89 dd 02 c0       	push   0xc002dd89
c0025234:	50                   	push   eax
c0025235:	e8 6c f4 fe ff       	call   c00146a6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002523a:	83 c4 10             	add    esp,0x10
c002523d:	ba a4 dc 02 c0       	mov    edx,0xc002dca4
c0025242:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025246:	89 10                	mov    DWORD PTR [eax],edx
c0025248:	90                   	nop
c0025249:	83 c4 0c             	add    esp,0xc
c002524c:	c3                   	ret    
c002524d:	90                   	nop

c002524e <ATAPI::readyForCommand()>:
c002524e:	56                   	push   esi
c002524f:	53                   	push   ebx
c0025250:	31 db                	xor    ebx,ebx
c0025252:	50                   	push   eax
c0025253:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0025257:	50                   	push   eax
c0025258:	6a 0c                	push   0xc
c002525a:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0025261:	50                   	push   eax
c0025262:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0025268:	e8 6b ea ff ff       	call   c0023cd8 <IDE::read(unsigned char, unsigned char)>
c002526d:	83 c4 10             	add    esp,0x10
c0025270:	a8 88                	test   al,0x88
c0025272:	74 23                	je     c0025297 <ATAPI::readyForCommand()+0x49>
c0025274:	43                   	inc    ebx
c0025275:	83 fb 63             	cmp    ebx,0x63
c0025278:	7e dd                	jle    c0025257 <ATAPI::readyForCommand()+0x9>
c002527a:	51                   	push   ecx
c002527b:	51                   	push   ecx
c002527c:	6a 00                	push   0x0
c002527e:	68 40 42 0f 00       	push   0xf4240
c0025283:	e8 1b 97 ff ff       	call   c001e9a3 <nanoSleep(unsigned long long)>
c0025288:	83 c4 10             	add    esp,0x10
c002528b:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0025291:	75 c4                	jne    c0025257 <ATAPI::readyForCommand()+0x9>
c0025293:	31 c0                	xor    eax,eax
c0025295:	eb 02                	jmp    c0025299 <ATAPI::readyForCommand()+0x4b>
c0025297:	b0 01                	mov    al,0x1
c0025299:	5a                   	pop    edx
c002529a:	5b                   	pop    ebx
c002529b:	5e                   	pop    esi
c002529c:	c3                   	ret    
c002529d:	90                   	nop

c002529e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c002529e:	55                   	push   ebp
c002529f:	57                   	push   edi
c00252a0:	56                   	push   esi
c00252a1:	53                   	push   ebx
c00252a2:	83 ec 20             	sub    esp,0x20
c00252a5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00252a9:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00252ad:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00252b1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00252b5:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00252b9:	6a 01                	push   0x1
c00252bb:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00252c2:	50                   	push   eax
c00252c3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00252c9:	e8 56 eb ff ff       	call   c0023e24 <IDE::enableIRQs(unsigned char, bool)>
c00252ce:	5e                   	pop    esi
c00252cf:	58                   	pop    eax
c00252d0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00252d7:	50                   	push   eax
c00252d8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00252de:	e8 0f e9 ff ff       	call   c0023bf2 <IDE::prepareInterrupt(unsigned char)>
c00252e3:	89 3c 24             	mov    DWORD PTR [esp],edi
c00252e6:	e8 63 ff ff ff       	call   c002524e <ATAPI::readyForCommand()>
c00252eb:	83 c4 10             	add    esp,0x10
c00252ee:	84 c0                	test   al,al
c00252f0:	75 0a                	jne    c00252fc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c00252f2:	bb 01 00 00 00       	mov    ebx,0x1
c00252f7:	e9 57 02 00 00       	jmp    c0025553 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00252fc:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0025302:	c1 e0 04             	shl    eax,0x4
c0025305:	0f b6 c0             	movzx  eax,al
c0025308:	50                   	push   eax
c0025309:	6a 06                	push   0x6
c002530b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025312:	50                   	push   eax
c0025313:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025319:	e8 fa e8 ff ff       	call   c0023c18 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002531e:	6a 00                	push   0x0
c0025320:	6a 01                	push   0x1
c0025322:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025329:	50                   	push   eax
c002532a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025330:	e8 e3 e8 ff ff       	call   c0023c18 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0025335:	83 c4 20             	add    esp,0x20
c0025338:	0f b6 c3             	movzx  eax,bl
c002533b:	0f b6 df             	movzx  ebx,bh
c002533e:	50                   	push   eax
c002533f:	6a 04                	push   0x4
c0025341:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025348:	50                   	push   eax
c0025349:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002534f:	e8 c4 e8 ff ff       	call   c0023c18 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0025354:	53                   	push   ebx
c0025355:	6a 05                	push   0x5
c0025357:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002535e:	50                   	push   eax
c002535f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025365:	e8 ae e8 ff ff       	call   c0023c18 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002536a:	83 c4 20             	add    esp,0x20
c002536d:	68 a0 00 00 00       	push   0xa0
c0025372:	6a 07                	push   0x7
c0025374:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002537b:	50                   	push   eax
c002537c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025382:	e8 91 e8 ff ff       	call   c0023c18 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0025387:	83 c4 0c             	add    esp,0xc
c002538a:	6a 01                	push   0x1
c002538c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025393:	50                   	push   eax
c0025394:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002539a:	e8 25 f4 ff ff       	call   c00247c4 <IDE::polling(unsigned char, unsigned int)>
c002539f:	83 c4 10             	add    esp,0x10
c00253a2:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c00253a8:	84 c0                	test   al,al
c00253aa:	74 23                	je     c00253cf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c00253ac:	0f b6 d8             	movzx  ebx,al
c00253af:	0f b6 d2             	movzx  edx,dl
c00253b2:	53                   	push   ebx
c00253b3:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c00253ba:	50                   	push   eax
c00253bb:	52                   	push   edx
c00253bc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00253c2:	e8 67 f2 ff ff       	call   c002462e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00253c7:	83 c4 10             	add    esp,0x10
c00253ca:	e9 84 01 00 00       	jmp    c0025553 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00253cf:	0f b6 d2             	movzx  edx,dl
c00253d2:	53                   	push   ebx
c00253d3:	53                   	push   ebx
c00253d4:	52                   	push   edx
c00253d5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00253db:	e8 26 e8 ff ff       	call   c0023c06 <IDE::getBase(unsigned char)>
c00253e0:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00253e4:	b9 06 00 00 00       	mov    ecx,0x6
c00253e9:	89 c2                	mov    edx,eax
c00253eb:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c00253ee:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00253f2:	83 c4 10             	add    esp,0x10
c00253f5:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00253fb:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0025402:	85 db                	test   ebx,ebx
c0025404:	0f 84 ec 00 00 00    	je     c00254f6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c002540a:	51                   	push   ecx
c002540b:	51                   	push   ecx
c002540c:	52                   	push   edx
c002540d:	50                   	push   eax
c002540e:	e8 73 e9 ff ff       	call   c0023d86 <IDE::waitInterrupt(unsigned char)>
c0025413:	83 c4 10             	add    esp,0x10
c0025416:	84 c0                	test   al,al
c0025418:	0f 84 d4 fe ff ff    	je     c00252f2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002541e:	56                   	push   esi
c002541f:	56                   	push   esi
c0025420:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025427:	50                   	push   eax
c0025428:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002542e:	e8 bf e7 ff ff       	call   c0023bf2 <IDE::prepareInterrupt(unsigned char)>
c0025433:	83 c4 0c             	add    esp,0xc
c0025436:	6a 04                	push   0x4
c0025438:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002543f:	50                   	push   eax
c0025440:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025446:	e8 8d e8 ff ff       	call   c0023cd8 <IDE::read(unsigned char, unsigned char)>
c002544b:	83 c4 0c             	add    esp,0xc
c002544e:	89 c6                	mov    esi,eax
c0025450:	6a 05                	push   0x5
c0025452:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025459:	50                   	push   eax
c002545a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025460:	e8 73 e8 ff ff       	call   c0023cd8 <IDE::read(unsigned char, unsigned char)>
c0025465:	89 f1                	mov    ecx,esi
c0025467:	0f b6 c0             	movzx  eax,al
c002546a:	0f b6 f1             	movzx  esi,cl
c002546d:	c1 e0 08             	shl    eax,0x8
c0025470:	09 c6                	or     esi,eax
c0025472:	d1 fe                	sar    esi,1
c0025474:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0025478:	83 c4 10             	add    esp,0x10
c002547b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0025480:	74 41                	je     c00254c3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0025482:	31 c9                	xor    ecx,ecx
c0025484:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002548a:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0025491:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0025495:	75 0a                	jne    c00254a1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0025497:	01 c9                	add    ecx,ecx
c0025499:	01 cd                	add    ebp,ecx
c002549b:	4b                   	dec    ebx
c002549c:	e9 54 ff ff ff       	jmp    c00253f5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c00254a1:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c00254a6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00254aa:	51                   	push   ecx
c00254ab:	51                   	push   ecx
c00254ac:	52                   	push   edx
c00254ad:	50                   	push   eax
c00254ae:	e8 53 e7 ff ff       	call   c0023c06 <IDE::getBase(unsigned char)>
c00254b3:	89 c2                	mov    edx,eax
c00254b5:	89 f0                	mov    eax,esi
c00254b7:	66 ef                	out    dx,ax
c00254b9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00254bd:	83 c4 10             	add    esp,0x10
c00254c0:	41                   	inc    ecx
c00254c1:	eb c1                	jmp    c0025484 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c00254c3:	31 f6                	xor    esi,esi
c00254c5:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00254cb:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00254d2:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c00254d6:	75 06                	jne    c00254de <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c00254d8:	01 f6                	add    esi,esi
c00254da:	01 f5                	add    ebp,esi
c00254dc:	eb bd                	jmp    c002549b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c00254de:	51                   	push   ecx
c00254df:	51                   	push   ecx
c00254e0:	52                   	push   edx
c00254e1:	50                   	push   eax
c00254e2:	e8 1f e7 ff ff       	call   c0023c06 <IDE::getBase(unsigned char)>
c00254e7:	89 c2                	mov    edx,eax
c00254e9:	66 ed                	in     ax,dx
c00254eb:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c00254f0:	83 c4 10             	add    esp,0x10
c00254f3:	46                   	inc    esi
c00254f4:	eb cf                	jmp    c00254c5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c00254f6:	51                   	push   ecx
c00254f7:	51                   	push   ecx
c00254f8:	52                   	push   edx
c00254f9:	50                   	push   eax
c00254fa:	e8 87 e8 ff ff       	call   c0023d86 <IDE::waitInterrupt(unsigned char)>
c00254ff:	83 c4 10             	add    esp,0x10
c0025502:	84 c0                	test   al,al
c0025504:	0f 84 e8 fd ff ff    	je     c00252f2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002550a:	bb a0 86 01 00       	mov    ebx,0x186a0
c002550f:	52                   	push   edx
c0025510:	52                   	push   edx
c0025511:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025518:	50                   	push   eax
c0025519:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002551f:	e8 ce e6 ff ff       	call   c0023bf2 <IDE::prepareInterrupt(unsigned char)>
c0025524:	83 c4 10             	add    esp,0x10
c0025527:	50                   	push   eax
c0025528:	50                   	push   eax
c0025529:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025530:	50                   	push   eax
c0025531:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025537:	e8 ca e6 ff ff       	call   c0023c06 <IDE::getBase(unsigned char)>
c002553c:	8d 50 07             	lea    edx,[eax+0x7]
c002553f:	ec                   	in     al,dx
c0025540:	83 c4 10             	add    esp,0x10
c0025543:	a8 88                	test   al,0x88
c0025545:	74 0a                	je     c0025551 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0025547:	4b                   	dec    ebx
c0025548:	75 dd                	jne    c0025527 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c002554a:	bb 02 00 00 00       	mov    ebx,0x2
c002554f:	eb 02                	jmp    c0025553 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0025551:	31 db                	xor    ebx,ebx
c0025553:	83 c4 1c             	add    esp,0x1c
c0025556:	89 d8                	mov    eax,ebx
c0025558:	5b                   	pop    ebx
c0025559:	5e                   	pop    esi
c002555a:	5f                   	pop    edi
c002555b:	5d                   	pop    ebp
c002555c:	c3                   	ret    
c002555d:	90                   	nop

c002555e <ATAPI::diskRemoved()>:
c002555e:	83 ec 18             	sub    esp,0x18
c0025561:	68 95 dd 02 c0       	push   0xc002dd95
c0025566:	e8 e8 d8 fe ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c002556b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002556f:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0025576:	83 c4 1c             	add    esp,0x1c
c0025579:	c3                   	ret    

c002557a <ATAPI::eject()>:
c002557a:	57                   	push   edi
c002557b:	b9 03 00 00 00       	mov    ecx,0x3
c0025580:	53                   	push   ebx
c0025581:	83 ec 14             	sub    esp,0x14
c0025584:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0025588:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002558c:	fc                   	cld    
c002558d:	31 c0                	xor    eax,eax
c002558f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025591:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0025596:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002559b:	50                   	push   eax
c002559c:	50                   	push   eax
c002559d:	6a 00                	push   0x0
c002559f:	6a 00                	push   0x0
c00255a1:	6a 00                	push   0x0
c00255a3:	6a 02                	push   0x2
c00255a5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00255a9:	50                   	push   eax
c00255aa:	53                   	push   ebx
c00255ab:	e8 ee fc ff ff       	call   c002529e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00255b0:	83 c4 14             	add    esp,0x14
c00255b3:	53                   	push   ebx
c00255b4:	e8 a5 ff ff ff       	call   c002555e <ATAPI::diskRemoved()>
c00255b9:	83 c4 24             	add    esp,0x24
c00255bc:	31 c0                	xor    eax,eax
c00255be:	5b                   	pop    ebx
c00255bf:	5f                   	pop    edi
c00255c0:	c3                   	ret    
c00255c1:	90                   	nop

c00255c2 <ATAPI::diskInserted()>:
c00255c2:	53                   	push   ebx
c00255c3:	83 ec 14             	sub    esp,0x14
c00255c6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00255ca:	68 ac dd 02 c0       	push   0xc002ddac
c00255cf:	e8 7f d8 fe ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c00255d4:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c00255db:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00255de:	e8 2b f1 fe ff       	call   c001470e <PhysicalDisk::startCache()>
c00255e3:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00255e7:	83 c4 18             	add    esp,0x18
c00255ea:	5b                   	pop    ebx
c00255eb:	e9 fe 13 ff ff       	jmp    c00169ee <createPartitionsForDisk(PhysicalDisk*)>

c00255f0 <ATAPI::detectMedia()>:
c00255f0:	56                   	push   esi
c00255f1:	53                   	push   ebx
c00255f2:	83 ec 28             	sub    esp,0x28
c00255f5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00255f9:	6a 0c                	push   0xc
c00255fb:	6a 00                	push   0x0
c00255fd:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0025601:	56                   	push   esi
c0025602:	e8 65 b1 fd ff       	call   c000076c <memset>
c0025607:	58                   	pop    eax
c0025608:	5a                   	pop    edx
c0025609:	6a 00                	push   0x0
c002560b:	6a 00                	push   0x0
c002560d:	6a 00                	push   0x0
c002560f:	6a 00                	push   0x0
c0025611:	56                   	push   esi
c0025612:	53                   	push   ebx
c0025613:	e8 86 fc ff ff       	call   c002529e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0025618:	83 c4 1c             	add    esp,0x1c
c002561b:	6a 0c                	push   0xc
c002561d:	6a 00                	push   0x0
c002561f:	56                   	push   esi
c0025620:	e8 47 b1 fd ff       	call   c000076c <memset>
c0025625:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002562a:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c002562f:	59                   	pop    ecx
c0025630:	58                   	pop    eax
c0025631:	6a 01                	push   0x1
c0025633:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0025637:	50                   	push   eax
c0025638:	6a 00                	push   0x0
c002563a:	6a 12                	push   0x12
c002563c:	56                   	push   esi
c002563d:	53                   	push   ebx
c002563e:	e8 5b fc ff ff       	call   c002529e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0025643:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0025647:	83 c4 20             	add    esp,0x20
c002564a:	83 e0 7f             	and    eax,0x7f
c002564d:	3c 70                	cmp    al,0x70
c002564f:	74 15                	je     c0025666 <ATAPI::detectMedia()+0x76>
c0025651:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0025658:	75 0c                	jne    c0025666 <ATAPI::detectMedia()+0x76>
c002565a:	83 ec 0c             	sub    esp,0xc
c002565d:	53                   	push   ebx
c002565e:	e8 5f ff ff ff       	call   c00255c2 <ATAPI::diskInserted()>
c0025663:	83 c4 10             	add    esp,0x10
c0025666:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002566a:	83 e0 0f             	and    eax,0xf
c002566d:	3c 02                	cmp    al,0x2
c002566f:	75 1b                	jne    c002568c <ATAPI::detectMedia()+0x9c>
c0025671:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0025676:	75 2d                	jne    c00256a5 <ATAPI::detectMedia()+0xb5>
c0025678:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002567f:	74 24                	je     c00256a5 <ATAPI::detectMedia()+0xb5>
c0025681:	83 ec 0c             	sub    esp,0xc
c0025684:	53                   	push   ebx
c0025685:	e8 d4 fe ff ff       	call   c002555e <ATAPI::diskRemoved()>
c002568a:	eb 16                	jmp    c00256a2 <ATAPI::detectMedia()+0xb2>
c002568c:	84 c0                	test   al,al
c002568e:	75 15                	jne    c00256a5 <ATAPI::detectMedia()+0xb5>
c0025690:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0025697:	75 0c                	jne    c00256a5 <ATAPI::detectMedia()+0xb5>
c0025699:	83 ec 0c             	sub    esp,0xc
c002569c:	53                   	push   ebx
c002569d:	e8 20 ff ff ff       	call   c00255c2 <ATAPI::diskInserted()>
c00256a2:	83 c4 10             	add    esp,0x10
c00256a5:	83 c4 24             	add    esp,0x24
c00256a8:	5b                   	pop    ebx
c00256a9:	5e                   	pop    esi
c00256aa:	c3                   	ret    
c00256ab:	90                   	nop

c00256ac <ATAPI::open(int, int, void*)>:
c00256ac:	53                   	push   ebx
c00256ad:	83 ec 08             	sub    esp,0x8
c00256b0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00256b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00256b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00256bc:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00256c2:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00256c8:	c1 e0 06             	shl    eax,0x6
c00256cb:	01 d0                	add    eax,edx
c00256cd:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c00256d4:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c00256da:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c00256e1:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00256eb:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c00256f1:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00256f8:	6a 04                	push   0x4
c00256fa:	6a 0c                	push   0xc
c00256fc:	51                   	push   ecx
c00256fd:	52                   	push   edx
c00256fe:	e8 15 e5 ff ff       	call   c0023c18 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0025703:	90                   	nop
c0025704:	90                   	nop
c0025705:	6a 00                	push   0x0
c0025707:	6a 0c                	push   0xc
c0025709:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0025710:	50                   	push   eax
c0025711:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0025717:	e8 fc e4 ff ff       	call   c0023c18 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002571c:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0025723:	83 c4 14             	add    esp,0x14
c0025726:	53                   	push   ebx
c0025727:	e8 c4 fe ff ff       	call   c00255f0 <ATAPI::detectMedia()>
c002572c:	31 c0                	xor    eax,eax
c002572e:	83 c4 18             	add    esp,0x18
c0025731:	5b                   	pop    ebx
c0025732:	c3                   	ret    
c0025733:	90                   	nop

c0025734 <ATAPI::read(unsigned long long, int, void*)>:
c0025734:	55                   	push   ebp
c0025735:	57                   	push   edi
c0025736:	56                   	push   esi
c0025737:	53                   	push   ebx
c0025738:	83 ec 1c             	sub    esp,0x1c
c002573b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002573f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025743:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0025747:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c002574e:	74 41                	je     c0025791 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0025750:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025754:	b9 03 00 00 00       	mov    ecx,0x3
c0025759:	fc                   	cld    
c002575a:	31 c0                	xor    eax,eax
c002575c:	86 fb                	xchg   bl,bh
c002575e:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025760:	c1 c3 10             	rol    ebx,0x10
c0025763:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0025768:	89 e8                	mov    eax,ebp
c002576a:	86 fb                	xchg   bl,bh
c002576c:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0025770:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0025774:	50                   	push   eax
c0025775:	50                   	push   eax
c0025776:	55                   	push   ebp
c0025777:	c1 e5 0b             	shl    ebp,0xb
c002577a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002577e:	6a 00                	push   0x0
c0025780:	55                   	push   ebp
c0025781:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025785:	50                   	push   eax
c0025786:	56                   	push   esi
c0025787:	e8 12 fb ff ff       	call   c002529e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002578c:	83 c4 20             	add    esp,0x20
c002578f:	eb 1a                	jmp    c00257ab <ATAPI::read(unsigned long long, int, void*)+0x77>
c0025791:	83 ec 0c             	sub    esp,0xc
c0025794:	56                   	push   esi
c0025795:	e8 56 fe ff ff       	call   c00255f0 <ATAPI::detectMedia()>
c002579a:	83 c4 10             	add    esp,0x10
c002579d:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00257a4:	75 aa                	jne    c0025750 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c00257a6:	b8 02 00 00 00       	mov    eax,0x2
c00257ab:	83 c4 1c             	add    esp,0x1c
c00257ae:	5b                   	pop    ebx
c00257af:	5e                   	pop    esi
c00257b0:	5f                   	pop    edi
c00257b1:	5d                   	pop    ebp
c00257b2:	c3                   	ret    
c00257b3:	90                   	nop

c00257b4 <SATA::close(int, int, void*)>:
c00257b4:	83 ec 0c             	sub    esp,0xc
c00257b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257bb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00257c1:	85 c0                	test   eax,eax
c00257c3:	74 0c                	je     c00257d1 <SATA::close(int, int, void*)+0x1d>
c00257c5:	83 ec 0c             	sub    esp,0xc
c00257c8:	8b 10                	mov    edx,DWORD PTR [eax]
c00257ca:	50                   	push   eax
c00257cb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00257ce:	83 c4 10             	add    esp,0x10
c00257d1:	31 c0                	xor    eax,eax
c00257d3:	83 c4 0c             	add    esp,0xc
c00257d6:	c3                   	ret    
c00257d7:	90                   	nop

c00257d8 <SATA::powerSaving(PowerSavingLevel)>:
c00257d8:	c3                   	ret    
c00257d9:	90                   	nop

c00257da <SATA::open(int, int, void*)>:
c00257da:	56                   	push   esi
c00257db:	53                   	push   ebx
c00257dc:	50                   	push   eax
c00257dd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00257e1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00257e5:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00257ef:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00257f5:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00257ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025803:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002580d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0025813:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002581a:	e8 f5 a6 fe ff       	call   c000ff14 <Phys::allocatePage()>
c002581f:	89 c6                	mov    esi,eax
c0025821:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0025827:	81 c6 00 10 00 00    	add    esi,0x1000
c002582d:	e8 e2 a6 fe ff       	call   c000ff14 <Phys::allocatePage()>
c0025832:	39 c6                	cmp    esi,eax
c0025834:	74 10                	je     c0025846 <SATA::open(int, int, void*)+0x6c>
c0025836:	83 ec 0c             	sub    esp,0xc
c0025839:	68 d4 dc 02 c0       	push   0xc002dcd4
c002583e:	e8 aa 50 ff ff       	call   c001a8ed <Krnl::panic(char const*)>
c0025843:	83 c4 10             	add    esp,0x10
c0025846:	83 ec 0c             	sub    esp,0xc
c0025849:	6a 02                	push   0x2
c002584b:	e8 fd c1 fe ff       	call   c0011a4d <Virt::allocateKernelVirtualPages(int)>
c0025850:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025856:	6a 03                	push   0x3
c0025858:	50                   	push   eax
c0025859:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c002585f:	ff 35 10 f4 02 c0    	push   DWORD PTR ds:0xc002f410
c0025865:	e8 1a ca fe ff       	call   c0012284 <VAS::mapPage(unsigned long, unsigned long, int)>
c002586a:	83 c4 14             	add    esp,0x14
c002586d:	53                   	push   ebx
c002586e:	e8 9b ee fe ff       	call   c001470e <PhysicalDisk::startCache()>
c0025873:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025876:	e8 73 11 ff ff       	call   c00169ee <createPartitionsForDisk(PhysicalDisk*)>
c002587b:	83 c4 14             	add    esp,0x14
c002587e:	31 c0                	xor    eax,eax
c0025880:	5b                   	pop    ebx
c0025881:	5e                   	pop    esi
c0025882:	c3                   	ret    
c0025883:	90                   	nop

c0025884 <SATA::SATA()>:
c0025884:	83 ec 0c             	sub    esp,0xc
c0025887:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002588b:	83 ec 04             	sub    esp,0x4
c002588e:	68 00 02 00 00       	push   0x200
c0025893:	68 e8 dc 02 c0       	push   0xc002dce8
c0025898:	50                   	push   eax
c0025899:	e8 08 ee fe ff       	call   c00146a6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002589e:	83 c4 10             	add    esp,0x10
c00258a1:	ba 58 dd 02 c0       	mov    edx,0xc002dd58
c00258a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258aa:	89 10                	mov    DWORD PTR [eax],edx
c00258ac:	90                   	nop
c00258ad:	83 c4 0c             	add    esp,0xc
c00258b0:	c3                   	ret    
c00258b1:	90                   	nop

c00258b2 <SATA::access(unsigned long long, int, void*, bool)>:
c00258b2:	55                   	push   ebp
c00258b3:	57                   	push   edi
c00258b4:	56                   	push   esi
c00258b5:	53                   	push   ebx
c00258b6:	83 ec 2c             	sub    esp,0x2c
c00258b9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00258bd:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00258c1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00258c5:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00258c9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00258cd:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c00258d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00258d6:	7e 10                	jle    c00258e8 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c00258d8:	83 ec 0c             	sub    esp,0xc
c00258db:	68 f8 dc 02 c0       	push   0xc002dcf8
c00258e0:	e8 08 50 ff ff       	call   c001a8ed <Krnl::panic(char const*)>
c00258e5:	83 c4 10             	add    esp,0x10
c00258e8:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00258ee:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c00258f4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00258fa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00258fe:	89 d0                	mov    eax,edx
c0025900:	c1 e0 07             	shl    eax,0x7
c0025903:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0025907:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0025911:	51                   	push   ecx
c0025912:	8d 42 02             	lea    eax,[edx+0x2]
c0025915:	51                   	push   ecx
c0025916:	c1 e0 07             	shl    eax,0x7
c0025919:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c002591d:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0025921:	50                   	push   eax
c0025922:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0025928:	e8 af ef ff ff       	call   c00248dc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002592d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0025931:	83 c4 10             	add    esp,0x10
c0025934:	b8 01 00 00 00       	mov    eax,0x1
c0025939:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c002593e:	0f 84 cb 01 00 00    	je     c0025b0f <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0025944:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0025948:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002594c:	c1 e0 09             	shl    eax,0x9
c002594f:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0025954:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025958:	74 0e                	je     c0025968 <SATA::access(unsigned long long, int, void*, bool)+0xb6>
c002595a:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c0025960:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0025964:	89 c1                	mov    ecx,eax
c0025966:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025968:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002596c:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0025972:	8d 42 02             	lea    eax,[edx+0x2]
c0025975:	c1 e0 07             	shl    eax,0x7
c0025978:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002597c:	8b 00                	mov    eax,DWORD PTR [eax]
c002597e:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0025984:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002598a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002598e:	c1 e1 05             	shl    ecx,0x5
c0025991:	01 c8                	add    eax,ecx
c0025993:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0025997:	83 e1 01             	and    ecx,0x1
c002599a:	89 ce                	mov    esi,ecx
c002599c:	8a 08                	mov    cl,BYTE PTR [eax]
c002599e:	c1 e6 06             	shl    esi,0x6
c00259a1:	83 e1 bf             	and    ecx,0xffffffbf
c00259a4:	09 f1                	or     ecx,esi
c00259a6:	88 08                	mov    BYTE PTR [eax],cl
c00259a8:	8b 08                	mov    ecx,DWORD PTR [eax]
c00259aa:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c00259b0:	81 c9 05 00 01 00    	or     ecx,0x10005
c00259b6:	89 08                	mov    DWORD PTR [eax],ecx
c00259b8:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c00259be:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c00259c4:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c00259ca:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c00259cd:	50                   	push   eax
c00259ce:	68 90 00 00 00       	push   0x90
c00259d3:	6a 00                	push   0x0
c00259d5:	56                   	push   esi
c00259d6:	e8 91 ad fd ff       	call   c000076c <memset>
c00259db:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c00259e1:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c00259e5:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c00259eb:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c00259ef:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00259f3:	83 c4 10             	add    esp,0x10
c00259f6:	48                   	dec    eax
c00259f7:	25 ff ff 3f 00       	and    eax,0x3fffff
c00259fc:	89 c1                	mov    ecx,eax
c00259fe:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0025a04:	25 00 00 c0 ff       	and    eax,0xffc00000
c0025a09:	09 c8                	or     eax,ecx
c0025a0b:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0025a11:	66 8b 06             	mov    ax,WORD PTR [esi]
c0025a14:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c0025a1b:	66 25 00 7f          	and    ax,0x7f00
c0025a1f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0025a23:	66 0d 27 80          	or     ax,0x8027
c0025a27:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c0025a2c:	66 89 06             	mov    WORD PTR [esi],ax
c0025a2f:	19 c0                	sbb    eax,eax
c0025a31:	83 e0 f0             	and    eax,0xfffffff0
c0025a34:	83 c0 35             	add    eax,0x35
c0025a37:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0025a3a:	89 e8                	mov    eax,ebp
c0025a3c:	c1 e8 10             	shr    eax,0x10
c0025a3f:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c0025a42:	89 e8                	mov    eax,ebp
c0025a44:	c1 e8 18             	shr    eax,0x18
c0025a47:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c0025a4a:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0025a4e:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c0025a51:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0025a55:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c0025a58:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0025a5c:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c0025a60:	89 d6                	mov    esi,edx
c0025a62:	31 c0                	xor    eax,eax
c0025a64:	c1 e6 07             	shl    esi,0x7
c0025a67:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0025a6b:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c0025a71:	80 e1 88             	and    cl,0x88
c0025a74:	74 0a                	je     c0025a80 <SATA::access(unsigned long long, int, void*, bool)+0x1ce>
c0025a76:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025a7b:	74 0a                	je     c0025a87 <SATA::access(unsigned long long, int, void*, bool)+0x1d5>
c0025a7d:	40                   	inc    eax
c0025a7e:	eb eb                	jmp    c0025a6b <SATA::access(unsigned long long, int, void*, bool)+0x1b9>
c0025a80:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025a85:	75 0a                	jne    c0025a91 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c0025a87:	83 ec 0c             	sub    esp,0xc
c0025a8a:	68 31 dd 02 c0       	push   0xc002dd31
c0025a8f:	eb 56                	jmp    c0025ae7 <SATA::access(unsigned long long, int, void*, bool)+0x235>
c0025a91:	b8 01 00 00 00       	mov    eax,0x1
c0025a96:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0025a9a:	c1 e2 07             	shl    edx,0x7
c0025a9d:	d3 e0                	shl    eax,cl
c0025a9f:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0025aa3:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c0025aa9:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c0025aaf:	85 c8                	test   eax,ecx
c0025ab1:	74 20                	je     c0025ad3 <SATA::access(unsigned long long, int, void*, bool)+0x221>
c0025ab3:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c0025ab9:	0f ba e1 1e          	bt     ecx,0x1e
c0025abd:	73 ea                	jae    c0025aa9 <SATA::access(unsigned long long, int, void*, bool)+0x1f7>
c0025abf:	83 ec 0c             	sub    esp,0xc
c0025ac2:	68 3f dd 02 c0       	push   0xc002dd3f
c0025ac7:	e8 21 4e ff ff       	call   c001a8ed <Krnl::panic(char const*)>
c0025acc:	83 c4 10             	add    esp,0x10
c0025acf:	31 c0                	xor    eax,eax
c0025ad1:	eb 3c                	jmp    c0025b0f <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0025ad3:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c0025ad9:	0f ba e0 1e          	bt     eax,0x1e
c0025add:	73 17                	jae    c0025af6 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c0025adf:	83 ec 0c             	sub    esp,0xc
c0025ae2:	68 3f dd 02 c0       	push   0xc002dd3f
c0025ae7:	e8 01 4e ff ff       	call   c001a8ed <Krnl::panic(char const*)>
c0025aec:	83 c4 10             	add    esp,0x10
c0025aef:	b8 01 00 00 00       	mov    eax,0x1
c0025af4:	eb 19                	jmp    c0025b0f <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0025af6:	31 c0                	xor    eax,eax
c0025af8:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0025afd:	75 10                	jne    c0025b0f <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0025aff:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c0025b05:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0025b09:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0025b0d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025b0f:	83 c4 2c             	add    esp,0x2c
c0025b12:	5b                   	pop    ebx
c0025b13:	5e                   	pop    esi
c0025b14:	5f                   	pop    edi
c0025b15:	5d                   	pop    ebp
c0025b16:	c3                   	ret    
c0025b17:	90                   	nop

c0025b18 <SATA::read(unsigned long long, int, void*)>:
c0025b18:	57                   	push   edi
c0025b19:	b8 04 00 00 00       	mov    eax,0x4
c0025b1e:	56                   	push   esi
c0025b1f:	53                   	push   ebx
c0025b20:	83 ec 10             	sub    esp,0x10
c0025b23:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0025b27:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0025b2b:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0025b2e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0025b32:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0025b36:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0025b3c:	77 3b                	ja     c0025b79 <SATA::read(unsigned long long, int, void*)+0x61>
c0025b3e:	b8 06 00 00 00       	mov    eax,0x6
c0025b43:	85 d2                	test   edx,edx
c0025b45:	74 32                	je     c0025b79 <SATA::read(unsigned long long, int, void*)+0x61>
c0025b47:	50                   	push   eax
c0025b48:	50                   	push   eax
c0025b49:	6a 00                	push   0x0
c0025b4b:	52                   	push   edx
c0025b4c:	53                   	push   ebx
c0025b4d:	57                   	push   edi
c0025b4e:	56                   	push   esi
c0025b4f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025b53:	e8 5a fd ff ff       	call   c00258b2 <SATA::access(unsigned long long, int, void*, bool)>
c0025b58:	83 c4 20             	add    esp,0x20
c0025b5b:	85 c0                	test   eax,eax
c0025b5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025b61:	75 11                	jne    c0025b74 <SATA::read(unsigned long long, int, void*)+0x5c>
c0025b63:	01 1d f4 35 03 c0    	add    DWORD PTR ds:0xc00335f4,ebx
c0025b69:	e8 ea ad fe ff       	call   c0010958 <VgaText::updateDiskUsage()>
c0025b6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025b72:	eb 05                	jmp    c0025b79 <SATA::read(unsigned long long, int, void*)+0x61>
c0025b74:	b8 01 00 00 00       	mov    eax,0x1
c0025b79:	83 c4 10             	add    esp,0x10
c0025b7c:	5b                   	pop    ebx
c0025b7d:	5e                   	pop    esi
c0025b7e:	5f                   	pop    edi
c0025b7f:	c3                   	ret    

c0025b80 <SATA::write(unsigned long long, int, void*)>:
c0025b80:	55                   	push   ebp
c0025b81:	b8 04 00 00 00       	mov    eax,0x4
c0025b86:	57                   	push   edi
c0025b87:	56                   	push   esi
c0025b88:	53                   	push   ebx
c0025b89:	83 ec 1c             	sub    esp,0x1c
c0025b8c:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0025b90:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0025b94:	8d 75 ff             	lea    esi,[ebp-0x1]
c0025b97:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0025b9b:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0025b9f:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0025ba5:	77 56                	ja     c0025bfd <SATA::write(unsigned long long, int, void*)+0x7d>
c0025ba7:	b8 06 00 00 00       	mov    eax,0x6
c0025bac:	85 ff                	test   edi,edi
c0025bae:	74 4d                	je     c0025bfd <SATA::write(unsigned long long, int, void*)+0x7d>
c0025bb0:	89 ee                	mov    esi,ebp
c0025bb2:	c1 e6 09             	shl    esi,0x9
c0025bb5:	01 fe                	add    esi,edi
c0025bb7:	89 c8                	mov    eax,ecx
c0025bb9:	89 da                	mov    edx,ebx
c0025bbb:	83 c0 01             	add    eax,0x1
c0025bbe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025bc2:	83 d2 00             	adc    edx,0x0
c0025bc5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0025bc9:	50                   	push   eax
c0025bca:	50                   	push   eax
c0025bcb:	6a 01                	push   0x1
c0025bcd:	57                   	push   edi
c0025bce:	81 c7 00 02 00 00    	add    edi,0x200
c0025bd4:	6a 01                	push   0x1
c0025bd6:	53                   	push   ebx
c0025bd7:	51                   	push   ecx
c0025bd8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0025bdc:	e8 d1 fc ff ff       	call   c00258b2 <SATA::access(unsigned long long, int, void*, bool)>
c0025be1:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0025be5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0025be9:	83 c4 20             	add    esp,0x20
c0025bec:	39 f7                	cmp    edi,esi
c0025bee:	75 c7                	jne    c0025bb7 <SATA::write(unsigned long long, int, void*)+0x37>
c0025bf0:	01 2d f0 35 03 c0    	add    DWORD PTR ds:0xc00335f0,ebp
c0025bf6:	e8 5d ad fe ff       	call   c0010958 <VgaText::updateDiskUsage()>
c0025bfb:	31 c0                	xor    eax,eax
c0025bfd:	83 c4 1c             	add    esp,0x1c
c0025c00:	5b                   	pop    ebx
c0025c01:	5e                   	pop    esi
c0025c02:	5f                   	pop    edi
c0025c03:	5d                   	pop    ebp
c0025c04:	c3                   	ret    
c0025c05:	90                   	nop

c0025c06 <SATAPI::write(unsigned long long, int, void*)>:
c0025c06:	b8 03 00 00 00       	mov    eax,0x3
c0025c0b:	c3                   	ret    

c0025c0c <SATAPI::close(int, int, void*)>:
c0025c0c:	83 ec 0c             	sub    esp,0xc
c0025c0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c13:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025c19:	85 c0                	test   eax,eax
c0025c1b:	74 0c                	je     c0025c29 <SATAPI::close(int, int, void*)+0x1d>
c0025c1d:	83 ec 0c             	sub    esp,0xc
c0025c20:	8b 10                	mov    edx,DWORD PTR [eax]
c0025c22:	50                   	push   eax
c0025c23:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0025c26:	83 c4 10             	add    esp,0x10
c0025c29:	31 c0                	xor    eax,eax
c0025c2b:	83 c4 0c             	add    esp,0xc
c0025c2e:	c3                   	ret    
c0025c2f:	90                   	nop

c0025c30 <SATAPI::SATAPI()>:
c0025c30:	83 ec 0c             	sub    esp,0xc
c0025c33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c37:	83 ec 04             	sub    esp,0x4
c0025c3a:	68 00 08 00 00       	push   0x800
c0025c3f:	68 88 dd 02 c0       	push   0xc002dd88
c0025c44:	50                   	push   eax
c0025c45:	e8 5c ea fe ff       	call   c00146a6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0025c4a:	83 c4 10             	add    esp,0x10
c0025c4d:	ba 34 de 02 c0       	mov    edx,0xc002de34
c0025c52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c56:	89 10                	mov    DWORD PTR [eax],edx
c0025c58:	90                   	nop
c0025c59:	83 c4 0c             	add    esp,0xc
c0025c5c:	c3                   	ret    
c0025c5d:	90                   	nop

c0025c5e <SATAPI::diskRemoved()>:
c0025c5e:	83 ec 18             	sub    esp,0x18
c0025c61:	68 94 dd 02 c0       	push   0xc002dd94
c0025c66:	e8 e8 d1 fe ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0025c6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025c6f:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0025c76:	83 c4 1c             	add    esp,0x1c
c0025c79:	c3                   	ret    

c0025c7a <SATAPI::diskInserted()>:
c0025c7a:	53                   	push   ebx
c0025c7b:	83 ec 14             	sub    esp,0x14
c0025c7e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025c82:	68 ab dd 02 c0       	push   0xc002ddab
c0025c87:	e8 c7 d1 fe ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0025c8c:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0025c93:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025c96:	e8 73 ea fe ff       	call   c001470e <PhysicalDisk::startCache()>
c0025c9b:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0025c9f:	83 c4 18             	add    esp,0x18
c0025ca2:	5b                   	pop    ebx
c0025ca3:	e9 46 0d ff ff       	jmp    c00169ee <createPartitionsForDisk(PhysicalDisk*)>

c0025ca8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0025ca8:	55                   	push   ebp
c0025ca9:	57                   	push   edi
c0025caa:	56                   	push   esi
c0025cab:	53                   	push   ebx
c0025cac:	83 ec 34             	sub    esp,0x34
c0025caf:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0025cb3:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0025cb7:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0025cbb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0025cbf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0025cc3:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0025cc9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025ccf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0025cd3:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0025cd9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025cdd:	c1 e0 07             	shl    eax,0x7
c0025ce0:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0025ce4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0025ce8:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0025cf2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025cf6:	8d 58 02             	lea    ebx,[eax+0x2]
c0025cf9:	c1 e3 07             	shl    ebx,0x7
c0025cfc:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0025d00:	53                   	push   ebx
c0025d01:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0025d07:	e8 d0 eb ff ff       	call   c00248dc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0025d0c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0025d10:	83 c4 10             	add    esp,0x10
c0025d13:	b8 01 00 00 00       	mov    eax,0x1
c0025d18:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0025d1d:	0f 84 85 01 00 00    	je     c0025ea8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0025d23:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0025d29:	8b 03                	mov    eax,DWORD PTR [ebx]
c0025d2b:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0025d31:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0025d37:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025d3b:	c1 e1 05             	shl    ecx,0x5
c0025d3e:	01 c8                	add    eax,ecx
c0025d40:	8b 08                	mov    ecx,DWORD PTR [eax]
c0025d42:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0025d48:	81 c9 25 00 01 00    	or     ecx,0x10025
c0025d4e:	89 08                	mov    DWORD PTR [eax],ecx
c0025d50:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0025d56:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0025d5c:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0025d62:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0025d65:	8d 7b 40             	lea    edi,[ebx+0x40]
c0025d68:	50                   	push   eax
c0025d69:	68 90 00 00 00       	push   0x90
c0025d6e:	6a 00                	push   0x0
c0025d70:	53                   	push   ebx
c0025d71:	e8 f6 a9 fd ff       	call   c000076c <memset>
c0025d76:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0025d7a:	b9 0c 00 00 00       	mov    ecx,0xc
c0025d7f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025d81:	8b 85 78 01 00 00    	mov    eax,DWORD PTR [ebp+0x178]
c0025d87:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0025d8b:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0025d91:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0025d95:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0025d99:	48                   	dec    eax
c0025d9a:	25 ff ff 3f 00       	and    eax,0x3fffff
c0025d9f:	89 c1                	mov    ecx,eax
c0025da1:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0025da7:	25 00 00 c0 ff       	and    eax,0xffc00000
c0025dac:	09 c8                	or     eax,ecx
c0025dae:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0025db4:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0025db7:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0025dbe:	66 25 00 7f          	and    ax,0x7f00
c0025dc2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0025dc6:	66 0d 27 80          	or     ax,0x8027
c0025dca:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c0025dce:	66 89 03             	mov    WORD PTR [ebx],ax
c0025dd1:	89 d0                	mov    eax,edx
c0025dd3:	c1 ea 18             	shr    edx,0x18
c0025dd6:	c1 e8 10             	shr    eax,0x10
c0025dd9:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0025ddc:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0025ddf:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0025de3:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0025de6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0025dea:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0025ded:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0025df1:	83 c4 10             	add    esp,0x10
c0025df4:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0025df8:	31 c0                	xor    eax,eax
c0025dfa:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0025dfe:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
c0025e04:	80 e2 88             	and    dl,0x88
c0025e07:	74 0a                	je     c0025e13 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0025e09:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025e0e:	74 0a                	je     c0025e1a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x172>
c0025e10:	40                   	inc    eax
c0025e11:	eb eb                	jmp    c0025dfe <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x156>
c0025e13:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025e18:	75 0f                	jne    c0025e29 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x181>
c0025e1a:	83 ec 0c             	sub    esp,0xc
c0025e1d:	68 31 dd 02 c0       	push   0xc002dd31
c0025e22:	e8 c6 4a ff ff       	call   c001a8ed <Krnl::panic(char const*)>
c0025e27:	eb 3f                	jmp    c0025e68 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c0025e29:	ba 01 00 00 00       	mov    edx,0x1
c0025e2e:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0025e32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025e36:	d3 e2                	shl    edx,cl
c0025e38:	c1 e0 07             	shl    eax,0x7
c0025e3b:	89 93 38 01 00 00    	mov    DWORD PTR [ebx+0x138],edx
c0025e41:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0025e45:	8b 88 38 01 00 00    	mov    ecx,DWORD PTR [eax+0x138]
c0025e4b:	85 ca                	test   edx,ecx
c0025e4d:	74 23                	je     c0025e72 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c0025e4f:	8b 88 10 01 00 00    	mov    ecx,DWORD PTR [eax+0x110]
c0025e55:	0f ba e1 1e          	bt     ecx,0x1e
c0025e59:	73 ea                	jae    c0025e45 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x19d>
c0025e5b:	83 ec 0c             	sub    esp,0xc
c0025e5e:	68 c3 dd 02 c0       	push   0xc002ddc3
c0025e63:	e8 eb cf fe ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0025e68:	83 c4 10             	add    esp,0x10
c0025e6b:	b8 01 00 00 00       	mov    eax,0x1
c0025e70:	eb 36                	jmp    c0025ea8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0025e72:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0025e78:	0f ba e0 1e          	bt     eax,0x1e
c0025e7c:	73 0a                	jae    c0025e88 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e0>
c0025e7e:	83 ec 0c             	sub    esp,0xc
c0025e81:	68 d6 dd 02 c0       	push   0xc002ddd6
c0025e86:	eb db                	jmp    c0025e63 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1bb>
c0025e88:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0025e8d:	74 17                	je     c0025ea6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0025e8f:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0025e94:	74 10                	je     c0025ea6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0025e96:	8b b5 7c 01 00 00    	mov    esi,DWORD PTR [ebp+0x17c]
c0025e9c:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0025ea0:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0025ea4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025ea6:	31 c0                	xor    eax,eax
c0025ea8:	83 c4 2c             	add    esp,0x2c
c0025eab:	5b                   	pop    ebx
c0025eac:	5e                   	pop    esi
c0025ead:	5f                   	pop    edi
c0025eae:	5d                   	pop    ebp
c0025eaf:	c3                   	ret    

c0025eb0 <SATAPI::eject()>:
c0025eb0:	57                   	push   edi
c0025eb1:	b9 03 00 00 00       	mov    ecx,0x3
c0025eb6:	53                   	push   ebx
c0025eb7:	83 ec 14             	sub    esp,0x14
c0025eba:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0025ebe:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025ec2:	fc                   	cld    
c0025ec3:	31 c0                	xor    eax,eax
c0025ec5:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025ec7:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0025ecc:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0025ed1:	50                   	push   eax
c0025ed2:	6a 00                	push   0x0
c0025ed4:	6a 00                	push   0x0
c0025ed6:	6a 00                	push   0x0
c0025ed8:	6a 00                	push   0x0
c0025eda:	6a 02                	push   0x2
c0025edc:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025ee0:	50                   	push   eax
c0025ee1:	53                   	push   ebx
c0025ee2:	e8 c1 fd ff ff       	call   c0025ca8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025ee7:	83 c4 14             	add    esp,0x14
c0025eea:	53                   	push   ebx
c0025eeb:	e8 6e fd ff ff       	call   c0025c5e <SATAPI::diskRemoved()>
c0025ef0:	83 c4 24             	add    esp,0x24
c0025ef3:	31 c0                	xor    eax,eax
c0025ef5:	5b                   	pop    ebx
c0025ef6:	5f                   	pop    edi
c0025ef7:	c3                   	ret    

c0025ef8 <SATAPI::detectMedia()>:
c0025ef8:	56                   	push   esi
c0025ef9:	53                   	push   ebx
c0025efa:	83 ec 28             	sub    esp,0x28
c0025efd:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025f01:	6a 0c                	push   0xc
c0025f03:	6a 00                	push   0x0
c0025f05:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0025f09:	56                   	push   esi
c0025f0a:	e8 5d a8 fd ff       	call   c000076c <memset>
c0025f0f:	83 c4 0c             	add    esp,0xc
c0025f12:	6a 00                	push   0x0
c0025f14:	6a 00                	push   0x0
c0025f16:	6a 00                	push   0x0
c0025f18:	6a 00                	push   0x0
c0025f1a:	6a 00                	push   0x0
c0025f1c:	56                   	push   esi
c0025f1d:	53                   	push   ebx
c0025f1e:	e8 85 fd ff ff       	call   c0025ca8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025f23:	83 c4 1c             	add    esp,0x1c
c0025f26:	6a 0c                	push   0xc
c0025f28:	6a 00                	push   0x0
c0025f2a:	56                   	push   esi
c0025f2b:	e8 3c a8 fd ff       	call   c000076c <memset>
c0025f30:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0025f35:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0025f3a:	83 c4 0c             	add    esp,0xc
c0025f3d:	6a 01                	push   0x1
c0025f3f:	8d 44 24 16          	lea    eax,[esp+0x16]
c0025f43:	50                   	push   eax
c0025f44:	6a 00                	push   0x0
c0025f46:	6a 00                	push   0x0
c0025f48:	6a 12                	push   0x12
c0025f4a:	56                   	push   esi
c0025f4b:	53                   	push   ebx
c0025f4c:	e8 57 fd ff ff       	call   c0025ca8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025f51:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0025f55:	83 c4 20             	add    esp,0x20
c0025f58:	83 e0 7f             	and    eax,0x7f
c0025f5b:	3c 70                	cmp    al,0x70
c0025f5d:	74 15                	je     c0025f74 <SATAPI::detectMedia()+0x7c>
c0025f5f:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025f66:	75 0c                	jne    c0025f74 <SATAPI::detectMedia()+0x7c>
c0025f68:	83 ec 0c             	sub    esp,0xc
c0025f6b:	53                   	push   ebx
c0025f6c:	e8 09 fd ff ff       	call   c0025c7a <SATAPI::diskInserted()>
c0025f71:	83 c4 10             	add    esp,0x10
c0025f74:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0025f78:	83 e0 0f             	and    eax,0xf
c0025f7b:	3c 02                	cmp    al,0x2
c0025f7d:	75 1b                	jne    c0025f9a <SATAPI::detectMedia()+0xa2>
c0025f7f:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0025f84:	75 2d                	jne    c0025fb3 <SATAPI::detectMedia()+0xbb>
c0025f86:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025f8d:	74 24                	je     c0025fb3 <SATAPI::detectMedia()+0xbb>
c0025f8f:	83 ec 0c             	sub    esp,0xc
c0025f92:	53                   	push   ebx
c0025f93:	e8 c6 fc ff ff       	call   c0025c5e <SATAPI::diskRemoved()>
c0025f98:	eb 16                	jmp    c0025fb0 <SATAPI::detectMedia()+0xb8>
c0025f9a:	84 c0                	test   al,al
c0025f9c:	75 15                	jne    c0025fb3 <SATAPI::detectMedia()+0xbb>
c0025f9e:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025fa5:	75 0c                	jne    c0025fb3 <SATAPI::detectMedia()+0xbb>
c0025fa7:	83 ec 0c             	sub    esp,0xc
c0025faa:	53                   	push   ebx
c0025fab:	e8 ca fc ff ff       	call   c0025c7a <SATAPI::diskInserted()>
c0025fb0:	83 c4 10             	add    esp,0x10
c0025fb3:	83 c4 24             	add    esp,0x24
c0025fb6:	5b                   	pop    ebx
c0025fb7:	5e                   	pop    esi
c0025fb8:	c3                   	ret    
c0025fb9:	90                   	nop

c0025fba <SATAPI::open(int, int, void*)>:
c0025fba:	56                   	push   esi
c0025fbb:	53                   	push   ebx
c0025fbc:	50                   	push   eax
c0025fbd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025fc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025fc5:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0025fcf:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0025fd5:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0025fdf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025fe3:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0025fed:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0025ff3:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0025ffa:	e8 15 9f fe ff       	call   c000ff14 <Phys::allocatePage()>
c0025fff:	89 c6                	mov    esi,eax
c0026001:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0026007:	81 c6 00 10 00 00    	add    esi,0x1000
c002600d:	e8 02 9f fe ff       	call   c000ff14 <Phys::allocatePage()>
c0026012:	39 c6                	cmp    esi,eax
c0026014:	74 10                	je     c0026026 <SATAPI::open(int, int, void*)+0x6c>
c0026016:	83 ec 0c             	sub    esp,0xc
c0026019:	68 eb dd 02 c0       	push   0xc002ddeb
c002601e:	e8 ca 48 ff ff       	call   c001a8ed <Krnl::panic(char const*)>
c0026023:	83 c4 10             	add    esp,0x10
c0026026:	83 ec 0c             	sub    esp,0xc
c0026029:	6a 02                	push   0x2
c002602b:	e8 1d ba fe ff       	call   c0011a4d <Virt::allocateKernelVirtualPages(int)>
c0026030:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0026036:	6a 03                	push   0x3
c0026038:	50                   	push   eax
c0026039:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c002603f:	ff 35 10 f4 02 c0    	push   DWORD PTR ds:0xc002f410
c0026045:	e8 3a c2 fe ff       	call   c0012284 <VAS::mapPage(unsigned long, unsigned long, int)>
c002604a:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0026051:	83 c4 14             	add    esp,0x14
c0026054:	53                   	push   ebx
c0026055:	e8 9e fe ff ff       	call   c0025ef8 <SATAPI::detectMedia()>
c002605a:	83 c4 14             	add    esp,0x14
c002605d:	31 c0                	xor    eax,eax
c002605f:	5b                   	pop    ebx
c0026060:	5e                   	pop    esi
c0026061:	c3                   	ret    

c0026062 <SATAPI::read(unsigned long long, int, void*)>:
c0026062:	55                   	push   ebp
c0026063:	57                   	push   edi
c0026064:	56                   	push   esi
c0026065:	53                   	push   ebx
c0026066:	83 ec 1c             	sub    esp,0x1c
c0026069:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002606d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026071:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0026075:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c002607c:	74 19                	je     c0026097 <SATAPI::read(unsigned long long, int, void*)+0x35>
c002607e:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0026083:	7e 2e                	jle    c00260b3 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0026085:	83 ec 0c             	sub    esp,0xc
c0026088:	68 01 de 02 c0       	push   0xc002de01
c002608d:	e8 5b 48 ff ff       	call   c001a8ed <Krnl::panic(char const*)>
c0026092:	83 c4 10             	add    esp,0x10
c0026095:	eb 1c                	jmp    c00260b3 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0026097:	83 ec 0c             	sub    esp,0xc
c002609a:	55                   	push   ebp
c002609b:	e8 58 fe ff ff       	call   c0025ef8 <SATAPI::detectMedia()>
c00260a0:	83 c4 10             	add    esp,0x10
c00260a3:	b8 02 00 00 00       	mov    eax,0x2
c00260a8:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c00260af:	75 cd                	jne    c002607e <SATAPI::read(unsigned long long, int, void*)+0x1c>
c00260b1:	eb 49                	jmp    c00260fc <SATAPI::read(unsigned long long, int, void*)+0x9a>
c00260b3:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00260b7:	b9 03 00 00 00       	mov    ecx,0x3
c00260bc:	fc                   	cld    
c00260bd:	31 c0                	xor    eax,eax
c00260bf:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00260c1:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00260c6:	89 d8                	mov    eax,ebx
c00260c8:	86 e0                	xchg   al,ah
c00260ca:	c1 c0 10             	rol    eax,0x10
c00260cd:	86 e0                	xchg   al,ah
c00260cf:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c00260d3:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c00260d7:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00260db:	50                   	push   eax
c00260dc:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00260e0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00260e4:	56                   	push   esi
c00260e5:	53                   	push   ebx
c00260e6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00260ea:	c1 e0 0b             	shl    eax,0xb
c00260ed:	50                   	push   eax
c00260ee:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00260f2:	50                   	push   eax
c00260f3:	55                   	push   ebp
c00260f4:	e8 af fb ff ff       	call   c0025ca8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00260f9:	83 c4 20             	add    esp,0x20
c00260fc:	83 c4 1c             	add    esp,0x1c
c00260ff:	5b                   	pop    ebx
c0026100:	5e                   	pop    esi
c0026101:	5f                   	pop    edi
c0026102:	5d                   	pop    ebp
c0026103:	c3                   	ret    

c0026104 <AVX::open(int, int, void*)>:
c0026104:	83 ec 0c             	sub    esp,0xc
c0026107:	e8 3c 11 00 00       	call   c0027248 <avxInit>
c002610c:	b8 00 00 00 00       	mov    eax,0x0
c0026111:	83 c4 0c             	add    esp,0xc
c0026114:	c3                   	ret    
c0026115:	90                   	nop

c0026116 <AVX::close(int, int, void*)>:
c0026116:	83 ec 0c             	sub    esp,0xc
c0026119:	e8 2b 11 00 00       	call   c0027249 <avxClose>
c002611e:	b8 00 00 00 00       	mov    eax,0x0
c0026123:	83 c4 0c             	add    esp,0xc
c0026126:	c3                   	ret    
c0026127:	90                   	nop

c0026128 <AVX::available()>:
c0026128:	83 ec 0c             	sub    esp,0xc
c002612b:	e8 10 11 00 00       	call   c0027240 <avxDetect>
c0026130:	85 c0                	test   eax,eax
c0026132:	0f 95 c0             	setne  al
c0026135:	83 c4 0c             	add    esp,0xc
c0026138:	c3                   	ret    
c0026139:	90                   	nop

c002613a <AVX::save(void*)>:
c002613a:	83 ec 0c             	sub    esp,0xc
c002613d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026141:	83 ec 0c             	sub    esp,0xc
c0026144:	50                   	push   eax
c0026145:	e8 fc 10 00 00       	call   c0027246 <avxSave>
c002614a:	83 c4 10             	add    esp,0x10
c002614d:	90                   	nop
c002614e:	83 c4 0c             	add    esp,0xc
c0026151:	c3                   	ret    

c0026152 <AVX::load(void*)>:
c0026152:	83 ec 0c             	sub    esp,0xc
c0026155:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026159:	83 ec 0c             	sub    esp,0xc
c002615c:	50                   	push   eax
c002615d:	e8 e5 10 00 00       	call   c0027247 <avxLoad>
c0026162:	83 c4 10             	add    esp,0x10
c0026165:	90                   	nop
c0026166:	83 c4 0c             	add    esp,0xc
c0026169:	c3                   	ret    

c002616a <AVX::AVX()>:
c002616a:	83 ec 0c             	sub    esp,0xc
c002616d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026171:	83 ec 08             	sub    esp,0x8
c0026174:	68 64 de 02 c0       	push   0xc002de64
c0026179:	50                   	push   eax
c002617a:	e8 05 e6 fe ff       	call   c0014784 <FPU::FPU(char const*)>
c002617f:	83 c4 10             	add    esp,0x10
c0026182:	ba 74 de 02 c0       	mov    edx,0xc002de74
c0026187:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002618b:	89 10                	mov    DWORD PTR [eax],edx
c002618d:	90                   	nop
c002618e:	83 c4 0c             	add    esp,0xc
c0026191:	c3                   	ret    

c0026192 <MMX::available()>:
c0026192:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c0026197:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c002619d:	83 e0 20             	and    eax,0x20
c00261a0:	84 c0                	test   al,al
c00261a2:	0f 95 c0             	setne  al
c00261a5:	c3                   	ret    

c00261a6 <MMX::open(int, int, void*)>:
c00261a6:	83 ec 0c             	sub    esp,0xc
c00261a9:	e8 24 11 00 00       	call   c00272d2 <x87Init>
c00261ae:	b8 00 00 00 00       	mov    eax,0x0
c00261b3:	83 c4 0c             	add    esp,0xc
c00261b6:	c3                   	ret    
c00261b7:	90                   	nop

c00261b8 <MMX::close(int, int, void*)>:
c00261b8:	83 ec 0c             	sub    esp,0xc
c00261bb:	e8 2c 11 00 00       	call   c00272ec <x87Close>
c00261c0:	b8 00 00 00 00       	mov    eax,0x0
c00261c5:	83 c4 0c             	add    esp,0xc
c00261c8:	c3                   	ret    
c00261c9:	90                   	nop

c00261ca <MMX::save(void*)>:
c00261ca:	83 ec 0c             	sub    esp,0xc
c00261cd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00261d1:	83 ec 0c             	sub    esp,0xc
c00261d4:	50                   	push   eax
c00261d5:	e8 e7 10 00 00       	call   c00272c1 <x87Save>
c00261da:	83 c4 10             	add    esp,0x10
c00261dd:	90                   	nop
c00261de:	83 c4 0c             	add    esp,0xc
c00261e1:	c3                   	ret    

c00261e2 <MMX::load(void*)>:
c00261e2:	83 ec 0c             	sub    esp,0xc
c00261e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00261e9:	83 ec 0c             	sub    esp,0xc
c00261ec:	50                   	push   eax
c00261ed:	e8 d8 10 00 00       	call   c00272ca <x87Load>
c00261f2:	83 c4 10             	add    esp,0x10
c00261f5:	90                   	nop
c00261f6:	83 c4 0c             	add    esp,0xc
c00261f9:	c3                   	ret    

c00261fa <MMX::MMX()>:
c00261fa:	83 ec 0c             	sub    esp,0xc
c00261fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026201:	83 ec 08             	sub    esp,0x8
c0026204:	68 a4 de 02 c0       	push   0xc002dea4
c0026209:	50                   	push   eax
c002620a:	e8 75 e5 fe ff       	call   c0014784 <FPU::FPU(char const*)>
c002620f:	83 c4 10             	add    esp,0x10
c0026212:	ba b4 de 02 c0       	mov    edx,0xc002deb4
c0026217:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002621b:	89 10                	mov    DWORD PTR [eax],edx
c002621d:	90                   	nop
c002621e:	83 c4 0c             	add    esp,0xc
c0026221:	c3                   	ret    

c0026222 <SSE::open(int, int, void*)>:
c0026222:	83 ec 0c             	sub    esp,0xc
c0026225:	e8 5a 10 00 00       	call   c0027284 <sseInit>
c002622a:	b8 00 00 00 00       	mov    eax,0x0
c002622f:	83 c4 0c             	add    esp,0xc
c0026232:	c3                   	ret    
c0026233:	90                   	nop

c0026234 <SSE::close(int, int, void*)>:
c0026234:	83 ec 0c             	sub    esp,0xc
c0026237:	e8 58 10 00 00       	call   c0027294 <sseClose>
c002623c:	b8 00 00 00 00       	mov    eax,0x0
c0026241:	83 c4 0c             	add    esp,0xc
c0026244:	c3                   	ret    
c0026245:	90                   	nop

c0026246 <SSE::available()>:
c0026246:	83 ec 1c             	sub    esp,0x1c
c0026249:	e8 12 10 00 00       	call   c0027260 <absolutelyNoChanceInHell>
c002624e:	85 c0                	test   eax,eax
c0026250:	0f 95 c0             	setne  al
c0026253:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0026257:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002625b:	83 c4 1c             	add    esp,0x1c
c002625e:	c3                   	ret    
c002625f:	90                   	nop

c0026260 <SSE::save(void*)>:
c0026260:	83 ec 0c             	sub    esp,0xc
c0026263:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026267:	83 ec 0c             	sub    esp,0xc
c002626a:	50                   	push   eax
c002626b:	e8 08 10 00 00       	call   c0027278 <sseSave>
c0026270:	83 c4 10             	add    esp,0x10
c0026273:	90                   	nop
c0026274:	83 c4 0c             	add    esp,0xc
c0026277:	c3                   	ret    

c0026278 <SSE::load(void*)>:
c0026278:	83 ec 0c             	sub    esp,0xc
c002627b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002627f:	83 ec 0c             	sub    esp,0xc
c0026282:	50                   	push   eax
c0026283:	e8 f6 0f 00 00       	call   c002727e <sseLoad>
c0026288:	83 c4 10             	add    esp,0x10
c002628b:	90                   	nop
c002628c:	83 c4 0c             	add    esp,0xc
c002628f:	c3                   	ret    

c0026290 <SSE::SSE()>:
c0026290:	83 ec 0c             	sub    esp,0xc
c0026293:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026297:	83 ec 08             	sub    esp,0x8
c002629a:	68 e4 de 02 c0       	push   0xc002dee4
c002629f:	50                   	push   eax
c00262a0:	e8 df e4 fe ff       	call   c0014784 <FPU::FPU(char const*)>
c00262a5:	83 c4 10             	add    esp,0x10
c00262a8:	ba f4 de 02 c0       	mov    edx,0xc002def4
c00262ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262b1:	89 10                	mov    DWORD PTR [eax],edx
c00262b3:	90                   	nop
c00262b4:	83 c4 0c             	add    esp,0xc
c00262b7:	c3                   	ret    

c00262b8 <x87::open(int, int, void*)>:
c00262b8:	83 ec 0c             	sub    esp,0xc
c00262bb:	e8 12 10 00 00       	call   c00272d2 <x87Init>
c00262c0:	b8 00 00 00 00       	mov    eax,0x0
c00262c5:	83 c4 0c             	add    esp,0xc
c00262c8:	c3                   	ret    
c00262c9:	90                   	nop

c00262ca <x87::close(int, int, void*)>:
c00262ca:	83 ec 0c             	sub    esp,0xc
c00262cd:	e8 1a 10 00 00       	call   c00272ec <x87Close>
c00262d2:	b8 00 00 00 00       	mov    eax,0x0
c00262d7:	83 c4 0c             	add    esp,0xc
c00262da:	c3                   	ret    
c00262db:	90                   	nop

c00262dc <x87::available()>:
c00262dc:	83 ec 0c             	sub    esp,0xc
c00262df:	e8 c2 0f 00 00       	call   c00272a6 <x87Detect>
c00262e4:	85 c0                	test   eax,eax
c00262e6:	0f 95 c0             	setne  al
c00262e9:	83 c4 0c             	add    esp,0xc
c00262ec:	c3                   	ret    
c00262ed:	90                   	nop

c00262ee <x87::save(void*)>:
c00262ee:	83 ec 0c             	sub    esp,0xc
c00262f1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00262f5:	83 ec 0c             	sub    esp,0xc
c00262f8:	50                   	push   eax
c00262f9:	e8 c3 0f 00 00       	call   c00272c1 <x87Save>
c00262fe:	83 c4 10             	add    esp,0x10
c0026301:	90                   	nop
c0026302:	83 c4 0c             	add    esp,0xc
c0026305:	c3                   	ret    

c0026306 <x87::load(void*)>:
c0026306:	83 ec 0c             	sub    esp,0xc
c0026309:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002630d:	83 ec 0c             	sub    esp,0xc
c0026310:	50                   	push   eax
c0026311:	e8 b4 0f 00 00       	call   c00272ca <x87Load>
c0026316:	83 c4 10             	add    esp,0x10
c0026319:	90                   	nop
c002631a:	83 c4 0c             	add    esp,0xc
c002631d:	c3                   	ret    

c002631e <x87::x87()>:
c002631e:	83 ec 0c             	sub    esp,0xc
c0026321:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026325:	83 ec 08             	sub    esp,0x8
c0026328:	68 24 df 02 c0       	push   0xc002df24
c002632d:	50                   	push   eax
c002632e:	e8 51 e4 fe ff       	call   c0014784 <FPU::FPU(char const*)>
c0026333:	83 c4 10             	add    esp,0x10
c0026336:	ba 34 df 02 c0       	mov    edx,0xc002df34
c002633b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002633f:	89 10                	mov    DWORD PTR [eax],edx
c0026341:	90                   	nop
c0026342:	83 c4 0c             	add    esp,0xc
c0026345:	c3                   	ret    

c0026346 <APIC::disable()>:
c0026346:	90                   	nop
c0026347:	c3                   	ret    

c0026348 <APIC::close(int, int, void*)>:
c0026348:	55                   	push   ebp
c0026349:	89 e5                	mov    ebp,esp
c002634b:	83 ec 08             	sub    esp,0x8
c002634e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026351:	8b 00                	mov    eax,DWORD PTR [eax]
c0026353:	83 c0 3c             	add    eax,0x3c
c0026356:	8b 00                	mov    eax,DWORD PTR [eax]
c0026358:	83 ec 0c             	sub    esp,0xc
c002635b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002635e:	ff d0                	call   eax
c0026360:	83 c4 10             	add    esp,0x10
c0026363:	b8 00 00 00 00       	mov    eax,0x0
c0026368:	c9                   	leave  
c0026369:	c3                   	ret    

c002636a <IOAPIC::close(int, int, void*)>:
c002636a:	b8 00 00 00 00       	mov    eax,0x0
c002636f:	c3                   	ret    

c0026370 <APIC::io_wait()>:
c0026370:	eb 00                	jmp    c0026372 <APIC::io_wait()+0x2>
c0026372:	eb 00                	jmp    c0026374 <APIC::io_wait()+0x4>
c0026374:	90                   	nop
c0026375:	c3                   	ret    

c0026376 <APIC::getBase()>:
c0026376:	55                   	push   ebp
c0026377:	89 e5                	mov    ebp,esp
c0026379:	83 ec 18             	sub    esp,0x18
c002637c:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c0026381:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0026387:	83 e0 08             	and    eax,0x8
c002638a:	84 c0                	test   al,al
c002638c:	75 07                	jne    c0026395 <APIC::getBase()+0x1f>
c002638e:	b8 00 00 00 00       	mov    eax,0x0
c0026393:	eb 21                	jmp    c00263b6 <APIC::getBase()+0x40>
c0026395:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c002639a:	83 ec 08             	sub    esp,0x8
c002639d:	6a 1b                	push   0x1b
c002639f:	50                   	push   eax
c00263a0:	e8 a9 8a fe ff       	call   c000ee4e <Computer::rdmsr(unsigned int)>
c00263a5:	83 c4 10             	add    esp,0x10
c00263a8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00263ab:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00263ae:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00263b1:	25 00 f0 ff ff       	and    eax,0xfffff000
c00263b6:	c9                   	leave  
c00263b7:	c3                   	ret    

c00263b8 <APIC::eoi(unsigned char)>:
c00263b8:	55                   	push   ebp
c00263b9:	89 e5                	mov    ebp,esp
c00263bb:	83 ec 28             	sub    esp,0x28
c00263be:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00263c1:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00263c4:	83 ec 0c             	sub    esp,0xc
c00263c7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00263ca:	e8 a7 ff ff ff       	call   c0026376 <APIC::getBase()>
c00263cf:	83 c4 10             	add    esp,0x10
c00263d2:	05 b0 00 00 00       	add    eax,0xb0
c00263d7:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00263da:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00263dd:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00263e3:	90                   	nop
c00263e4:	c9                   	leave  
c00263e5:	c3                   	ret    

c00263e6 <APIC::open(int, int, void*)>:
c00263e6:	55                   	push   ebp
c00263e7:	89 e5                	mov    ebp,esp
c00263e9:	57                   	push   edi
c00263ea:	56                   	push   esi
c00263eb:	53                   	push   ebx
c00263ec:	83 ec 2c             	sub    esp,0x2c
c00263ef:	83 ec 0c             	sub    esp,0xc
c00263f2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00263f5:	e8 7c ff ff ff       	call   c0026376 <APIC::getBase()>
c00263fa:	83 c4 10             	add    esp,0x10
c00263fd:	89 c2                	mov    edx,eax
c00263ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026402:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026408:	0f b6 f8             	movzx  edi,al
c002640b:	89 d0                	mov    eax,edx
c002640d:	ba 00 00 00 00       	mov    edx,0x0
c0026412:	89 c1                	mov    ecx,eax
c0026414:	80 e5 ff             	and    ch,0xff
c0026417:	89 cb                	mov    ebx,ecx
c0026419:	0f b6 f2             	movzx  esi,dl
c002641c:	89 d8                	mov    eax,ebx
c002641e:	89 f2                	mov    edx,esi
c0026420:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0026423:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026426:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002642a:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002642e:	83 e0 00             	and    eax,0x0
c0026431:	09 d0                	or     eax,edx
c0026433:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0026437:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002643a:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026440:	8d 50 01             	lea    edx,[eax+0x1]
c0026443:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0026446:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002644c:	0f b6 d0             	movzx  edx,al
c002644f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026452:	83 c2 08             	add    edx,0x8
c0026455:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026459:	0f b6 c9             	movzx  ecx,cl
c002645c:	81 c9 00 00 01 00    	or     ecx,0x10000
c0026462:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026466:	83 ec 0c             	sub    esp,0xc
c0026469:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002646c:	e8 05 ff ff ff       	call   c0026376 <APIC::getBase()>
c0026471:	83 c4 10             	add    esp,0x10
c0026474:	05 f0 00 00 00       	add    eax,0xf0
c0026479:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002647c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002647f:	8b 00                	mov    eax,DWORD PTR [eax]
c0026481:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026484:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c002648b:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0026492:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0026495:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026498:	89 10                	mov    DWORD PTR [eax],edx
c002649a:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c00264a1:	a1 70 1b 03 c0       	mov    eax,ds:0xc0031b70
c00264a6:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c00264a9:	7d 7c                	jge    c0026527 <APIC::open(int, int, void*)+0x141>
c00264ab:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00264ae:	8b 04 85 80 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce480]
c00264b5:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c00264b8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00264bb:	8b 04 85 80 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce480]
c00264c2:	c1 e8 08             	shr    eax,0x8
c00264c5:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c00264c9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00264cc:	8b 04 85 80 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce480]
c00264d3:	c1 e8 18             	shr    eax,0x18
c00264d6:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c00264d9:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c00264dd:	75 40                	jne    c002651f <APIC::open(int, int, void*)+0x139>
c00264df:	83 ec 0c             	sub    esp,0xc
c00264e2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00264e5:	e8 8c fe ff ff       	call   c0026376 <APIC::getBase()>
c00264ea:	83 c4 10             	add    esp,0x10
c00264ed:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c00264f1:	75 07                	jne    c00264fa <APIC::open(int, int, void*)+0x114>
c00264f3:	ba 60 03 00 00       	mov    edx,0x360
c00264f8:	eb 05                	jmp    c00264ff <APIC::open(int, int, void*)+0x119>
c00264fa:	ba 50 03 00 00       	mov    edx,0x350
c00264ff:	01 d0                	add    eax,edx
c0026501:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0026504:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0026507:	8b 00                	mov    eax,DWORD PTR [eax]
c0026509:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c002650c:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0026513:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0026517:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002651a:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c002651d:	89 10                	mov    DWORD PTR [eax],edx
c002651f:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0026522:	e9 7a ff ff ff       	jmp    c00264a1 <APIC::open(int, int, void*)+0xbb>
c0026527:	b8 00 00 00 00       	mov    eax,0x0
c002652c:	8d 65 f4             	lea    esp,[ebp-0xc]
c002652f:	5b                   	pop    ebx
c0026530:	5e                   	pop    esi
c0026531:	5f                   	pop    edi
c0026532:	5d                   	pop    ebp
c0026533:	c3                   	ret    

c0026534 <IOAPIC::IOAPIC()>:
c0026534:	83 ec 0c             	sub    esp,0xc
c0026537:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002653b:	83 ec 08             	sub    esp,0x8
c002653e:	68 64 df 02 c0       	push   0xc002df64
c0026543:	50                   	push   eax
c0026544:	e8 1b df fe ff       	call   c0014464 <Device::Device(char const*)>
c0026549:	83 c4 10             	add    esp,0x10
c002654c:	ba 8c e0 02 c0       	mov    edx,0xc002e08c
c0026551:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026555:	89 10                	mov    DWORD PTR [eax],edx
c0026557:	90                   	nop
c0026558:	83 c4 0c             	add    esp,0xc
c002655b:	c3                   	ret    

c002655c <APIC::APIC()>:
c002655c:	53                   	push   ebx
c002655d:	83 ec 18             	sub    esp,0x18
c0026560:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026564:	83 ec 08             	sub    esp,0x8
c0026567:	68 6c df 02 c0       	push   0xc002df6c
c002656c:	50                   	push   eax
c002656d:	e8 6c e6 fe ff       	call   c0014bde <InterruptController::InterruptController(char const*)>
c0026572:	83 c4 10             	add    esp,0x10
c0026575:	ba 44 e0 02 c0       	mov    edx,0xc002e044
c002657a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002657e:	89 10                	mov    DWORD PTR [eax],edx
c0026580:	a0 40 36 03 c0       	mov    al,ds:0xc0033640
c0026585:	83 f0 01             	xor    eax,0x1
c0026588:	84 c0                	test   al,al
c002658a:	0f 84 a1 00 00 00    	je     c0026631 <APIC::APIC()+0xd5>
c0026590:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0026595:	a0 20 1c 03 c0       	mov    al,ds:0xc0031c20
c002659a:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c002659e:	0f 83 86 00 00 00    	jae    c002662a <APIC::APIC()+0xce>
c00265a4:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c00265ac:	83 ec 0c             	sub    esp,0xc
c00265af:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00265b3:	e8 f0 92 fe ff       	call   c000f8a8 <malloc>
c00265b8:	83 c4 10             	add    esp,0x10
c00265bb:	89 c3                	mov    ebx,eax
c00265bd:	83 ec 0c             	sub    esp,0xc
c00265c0:	53                   	push   ebx
c00265c1:	e8 6e ff ff ff       	call   c0026534 <IOAPIC::IOAPIC()>
c00265c6:	83 c4 10             	add    esp,0x10
c00265c9:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00265cd:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00265d2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00265d6:	89 14 85 20 36 03 c0 	mov    DWORD PTR [eax*4-0x3ffcc9e0],edx
c00265dd:	a1 00 36 03 c0       	mov    eax,ds:0xc0033600
c00265e2:	40                   	inc    eax
c00265e3:	a3 00 36 03 c0       	mov    ds:0xc0033600,eax
c00265e8:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c00265ed:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00265f3:	83 ec 08             	sub    esp,0x8
c00265f6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00265fa:	50                   	push   eax
c00265fb:	e8 74 dc fe ff       	call   c0014274 <Device::addChild(Device*)>
c0026600:	83 c4 10             	add    esp,0x10
c0026603:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026607:	8b 00                	mov    eax,DWORD PTR [eax]
c0026609:	83 c0 08             	add    eax,0x8
c002660c:	8b 00                	mov    eax,DWORD PTR [eax]
c002660e:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0026613:	6a 00                	push   0x0
c0026615:	6a 00                	push   0x0
c0026617:	52                   	push   edx
c0026618:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002661c:	ff d0                	call   eax
c002661e:	83 c4 10             	add    esp,0x10
c0026621:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0026625:	e9 6b ff ff ff       	jmp    c0026595 <APIC::APIC()+0x39>
c002662a:	c6 05 40 36 03 c0 01 	mov    BYTE PTR ds:0xc0033640,0x1
c0026631:	90                   	nop
c0026632:	83 c4 18             	add    esp,0x18
c0026635:	5b                   	pop    ebx
c0026636:	c3                   	ret    
c0026637:	90                   	nop

c0026638 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0026638:	55                   	push   ebp
c0026639:	89 e5                	mov    ebp,esp
c002663b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002663e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026644:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0026647:	72 1d                	jb     c0026666 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0026649:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002664c:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0026652:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026655:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c002665b:	01 d0                	add    eax,edx
c002665d:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0026660:	73 04                	jae    c0026666 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0026662:	b0 01                	mov    al,0x1
c0026664:	eb 02                	jmp    c0026668 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0026666:	b0 00                	mov    al,0x0
c0026668:	5d                   	pop    ebp
c0026669:	c3                   	ret    

c002666a <IOAPIC::read(int)>:
c002666a:	55                   	push   ebp
c002666b:	89 e5                	mov    ebp,esp
c002666d:	83 ec 10             	sub    esp,0x10
c0026670:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026673:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026679:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002667c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002667f:	0f b6 d0             	movzx  edx,al
c0026682:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026685:	89 10                	mov    DWORD PTR [eax],edx
c0026687:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002668a:	83 c0 10             	add    eax,0x10
c002668d:	8b 00                	mov    eax,DWORD PTR [eax]
c002668f:	c9                   	leave  
c0026690:	c3                   	ret    
c0026691:	90                   	nop

c0026692 <IOAPIC::open(int, int, void*)>:
c0026692:	55                   	push   ebp
c0026693:	89 e5                	mov    ebp,esp
c0026695:	57                   	push   edi
c0026696:	56                   	push   esi
c0026697:	53                   	push   ebx
c0026698:	83 ec 0c             	sub    esp,0xc
c002669b:	83 ec 0c             	sub    esp,0xc
c002669e:	68 97 df 02 c0       	push   0xc002df97
c00266a3:	e8 ab c7 fe ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c00266a8:	83 c4 10             	add    esp,0x10
c00266ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00266ae:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00266b1:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00266b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00266ba:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00266c0:	8b 14 85 60 1c 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce3a0]
c00266c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00266ca:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00266d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00266d3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00266d9:	8b 14 85 e0 1c 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce320]
c00266e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00266e3:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00266e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00266ec:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00266f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00266f5:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00266fb:	0f b6 f8             	movzx  edi,al
c00266fe:	89 d0                	mov    eax,edx
c0026700:	ba 00 00 00 00       	mov    edx,0x0
c0026705:	89 c1                	mov    ecx,eax
c0026707:	80 e5 ff             	and    ch,0xff
c002670a:	89 cb                	mov    ebx,ecx
c002670c:	0f b6 f2             	movzx  esi,dl
c002670f:	89 d8                	mov    eax,ebx
c0026711:	89 f2                	mov    edx,esi
c0026713:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0026716:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026719:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002671d:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026721:	83 e0 00             	and    eax,0x0
c0026724:	09 d0                	or     eax,edx
c0026726:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002672a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002672d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026733:	8d 50 01             	lea    edx,[eax+0x1]
c0026736:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0026739:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002673f:	0f b6 d0             	movzx  edx,al
c0026742:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026745:	83 c2 08             	add    edx,0x8
c0026748:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002674c:	0f b6 c9             	movzx  ecx,cl
c002674f:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0026755:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026759:	83 ec 08             	sub    esp,0x8
c002675c:	6a 01                	push   0x1
c002675e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026761:	e8 04 ff ff ff       	call   c002666a <IOAPIC::read(int)>
c0026766:	83 c4 10             	add    esp,0x10
c0026769:	c1 f8 10             	sar    eax,0x10
c002676c:	0f b6 c0             	movzx  eax,al
c002676f:	8d 50 01             	lea    edx,[eax+0x1]
c0026772:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026775:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c002677b:	b8 00 00 00 00       	mov    eax,0x0
c0026780:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026783:	5b                   	pop    ebx
c0026784:	5e                   	pop    esi
c0026785:	5f                   	pop    edi
c0026786:	5d                   	pop    ebp
c0026787:	c3                   	ret    

c0026788 <IOAPIC::write(int, int)>:
c0026788:	55                   	push   ebp
c0026789:	89 e5                	mov    ebp,esp
c002678b:	83 ec 10             	sub    esp,0x10
c002678e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026791:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026797:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002679a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002679d:	0f b6 d0             	movzx  edx,al
c00267a0:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00267a3:	89 10                	mov    DWORD PTR [eax],edx
c00267a5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00267a8:	8d 50 10             	lea    edx,[eax+0x10]
c00267ab:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00267ae:	89 02                	mov    DWORD PTR [edx],eax
c00267b0:	90                   	nop
c00267b1:	c9                   	leave  
c00267b2:	c3                   	ret    
c00267b3:	90                   	nop

c00267b4 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c00267b4:	55                   	push   ebp
c00267b5:	89 e5                	mov    ebp,esp
c00267b7:	53                   	push   ebx
c00267b8:	83 ec 2c             	sub    esp,0x2c
c00267bb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00267be:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00267c1:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c00267c4:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c00267c7:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00267ca:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00267cd:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00267d0:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00267d3:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00267d6:	88 d8                	mov    al,bl
c00267d8:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c00267db:	88 c8                	mov    al,cl
c00267dd:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00267e0:	88 d0                	mov    al,dl
c00267e2:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c00267e5:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00267e9:	83 c0 08             	add    eax,0x8
c00267ec:	01 c0                	add    eax,eax
c00267ee:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00267f1:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00267f5:	83 c0 08             	add    eax,0x8
c00267f8:	01 c0                	add    eax,eax
c00267fa:	40                   	inc    eax
c00267fb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00267fe:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0026801:	50                   	push   eax
c0026802:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026805:	e8 60 fe ff ff       	call   c002666a <IOAPIC::read(int)>
c002680a:	83 c4 08             	add    esp,0x8
c002680d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0026810:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0026817:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002681a:	c1 e0 18             	shl    eax,0x18
c002681d:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0026820:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0026823:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0026826:	52                   	push   edx
c0026827:	50                   	push   eax
c0026828:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002682b:	e8 58 ff ff ff       	call   c0026788 <IOAPIC::write(int, int)>
c0026830:	83 c4 0c             	add    esp,0xc
c0026833:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026836:	50                   	push   eax
c0026837:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002683a:	e8 2b fe ff ff       	call   c002666a <IOAPIC::read(int)>
c002683f:	83 c4 08             	add    esp,0x8
c0026842:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0026845:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c002684c:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0026853:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c002685a:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c002685e:	74 09                	je     c0026869 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0026860:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0026867:	eb 07                	jmp    c0026870 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0026869:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0026870:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0026874:	74 09                	je     c002687f <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0026876:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c002687d:	eb 07                	jmp    c0026886 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c002687f:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0026886:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c002688d:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0026891:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0026894:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0026897:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002689a:	52                   	push   edx
c002689b:	50                   	push   eax
c002689c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002689f:	e8 e4 fe ff ff       	call   c0026788 <IOAPIC::write(int, int)>
c00268a4:	83 c4 0c             	add    esp,0xc
c00268a7:	90                   	nop
c00268a8:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00268ab:	c9                   	leave  
c00268ac:	c3                   	ret    
c00268ad:	90                   	nop

c00268ae <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00268ae:	55                   	push   ebp
c00268af:	89 e5                	mov    ebp,esp
c00268b1:	57                   	push   edi
c00268b2:	56                   	push   esi
c00268b3:	53                   	push   ebx
c00268b4:	83 ec 2c             	sub    esp,0x2c
c00268b7:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00268ba:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00268bd:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00268c1:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c00268c5:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00268c9:	74 5a                	je     c0026925 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00268cb:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00268cf:	7f 44                	jg     c0026915 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c00268d1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00268d4:	05 e0 e4 02 c0       	add    eax,0xc002e4e0
c00268d9:	8a 00                	mov    al,BYTE PTR [eax]
c00268db:	0f b6 c0             	movzx  eax,al
c00268de:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00268e1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00268e4:	66 8b 84 00 00 1c 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffce400]
c00268ec:	0f b7 c0             	movzx  eax,ax
c00268ef:	83 e0 02             	and    eax,0x2
c00268f2:	85 c0                	test   eax,eax
c00268f4:	74 04                	je     c00268fa <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c00268f6:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c00268fa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00268fd:	66 8b 84 00 00 1c 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffce400]
c0026905:	0f b7 c0             	movzx  eax,ax
c0026908:	83 e0 08             	and    eax,0x8
c002690b:	85 c0                	test   eax,eax
c002690d:	74 16                	je     c0026925 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c002690f:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0026913:	eb 10                	jmp    c0026925 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0026915:	83 ec 0c             	sub    esp,0xc
c0026918:	68 a8 df 02 c0       	push   0xc002dfa8
c002691d:	e8 cb 3f ff ff       	call   c001a8ed <Krnl::panic(char const*)>
c0026922:	83 c4 10             	add    esp,0x10
c0026925:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0026929:	a1 00 36 03 c0       	mov    eax,ds:0xc0033600
c002692e:	83 ec 08             	sub    esp,0x8
c0026931:	50                   	push   eax
c0026932:	68 e0 df 02 c0       	push   0xc002dfe0
c0026937:	e8 17 c5 fe ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c002693c:	83 c4 10             	add    esp,0x10
c002693f:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0026946:	a1 00 36 03 c0       	mov    eax,ds:0xc0033600
c002694b:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c002694e:	7d 67                	jge    c00269b7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0026950:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0026953:	8b 04 85 20 36 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcc9e0]
c002695a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002695d:	83 ec 08             	sub    esp,0x8
c0026960:	52                   	push   edx
c0026961:	50                   	push   eax
c0026962:	e8 d1 fc ff ff       	call   c0026638 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0026967:	83 c4 10             	add    esp,0x10
c002696a:	84 c0                	test   al,al
c002696c:	74 44                	je     c00269b2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c002696e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0026971:	8b 1c 85 20 36 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcc9e0]
c0026978:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c002697c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002697f:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0026983:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026986:	83 c0 20             	add    eax,0x20
c0026989:	0f b6 f0             	movzx  esi,al
c002698c:	b8 00 00 00 00       	mov    eax,0x0
c0026991:	99                   	cdq    
c0026992:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0026995:	0f b6 c9             	movzx  ecx,cl
c0026998:	83 ec 04             	sub    esp,0x4
c002699b:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c002699e:	57                   	push   edi
c002699f:	56                   	push   esi
c00269a0:	52                   	push   edx
c00269a1:	50                   	push   eax
c00269a2:	51                   	push   ecx
c00269a3:	53                   	push   ebx
c00269a4:	e8 0b fe ff ff       	call   c00267b4 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c00269a9:	83 c4 20             	add    esp,0x20
c00269ac:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c00269b0:	eb 05                	jmp    c00269b7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00269b2:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c00269b5:	eb 8f                	jmp    c0026946 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c00269b7:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c00269ba:	83 f0 01             	xor    eax,0x1
c00269bd:	84 c0                	test   al,al
c00269bf:	74 10                	je     c00269d1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c00269c1:	83 ec 0c             	sub    esp,0xc
c00269c4:	68 f7 df 02 c0       	push   0xc002dff7
c00269c9:	e8 1f 3f ff ff       	call   c001a8ed <Krnl::panic(char const*)>
c00269ce:	83 c4 10             	add    esp,0x10
c00269d1:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c00269d5:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c00269dc:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c00269e0:	7f 65                	jg     c0026a47 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c00269e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00269e5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00269e8:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00269ef:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00269f2:	01 ca                	add    edx,ecx
c00269f4:	83 c2 54             	add    edx,0x54
c00269f7:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c00269fb:	85 c0                	test   eax,eax
c00269fd:	75 43                	jne    c0026a42 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c00269ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026a02:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026a05:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0026a0c:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026a0f:	01 ca                	add    edx,ecx
c0026a11:	8d 4a 54             	lea    ecx,[edx+0x54]
c0026a14:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0026a17:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0026a1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026a1e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026a21:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0026a28:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026a2b:	01 ca                	add    edx,ecx
c0026a2d:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0026a33:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0026a36:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0026a3a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026a3d:	83 e8 20             	sub    eax,0x20
c0026a40:	eb 1a                	jmp    c0026a5c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0026a42:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0026a45:	eb 95                	jmp    c00269dc <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0026a47:	83 ec 0c             	sub    esp,0xc
c0026a4a:	68 04 e0 02 c0       	push   0xc002e004
c0026a4f:	e8 99 3e ff ff       	call   c001a8ed <Krnl::panic(char const*)>
c0026a54:	83 c4 10             	add    esp,0x10
c0026a57:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0026a5c:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026a5f:	5b                   	pop    ebx
c0026a60:	5e                   	pop    esi
c0026a61:	5f                   	pop    edi
c0026a62:	5d                   	pop    ebp
c0026a63:	c3                   	ret    

c0026a64 <PIC::disable()>:
c0026a64:	55                   	push   ebp
c0026a65:	89 e5                	mov    ebp,esp
c0026a67:	83 ec 10             	sub    esp,0x10
c0026a6a:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0026a70:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0026a74:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026a77:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0026a7b:	ee                   	out    dx,al
c0026a7c:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0026a82:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0026a86:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0026a89:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0026a8d:	ee                   	out    dx,al
c0026a8e:	90                   	nop
c0026a8f:	c9                   	leave  
c0026a90:	c3                   	ret    
c0026a91:	90                   	nop

c0026a92 <PIC::close(int, int, void*)>:
c0026a92:	55                   	push   ebp
c0026a93:	89 e5                	mov    ebp,esp
c0026a95:	83 ec 08             	sub    esp,0x8
c0026a98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026a9b:	8b 00                	mov    eax,DWORD PTR [eax]
c0026a9d:	83 c0 3c             	add    eax,0x3c
c0026aa0:	8b 00                	mov    eax,DWORD PTR [eax]
c0026aa2:	83 ec 0c             	sub    esp,0xc
c0026aa5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026aa8:	ff d0                	call   eax
c0026aaa:	83 c4 10             	add    esp,0x10
c0026aad:	b8 00 00 00 00       	mov    eax,0x0
c0026ab2:	c9                   	leave  
c0026ab3:	c3                   	ret    

c0026ab4 <PIC::PIC()>:
c0026ab4:	83 ec 0c             	sub    esp,0xc
c0026ab7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026abb:	83 ec 08             	sub    esp,0x8
c0026abe:	68 b0 e0 02 c0       	push   0xc002e0b0
c0026ac3:	50                   	push   eax
c0026ac4:	e8 15 e1 fe ff       	call   c0014bde <InterruptController::InterruptController(char const*)>
c0026ac9:	83 c4 10             	add    esp,0x10
c0026acc:	ba dc e0 02 c0       	mov    edx,0xc002e0dc
c0026ad1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ad5:	89 10                	mov    DWORD PTR [eax],edx
c0026ad7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026adb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026ae1:	0f b6 d0             	movzx  edx,al
c0026ae4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ae8:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0026aef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026af3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026af9:	0f b6 d0             	movzx  edx,al
c0026afc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b00:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0026b05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b09:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026b0f:	8d 50 01             	lea    edx,[eax+0x1]
c0026b12:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026b16:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026b1c:	0f b6 d0             	movzx  edx,al
c0026b1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b23:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026b27:	83 e1 3f             	and    ecx,0x3f
c0026b2a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026b2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b32:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026b38:	0f b6 d0             	movzx  edx,al
c0026b3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b3f:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0026b46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b4a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026b50:	0f b6 d0             	movzx  edx,al
c0026b53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b57:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0026b5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b60:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026b66:	8d 50 01             	lea    edx,[eax+0x1]
c0026b69:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026b6d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026b73:	0f b6 d0             	movzx  edx,al
c0026b76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b7a:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026b7e:	83 e1 3f             	and    ecx,0x3f
c0026b81:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026b85:	90                   	nop
c0026b86:	83 c4 0c             	add    esp,0xc
c0026b89:	c3                   	ret    

c0026b8a <PIC::ioWait()>:
c0026b8a:	eb 00                	jmp    c0026b8c <PIC::ioWait()+0x2>
c0026b8c:	eb 00                	jmp    c0026b8e <PIC::ioWait()+0x4>
c0026b8e:	90                   	nop
c0026b8f:	c3                   	ret    

c0026b90 <PIC::getIRQReg(int)>:
c0026b90:	55                   	push   ebp
c0026b91:	89 e5                	mov    ebp,esp
c0026b93:	83 ec 10             	sub    esp,0x10
c0026b96:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026b99:	0f b6 c0             	movzx  eax,al
c0026b9c:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0026ba2:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0026ba5:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026ba8:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026bac:	ee                   	out    dx,al
c0026bad:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026bb0:	0f b6 c0             	movzx  eax,al
c0026bb3:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0026bb9:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0026bbc:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026bbf:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026bc3:	ee                   	out    dx,al
c0026bc4:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0026bca:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0026bce:	89 c2                	mov    edx,eax
c0026bd0:	ec                   	in     al,dx
c0026bd1:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0026bd4:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026bd7:	0f b6 c0             	movzx  eax,al
c0026bda:	c1 e0 08             	shl    eax,0x8
c0026bdd:	89 c1                	mov    ecx,eax
c0026bdf:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0026be5:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0026be9:	89 c2                	mov    edx,eax
c0026beb:	ec                   	in     al,dx
c0026bec:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0026bef:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0026bf2:	0f b6 c0             	movzx  eax,al
c0026bf5:	09 c8                	or     eax,ecx
c0026bf7:	c9                   	leave  
c0026bf8:	c3                   	ret    
c0026bf9:	90                   	nop

c0026bfa <PIC::eoi(unsigned char)>:
c0026bfa:	55                   	push   ebp
c0026bfb:	89 e5                	mov    ebp,esp
c0026bfd:	83 ec 14             	sub    esp,0x14
c0026c00:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026c03:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0026c06:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0026c0a:	75 1e                	jne    c0026c2a <PIC::eoi(unsigned char)+0x30>
c0026c0c:	6a 0b                	push   0xb
c0026c0e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026c11:	e8 7a ff ff ff       	call   c0026b90 <PIC::getIRQReg(int)>
c0026c16:	83 c4 08             	add    esp,0x8
c0026c19:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0026c1d:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0026c21:	25 80 00 00 00       	and    eax,0x80
c0026c26:	85 c0                	test   eax,eax
c0026c28:	74 5f                	je     c0026c89 <PIC::eoi(unsigned char)+0x8f>
c0026c2a:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0026c2e:	75 2d                	jne    c0026c5d <PIC::eoi(unsigned char)+0x63>
c0026c30:	6a 0b                	push   0xb
c0026c32:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026c35:	e8 56 ff ff ff       	call   c0026b90 <PIC::getIRQReg(int)>
c0026c3a:	83 c4 08             	add    esp,0x8
c0026c3d:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0026c41:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026c44:	66 85 c0             	test   ax,ax
c0026c47:	78 14                	js     c0026c5d <PIC::eoi(unsigned char)+0x63>
c0026c49:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0026c4f:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0026c53:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026c56:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0026c5a:	ee                   	out    dx,al
c0026c5b:	eb 2d                	jmp    c0026c8a <PIC::eoi(unsigned char)+0x90>
c0026c5d:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0026c61:	76 12                	jbe    c0026c75 <PIC::eoi(unsigned char)+0x7b>
c0026c63:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0026c69:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0026c6d:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026c70:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026c74:	ee                   	out    dx,al
c0026c75:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0026c7b:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0026c7f:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026c82:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026c86:	ee                   	out    dx,al
c0026c87:	eb 01                	jmp    c0026c8a <PIC::eoi(unsigned char)+0x90>
c0026c89:	90                   	nop
c0026c8a:	c9                   	leave  
c0026c8b:	c3                   	ret    

c0026c8c <PIC::remap()>:
c0026c8c:	55                   	push   ebp
c0026c8d:	89 e5                	mov    ebp,esp
c0026c8f:	83 ec 48             	sub    esp,0x48
c0026c92:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0026c99:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0026ca0:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0026ca6:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0026ca9:	89 c2                	mov    edx,eax
c0026cab:	ec                   	in     al,dx
c0026cac:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0026caf:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0026cb2:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0026cb5:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0026cbb:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0026cbe:	89 c2                	mov    edx,eax
c0026cc0:	ec                   	in     al,dx
c0026cc1:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0026cc4:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0026cc7:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0026cca:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0026cd0:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0026cd4:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0026cd7:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0026cda:	ee                   	out    dx,al
c0026cdb:	83 ec 0c             	sub    esp,0xc
c0026cde:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026ce1:	e8 a4 fe ff ff       	call   c0026b8a <PIC::ioWait()>
c0026ce6:	83 c4 10             	add    esp,0x10
c0026ce9:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0026cef:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0026cf3:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0026cf6:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0026cf9:	ee                   	out    dx,al
c0026cfa:	83 ec 0c             	sub    esp,0xc
c0026cfd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026d00:	e8 85 fe ff ff       	call   c0026b8a <PIC::ioWait()>
c0026d05:	83 c4 10             	add    esp,0x10
c0026d08:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0026d0b:	0f b6 c0             	movzx  eax,al
c0026d0e:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0026d14:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0026d17:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0026d1a:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0026d1d:	ee                   	out    dx,al
c0026d1e:	83 ec 0c             	sub    esp,0xc
c0026d21:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026d24:	e8 61 fe ff ff       	call   c0026b8a <PIC::ioWait()>
c0026d29:	83 c4 10             	add    esp,0x10
c0026d2c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026d2f:	0f b6 c0             	movzx  eax,al
c0026d32:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0026d38:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0026d3b:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0026d3e:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0026d41:	ee                   	out    dx,al
c0026d42:	83 ec 0c             	sub    esp,0xc
c0026d45:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026d48:	e8 3d fe ff ff       	call   c0026b8a <PIC::ioWait()>
c0026d4d:	83 c4 10             	add    esp,0x10
c0026d50:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0026d56:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0026d5a:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0026d5d:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0026d60:	ee                   	out    dx,al
c0026d61:	83 ec 0c             	sub    esp,0xc
c0026d64:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026d67:	e8 1e fe ff ff       	call   c0026b8a <PIC::ioWait()>
c0026d6c:	83 c4 10             	add    esp,0x10
c0026d6f:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0026d75:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0026d79:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0026d7c:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026d7f:	ee                   	out    dx,al
c0026d80:	83 ec 0c             	sub    esp,0xc
c0026d83:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026d86:	e8 ff fd ff ff       	call   c0026b8a <PIC::ioWait()>
c0026d8b:	83 c4 10             	add    esp,0x10
c0026d8e:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0026d94:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0026d98:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0026d9b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0026d9e:	ee                   	out    dx,al
c0026d9f:	83 ec 0c             	sub    esp,0xc
c0026da2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026da5:	e8 e0 fd ff ff       	call   c0026b8a <PIC::ioWait()>
c0026daa:	83 c4 10             	add    esp,0x10
c0026dad:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0026db3:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0026db7:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0026dba:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026dbd:	ee                   	out    dx,al
c0026dbe:	83 ec 0c             	sub    esp,0xc
c0026dc1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026dc4:	e8 c1 fd ff ff       	call   c0026b8a <PIC::ioWait()>
c0026dc9:	83 c4 10             	add    esp,0x10
c0026dcc:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0026dd0:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0026dd6:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0026dd9:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0026ddc:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0026ddf:	ee                   	out    dx,al
c0026de0:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0026de4:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0026dea:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0026ded:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0026df0:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0026df3:	ee                   	out    dx,al
c0026df4:	90                   	nop
c0026df5:	c9                   	leave  
c0026df6:	c3                   	ret    
c0026df7:	90                   	nop

c0026df8 <PIC::open(int, int, void*)>:
c0026df8:	55                   	push   ebp
c0026df9:	89 e5                	mov    ebp,esp
c0026dfb:	83 ec 18             	sub    esp,0x18
c0026dfe:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0026e04:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0026e08:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026e0b:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026e0f:	ee                   	out    dx,al
c0026e10:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0026e16:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0026e1a:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026e1d:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026e21:	ee                   	out    dx,al
c0026e22:	83 ec 0c             	sub    esp,0xc
c0026e25:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026e28:	e8 5f fe ff ff       	call   c0026c8c <PIC::remap()>
c0026e2d:	83 c4 10             	add    esp,0x10
c0026e30:	b8 00 00 00 00       	mov    eax,0x0
c0026e35:	c9                   	leave  
c0026e36:	c3                   	ret    
c0026e37:	90                   	nop

c0026e38 <APICTimer::close(int, int, void*)>:
c0026e38:	b8 00 00 00 00       	mov    eax,0x0
c0026e3d:	c3                   	ret    

c0026e3e <apicTimerHandler(regs*, void*)>:
c0026e3e:	83 ec 0c             	sub    esp,0xc
c0026e41:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026e45:	8b 00                	mov    eax,DWORD PTR [eax]
c0026e47:	99                   	cdq    
c0026e48:	52                   	push   edx
c0026e49:	50                   	push   eax
c0026e4a:	6a 00                	push   0x0
c0026e4c:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026e51:	e8 8e 07 00 00       	call   c00275e4 <__udivdi3>
c0026e56:	83 c4 10             	add    esp,0x10
c0026e59:	83 ec 08             	sub    esp,0x8
c0026e5c:	52                   	push   edx
c0026e5d:	50                   	push   eax
c0026e5e:	e8 30 ff fe ff       	call   c0016d93 <timerHandler(unsigned long long)>
c0026e63:	83 c4 10             	add    esp,0x10
c0026e66:	90                   	nop
c0026e67:	83 c4 0c             	add    esp,0xc
c0026e6a:	c3                   	ret    
c0026e6b:	90                   	nop

c0026e6c <APICTimer::write(int)>:
c0026e6c:	53                   	push   ebx
c0026e6d:	83 ec 28             	sub    esp,0x28
c0026e70:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026e74:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0026e78:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026e7e:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c0026e83:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026e89:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026e8f:	83 ec 0c             	sub    esp,0xc
c0026e92:	50                   	push   eax
c0026e93:	e8 de f4 ff ff       	call   c0026376 <APIC::getBase()>
c0026e98:	83 c4 10             	add    esp,0x10
c0026e9b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0026e9f:	a1 10 f9 02 c0       	mov    eax,ds:0xc002f910
c0026ea4:	8b 15 14 f9 02 c0    	mov    edx,DWORD PTR ds:0xc002f914
c0026eaa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0026eae:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0026eb2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026eb6:	05 e0 03 00 00       	add    eax,0x3e0
c0026ebb:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026ec1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026ec5:	05 80 03 00 00       	add    eax,0x380
c0026eca:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0026ed0:	fb                   	sti    
c0026ed1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ed5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026ed9:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0026ede:	83 d2 00             	adc    edx,0x0
c0026ee1:	89 c1                	mov    ecx,eax
c0026ee3:	89 d3                	mov    ebx,edx
c0026ee5:	a1 10 f9 02 c0       	mov    eax,ds:0xc002f910
c0026eea:	8b 15 14 f9 02 c0    	mov    edx,DWORD PTR ds:0xc002f914
c0026ef0:	39 c8                	cmp    eax,ecx
c0026ef2:	89 d0                	mov    eax,edx
c0026ef4:	19 d8                	sbb    eax,ebx
c0026ef6:	73 02                	jae    c0026efa <APICTimer::write(int)+0x8e>
c0026ef8:	eb d7                	jmp    c0026ed1 <APICTimer::write(int)+0x65>
c0026efa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026efe:	05 20 03 00 00       	add    eax,0x320
c0026f03:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0026f09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026f0d:	05 90 03 00 00       	add    eax,0x390
c0026f12:	8b 00                	mov    eax,DWORD PTR [eax]
c0026f14:	f7 d0                	not    eax
c0026f16:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026f1a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026f1e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026f22:	ba 00 00 00 00       	mov    edx,0x0
c0026f27:	f7 f3                	div    ebx
c0026f29:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026f2d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026f31:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026f37:	0d 00 00 02 00       	or     eax,0x20000
c0026f3c:	89 c2                	mov    edx,eax
c0026f3e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026f42:	05 20 03 00 00       	add    eax,0x320
c0026f47:	89 10                	mov    DWORD PTR [eax],edx
c0026f49:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026f4d:	05 e0 03 00 00       	add    eax,0x3e0
c0026f52:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026f58:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026f5c:	05 80 03 00 00       	add    eax,0x380
c0026f61:	89 c2                	mov    edx,eax
c0026f63:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026f67:	89 02                	mov    DWORD PTR [edx],eax
c0026f69:	90                   	nop
c0026f6a:	83 c4 28             	add    esp,0x28
c0026f6d:	5b                   	pop    ebx
c0026f6e:	c3                   	ret    
c0026f6f:	90                   	nop

c0026f70 <APICTimer::open(int, int, void*)>:
c0026f70:	57                   	push   edi
c0026f71:	56                   	push   esi
c0026f72:	53                   	push   ebx
c0026f73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026f77:	8b 00                	mov    eax,DWORD PTR [eax]
c0026f79:	83 c0 24             	add    eax,0x24
c0026f7c:	8b 00                	mov    eax,DWORD PTR [eax]
c0026f7e:	83 ec 08             	sub    esp,0x8
c0026f81:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026f85:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026f89:	ff d0                	call   eax
c0026f8b:	83 c4 10             	add    esp,0x10
c0026f8e:	a1 88 f2 02 c0       	mov    eax,ds:0xc002f288
c0026f93:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026f99:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026f9f:	83 ec 0c             	sub    esp,0xc
c0026fa2:	50                   	push   eax
c0026fa3:	e8 ce f3 ff ff       	call   c0026376 <APIC::getBase()>
c0026fa8:	83 c4 10             	add    esp,0x10
c0026fab:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0026fb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026fb5:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026fbb:	0f b6 f8             	movzx  edi,al
c0026fbe:	89 d0                	mov    eax,edx
c0026fc0:	ba 00 00 00 00       	mov    edx,0x0
c0026fc5:	89 c1                	mov    ecx,eax
c0026fc7:	80 e5 ff             	and    ch,0xff
c0026fca:	89 cb                	mov    ebx,ecx
c0026fcc:	0f b6 f2             	movzx  esi,dl
c0026fcf:	89 d8                	mov    eax,ebx
c0026fd1:	89 f2                	mov    edx,esi
c0026fd3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026fd7:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026fda:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0026fde:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026fe2:	83 e0 00             	and    eax,0x0
c0026fe5:	09 d0                	or     eax,edx
c0026fe7:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0026feb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026fef:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026ff5:	8d 50 01             	lea    edx,[eax+0x1]
c0026ff8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026ffc:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0027002:	0f b6 d0             	movzx  edx,al
c0027005:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027009:	83 c2 08             	add    edx,0x8
c002700c:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0027010:	0f b6 c9             	movzx  ecx,cl
c0027013:	81 c9 00 00 01 00    	or     ecx,0x10000
c0027019:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002701d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027021:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0027025:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002702b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002702f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0027033:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0027039:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002703d:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0027043:	83 ec 0c             	sub    esp,0xc
c0027046:	51                   	push   ecx
c0027047:	6a 01                	push   0x1
c0027049:	68 3e 6e 02 c0       	push   0xc0026e3e
c002704e:	52                   	push   edx
c002704f:	50                   	push   eax
c0027050:	e8 a3 d1 fe ff       	call   c00141f8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0027055:	83 c4 20             	add    esp,0x20
c0027058:	89 c2                	mov    edx,eax
c002705a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002705e:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0027064:	b8 00 00 00 00       	mov    eax,0x0
c0027069:	5b                   	pop    ebx
c002706a:	5e                   	pop    esi
c002706b:	5f                   	pop    edi
c002706c:	c3                   	ret    
c002706d:	90                   	nop

c002706e <APICTimer::APICTimer()>:
c002706e:	83 ec 0c             	sub    esp,0xc
c0027071:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027075:	83 ec 08             	sub    esp,0x8
c0027078:	68 1c e1 02 c0       	push   0xc002e11c
c002707d:	50                   	push   eax
c002707e:	e8 81 fc fe ff       	call   c0016d04 <Timer::Timer(char const*)>
c0027083:	83 c4 10             	add    esp,0x10
c0027086:	ba 30 e1 02 c0       	mov    edx,0xc002e130
c002708b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002708f:	89 10                	mov    DWORD PTR [eax],edx
c0027091:	90                   	nop
c0027092:	83 c4 0c             	add    esp,0xc
c0027095:	c3                   	ret    

c0027096 <PIT::write(int)>:
c0027096:	83 ec 10             	sub    esp,0x10
c0027099:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002709d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00270a1:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00270a7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00270ab:	a3 44 36 03 c0       	mov    ds:0xc0033644,eax
c00270b0:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00270b5:	99                   	cdq    
c00270b6:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c00270ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00270be:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c00270c5:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c00270ca:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00270ce:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00270d3:	ee                   	out    dx,al
c00270d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00270d8:	0f b6 c0             	movzx  eax,al
c00270db:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c00270e2:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00270e6:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00270ea:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00270ef:	ee                   	out    dx,al
c00270f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00270f4:	c1 f8 08             	sar    eax,0x8
c00270f7:	0f b6 c0             	movzx  eax,al
c00270fa:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0027101:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0027105:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0027109:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c002710e:	ee                   	out    dx,al
c002710f:	90                   	nop
c0027110:	83 c4 10             	add    esp,0x10
c0027113:	c3                   	ret    

c0027114 <pitHandler(regs*, void*)>:
c0027114:	83 ec 0c             	sub    esp,0xc
c0027117:	a1 44 36 03 c0       	mov    eax,ds:0xc0033644
c002711c:	99                   	cdq    
c002711d:	52                   	push   edx
c002711e:	50                   	push   eax
c002711f:	6a 00                	push   0x0
c0027121:	68 00 ca 9a 3b       	push   0x3b9aca00
c0027126:	e8 b9 04 00 00       	call   c00275e4 <__udivdi3>
c002712b:	83 c4 10             	add    esp,0x10
c002712e:	83 ec 08             	sub    esp,0x8
c0027131:	52                   	push   edx
c0027132:	50                   	push   eax
c0027133:	e8 5b fc fe ff       	call   c0016d93 <timerHandler(unsigned long long)>
c0027138:	83 c4 10             	add    esp,0x10
c002713b:	90                   	nop
c002713c:	83 c4 0c             	add    esp,0xc
c002713f:	c3                   	ret    

c0027140 <PIT::open(int, int, void*)>:
c0027140:	83 ec 0c             	sub    esp,0xc
c0027143:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027147:	8b 00                	mov    eax,DWORD PTR [eax]
c0027149:	83 c0 24             	add    eax,0x24
c002714c:	8b 00                	mov    eax,DWORD PTR [eax]
c002714e:	83 ec 08             	sub    esp,0x8
c0027151:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027155:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027159:	ff d0                	call   eax
c002715b:	83 c4 10             	add    esp,0x10
c002715e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027162:	83 ec 0c             	sub    esp,0xc
c0027165:	6a 00                	push   0x0
c0027167:	6a 01                	push   0x1
c0027169:	68 14 71 02 c0       	push   0xc0027114
c002716e:	6a 00                	push   0x0
c0027170:	50                   	push   eax
c0027171:	e8 82 d0 fe ff       	call   c00141f8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0027176:	83 c4 20             	add    esp,0x20
c0027179:	89 c2                	mov    edx,eax
c002717b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002717f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0027185:	b8 00 00 00 00       	mov    eax,0x0
c002718a:	83 c4 0c             	add    esp,0xc
c002718d:	c3                   	ret    

c002718e <PIT::close(int, int, void*)>:
c002718e:	83 ec 0c             	sub    esp,0xc
c0027191:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027195:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c002719f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00271a3:	6a 01                	push   0x1
c00271a5:	68 14 71 02 c0       	push   0xc0027114
c00271aa:	6a 00                	push   0x0
c00271ac:	50                   	push   eax
c00271ad:	e8 84 d0 fe ff       	call   c0014236 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c00271b2:	83 c4 10             	add    esp,0x10
c00271b5:	b8 00 00 00 00       	mov    eax,0x0
c00271ba:	83 c4 0c             	add    esp,0xc
c00271bd:	c3                   	ret    

c00271be <PIT::PIT()>:
c00271be:	83 ec 0c             	sub    esp,0xc
c00271c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00271c5:	83 ec 08             	sub    esp,0x8
c00271c8:	68 58 e1 02 c0       	push   0xc002e158
c00271cd:	50                   	push   eax
c00271ce:	e8 31 fb fe ff       	call   c0016d04 <Timer::Timer(char const*)>
c00271d3:	83 c4 10             	add    esp,0x10
c00271d6:	ba 80 e1 02 c0       	mov    edx,0xc002e180
c00271db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00271df:	89 10                	mov    DWORD PTR [eax],edx
c00271e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00271e5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00271eb:	0f b6 d0             	movzx  edx,al
c00271ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00271f2:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c00271f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00271fd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0027203:	0f b6 d0             	movzx  edx,al
c0027206:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002720a:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c002720f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027213:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0027219:	8d 50 01             	lea    edx,[eax+0x1]
c002721c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0027220:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0027226:	0f b6 d0             	movzx  edx,al
c0027229:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002722d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0027231:	83 e1 3f             	and    ecx,0x3f
c0027234:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0027238:	90                   	nop
c0027239:	83 c4 0c             	add    esp,0xc
c002723c:	c3                   	ret    
c002723d:	66 90                	xchg   ax,ax
c002723f:	90                   	nop

c0027240 <avxDetect>:
c0027240:	b8 00 00 00 00       	mov    eax,0x0
c0027245:	c3                   	ret    

c0027246 <avxSave>:
c0027246:	c3                   	ret    

c0027247 <avxLoad>:
c0027247:	c3                   	ret    

c0027248 <avxInit>:
c0027248:	c3                   	ret    

c0027249 <avxClose>:
c0027249:	c3                   	ret    

c002724a <wouldSheSayYes>:
c002724a:	c3                   	ret    
c002724b:	49                   	dec    ecx
c002724c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0027250:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0027254:	75 20                	jne    c0027276 <sseDetect.noSSE+0x1>
c0027256:	4e                   	dec    esi
c0027257:	79 61                	jns    c00272ba <x87Detect+0x14>
c0027259:	68 2e 2e 2e 00       	push   0x2e2e2e
c002725e:	66 90                	xchg   ax,ax

c0027260 <absolutelyNoChanceInHell>:
c0027260:	b8 01 00 00 00       	mov    eax,0x1
c0027265:	0f a2                	cpuid  
c0027267:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002726d:	74 06                	je     c0027275 <sseDetect.noSSE>
c002726f:	b8 01 00 00 00       	mov    eax,0x1
c0027274:	c3                   	ret    

c0027275 <sseDetect.noSSE>:
c0027275:	31 c0                	xor    eax,eax
c0027277:	c3                   	ret    

c0027278 <sseSave>:
c0027278:	0f ae 44 24 04       	fxsave [esp+0x4]
c002727d:	c3                   	ret    

c002727e <sseLoad>:
c002727e:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c0027283:	c3                   	ret    

c0027284 <sseInit>:
c0027284:	e8 49 00 00 00       	call   c00272d2 <x87Init>
c0027289:	0f 20 e0             	mov    eax,cr4
c002728c:	66 0d 00 06          	or     ax,0x600
c0027290:	0f 22 e0             	mov    cr4,eax
c0027293:	c3                   	ret    

c0027294 <sseClose>:
c0027294:	c3                   	ret    
c0027295:	66 90                	xchg   ax,ax
c0027297:	66 90                	xchg   ax,ax
c0027299:	66 90                	xchg   ax,ax
c002729b:	66 90                	xchg   ax,ax
c002729d:	66 90                	xchg   ax,ax
c002729f:	90                   	nop

c00272a0 <value_37F>:
c00272a0:	7f 03                	jg     c00272a5 <value_37A+0x1>

c00272a2 <value_37E>:
c00272a2:	7e 03                	jle    c00272a7 <x87Detect+0x1>

c00272a4 <value_37A>:
c00272a4:	7a 03                	jp     c00272a9 <x87Detect+0x3>

c00272a6 <x87Detect>:
c00272a6:	b8 01 00 00 00       	mov    eax,0x1
c00272ab:	0f a2                	cpuid  
c00272ad:	f7 c2 01 00 00 00    	test   edx,0x1
c00272b3:	74 06                	je     c00272bb <x87Detect.nox87>
c00272b5:	b8 01 00 00 00       	mov    eax,0x1
c00272ba:	c3                   	ret    

c00272bb <x87Detect.nox87>:
c00272bb:	b8 00 00 00 00       	mov    eax,0x0
c00272c0:	c3                   	ret    

c00272c1 <x87Save>:
c00272c1:	55                   	push   ebp
c00272c2:	89 e5                	mov    ebp,esp
c00272c4:	9b dd 75 08          	fsave  [ebp+0x8]
c00272c8:	c9                   	leave  
c00272c9:	c3                   	ret    

c00272ca <x87Load>:
c00272ca:	55                   	push   ebp
c00272cb:	89 e5                	mov    ebp,esp
c00272cd:	dd 65 08             	frstor [ebp+0x8]
c00272d0:	c9                   	leave  
c00272d1:	c3                   	ret    

c00272d2 <x87Init>:
c00272d2:	9b db e3             	finit  
c00272d5:	0f 20 c0             	mov    eax,cr0
c00272d8:	66 25 fb ff          	and    ax,0xfffb
c00272dc:	66 0d 22 00          	or     ax,0x22
c00272e0:	0f 22 c0             	mov    cr0,eax
c00272e3:	0f 06                	clts   
c00272e5:	d9 2d a4 72 02 c0    	fldcw  WORD PTR ds:0xc00272a4
c00272eb:	c3                   	ret    

c00272ec <x87Close>:
c00272ec:	c3                   	ret    
c00272ed:	66 90                	xchg   ax,ax
c00272ef:	90                   	nop

c00272f0 <__do_global_ctors_aux>:
c00272f0:	a1 28 9f 02 c0       	mov    eax,ds:0xc0029f28
c00272f5:	83 f8 ff             	cmp    eax,0xffffffff
c00272f8:	74 1a                	je     c0027314 <__do_global_ctors_aux+0x24>
c00272fa:	55                   	push   ebp
c00272fb:	89 e5                	mov    ebp,esp
c00272fd:	53                   	push   ebx
c00272fe:	52                   	push   edx
c00272ff:	bb 28 9f 02 c0       	mov    ebx,0xc0029f28
c0027304:	ff d0                	call   eax
c0027306:	83 eb 04             	sub    ebx,0x4
c0027309:	8b 03                	mov    eax,DWORD PTR [ebx]
c002730b:	83 f8 ff             	cmp    eax,0xffffffff
c002730e:	75 f4                	jne    c0027304 <__do_global_ctors_aux+0x14>
c0027310:	58                   	pop    eax
c0027311:	5b                   	pop    ebx
c0027312:	5d                   	pop    ebp
c0027313:	c3                   	ret    
c0027314:	c3                   	ret    
c0027315:	66 90                	xchg   ax,ax
c0027317:	90                   	nop

c0027318 <__divdi3>:
c0027318:	55                   	push   ebp
c0027319:	57                   	push   edi
c002731a:	56                   	push   esi
c002731b:	53                   	push   ebx
c002731c:	83 ec 1c             	sub    esp,0x1c
c002731f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0027323:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0027327:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002732a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002732e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0027332:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0027336:	85 db                	test   ebx,ebx
c0027338:	0f 88 8e 00 00 00    	js     c00273cc <__divdi3+0xb4>
c002733e:	89 dd                	mov    ebp,ebx
c0027340:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0027348:	89 d3                	mov    ebx,edx
c002734a:	85 d2                	test   edx,edx
c002734c:	79 0d                	jns    c002735b <__divdi3+0x43>
c002734e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0027352:	f7 d8                	neg    eax
c0027354:	83 d2 00             	adc    edx,0x0
c0027357:	f7 da                	neg    edx
c0027359:	89 d3                	mov    ebx,edx
c002735b:	89 c7                	mov    edi,eax
c002735d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0027360:	85 db                	test   ebx,ebx
c0027362:	75 48                	jne    c00273ac <__divdi3+0x94>
c0027364:	39 ef                	cmp    edi,ebp
c0027366:	76 24                	jbe    c002738c <__divdi3+0x74>
c0027368:	89 ea                	mov    edx,ebp
c002736a:	f7 f7                	div    edi
c002736c:	89 c1                	mov    ecx,eax
c002736e:	31 f6                	xor    esi,esi
c0027370:	89 c8                	mov    eax,ecx
c0027372:	89 f2                	mov    edx,esi
c0027374:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0027378:	85 c9                	test   ecx,ecx
c002737a:	74 07                	je     c0027383 <__divdi3+0x6b>
c002737c:	f7 d8                	neg    eax
c002737e:	83 d2 00             	adc    edx,0x0
c0027381:	f7 da                	neg    edx
c0027383:	83 c4 1c             	add    esp,0x1c
c0027386:	5b                   	pop    ebx
c0027387:	5e                   	pop    esi
c0027388:	5f                   	pop    edi
c0027389:	5d                   	pop    ebp
c002738a:	c3                   	ret    
c002738b:	90                   	nop
c002738c:	85 ff                	test   edi,edi
c002738e:	75 0b                	jne    c002739b <__divdi3+0x83>
c0027390:	b8 01 00 00 00       	mov    eax,0x1
c0027395:	31 d2                	xor    edx,edx
c0027397:	f7 f3                	div    ebx
c0027399:	89 c7                	mov    edi,eax
c002739b:	31 d2                	xor    edx,edx
c002739d:	89 e8                	mov    eax,ebp
c002739f:	f7 f7                	div    edi
c00273a1:	89 c6                	mov    esi,eax
c00273a3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00273a6:	f7 f7                	div    edi
c00273a8:	89 c1                	mov    ecx,eax
c00273aa:	eb c4                	jmp    c0027370 <__divdi3+0x58>
c00273ac:	39 eb                	cmp    ebx,ebp
c00273ae:	77 3c                	ja     c00273ec <__divdi3+0xd4>
c00273b0:	0f bd f3             	bsr    esi,ebx
c00273b3:	83 f6 1f             	xor    esi,0x1f
c00273b6:	75 40                	jne    c00273f8 <__divdi3+0xe0>
c00273b8:	39 eb                	cmp    ebx,ebp
c00273ba:	72 09                	jb     c00273c5 <__divdi3+0xad>
c00273bc:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c00273bf:	0f 87 97 00 00 00    	ja     c002745c <__divdi3+0x144>
c00273c5:	b9 01 00 00 00       	mov    ecx,0x1
c00273ca:	eb a4                	jmp    c0027370 <__divdi3+0x58>
c00273cc:	f7 d9                	neg    ecx
c00273ce:	83 d3 00             	adc    ebx,0x0
c00273d1:	f7 db                	neg    ebx
c00273d3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00273d6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00273da:	89 dd                	mov    ebp,ebx
c00273dc:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c00273e4:	e9 5f ff ff ff       	jmp    c0027348 <__divdi3+0x30>
c00273e9:	8d 76 00             	lea    esi,[esi+0x0]
c00273ec:	31 f6                	xor    esi,esi
c00273ee:	31 c9                	xor    ecx,ecx
c00273f0:	e9 7b ff ff ff       	jmp    c0027370 <__divdi3+0x58>
c00273f5:	8d 76 00             	lea    esi,[esi+0x0]
c00273f8:	b8 20 00 00 00       	mov    eax,0x20
c00273fd:	29 f0                	sub    eax,esi
c00273ff:	89 f1                	mov    ecx,esi
c0027401:	d3 e3                	shl    ebx,cl
c0027403:	89 fa                	mov    edx,edi
c0027405:	88 c1                	mov    cl,al
c0027407:	d3 ea                	shr    edx,cl
c0027409:	09 da                	or     edx,ebx
c002740b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002740f:	89 f1                	mov    ecx,esi
c0027411:	d3 e7                	shl    edi,cl
c0027413:	89 eb                	mov    ebx,ebp
c0027415:	88 c1                	mov    cl,al
c0027417:	d3 eb                	shr    ebx,cl
c0027419:	89 f1                	mov    ecx,esi
c002741b:	d3 e5                	shl    ebp,cl
c002741d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0027420:	88 c1                	mov    cl,al
c0027422:	d3 ea                	shr    edx,cl
c0027424:	09 d5                	or     ebp,edx
c0027426:	89 e8                	mov    eax,ebp
c0027428:	89 da                	mov    edx,ebx
c002742a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002742e:	89 d3                	mov    ebx,edx
c0027430:	89 c5                	mov    ebp,eax
c0027432:	f7 e7                	mul    edi
c0027434:	39 d3                	cmp    ebx,edx
c0027436:	72 18                	jb     c0027450 <__divdi3+0x138>
c0027438:	74 0a                	je     c0027444 <__divdi3+0x12c>
c002743a:	89 e9                	mov    ecx,ebp
c002743c:	31 f6                	xor    esi,esi
c002743e:	e9 2d ff ff ff       	jmp    c0027370 <__divdi3+0x58>
c0027443:	90                   	nop
c0027444:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0027447:	89 f1                	mov    ecx,esi
c0027449:	d3 e7                	shl    edi,cl
c002744b:	39 c7                	cmp    edi,eax
c002744d:	73 eb                	jae    c002743a <__divdi3+0x122>
c002744f:	90                   	nop
c0027450:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0027453:	31 f6                	xor    esi,esi
c0027455:	e9 16 ff ff ff       	jmp    c0027370 <__divdi3+0x58>
c002745a:	66 90                	xchg   ax,ax
c002745c:	31 c9                	xor    ecx,ecx
c002745e:	e9 0d ff ff ff       	jmp    c0027370 <__divdi3+0x58>
c0027463:	90                   	nop

c0027464 <__moddi3>:
c0027464:	55                   	push   ebp
c0027465:	57                   	push   edi
c0027466:	56                   	push   esi
c0027467:	53                   	push   ebx
c0027468:	83 ec 2c             	sub    esp,0x2c
c002746b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002746f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0027473:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0027477:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002747b:	85 db                	test   ebx,ebx
c002747d:	0f 88 85 00 00 00    	js     c0027508 <__moddi3+0xa4>
c0027483:	89 de                	mov    esi,ebx
c0027485:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002748d:	89 d7                	mov    edi,edx
c002748f:	85 d2                	test   edx,edx
c0027491:	79 09                	jns    c002749c <__moddi3+0x38>
c0027493:	f7 d8                	neg    eax
c0027495:	83 d2 00             	adc    edx,0x0
c0027498:	f7 da                	neg    edx
c002749a:	89 d7                	mov    edi,edx
c002749c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00274a0:	89 cd                	mov    ebp,ecx
c00274a2:	85 ff                	test   edi,edi
c00274a4:	75 52                	jne    c00274f8 <__moddi3+0x94>
c00274a6:	89 c3                	mov    ebx,eax
c00274a8:	39 f0                	cmp    eax,esi
c00274aa:	76 24                	jbe    c00274d0 <__moddi3+0x6c>
c00274ac:	89 c8                	mov    eax,ecx
c00274ae:	89 f2                	mov    edx,esi
c00274b0:	f7 f3                	div    ebx
c00274b2:	89 d6                	mov    esi,edx
c00274b4:	89 f0                	mov    eax,esi
c00274b6:	31 d2                	xor    edx,edx
c00274b8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00274bc:	85 c9                	test   ecx,ecx
c00274be:	74 07                	je     c00274c7 <__moddi3+0x63>
c00274c0:	f7 d8                	neg    eax
c00274c2:	83 d2 00             	adc    edx,0x0
c00274c5:	f7 da                	neg    edx
c00274c7:	83 c4 2c             	add    esp,0x2c
c00274ca:	5b                   	pop    ebx
c00274cb:	5e                   	pop    esi
c00274cc:	5f                   	pop    edi
c00274cd:	5d                   	pop    ebp
c00274ce:	c3                   	ret    
c00274cf:	90                   	nop
c00274d0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00274d4:	85 db                	test   ebx,ebx
c00274d6:	75 0d                	jne    c00274e5 <__moddi3+0x81>
c00274d8:	b8 01 00 00 00       	mov    eax,0x1
c00274dd:	31 d2                	xor    edx,edx
c00274df:	f7 f7                	div    edi
c00274e1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00274e5:	89 f0                	mov    eax,esi
c00274e7:	31 d2                	xor    edx,edx
c00274e9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00274ed:	f7 f7                	div    edi
c00274ef:	89 e8                	mov    eax,ebp
c00274f1:	f7 f7                	div    edi
c00274f3:	89 d6                	mov    esi,edx
c00274f5:	eb bd                	jmp    c00274b4 <__moddi3+0x50>
c00274f7:	90                   	nop
c00274f8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00274fc:	39 f7                	cmp    edi,esi
c00274fe:	76 20                	jbe    c0027520 <__moddi3+0xbc>
c0027500:	89 c8                	mov    eax,ecx
c0027502:	89 f2                	mov    edx,esi
c0027504:	eb b2                	jmp    c00274b8 <__moddi3+0x54>
c0027506:	66 90                	xchg   ax,ax
c0027508:	f7 d9                	neg    ecx
c002750a:	83 d3 00             	adc    ebx,0x0
c002750d:	f7 db                	neg    ebx
c002750f:	89 de                	mov    esi,ebx
c0027511:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0027519:	e9 6f ff ff ff       	jmp    c002748d <__moddi3+0x29>
c002751e:	66 90                	xchg   ax,ax
c0027520:	0f bd c7             	bsr    eax,edi
c0027523:	83 f0 1f             	xor    eax,0x1f
c0027526:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002752a:	75 24                	jne    c0027550 <__moddi3+0xec>
c002752c:	39 f7                	cmp    edi,esi
c002752e:	72 06                	jb     c0027536 <__moddi3+0xd2>
c0027530:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0027534:	77 0c                	ja     c0027542 <__moddi3+0xde>
c0027536:	89 e9                	mov    ecx,ebp
c0027538:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002753c:	19 fe                	sbb    esi,edi
c002753e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0027542:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0027546:	89 f2                	mov    edx,esi
c0027548:	e9 6b ff ff ff       	jmp    c00274b8 <__moddi3+0x54>
c002754d:	8d 76 00             	lea    esi,[esi+0x0]
c0027550:	b8 20 00 00 00       	mov    eax,0x20
c0027555:	89 c2                	mov    edx,eax
c0027557:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002755b:	29 da                	sub    edx,ebx
c002755d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0027561:	88 d9                	mov    cl,bl
c0027563:	d3 e7                	shl    edi,cl
c0027565:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0027569:	88 d1                	mov    cl,dl
c002756b:	d3 e8                	shr    eax,cl
c002756d:	09 c7                	or     edi,eax
c002756f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0027573:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0027577:	89 d8                	mov    eax,ebx
c0027579:	88 d9                	mov    cl,bl
c002757b:	d3 e7                	shl    edi,cl
c002757d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0027581:	89 f3                	mov    ebx,esi
c0027583:	88 d1                	mov    cl,dl
c0027585:	d3 eb                	shr    ebx,cl
c0027587:	89 c7                	mov    edi,eax
c0027589:	88 c1                	mov    cl,al
c002758b:	d3 e6                	shl    esi,cl
c002758d:	89 e8                	mov    eax,ebp
c002758f:	88 d1                	mov    cl,dl
c0027591:	d3 e8                	shr    eax,cl
c0027593:	09 f0                	or     eax,esi
c0027595:	89 f9                	mov    ecx,edi
c0027597:	d3 e5                	shl    ebp,cl
c0027599:	89 da                	mov    edx,ebx
c002759b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c002759f:	89 d3                	mov    ebx,edx
c00275a1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00275a5:	89 c6                	mov    esi,eax
c00275a7:	89 d1                	mov    ecx,edx
c00275a9:	39 d3                	cmp    ebx,edx
c00275ab:	72 27                	jb     c00275d4 <__moddi3+0x170>
c00275ad:	74 21                	je     c00275d0 <__moddi3+0x16c>
c00275af:	29 f5                	sub    ebp,esi
c00275b1:	19 cb                	sbb    ebx,ecx
c00275b3:	89 de                	mov    esi,ebx
c00275b5:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c00275b9:	d3 e6                	shl    esi,cl
c00275bb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00275bf:	89 f9                	mov    ecx,edi
c00275c1:	d3 ed                	shr    ebp,cl
c00275c3:	09 ee                	or     esi,ebp
c00275c5:	89 f0                	mov    eax,esi
c00275c7:	d3 eb                	shr    ebx,cl
c00275c9:	89 da                	mov    edx,ebx
c00275cb:	e9 e8 fe ff ff       	jmp    c00274b8 <__moddi3+0x54>
c00275d0:	39 c5                	cmp    ebp,eax
c00275d2:	73 db                	jae    c00275af <__moddi3+0x14b>
c00275d4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00275d8:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00275dc:	89 d1                	mov    ecx,edx
c00275de:	89 c6                	mov    esi,eax
c00275e0:	eb cd                	jmp    c00275af <__moddi3+0x14b>
c00275e2:	66 90                	xchg   ax,ax

c00275e4 <__udivdi3>:
c00275e4:	55                   	push   ebp
c00275e5:	57                   	push   edi
c00275e6:	56                   	push   esi
c00275e7:	53                   	push   ebx
c00275e8:	83 ec 1c             	sub    esp,0x1c
c00275eb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00275ef:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00275f3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00275f7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00275fb:	85 d2                	test   edx,edx
c00275fd:	75 41                	jne    c0027640 <__udivdi3+0x5c>
c00275ff:	39 f7                	cmp    edi,esi
c0027601:	76 15                	jbe    c0027618 <__udivdi3+0x34>
c0027603:	89 e8                	mov    eax,ebp
c0027605:	89 f2                	mov    edx,esi
c0027607:	f7 f7                	div    edi
c0027609:	31 db                	xor    ebx,ebx
c002760b:	89 da                	mov    edx,ebx
c002760d:	83 c4 1c             	add    esp,0x1c
c0027610:	5b                   	pop    ebx
c0027611:	5e                   	pop    esi
c0027612:	5f                   	pop    edi
c0027613:	5d                   	pop    ebp
c0027614:	c3                   	ret    
c0027615:	8d 76 00             	lea    esi,[esi+0x0]
c0027618:	89 f9                	mov    ecx,edi
c002761a:	85 ff                	test   edi,edi
c002761c:	75 0b                	jne    c0027629 <__udivdi3+0x45>
c002761e:	b8 01 00 00 00       	mov    eax,0x1
c0027623:	31 d2                	xor    edx,edx
c0027625:	f7 f7                	div    edi
c0027627:	89 c1                	mov    ecx,eax
c0027629:	31 d2                	xor    edx,edx
c002762b:	89 f0                	mov    eax,esi
c002762d:	f7 f1                	div    ecx
c002762f:	89 c3                	mov    ebx,eax
c0027631:	89 e8                	mov    eax,ebp
c0027633:	f7 f1                	div    ecx
c0027635:	89 da                	mov    edx,ebx
c0027637:	83 c4 1c             	add    esp,0x1c
c002763a:	5b                   	pop    ebx
c002763b:	5e                   	pop    esi
c002763c:	5f                   	pop    edi
c002763d:	5d                   	pop    ebp
c002763e:	c3                   	ret    
c002763f:	90                   	nop
c0027640:	39 f2                	cmp    edx,esi
c0027642:	77 1c                	ja     c0027660 <__udivdi3+0x7c>
c0027644:	0f bd da             	bsr    ebx,edx
c0027647:	83 f3 1f             	xor    ebx,0x1f
c002764a:	75 24                	jne    c0027670 <__udivdi3+0x8c>
c002764c:	39 f2                	cmp    edx,esi
c002764e:	72 08                	jb     c0027658 <__udivdi3+0x74>
c0027650:	39 ef                	cmp    edi,ebp
c0027652:	0f 87 84 00 00 00    	ja     c00276dc <__udivdi3+0xf8>
c0027658:	b8 01 00 00 00       	mov    eax,0x1
c002765d:	eb ac                	jmp    c002760b <__udivdi3+0x27>
c002765f:	90                   	nop
c0027660:	31 db                	xor    ebx,ebx
c0027662:	31 c0                	xor    eax,eax
c0027664:	89 da                	mov    edx,ebx
c0027666:	83 c4 1c             	add    esp,0x1c
c0027669:	5b                   	pop    ebx
c002766a:	5e                   	pop    esi
c002766b:	5f                   	pop    edi
c002766c:	5d                   	pop    ebp
c002766d:	c3                   	ret    
c002766e:	66 90                	xchg   ax,ax
c0027670:	b8 20 00 00 00       	mov    eax,0x20
c0027675:	29 d8                	sub    eax,ebx
c0027677:	88 d9                	mov    cl,bl
c0027679:	d3 e2                	shl    edx,cl
c002767b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002767f:	89 fa                	mov    edx,edi
c0027681:	88 c1                	mov    cl,al
c0027683:	d3 ea                	shr    edx,cl
c0027685:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0027689:	09 d1                	or     ecx,edx
c002768b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002768f:	88 d9                	mov    cl,bl
c0027691:	d3 e7                	shl    edi,cl
c0027693:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0027697:	89 f7                	mov    edi,esi
c0027699:	88 c1                	mov    cl,al
c002769b:	d3 ef                	shr    edi,cl
c002769d:	88 d9                	mov    cl,bl
c002769f:	d3 e6                	shl    esi,cl
c00276a1:	89 ea                	mov    edx,ebp
c00276a3:	88 c1                	mov    cl,al
c00276a5:	d3 ea                	shr    edx,cl
c00276a7:	09 d6                	or     esi,edx
c00276a9:	89 f0                	mov    eax,esi
c00276ab:	89 fa                	mov    edx,edi
c00276ad:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00276b1:	89 d7                	mov    edi,edx
c00276b3:	89 c6                	mov    esi,eax
c00276b5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00276b9:	39 d7                	cmp    edi,edx
c00276bb:	72 13                	jb     c00276d0 <__udivdi3+0xec>
c00276bd:	74 09                	je     c00276c8 <__udivdi3+0xe4>
c00276bf:	89 f0                	mov    eax,esi
c00276c1:	31 db                	xor    ebx,ebx
c00276c3:	e9 43 ff ff ff       	jmp    c002760b <__udivdi3+0x27>
c00276c8:	88 d9                	mov    cl,bl
c00276ca:	d3 e5                	shl    ebp,cl
c00276cc:	39 c5                	cmp    ebp,eax
c00276ce:	73 ef                	jae    c00276bf <__udivdi3+0xdb>
c00276d0:	8d 46 ff             	lea    eax,[esi-0x1]
c00276d3:	31 db                	xor    ebx,ebx
c00276d5:	e9 31 ff ff ff       	jmp    c002760b <__udivdi3+0x27>
c00276da:	66 90                	xchg   ax,ax
c00276dc:	31 c0                	xor    eax,eax
c00276de:	e9 28 ff ff ff       	jmp    c002760b <__udivdi3+0x27>
c00276e3:	90                   	nop

c00276e4 <__umoddi3>:
c00276e4:	55                   	push   ebp
c00276e5:	57                   	push   edi
c00276e6:	56                   	push   esi
c00276e7:	53                   	push   ebx
c00276e8:	83 ec 1c             	sub    esp,0x1c
c00276eb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00276ef:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00276f3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00276f7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00276fb:	89 da                	mov    edx,ebx
c00276fd:	85 c0                	test   eax,eax
c00276ff:	75 37                	jne    c0027738 <__umoddi3+0x54>
c0027701:	39 df                	cmp    edi,ebx
c0027703:	76 13                	jbe    c0027718 <__umoddi3+0x34>
c0027705:	89 f0                	mov    eax,esi
c0027707:	f7 f7                	div    edi
c0027709:	89 d0                	mov    eax,edx
c002770b:	31 d2                	xor    edx,edx
c002770d:	83 c4 1c             	add    esp,0x1c
c0027710:	5b                   	pop    ebx
c0027711:	5e                   	pop    esi
c0027712:	5f                   	pop    edi
c0027713:	5d                   	pop    ebp
c0027714:	c3                   	ret    
c0027715:	8d 76 00             	lea    esi,[esi+0x0]
c0027718:	89 fd                	mov    ebp,edi
c002771a:	85 ff                	test   edi,edi
c002771c:	75 0b                	jne    c0027729 <__umoddi3+0x45>
c002771e:	b8 01 00 00 00       	mov    eax,0x1
c0027723:	31 d2                	xor    edx,edx
c0027725:	f7 f7                	div    edi
c0027727:	89 c5                	mov    ebp,eax
c0027729:	89 d8                	mov    eax,ebx
c002772b:	31 d2                	xor    edx,edx
c002772d:	f7 f5                	div    ebp
c002772f:	89 f0                	mov    eax,esi
c0027731:	f7 f5                	div    ebp
c0027733:	89 d0                	mov    eax,edx
c0027735:	eb d4                	jmp    c002770b <__umoddi3+0x27>
c0027737:	90                   	nop
c0027738:	89 f1                	mov    ecx,esi
c002773a:	39 d8                	cmp    eax,ebx
c002773c:	76 0a                	jbe    c0027748 <__umoddi3+0x64>
c002773e:	89 f0                	mov    eax,esi
c0027740:	83 c4 1c             	add    esp,0x1c
c0027743:	5b                   	pop    ebx
c0027744:	5e                   	pop    esi
c0027745:	5f                   	pop    edi
c0027746:	5d                   	pop    ebp
c0027747:	c3                   	ret    
c0027748:	0f bd e8             	bsr    ebp,eax
c002774b:	83 f5 1f             	xor    ebp,0x1f
c002774e:	75 1c                	jne    c002776c <__umoddi3+0x88>
c0027750:	39 d8                	cmp    eax,ebx
c0027752:	72 04                	jb     c0027758 <__umoddi3+0x74>
c0027754:	39 f7                	cmp    edi,esi
c0027756:	77 08                	ja     c0027760 <__umoddi3+0x7c>
c0027758:	89 da                	mov    edx,ebx
c002775a:	29 fe                	sub    esi,edi
c002775c:	19 c2                	sbb    edx,eax
c002775e:	89 f1                	mov    ecx,esi
c0027760:	89 c8                	mov    eax,ecx
c0027762:	83 c4 1c             	add    esp,0x1c
c0027765:	5b                   	pop    ebx
c0027766:	5e                   	pop    esi
c0027767:	5f                   	pop    edi
c0027768:	5d                   	pop    ebp
c0027769:	c3                   	ret    
c002776a:	66 90                	xchg   ax,ax
c002776c:	ba 20 00 00 00       	mov    edx,0x20
c0027771:	29 ea                	sub    edx,ebp
c0027773:	89 e9                	mov    ecx,ebp
c0027775:	d3 e0                	shl    eax,cl
c0027777:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002777b:	89 f8                	mov    eax,edi
c002777d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0027781:	88 d1                	mov    cl,dl
c0027783:	d3 e8                	shr    eax,cl
c0027785:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0027789:	09 c1                	or     ecx,eax
c002778b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002778f:	89 e9                	mov    ecx,ebp
c0027791:	d3 e7                	shl    edi,cl
c0027793:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0027797:	89 d8                	mov    eax,ebx
c0027799:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002779d:	88 d1                	mov    cl,dl
c002779f:	d3 e8                	shr    eax,cl
c00277a1:	89 c7                	mov    edi,eax
c00277a3:	89 e9                	mov    ecx,ebp
c00277a5:	d3 e3                	shl    ebx,cl
c00277a7:	89 f0                	mov    eax,esi
c00277a9:	88 d1                	mov    cl,dl
c00277ab:	d3 e8                	shr    eax,cl
c00277ad:	09 d8                	or     eax,ebx
c00277af:	89 e9                	mov    ecx,ebp
c00277b1:	d3 e6                	shl    esi,cl
c00277b3:	89 f3                	mov    ebx,esi
c00277b5:	89 fa                	mov    edx,edi
c00277b7:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00277bb:	89 d1                	mov    ecx,edx
c00277bd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00277c1:	89 c6                	mov    esi,eax
c00277c3:	89 d7                	mov    edi,edx
c00277c5:	39 d1                	cmp    ecx,edx
c00277c7:	72 27                	jb     c00277f0 <__umoddi3+0x10c>
c00277c9:	74 21                	je     c00277ec <__umoddi3+0x108>
c00277cb:	89 ca                	mov    edx,ecx
c00277cd:	29 f3                	sub    ebx,esi
c00277cf:	19 fa                	sbb    edx,edi
c00277d1:	89 d0                	mov    eax,edx
c00277d3:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00277d7:	d3 e0                	shl    eax,cl
c00277d9:	89 e9                	mov    ecx,ebp
c00277db:	d3 eb                	shr    ebx,cl
c00277dd:	09 d8                	or     eax,ebx
c00277df:	d3 ea                	shr    edx,cl
c00277e1:	83 c4 1c             	add    esp,0x1c
c00277e4:	5b                   	pop    ebx
c00277e5:	5e                   	pop    esi
c00277e6:	5f                   	pop    edi
c00277e7:	5d                   	pop    ebp
c00277e8:	c3                   	ret    
c00277e9:	8d 76 00             	lea    esi,[esi+0x0]
c00277ec:	39 c3                	cmp    ebx,eax
c00277ee:	73 db                	jae    c00277cb <__umoddi3+0xe7>
c00277f0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00277f4:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c00277f8:	89 d7                	mov    edi,edx
c00277fa:	89 c6                	mov    esi,eax
c00277fc:	eb cd                	jmp    c00277cb <__umoddi3+0xe7>

c00277fe <__addsf3>:
c00277fe:	55                   	push   ebp
c00277ff:	89 e5                	mov    ebp,esp
c0027801:	57                   	push   edi
c0027802:	56                   	push   esi
c0027803:	53                   	push   ebx
c0027804:	83 ec 08             	sub    esp,0x8
c0027807:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002780a:	89 fa                	mov    edx,edi
c002780c:	89 f8                	mov    eax,edi
c002780e:	c1 f8 17             	sar    eax,0x17
c0027811:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027814:	c1 e2 08             	shl    edx,0x8
c0027817:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002781d:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027820:	89 de                	mov    esi,ebx
c0027822:	c1 fe 17             	sar    esi,0x17
c0027825:	c1 e3 08             	shl    ebx,0x8
c0027828:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c002782e:	31 f0                	xor    eax,esi
c0027830:	0f 88 3b 01 00 00    	js     c0027971 <__addsf3+0x173>
c0027836:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0027839:	29 f1                	sub    ecx,esi
c002783b:	85 c9                	test   ecx,ecx
c002783d:	7e 54                	jle    c0027893 <__addsf3+0x95>
c002783f:	89 f0                	mov    eax,esi
c0027841:	84 c0                	test   al,al
c0027843:	75 10                	jne    c0027855 <__addsf3+0x57>
c0027845:	85 db                	test   ebx,ebx
c0027847:	0f 84 aa 02 00 00    	je     c0027af7 <__addsf3+0x2f9>
c002784d:	49                   	dec    ecx
c002784e:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0027851:	74 38                	je     c002788b <__addsf3+0x8d>
c0027853:	eb 13                	jmp    c0027868 <__addsf3+0x6a>
c0027855:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0027858:	f7 d0                	not    eax
c002785a:	84 c0                	test   al,al
c002785c:	0f 84 95 02 00 00    	je     c0027af7 <__addsf3+0x2f9>
c0027862:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027868:	83 f9 1f             	cmp    ecx,0x1f
c002786b:	0f 8f 86 02 00 00    	jg     c0027af7 <__addsf3+0x2f9>
c0027871:	89 de                	mov    esi,ebx
c0027873:	d3 ee                	shr    esi,cl
c0027875:	b8 20 00 00 00       	mov    eax,0x20
c002787a:	29 c8                	sub    eax,ecx
c002787c:	89 c1                	mov    ecx,eax
c002787e:	d3 e3                	shl    ebx,cl
c0027880:	31 c0                	xor    eax,eax
c0027882:	85 db                	test   ebx,ebx
c0027884:	0f 95 c0             	setne  al
c0027887:	09 f0                	or     eax,esi
c0027889:	01 d0                	add    eax,edx
c002788b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002788e:	e9 b6 00 00 00       	jmp    c0027949 <__addsf3+0x14b>
c0027893:	74 5c                	je     c00278f1 <__addsf3+0xf3>
c0027895:	89 f1                	mov    ecx,esi
c0027897:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c002789a:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002789d:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c00278a1:	75 14                	jne    c00278b7 <__addsf3+0xb9>
c00278a3:	85 d2                	test   edx,edx
c00278a5:	0f 84 4c 02 00 00    	je     c0027af7 <__addsf3+0x2f9>
c00278ab:	49                   	dec    ecx
c00278ac:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00278af:	0f 84 94 00 00 00    	je     c0027949 <__addsf3+0x14b>
c00278b5:	eb 12                	jmp    c00278c9 <__addsf3+0xcb>
c00278b7:	89 f0                	mov    eax,esi
c00278b9:	f7 d0                	not    eax
c00278bb:	84 c0                	test   al,al
c00278bd:	0f 84 34 02 00 00    	je     c0027af7 <__addsf3+0x2f9>
c00278c3:	81 ca 00 00 00 80    	or     edx,0x80000000
c00278c9:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00278cc:	83 f9 1f             	cmp    ecx,0x1f
c00278cf:	0f 8f 22 02 00 00    	jg     c0027af7 <__addsf3+0x2f9>
c00278d5:	89 d7                	mov    edi,edx
c00278d7:	d3 ef                	shr    edi,cl
c00278d9:	b8 20 00 00 00       	mov    eax,0x20
c00278de:	29 c8                	sub    eax,ecx
c00278e0:	89 c1                	mov    ecx,eax
c00278e2:	d3 e2                	shl    edx,cl
c00278e4:	31 c0                	xor    eax,eax
c00278e6:	85 d2                	test   edx,edx
c00278e8:	0f 95 c0             	setne  al
c00278eb:	09 f8                	or     eax,edi
c00278ed:	01 d8                	add    eax,ebx
c00278ef:	eb 58                	jmp    c0027949 <__addsf3+0x14b>
c00278f1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00278f4:	8d 70 01             	lea    esi,[eax+0x1]
c00278f7:	f7 c6 fe 00 00 00    	test   esi,0xfe
c00278fd:	75 32                	jne    c0027931 <__addsf3+0x133>
c00278ff:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0027903:	75 1f                	jne    c0027924 <__addsf3+0x126>
c0027905:	85 d2                	test   edx,edx
c0027907:	0f 84 e0 01 00 00    	je     c0027aed <__addsf3+0x2ef>
c002790d:	85 db                	test   ebx,ebx
c002790f:	0f 84 e2 01 00 00    	je     c0027af7 <__addsf3+0x2f9>
c0027915:	89 d0                	mov    eax,edx
c0027917:	01 d8                	add    eax,ebx
c0027919:	0f 89 a9 01 00 00    	jns    c0027ac8 <__addsf3+0x2ca>
c002791f:	e9 9d 01 00 00       	jmp    c0027ac1 <__addsf3+0x2c3>
c0027924:	85 d2                	test   edx,edx
c0027926:	0f 85 cb 01 00 00    	jne    c0027af7 <__addsf3+0x2f9>
c002792c:	e9 bc 01 00 00       	jmp    c0027aed <__addsf3+0x2ef>
c0027931:	31 c0                	xor    eax,eax
c0027933:	89 f1                	mov    ecx,esi
c0027935:	f7 d1                	not    ecx
c0027937:	84 c9                	test   cl,cl
c0027939:	0f 84 90 01 00 00    	je     c0027acf <__addsf3+0x2d1>
c002793f:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0027942:	d1 e8                	shr    eax,1
c0027944:	e9 86 01 00 00       	jmp    c0027acf <__addsf3+0x2d1>
c0027949:	85 c0                	test   eax,eax
c002794b:	0f 89 7e 01 00 00    	jns    c0027acf <__addsf3+0x2d1>
c0027951:	46                   	inc    esi
c0027952:	89 f2                	mov    edx,esi
c0027954:	f7 d2                	not    edx
c0027956:	84 d2                	test   dl,dl
c0027958:	0f 84 6f 01 00 00    	je     c0027acd <__addsf3+0x2cf>
c002795e:	89 c2                	mov    edx,eax
c0027960:	83 e2 01             	and    edx,0x1
c0027963:	d1 e8                	shr    eax,1
c0027965:	25 ff ff ff 3f       	and    eax,0x3fffffff
c002796a:	09 d0                	or     eax,edx
c002796c:	e9 5e 01 00 00       	jmp    c0027acf <__addsf3+0x2d1>
c0027971:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0027975:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027978:	89 f0                	mov    eax,esi
c002797a:	0f b6 c0             	movzx  eax,al
c002797d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027980:	29 c1                	sub    ecx,eax
c0027982:	85 c9                	test   ecx,ecx
c0027984:	7e 55                	jle    c00279db <__addsf3+0x1dd>
c0027986:	85 c0                	test   eax,eax
c0027988:	75 11                	jne    c002799b <__addsf3+0x19d>
c002798a:	85 db                	test   ebx,ebx
c002798c:	0f 84 65 01 00 00    	je     c0027af7 <__addsf3+0x2f9>
c0027992:	49                   	dec    ecx
c0027993:	75 19                	jne    c00279ae <__addsf3+0x1b0>
c0027995:	89 d0                	mov    eax,edx
c0027997:	29 d8                	sub    eax,ebx
c0027999:	eb 38                	jmp    c00279d3 <__addsf3+0x1d5>
c002799b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002799e:	f7 d0                	not    eax
c00279a0:	84 c0                	test   al,al
c00279a2:	0f 84 4f 01 00 00    	je     c0027af7 <__addsf3+0x2f9>
c00279a8:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00279ae:	83 f9 1f             	cmp    ecx,0x1f
c00279b1:	0f 8f 40 01 00 00    	jg     c0027af7 <__addsf3+0x2f9>
c00279b7:	89 de                	mov    esi,ebx
c00279b9:	d3 ee                	shr    esi,cl
c00279bb:	b8 20 00 00 00       	mov    eax,0x20
c00279c0:	29 c8                	sub    eax,ecx
c00279c2:	89 c1                	mov    ecx,eax
c00279c4:	d3 e3                	shl    ebx,cl
c00279c6:	31 c0                	xor    eax,eax
c00279c8:	85 db                	test   ebx,ebx
c00279ca:	0f 95 c0             	setne  al
c00279cd:	09 f0                	or     eax,esi
c00279cf:	29 c2                	sub    edx,eax
c00279d1:	89 d0                	mov    eax,edx
c00279d3:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00279d6:	e9 af 00 00 00       	jmp    c0027a8a <__addsf3+0x28c>
c00279db:	74 5c                	je     c0027a39 <__addsf3+0x23b>
c00279dd:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c00279e0:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00279e3:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c00279e7:	75 14                	jne    c00279fd <__addsf3+0x1ff>
c00279e9:	85 d2                	test   edx,edx
c00279eb:	0f 84 06 01 00 00    	je     c0027af7 <__addsf3+0x2f9>
c00279f1:	48                   	dec    eax
c00279f2:	75 1b                	jne    c0027a0f <__addsf3+0x211>
c00279f4:	89 d8                	mov    eax,ebx
c00279f6:	29 d0                	sub    eax,edx
c00279f8:	e9 8d 00 00 00       	jmp    c0027a8a <__addsf3+0x28c>
c00279fd:	89 f1                	mov    ecx,esi
c00279ff:	f7 d1                	not    ecx
c0027a01:	84 c9                	test   cl,cl
c0027a03:	0f 84 ee 00 00 00    	je     c0027af7 <__addsf3+0x2f9>
c0027a09:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027a0f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027a12:	83 f8 1f             	cmp    eax,0x1f
c0027a15:	0f 8f dc 00 00 00    	jg     c0027af7 <__addsf3+0x2f9>
c0027a1b:	89 d7                	mov    edi,edx
c0027a1d:	88 c1                	mov    cl,al
c0027a1f:	d3 ef                	shr    edi,cl
c0027a21:	b9 20 00 00 00       	mov    ecx,0x20
c0027a26:	29 c1                	sub    ecx,eax
c0027a28:	d3 e2                	shl    edx,cl
c0027a2a:	31 c0                	xor    eax,eax
c0027a2c:	85 d2                	test   edx,edx
c0027a2e:	0f 95 c0             	setne  al
c0027a31:	09 f8                	or     eax,edi
c0027a33:	29 c3                	sub    ebx,eax
c0027a35:	89 d8                	mov    eax,ebx
c0027a37:	eb 51                	jmp    c0027a8a <__addsf3+0x28c>
c0027a39:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0027a3c:	40                   	inc    eax
c0027a3d:	a8 fe                	test   al,0xfe
c0027a3f:	75 3d                	jne    c0027a7e <__addsf3+0x280>
c0027a41:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0027a45:	0f 85 a7 00 00 00    	jne    c0027af2 <__addsf3+0x2f4>
c0027a4b:	85 d2                	test   edx,edx
c0027a4d:	75 12                	jne    c0027a61 <__addsf3+0x263>
c0027a4f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027a52:	85 db                	test   ebx,ebx
c0027a54:	0f 85 9d 00 00 00    	jne    c0027af7 <__addsf3+0x2f9>
c0027a5a:	31 ff                	xor    edi,edi
c0027a5c:	e9 96 00 00 00       	jmp    c0027af7 <__addsf3+0x2f9>
c0027a61:	85 db                	test   ebx,ebx
c0027a63:	0f 84 8e 00 00 00    	je     c0027af7 <__addsf3+0x2f9>
c0027a69:	89 d0                	mov    eax,edx
c0027a6b:	29 d8                	sub    eax,ebx
c0027a6d:	79 06                	jns    c0027a75 <__addsf3+0x277>
c0027a6f:	89 d8                	mov    eax,ebx
c0027a71:	29 d0                	sub    eax,edx
c0027a73:	eb 5a                	jmp    c0027acf <__addsf3+0x2d1>
c0027a75:	bf 00 00 00 00       	mov    edi,0x0
c0027a7a:	74 7b                	je     c0027af7 <__addsf3+0x2f9>
c0027a7c:	eb 4a                	jmp    c0027ac8 <__addsf3+0x2ca>
c0027a7e:	89 d0                	mov    eax,edx
c0027a80:	29 d8                	sub    eax,ebx
c0027a82:	79 12                	jns    c0027a96 <__addsf3+0x298>
c0027a84:	89 d8                	mov    eax,ebx
c0027a86:	29 d0                	sub    eax,edx
c0027a88:	eb 09                	jmp    c0027a93 <__addsf3+0x295>
c0027a8a:	85 c0                	test   eax,eax
c0027a8c:	79 41                	jns    c0027acf <__addsf3+0x2d1>
c0027a8e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027a93:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0027a96:	31 f6                	xor    esi,esi
c0027a98:	85 c0                	test   eax,eax
c0027a9a:	74 33                	je     c0027acf <__addsf3+0x2d1>
c0027a9c:	0f bd c8             	bsr    ecx,eax
c0027a9f:	83 f1 1f             	xor    ecx,0x1f
c0027aa2:	d3 e0                	shl    eax,cl
c0027aa4:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0027aa8:	39 ca                	cmp    edx,ecx
c0027aaa:	7f 10                	jg     c0027abc <__addsf3+0x2be>
c0027aac:	29 d1                	sub    ecx,edx
c0027aae:	41                   	inc    ecx
c0027aaf:	d3 e8                	shr    eax,cl
c0027ab1:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0027ab4:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0027aba:	eb 13                	jmp    c0027acf <__addsf3+0x2d1>
c0027abc:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0027abf:	29 ce                	sub    esi,ecx
c0027ac1:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027ac6:	eb 07                	jmp    c0027acf <__addsf3+0x2d1>
c0027ac8:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0027acb:	eb 02                	jmp    c0027acf <__addsf3+0x2d1>
c0027acd:	31 c0                	xor    eax,eax
c0027acf:	89 c2                	mov    edx,eax
c0027ad1:	c1 ea 08             	shr    edx,0x8
c0027ad4:	a8 7f                	test   al,0x7f
c0027ad6:	0f 95 c1             	setne  cl
c0027ad9:	09 d1                	or     ecx,edx
c0027adb:	83 e1 01             	and    ecx,0x1
c0027ade:	c1 e8 07             	shr    eax,0x7
c0027ae1:	21 c8                	and    eax,ecx
c0027ae3:	c1 e6 17             	shl    esi,0x17
c0027ae6:	09 d6                	or     esi,edx
c0027ae8:	8d 3c 30             	lea    edi,[eax+esi*1]
c0027aeb:	eb 0a                	jmp    c0027af7 <__addsf3+0x2f9>
c0027aed:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027af0:	eb 05                	jmp    c0027af7 <__addsf3+0x2f9>
c0027af2:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0027af7:	89 f8                	mov    eax,edi
c0027af9:	5a                   	pop    edx
c0027afa:	59                   	pop    ecx
c0027afb:	5b                   	pop    ebx
c0027afc:	5e                   	pop    esi
c0027afd:	5f                   	pop    edi
c0027afe:	5d                   	pop    ebp
c0027aff:	c3                   	ret    

c0027b00 <__subsf3>:
c0027b00:	55                   	push   ebp
c0027b01:	89 e5                	mov    ebp,esp
c0027b03:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027b06:	05 00 00 00 80       	add    eax,0x80000000
c0027b0b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0027b0e:	5d                   	pop    ebp
c0027b0f:	e9 ea fc ff ff       	jmp    c00277fe <__addsf3>

c0027b14 <__negsf2>:
c0027b14:	55                   	push   ebp
c0027b15:	89 e5                	mov    ebp,esp
c0027b17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027b1a:	05 00 00 00 80       	add    eax,0x80000000
c0027b1f:	5d                   	pop    ebp
c0027b20:	c3                   	ret    

c0027b21 <__mulsf3>:
c0027b21:	55                   	push   ebp
c0027b22:	89 e5                	mov    ebp,esp
c0027b24:	57                   	push   edi
c0027b25:	56                   	push   esi
c0027b26:	53                   	push   ebx
c0027b27:	83 ec 1c             	sub    esp,0x1c
c0027b2a:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0027b2d:	89 f0                	mov    eax,esi
c0027b2f:	89 f1                	mov    ecx,esi
c0027b31:	c1 f9 17             	sar    ecx,0x17
c0027b34:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0027b37:	c1 e0 08             	shl    eax,0x8
c0027b3a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027b3f:	89 c1                	mov    ecx,eax
c0027b41:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027b44:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027b47:	89 c7                	mov    edi,eax
c0027b49:	c1 ff 17             	sar    edi,0x17
c0027b4c:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0027b50:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0027b53:	89 f8                	mov    eax,edi
c0027b55:	0f b6 c0             	movzx  eax,al
c0027b58:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027b5b:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0027b5f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0027b62:	42                   	inc    edx
c0027b63:	80 e2 fe             	and    dl,0xfe
c0027b66:	75 7b                	jne    c0027be3 <__mulsf3+0xc2>
c0027b68:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027b6c:	74 54                	je     c0027bc2 <__mulsf3+0xa1>
c0027b6e:	85 c9                	test   ecx,ecx
c0027b70:	0f 85 64 01 00 00    	jne    c0027cda <__mulsf3+0x1b9>
c0027b76:	8d 57 01             	lea    edx,[edi+0x1]
c0027b79:	80 e2 fe             	and    dl,0xfe
c0027b7c:	75 1f                	jne    c0027b9d <__mulsf3+0x7c>
c0027b7e:	85 c0                	test   eax,eax
c0027b80:	b8 00 00 00 00       	mov    eax,0x0
c0027b85:	74 29                	je     c0027bb0 <__mulsf3+0x8f>
c0027b87:	53                   	push   ebx
c0027b88:	53                   	push   ebx
c0027b89:	50                   	push   eax
c0027b8a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027b8d:	e8 96 05 00 00       	call   c0028128 <__nesf2>
c0027b92:	83 c4 10             	add    esp,0x10
c0027b95:	85 c0                	test   eax,eax
c0027b97:	0f 85 3a 01 00 00    	jne    c0027cd7 <__mulsf3+0x1b6>
c0027b9d:	85 ff                	test   edi,edi
c0027b9f:	0f 89 35 01 00 00    	jns    c0027cda <__mulsf3+0x1b9>
c0027ba5:	81 c6 00 00 00 80    	add    esi,0x80000000
c0027bab:	e9 2a 01 00 00       	jmp    c0027cda <__mulsf3+0x1b9>
c0027bb0:	51                   	push   ecx
c0027bb1:	51                   	push   ecx
c0027bb2:	50                   	push   eax
c0027bb3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027bb6:	e8 6d 05 00 00       	call   c0028128 <__nesf2>
c0027bbb:	83 c4 10             	add    esp,0x10
c0027bbe:	85 c0                	test   eax,eax
c0027bc0:	eb 15                	jmp    c0027bd7 <__mulsf3+0xb6>
c0027bc2:	85 c9                	test   ecx,ecx
c0027bc4:	74 0b                	je     c0027bd1 <__mulsf3+0xb0>
c0027bc6:	8d 53 ff             	lea    edx,[ebx-0x1]
c0027bc9:	01 c9                	add    ecx,ecx
c0027bcb:	78 16                	js     c0027be3 <__mulsf3+0xc2>
c0027bcd:	89 d3                	mov    ebx,edx
c0027bcf:	eb f5                	jmp    c0027bc6 <__mulsf3+0xa5>
c0027bd1:	89 f8                	mov    eax,edi
c0027bd3:	f7 d0                	not    eax
c0027bd5:	84 c0                	test   al,al
c0027bd7:	75 c4                	jne    c0027b9d <__mulsf3+0x7c>
c0027bd9:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0027bde:	e9 f7 00 00 00       	jmp    c0027cda <__mulsf3+0x1b9>
c0027be3:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027be6:	c1 e6 08             	shl    esi,0x8
c0027be9:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0027bef:	8d 57 01             	lea    edx,[edi+0x1]
c0027bf2:	80 e2 fe             	and    dl,0xfe
c0027bf5:	75 63                	jne    c0027c5a <__mulsf3+0x139>
c0027bf7:	85 c0                	test   eax,eax
c0027bf9:	74 2f                	je     c0027c2a <__mulsf3+0x109>
c0027bfb:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027bff:	0f 89 d2 00 00 00    	jns    c0027cd7 <__mulsf3+0x1b6>
c0027c05:	52                   	push   edx
c0027c06:	52                   	push   edx
c0027c07:	6a 00                	push   0x0
c0027c09:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027c0c:	e8 dc 04 00 00       	call   c00280ed <__eqsf2>
c0027c11:	83 c4 10             	add    esp,0x10
c0027c14:	85 c0                	test   eax,eax
c0027c16:	0f 85 bb 00 00 00    	jne    c0027cd7 <__mulsf3+0x1b6>
c0027c1c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027c1f:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0027c25:	e9 b0 00 00 00       	jmp    c0027cda <__mulsf3+0x1b9>
c0027c2a:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0027c2d:	50                   	push   eax
c0027c2e:	50                   	push   eax
c0027c2f:	6a 00                	push   0x0
c0027c31:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027c34:	e8 b4 04 00 00       	call   c00280ed <__eqsf2>
c0027c39:	83 c4 10             	add    esp,0x10
c0027c3c:	85 c0                	test   eax,eax
c0027c3e:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027c41:	75 0c                	jne    c0027c4f <__mulsf3+0x12e>
c0027c43:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027c47:	0f 89 8a 00 00 00    	jns    c0027cd7 <__mulsf3+0x1b6>
c0027c4d:	eb cd                	jmp    c0027c1c <__mulsf3+0xfb>
c0027c4f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027c52:	01 f6                	add    esi,esi
c0027c54:	78 04                	js     c0027c5a <__mulsf3+0x139>
c0027c56:	89 c3                	mov    ebx,eax
c0027c58:	eb f5                	jmp    c0027c4f <__mulsf3+0x12e>
c0027c5a:	89 c8                	mov    eax,ecx
c0027c5c:	0d 00 00 00 80       	or     eax,0x80000000
c0027c61:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027c67:	f7 e6                	mul    esi
c0027c69:	85 c0                	test   eax,eax
c0027c6b:	0f 95 c0             	setne  al
c0027c6e:	0f b6 c0             	movzx  eax,al
c0027c71:	09 c2                	or     edx,eax
c0027c73:	78 03                	js     c0027c78 <__mulsf3+0x157>
c0027c75:	01 d2                	add    edx,edx
c0027c77:	4b                   	dec    ebx
c0027c78:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0027c7e:	7f 22                	jg     c0027ca2 <__mulsf3+0x181>
c0027c80:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027c86:	85 db                	test   ebx,ebx
c0027c88:	7f 23                	jg     c0027cad <__mulsf3+0x18c>
c0027c8a:	83 fb e9             	cmp    ebx,0xffffffe9
c0027c8d:	7c 1a                	jl     c0027ca9 <__mulsf3+0x188>
c0027c8f:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027c95:	b9 01 00 00 00       	mov    ecx,0x1
c0027c9a:	29 d9                	sub    ecx,ebx
c0027c9c:	d3 ea                	shr    edx,cl
c0027c9e:	31 db                	xor    ebx,ebx
c0027ca0:	eb 0b                	jmp    c0027cad <__mulsf3+0x18c>
c0027ca2:	bb ff 00 00 00       	mov    ebx,0xff
c0027ca7:	eb 02                	jmp    c0027cab <__mulsf3+0x18a>
c0027ca9:	31 db                	xor    ebx,ebx
c0027cab:	31 d2                	xor    edx,edx
c0027cad:	89 d0                	mov    eax,edx
c0027caf:	c1 e8 08             	shr    eax,0x8
c0027cb2:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027cb5:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027cbb:	09 fb                	or     ebx,edi
c0027cbd:	c1 e3 17             	shl    ebx,0x17
c0027cc0:	09 c3                	or     ebx,eax
c0027cc2:	f6 c2 7f             	test   dl,0x7f
c0027cc5:	0f 95 c1             	setne  cl
c0027cc8:	09 c8                	or     eax,ecx
c0027cca:	83 e0 01             	and    eax,0x1
c0027ccd:	c1 ea 07             	shr    edx,0x7
c0027cd0:	21 c2                	and    edx,eax
c0027cd2:	8d 34 13             	lea    esi,[ebx+edx*1]
c0027cd5:	eb 03                	jmp    c0027cda <__mulsf3+0x1b9>
c0027cd7:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0027cda:	89 f0                	mov    eax,esi
c0027cdc:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027cdf:	5b                   	pop    ebx
c0027ce0:	5e                   	pop    esi
c0027ce1:	5f                   	pop    edi
c0027ce2:	5d                   	pop    ebp
c0027ce3:	c3                   	ret    

c0027ce4 <__divsf3>:
c0027ce4:	55                   	push   ebp
c0027ce5:	89 e5                	mov    ebp,esp
c0027ce7:	57                   	push   edi
c0027ce8:	56                   	push   esi
c0027ce9:	53                   	push   ebx
c0027cea:	83 ec 1c             	sub    esp,0x1c
c0027ced:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027cf0:	89 d8                	mov    eax,ebx
c0027cf2:	89 d9                	mov    ecx,ebx
c0027cf4:	c1 f9 17             	sar    ecx,0x17
c0027cf7:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0027cfa:	c1 e0 08             	shl    eax,0x8
c0027cfd:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027d02:	89 c1                	mov    ecx,eax
c0027d04:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027d07:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027d0a:	89 c7                	mov    edi,eax
c0027d0c:	c1 ff 17             	sar    edi,0x17
c0027d0f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0027d13:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0027d16:	89 f8                	mov    eax,edi
c0027d18:	0f b6 c0             	movzx  eax,al
c0027d1b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027d1e:	29 c6                	sub    esi,eax
c0027d20:	83 c6 7f             	add    esi,0x7f
c0027d23:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0027d26:	42                   	inc    edx
c0027d27:	80 e2 fe             	and    dl,0xfe
c0027d2a:	0f 85 9c 00 00 00    	jne    c0027dcc <__divsf3+0xe8>
c0027d30:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027d34:	74 33                	je     c0027d69 <__divsf3+0x85>
c0027d36:	85 c9                	test   ecx,ecx
c0027d38:	0f 85 c7 01 00 00    	jne    c0027f05 <__divsf3+0x221>
c0027d3e:	8d 57 01             	lea    edx,[edi+0x1]
c0027d41:	80 e2 fe             	and    dl,0xfe
c0027d44:	75 2f                	jne    c0027d75 <__divsf3+0x91>
c0027d46:	85 c0                	test   eax,eax
c0027d48:	74 2b                	je     c0027d75 <__divsf3+0x91>
c0027d4a:	51                   	push   ecx
c0027d4b:	51                   	push   ecx
c0027d4c:	6a 00                	push   0x0
c0027d4e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027d51:	e8 d2 03 00 00       	call   c0028128 <__nesf2>
c0027d56:	83 c4 10             	add    esp,0x10
c0027d59:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027d5c:	85 c0                	test   eax,eax
c0027d5e:	0f 85 a1 01 00 00    	jne    c0027f05 <__divsf3+0x221>
c0027d64:	e9 92 01 00 00       	jmp    c0027efb <__divsf3+0x217>
c0027d69:	85 c9                	test   ecx,ecx
c0027d6b:	75 1b                	jne    c0027d88 <__divsf3+0xa4>
c0027d6d:	8d 57 01             	lea    edx,[edi+0x1]
c0027d70:	80 e2 fe             	and    dl,0xfe
c0027d73:	74 1e                	je     c0027d93 <__divsf3+0xaf>
c0027d75:	85 ff                	test   edi,edi
c0027d77:	0f 89 88 01 00 00    	jns    c0027f05 <__divsf3+0x221>
c0027d7d:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0027d83:	e9 7d 01 00 00       	jmp    c0027f05 <__divsf3+0x221>
c0027d88:	8d 56 ff             	lea    edx,[esi-0x1]
c0027d8b:	01 c9                	add    ecx,ecx
c0027d8d:	78 3d                	js     c0027dcc <__divsf3+0xe8>
c0027d8f:	89 d6                	mov    esi,edx
c0027d91:	eb f5                	jmp    c0027d88 <__divsf3+0xa4>
c0027d93:	85 c0                	test   eax,eax
c0027d95:	b8 00 00 00 00       	mov    eax,0x0
c0027d9a:	74 18                	je     c0027db4 <__divsf3+0xd0>
c0027d9c:	52                   	push   edx
c0027d9d:	52                   	push   edx
c0027d9e:	50                   	push   eax
c0027d9f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027da2:	e8 81 03 00 00       	call   c0028128 <__nesf2>
c0027da7:	83 c4 10             	add    esp,0x10
c0027daa:	85 c0                	test   eax,eax
c0027dac:	0f 85 50 01 00 00    	jne    c0027f02 <__divsf3+0x21e>
c0027db2:	eb c1                	jmp    c0027d75 <__divsf3+0x91>
c0027db4:	56                   	push   esi
c0027db5:	56                   	push   esi
c0027db6:	50                   	push   eax
c0027db7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027dba:	e8 69 03 00 00       	call   c0028128 <__nesf2>
c0027dbf:	83 c4 10             	add    esp,0x10
c0027dc2:	85 c0                	test   eax,eax
c0027dc4:	0f 84 31 01 00 00    	je     c0027efb <__divsf3+0x217>
c0027dca:	eb a9                	jmp    c0027d75 <__divsf3+0x91>
c0027dcc:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0027dcf:	c1 e3 08             	shl    ebx,0x8
c0027dd2:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027dd8:	8d 57 01             	lea    edx,[edi+0x1]
c0027ddb:	80 e2 fe             	and    dl,0xfe
c0027dde:	75 71                	jne    c0027e51 <__divsf3+0x16d>
c0027de0:	85 c0                	test   eax,eax
c0027de2:	ba 00 00 00 00       	mov    edx,0x0
c0027de7:	74 2f                	je     c0027e18 <__divsf3+0x134>
c0027de9:	51                   	push   ecx
c0027dea:	51                   	push   ecx
c0027deb:	52                   	push   edx
c0027dec:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027def:	e8 f9 02 00 00       	call   c00280ed <__eqsf2>
c0027df4:	83 c4 10             	add    esp,0x10
c0027df7:	85 c0                	test   eax,eax
c0027df9:	0f 85 03 01 00 00    	jne    c0027f02 <__divsf3+0x21e>
c0027dff:	31 d2                	xor    edx,edx
c0027e01:	89 d3                	mov    ebx,edx
c0027e03:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027e06:	31 f8                	xor    eax,edi
c0027e08:	0f 89 f7 00 00 00    	jns    c0027f05 <__divsf3+0x221>
c0027e0e:	bb 00 00 00 80       	mov    ebx,0x80000000
c0027e13:	e9 ed 00 00 00       	jmp    c0027f05 <__divsf3+0x221>
c0027e18:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0027e1b:	50                   	push   eax
c0027e1c:	50                   	push   eax
c0027e1d:	52                   	push   edx
c0027e1e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027e21:	e8 c7 02 00 00       	call   c00280ed <__eqsf2>
c0027e26:	83 c4 10             	add    esp,0x10
c0027e29:	85 c0                	test   eax,eax
c0027e2b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027e2e:	75 16                	jne    c0027e46 <__divsf3+0x162>
c0027e30:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027e33:	31 fb                	xor    ebx,edi
c0027e35:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0027e3b:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0027e41:	e9 bf 00 00 00       	jmp    c0027f05 <__divsf3+0x221>
c0027e46:	8d 46 01             	lea    eax,[esi+0x1]
c0027e49:	01 db                	add    ebx,ebx
c0027e4b:	78 04                	js     c0027e51 <__divsf3+0x16d>
c0027e4d:	89 c6                	mov    esi,eax
c0027e4f:	eb f5                	jmp    c0027e46 <__divsf3+0x162>
c0027e51:	89 c8                	mov    eax,ecx
c0027e53:	0d 00 00 00 80       	or     eax,0x80000000
c0027e58:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027e5e:	31 d2                	xor    edx,edx
c0027e60:	39 d8                	cmp    eax,ebx
c0027e62:	72 07                	jb     c0027e6b <__divsf3+0x187>
c0027e64:	29 d8                	sub    eax,ebx
c0027e66:	ba 01 00 00 00       	mov    edx,0x1
c0027e6b:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0027e72:	01 d2                	add    edx,edx
c0027e74:	89 c1                	mov    ecx,eax
c0027e76:	01 c0                	add    eax,eax
c0027e78:	85 c9                	test   ecx,ecx
c0027e7a:	78 04                	js     c0027e80 <__divsf3+0x19c>
c0027e7c:	39 c3                	cmp    ebx,eax
c0027e7e:	77 05                	ja     c0027e85 <__divsf3+0x1a1>
c0027e80:	29 d8                	sub    eax,ebx
c0027e82:	83 ca 01             	or     edx,0x1
c0027e85:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0027e88:	75 e8                	jne    c0027e72 <__divsf3+0x18e>
c0027e8a:	85 c0                	test   eax,eax
c0027e8c:	0f 95 c0             	setne  al
c0027e8f:	0f b6 c0             	movzx  eax,al
c0027e92:	c1 e2 06             	shl    edx,0x6
c0027e95:	09 c2                	or     edx,eax
c0027e97:	78 03                	js     c0027e9c <__divsf3+0x1b8>
c0027e99:	01 d2                	add    edx,edx
c0027e9b:	4e                   	dec    esi
c0027e9c:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0027ea2:	7f 22                	jg     c0027ec6 <__divsf3+0x1e2>
c0027ea4:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027eaa:	85 f6                	test   esi,esi
c0027eac:	7f 23                	jg     c0027ed1 <__divsf3+0x1ed>
c0027eae:	83 fe e9             	cmp    esi,0xffffffe9
c0027eb1:	7c 1a                	jl     c0027ecd <__divsf3+0x1e9>
c0027eb3:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027eb9:	b9 01 00 00 00       	mov    ecx,0x1
c0027ebe:	29 f1                	sub    ecx,esi
c0027ec0:	d3 ea                	shr    edx,cl
c0027ec2:	31 f6                	xor    esi,esi
c0027ec4:	eb 0b                	jmp    c0027ed1 <__divsf3+0x1ed>
c0027ec6:	be ff 00 00 00       	mov    esi,0xff
c0027ecb:	eb 02                	jmp    c0027ecf <__divsf3+0x1eb>
c0027ecd:	31 f6                	xor    esi,esi
c0027ecf:	31 d2                	xor    edx,edx
c0027ed1:	89 d0                	mov    eax,edx
c0027ed3:	c1 e8 08             	shr    eax,0x8
c0027ed6:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027ed9:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027edf:	09 fe                	or     esi,edi
c0027ee1:	c1 e6 17             	shl    esi,0x17
c0027ee4:	09 c6                	or     esi,eax
c0027ee6:	f6 c2 7f             	test   dl,0x7f
c0027ee9:	0f 95 c1             	setne  cl
c0027eec:	09 c8                	or     eax,ecx
c0027eee:	83 e0 01             	and    eax,0x1
c0027ef1:	c1 ea 07             	shr    edx,0x7
c0027ef4:	21 c2                	and    edx,eax
c0027ef6:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0027ef9:	eb 0a                	jmp    c0027f05 <__divsf3+0x221>
c0027efb:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0027f00:	eb 03                	jmp    c0027f05 <__divsf3+0x221>
c0027f02:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027f05:	89 d8                	mov    eax,ebx
c0027f07:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027f0a:	5b                   	pop    ebx
c0027f0b:	5e                   	pop    esi
c0027f0c:	5f                   	pop    edi
c0027f0d:	5d                   	pop    ebp
c0027f0e:	c3                   	ret    

c0027f0f <__floatsisf>:
c0027f0f:	55                   	push   ebp
c0027f10:	89 e5                	mov    ebp,esp
c0027f12:	53                   	push   ebx
c0027f13:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027f16:	85 d2                	test   edx,edx
c0027f18:	7e 2b                	jle    c0027f45 <__floatsisf+0x36>
c0027f1a:	0f bd ca             	bsr    ecx,edx
c0027f1d:	83 f1 1f             	xor    ecx,0x1f
c0027f20:	d3 e2                	shl    edx,cl
c0027f22:	89 d0                	mov    eax,edx
c0027f24:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027f29:	89 c3                	mov    ebx,eax
c0027f2b:	c1 eb 08             	shr    ebx,0x8
c0027f2e:	80 e2 7f             	and    dl,0x7f
c0027f31:	0f 95 c2             	setne  dl
c0027f34:	09 da                	or     edx,ebx
c0027f36:	83 e2 01             	and    edx,0x1
c0027f39:	c1 e8 07             	shr    eax,0x7
c0027f3c:	21 c2                	and    edx,eax
c0027f3e:	b8 9e 00 00 00       	mov    eax,0x9e
c0027f43:	eb 32                	jmp    c0027f77 <__floatsisf+0x68>
c0027f45:	b8 00 00 00 00       	mov    eax,0x0
c0027f4a:	74 34                	je     c0027f80 <__floatsisf+0x71>
c0027f4c:	f7 da                	neg    edx
c0027f4e:	0f bd ca             	bsr    ecx,edx
c0027f51:	83 f1 1f             	xor    ecx,0x1f
c0027f54:	d3 e2                	shl    edx,cl
c0027f56:	89 d0                	mov    eax,edx
c0027f58:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027f5d:	89 c3                	mov    ebx,eax
c0027f5f:	c1 eb 08             	shr    ebx,0x8
c0027f62:	80 e2 7f             	and    dl,0x7f
c0027f65:	0f 95 c2             	setne  dl
c0027f68:	09 da                	or     edx,ebx
c0027f6a:	83 e2 01             	and    edx,0x1
c0027f6d:	c1 e8 07             	shr    eax,0x7
c0027f70:	21 c2                	and    edx,eax
c0027f72:	b8 9e 01 00 00       	mov    eax,0x19e
c0027f77:	29 c8                	sub    eax,ecx
c0027f79:	c1 e0 17             	shl    eax,0x17
c0027f7c:	09 d8                	or     eax,ebx
c0027f7e:	01 d0                	add    eax,edx
c0027f80:	5b                   	pop    ebx
c0027f81:	5d                   	pop    ebp
c0027f82:	c3                   	ret    

c0027f83 <__floatunsisf>:
c0027f83:	55                   	push   ebp
c0027f84:	89 e5                	mov    ebp,esp
c0027f86:	53                   	push   ebx
c0027f87:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027f8a:	31 c0                	xor    eax,eax
c0027f8c:	85 d2                	test   edx,edx
c0027f8e:	74 32                	je     c0027fc2 <__floatunsisf+0x3f>
c0027f90:	0f bd ca             	bsr    ecx,edx
c0027f93:	83 f1 1f             	xor    ecx,0x1f
c0027f96:	d3 e2                	shl    edx,cl
c0027f98:	89 d0                	mov    eax,edx
c0027f9a:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027f9f:	89 c3                	mov    ebx,eax
c0027fa1:	c1 eb 08             	shr    ebx,0x8
c0027fa4:	80 e2 7f             	and    dl,0x7f
c0027fa7:	0f 95 c2             	setne  dl
c0027faa:	09 da                	or     edx,ebx
c0027fac:	83 e2 01             	and    edx,0x1
c0027faf:	c1 e8 07             	shr    eax,0x7
c0027fb2:	21 c2                	and    edx,eax
c0027fb4:	b8 9e 00 00 00       	mov    eax,0x9e
c0027fb9:	29 c8                	sub    eax,ecx
c0027fbb:	c1 e0 17             	shl    eax,0x17
c0027fbe:	09 d8                	or     eax,ebx
c0027fc0:	01 d0                	add    eax,edx
c0027fc2:	5b                   	pop    ebx
c0027fc3:	5d                   	pop    ebp
c0027fc4:	c3                   	ret    

c0027fc5 <__fixsfsi>:
c0027fc5:	55                   	push   ebp
c0027fc6:	89 e5                	mov    ebp,esp
c0027fc8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027fcb:	89 d1                	mov    ecx,edx
c0027fcd:	c1 e1 08             	shl    ecx,0x8
c0027fd0:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0027fd6:	c1 fa 17             	sar    edx,0x17
c0027fd9:	78 1c                	js     c0027ff7 <__fixsfsi+0x32>
c0027fdb:	83 ea 7f             	sub    edx,0x7f
c0027fde:	31 c0                	xor    eax,eax
c0027fe0:	83 fa 1e             	cmp    edx,0x1e
c0027fe3:	77 40                	ja     c0028025 <__fixsfsi+0x60>
c0027fe5:	89 c8                	mov    eax,ecx
c0027fe7:	0d 00 00 00 80       	or     eax,0x80000000
c0027fec:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027ff1:	29 d1                	sub    ecx,edx
c0027ff3:	d3 e8                	shr    eax,cl
c0027ff5:	eb 2e                	jmp    c0028025 <__fixsfsi+0x60>
c0027ff7:	31 c0                	xor    eax,eax
c0027ff9:	81 c2 81 00 00 00    	add    edx,0x81
c0027fff:	78 24                	js     c0028025 <__fixsfsi+0x60>
c0028001:	83 fa 1e             	cmp    edx,0x1e
c0028004:	7e 09                	jle    c002800f <__fixsfsi+0x4a>
c0028006:	83 fa 1f             	cmp    edx,0x1f
c0028009:	75 18                	jne    c0028023 <__fixsfsi+0x5e>
c002800b:	85 c9                	test   ecx,ecx
c002800d:	75 14                	jne    c0028023 <__fixsfsi+0x5e>
c002800f:	89 c8                	mov    eax,ecx
c0028011:	0d 00 00 00 80       	or     eax,0x80000000
c0028016:	b9 1f 00 00 00       	mov    ecx,0x1f
c002801b:	29 d1                	sub    ecx,edx
c002801d:	d3 e8                	shr    eax,cl
c002801f:	f7 d8                	neg    eax
c0028021:	eb 02                	jmp    c0028025 <__fixsfsi+0x60>
c0028023:	31 c0                	xor    eax,eax
c0028025:	5d                   	pop    ebp
c0028026:	c3                   	ret    

c0028027 <__fixunssfsi>:
c0028027:	55                   	push   ebp
c0028028:	89 e5                	mov    ebp,esp
c002802a:	53                   	push   ebx
c002802b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002802e:	89 d3                	mov    ebx,edx
c0028030:	c1 fb 17             	sar    ebx,0x17
c0028033:	83 eb 7f             	sub    ebx,0x7f
c0028036:	31 c0                	xor    eax,eax
c0028038:	83 fb 1f             	cmp    ebx,0x1f
c002803b:	77 18                	ja     c0028055 <__fixunssfsi+0x2e>
c002803d:	89 d0                	mov    eax,edx
c002803f:	c1 e0 08             	shl    eax,0x8
c0028042:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0028047:	0d 00 00 00 80       	or     eax,0x80000000
c002804c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028051:	29 d9                	sub    ecx,ebx
c0028053:	d3 e8                	shr    eax,cl
c0028055:	5b                   	pop    ebx
c0028056:	5d                   	pop    ebp
c0028057:	c3                   	ret    

c0028058 <__cmpsf2>:
c0028058:	55                   	push   ebp
c0028059:	89 e5                	mov    ebp,esp
c002805b:	57                   	push   edi
c002805c:	56                   	push   esi
c002805d:	53                   	push   ebx
c002805e:	83 ec 24             	sub    esp,0x24
c0028061:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028064:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028067:	e8 4f 10 00 00       	call   c00290bb <__truncdfsf2>
c002806c:	5a                   	pop    edx
c002806d:	59                   	pop    ecx
c002806e:	89 c3                	mov    ebx,eax
c0028070:	c1 e8 17             	shr    eax,0x17
c0028073:	0f b6 f0             	movzx  esi,al
c0028076:	89 d8                	mov    eax,ebx
c0028078:	c1 e8 1f             	shr    eax,0x1f
c002807b:	31 c6                	xor    esi,eax
c002807d:	c1 e3 08             	shl    ebx,0x8
c0028080:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028083:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028086:	e8 30 10 00 00       	call   c00290bb <__truncdfsf2>
c002808b:	83 c4 10             	add    esp,0x10
c002808e:	89 c1                	mov    ecx,eax
c0028090:	c1 e9 17             	shr    ecx,0x17
c0028093:	0f b6 c9             	movzx  ecx,cl
c0028096:	89 c7                	mov    edi,eax
c0028098:	c1 ef 1f             	shr    edi,0x1f
c002809b:	89 ca                	mov    edx,ecx
c002809d:	31 fa                	xor    edx,edi
c002809f:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c00280a2:	c1 e0 08             	shl    eax,0x8
c00280a5:	89 c2                	mov    edx,eax
c00280a7:	89 d8                	mov    eax,ebx
c00280a9:	09 d0                	or     eax,edx
c00280ab:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00280b0:	09 f0                	or     eax,esi
c00280b2:	75 08                	jne    c00280bc <__cmpsf2+0x64>
c00280b4:	31 c0                	xor    eax,eax
c00280b6:	39 f9                	cmp    ecx,edi
c00280b8:	75 0c                	jne    c00280c6 <__cmpsf2+0x6e>
c00280ba:	eb 29                	jmp    c00280e5 <__cmpsf2+0x8d>
c00280bc:	b8 01 00 00 00       	mov    eax,0x1
c00280c1:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00280c4:	7f 1f                	jg     c00280e5 <__cmpsf2+0x8d>
c00280c6:	83 c8 ff             	or     eax,0xffffffff
c00280c9:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00280cc:	7c 17                	jl     c00280e5 <__cmpsf2+0x8d>
c00280ce:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00280d4:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00280da:	b8 01 00 00 00       	mov    eax,0x1
c00280df:	39 d3                	cmp    ebx,edx
c00280e1:	77 02                	ja     c00280e5 <__cmpsf2+0x8d>
c00280e3:	19 c0                	sbb    eax,eax
c00280e5:	8d 65 f4             	lea    esp,[ebp-0xc]
c00280e8:	5b                   	pop    ebx
c00280e9:	5e                   	pop    esi
c00280ea:	5f                   	pop    edi
c00280eb:	5d                   	pop    ebp
c00280ec:	c3                   	ret    

c00280ed <__eqsf2>:
c00280ed:	55                   	push   ebp
c00280ee:	89 e5                	mov    ebp,esp
c00280f0:	83 ec 24             	sub    esp,0x24
c00280f3:	6a 01                	push   0x1
c00280f5:	83 ec 0c             	sub    esp,0xc
c00280f8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00280fb:	e8 df 10 00 00       	call   c00291df <__extendsfdf2>
c0028100:	83 c4 10             	add    esp,0x10
c0028103:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0028106:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0028109:	52                   	push   edx
c002810a:	50                   	push   eax
c002810b:	50                   	push   eax
c002810c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002810f:	e8 cb 10 00 00       	call   c00291df <__extendsfdf2>
c0028114:	59                   	pop    ecx
c0028115:	59                   	pop    ecx
c0028116:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0028119:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002811c:	52                   	push   edx
c002811d:	50                   	push   eax
c002811e:	e8 35 ff ff ff       	call   c0028058 <__cmpsf2>
c0028123:	83 c4 20             	add    esp,0x20
c0028126:	c9                   	leave  
c0028127:	c3                   	ret    

c0028128 <__nesf2>:
c0028128:	eb c3                	jmp    c00280ed <__eqsf2>

c002812a <__gtsf2>:
c002812a:	55                   	push   ebp
c002812b:	89 e5                	mov    ebp,esp
c002812d:	83 ec 24             	sub    esp,0x24
c0028130:	6a ff                	push   0xffffffff
c0028132:	83 ec 0c             	sub    esp,0xc
c0028135:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028138:	e8 a2 10 00 00       	call   c00291df <__extendsfdf2>
c002813d:	83 c4 10             	add    esp,0x10
c0028140:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0028143:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0028146:	52                   	push   edx
c0028147:	50                   	push   eax
c0028148:	50                   	push   eax
c0028149:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002814c:	e8 8e 10 00 00       	call   c00291df <__extendsfdf2>
c0028151:	59                   	pop    ecx
c0028152:	59                   	pop    ecx
c0028153:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0028156:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0028159:	52                   	push   edx
c002815a:	50                   	push   eax
c002815b:	e8 f8 fe ff ff       	call   c0028058 <__cmpsf2>
c0028160:	83 c4 20             	add    esp,0x20
c0028163:	c9                   	leave  
c0028164:	c3                   	ret    

c0028165 <__gesf2>:
c0028165:	eb c3                	jmp    c002812a <__gtsf2>

c0028167 <__ltsf2>:
c0028167:	eb 84                	jmp    c00280ed <__eqsf2>

c0028169 <__lesf2>:
c0028169:	eb 82                	jmp    c00280ed <__eqsf2>

c002816b <__adddf3>:
c002816b:	55                   	push   ebp
c002816c:	89 e5                	mov    ebp,esp
c002816e:	57                   	push   edi
c002816f:	56                   	push   esi
c0028170:	53                   	push   ebx
c0028171:	83 ec 24             	sub    esp,0x24
c0028174:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0028177:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002817a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002817d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0028180:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0028183:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0028186:	89 c8                	mov    eax,ecx
c0028188:	89 ce                	mov    esi,ecx
c002818a:	c1 fe 14             	sar    esi,0x14
c002818d:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0028190:	89 fb                	mov    ebx,edi
c0028192:	89 fa                	mov    edx,edi
c0028194:	c1 e2 0b             	shl    edx,0xb
c0028197:	c1 e0 0b             	shl    eax,0xb
c002819a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002819f:	c1 eb 15             	shr    ebx,0x15
c00281a2:	09 d8                	or     eax,ebx
c00281a4:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c00281a7:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c00281aa:	c1 fe 14             	sar    esi,0x14
c00281ad:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00281b0:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00281b3:	89 f3                	mov    ebx,esi
c00281b5:	c1 e3 0b             	shl    ebx,0xb
c00281b8:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c00281bb:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00281be:	c1 e3 0b             	shl    ebx,0xb
c00281c1:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c00281c7:	c1 ee 15             	shr    esi,0x15
c00281ca:	09 f3                	or     ebx,esi
c00281cc:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c00281cf:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00281d2:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c00281d5:	0f 88 5f 02 00 00    	js     c002843a <__adddf3+0x2cf>
c00281db:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00281de:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c00281e1:	85 db                	test   ebx,ebx
c00281e3:	0f 8e c7 00 00 00    	jle    c00282b0 <__adddf3+0x145>
c00281e9:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c00281f0:	75 1a                	jne    c002820c <__adddf3+0xa1>
c00281f2:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00281f5:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00281f8:	0f 84 b2 05 00 00    	je     c00287b0 <__adddf3+0x645>
c00281fe:	4b                   	dec    ebx
c00281ff:	75 23                	jne    c0028224 <__adddf3+0xb9>
c0028201:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0028204:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0028207:	e9 99 00 00 00       	jmp    c00282a5 <__adddf3+0x13a>
c002820c:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002820f:	f7 d6                	not    esi
c0028211:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028217:	0f 84 93 05 00 00    	je     c00287b0 <__adddf3+0x645>
c002821d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0028224:	83 fb 1f             	cmp    ebx,0x1f
c0028227:	7e 42                	jle    c002826b <__adddf3+0x100>
c0028229:	83 fb 3f             	cmp    ebx,0x3f
c002822c:	0f 8f 7e 05 00 00    	jg     c00287b0 <__adddf3+0x645>
c0028232:	83 e3 1f             	and    ebx,0x1f
c0028235:	89 d9                	mov    ecx,ebx
c0028237:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c002823a:	d3 ef                	shr    edi,cl
c002823c:	31 db                	xor    ebx,ebx
c002823e:	85 c9                	test   ecx,ecx
c0028240:	74 15                	je     c0028257 <__adddf3+0xec>
c0028242:	be 20 00 00 00       	mov    esi,0x20
c0028247:	29 ce                	sub    esi,ecx
c0028249:	89 f1                	mov    ecx,esi
c002824b:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002824e:	d3 e6                	shl    esi,cl
c0028250:	31 db                	xor    ebx,ebx
c0028252:	85 f6                	test   esi,esi
c0028254:	0f 95 c3             	setne  bl
c0028257:	31 c9                	xor    ecx,ecx
c0028259:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002825d:	0f 95 c1             	setne  cl
c0028260:	09 cf                	or     edi,ecx
c0028262:	09 fb                	or     ebx,edi
c0028264:	01 da                	add    edx,ebx
c0028266:	83 d0 00             	adc    eax,0x0
c0028269:	eb 3a                	jmp    c00282a5 <__adddf3+0x13a>
c002826b:	bf 20 00 00 00       	mov    edi,0x20
c0028270:	29 df                	sub    edi,ebx
c0028272:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028275:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028278:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002827b:	d3 e6                	shl    esi,cl
c002827d:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0028280:	88 d9                	mov    cl,bl
c0028282:	d3 ef                	shr    edi,cl
c0028284:	09 fe                	or     esi,edi
c0028286:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0028289:	88 d9                	mov    cl,bl
c002828b:	d3 ef                	shr    edi,cl
c002828d:	89 fb                	mov    ebx,edi
c002828f:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0028292:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0028295:	d3 e7                	shl    edi,cl
c0028297:	85 ff                	test   edi,edi
c0028299:	0f 95 c1             	setne  cl
c002829c:	0f b6 c9             	movzx  ecx,cl
c002829f:	09 ce                	or     esi,ecx
c00282a1:	01 f2                	add    edx,esi
c00282a3:	11 d8                	adc    eax,ebx
c00282a5:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00282a8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00282ab:	e9 52 01 00 00       	jmp    c0028402 <__adddf3+0x297>
c00282b0:	0f 84 d5 00 00 00    	je     c002838b <__adddf3+0x220>
c00282b6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00282b9:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c00282bc:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00282bf:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00282c2:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00282c9:	75 20                	jne    c00282eb <__adddf3+0x180>
c00282cb:	89 d6                	mov    esi,edx
c00282cd:	09 c6                	or     esi,eax
c00282cf:	0f 84 db 04 00 00    	je     c00287b0 <__adddf3+0x645>
c00282d5:	4b                   	dec    ebx
c00282d6:	75 29                	jne    c0028301 <__adddf3+0x196>
c00282d8:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00282db:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00282de:	01 d1                	add    ecx,edx
c00282e0:	11 c6                	adc    esi,eax
c00282e2:	89 f0                	mov    eax,esi
c00282e4:	89 ca                	mov    edx,ecx
c00282e6:	e9 17 01 00 00       	jmp    c0028402 <__adddf3+0x297>
c00282eb:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00282ee:	f7 d6                	not    esi
c00282f0:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00282f6:	0f 84 b4 04 00 00    	je     c00287b0 <__adddf3+0x645>
c00282fc:	0d 00 00 00 80       	or     eax,0x80000000
c0028301:	83 fb 1f             	cmp    ebx,0x1f
c0028304:	7e 48                	jle    c002834e <__adddf3+0x1e3>
c0028306:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0028309:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002830c:	83 fb 3f             	cmp    ebx,0x3f
c002830f:	0f 8f 9b 04 00 00    	jg     c00287b0 <__adddf3+0x645>
c0028315:	83 e3 1f             	and    ebx,0x1f
c0028318:	89 d9                	mov    ecx,ebx
c002831a:	89 c7                	mov    edi,eax
c002831c:	d3 ef                	shr    edi,cl
c002831e:	31 db                	xor    ebx,ebx
c0028320:	85 c9                	test   ecx,ecx
c0028322:	74 12                	je     c0028336 <__adddf3+0x1cb>
c0028324:	be 20 00 00 00       	mov    esi,0x20
c0028329:	29 ce                	sub    esi,ecx
c002832b:	89 f1                	mov    ecx,esi
c002832d:	d3 e0                	shl    eax,cl
c002832f:	31 db                	xor    ebx,ebx
c0028331:	85 c0                	test   eax,eax
c0028333:	0f 95 c3             	setne  bl
c0028336:	31 c0                	xor    eax,eax
c0028338:	85 d2                	test   edx,edx
c002833a:	0f 95 c0             	setne  al
c002833d:	09 c7                	or     edi,eax
c002833f:	09 fb                	or     ebx,edi
c0028341:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028344:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028347:	01 da                	add    edx,ebx
c0028349:	83 d6 00             	adc    esi,0x0
c002834c:	eb 39                	jmp    c0028387 <__adddf3+0x21c>
c002834e:	be 20 00 00 00       	mov    esi,0x20
c0028353:	29 de                	sub    esi,ebx
c0028355:	89 c7                	mov    edi,eax
c0028357:	89 f1                	mov    ecx,esi
c0028359:	d3 e7                	shl    edi,cl
c002835b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002835e:	89 d7                	mov    edi,edx
c0028360:	88 d9                	mov    cl,bl
c0028362:	d3 ef                	shr    edi,cl
c0028364:	89 f9                	mov    ecx,edi
c0028366:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028369:	09 cf                	or     edi,ecx
c002836b:	88 d9                	mov    cl,bl
c002836d:	d3 e8                	shr    eax,cl
c002836f:	89 f1                	mov    ecx,esi
c0028371:	d3 e2                	shl    edx,cl
c0028373:	85 d2                	test   edx,edx
c0028375:	0f 95 c2             	setne  dl
c0028378:	0f b6 d2             	movzx  edx,dl
c002837b:	09 d7                	or     edi,edx
c002837d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028380:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028383:	01 fa                	add    edx,edi
c0028385:	11 c6                	adc    esi,eax
c0028387:	89 f0                	mov    eax,esi
c0028389:	eb 77                	jmp    c0028402 <__adddf3+0x297>
c002838b:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002838e:	46                   	inc    esi
c002838f:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0028392:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0028398:	75 41                	jne    c00283db <__adddf3+0x270>
c002839a:	89 d3                	mov    ebx,edx
c002839c:	09 c3                	or     ebx,eax
c002839e:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00283a5:	75 27                	jne    c00283ce <__adddf3+0x263>
c00283a7:	85 db                	test   ebx,ebx
c00283a9:	0f 84 fb 03 00 00    	je     c00287aa <__adddf3+0x63f>
c00283af:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00283b2:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00283b5:	0f 84 f5 03 00 00    	je     c00287b0 <__adddf3+0x645>
c00283bb:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00283be:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00283c1:	85 c0                	test   eax,eax
c00283c3:	0f 89 91 03 00 00    	jns    c002875a <__adddf3+0x5ef>
c00283c9:	e9 85 03 00 00       	jmp    c0028753 <__adddf3+0x5e8>
c00283ce:	85 db                	test   ebx,ebx
c00283d0:	0f 85 da 03 00 00    	jne    c00287b0 <__adddf3+0x645>
c00283d6:	e9 cf 03 00 00       	jmp    c00287aa <__adddf3+0x63f>
c00283db:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00283de:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00283e1:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00283e4:	f7 d1                	not    ecx
c00283e6:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00283ec:	0f 84 70 03 00 00    	je     c0028762 <__adddf3+0x5f7>
c00283f2:	d1 ea                	shr    edx,1
c00283f4:	89 c1                	mov    ecx,eax
c00283f6:	c1 e1 1f             	shl    ecx,0x1f
c00283f9:	09 ca                	or     edx,ecx
c00283fb:	d1 e8                	shr    eax,1
c00283fd:	e9 6f 03 00 00       	jmp    c0028771 <__adddf3+0x606>
c0028402:	85 c0                	test   eax,eax
c0028404:	0f 89 67 03 00 00    	jns    c0028771 <__adddf3+0x606>
c002840a:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c002840d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028410:	f7 d1                	not    ecx
c0028412:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0028418:	0f 84 44 03 00 00    	je     c0028762 <__adddf3+0x5f7>
c002841e:	89 d1                	mov    ecx,edx
c0028420:	d1 e9                	shr    ecx,1
c0028422:	83 e2 01             	and    edx,0x1
c0028425:	09 ca                	or     edx,ecx
c0028427:	89 c1                	mov    ecx,eax
c0028429:	c1 e1 1f             	shl    ecx,0x1f
c002842c:	09 ca                	or     edx,ecx
c002842e:	d1 e8                	shr    eax,1
c0028430:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0028435:	e9 37 03 00 00       	jmp    c0028771 <__adddf3+0x606>
c002843a:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002843d:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028443:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c0028446:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028449:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002844f:	29 de                	sub    esi,ebx
c0028451:	85 f6                	test   esi,esi
c0028453:	0f 8e bd 00 00 00    	jle    c0028516 <__adddf3+0x3ab>
c0028459:	85 db                	test   ebx,ebx
c002845b:	75 17                	jne    c0028474 <__adddf3+0x309>
c002845d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0028460:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028463:	0f 84 47 03 00 00    	je     c00287b0 <__adddf3+0x645>
c0028469:	4e                   	dec    esi
c002846a:	75 20                	jne    c002848c <__adddf3+0x321>
c002846c:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002846f:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0028472:	eb 5b                	jmp    c00284cf <__adddf3+0x364>
c0028474:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0028477:	f7 d3                	not    ebx
c0028479:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002847f:	0f 84 2b 03 00 00    	je     c00287b0 <__adddf3+0x645>
c0028485:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c002848c:	83 fe 1f             	cmp    esi,0x1f
c002848f:	7e 49                	jle    c00284da <__adddf3+0x36f>
c0028491:	83 fe 3f             	cmp    esi,0x3f
c0028494:	0f 8f 16 03 00 00    	jg     c00287b0 <__adddf3+0x645>
c002849a:	83 e6 1f             	and    esi,0x1f
c002849d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00284a0:	89 f1                	mov    ecx,esi
c00284a2:	d3 ef                	shr    edi,cl
c00284a4:	31 db                	xor    ebx,ebx
c00284a6:	85 f6                	test   esi,esi
c00284a8:	74 13                	je     c00284bd <__adddf3+0x352>
c00284aa:	b9 20 00 00 00       	mov    ecx,0x20
c00284af:	29 f1                	sub    ecx,esi
c00284b1:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00284b4:	d3 e6                	shl    esi,cl
c00284b6:	31 db                	xor    ebx,ebx
c00284b8:	85 f6                	test   esi,esi
c00284ba:	0f 95 c3             	setne  bl
c00284bd:	31 c9                	xor    ecx,ecx
c00284bf:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00284c3:	0f 95 c1             	setne  cl
c00284c6:	09 cf                	or     edi,ecx
c00284c8:	09 fb                	or     ebx,edi
c00284ca:	29 da                	sub    edx,ebx
c00284cc:	83 d8 00             	sbb    eax,0x0
c00284cf:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00284d2:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00284d5:	e9 aa 01 00 00       	jmp    c0028684 <__adddf3+0x519>
c00284da:	bf 20 00 00 00       	mov    edi,0x20
c00284df:	29 f7                	sub    edi,esi
c00284e1:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00284e4:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00284e7:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00284ea:	d3 e3                	shl    ebx,cl
c00284ec:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00284ef:	89 f1                	mov    ecx,esi
c00284f1:	d3 ef                	shr    edi,cl
c00284f3:	09 fb                	or     ebx,edi
c00284f5:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00284f8:	89 f1                	mov    ecx,esi
c00284fa:	d3 ef                	shr    edi,cl
c00284fc:	89 fe                	mov    esi,edi
c00284fe:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0028501:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0028504:	d3 e7                	shl    edi,cl
c0028506:	85 ff                	test   edi,edi
c0028508:	0f 95 c1             	setne  cl
c002850b:	0f b6 c9             	movzx  ecx,cl
c002850e:	09 cb                	or     ebx,ecx
c0028510:	29 da                	sub    edx,ebx
c0028512:	19 f0                	sbb    eax,esi
c0028514:	eb b9                	jmp    c00284cf <__adddf3+0x364>
c0028516:	0f 84 cd 00 00 00    	je     c00285e9 <__adddf3+0x47e>
c002851c:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c002851f:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0028522:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0028525:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0028529:	75 1b                	jne    c0028546 <__adddf3+0x3db>
c002852b:	89 d6                	mov    esi,edx
c002852d:	09 c6                	or     esi,eax
c002852f:	0f 84 7b 02 00 00    	je     c00287b0 <__adddf3+0x645>
c0028535:	4b                   	dec    ebx
c0028536:	75 24                	jne    c002855c <__adddf3+0x3f1>
c0028538:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002853b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002853e:	29 d1                	sub    ecx,edx
c0028540:	19 c6                	sbb    esi,eax
c0028542:	89 ca                	mov    edx,ecx
c0028544:	eb 61                	jmp    c00285a7 <__adddf3+0x43c>
c0028546:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0028549:	f7 d6                	not    esi
c002854b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028551:	0f 84 59 02 00 00    	je     c00287b0 <__adddf3+0x645>
c0028557:	0d 00 00 00 80       	or     eax,0x80000000
c002855c:	83 fb 1f             	cmp    ebx,0x1f
c002855f:	7e 4d                	jle    c00285ae <__adddf3+0x443>
c0028561:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0028564:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0028567:	83 fb 3f             	cmp    ebx,0x3f
c002856a:	0f 8f 40 02 00 00    	jg     c00287b0 <__adddf3+0x645>
c0028570:	83 e3 1f             	and    ebx,0x1f
c0028573:	89 d9                	mov    ecx,ebx
c0028575:	89 c7                	mov    edi,eax
c0028577:	d3 ef                	shr    edi,cl
c0028579:	31 db                	xor    ebx,ebx
c002857b:	85 c9                	test   ecx,ecx
c002857d:	74 12                	je     c0028591 <__adddf3+0x426>
c002857f:	be 20 00 00 00       	mov    esi,0x20
c0028584:	29 ce                	sub    esi,ecx
c0028586:	89 f1                	mov    ecx,esi
c0028588:	d3 e0                	shl    eax,cl
c002858a:	31 db                	xor    ebx,ebx
c002858c:	85 c0                	test   eax,eax
c002858e:	0f 95 c3             	setne  bl
c0028591:	31 c0                	xor    eax,eax
c0028593:	85 d2                	test   edx,edx
c0028595:	0f 95 c0             	setne  al
c0028598:	09 c7                	or     edi,eax
c002859a:	09 fb                	or     ebx,edi
c002859c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002859f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00285a2:	29 da                	sub    edx,ebx
c00285a4:	83 de 00             	sbb    esi,0x0
c00285a7:	89 f0                	mov    eax,esi
c00285a9:	e9 d6 00 00 00       	jmp    c0028684 <__adddf3+0x519>
c00285ae:	be 20 00 00 00       	mov    esi,0x20
c00285b3:	29 de                	sub    esi,ebx
c00285b5:	89 c7                	mov    edi,eax
c00285b7:	89 f1                	mov    ecx,esi
c00285b9:	d3 e7                	shl    edi,cl
c00285bb:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00285be:	89 d7                	mov    edi,edx
c00285c0:	88 d9                	mov    cl,bl
c00285c2:	d3 ef                	shr    edi,cl
c00285c4:	89 f9                	mov    ecx,edi
c00285c6:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00285c9:	09 cf                	or     edi,ecx
c00285cb:	88 d9                	mov    cl,bl
c00285cd:	d3 e8                	shr    eax,cl
c00285cf:	89 f1                	mov    ecx,esi
c00285d1:	d3 e2                	shl    edx,cl
c00285d3:	85 d2                	test   edx,edx
c00285d5:	0f 95 c2             	setne  dl
c00285d8:	0f b6 d2             	movzx  edx,dl
c00285db:	09 d7                	or     edi,edx
c00285dd:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00285e0:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00285e3:	29 fa                	sub    edx,edi
c00285e5:	19 c6                	sbb    esi,eax
c00285e7:	eb be                	jmp    c00285a7 <__adddf3+0x43c>
c00285e9:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00285ec:	8d 5e 01             	lea    ebx,[esi+0x1]
c00285ef:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c00285f5:	75 6a                	jne    c0028661 <__adddf3+0x4f6>
c00285f7:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00285fb:	75 58                	jne    c0028655 <__adddf3+0x4ea>
c00285fd:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0028600:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028603:	89 d6                	mov    esi,edx
c0028605:	09 c6                	or     esi,eax
c0028607:	75 17                	jne    c0028620 <__adddf3+0x4b5>
c0028609:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002860c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002860f:	85 db                	test   ebx,ebx
c0028611:	0f 85 99 01 00 00    	jne    c00287b0 <__adddf3+0x645>
c0028617:	31 ff                	xor    edi,edi
c0028619:	31 c9                	xor    ecx,ecx
c002861b:	e9 90 01 00 00       	jmp    c00287b0 <__adddf3+0x645>
c0028620:	85 db                	test   ebx,ebx
c0028622:	0f 84 88 01 00 00    	je     c00287b0 <__adddf3+0x645>
c0028628:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002862b:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002862e:	85 c0                	test   eax,eax
c0028630:	79 10                	jns    c0028642 <__adddf3+0x4d7>
c0028632:	31 c9                	xor    ecx,ecx
c0028634:	f7 da                	neg    edx
c0028636:	0f 95 c1             	setne  cl
c0028639:	01 c8                	add    eax,ecx
c002863b:	f7 d8                	neg    eax
c002863d:	e9 2f 01 00 00       	jmp    c0028771 <__adddf3+0x606>
c0028642:	31 ff                	xor    edi,edi
c0028644:	31 c9                	xor    ecx,ecx
c0028646:	89 c3                	mov    ebx,eax
c0028648:	09 d3                	or     ebx,edx
c002864a:	0f 84 60 01 00 00    	je     c00287b0 <__adddf3+0x645>
c0028650:	e9 05 01 00 00       	jmp    c002875a <__adddf3+0x5ef>
c0028655:	31 ff                	xor    edi,edi
c0028657:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c002865c:	e9 4f 01 00 00       	jmp    c00287b0 <__adddf3+0x645>
c0028661:	89 c1                	mov    ecx,eax
c0028663:	89 d0                	mov    eax,edx
c0028665:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0028668:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c002866b:	89 ca                	mov    edx,ecx
c002866d:	85 c9                	test   ecx,ecx
c002866f:	79 2c                	jns    c002869d <__adddf3+0x532>
c0028671:	31 c9                	xor    ecx,ecx
c0028673:	f7 d8                	neg    eax
c0028675:	0f 95 c1             	setne  cl
c0028678:	01 ca                	add    edx,ecx
c002867a:	f7 da                	neg    edx
c002867c:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002867f:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0028682:	eb 19                	jmp    c002869d <__adddf3+0x532>
c0028684:	85 c0                	test   eax,eax
c0028686:	0f 89 e5 00 00 00    	jns    c0028771 <__adddf3+0x606>
c002868c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028691:	89 c1                	mov    ecx,eax
c0028693:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028696:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0028699:	89 d0                	mov    eax,edx
c002869b:	89 ca                	mov    edx,ecx
c002869d:	85 d2                	test   edx,edx
c002869f:	74 59                	je     c00286fa <__adddf3+0x58f>
c00286a1:	0f bd da             	bsr    ebx,edx
c00286a4:	83 f3 1f             	xor    ebx,0x1f
c00286a7:	88 d9                	mov    cl,bl
c00286a9:	d3 e2                	shl    edx,cl
c00286ab:	bf 20 00 00 00       	mov    edi,0x20
c00286b0:	89 f9                	mov    ecx,edi
c00286b2:	29 d9                	sub    ecx,ebx
c00286b4:	89 c6                	mov    esi,eax
c00286b6:	d3 ee                	shr    esi,cl
c00286b8:	09 d6                	or     esi,edx
c00286ba:	88 d9                	mov    cl,bl
c00286bc:	d3 e0                	shl    eax,cl
c00286be:	89 c2                	mov    edx,eax
c00286c0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00286c3:	25 ff 07 00 00       	and    eax,0x7ff
c00286c8:	39 d8                	cmp    eax,ebx
c00286ca:	7f 22                	jg     c00286ee <__adddf3+0x583>
c00286cc:	29 c3                	sub    ebx,eax
c00286ce:	43                   	inc    ebx
c00286cf:	88 d9                	mov    cl,bl
c00286d1:	d3 ea                	shr    edx,cl
c00286d3:	29 df                	sub    edi,ebx
c00286d5:	89 f9                	mov    ecx,edi
c00286d7:	89 f0                	mov    eax,esi
c00286d9:	d3 e0                	shl    eax,cl
c00286db:	09 c2                	or     edx,eax
c00286dd:	89 f0                	mov    eax,esi
c00286df:	88 d9                	mov    cl,bl
c00286e1:	d3 e8                	shr    eax,cl
c00286e3:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00286e6:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c00286ec:	eb 6f                	jmp    c002875d <__adddf3+0x5f2>
c00286ee:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00286f1:	29 d8                	sub    eax,ebx
c00286f3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00286f6:	89 f0                	mov    eax,esi
c00286f8:	eb 59                	jmp    c0028753 <__adddf3+0x5e8>
c00286fa:	85 c0                	test   eax,eax
c00286fc:	74 6a                	je     c0028768 <__adddf3+0x5fd>
c00286fe:	0f bd c8             	bsr    ecx,eax
c0028701:	83 f1 1f             	xor    ecx,0x1f
c0028704:	d3 e0                	shl    eax,cl
c0028706:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0028709:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002870f:	83 c1 20             	add    ecx,0x20
c0028712:	39 cb                	cmp    ebx,ecx
c0028714:	7f 35                	jg     c002874b <__adddf3+0x5e0>
c0028716:	29 d9                	sub    ecx,ebx
c0028718:	8d 71 01             	lea    esi,[ecx+0x1]
c002871b:	83 fe 1f             	cmp    esi,0x1f
c002871e:	7e 09                	jle    c0028729 <__adddf3+0x5be>
c0028720:	83 e9 1f             	sub    ecx,0x1f
c0028723:	d3 e8                	shr    eax,cl
c0028725:	89 c3                	mov    ebx,eax
c0028727:	eb 11                	jmp    c002873a <__adddf3+0x5cf>
c0028729:	b9 20 00 00 00       	mov    ecx,0x20
c002872e:	29 f1                	sub    ecx,esi
c0028730:	89 c3                	mov    ebx,eax
c0028732:	d3 e3                	shl    ebx,cl
c0028734:	89 f1                	mov    ecx,esi
c0028736:	d3 e8                	shr    eax,cl
c0028738:	89 c2                	mov    edx,eax
c002873a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002873d:	25 00 f8 ff ff       	and    eax,0xfffff800
c0028742:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028745:	89 d0                	mov    eax,edx
c0028747:	89 da                	mov    edx,ebx
c0028749:	eb 26                	jmp    c0028771 <__adddf3+0x606>
c002874b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002874e:	29 cf                	sub    edi,ecx
c0028750:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028753:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028758:	eb 17                	jmp    c0028771 <__adddf3+0x606>
c002875a:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002875d:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028760:	eb 0f                	jmp    c0028771 <__adddf3+0x606>
c0028762:	31 d2                	xor    edx,edx
c0028764:	31 c0                	xor    eax,eax
c0028766:	eb 09                	jmp    c0028771 <__adddf3+0x606>
c0028768:	89 c2                	mov    edx,eax
c002876a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0028771:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028774:	c1 e1 14             	shl    ecx,0x14
c0028777:	89 c3                	mov    ebx,eax
c0028779:	c1 eb 0b             	shr    ebx,0xb
c002877c:	09 d9                	or     ecx,ebx
c002877e:	89 d3                	mov    ebx,edx
c0028780:	c1 eb 0b             	shr    ebx,0xb
c0028783:	c1 e0 15             	shl    eax,0x15
c0028786:	09 d8                	or     eax,ebx
c0028788:	89 c7                	mov    edi,eax
c002878a:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0028790:	0f 95 c0             	setne  al
c0028793:	89 c6                	mov    esi,eax
c0028795:	09 f3                	or     ebx,esi
c0028797:	83 e3 01             	and    ebx,0x1
c002879a:	c1 ea 0a             	shr    edx,0xa
c002879d:	21 da                	and    edx,ebx
c002879f:	89 f8                	mov    eax,edi
c00287a1:	01 d0                	add    eax,edx
c00287a3:	83 d1 00             	adc    ecx,0x0
c00287a6:	89 c7                	mov    edi,eax
c00287a8:	eb 06                	jmp    c00287b0 <__adddf3+0x645>
c00287aa:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00287ad:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00287b0:	89 f8                	mov    eax,edi
c00287b2:	89 ca                	mov    edx,ecx
c00287b4:	83 c4 24             	add    esp,0x24
c00287b7:	5b                   	pop    ebx
c00287b8:	5e                   	pop    esi
c00287b9:	5f                   	pop    edi
c00287ba:	5d                   	pop    ebp
c00287bb:	c3                   	ret    

c00287bc <__subdf3>:
c00287bc:	55                   	push   ebp
c00287bd:	89 e5                	mov    ebp,esp
c00287bf:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00287c2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00287c5:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00287cb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00287ce:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00287d1:	5d                   	pop    ebp
c00287d2:	e9 94 f9 ff ff       	jmp    c002816b <__adddf3>

c00287d7 <__negdf2>:
c00287d7:	55                   	push   ebp
c00287d8:	89 e5                	mov    ebp,esp
c00287da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00287dd:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00287e0:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00287e6:	5d                   	pop    ebp
c00287e7:	c3                   	ret    

c00287e8 <__muldf3>:
c00287e8:	55                   	push   ebp
c00287e9:	89 e5                	mov    ebp,esp
c00287eb:	57                   	push   edi
c00287ec:	56                   	push   esi
c00287ed:	53                   	push   ebx
c00287ee:	83 ec 24             	sub    esp,0x24
c00287f1:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00287f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00287f7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00287fa:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00287fd:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0028800:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0028803:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028806:	89 c8                	mov    eax,ecx
c0028808:	c1 f8 14             	sar    eax,0x14
c002880b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002880e:	89 f8                	mov    eax,edi
c0028810:	89 fb                	mov    ebx,edi
c0028812:	c1 e3 0b             	shl    ebx,0xb
c0028815:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0028818:	c1 e1 0b             	shl    ecx,0xb
c002881b:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028821:	c1 e8 15             	shr    eax,0x15
c0028824:	09 c1                	or     ecx,eax
c0028826:	89 d6                	mov    esi,edx
c0028828:	89 d0                	mov    eax,edx
c002882a:	c1 f8 14             	sar    eax,0x14
c002882d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0028830:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0028833:	89 c3                	mov    ebx,eax
c0028835:	c1 e3 0b             	shl    ebx,0xb
c0028838:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c002883b:	c1 e6 0b             	shl    esi,0xb
c002883e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0028844:	c1 e8 15             	shr    eax,0x15
c0028847:	09 c6                	or     esi,eax
c0028849:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002884c:	25 ff 07 00 00       	and    eax,0x7ff
c0028851:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0028854:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028857:	25 ff 07 00 00       	and    eax,0x7ff
c002885c:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c002885f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0028862:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0028865:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c002886c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002886f:	40                   	inc    eax
c0028870:	a9 fe 07 00 00       	test   eax,0x7fe
c0028875:	0f 85 8d 00 00 00    	jne    c0028908 <__muldf3+0x120>
c002887b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002887e:	09 c8                	or     eax,ecx
c0028880:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0028884:	74 44                	je     c00288ca <__muldf3+0xe2>
c0028886:	85 c0                	test   eax,eax
c0028888:	0f 85 31 02 00 00    	jne    c0028abf <__muldf3+0x2d7>
c002888e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028891:	40                   	inc    eax
c0028892:	a9 fe 07 00 00       	test   eax,0x7fe
c0028897:	75 13                	jne    c00288ac <__muldf3+0xc4>
c0028899:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002889c:	09 f1                	or     ecx,esi
c002889e:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00288a2:	74 22                	je     c00288c6 <__muldf3+0xde>
c00288a4:	85 c9                	test   ecx,ecx
c00288a6:	0f 85 0d 02 00 00    	jne    c0028ab9 <__muldf3+0x2d1>
c00288ac:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c00288b0:	0f 89 09 02 00 00    	jns    c0028abf <__muldf3+0x2d7>
c00288b6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00288b9:	05 00 00 00 80       	add    eax,0x80000000
c00288be:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00288c1:	e9 f9 01 00 00       	jmp    c0028abf <__muldf3+0x2d7>
c00288c6:	85 c9                	test   ecx,ecx
c00288c8:	eb 2e                	jmp    c00288f8 <__muldf3+0x110>
c00288ca:	85 c0                	test   eax,eax
c00288cc:	74 20                	je     c00288ee <__muldf3+0x106>
c00288ce:	8d 04 09             	lea    eax,[ecx+ecx*1]
c00288d1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00288d4:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00288d7:	c1 ef 1f             	shr    edi,0x1f
c00288da:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c00288dd:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c00288e0:	8d 43 ff             	lea    eax,[ebx-0x1]
c00288e3:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00288e6:	09 f9                	or     ecx,edi
c00288e8:	78 1e                	js     c0028908 <__muldf3+0x120>
c00288ea:	89 c3                	mov    ebx,eax
c00288ec:	eb e0                	jmp    c00288ce <__muldf3+0xe6>
c00288ee:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00288f1:	f7 d0                	not    eax
c00288f3:	a9 ff 07 00 00       	test   eax,0x7ff
c00288f8:	75 b2                	jne    c00288ac <__muldf3+0xc4>
c00288fa:	31 ff                	xor    edi,edi
c00288fc:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0028903:	e9 b7 01 00 00       	jmp    c0028abf <__muldf3+0x2d7>
c0028908:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002890b:	40                   	inc    eax
c002890c:	a9 fe 07 00 00       	test   eax,0x7fe
c0028911:	75 57                	jne    c002896a <__muldf3+0x182>
c0028913:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0028916:	09 f0                	or     eax,esi
c0028918:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002891c:	74 23                	je     c0028941 <__muldf3+0x159>
c002891e:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0028922:	0f 89 91 01 00 00    	jns    c0028ab9 <__muldf3+0x2d1>
c0028928:	85 c0                	test   eax,eax
c002892a:	0f 85 89 01 00 00    	jne    c0028ab9 <__muldf3+0x2d1>
c0028930:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0028933:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0028939:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002893c:	e9 7e 01 00 00       	jmp    c0028abf <__muldf3+0x2d7>
c0028941:	85 c0                	test   eax,eax
c0028943:	75 0c                	jne    c0028951 <__muldf3+0x169>
c0028945:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0028949:	0f 89 6a 01 00 00    	jns    c0028ab9 <__muldf3+0x2d1>
c002894f:	eb df                	jmp    c0028930 <__muldf3+0x148>
c0028951:	01 f6                	add    esi,esi
c0028953:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028956:	c1 ea 1f             	shr    edx,0x1f
c0028959:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002895c:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c002895f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0028962:	09 d6                	or     esi,edx
c0028964:	78 04                	js     c002896a <__muldf3+0x182>
c0028966:	89 c3                	mov    ebx,eax
c0028968:	eb e7                	jmp    c0028951 <__muldf3+0x169>
c002896a:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0028970:	81 ce 00 00 00 80    	or     esi,0x80000000
c0028976:	89 c8                	mov    eax,ecx
c0028978:	f7 e6                	mul    esi
c002897a:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c002897d:	89 c7                	mov    edi,eax
c002897f:	89 c8                	mov    eax,ecx
c0028981:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0028984:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0028987:	89 c1                	mov    ecx,eax
c0028989:	89 f0                	mov    eax,esi
c002898b:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c002898e:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0028991:	89 c6                	mov    esi,eax
c0028993:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028996:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0028999:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c002899c:	31 c0                	xor    eax,eax
c002899e:	01 f1                	add    ecx,esi
c00289a0:	0f 92 c0             	setb   al
c00289a3:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c00289a6:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c00289a9:	83 d6 00             	adc    esi,0x0
c00289ac:	01 c7                	add    edi,eax
c00289ae:	83 d6 00             	adc    esi,0x0
c00289b1:	01 ca                	add    edx,ecx
c00289b3:	0f 92 c1             	setb   cl
c00289b6:	0f b6 c9             	movzx  ecx,cl
c00289b9:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c00289bc:	83 d6 00             	adc    esi,0x0
c00289bf:	01 cf                	add    edi,ecx
c00289c1:	83 d6 00             	adc    esi,0x0
c00289c4:	31 c9                	xor    ecx,ecx
c00289c6:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c00289c9:	0f 95 c1             	setne  cl
c00289cc:	09 cf                	or     edi,ecx
c00289ce:	85 f6                	test   esi,esi
c00289d0:	78 0c                	js     c00289de <__muldf3+0x1f6>
c00289d2:	01 f6                	add    esi,esi
c00289d4:	89 f8                	mov    eax,edi
c00289d6:	c1 e8 1f             	shr    eax,0x1f
c00289d9:	09 c6                	or     esi,eax
c00289db:	01 ff                	add    edi,edi
c00289dd:	4b                   	dec    ebx
c00289de:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c00289e4:	0f 8f 85 00 00 00    	jg     c0028a6f <__muldf3+0x287>
c00289ea:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c00289f0:	85 db                	test   ebx,ebx
c00289f2:	0f 8f 84 00 00 00    	jg     c0028a7c <__muldf3+0x294>
c00289f8:	83 fb cc             	cmp    ebx,0xffffffcc
c00289fb:	7c 79                	jl     c0028a76 <__muldf3+0x28e>
c00289fd:	ba 01 00 00 00       	mov    edx,0x1
c0028a02:	29 da                	sub    edx,ebx
c0028a04:	81 ce 00 00 00 80    	or     esi,0x80000000
c0028a0a:	83 fa 1f             	cmp    edx,0x1f
c0028a0d:	7e 30                	jle    c0028a3f <__muldf3+0x257>
c0028a0f:	83 fa 20             	cmp    edx,0x20
c0028a12:	75 0b                	jne    c0028a1f <__muldf3+0x237>
c0028a14:	31 c0                	xor    eax,eax
c0028a16:	85 ff                	test   edi,edi
c0028a18:	0f 95 c0             	setne  al
c0028a1b:	89 c7                	mov    edi,eax
c0028a1d:	eb 1a                	jmp    c0028a39 <__muldf3+0x251>
c0028a1f:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0028a22:	89 f0                	mov    eax,esi
c0028a24:	d3 e0                	shl    eax,cl
c0028a26:	09 f8                	or     eax,edi
c0028a28:	0f 95 c0             	setne  al
c0028a2b:	0f b6 c0             	movzx  eax,al
c0028a2e:	89 c7                	mov    edi,eax
c0028a30:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0028a35:	29 d9                	sub    ecx,ebx
c0028a37:	d3 ee                	shr    esi,cl
c0028a39:	09 f7                	or     edi,esi
c0028a3b:	31 db                	xor    ebx,ebx
c0028a3d:	eb 3b                	jmp    c0028a7a <__muldf3+0x292>
c0028a3f:	83 c3 1f             	add    ebx,0x1f
c0028a42:	89 f0                	mov    eax,esi
c0028a44:	88 d9                	mov    cl,bl
c0028a46:	d3 e0                	shl    eax,cl
c0028a48:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028a4b:	89 f8                	mov    eax,edi
c0028a4d:	88 d1                	mov    cl,dl
c0028a4f:	d3 e8                	shr    eax,cl
c0028a51:	89 c1                	mov    ecx,eax
c0028a53:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028a56:	09 c8                	or     eax,ecx
c0028a58:	88 d9                	mov    cl,bl
c0028a5a:	d3 e7                	shl    edi,cl
c0028a5c:	31 db                	xor    ebx,ebx
c0028a5e:	85 ff                	test   edi,edi
c0028a60:	0f 95 c3             	setne  bl
c0028a63:	89 df                	mov    edi,ebx
c0028a65:	09 c7                	or     edi,eax
c0028a67:	88 d1                	mov    cl,dl
c0028a69:	d3 ee                	shr    esi,cl
c0028a6b:	31 db                	xor    ebx,ebx
c0028a6d:	eb 0d                	jmp    c0028a7c <__muldf3+0x294>
c0028a6f:	bb ff 07 00 00       	mov    ebx,0x7ff
c0028a74:	eb 02                	jmp    c0028a78 <__muldf3+0x290>
c0028a76:	31 db                	xor    ebx,ebx
c0028a78:	31 ff                	xor    edi,edi
c0028a7a:	31 f6                	xor    esi,esi
c0028a7c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028a7f:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0028a82:	25 00 f8 ff ff       	and    eax,0xfffff800
c0028a87:	09 c3                	or     ebx,eax
c0028a89:	c1 e3 14             	shl    ebx,0x14
c0028a8c:	89 f0                	mov    eax,esi
c0028a8e:	c1 e8 0b             	shr    eax,0xb
c0028a91:	09 c3                	or     ebx,eax
c0028a93:	89 f8                	mov    eax,edi
c0028a95:	c1 e8 0b             	shr    eax,0xb
c0028a98:	c1 e6 15             	shl    esi,0x15
c0028a9b:	09 c6                	or     esi,eax
c0028a9d:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0028aa3:	0f 95 c1             	setne  cl
c0028aa6:	09 c8                	or     eax,ecx
c0028aa8:	83 e0 01             	and    eax,0x1
c0028aab:	c1 ef 0a             	shr    edi,0xa
c0028aae:	21 c7                	and    edi,eax
c0028ab0:	01 f7                	add    edi,esi
c0028ab2:	83 d3 00             	adc    ebx,0x0
c0028ab5:	89 da                	mov    edx,ebx
c0028ab7:	eb 03                	jmp    c0028abc <__muldf3+0x2d4>
c0028ab9:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0028abc:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0028abf:	89 f8                	mov    eax,edi
c0028ac1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028ac4:	83 c4 24             	add    esp,0x24
c0028ac7:	5b                   	pop    ebx
c0028ac8:	5e                   	pop    esi
c0028ac9:	5f                   	pop    edi
c0028aca:	5d                   	pop    ebp
c0028acb:	c3                   	ret    

c0028acc <__divdf3>:
c0028acc:	55                   	push   ebp
c0028acd:	89 e5                	mov    ebp,esp
c0028acf:	57                   	push   edi
c0028ad0:	56                   	push   esi
c0028ad1:	53                   	push   ebx
c0028ad2:	83 ec 2c             	sub    esp,0x2c
c0028ad5:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0028ad8:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028adb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0028ade:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0028ae1:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0028ae4:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0028ae7:	89 ce                	mov    esi,ecx
c0028ae9:	89 c8                	mov    eax,ecx
c0028aeb:	c1 f8 14             	sar    eax,0x14
c0028aee:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0028af1:	89 f8                	mov    eax,edi
c0028af3:	89 fb                	mov    ebx,edi
c0028af5:	c1 e3 0b             	shl    ebx,0xb
c0028af8:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0028afb:	c1 e6 0b             	shl    esi,0xb
c0028afe:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0028b04:	c1 e8 15             	shr    eax,0x15
c0028b07:	09 c6                	or     esi,eax
c0028b09:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0028b0c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0028b0f:	89 c2                	mov    edx,eax
c0028b11:	c1 fa 14             	sar    edx,0x14
c0028b14:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0028b17:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0028b1a:	89 de                	mov    esi,ebx
c0028b1c:	c1 e6 0b             	shl    esi,0xb
c0028b1f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0028b22:	c1 e0 0b             	shl    eax,0xb
c0028b25:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028b2a:	c1 eb 15             	shr    ebx,0x15
c0028b2d:	09 d8                	or     eax,ebx
c0028b2f:	89 c2                	mov    edx,eax
c0028b31:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028b34:	25 ff 07 00 00       	and    eax,0x7ff
c0028b39:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0028b3c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0028b3f:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028b45:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0028b48:	29 d8                	sub    eax,ebx
c0028b4a:	05 ff 03 00 00       	add    eax,0x3ff
c0028b4f:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0028b52:	46                   	inc    esi
c0028b53:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0028b59:	0f 85 a5 00 00 00    	jne    c0028c04 <__divdf3+0x138>
c0028b5f:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0028b62:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0028b65:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0028b69:	74 2a                	je     c0028b95 <__divdf3+0xc9>
c0028b6b:	85 f6                	test   esi,esi
c0028b6d:	0f 85 cc 02 00 00    	jne    c0028e3f <__divdf3+0x373>
c0028b73:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028b76:	40                   	inc    eax
c0028b77:	a9 fe 07 00 00       	test   eax,0x7fe
c0028b7c:	75 26                	jne    c0028ba4 <__divdf3+0xd8>
c0028b7e:	85 db                	test   ebx,ebx
c0028b80:	74 22                	je     c0028ba4 <__divdf3+0xd8>
c0028b82:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028b85:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028b88:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028b8b:	09 d0                	or     eax,edx
c0028b8d:	0f 85 ac 02 00 00    	jne    c0028e3f <__divdf3+0x373>
c0028b93:	eb 63                	jmp    c0028bf8 <__divdf3+0x12c>
c0028b95:	85 f6                	test   esi,esi
c0028b97:	75 22                	jne    c0028bbb <__divdf3+0xef>
c0028b99:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028b9c:	40                   	inc    eax
c0028b9d:	a9 fe 07 00 00       	test   eax,0x7fe
c0028ba2:	74 36                	je     c0028bda <__divdf3+0x10e>
c0028ba4:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0028ba8:	0f 89 91 02 00 00    	jns    c0028e3f <__divdf3+0x373>
c0028bae:	89 f8                	mov    eax,edi
c0028bb0:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0028bb6:	e9 80 02 00 00       	jmp    c0028e3b <__divdf3+0x36f>
c0028bbb:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028bbe:	01 f6                	add    esi,esi
c0028bc0:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0028bc3:	c1 ef 1f             	shr    edi,0x1f
c0028bc6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028bc9:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0028bcc:	8d 48 ff             	lea    ecx,[eax-0x1]
c0028bcf:	09 f7                	or     edi,esi
c0028bd1:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0028bd4:	78 2e                	js     c0028c04 <__divdf3+0x138>
c0028bd6:	89 c8                	mov    eax,ecx
c0028bd8:	eb e1                	jmp    c0028bbb <__divdf3+0xef>
c0028bda:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028bdd:	09 d0                	or     eax,edx
c0028bdf:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0028be3:	74 0f                	je     c0028bf4 <__divdf3+0x128>
c0028be5:	85 c0                	test   eax,eax
c0028be7:	74 bb                	je     c0028ba4 <__divdf3+0xd8>
c0028be9:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028bec:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028bef:	e9 4b 02 00 00       	jmp    c0028e3f <__divdf3+0x373>
c0028bf4:	85 c0                	test   eax,eax
c0028bf6:	75 ac                	jne    c0028ba4 <__divdf3+0xd8>
c0028bf8:	31 ff                	xor    edi,edi
c0028bfa:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0028bff:	e9 3b 02 00 00       	jmp    c0028e3f <__divdf3+0x373>
c0028c04:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028c07:	8d 4f 01             	lea    ecx,[edi+0x1]
c0028c0a:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0028c10:	75 6b                	jne    c0028c7d <__divdf3+0x1b1>
c0028c12:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028c15:	09 d6                	or     esi,edx
c0028c17:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0028c1b:	74 28                	je     c0028c45 <__divdf3+0x179>
c0028c1d:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028c20:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028c23:	85 f6                	test   esi,esi
c0028c25:	0f 85 14 02 00 00    	jne    c0028e3f <__divdf3+0x373>
c0028c2b:	31 ff                	xor    edi,edi
c0028c2d:	31 c9                	xor    ecx,ecx
c0028c2f:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028c32:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0028c35:	0f 89 04 02 00 00    	jns    c0028e3f <__divdf3+0x373>
c0028c3b:	b9 00 00 00 80       	mov    ecx,0x80000000
c0028c40:	e9 fa 01 00 00       	jmp    c0028e3f <__divdf3+0x373>
c0028c45:	85 f6                	test   esi,esi
c0028c47:	75 1b                	jne    c0028c64 <__divdf3+0x198>
c0028c49:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028c4c:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0028c4f:	25 00 00 00 80       	and    eax,0x80000000
c0028c54:	31 c9                	xor    ecx,ecx
c0028c56:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0028c5b:	89 cf                	mov    edi,ecx
c0028c5d:	89 c1                	mov    ecx,eax
c0028c5f:	e9 db 01 00 00       	jmp    c0028e3f <__divdf3+0x373>
c0028c64:	01 d2                	add    edx,edx
c0028c66:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028c69:	c1 eb 1f             	shr    ebx,0x1f
c0028c6c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028c6f:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0028c72:	8d 48 01             	lea    ecx,[eax+0x1]
c0028c75:	09 da                	or     edx,ebx
c0028c77:	78 04                	js     c0028c7d <__divdf3+0x1b1>
c0028c79:	89 c8                	mov    eax,ecx
c0028c7b:	eb e7                	jmp    c0028c64 <__divdf3+0x198>
c0028c7d:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028c80:	81 ce 00 00 00 80    	or     esi,0x80000000
c0028c86:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028c8c:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0028c8f:	39 d6                	cmp    esi,edx
c0028c91:	77 0d                	ja     c0028ca0 <__divdf3+0x1d4>
c0028c93:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0028c96:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0028c99:	72 1b                	jb     c0028cb6 <__divdf3+0x1ea>
c0028c9b:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0028c9e:	75 16                	jne    c0028cb6 <__divdf3+0x1ea>
c0028ca0:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028ca3:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028ca6:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0028ca9:	83 de 00             	sbb    esi,0x0
c0028cac:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0028caf:	ba 01 00 00 00       	mov    edx,0x1
c0028cb4:	eb 02                	jmp    c0028cb8 <__divdf3+0x1ec>
c0028cb6:	31 d2                	xor    edx,edx
c0028cb8:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0028cbf:	31 ff                	xor    edi,edi
c0028cc1:	01 ff                	add    edi,edi
c0028cc3:	89 d1                	mov    ecx,edx
c0028cc5:	c1 e9 1f             	shr    ecx,0x1f
c0028cc8:	09 cf                	or     edi,ecx
c0028cca:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0028ccd:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0028cd0:	89 da                	mov    edx,ebx
c0028cd2:	89 f3                	mov    ebx,esi
c0028cd4:	8d 34 36             	lea    esi,[esi+esi*1]
c0028cd7:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028cda:	c1 e9 1f             	shr    ecx,0x1f
c0028cdd:	09 ce                	or     esi,ecx
c0028cdf:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028ce2:	01 c9                	add    ecx,ecx
c0028ce4:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0028ce7:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0028cea:	85 db                	test   ebx,ebx
c0028cec:	78 29                	js     c0028d17 <__divdf3+0x24b>
c0028cee:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0028cf1:	72 07                	jb     c0028cfa <__divdf3+0x22e>
c0028cf3:	75 3c                	jne    c0028d31 <__divdf3+0x265>
c0028cf5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028cf8:	77 37                	ja     c0028d31 <__divdf3+0x265>
c0028cfa:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028cfd:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0028d00:	31 d2                	xor    edx,edx
c0028d02:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0028d05:	0f 97 c2             	seta   dl
c0028d08:	29 d6                	sub    esi,edx
c0028d0a:	89 d9                	mov    ecx,ebx
c0028d0c:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0028d0f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0028d12:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0028d15:	eb 17                	jmp    c0028d2e <__divdf3+0x262>
c0028d17:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028d1a:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028d1d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028d20:	0f 97 c1             	seta   cl
c0028d23:	0f b6 c9             	movzx  ecx,cl
c0028d26:	29 ce                	sub    esi,ecx
c0028d28:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0028d2b:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0028d2e:	83 ca 01             	or     edx,0x1
c0028d31:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0028d34:	75 8b                	jne    c0028cc1 <__divdf3+0x1f5>
c0028d36:	c1 e7 09             	shl    edi,0x9
c0028d39:	89 d1                	mov    ecx,edx
c0028d3b:	c1 e9 17             	shr    ecx,0x17
c0028d3e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028d41:	09 f3                	or     ebx,esi
c0028d43:	0f 95 c3             	setne  bl
c0028d46:	0f b6 db             	movzx  ebx,bl
c0028d49:	c1 e2 09             	shl    edx,0x9
c0028d4c:	09 d3                	or     ebx,edx
c0028d4e:	89 ca                	mov    edx,ecx
c0028d50:	09 fa                	or     edx,edi
c0028d52:	78 0c                	js     c0028d60 <__divdf3+0x294>
c0028d54:	01 d2                	add    edx,edx
c0028d56:	89 d9                	mov    ecx,ebx
c0028d58:	c1 e9 1f             	shr    ecx,0x1f
c0028d5b:	09 ca                	or     edx,ecx
c0028d5d:	01 db                	add    ebx,ebx
c0028d5f:	48                   	dec    eax
c0028d60:	3d fe 07 00 00       	cmp    eax,0x7fe
c0028d65:	0f 8f 83 00 00 00    	jg     c0028dee <__divdf3+0x322>
c0028d6b:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028d71:	85 c0                	test   eax,eax
c0028d73:	0f 8f 82 00 00 00    	jg     c0028dfb <__divdf3+0x32f>
c0028d79:	83 f8 cc             	cmp    eax,0xffffffcc
c0028d7c:	7c 77                	jl     c0028df5 <__divdf3+0x329>
c0028d7e:	be 01 00 00 00       	mov    esi,0x1
c0028d83:	29 c6                	sub    esi,eax
c0028d85:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028d8b:	83 fe 1f             	cmp    esi,0x1f
c0028d8e:	7e 2f                	jle    c0028dbf <__divdf3+0x2f3>
c0028d90:	83 fe 20             	cmp    esi,0x20
c0028d93:	75 0a                	jne    c0028d9f <__divdf3+0x2d3>
c0028d95:	85 db                	test   ebx,ebx
c0028d97:	0f 95 c3             	setne  bl
c0028d9a:	0f b6 db             	movzx  ebx,bl
c0028d9d:	eb 1a                	jmp    c0028db9 <__divdf3+0x2ed>
c0028d9f:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0028da2:	89 d7                	mov    edi,edx
c0028da4:	d3 e7                	shl    edi,cl
c0028da6:	89 f9                	mov    ecx,edi
c0028da8:	09 d9                	or     ecx,ebx
c0028daa:	0f 95 c3             	setne  bl
c0028dad:	0f b6 db             	movzx  ebx,bl
c0028db0:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0028db5:	29 c1                	sub    ecx,eax
c0028db7:	d3 ea                	shr    edx,cl
c0028db9:	09 d3                	or     ebx,edx
c0028dbb:	31 c0                	xor    eax,eax
c0028dbd:	eb 3a                	jmp    c0028df9 <__divdf3+0x32d>
c0028dbf:	83 c0 1f             	add    eax,0x1f
c0028dc2:	89 d7                	mov    edi,edx
c0028dc4:	88 c1                	mov    cl,al
c0028dc6:	d3 e7                	shl    edi,cl
c0028dc8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028dcb:	89 df                	mov    edi,ebx
c0028dcd:	89 f1                	mov    ecx,esi
c0028dcf:	d3 ef                	shr    edi,cl
c0028dd1:	89 f9                	mov    ecx,edi
c0028dd3:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0028dd6:	09 cf                	or     edi,ecx
c0028dd8:	88 c1                	mov    cl,al
c0028dda:	d3 e3                	shl    ebx,cl
c0028ddc:	85 db                	test   ebx,ebx
c0028dde:	0f 95 c3             	setne  bl
c0028de1:	0f b6 db             	movzx  ebx,bl
c0028de4:	09 fb                	or     ebx,edi
c0028de6:	89 f1                	mov    ecx,esi
c0028de8:	d3 ea                	shr    edx,cl
c0028dea:	31 c0                	xor    eax,eax
c0028dec:	eb 0d                	jmp    c0028dfb <__divdf3+0x32f>
c0028dee:	b8 ff 07 00 00       	mov    eax,0x7ff
c0028df3:	eb 02                	jmp    c0028df7 <__divdf3+0x32b>
c0028df5:	31 c0                	xor    eax,eax
c0028df7:	31 db                	xor    ebx,ebx
c0028df9:	31 d2                	xor    edx,edx
c0028dfb:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0028dfe:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0028e01:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0028e07:	09 c8                	or     eax,ecx
c0028e09:	c1 e0 14             	shl    eax,0x14
c0028e0c:	89 d1                	mov    ecx,edx
c0028e0e:	c1 e9 0b             	shr    ecx,0xb
c0028e11:	09 c8                	or     eax,ecx
c0028e13:	89 c6                	mov    esi,eax
c0028e15:	89 d9                	mov    ecx,ebx
c0028e17:	c1 e9 0b             	shr    ecx,0xb
c0028e1a:	c1 e2 15             	shl    edx,0x15
c0028e1d:	09 ca                	or     edx,ecx
c0028e1f:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0028e25:	0f 95 c0             	setne  al
c0028e28:	09 c1                	or     ecx,eax
c0028e2a:	83 e1 01             	and    ecx,0x1
c0028e2d:	c1 eb 0a             	shr    ebx,0xa
c0028e30:	21 cb                	and    ebx,ecx
c0028e32:	01 d3                	add    ebx,edx
c0028e34:	89 d8                	mov    eax,ebx
c0028e36:	83 d6 00             	adc    esi,0x0
c0028e39:	89 f2                	mov    edx,esi
c0028e3b:	89 c7                	mov    edi,eax
c0028e3d:	89 d1                	mov    ecx,edx
c0028e3f:	89 f8                	mov    eax,edi
c0028e41:	89 ca                	mov    edx,ecx
c0028e43:	83 c4 2c             	add    esp,0x2c
c0028e46:	5b                   	pop    ebx
c0028e47:	5e                   	pop    esi
c0028e48:	5f                   	pop    edi
c0028e49:	5d                   	pop    ebp
c0028e4a:	c3                   	ret    

c0028e4b <__floatsidf>:
c0028e4b:	55                   	push   ebp
c0028e4c:	89 e5                	mov    ebp,esp
c0028e4e:	56                   	push   esi
c0028e4f:	53                   	push   ebx
c0028e50:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028e53:	85 db                	test   ebx,ebx
c0028e55:	7e 15                	jle    c0028e6c <__floatsidf+0x21>
c0028e57:	0f bd cb             	bsr    ecx,ebx
c0028e5a:	83 f1 1f             	xor    ecx,0x1f
c0028e5d:	d3 e3                	shl    ebx,cl
c0028e5f:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028e65:	b8 1e 04 00 00       	mov    eax,0x41e
c0028e6a:	eb 21                	jmp    c0028e8d <__floatsidf+0x42>
c0028e6c:	b8 00 00 00 00       	mov    eax,0x0
c0028e71:	ba 00 00 00 00       	mov    edx,0x0
c0028e76:	74 2a                	je     c0028ea2 <__floatsidf+0x57>
c0028e78:	f7 db                	neg    ebx
c0028e7a:	0f bd cb             	bsr    ecx,ebx
c0028e7d:	83 f1 1f             	xor    ecx,0x1f
c0028e80:	d3 e3                	shl    ebx,cl
c0028e82:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028e88:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0028e8d:	29 c8                	sub    eax,ecx
c0028e8f:	c1 e0 14             	shl    eax,0x14
c0028e92:	89 c1                	mov    ecx,eax
c0028e94:	89 de                	mov    esi,ebx
c0028e96:	c1 ee 0b             	shr    esi,0xb
c0028e99:	09 f1                	or     ecx,esi
c0028e9b:	89 ca                	mov    edx,ecx
c0028e9d:	c1 e3 15             	shl    ebx,0x15
c0028ea0:	89 d8                	mov    eax,ebx
c0028ea2:	5b                   	pop    ebx
c0028ea3:	5e                   	pop    esi
c0028ea4:	5d                   	pop    ebp
c0028ea5:	c3                   	ret    

c0028ea6 <__floatunsidf>:
c0028ea6:	55                   	push   ebp
c0028ea7:	89 e5                	mov    ebp,esp
c0028ea9:	56                   	push   esi
c0028eaa:	53                   	push   ebx
c0028eab:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028eae:	85 db                	test   ebx,ebx
c0028eb0:	74 2a                	je     c0028edc <__floatunsidf+0x36>
c0028eb2:	0f bd cb             	bsr    ecx,ebx
c0028eb5:	83 f1 1f             	xor    ecx,0x1f
c0028eb8:	d3 e3                	shl    ebx,cl
c0028eba:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028ec0:	b8 1e 04 00 00       	mov    eax,0x41e
c0028ec5:	29 c8                	sub    eax,ecx
c0028ec7:	c1 e0 14             	shl    eax,0x14
c0028eca:	89 c1                	mov    ecx,eax
c0028ecc:	89 de                	mov    esi,ebx
c0028ece:	c1 ee 0b             	shr    esi,0xb
c0028ed1:	09 f1                	or     ecx,esi
c0028ed3:	89 ca                	mov    edx,ecx
c0028ed5:	c1 e3 15             	shl    ebx,0x15
c0028ed8:	89 d8                	mov    eax,ebx
c0028eda:	eb 04                	jmp    c0028ee0 <__floatunsidf+0x3a>
c0028edc:	31 c0                	xor    eax,eax
c0028ede:	31 d2                	xor    edx,edx
c0028ee0:	5b                   	pop    ebx
c0028ee1:	5e                   	pop    esi
c0028ee2:	5d                   	pop    ebp
c0028ee3:	c3                   	ret    

c0028ee4 <__fixdfsi>:
c0028ee4:	55                   	push   ebp
c0028ee5:	89 e5                	mov    ebp,esp
c0028ee7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028eea:	89 d1                	mov    ecx,edx
c0028eec:	c1 e1 0b             	shl    ecx,0xb
c0028eef:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028ef5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0028ef8:	c1 e8 15             	shr    eax,0x15
c0028efb:	09 c1                	or     ecx,eax
c0028efd:	c1 fa 14             	sar    edx,0x14
c0028f00:	78 1f                	js     c0028f21 <__fixdfsi+0x3d>
c0028f02:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0028f08:	31 c0                	xor    eax,eax
c0028f0a:	83 fa 1e             	cmp    edx,0x1e
c0028f0d:	77 40                	ja     c0028f4f <__fixdfsi+0x6b>
c0028f0f:	89 c8                	mov    eax,ecx
c0028f11:	0d 00 00 00 80       	or     eax,0x80000000
c0028f16:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028f1b:	29 d1                	sub    ecx,edx
c0028f1d:	d3 e8                	shr    eax,cl
c0028f1f:	eb 2e                	jmp    c0028f4f <__fixdfsi+0x6b>
c0028f21:	31 c0                	xor    eax,eax
c0028f23:	81 c2 01 04 00 00    	add    edx,0x401
c0028f29:	78 24                	js     c0028f4f <__fixdfsi+0x6b>
c0028f2b:	83 fa 1e             	cmp    edx,0x1e
c0028f2e:	7e 09                	jle    c0028f39 <__fixdfsi+0x55>
c0028f30:	83 fa 1f             	cmp    edx,0x1f
c0028f33:	75 18                	jne    c0028f4d <__fixdfsi+0x69>
c0028f35:	85 c9                	test   ecx,ecx
c0028f37:	75 14                	jne    c0028f4d <__fixdfsi+0x69>
c0028f39:	89 c8                	mov    eax,ecx
c0028f3b:	0d 00 00 00 80       	or     eax,0x80000000
c0028f40:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028f45:	29 d1                	sub    ecx,edx
c0028f47:	d3 e8                	shr    eax,cl
c0028f49:	f7 d8                	neg    eax
c0028f4b:	eb 02                	jmp    c0028f4f <__fixdfsi+0x6b>
c0028f4d:	31 c0                	xor    eax,eax
c0028f4f:	5d                   	pop    ebp
c0028f50:	c3                   	ret    

c0028f51 <__fixunsdfsi>:
c0028f51:	55                   	push   ebp
c0028f52:	89 e5                	mov    ebp,esp
c0028f54:	53                   	push   ebx
c0028f55:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0028f58:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028f5b:	89 d3                	mov    ebx,edx
c0028f5d:	c1 fb 14             	sar    ebx,0x14
c0028f60:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0028f66:	31 c0                	xor    eax,eax
c0028f68:	83 fb 1f             	cmp    ebx,0x1f
c0028f6b:	77 1d                	ja     c0028f8a <__fixunsdfsi+0x39>
c0028f6d:	89 d0                	mov    eax,edx
c0028f6f:	c1 e0 0b             	shl    eax,0xb
c0028f72:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028f77:	c1 e9 15             	shr    ecx,0x15
c0028f7a:	09 c8                	or     eax,ecx
c0028f7c:	0d 00 00 00 80       	or     eax,0x80000000
c0028f81:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028f86:	29 d9                	sub    ecx,ebx
c0028f88:	d3 e8                	shr    eax,cl
c0028f8a:	5b                   	pop    ebx
c0028f8b:	5d                   	pop    ebp
c0028f8c:	c3                   	ret    

c0028f8d <__cmpdf2>:
c0028f8d:	55                   	push   ebp
c0028f8e:	89 e5                	mov    ebp,esp
c0028f90:	57                   	push   edi
c0028f91:	56                   	push   esi
c0028f92:	53                   	push   ebx
c0028f93:	83 ec 0c             	sub    esp,0xc
c0028f96:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0028f99:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028f9c:	89 ca                	mov    edx,ecx
c0028f9e:	c1 ea 14             	shr    edx,0x14
c0028fa1:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0028fa7:	89 cb                	mov    ebx,ecx
c0028fa9:	c1 fb 1f             	sar    ebx,0x1f
c0028fac:	31 da                	xor    edx,ebx
c0028fae:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028fb1:	89 df                	mov    edi,ebx
c0028fb3:	c1 e7 0b             	shl    edi,0xb
c0028fb6:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028fb9:	c1 e1 0b             	shl    ecx,0xb
c0028fbc:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028fc2:	c1 eb 15             	shr    ebx,0x15
c0028fc5:	09 d9                	or     ecx,ebx
c0028fc7:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0028fca:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0028fcd:	89 ce                	mov    esi,ecx
c0028fcf:	c1 ee 14             	shr    esi,0x14
c0028fd2:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028fd8:	89 cb                	mov    ebx,ecx
c0028fda:	c1 fb 1f             	sar    ebx,0x1f
c0028fdd:	31 de                	xor    esi,ebx
c0028fdf:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0028fe2:	89 df                	mov    edi,ebx
c0028fe4:	c1 e7 0b             	shl    edi,0xb
c0028fe7:	c1 e1 0b             	shl    ecx,0xb
c0028fea:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028ff0:	c1 eb 15             	shr    ebx,0x15
c0028ff3:	09 d9                	or     ecx,ebx
c0028ff5:	89 d3                	mov    ebx,edx
c0028ff7:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028ffd:	43                   	inc    ebx
c0028ffe:	83 fb 01             	cmp    ebx,0x1
c0029001:	77 08                	ja     c002900b <__cmpdf2+0x7e>
c0029003:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0029006:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0029009:	75 68                	jne    c0029073 <__cmpdf2+0xe6>
c002900b:	89 f3                	mov    ebx,esi
c002900d:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0029013:	43                   	inc    ebx
c0029014:	83 fb 01             	cmp    ebx,0x1
c0029017:	77 06                	ja     c002901f <__cmpdf2+0x92>
c0029019:	89 fb                	mov    ebx,edi
c002901b:	09 cb                	or     ebx,ecx
c002901d:	75 54                	jne    c0029073 <__cmpdf2+0xe6>
c002901f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0029022:	09 f8                	or     eax,edi
c0029024:	09 c8                	or     eax,ecx
c0029026:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0029029:	75 12                	jne    c002903d <__cmpdf2+0xb0>
c002902b:	8d 42 01             	lea    eax,[edx+0x1]
c002902e:	83 f8 01             	cmp    eax,0x1
c0029031:	77 0a                	ja     c002903d <__cmpdf2+0xb0>
c0029033:	8d 5e 01             	lea    ebx,[esi+0x1]
c0029036:	31 c0                	xor    eax,eax
c0029038:	83 fb 01             	cmp    ebx,0x1
c002903b:	76 36                	jbe    c0029073 <__cmpdf2+0xe6>
c002903d:	b8 01 00 00 00       	mov    eax,0x1
c0029042:	39 f2                	cmp    edx,esi
c0029044:	7f 2d                	jg     c0029073 <__cmpdf2+0xe6>
c0029046:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002904b:	7c 26                	jl     c0029073 <__cmpdf2+0xe6>
c002904d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0029050:	77 07                	ja     c0029059 <__cmpdf2+0xcc>
c0029052:	72 16                	jb     c002906a <__cmpdf2+0xdd>
c0029054:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0029057:	76 0a                	jbe    c0029063 <__cmpdf2+0xd6>
c0029059:	89 d0                	mov    eax,edx
c002905b:	c1 f8 1f             	sar    eax,0x1f
c002905e:	83 c8 01             	or     eax,0x1
c0029061:	eb 10                	jmp    c0029073 <__cmpdf2+0xe6>
c0029063:	b8 00 00 00 00       	mov    eax,0x0
c0029068:	73 09                	jae    c0029073 <__cmpdf2+0xe6>
c002906a:	89 d0                	mov    eax,edx
c002906c:	c1 f8 1f             	sar    eax,0x1f
c002906f:	83 e0 02             	and    eax,0x2
c0029072:	48                   	dec    eax
c0029073:	83 c4 0c             	add    esp,0xc
c0029076:	5b                   	pop    ebx
c0029077:	5e                   	pop    esi
c0029078:	5f                   	pop    edi
c0029079:	5d                   	pop    ebp
c002907a:	c3                   	ret    

c002907b <__eqdf2>:
c002907b:	55                   	push   ebp
c002907c:	89 e5                	mov    ebp,esp
c002907e:	50                   	push   eax
c002907f:	6a 01                	push   0x1
c0029081:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0029084:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0029087:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002908a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002908d:	e8 fb fe ff ff       	call   c0028f8d <__cmpdf2>
c0029092:	83 c4 18             	add    esp,0x18
c0029095:	c9                   	leave  
c0029096:	c3                   	ret    

c0029097 <__nedf2>:
c0029097:	eb e2                	jmp    c002907b <__eqdf2>

c0029099 <__gtdf2>:
c0029099:	55                   	push   ebp
c002909a:	89 e5                	mov    ebp,esp
c002909c:	50                   	push   eax
c002909d:	6a ff                	push   0xffffffff
c002909f:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00290a2:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00290a5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00290a8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00290ab:	e8 dd fe ff ff       	call   c0028f8d <__cmpdf2>
c00290b0:	83 c4 18             	add    esp,0x18
c00290b3:	c9                   	leave  
c00290b4:	c3                   	ret    

c00290b5 <__gedf2>:
c00290b5:	eb e2                	jmp    c0029099 <__gtdf2>

c00290b7 <__ltdf2>:
c00290b7:	eb c2                	jmp    c002907b <__eqdf2>

c00290b9 <__ledf2>:
c00290b9:	eb c0                	jmp    c002907b <__eqdf2>

c00290bb <__truncdfsf2>:
c00290bb:	55                   	push   ebp
c00290bc:	89 e5                	mov    ebp,esp
c00290be:	57                   	push   edi
c00290bf:	56                   	push   esi
c00290c0:	53                   	push   ebx
c00290c1:	83 ec 0c             	sub    esp,0xc
c00290c4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00290c7:	89 d1                	mov    ecx,edx
c00290c9:	c1 f9 14             	sar    ecx,0x14
c00290cc:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00290cf:	89 df                	mov    edi,ebx
c00290d1:	c1 e7 0b             	shl    edi,0xb
c00290d4:	89 d0                	mov    eax,edx
c00290d6:	c1 e0 0b             	shl    eax,0xb
c00290d9:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00290de:	c1 eb 15             	shr    ebx,0x15
c00290e1:	09 d8                	or     eax,ebx
c00290e3:	89 cb                	mov    ebx,ecx
c00290e5:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00290eb:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c00290f1:	81 fe fd 00 00 00    	cmp    esi,0xfd
c00290f7:	0f 86 9e 00 00 00    	jbe    c002919b <__truncdfsf2+0xe0>
c00290fd:	85 db                	test   ebx,ebx
c00290ff:	75 0a                	jne    c002910b <__truncdfsf2+0x50>
c0029101:	c1 fa 17             	sar    edx,0x17
c0029104:	30 d2                	xor    dl,dl
c0029106:	e9 84 00 00 00       	jmp    c002918f <__truncdfsf2+0xd4>
c002910b:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0029111:	83 fe 83             	cmp    esi,0xffffff83
c0029114:	7d 4b                	jge    c0029161 <__truncdfsf2+0xa6>
c0029116:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c002911b:	29 f1                	sub    ecx,esi
c002911d:	83 f9 1f             	cmp    ecx,0x1f
c0029120:	7f 6b                	jg     c002918d <__truncdfsf2+0xd2>
c0029122:	0d 00 00 00 80       	or     eax,0x80000000
c0029127:	89 c3                	mov    ebx,eax
c0029129:	d3 eb                	shr    ebx,cl
c002912b:	be 01 00 00 00       	mov    esi,0x1
c0029130:	d3 e6                	shl    esi,cl
c0029132:	4e                   	dec    esi
c0029133:	21 f0                	and    eax,esi
c0029135:	09 f8                	or     eax,edi
c0029137:	0f 95 c0             	setne  al
c002913a:	0f b6 c0             	movzx  eax,al
c002913d:	09 c3                	or     ebx,eax
c002913f:	89 d9                	mov    ecx,ebx
c0029141:	c1 e9 08             	shr    ecx,0x8
c0029144:	f6 c3 7f             	test   bl,0x7f
c0029147:	0f 95 c0             	setne  al
c002914a:	09 c8                	or     eax,ecx
c002914c:	83 e0 01             	and    eax,0x1
c002914f:	c1 eb 07             	shr    ebx,0x7
c0029152:	21 c3                	and    ebx,eax
c0029154:	81 e2 00 00 00 80    	and    edx,0x80000000
c002915a:	09 d1                	or     ecx,edx
c002915c:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c002915f:	eb 76                	jmp    c00291d7 <__truncdfsf2+0x11c>
c0029161:	83 c6 80             	add    esi,0xffffff80
c0029164:	7e 1d                	jle    c0029183 <__truncdfsf2+0xc8>
c0029166:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c002916c:	75 0b                	jne    c0029179 <__truncdfsf2+0xbe>
c002916e:	09 f8                	or     eax,edi
c0029170:	74 09                	je     c002917b <__truncdfsf2+0xc0>
c0029172:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0029177:	eb 02                	jmp    c002917b <__truncdfsf2+0xc0>
c0029179:	31 c0                	xor    eax,eax
c002917b:	c1 fa 17             	sar    edx,0x17
c002917e:	80 ca ff             	or     dl,0xff
c0029181:	eb 0e                	jmp    c0029191 <__truncdfsf2+0xd6>
c0029183:	c1 fa 1f             	sar    edx,0x1f
c0029186:	c1 e2 08             	shl    edx,0x8
c0029189:	09 ca                	or     edx,ecx
c002918b:	eb 04                	jmp    c0029191 <__truncdfsf2+0xd6>
c002918d:	31 d2                	xor    edx,edx
c002918f:	31 c0                	xor    eax,eax
c0029191:	c1 e2 17             	shl    edx,0x17
c0029194:	c1 e8 08             	shr    eax,0x8
c0029197:	09 d0                	or     eax,edx
c0029199:	eb 3c                	jmp    c00291d7 <__truncdfsf2+0x11c>
c002919b:	81 e9 80 03 00 00    	sub    ecx,0x380
c00291a1:	89 ca                	mov    edx,ecx
c00291a3:	c1 fa 0b             	sar    edx,0xb
c00291a6:	c1 e2 08             	shl    edx,0x8
c00291a9:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c00291ac:	31 db                	xor    ebx,ebx
c00291ae:	85 ff                	test   edi,edi
c00291b0:	0f 95 c3             	setne  bl
c00291b3:	09 d8                	or     eax,ebx
c00291b5:	89 c3                	mov    ebx,eax
c00291b7:	c1 eb 08             	shr    ebx,0x8
c00291ba:	a8 7f                	test   al,0x7f
c00291bc:	0f 95 c2             	setne  dl
c00291bf:	89 d6                	mov    esi,edx
c00291c1:	09 de                	or     esi,ebx
c00291c3:	83 e6 01             	and    esi,0x1
c00291c6:	c1 e8 07             	shr    eax,0x7
c00291c9:	21 f0                	and    eax,esi
c00291cb:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00291ce:	09 ca                	or     edx,ecx
c00291d0:	c1 e2 17             	shl    edx,0x17
c00291d3:	09 da                	or     edx,ebx
c00291d5:	01 d0                	add    eax,edx
c00291d7:	83 c4 0c             	add    esp,0xc
c00291da:	5b                   	pop    ebx
c00291db:	5e                   	pop    esi
c00291dc:	5f                   	pop    edi
c00291dd:	5d                   	pop    ebp
c00291de:	c3                   	ret    

c00291df <__extendsfdf2>:
c00291df:	55                   	push   ebp
c00291e0:	89 e5                	mov    ebp,esp
c00291e2:	57                   	push   edi
c00291e3:	56                   	push   esi
c00291e4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00291e7:	89 d1                	mov    ecx,edx
c00291e9:	c1 f9 17             	sar    ecx,0x17
c00291ec:	c1 e2 08             	shl    edx,0x8
c00291ef:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00291f5:	89 c8                	mov    eax,ecx
c00291f7:	80 e4 f8             	and    ah,0xf8
c00291fa:	8d 71 01             	lea    esi,[ecx+0x1]
c00291fd:	81 e6 fe 00 00 00    	and    esi,0xfe
c0029203:	75 27                	jne    c002922c <__extendsfdf2+0x4d>
c0029205:	81 e1 ff 00 00 00    	and    ecx,0xff
c002920b:	75 18                	jne    c0029225 <__extendsfdf2+0x46>
c002920d:	85 d2                	test   edx,edx
c002920f:	74 20                	je     c0029231 <__extendsfdf2+0x52>
c0029211:	41                   	inc    ecx
c0029212:	01 d2                	add    edx,edx
c0029214:	79 fb                	jns    c0029211 <__extendsfdf2+0x32>
c0029216:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002921c:	29 c8                	sub    eax,ecx
c002921e:	05 81 03 00 00       	add    eax,0x381
c0029223:	eb 0c                	jmp    c0029231 <__extendsfdf2+0x52>
c0029225:	05 00 07 00 00       	add    eax,0x700
c002922a:	eb 05                	jmp    c0029231 <__extendsfdf2+0x52>
c002922c:	05 80 03 00 00       	add    eax,0x380
c0029231:	c1 e0 14             	shl    eax,0x14
c0029234:	89 c1                	mov    ecx,eax
c0029236:	89 d0                	mov    eax,edx
c0029238:	c1 e8 0b             	shr    eax,0xb
c002923b:	09 c1                	or     ecx,eax
c002923d:	c1 e2 15             	shl    edx,0x15
c0029240:	89 d0                	mov    eax,edx
c0029242:	89 ca                	mov    edx,ecx
c0029244:	5e                   	pop    esi
c0029245:	5f                   	pop    edi
c0029246:	5d                   	pop    ebp
c0029247:	c3                   	ret    
c0029248:	66 90                	xchg   ax,ax
c002924a:	66 90                	xchg   ax,ax
c002924c:	66 90                	xchg   ax,ax
c002924e:	66 90                	xchg   ax,ax

c0029250 <fabs>:
c0029250:	83 ec 0c             	sub    esp,0xc
c0029253:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029257:	89 04 24             	mov    DWORD PTR [esp],eax
c002925a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002925e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0029263:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0029267:	dd 04 24             	fld    QWORD PTR [esp]
c002926a:	83 c4 0c             	add    esp,0xc
c002926d:	c3                   	ret    
c002926e:	66 90                	xchg   ax,ax

c0029270 <lrint>:
c0029270:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0029274:	83 ec 04             	sub    esp,0x4
c0029277:	db 1c 24             	fistp  DWORD PTR [esp]
c002927a:	58                   	pop    eax
c002927b:	c3                   	ret    

c002927c <lrintf>:
c002927c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0029280:	83 ec 04             	sub    esp,0x4
c0029283:	db 1c 24             	fistp  DWORD PTR [esp]
c0029286:	58                   	pop    eax
c0029287:	c3                   	ret    

Disassembly of section .init:

c0029288 <_init>:
c0029288:	55                   	push   ebp
c0029289:	89 e5                	mov    ebp,esp
c002928b:	e8 88 6e fd ff       	call   c0000118 <frame_dummy>
c0029290:	e8 5b e0 ff ff       	call   c00272f0 <__do_global_ctors_aux>
c0029295:	5d                   	pop    ebp
c0029296:	c3                   	ret    

Disassembly of section .fini:

c0029297 <_fini>:
c0029297:	55                   	push   ebp
c0029298:	89 e5                	mov    ebp,esp
c002929a:	e8 09 6e fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002929f:	5d                   	pop    ebp
c00292a0:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c00292a2 <Computer::~Computer()>:
c00292a2:	83 ec 0c             	sub    esp,0xc
c00292a5:	ba c8 ae 02 c0       	mov    edx,0xc002aec8
c00292aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292ae:	89 10                	mov    DWORD PTR [eax],edx
c00292b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292b4:	83 ec 0c             	sub    esp,0xc
c00292b7:	50                   	push   eax
c00292b8:	e8 9d ae fe ff       	call   c001415a <Device::~Device()>
c00292bd:	83 c4 10             	add    esp,0x10
c00292c0:	90                   	nop
c00292c1:	83 c4 0c             	add    esp,0xc
c00292c4:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c00292c6 <Computer::~Computer()>:
c00292c6:	83 ec 0c             	sub    esp,0xc
c00292c9:	83 ec 0c             	sub    esp,0xc
c00292cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00292d0:	e8 cd ff ff ff       	call   c00292a2 <Computer::~Computer()>
c00292d5:	83 c4 10             	add    esp,0x10
c00292d8:	83 ec 08             	sub    esp,0x8
c00292db:	68 ec 01 00 00       	push   0x1ec
c00292e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00292e4:	e8 8a 9a fe ff       	call   c0012d73 <operator delete(void*, unsigned long)>
c00292e9:	83 c4 10             	add    esp,0x10
c00292ec:	83 c4 0c             	add    esp,0xc
c00292ef:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c00292f0 <idleCommon()>:
c00292f0:	83 ec 0c             	sub    esp,0xc
c00292f3:	fa                   	cli    
c00292f4:	ff 05 c8 27 03 c0    	inc    DWORD PTR ds:0xc00327c8
c00292fa:	e8 a1 53 ff ff       	call   c001e6a0 <schedule()>
c00292ff:	a1 c8 27 03 c0       	mov    eax,ds:0xc00327c8
c0029304:	48                   	dec    eax
c0029305:	a3 c8 27 03 c0       	mov    ds:0xc00327c8,eax
c002930a:	75 01                	jne    c002930d <idleCommon()+0x1d>
c002930c:	fb                   	sti    
c002930d:	83 c4 0c             	add    esp,0xc
c0029310:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0029312 <LinkedList<UnixFile>::~LinkedList()>:
c0029312:	90                   	nop
c0029313:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0029314 <LinkedList<UnixFile>::LinkedList()>:
c0029314:	83 ec 0c             	sub    esp,0xc
c0029317:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002931b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029321:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029325:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002932c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029330:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029337:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002933b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029341:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029345:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002934c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029350:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029357:	83 ec 0c             	sub    esp,0xc
c002935a:	68 86 b1 02 c0       	push   0xc002b186
c002935f:	e8 ef 9a fe ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0029364:	83 c4 10             	add    esp,0x10
c0029367:	90                   	nop
c0029368:	83 c4 0c             	add    esp,0xc
c002936b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c002936c <LinkedList<UnixFile>::addElement(UnixFile*)>:
c002936c:	83 ec 0c             	sub    esp,0xc
c002936f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0029374:	75 10                	jne    c0029386 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0029376:	83 ec 0c             	sub    esp,0xc
c0029379:	68 a0 b1 02 c0       	push   0xc002b1a0
c002937e:	e8 6a 15 ff ff       	call   c001a8ed <Krnl::panic(char const*)>
c0029383:	83 c4 10             	add    esp,0x10
c0029386:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002938a:	8b 00                	mov    eax,DWORD PTR [eax]
c002938c:	85 c0                	test   eax,eax
c002938e:	74 34                	je     c00293c4 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0029390:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029394:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029397:	85 c0                	test   eax,eax
c0029399:	74 29                	je     c00293c4 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002939b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002939f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00293a2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00293a6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00293a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293ad:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00293b1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00293b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00293bb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00293c2:	eb 65                	jmp    c0029429 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00293c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00293ca:	85 c0                	test   eax,eax
c00293cc:	75 4b                	jne    c0029419 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00293ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293d2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00293d5:	85 c0                	test   eax,eax
c00293d7:	75 40                	jne    c0029419 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00293d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293dd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00293e1:	89 10                	mov    DWORD PTR [eax],edx
c00293e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293e7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00293eb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00293ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293f2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00293f5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00293fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029400:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029403:	85 c0                	test   eax,eax
c0029405:	74 22                	je     c0029429 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0029407:	83 ec 0c             	sub    esp,0xc
c002940a:	68 c2 b1 02 c0       	push   0xc002b1c2
c002940f:	e8 d9 14 ff ff       	call   c001a8ed <Krnl::panic(char const*)>
c0029414:	83 c4 10             	add    esp,0x10
c0029417:	eb 10                	jmp    c0029429 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0029419:	83 ec 0c             	sub    esp,0xc
c002941c:	68 cc b1 02 c0       	push   0xc002b1cc
c0029421:	e8 c7 14 ff ff       	call   c001a8ed <Krnl::panic(char const*)>
c0029426:	83 c4 10             	add    esp,0x10
c0029429:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002942d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029430:	8d 50 01             	lea    edx,[eax+0x1]
c0029433:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029437:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002943a:	90                   	nop
c002943b:	83 c4 0c             	add    esp,0xc
c002943e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0029440 <LinkedList<UnixFile>::getFirstElement()>:
c0029440:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029444:	8b 00                	mov    eax,DWORD PTR [eax]
c0029446:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0029448 <LinkedList<UnixFile>::removeFirst()>:
c0029448:	83 ec 0c             	sub    esp,0xc
c002944b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002944f:	8b 00                	mov    eax,DWORD PTR [eax]
c0029451:	85 c0                	test   eax,eax
c0029453:	75 12                	jne    c0029467 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0029455:	83 ec 0c             	sub    esp,0xc
c0029458:	68 d8 b1 02 c0       	push   0xc002b1d8
c002945d:	e8 8b 14 ff ff       	call   c001a8ed <Krnl::panic(char const*)>
c0029462:	83 c4 10             	add    esp,0x10
c0029465:	eb 7e                	jmp    c00294e5 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0029467:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002946b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002946e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029471:	85 c0                	test   eax,eax
c0029473:	74 10                	je     c0029485 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0029475:	83 ec 0c             	sub    esp,0xc
c0029478:	68 23 b2 02 c0       	push   0xc002b223
c002947d:	e8 6b 14 ff ff       	call   c001a8ed <Krnl::panic(char const*)>
c0029482:	83 c4 10             	add    esp,0x10
c0029485:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029489:	8b 00                	mov    eax,DWORD PTR [eax]
c002948b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002948e:	85 c0                	test   eax,eax
c0029490:	75 33                	jne    c00294c5 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0029492:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029496:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002949c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294a0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00294a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294ab:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00294ae:	83 f8 01             	cmp    eax,0x1
c00294b1:	74 21                	je     c00294d4 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00294b3:	83 ec 0c             	sub    esp,0xc
c00294b6:	68 fc b1 02 c0       	push   0xc002b1fc
c00294bb:	e8 2d 14 ff ff       	call   c001a8ed <Krnl::panic(char const*)>
c00294c0:	83 c4 10             	add    esp,0x10
c00294c3:	eb 0f                	jmp    c00294d4 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00294c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00294cb:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00294ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294d2:	89 10                	mov    DWORD PTR [eax],edx
c00294d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294d8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00294db:	8d 50 ff             	lea    edx,[eax-0x1]
c00294de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294e2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00294e5:	83 c4 0c             	add    esp,0xc
c00294e8:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00294ea <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00294ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00294ee:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00294f1:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c00294f2 <DriverlessDevice::~DriverlessDevice()>:
c00294f2:	ba a4 b9 02 c0       	mov    edx,0xc002b9a4
c00294f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00294fb:	89 10                	mov    DWORD PTR [eax],edx
c00294fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029501:	50                   	push   eax
c0029502:	e8 53 ac fe ff       	call   c001415a <Device::~Device()>
c0029507:	83 c4 04             	add    esp,0x4
c002950a:	90                   	nop
c002950b:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c002950c <DriverlessDevice::~DriverlessDevice()>:
c002950c:	83 ec 0c             	sub    esp,0xc
c002950f:	83 ec 0c             	sub    esp,0xc
c0029512:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029516:	e8 d7 ff ff ff       	call   c00294f2 <DriverlessDevice::~DriverlessDevice()>
c002951b:	83 c4 10             	add    esp,0x10
c002951e:	83 ec 08             	sub    esp,0x8
c0029521:	68 58 01 00 00       	push   0x158
c0029526:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002952a:	e8 44 98 fe ff       	call   c0012d73 <operator delete(void*, unsigned long)>
c002952f:	83 c4 10             	add    esp,0x10
c0029532:	83 c4 0c             	add    esp,0xc
c0029535:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0029536 <LinkedList<Device>::addElement(Device*)>:
c0029536:	83 ec 0c             	sub    esp,0xc
c0029539:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002953e:	75 10                	jne    c0029550 <LinkedList<Device>::addElement(Device*)+0x1a>
c0029540:	83 ec 0c             	sub    esp,0xc
c0029543:	68 a0 b1 02 c0       	push   0xc002b1a0
c0029548:	e8 a0 13 ff ff       	call   c001a8ed <Krnl::panic(char const*)>
c002954d:	83 c4 10             	add    esp,0x10
c0029550:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029554:	8b 00                	mov    eax,DWORD PTR [eax]
c0029556:	85 c0                	test   eax,eax
c0029558:	74 3a                	je     c0029594 <LinkedList<Device>::addElement(Device*)+0x5e>
c002955a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002955e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029561:	85 c0                	test   eax,eax
c0029563:	74 2f                	je     c0029594 <LinkedList<Device>::addElement(Device*)+0x5e>
c0029565:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029569:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002956c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029570:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0029576:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002957a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002957e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029581:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029585:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029588:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0029592:	eb 68                	jmp    c00295fc <LinkedList<Device>::addElement(Device*)+0xc6>
c0029594:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029598:	8b 00                	mov    eax,DWORD PTR [eax]
c002959a:	85 c0                	test   eax,eax
c002959c:	75 4e                	jne    c00295ec <LinkedList<Device>::addElement(Device*)+0xb6>
c002959e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00295a5:	85 c0                	test   eax,eax
c00295a7:	75 43                	jne    c00295ec <LinkedList<Device>::addElement(Device*)+0xb6>
c00295a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295ad:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00295b1:	89 10                	mov    DWORD PTR [eax],edx
c00295b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295b7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00295bb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00295be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295c2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00295c5:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00295cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295d3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00295d6:	85 c0                	test   eax,eax
c00295d8:	74 22                	je     c00295fc <LinkedList<Device>::addElement(Device*)+0xc6>
c00295da:	83 ec 0c             	sub    esp,0xc
c00295dd:	68 c2 b1 02 c0       	push   0xc002b1c2
c00295e2:	e8 06 13 ff ff       	call   c001a8ed <Krnl::panic(char const*)>
c00295e7:	83 c4 10             	add    esp,0x10
c00295ea:	eb 10                	jmp    c00295fc <LinkedList<Device>::addElement(Device*)+0xc6>
c00295ec:	83 ec 0c             	sub    esp,0xc
c00295ef:	68 cc b1 02 c0       	push   0xc002b1cc
c00295f4:	e8 f4 12 ff ff       	call   c001a8ed <Krnl::panic(char const*)>
c00295f9:	83 c4 10             	add    esp,0x10
c00295fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029600:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029603:	8d 50 01             	lea    edx,[eax+0x1]
c0029606:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002960a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002960d:	90                   	nop
c002960e:	83 c4 0c             	add    esp,0xc
c0029611:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0029612 <LinkedList<Device>::LinkedList()>:
c0029612:	83 ec 0c             	sub    esp,0xc
c0029615:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029619:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002961f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029623:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002962a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002962e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029635:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029639:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002963f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029643:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002964a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002964e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029655:	83 ec 0c             	sub    esp,0xc
c0029658:	68 86 b1 02 c0       	push   0xc002b186
c002965d:	e8 f1 97 fe ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0029662:	83 c4 10             	add    esp,0x10
c0029665:	90                   	nop
c0029666:	83 c4 0c             	add    esp,0xc
c0029669:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c002966a <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c002966a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002966e:	8b 00                	mov    eax,DWORD PTR [eax]
c0029670:	85 c0                	test   eax,eax
c0029672:	75 0e                	jne    c0029682 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0029674:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029678:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002967b:	85 c0                	test   eax,eax
c002967d:	75 03                	jne    c0029682 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002967f:	b0 01                	mov    al,0x1
c0029681:	c3                   	ret    
c0029682:	b0 00                	mov    al,0x0
c0029684:	90                   	nop
c0029685:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0029686 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0029686:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002968a:	8b 00                	mov    eax,DWORD PTR [eax]
c002968c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c002968e <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c002968e:	83 ec 0c             	sub    esp,0xc
c0029691:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029695:	8b 00                	mov    eax,DWORD PTR [eax]
c0029697:	85 c0                	test   eax,eax
c0029699:	75 15                	jne    c00296b0 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c002969b:	83 ec 0c             	sub    esp,0xc
c002969e:	68 d8 b1 02 c0       	push   0xc002b1d8
c00296a3:	e8 45 12 ff ff       	call   c001a8ed <Krnl::panic(char const*)>
c00296a8:	83 c4 10             	add    esp,0x10
c00296ab:	e9 88 00 00 00       	jmp    c0029738 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c00296b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00296b7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00296ba:	85 c0                	test   eax,eax
c00296bc:	0f 95 c0             	setne  al
c00296bf:	84 c0                	test   al,al
c00296c1:	74 10                	je     c00296d3 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c00296c3:	83 ec 0c             	sub    esp,0xc
c00296c6:	68 23 b2 02 c0       	push   0xc002b223
c00296cb:	e8 1d 12 ff ff       	call   c001a8ed <Krnl::panic(char const*)>
c00296d0:	83 c4 10             	add    esp,0x10
c00296d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296d7:	8b 00                	mov    eax,DWORD PTR [eax]
c00296d9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00296dc:	85 c0                	test   eax,eax
c00296de:	0f 94 c0             	sete   al
c00296e1:	84 c0                	test   al,al
c00296e3:	74 33                	je     c0029718 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c00296e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296e9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00296ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296f3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00296fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296fe:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029701:	83 f8 01             	cmp    eax,0x1
c0029704:	74 21                	je     c0029727 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0029706:	83 ec 0c             	sub    esp,0xc
c0029709:	68 fc b1 02 c0       	push   0xc002b1fc
c002970e:	e8 da 11 ff ff       	call   c001a8ed <Krnl::panic(char const*)>
c0029713:	83 c4 10             	add    esp,0x10
c0029716:	eb 0f                	jmp    c0029727 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0029718:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002971c:	8b 00                	mov    eax,DWORD PTR [eax]
c002971e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0029721:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029725:	89 10                	mov    DWORD PTR [eax],edx
c0029727:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002972b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002972e:	8d 50 ff             	lea    edx,[eax-0x1]
c0029731:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029735:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0029738:	83 c4 0c             	add    esp,0xc
c002973b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c002973c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c002973c:	83 ec 0c             	sub    esp,0xc
c002973f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0029744:	75 10                	jne    c0029756 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0029746:	83 ec 0c             	sub    esp,0xc
c0029749:	68 a0 b1 02 c0       	push   0xc002b1a0
c002974e:	e8 9a 11 ff ff       	call   c001a8ed <Krnl::panic(char const*)>
c0029753:	83 c4 10             	add    esp,0x10
c0029756:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002975a:	8b 00                	mov    eax,DWORD PTR [eax]
c002975c:	85 c0                	test   eax,eax
c002975e:	74 34                	je     c0029794 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0029760:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029764:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029767:	85 c0                	test   eax,eax
c0029769:	74 29                	je     c0029794 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c002976b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002976f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029772:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029776:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0029779:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002977d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029781:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029784:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029788:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002978b:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0029792:	eb 65                	jmp    c00297f9 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0029794:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029798:	8b 00                	mov    eax,DWORD PTR [eax]
c002979a:	85 c0                	test   eax,eax
c002979c:	75 4b                	jne    c00297e9 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c002979e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00297a5:	85 c0                	test   eax,eax
c00297a7:	75 40                	jne    c00297e9 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00297a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297ad:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00297b1:	89 10                	mov    DWORD PTR [eax],edx
c00297b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297b7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00297bb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00297be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297c2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00297c5:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00297cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297d0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00297d3:	85 c0                	test   eax,eax
c00297d5:	74 22                	je     c00297f9 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00297d7:	83 ec 0c             	sub    esp,0xc
c00297da:	68 c2 b1 02 c0       	push   0xc002b1c2
c00297df:	e8 09 11 ff ff       	call   c001a8ed <Krnl::panic(char const*)>
c00297e4:	83 c4 10             	add    esp,0x10
c00297e7:	eb 10                	jmp    c00297f9 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00297e9:	83 ec 0c             	sub    esp,0xc
c00297ec:	68 cc b1 02 c0       	push   0xc002b1cc
c00297f1:	e8 f7 10 ff ff       	call   c001a8ed <Krnl::panic(char const*)>
c00297f6:	83 c4 10             	add    esp,0x10
c00297f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297fd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029800:	8d 50 01             	lea    edx,[eax+0x1]
c0029803:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029807:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002980a:	90                   	nop
c002980b:	83 c4 0c             	add    esp,0xc
c002980e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0029810 <ACPI::~ACPI()>:
c0029810:	83 ec 0c             	sub    esp,0xc
c0029813:	ba d0 c3 02 c0       	mov    edx,0xc002c3d0
c0029818:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002981c:	89 10                	mov    DWORD PTR [eax],edx
c002981e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029822:	83 ec 0c             	sub    esp,0xc
c0029825:	50                   	push   eax
c0029826:	e8 2f a9 fe ff       	call   c001415a <Device::~Device()>
c002982b:	83 c4 10             	add    esp,0x10
c002982e:	90                   	nop
c002982f:	83 c4 0c             	add    esp,0xc
c0029832:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0029834 <ACPI::~ACPI()>:
c0029834:	83 ec 0c             	sub    esp,0xc
c0029837:	83 ec 0c             	sub    esp,0xc
c002983a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002983e:	e8 cd ff ff ff       	call   c0029810 <ACPI::~ACPI()>
c0029843:	83 c4 10             	add    esp,0x10
c0029846:	83 ec 08             	sub    esp,0x8
c0029849:	68 68 12 00 00       	push   0x1268
c002984e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029852:	e8 1c 95 fe ff       	call   c0012d73 <operator delete(void*, unsigned long)>
c0029857:	83 c4 10             	add    esp,0x10
c002985a:	83 c4 0c             	add    esp,0xc
c002985d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c002985e <LinkedList<Device>::~LinkedList()>:
c002985e:	90                   	nop
c002985f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0029860 <LinkedList<Device>::isEmpty()>:
c0029860:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029864:	8b 00                	mov    eax,DWORD PTR [eax]
c0029866:	85 c0                	test   eax,eax
c0029868:	75 0e                	jne    c0029878 <LinkedList<Device>::isEmpty()+0x18>
c002986a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002986e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029871:	85 c0                	test   eax,eax
c0029873:	75 03                	jne    c0029878 <LinkedList<Device>::isEmpty()+0x18>
c0029875:	b0 01                	mov    al,0x1
c0029877:	c3                   	ret    
c0029878:	b0 00                	mov    al,0x0
c002987a:	90                   	nop
c002987b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c002987c <LinkedList<Device>::getFirstElement()>:
c002987c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029880:	8b 00                	mov    eax,DWORD PTR [eax]
c0029882:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0029884 <LinkedList<Device>::removeFirst()>:
c0029884:	83 ec 0c             	sub    esp,0xc
c0029887:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002988b:	8b 00                	mov    eax,DWORD PTR [eax]
c002988d:	85 c0                	test   eax,eax
c002988f:	75 15                	jne    c00298a6 <LinkedList<Device>::removeFirst()+0x22>
c0029891:	83 ec 0c             	sub    esp,0xc
c0029894:	68 d8 b1 02 c0       	push   0xc002b1d8
c0029899:	e8 4f 10 ff ff       	call   c001a8ed <Krnl::panic(char const*)>
c002989e:	83 c4 10             	add    esp,0x10
c00298a1:	e9 87 00 00 00       	jmp    c002992d <LinkedList<Device>::removeFirst()+0xa9>
c00298a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00298ad:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00298b3:	85 c0                	test   eax,eax
c00298b5:	74 10                	je     c00298c7 <LinkedList<Device>::removeFirst()+0x43>
c00298b7:	83 ec 0c             	sub    esp,0xc
c00298ba:	68 23 b2 02 c0       	push   0xc002b223
c00298bf:	e8 29 10 ff ff       	call   c001a8ed <Krnl::panic(char const*)>
c00298c4:	83 c4 10             	add    esp,0x10
c00298c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00298cd:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00298d3:	85 c0                	test   eax,eax
c00298d5:	75 33                	jne    c002990a <LinkedList<Device>::removeFirst()+0x86>
c00298d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298db:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00298e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298e5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00298ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298f0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00298f3:	83 f8 01             	cmp    eax,0x1
c00298f6:	74 24                	je     c002991c <LinkedList<Device>::removeFirst()+0x98>
c00298f8:	83 ec 0c             	sub    esp,0xc
c00298fb:	68 fc b1 02 c0       	push   0xc002b1fc
c0029900:	e8 e8 0f ff ff       	call   c001a8ed <Krnl::panic(char const*)>
c0029905:	83 c4 10             	add    esp,0x10
c0029908:	eb 12                	jmp    c002991c <LinkedList<Device>::removeFirst()+0x98>
c002990a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002990e:	8b 00                	mov    eax,DWORD PTR [eax]
c0029910:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0029916:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002991a:	89 10                	mov    DWORD PTR [eax],edx
c002991c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029920:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029923:	8d 50 ff             	lea    edx,[eax-0x1]
c0029926:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002992a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002992d:	83 c4 0c             	add    esp,0xc
c0029930:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0029932 <CPU::~CPU()>:
c0029932:	83 ec 0c             	sub    esp,0xc
c0029935:	ba c0 c7 02 c0       	mov    edx,0xc002c7c0
c002993a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002993e:	89 10                	mov    DWORD PTR [eax],edx
c0029940:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029944:	83 ec 0c             	sub    esp,0xc
c0029947:	50                   	push   eax
c0029948:	e8 0d a8 fe ff       	call   c001415a <Device::~Device()>
c002994d:	83 c4 10             	add    esp,0x10
c0029950:	90                   	nop
c0029951:	83 c4 0c             	add    esp,0xc
c0029954:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0029956 <CPU::~CPU()>:
c0029956:	83 ec 0c             	sub    esp,0xc
c0029959:	83 ec 0c             	sub    esp,0xc
c002995c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029960:	e8 cd ff ff ff       	call   c0029932 <CPU::~CPU()>
c0029965:	83 c4 10             	add    esp,0x10
c0029968:	83 ec 08             	sub    esp,0x8
c002996b:	68 98 11 00 00       	push   0x1198
c0029970:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029974:	e8 fa 93 fe ff       	call   c0012d73 <operator delete(void*, unsigned long)>
c0029979:	83 c4 10             	add    esp,0x10
c002997c:	83 c4 0c             	add    esp,0xc
c002997f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0029980 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0029980:	90                   	nop
c0029981:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0029982 <ThreadControlBlock::ThreadControlBlock()>:
c0029982:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029986:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002998d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029991:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0029998:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002999c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c00299a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00299a7:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c00299ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00299b2:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c00299b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00299bd:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c00299c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00299c5:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c00299c9:	90                   	nop
c00299ca:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c00299cc <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c00299cc:	83 ec 0c             	sub    esp,0xc
c00299cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299d3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00299d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299dd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00299e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299e8:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00299ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299f3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00299f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299fd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029a04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a08:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029a0f:	83 ec 0c             	sub    esp,0xc
c0029a12:	68 86 b1 02 c0       	push   0xc002b186
c0029a17:	e8 37 94 fe ff       	call   c0012e53 <Dbg::kprintf(char const*, ...)>
c0029a1c:	83 c4 10             	add    esp,0x10
c0029a1f:	90                   	nop
c0029a20:	83 c4 0c             	add    esp,0xc
c0029a23:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0029a24 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0029a24:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0029a28:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0029a2b:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0029a2c <Vm::_FPUState::_FPUState()>:
c0029a2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029a30:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0029a37:	90                   	nop
c0029a38:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0029a3a <PCI::~PCI()>:
c0029a3a:	83 ec 0c             	sub    esp,0xc
c0029a3d:	ba dc d8 02 c0       	mov    edx,0xc002d8dc
c0029a42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a46:	89 10                	mov    DWORD PTR [eax],edx
c0029a48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a4c:	83 ec 0c             	sub    esp,0xc
c0029a4f:	50                   	push   eax
c0029a50:	e8 d5 a0 fe ff       	call   c0013b2a <Bus::~Bus()>
c0029a55:	83 c4 10             	add    esp,0x10
c0029a58:	90                   	nop
c0029a59:	83 c4 0c             	add    esp,0xc
c0029a5c:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0029a5e <PCI::~PCI()>:
c0029a5e:	83 ec 0c             	sub    esp,0xc
c0029a61:	83 ec 0c             	sub    esp,0xc
c0029a64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a68:	e8 cd ff ff ff       	call   c0029a3a <PCI::~PCI()>
c0029a6d:	83 c4 10             	add    esp,0x10
c0029a70:	83 ec 08             	sub    esp,0x8
c0029a73:	68 58 01 00 00       	push   0x158
c0029a78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a7c:	e8 f2 92 fe ff       	call   c0012d73 <operator delete(void*, unsigned long)>
c0029a81:	83 c4 10             	add    esp,0x10
c0029a84:	83 c4 0c             	add    esp,0xc
c0029a87:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0029a88 <IDE::~IDE()>:
c0029a88:	83 ec 0c             	sub    esp,0xc
c0029a8b:	ba 40 db 02 c0       	mov    edx,0xc002db40
c0029a90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a94:	89 10                	mov    DWORD PTR [eax],edx
c0029a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a9a:	83 ec 0c             	sub    esp,0xc
c0029a9d:	50                   	push   eax
c0029a9e:	e8 a1 ab fe ff       	call   c0014644 <HardDiskController::~HardDiskController()>
c0029aa3:	83 c4 10             	add    esp,0x10
c0029aa6:	90                   	nop
c0029aa7:	83 c4 0c             	add    esp,0xc
c0029aaa:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0029aac <IDE::~IDE()>:
c0029aac:	83 ec 0c             	sub    esp,0xc
c0029aaf:	83 ec 0c             	sub    esp,0xc
c0029ab2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029ab6:	e8 cd ff ff ff       	call   c0029a88 <IDE::~IDE()>
c0029abb:	83 c4 10             	add    esp,0x10
c0029abe:	83 ec 08             	sub    esp,0x8
c0029ac1:	68 70 02 00 00       	push   0x270
c0029ac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029aca:	e8 a4 92 fe ff       	call   c0012d73 <operator delete(void*, unsigned long)>
c0029acf:	83 c4 10             	add    esp,0x10
c0029ad2:	83 c4 0c             	add    esp,0xc
c0029ad5:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0029ad6 <SATABus::~SATABus()>:
c0029ad6:	83 ec 0c             	sub    esp,0xc
c0029ad9:	ba 20 dc 02 c0       	mov    edx,0xc002dc20
c0029ade:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ae2:	89 10                	mov    DWORD PTR [eax],edx
c0029ae4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ae8:	83 ec 0c             	sub    esp,0xc
c0029aeb:	50                   	push   eax
c0029aec:	e8 53 ab fe ff       	call   c0014644 <HardDiskController::~HardDiskController()>
c0029af1:	83 c4 10             	add    esp,0x10
c0029af4:	90                   	nop
c0029af5:	83 c4 0c             	add    esp,0xc
c0029af8:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0029afa <SATABus::~SATABus()>:
c0029afa:	83 ec 0c             	sub    esp,0xc
c0029afd:	83 ec 0c             	sub    esp,0xc
c0029b00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b04:	e8 cd ff ff ff       	call   c0029ad6 <SATABus::~SATABus()>
c0029b09:	83 c4 10             	add    esp,0x10
c0029b0c:	83 ec 08             	sub    esp,0x8
c0029b0f:	68 64 01 00 00       	push   0x164
c0029b14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b18:	e8 56 92 fe ff       	call   c0012d73 <operator delete(void*, unsigned long)>
c0029b1d:	83 c4 10             	add    esp,0x10
c0029b20:	83 c4 0c             	add    esp,0xc
c0029b23:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0029b24 <ATA::~ATA()>:
c0029b24:	83 ec 0c             	sub    esp,0xc
c0029b27:	ba 6c dc 02 c0       	mov    edx,0xc002dc6c
c0029b2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b30:	89 10                	mov    DWORD PTR [eax],edx
c0029b32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b36:	83 ec 0c             	sub    esp,0xc
c0029b39:	50                   	push   eax
c0029b3a:	e8 f7 ab fe ff       	call   c0014736 <PhysicalDisk::~PhysicalDisk()>
c0029b3f:	83 c4 10             	add    esp,0x10
c0029b42:	90                   	nop
c0029b43:	83 c4 0c             	add    esp,0xc
c0029b46:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0029b48 <ATA::~ATA()>:
c0029b48:	83 ec 0c             	sub    esp,0xc
c0029b4b:	83 ec 0c             	sub    esp,0xc
c0029b4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b52:	e8 cd ff ff ff       	call   c0029b24 <ATA::~ATA()>
c0029b57:	83 c4 10             	add    esp,0x10
c0029b5a:	83 ec 08             	sub    esp,0x8
c0029b5d:	68 7c 01 00 00       	push   0x17c
c0029b62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b66:	e8 08 92 fe ff       	call   c0012d73 <operator delete(void*, unsigned long)>
c0029b6b:	83 c4 10             	add    esp,0x10
c0029b6e:	83 c4 0c             	add    esp,0xc
c0029b71:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0029b72 <ATAPI::~ATAPI()>:
c0029b72:	83 ec 0c             	sub    esp,0xc
c0029b75:	ba a4 dc 02 c0       	mov    edx,0xc002dca4
c0029b7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b7e:	89 10                	mov    DWORD PTR [eax],edx
c0029b80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b84:	83 ec 0c             	sub    esp,0xc
c0029b87:	50                   	push   eax
c0029b88:	e8 a9 ab fe ff       	call   c0014736 <PhysicalDisk::~PhysicalDisk()>
c0029b8d:	83 c4 10             	add    esp,0x10
c0029b90:	90                   	nop
c0029b91:	83 c4 0c             	add    esp,0xc
c0029b94:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0029b96 <ATAPI::~ATAPI()>:
c0029b96:	83 ec 0c             	sub    esp,0xc
c0029b99:	83 ec 0c             	sub    esp,0xc
c0029b9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029ba0:	e8 cd ff ff ff       	call   c0029b72 <ATAPI::~ATAPI()>
c0029ba5:	83 c4 10             	add    esp,0x10
c0029ba8:	83 ec 08             	sub    esp,0x8
c0029bab:	68 80 01 00 00       	push   0x180
c0029bb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029bb4:	e8 ba 91 fe ff       	call   c0012d73 <operator delete(void*, unsigned long)>
c0029bb9:	83 c4 10             	add    esp,0x10
c0029bbc:	83 c4 0c             	add    esp,0xc
c0029bbf:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0029bc0 <SATA::~SATA()>:
c0029bc0:	83 ec 0c             	sub    esp,0xc
c0029bc3:	ba 58 dd 02 c0       	mov    edx,0xc002dd58
c0029bc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029bcc:	89 10                	mov    DWORD PTR [eax],edx
c0029bce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029bd2:	83 ec 0c             	sub    esp,0xc
c0029bd5:	50                   	push   eax
c0029bd6:	e8 5b ab fe ff       	call   c0014736 <PhysicalDisk::~PhysicalDisk()>
c0029bdb:	83 c4 10             	add    esp,0x10
c0029bde:	90                   	nop
c0029bdf:	83 c4 0c             	add    esp,0xc
c0029be2:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0029be4 <SATA::~SATA()>:
c0029be4:	83 ec 0c             	sub    esp,0xc
c0029be7:	83 ec 0c             	sub    esp,0xc
c0029bea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029bee:	e8 cd ff ff ff       	call   c0029bc0 <SATA::~SATA()>
c0029bf3:	83 c4 10             	add    esp,0x10
c0029bf6:	83 ec 08             	sub    esp,0x8
c0029bf9:	68 7c 01 00 00       	push   0x17c
c0029bfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029c02:	e8 6c 91 fe ff       	call   c0012d73 <operator delete(void*, unsigned long)>
c0029c07:	83 c4 10             	add    esp,0x10
c0029c0a:	83 c4 0c             	add    esp,0xc
c0029c0d:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0029c0e <SATAPI::~SATAPI()>:
c0029c0e:	83 ec 0c             	sub    esp,0xc
c0029c11:	ba 34 de 02 c0       	mov    edx,0xc002de34
c0029c16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c1a:	89 10                	mov    DWORD PTR [eax],edx
c0029c1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c20:	83 ec 0c             	sub    esp,0xc
c0029c23:	50                   	push   eax
c0029c24:	e8 0d ab fe ff       	call   c0014736 <PhysicalDisk::~PhysicalDisk()>
c0029c29:	83 c4 10             	add    esp,0x10
c0029c2c:	90                   	nop
c0029c2d:	83 c4 0c             	add    esp,0xc
c0029c30:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0029c32 <SATAPI::~SATAPI()>:
c0029c32:	83 ec 0c             	sub    esp,0xc
c0029c35:	83 ec 0c             	sub    esp,0xc
c0029c38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029c3c:	e8 cd ff ff ff       	call   c0029c0e <SATAPI::~SATAPI()>
c0029c41:	83 c4 10             	add    esp,0x10
c0029c44:	83 ec 08             	sub    esp,0x8
c0029c47:	68 80 01 00 00       	push   0x180
c0029c4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029c50:	e8 1e 91 fe ff       	call   c0012d73 <operator delete(void*, unsigned long)>
c0029c55:	83 c4 10             	add    esp,0x10
c0029c58:	83 c4 0c             	add    esp,0xc
c0029c5b:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0029c5c <AVX::~AVX()>:
c0029c5c:	83 ec 0c             	sub    esp,0xc
c0029c5f:	ba 74 de 02 c0       	mov    edx,0xc002de74
c0029c64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c68:	89 10                	mov    DWORD PTR [eax],edx
c0029c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c6e:	83 ec 0c             	sub    esp,0xc
c0029c71:	50                   	push   eax
c0029c72:	e8 43 ab fe ff       	call   c00147ba <FPU::~FPU()>
c0029c77:	83 c4 10             	add    esp,0x10
c0029c7a:	90                   	nop
c0029c7b:	83 c4 0c             	add    esp,0xc
c0029c7e:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0029c80 <AVX::~AVX()>:
c0029c80:	83 ec 0c             	sub    esp,0xc
c0029c83:	83 ec 0c             	sub    esp,0xc
c0029c86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029c8a:	e8 cd ff ff ff       	call   c0029c5c <AVX::~AVX()>
c0029c8f:	83 c4 10             	add    esp,0x10
c0029c92:	83 ec 08             	sub    esp,0x8
c0029c95:	68 58 01 00 00       	push   0x158
c0029c9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029c9e:	e8 d0 90 fe ff       	call   c0012d73 <operator delete(void*, unsigned long)>
c0029ca3:	83 c4 10             	add    esp,0x10
c0029ca6:	83 c4 0c             	add    esp,0xc
c0029ca9:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0029caa <MMX::~MMX()>:
c0029caa:	83 ec 0c             	sub    esp,0xc
c0029cad:	ba b4 de 02 c0       	mov    edx,0xc002deb4
c0029cb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029cb6:	89 10                	mov    DWORD PTR [eax],edx
c0029cb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029cbc:	83 ec 0c             	sub    esp,0xc
c0029cbf:	50                   	push   eax
c0029cc0:	e8 f5 aa fe ff       	call   c00147ba <FPU::~FPU()>
c0029cc5:	83 c4 10             	add    esp,0x10
c0029cc8:	90                   	nop
c0029cc9:	83 c4 0c             	add    esp,0xc
c0029ccc:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0029cce <MMX::~MMX()>:
c0029cce:	83 ec 0c             	sub    esp,0xc
c0029cd1:	83 ec 0c             	sub    esp,0xc
c0029cd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029cd8:	e8 cd ff ff ff       	call   c0029caa <MMX::~MMX()>
c0029cdd:	83 c4 10             	add    esp,0x10
c0029ce0:	83 ec 08             	sub    esp,0x8
c0029ce3:	68 58 01 00 00       	push   0x158
c0029ce8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029cec:	e8 82 90 fe ff       	call   c0012d73 <operator delete(void*, unsigned long)>
c0029cf1:	83 c4 10             	add    esp,0x10
c0029cf4:	83 c4 0c             	add    esp,0xc
c0029cf7:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0029cf8 <SSE::~SSE()>:
c0029cf8:	83 ec 0c             	sub    esp,0xc
c0029cfb:	ba f4 de 02 c0       	mov    edx,0xc002def4
c0029d00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d04:	89 10                	mov    DWORD PTR [eax],edx
c0029d06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d0a:	83 ec 0c             	sub    esp,0xc
c0029d0d:	50                   	push   eax
c0029d0e:	e8 a7 aa fe ff       	call   c00147ba <FPU::~FPU()>
c0029d13:	83 c4 10             	add    esp,0x10
c0029d16:	90                   	nop
c0029d17:	83 c4 0c             	add    esp,0xc
c0029d1a:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0029d1c <SSE::~SSE()>:
c0029d1c:	83 ec 0c             	sub    esp,0xc
c0029d1f:	83 ec 0c             	sub    esp,0xc
c0029d22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029d26:	e8 cd ff ff ff       	call   c0029cf8 <SSE::~SSE()>
c0029d2b:	83 c4 10             	add    esp,0x10
c0029d2e:	83 ec 08             	sub    esp,0x8
c0029d31:	68 58 01 00 00       	push   0x158
c0029d36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029d3a:	e8 34 90 fe ff       	call   c0012d73 <operator delete(void*, unsigned long)>
c0029d3f:	83 c4 10             	add    esp,0x10
c0029d42:	83 c4 0c             	add    esp,0xc
c0029d45:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0029d46 <x87::~x87()>:
c0029d46:	83 ec 0c             	sub    esp,0xc
c0029d49:	ba 34 df 02 c0       	mov    edx,0xc002df34
c0029d4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d52:	89 10                	mov    DWORD PTR [eax],edx
c0029d54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d58:	83 ec 0c             	sub    esp,0xc
c0029d5b:	50                   	push   eax
c0029d5c:	e8 59 aa fe ff       	call   c00147ba <FPU::~FPU()>
c0029d61:	83 c4 10             	add    esp,0x10
c0029d64:	90                   	nop
c0029d65:	83 c4 0c             	add    esp,0xc
c0029d68:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0029d6a <x87::~x87()>:
c0029d6a:	83 ec 0c             	sub    esp,0xc
c0029d6d:	83 ec 0c             	sub    esp,0xc
c0029d70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029d74:	e8 cd ff ff ff       	call   c0029d46 <x87::~x87()>
c0029d79:	83 c4 10             	add    esp,0x10
c0029d7c:	83 ec 08             	sub    esp,0x8
c0029d7f:	68 58 01 00 00       	push   0x158
c0029d84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029d88:	e8 e6 8f fe ff       	call   c0012d73 <operator delete(void*, unsigned long)>
c0029d8d:	83 c4 10             	add    esp,0x10
c0029d90:	83 c4 0c             	add    esp,0xc
c0029d93:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0029d94 <IOAPIC::~IOAPIC()>:
c0029d94:	83 ec 0c             	sub    esp,0xc
c0029d97:	ba 8c e0 02 c0       	mov    edx,0xc002e08c
c0029d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029da0:	89 10                	mov    DWORD PTR [eax],edx
c0029da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029da6:	83 ec 0c             	sub    esp,0xc
c0029da9:	50                   	push   eax
c0029daa:	e8 ab a3 fe ff       	call   c001415a <Device::~Device()>
c0029daf:	83 c4 10             	add    esp,0x10
c0029db2:	90                   	nop
c0029db3:	83 c4 0c             	add    esp,0xc
c0029db6:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0029db8 <IOAPIC::~IOAPIC()>:
c0029db8:	83 ec 0c             	sub    esp,0xc
c0029dbb:	83 ec 0c             	sub    esp,0xc
c0029dbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029dc2:	e8 cd ff ff ff       	call   c0029d94 <IOAPIC::~IOAPIC()>
c0029dc7:	83 c4 10             	add    esp,0x10
c0029dca:	83 ec 08             	sub    esp,0x8
c0029dcd:	68 68 01 00 00       	push   0x168
c0029dd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029dd6:	e8 98 8f fe ff       	call   c0012d73 <operator delete(void*, unsigned long)>
c0029ddb:	83 c4 10             	add    esp,0x10
c0029dde:	83 c4 0c             	add    esp,0xc
c0029de1:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0029de2 <APIC::~APIC()>:
c0029de2:	83 ec 0c             	sub    esp,0xc
c0029de5:	ba 44 e0 02 c0       	mov    edx,0xc002e044
c0029dea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029dee:	89 10                	mov    DWORD PTR [eax],edx
c0029df0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029df4:	83 ec 0c             	sub    esp,0xc
c0029df7:	50                   	push   eax
c0029df8:	e8 87 ae fe ff       	call   c0014c84 <InterruptController::~InterruptController()>
c0029dfd:	83 c4 10             	add    esp,0x10
c0029e00:	90                   	nop
c0029e01:	83 c4 0c             	add    esp,0xc
c0029e04:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0029e06 <APIC::~APIC()>:
c0029e06:	83 ec 0c             	sub    esp,0xc
c0029e09:	83 ec 0c             	sub    esp,0xc
c0029e0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029e10:	e8 cd ff ff ff       	call   c0029de2 <APIC::~APIC()>
c0029e15:	83 c4 10             	add    esp,0x10
c0029e18:	83 ec 08             	sub    esp,0x8
c0029e1b:	68 58 21 00 00       	push   0x2158
c0029e20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029e24:	e8 4a 8f fe ff       	call   c0012d73 <operator delete(void*, unsigned long)>
c0029e29:	83 c4 10             	add    esp,0x10
c0029e2c:	83 c4 0c             	add    esp,0xc
c0029e2f:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0029e30 <PIC::~PIC()>:
c0029e30:	83 ec 0c             	sub    esp,0xc
c0029e33:	ba dc e0 02 c0       	mov    edx,0xc002e0dc
c0029e38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029e3c:	89 10                	mov    DWORD PTR [eax],edx
c0029e3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029e42:	83 ec 0c             	sub    esp,0xc
c0029e45:	50                   	push   eax
c0029e46:	e8 39 ae fe ff       	call   c0014c84 <InterruptController::~InterruptController()>
c0029e4b:	83 c4 10             	add    esp,0x10
c0029e4e:	90                   	nop
c0029e4f:	83 c4 0c             	add    esp,0xc
c0029e52:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0029e54 <PIC::~PIC()>:
c0029e54:	83 ec 0c             	sub    esp,0xc
c0029e57:	83 ec 0c             	sub    esp,0xc
c0029e5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029e5e:	e8 cd ff ff ff       	call   c0029e30 <PIC::~PIC()>
c0029e63:	83 c4 10             	add    esp,0x10
c0029e66:	83 ec 08             	sub    esp,0x8
c0029e69:	68 58 21 00 00       	push   0x2158
c0029e6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029e72:	e8 fc 8e fe ff       	call   c0012d73 <operator delete(void*, unsigned long)>
c0029e77:	83 c4 10             	add    esp,0x10
c0029e7a:	83 c4 0c             	add    esp,0xc
c0029e7d:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0029e7e <APICTimer::~APICTimer()>:
c0029e7e:	83 ec 0c             	sub    esp,0xc
c0029e81:	ba 30 e1 02 c0       	mov    edx,0xc002e130
c0029e86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029e8a:	89 10                	mov    DWORD PTR [eax],edx
c0029e8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029e90:	83 ec 0c             	sub    esp,0xc
c0029e93:	50                   	push   eax
c0029e94:	e8 a1 ce fe ff       	call   c0016d3a <Timer::~Timer()>
c0029e99:	83 c4 10             	add    esp,0x10
c0029e9c:	90                   	nop
c0029e9d:	83 c4 0c             	add    esp,0xc
c0029ea0:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0029ea2 <APICTimer::~APICTimer()>:
c0029ea2:	83 ec 0c             	sub    esp,0xc
c0029ea5:	83 ec 0c             	sub    esp,0xc
c0029ea8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029eac:	e8 cd ff ff ff       	call   c0029e7e <APICTimer::~APICTimer()>
c0029eb1:	83 c4 10             	add    esp,0x10
c0029eb4:	83 ec 08             	sub    esp,0x8
c0029eb7:	68 60 01 00 00       	push   0x160
c0029ebc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029ec0:	e8 ae 8e fe ff       	call   c0012d73 <operator delete(void*, unsigned long)>
c0029ec5:	83 c4 10             	add    esp,0x10
c0029ec8:	83 c4 0c             	add    esp,0xc
c0029ecb:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0029ecc <PIT::~PIT()>:
c0029ecc:	83 ec 0c             	sub    esp,0xc
c0029ecf:	ba 80 e1 02 c0       	mov    edx,0xc002e180
c0029ed4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ed8:	89 10                	mov    DWORD PTR [eax],edx
c0029eda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ede:	83 ec 0c             	sub    esp,0xc
c0029ee1:	50                   	push   eax
c0029ee2:	e8 53 ce fe ff       	call   c0016d3a <Timer::~Timer()>
c0029ee7:	83 c4 10             	add    esp,0x10
c0029eea:	90                   	nop
c0029eeb:	83 c4 0c             	add    esp,0xc
c0029eee:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0029ef0 <PIT::~PIT()>:
c0029ef0:	83 ec 0c             	sub    esp,0xc
c0029ef3:	83 ec 0c             	sub    esp,0xc
c0029ef6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029efa:	e8 cd ff ff ff       	call   c0029ecc <PIT::~PIT()>
c0029eff:	83 c4 10             	add    esp,0x10
c0029f02:	83 ec 08             	sub    esp,0x8
c0029f05:	68 5c 01 00 00       	push   0x15c
c0029f0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029f0e:	e8 60 8e fe ff       	call   c0012d73 <operator delete(void*, unsigned long)>
c0029f13:	83 c4 10             	add    esp,0x10
c0029f16:	83 c4 0c             	add    esp,0xc
c0029f19:	c3                   	ret    
